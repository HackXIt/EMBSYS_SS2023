
TUT_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c60  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08006df0  08006df0  00016df0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006f08  08006f08  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08006f08  08006f08  00016f08  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006f10  08006f10  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006f10  08006f10  00016f10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006f14  08006f14  00016f14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006f18  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017d4  20000074  08006f8c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001848  08006f8c  00021848  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d0e4  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003b15  00000000  00000000  0003d188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001730  00000000  00000000  00040ca0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b8  00000000  00000000  000423d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000238f3  00000000  00000000  00043988  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001aec8  00000000  00000000  0006727b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d52fd  00000000  00000000  00082143  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00157440  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006384  00000000  00000000  00157490  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006dd8 	.word	0x08006dd8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006dd8 	.word	0x08006dd8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of initTask */
  initTaskHandle = osThreadNew(InitTasks, NULL, &initTask_attributes);
 80004e8:	4a04      	ldr	r2, [pc, #16]	; (80004fc <MX_FREERTOS_Init+0x18>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4804      	ldr	r0, [pc, #16]	; (8000500 <MX_FREERTOS_Init+0x1c>)
 80004ee:	f003 f8d1 	bl	8003694 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a03      	ldr	r2, [pc, #12]	; (8000504 <MX_FREERTOS_Init+0x20>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80004f8:	bf00      	nop
 80004fa:	bd80      	pop	{r7, pc}
 80004fc:	08006e3c 	.word	0x08006e3c
 8000500:	080006b5 	.word	0x080006b5
 8000504:	20000090 	.word	0x20000090

08000508 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000508:	b580      	push	{r7, lr}
 800050a:	b088      	sub	sp, #32
 800050c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800050e:	f107 030c 	add.w	r3, r7, #12
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
 8000516:	605a      	str	r2, [r3, #4]
 8000518:	609a      	str	r2, [r3, #8]
 800051a:	60da      	str	r2, [r3, #12]
 800051c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800051e:	4b1d      	ldr	r3, [pc, #116]	; (8000594 <MX_GPIO_Init+0x8c>)
 8000520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000522:	4a1c      	ldr	r2, [pc, #112]	; (8000594 <MX_GPIO_Init+0x8c>)
 8000524:	f043 0304 	orr.w	r3, r3, #4
 8000528:	64d3      	str	r3, [r2, #76]	; 0x4c
 800052a:	4b1a      	ldr	r3, [pc, #104]	; (8000594 <MX_GPIO_Init+0x8c>)
 800052c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800052e:	f003 0304 	and.w	r3, r3, #4
 8000532:	60bb      	str	r3, [r7, #8]
 8000534:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000536:	4b17      	ldr	r3, [pc, #92]	; (8000594 <MX_GPIO_Init+0x8c>)
 8000538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800053a:	4a16      	ldr	r2, [pc, #88]	; (8000594 <MX_GPIO_Init+0x8c>)
 800053c:	f043 0301 	orr.w	r3, r3, #1
 8000540:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000542:	4b14      	ldr	r3, [pc, #80]	; (8000594 <MX_GPIO_Init+0x8c>)
 8000544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000546:	f003 0301 	and.w	r3, r3, #1
 800054a:	607b      	str	r3, [r7, #4]
 800054c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800054e:	4b11      	ldr	r3, [pc, #68]	; (8000594 <MX_GPIO_Init+0x8c>)
 8000550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000552:	4a10      	ldr	r2, [pc, #64]	; (8000594 <MX_GPIO_Init+0x8c>)
 8000554:	f043 0302 	orr.w	r3, r3, #2
 8000558:	64d3      	str	r3, [r2, #76]	; 0x4c
 800055a:	4b0e      	ldr	r3, [pc, #56]	; (8000594 <MX_GPIO_Init+0x8c>)
 800055c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800055e:	f003 0302 	and.w	r3, r3, #2
 8000562:	603b      	str	r3, [r7, #0]
 8000564:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000566:	2200      	movs	r2, #0
 8000568:	2108      	movs	r1, #8
 800056a:	480b      	ldr	r0, [pc, #44]	; (8000598 <MX_GPIO_Init+0x90>)
 800056c:	f000 fe06 	bl	800117c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000570:	2308      	movs	r3, #8
 8000572:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000574:	2301      	movs	r3, #1
 8000576:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000578:	2300      	movs	r3, #0
 800057a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800057c:	2300      	movs	r3, #0
 800057e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	4619      	mov	r1, r3
 8000586:	4804      	ldr	r0, [pc, #16]	; (8000598 <MX_GPIO_Init+0x90>)
 8000588:	f000 fc8e 	bl	8000ea8 <HAL_GPIO_Init>

}
 800058c:	bf00      	nop
 800058e:	3720      	adds	r7, #32
 8000590:	46bd      	mov	sp, r7
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40021000 	.word	0x40021000
 8000598:	48000400 	.word	0x48000400

0800059c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005a0:	f000 fb67 	bl	8000c72 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005a4:	f000 f80c 	bl	80005c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005a8:	f7ff ffae 	bl	8000508 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80005ac:	f000 fa9e 	bl	8000aec <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80005b0:	f003 f826 	bl	8003600 <osKernelInitialize>
  MX_FREERTOS_Init();
 80005b4:	f7ff ff96 	bl	80004e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80005b8:	f003 f846 	bl	8003648 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005bc:	e7fe      	b.n	80005bc <main+0x20>
	...

080005c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005c0:	b580      	push	{r7, lr}
 80005c2:	b096      	sub	sp, #88	; 0x58
 80005c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005c6:	f107 0314 	add.w	r3, r7, #20
 80005ca:	2244      	movs	r2, #68	; 0x44
 80005cc:	2100      	movs	r1, #0
 80005ce:	4618      	mov	r0, r3
 80005d0:	f006 fb30 	bl	8006c34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005d4:	463b      	mov	r3, r7
 80005d6:	2200      	movs	r2, #0
 80005d8:	601a      	str	r2, [r3, #0]
 80005da:	605a      	str	r2, [r3, #4]
 80005dc:	609a      	str	r2, [r3, #8]
 80005de:	60da      	str	r2, [r3, #12]
 80005e0:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005e2:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005e6:	f000 fdff 	bl	80011e8 <HAL_PWREx_ControlVoltageScaling>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d001      	beq.n	80005f4 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005f0:	f000 f85a 	bl	80006a8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005f4:	f000 fdda 	bl	80011ac <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005f8:	4b21      	ldr	r3, [pc, #132]	; (8000680 <SystemClock_Config+0xc0>)
 80005fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005fe:	4a20      	ldr	r2, [pc, #128]	; (8000680 <SystemClock_Config+0xc0>)
 8000600:	f023 0318 	bic.w	r3, r3, #24
 8000604:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000608:	2314      	movs	r3, #20
 800060a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800060c:	2301      	movs	r3, #1
 800060e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000610:	2301      	movs	r3, #1
 8000612:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000614:	2300      	movs	r3, #0
 8000616:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000618:	2360      	movs	r3, #96	; 0x60
 800061a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800061c:	2302      	movs	r3, #2
 800061e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000620:	2301      	movs	r3, #1
 8000622:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000628:	2310      	movs	r3, #16
 800062a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800062c:	2307      	movs	r3, #7
 800062e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000630:	2302      	movs	r3, #2
 8000632:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000634:	2302      	movs	r3, #2
 8000636:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000638:	f107 0314 	add.w	r3, r7, #20
 800063c:	4618      	mov	r0, r3
 800063e:	f000 fe29 	bl	8001294 <HAL_RCC_OscConfig>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d001      	beq.n	800064c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000648:	f000 f82e 	bl	80006a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800064c:	230f      	movs	r3, #15
 800064e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000650:	2303      	movs	r3, #3
 8000652:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000658:	2300      	movs	r3, #0
 800065a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800065c:	2300      	movs	r3, #0
 800065e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000660:	463b      	mov	r3, r7
 8000662:	2101      	movs	r1, #1
 8000664:	4618      	mov	r0, r3
 8000666:	f001 fa29 	bl	8001abc <HAL_RCC_ClockConfig>
 800066a:	4603      	mov	r3, r0
 800066c:	2b00      	cmp	r3, #0
 800066e:	d001      	beq.n	8000674 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000670:	f000 f81a 	bl	80006a8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000674:	f001 fe6e 	bl	8002354 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000678:	bf00      	nop
 800067a:	3758      	adds	r7, #88	; 0x58
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40021000 	.word	0x40021000

08000684 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000684:	b580      	push	{r7, lr}
 8000686:	b082      	sub	sp, #8
 8000688:	af00      	add	r7, sp, #0
 800068a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	681b      	ldr	r3, [r3, #0]
 8000690:	4a04      	ldr	r2, [pc, #16]	; (80006a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000692:	4293      	cmp	r3, r2
 8000694:	d101      	bne.n	800069a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000696:	f000 fb05 	bl	8000ca4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800069a:	bf00      	nop
 800069c:	3708      	adds	r7, #8
 800069e:	46bd      	mov	sp, r7
 80006a0:	bd80      	pop	{r7, pc}
 80006a2:	bf00      	nop
 80006a4:	40001000 	.word	0x40001000

080006a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006a8:	b480      	push	{r7}
 80006aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006ac:	b672      	cpsid	i
}
 80006ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006b0:	e7fe      	b.n	80006b0 <Error_Handler+0x8>
	...

080006b4 <InitTasks>:
char *dest_string;

osSemaphoreId_t read_x;
osSemaphoreId_t write_x;

void InitTasks(void *argument) {
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b09e      	sub	sp, #120	; 0x78
 80006b8:	af00      	add	r7, sp, #0
 80006ba:	6078      	str	r0, [r7, #4]
	osThreadAttr_t receiver_attributes = {
 80006bc:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80006c0:	2224      	movs	r2, #36	; 0x24
 80006c2:	2100      	movs	r1, #0
 80006c4:	4618      	mov	r0, r3
 80006c6:	f006 fab5 	bl	8006c34 <memset>
 80006ca:	4b20      	ldr	r3, [pc, #128]	; (800074c <InitTasks+0x98>)
 80006cc:	657b      	str	r3, [r7, #84]	; 0x54
 80006ce:	2308      	movs	r3, #8
 80006d0:	66fb      	str	r3, [r7, #108]	; 0x6c
			.name = "receiverTask",
			.priority = osPriorityLow,
	};
	osThreadAttr_t sender_attributes = {
 80006d2:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80006d6:	2224      	movs	r2, #36	; 0x24
 80006d8:	2100      	movs	r1, #0
 80006da:	4618      	mov	r0, r3
 80006dc:	f006 faaa 	bl	8006c34 <memset>
 80006e0:	4b1b      	ldr	r3, [pc, #108]	; (8000750 <InitTasks+0x9c>)
 80006e2:	633b      	str	r3, [r7, #48]	; 0x30
 80006e4:	2308      	movs	r3, #8
 80006e6:	64bb      	str	r3, [r7, #72]	; 0x48
			.name = "senderTask",
			.priority = osPriorityLow,
	};
	osThreadAttr_t monitor_attributes = {
 80006e8:	f107 030c 	add.w	r3, r7, #12
 80006ec:	2224      	movs	r2, #36	; 0x24
 80006ee:	2100      	movs	r1, #0
 80006f0:	4618      	mov	r0, r3
 80006f2:	f006 fa9f 	bl	8006c34 <memset>
 80006f6:	4b17      	ldr	r3, [pc, #92]	; (8000754 <InitTasks+0xa0>)
 80006f8:	60fb      	str	r3, [r7, #12]
 80006fa:	2308      	movs	r3, #8
 80006fc:	627b      	str	r3, [r7, #36]	; 0x24
			.name = "monitorTask",
			.priority = osPriorityLow,
	};

	read_x = osSemaphoreNew(1, 0, NULL);
 80006fe:	2200      	movs	r2, #0
 8000700:	2100      	movs	r1, #0
 8000702:	2001      	movs	r0, #1
 8000704:	f003 f85e 	bl	80037c4 <osSemaphoreNew>
 8000708:	4603      	mov	r3, r0
 800070a:	4a13      	ldr	r2, [pc, #76]	; (8000758 <InitTasks+0xa4>)
 800070c:	6013      	str	r3, [r2, #0]
	write_x = osSemaphoreNew(1, 0, NULL);
 800070e:	2200      	movs	r2, #0
 8000710:	2100      	movs	r1, #0
 8000712:	2001      	movs	r0, #1
 8000714:	f003 f856 	bl	80037c4 <osSemaphoreNew>
 8000718:	4603      	mov	r3, r0
 800071a:	4a10      	ldr	r2, [pc, #64]	; (800075c <InitTasks+0xa8>)
 800071c:	6013      	str	r3, [r2, #0]

	osThreadNew(ReceiverTask, NULL, &receiver_attributes);
 800071e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000722:	461a      	mov	r2, r3
 8000724:	2100      	movs	r1, #0
 8000726:	480e      	ldr	r0, [pc, #56]	; (8000760 <InitTasks+0xac>)
 8000728:	f002 ffb4 	bl	8003694 <osThreadNew>
	osThreadNew(SenderTask, NULL, &sender_attributes);
 800072c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000730:	461a      	mov	r2, r3
 8000732:	2100      	movs	r1, #0
 8000734:	480b      	ldr	r0, [pc, #44]	; (8000764 <InitTasks+0xb0>)
 8000736:	f002 ffad 	bl	8003694 <osThreadNew>
	osThreadNew(MonitorTask, NULL, &monitor_attributes);
 800073a:	f107 030c 	add.w	r3, r7, #12
 800073e:	461a      	mov	r2, r3
 8000740:	2100      	movs	r1, #0
 8000742:	4809      	ldr	r0, [pc, #36]	; (8000768 <InitTasks+0xb4>)
 8000744:	f002 ffa6 	bl	8003694 <osThreadNew>
	osThreadExit();
 8000748:	f003 f836 	bl	80037b8 <osThreadExit>
 800074c:	08006dfc 	.word	0x08006dfc
 8000750:	08006e0c 	.word	0x08006e0c
 8000754:	08006e18 	.word	0x08006e18
 8000758:	2000009c 	.word	0x2000009c
 800075c:	200000a0 	.word	0x200000a0
 8000760:	0800076d 	.word	0x0800076d
 8000764:	08000859 	.word	0x08000859
 8000768:	080008b1 	.word	0x080008b1

0800076c <ReceiverTask>:
}

void ReceiverTask(void *argument) {
 800076c:	b580      	push	{r7, lr}
 800076e:	b086      	sub	sp, #24
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
	char rx_c = '0';
 8000774:	2330      	movs	r3, #48	; 0x30
 8000776:	753b      	strb	r3, [r7, #20]
	uint8_t rx_index = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	75fb      	strb	r3, [r7, #23]
	char rx_buffer[10];
	HAL_StatusTypeDef ret;
	for(;;) {
		ret = HAL_UART_Receive(&huart2, (uint8_t*)&rx_c, 1, HAL_MAX_DELAY);
 800077c:	f107 0114 	add.w	r1, r7, #20
 8000780:	f04f 33ff 	mov.w	r3, #4294967295
 8000784:	2201      	movs	r2, #1
 8000786:	4831      	ldr	r0, [pc, #196]	; (800084c <ReceiverTask+0xe0>)
 8000788:	f002 fa48 	bl	8002c1c <HAL_UART_Receive>
 800078c:	4603      	mov	r3, r0
 800078e:	75bb      	strb	r3, [r7, #22]
		if(rx_c == '\r') {
 8000790:	7d3b      	ldrb	r3, [r7, #20]
 8000792:	2b0d      	cmp	r3, #13
 8000794:	d147      	bne.n	8000826 <ReceiverTask+0xba>
			rx_buffer[rx_index] = rx_c;
 8000796:	7dfb      	ldrb	r3, [r7, #23]
 8000798:	7d3a      	ldrb	r2, [r7, #20]
 800079a:	3318      	adds	r3, #24
 800079c:	443b      	add	r3, r7
 800079e:	f803 2c10 	strb.w	r2, [r3, #-16]
			rx_buffer[rx_index+1] = '\n';
 80007a2:	7dfb      	ldrb	r3, [r7, #23]
 80007a4:	3301      	adds	r3, #1
 80007a6:	3318      	adds	r3, #24
 80007a8:	443b      	add	r3, r7
 80007aa:	220a      	movs	r2, #10
 80007ac:	f803 2c10 	strb.w	r2, [r3, #-16]
			rx_buffer[rx_index+2] = '\0';
 80007b0:	7dfb      	ldrb	r3, [r7, #23]
 80007b2:	3302      	adds	r3, #2
 80007b4:	3318      	adds	r3, #24
 80007b6:	443b      	add	r3, r7
 80007b8:	2200      	movs	r2, #0
 80007ba:	f803 2c10 	strb.w	r2, [r3, #-16]
			shared_string = pvPortMalloc(sizeof(char) * strlen(rx_buffer)+1);
 80007be:	f107 0308 	add.w	r3, r7, #8
 80007c2:	4618      	mov	r0, r3
 80007c4:	f7ff fd04 	bl	80001d0 <strlen>
 80007c8:	4603      	mov	r3, r0
 80007ca:	3301      	adds	r3, #1
 80007cc:	4618      	mov	r0, r3
 80007ce:	f006 f813 	bl	80067f8 <pvPortMalloc>
 80007d2:	4603      	mov	r3, r0
 80007d4:	4a1e      	ldr	r2, [pc, #120]	; (8000850 <ReceiverTask+0xe4>)
 80007d6:	6013      	str	r3, [r2, #0]
			if(shared_string != NULL) {
 80007d8:	4b1d      	ldr	r3, [pc, #116]	; (8000850 <ReceiverTask+0xe4>)
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	2b00      	cmp	r3, #0
 80007de:	d013      	beq.n	8000808 <ReceiverTask+0x9c>
				strcpy(shared_string, rx_buffer);
 80007e0:	4b1b      	ldr	r3, [pc, #108]	; (8000850 <ReceiverTask+0xe4>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	f107 0208 	add.w	r2, r7, #8
 80007e8:	4611      	mov	r1, r2
 80007ea:	4618      	mov	r0, r3
 80007ec:	f006 fa94 	bl	8006d18 <strcpy>
				uint8_t size_x = sizeof(*shared_string) / sizeof(shared_string[0]) - 1;
 80007f0:	2300      	movs	r3, #0
 80007f2:	757b      	strb	r3, [r7, #21]
				memset(shared_string[size_x], '\0', 1);
 80007f4:	4b16      	ldr	r3, [pc, #88]	; (8000850 <ReceiverTask+0xe4>)
 80007f6:	681a      	ldr	r2, [r3, #0]
 80007f8:	7d7b      	ldrb	r3, [r7, #21]
 80007fa:	4413      	add	r3, r2
 80007fc:	781b      	ldrb	r3, [r3, #0]
 80007fe:	2201      	movs	r2, #1
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f006 fa16 	bl	8006c34 <memset>
			}
			rx_index = 0;
 8000808:	2300      	movs	r3, #0
 800080a:	75fb      	strb	r3, [r7, #23]
			memset(rx_buffer, '\0', sizeof(rx_buffer));
 800080c:	f107 0308 	add.w	r3, r7, #8
 8000810:	220a      	movs	r2, #10
 8000812:	2100      	movs	r1, #0
 8000814:	4618      	mov	r0, r3
 8000816:	f006 fa0d 	bl	8006c34 <memset>
			osSemaphoreRelease(read_x);
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <ReceiverTask+0xe8>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4618      	mov	r0, r3
 8000820:	f003 f8ac 	bl	800397c <osSemaphoreRelease>
 8000824:	e7aa      	b.n	800077c <ReceiverTask+0x10>
		} else if(ret == HAL_OK) {
 8000826:	7dbb      	ldrb	r3, [r7, #22]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d1a7      	bne.n	800077c <ReceiverTask+0x10>
			rx_buffer[rx_index] = rx_c;
 800082c:	7dfb      	ldrb	r3, [r7, #23]
 800082e:	7d3a      	ldrb	r2, [r7, #20]
 8000830:	3318      	adds	r3, #24
 8000832:	443b      	add	r3, r7
 8000834:	f803 2c10 	strb.w	r2, [r3, #-16]
			rx_index++;
 8000838:	7dfb      	ldrb	r3, [r7, #23]
 800083a:	3301      	adds	r3, #1
 800083c:	75fb      	strb	r3, [r7, #23]
			if(rx_index >= 8) {
 800083e:	7dfb      	ldrb	r3, [r7, #23]
 8000840:	2b07      	cmp	r3, #7
 8000842:	d99b      	bls.n	800077c <ReceiverTask+0x10>
				rx_index = 0;
 8000844:	2300      	movs	r3, #0
 8000846:	75fb      	strb	r3, [r7, #23]
		ret = HAL_UART_Receive(&huart2, (uint8_t*)&rx_c, 1, HAL_MAX_DELAY);
 8000848:	e798      	b.n	800077c <ReceiverTask+0x10>
 800084a:	bf00      	nop
 800084c:	200000f0 	.word	0x200000f0
 8000850:	20000094 	.word	0x20000094
 8000854:	2000009c 	.word	0x2000009c

08000858 <SenderTask>:
			}
		}
	}
}

void SenderTask(void *argument) {
 8000858:	b590      	push	{r4, r7, lr}
 800085a:	b085      	sub	sp, #20
 800085c:	af00      	add	r7, sp, #0
 800085e:	6078      	str	r0, [r7, #4]
	char *buffer;
	uint8_t counter = 0;
 8000860:	2300      	movs	r3, #0
 8000862:	73fb      	strb	r3, [r7, #15]
	osStatus_t ret;
	for(;;) {
		ret = osSemaphoreAcquire(write_x, osWaitForever);
 8000864:	4b0f      	ldr	r3, [pc, #60]	; (80008a4 <SenderTask+0x4c>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	f04f 31ff 	mov.w	r1, #4294967295
 800086c:	4618      	mov	r0, r3
 800086e:	f003 f833 	bl	80038d8 <osSemaphoreAcquire>
 8000872:	60b8      	str	r0, [r7, #8]
		if(ret == osOK) {
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	2b00      	cmp	r3, #0
 8000878:	d1f4      	bne.n	8000864 <SenderTask+0xc>
			HAL_UART_Transmit(&huart2, (uint8_t*)dest_string, strlen(dest_string), 10000);
 800087a:	4b0b      	ldr	r3, [pc, #44]	; (80008a8 <SenderTask+0x50>)
 800087c:	681c      	ldr	r4, [r3, #0]
 800087e:	4b0a      	ldr	r3, [pc, #40]	; (80008a8 <SenderTask+0x50>)
 8000880:	681b      	ldr	r3, [r3, #0]
 8000882:	4618      	mov	r0, r3
 8000884:	f7ff fca4 	bl	80001d0 <strlen>
 8000888:	4603      	mov	r3, r0
 800088a:	b29a      	uxth	r2, r3
 800088c:	f242 7310 	movw	r3, #10000	; 0x2710
 8000890:	4621      	mov	r1, r4
 8000892:	4806      	ldr	r0, [pc, #24]	; (80008ac <SenderTask+0x54>)
 8000894:	f002 f92e 	bl	8002af4 <HAL_UART_Transmit>
			vPortFree(dest_string);
 8000898:	4b03      	ldr	r3, [pc, #12]	; (80008a8 <SenderTask+0x50>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4618      	mov	r0, r3
 800089e:	f006 f877 	bl	8006990 <vPortFree>
		ret = osSemaphoreAcquire(write_x, osWaitForever);
 80008a2:	e7df      	b.n	8000864 <SenderTask+0xc>
 80008a4:	200000a0 	.word	0x200000a0
 80008a8:	20000098 	.word	0x20000098
 80008ac:	200000f0 	.word	0x200000f0

080008b0 <MonitorTask>:
		}
	}
}

void MonitorTask(void *argument) {
 80008b0:	b580      	push	{r7, lr}
 80008b2:	b086      	sub	sp, #24
 80008b4:	af00      	add	r7, sp, #0
 80008b6:	6078      	str	r0, [r7, #4]
	uint8_t counter = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	75fb      	strb	r3, [r7, #23]
	osStatus_t ret;
	for(;;) {
		ret = osSemaphoreAcquire(read_x, osWaitForever);
 80008bc:	4b1d      	ldr	r3, [pc, #116]	; (8000934 <MonitorTask+0x84>)
 80008be:	681b      	ldr	r3, [r3, #0]
 80008c0:	f04f 31ff 	mov.w	r1, #4294967295
 80008c4:	4618      	mov	r0, r3
 80008c6:	f003 f807 	bl	80038d8 <osSemaphoreAcquire>
 80008ca:	6138      	str	r0, [r7, #16]
		if(ret == osOK) {
 80008cc:	693b      	ldr	r3, [r7, #16]
 80008ce:	2b00      	cmp	r3, #0
 80008d0:	d1f4      	bne.n	80008bc <MonitorTask+0xc>
			dest_string = pvPortMalloc(sizeof(char) * strlen(shared_string)+1);
 80008d2:	4b19      	ldr	r3, [pc, #100]	; (8000938 <MonitorTask+0x88>)
 80008d4:	681b      	ldr	r3, [r3, #0]
 80008d6:	4618      	mov	r0, r3
 80008d8:	f7ff fc7a 	bl	80001d0 <strlen>
 80008dc:	4603      	mov	r3, r0
 80008de:	3301      	adds	r3, #1
 80008e0:	4618      	mov	r0, r3
 80008e2:	f005 ff89 	bl	80067f8 <pvPortMalloc>
 80008e6:	4603      	mov	r3, r0
 80008e8:	4a14      	ldr	r2, [pc, #80]	; (800093c <MonitorTask+0x8c>)
 80008ea:	6013      	str	r3, [r2, #0]
			if(dest_string != NULL) {
 80008ec:	4b13      	ldr	r3, [pc, #76]	; (800093c <MonitorTask+0x8c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d013      	beq.n	800091c <MonitorTask+0x6c>
				strcpy(dest_string, shared_string);
 80008f4:	4b11      	ldr	r3, [pc, #68]	; (800093c <MonitorTask+0x8c>)
 80008f6:	681b      	ldr	r3, [r3, #0]
 80008f8:	4a0f      	ldr	r2, [pc, #60]	; (8000938 <MonitorTask+0x88>)
 80008fa:	6812      	ldr	r2, [r2, #0]
 80008fc:	4611      	mov	r1, r2
 80008fe:	4618      	mov	r0, r3
 8000900:	f006 fa0a 	bl	8006d18 <strcpy>
				uint8_t size_x = sizeof(*dest_string) / sizeof(dest_string[0]) - 1;
 8000904:	2300      	movs	r3, #0
 8000906:	73fb      	strb	r3, [r7, #15]
				memset(dest_string[size_x], '\0', 1);
 8000908:	4b0c      	ldr	r3, [pc, #48]	; (800093c <MonitorTask+0x8c>)
 800090a:	681a      	ldr	r2, [r3, #0]
 800090c:	7bfb      	ldrb	r3, [r7, #15]
 800090e:	4413      	add	r3, r2
 8000910:	781b      	ldrb	r3, [r3, #0]
 8000912:	2201      	movs	r2, #1
 8000914:	2100      	movs	r1, #0
 8000916:	4618      	mov	r0, r3
 8000918:	f006 f98c 	bl	8006c34 <memset>
			}
			vPortFree(shared_string);
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MonitorTask+0x88>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	4618      	mov	r0, r3
 8000922:	f006 f835 	bl	8006990 <vPortFree>
			osSemaphoreRelease(write_x);
 8000926:	4b06      	ldr	r3, [pc, #24]	; (8000940 <MonitorTask+0x90>)
 8000928:	681b      	ldr	r3, [r3, #0]
 800092a:	4618      	mov	r0, r3
 800092c:	f003 f826 	bl	800397c <osSemaphoreRelease>
		ret = osSemaphoreAcquire(read_x, osWaitForever);
 8000930:	e7c4      	b.n	80008bc <MonitorTask+0xc>
 8000932:	bf00      	nop
 8000934:	2000009c 	.word	0x2000009c
 8000938:	20000094 	.word	0x20000094
 800093c:	20000098 	.word	0x20000098
 8000940:	200000a0 	.word	0x200000a0

08000944 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000944:	b580      	push	{r7, lr}
 8000946:	b082      	sub	sp, #8
 8000948:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_MspInit+0x4c>)
 800094c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800094e:	4a10      	ldr	r2, [pc, #64]	; (8000990 <HAL_MspInit+0x4c>)
 8000950:	f043 0301 	orr.w	r3, r3, #1
 8000954:	6613      	str	r3, [r2, #96]	; 0x60
 8000956:	4b0e      	ldr	r3, [pc, #56]	; (8000990 <HAL_MspInit+0x4c>)
 8000958:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800095a:	f003 0301 	and.w	r3, r3, #1
 800095e:	607b      	str	r3, [r7, #4]
 8000960:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000962:	4b0b      	ldr	r3, [pc, #44]	; (8000990 <HAL_MspInit+0x4c>)
 8000964:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000966:	4a0a      	ldr	r2, [pc, #40]	; (8000990 <HAL_MspInit+0x4c>)
 8000968:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800096c:	6593      	str	r3, [r2, #88]	; 0x58
 800096e:	4b08      	ldr	r3, [pc, #32]	; (8000990 <HAL_MspInit+0x4c>)
 8000970:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000976:	603b      	str	r3, [r7, #0]
 8000978:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800097a:	2200      	movs	r2, #0
 800097c:	210f      	movs	r1, #15
 800097e:	f06f 0001 	mvn.w	r0, #1
 8000982:	f000 fa67 	bl	8000e54 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000986:	bf00      	nop
 8000988:	3708      	adds	r7, #8
 800098a:	46bd      	mov	sp, r7
 800098c:	bd80      	pop	{r7, pc}
 800098e:	bf00      	nop
 8000990:	40021000 	.word	0x40021000

08000994 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b08e      	sub	sp, #56	; 0x38
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800099c:	2300      	movs	r3, #0
 800099e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009a2:	4b34      	ldr	r3, [pc, #208]	; (8000a74 <HAL_InitTick+0xe0>)
 80009a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009a6:	4a33      	ldr	r2, [pc, #204]	; (8000a74 <HAL_InitTick+0xe0>)
 80009a8:	f043 0310 	orr.w	r3, r3, #16
 80009ac:	6593      	str	r3, [r2, #88]	; 0x58
 80009ae:	4b31      	ldr	r3, [pc, #196]	; (8000a74 <HAL_InitTick+0xe0>)
 80009b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009b2:	f003 0310 	and.w	r3, r3, #16
 80009b6:	60fb      	str	r3, [r7, #12]
 80009b8:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ba:	f107 0210 	add.w	r2, r7, #16
 80009be:	f107 0314 	add.w	r3, r7, #20
 80009c2:	4611      	mov	r1, r2
 80009c4:	4618      	mov	r0, r3
 80009c6:	f001 fa3d 	bl	8001e44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009ca:	6a3b      	ldr	r3, [r7, #32]
 80009cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d103      	bne.n	80009dc <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009d4:	f001 fa0a 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 80009d8:	6378      	str	r0, [r7, #52]	; 0x34
 80009da:	e004      	b.n	80009e6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009dc:	f001 fa06 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 80009e0:	4603      	mov	r3, r0
 80009e2:	005b      	lsls	r3, r3, #1
 80009e4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e8:	4a23      	ldr	r2, [pc, #140]	; (8000a78 <HAL_InitTick+0xe4>)
 80009ea:	fba2 2303 	umull	r2, r3, r2, r3
 80009ee:	0c9b      	lsrs	r3, r3, #18
 80009f0:	3b01      	subs	r3, #1
 80009f2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009f4:	4b21      	ldr	r3, [pc, #132]	; (8000a7c <HAL_InitTick+0xe8>)
 80009f6:	4a22      	ldr	r2, [pc, #136]	; (8000a80 <HAL_InitTick+0xec>)
 80009f8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009fa:	4b20      	ldr	r3, [pc, #128]	; (8000a7c <HAL_InitTick+0xe8>)
 80009fc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a00:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a02:	4a1e      	ldr	r2, [pc, #120]	; (8000a7c <HAL_InitTick+0xe8>)
 8000a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a06:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a08:	4b1c      	ldr	r3, [pc, #112]	; (8000a7c <HAL_InitTick+0xe8>)
 8000a0a:	2200      	movs	r2, #0
 8000a0c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a0e:	4b1b      	ldr	r3, [pc, #108]	; (8000a7c <HAL_InitTick+0xe8>)
 8000a10:	2200      	movs	r2, #0
 8000a12:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a14:	4b19      	ldr	r3, [pc, #100]	; (8000a7c <HAL_InitTick+0xe8>)
 8000a16:	2200      	movs	r2, #0
 8000a18:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a1a:	4818      	ldr	r0, [pc, #96]	; (8000a7c <HAL_InitTick+0xe8>)
 8000a1c:	f001 fd9c 	bl	8002558 <HAL_TIM_Base_Init>
 8000a20:	4603      	mov	r3, r0
 8000a22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d11b      	bne.n	8000a66 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a2e:	4813      	ldr	r0, [pc, #76]	; (8000a7c <HAL_InitTick+0xe8>)
 8000a30:	f001 fdf4 	bl	800261c <HAL_TIM_Base_Start_IT>
 8000a34:	4603      	mov	r3, r0
 8000a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d111      	bne.n	8000a66 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a42:	2036      	movs	r0, #54	; 0x36
 8000a44:	f000 fa22 	bl	8000e8c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	2b0f      	cmp	r3, #15
 8000a4c:	d808      	bhi.n	8000a60 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a4e:	2200      	movs	r2, #0
 8000a50:	6879      	ldr	r1, [r7, #4]
 8000a52:	2036      	movs	r0, #54	; 0x36
 8000a54:	f000 f9fe 	bl	8000e54 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a58:	4a0a      	ldr	r2, [pc, #40]	; (8000a84 <HAL_InitTick+0xf0>)
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	6013      	str	r3, [r2, #0]
 8000a5e:	e002      	b.n	8000a66 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a60:	2301      	movs	r3, #1
 8000a62:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a66:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3738      	adds	r7, #56	; 0x38
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40021000 	.word	0x40021000
 8000a78:	431bde83 	.word	0x431bde83
 8000a7c:	200000a4 	.word	0x200000a4
 8000a80:	40001000 	.word	0x40001000
 8000a84:	20000004 	.word	0x20000004

08000a88 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <NMI_Handler+0x4>

08000a8e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a8e:	b480      	push	{r7}
 8000a90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a92:	e7fe      	b.n	8000a92 <HardFault_Handler+0x4>

08000a94 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a94:	b480      	push	{r7}
 8000a96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a98:	e7fe      	b.n	8000a98 <MemManage_Handler+0x4>

08000a9a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a9a:	b480      	push	{r7}
 8000a9c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a9e:	e7fe      	b.n	8000a9e <BusFault_Handler+0x4>

08000aa0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000aa4:	e7fe      	b.n	8000aa4 <UsageFault_Handler+0x4>

08000aa6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aa6:	b480      	push	{r7}
 8000aa8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aaa:	bf00      	nop
 8000aac:	46bd      	mov	sp, r7
 8000aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ab2:	4770      	bx	lr

08000ab4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ab8:	4802      	ldr	r0, [pc, #8]	; (8000ac4 <TIM6_DAC_IRQHandler+0x10>)
 8000aba:	f001 fe03 	bl	80026c4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	200000a4 	.word	0x200000a4

08000ac8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000acc:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <SystemInit+0x20>)
 8000ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ad2:	4a05      	ldr	r2, [pc, #20]	; (8000ae8 <SystemInit+0x20>)
 8000ad4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ad8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000adc:	bf00      	nop
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae4:	4770      	bx	lr
 8000ae6:	bf00      	nop
 8000ae8:	e000ed00 	.word	0xe000ed00

08000aec <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000af0:	4b14      	ldr	r3, [pc, #80]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000af2:	4a15      	ldr	r2, [pc, #84]	; (8000b48 <MX_USART2_UART_Init+0x5c>)
 8000af4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000af6:	4b13      	ldr	r3, [pc, #76]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000af8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000afc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000afe:	4b11      	ldr	r3, [pc, #68]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b00:	2200      	movs	r2, #0
 8000b02:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b04:	4b0f      	ldr	r3, [pc, #60]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b12:	220c      	movs	r2, #12
 8000b14:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b28:	4b06      	ldr	r3, [pc, #24]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	; (8000b44 <MX_USART2_UART_Init+0x58>)
 8000b30:	f001 ff92 	bl	8002a58 <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000b3a:	f7ff fdb5 	bl	80006a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	200000f0 	.word	0x200000f0
 8000b48:	40004400 	.word	0x40004400

08000b4c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b09e      	sub	sp, #120	; 0x78
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b54:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b58:	2200      	movs	r2, #0
 8000b5a:	601a      	str	r2, [r3, #0]
 8000b5c:	605a      	str	r2, [r3, #4]
 8000b5e:	609a      	str	r2, [r3, #8]
 8000b60:	60da      	str	r2, [r3, #12]
 8000b62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b64:	f107 0310 	add.w	r3, r7, #16
 8000b68:	2254      	movs	r2, #84	; 0x54
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	4618      	mov	r0, r3
 8000b6e:	f006 f861 	bl	8006c34 <memset>
  if(uartHandle->Instance==USART2)
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	681b      	ldr	r3, [r3, #0]
 8000b76:	4a28      	ldr	r2, [pc, #160]	; (8000c18 <HAL_UART_MspInit+0xcc>)
 8000b78:	4293      	cmp	r3, r2
 8000b7a:	d148      	bne.n	8000c0e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b7c:	2302      	movs	r3, #2
 8000b7e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b80:	2300      	movs	r3, #0
 8000b82:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b84:	f107 0310 	add.w	r3, r7, #16
 8000b88:	4618      	mov	r0, r3
 8000b8a:	f001 f9ed 	bl	8001f68 <HAL_RCCEx_PeriphCLKConfig>
 8000b8e:	4603      	mov	r3, r0
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	d001      	beq.n	8000b98 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b94:	f7ff fd88 	bl	80006a8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b98:	4b20      	ldr	r3, [pc, #128]	; (8000c1c <HAL_UART_MspInit+0xd0>)
 8000b9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b9c:	4a1f      	ldr	r2, [pc, #124]	; (8000c1c <HAL_UART_MspInit+0xd0>)
 8000b9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ba2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ba4:	4b1d      	ldr	r3, [pc, #116]	; (8000c1c <HAL_UART_MspInit+0xd0>)
 8000ba6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ba8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bac:	60fb      	str	r3, [r7, #12]
 8000bae:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bb0:	4b1a      	ldr	r3, [pc, #104]	; (8000c1c <HAL_UART_MspInit+0xd0>)
 8000bb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bb4:	4a19      	ldr	r2, [pc, #100]	; (8000c1c <HAL_UART_MspInit+0xd0>)
 8000bb6:	f043 0301 	orr.w	r3, r3, #1
 8000bba:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000bbc:	4b17      	ldr	r3, [pc, #92]	; (8000c1c <HAL_UART_MspInit+0xd0>)
 8000bbe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000bc0:	f003 0301 	and.w	r3, r3, #1
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bcc:	2302      	movs	r3, #2
 8000bce:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bd4:	2303      	movs	r3, #3
 8000bd6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000bd8:	2307      	movs	r3, #7
 8000bda:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000bdc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000be0:	4619      	mov	r1, r3
 8000be2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000be6:	f000 f95f 	bl	8000ea8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000bea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000bee:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf0:	2302      	movs	r3, #2
 8000bf2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bf8:	2303      	movs	r3, #3
 8000bfa:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000bfc:	2303      	movs	r3, #3
 8000bfe:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c00:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c04:	4619      	mov	r1, r3
 8000c06:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c0a:	f000 f94d 	bl	8000ea8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c0e:	bf00      	nop
 8000c10:	3778      	adds	r7, #120	; 0x78
 8000c12:	46bd      	mov	sp, r7
 8000c14:	bd80      	pop	{r7, pc}
 8000c16:	bf00      	nop
 8000c18:	40004400 	.word	0x40004400
 8000c1c:	40021000 	.word	0x40021000

08000c20 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000c20:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c58 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000c24:	f7ff ff50 	bl	8000ac8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c28:	480c      	ldr	r0, [pc, #48]	; (8000c5c <LoopForever+0x6>)
  ldr r1, =_edata
 8000c2a:	490d      	ldr	r1, [pc, #52]	; (8000c60 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c2c:	4a0d      	ldr	r2, [pc, #52]	; (8000c64 <LoopForever+0xe>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c30:	e002      	b.n	8000c38 <LoopCopyDataInit>

08000c32 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c32:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c34:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c36:	3304      	adds	r3, #4

08000c38 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c38:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c3a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c3c:	d3f9      	bcc.n	8000c32 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c3e:	4a0a      	ldr	r2, [pc, #40]	; (8000c68 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c40:	4c0a      	ldr	r4, [pc, #40]	; (8000c6c <LoopForever+0x16>)
  movs r3, #0
 8000c42:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c44:	e001      	b.n	8000c4a <LoopFillZerobss>

08000c46 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c46:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c48:	3204      	adds	r2, #4

08000c4a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c4a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c4c:	d3fb      	bcc.n	8000c46 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c4e:	f005 ffbd 	bl	8006bcc <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c52:	f7ff fca3 	bl	800059c <main>

08000c56 <LoopForever>:

LoopForever:
    b LoopForever
 8000c56:	e7fe      	b.n	8000c56 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c58:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c5c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c60:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c64:	08006f18 	.word	0x08006f18
  ldr r2, =_sbss
 8000c68:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c6c:	20001848 	.word	0x20001848

08000c70 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c70:	e7fe      	b.n	8000c70 <ADC1_IRQHandler>

08000c72 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c72:	b580      	push	{r7, lr}
 8000c74:	b082      	sub	sp, #8
 8000c76:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c78:	2300      	movs	r3, #0
 8000c7a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c7c:	2003      	movs	r0, #3
 8000c7e:	f000 f8de 	bl	8000e3e <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c82:	200f      	movs	r0, #15
 8000c84:	f7ff fe86 	bl	8000994 <HAL_InitTick>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d002      	beq.n	8000c94 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c8e:	2301      	movs	r3, #1
 8000c90:	71fb      	strb	r3, [r7, #7]
 8000c92:	e001      	b.n	8000c98 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c94:	f7ff fe56 	bl	8000944 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c98:	79fb      	ldrb	r3, [r7, #7]
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	3708      	adds	r7, #8
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	bd80      	pop	{r7, pc}
	...

08000ca4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ca8:	4b06      	ldr	r3, [pc, #24]	; (8000cc4 <HAL_IncTick+0x20>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	461a      	mov	r2, r3
 8000cae:	4b06      	ldr	r3, [pc, #24]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb0:	681b      	ldr	r3, [r3, #0]
 8000cb2:	4413      	add	r3, r2
 8000cb4:	4a04      	ldr	r2, [pc, #16]	; (8000cc8 <HAL_IncTick+0x24>)
 8000cb6:	6013      	str	r3, [r2, #0]
}
 8000cb8:	bf00      	nop
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc0:	4770      	bx	lr
 8000cc2:	bf00      	nop
 8000cc4:	20000008 	.word	0x20000008
 8000cc8:	20000174 	.word	0x20000174

08000ccc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ccc:	b480      	push	{r7}
 8000cce:	af00      	add	r7, sp, #0
  return uwTick;
 8000cd0:	4b03      	ldr	r3, [pc, #12]	; (8000ce0 <HAL_GetTick+0x14>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
}
 8000cd4:	4618      	mov	r0, r3
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000174 	.word	0x20000174

08000ce4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	b085      	sub	sp, #20
 8000ce8:	af00      	add	r7, sp, #0
 8000cea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cec:	687b      	ldr	r3, [r7, #4]
 8000cee:	f003 0307 	and.w	r3, r3, #7
 8000cf2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000cf6:	68db      	ldr	r3, [r3, #12]
 8000cf8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cfa:	68ba      	ldr	r2, [r7, #8]
 8000cfc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d00:	4013      	ands	r3, r2
 8000d02:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d0c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d10:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d14:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d16:	4a04      	ldr	r2, [pc, #16]	; (8000d28 <__NVIC_SetPriorityGrouping+0x44>)
 8000d18:	68bb      	ldr	r3, [r7, #8]
 8000d1a:	60d3      	str	r3, [r2, #12]
}
 8000d1c:	bf00      	nop
 8000d1e:	3714      	adds	r7, #20
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr
 8000d28:	e000ed00 	.word	0xe000ed00

08000d2c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d30:	4b04      	ldr	r3, [pc, #16]	; (8000d44 <__NVIC_GetPriorityGrouping+0x18>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	0a1b      	lsrs	r3, r3, #8
 8000d36:	f003 0307 	and.w	r3, r3, #7
}
 8000d3a:	4618      	mov	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr
 8000d44:	e000ed00 	.word	0xe000ed00

08000d48 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	b083      	sub	sp, #12
 8000d4c:	af00      	add	r7, sp, #0
 8000d4e:	4603      	mov	r3, r0
 8000d50:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	db0b      	blt.n	8000d72 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d5a:	79fb      	ldrb	r3, [r7, #7]
 8000d5c:	f003 021f 	and.w	r2, r3, #31
 8000d60:	4907      	ldr	r1, [pc, #28]	; (8000d80 <__NVIC_EnableIRQ+0x38>)
 8000d62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d66:	095b      	lsrs	r3, r3, #5
 8000d68:	2001      	movs	r0, #1
 8000d6a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d6e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d72:	bf00      	nop
 8000d74:	370c      	adds	r7, #12
 8000d76:	46bd      	mov	sp, r7
 8000d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7c:	4770      	bx	lr
 8000d7e:	bf00      	nop
 8000d80:	e000e100 	.word	0xe000e100

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	; (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	; (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	; 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr

08000e3e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e3e:	b580      	push	{r7, lr}
 8000e40:	b082      	sub	sp, #8
 8000e42:	af00      	add	r7, sp, #0
 8000e44:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e46:	6878      	ldr	r0, [r7, #4]
 8000e48:	f7ff ff4c 	bl	8000ce4 <__NVIC_SetPriorityGrouping>
}
 8000e4c:	bf00      	nop
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	60b9      	str	r1, [r7, #8]
 8000e5e:	607a      	str	r2, [r7, #4]
 8000e60:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e66:	f7ff ff61 	bl	8000d2c <__NVIC_GetPriorityGrouping>
 8000e6a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	68b9      	ldr	r1, [r7, #8]
 8000e70:	6978      	ldr	r0, [r7, #20]
 8000e72:	f7ff ffb1 	bl	8000dd8 <NVIC_EncodePriority>
 8000e76:	4602      	mov	r2, r0
 8000e78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e7c:	4611      	mov	r1, r2
 8000e7e:	4618      	mov	r0, r3
 8000e80:	f7ff ff80 	bl	8000d84 <__NVIC_SetPriority>
}
 8000e84:	bf00      	nop
 8000e86:	3718      	adds	r7, #24
 8000e88:	46bd      	mov	sp, r7
 8000e8a:	bd80      	pop	{r7, pc}

08000e8c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0
 8000e92:	4603      	mov	r3, r0
 8000e94:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e9a:	4618      	mov	r0, r3
 8000e9c:	f7ff ff54 	bl	8000d48 <__NVIC_EnableIRQ>
}
 8000ea0:	bf00      	nop
 8000ea2:	3708      	adds	r7, #8
 8000ea4:	46bd      	mov	sp, r7
 8000ea6:	bd80      	pop	{r7, pc}

08000ea8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
 8000eb0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eb6:	e148      	b.n	800114a <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000eb8:	683b      	ldr	r3, [r7, #0]
 8000eba:	681a      	ldr	r2, [r3, #0]
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	697b      	ldr	r3, [r7, #20]
 8000ec0:	fa01 f303 	lsl.w	r3, r1, r3
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	f000 813a 	beq.w	8001144 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ed0:	683b      	ldr	r3, [r7, #0]
 8000ed2:	685b      	ldr	r3, [r3, #4]
 8000ed4:	f003 0303 	and.w	r3, r3, #3
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d005      	beq.n	8000ee8 <HAL_GPIO_Init+0x40>
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	f003 0303 	and.w	r3, r3, #3
 8000ee4:	2b02      	cmp	r3, #2
 8000ee6:	d130      	bne.n	8000f4a <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	689b      	ldr	r3, [r3, #8]
 8000eec:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000eee:	697b      	ldr	r3, [r7, #20]
 8000ef0:	005b      	lsls	r3, r3, #1
 8000ef2:	2203      	movs	r2, #3
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	43db      	mvns	r3, r3
 8000efa:	693a      	ldr	r2, [r7, #16]
 8000efc:	4013      	ands	r3, r2
 8000efe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f00:	683b      	ldr	r3, [r7, #0]
 8000f02:	68da      	ldr	r2, [r3, #12]
 8000f04:	697b      	ldr	r3, [r7, #20]
 8000f06:	005b      	lsls	r3, r3, #1
 8000f08:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0c:	693a      	ldr	r2, [r7, #16]
 8000f0e:	4313      	orrs	r3, r2
 8000f10:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	693a      	ldr	r2, [r7, #16]
 8000f16:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	685b      	ldr	r3, [r3, #4]
 8000f1c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f1e:	2201      	movs	r2, #1
 8000f20:	697b      	ldr	r3, [r7, #20]
 8000f22:	fa02 f303 	lsl.w	r3, r2, r3
 8000f26:	43db      	mvns	r3, r3
 8000f28:	693a      	ldr	r2, [r7, #16]
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	685b      	ldr	r3, [r3, #4]
 8000f32:	091b      	lsrs	r3, r3, #4
 8000f34:	f003 0201 	and.w	r2, r3, #1
 8000f38:	697b      	ldr	r3, [r7, #20]
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	693a      	ldr	r2, [r7, #16]
 8000f40:	4313      	orrs	r3, r2
 8000f42:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	693a      	ldr	r2, [r7, #16]
 8000f48:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f4a:	683b      	ldr	r3, [r7, #0]
 8000f4c:	685b      	ldr	r3, [r3, #4]
 8000f4e:	f003 0303 	and.w	r3, r3, #3
 8000f52:	2b03      	cmp	r3, #3
 8000f54:	d017      	beq.n	8000f86 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	68db      	ldr	r3, [r3, #12]
 8000f5a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	005b      	lsls	r3, r3, #1
 8000f60:	2203      	movs	r2, #3
 8000f62:	fa02 f303 	lsl.w	r3, r2, r3
 8000f66:	43db      	mvns	r3, r3
 8000f68:	693a      	ldr	r2, [r7, #16]
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	689a      	ldr	r2, [r3, #8]
 8000f72:	697b      	ldr	r3, [r7, #20]
 8000f74:	005b      	lsls	r3, r3, #1
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4313      	orrs	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	693a      	ldr	r2, [r7, #16]
 8000f84:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685b      	ldr	r3, [r3, #4]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	2b02      	cmp	r3, #2
 8000f90:	d123      	bne.n	8000fda <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f92:	697b      	ldr	r3, [r7, #20]
 8000f94:	08da      	lsrs	r2, r3, #3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3208      	adds	r2, #8
 8000f9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f9e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	f003 0307 	and.w	r3, r3, #7
 8000fa6:	009b      	lsls	r3, r3, #2
 8000fa8:	220f      	movs	r2, #15
 8000faa:	fa02 f303 	lsl.w	r3, r2, r3
 8000fae:	43db      	mvns	r3, r3
 8000fb0:	693a      	ldr	r2, [r7, #16]
 8000fb2:	4013      	ands	r3, r2
 8000fb4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000fb6:	683b      	ldr	r3, [r7, #0]
 8000fb8:	691a      	ldr	r2, [r3, #16]
 8000fba:	697b      	ldr	r3, [r7, #20]
 8000fbc:	f003 0307 	and.w	r3, r3, #7
 8000fc0:	009b      	lsls	r3, r3, #2
 8000fc2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	4313      	orrs	r3, r2
 8000fca:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fcc:	697b      	ldr	r3, [r7, #20]
 8000fce:	08da      	lsrs	r2, r3, #3
 8000fd0:	687b      	ldr	r3, [r7, #4]
 8000fd2:	3208      	adds	r2, #8
 8000fd4:	6939      	ldr	r1, [r7, #16]
 8000fd6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fe0:	697b      	ldr	r3, [r7, #20]
 8000fe2:	005b      	lsls	r3, r3, #1
 8000fe4:	2203      	movs	r2, #3
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	693a      	ldr	r2, [r7, #16]
 8000fee:	4013      	ands	r3, r2
 8000ff0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685b      	ldr	r3, [r3, #4]
 8000ff6:	f003 0203 	and.w	r2, r3, #3
 8000ffa:	697b      	ldr	r3, [r7, #20]
 8000ffc:	005b      	lsls	r3, r3, #1
 8000ffe:	fa02 f303 	lsl.w	r3, r2, r3
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	4313      	orrs	r3, r2
 8001006:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	693a      	ldr	r2, [r7, #16]
 800100c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800100e:	683b      	ldr	r3, [r7, #0]
 8001010:	685b      	ldr	r3, [r3, #4]
 8001012:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001016:	2b00      	cmp	r3, #0
 8001018:	f000 8094 	beq.w	8001144 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800101c:	4b52      	ldr	r3, [pc, #328]	; (8001168 <HAL_GPIO_Init+0x2c0>)
 800101e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001020:	4a51      	ldr	r2, [pc, #324]	; (8001168 <HAL_GPIO_Init+0x2c0>)
 8001022:	f043 0301 	orr.w	r3, r3, #1
 8001026:	6613      	str	r3, [r2, #96]	; 0x60
 8001028:	4b4f      	ldr	r3, [pc, #316]	; (8001168 <HAL_GPIO_Init+0x2c0>)
 800102a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800102c:	f003 0301 	and.w	r3, r3, #1
 8001030:	60bb      	str	r3, [r7, #8]
 8001032:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001034:	4a4d      	ldr	r2, [pc, #308]	; (800116c <HAL_GPIO_Init+0x2c4>)
 8001036:	697b      	ldr	r3, [r7, #20]
 8001038:	089b      	lsrs	r3, r3, #2
 800103a:	3302      	adds	r3, #2
 800103c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001040:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	f003 0303 	and.w	r3, r3, #3
 8001048:	009b      	lsls	r3, r3, #2
 800104a:	220f      	movs	r2, #15
 800104c:	fa02 f303 	lsl.w	r3, r2, r3
 8001050:	43db      	mvns	r3, r3
 8001052:	693a      	ldr	r2, [r7, #16]
 8001054:	4013      	ands	r3, r2
 8001056:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800105e:	d00d      	beq.n	800107c <HAL_GPIO_Init+0x1d4>
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	4a43      	ldr	r2, [pc, #268]	; (8001170 <HAL_GPIO_Init+0x2c8>)
 8001064:	4293      	cmp	r3, r2
 8001066:	d007      	beq.n	8001078 <HAL_GPIO_Init+0x1d0>
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	4a42      	ldr	r2, [pc, #264]	; (8001174 <HAL_GPIO_Init+0x2cc>)
 800106c:	4293      	cmp	r3, r2
 800106e:	d101      	bne.n	8001074 <HAL_GPIO_Init+0x1cc>
 8001070:	2302      	movs	r3, #2
 8001072:	e004      	b.n	800107e <HAL_GPIO_Init+0x1d6>
 8001074:	2307      	movs	r3, #7
 8001076:	e002      	b.n	800107e <HAL_GPIO_Init+0x1d6>
 8001078:	2301      	movs	r3, #1
 800107a:	e000      	b.n	800107e <HAL_GPIO_Init+0x1d6>
 800107c:	2300      	movs	r3, #0
 800107e:	697a      	ldr	r2, [r7, #20]
 8001080:	f002 0203 	and.w	r2, r2, #3
 8001084:	0092      	lsls	r2, r2, #2
 8001086:	4093      	lsls	r3, r2
 8001088:	693a      	ldr	r2, [r7, #16]
 800108a:	4313      	orrs	r3, r2
 800108c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800108e:	4937      	ldr	r1, [pc, #220]	; (800116c <HAL_GPIO_Init+0x2c4>)
 8001090:	697b      	ldr	r3, [r7, #20]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	693a      	ldr	r2, [r7, #16]
 8001098:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800109c:	4b36      	ldr	r3, [pc, #216]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 800109e:	689b      	ldr	r3, [r3, #8]
 80010a0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	43db      	mvns	r3, r3
 80010a6:	693a      	ldr	r2, [r7, #16]
 80010a8:	4013      	ands	r3, r2
 80010aa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80010ac:	683b      	ldr	r3, [r7, #0]
 80010ae:	685b      	ldr	r3, [r3, #4]
 80010b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d003      	beq.n	80010c0 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80010b8:	693a      	ldr	r2, [r7, #16]
 80010ba:	68fb      	ldr	r3, [r7, #12]
 80010bc:	4313      	orrs	r3, r2
 80010be:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80010c0:	4a2d      	ldr	r2, [pc, #180]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010c2:	693b      	ldr	r3, [r7, #16]
 80010c4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80010c6:	4b2c      	ldr	r3, [pc, #176]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010c8:	68db      	ldr	r3, [r3, #12]
 80010ca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	43db      	mvns	r3, r3
 80010d0:	693a      	ldr	r2, [r7, #16]
 80010d2:	4013      	ands	r3, r2
 80010d4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010d6:	683b      	ldr	r3, [r7, #0]
 80010d8:	685b      	ldr	r3, [r3, #4]
 80010da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d003      	beq.n	80010ea <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010e2:	693a      	ldr	r2, [r7, #16]
 80010e4:	68fb      	ldr	r3, [r7, #12]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010ea:	4a23      	ldr	r2, [pc, #140]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010f0:	4b21      	ldr	r3, [pc, #132]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	43db      	mvns	r3, r3
 80010fa:	693a      	ldr	r2, [r7, #16]
 80010fc:	4013      	ands	r3, r2
 80010fe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	685b      	ldr	r3, [r3, #4]
 8001104:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001108:	2b00      	cmp	r3, #0
 800110a:	d003      	beq.n	8001114 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800110c:	693a      	ldr	r2, [r7, #16]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	4313      	orrs	r3, r2
 8001112:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001114:	4a18      	ldr	r2, [pc, #96]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 8001116:	693b      	ldr	r3, [r7, #16]
 8001118:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800111a:	4b17      	ldr	r3, [pc, #92]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 800111c:	681b      	ldr	r3, [r3, #0]
 800111e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	43db      	mvns	r3, r3
 8001124:	693a      	ldr	r2, [r7, #16]
 8001126:	4013      	ands	r3, r2
 8001128:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800112a:	683b      	ldr	r3, [r7, #0]
 800112c:	685b      	ldr	r3, [r3, #4]
 800112e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d003      	beq.n	800113e <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001136:	693a      	ldr	r2, [r7, #16]
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	4313      	orrs	r3, r2
 800113c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800113e:	4a0e      	ldr	r2, [pc, #56]	; (8001178 <HAL_GPIO_Init+0x2d0>)
 8001140:	693b      	ldr	r3, [r7, #16]
 8001142:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001144:	697b      	ldr	r3, [r7, #20]
 8001146:	3301      	adds	r3, #1
 8001148:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800114a:	683b      	ldr	r3, [r7, #0]
 800114c:	681a      	ldr	r2, [r3, #0]
 800114e:	697b      	ldr	r3, [r7, #20]
 8001150:	fa22 f303 	lsr.w	r3, r2, r3
 8001154:	2b00      	cmp	r3, #0
 8001156:	f47f aeaf 	bne.w	8000eb8 <HAL_GPIO_Init+0x10>
  }
}
 800115a:	bf00      	nop
 800115c:	bf00      	nop
 800115e:	371c      	adds	r7, #28
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	40021000 	.word	0x40021000
 800116c:	40010000 	.word	0x40010000
 8001170:	48000400 	.word	0x48000400
 8001174:	48000800 	.word	0x48000800
 8001178:	40010400 	.word	0x40010400

0800117c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	6078      	str	r0, [r7, #4]
 8001184:	460b      	mov	r3, r1
 8001186:	807b      	strh	r3, [r7, #2]
 8001188:	4613      	mov	r3, r2
 800118a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800118c:	787b      	ldrb	r3, [r7, #1]
 800118e:	2b00      	cmp	r3, #0
 8001190:	d003      	beq.n	800119a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001198:	e002      	b.n	80011a0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800119a:	887a      	ldrh	r2, [r7, #2]
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	629a      	str	r2, [r3, #40]	; 0x28
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr

080011ac <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011ac:	b480      	push	{r7}
 80011ae:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011b0:	4b05      	ldr	r3, [pc, #20]	; (80011c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a04      	ldr	r2, [pc, #16]	; (80011c8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011ba:	6013      	str	r3, [r2, #0]
}
 80011bc:	bf00      	nop
 80011be:	46bd      	mov	sp, r7
 80011c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c4:	4770      	bx	lr
 80011c6:	bf00      	nop
 80011c8:	40007000 	.word	0x40007000

080011cc <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011cc:	b480      	push	{r7}
 80011ce:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d0:	4b04      	ldr	r3, [pc, #16]	; (80011e4 <HAL_PWREx_GetVoltageRange+0x18>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011d8:	4618      	mov	r0, r3
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr
 80011e2:	bf00      	nop
 80011e4:	40007000 	.word	0x40007000

080011e8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011e8:	b480      	push	{r7}
 80011ea:	b085      	sub	sp, #20
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011f6:	d130      	bne.n	800125a <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f8:	4b23      	ldr	r3, [pc, #140]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001204:	d038      	beq.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001206:	4b20      	ldr	r3, [pc, #128]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001208:	681b      	ldr	r3, [r3, #0]
 800120a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800120e:	4a1e      	ldr	r2, [pc, #120]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001214:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001216:	4b1d      	ldr	r3, [pc, #116]	; (800128c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001218:	681b      	ldr	r3, [r3, #0]
 800121a:	2232      	movs	r2, #50	; 0x32
 800121c:	fb02 f303 	mul.w	r3, r2, r3
 8001220:	4a1b      	ldr	r2, [pc, #108]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001222:	fba2 2303 	umull	r2, r3, r2, r3
 8001226:	0c9b      	lsrs	r3, r3, #18
 8001228:	3301      	adds	r3, #1
 800122a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800122c:	e002      	b.n	8001234 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	3b01      	subs	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001234:	4b14      	ldr	r3, [pc, #80]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001236:	695b      	ldr	r3, [r3, #20]
 8001238:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800123c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001240:	d102      	bne.n	8001248 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001242:	68fb      	ldr	r3, [r7, #12]
 8001244:	2b00      	cmp	r3, #0
 8001246:	d1f2      	bne.n	800122e <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001248:	4b0f      	ldr	r3, [pc, #60]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800124a:	695b      	ldr	r3, [r3, #20]
 800124c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001254:	d110      	bne.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001256:	2303      	movs	r3, #3
 8001258:	e00f      	b.n	800127a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800125a:	4b0b      	ldr	r3, [pc, #44]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001262:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001266:	d007      	beq.n	8001278 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001268:	4b07      	ldr	r3, [pc, #28]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001270:	4a05      	ldr	r2, [pc, #20]	; (8001288 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001276:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001278:	2300      	movs	r3, #0
}
 800127a:	4618      	mov	r0, r3
 800127c:	3714      	adds	r7, #20
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr
 8001286:	bf00      	nop
 8001288:	40007000 	.word	0x40007000
 800128c:	20000000 	.word	0x20000000
 8001290:	431bde83 	.word	0x431bde83

08001294 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b088      	sub	sp, #32
 8001298:	af00      	add	r7, sp, #0
 800129a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d102      	bne.n	80012a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012a2:	2301      	movs	r3, #1
 80012a4:	f000 bc02 	b.w	8001aac <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012a8:	4b96      	ldr	r3, [pc, #600]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80012aa:	689b      	ldr	r3, [r3, #8]
 80012ac:	f003 030c 	and.w	r3, r3, #12
 80012b0:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012b2:	4b94      	ldr	r3, [pc, #592]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80012b4:	68db      	ldr	r3, [r3, #12]
 80012b6:	f003 0303 	and.w	r3, r3, #3
 80012ba:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012bc:	687b      	ldr	r3, [r7, #4]
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	f003 0310 	and.w	r3, r3, #16
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	f000 80e4 	beq.w	8001492 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d007      	beq.n	80012e0 <HAL_RCC_OscConfig+0x4c>
 80012d0:	69bb      	ldr	r3, [r7, #24]
 80012d2:	2b0c      	cmp	r3, #12
 80012d4:	f040 808b 	bne.w	80013ee <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012d8:	697b      	ldr	r3, [r7, #20]
 80012da:	2b01      	cmp	r3, #1
 80012dc:	f040 8087 	bne.w	80013ee <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e0:	4b88      	ldr	r3, [pc, #544]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	f003 0302 	and.w	r3, r3, #2
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d005      	beq.n	80012f8 <HAL_RCC_OscConfig+0x64>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	699b      	ldr	r3, [r3, #24]
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d101      	bne.n	80012f8 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	e3d9      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	6a1a      	ldr	r2, [r3, #32]
 80012fc:	4b81      	ldr	r3, [pc, #516]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80012fe:	681b      	ldr	r3, [r3, #0]
 8001300:	f003 0308 	and.w	r3, r3, #8
 8001304:	2b00      	cmp	r3, #0
 8001306:	d004      	beq.n	8001312 <HAL_RCC_OscConfig+0x7e>
 8001308:	4b7e      	ldr	r3, [pc, #504]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001310:	e005      	b.n	800131e <HAL_RCC_OscConfig+0x8a>
 8001312:	4b7c      	ldr	r3, [pc, #496]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001314:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001318:	091b      	lsrs	r3, r3, #4
 800131a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800131e:	4293      	cmp	r3, r2
 8001320:	d223      	bcs.n	800136a <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6a1b      	ldr	r3, [r3, #32]
 8001326:	4618      	mov	r0, r3
 8001328:	f000 fdbe 	bl	8001ea8 <RCC_SetFlashLatencyFromMSIRange>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001332:	2301      	movs	r3, #1
 8001334:	e3ba      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001336:	4b73      	ldr	r3, [pc, #460]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	4a72      	ldr	r2, [pc, #456]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 800133c:	f043 0308 	orr.w	r3, r3, #8
 8001340:	6013      	str	r3, [r2, #0]
 8001342:	4b70      	ldr	r3, [pc, #448]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	6a1b      	ldr	r3, [r3, #32]
 800134e:	496d      	ldr	r1, [pc, #436]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001350:	4313      	orrs	r3, r2
 8001352:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001354:	4b6b      	ldr	r3, [pc, #428]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001356:	685b      	ldr	r3, [r3, #4]
 8001358:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	69db      	ldr	r3, [r3, #28]
 8001360:	021b      	lsls	r3, r3, #8
 8001362:	4968      	ldr	r1, [pc, #416]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001364:	4313      	orrs	r3, r2
 8001366:	604b      	str	r3, [r1, #4]
 8001368:	e025      	b.n	80013b6 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800136a:	4b66      	ldr	r3, [pc, #408]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a65      	ldr	r2, [pc, #404]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001370:	f043 0308 	orr.w	r3, r3, #8
 8001374:	6013      	str	r3, [r2, #0]
 8001376:	4b63      	ldr	r3, [pc, #396]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	6a1b      	ldr	r3, [r3, #32]
 8001382:	4960      	ldr	r1, [pc, #384]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001384:	4313      	orrs	r3, r2
 8001386:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001388:	4b5e      	ldr	r3, [pc, #376]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 800138a:	685b      	ldr	r3, [r3, #4]
 800138c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	69db      	ldr	r3, [r3, #28]
 8001394:	021b      	lsls	r3, r3, #8
 8001396:	495b      	ldr	r1, [pc, #364]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001398:	4313      	orrs	r3, r2
 800139a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800139c:	69bb      	ldr	r3, [r7, #24]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d109      	bne.n	80013b6 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	6a1b      	ldr	r3, [r3, #32]
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fd7e 	bl	8001ea8 <RCC_SetFlashLatencyFromMSIRange>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013b2:	2301      	movs	r3, #1
 80013b4:	e37a      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013b6:	f000 fc81 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 80013ba:	4602      	mov	r2, r0
 80013bc:	4b51      	ldr	r3, [pc, #324]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	091b      	lsrs	r3, r3, #4
 80013c2:	f003 030f 	and.w	r3, r3, #15
 80013c6:	4950      	ldr	r1, [pc, #320]	; (8001508 <HAL_RCC_OscConfig+0x274>)
 80013c8:	5ccb      	ldrb	r3, [r1, r3]
 80013ca:	f003 031f 	and.w	r3, r3, #31
 80013ce:	fa22 f303 	lsr.w	r3, r2, r3
 80013d2:	4a4e      	ldr	r2, [pc, #312]	; (800150c <HAL_RCC_OscConfig+0x278>)
 80013d4:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013d6:	4b4e      	ldr	r3, [pc, #312]	; (8001510 <HAL_RCC_OscConfig+0x27c>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4618      	mov	r0, r3
 80013dc:	f7ff fada 	bl	8000994 <HAL_InitTick>
 80013e0:	4603      	mov	r3, r0
 80013e2:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013e4:	7bfb      	ldrb	r3, [r7, #15]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d052      	beq.n	8001490 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013ea:	7bfb      	ldrb	r3, [r7, #15]
 80013ec:	e35e      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	699b      	ldr	r3, [r3, #24]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d032      	beq.n	800145c <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013f6:	4b43      	ldr	r3, [pc, #268]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4a42      	ldr	r2, [pc, #264]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80013fc:	f043 0301 	orr.w	r3, r3, #1
 8001400:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001402:	f7ff fc63 	bl	8000ccc <HAL_GetTick>
 8001406:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001408:	e008      	b.n	800141c <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800140a:	f7ff fc5f 	bl	8000ccc <HAL_GetTick>
 800140e:	4602      	mov	r2, r0
 8001410:	693b      	ldr	r3, [r7, #16]
 8001412:	1ad3      	subs	r3, r2, r3
 8001414:	2b02      	cmp	r3, #2
 8001416:	d901      	bls.n	800141c <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001418:	2303      	movs	r3, #3
 800141a:	e347      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800141c:	4b39      	ldr	r3, [pc, #228]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	f003 0302 	and.w	r3, r3, #2
 8001424:	2b00      	cmp	r3, #0
 8001426:	d0f0      	beq.n	800140a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001428:	4b36      	ldr	r3, [pc, #216]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4a35      	ldr	r2, [pc, #212]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 800142e:	f043 0308 	orr.w	r3, r3, #8
 8001432:	6013      	str	r3, [r2, #0]
 8001434:	4b33      	ldr	r3, [pc, #204]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6a1b      	ldr	r3, [r3, #32]
 8001440:	4930      	ldr	r1, [pc, #192]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001442:	4313      	orrs	r3, r2
 8001444:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001446:	4b2f      	ldr	r3, [pc, #188]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001448:	685b      	ldr	r3, [r3, #4]
 800144a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	69db      	ldr	r3, [r3, #28]
 8001452:	021b      	lsls	r3, r3, #8
 8001454:	492b      	ldr	r1, [pc, #172]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001456:	4313      	orrs	r3, r2
 8001458:	604b      	str	r3, [r1, #4]
 800145a:	e01a      	b.n	8001492 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 800145c:	4b29      	ldr	r3, [pc, #164]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	4a28      	ldr	r2, [pc, #160]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001462:	f023 0301 	bic.w	r3, r3, #1
 8001466:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001468:	f7ff fc30 	bl	8000ccc <HAL_GetTick>
 800146c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800146e:	e008      	b.n	8001482 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001470:	f7ff fc2c 	bl	8000ccc <HAL_GetTick>
 8001474:	4602      	mov	r2, r0
 8001476:	693b      	ldr	r3, [r7, #16]
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d901      	bls.n	8001482 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	e314      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f003 0302 	and.w	r3, r3, #2
 800148a:	2b00      	cmp	r3, #0
 800148c:	d1f0      	bne.n	8001470 <HAL_RCC_OscConfig+0x1dc>
 800148e:	e000      	b.n	8001492 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001490:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0301 	and.w	r3, r3, #1
 800149a:	2b00      	cmp	r3, #0
 800149c:	d073      	beq.n	8001586 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800149e:	69bb      	ldr	r3, [r7, #24]
 80014a0:	2b08      	cmp	r3, #8
 80014a2:	d005      	beq.n	80014b0 <HAL_RCC_OscConfig+0x21c>
 80014a4:	69bb      	ldr	r3, [r7, #24]
 80014a6:	2b0c      	cmp	r3, #12
 80014a8:	d10e      	bne.n	80014c8 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014aa:	697b      	ldr	r3, [r7, #20]
 80014ac:	2b03      	cmp	r3, #3
 80014ae:	d10b      	bne.n	80014c8 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b0:	4b14      	ldr	r3, [pc, #80]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014b8:	2b00      	cmp	r3, #0
 80014ba:	d063      	beq.n	8001584 <HAL_RCC_OscConfig+0x2f0>
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d15f      	bne.n	8001584 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014c4:	2301      	movs	r3, #1
 80014c6:	e2f1      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	685b      	ldr	r3, [r3, #4]
 80014cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d0:	d106      	bne.n	80014e0 <HAL_RCC_OscConfig+0x24c>
 80014d2:	4b0c      	ldr	r3, [pc, #48]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	4a0b      	ldr	r2, [pc, #44]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80014d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014dc:	6013      	str	r3, [r2, #0]
 80014de:	e025      	b.n	800152c <HAL_RCC_OscConfig+0x298>
 80014e0:	687b      	ldr	r3, [r7, #4]
 80014e2:	685b      	ldr	r3, [r3, #4]
 80014e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014e8:	d114      	bne.n	8001514 <HAL_RCC_OscConfig+0x280>
 80014ea:	4b06      	ldr	r3, [pc, #24]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a05      	ldr	r2, [pc, #20]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80014f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014f4:	6013      	str	r3, [r2, #0]
 80014f6:	4b03      	ldr	r3, [pc, #12]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a02      	ldr	r2, [pc, #8]	; (8001504 <HAL_RCC_OscConfig+0x270>)
 80014fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001500:	6013      	str	r3, [r2, #0]
 8001502:	e013      	b.n	800152c <HAL_RCC_OscConfig+0x298>
 8001504:	40021000 	.word	0x40021000
 8001508:	08006e60 	.word	0x08006e60
 800150c:	20000000 	.word	0x20000000
 8001510:	20000004 	.word	0x20000004
 8001514:	4ba0      	ldr	r3, [pc, #640]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	4a9f      	ldr	r2, [pc, #636]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 800151a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800151e:	6013      	str	r3, [r2, #0]
 8001520:	4b9d      	ldr	r3, [pc, #628]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	4a9c      	ldr	r2, [pc, #624]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001526:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800152a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	685b      	ldr	r3, [r3, #4]
 8001530:	2b00      	cmp	r3, #0
 8001532:	d013      	beq.n	800155c <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001534:	f7ff fbca 	bl	8000ccc <HAL_GetTick>
 8001538:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800153a:	e008      	b.n	800154e <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800153c:	f7ff fbc6 	bl	8000ccc <HAL_GetTick>
 8001540:	4602      	mov	r2, r0
 8001542:	693b      	ldr	r3, [r7, #16]
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	2b64      	cmp	r3, #100	; 0x64
 8001548:	d901      	bls.n	800154e <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800154a:	2303      	movs	r3, #3
 800154c:	e2ae      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800154e:	4b92      	ldr	r3, [pc, #584]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001556:	2b00      	cmp	r3, #0
 8001558:	d0f0      	beq.n	800153c <HAL_RCC_OscConfig+0x2a8>
 800155a:	e014      	b.n	8001586 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800155c:	f7ff fbb6 	bl	8000ccc <HAL_GetTick>
 8001560:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001562:	e008      	b.n	8001576 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001564:	f7ff fbb2 	bl	8000ccc <HAL_GetTick>
 8001568:	4602      	mov	r2, r0
 800156a:	693b      	ldr	r3, [r7, #16]
 800156c:	1ad3      	subs	r3, r2, r3
 800156e:	2b64      	cmp	r3, #100	; 0x64
 8001570:	d901      	bls.n	8001576 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001572:	2303      	movs	r3, #3
 8001574:	e29a      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001576:	4b88      	ldr	r3, [pc, #544]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d1f0      	bne.n	8001564 <HAL_RCC_OscConfig+0x2d0>
 8001582:	e000      	b.n	8001586 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001584:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f003 0302 	and.w	r3, r3, #2
 800158e:	2b00      	cmp	r3, #0
 8001590:	d060      	beq.n	8001654 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001592:	69bb      	ldr	r3, [r7, #24]
 8001594:	2b04      	cmp	r3, #4
 8001596:	d005      	beq.n	80015a4 <HAL_RCC_OscConfig+0x310>
 8001598:	69bb      	ldr	r3, [r7, #24]
 800159a:	2b0c      	cmp	r3, #12
 800159c:	d119      	bne.n	80015d2 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d116      	bne.n	80015d2 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015a4:	4b7c      	ldr	r3, [pc, #496]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d005      	beq.n	80015bc <HAL_RCC_OscConfig+0x328>
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	68db      	ldr	r3, [r3, #12]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d101      	bne.n	80015bc <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	e277      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015bc:	4b76      	ldr	r3, [pc, #472]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80015be:	685b      	ldr	r3, [r3, #4]
 80015c0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	691b      	ldr	r3, [r3, #16]
 80015c8:	061b      	lsls	r3, r3, #24
 80015ca:	4973      	ldr	r1, [pc, #460]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80015cc:	4313      	orrs	r3, r2
 80015ce:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d0:	e040      	b.n	8001654 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	68db      	ldr	r3, [r3, #12]
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d023      	beq.n	8001622 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015da:	4b6f      	ldr	r3, [pc, #444]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	4a6e      	ldr	r2, [pc, #440]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80015e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015e4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e6:	f7ff fb71 	bl	8000ccc <HAL_GetTick>
 80015ea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015ec:	e008      	b.n	8001600 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015ee:	f7ff fb6d 	bl	8000ccc <HAL_GetTick>
 80015f2:	4602      	mov	r2, r0
 80015f4:	693b      	ldr	r3, [r7, #16]
 80015f6:	1ad3      	subs	r3, r2, r3
 80015f8:	2b02      	cmp	r3, #2
 80015fa:	d901      	bls.n	8001600 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e255      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001600:	4b65      	ldr	r3, [pc, #404]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001608:	2b00      	cmp	r3, #0
 800160a:	d0f0      	beq.n	80015ee <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800160c:	4b62      	ldr	r3, [pc, #392]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	691b      	ldr	r3, [r3, #16]
 8001618:	061b      	lsls	r3, r3, #24
 800161a:	495f      	ldr	r1, [pc, #380]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 800161c:	4313      	orrs	r3, r2
 800161e:	604b      	str	r3, [r1, #4]
 8001620:	e018      	b.n	8001654 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001622:	4b5d      	ldr	r3, [pc, #372]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a5c      	ldr	r2, [pc, #368]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800162c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800162e:	f7ff fb4d 	bl	8000ccc <HAL_GetTick>
 8001632:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001634:	e008      	b.n	8001648 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001636:	f7ff fb49 	bl	8000ccc <HAL_GetTick>
 800163a:	4602      	mov	r2, r0
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	1ad3      	subs	r3, r2, r3
 8001640:	2b02      	cmp	r3, #2
 8001642:	d901      	bls.n	8001648 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001644:	2303      	movs	r3, #3
 8001646:	e231      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001648:	4b53      	ldr	r3, [pc, #332]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001650:	2b00      	cmp	r3, #0
 8001652:	d1f0      	bne.n	8001636 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f003 0308 	and.w	r3, r3, #8
 800165c:	2b00      	cmp	r3, #0
 800165e:	d03c      	beq.n	80016da <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	695b      	ldr	r3, [r3, #20]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d01c      	beq.n	80016a2 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001668:	4b4b      	ldr	r3, [pc, #300]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 800166a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800166e:	4a4a      	ldr	r2, [pc, #296]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001670:	f043 0301 	orr.w	r3, r3, #1
 8001674:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001678:	f7ff fb28 	bl	8000ccc <HAL_GetTick>
 800167c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800167e:	e008      	b.n	8001692 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001680:	f7ff fb24 	bl	8000ccc <HAL_GetTick>
 8001684:	4602      	mov	r2, r0
 8001686:	693b      	ldr	r3, [r7, #16]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	2b02      	cmp	r3, #2
 800168c:	d901      	bls.n	8001692 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800168e:	2303      	movs	r3, #3
 8001690:	e20c      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001692:	4b41      	ldr	r3, [pc, #260]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001694:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001698:	f003 0302 	and.w	r3, r3, #2
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0ef      	beq.n	8001680 <HAL_RCC_OscConfig+0x3ec>
 80016a0:	e01b      	b.n	80016da <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016a2:	4b3d      	ldr	r3, [pc, #244]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80016a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a8:	4a3b      	ldr	r2, [pc, #236]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80016aa:	f023 0301 	bic.w	r3, r3, #1
 80016ae:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016b2:	f7ff fb0b 	bl	8000ccc <HAL_GetTick>
 80016b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016b8:	e008      	b.n	80016cc <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016ba:	f7ff fb07 	bl	8000ccc <HAL_GetTick>
 80016be:	4602      	mov	r2, r0
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	1ad3      	subs	r3, r2, r3
 80016c4:	2b02      	cmp	r3, #2
 80016c6:	d901      	bls.n	80016cc <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016c8:	2303      	movs	r3, #3
 80016ca:	e1ef      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016cc:	4b32      	ldr	r3, [pc, #200]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80016ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ef      	bne.n	80016ba <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	f003 0304 	and.w	r3, r3, #4
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	f000 80a6 	beq.w	8001834 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016e8:	2300      	movs	r3, #0
 80016ea:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016ec:	4b2a      	ldr	r3, [pc, #168]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d10d      	bne.n	8001714 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016f8:	4b27      	ldr	r3, [pc, #156]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80016fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016fc:	4a26      	ldr	r2, [pc, #152]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 80016fe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001702:	6593      	str	r3, [r2, #88]	; 0x58
 8001704:	4b24      	ldr	r3, [pc, #144]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800170c:	60bb      	str	r3, [r7, #8]
 800170e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001710:	2301      	movs	r3, #1
 8001712:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001714:	4b21      	ldr	r3, [pc, #132]	; (800179c <HAL_RCC_OscConfig+0x508>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800171c:	2b00      	cmp	r3, #0
 800171e:	d118      	bne.n	8001752 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001720:	4b1e      	ldr	r3, [pc, #120]	; (800179c <HAL_RCC_OscConfig+0x508>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	4a1d      	ldr	r2, [pc, #116]	; (800179c <HAL_RCC_OscConfig+0x508>)
 8001726:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800172a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800172c:	f7ff face 	bl	8000ccc <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001734:	f7ff faca 	bl	8000ccc <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e1b2      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_RCC_OscConfig+0x508>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800174e:	2b00      	cmp	r3, #0
 8001750:	d0f0      	beq.n	8001734 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	689b      	ldr	r3, [r3, #8]
 8001756:	2b01      	cmp	r3, #1
 8001758:	d108      	bne.n	800176c <HAL_RCC_OscConfig+0x4d8>
 800175a:	4b0f      	ldr	r3, [pc, #60]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 800175c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001760:	4a0d      	ldr	r2, [pc, #52]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001762:	f043 0301 	orr.w	r3, r3, #1
 8001766:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800176a:	e029      	b.n	80017c0 <HAL_RCC_OscConfig+0x52c>
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	689b      	ldr	r3, [r3, #8]
 8001770:	2b05      	cmp	r3, #5
 8001772:	d115      	bne.n	80017a0 <HAL_RCC_OscConfig+0x50c>
 8001774:	4b08      	ldr	r3, [pc, #32]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001776:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177a:	4a07      	ldr	r2, [pc, #28]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 800177c:	f043 0304 	orr.w	r3, r3, #4
 8001780:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001784:	4b04      	ldr	r3, [pc, #16]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 8001786:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800178a:	4a03      	ldr	r2, [pc, #12]	; (8001798 <HAL_RCC_OscConfig+0x504>)
 800178c:	f043 0301 	orr.w	r3, r3, #1
 8001790:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001794:	e014      	b.n	80017c0 <HAL_RCC_OscConfig+0x52c>
 8001796:	bf00      	nop
 8001798:	40021000 	.word	0x40021000
 800179c:	40007000 	.word	0x40007000
 80017a0:	4b9a      	ldr	r3, [pc, #616]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80017a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017a6:	4a99      	ldr	r2, [pc, #612]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80017a8:	f023 0301 	bic.w	r3, r3, #1
 80017ac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b0:	4b96      	ldr	r3, [pc, #600]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80017b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017b6:	4a95      	ldr	r2, [pc, #596]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80017b8:	f023 0304 	bic.w	r3, r3, #4
 80017bc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	689b      	ldr	r3, [r3, #8]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d016      	beq.n	80017f6 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017c8:	f7ff fa80 	bl	8000ccc <HAL_GetTick>
 80017cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ce:	e00a      	b.n	80017e6 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d0:	f7ff fa7c 	bl	8000ccc <HAL_GetTick>
 80017d4:	4602      	mov	r2, r0
 80017d6:	693b      	ldr	r3, [r7, #16]
 80017d8:	1ad3      	subs	r3, r2, r3
 80017da:	f241 3288 	movw	r2, #5000	; 0x1388
 80017de:	4293      	cmp	r3, r2
 80017e0:	d901      	bls.n	80017e6 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017e2:	2303      	movs	r3, #3
 80017e4:	e162      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017e6:	4b89      	ldr	r3, [pc, #548]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80017e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d0ed      	beq.n	80017d0 <HAL_RCC_OscConfig+0x53c>
 80017f4:	e015      	b.n	8001822 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017f6:	f7ff fa69 	bl	8000ccc <HAL_GetTick>
 80017fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017fc:	e00a      	b.n	8001814 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017fe:	f7ff fa65 	bl	8000ccc <HAL_GetTick>
 8001802:	4602      	mov	r2, r0
 8001804:	693b      	ldr	r3, [r7, #16]
 8001806:	1ad3      	subs	r3, r2, r3
 8001808:	f241 3288 	movw	r2, #5000	; 0x1388
 800180c:	4293      	cmp	r3, r2
 800180e:	d901      	bls.n	8001814 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001810:	2303      	movs	r3, #3
 8001812:	e14b      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001814:	4b7d      	ldr	r3, [pc, #500]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 8001816:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800181a:	f003 0302 	and.w	r3, r3, #2
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1ed      	bne.n	80017fe <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001822:	7ffb      	ldrb	r3, [r7, #31]
 8001824:	2b01      	cmp	r3, #1
 8001826:	d105      	bne.n	8001834 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001828:	4b78      	ldr	r3, [pc, #480]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 800182a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800182c:	4a77      	ldr	r2, [pc, #476]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 800182e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001832:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0320 	and.w	r3, r3, #32
 800183c:	2b00      	cmp	r3, #0
 800183e:	d03c      	beq.n	80018ba <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001844:	2b00      	cmp	r3, #0
 8001846:	d01c      	beq.n	8001882 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001848:	4b70      	ldr	r3, [pc, #448]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 800184a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800184e:	4a6f      	ldr	r2, [pc, #444]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001858:	f7ff fa38 	bl	8000ccc <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001860:	f7ff fa34 	bl	8000ccc <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e11c      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001872:	4b66      	ldr	r3, [pc, #408]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 8001874:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001878:	f003 0302 	and.w	r3, r3, #2
 800187c:	2b00      	cmp	r3, #0
 800187e:	d0ef      	beq.n	8001860 <HAL_RCC_OscConfig+0x5cc>
 8001880:	e01b      	b.n	80018ba <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001882:	4b62      	ldr	r3, [pc, #392]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 8001884:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001888:	4a60      	ldr	r2, [pc, #384]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 800188a:	f023 0301 	bic.w	r3, r3, #1
 800188e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001892:	f7ff fa1b 	bl	8000ccc <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800189a:	f7ff fa17 	bl	8000ccc <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e0ff      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018ac:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80018ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018b2:	f003 0302 	and.w	r3, r3, #2
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d1ef      	bne.n	800189a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	2b00      	cmp	r3, #0
 80018c0:	f000 80f3 	beq.w	8001aaa <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	f040 80c9 	bne.w	8001a60 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018ce:	4b4f      	ldr	r3, [pc, #316]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80018d0:	68db      	ldr	r3, [r3, #12]
 80018d2:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018d4:	697b      	ldr	r3, [r7, #20]
 80018d6:	f003 0203 	and.w	r2, r3, #3
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018de:	429a      	cmp	r2, r3
 80018e0:	d12c      	bne.n	800193c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018e2:	697b      	ldr	r3, [r7, #20]
 80018e4:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ec:	3b01      	subs	r3, #1
 80018ee:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d123      	bne.n	800193c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018f4:	697b      	ldr	r3, [r7, #20]
 80018f6:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018fe:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001900:	429a      	cmp	r2, r3
 8001902:	d11b      	bne.n	800193c <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800190e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001910:	429a      	cmp	r2, r3
 8001912:	d113      	bne.n	800193c <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001914:	697b      	ldr	r3, [r7, #20]
 8001916:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800191e:	085b      	lsrs	r3, r3, #1
 8001920:	3b01      	subs	r3, #1
 8001922:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001924:	429a      	cmp	r2, r3
 8001926:	d109      	bne.n	800193c <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001928:	697b      	ldr	r3, [r7, #20]
 800192a:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001932:	085b      	lsrs	r3, r3, #1
 8001934:	3b01      	subs	r3, #1
 8001936:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001938:	429a      	cmp	r2, r3
 800193a:	d06b      	beq.n	8001a14 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d062      	beq.n	8001a08 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001942:	4b32      	ldr	r3, [pc, #200]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800194a:	2b00      	cmp	r3, #0
 800194c:	d001      	beq.n	8001952 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
 8001950:	e0ac      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001952:	4b2e      	ldr	r3, [pc, #184]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4a2d      	ldr	r2, [pc, #180]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 8001958:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800195c:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800195e:	f7ff f9b5 	bl	8000ccc <HAL_GetTick>
 8001962:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001964:	e008      	b.n	8001978 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001966:	f7ff f9b1 	bl	8000ccc <HAL_GetTick>
 800196a:	4602      	mov	r2, r0
 800196c:	693b      	ldr	r3, [r7, #16]
 800196e:	1ad3      	subs	r3, r2, r3
 8001970:	2b02      	cmp	r3, #2
 8001972:	d901      	bls.n	8001978 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001974:	2303      	movs	r3, #3
 8001976:	e099      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001978:	4b24      	ldr	r3, [pc, #144]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001980:	2b00      	cmp	r3, #0
 8001982:	d1f0      	bne.n	8001966 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 8001986:	68da      	ldr	r2, [r3, #12]
 8001988:	4b21      	ldr	r3, [pc, #132]	; (8001a10 <HAL_RCC_OscConfig+0x77c>)
 800198a:	4013      	ands	r3, r2
 800198c:	687a      	ldr	r2, [r7, #4]
 800198e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001990:	687a      	ldr	r2, [r7, #4]
 8001992:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001994:	3a01      	subs	r2, #1
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	4311      	orrs	r1, r2
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800199e:	0212      	lsls	r2, r2, #8
 80019a0:	4311      	orrs	r1, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019a6:	0852      	lsrs	r2, r2, #1
 80019a8:	3a01      	subs	r2, #1
 80019aa:	0552      	lsls	r2, r2, #21
 80019ac:	4311      	orrs	r1, r2
 80019ae:	687a      	ldr	r2, [r7, #4]
 80019b0:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019b2:	0852      	lsrs	r2, r2, #1
 80019b4:	3a01      	subs	r2, #1
 80019b6:	0652      	lsls	r2, r2, #25
 80019b8:	4311      	orrs	r1, r2
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019be:	06d2      	lsls	r2, r2, #27
 80019c0:	430a      	orrs	r2, r1
 80019c2:	4912      	ldr	r1, [pc, #72]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80019c4:	4313      	orrs	r3, r2
 80019c6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019c8:	4b10      	ldr	r3, [pc, #64]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0f      	ldr	r2, [pc, #60]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80019ce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019d2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019d4:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80019d6:	68db      	ldr	r3, [r3, #12]
 80019d8:	4a0c      	ldr	r2, [pc, #48]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80019da:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019de:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e0:	f7ff f974 	bl	8000ccc <HAL_GetTick>
 80019e4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e6:	e008      	b.n	80019fa <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019e8:	f7ff f970 	bl	8000ccc <HAL_GetTick>
 80019ec:	4602      	mov	r2, r0
 80019ee:	693b      	ldr	r3, [r7, #16]
 80019f0:	1ad3      	subs	r3, r2, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d901      	bls.n	80019fa <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019f6:	2303      	movs	r3, #3
 80019f8:	e058      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019fa:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <HAL_RCC_OscConfig+0x778>)
 80019fc:	681b      	ldr	r3, [r3, #0]
 80019fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a02:	2b00      	cmp	r3, #0
 8001a04:	d0f0      	beq.n	80019e8 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a06:	e050      	b.n	8001aaa <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a08:	2301      	movs	r3, #1
 8001a0a:	e04f      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
 8001a0c:	40021000 	.word	0x40021000
 8001a10:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a14:	4b27      	ldr	r3, [pc, #156]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d144      	bne.n	8001aaa <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a20:	4b24      	ldr	r3, [pc, #144]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	4a23      	ldr	r2, [pc, #140]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a26:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a2a:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a2c:	4b21      	ldr	r3, [pc, #132]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a2e:	68db      	ldr	r3, [r3, #12]
 8001a30:	4a20      	ldr	r2, [pc, #128]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a32:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a36:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a38:	f7ff f948 	bl	8000ccc <HAL_GetTick>
 8001a3c:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a3e:	e008      	b.n	8001a52 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a40:	f7ff f944 	bl	8000ccc <HAL_GetTick>
 8001a44:	4602      	mov	r2, r0
 8001a46:	693b      	ldr	r3, [r7, #16]
 8001a48:	1ad3      	subs	r3, r2, r3
 8001a4a:	2b02      	cmp	r3, #2
 8001a4c:	d901      	bls.n	8001a52 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a4e:	2303      	movs	r3, #3
 8001a50:	e02c      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a52:	4b18      	ldr	r3, [pc, #96]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d0f0      	beq.n	8001a40 <HAL_RCC_OscConfig+0x7ac>
 8001a5e:	e024      	b.n	8001aaa <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a60:	69bb      	ldr	r3, [r7, #24]
 8001a62:	2b0c      	cmp	r3, #12
 8001a64:	d01f      	beq.n	8001aa6 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a66:	4b13      	ldr	r3, [pc, #76]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	4a12      	ldr	r2, [pc, #72]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a6c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a70:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a72:	f7ff f92b 	bl	8000ccc <HAL_GetTick>
 8001a76:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a78:	e008      	b.n	8001a8c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a7a:	f7ff f927 	bl	8000ccc <HAL_GetTick>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	693b      	ldr	r3, [r7, #16]
 8001a82:	1ad3      	subs	r3, r2, r3
 8001a84:	2b02      	cmp	r3, #2
 8001a86:	d901      	bls.n	8001a8c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a88:	2303      	movs	r3, #3
 8001a8a:	e00f      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a8c:	4b09      	ldr	r3, [pc, #36]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d1f0      	bne.n	8001a7a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a98:	4b06      	ldr	r3, [pc, #24]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a9a:	68da      	ldr	r2, [r3, #12]
 8001a9c:	4905      	ldr	r1, [pc, #20]	; (8001ab4 <HAL_RCC_OscConfig+0x820>)
 8001a9e:	4b06      	ldr	r3, [pc, #24]	; (8001ab8 <HAL_RCC_OscConfig+0x824>)
 8001aa0:	4013      	ands	r3, r2
 8001aa2:	60cb      	str	r3, [r1, #12]
 8001aa4:	e001      	b.n	8001aaa <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aa6:	2301      	movs	r3, #1
 8001aa8:	e000      	b.n	8001aac <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001aaa:	2300      	movs	r3, #0
}
 8001aac:	4618      	mov	r0, r3
 8001aae:	3720      	adds	r7, #32
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40021000 	.word	0x40021000
 8001ab8:	feeefffc 	.word	0xfeeefffc

08001abc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b084      	sub	sp, #16
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
 8001ac4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d101      	bne.n	8001ad0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001acc:	2301      	movs	r3, #1
 8001ace:	e0e7      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad0:	4b75      	ldr	r3, [pc, #468]	; (8001ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 0307 	and.w	r3, r3, #7
 8001ad8:	683a      	ldr	r2, [r7, #0]
 8001ada:	429a      	cmp	r2, r3
 8001adc:	d910      	bls.n	8001b00 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ade:	4b72      	ldr	r3, [pc, #456]	; (8001ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f023 0207 	bic.w	r2, r3, #7
 8001ae6:	4970      	ldr	r1, [pc, #448]	; (8001ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	4313      	orrs	r3, r2
 8001aec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001aee:	4b6e      	ldr	r3, [pc, #440]	; (8001ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	f003 0307 	and.w	r3, r3, #7
 8001af6:	683a      	ldr	r2, [r7, #0]
 8001af8:	429a      	cmp	r2, r3
 8001afa:	d001      	beq.n	8001b00 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001afc:	2301      	movs	r3, #1
 8001afe:	e0cf      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	f003 0302 	and.w	r3, r3, #2
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d010      	beq.n	8001b2e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	689a      	ldr	r2, [r3, #8]
 8001b10:	4b66      	ldr	r3, [pc, #408]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001b12:	689b      	ldr	r3, [r3, #8]
 8001b14:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	d908      	bls.n	8001b2e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b1c:	4b63      	ldr	r3, [pc, #396]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001b1e:	689b      	ldr	r3, [r3, #8]
 8001b20:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	4960      	ldr	r1, [pc, #384]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f003 0301 	and.w	r3, r3, #1
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d04c      	beq.n	8001bd4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	2b03      	cmp	r3, #3
 8001b40:	d107      	bne.n	8001b52 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b42:	4b5a      	ldr	r3, [pc, #360]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001b44:	681b      	ldr	r3, [r3, #0]
 8001b46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b4a:	2b00      	cmp	r3, #0
 8001b4c:	d121      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b4e:	2301      	movs	r3, #1
 8001b50:	e0a6      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d107      	bne.n	8001b6a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b5a:	4b54      	ldr	r3, [pc, #336]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b62:	2b00      	cmp	r3, #0
 8001b64:	d115      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b66:	2301      	movs	r3, #1
 8001b68:	e09a      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	685b      	ldr	r3, [r3, #4]
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d107      	bne.n	8001b82 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b72:	4b4e      	ldr	r3, [pc, #312]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f003 0302 	and.w	r3, r3, #2
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d109      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e08e      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b82:	4b4a      	ldr	r3, [pc, #296]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d101      	bne.n	8001b92 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b8e:	2301      	movs	r3, #1
 8001b90:	e086      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b92:	4b46      	ldr	r3, [pc, #280]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001b94:	689b      	ldr	r3, [r3, #8]
 8001b96:	f023 0203 	bic.w	r2, r3, #3
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	685b      	ldr	r3, [r3, #4]
 8001b9e:	4943      	ldr	r1, [pc, #268]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001ba0:	4313      	orrs	r3, r2
 8001ba2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ba4:	f7ff f892 	bl	8000ccc <HAL_GetTick>
 8001ba8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001baa:	e00a      	b.n	8001bc2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bac:	f7ff f88e 	bl	8000ccc <HAL_GetTick>
 8001bb0:	4602      	mov	r2, r0
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	1ad3      	subs	r3, r2, r3
 8001bb6:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d901      	bls.n	8001bc2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bbe:	2303      	movs	r3, #3
 8001bc0:	e06e      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bc2:	4b3a      	ldr	r3, [pc, #232]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	f003 020c 	and.w	r2, r3, #12
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	685b      	ldr	r3, [r3, #4]
 8001bce:	009b      	lsls	r3, r3, #2
 8001bd0:	429a      	cmp	r2, r3
 8001bd2:	d1eb      	bne.n	8001bac <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f003 0302 	and.w	r3, r3, #2
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d010      	beq.n	8001c02 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	689a      	ldr	r2, [r3, #8]
 8001be4:	4b31      	ldr	r3, [pc, #196]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bec:	429a      	cmp	r2, r3
 8001bee:	d208      	bcs.n	8001c02 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf0:	4b2e      	ldr	r3, [pc, #184]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	492b      	ldr	r1, [pc, #172]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001bfe:	4313      	orrs	r3, r2
 8001c00:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c02:	4b29      	ldr	r3, [pc, #164]	; (8001ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f003 0307 	and.w	r3, r3, #7
 8001c0a:	683a      	ldr	r2, [r7, #0]
 8001c0c:	429a      	cmp	r2, r3
 8001c0e:	d210      	bcs.n	8001c32 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	f023 0207 	bic.w	r2, r3, #7
 8001c18:	4923      	ldr	r1, [pc, #140]	; (8001ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c20:	4b21      	ldr	r3, [pc, #132]	; (8001ca8 <HAL_RCC_ClockConfig+0x1ec>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0307 	and.w	r3, r3, #7
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	d001      	beq.n	8001c32 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c2e:	2301      	movs	r3, #1
 8001c30:	e036      	b.n	8001ca0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f003 0304 	and.w	r3, r3, #4
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d008      	beq.n	8001c50 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c3e:	4b1b      	ldr	r3, [pc, #108]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	68db      	ldr	r3, [r3, #12]
 8001c4a:	4918      	ldr	r1, [pc, #96]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f003 0308 	and.w	r3, r3, #8
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d009      	beq.n	8001c70 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c5c:	4b13      	ldr	r3, [pc, #76]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001c5e:	689b      	ldr	r3, [r3, #8]
 8001c60:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	691b      	ldr	r3, [r3, #16]
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	4910      	ldr	r1, [pc, #64]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001c6c:	4313      	orrs	r3, r2
 8001c6e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c70:	f000 f824 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8001c74:	4602      	mov	r2, r0
 8001c76:	4b0d      	ldr	r3, [pc, #52]	; (8001cac <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	091b      	lsrs	r3, r3, #4
 8001c7c:	f003 030f 	and.w	r3, r3, #15
 8001c80:	490b      	ldr	r1, [pc, #44]	; (8001cb0 <HAL_RCC_ClockConfig+0x1f4>)
 8001c82:	5ccb      	ldrb	r3, [r1, r3]
 8001c84:	f003 031f 	and.w	r3, r3, #31
 8001c88:	fa22 f303 	lsr.w	r3, r2, r3
 8001c8c:	4a09      	ldr	r2, [pc, #36]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f8>)
 8001c8e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c90:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <HAL_RCC_ClockConfig+0x1fc>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fe7d 	bl	8000994 <HAL_InitTick>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c9e:	7afb      	ldrb	r3, [r7, #11]
}
 8001ca0:	4618      	mov	r0, r3
 8001ca2:	3710      	adds	r7, #16
 8001ca4:	46bd      	mov	sp, r7
 8001ca6:	bd80      	pop	{r7, pc}
 8001ca8:	40022000 	.word	0x40022000
 8001cac:	40021000 	.word	0x40021000
 8001cb0:	08006e60 	.word	0x08006e60
 8001cb4:	20000000 	.word	0x20000000
 8001cb8:	20000004 	.word	0x20000004

08001cbc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	b089      	sub	sp, #36	; 0x24
 8001cc0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	61fb      	str	r3, [r7, #28]
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cca:	4b3e      	ldr	r3, [pc, #248]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cd4:	4b3b      	ldr	r3, [pc, #236]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd6:	68db      	ldr	r3, [r3, #12]
 8001cd8:	f003 0303 	and.w	r3, r3, #3
 8001cdc:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d005      	beq.n	8001cf0 <HAL_RCC_GetSysClockFreq+0x34>
 8001ce4:	693b      	ldr	r3, [r7, #16]
 8001ce6:	2b0c      	cmp	r3, #12
 8001ce8:	d121      	bne.n	8001d2e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cea:	68fb      	ldr	r3, [r7, #12]
 8001cec:	2b01      	cmp	r3, #1
 8001cee:	d11e      	bne.n	8001d2e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cf0:	4b34      	ldr	r3, [pc, #208]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0308 	and.w	r3, r3, #8
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d107      	bne.n	8001d0c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001cfc:	4b31      	ldr	r3, [pc, #196]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d02:	0a1b      	lsrs	r3, r3, #8
 8001d04:	f003 030f 	and.w	r3, r3, #15
 8001d08:	61fb      	str	r3, [r7, #28]
 8001d0a:	e005      	b.n	8001d18 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d0c:	4b2d      	ldr	r3, [pc, #180]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	091b      	lsrs	r3, r3, #4
 8001d12:	f003 030f 	and.w	r3, r3, #15
 8001d16:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d18:	4a2b      	ldr	r2, [pc, #172]	; (8001dc8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d1a:	69fb      	ldr	r3, [r7, #28]
 8001d1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d20:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d10d      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d28:	69fb      	ldr	r3, [r7, #28]
 8001d2a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2c:	e00a      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d2e:	693b      	ldr	r3, [r7, #16]
 8001d30:	2b04      	cmp	r3, #4
 8001d32:	d102      	bne.n	8001d3a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d34:	4b25      	ldr	r3, [pc, #148]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d36:	61bb      	str	r3, [r7, #24]
 8001d38:	e004      	b.n	8001d44 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d3a:	693b      	ldr	r3, [r7, #16]
 8001d3c:	2b08      	cmp	r3, #8
 8001d3e:	d101      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d40:	4b23      	ldr	r3, [pc, #140]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d42:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d44:	693b      	ldr	r3, [r7, #16]
 8001d46:	2b0c      	cmp	r3, #12
 8001d48:	d134      	bne.n	8001db4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d4a:	4b1e      	ldr	r3, [pc, #120]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f003 0303 	and.w	r3, r3, #3
 8001d52:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d54:	68bb      	ldr	r3, [r7, #8]
 8001d56:	2b02      	cmp	r3, #2
 8001d58:	d003      	beq.n	8001d62 <HAL_RCC_GetSysClockFreq+0xa6>
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	2b03      	cmp	r3, #3
 8001d5e:	d003      	beq.n	8001d68 <HAL_RCC_GetSysClockFreq+0xac>
 8001d60:	e005      	b.n	8001d6e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d62:	4b1a      	ldr	r3, [pc, #104]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x110>)
 8001d64:	617b      	str	r3, [r7, #20]
      break;
 8001d66:	e005      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d68:	4b19      	ldr	r3, [pc, #100]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d6a:	617b      	str	r3, [r7, #20]
      break;
 8001d6c:	e002      	b.n	8001d74 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d6e:	69fb      	ldr	r3, [r7, #28]
 8001d70:	617b      	str	r3, [r7, #20]
      break;
 8001d72:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d74:	4b13      	ldr	r3, [pc, #76]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	091b      	lsrs	r3, r3, #4
 8001d7a:	f003 0307 	and.w	r3, r3, #7
 8001d7e:	3301      	adds	r3, #1
 8001d80:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d82:	4b10      	ldr	r3, [pc, #64]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d84:	68db      	ldr	r3, [r3, #12]
 8001d86:	0a1b      	lsrs	r3, r3, #8
 8001d88:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d8c:	697a      	ldr	r2, [r7, #20]
 8001d8e:	fb03 f202 	mul.w	r2, r3, r2
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d98:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d9a:	4b0a      	ldr	r3, [pc, #40]	; (8001dc4 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	0e5b      	lsrs	r3, r3, #25
 8001da0:	f003 0303 	and.w	r3, r3, #3
 8001da4:	3301      	adds	r3, #1
 8001da6:	005b      	lsls	r3, r3, #1
 8001da8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	fbb2 f3f3 	udiv	r3, r2, r3
 8001db2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001db4:	69bb      	ldr	r3, [r7, #24]
}
 8001db6:	4618      	mov	r0, r3
 8001db8:	3724      	adds	r7, #36	; 0x24
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	40021000 	.word	0x40021000
 8001dc8:	08006e78 	.word	0x08006e78
 8001dcc:	00f42400 	.word	0x00f42400
 8001dd0:	007a1200 	.word	0x007a1200

08001dd4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001dd8:	4b03      	ldr	r3, [pc, #12]	; (8001de8 <HAL_RCC_GetHCLKFreq+0x14>)
 8001dda:	681b      	ldr	r3, [r3, #0]
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	46bd      	mov	sp, r7
 8001de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001de4:	4770      	bx	lr
 8001de6:	bf00      	nop
 8001de8:	20000000 	.word	0x20000000

08001dec <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001df0:	f7ff fff0 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001df4:	4602      	mov	r2, r0
 8001df6:	4b06      	ldr	r3, [pc, #24]	; (8001e10 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	0a1b      	lsrs	r3, r3, #8
 8001dfc:	f003 0307 	and.w	r3, r3, #7
 8001e00:	4904      	ldr	r1, [pc, #16]	; (8001e14 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e02:	5ccb      	ldrb	r3, [r1, r3]
 8001e04:	f003 031f 	and.w	r3, r3, #31
 8001e08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e0c:	4618      	mov	r0, r3
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	40021000 	.word	0x40021000
 8001e14:	08006e70 	.word	0x08006e70

08001e18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e1c:	f7ff ffda 	bl	8001dd4 <HAL_RCC_GetHCLKFreq>
 8001e20:	4602      	mov	r2, r0
 8001e22:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e24:	689b      	ldr	r3, [r3, #8]
 8001e26:	0adb      	lsrs	r3, r3, #11
 8001e28:	f003 0307 	and.w	r3, r3, #7
 8001e2c:	4904      	ldr	r1, [pc, #16]	; (8001e40 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e2e:	5ccb      	ldrb	r3, [r1, r3]
 8001e30:	f003 031f 	and.w	r3, r3, #31
 8001e34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e38:	4618      	mov	r0, r3
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	08006e70 	.word	0x08006e70

08001e44 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e44:	b480      	push	{r7}
 8001e46:	b083      	sub	sp, #12
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
 8001e4c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	220f      	movs	r2, #15
 8001e52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e54:	4b12      	ldr	r3, [pc, #72]	; (8001ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	f003 0203 	and.w	r2, r3, #3
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e60:	4b0f      	ldr	r3, [pc, #60]	; (8001ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e6c:	4b0c      	ldr	r3, [pc, #48]	; (8001ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6e:	689b      	ldr	r3, [r3, #8]
 8001e70:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e78:	4b09      	ldr	r3, [pc, #36]	; (8001ea0 <HAL_RCC_GetClockConfig+0x5c>)
 8001e7a:	689b      	ldr	r3, [r3, #8]
 8001e7c:	08db      	lsrs	r3, r3, #3
 8001e7e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e86:	4b07      	ldr	r3, [pc, #28]	; (8001ea4 <HAL_RCC_GetClockConfig+0x60>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0207 	and.w	r2, r3, #7
 8001e8e:	683b      	ldr	r3, [r7, #0]
 8001e90:	601a      	str	r2, [r3, #0]
}
 8001e92:	bf00      	nop
 8001e94:	370c      	adds	r7, #12
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
 8001e9e:	bf00      	nop
 8001ea0:	40021000 	.word	0x40021000
 8001ea4:	40022000 	.word	0x40022000

08001ea8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001ea8:	b580      	push	{r7, lr}
 8001eaa:	b086      	sub	sp, #24
 8001eac:	af00      	add	r7, sp, #0
 8001eae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001eb4:	4b2a      	ldr	r3, [pc, #168]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d003      	beq.n	8001ec8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ec0:	f7ff f984 	bl	80011cc <HAL_PWREx_GetVoltageRange>
 8001ec4:	6178      	str	r0, [r7, #20]
 8001ec6:	e014      	b.n	8001ef2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ec8:	4b25      	ldr	r3, [pc, #148]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ecc:	4a24      	ldr	r2, [pc, #144]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ece:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ed2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ed4:	4b22      	ldr	r3, [pc, #136]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001edc:	60fb      	str	r3, [r7, #12]
 8001ede:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ee0:	f7ff f974 	bl	80011cc <HAL_PWREx_GetVoltageRange>
 8001ee4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001ee6:	4b1e      	ldr	r3, [pc, #120]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ee8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eea:	4a1d      	ldr	r2, [pc, #116]	; (8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001eec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ef8:	d10b      	bne.n	8001f12 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2b80      	cmp	r3, #128	; 0x80
 8001efe:	d919      	bls.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	2ba0      	cmp	r3, #160	; 0xa0
 8001f04:	d902      	bls.n	8001f0c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f06:	2302      	movs	r3, #2
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	e013      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f0c:	2301      	movs	r3, #1
 8001f0e:	613b      	str	r3, [r7, #16]
 8001f10:	e010      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b80      	cmp	r3, #128	; 0x80
 8001f16:	d902      	bls.n	8001f1e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f18:	2303      	movs	r3, #3
 8001f1a:	613b      	str	r3, [r7, #16]
 8001f1c:	e00a      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2b80      	cmp	r3, #128	; 0x80
 8001f22:	d102      	bne.n	8001f2a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f24:	2302      	movs	r3, #2
 8001f26:	613b      	str	r3, [r7, #16]
 8001f28:	e004      	b.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	2b70      	cmp	r3, #112	; 0x70
 8001f2e:	d101      	bne.n	8001f34 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f30:	2301      	movs	r3, #1
 8001f32:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f34:	4b0b      	ldr	r3, [pc, #44]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	f023 0207 	bic.w	r2, r3, #7
 8001f3c:	4909      	ldr	r1, [pc, #36]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	4313      	orrs	r3, r2
 8001f42:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f44:	4b07      	ldr	r3, [pc, #28]	; (8001f64 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0307 	and.w	r3, r3, #7
 8001f4c:	693a      	ldr	r2, [r7, #16]
 8001f4e:	429a      	cmp	r2, r3
 8001f50:	d001      	beq.n	8001f56 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f52:	2301      	movs	r3, #1
 8001f54:	e000      	b.n	8001f58 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f56:	2300      	movs	r3, #0
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	3718      	adds	r7, #24
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40021000 	.word	0x40021000
 8001f64:	40022000 	.word	0x40022000

08001f68 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b086      	sub	sp, #24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f70:	2300      	movs	r3, #0
 8001f72:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f74:	2300      	movs	r3, #0
 8001f76:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d031      	beq.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f88:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f8c:	d01a      	beq.n	8001fc4 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f8e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f92:	d814      	bhi.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d009      	beq.n	8001fac <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f98:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f9c:	d10f      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f9e:	4b5d      	ldr	r3, [pc, #372]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa0:	68db      	ldr	r3, [r3, #12]
 8001fa2:	4a5c      	ldr	r2, [pc, #368]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001faa:	e00c      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	3304      	adds	r3, #4
 8001fb0:	2100      	movs	r1, #0
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	f000 f9de 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fbc:	e003      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fbe:	2301      	movs	r3, #1
 8001fc0:	74fb      	strb	r3, [r7, #19]
      break;
 8001fc2:	e000      	b.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001fc4:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fc6:	7cfb      	ldrb	r3, [r7, #19]
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d10b      	bne.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fcc:	4b51      	ldr	r3, [pc, #324]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fd2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fda:	494e      	ldr	r1, [pc, #312]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fe2:	e001      	b.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fe4:	7cfb      	ldrb	r3, [r7, #19]
 8001fe6:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	f000 809e 	beq.w	8002132 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ffa:	4b46      	ldr	r3, [pc, #280]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ffc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002002:	2b00      	cmp	r3, #0
 8002004:	d101      	bne.n	800200a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800200a:	2300      	movs	r3, #0
 800200c:	2b00      	cmp	r3, #0
 800200e:	d00d      	beq.n	800202c <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002010:	4b40      	ldr	r3, [pc, #256]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002012:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002014:	4a3f      	ldr	r2, [pc, #252]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002016:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800201a:	6593      	str	r3, [r2, #88]	; 0x58
 800201c:	4b3d      	ldr	r3, [pc, #244]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800201e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002020:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002024:	60bb      	str	r3, [r7, #8]
 8002026:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002028:	2301      	movs	r3, #1
 800202a:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800202c:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a39      	ldr	r2, [pc, #228]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002032:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002036:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002038:	f7fe fe48 	bl	8000ccc <HAL_GetTick>
 800203c:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800203e:	e009      	b.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002040:	f7fe fe44 	bl	8000ccc <HAL_GetTick>
 8002044:	4602      	mov	r2, r0
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	1ad3      	subs	r3, r2, r3
 800204a:	2b02      	cmp	r3, #2
 800204c:	d902      	bls.n	8002054 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800204e:	2303      	movs	r3, #3
 8002050:	74fb      	strb	r3, [r7, #19]
        break;
 8002052:	e005      	b.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002054:	4b30      	ldr	r3, [pc, #192]	; (8002118 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800205c:	2b00      	cmp	r3, #0
 800205e:	d0ef      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002060:	7cfb      	ldrb	r3, [r7, #19]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d15a      	bne.n	800211c <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002066:	4b2b      	ldr	r3, [pc, #172]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800206c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002070:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002072:	697b      	ldr	r3, [r7, #20]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d01e      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800207c:	697a      	ldr	r2, [r7, #20]
 800207e:	429a      	cmp	r2, r3
 8002080:	d019      	beq.n	80020b6 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002082:	4b24      	ldr	r3, [pc, #144]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002084:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002088:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800208c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800208e:	4b21      	ldr	r3, [pc, #132]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002094:	4a1f      	ldr	r2, [pc, #124]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002096:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800209a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800209e:	4b1d      	ldr	r3, [pc, #116]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020a4:	4a1b      	ldr	r2, [pc, #108]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020aa:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020ae:	4a19      	ldr	r2, [pc, #100]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020b6:	697b      	ldr	r3, [r7, #20]
 80020b8:	f003 0301 	and.w	r3, r3, #1
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d016      	beq.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c0:	f7fe fe04 	bl	8000ccc <HAL_GetTick>
 80020c4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020c6:	e00b      	b.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020c8:	f7fe fe00 	bl	8000ccc <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d902      	bls.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80020da:	2303      	movs	r3, #3
 80020dc:	74fb      	strb	r3, [r7, #19]
            break;
 80020de:	e006      	b.n	80020ee <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e0:	4b0c      	ldr	r3, [pc, #48]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020e6:	f003 0302 	and.w	r3, r3, #2
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d0ec      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020ee:	7cfb      	ldrb	r3, [r7, #19]
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	d10b      	bne.n	800210c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020f4:	4b07      	ldr	r3, [pc, #28]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020fa:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002102:	4904      	ldr	r1, [pc, #16]	; (8002114 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002104:	4313      	orrs	r3, r2
 8002106:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800210a:	e009      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800210c:	7cfb      	ldrb	r3, [r7, #19]
 800210e:	74bb      	strb	r3, [r7, #18]
 8002110:	e006      	b.n	8002120 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002112:	bf00      	nop
 8002114:	40021000 	.word	0x40021000
 8002118:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800211c:	7cfb      	ldrb	r3, [r7, #19]
 800211e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002120:	7c7b      	ldrb	r3, [r7, #17]
 8002122:	2b01      	cmp	r3, #1
 8002124:	d105      	bne.n	8002132 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002126:	4b8a      	ldr	r3, [pc, #552]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002128:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800212a:	4a89      	ldr	r2, [pc, #548]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800212c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002130:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f003 0301 	and.w	r3, r3, #1
 800213a:	2b00      	cmp	r3, #0
 800213c:	d00a      	beq.n	8002154 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800213e:	4b84      	ldr	r3, [pc, #528]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002140:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002144:	f023 0203 	bic.w	r2, r3, #3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	6a1b      	ldr	r3, [r3, #32]
 800214c:	4980      	ldr	r1, [pc, #512]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800214e:	4313      	orrs	r3, r2
 8002150:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f003 0302 	and.w	r3, r3, #2
 800215c:	2b00      	cmp	r3, #0
 800215e:	d00a      	beq.n	8002176 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002160:	4b7b      	ldr	r3, [pc, #492]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002162:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002166:	f023 020c 	bic.w	r2, r3, #12
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800216e:	4978      	ldr	r1, [pc, #480]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002170:	4313      	orrs	r3, r2
 8002172:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f003 0320 	and.w	r3, r3, #32
 800217e:	2b00      	cmp	r3, #0
 8002180:	d00a      	beq.n	8002198 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002182:	4b73      	ldr	r3, [pc, #460]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002184:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002188:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002190:	496f      	ldr	r1, [pc, #444]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002192:	4313      	orrs	r3, r2
 8002194:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a0:	2b00      	cmp	r3, #0
 80021a2:	d00a      	beq.n	80021ba <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021a4:	4b6a      	ldr	r3, [pc, #424]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021aa:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021b2:	4967      	ldr	r1, [pc, #412]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021b4:	4313      	orrs	r3, r2
 80021b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d00a      	beq.n	80021dc <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021c6:	4b62      	ldr	r3, [pc, #392]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021cc:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d4:	495e      	ldr	r1, [pc, #376]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d6:	4313      	orrs	r3, r2
 80021d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d00a      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021e8:	4b59      	ldr	r3, [pc, #356]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ee:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021f6:	4956      	ldr	r1, [pc, #344]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f8:	4313      	orrs	r3, r2
 80021fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800220a:	4b51      	ldr	r3, [pc, #324]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002218:	494d      	ldr	r1, [pc, #308]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d028      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800222c:	4b48      	ldr	r3, [pc, #288]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800222e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002232:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800223a:	4945      	ldr	r1, [pc, #276]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800223c:	4313      	orrs	r3, r2
 800223e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002246:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800224a:	d106      	bne.n	800225a <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800224c:	4b40      	ldr	r3, [pc, #256]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800224e:	68db      	ldr	r3, [r3, #12]
 8002250:	4a3f      	ldr	r2, [pc, #252]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002252:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002256:	60d3      	str	r3, [r2, #12]
 8002258:	e011      	b.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800225e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002262:	d10c      	bne.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	3304      	adds	r3, #4
 8002268:	2101      	movs	r1, #1
 800226a:	4618      	mov	r0, r3
 800226c:	f000 f882 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8002270:	4603      	mov	r3, r0
 8002272:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002274:	7cfb      	ldrb	r3, [r7, #19]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d001      	beq.n	800227e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800227a:	7cfb      	ldrb	r3, [r7, #19]
 800227c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d028      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800228a:	4b31      	ldr	r3, [pc, #196]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800228c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002290:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002298:	492d      	ldr	r1, [pc, #180]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800229a:	4313      	orrs	r3, r2
 800229c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022a8:	d106      	bne.n	80022b8 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022aa:	4b29      	ldr	r3, [pc, #164]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ac:	68db      	ldr	r3, [r3, #12]
 80022ae:	4a28      	ldr	r2, [pc, #160]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022b4:	60d3      	str	r3, [r2, #12]
 80022b6:	e011      	b.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022bc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c0:	d10c      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	3304      	adds	r3, #4
 80022c6:	2101      	movs	r1, #1
 80022c8:	4618      	mov	r0, r3
 80022ca:	f000 f853 	bl	8002374 <RCCEx_PLLSAI1_Config>
 80022ce:	4603      	mov	r3, r0
 80022d0:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022d2:	7cfb      	ldrb	r3, [r7, #19]
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d001      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80022d8:	7cfb      	ldrb	r3, [r7, #19]
 80022da:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d01c      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022e8:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022ee:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022f6:	4916      	ldr	r1, [pc, #88]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002302:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002306:	d10c      	bne.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	3304      	adds	r3, #4
 800230c:	2102      	movs	r1, #2
 800230e:	4618      	mov	r0, r3
 8002310:	f000 f830 	bl	8002374 <RCCEx_PLLSAI1_Config>
 8002314:	4603      	mov	r3, r0
 8002316:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002318:	7cfb      	ldrb	r3, [r7, #19]
 800231a:	2b00      	cmp	r3, #0
 800231c:	d001      	beq.n	8002322 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800231e:	7cfb      	ldrb	r3, [r7, #19]
 8002320:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d00a      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800232e:	4b08      	ldr	r3, [pc, #32]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002330:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002334:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800233c:	4904      	ldr	r1, [pc, #16]	; (8002350 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800233e:	4313      	orrs	r3, r2
 8002340:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002344:	7cbb      	ldrb	r3, [r7, #18]
}
 8002346:	4618      	mov	r0, r3
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}
 800234e:	bf00      	nop
 8002350:	40021000 	.word	0x40021000

08002354 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002354:	b480      	push	{r7}
 8002356:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002358:	4b05      	ldr	r3, [pc, #20]	; (8002370 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a04      	ldr	r2, [pc, #16]	; (8002370 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6013      	str	r3, [r2, #0]
}
 8002364:	bf00      	nop
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr
 800236e:	bf00      	nop
 8002370:	40021000 	.word	0x40021000

08002374 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002374:	b580      	push	{r7, lr}
 8002376:	b084      	sub	sp, #16
 8002378:	af00      	add	r7, sp, #0
 800237a:	6078      	str	r0, [r7, #4]
 800237c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800237e:	2300      	movs	r3, #0
 8002380:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002382:	4b74      	ldr	r3, [pc, #464]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002384:	68db      	ldr	r3, [r3, #12]
 8002386:	f003 0303 	and.w	r3, r3, #3
 800238a:	2b00      	cmp	r3, #0
 800238c:	d018      	beq.n	80023c0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800238e:	4b71      	ldr	r3, [pc, #452]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002390:	68db      	ldr	r3, [r3, #12]
 8002392:	f003 0203 	and.w	r2, r3, #3
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d10d      	bne.n	80023ba <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
       ||
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d009      	beq.n	80023ba <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023a6:	4b6b      	ldr	r3, [pc, #428]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023a8:	68db      	ldr	r3, [r3, #12]
 80023aa:	091b      	lsrs	r3, r3, #4
 80023ac:	f003 0307 	and.w	r3, r3, #7
 80023b0:	1c5a      	adds	r2, r3, #1
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	685b      	ldr	r3, [r3, #4]
       ||
 80023b6:	429a      	cmp	r2, r3
 80023b8:	d047      	beq.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023ba:	2301      	movs	r3, #1
 80023bc:	73fb      	strb	r3, [r7, #15]
 80023be:	e044      	b.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d018      	beq.n	80023fa <RCCEx_PLLSAI1_Config+0x86>
 80023c8:	2b03      	cmp	r3, #3
 80023ca:	d825      	bhi.n	8002418 <RCCEx_PLLSAI1_Config+0xa4>
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	d002      	beq.n	80023d6 <RCCEx_PLLSAI1_Config+0x62>
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d009      	beq.n	80023e8 <RCCEx_PLLSAI1_Config+0x74>
 80023d4:	e020      	b.n	8002418 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023d6:	4b5f      	ldr	r3, [pc, #380]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f003 0302 	and.w	r3, r3, #2
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11d      	bne.n	800241e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023e2:	2301      	movs	r3, #1
 80023e4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023e6:	e01a      	b.n	800241e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023e8:	4b5a      	ldr	r3, [pc, #360]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d116      	bne.n	8002422 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023f8:	e013      	b.n	8002422 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80023fa:	4b56      	ldr	r3, [pc, #344]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d10f      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002406:	4b53      	ldr	r3, [pc, #332]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800240e:	2b00      	cmp	r3, #0
 8002410:	d109      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002412:	2301      	movs	r3, #1
 8002414:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002416:	e006      	b.n	8002426 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002418:	2301      	movs	r3, #1
 800241a:	73fb      	strb	r3, [r7, #15]
      break;
 800241c:	e004      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800241e:	bf00      	nop
 8002420:	e002      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002422:	bf00      	nop
 8002424:	e000      	b.n	8002428 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002426:	bf00      	nop
    }

    if(status == HAL_OK)
 8002428:	7bfb      	ldrb	r3, [r7, #15]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d10d      	bne.n	800244a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800242e:	4b49      	ldr	r3, [pc, #292]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002430:	68db      	ldr	r3, [r3, #12]
 8002432:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6819      	ldr	r1, [r3, #0]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	3b01      	subs	r3, #1
 8002440:	011b      	lsls	r3, r3, #4
 8002442:	430b      	orrs	r3, r1
 8002444:	4943      	ldr	r1, [pc, #268]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002446:	4313      	orrs	r3, r2
 8002448:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800244a:	7bfb      	ldrb	r3, [r7, #15]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d17c      	bne.n	800254a <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002450:	4b40      	ldr	r3, [pc, #256]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4a3f      	ldr	r2, [pc, #252]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002456:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800245a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800245c:	f7fe fc36 	bl	8000ccc <HAL_GetTick>
 8002460:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002462:	e009      	b.n	8002478 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002464:	f7fe fc32 	bl	8000ccc <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d902      	bls.n	8002478 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	73fb      	strb	r3, [r7, #15]
        break;
 8002476:	e005      	b.n	8002484 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002478:	4b36      	ldr	r3, [pc, #216]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002480:	2b00      	cmp	r3, #0
 8002482:	d1ef      	bne.n	8002464 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002484:	7bfb      	ldrb	r3, [r7, #15]
 8002486:	2b00      	cmp	r3, #0
 8002488:	d15f      	bne.n	800254a <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	2b00      	cmp	r3, #0
 800248e:	d110      	bne.n	80024b2 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002490:	4b30      	ldr	r3, [pc, #192]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800249c:	687a      	ldr	r2, [r7, #4]
 800249e:	6892      	ldr	r2, [r2, #8]
 80024a0:	0211      	lsls	r1, r2, #8
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	68d2      	ldr	r2, [r2, #12]
 80024a6:	06d2      	lsls	r2, r2, #27
 80024a8:	430a      	orrs	r2, r1
 80024aa:	492a      	ldr	r1, [pc, #168]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ac:	4313      	orrs	r3, r2
 80024ae:	610b      	str	r3, [r1, #16]
 80024b0:	e027      	b.n	8002502 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	2b01      	cmp	r3, #1
 80024b6:	d112      	bne.n	80024de <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024b8:	4b26      	ldr	r3, [pc, #152]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024c0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024c4:	687a      	ldr	r2, [r7, #4]
 80024c6:	6892      	ldr	r2, [r2, #8]
 80024c8:	0211      	lsls	r1, r2, #8
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	6912      	ldr	r2, [r2, #16]
 80024ce:	0852      	lsrs	r2, r2, #1
 80024d0:	3a01      	subs	r2, #1
 80024d2:	0552      	lsls	r2, r2, #21
 80024d4:	430a      	orrs	r2, r1
 80024d6:	491f      	ldr	r1, [pc, #124]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d8:	4313      	orrs	r3, r2
 80024da:	610b      	str	r3, [r1, #16]
 80024dc:	e011      	b.n	8002502 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024de:	4b1d      	ldr	r3, [pc, #116]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e0:	691b      	ldr	r3, [r3, #16]
 80024e2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024e6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024ea:	687a      	ldr	r2, [r7, #4]
 80024ec:	6892      	ldr	r2, [r2, #8]
 80024ee:	0211      	lsls	r1, r2, #8
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6952      	ldr	r2, [r2, #20]
 80024f4:	0852      	lsrs	r2, r2, #1
 80024f6:	3a01      	subs	r2, #1
 80024f8:	0652      	lsls	r2, r2, #25
 80024fa:	430a      	orrs	r2, r1
 80024fc:	4915      	ldr	r1, [pc, #84]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002502:	4b14      	ldr	r3, [pc, #80]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	4a13      	ldr	r2, [pc, #76]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002508:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800250c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800250e:	f7fe fbdd 	bl	8000ccc <HAL_GetTick>
 8002512:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002514:	e009      	b.n	800252a <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002516:	f7fe fbd9 	bl	8000ccc <HAL_GetTick>
 800251a:	4602      	mov	r2, r0
 800251c:	68bb      	ldr	r3, [r7, #8]
 800251e:	1ad3      	subs	r3, r2, r3
 8002520:	2b02      	cmp	r3, #2
 8002522:	d902      	bls.n	800252a <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002524:	2303      	movs	r3, #3
 8002526:	73fb      	strb	r3, [r7, #15]
          break;
 8002528:	e005      	b.n	8002536 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800252a:	4b0a      	ldr	r3, [pc, #40]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d0ef      	beq.n	8002516 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002536:	7bfb      	ldrb	r3, [r7, #15]
 8002538:	2b00      	cmp	r3, #0
 800253a:	d106      	bne.n	800254a <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800253c:	4b05      	ldr	r3, [pc, #20]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 800253e:	691a      	ldr	r2, [r3, #16]
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	699b      	ldr	r3, [r3, #24]
 8002544:	4903      	ldr	r1, [pc, #12]	; (8002554 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002546:	4313      	orrs	r3, r2
 8002548:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800254a:	7bfb      	ldrb	r3, [r7, #15]
}
 800254c:	4618      	mov	r0, r3
 800254e:	3710      	adds	r7, #16
 8002550:	46bd      	mov	sp, r7
 8002552:	bd80      	pop	{r7, pc}
 8002554:	40021000 	.word	0x40021000

08002558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e049      	b.n	80025fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f000 f841 	bl	8002606 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4610      	mov	r0, r2
 8002598:	f000 f9dc 	bl	8002954 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002606:	b480      	push	{r7}
 8002608:	b083      	sub	sp, #12
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800260e:	bf00      	nop
 8002610:	370c      	adds	r7, #12
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr
	...

0800261c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800261c:	b480      	push	{r7}
 800261e:	b085      	sub	sp, #20
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800262a:	b2db      	uxtb	r3, r3
 800262c:	2b01      	cmp	r3, #1
 800262e:	d001      	beq.n	8002634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002630:	2301      	movs	r3, #1
 8002632:	e03b      	b.n	80026ac <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	2202      	movs	r2, #2
 8002638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	68da      	ldr	r2, [r3, #12]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f042 0201 	orr.w	r2, r2, #1
 800264a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_TIM_Base_Start_IT+0x9c>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d009      	beq.n	800266a <HAL_TIM_Base_Start_IT+0x4e>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800265e:	d004      	beq.n	800266a <HAL_TIM_Base_Start_IT+0x4e>
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a15      	ldr	r2, [pc, #84]	; (80026bc <HAL_TIM_Base_Start_IT+0xa0>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d115      	bne.n	8002696 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	689a      	ldr	r2, [r3, #8]
 8002670:	4b13      	ldr	r3, [pc, #76]	; (80026c0 <HAL_TIM_Base_Start_IT+0xa4>)
 8002672:	4013      	ands	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b06      	cmp	r3, #6
 800267a:	d015      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x8c>
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002682:	d011      	beq.n	80026a8 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	681a      	ldr	r2, [r3, #0]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	f042 0201 	orr.w	r2, r2, #1
 8002692:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002694:	e008      	b.n	80026a8 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	f042 0201 	orr.w	r2, r2, #1
 80026a4:	601a      	str	r2, [r3, #0]
 80026a6:	e000      	b.n	80026aa <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026a8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3714      	adds	r7, #20
 80026b0:	46bd      	mov	sp, r7
 80026b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b6:	4770      	bx	lr
 80026b8:	40012c00 	.word	0x40012c00
 80026bc:	40014000 	.word	0x40014000
 80026c0:	00010007 	.word	0x00010007

080026c4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b082      	sub	sp, #8
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	691b      	ldr	r3, [r3, #16]
 80026d2:	f003 0302 	and.w	r3, r3, #2
 80026d6:	2b02      	cmp	r3, #2
 80026d8:	d122      	bne.n	8002720 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	68db      	ldr	r3, [r3, #12]
 80026e0:	f003 0302 	and.w	r3, r3, #2
 80026e4:	2b02      	cmp	r3, #2
 80026e6:	d11b      	bne.n	8002720 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	f06f 0202 	mvn.w	r2, #2
 80026f0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2201      	movs	r2, #1
 80026f6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	699b      	ldr	r3, [r3, #24]
 80026fe:	f003 0303 	and.w	r3, r3, #3
 8002702:	2b00      	cmp	r3, #0
 8002704:	d003      	beq.n	800270e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002706:	6878      	ldr	r0, [r7, #4]
 8002708:	f000 f905 	bl	8002916 <HAL_TIM_IC_CaptureCallback>
 800270c:	e005      	b.n	800271a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f8f7 	bl	8002902 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002714:	6878      	ldr	r0, [r7, #4]
 8002716:	f000 f908 	bl	800292a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2200      	movs	r2, #0
 800271e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	691b      	ldr	r3, [r3, #16]
 8002726:	f003 0304 	and.w	r3, r3, #4
 800272a:	2b04      	cmp	r3, #4
 800272c:	d122      	bne.n	8002774 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f003 0304 	and.w	r3, r3, #4
 8002738:	2b04      	cmp	r3, #4
 800273a:	d11b      	bne.n	8002774 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f06f 0204 	mvn.w	r2, #4
 8002744:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2202      	movs	r2, #2
 800274a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	699b      	ldr	r3, [r3, #24]
 8002752:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002756:	2b00      	cmp	r3, #0
 8002758:	d003      	beq.n	8002762 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800275a:	6878      	ldr	r0, [r7, #4]
 800275c:	f000 f8db 	bl	8002916 <HAL_TIM_IC_CaptureCallback>
 8002760:	e005      	b.n	800276e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8cd 	bl	8002902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002768:	6878      	ldr	r0, [r7, #4]
 800276a:	f000 f8de 	bl	800292a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	691b      	ldr	r3, [r3, #16]
 800277a:	f003 0308 	and.w	r3, r3, #8
 800277e:	2b08      	cmp	r3, #8
 8002780:	d122      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	f003 0308 	and.w	r3, r3, #8
 800278c:	2b08      	cmp	r3, #8
 800278e:	d11b      	bne.n	80027c8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f06f 0208 	mvn.w	r2, #8
 8002798:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2204      	movs	r2, #4
 800279e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	69db      	ldr	r3, [r3, #28]
 80027a6:	f003 0303 	and.w	r3, r3, #3
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d003      	beq.n	80027b6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027ae:	6878      	ldr	r0, [r7, #4]
 80027b0:	f000 f8b1 	bl	8002916 <HAL_TIM_IC_CaptureCallback>
 80027b4:	e005      	b.n	80027c2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8a3 	bl	8002902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f000 f8b4 	bl	800292a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	691b      	ldr	r3, [r3, #16]
 80027ce:	f003 0310 	and.w	r3, r3, #16
 80027d2:	2b10      	cmp	r3, #16
 80027d4:	d122      	bne.n	800281c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	68db      	ldr	r3, [r3, #12]
 80027dc:	f003 0310 	and.w	r3, r3, #16
 80027e0:	2b10      	cmp	r3, #16
 80027e2:	d11b      	bne.n	800281c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f06f 0210 	mvn.w	r2, #16
 80027ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2208      	movs	r2, #8
 80027f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	69db      	ldr	r3, [r3, #28]
 80027fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d003      	beq.n	800280a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002802:	6878      	ldr	r0, [r7, #4]
 8002804:	f000 f887 	bl	8002916 <HAL_TIM_IC_CaptureCallback>
 8002808:	e005      	b.n	8002816 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f879 	bl	8002902 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002810:	6878      	ldr	r0, [r7, #4]
 8002812:	f000 f88a 	bl	800292a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2200      	movs	r2, #0
 800281a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	691b      	ldr	r3, [r3, #16]
 8002822:	f003 0301 	and.w	r3, r3, #1
 8002826:	2b01      	cmp	r3, #1
 8002828:	d10e      	bne.n	8002848 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	68db      	ldr	r3, [r3, #12]
 8002830:	f003 0301 	and.w	r3, r3, #1
 8002834:	2b01      	cmp	r3, #1
 8002836:	d107      	bne.n	8002848 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f06f 0201 	mvn.w	r2, #1
 8002840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002842:	6878      	ldr	r0, [r7, #4]
 8002844:	f7fd ff1e 	bl	8000684 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	691b      	ldr	r3, [r3, #16]
 800284e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002852:	2b80      	cmp	r3, #128	; 0x80
 8002854:	d10e      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	68db      	ldr	r3, [r3, #12]
 800285c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002860:	2b80      	cmp	r3, #128	; 0x80
 8002862:	d107      	bne.n	8002874 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800286c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800286e:	6878      	ldr	r0, [r7, #4]
 8002870:	f000 f8de 	bl	8002a30 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	681b      	ldr	r3, [r3, #0]
 8002878:	691b      	ldr	r3, [r3, #16]
 800287a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800287e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002882:	d10e      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	68db      	ldr	r3, [r3, #12]
 800288a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800288e:	2b80      	cmp	r3, #128	; 0x80
 8002890:	d107      	bne.n	80028a2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800289a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800289c:	6878      	ldr	r0, [r7, #4]
 800289e:	f000 f8d1 	bl	8002a44 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	691b      	ldr	r3, [r3, #16]
 80028a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ac:	2b40      	cmp	r3, #64	; 0x40
 80028ae:	d10e      	bne.n	80028ce <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	68db      	ldr	r3, [r3, #12]
 80028b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028ba:	2b40      	cmp	r3, #64	; 0x40
 80028bc:	d107      	bne.n	80028ce <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028c8:	6878      	ldr	r0, [r7, #4]
 80028ca:	f000 f838 	bl	800293e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	691b      	ldr	r3, [r3, #16]
 80028d4:	f003 0320 	and.w	r3, r3, #32
 80028d8:	2b20      	cmp	r3, #32
 80028da:	d10e      	bne.n	80028fa <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	68db      	ldr	r3, [r3, #12]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b20      	cmp	r3, #32
 80028e8:	d107      	bne.n	80028fa <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f06f 0220 	mvn.w	r2, #32
 80028f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028f4:	6878      	ldr	r0, [r7, #4]
 80028f6:	f000 f891 	bl	8002a1c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80028fa:	bf00      	nop
 80028fc:	3708      	adds	r7, #8
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd80      	pop	{r7, pc}

08002902 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002902:	b480      	push	{r7}
 8002904:	b083      	sub	sp, #12
 8002906:	af00      	add	r7, sp, #0
 8002908:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800290a:	bf00      	nop
 800290c:	370c      	adds	r7, #12
 800290e:	46bd      	mov	sp, r7
 8002910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002914:	4770      	bx	lr

08002916 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr

0800292a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800292a:	b480      	push	{r7}
 800292c:	b083      	sub	sp, #12
 800292e:	af00      	add	r7, sp, #0
 8002930:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002932:	bf00      	nop
 8002934:	370c      	adds	r7, #12
 8002936:	46bd      	mov	sp, r7
 8002938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293c:	4770      	bx	lr

0800293e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800293e:	b480      	push	{r7}
 8002940:	b083      	sub	sp, #12
 8002942:	af00      	add	r7, sp, #0
 8002944:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002946:	bf00      	nop
 8002948:	370c      	adds	r7, #12
 800294a:	46bd      	mov	sp, r7
 800294c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002950:	4770      	bx	lr
	...

08002954 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002954:	b480      	push	{r7}
 8002956:	b085      	sub	sp, #20
 8002958:	af00      	add	r7, sp, #0
 800295a:	6078      	str	r0, [r7, #4]
 800295c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	4a2a      	ldr	r2, [pc, #168]	; (8002a10 <TIM_Base_SetConfig+0xbc>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d003      	beq.n	8002974 <TIM_Base_SetConfig+0x20>
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002972:	d108      	bne.n	8002986 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800297a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	68fa      	ldr	r2, [r7, #12]
 8002982:	4313      	orrs	r3, r2
 8002984:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	4a21      	ldr	r2, [pc, #132]	; (8002a10 <TIM_Base_SetConfig+0xbc>)
 800298a:	4293      	cmp	r3, r2
 800298c:	d00b      	beq.n	80029a6 <TIM_Base_SetConfig+0x52>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002994:	d007      	beq.n	80029a6 <TIM_Base_SetConfig+0x52>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	4a1e      	ldr	r2, [pc, #120]	; (8002a14 <TIM_Base_SetConfig+0xc0>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d003      	beq.n	80029a6 <TIM_Base_SetConfig+0x52>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1d      	ldr	r2, [pc, #116]	; (8002a18 <TIM_Base_SetConfig+0xc4>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d108      	bne.n	80029b8 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029ac:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029ae:	683b      	ldr	r3, [r7, #0]
 80029b0:	68db      	ldr	r3, [r3, #12]
 80029b2:	68fa      	ldr	r2, [r7, #12]
 80029b4:	4313      	orrs	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	695b      	ldr	r3, [r3, #20]
 80029c2:	4313      	orrs	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	689a      	ldr	r2, [r3, #8]
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681a      	ldr	r2, [r3, #0]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	4a0c      	ldr	r2, [pc, #48]	; (8002a10 <TIM_Base_SetConfig+0xbc>)
 80029e0:	4293      	cmp	r3, r2
 80029e2:	d007      	beq.n	80029f4 <TIM_Base_SetConfig+0xa0>
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a0b      	ldr	r2, [pc, #44]	; (8002a14 <TIM_Base_SetConfig+0xc0>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d003      	beq.n	80029f4 <TIM_Base_SetConfig+0xa0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a0a      	ldr	r2, [pc, #40]	; (8002a18 <TIM_Base_SetConfig+0xc4>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d103      	bne.n	80029fc <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	691a      	ldr	r2, [r3, #16]
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2201      	movs	r2, #1
 8002a00:	615a      	str	r2, [r3, #20]
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	40012c00 	.word	0x40012c00
 8002a14:	40014000 	.word	0x40014000
 8002a18:	40014400 	.word	0x40014400

08002a1c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a24:	bf00      	nop
 8002a26:	370c      	adds	r7, #12
 8002a28:	46bd      	mov	sp, r7
 8002a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a2e:	4770      	bx	lr

08002a30 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a30:	b480      	push	{r7}
 8002a32:	b083      	sub	sp, #12
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a42:	4770      	bx	lr

08002a44 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b083      	sub	sp, #12
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a4c:	bf00      	nop
 8002a4e:	370c      	adds	r7, #12
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr

08002a58 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a58:	b580      	push	{r7, lr}
 8002a5a:	b082      	sub	sp, #8
 8002a5c:	af00      	add	r7, sp, #0
 8002a5e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d101      	bne.n	8002a6a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a66:	2301      	movs	r3, #1
 8002a68:	e040      	b.n	8002aec <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d106      	bne.n	8002a80 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a7a:	6878      	ldr	r0, [r7, #4]
 8002a7c:	f7fe f866 	bl	8000b4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2224      	movs	r2, #36	; 0x24
 8002a84:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f022 0201 	bic.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 f992 	bl	8002dc0 <UART_SetConfig>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e022      	b.n	8002aec <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d002      	beq.n	8002ab4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 fbb2 	bl	8003218 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	685a      	ldr	r2, [r3, #4]
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002ac2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	689a      	ldr	r2, [r3, #8]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ad2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	681a      	ldr	r2, [r3, #0]
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f042 0201 	orr.w	r2, r2, #1
 8002ae2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fc39 	bl	800335c <UART_CheckIdleState>
 8002aea:	4603      	mov	r3, r0
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	3708      	adds	r7, #8
 8002af0:	46bd      	mov	sp, r7
 8002af2:	bd80      	pop	{r7, pc}

08002af4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	; 0x28
 8002af8:	af02      	add	r7, sp, #8
 8002afa:	60f8      	str	r0, [r7, #12]
 8002afc:	60b9      	str	r1, [r7, #8]
 8002afe:	603b      	str	r3, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b08:	2b20      	cmp	r3, #32
 8002b0a:	f040 8082 	bne.w	8002c12 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d002      	beq.n	8002b1a <HAL_UART_Transmit+0x26>
 8002b14:	88fb      	ldrh	r3, [r7, #6]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e07a      	b.n	8002c14 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d101      	bne.n	8002b2c <HAL_UART_Transmit+0x38>
 8002b28:	2302      	movs	r3, #2
 8002b2a:	e073      	b.n	8002c14 <HAL_UART_Transmit+0x120>
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2201      	movs	r2, #1
 8002b30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2200      	movs	r2, #0
 8002b38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2221      	movs	r2, #33	; 0x21
 8002b40:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b42:	f7fe f8c3 	bl	8000ccc <HAL_GetTick>
 8002b46:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	88fa      	ldrh	r2, [r7, #6]
 8002b4c:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	88fa      	ldrh	r2, [r7, #6]
 8002b54:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	689b      	ldr	r3, [r3, #8]
 8002b5c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b60:	d108      	bne.n	8002b74 <HAL_UART_Transmit+0x80>
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	691b      	ldr	r3, [r3, #16]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d104      	bne.n	8002b74 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b6a:	2300      	movs	r3, #0
 8002b6c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	61bb      	str	r3, [r7, #24]
 8002b72:	e003      	b.n	8002b7c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b78:	2300      	movs	r3, #0
 8002b7a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b84:	e02d      	b.n	8002be2 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b86:	683b      	ldr	r3, [r7, #0]
 8002b88:	9300      	str	r3, [sp, #0]
 8002b8a:	697b      	ldr	r3, [r7, #20]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	2180      	movs	r1, #128	; 0x80
 8002b90:	68f8      	ldr	r0, [r7, #12]
 8002b92:	f000 fc2c 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 8002b96:	4603      	mov	r3, r0
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d001      	beq.n	8002ba0 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b9c:	2303      	movs	r3, #3
 8002b9e:	e039      	b.n	8002c14 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d10b      	bne.n	8002bbe <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ba6:	69bb      	ldr	r3, [r7, #24]
 8002ba8:	881a      	ldrh	r2, [r3, #0]
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bb2:	b292      	uxth	r2, r2
 8002bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	3302      	adds	r3, #2
 8002bba:	61bb      	str	r3, [r7, #24]
 8002bbc:	e008      	b.n	8002bd0 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bbe:	69fb      	ldr	r3, [r7, #28]
 8002bc0:	781a      	ldrb	r2, [r3, #0]
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	b292      	uxth	r2, r2
 8002bc8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3301      	adds	r3, #1
 8002bce:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bd6:	b29b      	uxth	r3, r3
 8002bd8:	3b01      	subs	r3, #1
 8002bda:	b29a      	uxth	r2, r3
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002be8:	b29b      	uxth	r3, r3
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1cb      	bne.n	8002b86 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bee:	683b      	ldr	r3, [r7, #0]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2140      	movs	r1, #64	; 0x40
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f000 fbf8 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d001      	beq.n	8002c08 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c04:	2303      	movs	r3, #3
 8002c06:	e005      	b.n	8002c14 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c0e:	2300      	movs	r3, #0
 8002c10:	e000      	b.n	8002c14 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c12:	2302      	movs	r3, #2
  }
}
 8002c14:	4618      	mov	r0, r3
 8002c16:	3720      	adds	r7, #32
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	bd80      	pop	{r7, pc}

08002c1c <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c1c:	b580      	push	{r7, lr}
 8002c1e:	b08a      	sub	sp, #40	; 0x28
 8002c20:	af02      	add	r7, sp, #8
 8002c22:	60f8      	str	r0, [r7, #12]
 8002c24:	60b9      	str	r1, [r7, #8]
 8002c26:	603b      	str	r3, [r7, #0]
 8002c28:	4613      	mov	r3, r2
 8002c2a:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002c30:	2b20      	cmp	r3, #32
 8002c32:	f040 80bf 	bne.w	8002db4 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002c36:	68bb      	ldr	r3, [r7, #8]
 8002c38:	2b00      	cmp	r3, #0
 8002c3a:	d002      	beq.n	8002c42 <HAL_UART_Receive+0x26>
 8002c3c:	88fb      	ldrh	r3, [r7, #6]
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d101      	bne.n	8002c46 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002c42:	2301      	movs	r3, #1
 8002c44:	e0b7      	b.n	8002db6 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002c4c:	2b01      	cmp	r3, #1
 8002c4e:	d101      	bne.n	8002c54 <HAL_UART_Receive+0x38>
 8002c50:	2302      	movs	r3, #2
 8002c52:	e0b0      	b.n	8002db6 <HAL_UART_Receive+0x19a>
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	2201      	movs	r2, #1
 8002c58:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	2222      	movs	r2, #34	; 0x22
 8002c68:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	2200      	movs	r2, #0
 8002c6e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c70:	f7fe f82c 	bl	8000ccc <HAL_GetTick>
 8002c74:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	88fa      	ldrh	r2, [r7, #6]
 8002c7a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	88fa      	ldrh	r2, [r7, #6]
 8002c82:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	689b      	ldr	r3, [r3, #8]
 8002c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c8e:	d10e      	bne.n	8002cae <HAL_UART_Receive+0x92>
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	691b      	ldr	r3, [r3, #16]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d105      	bne.n	8002ca4 <HAL_UART_Receive+0x88>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002c9e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002ca2:	e02d      	b.n	8002d00 <HAL_UART_Receive+0xe4>
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	22ff      	movs	r2, #255	; 0xff
 8002ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cac:	e028      	b.n	8002d00 <HAL_UART_Receive+0xe4>
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	689b      	ldr	r3, [r3, #8]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	d10d      	bne.n	8002cd2 <HAL_UART_Receive+0xb6>
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	691b      	ldr	r3, [r3, #16]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d104      	bne.n	8002cc8 <HAL_UART_Receive+0xac>
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	22ff      	movs	r2, #255	; 0xff
 8002cc2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cc6:	e01b      	b.n	8002d00 <HAL_UART_Receive+0xe4>
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	227f      	movs	r2, #127	; 0x7f
 8002ccc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cd0:	e016      	b.n	8002d00 <HAL_UART_Receive+0xe4>
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002cda:	d10d      	bne.n	8002cf8 <HAL_UART_Receive+0xdc>
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	691b      	ldr	r3, [r3, #16]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d104      	bne.n	8002cee <HAL_UART_Receive+0xd2>
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	227f      	movs	r2, #127	; 0x7f
 8002ce8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cec:	e008      	b.n	8002d00 <HAL_UART_Receive+0xe4>
 8002cee:	68fb      	ldr	r3, [r7, #12]
 8002cf0:	223f      	movs	r2, #63	; 0x3f
 8002cf2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002cf6:	e003      	b.n	8002d00 <HAL_UART_Receive+0xe4>
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002d06:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d10:	d108      	bne.n	8002d24 <HAL_UART_Receive+0x108>
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d104      	bne.n	8002d24 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	61bb      	str	r3, [r7, #24]
 8002d22:	e003      	b.n	8002d2c <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d28:	2300      	movs	r3, #0
 8002d2a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002d34:	e033      	b.n	8002d9e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	9300      	str	r3, [sp, #0]
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	2200      	movs	r2, #0
 8002d3e:	2120      	movs	r1, #32
 8002d40:	68f8      	ldr	r0, [r7, #12]
 8002d42:	f000 fb54 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 8002d46:	4603      	mov	r3, r0
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d001      	beq.n	8002d50 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e032      	b.n	8002db6 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d10c      	bne.n	8002d70 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d5c:	b29a      	uxth	r2, r3
 8002d5e:	8a7b      	ldrh	r3, [r7, #18]
 8002d60:	4013      	ands	r3, r2
 8002d62:	b29a      	uxth	r2, r3
 8002d64:	69bb      	ldr	r3, [r7, #24]
 8002d66:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	3302      	adds	r3, #2
 8002d6c:	61bb      	str	r3, [r7, #24]
 8002d6e:	e00d      	b.n	8002d8c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d76:	b29b      	uxth	r3, r3
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	8a7b      	ldrh	r3, [r7, #18]
 8002d7c:	b2db      	uxtb	r3, r3
 8002d7e:	4013      	ands	r3, r2
 8002d80:	b2da      	uxtb	r2, r3
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	3301      	adds	r3, #1
 8002d8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d92:	b29b      	uxth	r3, r3
 8002d94:	3b01      	subs	r3, #1
 8002d96:	b29a      	uxth	r2, r3
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002da4:	b29b      	uxth	r3, r3
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1c5      	bne.n	8002d36 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	2220      	movs	r2, #32
 8002dae:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002db0:	2300      	movs	r3, #0
 8002db2:	e000      	b.n	8002db6 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002db4:	2302      	movs	r3, #2
  }
}
 8002db6:	4618      	mov	r0, r3
 8002db8:	3720      	adds	r7, #32
 8002dba:	46bd      	mov	sp, r7
 8002dbc:	bd80      	pop	{r7, pc}
	...

08002dc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002dc0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dc4:	b08a      	sub	sp, #40	; 0x28
 8002dc6:	af00      	add	r7, sp, #0
 8002dc8:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	689a      	ldr	r2, [r3, #8]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	691b      	ldr	r3, [r3, #16]
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	695b      	ldr	r3, [r3, #20]
 8002dde:	431a      	orrs	r2, r3
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	69db      	ldr	r3, [r3, #28]
 8002de4:	4313      	orrs	r3, r2
 8002de6:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	4bb4      	ldr	r3, [pc, #720]	; (80030c0 <UART_SetConfig+0x300>)
 8002df0:	4013      	ands	r3, r2
 8002df2:	68fa      	ldr	r2, [r7, #12]
 8002df4:	6812      	ldr	r2, [r2, #0]
 8002df6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002df8:	430b      	orrs	r3, r1
 8002dfa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	685b      	ldr	r3, [r3, #4]
 8002e02:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	68da      	ldr	r2, [r3, #12]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	430a      	orrs	r2, r1
 8002e10:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4aa9      	ldr	r2, [pc, #676]	; (80030c4 <UART_SetConfig+0x304>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d004      	beq.n	8002e2c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002e2c:	68fb      	ldr	r3, [r7, #12]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	689b      	ldr	r3, [r3, #8]
 8002e32:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e3c:	430a      	orrs	r2, r1
 8002e3e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4aa0      	ldr	r2, [pc, #640]	; (80030c8 <UART_SetConfig+0x308>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d126      	bne.n	8002e98 <UART_SetConfig+0xd8>
 8002e4a:	4ba0      	ldr	r3, [pc, #640]	; (80030cc <UART_SetConfig+0x30c>)
 8002e4c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	2b03      	cmp	r3, #3
 8002e56:	d81b      	bhi.n	8002e90 <UART_SetConfig+0xd0>
 8002e58:	a201      	add	r2, pc, #4	; (adr r2, 8002e60 <UART_SetConfig+0xa0>)
 8002e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5e:	bf00      	nop
 8002e60:	08002e71 	.word	0x08002e71
 8002e64:	08002e81 	.word	0x08002e81
 8002e68:	08002e79 	.word	0x08002e79
 8002e6c:	08002e89 	.word	0x08002e89
 8002e70:	2301      	movs	r3, #1
 8002e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e76:	e080      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002e78:	2302      	movs	r3, #2
 8002e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e7e:	e07c      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002e80:	2304      	movs	r3, #4
 8002e82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e86:	e078      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002e88:	2308      	movs	r3, #8
 8002e8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8e:	e074      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002e90:	2310      	movs	r3, #16
 8002e92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e96:	e070      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a8c      	ldr	r2, [pc, #560]	; (80030d0 <UART_SetConfig+0x310>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d138      	bne.n	8002f14 <UART_SetConfig+0x154>
 8002ea2:	4b8a      	ldr	r3, [pc, #552]	; (80030cc <UART_SetConfig+0x30c>)
 8002ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ea8:	f003 030c 	and.w	r3, r3, #12
 8002eac:	2b0c      	cmp	r3, #12
 8002eae:	d82d      	bhi.n	8002f0c <UART_SetConfig+0x14c>
 8002eb0:	a201      	add	r2, pc, #4	; (adr r2, 8002eb8 <UART_SetConfig+0xf8>)
 8002eb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eb6:	bf00      	nop
 8002eb8:	08002eed 	.word	0x08002eed
 8002ebc:	08002f0d 	.word	0x08002f0d
 8002ec0:	08002f0d 	.word	0x08002f0d
 8002ec4:	08002f0d 	.word	0x08002f0d
 8002ec8:	08002efd 	.word	0x08002efd
 8002ecc:	08002f0d 	.word	0x08002f0d
 8002ed0:	08002f0d 	.word	0x08002f0d
 8002ed4:	08002f0d 	.word	0x08002f0d
 8002ed8:	08002ef5 	.word	0x08002ef5
 8002edc:	08002f0d 	.word	0x08002f0d
 8002ee0:	08002f0d 	.word	0x08002f0d
 8002ee4:	08002f0d 	.word	0x08002f0d
 8002ee8:	08002f05 	.word	0x08002f05
 8002eec:	2300      	movs	r3, #0
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef2:	e042      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002ef4:	2302      	movs	r3, #2
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efa:	e03e      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002efc:	2304      	movs	r3, #4
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f02:	e03a      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002f04:	2308      	movs	r3, #8
 8002f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f0a:	e036      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002f0c:	2310      	movs	r3, #16
 8002f0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f12:	e032      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a6a      	ldr	r2, [pc, #424]	; (80030c4 <UART_SetConfig+0x304>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d12a      	bne.n	8002f74 <UART_SetConfig+0x1b4>
 8002f1e:	4b6b      	ldr	r3, [pc, #428]	; (80030cc <UART_SetConfig+0x30c>)
 8002f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f24:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002f28:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f2c:	d01a      	beq.n	8002f64 <UART_SetConfig+0x1a4>
 8002f2e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f32:	d81b      	bhi.n	8002f6c <UART_SetConfig+0x1ac>
 8002f34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f38:	d00c      	beq.n	8002f54 <UART_SetConfig+0x194>
 8002f3a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f3e:	d815      	bhi.n	8002f6c <UART_SetConfig+0x1ac>
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d003      	beq.n	8002f4c <UART_SetConfig+0x18c>
 8002f44:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f48:	d008      	beq.n	8002f5c <UART_SetConfig+0x19c>
 8002f4a:	e00f      	b.n	8002f6c <UART_SetConfig+0x1ac>
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f52:	e012      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002f54:	2302      	movs	r3, #2
 8002f56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f5a:	e00e      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002f5c:	2304      	movs	r3, #4
 8002f5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f62:	e00a      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002f64:	2308      	movs	r3, #8
 8002f66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f6a:	e006      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002f6c:	2310      	movs	r3, #16
 8002f6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f72:	e002      	b.n	8002f7a <UART_SetConfig+0x1ba>
 8002f74:	2310      	movs	r3, #16
 8002f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4a51      	ldr	r2, [pc, #324]	; (80030c4 <UART_SetConfig+0x304>)
 8002f80:	4293      	cmp	r3, r2
 8002f82:	d17a      	bne.n	800307a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f84:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f88:	2b08      	cmp	r3, #8
 8002f8a:	d824      	bhi.n	8002fd6 <UART_SetConfig+0x216>
 8002f8c:	a201      	add	r2, pc, #4	; (adr r2, 8002f94 <UART_SetConfig+0x1d4>)
 8002f8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f92:	bf00      	nop
 8002f94:	08002fb9 	.word	0x08002fb9
 8002f98:	08002fd7 	.word	0x08002fd7
 8002f9c:	08002fc1 	.word	0x08002fc1
 8002fa0:	08002fd7 	.word	0x08002fd7
 8002fa4:	08002fc7 	.word	0x08002fc7
 8002fa8:	08002fd7 	.word	0x08002fd7
 8002fac:	08002fd7 	.word	0x08002fd7
 8002fb0:	08002fd7 	.word	0x08002fd7
 8002fb4:	08002fcf 	.word	0x08002fcf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002fb8:	f7fe ff18 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 8002fbc:	61f8      	str	r0, [r7, #28]
        break;
 8002fbe:	e010      	b.n	8002fe2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002fc0:	4b44      	ldr	r3, [pc, #272]	; (80030d4 <UART_SetConfig+0x314>)
 8002fc2:	61fb      	str	r3, [r7, #28]
        break;
 8002fc4:	e00d      	b.n	8002fe2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002fc6:	f7fe fe79 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 8002fca:	61f8      	str	r0, [r7, #28]
        break;
 8002fcc:	e009      	b.n	8002fe2 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002fce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002fd2:	61fb      	str	r3, [r7, #28]
        break;
 8002fd4:	e005      	b.n	8002fe2 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002fe0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	f000 8107 	beq.w	80031f8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	685a      	ldr	r2, [r3, #4]
 8002fee:	4613      	mov	r3, r2
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	4413      	add	r3, r2
 8002ff4:	69fa      	ldr	r2, [r7, #28]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d305      	bcc.n	8003006 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	429a      	cmp	r2, r3
 8003004:	d903      	bls.n	800300e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003006:	2301      	movs	r3, #1
 8003008:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800300c:	e0f4      	b.n	80031f8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	2200      	movs	r2, #0
 8003012:	461c      	mov	r4, r3
 8003014:	4615      	mov	r5, r2
 8003016:	f04f 0200 	mov.w	r2, #0
 800301a:	f04f 0300 	mov.w	r3, #0
 800301e:	022b      	lsls	r3, r5, #8
 8003020:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003024:	0222      	lsls	r2, r4, #8
 8003026:	68f9      	ldr	r1, [r7, #12]
 8003028:	6849      	ldr	r1, [r1, #4]
 800302a:	0849      	lsrs	r1, r1, #1
 800302c:	2000      	movs	r0, #0
 800302e:	4688      	mov	r8, r1
 8003030:	4681      	mov	r9, r0
 8003032:	eb12 0a08 	adds.w	sl, r2, r8
 8003036:	eb43 0b09 	adc.w	fp, r3, r9
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	603b      	str	r3, [r7, #0]
 8003042:	607a      	str	r2, [r7, #4]
 8003044:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003048:	4650      	mov	r0, sl
 800304a:	4659      	mov	r1, fp
 800304c:	f7fd f8c8 	bl	80001e0 <__aeabi_uldivmod>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	4613      	mov	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003058:	69bb      	ldr	r3, [r7, #24]
 800305a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800305e:	d308      	bcc.n	8003072 <UART_SetConfig+0x2b2>
 8003060:	69bb      	ldr	r3, [r7, #24]
 8003062:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003066:	d204      	bcs.n	8003072 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69ba      	ldr	r2, [r7, #24]
 800306e:	60da      	str	r2, [r3, #12]
 8003070:	e0c2      	b.n	80031f8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003078:	e0be      	b.n	80031f8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	69db      	ldr	r3, [r3, #28]
 800307e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003082:	d16a      	bne.n	800315a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003084:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003088:	2b08      	cmp	r3, #8
 800308a:	d834      	bhi.n	80030f6 <UART_SetConfig+0x336>
 800308c:	a201      	add	r2, pc, #4	; (adr r2, 8003094 <UART_SetConfig+0x2d4>)
 800308e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003092:	bf00      	nop
 8003094:	080030b9 	.word	0x080030b9
 8003098:	080030d9 	.word	0x080030d9
 800309c:	080030e1 	.word	0x080030e1
 80030a0:	080030f7 	.word	0x080030f7
 80030a4:	080030e7 	.word	0x080030e7
 80030a8:	080030f7 	.word	0x080030f7
 80030ac:	080030f7 	.word	0x080030f7
 80030b0:	080030f7 	.word	0x080030f7
 80030b4:	080030ef 	.word	0x080030ef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80030b8:	f7fe fe98 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 80030bc:	61f8      	str	r0, [r7, #28]
        break;
 80030be:	e020      	b.n	8003102 <UART_SetConfig+0x342>
 80030c0:	efff69f3 	.word	0xefff69f3
 80030c4:	40008000 	.word	0x40008000
 80030c8:	40013800 	.word	0x40013800
 80030cc:	40021000 	.word	0x40021000
 80030d0:	40004400 	.word	0x40004400
 80030d4:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80030d8:	f7fe fe9e 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 80030dc:	61f8      	str	r0, [r7, #28]
        break;
 80030de:	e010      	b.n	8003102 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80030e0:	4b4c      	ldr	r3, [pc, #304]	; (8003214 <UART_SetConfig+0x454>)
 80030e2:	61fb      	str	r3, [r7, #28]
        break;
 80030e4:	e00d      	b.n	8003102 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80030e6:	f7fe fde9 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 80030ea:	61f8      	str	r0, [r7, #28]
        break;
 80030ec:	e009      	b.n	8003102 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80030ee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80030f2:	61fb      	str	r3, [r7, #28]
        break;
 80030f4:	e005      	b.n	8003102 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80030f6:	2300      	movs	r3, #0
 80030f8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003100:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003102:	69fb      	ldr	r3, [r7, #28]
 8003104:	2b00      	cmp	r3, #0
 8003106:	d077      	beq.n	80031f8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003108:	69fb      	ldr	r3, [r7, #28]
 800310a:	005a      	lsls	r2, r3, #1
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	085b      	lsrs	r3, r3, #1
 8003112:	441a      	add	r2, r3
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	685b      	ldr	r3, [r3, #4]
 8003118:	fbb2 f3f3 	udiv	r3, r2, r3
 800311c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800311e:	69bb      	ldr	r3, [r7, #24]
 8003120:	2b0f      	cmp	r3, #15
 8003122:	d916      	bls.n	8003152 <UART_SetConfig+0x392>
 8003124:	69bb      	ldr	r3, [r7, #24]
 8003126:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800312a:	d212      	bcs.n	8003152 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	b29b      	uxth	r3, r3
 8003130:	f023 030f 	bic.w	r3, r3, #15
 8003134:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	085b      	lsrs	r3, r3, #1
 800313a:	b29b      	uxth	r3, r3
 800313c:	f003 0307 	and.w	r3, r3, #7
 8003140:	b29a      	uxth	r2, r3
 8003142:	8afb      	ldrh	r3, [r7, #22]
 8003144:	4313      	orrs	r3, r2
 8003146:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	8afa      	ldrh	r2, [r7, #22]
 800314e:	60da      	str	r2, [r3, #12]
 8003150:	e052      	b.n	80031f8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003152:	2301      	movs	r3, #1
 8003154:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003158:	e04e      	b.n	80031f8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800315a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800315e:	2b08      	cmp	r3, #8
 8003160:	d827      	bhi.n	80031b2 <UART_SetConfig+0x3f2>
 8003162:	a201      	add	r2, pc, #4	; (adr r2, 8003168 <UART_SetConfig+0x3a8>)
 8003164:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003168:	0800318d 	.word	0x0800318d
 800316c:	08003195 	.word	0x08003195
 8003170:	0800319d 	.word	0x0800319d
 8003174:	080031b3 	.word	0x080031b3
 8003178:	080031a3 	.word	0x080031a3
 800317c:	080031b3 	.word	0x080031b3
 8003180:	080031b3 	.word	0x080031b3
 8003184:	080031b3 	.word	0x080031b3
 8003188:	080031ab 	.word	0x080031ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800318c:	f7fe fe2e 	bl	8001dec <HAL_RCC_GetPCLK1Freq>
 8003190:	61f8      	str	r0, [r7, #28]
        break;
 8003192:	e014      	b.n	80031be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003194:	f7fe fe40 	bl	8001e18 <HAL_RCC_GetPCLK2Freq>
 8003198:	61f8      	str	r0, [r7, #28]
        break;
 800319a:	e010      	b.n	80031be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800319c:	4b1d      	ldr	r3, [pc, #116]	; (8003214 <UART_SetConfig+0x454>)
 800319e:	61fb      	str	r3, [r7, #28]
        break;
 80031a0:	e00d      	b.n	80031be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031a2:	f7fe fd8b 	bl	8001cbc <HAL_RCC_GetSysClockFreq>
 80031a6:	61f8      	str	r0, [r7, #28]
        break;
 80031a8:	e009      	b.n	80031be <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031ae:	61fb      	str	r3, [r7, #28]
        break;
 80031b0:	e005      	b.n	80031be <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80031b2:	2300      	movs	r3, #0
 80031b4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031b6:	2301      	movs	r3, #1
 80031b8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031bc:	bf00      	nop
    }

    if (pclk != 0U)
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	d019      	beq.n	80031f8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	085a      	lsrs	r2, r3, #1
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	441a      	add	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d6:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	2b0f      	cmp	r3, #15
 80031dc:	d909      	bls.n	80031f2 <UART_SetConfig+0x432>
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031e4:	d205      	bcs.n	80031f2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	b29a      	uxth	r2, r3
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	60da      	str	r2, [r3, #12]
 80031f0:	e002      	b.n	80031f8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80031f2:	2301      	movs	r3, #1
 80031f4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	2200      	movs	r2, #0
 80031fc:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	2200      	movs	r2, #0
 8003202:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003204:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003208:	4618      	mov	r0, r3
 800320a:	3728      	adds	r7, #40	; 0x28
 800320c:	46bd      	mov	sp, r7
 800320e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003212:	bf00      	nop
 8003214:	00f42400 	.word	0x00f42400

08003218 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003218:	b480      	push	{r7}
 800321a:	b083      	sub	sp, #12
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003224:	f003 0301 	and.w	r3, r3, #1
 8003228:	2b00      	cmp	r3, #0
 800322a:	d00a      	beq.n	8003242 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	430a      	orrs	r2, r1
 8003240:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003246:	f003 0302 	and.w	r3, r3, #2
 800324a:	2b00      	cmp	r3, #0
 800324c:	d00a      	beq.n	8003264 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	685b      	ldr	r3, [r3, #4]
 8003254:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003268:	f003 0304 	and.w	r3, r3, #4
 800326c:	2b00      	cmp	r3, #0
 800326e:	d00a      	beq.n	8003286 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	685b      	ldr	r3, [r3, #4]
 8003276:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	430a      	orrs	r2, r1
 8003284:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800328a:	f003 0308 	and.w	r3, r3, #8
 800328e:	2b00      	cmp	r3, #0
 8003290:	d00a      	beq.n	80032a8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	685b      	ldr	r3, [r3, #4]
 8003298:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	430a      	orrs	r2, r1
 80032a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ac:	f003 0310 	and.w	r3, r3, #16
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00a      	beq.n	80032ca <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	430a      	orrs	r2, r1
 80032c8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032ce:	f003 0320 	and.w	r3, r3, #32
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d00a      	beq.n	80032ec <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	689b      	ldr	r3, [r3, #8]
 80032dc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	430a      	orrs	r2, r1
 80032ea:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d01a      	beq.n	800332e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003312:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003316:	d10a      	bne.n	800332e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	685b      	ldr	r3, [r3, #4]
 800331e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003336:	2b00      	cmp	r3, #0
 8003338:	d00a      	beq.n	8003350 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	430a      	orrs	r2, r1
 800334e:	605a      	str	r2, [r3, #4]
  }
}
 8003350:	bf00      	nop
 8003352:	370c      	adds	r7, #12
 8003354:	46bd      	mov	sp, r7
 8003356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800335a:	4770      	bx	lr

0800335c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800335c:	b580      	push	{r7, lr}
 800335e:	b086      	sub	sp, #24
 8003360:	af02      	add	r7, sp, #8
 8003362:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2200      	movs	r2, #0
 8003368:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800336c:	f7fd fcae 	bl	8000ccc <HAL_GetTick>
 8003370:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f003 0308 	and.w	r3, r3, #8
 800337c:	2b08      	cmp	r3, #8
 800337e:	d10e      	bne.n	800339e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003380:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2200      	movs	r2, #0
 800338a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800338e:	6878      	ldr	r0, [r7, #4]
 8003390:	f000 f82d 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 8003394:	4603      	mov	r3, r0
 8003396:	2b00      	cmp	r3, #0
 8003398:	d001      	beq.n	800339e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e023      	b.n	80033e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b04      	cmp	r3, #4
 80033aa:	d10e      	bne.n	80033ca <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80033ac:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	2200      	movs	r2, #0
 80033b6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80033ba:	6878      	ldr	r0, [r7, #4]
 80033bc:	f000 f817 	bl	80033ee <UART_WaitOnFlagUntilTimeout>
 80033c0:	4603      	mov	r3, r0
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d001      	beq.n	80033ca <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80033c6:	2303      	movs	r3, #3
 80033c8:	e00d      	b.n	80033e6 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2220      	movs	r2, #32
 80033ce:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2200      	movs	r2, #0
 80033da:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80033e4:	2300      	movs	r3, #0
}
 80033e6:	4618      	mov	r0, r3
 80033e8:	3710      	adds	r7, #16
 80033ea:	46bd      	mov	sp, r7
 80033ec:	bd80      	pop	{r7, pc}

080033ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80033ee:	b580      	push	{r7, lr}
 80033f0:	b09c      	sub	sp, #112	; 0x70
 80033f2:	af00      	add	r7, sp, #0
 80033f4:	60f8      	str	r0, [r7, #12]
 80033f6:	60b9      	str	r1, [r7, #8]
 80033f8:	603b      	str	r3, [r7, #0]
 80033fa:	4613      	mov	r3, r2
 80033fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033fe:	e0a5      	b.n	800354c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003402:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003406:	f000 80a1 	beq.w	800354c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800340a:	f7fd fc5f 	bl	8000ccc <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003416:	429a      	cmp	r2, r3
 8003418:	d302      	bcc.n	8003420 <UART_WaitOnFlagUntilTimeout+0x32>
 800341a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800341c:	2b00      	cmp	r3, #0
 800341e:	d13e      	bne.n	800349e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003426:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003428:	e853 3f00 	ldrex	r3, [r3]
 800342c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800342e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003430:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003434:	667b      	str	r3, [r7, #100]	; 0x64
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	461a      	mov	r2, r3
 800343c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800343e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003440:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003442:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003444:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003446:	e841 2300 	strex	r3, r2, [r1]
 800344a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800344c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800344e:	2b00      	cmp	r3, #0
 8003450:	d1e6      	bne.n	8003420 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	3308      	adds	r3, #8
 8003458:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800345c:	e853 3f00 	ldrex	r3, [r3]
 8003460:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003464:	f023 0301 	bic.w	r3, r3, #1
 8003468:	663b      	str	r3, [r7, #96]	; 0x60
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	3308      	adds	r3, #8
 8003470:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003472:	64ba      	str	r2, [r7, #72]	; 0x48
 8003474:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003476:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003478:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800347a:	e841 2300 	strex	r3, r2, [r1]
 800347e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003480:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1e5      	bne.n	8003452 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	2220      	movs	r2, #32
 800348a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2220      	movs	r2, #32
 8003490:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800349a:	2303      	movs	r3, #3
 800349c:	e067      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	f003 0304 	and.w	r3, r3, #4
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d04f      	beq.n	800354c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	69db      	ldr	r3, [r3, #28]
 80034b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80034b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80034ba:	d147      	bne.n	800354c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80034c4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ce:	e853 3f00 	ldrex	r3, [r3]
 80034d2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034d6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034da:	66fb      	str	r3, [r7, #108]	; 0x6c
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	461a      	mov	r2, r3
 80034e2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80034e4:	637b      	str	r3, [r7, #52]	; 0x34
 80034e6:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034e8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034ec:	e841 2300 	strex	r3, r2, [r1]
 80034f0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d1e6      	bne.n	80034c6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	3308      	adds	r3, #8
 80034fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003500:	697b      	ldr	r3, [r7, #20]
 8003502:	e853 3f00 	ldrex	r3, [r3]
 8003506:	613b      	str	r3, [r7, #16]
   return(result);
 8003508:	693b      	ldr	r3, [r7, #16]
 800350a:	f023 0301 	bic.w	r3, r3, #1
 800350e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	3308      	adds	r3, #8
 8003516:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003518:	623a      	str	r2, [r7, #32]
 800351a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800351c:	69f9      	ldr	r1, [r7, #28]
 800351e:	6a3a      	ldr	r2, [r7, #32]
 8003520:	e841 2300 	strex	r3, r2, [r1]
 8003524:	61bb      	str	r3, [r7, #24]
   return(result);
 8003526:	69bb      	ldr	r3, [r7, #24]
 8003528:	2b00      	cmp	r3, #0
 800352a:	d1e5      	bne.n	80034f8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2220      	movs	r2, #32
 8003530:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2220      	movs	r2, #32
 8003536:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2220      	movs	r2, #32
 800353c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2200      	movs	r2, #0
 8003544:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	e010      	b.n	800356e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69da      	ldr	r2, [r3, #28]
 8003552:	68bb      	ldr	r3, [r7, #8]
 8003554:	4013      	ands	r3, r2
 8003556:	68ba      	ldr	r2, [r7, #8]
 8003558:	429a      	cmp	r2, r3
 800355a:	bf0c      	ite	eq
 800355c:	2301      	moveq	r3, #1
 800355e:	2300      	movne	r3, #0
 8003560:	b2db      	uxtb	r3, r3
 8003562:	461a      	mov	r2, r3
 8003564:	79fb      	ldrb	r3, [r7, #7]
 8003566:	429a      	cmp	r2, r3
 8003568:	f43f af4a 	beq.w	8003400 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800356c:	2300      	movs	r3, #0
}
 800356e:	4618      	mov	r0, r3
 8003570:	3770      	adds	r7, #112	; 0x70
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
	...

08003578 <__NVIC_SetPriority>:
{
 8003578:	b480      	push	{r7}
 800357a:	b083      	sub	sp, #12
 800357c:	af00      	add	r7, sp, #0
 800357e:	4603      	mov	r3, r0
 8003580:	6039      	str	r1, [r7, #0]
 8003582:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003584:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003588:	2b00      	cmp	r3, #0
 800358a:	db0a      	blt.n	80035a2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800358c:	683b      	ldr	r3, [r7, #0]
 800358e:	b2da      	uxtb	r2, r3
 8003590:	490c      	ldr	r1, [pc, #48]	; (80035c4 <__NVIC_SetPriority+0x4c>)
 8003592:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003596:	0112      	lsls	r2, r2, #4
 8003598:	b2d2      	uxtb	r2, r2
 800359a:	440b      	add	r3, r1
 800359c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80035a0:	e00a      	b.n	80035b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	b2da      	uxtb	r2, r3
 80035a6:	4908      	ldr	r1, [pc, #32]	; (80035c8 <__NVIC_SetPriority+0x50>)
 80035a8:	79fb      	ldrb	r3, [r7, #7]
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	3b04      	subs	r3, #4
 80035b0:	0112      	lsls	r2, r2, #4
 80035b2:	b2d2      	uxtb	r2, r2
 80035b4:	440b      	add	r3, r1
 80035b6:	761a      	strb	r2, [r3, #24]
}
 80035b8:	bf00      	nop
 80035ba:	370c      	adds	r7, #12
 80035bc:	46bd      	mov	sp, r7
 80035be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c2:	4770      	bx	lr
 80035c4:	e000e100 	.word	0xe000e100
 80035c8:	e000ed00 	.word	0xe000ed00

080035cc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80035cc:	b580      	push	{r7, lr}
 80035ce:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80035d0:	4b05      	ldr	r3, [pc, #20]	; (80035e8 <SysTick_Handler+0x1c>)
 80035d2:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80035d4:	f002 f992 	bl	80058fc <xTaskGetSchedulerState>
 80035d8:	4603      	mov	r3, r0
 80035da:	2b01      	cmp	r3, #1
 80035dc:	d001      	beq.n	80035e2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80035de:	f003 f87b 	bl	80066d8 <xPortSysTickHandler>
  }
}
 80035e2:	bf00      	nop
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	e000e010 	.word	0xe000e010

080035ec <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80035ec:	b580      	push	{r7, lr}
 80035ee:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80035f0:	2100      	movs	r1, #0
 80035f2:	f06f 0004 	mvn.w	r0, #4
 80035f6:	f7ff ffbf 	bl	8003578 <__NVIC_SetPriority>
#endif
}
 80035fa:	bf00      	nop
 80035fc:	bd80      	pop	{r7, pc}
	...

08003600 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003600:	b480      	push	{r7}
 8003602:	b083      	sub	sp, #12
 8003604:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003606:	f3ef 8305 	mrs	r3, IPSR
 800360a:	603b      	str	r3, [r7, #0]
  return(result);
 800360c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800360e:	2b00      	cmp	r3, #0
 8003610:	d003      	beq.n	800361a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003612:	f06f 0305 	mvn.w	r3, #5
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	e00c      	b.n	8003634 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800361a:	4b0a      	ldr	r3, [pc, #40]	; (8003644 <osKernelInitialize+0x44>)
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d105      	bne.n	800362e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003622:	4b08      	ldr	r3, [pc, #32]	; (8003644 <osKernelInitialize+0x44>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003628:	2300      	movs	r3, #0
 800362a:	607b      	str	r3, [r7, #4]
 800362c:	e002      	b.n	8003634 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800362e:	f04f 33ff 	mov.w	r3, #4294967295
 8003632:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003634:	687b      	ldr	r3, [r7, #4]
}
 8003636:	4618      	mov	r0, r3
 8003638:	370c      	adds	r7, #12
 800363a:	46bd      	mov	sp, r7
 800363c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003640:	4770      	bx	lr
 8003642:	bf00      	nop
 8003644:	20000178 	.word	0x20000178

08003648 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003648:	b580      	push	{r7, lr}
 800364a:	b082      	sub	sp, #8
 800364c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800364e:	f3ef 8305 	mrs	r3, IPSR
 8003652:	603b      	str	r3, [r7, #0]
  return(result);
 8003654:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003656:	2b00      	cmp	r3, #0
 8003658:	d003      	beq.n	8003662 <osKernelStart+0x1a>
    stat = osErrorISR;
 800365a:	f06f 0305 	mvn.w	r3, #5
 800365e:	607b      	str	r3, [r7, #4]
 8003660:	e010      	b.n	8003684 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003662:	4b0b      	ldr	r3, [pc, #44]	; (8003690 <osKernelStart+0x48>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2b01      	cmp	r3, #1
 8003668:	d109      	bne.n	800367e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800366a:	f7ff ffbf 	bl	80035ec <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800366e:	4b08      	ldr	r3, [pc, #32]	; (8003690 <osKernelStart+0x48>)
 8003670:	2202      	movs	r2, #2
 8003672:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003674:	f001 fce6 	bl	8005044 <vTaskStartScheduler>
      stat = osOK;
 8003678:	2300      	movs	r3, #0
 800367a:	607b      	str	r3, [r7, #4]
 800367c:	e002      	b.n	8003684 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800367e:	f04f 33ff 	mov.w	r3, #4294967295
 8003682:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003684:	687b      	ldr	r3, [r7, #4]
}
 8003686:	4618      	mov	r0, r3
 8003688:	3708      	adds	r7, #8
 800368a:	46bd      	mov	sp, r7
 800368c:	bd80      	pop	{r7, pc}
 800368e:	bf00      	nop
 8003690:	20000178 	.word	0x20000178

08003694 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003694:	b580      	push	{r7, lr}
 8003696:	b08e      	sub	sp, #56	; 0x38
 8003698:	af04      	add	r7, sp, #16
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80036a0:	2300      	movs	r3, #0
 80036a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036a4:	f3ef 8305 	mrs	r3, IPSR
 80036a8:	617b      	str	r3, [r7, #20]
  return(result);
 80036aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d17e      	bne.n	80037ae <osThreadNew+0x11a>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d07b      	beq.n	80037ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80036b6:	2340      	movs	r3, #64	; 0x40
 80036b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80036ba:	2318      	movs	r3, #24
 80036bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80036be:	2300      	movs	r3, #0
 80036c0:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80036c2:	f04f 33ff 	mov.w	r3, #4294967295
 80036c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d045      	beq.n	800375a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d002      	beq.n	80036dc <osThreadNew+0x48>
        name = attr->name;
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	699b      	ldr	r3, [r3, #24]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d002      	beq.n	80036ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	699b      	ldr	r3, [r3, #24]
 80036e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80036ea:	69fb      	ldr	r3, [r7, #28]
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d008      	beq.n	8003702 <osThreadNew+0x6e>
 80036f0:	69fb      	ldr	r3, [r7, #28]
 80036f2:	2b38      	cmp	r3, #56	; 0x38
 80036f4:	d805      	bhi.n	8003702 <osThreadNew+0x6e>
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d001      	beq.n	8003706 <osThreadNew+0x72>
        return (NULL);
 8003702:	2300      	movs	r3, #0
 8003704:	e054      	b.n	80037b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	695b      	ldr	r3, [r3, #20]
 8003712:	089b      	lsrs	r3, r3, #2
 8003714:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	689b      	ldr	r3, [r3, #8]
 800371a:	2b00      	cmp	r3, #0
 800371c:	d00e      	beq.n	800373c <osThreadNew+0xa8>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	2bbb      	cmp	r3, #187	; 0xbb
 8003724:	d90a      	bls.n	800373c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800372a:	2b00      	cmp	r3, #0
 800372c:	d006      	beq.n	800373c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	695b      	ldr	r3, [r3, #20]
 8003732:	2b00      	cmp	r3, #0
 8003734:	d002      	beq.n	800373c <osThreadNew+0xa8>
        mem = 1;
 8003736:	2301      	movs	r3, #1
 8003738:	61bb      	str	r3, [r7, #24]
 800373a:	e010      	b.n	800375e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	2b00      	cmp	r3, #0
 8003742:	d10c      	bne.n	800375e <osThreadNew+0xca>
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	2b00      	cmp	r3, #0
 800374a:	d108      	bne.n	800375e <osThreadNew+0xca>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	691b      	ldr	r3, [r3, #16]
 8003750:	2b00      	cmp	r3, #0
 8003752:	d104      	bne.n	800375e <osThreadNew+0xca>
          mem = 0;
 8003754:	2300      	movs	r3, #0
 8003756:	61bb      	str	r3, [r7, #24]
 8003758:	e001      	b.n	800375e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800375a:	2300      	movs	r3, #0
 800375c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	2b01      	cmp	r3, #1
 8003762:	d110      	bne.n	8003786 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800376c:	9202      	str	r2, [sp, #8]
 800376e:	9301      	str	r3, [sp, #4]
 8003770:	69fb      	ldr	r3, [r7, #28]
 8003772:	9300      	str	r3, [sp, #0]
 8003774:	68bb      	ldr	r3, [r7, #8]
 8003776:	6a3a      	ldr	r2, [r7, #32]
 8003778:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800377a:	68f8      	ldr	r0, [r7, #12]
 800377c:	f001 fa38 	bl	8004bf0 <xTaskCreateStatic>
 8003780:	4603      	mov	r3, r0
 8003782:	613b      	str	r3, [r7, #16]
 8003784:	e013      	b.n	80037ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003786:	69bb      	ldr	r3, [r7, #24]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d110      	bne.n	80037ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800378c:	6a3b      	ldr	r3, [r7, #32]
 800378e:	b29a      	uxth	r2, r3
 8003790:	f107 0310 	add.w	r3, r7, #16
 8003794:	9301      	str	r3, [sp, #4]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	9300      	str	r3, [sp, #0]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f001 fa83 	bl	8004caa <xTaskCreate>
 80037a4:	4603      	mov	r3, r0
 80037a6:	2b01      	cmp	r3, #1
 80037a8:	d001      	beq.n	80037ae <osThreadNew+0x11a>
            hTask = NULL;
 80037aa:	2300      	movs	r3, #0
 80037ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80037ae:	693b      	ldr	r3, [r7, #16]
}
 80037b0:	4618      	mov	r0, r3
 80037b2:	3728      	adds	r7, #40	; 0x28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	bd80      	pop	{r7, pc}

080037b8 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80037b8:	b580      	push	{r7, lr}
 80037ba:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80037bc:	2000      	movs	r0, #0
 80037be:	f001 fbcf 	bl	8004f60 <vTaskDelete>
#endif
  for (;;);
 80037c2:	e7fe      	b.n	80037c2 <osThreadExit+0xa>

080037c4 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b08a      	sub	sp, #40	; 0x28
 80037c8:	af02      	add	r7, sp, #8
 80037ca:	60f8      	str	r0, [r7, #12]
 80037cc:	60b9      	str	r1, [r7, #8]
 80037ce:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80037d0:	2300      	movs	r3, #0
 80037d2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037d4:	f3ef 8305 	mrs	r3, IPSR
 80037d8:	613b      	str	r3, [r7, #16]
  return(result);
 80037da:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d175      	bne.n	80038cc <osSemaphoreNew+0x108>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d072      	beq.n	80038cc <osSemaphoreNew+0x108>
 80037e6:	68ba      	ldr	r2, [r7, #8]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	429a      	cmp	r2, r3
 80037ec:	d86e      	bhi.n	80038cc <osSemaphoreNew+0x108>
    mem = -1;
 80037ee:	f04f 33ff 	mov.w	r3, #4294967295
 80037f2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d015      	beq.n	8003826 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d006      	beq.n	8003810 <osSemaphoreNew+0x4c>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b4f      	cmp	r3, #79	; 0x4f
 8003808:	d902      	bls.n	8003810 <osSemaphoreNew+0x4c>
        mem = 1;
 800380a:	2301      	movs	r3, #1
 800380c:	61bb      	str	r3, [r7, #24]
 800380e:	e00c      	b.n	800382a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	689b      	ldr	r3, [r3, #8]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d108      	bne.n	800382a <osSemaphoreNew+0x66>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	68db      	ldr	r3, [r3, #12]
 800381c:	2b00      	cmp	r3, #0
 800381e:	d104      	bne.n	800382a <osSemaphoreNew+0x66>
          mem = 0;
 8003820:	2300      	movs	r3, #0
 8003822:	61bb      	str	r3, [r7, #24]
 8003824:	e001      	b.n	800382a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8003826:	2300      	movs	r3, #0
 8003828:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003830:	d04c      	beq.n	80038cc <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2b01      	cmp	r3, #1
 8003836:	d128      	bne.n	800388a <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003838:	69bb      	ldr	r3, [r7, #24]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d10a      	bne.n	8003854 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	689b      	ldr	r3, [r3, #8]
 8003842:	2203      	movs	r2, #3
 8003844:	9200      	str	r2, [sp, #0]
 8003846:	2200      	movs	r2, #0
 8003848:	2100      	movs	r1, #0
 800384a:	2001      	movs	r0, #1
 800384c:	f000 fa2a 	bl	8003ca4 <xQueueGenericCreateStatic>
 8003850:	61f8      	str	r0, [r7, #28]
 8003852:	e005      	b.n	8003860 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003854:	2203      	movs	r2, #3
 8003856:	2100      	movs	r1, #0
 8003858:	2001      	movs	r0, #1
 800385a:	f000 fa9b 	bl	8003d94 <xQueueGenericCreate>
 800385e:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	2b00      	cmp	r3, #0
 8003864:	d022      	beq.n	80038ac <osSemaphoreNew+0xe8>
 8003866:	68bb      	ldr	r3, [r7, #8]
 8003868:	2b00      	cmp	r3, #0
 800386a:	d01f      	beq.n	80038ac <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800386c:	2300      	movs	r3, #0
 800386e:	2200      	movs	r2, #0
 8003870:	2100      	movs	r1, #0
 8003872:	69f8      	ldr	r0, [r7, #28]
 8003874:	f000 fb56 	bl	8003f24 <xQueueGenericSend>
 8003878:	4603      	mov	r3, r0
 800387a:	2b01      	cmp	r3, #1
 800387c:	d016      	beq.n	80038ac <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 800387e:	69f8      	ldr	r0, [r7, #28]
 8003880:	f000 ffe2 	bl	8004848 <vQueueDelete>
            hSemaphore = NULL;
 8003884:	2300      	movs	r3, #0
 8003886:	61fb      	str	r3, [r7, #28]
 8003888:	e010      	b.n	80038ac <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 800388a:	69bb      	ldr	r3, [r7, #24]
 800388c:	2b01      	cmp	r3, #1
 800388e:	d108      	bne.n	80038a2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	461a      	mov	r2, r3
 8003896:	68b9      	ldr	r1, [r7, #8]
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fad8 	bl	8003e4e <xQueueCreateCountingSemaphoreStatic>
 800389e:	61f8      	str	r0, [r7, #28]
 80038a0:	e004      	b.n	80038ac <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80038a2:	68b9      	ldr	r1, [r7, #8]
 80038a4:	68f8      	ldr	r0, [r7, #12]
 80038a6:	f000 fb09 	bl	8003ebc <xQueueCreateCountingSemaphore>
 80038aa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80038ac:	69fb      	ldr	r3, [r7, #28]
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d00c      	beq.n	80038cc <osSemaphoreNew+0x108>
        if (attr != NULL) {
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d003      	beq.n	80038c0 <osSemaphoreNew+0xfc>
          name = attr->name;
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	617b      	str	r3, [r7, #20]
 80038be:	e001      	b.n	80038c4 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 80038c0:	2300      	movs	r3, #0
 80038c2:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 80038c4:	6979      	ldr	r1, [r7, #20]
 80038c6:	69f8      	ldr	r0, [r7, #28]
 80038c8:	f001 f90a 	bl	8004ae0 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 80038cc:	69fb      	ldr	r3, [r7, #28]
}
 80038ce:	4618      	mov	r0, r3
 80038d0:	3720      	adds	r7, #32
 80038d2:	46bd      	mov	sp, r7
 80038d4:	bd80      	pop	{r7, pc}
	...

080038d8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 80038d8:	b580      	push	{r7, lr}
 80038da:	b086      	sub	sp, #24
 80038dc:	af00      	add	r7, sp, #0
 80038de:	6078      	str	r0, [r7, #4]
 80038e0:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80038e6:	2300      	movs	r3, #0
 80038e8:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80038ea:	693b      	ldr	r3, [r7, #16]
 80038ec:	2b00      	cmp	r3, #0
 80038ee:	d103      	bne.n	80038f8 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 80038f0:	f06f 0303 	mvn.w	r3, #3
 80038f4:	617b      	str	r3, [r7, #20]
 80038f6:	e039      	b.n	800396c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038f8:	f3ef 8305 	mrs	r3, IPSR
 80038fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80038fe:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003900:	2b00      	cmp	r3, #0
 8003902:	d022      	beq.n	800394a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d003      	beq.n	8003912 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800390a:	f06f 0303 	mvn.w	r3, #3
 800390e:	617b      	str	r3, [r7, #20]
 8003910:	e02c      	b.n	800396c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003912:	2300      	movs	r3, #0
 8003914:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003916:	f107 0308 	add.w	r3, r7, #8
 800391a:	461a      	mov	r2, r3
 800391c:	2100      	movs	r1, #0
 800391e:	6938      	ldr	r0, [r7, #16]
 8003920:	f000 ff12 	bl	8004748 <xQueueReceiveFromISR>
 8003924:	4603      	mov	r3, r0
 8003926:	2b01      	cmp	r3, #1
 8003928:	d003      	beq.n	8003932 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800392a:	f06f 0302 	mvn.w	r3, #2
 800392e:	617b      	str	r3, [r7, #20]
 8003930:	e01c      	b.n	800396c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003932:	68bb      	ldr	r3, [r7, #8]
 8003934:	2b00      	cmp	r3, #0
 8003936:	d019      	beq.n	800396c <osSemaphoreAcquire+0x94>
 8003938:	4b0f      	ldr	r3, [pc, #60]	; (8003978 <osSemaphoreAcquire+0xa0>)
 800393a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f3bf 8f4f 	dsb	sy
 8003944:	f3bf 8f6f 	isb	sy
 8003948:	e010      	b.n	800396c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800394a:	6839      	ldr	r1, [r7, #0]
 800394c:	6938      	ldr	r0, [r7, #16]
 800394e:	f000 fdef 	bl	8004530 <xQueueSemaphoreTake>
 8003952:	4603      	mov	r3, r0
 8003954:	2b01      	cmp	r3, #1
 8003956:	d009      	beq.n	800396c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 800395e:	f06f 0301 	mvn.w	r3, #1
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e002      	b.n	800396c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003966:	f06f 0302 	mvn.w	r3, #2
 800396a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 800396c:	697b      	ldr	r3, [r7, #20]
}
 800396e:	4618      	mov	r0, r3
 8003970:	3718      	adds	r7, #24
 8003972:	46bd      	mov	sp, r7
 8003974:	bd80      	pop	{r7, pc}
 8003976:	bf00      	nop
 8003978:	e000ed04 	.word	0xe000ed04

0800397c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800397c:	b580      	push	{r7, lr}
 800397e:	b086      	sub	sp, #24
 8003980:	af00      	add	r7, sp, #0
 8003982:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003988:	2300      	movs	r3, #0
 800398a:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800398c:	693b      	ldr	r3, [r7, #16]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003992:	f06f 0303 	mvn.w	r3, #3
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	e02c      	b.n	80039f4 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800399a:	f3ef 8305 	mrs	r3, IPSR
 800399e:	60fb      	str	r3, [r7, #12]
  return(result);
 80039a0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d01a      	beq.n	80039dc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80039a6:	2300      	movs	r3, #0
 80039a8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80039aa:	f107 0308 	add.w	r3, r7, #8
 80039ae:	4619      	mov	r1, r3
 80039b0:	6938      	ldr	r0, [r7, #16]
 80039b2:	f000 fc50 	bl	8004256 <xQueueGiveFromISR>
 80039b6:	4603      	mov	r3, r0
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d003      	beq.n	80039c4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 80039bc:	f06f 0302 	mvn.w	r3, #2
 80039c0:	617b      	str	r3, [r7, #20]
 80039c2:	e017      	b.n	80039f4 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d014      	beq.n	80039f4 <osSemaphoreRelease+0x78>
 80039ca:	4b0d      	ldr	r3, [pc, #52]	; (8003a00 <osSemaphoreRelease+0x84>)
 80039cc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039d0:	601a      	str	r2, [r3, #0]
 80039d2:	f3bf 8f4f 	dsb	sy
 80039d6:	f3bf 8f6f 	isb	sy
 80039da:	e00b      	b.n	80039f4 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80039dc:	2300      	movs	r3, #0
 80039de:	2200      	movs	r2, #0
 80039e0:	2100      	movs	r1, #0
 80039e2:	6938      	ldr	r0, [r7, #16]
 80039e4:	f000 fa9e 	bl	8003f24 <xQueueGenericSend>
 80039e8:	4603      	mov	r3, r0
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d002      	beq.n	80039f4 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 80039ee:	f06f 0302 	mvn.w	r3, #2
 80039f2:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 80039f4:	697b      	ldr	r3, [r7, #20]
}
 80039f6:	4618      	mov	r0, r3
 80039f8:	3718      	adds	r7, #24
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bd80      	pop	{r7, pc}
 80039fe:	bf00      	nop
 8003a00:	e000ed04 	.word	0xe000ed04

08003a04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003a04:	b480      	push	{r7}
 8003a06:	b085      	sub	sp, #20
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	60b9      	str	r1, [r7, #8]
 8003a0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	4a07      	ldr	r2, [pc, #28]	; (8003a30 <vApplicationGetIdleTaskMemory+0x2c>)
 8003a14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	4a06      	ldr	r2, [pc, #24]	; (8003a34 <vApplicationGetIdleTaskMemory+0x30>)
 8003a1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	2240      	movs	r2, #64	; 0x40
 8003a20:	601a      	str	r2, [r3, #0]
}
 8003a22:	bf00      	nop
 8003a24:	3714      	adds	r7, #20
 8003a26:	46bd      	mov	sp, r7
 8003a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a2c:	4770      	bx	lr
 8003a2e:	bf00      	nop
 8003a30:	2000017c 	.word	0x2000017c
 8003a34:	20000238 	.word	0x20000238

08003a38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003a38:	b480      	push	{r7}
 8003a3a:	b085      	sub	sp, #20
 8003a3c:	af00      	add	r7, sp, #0
 8003a3e:	60f8      	str	r0, [r7, #12]
 8003a40:	60b9      	str	r1, [r7, #8]
 8003a42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	4a07      	ldr	r2, [pc, #28]	; (8003a64 <vApplicationGetTimerTaskMemory+0x2c>)
 8003a48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003a4a:	68bb      	ldr	r3, [r7, #8]
 8003a4c:	4a06      	ldr	r2, [pc, #24]	; (8003a68 <vApplicationGetTimerTaskMemory+0x30>)
 8003a4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2280      	movs	r2, #128	; 0x80
 8003a54:	601a      	str	r2, [r3, #0]
}
 8003a56:	bf00      	nop
 8003a58:	3714      	adds	r7, #20
 8003a5a:	46bd      	mov	sp, r7
 8003a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a60:	4770      	bx	lr
 8003a62:	bf00      	nop
 8003a64:	20000338 	.word	0x20000338
 8003a68:	200003f4 	.word	0x200003f4

08003a6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	f103 0208 	add.w	r2, r3, #8
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	f04f 32ff 	mov.w	r2, #4294967295
 8003a84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f103 0208 	add.w	r2, r3, #8
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	f103 0208 	add.w	r2, r3, #8
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003aa0:	bf00      	nop
 8003aa2:	370c      	adds	r7, #12
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aaa:	4770      	bx	lr

08003aac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003aba:	bf00      	nop
 8003abc:	370c      	adds	r7, #12
 8003abe:	46bd      	mov	sp, r7
 8003ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac4:	4770      	bx	lr

08003ac6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ac6:	b480      	push	{r7}
 8003ac8:	b085      	sub	sp, #20
 8003aca:	af00      	add	r7, sp, #0
 8003acc:	6078      	str	r0, [r7, #4]
 8003ace:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	685b      	ldr	r3, [r3, #4]
 8003ad4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	68fa      	ldr	r2, [r7, #12]
 8003ada:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	689a      	ldr	r2, [r3, #8]
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	683a      	ldr	r2, [r7, #0]
 8003aea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	683a      	ldr	r2, [r7, #0]
 8003af0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	601a      	str	r2, [r3, #0]
}
 8003b02:	bf00      	nop
 8003b04:	3714      	adds	r7, #20
 8003b06:	46bd      	mov	sp, r7
 8003b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b0c:	4770      	bx	lr

08003b0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003b0e:	b480      	push	{r7}
 8003b10:	b085      	sub	sp, #20
 8003b12:	af00      	add	r7, sp, #0
 8003b14:	6078      	str	r0, [r7, #4]
 8003b16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b24:	d103      	bne.n	8003b2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	60fb      	str	r3, [r7, #12]
 8003b2c:	e00c      	b.n	8003b48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	3308      	adds	r3, #8
 8003b32:	60fb      	str	r3, [r7, #12]
 8003b34:	e002      	b.n	8003b3c <vListInsert+0x2e>
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	60fb      	str	r3, [r7, #12]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68ba      	ldr	r2, [r7, #8]
 8003b44:	429a      	cmp	r2, r3
 8003b46:	d2f6      	bcs.n	8003b36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	685a      	ldr	r2, [r3, #4]
 8003b4c:	683b      	ldr	r3, [r7, #0]
 8003b4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	685b      	ldr	r3, [r3, #4]
 8003b54:	683a      	ldr	r2, [r7, #0]
 8003b56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	68fa      	ldr	r2, [r7, #12]
 8003b5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	683a      	ldr	r2, [r7, #0]
 8003b62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	687a      	ldr	r2, [r7, #4]
 8003b68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	1c5a      	adds	r2, r3, #1
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	601a      	str	r2, [r3, #0]
}
 8003b74:	bf00      	nop
 8003b76:	3714      	adds	r7, #20
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7e:	4770      	bx	lr

08003b80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003b80:	b480      	push	{r7}
 8003b82:	b085      	sub	sp, #20
 8003b84:	af00      	add	r7, sp, #0
 8003b86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	691b      	ldr	r3, [r3, #16]
 8003b8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	685b      	ldr	r3, [r3, #4]
 8003b92:	687a      	ldr	r2, [r7, #4]
 8003b94:	6892      	ldr	r2, [r2, #8]
 8003b96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	687a      	ldr	r2, [r7, #4]
 8003b9e:	6852      	ldr	r2, [r2, #4]
 8003ba0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	687a      	ldr	r2, [r7, #4]
 8003ba8:	429a      	cmp	r2, r3
 8003baa:	d103      	bne.n	8003bb4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	689a      	ldr	r2, [r3, #8]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	1e5a      	subs	r2, r3, #1
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
}
 8003bc8:	4618      	mov	r0, r3
 8003bca:	3714      	adds	r7, #20
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
 8003bdc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d10a      	bne.n	8003bfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003be8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bec:	f383 8811 	msr	BASEPRI, r3
 8003bf0:	f3bf 8f6f 	isb	sy
 8003bf4:	f3bf 8f4f 	dsb	sy
 8003bf8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003bfa:	bf00      	nop
 8003bfc:	e7fe      	b.n	8003bfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003bfe:	f002 fcd9 	bl	80065b4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c0a:	68f9      	ldr	r1, [r7, #12]
 8003c0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c0e:	fb01 f303 	mul.w	r3, r1, r3
 8003c12:	441a      	add	r2, r3
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681a      	ldr	r2, [r3, #0]
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	681a      	ldr	r2, [r3, #0]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c2e:	3b01      	subs	r3, #1
 8003c30:	68f9      	ldr	r1, [r7, #12]
 8003c32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003c34:	fb01 f303 	mul.w	r3, r1, r3
 8003c38:	441a      	add	r2, r3
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	22ff      	movs	r2, #255	; 0xff
 8003c42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	22ff      	movs	r2, #255	; 0xff
 8003c4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d114      	bne.n	8003c7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	691b      	ldr	r3, [r3, #16]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d01a      	beq.n	8003c92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	3310      	adds	r3, #16
 8003c60:	4618      	mov	r0, r3
 8003c62:	f001 fc89 	bl	8005578 <xTaskRemoveFromEventList>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d012      	beq.n	8003c92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003c6c:	4b0c      	ldr	r3, [pc, #48]	; (8003ca0 <xQueueGenericReset+0xcc>)
 8003c6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c72:	601a      	str	r2, [r3, #0]
 8003c74:	f3bf 8f4f 	dsb	sy
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	e009      	b.n	8003c92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	3310      	adds	r3, #16
 8003c82:	4618      	mov	r0, r3
 8003c84:	f7ff fef2 	bl	8003a6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	3324      	adds	r3, #36	; 0x24
 8003c8c:	4618      	mov	r0, r3
 8003c8e:	f7ff feed 	bl	8003a6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003c92:	f002 fcbf 	bl	8006614 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003c96:	2301      	movs	r3, #1
}
 8003c98:	4618      	mov	r0, r3
 8003c9a:	3710      	adds	r7, #16
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	bd80      	pop	{r7, pc}
 8003ca0:	e000ed04 	.word	0xe000ed04

08003ca4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b08e      	sub	sp, #56	; 0x38
 8003ca8:	af02      	add	r7, sp, #8
 8003caa:	60f8      	str	r0, [r7, #12]
 8003cac:	60b9      	str	r1, [r7, #8]
 8003cae:	607a      	str	r2, [r7, #4]
 8003cb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2b00      	cmp	r3, #0
 8003cb6:	d10a      	bne.n	8003cce <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003cb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cbc:	f383 8811 	msr	BASEPRI, r3
 8003cc0:	f3bf 8f6f 	isb	sy
 8003cc4:	f3bf 8f4f 	dsb	sy
 8003cc8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cca:	bf00      	nop
 8003ccc:	e7fe      	b.n	8003ccc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d10a      	bne.n	8003cea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003cd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cd8:	f383 8811 	msr	BASEPRI, r3
 8003cdc:	f3bf 8f6f 	isb	sy
 8003ce0:	f3bf 8f4f 	dsb	sy
 8003ce4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003ce6:	bf00      	nop
 8003ce8:	e7fe      	b.n	8003ce8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d002      	beq.n	8003cf6 <xQueueGenericCreateStatic+0x52>
 8003cf0:	68bb      	ldr	r3, [r7, #8]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d001      	beq.n	8003cfa <xQueueGenericCreateStatic+0x56>
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e000      	b.n	8003cfc <xQueueGenericCreateStatic+0x58>
 8003cfa:	2300      	movs	r3, #0
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d10a      	bne.n	8003d16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003d00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d04:	f383 8811 	msr	BASEPRI, r3
 8003d08:	f3bf 8f6f 	isb	sy
 8003d0c:	f3bf 8f4f 	dsb	sy
 8003d10:	623b      	str	r3, [r7, #32]
}
 8003d12:	bf00      	nop
 8003d14:	e7fe      	b.n	8003d14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d102      	bne.n	8003d22 <xQueueGenericCreateStatic+0x7e>
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d101      	bne.n	8003d26 <xQueueGenericCreateStatic+0x82>
 8003d22:	2301      	movs	r3, #1
 8003d24:	e000      	b.n	8003d28 <xQueueGenericCreateStatic+0x84>
 8003d26:	2300      	movs	r3, #0
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d10a      	bne.n	8003d42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003d2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d30:	f383 8811 	msr	BASEPRI, r3
 8003d34:	f3bf 8f6f 	isb	sy
 8003d38:	f3bf 8f4f 	dsb	sy
 8003d3c:	61fb      	str	r3, [r7, #28]
}
 8003d3e:	bf00      	nop
 8003d40:	e7fe      	b.n	8003d40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003d42:	2350      	movs	r3, #80	; 0x50
 8003d44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003d46:	697b      	ldr	r3, [r7, #20]
 8003d48:	2b50      	cmp	r3, #80	; 0x50
 8003d4a:	d00a      	beq.n	8003d62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003d4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d50:	f383 8811 	msr	BASEPRI, r3
 8003d54:	f3bf 8f6f 	isb	sy
 8003d58:	f3bf 8f4f 	dsb	sy
 8003d5c:	61bb      	str	r3, [r7, #24]
}
 8003d5e:	bf00      	nop
 8003d60:	e7fe      	b.n	8003d60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003d62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003d68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d6a:	2b00      	cmp	r3, #0
 8003d6c:	d00d      	beq.n	8003d8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003d6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d70:	2201      	movs	r2, #1
 8003d72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003d76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003d7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	4613      	mov	r3, r2
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	68b9      	ldr	r1, [r7, #8]
 8003d84:	68f8      	ldr	r0, [r7, #12]
 8003d86:	f000 f83f 	bl	8003e08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3730      	adds	r7, #48	; 0x30
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}

08003d94 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b08a      	sub	sp, #40	; 0x28
 8003d98:	af02      	add	r7, sp, #8
 8003d9a:	60f8      	str	r0, [r7, #12]
 8003d9c:	60b9      	str	r1, [r7, #8]
 8003d9e:	4613      	mov	r3, r2
 8003da0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xQueueGenericCreate+0x2a>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	613b      	str	r3, [r7, #16]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003dbe:	68fb      	ldr	r3, [r7, #12]
 8003dc0:	68ba      	ldr	r2, [r7, #8]
 8003dc2:	fb02 f303 	mul.w	r3, r2, r3
 8003dc6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003dc8:	69fb      	ldr	r3, [r7, #28]
 8003dca:	3350      	adds	r3, #80	; 0x50
 8003dcc:	4618      	mov	r0, r3
 8003dce:	f002 fd13 	bl	80067f8 <pvPortMalloc>
 8003dd2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003dd4:	69bb      	ldr	r3, [r7, #24]
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d011      	beq.n	8003dfe <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003dda:	69bb      	ldr	r3, [r7, #24]
 8003ddc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dde:	697b      	ldr	r3, [r7, #20]
 8003de0:	3350      	adds	r3, #80	; 0x50
 8003de2:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003de4:	69bb      	ldr	r3, [r7, #24]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003dec:	79fa      	ldrb	r2, [r7, #7]
 8003dee:	69bb      	ldr	r3, [r7, #24]
 8003df0:	9300      	str	r3, [sp, #0]
 8003df2:	4613      	mov	r3, r2
 8003df4:	697a      	ldr	r2, [r7, #20]
 8003df6:	68b9      	ldr	r1, [r7, #8]
 8003df8:	68f8      	ldr	r0, [r7, #12]
 8003dfa:	f000 f805 	bl	8003e08 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003dfe:	69bb      	ldr	r3, [r7, #24]
	}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3720      	adds	r7, #32
 8003e04:	46bd      	mov	sp, r7
 8003e06:	bd80      	pop	{r7, pc}

08003e08 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	b084      	sub	sp, #16
 8003e0c:	af00      	add	r7, sp, #0
 8003e0e:	60f8      	str	r0, [r7, #12]
 8003e10:	60b9      	str	r1, [r7, #8]
 8003e12:	607a      	str	r2, [r7, #4]
 8003e14:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003e16:	68bb      	ldr	r3, [r7, #8]
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d103      	bne.n	8003e24 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003e1c:	69bb      	ldr	r3, [r7, #24]
 8003e1e:	69ba      	ldr	r2, [r7, #24]
 8003e20:	601a      	str	r2, [r3, #0]
 8003e22:	e002      	b.n	8003e2a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003e24:	69bb      	ldr	r3, [r7, #24]
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	68fa      	ldr	r2, [r7, #12]
 8003e2e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003e30:	69bb      	ldr	r3, [r7, #24]
 8003e32:	68ba      	ldr	r2, [r7, #8]
 8003e34:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003e36:	2101      	movs	r1, #1
 8003e38:	69b8      	ldr	r0, [r7, #24]
 8003e3a:	f7ff fecb 	bl	8003bd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003e3e:	69bb      	ldr	r3, [r7, #24]
 8003e40:	78fa      	ldrb	r2, [r7, #3]
 8003e42:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003e46:	bf00      	nop
 8003e48:	3710      	adds	r7, #16
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8003e4e:	b580      	push	{r7, lr}
 8003e50:	b08a      	sub	sp, #40	; 0x28
 8003e52:	af02      	add	r7, sp, #8
 8003e54:	60f8      	str	r0, [r7, #12]
 8003e56:	60b9      	str	r1, [r7, #8]
 8003e58:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	61bb      	str	r3, [r7, #24]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	429a      	cmp	r2, r3
 8003e7c:	d90a      	bls.n	8003e94 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8003e7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e82:	f383 8811 	msr	BASEPRI, r3
 8003e86:	f3bf 8f6f 	isb	sy
 8003e8a:	f3bf 8f4f 	dsb	sy
 8003e8e:	617b      	str	r3, [r7, #20]
}
 8003e90:	bf00      	nop
 8003e92:	e7fe      	b.n	8003e92 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003e94:	2302      	movs	r3, #2
 8003e96:	9300      	str	r3, [sp, #0]
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	2200      	movs	r2, #0
 8003e9c:	2100      	movs	r1, #0
 8003e9e:	68f8      	ldr	r0, [r7, #12]
 8003ea0:	f7ff ff00 	bl	8003ca4 <xQueueGenericCreateStatic>
 8003ea4:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8003ea6:	69fb      	ldr	r3, [r7, #28]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003eac:	69fb      	ldr	r3, [r7, #28]
 8003eae:	68ba      	ldr	r2, [r7, #8]
 8003eb0:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003eb2:	69fb      	ldr	r3, [r7, #28]
	}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3720      	adds	r7, #32
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}

08003ebc <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8003ebc:	b580      	push	{r7, lr}
 8003ebe:	b086      	sub	sp, #24
 8003ec0:	af00      	add	r7, sp, #0
 8003ec2:	6078      	str	r0, [r7, #4]
 8003ec4:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10a      	bne.n	8003ee2 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8003ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed0:	f383 8811 	msr	BASEPRI, r3
 8003ed4:	f3bf 8f6f 	isb	sy
 8003ed8:	f3bf 8f4f 	dsb	sy
 8003edc:	613b      	str	r3, [r7, #16]
}
 8003ede:	bf00      	nop
 8003ee0:	e7fe      	b.n	8003ee0 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8003ee2:	683a      	ldr	r2, [r7, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	429a      	cmp	r2, r3
 8003ee8:	d90a      	bls.n	8003f00 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8003eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eee:	f383 8811 	msr	BASEPRI, r3
 8003ef2:	f3bf 8f6f 	isb	sy
 8003ef6:	f3bf 8f4f 	dsb	sy
 8003efa:	60fb      	str	r3, [r7, #12]
}
 8003efc:	bf00      	nop
 8003efe:	e7fe      	b.n	8003efe <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8003f00:	2202      	movs	r2, #2
 8003f02:	2100      	movs	r1, #0
 8003f04:	6878      	ldr	r0, [r7, #4]
 8003f06:	f7ff ff45 	bl	8003d94 <xQueueGenericCreate>
 8003f0a:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8003f0c:	697b      	ldr	r3, [r7, #20]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d002      	beq.n	8003f18 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8003f12:	697b      	ldr	r3, [r7, #20]
 8003f14:	683a      	ldr	r2, [r7, #0]
 8003f16:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8003f18:	697b      	ldr	r3, [r7, #20]
	}
 8003f1a:	4618      	mov	r0, r3
 8003f1c:	3718      	adds	r7, #24
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}
	...

08003f24 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f24:	b580      	push	{r7, lr}
 8003f26:	b08e      	sub	sp, #56	; 0x38
 8003f28:	af00      	add	r7, sp, #0
 8003f2a:	60f8      	str	r0, [r7, #12]
 8003f2c:	60b9      	str	r1, [r7, #8]
 8003f2e:	607a      	str	r2, [r7, #4]
 8003f30:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f32:	2300      	movs	r3, #0
 8003f34:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d10a      	bne.n	8003f56 <xQueueGenericSend+0x32>
	__asm volatile
 8003f40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f44:	f383 8811 	msr	BASEPRI, r3
 8003f48:	f3bf 8f6f 	isb	sy
 8003f4c:	f3bf 8f4f 	dsb	sy
 8003f50:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f52:	bf00      	nop
 8003f54:	e7fe      	b.n	8003f54 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f56:	68bb      	ldr	r3, [r7, #8]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d103      	bne.n	8003f64 <xQueueGenericSend+0x40>
 8003f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <xQueueGenericSend+0x44>
 8003f64:	2301      	movs	r3, #1
 8003f66:	e000      	b.n	8003f6a <xQueueGenericSend+0x46>
 8003f68:	2300      	movs	r3, #0
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d10a      	bne.n	8003f84 <xQueueGenericSend+0x60>
	__asm volatile
 8003f6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f72:	f383 8811 	msr	BASEPRI, r3
 8003f76:	f3bf 8f6f 	isb	sy
 8003f7a:	f3bf 8f4f 	dsb	sy
 8003f7e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f80:	bf00      	nop
 8003f82:	e7fe      	b.n	8003f82 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f84:	683b      	ldr	r3, [r7, #0]
 8003f86:	2b02      	cmp	r3, #2
 8003f88:	d103      	bne.n	8003f92 <xQueueGenericSend+0x6e>
 8003f8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d101      	bne.n	8003f96 <xQueueGenericSend+0x72>
 8003f92:	2301      	movs	r3, #1
 8003f94:	e000      	b.n	8003f98 <xQueueGenericSend+0x74>
 8003f96:	2300      	movs	r3, #0
 8003f98:	2b00      	cmp	r3, #0
 8003f9a:	d10a      	bne.n	8003fb2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003f9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fa0:	f383 8811 	msr	BASEPRI, r3
 8003fa4:	f3bf 8f6f 	isb	sy
 8003fa8:	f3bf 8f4f 	dsb	sy
 8003fac:	623b      	str	r3, [r7, #32]
}
 8003fae:	bf00      	nop
 8003fb0:	e7fe      	b.n	8003fb0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fb2:	f001 fca3 	bl	80058fc <xTaskGetSchedulerState>
 8003fb6:	4603      	mov	r3, r0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d102      	bne.n	8003fc2 <xQueueGenericSend+0x9e>
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d101      	bne.n	8003fc6 <xQueueGenericSend+0xa2>
 8003fc2:	2301      	movs	r3, #1
 8003fc4:	e000      	b.n	8003fc8 <xQueueGenericSend+0xa4>
 8003fc6:	2300      	movs	r3, #0
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d10a      	bne.n	8003fe2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003fcc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fd0:	f383 8811 	msr	BASEPRI, r3
 8003fd4:	f3bf 8f6f 	isb	sy
 8003fd8:	f3bf 8f4f 	dsb	sy
 8003fdc:	61fb      	str	r3, [r7, #28]
}
 8003fde:	bf00      	nop
 8003fe0:	e7fe      	b.n	8003fe0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fe2:	f002 fae7 	bl	80065b4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fe6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fe8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d302      	bcc.n	8003ff8 <xQueueGenericSend+0xd4>
 8003ff2:	683b      	ldr	r3, [r7, #0]
 8003ff4:	2b02      	cmp	r3, #2
 8003ff6:	d129      	bne.n	800404c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	68b9      	ldr	r1, [r7, #8]
 8003ffc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ffe:	f000 fc5e 	bl	80048be <prvCopyDataToQueue>
 8004002:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	2b00      	cmp	r3, #0
 800400a:	d010      	beq.n	800402e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800400c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400e:	3324      	adds	r3, #36	; 0x24
 8004010:	4618      	mov	r0, r3
 8004012:	f001 fab1 	bl	8005578 <xTaskRemoveFromEventList>
 8004016:	4603      	mov	r3, r0
 8004018:	2b00      	cmp	r3, #0
 800401a:	d013      	beq.n	8004044 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800401c:	4b3f      	ldr	r3, [pc, #252]	; (800411c <xQueueGenericSend+0x1f8>)
 800401e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004022:	601a      	str	r2, [r3, #0]
 8004024:	f3bf 8f4f 	dsb	sy
 8004028:	f3bf 8f6f 	isb	sy
 800402c:	e00a      	b.n	8004044 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800402e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004030:	2b00      	cmp	r3, #0
 8004032:	d007      	beq.n	8004044 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004034:	4b39      	ldr	r3, [pc, #228]	; (800411c <xQueueGenericSend+0x1f8>)
 8004036:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800403a:	601a      	str	r2, [r3, #0]
 800403c:	f3bf 8f4f 	dsb	sy
 8004040:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004044:	f002 fae6 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 8004048:	2301      	movs	r3, #1
 800404a:	e063      	b.n	8004114 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2b00      	cmp	r3, #0
 8004050:	d103      	bne.n	800405a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004052:	f002 fadf 	bl	8006614 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004056:	2300      	movs	r3, #0
 8004058:	e05c      	b.n	8004114 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800405a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800405c:	2b00      	cmp	r3, #0
 800405e:	d106      	bne.n	800406e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004060:	f107 0314 	add.w	r3, r7, #20
 8004064:	4618      	mov	r0, r3
 8004066:	f001 faeb 	bl	8005640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800406a:	2301      	movs	r3, #1
 800406c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800406e:	f002 fad1 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004072:	f001 f857 	bl	8005124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004076:	f002 fa9d 	bl	80065b4 <vPortEnterCritical>
 800407a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004080:	b25b      	sxtb	r3, r3
 8004082:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004086:	d103      	bne.n	8004090 <xQueueGenericSend+0x16c>
 8004088:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408a:	2200      	movs	r2, #0
 800408c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004090:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004092:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004096:	b25b      	sxtb	r3, r3
 8004098:	f1b3 3fff 	cmp.w	r3, #4294967295
 800409c:	d103      	bne.n	80040a6 <xQueueGenericSend+0x182>
 800409e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040a0:	2200      	movs	r2, #0
 80040a2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80040a6:	f002 fab5 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80040aa:	1d3a      	adds	r2, r7, #4
 80040ac:	f107 0314 	add.w	r3, r7, #20
 80040b0:	4611      	mov	r1, r2
 80040b2:	4618      	mov	r0, r3
 80040b4:	f001 fada 	bl	800566c <xTaskCheckForTimeOut>
 80040b8:	4603      	mov	r3, r0
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d124      	bne.n	8004108 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040be:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040c0:	f000 fcf5 	bl	8004aae <prvIsQueueFull>
 80040c4:	4603      	mov	r3, r0
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d018      	beq.n	80040fc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040cc:	3310      	adds	r3, #16
 80040ce:	687a      	ldr	r2, [r7, #4]
 80040d0:	4611      	mov	r1, r2
 80040d2:	4618      	mov	r0, r3
 80040d4:	f001 fa00 	bl	80054d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040d8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040da:	f000 fc80 	bl	80049de <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040de:	f001 f82f 	bl	8005140 <xTaskResumeAll>
 80040e2:	4603      	mov	r3, r0
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f47f af7c 	bne.w	8003fe2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80040ea:	4b0c      	ldr	r3, [pc, #48]	; (800411c <xQueueGenericSend+0x1f8>)
 80040ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	f3bf 8f4f 	dsb	sy
 80040f6:	f3bf 8f6f 	isb	sy
 80040fa:	e772      	b.n	8003fe2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040fc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040fe:	f000 fc6e 	bl	80049de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004102:	f001 f81d 	bl	8005140 <xTaskResumeAll>
 8004106:	e76c      	b.n	8003fe2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004108:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800410a:	f000 fc68 	bl	80049de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800410e:	f001 f817 	bl	8005140 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004112:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004114:	4618      	mov	r0, r3
 8004116:	3738      	adds	r7, #56	; 0x38
 8004118:	46bd      	mov	sp, r7
 800411a:	bd80      	pop	{r7, pc}
 800411c:	e000ed04 	.word	0xe000ed04

08004120 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b090      	sub	sp, #64	; 0x40
 8004124:	af00      	add	r7, sp, #0
 8004126:	60f8      	str	r0, [r7, #12]
 8004128:	60b9      	str	r1, [r7, #8]
 800412a:	607a      	str	r2, [r7, #4]
 800412c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004132:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004134:	2b00      	cmp	r3, #0
 8004136:	d10a      	bne.n	800414e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800413c:	f383 8811 	msr	BASEPRI, r3
 8004140:	f3bf 8f6f 	isb	sy
 8004144:	f3bf 8f4f 	dsb	sy
 8004148:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800414a:	bf00      	nop
 800414c:	e7fe      	b.n	800414c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	2b00      	cmp	r3, #0
 8004152:	d103      	bne.n	800415c <xQueueGenericSendFromISR+0x3c>
 8004154:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004158:	2b00      	cmp	r3, #0
 800415a:	d101      	bne.n	8004160 <xQueueGenericSendFromISR+0x40>
 800415c:	2301      	movs	r3, #1
 800415e:	e000      	b.n	8004162 <xQueueGenericSendFromISR+0x42>
 8004160:	2300      	movs	r3, #0
 8004162:	2b00      	cmp	r3, #0
 8004164:	d10a      	bne.n	800417c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800416a:	f383 8811 	msr	BASEPRI, r3
 800416e:	f3bf 8f6f 	isb	sy
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004178:	bf00      	nop
 800417a:	e7fe      	b.n	800417a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800417c:	683b      	ldr	r3, [r7, #0]
 800417e:	2b02      	cmp	r3, #2
 8004180:	d103      	bne.n	800418a <xQueueGenericSendFromISR+0x6a>
 8004182:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004186:	2b01      	cmp	r3, #1
 8004188:	d101      	bne.n	800418e <xQueueGenericSendFromISR+0x6e>
 800418a:	2301      	movs	r3, #1
 800418c:	e000      	b.n	8004190 <xQueueGenericSendFromISR+0x70>
 800418e:	2300      	movs	r3, #0
 8004190:	2b00      	cmp	r3, #0
 8004192:	d10a      	bne.n	80041aa <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004194:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004198:	f383 8811 	msr	BASEPRI, r3
 800419c:	f3bf 8f6f 	isb	sy
 80041a0:	f3bf 8f4f 	dsb	sy
 80041a4:	623b      	str	r3, [r7, #32]
}
 80041a6:	bf00      	nop
 80041a8:	e7fe      	b.n	80041a8 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80041aa:	f002 fae5 	bl	8006778 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80041ae:	f3ef 8211 	mrs	r2, BASEPRI
 80041b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041b6:	f383 8811 	msr	BASEPRI, r3
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	f3bf 8f4f 	dsb	sy
 80041c2:	61fa      	str	r2, [r7, #28]
 80041c4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041c6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041cc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d302      	bcc.n	80041dc <xQueueGenericSendFromISR+0xbc>
 80041d6:	683b      	ldr	r3, [r7, #0]
 80041d8:	2b02      	cmp	r3, #2
 80041da:	d12f      	bne.n	800423c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041de:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041e2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041ea:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041ec:	683a      	ldr	r2, [r7, #0]
 80041ee:	68b9      	ldr	r1, [r7, #8]
 80041f0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041f2:	f000 fb64 	bl	80048be <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041f6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80041fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041fe:	d112      	bne.n	8004226 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004200:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004202:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004204:	2b00      	cmp	r3, #0
 8004206:	d016      	beq.n	8004236 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800420a:	3324      	adds	r3, #36	; 0x24
 800420c:	4618      	mov	r0, r3
 800420e:	f001 f9b3 	bl	8005578 <xTaskRemoveFromEventList>
 8004212:	4603      	mov	r3, r0
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00e      	beq.n	8004236 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	2b00      	cmp	r3, #0
 800421c:	d00b      	beq.n	8004236 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	2201      	movs	r2, #1
 8004222:	601a      	str	r2, [r3, #0]
 8004224:	e007      	b.n	8004236 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004226:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800422a:	3301      	adds	r3, #1
 800422c:	b2db      	uxtb	r3, r3
 800422e:	b25a      	sxtb	r2, r3
 8004230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004232:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004236:	2301      	movs	r3, #1
 8004238:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800423a:	e001      	b.n	8004240 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800423c:	2300      	movs	r3, #0
 800423e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004240:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004242:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004244:	697b      	ldr	r3, [r7, #20]
 8004246:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800424a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800424c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800424e:	4618      	mov	r0, r3
 8004250:	3740      	adds	r7, #64	; 0x40
 8004252:	46bd      	mov	sp, r7
 8004254:	bd80      	pop	{r7, pc}

08004256 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004256:	b580      	push	{r7, lr}
 8004258:	b08e      	sub	sp, #56	; 0x38
 800425a:	af00      	add	r7, sp, #0
 800425c:	6078      	str	r0, [r7, #4]
 800425e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	2b00      	cmp	r3, #0
 8004268:	d10a      	bne.n	8004280 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800426a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426e:	f383 8811 	msr	BASEPRI, r3
 8004272:	f3bf 8f6f 	isb	sy
 8004276:	f3bf 8f4f 	dsb	sy
 800427a:	623b      	str	r3, [r7, #32]
}
 800427c:	bf00      	nop
 800427e:	e7fe      	b.n	800427e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004280:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004284:	2b00      	cmp	r3, #0
 8004286:	d00a      	beq.n	800429e <xQueueGiveFromISR+0x48>
	__asm volatile
 8004288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800428c:	f383 8811 	msr	BASEPRI, r3
 8004290:	f3bf 8f6f 	isb	sy
 8004294:	f3bf 8f4f 	dsb	sy
 8004298:	61fb      	str	r3, [r7, #28]
}
 800429a:	bf00      	nop
 800429c:	e7fe      	b.n	800429c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	2b00      	cmp	r3, #0
 80042a4:	d103      	bne.n	80042ae <xQueueGiveFromISR+0x58>
 80042a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d101      	bne.n	80042b2 <xQueueGiveFromISR+0x5c>
 80042ae:	2301      	movs	r3, #1
 80042b0:	e000      	b.n	80042b4 <xQueueGiveFromISR+0x5e>
 80042b2:	2300      	movs	r3, #0
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d10a      	bne.n	80042ce <xQueueGiveFromISR+0x78>
	__asm volatile
 80042b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042bc:	f383 8811 	msr	BASEPRI, r3
 80042c0:	f3bf 8f6f 	isb	sy
 80042c4:	f3bf 8f4f 	dsb	sy
 80042c8:	61bb      	str	r3, [r7, #24]
}
 80042ca:	bf00      	nop
 80042cc:	e7fe      	b.n	80042cc <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80042ce:	f002 fa53 	bl	8006778 <vPortValidateInterruptPriority>
	__asm volatile
 80042d2:	f3ef 8211 	mrs	r2, BASEPRI
 80042d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042da:	f383 8811 	msr	BASEPRI, r3
 80042de:	f3bf 8f6f 	isb	sy
 80042e2:	f3bf 8f4f 	dsb	sy
 80042e6:	617a      	str	r2, [r7, #20]
 80042e8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80042ea:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80042ec:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042f2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80042f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042f8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042fa:	429a      	cmp	r2, r3
 80042fc:	d22b      	bcs.n	8004356 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80042fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004300:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004304:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004308:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800430a:	1c5a      	adds	r2, r3, #1
 800430c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800430e:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004310:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8004314:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004318:	d112      	bne.n	8004340 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800431a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800431c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800431e:	2b00      	cmp	r3, #0
 8004320:	d016      	beq.n	8004350 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004322:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004324:	3324      	adds	r3, #36	; 0x24
 8004326:	4618      	mov	r0, r3
 8004328:	f001 f926 	bl	8005578 <xTaskRemoveFromEventList>
 800432c:	4603      	mov	r3, r0
 800432e:	2b00      	cmp	r3, #0
 8004330:	d00e      	beq.n	8004350 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d00b      	beq.n	8004350 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	2201      	movs	r2, #1
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e007      	b.n	8004350 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004340:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004344:	3301      	adds	r3, #1
 8004346:	b2db      	uxtb	r3, r3
 8004348:	b25a      	sxtb	r2, r3
 800434a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800434c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004350:	2301      	movs	r3, #1
 8004352:	637b      	str	r3, [r7, #52]	; 0x34
 8004354:	e001      	b.n	800435a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004356:	2300      	movs	r3, #0
 8004358:	637b      	str	r3, [r7, #52]	; 0x34
 800435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800435c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	f383 8811 	msr	BASEPRI, r3
}
 8004364:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004366:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004368:	4618      	mov	r0, r3
 800436a:	3738      	adds	r7, #56	; 0x38
 800436c:	46bd      	mov	sp, r7
 800436e:	bd80      	pop	{r7, pc}

08004370 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b08c      	sub	sp, #48	; 0x30
 8004374:	af00      	add	r7, sp, #0
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	60b9      	str	r1, [r7, #8]
 800437a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800437c:	2300      	movs	r3, #0
 800437e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004384:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004386:	2b00      	cmp	r3, #0
 8004388:	d10a      	bne.n	80043a0 <xQueueReceive+0x30>
	__asm volatile
 800438a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438e:	f383 8811 	msr	BASEPRI, r3
 8004392:	f3bf 8f6f 	isb	sy
 8004396:	f3bf 8f4f 	dsb	sy
 800439a:	623b      	str	r3, [r7, #32]
}
 800439c:	bf00      	nop
 800439e:	e7fe      	b.n	800439e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80043a0:	68bb      	ldr	r3, [r7, #8]
 80043a2:	2b00      	cmp	r3, #0
 80043a4:	d103      	bne.n	80043ae <xQueueReceive+0x3e>
 80043a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d101      	bne.n	80043b2 <xQueueReceive+0x42>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <xQueueReceive+0x44>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <xQueueReceive+0x5e>
	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	61fb      	str	r3, [r7, #28]
}
 80043ca:	bf00      	nop
 80043cc:	e7fe      	b.n	80043cc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80043ce:	f001 fa95 	bl	80058fc <xTaskGetSchedulerState>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d102      	bne.n	80043de <xQueueReceive+0x6e>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d101      	bne.n	80043e2 <xQueueReceive+0x72>
 80043de:	2301      	movs	r3, #1
 80043e0:	e000      	b.n	80043e4 <xQueueReceive+0x74>
 80043e2:	2300      	movs	r3, #0
 80043e4:	2b00      	cmp	r3, #0
 80043e6:	d10a      	bne.n	80043fe <xQueueReceive+0x8e>
	__asm volatile
 80043e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043ec:	f383 8811 	msr	BASEPRI, r3
 80043f0:	f3bf 8f6f 	isb	sy
 80043f4:	f3bf 8f4f 	dsb	sy
 80043f8:	61bb      	str	r3, [r7, #24]
}
 80043fa:	bf00      	nop
 80043fc:	e7fe      	b.n	80043fc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80043fe:	f002 f8d9 	bl	80065b4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004404:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004406:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004408:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800440a:	2b00      	cmp	r3, #0
 800440c:	d01f      	beq.n	800444e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800440e:	68b9      	ldr	r1, [r7, #8]
 8004410:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004412:	f000 fabe 	bl	8004992 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004416:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004418:	1e5a      	subs	r2, r3, #1
 800441a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800441c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800441e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00f      	beq.n	8004446 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004426:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004428:	3310      	adds	r3, #16
 800442a:	4618      	mov	r0, r3
 800442c:	f001 f8a4 	bl	8005578 <xTaskRemoveFromEventList>
 8004430:	4603      	mov	r3, r0
 8004432:	2b00      	cmp	r3, #0
 8004434:	d007      	beq.n	8004446 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004436:	4b3d      	ldr	r3, [pc, #244]	; (800452c <xQueueReceive+0x1bc>)
 8004438:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800443c:	601a      	str	r2, [r3, #0]
 800443e:	f3bf 8f4f 	dsb	sy
 8004442:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004446:	f002 f8e5 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 800444a:	2301      	movs	r3, #1
 800444c:	e069      	b.n	8004522 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	2b00      	cmp	r3, #0
 8004452:	d103      	bne.n	800445c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004454:	f002 f8de 	bl	8006614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004458:	2300      	movs	r3, #0
 800445a:	e062      	b.n	8004522 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800445e:	2b00      	cmp	r3, #0
 8004460:	d106      	bne.n	8004470 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004462:	f107 0310 	add.w	r3, r7, #16
 8004466:	4618      	mov	r0, r3
 8004468:	f001 f8ea 	bl	8005640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800446c:	2301      	movs	r3, #1
 800446e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004470:	f002 f8d0 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004474:	f000 fe56 	bl	8005124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004478:	f002 f89c 	bl	80065b4 <vPortEnterCritical>
 800447c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800447e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004482:	b25b      	sxtb	r3, r3
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004488:	d103      	bne.n	8004492 <xQueueReceive+0x122>
 800448a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004492:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004498:	b25b      	sxtb	r3, r3
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800449e:	d103      	bne.n	80044a8 <xQueueReceive+0x138>
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044a8:	f002 f8b4 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80044ac:	1d3a      	adds	r2, r7, #4
 80044ae:	f107 0310 	add.w	r3, r7, #16
 80044b2:	4611      	mov	r1, r2
 80044b4:	4618      	mov	r0, r3
 80044b6:	f001 f8d9 	bl	800566c <xTaskCheckForTimeOut>
 80044ba:	4603      	mov	r3, r0
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d123      	bne.n	8004508 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80044c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044c2:	f000 fade 	bl	8004a82 <prvIsQueueEmpty>
 80044c6:	4603      	mov	r3, r0
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d017      	beq.n	80044fc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80044cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044ce:	3324      	adds	r3, #36	; 0x24
 80044d0:	687a      	ldr	r2, [r7, #4]
 80044d2:	4611      	mov	r1, r2
 80044d4:	4618      	mov	r0, r3
 80044d6:	f000 ffff 	bl	80054d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80044da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044dc:	f000 fa7f 	bl	80049de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80044e0:	f000 fe2e 	bl	8005140 <xTaskResumeAll>
 80044e4:	4603      	mov	r3, r0
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d189      	bne.n	80043fe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80044ea:	4b10      	ldr	r3, [pc, #64]	; (800452c <xQueueReceive+0x1bc>)
 80044ec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80044f0:	601a      	str	r2, [r3, #0]
 80044f2:	f3bf 8f4f 	dsb	sy
 80044f6:	f3bf 8f6f 	isb	sy
 80044fa:	e780      	b.n	80043fe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80044fc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80044fe:	f000 fa6e 	bl	80049de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004502:	f000 fe1d 	bl	8005140 <xTaskResumeAll>
 8004506:	e77a      	b.n	80043fe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004508:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800450a:	f000 fa68 	bl	80049de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800450e:	f000 fe17 	bl	8005140 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004512:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004514:	f000 fab5 	bl	8004a82 <prvIsQueueEmpty>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	f43f af6f 	beq.w	80043fe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004520:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004522:	4618      	mov	r0, r3
 8004524:	3730      	adds	r7, #48	; 0x30
 8004526:	46bd      	mov	sp, r7
 8004528:	bd80      	pop	{r7, pc}
 800452a:	bf00      	nop
 800452c:	e000ed04 	.word	0xe000ed04

08004530 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004530:	b580      	push	{r7, lr}
 8004532:	b08e      	sub	sp, #56	; 0x38
 8004534:	af00      	add	r7, sp, #0
 8004536:	6078      	str	r0, [r7, #4]
 8004538:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800453a:	2300      	movs	r3, #0
 800453c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004542:	2300      	movs	r3, #0
 8004544:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004546:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004548:	2b00      	cmp	r3, #0
 800454a:	d10a      	bne.n	8004562 <xQueueSemaphoreTake+0x32>
	__asm volatile
 800454c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004550:	f383 8811 	msr	BASEPRI, r3
 8004554:	f3bf 8f6f 	isb	sy
 8004558:	f3bf 8f4f 	dsb	sy
 800455c:	623b      	str	r3, [r7, #32]
}
 800455e:	bf00      	nop
 8004560:	e7fe      	b.n	8004560 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004562:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004566:	2b00      	cmp	r3, #0
 8004568:	d00a      	beq.n	8004580 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800456a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800456e:	f383 8811 	msr	BASEPRI, r3
 8004572:	f3bf 8f6f 	isb	sy
 8004576:	f3bf 8f4f 	dsb	sy
 800457a:	61fb      	str	r3, [r7, #28]
}
 800457c:	bf00      	nop
 800457e:	e7fe      	b.n	800457e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004580:	f001 f9bc 	bl	80058fc <xTaskGetSchedulerState>
 8004584:	4603      	mov	r3, r0
 8004586:	2b00      	cmp	r3, #0
 8004588:	d102      	bne.n	8004590 <xQueueSemaphoreTake+0x60>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d101      	bne.n	8004594 <xQueueSemaphoreTake+0x64>
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <xQueueSemaphoreTake+0x66>
 8004594:	2300      	movs	r3, #0
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10a      	bne.n	80045b0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800459a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800459e:	f383 8811 	msr	BASEPRI, r3
 80045a2:	f3bf 8f6f 	isb	sy
 80045a6:	f3bf 8f4f 	dsb	sy
 80045aa:	61bb      	str	r3, [r7, #24]
}
 80045ac:	bf00      	nop
 80045ae:	e7fe      	b.n	80045ae <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045b0:	f002 f800 	bl	80065b4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80045b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80045ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d024      	beq.n	800460a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80045c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045c2:	1e5a      	subs	r2, r3, #1
 80045c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045c6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80045c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	2b00      	cmp	r3, #0
 80045ce:	d104      	bne.n	80045da <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80045d0:	f001 fb0a 	bl	8005be8 <pvTaskIncrementMutexHeldCount>
 80045d4:	4602      	mov	r2, r0
 80045d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d8:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045dc:	691b      	ldr	r3, [r3, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d00f      	beq.n	8004602 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e4:	3310      	adds	r3, #16
 80045e6:	4618      	mov	r0, r3
 80045e8:	f000 ffc6 	bl	8005578 <xTaskRemoveFromEventList>
 80045ec:	4603      	mov	r3, r0
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d007      	beq.n	8004602 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80045f2:	4b54      	ldr	r3, [pc, #336]	; (8004744 <xQueueSemaphoreTake+0x214>)
 80045f4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045f8:	601a      	str	r2, [r3, #0]
 80045fa:	f3bf 8f4f 	dsb	sy
 80045fe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004602:	f002 f807 	bl	8006614 <vPortExitCritical>
				return pdPASS;
 8004606:	2301      	movs	r3, #1
 8004608:	e097      	b.n	800473a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800460a:	683b      	ldr	r3, [r7, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d111      	bne.n	8004634 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004610:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004612:	2b00      	cmp	r3, #0
 8004614:	d00a      	beq.n	800462c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004616:	f04f 0350 	mov.w	r3, #80	; 0x50
 800461a:	f383 8811 	msr	BASEPRI, r3
 800461e:	f3bf 8f6f 	isb	sy
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	617b      	str	r3, [r7, #20]
}
 8004628:	bf00      	nop
 800462a:	e7fe      	b.n	800462a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800462c:	f001 fff2 	bl	8006614 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004630:	2300      	movs	r3, #0
 8004632:	e082      	b.n	800473a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004634:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004636:	2b00      	cmp	r3, #0
 8004638:	d106      	bne.n	8004648 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800463a:	f107 030c 	add.w	r3, r7, #12
 800463e:	4618      	mov	r0, r3
 8004640:	f000 fffe 	bl	8005640 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004644:	2301      	movs	r3, #1
 8004646:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004648:	f001 ffe4 	bl	8006614 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800464c:	f000 fd6a 	bl	8005124 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004650:	f001 ffb0 	bl	80065b4 <vPortEnterCritical>
 8004654:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004656:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800465a:	b25b      	sxtb	r3, r3
 800465c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004660:	d103      	bne.n	800466a <xQueueSemaphoreTake+0x13a>
 8004662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004664:	2200      	movs	r2, #0
 8004666:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800466a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004670:	b25b      	sxtb	r3, r3
 8004672:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004676:	d103      	bne.n	8004680 <xQueueSemaphoreTake+0x150>
 8004678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800467a:	2200      	movs	r2, #0
 800467c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004680:	f001 ffc8 	bl	8006614 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004684:	463a      	mov	r2, r7
 8004686:	f107 030c 	add.w	r3, r7, #12
 800468a:	4611      	mov	r1, r2
 800468c:	4618      	mov	r0, r3
 800468e:	f000 ffed 	bl	800566c <xTaskCheckForTimeOut>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d132      	bne.n	80046fe <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004698:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800469a:	f000 f9f2 	bl	8004a82 <prvIsQueueEmpty>
 800469e:	4603      	mov	r3, r0
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d026      	beq.n	80046f2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80046a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d109      	bne.n	80046c0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 80046ac:	f001 ff82 	bl	80065b4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80046b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046b2:	689b      	ldr	r3, [r3, #8]
 80046b4:	4618      	mov	r0, r3
 80046b6:	f001 f93f 	bl	8005938 <xTaskPriorityInherit>
 80046ba:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 80046bc:	f001 ffaa 	bl	8006614 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80046c2:	3324      	adds	r3, #36	; 0x24
 80046c4:	683a      	ldr	r2, [r7, #0]
 80046c6:	4611      	mov	r1, r2
 80046c8:	4618      	mov	r0, r3
 80046ca:	f000 ff05 	bl	80054d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046ce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046d0:	f000 f985 	bl	80049de <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046d4:	f000 fd34 	bl	8005140 <xTaskResumeAll>
 80046d8:	4603      	mov	r3, r0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	f47f af68 	bne.w	80045b0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80046e0:	4b18      	ldr	r3, [pc, #96]	; (8004744 <xQueueSemaphoreTake+0x214>)
 80046e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
 80046f0:	e75e      	b.n	80045b0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80046f2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80046f4:	f000 f973 	bl	80049de <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046f8:	f000 fd22 	bl	8005140 <xTaskResumeAll>
 80046fc:	e758      	b.n	80045b0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80046fe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004700:	f000 f96d 	bl	80049de <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004704:	f000 fd1c 	bl	8005140 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004708:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800470a:	f000 f9ba 	bl	8004a82 <prvIsQueueEmpty>
 800470e:	4603      	mov	r3, r0
 8004710:	2b00      	cmp	r3, #0
 8004712:	f43f af4d 	beq.w	80045b0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004716:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004718:	2b00      	cmp	r3, #0
 800471a:	d00d      	beq.n	8004738 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 800471c:	f001 ff4a 	bl	80065b4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004720:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004722:	f000 f8b4 	bl	800488e <prvGetDisinheritPriorityAfterTimeout>
 8004726:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800472a:	689b      	ldr	r3, [r3, #8]
 800472c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800472e:	4618      	mov	r0, r3
 8004730:	f001 f9d8 	bl	8005ae4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004734:	f001 ff6e 	bl	8006614 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004738:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800473a:	4618      	mov	r0, r3
 800473c:	3738      	adds	r7, #56	; 0x38
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}
 8004742:	bf00      	nop
 8004744:	e000ed04 	.word	0xe000ed04

08004748 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8004748:	b580      	push	{r7, lr}
 800474a:	b08e      	sub	sp, #56	; 0x38
 800474c:	af00      	add	r7, sp, #0
 800474e:	60f8      	str	r0, [r7, #12]
 8004750:	60b9      	str	r1, [r7, #8]
 8004752:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	2b00      	cmp	r3, #0
 800475c:	d10a      	bne.n	8004774 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800475e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004762:	f383 8811 	msr	BASEPRI, r3
 8004766:	f3bf 8f6f 	isb	sy
 800476a:	f3bf 8f4f 	dsb	sy
 800476e:	623b      	str	r3, [r7, #32]
}
 8004770:	bf00      	nop
 8004772:	e7fe      	b.n	8004772 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d103      	bne.n	8004782 <xQueueReceiveFromISR+0x3a>
 800477a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800477e:	2b00      	cmp	r3, #0
 8004780:	d101      	bne.n	8004786 <xQueueReceiveFromISR+0x3e>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <xQueueReceiveFromISR+0x40>
 8004786:	2300      	movs	r3, #0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d10a      	bne.n	80047a2 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	61fb      	str	r3, [r7, #28]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047a2:	f001 ffe9 	bl	8006778 <vPortValidateInterruptPriority>
	__asm volatile
 80047a6:	f3ef 8211 	mrs	r2, BASEPRI
 80047aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ae:	f383 8811 	msr	BASEPRI, r3
 80047b2:	f3bf 8f6f 	isb	sy
 80047b6:	f3bf 8f4f 	dsb	sy
 80047ba:	61ba      	str	r2, [r7, #24]
 80047bc:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80047be:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80047c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80047c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80047c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d02f      	beq.n	800482e <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80047ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047d0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80047d4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80047d8:	68b9      	ldr	r1, [r7, #8]
 80047da:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80047dc:	f000 f8d9 	bl	8004992 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80047e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047e2:	1e5a      	subs	r2, r3, #1
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80047e8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80047ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80047f0:	d112      	bne.n	8004818 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f4:	691b      	ldr	r3, [r3, #16]
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d016      	beq.n	8004828 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047fc:	3310      	adds	r3, #16
 80047fe:	4618      	mov	r0, r3
 8004800:	f000 feba 	bl	8005578 <xTaskRemoveFromEventList>
 8004804:	4603      	mov	r3, r0
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00e      	beq.n	8004828 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d00b      	beq.n	8004828 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2201      	movs	r2, #1
 8004814:	601a      	str	r2, [r3, #0]
 8004816:	e007      	b.n	8004828 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8004818:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800481c:	3301      	adds	r3, #1
 800481e:	b2db      	uxtb	r3, r3
 8004820:	b25a      	sxtb	r2, r3
 8004822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004824:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8004828:	2301      	movs	r3, #1
 800482a:	637b      	str	r3, [r7, #52]	; 0x34
 800482c:	e001      	b.n	8004832 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800482e:	2300      	movs	r3, #0
 8004830:	637b      	str	r3, [r7, #52]	; 0x34
 8004832:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004834:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	f383 8811 	msr	BASEPRI, r3
}
 800483c:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800483e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004840:	4618      	mov	r0, r3
 8004842:	3738      	adds	r7, #56	; 0x38
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}

08004848 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004848:	b580      	push	{r7, lr}
 800484a:	b084      	sub	sp, #16
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d10a      	bne.n	8004870 <vQueueDelete+0x28>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	60bb      	str	r3, [r7, #8]
}
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004870:	68f8      	ldr	r0, [r7, #12]
 8004872:	f000 f95f 	bl	8004b34 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 800487c:	2b00      	cmp	r3, #0
 800487e:	d102      	bne.n	8004886 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004880:	68f8      	ldr	r0, [r7, #12]
 8004882:	f002 f885 	bl	8006990 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004886:	bf00      	nop
 8004888:	3710      	adds	r7, #16
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}

0800488e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800488e:	b480      	push	{r7}
 8004890:	b085      	sub	sp, #20
 8004892:	af00      	add	r7, sp, #0
 8004894:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800489a:	2b00      	cmp	r3, #0
 800489c:	d006      	beq.n	80048ac <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e001      	b.n	80048b0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80048ac:	2300      	movs	r3, #0
 80048ae:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80048b0:	68fb      	ldr	r3, [r7, #12]
	}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr

080048be <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80048be:	b580      	push	{r7, lr}
 80048c0:	b086      	sub	sp, #24
 80048c2:	af00      	add	r7, sp, #0
 80048c4:	60f8      	str	r0, [r7, #12]
 80048c6:	60b9      	str	r1, [r7, #8]
 80048c8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80048ca:	2300      	movs	r3, #0
 80048cc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d10d      	bne.n	80048f8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	2b00      	cmp	r3, #0
 80048e2:	d14d      	bne.n	8004980 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	689b      	ldr	r3, [r3, #8]
 80048e8:	4618      	mov	r0, r3
 80048ea:	f001 f88d 	bl	8005a08 <xTaskPriorityDisinherit>
 80048ee:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	2200      	movs	r2, #0
 80048f4:	609a      	str	r2, [r3, #8]
 80048f6:	e043      	b.n	8004980 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d119      	bne.n	8004932 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	6858      	ldr	r0, [r3, #4]
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004906:	461a      	mov	r2, r3
 8004908:	68b9      	ldr	r1, [r7, #8]
 800490a:	f002 f985 	bl	8006c18 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685a      	ldr	r2, [r3, #4]
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004916:	441a      	add	r2, r3
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	685a      	ldr	r2, [r3, #4]
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	689b      	ldr	r3, [r3, #8]
 8004924:	429a      	cmp	r2, r3
 8004926:	d32b      	bcc.n	8004980 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681a      	ldr	r2, [r3, #0]
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	605a      	str	r2, [r3, #4]
 8004930:	e026      	b.n	8004980 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	68d8      	ldr	r0, [r3, #12]
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800493a:	461a      	mov	r2, r3
 800493c:	68b9      	ldr	r1, [r7, #8]
 800493e:	f002 f96b 	bl	8006c18 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004942:	68fb      	ldr	r3, [r7, #12]
 8004944:	68da      	ldr	r2, [r3, #12]
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800494a:	425b      	negs	r3, r3
 800494c:	441a      	add	r2, r3
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	68da      	ldr	r2, [r3, #12]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	429a      	cmp	r2, r3
 800495c:	d207      	bcs.n	800496e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	689a      	ldr	r2, [r3, #8]
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004966:	425b      	negs	r3, r3
 8004968:	441a      	add	r2, r3
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2b02      	cmp	r3, #2
 8004972:	d105      	bne.n	8004980 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b00      	cmp	r3, #0
 8004978:	d002      	beq.n	8004980 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	3b01      	subs	r3, #1
 800497e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004980:	693b      	ldr	r3, [r7, #16]
 8004982:	1c5a      	adds	r2, r3, #1
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004988:	697b      	ldr	r3, [r7, #20]
}
 800498a:	4618      	mov	r0, r3
 800498c:	3718      	adds	r7, #24
 800498e:	46bd      	mov	sp, r7
 8004990:	bd80      	pop	{r7, pc}

08004992 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004992:	b580      	push	{r7, lr}
 8004994:	b082      	sub	sp, #8
 8004996:	af00      	add	r7, sp, #0
 8004998:	6078      	str	r0, [r7, #4]
 800499a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d018      	beq.n	80049d6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	68da      	ldr	r2, [r3, #12]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ac:	441a      	add	r2, r3
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	689b      	ldr	r3, [r3, #8]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d303      	bcc.n	80049c6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68d9      	ldr	r1, [r3, #12]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049ce:	461a      	mov	r2, r3
 80049d0:	6838      	ldr	r0, [r7, #0]
 80049d2:	f002 f921 	bl	8006c18 <memcpy>
	}
}
 80049d6:	bf00      	nop
 80049d8:	3708      	adds	r7, #8
 80049da:	46bd      	mov	sp, r7
 80049dc:	bd80      	pop	{r7, pc}

080049de <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80049de:	b580      	push	{r7, lr}
 80049e0:	b084      	sub	sp, #16
 80049e2:	af00      	add	r7, sp, #0
 80049e4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80049e6:	f001 fde5 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049f0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80049f2:	e011      	b.n	8004a18 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d012      	beq.n	8004a22 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	3324      	adds	r3, #36	; 0x24
 8004a00:	4618      	mov	r0, r3
 8004a02:	f000 fdb9 	bl	8005578 <xTaskRemoveFromEventList>
 8004a06:	4603      	mov	r3, r0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d001      	beq.n	8004a10 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004a0c:	f000 fe90 	bl	8005730 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004a10:	7bfb      	ldrb	r3, [r7, #15]
 8004a12:	3b01      	subs	r3, #1
 8004a14:	b2db      	uxtb	r3, r3
 8004a16:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004a18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	dce9      	bgt.n	80049f4 <prvUnlockQueue+0x16>
 8004a20:	e000      	b.n	8004a24 <prvUnlockQueue+0x46>
					break;
 8004a22:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	22ff      	movs	r2, #255	; 0xff
 8004a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004a2c:	f001 fdf2 	bl	8006614 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004a30:	f001 fdc0 	bl	80065b4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004a3a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a3c:	e011      	b.n	8004a62 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	691b      	ldr	r3, [r3, #16]
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	d012      	beq.n	8004a6c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	3310      	adds	r3, #16
 8004a4a:	4618      	mov	r0, r3
 8004a4c:	f000 fd94 	bl	8005578 <xTaskRemoveFromEventList>
 8004a50:	4603      	mov	r3, r0
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d001      	beq.n	8004a5a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004a56:	f000 fe6b 	bl	8005730 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004a5a:	7bbb      	ldrb	r3, [r7, #14]
 8004a5c:	3b01      	subs	r3, #1
 8004a5e:	b2db      	uxtb	r3, r3
 8004a60:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004a62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	dce9      	bgt.n	8004a3e <prvUnlockQueue+0x60>
 8004a6a:	e000      	b.n	8004a6e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004a6c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	22ff      	movs	r2, #255	; 0xff
 8004a72:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004a76:	f001 fdcd 	bl	8006614 <vPortExitCritical>
}
 8004a7a:	bf00      	nop
 8004a7c:	3710      	adds	r7, #16
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}

08004a82 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004a82:	b580      	push	{r7, lr}
 8004a84:	b084      	sub	sp, #16
 8004a86:	af00      	add	r7, sp, #0
 8004a88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004a8a:	f001 fd93 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d102      	bne.n	8004a9c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004a96:	2301      	movs	r3, #1
 8004a98:	60fb      	str	r3, [r7, #12]
 8004a9a:	e001      	b.n	8004aa0 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004aa0:	f001 fdb8 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	3710      	adds	r7, #16
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd80      	pop	{r7, pc}

08004aae <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004aae:	b580      	push	{r7, lr}
 8004ab0:	b084      	sub	sp, #16
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ab6:	f001 fd7d 	bl	80065b4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ac2:	429a      	cmp	r2, r3
 8004ac4:	d102      	bne.n	8004acc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004ac6:	2301      	movs	r3, #1
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	e001      	b.n	8004ad0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004acc:	2300      	movs	r3, #0
 8004ace:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ad0:	f001 fda0 	bl	8006614 <vPortExitCritical>

	return xReturn;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
}
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	3710      	adds	r7, #16
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bd80      	pop	{r7, pc}
	...

08004ae0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ae0:	b480      	push	{r7}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004aea:	2300      	movs	r3, #0
 8004aec:	60fb      	str	r3, [r7, #12]
 8004aee:	e014      	b.n	8004b1a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004af0:	4a0f      	ldr	r2, [pc, #60]	; (8004b30 <vQueueAddToRegistry+0x50>)
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d10b      	bne.n	8004b14 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004afc:	490c      	ldr	r1, [pc, #48]	; (8004b30 <vQueueAddToRegistry+0x50>)
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	683a      	ldr	r2, [r7, #0]
 8004b02:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004b06:	4a0a      	ldr	r2, [pc, #40]	; (8004b30 <vQueueAddToRegistry+0x50>)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4413      	add	r3, r2
 8004b0e:	687a      	ldr	r2, [r7, #4]
 8004b10:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004b12:	e006      	b.n	8004b22 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	3301      	adds	r3, #1
 8004b18:	60fb      	str	r3, [r7, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	2b07      	cmp	r3, #7
 8004b1e:	d9e7      	bls.n	8004af0 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004b20:	bf00      	nop
 8004b22:	bf00      	nop
 8004b24:	3714      	adds	r7, #20
 8004b26:	46bd      	mov	sp, r7
 8004b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2c:	4770      	bx	lr
 8004b2e:	bf00      	nop
 8004b30:	200005f4 	.word	0x200005f4

08004b34 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004b34:	b480      	push	{r7}
 8004b36:	b085      	sub	sp, #20
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	60fb      	str	r3, [r7, #12]
 8004b40:	e016      	b.n	8004b70 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004b42:	4a10      	ldr	r2, [pc, #64]	; (8004b84 <vQueueUnregisterQueue+0x50>)
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	00db      	lsls	r3, r3, #3
 8004b48:	4413      	add	r3, r2
 8004b4a:	685b      	ldr	r3, [r3, #4]
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d10b      	bne.n	8004b6a <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004b52:	4a0c      	ldr	r2, [pc, #48]	; (8004b84 <vQueueUnregisterQueue+0x50>)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2100      	movs	r1, #0
 8004b58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004b5c:	4a09      	ldr	r2, [pc, #36]	; (8004b84 <vQueueUnregisterQueue+0x50>)
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	00db      	lsls	r3, r3, #3
 8004b62:	4413      	add	r3, r2
 8004b64:	2200      	movs	r2, #0
 8004b66:	605a      	str	r2, [r3, #4]
				break;
 8004b68:	e006      	b.n	8004b78 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	3301      	adds	r3, #1
 8004b6e:	60fb      	str	r3, [r7, #12]
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2b07      	cmp	r3, #7
 8004b74:	d9e5      	bls.n	8004b42 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004b76:	bf00      	nop
 8004b78:	bf00      	nop
 8004b7a:	3714      	adds	r7, #20
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	200005f4 	.word	0x200005f4

08004b88 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b086      	sub	sp, #24
 8004b8c:	af00      	add	r7, sp, #0
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004b98:	f001 fd0c 	bl	80065b4 <vPortEnterCritical>
 8004b9c:	697b      	ldr	r3, [r7, #20]
 8004b9e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ba2:	b25b      	sxtb	r3, r3
 8004ba4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ba8:	d103      	bne.n	8004bb2 <vQueueWaitForMessageRestricted+0x2a>
 8004baa:	697b      	ldr	r3, [r7, #20]
 8004bac:	2200      	movs	r2, #0
 8004bae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bb8:	b25b      	sxtb	r3, r3
 8004bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bbe:	d103      	bne.n	8004bc8 <vQueueWaitForMessageRestricted+0x40>
 8004bc0:	697b      	ldr	r3, [r7, #20]
 8004bc2:	2200      	movs	r2, #0
 8004bc4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bc8:	f001 fd24 	bl	8006614 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d106      	bne.n	8004be2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004bd4:	697b      	ldr	r3, [r7, #20]
 8004bd6:	3324      	adds	r3, #36	; 0x24
 8004bd8:	687a      	ldr	r2, [r7, #4]
 8004bda:	68b9      	ldr	r1, [r7, #8]
 8004bdc:	4618      	mov	r0, r3
 8004bde:	f000 fc9f 	bl	8005520 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004be2:	6978      	ldr	r0, [r7, #20]
 8004be4:	f7ff fefb 	bl	80049de <prvUnlockQueue>
	}
 8004be8:	bf00      	nop
 8004bea:	3718      	adds	r7, #24
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}

08004bf0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b08e      	sub	sp, #56	; 0x38
 8004bf4:	af04      	add	r7, sp, #16
 8004bf6:	60f8      	str	r0, [r7, #12]
 8004bf8:	60b9      	str	r1, [r7, #8]
 8004bfa:	607a      	str	r2, [r7, #4]
 8004bfc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004bfe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d10a      	bne.n	8004c1a <xTaskCreateStatic+0x2a>
	__asm volatile
 8004c04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c08:	f383 8811 	msr	BASEPRI, r3
 8004c0c:	f3bf 8f6f 	isb	sy
 8004c10:	f3bf 8f4f 	dsb	sy
 8004c14:	623b      	str	r3, [r7, #32]
}
 8004c16:	bf00      	nop
 8004c18:	e7fe      	b.n	8004c18 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004c1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d10a      	bne.n	8004c36 <xTaskCreateStatic+0x46>
	__asm volatile
 8004c20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c24:	f383 8811 	msr	BASEPRI, r3
 8004c28:	f3bf 8f6f 	isb	sy
 8004c2c:	f3bf 8f4f 	dsb	sy
 8004c30:	61fb      	str	r3, [r7, #28]
}
 8004c32:	bf00      	nop
 8004c34:	e7fe      	b.n	8004c34 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004c36:	23bc      	movs	r3, #188	; 0xbc
 8004c38:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004c3a:	693b      	ldr	r3, [r7, #16]
 8004c3c:	2bbc      	cmp	r3, #188	; 0xbc
 8004c3e:	d00a      	beq.n	8004c56 <xTaskCreateStatic+0x66>
	__asm volatile
 8004c40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c44:	f383 8811 	msr	BASEPRI, r3
 8004c48:	f3bf 8f6f 	isb	sy
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	61bb      	str	r3, [r7, #24]
}
 8004c52:	bf00      	nop
 8004c54:	e7fe      	b.n	8004c54 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004c56:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004c58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d01e      	beq.n	8004c9c <xTaskCreateStatic+0xac>
 8004c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d01b      	beq.n	8004c9c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004c64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c66:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c6a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004c6c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004c6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c70:	2202      	movs	r2, #2
 8004c72:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004c76:	2300      	movs	r3, #0
 8004c78:	9303      	str	r3, [sp, #12]
 8004c7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c7c:	9302      	str	r3, [sp, #8]
 8004c7e:	f107 0314 	add.w	r3, r7, #20
 8004c82:	9301      	str	r3, [sp, #4]
 8004c84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c86:	9300      	str	r3, [sp, #0]
 8004c88:	683b      	ldr	r3, [r7, #0]
 8004c8a:	687a      	ldr	r2, [r7, #4]
 8004c8c:	68b9      	ldr	r1, [r7, #8]
 8004c8e:	68f8      	ldr	r0, [r7, #12]
 8004c90:	f000 f850 	bl	8004d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004c94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004c96:	f000 f8f3 	bl	8004e80 <prvAddNewTaskToReadyList>
 8004c9a:	e001      	b.n	8004ca0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004ca0:	697b      	ldr	r3, [r7, #20]
	}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3728      	adds	r7, #40	; 0x28
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}

08004caa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004caa:	b580      	push	{r7, lr}
 8004cac:	b08c      	sub	sp, #48	; 0x30
 8004cae:	af04      	add	r7, sp, #16
 8004cb0:	60f8      	str	r0, [r7, #12]
 8004cb2:	60b9      	str	r1, [r7, #8]
 8004cb4:	603b      	str	r3, [r7, #0]
 8004cb6:	4613      	mov	r3, r2
 8004cb8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004cba:	88fb      	ldrh	r3, [r7, #6]
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fd9a 	bl	80067f8 <pvPortMalloc>
 8004cc4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004cc6:	697b      	ldr	r3, [r7, #20]
 8004cc8:	2b00      	cmp	r3, #0
 8004cca:	d00e      	beq.n	8004cea <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ccc:	20bc      	movs	r0, #188	; 0xbc
 8004cce:	f001 fd93 	bl	80067f8 <pvPortMalloc>
 8004cd2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004cd4:	69fb      	ldr	r3, [r7, #28]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004cda:	69fb      	ldr	r3, [r7, #28]
 8004cdc:	697a      	ldr	r2, [r7, #20]
 8004cde:	631a      	str	r2, [r3, #48]	; 0x30
 8004ce0:	e005      	b.n	8004cee <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004ce2:	6978      	ldr	r0, [r7, #20]
 8004ce4:	f001 fe54 	bl	8006990 <vPortFree>
 8004ce8:	e001      	b.n	8004cee <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004cea:	2300      	movs	r3, #0
 8004cec:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004cee:	69fb      	ldr	r3, [r7, #28]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d017      	beq.n	8004d24 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004cf4:	69fb      	ldr	r3, [r7, #28]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004cfc:	88fa      	ldrh	r2, [r7, #6]
 8004cfe:	2300      	movs	r3, #0
 8004d00:	9303      	str	r3, [sp, #12]
 8004d02:	69fb      	ldr	r3, [r7, #28]
 8004d04:	9302      	str	r3, [sp, #8]
 8004d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004d08:	9301      	str	r3, [sp, #4]
 8004d0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	683b      	ldr	r3, [r7, #0]
 8004d10:	68b9      	ldr	r1, [r7, #8]
 8004d12:	68f8      	ldr	r0, [r7, #12]
 8004d14:	f000 f80e 	bl	8004d34 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004d18:	69f8      	ldr	r0, [r7, #28]
 8004d1a:	f000 f8b1 	bl	8004e80 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004d1e:	2301      	movs	r3, #1
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	e002      	b.n	8004d2a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004d24:	f04f 33ff 	mov.w	r3, #4294967295
 8004d28:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004d2a:	69bb      	ldr	r3, [r7, #24]
	}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	3720      	adds	r7, #32
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd80      	pop	{r7, pc}

08004d34 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004d34:	b580      	push	{r7, lr}
 8004d36:	b088      	sub	sp, #32
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	60f8      	str	r0, [r7, #12]
 8004d3c:	60b9      	str	r1, [r7, #8]
 8004d3e:	607a      	str	r2, [r7, #4]
 8004d40:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004d42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d44:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	21a5      	movs	r1, #165	; 0xa5
 8004d4e:	f001 ff71 	bl	8006c34 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004d5c:	3b01      	subs	r3, #1
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	4413      	add	r3, r2
 8004d62:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004d64:	69bb      	ldr	r3, [r7, #24]
 8004d66:	f023 0307 	bic.w	r3, r3, #7
 8004d6a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004d6c:	69bb      	ldr	r3, [r7, #24]
 8004d6e:	f003 0307 	and.w	r3, r3, #7
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00a      	beq.n	8004d8c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004d76:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d7a:	f383 8811 	msr	BASEPRI, r3
 8004d7e:	f3bf 8f6f 	isb	sy
 8004d82:	f3bf 8f4f 	dsb	sy
 8004d86:	617b      	str	r3, [r7, #20]
}
 8004d88:	bf00      	nop
 8004d8a:	e7fe      	b.n	8004d8a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d01f      	beq.n	8004dd2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004d92:	2300      	movs	r3, #0
 8004d94:	61fb      	str	r3, [r7, #28]
 8004d96:	e012      	b.n	8004dbe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004d98:	68ba      	ldr	r2, [r7, #8]
 8004d9a:	69fb      	ldr	r3, [r7, #28]
 8004d9c:	4413      	add	r3, r2
 8004d9e:	7819      	ldrb	r1, [r3, #0]
 8004da0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004da2:	69fb      	ldr	r3, [r7, #28]
 8004da4:	4413      	add	r3, r2
 8004da6:	3334      	adds	r3, #52	; 0x34
 8004da8:	460a      	mov	r2, r1
 8004daa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004dac:	68ba      	ldr	r2, [r7, #8]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	4413      	add	r3, r2
 8004db2:	781b      	ldrb	r3, [r3, #0]
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d006      	beq.n	8004dc6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004db8:	69fb      	ldr	r3, [r7, #28]
 8004dba:	3301      	adds	r3, #1
 8004dbc:	61fb      	str	r3, [r7, #28]
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	2b0f      	cmp	r3, #15
 8004dc2:	d9e9      	bls.n	8004d98 <prvInitialiseNewTask+0x64>
 8004dc4:	e000      	b.n	8004dc8 <prvInitialiseNewTask+0x94>
			{
				break;
 8004dc6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dca:	2200      	movs	r2, #0
 8004dcc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004dd0:	e003      	b.n	8004dda <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004dd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ddc:	2b37      	cmp	r3, #55	; 0x37
 8004dde:	d901      	bls.n	8004de4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004de0:	2337      	movs	r3, #55	; 0x37
 8004de2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004de6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004de8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004dec:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004dee:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004df0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df2:	2200      	movs	r2, #0
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004df8:	3304      	adds	r3, #4
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe fe56 	bl	8003aac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e02:	3318      	adds	r3, #24
 8004e04:	4618      	mov	r0, r3
 8004e06:	f7fe fe51 	bl	8003aac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004e0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e0c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e0e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004e12:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004e16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e18:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e1c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e1e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004e20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e22:	2200      	movs	r2, #0
 8004e24:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004e28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e2a:	2200      	movs	r2, #0
 8004e2c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004e30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e32:	3354      	adds	r3, #84	; 0x54
 8004e34:	2260      	movs	r2, #96	; 0x60
 8004e36:	2100      	movs	r1, #0
 8004e38:	4618      	mov	r0, r3
 8004e3a:	f001 fefb 	bl	8006c34 <memset>
 8004e3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e40:	4a0c      	ldr	r2, [pc, #48]	; (8004e74 <prvInitialiseNewTask+0x140>)
 8004e42:	659a      	str	r2, [r3, #88]	; 0x58
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	4a0c      	ldr	r2, [pc, #48]	; (8004e78 <prvInitialiseNewTask+0x144>)
 8004e48:	65da      	str	r2, [r3, #92]	; 0x5c
 8004e4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e4c:	4a0b      	ldr	r2, [pc, #44]	; (8004e7c <prvInitialiseNewTask+0x148>)
 8004e4e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004e50:	683a      	ldr	r2, [r7, #0]
 8004e52:	68f9      	ldr	r1, [r7, #12]
 8004e54:	69b8      	ldr	r0, [r7, #24]
 8004e56:	f001 fa7d 	bl	8006354 <pxPortInitialiseStack>
 8004e5a:	4602      	mov	r2, r0
 8004e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004e60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d002      	beq.n	8004e6c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004e66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004e6a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004e6c:	bf00      	nop
 8004e6e:	3720      	adds	r7, #32
 8004e70:	46bd      	mov	sp, r7
 8004e72:	bd80      	pop	{r7, pc}
 8004e74:	08006ec8 	.word	0x08006ec8
 8004e78:	08006ee8 	.word	0x08006ee8
 8004e7c:	08006ea8 	.word	0x08006ea8

08004e80 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b082      	sub	sp, #8
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004e88:	f001 fb94 	bl	80065b4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004e8c:	4b2d      	ldr	r3, [pc, #180]	; (8004f44 <prvAddNewTaskToReadyList+0xc4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	3301      	adds	r3, #1
 8004e92:	4a2c      	ldr	r2, [pc, #176]	; (8004f44 <prvAddNewTaskToReadyList+0xc4>)
 8004e94:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004e96:	4b2c      	ldr	r3, [pc, #176]	; (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d109      	bne.n	8004eb2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004e9e:	4a2a      	ldr	r2, [pc, #168]	; (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004ea4:	4b27      	ldr	r3, [pc, #156]	; (8004f44 <prvAddNewTaskToReadyList+0xc4>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	2b01      	cmp	r3, #1
 8004eaa:	d110      	bne.n	8004ece <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004eac:	f000 fc64 	bl	8005778 <prvInitialiseTaskLists>
 8004eb0:	e00d      	b.n	8004ece <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004eb2:	4b26      	ldr	r3, [pc, #152]	; (8004f4c <prvAddNewTaskToReadyList+0xcc>)
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	2b00      	cmp	r3, #0
 8004eb8:	d109      	bne.n	8004ece <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004eba:	4b23      	ldr	r3, [pc, #140]	; (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ec4:	429a      	cmp	r2, r3
 8004ec6:	d802      	bhi.n	8004ece <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004ec8:	4a1f      	ldr	r2, [pc, #124]	; (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004ece:	4b20      	ldr	r3, [pc, #128]	; (8004f50 <prvAddNewTaskToReadyList+0xd0>)
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	3301      	adds	r3, #1
 8004ed4:	4a1e      	ldr	r2, [pc, #120]	; (8004f50 <prvAddNewTaskToReadyList+0xd0>)
 8004ed6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <prvAddNewTaskToReadyList+0xd0>)
 8004eda:	681a      	ldr	r2, [r3, #0]
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ee4:	4b1b      	ldr	r3, [pc, #108]	; (8004f54 <prvAddNewTaskToReadyList+0xd4>)
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d903      	bls.n	8004ef4 <prvAddNewTaskToReadyList+0x74>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef0:	4a18      	ldr	r2, [pc, #96]	; (8004f54 <prvAddNewTaskToReadyList+0xd4>)
 8004ef2:	6013      	str	r3, [r2, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ef8:	4613      	mov	r3, r2
 8004efa:	009b      	lsls	r3, r3, #2
 8004efc:	4413      	add	r3, r2
 8004efe:	009b      	lsls	r3, r3, #2
 8004f00:	4a15      	ldr	r2, [pc, #84]	; (8004f58 <prvAddNewTaskToReadyList+0xd8>)
 8004f02:	441a      	add	r2, r3
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	3304      	adds	r3, #4
 8004f08:	4619      	mov	r1, r3
 8004f0a:	4610      	mov	r0, r2
 8004f0c:	f7fe fddb 	bl	8003ac6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004f10:	f001 fb80 	bl	8006614 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004f14:	4b0d      	ldr	r3, [pc, #52]	; (8004f4c <prvAddNewTaskToReadyList+0xcc>)
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00e      	beq.n	8004f3a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004f1c:	4b0a      	ldr	r3, [pc, #40]	; (8004f48 <prvAddNewTaskToReadyList+0xc8>)
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d207      	bcs.n	8004f3a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004f2a:	4b0c      	ldr	r3, [pc, #48]	; (8004f5c <prvAddNewTaskToReadyList+0xdc>)
 8004f2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f30:	601a      	str	r2, [r3, #0]
 8004f32:	f3bf 8f4f 	dsb	sy
 8004f36:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004f3a:	bf00      	nop
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	20000b08 	.word	0x20000b08
 8004f48:	20000634 	.word	0x20000634
 8004f4c:	20000b14 	.word	0x20000b14
 8004f50:	20000b24 	.word	0x20000b24
 8004f54:	20000b10 	.word	0x20000b10
 8004f58:	20000638 	.word	0x20000638
 8004f5c:	e000ed04 	.word	0xe000ed04

08004f60 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b084      	sub	sp, #16
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004f68:	f001 fb24 	bl	80065b4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d102      	bne.n	8004f78 <vTaskDelete+0x18>
 8004f72:	4b2c      	ldr	r3, [pc, #176]	; (8005024 <vTaskDelete+0xc4>)
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	e000      	b.n	8004f7a <vTaskDelete+0x1a>
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	3304      	adds	r3, #4
 8004f80:	4618      	mov	r0, r3
 8004f82:	f7fe fdfd 	bl	8003b80 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d004      	beq.n	8004f98 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004f8e:	68fb      	ldr	r3, [r7, #12]
 8004f90:	3318      	adds	r3, #24
 8004f92:	4618      	mov	r0, r3
 8004f94:	f7fe fdf4 	bl	8003b80 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8004f98:	4b23      	ldr	r3, [pc, #140]	; (8005028 <vTaskDelete+0xc8>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	3301      	adds	r3, #1
 8004f9e:	4a22      	ldr	r2, [pc, #136]	; (8005028 <vTaskDelete+0xc8>)
 8004fa0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8004fa2:	4b20      	ldr	r3, [pc, #128]	; (8005024 <vTaskDelete+0xc4>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	429a      	cmp	r2, r3
 8004faa:	d10b      	bne.n	8004fc4 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	3304      	adds	r3, #4
 8004fb0:	4619      	mov	r1, r3
 8004fb2:	481e      	ldr	r0, [pc, #120]	; (800502c <vTaskDelete+0xcc>)
 8004fb4:	f7fe fd87 	bl	8003ac6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8004fb8:	4b1d      	ldr	r3, [pc, #116]	; (8005030 <vTaskDelete+0xd0>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3301      	adds	r3, #1
 8004fbe:	4a1c      	ldr	r2, [pc, #112]	; (8005030 <vTaskDelete+0xd0>)
 8004fc0:	6013      	str	r3, [r2, #0]
 8004fc2:	e009      	b.n	8004fd8 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8004fc4:	4b1b      	ldr	r3, [pc, #108]	; (8005034 <vTaskDelete+0xd4>)
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	4a1a      	ldr	r2, [pc, #104]	; (8005034 <vTaskDelete+0xd4>)
 8004fcc:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8004fce:	68f8      	ldr	r0, [r7, #12]
 8004fd0:	f000 fc40 	bl	8005854 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8004fd4:	f000 fc72 	bl	80058bc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8004fd8:	f001 fb1c 	bl	8006614 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8004fdc:	4b16      	ldr	r3, [pc, #88]	; (8005038 <vTaskDelete+0xd8>)
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d01b      	beq.n	800501c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8004fe4:	4b0f      	ldr	r3, [pc, #60]	; (8005024 <vTaskDelete+0xc4>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d116      	bne.n	800501c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8004fee:	4b13      	ldr	r3, [pc, #76]	; (800503c <vTaskDelete+0xdc>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d00a      	beq.n	800500c <vTaskDelete+0xac>
	__asm volatile
 8004ff6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ffa:	f383 8811 	msr	BASEPRI, r3
 8004ffe:	f3bf 8f6f 	isb	sy
 8005002:	f3bf 8f4f 	dsb	sy
 8005006:	60bb      	str	r3, [r7, #8]
}
 8005008:	bf00      	nop
 800500a:	e7fe      	b.n	800500a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800500c:	4b0c      	ldr	r3, [pc, #48]	; (8005040 <vTaskDelete+0xe0>)
 800500e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005012:	601a      	str	r2, [r3, #0]
 8005014:	f3bf 8f4f 	dsb	sy
 8005018:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800501c:	bf00      	nop
 800501e:	3710      	adds	r7, #16
 8005020:	46bd      	mov	sp, r7
 8005022:	bd80      	pop	{r7, pc}
 8005024:	20000634 	.word	0x20000634
 8005028:	20000b24 	.word	0x20000b24
 800502c:	20000adc 	.word	0x20000adc
 8005030:	20000af0 	.word	0x20000af0
 8005034:	20000b08 	.word	0x20000b08
 8005038:	20000b14 	.word	0x20000b14
 800503c:	20000b30 	.word	0x20000b30
 8005040:	e000ed04 	.word	0xe000ed04

08005044 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005044:	b580      	push	{r7, lr}
 8005046:	b08a      	sub	sp, #40	; 0x28
 8005048:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800504a:	2300      	movs	r3, #0
 800504c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800504e:	2300      	movs	r3, #0
 8005050:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005052:	463a      	mov	r2, r7
 8005054:	1d39      	adds	r1, r7, #4
 8005056:	f107 0308 	add.w	r3, r7, #8
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fcd2 	bl	8003a04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005060:	6839      	ldr	r1, [r7, #0]
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	68ba      	ldr	r2, [r7, #8]
 8005066:	9202      	str	r2, [sp, #8]
 8005068:	9301      	str	r3, [sp, #4]
 800506a:	2300      	movs	r3, #0
 800506c:	9300      	str	r3, [sp, #0]
 800506e:	2300      	movs	r3, #0
 8005070:	460a      	mov	r2, r1
 8005072:	4924      	ldr	r1, [pc, #144]	; (8005104 <vTaskStartScheduler+0xc0>)
 8005074:	4824      	ldr	r0, [pc, #144]	; (8005108 <vTaskStartScheduler+0xc4>)
 8005076:	f7ff fdbb 	bl	8004bf0 <xTaskCreateStatic>
 800507a:	4603      	mov	r3, r0
 800507c:	4a23      	ldr	r2, [pc, #140]	; (800510c <vTaskStartScheduler+0xc8>)
 800507e:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005080:	4b22      	ldr	r3, [pc, #136]	; (800510c <vTaskStartScheduler+0xc8>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d002      	beq.n	800508e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005088:	2301      	movs	r3, #1
 800508a:	617b      	str	r3, [r7, #20]
 800508c:	e001      	b.n	8005092 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800508e:	2300      	movs	r3, #0
 8005090:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005092:	697b      	ldr	r3, [r7, #20]
 8005094:	2b01      	cmp	r3, #1
 8005096:	d102      	bne.n	800509e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005098:	f000 fe0e 	bl	8005cb8 <xTimerCreateTimerTask>
 800509c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800509e:	697b      	ldr	r3, [r7, #20]
 80050a0:	2b01      	cmp	r3, #1
 80050a2:	d11b      	bne.n	80050dc <vTaskStartScheduler+0x98>
	__asm volatile
 80050a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050a8:	f383 8811 	msr	BASEPRI, r3
 80050ac:	f3bf 8f6f 	isb	sy
 80050b0:	f3bf 8f4f 	dsb	sy
 80050b4:	613b      	str	r3, [r7, #16]
}
 80050b6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80050b8:	4b15      	ldr	r3, [pc, #84]	; (8005110 <vTaskStartScheduler+0xcc>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	3354      	adds	r3, #84	; 0x54
 80050be:	4a15      	ldr	r2, [pc, #84]	; (8005114 <vTaskStartScheduler+0xd0>)
 80050c0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80050c2:	4b15      	ldr	r3, [pc, #84]	; (8005118 <vTaskStartScheduler+0xd4>)
 80050c4:	f04f 32ff 	mov.w	r2, #4294967295
 80050c8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80050ca:	4b14      	ldr	r3, [pc, #80]	; (800511c <vTaskStartScheduler+0xd8>)
 80050cc:	2201      	movs	r2, #1
 80050ce:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80050d0:	4b13      	ldr	r3, [pc, #76]	; (8005120 <vTaskStartScheduler+0xdc>)
 80050d2:	2200      	movs	r2, #0
 80050d4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80050d6:	f001 f9cb 	bl	8006470 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80050da:	e00e      	b.n	80050fa <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80050dc:	697b      	ldr	r3, [r7, #20]
 80050de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050e2:	d10a      	bne.n	80050fa <vTaskStartScheduler+0xb6>
	__asm volatile
 80050e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050e8:	f383 8811 	msr	BASEPRI, r3
 80050ec:	f3bf 8f6f 	isb	sy
 80050f0:	f3bf 8f4f 	dsb	sy
 80050f4:	60fb      	str	r3, [r7, #12]
}
 80050f6:	bf00      	nop
 80050f8:	e7fe      	b.n	80050f8 <vTaskStartScheduler+0xb4>
}
 80050fa:	bf00      	nop
 80050fc:	3718      	adds	r7, #24
 80050fe:	46bd      	mov	sp, r7
 8005100:	bd80      	pop	{r7, pc}
 8005102:	bf00      	nop
 8005104:	08006e24 	.word	0x08006e24
 8005108:	08005749 	.word	0x08005749
 800510c:	20000b2c 	.word	0x20000b2c
 8005110:	20000634 	.word	0x20000634
 8005114:	20000010 	.word	0x20000010
 8005118:	20000b28 	.word	0x20000b28
 800511c:	20000b14 	.word	0x20000b14
 8005120:	20000b0c 	.word	0x20000b0c

08005124 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005128:	4b04      	ldr	r3, [pc, #16]	; (800513c <vTaskSuspendAll+0x18>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	3301      	adds	r3, #1
 800512e:	4a03      	ldr	r2, [pc, #12]	; (800513c <vTaskSuspendAll+0x18>)
 8005130:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005132:	bf00      	nop
 8005134:	46bd      	mov	sp, r7
 8005136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513a:	4770      	bx	lr
 800513c:	20000b30 	.word	0x20000b30

08005140 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b084      	sub	sp, #16
 8005144:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005146:	2300      	movs	r3, #0
 8005148:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800514a:	2300      	movs	r3, #0
 800514c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800514e:	4b42      	ldr	r3, [pc, #264]	; (8005258 <xTaskResumeAll+0x118>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d10a      	bne.n	800516c <xTaskResumeAll+0x2c>
	__asm volatile
 8005156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515a:	f383 8811 	msr	BASEPRI, r3
 800515e:	f3bf 8f6f 	isb	sy
 8005162:	f3bf 8f4f 	dsb	sy
 8005166:	603b      	str	r3, [r7, #0]
}
 8005168:	bf00      	nop
 800516a:	e7fe      	b.n	800516a <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800516c:	f001 fa22 	bl	80065b4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005170:	4b39      	ldr	r3, [pc, #228]	; (8005258 <xTaskResumeAll+0x118>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	3b01      	subs	r3, #1
 8005176:	4a38      	ldr	r2, [pc, #224]	; (8005258 <xTaskResumeAll+0x118>)
 8005178:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800517a:	4b37      	ldr	r3, [pc, #220]	; (8005258 <xTaskResumeAll+0x118>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	2b00      	cmp	r3, #0
 8005180:	d162      	bne.n	8005248 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005182:	4b36      	ldr	r3, [pc, #216]	; (800525c <xTaskResumeAll+0x11c>)
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	2b00      	cmp	r3, #0
 8005188:	d05e      	beq.n	8005248 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800518a:	e02f      	b.n	80051ec <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800518c:	4b34      	ldr	r3, [pc, #208]	; (8005260 <xTaskResumeAll+0x120>)
 800518e:	68db      	ldr	r3, [r3, #12]
 8005190:	68db      	ldr	r3, [r3, #12]
 8005192:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	3318      	adds	r3, #24
 8005198:	4618      	mov	r0, r3
 800519a:	f7fe fcf1 	bl	8003b80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	3304      	adds	r3, #4
 80051a2:	4618      	mov	r0, r3
 80051a4:	f7fe fcec 	bl	8003b80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80051a8:	68fb      	ldr	r3, [r7, #12]
 80051aa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051ac:	4b2d      	ldr	r3, [pc, #180]	; (8005264 <xTaskResumeAll+0x124>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d903      	bls.n	80051bc <xTaskResumeAll+0x7c>
 80051b4:	68fb      	ldr	r3, [r7, #12]
 80051b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051b8:	4a2a      	ldr	r2, [pc, #168]	; (8005264 <xTaskResumeAll+0x124>)
 80051ba:	6013      	str	r3, [r2, #0]
 80051bc:	68fb      	ldr	r3, [r7, #12]
 80051be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051c0:	4613      	mov	r3, r2
 80051c2:	009b      	lsls	r3, r3, #2
 80051c4:	4413      	add	r3, r2
 80051c6:	009b      	lsls	r3, r3, #2
 80051c8:	4a27      	ldr	r2, [pc, #156]	; (8005268 <xTaskResumeAll+0x128>)
 80051ca:	441a      	add	r2, r3
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3304      	adds	r3, #4
 80051d0:	4619      	mov	r1, r3
 80051d2:	4610      	mov	r0, r2
 80051d4:	f7fe fc77 	bl	8003ac6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80051d8:	68fb      	ldr	r3, [r7, #12]
 80051da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80051dc:	4b23      	ldr	r3, [pc, #140]	; (800526c <xTaskResumeAll+0x12c>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051e2:	429a      	cmp	r2, r3
 80051e4:	d302      	bcc.n	80051ec <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80051e6:	4b22      	ldr	r3, [pc, #136]	; (8005270 <xTaskResumeAll+0x130>)
 80051e8:	2201      	movs	r2, #1
 80051ea:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80051ec:	4b1c      	ldr	r3, [pc, #112]	; (8005260 <xTaskResumeAll+0x120>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	d1cb      	bne.n	800518c <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d001      	beq.n	80051fe <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80051fa:	f000 fb5f 	bl	80058bc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80051fe:	4b1d      	ldr	r3, [pc, #116]	; (8005274 <xTaskResumeAll+0x134>)
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d010      	beq.n	800522c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800520a:	f000 f847 	bl	800529c <xTaskIncrementTick>
 800520e:	4603      	mov	r3, r0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d002      	beq.n	800521a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005214:	4b16      	ldr	r3, [pc, #88]	; (8005270 <xTaskResumeAll+0x130>)
 8005216:	2201      	movs	r2, #1
 8005218:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	3b01      	subs	r3, #1
 800521e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d1f1      	bne.n	800520a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005226:	4b13      	ldr	r3, [pc, #76]	; (8005274 <xTaskResumeAll+0x134>)
 8005228:	2200      	movs	r2, #0
 800522a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800522c:	4b10      	ldr	r3, [pc, #64]	; (8005270 <xTaskResumeAll+0x130>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	2b00      	cmp	r3, #0
 8005232:	d009      	beq.n	8005248 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005234:	2301      	movs	r3, #1
 8005236:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005238:	4b0f      	ldr	r3, [pc, #60]	; (8005278 <xTaskResumeAll+0x138>)
 800523a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800523e:	601a      	str	r2, [r3, #0]
 8005240:	f3bf 8f4f 	dsb	sy
 8005244:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005248:	f001 f9e4 	bl	8006614 <vPortExitCritical>

	return xAlreadyYielded;
 800524c:	68bb      	ldr	r3, [r7, #8]
}
 800524e:	4618      	mov	r0, r3
 8005250:	3710      	adds	r7, #16
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	20000b30 	.word	0x20000b30
 800525c:	20000b08 	.word	0x20000b08
 8005260:	20000ac8 	.word	0x20000ac8
 8005264:	20000b10 	.word	0x20000b10
 8005268:	20000638 	.word	0x20000638
 800526c:	20000634 	.word	0x20000634
 8005270:	20000b1c 	.word	0x20000b1c
 8005274:	20000b18 	.word	0x20000b18
 8005278:	e000ed04 	.word	0xe000ed04

0800527c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800527c:	b480      	push	{r7}
 800527e:	b083      	sub	sp, #12
 8005280:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005282:	4b05      	ldr	r3, [pc, #20]	; (8005298 <xTaskGetTickCount+0x1c>)
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005288:	687b      	ldr	r3, [r7, #4]
}
 800528a:	4618      	mov	r0, r3
 800528c:	370c      	adds	r7, #12
 800528e:	46bd      	mov	sp, r7
 8005290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005294:	4770      	bx	lr
 8005296:	bf00      	nop
 8005298:	20000b0c 	.word	0x20000b0c

0800529c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b086      	sub	sp, #24
 80052a0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80052a2:	2300      	movs	r3, #0
 80052a4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80052a6:	4b4f      	ldr	r3, [pc, #316]	; (80053e4 <xTaskIncrementTick+0x148>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	f040 808f 	bne.w	80053ce <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80052b0:	4b4d      	ldr	r3, [pc, #308]	; (80053e8 <xTaskIncrementTick+0x14c>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	3301      	adds	r3, #1
 80052b6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80052b8:	4a4b      	ldr	r2, [pc, #300]	; (80053e8 <xTaskIncrementTick+0x14c>)
 80052ba:	693b      	ldr	r3, [r7, #16]
 80052bc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80052be:	693b      	ldr	r3, [r7, #16]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d120      	bne.n	8005306 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80052c4:	4b49      	ldr	r3, [pc, #292]	; (80053ec <xTaskIncrementTick+0x150>)
 80052c6:	681b      	ldr	r3, [r3, #0]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d00a      	beq.n	80052e4 <xTaskIncrementTick+0x48>
	__asm volatile
 80052ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052d2:	f383 8811 	msr	BASEPRI, r3
 80052d6:	f3bf 8f6f 	isb	sy
 80052da:	f3bf 8f4f 	dsb	sy
 80052de:	603b      	str	r3, [r7, #0]
}
 80052e0:	bf00      	nop
 80052e2:	e7fe      	b.n	80052e2 <xTaskIncrementTick+0x46>
 80052e4:	4b41      	ldr	r3, [pc, #260]	; (80053ec <xTaskIncrementTick+0x150>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	60fb      	str	r3, [r7, #12]
 80052ea:	4b41      	ldr	r3, [pc, #260]	; (80053f0 <xTaskIncrementTick+0x154>)
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	4a3f      	ldr	r2, [pc, #252]	; (80053ec <xTaskIncrementTick+0x150>)
 80052f0:	6013      	str	r3, [r2, #0]
 80052f2:	4a3f      	ldr	r2, [pc, #252]	; (80053f0 <xTaskIncrementTick+0x154>)
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	6013      	str	r3, [r2, #0]
 80052f8:	4b3e      	ldr	r3, [pc, #248]	; (80053f4 <xTaskIncrementTick+0x158>)
 80052fa:	681b      	ldr	r3, [r3, #0]
 80052fc:	3301      	adds	r3, #1
 80052fe:	4a3d      	ldr	r2, [pc, #244]	; (80053f4 <xTaskIncrementTick+0x158>)
 8005300:	6013      	str	r3, [r2, #0]
 8005302:	f000 fadb 	bl	80058bc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005306:	4b3c      	ldr	r3, [pc, #240]	; (80053f8 <xTaskIncrementTick+0x15c>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	693a      	ldr	r2, [r7, #16]
 800530c:	429a      	cmp	r2, r3
 800530e:	d349      	bcc.n	80053a4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005310:	4b36      	ldr	r3, [pc, #216]	; (80053ec <xTaskIncrementTick+0x150>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	2b00      	cmp	r3, #0
 8005318:	d104      	bne.n	8005324 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800531a:	4b37      	ldr	r3, [pc, #220]	; (80053f8 <xTaskIncrementTick+0x15c>)
 800531c:	f04f 32ff 	mov.w	r2, #4294967295
 8005320:	601a      	str	r2, [r3, #0]
					break;
 8005322:	e03f      	b.n	80053a4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005324:	4b31      	ldr	r3, [pc, #196]	; (80053ec <xTaskIncrementTick+0x150>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	68db      	ldr	r3, [r3, #12]
 800532a:	68db      	ldr	r3, [r3, #12]
 800532c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800532e:	68bb      	ldr	r3, [r7, #8]
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005334:	693a      	ldr	r2, [r7, #16]
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	429a      	cmp	r2, r3
 800533a:	d203      	bcs.n	8005344 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800533c:	4a2e      	ldr	r2, [pc, #184]	; (80053f8 <xTaskIncrementTick+0x15c>)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005342:	e02f      	b.n	80053a4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	3304      	adds	r3, #4
 8005348:	4618      	mov	r0, r3
 800534a:	f7fe fc19 	bl	8003b80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800534e:	68bb      	ldr	r3, [r7, #8]
 8005350:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005352:	2b00      	cmp	r3, #0
 8005354:	d004      	beq.n	8005360 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005356:	68bb      	ldr	r3, [r7, #8]
 8005358:	3318      	adds	r3, #24
 800535a:	4618      	mov	r0, r3
 800535c:	f7fe fc10 	bl	8003b80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005364:	4b25      	ldr	r3, [pc, #148]	; (80053fc <xTaskIncrementTick+0x160>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	429a      	cmp	r2, r3
 800536a:	d903      	bls.n	8005374 <xTaskIncrementTick+0xd8>
 800536c:	68bb      	ldr	r3, [r7, #8]
 800536e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005370:	4a22      	ldr	r2, [pc, #136]	; (80053fc <xTaskIncrementTick+0x160>)
 8005372:	6013      	str	r3, [r2, #0]
 8005374:	68bb      	ldr	r3, [r7, #8]
 8005376:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005378:	4613      	mov	r3, r2
 800537a:	009b      	lsls	r3, r3, #2
 800537c:	4413      	add	r3, r2
 800537e:	009b      	lsls	r3, r3, #2
 8005380:	4a1f      	ldr	r2, [pc, #124]	; (8005400 <xTaskIncrementTick+0x164>)
 8005382:	441a      	add	r2, r3
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	3304      	adds	r3, #4
 8005388:	4619      	mov	r1, r3
 800538a:	4610      	mov	r0, r2
 800538c:	f7fe fb9b 	bl	8003ac6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005390:	68bb      	ldr	r3, [r7, #8]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	4b1b      	ldr	r3, [pc, #108]	; (8005404 <xTaskIncrementTick+0x168>)
 8005396:	681b      	ldr	r3, [r3, #0]
 8005398:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800539a:	429a      	cmp	r2, r3
 800539c:	d3b8      	bcc.n	8005310 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800539e:	2301      	movs	r3, #1
 80053a0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80053a2:	e7b5      	b.n	8005310 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80053a4:	4b17      	ldr	r3, [pc, #92]	; (8005404 <xTaskIncrementTick+0x168>)
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053aa:	4915      	ldr	r1, [pc, #84]	; (8005400 <xTaskIncrementTick+0x164>)
 80053ac:	4613      	mov	r3, r2
 80053ae:	009b      	lsls	r3, r3, #2
 80053b0:	4413      	add	r3, r2
 80053b2:	009b      	lsls	r3, r3, #2
 80053b4:	440b      	add	r3, r1
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	2b01      	cmp	r3, #1
 80053ba:	d901      	bls.n	80053c0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80053bc:	2301      	movs	r3, #1
 80053be:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80053c0:	4b11      	ldr	r3, [pc, #68]	; (8005408 <xTaskIncrementTick+0x16c>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d007      	beq.n	80053d8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	617b      	str	r3, [r7, #20]
 80053cc:	e004      	b.n	80053d8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80053ce:	4b0f      	ldr	r3, [pc, #60]	; (800540c <xTaskIncrementTick+0x170>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	3301      	adds	r3, #1
 80053d4:	4a0d      	ldr	r2, [pc, #52]	; (800540c <xTaskIncrementTick+0x170>)
 80053d6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80053d8:	697b      	ldr	r3, [r7, #20]
}
 80053da:	4618      	mov	r0, r3
 80053dc:	3718      	adds	r7, #24
 80053de:	46bd      	mov	sp, r7
 80053e0:	bd80      	pop	{r7, pc}
 80053e2:	bf00      	nop
 80053e4:	20000b30 	.word	0x20000b30
 80053e8:	20000b0c 	.word	0x20000b0c
 80053ec:	20000ac0 	.word	0x20000ac0
 80053f0:	20000ac4 	.word	0x20000ac4
 80053f4:	20000b20 	.word	0x20000b20
 80053f8:	20000b28 	.word	0x20000b28
 80053fc:	20000b10 	.word	0x20000b10
 8005400:	20000638 	.word	0x20000638
 8005404:	20000634 	.word	0x20000634
 8005408:	20000b1c 	.word	0x20000b1c
 800540c:	20000b18 	.word	0x20000b18

08005410 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005410:	b480      	push	{r7}
 8005412:	b085      	sub	sp, #20
 8005414:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005416:	4b2a      	ldr	r3, [pc, #168]	; (80054c0 <vTaskSwitchContext+0xb0>)
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	2b00      	cmp	r3, #0
 800541c:	d003      	beq.n	8005426 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800541e:	4b29      	ldr	r3, [pc, #164]	; (80054c4 <vTaskSwitchContext+0xb4>)
 8005420:	2201      	movs	r2, #1
 8005422:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005424:	e046      	b.n	80054b4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005426:	4b27      	ldr	r3, [pc, #156]	; (80054c4 <vTaskSwitchContext+0xb4>)
 8005428:	2200      	movs	r2, #0
 800542a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800542c:	4b26      	ldr	r3, [pc, #152]	; (80054c8 <vTaskSwitchContext+0xb8>)
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	60fb      	str	r3, [r7, #12]
 8005432:	e010      	b.n	8005456 <vTaskSwitchContext+0x46>
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	2b00      	cmp	r3, #0
 8005438:	d10a      	bne.n	8005450 <vTaskSwitchContext+0x40>
	__asm volatile
 800543a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543e:	f383 8811 	msr	BASEPRI, r3
 8005442:	f3bf 8f6f 	isb	sy
 8005446:	f3bf 8f4f 	dsb	sy
 800544a:	607b      	str	r3, [r7, #4]
}
 800544c:	bf00      	nop
 800544e:	e7fe      	b.n	800544e <vTaskSwitchContext+0x3e>
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	3b01      	subs	r3, #1
 8005454:	60fb      	str	r3, [r7, #12]
 8005456:	491d      	ldr	r1, [pc, #116]	; (80054cc <vTaskSwitchContext+0xbc>)
 8005458:	68fa      	ldr	r2, [r7, #12]
 800545a:	4613      	mov	r3, r2
 800545c:	009b      	lsls	r3, r3, #2
 800545e:	4413      	add	r3, r2
 8005460:	009b      	lsls	r3, r3, #2
 8005462:	440b      	add	r3, r1
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	2b00      	cmp	r3, #0
 8005468:	d0e4      	beq.n	8005434 <vTaskSwitchContext+0x24>
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4a15      	ldr	r2, [pc, #84]	; (80054cc <vTaskSwitchContext+0xbc>)
 8005476:	4413      	add	r3, r2
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	68bb      	ldr	r3, [r7, #8]
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	685a      	ldr	r2, [r3, #4]
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	605a      	str	r2, [r3, #4]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	685a      	ldr	r2, [r3, #4]
 8005488:	68bb      	ldr	r3, [r7, #8]
 800548a:	3308      	adds	r3, #8
 800548c:	429a      	cmp	r2, r3
 800548e:	d104      	bne.n	800549a <vTaskSwitchContext+0x8a>
 8005490:	68bb      	ldr	r3, [r7, #8]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	685a      	ldr	r2, [r3, #4]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	605a      	str	r2, [r3, #4]
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	4a0b      	ldr	r2, [pc, #44]	; (80054d0 <vTaskSwitchContext+0xc0>)
 80054a2:	6013      	str	r3, [r2, #0]
 80054a4:	4a08      	ldr	r2, [pc, #32]	; (80054c8 <vTaskSwitchContext+0xb8>)
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80054aa:	4b09      	ldr	r3, [pc, #36]	; (80054d0 <vTaskSwitchContext+0xc0>)
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	3354      	adds	r3, #84	; 0x54
 80054b0:	4a08      	ldr	r2, [pc, #32]	; (80054d4 <vTaskSwitchContext+0xc4>)
 80054b2:	6013      	str	r3, [r2, #0]
}
 80054b4:	bf00      	nop
 80054b6:	3714      	adds	r7, #20
 80054b8:	46bd      	mov	sp, r7
 80054ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054be:	4770      	bx	lr
 80054c0:	20000b30 	.word	0x20000b30
 80054c4:	20000b1c 	.word	0x20000b1c
 80054c8:	20000b10 	.word	0x20000b10
 80054cc:	20000638 	.word	0x20000638
 80054d0:	20000634 	.word	0x20000634
 80054d4:	20000010 	.word	0x20000010

080054d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b084      	sub	sp, #16
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
 80054e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d10a      	bne.n	80054fe <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80054e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ec:	f383 8811 	msr	BASEPRI, r3
 80054f0:	f3bf 8f6f 	isb	sy
 80054f4:	f3bf 8f4f 	dsb	sy
 80054f8:	60fb      	str	r3, [r7, #12]
}
 80054fa:	bf00      	nop
 80054fc:	e7fe      	b.n	80054fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80054fe:	4b07      	ldr	r3, [pc, #28]	; (800551c <vTaskPlaceOnEventList+0x44>)
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	3318      	adds	r3, #24
 8005504:	4619      	mov	r1, r3
 8005506:	6878      	ldr	r0, [r7, #4]
 8005508:	f7fe fb01 	bl	8003b0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800550c:	2101      	movs	r1, #1
 800550e:	6838      	ldr	r0, [r7, #0]
 8005510:	f000 fb7e 	bl	8005c10 <prvAddCurrentTaskToDelayedList>
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000634 	.word	0x20000634

08005520 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005520:	b580      	push	{r7, lr}
 8005522:	b086      	sub	sp, #24
 8005524:	af00      	add	r7, sp, #0
 8005526:	60f8      	str	r0, [r7, #12]
 8005528:	60b9      	str	r1, [r7, #8]
 800552a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800552c:	68fb      	ldr	r3, [r7, #12]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d10a      	bne.n	8005548 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005536:	f383 8811 	msr	BASEPRI, r3
 800553a:	f3bf 8f6f 	isb	sy
 800553e:	f3bf 8f4f 	dsb	sy
 8005542:	617b      	str	r3, [r7, #20]
}
 8005544:	bf00      	nop
 8005546:	e7fe      	b.n	8005546 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005548:	4b0a      	ldr	r3, [pc, #40]	; (8005574 <vTaskPlaceOnEventListRestricted+0x54>)
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	3318      	adds	r3, #24
 800554e:	4619      	mov	r1, r3
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f7fe fab8 	bl	8003ac6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	2b00      	cmp	r3, #0
 800555a:	d002      	beq.n	8005562 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800555c:	f04f 33ff 	mov.w	r3, #4294967295
 8005560:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	68b8      	ldr	r0, [r7, #8]
 8005566:	f000 fb53 	bl	8005c10 <prvAddCurrentTaskToDelayedList>
	}
 800556a:	bf00      	nop
 800556c:	3718      	adds	r7, #24
 800556e:	46bd      	mov	sp, r7
 8005570:	bd80      	pop	{r7, pc}
 8005572:	bf00      	nop
 8005574:	20000634 	.word	0x20000634

08005578 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b086      	sub	sp, #24
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	68db      	ldr	r3, [r3, #12]
 8005584:	68db      	ldr	r3, [r3, #12]
 8005586:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005588:	693b      	ldr	r3, [r7, #16]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10a      	bne.n	80055a4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	60fb      	str	r3, [r7, #12]
}
 80055a0:	bf00      	nop
 80055a2:	e7fe      	b.n	80055a2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	3318      	adds	r3, #24
 80055a8:	4618      	mov	r0, r3
 80055aa:	f7fe fae9 	bl	8003b80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055ae:	4b1e      	ldr	r3, [pc, #120]	; (8005628 <xTaskRemoveFromEventList+0xb0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d11d      	bne.n	80055f2 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80055b6:	693b      	ldr	r3, [r7, #16]
 80055b8:	3304      	adds	r3, #4
 80055ba:	4618      	mov	r0, r3
 80055bc:	f7fe fae0 	bl	8003b80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80055c0:	693b      	ldr	r3, [r7, #16]
 80055c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055c4:	4b19      	ldr	r3, [pc, #100]	; (800562c <xTaskRemoveFromEventList+0xb4>)
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d903      	bls.n	80055d4 <xTaskRemoveFromEventList+0x5c>
 80055cc:	693b      	ldr	r3, [r7, #16]
 80055ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055d0:	4a16      	ldr	r2, [pc, #88]	; (800562c <xTaskRemoveFromEventList+0xb4>)
 80055d2:	6013      	str	r3, [r2, #0]
 80055d4:	693b      	ldr	r3, [r7, #16]
 80055d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d8:	4613      	mov	r3, r2
 80055da:	009b      	lsls	r3, r3, #2
 80055dc:	4413      	add	r3, r2
 80055de:	009b      	lsls	r3, r3, #2
 80055e0:	4a13      	ldr	r2, [pc, #76]	; (8005630 <xTaskRemoveFromEventList+0xb8>)
 80055e2:	441a      	add	r2, r3
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	3304      	adds	r3, #4
 80055e8:	4619      	mov	r1, r3
 80055ea:	4610      	mov	r0, r2
 80055ec:	f7fe fa6b 	bl	8003ac6 <vListInsertEnd>
 80055f0:	e005      	b.n	80055fe <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80055f2:	693b      	ldr	r3, [r7, #16]
 80055f4:	3318      	adds	r3, #24
 80055f6:	4619      	mov	r1, r3
 80055f8:	480e      	ldr	r0, [pc, #56]	; (8005634 <xTaskRemoveFromEventList+0xbc>)
 80055fa:	f7fe fa64 	bl	8003ac6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005602:	4b0d      	ldr	r3, [pc, #52]	; (8005638 <xTaskRemoveFromEventList+0xc0>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005608:	429a      	cmp	r2, r3
 800560a:	d905      	bls.n	8005618 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800560c:	2301      	movs	r3, #1
 800560e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005610:	4b0a      	ldr	r3, [pc, #40]	; (800563c <xTaskRemoveFromEventList+0xc4>)
 8005612:	2201      	movs	r2, #1
 8005614:	601a      	str	r2, [r3, #0]
 8005616:	e001      	b.n	800561c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005618:	2300      	movs	r3, #0
 800561a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800561c:	697b      	ldr	r3, [r7, #20]
}
 800561e:	4618      	mov	r0, r3
 8005620:	3718      	adds	r7, #24
 8005622:	46bd      	mov	sp, r7
 8005624:	bd80      	pop	{r7, pc}
 8005626:	bf00      	nop
 8005628:	20000b30 	.word	0x20000b30
 800562c:	20000b10 	.word	0x20000b10
 8005630:	20000638 	.word	0x20000638
 8005634:	20000ac8 	.word	0x20000ac8
 8005638:	20000634 	.word	0x20000634
 800563c:	20000b1c 	.word	0x20000b1c

08005640 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005640:	b480      	push	{r7}
 8005642:	b083      	sub	sp, #12
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005648:	4b06      	ldr	r3, [pc, #24]	; (8005664 <vTaskInternalSetTimeOutState+0x24>)
 800564a:	681a      	ldr	r2, [r3, #0]
 800564c:	687b      	ldr	r3, [r7, #4]
 800564e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005650:	4b05      	ldr	r3, [pc, #20]	; (8005668 <vTaskInternalSetTimeOutState+0x28>)
 8005652:	681a      	ldr	r2, [r3, #0]
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	605a      	str	r2, [r3, #4]
}
 8005658:	bf00      	nop
 800565a:	370c      	adds	r7, #12
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr
 8005664:	20000b20 	.word	0x20000b20
 8005668:	20000b0c 	.word	0x20000b0c

0800566c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800566c:	b580      	push	{r7, lr}
 800566e:	b088      	sub	sp, #32
 8005670:	af00      	add	r7, sp, #0
 8005672:	6078      	str	r0, [r7, #4]
 8005674:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	2b00      	cmp	r3, #0
 800567a:	d10a      	bne.n	8005692 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800567c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005680:	f383 8811 	msr	BASEPRI, r3
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	f3bf 8f4f 	dsb	sy
 800568c:	613b      	str	r3, [r7, #16]
}
 800568e:	bf00      	nop
 8005690:	e7fe      	b.n	8005690 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d10a      	bne.n	80056ae <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005698:	f04f 0350 	mov.w	r3, #80	; 0x50
 800569c:	f383 8811 	msr	BASEPRI, r3
 80056a0:	f3bf 8f6f 	isb	sy
 80056a4:	f3bf 8f4f 	dsb	sy
 80056a8:	60fb      	str	r3, [r7, #12]
}
 80056aa:	bf00      	nop
 80056ac:	e7fe      	b.n	80056ac <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80056ae:	f000 ff81 	bl	80065b4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80056b2:	4b1d      	ldr	r3, [pc, #116]	; (8005728 <xTaskCheckForTimeOut+0xbc>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	69ba      	ldr	r2, [r7, #24]
 80056be:	1ad3      	subs	r3, r2, r3
 80056c0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80056ca:	d102      	bne.n	80056d2 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80056cc:	2300      	movs	r3, #0
 80056ce:	61fb      	str	r3, [r7, #28]
 80056d0:	e023      	b.n	800571a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681a      	ldr	r2, [r3, #0]
 80056d6:	4b15      	ldr	r3, [pc, #84]	; (800572c <xTaskCheckForTimeOut+0xc0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	429a      	cmp	r2, r3
 80056dc:	d007      	beq.n	80056ee <xTaskCheckForTimeOut+0x82>
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	685b      	ldr	r3, [r3, #4]
 80056e2:	69ba      	ldr	r2, [r7, #24]
 80056e4:	429a      	cmp	r2, r3
 80056e6:	d302      	bcc.n	80056ee <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80056e8:	2301      	movs	r3, #1
 80056ea:	61fb      	str	r3, [r7, #28]
 80056ec:	e015      	b.n	800571a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	697a      	ldr	r2, [r7, #20]
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d20b      	bcs.n	8005710 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681a      	ldr	r2, [r3, #0]
 80056fc:	697b      	ldr	r3, [r7, #20]
 80056fe:	1ad2      	subs	r2, r2, r3
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005704:	6878      	ldr	r0, [r7, #4]
 8005706:	f7ff ff9b 	bl	8005640 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800570a:	2300      	movs	r3, #0
 800570c:	61fb      	str	r3, [r7, #28]
 800570e:	e004      	b.n	800571a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005710:	683b      	ldr	r3, [r7, #0]
 8005712:	2200      	movs	r2, #0
 8005714:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005716:	2301      	movs	r3, #1
 8005718:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800571a:	f000 ff7b 	bl	8006614 <vPortExitCritical>

	return xReturn;
 800571e:	69fb      	ldr	r3, [r7, #28]
}
 8005720:	4618      	mov	r0, r3
 8005722:	3720      	adds	r7, #32
 8005724:	46bd      	mov	sp, r7
 8005726:	bd80      	pop	{r7, pc}
 8005728:	20000b0c 	.word	0x20000b0c
 800572c:	20000b20 	.word	0x20000b20

08005730 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005730:	b480      	push	{r7}
 8005732:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005734:	4b03      	ldr	r3, [pc, #12]	; (8005744 <vTaskMissedYield+0x14>)
 8005736:	2201      	movs	r2, #1
 8005738:	601a      	str	r2, [r3, #0]
}
 800573a:	bf00      	nop
 800573c:	46bd      	mov	sp, r7
 800573e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005742:	4770      	bx	lr
 8005744:	20000b1c 	.word	0x20000b1c

08005748 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b082      	sub	sp, #8
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005750:	f000 f852 	bl	80057f8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005754:	4b06      	ldr	r3, [pc, #24]	; (8005770 <prvIdleTask+0x28>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b01      	cmp	r3, #1
 800575a:	d9f9      	bls.n	8005750 <prvIdleTask+0x8>
			{
				taskYIELD();
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <prvIdleTask+0x2c>)
 800575e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005762:	601a      	str	r2, [r3, #0]
 8005764:	f3bf 8f4f 	dsb	sy
 8005768:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800576c:	e7f0      	b.n	8005750 <prvIdleTask+0x8>
 800576e:	bf00      	nop
 8005770:	20000638 	.word	0x20000638
 8005774:	e000ed04 	.word	0xe000ed04

08005778 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800577e:	2300      	movs	r3, #0
 8005780:	607b      	str	r3, [r7, #4]
 8005782:	e00c      	b.n	800579e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005784:	687a      	ldr	r2, [r7, #4]
 8005786:	4613      	mov	r3, r2
 8005788:	009b      	lsls	r3, r3, #2
 800578a:	4413      	add	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4a12      	ldr	r2, [pc, #72]	; (80057d8 <prvInitialiseTaskLists+0x60>)
 8005790:	4413      	add	r3, r2
 8005792:	4618      	mov	r0, r3
 8005794:	f7fe f96a 	bl	8003a6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	3301      	adds	r3, #1
 800579c:	607b      	str	r3, [r7, #4]
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	2b37      	cmp	r3, #55	; 0x37
 80057a2:	d9ef      	bls.n	8005784 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80057a4:	480d      	ldr	r0, [pc, #52]	; (80057dc <prvInitialiseTaskLists+0x64>)
 80057a6:	f7fe f961 	bl	8003a6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80057aa:	480d      	ldr	r0, [pc, #52]	; (80057e0 <prvInitialiseTaskLists+0x68>)
 80057ac:	f7fe f95e 	bl	8003a6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80057b0:	480c      	ldr	r0, [pc, #48]	; (80057e4 <prvInitialiseTaskLists+0x6c>)
 80057b2:	f7fe f95b 	bl	8003a6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80057b6:	480c      	ldr	r0, [pc, #48]	; (80057e8 <prvInitialiseTaskLists+0x70>)
 80057b8:	f7fe f958 	bl	8003a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80057bc:	480b      	ldr	r0, [pc, #44]	; (80057ec <prvInitialiseTaskLists+0x74>)
 80057be:	f7fe f955 	bl	8003a6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80057c2:	4b0b      	ldr	r3, [pc, #44]	; (80057f0 <prvInitialiseTaskLists+0x78>)
 80057c4:	4a05      	ldr	r2, [pc, #20]	; (80057dc <prvInitialiseTaskLists+0x64>)
 80057c6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80057c8:	4b0a      	ldr	r3, [pc, #40]	; (80057f4 <prvInitialiseTaskLists+0x7c>)
 80057ca:	4a05      	ldr	r2, [pc, #20]	; (80057e0 <prvInitialiseTaskLists+0x68>)
 80057cc:	601a      	str	r2, [r3, #0]
}
 80057ce:	bf00      	nop
 80057d0:	3708      	adds	r7, #8
 80057d2:	46bd      	mov	sp, r7
 80057d4:	bd80      	pop	{r7, pc}
 80057d6:	bf00      	nop
 80057d8:	20000638 	.word	0x20000638
 80057dc:	20000a98 	.word	0x20000a98
 80057e0:	20000aac 	.word	0x20000aac
 80057e4:	20000ac8 	.word	0x20000ac8
 80057e8:	20000adc 	.word	0x20000adc
 80057ec:	20000af4 	.word	0x20000af4
 80057f0:	20000ac0 	.word	0x20000ac0
 80057f4:	20000ac4 	.word	0x20000ac4

080057f8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b082      	sub	sp, #8
 80057fc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80057fe:	e019      	b.n	8005834 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005800:	f000 fed8 	bl	80065b4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005804:	4b10      	ldr	r3, [pc, #64]	; (8005848 <prvCheckTasksWaitingTermination+0x50>)
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	3304      	adds	r3, #4
 8005810:	4618      	mov	r0, r3
 8005812:	f7fe f9b5 	bl	8003b80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005816:	4b0d      	ldr	r3, [pc, #52]	; (800584c <prvCheckTasksWaitingTermination+0x54>)
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	3b01      	subs	r3, #1
 800581c:	4a0b      	ldr	r2, [pc, #44]	; (800584c <prvCheckTasksWaitingTermination+0x54>)
 800581e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005820:	4b0b      	ldr	r3, [pc, #44]	; (8005850 <prvCheckTasksWaitingTermination+0x58>)
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	3b01      	subs	r3, #1
 8005826:	4a0a      	ldr	r2, [pc, #40]	; (8005850 <prvCheckTasksWaitingTermination+0x58>)
 8005828:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800582a:	f000 fef3 	bl	8006614 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800582e:	6878      	ldr	r0, [r7, #4]
 8005830:	f000 f810 	bl	8005854 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005834:	4b06      	ldr	r3, [pc, #24]	; (8005850 <prvCheckTasksWaitingTermination+0x58>)
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d1e1      	bne.n	8005800 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800583c:	bf00      	nop
 800583e:	bf00      	nop
 8005840:	3708      	adds	r7, #8
 8005842:	46bd      	mov	sp, r7
 8005844:	bd80      	pop	{r7, pc}
 8005846:	bf00      	nop
 8005848:	20000adc 	.word	0x20000adc
 800584c:	20000b08 	.word	0x20000b08
 8005850:	20000af0 	.word	0x20000af0

08005854 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005854:	b580      	push	{r7, lr}
 8005856:	b084      	sub	sp, #16
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	3354      	adds	r3, #84	; 0x54
 8005860:	4618      	mov	r0, r3
 8005862:	f001 f9fd 	bl	8006c60 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800586c:	2b00      	cmp	r3, #0
 800586e:	d108      	bne.n	8005882 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005874:	4618      	mov	r0, r3
 8005876:	f001 f88b 	bl	8006990 <vPortFree>
				vPortFree( pxTCB );
 800587a:	6878      	ldr	r0, [r7, #4]
 800587c:	f001 f888 	bl	8006990 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005880:	e018      	b.n	80058b4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005888:	2b01      	cmp	r3, #1
 800588a:	d103      	bne.n	8005894 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800588c:	6878      	ldr	r0, [r7, #4]
 800588e:	f001 f87f 	bl	8006990 <vPortFree>
	}
 8005892:	e00f      	b.n	80058b4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800589a:	2b02      	cmp	r3, #2
 800589c:	d00a      	beq.n	80058b4 <prvDeleteTCB+0x60>
	__asm volatile
 800589e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058a2:	f383 8811 	msr	BASEPRI, r3
 80058a6:	f3bf 8f6f 	isb	sy
 80058aa:	f3bf 8f4f 	dsb	sy
 80058ae:	60fb      	str	r3, [r7, #12]
}
 80058b0:	bf00      	nop
 80058b2:	e7fe      	b.n	80058b2 <prvDeleteTCB+0x5e>
	}
 80058b4:	bf00      	nop
 80058b6:	3710      	adds	r7, #16
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80058bc:	b480      	push	{r7}
 80058be:	b083      	sub	sp, #12
 80058c0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80058c2:	4b0c      	ldr	r3, [pc, #48]	; (80058f4 <prvResetNextTaskUnblockTime+0x38>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d104      	bne.n	80058d6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80058cc:	4b0a      	ldr	r3, [pc, #40]	; (80058f8 <prvResetNextTaskUnblockTime+0x3c>)
 80058ce:	f04f 32ff 	mov.w	r2, #4294967295
 80058d2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80058d4:	e008      	b.n	80058e8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058d6:	4b07      	ldr	r3, [pc, #28]	; (80058f4 <prvResetNextTaskUnblockTime+0x38>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	68db      	ldr	r3, [r3, #12]
 80058dc:	68db      	ldr	r3, [r3, #12]
 80058de:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	685b      	ldr	r3, [r3, #4]
 80058e4:	4a04      	ldr	r2, [pc, #16]	; (80058f8 <prvResetNextTaskUnblockTime+0x3c>)
 80058e6:	6013      	str	r3, [r2, #0]
}
 80058e8:	bf00      	nop
 80058ea:	370c      	adds	r7, #12
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr
 80058f4:	20000ac0 	.word	0x20000ac0
 80058f8:	20000b28 	.word	0x20000b28

080058fc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80058fc:	b480      	push	{r7}
 80058fe:	b083      	sub	sp, #12
 8005900:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005902:	4b0b      	ldr	r3, [pc, #44]	; (8005930 <xTaskGetSchedulerState+0x34>)
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d102      	bne.n	8005910 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800590a:	2301      	movs	r3, #1
 800590c:	607b      	str	r3, [r7, #4]
 800590e:	e008      	b.n	8005922 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005910:	4b08      	ldr	r3, [pc, #32]	; (8005934 <xTaskGetSchedulerState+0x38>)
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d102      	bne.n	800591e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005918:	2302      	movs	r3, #2
 800591a:	607b      	str	r3, [r7, #4]
 800591c:	e001      	b.n	8005922 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800591e:	2300      	movs	r3, #0
 8005920:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005922:	687b      	ldr	r3, [r7, #4]
	}
 8005924:	4618      	mov	r0, r3
 8005926:	370c      	adds	r7, #12
 8005928:	46bd      	mov	sp, r7
 800592a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800592e:	4770      	bx	lr
 8005930:	20000b14 	.word	0x20000b14
 8005934:	20000b30 	.word	0x20000b30

08005938 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005938:	b580      	push	{r7, lr}
 800593a:	b084      	sub	sp, #16
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005944:	2300      	movs	r3, #0
 8005946:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d051      	beq.n	80059f2 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005952:	4b2a      	ldr	r3, [pc, #168]	; (80059fc <xTaskPriorityInherit+0xc4>)
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005958:	429a      	cmp	r2, r3
 800595a:	d241      	bcs.n	80059e0 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800595c:	68bb      	ldr	r3, [r7, #8]
 800595e:	699b      	ldr	r3, [r3, #24]
 8005960:	2b00      	cmp	r3, #0
 8005962:	db06      	blt.n	8005972 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005964:	4b25      	ldr	r3, [pc, #148]	; (80059fc <xTaskPriorityInherit+0xc4>)
 8005966:	681b      	ldr	r3, [r3, #0]
 8005968:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800596a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800596e:	68bb      	ldr	r3, [r7, #8]
 8005970:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005972:	68bb      	ldr	r3, [r7, #8]
 8005974:	6959      	ldr	r1, [r3, #20]
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800597a:	4613      	mov	r3, r2
 800597c:	009b      	lsls	r3, r3, #2
 800597e:	4413      	add	r3, r2
 8005980:	009b      	lsls	r3, r3, #2
 8005982:	4a1f      	ldr	r2, [pc, #124]	; (8005a00 <xTaskPriorityInherit+0xc8>)
 8005984:	4413      	add	r3, r2
 8005986:	4299      	cmp	r1, r3
 8005988:	d122      	bne.n	80059d0 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	3304      	adds	r3, #4
 800598e:	4618      	mov	r0, r3
 8005990:	f7fe f8f6 	bl	8003b80 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005994:	4b19      	ldr	r3, [pc, #100]	; (80059fc <xTaskPriorityInherit+0xc4>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059a2:	4b18      	ldr	r3, [pc, #96]	; (8005a04 <xTaskPriorityInherit+0xcc>)
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	429a      	cmp	r2, r3
 80059a8:	d903      	bls.n	80059b2 <xTaskPriorityInherit+0x7a>
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ae:	4a15      	ldr	r2, [pc, #84]	; (8005a04 <xTaskPriorityInherit+0xcc>)
 80059b0:	6013      	str	r3, [r2, #0]
 80059b2:	68bb      	ldr	r3, [r7, #8]
 80059b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059b6:	4613      	mov	r3, r2
 80059b8:	009b      	lsls	r3, r3, #2
 80059ba:	4413      	add	r3, r2
 80059bc:	009b      	lsls	r3, r3, #2
 80059be:	4a10      	ldr	r2, [pc, #64]	; (8005a00 <xTaskPriorityInherit+0xc8>)
 80059c0:	441a      	add	r2, r3
 80059c2:	68bb      	ldr	r3, [r7, #8]
 80059c4:	3304      	adds	r3, #4
 80059c6:	4619      	mov	r1, r3
 80059c8:	4610      	mov	r0, r2
 80059ca:	f7fe f87c 	bl	8003ac6 <vListInsertEnd>
 80059ce:	e004      	b.n	80059da <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80059d0:	4b0a      	ldr	r3, [pc, #40]	; (80059fc <xTaskPriorityInherit+0xc4>)
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80059d6:	68bb      	ldr	r3, [r7, #8]
 80059d8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80059da:	2301      	movs	r3, #1
 80059dc:	60fb      	str	r3, [r7, #12]
 80059de:	e008      	b.n	80059f2 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80059e0:	68bb      	ldr	r3, [r7, #8]
 80059e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <xTaskPriorityInherit+0xc4>)
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80059ea:	429a      	cmp	r2, r3
 80059ec:	d201      	bcs.n	80059f2 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80059ee:	2301      	movs	r3, #1
 80059f0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80059f2:	68fb      	ldr	r3, [r7, #12]
	}
 80059f4:	4618      	mov	r0, r3
 80059f6:	3710      	adds	r7, #16
 80059f8:	46bd      	mov	sp, r7
 80059fa:	bd80      	pop	{r7, pc}
 80059fc:	20000634 	.word	0x20000634
 8005a00:	20000638 	.word	0x20000638
 8005a04:	20000b10 	.word	0x20000b10

08005a08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005a14:	2300      	movs	r3, #0
 8005a16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	d056      	beq.n	8005acc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005a1e:	4b2e      	ldr	r3, [pc, #184]	; (8005ad8 <xTaskPriorityDisinherit+0xd0>)
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	693a      	ldr	r2, [r7, #16]
 8005a24:	429a      	cmp	r2, r3
 8005a26:	d00a      	beq.n	8005a3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005a28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a2c:	f383 8811 	msr	BASEPRI, r3
 8005a30:	f3bf 8f6f 	isb	sy
 8005a34:	f3bf 8f4f 	dsb	sy
 8005a38:	60fb      	str	r3, [r7, #12]
}
 8005a3a:	bf00      	nop
 8005a3c:	e7fe      	b.n	8005a3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005a3e:	693b      	ldr	r3, [r7, #16]
 8005a40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d10a      	bne.n	8005a5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005a46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a4a:	f383 8811 	msr	BASEPRI, r3
 8005a4e:	f3bf 8f6f 	isb	sy
 8005a52:	f3bf 8f4f 	dsb	sy
 8005a56:	60bb      	str	r3, [r7, #8]
}
 8005a58:	bf00      	nop
 8005a5a:	e7fe      	b.n	8005a5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005a5c:	693b      	ldr	r3, [r7, #16]
 8005a5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a60:	1e5a      	subs	r2, r3, #1
 8005a62:	693b      	ldr	r3, [r7, #16]
 8005a64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005a66:	693b      	ldr	r3, [r7, #16]
 8005a68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d02c      	beq.n	8005acc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005a72:	693b      	ldr	r3, [r7, #16]
 8005a74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d128      	bne.n	8005acc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005a7a:	693b      	ldr	r3, [r7, #16]
 8005a7c:	3304      	adds	r3, #4
 8005a7e:	4618      	mov	r0, r3
 8005a80:	f7fe f87e 	bl	8003b80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005a88:	693b      	ldr	r3, [r7, #16]
 8005a8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a8c:	693b      	ldr	r3, [r7, #16]
 8005a8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005a94:	693b      	ldr	r3, [r7, #16]
 8005a96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005a98:	693b      	ldr	r3, [r7, #16]
 8005a9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a9c:	4b0f      	ldr	r3, [pc, #60]	; (8005adc <xTaskPriorityDisinherit+0xd4>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	429a      	cmp	r2, r3
 8005aa2:	d903      	bls.n	8005aac <xTaskPriorityDisinherit+0xa4>
 8005aa4:	693b      	ldr	r3, [r7, #16]
 8005aa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aa8:	4a0c      	ldr	r2, [pc, #48]	; (8005adc <xTaskPriorityDisinherit+0xd4>)
 8005aaa:	6013      	str	r3, [r2, #0]
 8005aac:	693b      	ldr	r3, [r7, #16]
 8005aae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ab0:	4613      	mov	r3, r2
 8005ab2:	009b      	lsls	r3, r3, #2
 8005ab4:	4413      	add	r3, r2
 8005ab6:	009b      	lsls	r3, r3, #2
 8005ab8:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <xTaskPriorityDisinherit+0xd8>)
 8005aba:	441a      	add	r2, r3
 8005abc:	693b      	ldr	r3, [r7, #16]
 8005abe:	3304      	adds	r3, #4
 8005ac0:	4619      	mov	r1, r3
 8005ac2:	4610      	mov	r0, r2
 8005ac4:	f7fd ffff 	bl	8003ac6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005ac8:	2301      	movs	r3, #1
 8005aca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005acc:	697b      	ldr	r3, [r7, #20]
	}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	3718      	adds	r7, #24
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	bd80      	pop	{r7, pc}
 8005ad6:	bf00      	nop
 8005ad8:	20000634 	.word	0x20000634
 8005adc:	20000b10 	.word	0x20000b10
 8005ae0:	20000638 	.word	0x20000638

08005ae4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b088      	sub	sp, #32
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	6078      	str	r0, [r7, #4]
 8005aec:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005af2:	2301      	movs	r3, #1
 8005af4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d06a      	beq.n	8005bd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005afc:	69bb      	ldr	r3, [r7, #24]
 8005afe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	60fb      	str	r3, [r7, #12]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b1e:	683a      	ldr	r2, [r7, #0]
 8005b20:	429a      	cmp	r2, r3
 8005b22:	d902      	bls.n	8005b2a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	61fb      	str	r3, [r7, #28]
 8005b28:	e002      	b.n	8005b30 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005b2a:	69bb      	ldr	r3, [r7, #24]
 8005b2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005b2e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005b30:	69bb      	ldr	r3, [r7, #24]
 8005b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b34:	69fa      	ldr	r2, [r7, #28]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d04b      	beq.n	8005bd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b3e:	697a      	ldr	r2, [r7, #20]
 8005b40:	429a      	cmp	r2, r3
 8005b42:	d146      	bne.n	8005bd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005b44:	4b25      	ldr	r3, [pc, #148]	; (8005bdc <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	69ba      	ldr	r2, [r7, #24]
 8005b4a:	429a      	cmp	r2, r3
 8005b4c:	d10a      	bne.n	8005b64 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b52:	f383 8811 	msr	BASEPRI, r3
 8005b56:	f3bf 8f6f 	isb	sy
 8005b5a:	f3bf 8f4f 	dsb	sy
 8005b5e:	60bb      	str	r3, [r7, #8]
}
 8005b60:	bf00      	nop
 8005b62:	e7fe      	b.n	8005b62 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005b64:	69bb      	ldr	r3, [r7, #24]
 8005b66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b68:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005b6a:	69bb      	ldr	r3, [r7, #24]
 8005b6c:	69fa      	ldr	r2, [r7, #28]
 8005b6e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005b70:	69bb      	ldr	r3, [r7, #24]
 8005b72:	699b      	ldr	r3, [r3, #24]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	db04      	blt.n	8005b82 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b78:	69fb      	ldr	r3, [r7, #28]
 8005b7a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005b7e:	69bb      	ldr	r3, [r7, #24]
 8005b80:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005b82:	69bb      	ldr	r3, [r7, #24]
 8005b84:	6959      	ldr	r1, [r3, #20]
 8005b86:	693a      	ldr	r2, [r7, #16]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	4413      	add	r3, r2
 8005b8e:	009b      	lsls	r3, r3, #2
 8005b90:	4a13      	ldr	r2, [pc, #76]	; (8005be0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005b92:	4413      	add	r3, r2
 8005b94:	4299      	cmp	r1, r3
 8005b96:	d11c      	bne.n	8005bd2 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b98:	69bb      	ldr	r3, [r7, #24]
 8005b9a:	3304      	adds	r3, #4
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	f7fd ffef 	bl	8003b80 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005ba2:	69bb      	ldr	r3, [r7, #24]
 8005ba4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ba6:	4b0f      	ldr	r3, [pc, #60]	; (8005be4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	429a      	cmp	r2, r3
 8005bac:	d903      	bls.n	8005bb6 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005bae:	69bb      	ldr	r3, [r7, #24]
 8005bb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb2:	4a0c      	ldr	r2, [pc, #48]	; (8005be4 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005bb4:	6013      	str	r3, [r2, #0]
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bba:	4613      	mov	r3, r2
 8005bbc:	009b      	lsls	r3, r3, #2
 8005bbe:	4413      	add	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4a07      	ldr	r2, [pc, #28]	; (8005be0 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005bc4:	441a      	add	r2, r3
 8005bc6:	69bb      	ldr	r3, [r7, #24]
 8005bc8:	3304      	adds	r3, #4
 8005bca:	4619      	mov	r1, r3
 8005bcc:	4610      	mov	r0, r2
 8005bce:	f7fd ff7a 	bl	8003ac6 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005bd2:	bf00      	nop
 8005bd4:	3720      	adds	r7, #32
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000634 	.word	0x20000634
 8005be0:	20000638 	.word	0x20000638
 8005be4:	20000b10 	.word	0x20000b10

08005be8 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005be8:	b480      	push	{r7}
 8005bea:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005bec:	4b07      	ldr	r3, [pc, #28]	; (8005c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d004      	beq.n	8005bfe <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005bf4:	4b05      	ldr	r3, [pc, #20]	; (8005c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005bfa:	3201      	adds	r2, #1
 8005bfc:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005bfe:	4b03      	ldr	r3, [pc, #12]	; (8005c0c <pvTaskIncrementMutexHeldCount+0x24>)
 8005c00:	681b      	ldr	r3, [r3, #0]
	}
 8005c02:	4618      	mov	r0, r3
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr
 8005c0c:	20000634 	.word	0x20000634

08005c10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005c1a:	4b21      	ldr	r3, [pc, #132]	; (8005ca0 <prvAddCurrentTaskToDelayedList+0x90>)
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005c20:	4b20      	ldr	r3, [pc, #128]	; (8005ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fd ffaa 	bl	8003b80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c32:	d10a      	bne.n	8005c4a <prvAddCurrentTaskToDelayedList+0x3a>
 8005c34:	683b      	ldr	r3, [r7, #0]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d007      	beq.n	8005c4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c3a:	4b1a      	ldr	r3, [pc, #104]	; (8005ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	3304      	adds	r3, #4
 8005c40:	4619      	mov	r1, r3
 8005c42:	4819      	ldr	r0, [pc, #100]	; (8005ca8 <prvAddCurrentTaskToDelayedList+0x98>)
 8005c44:	f7fd ff3f 	bl	8003ac6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005c48:	e026      	b.n	8005c98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005c4a:	68fa      	ldr	r2, [r7, #12]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4413      	add	r3, r2
 8005c50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005c52:	4b14      	ldr	r3, [pc, #80]	; (8005ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	68ba      	ldr	r2, [r7, #8]
 8005c58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005c5a:	68ba      	ldr	r2, [r7, #8]
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	429a      	cmp	r2, r3
 8005c60:	d209      	bcs.n	8005c76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c62:	4b12      	ldr	r3, [pc, #72]	; (8005cac <prvAddCurrentTaskToDelayedList+0x9c>)
 8005c64:	681a      	ldr	r2, [r3, #0]
 8005c66:	4b0f      	ldr	r3, [pc, #60]	; (8005ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f7fd ff4d 	bl	8003b0e <vListInsert>
}
 8005c74:	e010      	b.n	8005c98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005c76:	4b0e      	ldr	r3, [pc, #56]	; (8005cb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005c78:	681a      	ldr	r2, [r3, #0]
 8005c7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ca4 <prvAddCurrentTaskToDelayedList+0x94>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3304      	adds	r3, #4
 8005c80:	4619      	mov	r1, r3
 8005c82:	4610      	mov	r0, r2
 8005c84:	f7fd ff43 	bl	8003b0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005c88:	4b0a      	ldr	r3, [pc, #40]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	68ba      	ldr	r2, [r7, #8]
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d202      	bcs.n	8005c98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005c92:	4a08      	ldr	r2, [pc, #32]	; (8005cb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005c94:	68bb      	ldr	r3, [r7, #8]
 8005c96:	6013      	str	r3, [r2, #0]
}
 8005c98:	bf00      	nop
 8005c9a:	3710      	adds	r7, #16
 8005c9c:	46bd      	mov	sp, r7
 8005c9e:	bd80      	pop	{r7, pc}
 8005ca0:	20000b0c 	.word	0x20000b0c
 8005ca4:	20000634 	.word	0x20000634
 8005ca8:	20000af4 	.word	0x20000af4
 8005cac:	20000ac4 	.word	0x20000ac4
 8005cb0:	20000ac0 	.word	0x20000ac0
 8005cb4:	20000b28 	.word	0x20000b28

08005cb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005cb8:	b580      	push	{r7, lr}
 8005cba:	b08a      	sub	sp, #40	; 0x28
 8005cbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005cc2:	f000 fb07 	bl	80062d4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005cc6:	4b1c      	ldr	r3, [pc, #112]	; (8005d38 <xTimerCreateTimerTask+0x80>)
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d021      	beq.n	8005d12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005cce:	2300      	movs	r3, #0
 8005cd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005cd6:	1d3a      	adds	r2, r7, #4
 8005cd8:	f107 0108 	add.w	r1, r7, #8
 8005cdc:	f107 030c 	add.w	r3, r7, #12
 8005ce0:	4618      	mov	r0, r3
 8005ce2:	f7fd fea9 	bl	8003a38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005ce6:	6879      	ldr	r1, [r7, #4]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	68fa      	ldr	r2, [r7, #12]
 8005cec:	9202      	str	r2, [sp, #8]
 8005cee:	9301      	str	r3, [sp, #4]
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	9300      	str	r3, [sp, #0]
 8005cf4:	2300      	movs	r3, #0
 8005cf6:	460a      	mov	r2, r1
 8005cf8:	4910      	ldr	r1, [pc, #64]	; (8005d3c <xTimerCreateTimerTask+0x84>)
 8005cfa:	4811      	ldr	r0, [pc, #68]	; (8005d40 <xTimerCreateTimerTask+0x88>)
 8005cfc:	f7fe ff78 	bl	8004bf0 <xTaskCreateStatic>
 8005d00:	4603      	mov	r3, r0
 8005d02:	4a10      	ldr	r2, [pc, #64]	; (8005d44 <xTimerCreateTimerTask+0x8c>)
 8005d04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005d06:	4b0f      	ldr	r3, [pc, #60]	; (8005d44 <xTimerCreateTimerTask+0x8c>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	2b00      	cmp	r3, #0
 8005d0c:	d001      	beq.n	8005d12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005d0e:	2301      	movs	r3, #1
 8005d10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005d12:	697b      	ldr	r3, [r7, #20]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	613b      	str	r3, [r7, #16]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005d2e:	697b      	ldr	r3, [r7, #20]
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3718      	adds	r7, #24
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}
 8005d38:	20000b64 	.word	0x20000b64
 8005d3c:	08006e2c 	.word	0x08006e2c
 8005d40:	08005e7d 	.word	0x08005e7d
 8005d44:	20000b68 	.word	0x20000b68

08005d48 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	; 0x28
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	60b9      	str	r1, [r7, #8]
 8005d52:	607a      	str	r2, [r7, #4]
 8005d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005d5a:	68fb      	ldr	r3, [r7, #12]
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d10a      	bne.n	8005d76 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005d60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d64:	f383 8811 	msr	BASEPRI, r3
 8005d68:	f3bf 8f6f 	isb	sy
 8005d6c:	f3bf 8f4f 	dsb	sy
 8005d70:	623b      	str	r3, [r7, #32]
}
 8005d72:	bf00      	nop
 8005d74:	e7fe      	b.n	8005d74 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005d76:	4b1a      	ldr	r3, [pc, #104]	; (8005de0 <xTimerGenericCommand+0x98>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	d02a      	beq.n	8005dd4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005d7e:	68bb      	ldr	r3, [r7, #8]
 8005d80:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	2b05      	cmp	r3, #5
 8005d8e:	dc18      	bgt.n	8005dc2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005d90:	f7ff fdb4 	bl	80058fc <xTaskGetSchedulerState>
 8005d94:	4603      	mov	r3, r0
 8005d96:	2b02      	cmp	r3, #2
 8005d98:	d109      	bne.n	8005dae <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005d9a:	4b11      	ldr	r3, [pc, #68]	; (8005de0 <xTimerGenericCommand+0x98>)
 8005d9c:	6818      	ldr	r0, [r3, #0]
 8005d9e:	f107 0110 	add.w	r1, r7, #16
 8005da2:	2300      	movs	r3, #0
 8005da4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005da6:	f7fe f8bd 	bl	8003f24 <xQueueGenericSend>
 8005daa:	6278      	str	r0, [r7, #36]	; 0x24
 8005dac:	e012      	b.n	8005dd4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005dae:	4b0c      	ldr	r3, [pc, #48]	; (8005de0 <xTimerGenericCommand+0x98>)
 8005db0:	6818      	ldr	r0, [r3, #0]
 8005db2:	f107 0110 	add.w	r1, r7, #16
 8005db6:	2300      	movs	r3, #0
 8005db8:	2200      	movs	r2, #0
 8005dba:	f7fe f8b3 	bl	8003f24 <xQueueGenericSend>
 8005dbe:	6278      	str	r0, [r7, #36]	; 0x24
 8005dc0:	e008      	b.n	8005dd4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005dc2:	4b07      	ldr	r3, [pc, #28]	; (8005de0 <xTimerGenericCommand+0x98>)
 8005dc4:	6818      	ldr	r0, [r3, #0]
 8005dc6:	f107 0110 	add.w	r1, r7, #16
 8005dca:	2300      	movs	r3, #0
 8005dcc:	683a      	ldr	r2, [r7, #0]
 8005dce:	f7fe f9a7 	bl	8004120 <xQueueGenericSendFromISR>
 8005dd2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005dd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	3728      	adds	r7, #40	; 0x28
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	bd80      	pop	{r7, pc}
 8005dde:	bf00      	nop
 8005de0:	20000b64 	.word	0x20000b64

08005de4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b088      	sub	sp, #32
 8005de8:	af02      	add	r7, sp, #8
 8005dea:	6078      	str	r0, [r7, #4]
 8005dec:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005dee:	4b22      	ldr	r3, [pc, #136]	; (8005e78 <prvProcessExpiredTimer+0x94>)
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	68db      	ldr	r3, [r3, #12]
 8005df6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fd febf 	bl	8003b80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005e02:	697b      	ldr	r3, [r7, #20]
 8005e04:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e08:	f003 0304 	and.w	r3, r3, #4
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d022      	beq.n	8005e56 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005e10:	697b      	ldr	r3, [r7, #20]
 8005e12:	699a      	ldr	r2, [r3, #24]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	18d1      	adds	r1, r2, r3
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	683a      	ldr	r2, [r7, #0]
 8005e1c:	6978      	ldr	r0, [r7, #20]
 8005e1e:	f000 f8d1 	bl	8005fc4 <prvInsertTimerInActiveList>
 8005e22:	4603      	mov	r3, r0
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	d01f      	beq.n	8005e68 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005e28:	2300      	movs	r3, #0
 8005e2a:	9300      	str	r3, [sp, #0]
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	687a      	ldr	r2, [r7, #4]
 8005e30:	2100      	movs	r1, #0
 8005e32:	6978      	ldr	r0, [r7, #20]
 8005e34:	f7ff ff88 	bl	8005d48 <xTimerGenericCommand>
 8005e38:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d113      	bne.n	8005e68 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005e40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e44:	f383 8811 	msr	BASEPRI, r3
 8005e48:	f3bf 8f6f 	isb	sy
 8005e4c:	f3bf 8f4f 	dsb	sy
 8005e50:	60fb      	str	r3, [r7, #12]
}
 8005e52:	bf00      	nop
 8005e54:	e7fe      	b.n	8005e54 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005e56:	697b      	ldr	r3, [r7, #20]
 8005e58:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005e5c:	f023 0301 	bic.w	r3, r3, #1
 8005e60:	b2da      	uxtb	r2, r3
 8005e62:	697b      	ldr	r3, [r7, #20]
 8005e64:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005e68:	697b      	ldr	r3, [r7, #20]
 8005e6a:	6a1b      	ldr	r3, [r3, #32]
 8005e6c:	6978      	ldr	r0, [r7, #20]
 8005e6e:	4798      	blx	r3
}
 8005e70:	bf00      	nop
 8005e72:	3718      	adds	r7, #24
 8005e74:	46bd      	mov	sp, r7
 8005e76:	bd80      	pop	{r7, pc}
 8005e78:	20000b5c 	.word	0x20000b5c

08005e7c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e84:	f107 0308 	add.w	r3, r7, #8
 8005e88:	4618      	mov	r0, r3
 8005e8a:	f000 f857 	bl	8005f3c <prvGetNextExpireTime>
 8005e8e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005e90:	68bb      	ldr	r3, [r7, #8]
 8005e92:	4619      	mov	r1, r3
 8005e94:	68f8      	ldr	r0, [r7, #12]
 8005e96:	f000 f803 	bl	8005ea0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005e9a:	f000 f8d5 	bl	8006048 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005e9e:	e7f1      	b.n	8005e84 <prvTimerTask+0x8>

08005ea0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005ea0:	b580      	push	{r7, lr}
 8005ea2:	b084      	sub	sp, #16
 8005ea4:	af00      	add	r7, sp, #0
 8005ea6:	6078      	str	r0, [r7, #4]
 8005ea8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005eaa:	f7ff f93b 	bl	8005124 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005eae:	f107 0308 	add.w	r3, r7, #8
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 f866 	bl	8005f84 <prvSampleTimeNow>
 8005eb8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005eba:	68bb      	ldr	r3, [r7, #8]
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d130      	bne.n	8005f22 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005ec0:	683b      	ldr	r3, [r7, #0]
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d10a      	bne.n	8005edc <prvProcessTimerOrBlockTask+0x3c>
 8005ec6:	687a      	ldr	r2, [r7, #4]
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	429a      	cmp	r2, r3
 8005ecc:	d806      	bhi.n	8005edc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005ece:	f7ff f937 	bl	8005140 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005ed2:	68f9      	ldr	r1, [r7, #12]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f7ff ff85 	bl	8005de4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005eda:	e024      	b.n	8005f26 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005edc:	683b      	ldr	r3, [r7, #0]
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d008      	beq.n	8005ef4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005ee2:	4b13      	ldr	r3, [pc, #76]	; (8005f30 <prvProcessTimerOrBlockTask+0x90>)
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d101      	bne.n	8005ef0 <prvProcessTimerOrBlockTask+0x50>
 8005eec:	2301      	movs	r3, #1
 8005eee:	e000      	b.n	8005ef2 <prvProcessTimerOrBlockTask+0x52>
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005ef4:	4b0f      	ldr	r3, [pc, #60]	; (8005f34 <prvProcessTimerOrBlockTask+0x94>)
 8005ef6:	6818      	ldr	r0, [r3, #0]
 8005ef8:	687a      	ldr	r2, [r7, #4]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	1ad3      	subs	r3, r2, r3
 8005efe:	683a      	ldr	r2, [r7, #0]
 8005f00:	4619      	mov	r1, r3
 8005f02:	f7fe fe41 	bl	8004b88 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005f06:	f7ff f91b 	bl	8005140 <xTaskResumeAll>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005f10:	4b09      	ldr	r3, [pc, #36]	; (8005f38 <prvProcessTimerOrBlockTask+0x98>)
 8005f12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
}
 8005f20:	e001      	b.n	8005f26 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005f22:	f7ff f90d 	bl	8005140 <xTaskResumeAll>
}
 8005f26:	bf00      	nop
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}
 8005f2e:	bf00      	nop
 8005f30:	20000b60 	.word	0x20000b60
 8005f34:	20000b64 	.word	0x20000b64
 8005f38:	e000ed04 	.word	0xe000ed04

08005f3c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005f3c:	b480      	push	{r7}
 8005f3e:	b085      	sub	sp, #20
 8005f40:	af00      	add	r7, sp, #0
 8005f42:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005f44:	4b0e      	ldr	r3, [pc, #56]	; (8005f80 <prvGetNextExpireTime+0x44>)
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	2b00      	cmp	r3, #0
 8005f4c:	d101      	bne.n	8005f52 <prvGetNextExpireTime+0x16>
 8005f4e:	2201      	movs	r2, #1
 8005f50:	e000      	b.n	8005f54 <prvGetNextExpireTime+0x18>
 8005f52:	2200      	movs	r2, #0
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d105      	bne.n	8005f6c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005f60:	4b07      	ldr	r3, [pc, #28]	; (8005f80 <prvGetNextExpireTime+0x44>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	60fb      	str	r3, [r7, #12]
 8005f6a:	e001      	b.n	8005f70 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005f6c:	2300      	movs	r3, #0
 8005f6e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005f70:	68fb      	ldr	r3, [r7, #12]
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3714      	adds	r7, #20
 8005f76:	46bd      	mov	sp, r7
 8005f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f7c:	4770      	bx	lr
 8005f7e:	bf00      	nop
 8005f80:	20000b5c 	.word	0x20000b5c

08005f84 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005f8c:	f7ff f976 	bl	800527c <xTaskGetTickCount>
 8005f90:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005f92:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <prvSampleTimeNow+0x3c>)
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	68fa      	ldr	r2, [r7, #12]
 8005f98:	429a      	cmp	r2, r3
 8005f9a:	d205      	bcs.n	8005fa8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005f9c:	f000 f936 	bl	800620c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2201      	movs	r2, #1
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	e002      	b.n	8005fae <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	2200      	movs	r2, #0
 8005fac:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005fae:	4a04      	ldr	r2, [pc, #16]	; (8005fc0 <prvSampleTimeNow+0x3c>)
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	3710      	adds	r7, #16
 8005fba:	46bd      	mov	sp, r7
 8005fbc:	bd80      	pop	{r7, pc}
 8005fbe:	bf00      	nop
 8005fc0:	20000b6c 	.word	0x20000b6c

08005fc4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b086      	sub	sp, #24
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	60f8      	str	r0, [r7, #12]
 8005fcc:	60b9      	str	r1, [r7, #8]
 8005fce:	607a      	str	r2, [r7, #4]
 8005fd0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005fd2:	2300      	movs	r3, #0
 8005fd4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005fd6:	68fb      	ldr	r3, [r7, #12]
 8005fd8:	68ba      	ldr	r2, [r7, #8]
 8005fda:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005fdc:	68fb      	ldr	r3, [r7, #12]
 8005fde:	68fa      	ldr	r2, [r7, #12]
 8005fe0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005fe2:	68ba      	ldr	r2, [r7, #8]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	429a      	cmp	r2, r3
 8005fe8:	d812      	bhi.n	8006010 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	1ad2      	subs	r2, r2, r3
 8005ff0:	68fb      	ldr	r3, [r7, #12]
 8005ff2:	699b      	ldr	r3, [r3, #24]
 8005ff4:	429a      	cmp	r2, r3
 8005ff6:	d302      	bcc.n	8005ffe <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005ff8:	2301      	movs	r3, #1
 8005ffa:	617b      	str	r3, [r7, #20]
 8005ffc:	e01b      	b.n	8006036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005ffe:	4b10      	ldr	r3, [pc, #64]	; (8006040 <prvInsertTimerInActiveList+0x7c>)
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	3304      	adds	r3, #4
 8006006:	4619      	mov	r1, r3
 8006008:	4610      	mov	r0, r2
 800600a:	f7fd fd80 	bl	8003b0e <vListInsert>
 800600e:	e012      	b.n	8006036 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006010:	687a      	ldr	r2, [r7, #4]
 8006012:	683b      	ldr	r3, [r7, #0]
 8006014:	429a      	cmp	r2, r3
 8006016:	d206      	bcs.n	8006026 <prvInsertTimerInActiveList+0x62>
 8006018:	68ba      	ldr	r2, [r7, #8]
 800601a:	683b      	ldr	r3, [r7, #0]
 800601c:	429a      	cmp	r2, r3
 800601e:	d302      	bcc.n	8006026 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006020:	2301      	movs	r3, #1
 8006022:	617b      	str	r3, [r7, #20]
 8006024:	e007      	b.n	8006036 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006026:	4b07      	ldr	r3, [pc, #28]	; (8006044 <prvInsertTimerInActiveList+0x80>)
 8006028:	681a      	ldr	r2, [r3, #0]
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	3304      	adds	r3, #4
 800602e:	4619      	mov	r1, r3
 8006030:	4610      	mov	r0, r2
 8006032:	f7fd fd6c 	bl	8003b0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006036:	697b      	ldr	r3, [r7, #20]
}
 8006038:	4618      	mov	r0, r3
 800603a:	3718      	adds	r7, #24
 800603c:	46bd      	mov	sp, r7
 800603e:	bd80      	pop	{r7, pc}
 8006040:	20000b60 	.word	0x20000b60
 8006044:	20000b5c 	.word	0x20000b5c

08006048 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006048:	b580      	push	{r7, lr}
 800604a:	b08e      	sub	sp, #56	; 0x38
 800604c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800604e:	e0ca      	b.n	80061e6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	2b00      	cmp	r3, #0
 8006054:	da18      	bge.n	8006088 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	3304      	adds	r3, #4
 800605a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800605c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800605e:	2b00      	cmp	r3, #0
 8006060:	d10a      	bne.n	8006078 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006066:	f383 8811 	msr	BASEPRI, r3
 800606a:	f3bf 8f6f 	isb	sy
 800606e:	f3bf 8f4f 	dsb	sy
 8006072:	61fb      	str	r3, [r7, #28]
}
 8006074:	bf00      	nop
 8006076:	e7fe      	b.n	8006076 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006078:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800607e:	6850      	ldr	r0, [r2, #4]
 8006080:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006082:	6892      	ldr	r2, [r2, #8]
 8006084:	4611      	mov	r1, r2
 8006086:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	2b00      	cmp	r3, #0
 800608c:	f2c0 80aa 	blt.w	80061e4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006096:	695b      	ldr	r3, [r3, #20]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d004      	beq.n	80060a6 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800609c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800609e:	3304      	adds	r3, #4
 80060a0:	4618      	mov	r0, r3
 80060a2:	f7fd fd6d 	bl	8003b80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80060a6:	463b      	mov	r3, r7
 80060a8:	4618      	mov	r0, r3
 80060aa:	f7ff ff6b 	bl	8005f84 <prvSampleTimeNow>
 80060ae:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	2b09      	cmp	r3, #9
 80060b4:	f200 8097 	bhi.w	80061e6 <prvProcessReceivedCommands+0x19e>
 80060b8:	a201      	add	r2, pc, #4	; (adr r2, 80060c0 <prvProcessReceivedCommands+0x78>)
 80060ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060be:	bf00      	nop
 80060c0:	080060e9 	.word	0x080060e9
 80060c4:	080060e9 	.word	0x080060e9
 80060c8:	080060e9 	.word	0x080060e9
 80060cc:	0800615d 	.word	0x0800615d
 80060d0:	08006171 	.word	0x08006171
 80060d4:	080061bb 	.word	0x080061bb
 80060d8:	080060e9 	.word	0x080060e9
 80060dc:	080060e9 	.word	0x080060e9
 80060e0:	0800615d 	.word	0x0800615d
 80060e4:	08006171 	.word	0x08006171
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80060e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060ea:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060ee:	f043 0301 	orr.w	r3, r3, #1
 80060f2:	b2da      	uxtb	r2, r3
 80060f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060fe:	699b      	ldr	r3, [r3, #24]
 8006100:	18d1      	adds	r1, r2, r3
 8006102:	68bb      	ldr	r3, [r7, #8]
 8006104:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006106:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006108:	f7ff ff5c 	bl	8005fc4 <prvInsertTimerInActiveList>
 800610c:	4603      	mov	r3, r0
 800610e:	2b00      	cmp	r3, #0
 8006110:	d069      	beq.n	80061e6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006112:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006118:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800611a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800611c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006120:	f003 0304 	and.w	r3, r3, #4
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05e      	beq.n	80061e6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800612c:	699b      	ldr	r3, [r3, #24]
 800612e:	441a      	add	r2, r3
 8006130:	2300      	movs	r3, #0
 8006132:	9300      	str	r3, [sp, #0]
 8006134:	2300      	movs	r3, #0
 8006136:	2100      	movs	r1, #0
 8006138:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800613a:	f7ff fe05 	bl	8005d48 <xTimerGenericCommand>
 800613e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006140:	6a3b      	ldr	r3, [r7, #32]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d14f      	bne.n	80061e6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006146:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614a:	f383 8811 	msr	BASEPRI, r3
 800614e:	f3bf 8f6f 	isb	sy
 8006152:	f3bf 8f4f 	dsb	sy
 8006156:	61bb      	str	r3, [r7, #24]
}
 8006158:	bf00      	nop
 800615a:	e7fe      	b.n	800615a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800615c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800615e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006162:	f023 0301 	bic.w	r3, r3, #1
 8006166:	b2da      	uxtb	r2, r3
 8006168:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800616a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800616e:	e03a      	b.n	80061e6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006172:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006176:	f043 0301 	orr.w	r3, r3, #1
 800617a:	b2da      	uxtb	r2, r3
 800617c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800617e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006182:	68ba      	ldr	r2, [r7, #8]
 8006184:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006186:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800618a:	699b      	ldr	r3, [r3, #24]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10a      	bne.n	80061a6 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	617b      	str	r3, [r7, #20]
}
 80061a2:	bf00      	nop
 80061a4:	e7fe      	b.n	80061a4 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80061a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061a8:	699a      	ldr	r2, [r3, #24]
 80061aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061ac:	18d1      	adds	r1, r2, r3
 80061ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061b0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061b4:	f7ff ff06 	bl	8005fc4 <prvInsertTimerInActiveList>
					break;
 80061b8:	e015      	b.n	80061e6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80061ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061bc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061c0:	f003 0302 	and.w	r3, r3, #2
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	d103      	bne.n	80061d0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80061c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80061ca:	f000 fbe1 	bl	8006990 <vPortFree>
 80061ce:	e00a      	b.n	80061e6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80061d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061d6:	f023 0301 	bic.w	r3, r3, #1
 80061da:	b2da      	uxtb	r2, r3
 80061dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80061de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80061e2:	e000      	b.n	80061e6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80061e4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80061e6:	4b08      	ldr	r3, [pc, #32]	; (8006208 <prvProcessReceivedCommands+0x1c0>)
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	1d39      	adds	r1, r7, #4
 80061ec:	2200      	movs	r2, #0
 80061ee:	4618      	mov	r0, r3
 80061f0:	f7fe f8be 	bl	8004370 <xQueueReceive>
 80061f4:	4603      	mov	r3, r0
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	f47f af2a 	bne.w	8006050 <prvProcessReceivedCommands+0x8>
	}
}
 80061fc:	bf00      	nop
 80061fe:	bf00      	nop
 8006200:	3730      	adds	r7, #48	; 0x30
 8006202:	46bd      	mov	sp, r7
 8006204:	bd80      	pop	{r7, pc}
 8006206:	bf00      	nop
 8006208:	20000b64 	.word	0x20000b64

0800620c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800620c:	b580      	push	{r7, lr}
 800620e:	b088      	sub	sp, #32
 8006210:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006212:	e048      	b.n	80062a6 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006214:	4b2d      	ldr	r3, [pc, #180]	; (80062cc <prvSwitchTimerLists+0xc0>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	68db      	ldr	r3, [r3, #12]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800621e:	4b2b      	ldr	r3, [pc, #172]	; (80062cc <prvSwitchTimerLists+0xc0>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	68db      	ldr	r3, [r3, #12]
 8006224:	68db      	ldr	r3, [r3, #12]
 8006226:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	3304      	adds	r3, #4
 800622c:	4618      	mov	r0, r3
 800622e:	f7fd fca7 	bl	8003b80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006232:	68fb      	ldr	r3, [r7, #12]
 8006234:	6a1b      	ldr	r3, [r3, #32]
 8006236:	68f8      	ldr	r0, [r7, #12]
 8006238:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006240:	f003 0304 	and.w	r3, r3, #4
 8006244:	2b00      	cmp	r3, #0
 8006246:	d02e      	beq.n	80062a6 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	699b      	ldr	r3, [r3, #24]
 800624c:	693a      	ldr	r2, [r7, #16]
 800624e:	4413      	add	r3, r2
 8006250:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006252:	68ba      	ldr	r2, [r7, #8]
 8006254:	693b      	ldr	r3, [r7, #16]
 8006256:	429a      	cmp	r2, r3
 8006258:	d90e      	bls.n	8006278 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	68ba      	ldr	r2, [r7, #8]
 800625e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	68fa      	ldr	r2, [r7, #12]
 8006264:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006266:	4b19      	ldr	r3, [pc, #100]	; (80062cc <prvSwitchTimerLists+0xc0>)
 8006268:	681a      	ldr	r2, [r3, #0]
 800626a:	68fb      	ldr	r3, [r7, #12]
 800626c:	3304      	adds	r3, #4
 800626e:	4619      	mov	r1, r3
 8006270:	4610      	mov	r0, r2
 8006272:	f7fd fc4c 	bl	8003b0e <vListInsert>
 8006276:	e016      	b.n	80062a6 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006278:	2300      	movs	r3, #0
 800627a:	9300      	str	r3, [sp, #0]
 800627c:	2300      	movs	r3, #0
 800627e:	693a      	ldr	r2, [r7, #16]
 8006280:	2100      	movs	r1, #0
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f7ff fd60 	bl	8005d48 <xTimerGenericCommand>
 8006288:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d10a      	bne.n	80062a6 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006294:	f383 8811 	msr	BASEPRI, r3
 8006298:	f3bf 8f6f 	isb	sy
 800629c:	f3bf 8f4f 	dsb	sy
 80062a0:	603b      	str	r3, [r7, #0]
}
 80062a2:	bf00      	nop
 80062a4:	e7fe      	b.n	80062a4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80062a6:	4b09      	ldr	r3, [pc, #36]	; (80062cc <prvSwitchTimerLists+0xc0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	681b      	ldr	r3, [r3, #0]
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d1b1      	bne.n	8006214 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80062b0:	4b06      	ldr	r3, [pc, #24]	; (80062cc <prvSwitchTimerLists+0xc0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80062b6:	4b06      	ldr	r3, [pc, #24]	; (80062d0 <prvSwitchTimerLists+0xc4>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a04      	ldr	r2, [pc, #16]	; (80062cc <prvSwitchTimerLists+0xc0>)
 80062bc:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80062be:	4a04      	ldr	r2, [pc, #16]	; (80062d0 <prvSwitchTimerLists+0xc4>)
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	6013      	str	r3, [r2, #0]
}
 80062c4:	bf00      	nop
 80062c6:	3718      	adds	r7, #24
 80062c8:	46bd      	mov	sp, r7
 80062ca:	bd80      	pop	{r7, pc}
 80062cc:	20000b5c 	.word	0x20000b5c
 80062d0:	20000b60 	.word	0x20000b60

080062d4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b082      	sub	sp, #8
 80062d8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80062da:	f000 f96b 	bl	80065b4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80062de:	4b15      	ldr	r3, [pc, #84]	; (8006334 <prvCheckForValidListAndQueue+0x60>)
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d120      	bne.n	8006328 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80062e6:	4814      	ldr	r0, [pc, #80]	; (8006338 <prvCheckForValidListAndQueue+0x64>)
 80062e8:	f7fd fbc0 	bl	8003a6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80062ec:	4813      	ldr	r0, [pc, #76]	; (800633c <prvCheckForValidListAndQueue+0x68>)
 80062ee:	f7fd fbbd 	bl	8003a6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80062f2:	4b13      	ldr	r3, [pc, #76]	; (8006340 <prvCheckForValidListAndQueue+0x6c>)
 80062f4:	4a10      	ldr	r2, [pc, #64]	; (8006338 <prvCheckForValidListAndQueue+0x64>)
 80062f6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80062f8:	4b12      	ldr	r3, [pc, #72]	; (8006344 <prvCheckForValidListAndQueue+0x70>)
 80062fa:	4a10      	ldr	r2, [pc, #64]	; (800633c <prvCheckForValidListAndQueue+0x68>)
 80062fc:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80062fe:	2300      	movs	r3, #0
 8006300:	9300      	str	r3, [sp, #0]
 8006302:	4b11      	ldr	r3, [pc, #68]	; (8006348 <prvCheckForValidListAndQueue+0x74>)
 8006304:	4a11      	ldr	r2, [pc, #68]	; (800634c <prvCheckForValidListAndQueue+0x78>)
 8006306:	2110      	movs	r1, #16
 8006308:	200a      	movs	r0, #10
 800630a:	f7fd fccb 	bl	8003ca4 <xQueueGenericCreateStatic>
 800630e:	4603      	mov	r3, r0
 8006310:	4a08      	ldr	r2, [pc, #32]	; (8006334 <prvCheckForValidListAndQueue+0x60>)
 8006312:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006314:	4b07      	ldr	r3, [pc, #28]	; (8006334 <prvCheckForValidListAndQueue+0x60>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d005      	beq.n	8006328 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800631c:	4b05      	ldr	r3, [pc, #20]	; (8006334 <prvCheckForValidListAndQueue+0x60>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	490b      	ldr	r1, [pc, #44]	; (8006350 <prvCheckForValidListAndQueue+0x7c>)
 8006322:	4618      	mov	r0, r3
 8006324:	f7fe fbdc 	bl	8004ae0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006328:	f000 f974 	bl	8006614 <vPortExitCritical>
}
 800632c:	bf00      	nop
 800632e:	46bd      	mov	sp, r7
 8006330:	bd80      	pop	{r7, pc}
 8006332:	bf00      	nop
 8006334:	20000b64 	.word	0x20000b64
 8006338:	20000b34 	.word	0x20000b34
 800633c:	20000b48 	.word	0x20000b48
 8006340:	20000b5c 	.word	0x20000b5c
 8006344:	20000b60 	.word	0x20000b60
 8006348:	20000c10 	.word	0x20000c10
 800634c:	20000b70 	.word	0x20000b70
 8006350:	08006e34 	.word	0x08006e34

08006354 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	60f8      	str	r0, [r7, #12]
 800635c:	60b9      	str	r1, [r7, #8]
 800635e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	3b04      	subs	r3, #4
 8006364:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800636c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	3b04      	subs	r3, #4
 8006372:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006374:	68bb      	ldr	r3, [r7, #8]
 8006376:	f023 0201 	bic.w	r2, r3, #1
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800637e:	68fb      	ldr	r3, [r7, #12]
 8006380:	3b04      	subs	r3, #4
 8006382:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006384:	4a0c      	ldr	r2, [pc, #48]	; (80063b8 <pxPortInitialiseStack+0x64>)
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	3b14      	subs	r3, #20
 800638e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006390:	687a      	ldr	r2, [r7, #4]
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	3b04      	subs	r3, #4
 800639a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	f06f 0202 	mvn.w	r2, #2
 80063a2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	3b20      	subs	r3, #32
 80063a8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80063aa:	68fb      	ldr	r3, [r7, #12]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3714      	adds	r7, #20
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr
 80063b8:	080063bd 	.word	0x080063bd

080063bc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80063bc:	b480      	push	{r7}
 80063be:	b085      	sub	sp, #20
 80063c0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80063c2:	2300      	movs	r3, #0
 80063c4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80063c6:	4b12      	ldr	r3, [pc, #72]	; (8006410 <prvTaskExitError+0x54>)
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063ce:	d00a      	beq.n	80063e6 <prvTaskExitError+0x2a>
	__asm volatile
 80063d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063d4:	f383 8811 	msr	BASEPRI, r3
 80063d8:	f3bf 8f6f 	isb	sy
 80063dc:	f3bf 8f4f 	dsb	sy
 80063e0:	60fb      	str	r3, [r7, #12]
}
 80063e2:	bf00      	nop
 80063e4:	e7fe      	b.n	80063e4 <prvTaskExitError+0x28>
	__asm volatile
 80063e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063ea:	f383 8811 	msr	BASEPRI, r3
 80063ee:	f3bf 8f6f 	isb	sy
 80063f2:	f3bf 8f4f 	dsb	sy
 80063f6:	60bb      	str	r3, [r7, #8]
}
 80063f8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80063fa:	bf00      	nop
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d0fc      	beq.n	80063fc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006402:	bf00      	nop
 8006404:	bf00      	nop
 8006406:	3714      	adds	r7, #20
 8006408:	46bd      	mov	sp, r7
 800640a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800640e:	4770      	bx	lr
 8006410:	2000000c 	.word	0x2000000c
	...

08006420 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006420:	4b07      	ldr	r3, [pc, #28]	; (8006440 <pxCurrentTCBConst2>)
 8006422:	6819      	ldr	r1, [r3, #0]
 8006424:	6808      	ldr	r0, [r1, #0]
 8006426:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800642a:	f380 8809 	msr	PSP, r0
 800642e:	f3bf 8f6f 	isb	sy
 8006432:	f04f 0000 	mov.w	r0, #0
 8006436:	f380 8811 	msr	BASEPRI, r0
 800643a:	4770      	bx	lr
 800643c:	f3af 8000 	nop.w

08006440 <pxCurrentTCBConst2>:
 8006440:	20000634 	.word	0x20000634
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006444:	bf00      	nop
 8006446:	bf00      	nop

08006448 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006448:	4808      	ldr	r0, [pc, #32]	; (800646c <prvPortStartFirstTask+0x24>)
 800644a:	6800      	ldr	r0, [r0, #0]
 800644c:	6800      	ldr	r0, [r0, #0]
 800644e:	f380 8808 	msr	MSP, r0
 8006452:	f04f 0000 	mov.w	r0, #0
 8006456:	f380 8814 	msr	CONTROL, r0
 800645a:	b662      	cpsie	i
 800645c:	b661      	cpsie	f
 800645e:	f3bf 8f4f 	dsb	sy
 8006462:	f3bf 8f6f 	isb	sy
 8006466:	df00      	svc	0
 8006468:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800646a:	bf00      	nop
 800646c:	e000ed08 	.word	0xe000ed08

08006470 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b086      	sub	sp, #24
 8006474:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006476:	4b46      	ldr	r3, [pc, #280]	; (8006590 <xPortStartScheduler+0x120>)
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	4a46      	ldr	r2, [pc, #280]	; (8006594 <xPortStartScheduler+0x124>)
 800647c:	4293      	cmp	r3, r2
 800647e:	d10a      	bne.n	8006496 <xPortStartScheduler+0x26>
	__asm volatile
 8006480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006484:	f383 8811 	msr	BASEPRI, r3
 8006488:	f3bf 8f6f 	isb	sy
 800648c:	f3bf 8f4f 	dsb	sy
 8006490:	613b      	str	r3, [r7, #16]
}
 8006492:	bf00      	nop
 8006494:	e7fe      	b.n	8006494 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006496:	4b3e      	ldr	r3, [pc, #248]	; (8006590 <xPortStartScheduler+0x120>)
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	4a3f      	ldr	r2, [pc, #252]	; (8006598 <xPortStartScheduler+0x128>)
 800649c:	4293      	cmp	r3, r2
 800649e:	d10a      	bne.n	80064b6 <xPortStartScheduler+0x46>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	60fb      	str	r3, [r7, #12]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80064b6:	4b39      	ldr	r3, [pc, #228]	; (800659c <xPortStartScheduler+0x12c>)
 80064b8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80064ba:	697b      	ldr	r3, [r7, #20]
 80064bc:	781b      	ldrb	r3, [r3, #0]
 80064be:	b2db      	uxtb	r3, r3
 80064c0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80064c2:	697b      	ldr	r3, [r7, #20]
 80064c4:	22ff      	movs	r2, #255	; 0xff
 80064c6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	781b      	ldrb	r3, [r3, #0]
 80064cc:	b2db      	uxtb	r3, r3
 80064ce:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80064d0:	78fb      	ldrb	r3, [r7, #3]
 80064d2:	b2db      	uxtb	r3, r3
 80064d4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80064d8:	b2da      	uxtb	r2, r3
 80064da:	4b31      	ldr	r3, [pc, #196]	; (80065a0 <xPortStartScheduler+0x130>)
 80064dc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80064de:	4b31      	ldr	r3, [pc, #196]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e0:	2207      	movs	r2, #7
 80064e2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064e4:	e009      	b.n	80064fa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80064e6:	4b2f      	ldr	r3, [pc, #188]	; (80065a4 <xPortStartScheduler+0x134>)
 80064e8:	681b      	ldr	r3, [r3, #0]
 80064ea:	3b01      	subs	r3, #1
 80064ec:	4a2d      	ldr	r2, [pc, #180]	; (80065a4 <xPortStartScheduler+0x134>)
 80064ee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80064f0:	78fb      	ldrb	r3, [r7, #3]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	005b      	lsls	r3, r3, #1
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80064fa:	78fb      	ldrb	r3, [r7, #3]
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006502:	2b80      	cmp	r3, #128	; 0x80
 8006504:	d0ef      	beq.n	80064e6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006506:	4b27      	ldr	r3, [pc, #156]	; (80065a4 <xPortStartScheduler+0x134>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f1c3 0307 	rsb	r3, r3, #7
 800650e:	2b04      	cmp	r3, #4
 8006510:	d00a      	beq.n	8006528 <xPortStartScheduler+0xb8>
	__asm volatile
 8006512:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006516:	f383 8811 	msr	BASEPRI, r3
 800651a:	f3bf 8f6f 	isb	sy
 800651e:	f3bf 8f4f 	dsb	sy
 8006522:	60bb      	str	r3, [r7, #8]
}
 8006524:	bf00      	nop
 8006526:	e7fe      	b.n	8006526 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006528:	4b1e      	ldr	r3, [pc, #120]	; (80065a4 <xPortStartScheduler+0x134>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	021b      	lsls	r3, r3, #8
 800652e:	4a1d      	ldr	r2, [pc, #116]	; (80065a4 <xPortStartScheduler+0x134>)
 8006530:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006532:	4b1c      	ldr	r3, [pc, #112]	; (80065a4 <xPortStartScheduler+0x134>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800653a:	4a1a      	ldr	r2, [pc, #104]	; (80065a4 <xPortStartScheduler+0x134>)
 800653c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	b2da      	uxtb	r2, r3
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006546:	4b18      	ldr	r3, [pc, #96]	; (80065a8 <xPortStartScheduler+0x138>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a17      	ldr	r2, [pc, #92]	; (80065a8 <xPortStartScheduler+0x138>)
 800654c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006550:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006552:	4b15      	ldr	r3, [pc, #84]	; (80065a8 <xPortStartScheduler+0x138>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a14      	ldr	r2, [pc, #80]	; (80065a8 <xPortStartScheduler+0x138>)
 8006558:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800655c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800655e:	f000 f8dd 	bl	800671c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006562:	4b12      	ldr	r3, [pc, #72]	; (80065ac <xPortStartScheduler+0x13c>)
 8006564:	2200      	movs	r2, #0
 8006566:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006568:	f000 f8fc 	bl	8006764 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800656c:	4b10      	ldr	r3, [pc, #64]	; (80065b0 <xPortStartScheduler+0x140>)
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	4a0f      	ldr	r2, [pc, #60]	; (80065b0 <xPortStartScheduler+0x140>)
 8006572:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006576:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006578:	f7ff ff66 	bl	8006448 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800657c:	f7fe ff48 	bl	8005410 <vTaskSwitchContext>
	prvTaskExitError();
 8006580:	f7ff ff1c 	bl	80063bc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	3718      	adds	r7, #24
 800658a:	46bd      	mov	sp, r7
 800658c:	bd80      	pop	{r7, pc}
 800658e:	bf00      	nop
 8006590:	e000ed00 	.word	0xe000ed00
 8006594:	410fc271 	.word	0x410fc271
 8006598:	410fc270 	.word	0x410fc270
 800659c:	e000e400 	.word	0xe000e400
 80065a0:	20000c60 	.word	0x20000c60
 80065a4:	20000c64 	.word	0x20000c64
 80065a8:	e000ed20 	.word	0xe000ed20
 80065ac:	2000000c 	.word	0x2000000c
 80065b0:	e000ef34 	.word	0xe000ef34

080065b4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b083      	sub	sp, #12
 80065b8:	af00      	add	r7, sp, #0
	__asm volatile
 80065ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065be:	f383 8811 	msr	BASEPRI, r3
 80065c2:	f3bf 8f6f 	isb	sy
 80065c6:	f3bf 8f4f 	dsb	sy
 80065ca:	607b      	str	r3, [r7, #4]
}
 80065cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80065ce:	4b0f      	ldr	r3, [pc, #60]	; (800660c <vPortEnterCritical+0x58>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	3301      	adds	r3, #1
 80065d4:	4a0d      	ldr	r2, [pc, #52]	; (800660c <vPortEnterCritical+0x58>)
 80065d6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80065d8:	4b0c      	ldr	r3, [pc, #48]	; (800660c <vPortEnterCritical+0x58>)
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d10f      	bne.n	8006600 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80065e0:	4b0b      	ldr	r3, [pc, #44]	; (8006610 <vPortEnterCritical+0x5c>)
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	b2db      	uxtb	r3, r3
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00a      	beq.n	8006600 <vPortEnterCritical+0x4c>
	__asm volatile
 80065ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ee:	f383 8811 	msr	BASEPRI, r3
 80065f2:	f3bf 8f6f 	isb	sy
 80065f6:	f3bf 8f4f 	dsb	sy
 80065fa:	603b      	str	r3, [r7, #0]
}
 80065fc:	bf00      	nop
 80065fe:	e7fe      	b.n	80065fe <vPortEnterCritical+0x4a>
	}
}
 8006600:	bf00      	nop
 8006602:	370c      	adds	r7, #12
 8006604:	46bd      	mov	sp, r7
 8006606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800660a:	4770      	bx	lr
 800660c:	2000000c 	.word	0x2000000c
 8006610:	e000ed04 	.word	0xe000ed04

08006614 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006614:	b480      	push	{r7}
 8006616:	b083      	sub	sp, #12
 8006618:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800661a:	4b12      	ldr	r3, [pc, #72]	; (8006664 <vPortExitCritical+0x50>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d10a      	bne.n	8006638 <vPortExitCritical+0x24>
	__asm volatile
 8006622:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006626:	f383 8811 	msr	BASEPRI, r3
 800662a:	f3bf 8f6f 	isb	sy
 800662e:	f3bf 8f4f 	dsb	sy
 8006632:	607b      	str	r3, [r7, #4]
}
 8006634:	bf00      	nop
 8006636:	e7fe      	b.n	8006636 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006638:	4b0a      	ldr	r3, [pc, #40]	; (8006664 <vPortExitCritical+0x50>)
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	3b01      	subs	r3, #1
 800663e:	4a09      	ldr	r2, [pc, #36]	; (8006664 <vPortExitCritical+0x50>)
 8006640:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006642:	4b08      	ldr	r3, [pc, #32]	; (8006664 <vPortExitCritical+0x50>)
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	2b00      	cmp	r3, #0
 8006648:	d105      	bne.n	8006656 <vPortExitCritical+0x42>
 800664a:	2300      	movs	r3, #0
 800664c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800664e:	683b      	ldr	r3, [r7, #0]
 8006650:	f383 8811 	msr	BASEPRI, r3
}
 8006654:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006656:	bf00      	nop
 8006658:	370c      	adds	r7, #12
 800665a:	46bd      	mov	sp, r7
 800665c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006660:	4770      	bx	lr
 8006662:	bf00      	nop
 8006664:	2000000c 	.word	0x2000000c
	...

08006670 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006670:	f3ef 8009 	mrs	r0, PSP
 8006674:	f3bf 8f6f 	isb	sy
 8006678:	4b15      	ldr	r3, [pc, #84]	; (80066d0 <pxCurrentTCBConst>)
 800667a:	681a      	ldr	r2, [r3, #0]
 800667c:	f01e 0f10 	tst.w	lr, #16
 8006680:	bf08      	it	eq
 8006682:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006686:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	6010      	str	r0, [r2, #0]
 800668c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006690:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006694:	f380 8811 	msr	BASEPRI, r0
 8006698:	f3bf 8f4f 	dsb	sy
 800669c:	f3bf 8f6f 	isb	sy
 80066a0:	f7fe feb6 	bl	8005410 <vTaskSwitchContext>
 80066a4:	f04f 0000 	mov.w	r0, #0
 80066a8:	f380 8811 	msr	BASEPRI, r0
 80066ac:	bc09      	pop	{r0, r3}
 80066ae:	6819      	ldr	r1, [r3, #0]
 80066b0:	6808      	ldr	r0, [r1, #0]
 80066b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80066b6:	f01e 0f10 	tst.w	lr, #16
 80066ba:	bf08      	it	eq
 80066bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80066c0:	f380 8809 	msr	PSP, r0
 80066c4:	f3bf 8f6f 	isb	sy
 80066c8:	4770      	bx	lr
 80066ca:	bf00      	nop
 80066cc:	f3af 8000 	nop.w

080066d0 <pxCurrentTCBConst>:
 80066d0:	20000634 	.word	0x20000634
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80066d4:	bf00      	nop
 80066d6:	bf00      	nop

080066d8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80066d8:	b580      	push	{r7, lr}
 80066da:	b082      	sub	sp, #8
 80066dc:	af00      	add	r7, sp, #0
	__asm volatile
 80066de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e2:	f383 8811 	msr	BASEPRI, r3
 80066e6:	f3bf 8f6f 	isb	sy
 80066ea:	f3bf 8f4f 	dsb	sy
 80066ee:	607b      	str	r3, [r7, #4]
}
 80066f0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80066f2:	f7fe fdd3 	bl	800529c <xTaskIncrementTick>
 80066f6:	4603      	mov	r3, r0
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d003      	beq.n	8006704 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80066fc:	4b06      	ldr	r3, [pc, #24]	; (8006718 <xPortSysTickHandler+0x40>)
 80066fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006702:	601a      	str	r2, [r3, #0]
 8006704:	2300      	movs	r3, #0
 8006706:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	f383 8811 	msr	BASEPRI, r3
}
 800670e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006710:	bf00      	nop
 8006712:	3708      	adds	r7, #8
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	e000ed04 	.word	0xe000ed04

0800671c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800671c:	b480      	push	{r7}
 800671e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006720:	4b0b      	ldr	r3, [pc, #44]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006722:	2200      	movs	r2, #0
 8006724:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006726:	4b0b      	ldr	r3, [pc, #44]	; (8006754 <vPortSetupTimerInterrupt+0x38>)
 8006728:	2200      	movs	r2, #0
 800672a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800672c:	4b0a      	ldr	r3, [pc, #40]	; (8006758 <vPortSetupTimerInterrupt+0x3c>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	4a0a      	ldr	r2, [pc, #40]	; (800675c <vPortSetupTimerInterrupt+0x40>)
 8006732:	fba2 2303 	umull	r2, r3, r2, r3
 8006736:	099b      	lsrs	r3, r3, #6
 8006738:	4a09      	ldr	r2, [pc, #36]	; (8006760 <vPortSetupTimerInterrupt+0x44>)
 800673a:	3b01      	subs	r3, #1
 800673c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800673e:	4b04      	ldr	r3, [pc, #16]	; (8006750 <vPortSetupTimerInterrupt+0x34>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
}
 8006744:	bf00      	nop
 8006746:	46bd      	mov	sp, r7
 8006748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674c:	4770      	bx	lr
 800674e:	bf00      	nop
 8006750:	e000e010 	.word	0xe000e010
 8006754:	e000e018 	.word	0xe000e018
 8006758:	20000000 	.word	0x20000000
 800675c:	10624dd3 	.word	0x10624dd3
 8006760:	e000e014 	.word	0xe000e014

08006764 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006764:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006774 <vPortEnableVFP+0x10>
 8006768:	6801      	ldr	r1, [r0, #0]
 800676a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800676e:	6001      	str	r1, [r0, #0]
 8006770:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006772:	bf00      	nop
 8006774:	e000ed88 	.word	0xe000ed88

08006778 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006778:	b480      	push	{r7}
 800677a:	b085      	sub	sp, #20
 800677c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800677e:	f3ef 8305 	mrs	r3, IPSR
 8006782:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006784:	68fb      	ldr	r3, [r7, #12]
 8006786:	2b0f      	cmp	r3, #15
 8006788:	d914      	bls.n	80067b4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800678a:	4a17      	ldr	r2, [pc, #92]	; (80067e8 <vPortValidateInterruptPriority+0x70>)
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	4413      	add	r3, r2
 8006790:	781b      	ldrb	r3, [r3, #0]
 8006792:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006794:	4b15      	ldr	r3, [pc, #84]	; (80067ec <vPortValidateInterruptPriority+0x74>)
 8006796:	781b      	ldrb	r3, [r3, #0]
 8006798:	7afa      	ldrb	r2, [r7, #11]
 800679a:	429a      	cmp	r2, r3
 800679c:	d20a      	bcs.n	80067b4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800679e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a2:	f383 8811 	msr	BASEPRI, r3
 80067a6:	f3bf 8f6f 	isb	sy
 80067aa:	f3bf 8f4f 	dsb	sy
 80067ae:	607b      	str	r3, [r7, #4]
}
 80067b0:	bf00      	nop
 80067b2:	e7fe      	b.n	80067b2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80067b4:	4b0e      	ldr	r3, [pc, #56]	; (80067f0 <vPortValidateInterruptPriority+0x78>)
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80067bc:	4b0d      	ldr	r3, [pc, #52]	; (80067f4 <vPortValidateInterruptPriority+0x7c>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	429a      	cmp	r2, r3
 80067c2:	d90a      	bls.n	80067da <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80067c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067c8:	f383 8811 	msr	BASEPRI, r3
 80067cc:	f3bf 8f6f 	isb	sy
 80067d0:	f3bf 8f4f 	dsb	sy
 80067d4:	603b      	str	r3, [r7, #0]
}
 80067d6:	bf00      	nop
 80067d8:	e7fe      	b.n	80067d8 <vPortValidateInterruptPriority+0x60>
	}
 80067da:	bf00      	nop
 80067dc:	3714      	adds	r7, #20
 80067de:	46bd      	mov	sp, r7
 80067e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e4:	4770      	bx	lr
 80067e6:	bf00      	nop
 80067e8:	e000e3f0 	.word	0xe000e3f0
 80067ec:	20000c60 	.word	0x20000c60
 80067f0:	e000ed0c 	.word	0xe000ed0c
 80067f4:	20000c64 	.word	0x20000c64

080067f8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	; 0x28
 80067fc:	af00      	add	r7, sp, #0
 80067fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006800:	2300      	movs	r3, #0
 8006802:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006804:	f7fe fc8e 	bl	8005124 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006808:	4b5b      	ldr	r3, [pc, #364]	; (8006978 <pvPortMalloc+0x180>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d101      	bne.n	8006814 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006810:	f000 f920 	bl	8006a54 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006814:	4b59      	ldr	r3, [pc, #356]	; (800697c <pvPortMalloc+0x184>)
 8006816:	681a      	ldr	r2, [r3, #0]
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	4013      	ands	r3, r2
 800681c:	2b00      	cmp	r3, #0
 800681e:	f040 8093 	bne.w	8006948 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d01d      	beq.n	8006864 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006828:	2208      	movs	r2, #8
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4413      	add	r3, r2
 800682e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f003 0307 	and.w	r3, r3, #7
 8006836:	2b00      	cmp	r3, #0
 8006838:	d014      	beq.n	8006864 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	f023 0307 	bic.w	r3, r3, #7
 8006840:	3308      	adds	r3, #8
 8006842:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	f003 0307 	and.w	r3, r3, #7
 800684a:	2b00      	cmp	r3, #0
 800684c:	d00a      	beq.n	8006864 <pvPortMalloc+0x6c>
	__asm volatile
 800684e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006852:	f383 8811 	msr	BASEPRI, r3
 8006856:	f3bf 8f6f 	isb	sy
 800685a:	f3bf 8f4f 	dsb	sy
 800685e:	617b      	str	r3, [r7, #20]
}
 8006860:	bf00      	nop
 8006862:	e7fe      	b.n	8006862 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d06e      	beq.n	8006948 <pvPortMalloc+0x150>
 800686a:	4b45      	ldr	r3, [pc, #276]	; (8006980 <pvPortMalloc+0x188>)
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	687a      	ldr	r2, [r7, #4]
 8006870:	429a      	cmp	r2, r3
 8006872:	d869      	bhi.n	8006948 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006874:	4b43      	ldr	r3, [pc, #268]	; (8006984 <pvPortMalloc+0x18c>)
 8006876:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006878:	4b42      	ldr	r3, [pc, #264]	; (8006984 <pvPortMalloc+0x18c>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800687e:	e004      	b.n	800688a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006880:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006882:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800688a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800688c:	685b      	ldr	r3, [r3, #4]
 800688e:	687a      	ldr	r2, [r7, #4]
 8006890:	429a      	cmp	r2, r3
 8006892:	d903      	bls.n	800689c <pvPortMalloc+0xa4>
 8006894:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006896:	681b      	ldr	r3, [r3, #0]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d1f1      	bne.n	8006880 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800689c:	4b36      	ldr	r3, [pc, #216]	; (8006978 <pvPortMalloc+0x180>)
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d050      	beq.n	8006948 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	2208      	movs	r2, #8
 80068ac:	4413      	add	r3, r2
 80068ae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80068b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068b2:	681a      	ldr	r2, [r3, #0]
 80068b4:	6a3b      	ldr	r3, [r7, #32]
 80068b6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80068b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068ba:	685a      	ldr	r2, [r3, #4]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	1ad2      	subs	r2, r2, r3
 80068c0:	2308      	movs	r3, #8
 80068c2:	005b      	lsls	r3, r3, #1
 80068c4:	429a      	cmp	r2, r3
 80068c6:	d91f      	bls.n	8006908 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80068c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	4413      	add	r3, r2
 80068ce:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80068d0:	69bb      	ldr	r3, [r7, #24]
 80068d2:	f003 0307 	and.w	r3, r3, #7
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d00a      	beq.n	80068f0 <pvPortMalloc+0xf8>
	__asm volatile
 80068da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068de:	f383 8811 	msr	BASEPRI, r3
 80068e2:	f3bf 8f6f 	isb	sy
 80068e6:	f3bf 8f4f 	dsb	sy
 80068ea:	613b      	str	r3, [r7, #16]
}
 80068ec:	bf00      	nop
 80068ee:	e7fe      	b.n	80068ee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80068f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068f2:	685a      	ldr	r2, [r3, #4]
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	1ad2      	subs	r2, r2, r3
 80068f8:	69bb      	ldr	r3, [r7, #24]
 80068fa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80068fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068fe:	687a      	ldr	r2, [r7, #4]
 8006900:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006902:	69b8      	ldr	r0, [r7, #24]
 8006904:	f000 f908 	bl	8006b18 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006908:	4b1d      	ldr	r3, [pc, #116]	; (8006980 <pvPortMalloc+0x188>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800690e:	685b      	ldr	r3, [r3, #4]
 8006910:	1ad3      	subs	r3, r2, r3
 8006912:	4a1b      	ldr	r2, [pc, #108]	; (8006980 <pvPortMalloc+0x188>)
 8006914:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006916:	4b1a      	ldr	r3, [pc, #104]	; (8006980 <pvPortMalloc+0x188>)
 8006918:	681a      	ldr	r2, [r3, #0]
 800691a:	4b1b      	ldr	r3, [pc, #108]	; (8006988 <pvPortMalloc+0x190>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	429a      	cmp	r2, r3
 8006920:	d203      	bcs.n	800692a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006922:	4b17      	ldr	r3, [pc, #92]	; (8006980 <pvPortMalloc+0x188>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a18      	ldr	r2, [pc, #96]	; (8006988 <pvPortMalloc+0x190>)
 8006928:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800692a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800692c:	685a      	ldr	r2, [r3, #4]
 800692e:	4b13      	ldr	r3, [pc, #76]	; (800697c <pvPortMalloc+0x184>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	431a      	orrs	r2, r3
 8006934:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006936:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800693a:	2200      	movs	r2, #0
 800693c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800693e:	4b13      	ldr	r3, [pc, #76]	; (800698c <pvPortMalloc+0x194>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	3301      	adds	r3, #1
 8006944:	4a11      	ldr	r2, [pc, #68]	; (800698c <pvPortMalloc+0x194>)
 8006946:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006948:	f7fe fbfa 	bl	8005140 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800694c:	69fb      	ldr	r3, [r7, #28]
 800694e:	f003 0307 	and.w	r3, r3, #7
 8006952:	2b00      	cmp	r3, #0
 8006954:	d00a      	beq.n	800696c <pvPortMalloc+0x174>
	__asm volatile
 8006956:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695a:	f383 8811 	msr	BASEPRI, r3
 800695e:	f3bf 8f6f 	isb	sy
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	60fb      	str	r3, [r7, #12]
}
 8006968:	bf00      	nop
 800696a:	e7fe      	b.n	800696a <pvPortMalloc+0x172>
	return pvReturn;
 800696c:	69fb      	ldr	r3, [r7, #28]
}
 800696e:	4618      	mov	r0, r3
 8006970:	3728      	adds	r7, #40	; 0x28
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}
 8006976:	bf00      	nop
 8006978:	20001828 	.word	0x20001828
 800697c:	2000183c 	.word	0x2000183c
 8006980:	2000182c 	.word	0x2000182c
 8006984:	20001820 	.word	0x20001820
 8006988:	20001830 	.word	0x20001830
 800698c:	20001834 	.word	0x20001834

08006990 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006990:	b580      	push	{r7, lr}
 8006992:	b086      	sub	sp, #24
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d04d      	beq.n	8006a3e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80069a2:	2308      	movs	r3, #8
 80069a4:	425b      	negs	r3, r3
 80069a6:	697a      	ldr	r2, [r7, #20]
 80069a8:	4413      	add	r3, r2
 80069aa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80069ac:	697b      	ldr	r3, [r7, #20]
 80069ae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80069b0:	693b      	ldr	r3, [r7, #16]
 80069b2:	685a      	ldr	r2, [r3, #4]
 80069b4:	4b24      	ldr	r3, [pc, #144]	; (8006a48 <vPortFree+0xb8>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	4013      	ands	r3, r2
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d10a      	bne.n	80069d4 <vPortFree+0x44>
	__asm volatile
 80069be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069c2:	f383 8811 	msr	BASEPRI, r3
 80069c6:	f3bf 8f6f 	isb	sy
 80069ca:	f3bf 8f4f 	dsb	sy
 80069ce:	60fb      	str	r3, [r7, #12]
}
 80069d0:	bf00      	nop
 80069d2:	e7fe      	b.n	80069d2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d00a      	beq.n	80069f2 <vPortFree+0x62>
	__asm volatile
 80069dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069e0:	f383 8811 	msr	BASEPRI, r3
 80069e4:	f3bf 8f6f 	isb	sy
 80069e8:	f3bf 8f4f 	dsb	sy
 80069ec:	60bb      	str	r3, [r7, #8]
}
 80069ee:	bf00      	nop
 80069f0:	e7fe      	b.n	80069f0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	685a      	ldr	r2, [r3, #4]
 80069f6:	4b14      	ldr	r3, [pc, #80]	; (8006a48 <vPortFree+0xb8>)
 80069f8:	681b      	ldr	r3, [r3, #0]
 80069fa:	4013      	ands	r3, r2
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d01e      	beq.n	8006a3e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	2b00      	cmp	r3, #0
 8006a06:	d11a      	bne.n	8006a3e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006a08:	693b      	ldr	r3, [r7, #16]
 8006a0a:	685a      	ldr	r2, [r3, #4]
 8006a0c:	4b0e      	ldr	r3, [pc, #56]	; (8006a48 <vPortFree+0xb8>)
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	43db      	mvns	r3, r3
 8006a12:	401a      	ands	r2, r3
 8006a14:	693b      	ldr	r3, [r7, #16]
 8006a16:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006a18:	f7fe fb84 	bl	8005124 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	685a      	ldr	r2, [r3, #4]
 8006a20:	4b0a      	ldr	r3, [pc, #40]	; (8006a4c <vPortFree+0xbc>)
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	4413      	add	r3, r2
 8006a26:	4a09      	ldr	r2, [pc, #36]	; (8006a4c <vPortFree+0xbc>)
 8006a28:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006a2a:	6938      	ldr	r0, [r7, #16]
 8006a2c:	f000 f874 	bl	8006b18 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006a30:	4b07      	ldr	r3, [pc, #28]	; (8006a50 <vPortFree+0xc0>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3301      	adds	r3, #1
 8006a36:	4a06      	ldr	r2, [pc, #24]	; (8006a50 <vPortFree+0xc0>)
 8006a38:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006a3a:	f7fe fb81 	bl	8005140 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006a3e:	bf00      	nop
 8006a40:	3718      	adds	r7, #24
 8006a42:	46bd      	mov	sp, r7
 8006a44:	bd80      	pop	{r7, pc}
 8006a46:	bf00      	nop
 8006a48:	2000183c 	.word	0x2000183c
 8006a4c:	2000182c 	.word	0x2000182c
 8006a50:	20001838 	.word	0x20001838

08006a54 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006a54:	b480      	push	{r7}
 8006a56:	b085      	sub	sp, #20
 8006a58:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006a5a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006a5e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006a60:	4b27      	ldr	r3, [pc, #156]	; (8006b00 <prvHeapInit+0xac>)
 8006a62:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	f003 0307 	and.w	r3, r3, #7
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d00c      	beq.n	8006a88 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006a6e:	68fb      	ldr	r3, [r7, #12]
 8006a70:	3307      	adds	r3, #7
 8006a72:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	f023 0307 	bic.w	r3, r3, #7
 8006a7a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	1ad3      	subs	r3, r2, r3
 8006a82:	4a1f      	ldr	r2, [pc, #124]	; (8006b00 <prvHeapInit+0xac>)
 8006a84:	4413      	add	r3, r2
 8006a86:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006a8c:	4a1d      	ldr	r2, [pc, #116]	; (8006b04 <prvHeapInit+0xb0>)
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006a92:	4b1c      	ldr	r3, [pc, #112]	; (8006b04 <prvHeapInit+0xb0>)
 8006a94:	2200      	movs	r2, #0
 8006a96:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	68ba      	ldr	r2, [r7, #8]
 8006a9c:	4413      	add	r3, r2
 8006a9e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006aa0:	2208      	movs	r2, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	1a9b      	subs	r3, r3, r2
 8006aa6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	f023 0307 	bic.w	r3, r3, #7
 8006aae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	4a15      	ldr	r2, [pc, #84]	; (8006b08 <prvHeapInit+0xb4>)
 8006ab4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006ab6:	4b14      	ldr	r3, [pc, #80]	; (8006b08 <prvHeapInit+0xb4>)
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	2200      	movs	r2, #0
 8006abc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006abe:	4b12      	ldr	r3, [pc, #72]	; (8006b08 <prvHeapInit+0xb4>)
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	68fa      	ldr	r2, [r7, #12]
 8006ace:	1ad2      	subs	r2, r2, r3
 8006ad0:	683b      	ldr	r3, [r7, #0]
 8006ad2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ad4:	4b0c      	ldr	r3, [pc, #48]	; (8006b08 <prvHeapInit+0xb4>)
 8006ad6:	681a      	ldr	r2, [r3, #0]
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <prvHeapInit+0xb8>)
 8006ae2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006ae4:	683b      	ldr	r3, [r7, #0]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <prvHeapInit+0xbc>)
 8006aea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006aec:	4b09      	ldr	r3, [pc, #36]	; (8006b14 <prvHeapInit+0xc0>)
 8006aee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	20000c68 	.word	0x20000c68
 8006b04:	20001820 	.word	0x20001820
 8006b08:	20001828 	.word	0x20001828
 8006b0c:	20001830 	.word	0x20001830
 8006b10:	2000182c 	.word	0x2000182c
 8006b14:	2000183c 	.word	0x2000183c

08006b18 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006b18:	b480      	push	{r7}
 8006b1a:	b085      	sub	sp, #20
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006b20:	4b28      	ldr	r3, [pc, #160]	; (8006bc4 <prvInsertBlockIntoFreeList+0xac>)
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e002      	b.n	8006b2c <prvInsertBlockIntoFreeList+0x14>
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	681b      	ldr	r3, [r3, #0]
 8006b2a:	60fb      	str	r3, [r7, #12]
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d8f7      	bhi.n	8006b26 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006b36:	68fb      	ldr	r3, [r7, #12]
 8006b38:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006b3a:	68fb      	ldr	r3, [r7, #12]
 8006b3c:	685b      	ldr	r3, [r3, #4]
 8006b3e:	68ba      	ldr	r2, [r7, #8]
 8006b40:	4413      	add	r3, r2
 8006b42:	687a      	ldr	r2, [r7, #4]
 8006b44:	429a      	cmp	r2, r3
 8006b46:	d108      	bne.n	8006b5a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	685a      	ldr	r2, [r3, #4]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	685b      	ldr	r3, [r3, #4]
 8006b50:	441a      	add	r2, r3
 8006b52:	68fb      	ldr	r3, [r7, #12]
 8006b54:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	441a      	add	r2, r3
 8006b66:	68fb      	ldr	r3, [r7, #12]
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d118      	bne.n	8006ba0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681a      	ldr	r2, [r3, #0]
 8006b72:	4b15      	ldr	r3, [pc, #84]	; (8006bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d00d      	beq.n	8006b96 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	685a      	ldr	r2, [r3, #4]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	685b      	ldr	r3, [r3, #4]
 8006b84:	441a      	add	r2, r3
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	681b      	ldr	r3, [r3, #0]
 8006b8e:	681a      	ldr	r2, [r3, #0]
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	601a      	str	r2, [r3, #0]
 8006b94:	e008      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006b96:	4b0c      	ldr	r3, [pc, #48]	; (8006bc8 <prvInsertBlockIntoFreeList+0xb0>)
 8006b98:	681a      	ldr	r2, [r3, #0]
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	601a      	str	r2, [r3, #0]
 8006b9e:	e003      	b.n	8006ba8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006ba8:	68fa      	ldr	r2, [r7, #12]
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	429a      	cmp	r2, r3
 8006bae:	d002      	beq.n	8006bb6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006bb0:	68fb      	ldr	r3, [r7, #12]
 8006bb2:	687a      	ldr	r2, [r7, #4]
 8006bb4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006bb6:	bf00      	nop
 8006bb8:	3714      	adds	r7, #20
 8006bba:	46bd      	mov	sp, r7
 8006bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bc0:	4770      	bx	lr
 8006bc2:	bf00      	nop
 8006bc4:	20001820 	.word	0x20001820
 8006bc8:	20001828 	.word	0x20001828

08006bcc <__libc_init_array>:
 8006bcc:	b570      	push	{r4, r5, r6, lr}
 8006bce:	4d0d      	ldr	r5, [pc, #52]	; (8006c04 <__libc_init_array+0x38>)
 8006bd0:	4c0d      	ldr	r4, [pc, #52]	; (8006c08 <__libc_init_array+0x3c>)
 8006bd2:	1b64      	subs	r4, r4, r5
 8006bd4:	10a4      	asrs	r4, r4, #2
 8006bd6:	2600      	movs	r6, #0
 8006bd8:	42a6      	cmp	r6, r4
 8006bda:	d109      	bne.n	8006bf0 <__libc_init_array+0x24>
 8006bdc:	4d0b      	ldr	r5, [pc, #44]	; (8006c0c <__libc_init_array+0x40>)
 8006bde:	4c0c      	ldr	r4, [pc, #48]	; (8006c10 <__libc_init_array+0x44>)
 8006be0:	f000 f8fa 	bl	8006dd8 <_init>
 8006be4:	1b64      	subs	r4, r4, r5
 8006be6:	10a4      	asrs	r4, r4, #2
 8006be8:	2600      	movs	r6, #0
 8006bea:	42a6      	cmp	r6, r4
 8006bec:	d105      	bne.n	8006bfa <__libc_init_array+0x2e>
 8006bee:	bd70      	pop	{r4, r5, r6, pc}
 8006bf0:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bf4:	4798      	blx	r3
 8006bf6:	3601      	adds	r6, #1
 8006bf8:	e7ee      	b.n	8006bd8 <__libc_init_array+0xc>
 8006bfa:	f855 3b04 	ldr.w	r3, [r5], #4
 8006bfe:	4798      	blx	r3
 8006c00:	3601      	adds	r6, #1
 8006c02:	e7f2      	b.n	8006bea <__libc_init_array+0x1e>
 8006c04:	08006f10 	.word	0x08006f10
 8006c08:	08006f10 	.word	0x08006f10
 8006c0c:	08006f10 	.word	0x08006f10
 8006c10:	08006f14 	.word	0x08006f14

08006c14 <__retarget_lock_acquire_recursive>:
 8006c14:	4770      	bx	lr

08006c16 <__retarget_lock_release_recursive>:
 8006c16:	4770      	bx	lr

08006c18 <memcpy>:
 8006c18:	440a      	add	r2, r1
 8006c1a:	4291      	cmp	r1, r2
 8006c1c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006c20:	d100      	bne.n	8006c24 <memcpy+0xc>
 8006c22:	4770      	bx	lr
 8006c24:	b510      	push	{r4, lr}
 8006c26:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006c2a:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006c2e:	4291      	cmp	r1, r2
 8006c30:	d1f9      	bne.n	8006c26 <memcpy+0xe>
 8006c32:	bd10      	pop	{r4, pc}

08006c34 <memset>:
 8006c34:	4402      	add	r2, r0
 8006c36:	4603      	mov	r3, r0
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d100      	bne.n	8006c3e <memset+0xa>
 8006c3c:	4770      	bx	lr
 8006c3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006c42:	e7f9      	b.n	8006c38 <memset+0x4>

08006c44 <cleanup_glue>:
 8006c44:	b538      	push	{r3, r4, r5, lr}
 8006c46:	460c      	mov	r4, r1
 8006c48:	6809      	ldr	r1, [r1, #0]
 8006c4a:	4605      	mov	r5, r0
 8006c4c:	b109      	cbz	r1, 8006c52 <cleanup_glue+0xe>
 8006c4e:	f7ff fff9 	bl	8006c44 <cleanup_glue>
 8006c52:	4621      	mov	r1, r4
 8006c54:	4628      	mov	r0, r5
 8006c56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006c5a:	f000 b871 	b.w	8006d40 <_free_r>
	...

08006c60 <_reclaim_reent>:
 8006c60:	4b2c      	ldr	r3, [pc, #176]	; (8006d14 <_reclaim_reent+0xb4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	4283      	cmp	r3, r0
 8006c66:	b570      	push	{r4, r5, r6, lr}
 8006c68:	4604      	mov	r4, r0
 8006c6a:	d051      	beq.n	8006d10 <_reclaim_reent+0xb0>
 8006c6c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006c6e:	b143      	cbz	r3, 8006c82 <_reclaim_reent+0x22>
 8006c70:	68db      	ldr	r3, [r3, #12]
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d14a      	bne.n	8006d0c <_reclaim_reent+0xac>
 8006c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006c78:	6819      	ldr	r1, [r3, #0]
 8006c7a:	b111      	cbz	r1, 8006c82 <_reclaim_reent+0x22>
 8006c7c:	4620      	mov	r0, r4
 8006c7e:	f000 f85f 	bl	8006d40 <_free_r>
 8006c82:	6961      	ldr	r1, [r4, #20]
 8006c84:	b111      	cbz	r1, 8006c8c <_reclaim_reent+0x2c>
 8006c86:	4620      	mov	r0, r4
 8006c88:	f000 f85a 	bl	8006d40 <_free_r>
 8006c8c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8006c8e:	b111      	cbz	r1, 8006c96 <_reclaim_reent+0x36>
 8006c90:	4620      	mov	r0, r4
 8006c92:	f000 f855 	bl	8006d40 <_free_r>
 8006c96:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006c98:	b111      	cbz	r1, 8006ca0 <_reclaim_reent+0x40>
 8006c9a:	4620      	mov	r0, r4
 8006c9c:	f000 f850 	bl	8006d40 <_free_r>
 8006ca0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006ca2:	b111      	cbz	r1, 8006caa <_reclaim_reent+0x4a>
 8006ca4:	4620      	mov	r0, r4
 8006ca6:	f000 f84b 	bl	8006d40 <_free_r>
 8006caa:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006cac:	b111      	cbz	r1, 8006cb4 <_reclaim_reent+0x54>
 8006cae:	4620      	mov	r0, r4
 8006cb0:	f000 f846 	bl	8006d40 <_free_r>
 8006cb4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006cb6:	b111      	cbz	r1, 8006cbe <_reclaim_reent+0x5e>
 8006cb8:	4620      	mov	r0, r4
 8006cba:	f000 f841 	bl	8006d40 <_free_r>
 8006cbe:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006cc0:	b111      	cbz	r1, 8006cc8 <_reclaim_reent+0x68>
 8006cc2:	4620      	mov	r0, r4
 8006cc4:	f000 f83c 	bl	8006d40 <_free_r>
 8006cc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006cca:	b111      	cbz	r1, 8006cd2 <_reclaim_reent+0x72>
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 f837 	bl	8006d40 <_free_r>
 8006cd2:	69a3      	ldr	r3, [r4, #24]
 8006cd4:	b1e3      	cbz	r3, 8006d10 <_reclaim_reent+0xb0>
 8006cd6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006cd8:	4620      	mov	r0, r4
 8006cda:	4798      	blx	r3
 8006cdc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006cde:	b1b9      	cbz	r1, 8006d10 <_reclaim_reent+0xb0>
 8006ce0:	4620      	mov	r0, r4
 8006ce2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006ce6:	f7ff bfad 	b.w	8006c44 <cleanup_glue>
 8006cea:	5949      	ldr	r1, [r1, r5]
 8006cec:	b941      	cbnz	r1, 8006d00 <_reclaim_reent+0xa0>
 8006cee:	3504      	adds	r5, #4
 8006cf0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006cf2:	2d80      	cmp	r5, #128	; 0x80
 8006cf4:	68d9      	ldr	r1, [r3, #12]
 8006cf6:	d1f8      	bne.n	8006cea <_reclaim_reent+0x8a>
 8006cf8:	4620      	mov	r0, r4
 8006cfa:	f000 f821 	bl	8006d40 <_free_r>
 8006cfe:	e7ba      	b.n	8006c76 <_reclaim_reent+0x16>
 8006d00:	680e      	ldr	r6, [r1, #0]
 8006d02:	4620      	mov	r0, r4
 8006d04:	f000 f81c 	bl	8006d40 <_free_r>
 8006d08:	4631      	mov	r1, r6
 8006d0a:	e7ef      	b.n	8006cec <_reclaim_reent+0x8c>
 8006d0c:	2500      	movs	r5, #0
 8006d0e:	e7ef      	b.n	8006cf0 <_reclaim_reent+0x90>
 8006d10:	bd70      	pop	{r4, r5, r6, pc}
 8006d12:	bf00      	nop
 8006d14:	20000010 	.word	0x20000010

08006d18 <strcpy>:
 8006d18:	4603      	mov	r3, r0
 8006d1a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d1e:	f803 2b01 	strb.w	r2, [r3], #1
 8006d22:	2a00      	cmp	r2, #0
 8006d24:	d1f9      	bne.n	8006d1a <strcpy+0x2>
 8006d26:	4770      	bx	lr

08006d28 <__malloc_lock>:
 8006d28:	4801      	ldr	r0, [pc, #4]	; (8006d30 <__malloc_lock+0x8>)
 8006d2a:	f7ff bf73 	b.w	8006c14 <__retarget_lock_acquire_recursive>
 8006d2e:	bf00      	nop
 8006d30:	20001840 	.word	0x20001840

08006d34 <__malloc_unlock>:
 8006d34:	4801      	ldr	r0, [pc, #4]	; (8006d3c <__malloc_unlock+0x8>)
 8006d36:	f7ff bf6e 	b.w	8006c16 <__retarget_lock_release_recursive>
 8006d3a:	bf00      	nop
 8006d3c:	20001840 	.word	0x20001840

08006d40 <_free_r>:
 8006d40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006d42:	2900      	cmp	r1, #0
 8006d44:	d044      	beq.n	8006dd0 <_free_r+0x90>
 8006d46:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006d4a:	9001      	str	r0, [sp, #4]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f1a1 0404 	sub.w	r4, r1, #4
 8006d52:	bfb8      	it	lt
 8006d54:	18e4      	addlt	r4, r4, r3
 8006d56:	f7ff ffe7 	bl	8006d28 <__malloc_lock>
 8006d5a:	4a1e      	ldr	r2, [pc, #120]	; (8006dd4 <_free_r+0x94>)
 8006d5c:	9801      	ldr	r0, [sp, #4]
 8006d5e:	6813      	ldr	r3, [r2, #0]
 8006d60:	b933      	cbnz	r3, 8006d70 <_free_r+0x30>
 8006d62:	6063      	str	r3, [r4, #4]
 8006d64:	6014      	str	r4, [r2, #0]
 8006d66:	b003      	add	sp, #12
 8006d68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006d6c:	f7ff bfe2 	b.w	8006d34 <__malloc_unlock>
 8006d70:	42a3      	cmp	r3, r4
 8006d72:	d908      	bls.n	8006d86 <_free_r+0x46>
 8006d74:	6825      	ldr	r5, [r4, #0]
 8006d76:	1961      	adds	r1, r4, r5
 8006d78:	428b      	cmp	r3, r1
 8006d7a:	bf01      	itttt	eq
 8006d7c:	6819      	ldreq	r1, [r3, #0]
 8006d7e:	685b      	ldreq	r3, [r3, #4]
 8006d80:	1949      	addeq	r1, r1, r5
 8006d82:	6021      	streq	r1, [r4, #0]
 8006d84:	e7ed      	b.n	8006d62 <_free_r+0x22>
 8006d86:	461a      	mov	r2, r3
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	b10b      	cbz	r3, 8006d90 <_free_r+0x50>
 8006d8c:	42a3      	cmp	r3, r4
 8006d8e:	d9fa      	bls.n	8006d86 <_free_r+0x46>
 8006d90:	6811      	ldr	r1, [r2, #0]
 8006d92:	1855      	adds	r5, r2, r1
 8006d94:	42a5      	cmp	r5, r4
 8006d96:	d10b      	bne.n	8006db0 <_free_r+0x70>
 8006d98:	6824      	ldr	r4, [r4, #0]
 8006d9a:	4421      	add	r1, r4
 8006d9c:	1854      	adds	r4, r2, r1
 8006d9e:	42a3      	cmp	r3, r4
 8006da0:	6011      	str	r1, [r2, #0]
 8006da2:	d1e0      	bne.n	8006d66 <_free_r+0x26>
 8006da4:	681c      	ldr	r4, [r3, #0]
 8006da6:	685b      	ldr	r3, [r3, #4]
 8006da8:	6053      	str	r3, [r2, #4]
 8006daa:	4421      	add	r1, r4
 8006dac:	6011      	str	r1, [r2, #0]
 8006dae:	e7da      	b.n	8006d66 <_free_r+0x26>
 8006db0:	d902      	bls.n	8006db8 <_free_r+0x78>
 8006db2:	230c      	movs	r3, #12
 8006db4:	6003      	str	r3, [r0, #0]
 8006db6:	e7d6      	b.n	8006d66 <_free_r+0x26>
 8006db8:	6825      	ldr	r5, [r4, #0]
 8006dba:	1961      	adds	r1, r4, r5
 8006dbc:	428b      	cmp	r3, r1
 8006dbe:	bf04      	itt	eq
 8006dc0:	6819      	ldreq	r1, [r3, #0]
 8006dc2:	685b      	ldreq	r3, [r3, #4]
 8006dc4:	6063      	str	r3, [r4, #4]
 8006dc6:	bf04      	itt	eq
 8006dc8:	1949      	addeq	r1, r1, r5
 8006dca:	6021      	streq	r1, [r4, #0]
 8006dcc:	6054      	str	r4, [r2, #4]
 8006dce:	e7ca      	b.n	8006d66 <_free_r+0x26>
 8006dd0:	b003      	add	sp, #12
 8006dd2:	bd30      	pop	{r4, r5, pc}
 8006dd4:	20001844 	.word	0x20001844

08006dd8 <_init>:
 8006dd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dda:	bf00      	nop
 8006ddc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dde:	bc08      	pop	{r3}
 8006de0:	469e      	mov	lr, r3
 8006de2:	4770      	bx	lr

08006de4 <_fini>:
 8006de4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de6:	bf00      	nop
 8006de8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dea:	bc08      	pop	{r3}
 8006dec:	469e      	mov	lr, r3
 8006dee:	4770      	bx	lr
