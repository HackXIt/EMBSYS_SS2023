
Assign2_Rieder_Nikolaus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003f0  08008e54  08008e54  00018e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009244  08009244  000200a0  2**0
                  CONTENTS
  4 .ARM          00000008  08009244  08009244  00019244  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800924c  0800924c  000200a0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800924c  0800924c  0001924c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009250  08009250  00019250  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a0  20000000  08009254  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008924  200000a0  080092f4  000200a0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200089c4  080092f4  000289c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001eecb  00000000  00000000  000200d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000437f  00000000  00000000  0003ef9b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018d0  00000000  00000000  00043320  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001708  00000000  00000000  00044bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025719  00000000  00000000  000462f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d51f  00000000  00000000  0006ba11  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7b6d  00000000  00000000  00088f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160a9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007078  00000000  00000000  00160af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000a0 	.word	0x200000a0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008e3c 	.word	0x08008e3c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000a4 	.word	0x200000a4
 80001cc:	08008e3c 	.word	0x08008e3c

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
	taskPoolHandle = Ringbuffer_Init(NUM_PRODS);
 8000578:	200a      	movs	r0, #10
 800057a:	f000 fab7 	bl	8000aec <Ringbuffer_Init>
 800057e:	4603      	mov	r3, r0
 8000580:	4a09      	ldr	r2, [pc, #36]	; (80005a8 <MX_FREERTOS_Init+0x34>)
 8000582:	6013      	str	r3, [r2, #0]

  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of consumerTask */
  consumerTaskHandle = osThreadNew(ConsumerTask, NULL, &consumerTask_attributes);
 8000584:	4a09      	ldr	r2, [pc, #36]	; (80005ac <MX_FREERTOS_Init+0x38>)
 8000586:	2100      	movs	r1, #0
 8000588:	4809      	ldr	r0, [pc, #36]	; (80005b0 <MX_FREERTOS_Init+0x3c>)
 800058a:	f003 fe6a 	bl	8004262 <osThreadNew>
 800058e:	4603      	mov	r3, r0
 8000590:	4a08      	ldr	r2, [pc, #32]	; (80005b4 <MX_FREERTOS_Init+0x40>)
 8000592:	6013      	str	r3, [r2, #0]

  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartTasks, (void*) &producerCount, &InitTask_attributes);
 8000594:	4a08      	ldr	r2, [pc, #32]	; (80005b8 <MX_FREERTOS_Init+0x44>)
 8000596:	4909      	ldr	r1, [pc, #36]	; (80005bc <MX_FREERTOS_Init+0x48>)
 8000598:	4809      	ldr	r0, [pc, #36]	; (80005c0 <MX_FREERTOS_Init+0x4c>)
 800059a:	f003 fe62 	bl	8004262 <osThreadNew>
 800059e:	4603      	mov	r3, r0
 80005a0:	4a08      	ldr	r2, [pc, #32]	; (80005c4 <MX_FREERTOS_Init+0x50>)
 80005a2:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a4:	bf00      	nop
 80005a6:	bd80      	pop	{r7, pc}
 80005a8:	200000bc 	.word	0x200000bc
 80005ac:	08009054 	.word	0x08009054
 80005b0:	0800087d 	.word	0x0800087d
 80005b4:	200000c0 	.word	0x200000c0
 80005b8:	08009078 	.word	0x08009078
 80005bc:	20000000 	.word	0x20000000
 80005c0:	08000755 	.word	0x08000755
 80005c4:	200000c4 	.word	0x200000c4

080005c8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c8:	b580      	push	{r7, lr}
 80005ca:	b088      	sub	sp, #32
 80005cc:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ce:	f107 030c 	add.w	r3, r7, #12
 80005d2:	2200      	movs	r2, #0
 80005d4:	601a      	str	r2, [r3, #0]
 80005d6:	605a      	str	r2, [r3, #4]
 80005d8:	609a      	str	r2, [r3, #8]
 80005da:	60da      	str	r2, [r3, #12]
 80005dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005de:	4b1d      	ldr	r3, [pc, #116]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e2:	4a1c      	ldr	r2, [pc, #112]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005e4:	f043 0304 	orr.w	r3, r3, #4
 80005e8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ea:	4b1a      	ldr	r3, [pc, #104]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ee:	f003 0304 	and.w	r3, r3, #4
 80005f2:	60bb      	str	r3, [r7, #8]
 80005f4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f6:	4b17      	ldr	r3, [pc, #92]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fa:	4a16      	ldr	r2, [pc, #88]	; (8000654 <MX_GPIO_Init+0x8c>)
 80005fc:	f043 0301 	orr.w	r3, r3, #1
 8000600:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000602:	4b14      	ldr	r3, [pc, #80]	; (8000654 <MX_GPIO_Init+0x8c>)
 8000604:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000606:	f003 0301 	and.w	r3, r3, #1
 800060a:	607b      	str	r3, [r7, #4]
 800060c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060e:	4b11      	ldr	r3, [pc, #68]	; (8000654 <MX_GPIO_Init+0x8c>)
 8000610:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000612:	4a10      	ldr	r2, [pc, #64]	; (8000654 <MX_GPIO_Init+0x8c>)
 8000614:	f043 0302 	orr.w	r3, r3, #2
 8000618:	64d3      	str	r3, [r2, #76]	; 0x4c
 800061a:	4b0e      	ldr	r3, [pc, #56]	; (8000654 <MX_GPIO_Init+0x8c>)
 800061c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061e:	f003 0302 	and.w	r3, r3, #2
 8000622:	603b      	str	r3, [r7, #0]
 8000624:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000626:	2200      	movs	r2, #0
 8000628:	2108      	movs	r1, #8
 800062a:	480b      	ldr	r0, [pc, #44]	; (8000658 <MX_GPIO_Init+0x90>)
 800062c:	f001 f814 	bl	8001658 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 8000630:	2308      	movs	r3, #8
 8000632:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000634:	2301      	movs	r3, #1
 8000636:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000638:	2300      	movs	r3, #0
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800063c:	2300      	movs	r3, #0
 800063e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 8000640:	f107 030c 	add.w	r3, r7, #12
 8000644:	4619      	mov	r1, r3
 8000646:	4804      	ldr	r0, [pc, #16]	; (8000658 <MX_GPIO_Init+0x90>)
 8000648:	f000 fe9c 	bl	8001384 <HAL_GPIO_Init>

}
 800064c:	bf00      	nop
 800064e:	3720      	adds	r7, #32
 8000650:	46bd      	mov	sp, r7
 8000652:	bd80      	pop	{r7, pc}
 8000654:	40021000 	.word	0x40021000
 8000658:	48000400 	.word	0x48000400

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 fcf5 	bl	800104e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f80b 	bl	800067e <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f7ff ffae 	bl	80005c8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066c:	f000 fc24 	bl	8000eb8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000670:	f003 fcf0 	bl	8004054 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000674:	f7ff ff7e 	bl	8000574 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000678:	f003 fd10 	bl	800409c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800067c:	e7fe      	b.n	800067c <main+0x20>

0800067e <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067e:	b580      	push	{r7, lr}
 8000680:	b096      	sub	sp, #88	; 0x58
 8000682:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000684:	f107 0314 	add.w	r3, r7, #20
 8000688:	2244      	movs	r2, #68	; 0x44
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f007 fbde 	bl	8007e4e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000692:	463b      	mov	r3, r7
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80006a0:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a4:	f000 fffe 	bl	80016a4 <HAL_PWREx_ControlVoltageScaling>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d001      	beq.n	80006b2 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006ae:	f000 f84b 	bl	8000748 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006b2:	2310      	movs	r3, #16
 80006b4:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b6:	2301      	movs	r3, #1
 80006b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006be:	2360      	movs	r3, #96	; 0x60
 80006c0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c2:	2302      	movs	r3, #2
 80006c4:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c6:	2301      	movs	r3, #1
 80006c8:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006ca:	2301      	movs	r3, #1
 80006cc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006ce:	2310      	movs	r3, #16
 80006d0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006d2:	2307      	movs	r3, #7
 80006d4:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006da:	2302      	movs	r3, #2
 80006dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006de:	f107 0314 	add.w	r3, r7, #20
 80006e2:	4618      	mov	r0, r3
 80006e4:	f001 f834 	bl	8001750 <HAL_RCC_OscConfig>
 80006e8:	4603      	mov	r3, r0
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d001      	beq.n	80006f2 <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006ee:	f000 f82b 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006f2:	230f      	movs	r3, #15
 80006f4:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f6:	2303      	movs	r3, #3
 80006f8:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000706:	463b      	mov	r3, r7
 8000708:	2101      	movs	r1, #1
 800070a:	4618      	mov	r0, r3
 800070c:	f001 fc34 	bl	8001f78 <HAL_RCC_ClockConfig>
 8000710:	4603      	mov	r3, r0
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000716:	f000 f817 	bl	8000748 <Error_Handler>
  }
}
 800071a:	bf00      	nop
 800071c:	3758      	adds	r7, #88	; 0x58
 800071e:	46bd      	mov	sp, r7
 8000720:	bd80      	pop	{r7, pc}
	...

08000724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d101      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000736:	f000 fca3 	bl	8001080 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40001000 	.word	0x40001000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <StartTasks>:
		"producerTask7",
		"producerTask8",
		"producerTask9"
};

void StartTasks(void *argument) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	uint8_t *producerCount = (uint8_t*)argument;
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	613b      	str	r3, [r7, #16]
	//char taskName[14];
	osThreadAttr_t *producer_attributes = (osThreadAttr_t *) pvPortMalloc(sizeof(osThreadAttr_t) * *producerCount);
 8000760:	693b      	ldr	r3, [r7, #16]
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	461a      	mov	r2, r3
 8000766:	4613      	mov	r3, r2
 8000768:	00db      	lsls	r3, r3, #3
 800076a:	4413      	add	r3, r2
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	4618      	mov	r0, r3
 8000770:	f007 f852 	bl	8007818 <pvPortMalloc>
 8000774:	60f8      	str	r0, [r7, #12]
	  .name = taskName,
	  .stack_size = 64 * 4,
	  .priority = (osPriority_t) osPriorityLow,
	};
	*/
	for(uint8_t i = 0; i < *producerCount; i++) {
 8000776:	2300      	movs	r3, #0
 8000778:	75fb      	strb	r3, [r7, #23]
 800077a:	e031      	b.n	80007e0 <StartTasks+0x8c>
		producer_attributes[i].name = producerNames[i];
 800077c:	7df9      	ldrb	r1, [r7, #23]
 800077e:	7dfa      	ldrb	r2, [r7, #23]
 8000780:	4613      	mov	r3, r2
 8000782:	00db      	lsls	r3, r3, #3
 8000784:	4413      	add	r3, r2
 8000786:	009b      	lsls	r3, r3, #2
 8000788:	461a      	mov	r2, r3
 800078a:	68fb      	ldr	r3, [r7, #12]
 800078c:	4413      	add	r3, r2
 800078e:	4a18      	ldr	r2, [pc, #96]	; (80007f0 <StartTasks+0x9c>)
 8000790:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8000794:	601a      	str	r2, [r3, #0]
		producer_attributes[i].stack_size = 64 * 4;
 8000796:	7dfa      	ldrb	r2, [r7, #23]
 8000798:	4613      	mov	r3, r2
 800079a:	00db      	lsls	r3, r3, #3
 800079c:	4413      	add	r3, r2
 800079e:	009b      	lsls	r3, r3, #2
 80007a0:	461a      	mov	r2, r3
 80007a2:	68fb      	ldr	r3, [r7, #12]
 80007a4:	4413      	add	r3, r2
 80007a6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80007aa:	615a      	str	r2, [r3, #20]
		producer_attributes[i].priority = (osPriority_t) osPriorityLow;
 80007ac:	7dfa      	ldrb	r2, [r7, #23]
 80007ae:	4613      	mov	r3, r2
 80007b0:	00db      	lsls	r3, r3, #3
 80007b2:	4413      	add	r3, r2
 80007b4:	009b      	lsls	r3, r3, #2
 80007b6:	461a      	mov	r2, r3
 80007b8:	68fb      	ldr	r3, [r7, #12]
 80007ba:	4413      	add	r3, r2
 80007bc:	2208      	movs	r2, #8
 80007be:	619a      	str	r2, [r3, #24]
		osThreadNew(ProducerTask, NULL, &producer_attributes[i]);
 80007c0:	7dfa      	ldrb	r2, [r7, #23]
 80007c2:	4613      	mov	r3, r2
 80007c4:	00db      	lsls	r3, r3, #3
 80007c6:	4413      	add	r3, r2
 80007c8:	009b      	lsls	r3, r3, #2
 80007ca:	461a      	mov	r2, r3
 80007cc:	68fb      	ldr	r3, [r7, #12]
 80007ce:	4413      	add	r3, r2
 80007d0:	461a      	mov	r2, r3
 80007d2:	2100      	movs	r1, #0
 80007d4:	4807      	ldr	r0, [pc, #28]	; (80007f4 <StartTasks+0xa0>)
 80007d6:	f003 fd44 	bl	8004262 <osThreadNew>
	for(uint8_t i = 0; i < *producerCount; i++) {
 80007da:	7dfb      	ldrb	r3, [r7, #23]
 80007dc:	3301      	adds	r3, #1
 80007de:	75fb      	strb	r3, [r7, #23]
 80007e0:	693b      	ldr	r3, [r7, #16]
 80007e2:	781b      	ldrb	r3, [r3, #0]
 80007e4:	7dfa      	ldrb	r2, [r7, #23]
 80007e6:	429a      	cmp	r2, r3
 80007e8:	d3c8      	bcc.n	800077c <StartTasks+0x28>
	}
	osThreadExit();
 80007ea:	f003 fdf2 	bl	80043d2 <osThreadExit>
 80007ee:	bf00      	nop
 80007f0:	20000004 	.word	0x20000004
 80007f4:	080007f9 	.word	0x080007f9

080007f8 <ProducerTask>:
}

void ProducerTask(void *argument) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
	srand(osKernelGetSysTimerCount());
 8000800:	f003 fcf6 	bl	80041f0 <osKernelGetSysTimerCount>
 8000804:	4603      	mov	r3, r0
 8000806:	4618      	mov	r0, r3
 8000808:	f007 fbd6 	bl	8007fb8 <srand>
	rb_elem_t producedElement = {
			.producer_id = osThreadGetId(),
 800080c:	f003 fdd6 	bl	80043bc <osThreadGetId>
 8000810:	4603      	mov	r3, r0
	rb_elem_t producedElement = {
 8000812:	60bb      	str	r3, [r7, #8]
			.producer_value = (rand() % 0xFF)
 8000814:	f007 fbfe 	bl	8008014 <rand>
 8000818:	4602      	mov	r2, r0
 800081a:	4b17      	ldr	r3, [pc, #92]	; (8000878 <ProducerTask+0x80>)
 800081c:	fb83 1302 	smull	r1, r3, r3, r2
 8000820:	4413      	add	r3, r2
 8000822:	11d9      	asrs	r1, r3, #7
 8000824:	17d3      	asrs	r3, r2, #31
 8000826:	1ac9      	subs	r1, r1, r3
 8000828:	460b      	mov	r3, r1
 800082a:	021b      	lsls	r3, r3, #8
 800082c:	1a5b      	subs	r3, r3, r1
 800082e:	1ad1      	subs	r1, r2, r3
	rb_elem_t producedElement = {
 8000830:	b2cb      	uxtb	r3, r1
 8000832:	733b      	strb	r3, [r7, #12]
	};
	for(;;) {
		if(!Ringbuffer_Put(producedElement)) {
 8000834:	f107 0308 	add.w	r3, r7, #8
 8000838:	e893 0003 	ldmia.w	r3, {r0, r1}
 800083c:	f000 f87e 	bl	800093c <Ringbuffer_Put>
 8000840:	4603      	mov	r3, r0
 8000842:	f083 0301 	eor.w	r3, r3, #1
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b00      	cmp	r3, #0
 800084a:	d004      	beq.n	8000856 <ProducerTask+0x5e>
			osDelay(1000);
 800084c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000850:	f003 fdc5 	bl	80043de <osDelay>
 8000854:	e7ee      	b.n	8000834 <ProducerTask+0x3c>
		} else {
			// Calculate next round
			producedElement.producer_value = rand() % 0xFF;
 8000856:	f007 fbdd 	bl	8008014 <rand>
 800085a:	4602      	mov	r2, r0
 800085c:	4b06      	ldr	r3, [pc, #24]	; (8000878 <ProducerTask+0x80>)
 800085e:	fb83 1302 	smull	r1, r3, r3, r2
 8000862:	4413      	add	r3, r2
 8000864:	11d9      	asrs	r1, r3, #7
 8000866:	17d3      	asrs	r3, r2, #31
 8000868:	1ac9      	subs	r1, r1, r3
 800086a:	460b      	mov	r3, r1
 800086c:	021b      	lsls	r3, r3, #8
 800086e:	1a5b      	subs	r3, r3, r1
 8000870:	1ad1      	subs	r1, r2, r3
 8000872:	b2cb      	uxtb	r3, r1
 8000874:	733b      	strb	r3, [r7, #12]
		if(!Ringbuffer_Put(producedElement)) {
 8000876:	e7dd      	b.n	8000834 <ProducerTask+0x3c>
 8000878:	80808081 	.word	0x80808081

0800087c <ConsumerTask>:
		}
	}
}
void ConsumerTask(void *argument) {
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
	rb_elem_t consumedElement = {
 8000884:	2300      	movs	r3, #0
 8000886:	60fb      	str	r3, [r7, #12]
 8000888:	2300      	movs	r3, #0
 800088a:	743b      	strb	r3, [r7, #16]
	};
#ifdef NO_RETARGET
	char buffer[255];
#endif
	for(;;) {
		if(!Ringbuffer_Get(&consumedElement)) {
 800088c:	f107 030c 	add.w	r3, r7, #12
 8000890:	4618      	mov	r0, r3
 8000892:	f000 f8bf 	bl	8000a14 <Ringbuffer_Get>
 8000896:	4603      	mov	r3, r0
 8000898:	f083 0301 	eor.w	r3, r3, #1
 800089c:	b2db      	uxtb	r3, r3
 800089e:	2b00      	cmp	r3, #0
 80008a0:	d004      	beq.n	80008ac <ConsumerTask+0x30>
			// Yield execution to another READY thread with same priority;
			// (Doesn't work since it doesn't set current thread to BLOCKED)
			//osThreadYield();
			osDelay(1000); // Hand over execution to another thread by blocking this thread
 80008a2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a6:	f003 fd9a 	bl	80043de <osDelay>
 80008aa:	e7ef      	b.n	800088c <ConsumerTask+0x10>
		} else {
#ifndef NO_RETARGET
			const char * taskName = osThreadGetName(consumedElement.producer_id);
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	4618      	mov	r0, r3
 80008b0:	f003 fd69 	bl	8004386 <osThreadGetName>
 80008b4:	6178      	str	r0, [r7, #20]
			if(taskName == NULL) {
 80008b6:	697b      	ldr	r3, [r7, #20]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d106      	bne.n	80008ca <ConsumerTask+0x4e>
				printf("NULL(%p) => %u\r\n",
 80008bc:	68fb      	ldr	r3, [r7, #12]
									consumedElement.producer_id,
									consumedElement.producer_value);
 80008be:	7c3a      	ldrb	r2, [r7, #16]
				printf("NULL(%p) => %u\r\n",
 80008c0:	4619      	mov	r1, r3
 80008c2:	4805      	ldr	r0, [pc, #20]	; (80008d8 <ConsumerTask+0x5c>)
 80008c4:	f007 fb60 	bl	8007f88 <iprintf>
 80008c8:	e7e0      	b.n	800088c <ConsumerTask+0x10>
			} else {
				printf("%s(%p) => %u\r\n",
 80008ca:	68fa      	ldr	r2, [r7, #12]
									taskName,
									consumedElement.producer_id,
									consumedElement.producer_value);
 80008cc:	7c3b      	ldrb	r3, [r7, #16]
				printf("%s(%p) => %u\r\n",
 80008ce:	6979      	ldr	r1, [r7, #20]
 80008d0:	4802      	ldr	r0, [pc, #8]	; (80008dc <ConsumerTask+0x60>)
 80008d2:	f007 fb59 	bl	8007f88 <iprintf>
		if(!Ringbuffer_Get(&consumedElement)) {
 80008d6:	e7d9      	b.n	800088c <ConsumerTask+0x10>
 80008d8:	08008f10 	.word	0x08008f10
 80008dc:	08008f24 	.word	0x08008f24

080008e0 <_write>:
  * @param 	file 	...	file descriptor
  * @param	ptr		... pointer to the data buffer.
  * @param	len 	...	length of the buffer in bytes.
  * @retval (int)	... Successfully transmitted bytes.
  */
int _write(int file, char *ptr, int len){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b084      	sub	sp, #16
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	60f8      	str	r0, [r7, #12]
 80008e8:	60b9      	str	r1, [r7, #8]
 80008ea:	607a      	str	r2, [r7, #4]
	while(len--){
 80008ec:	e006      	b.n	80008fc <_write+0x1c>
		putchar(*ptr++);
 80008ee:	68bb      	ldr	r3, [r7, #8]
 80008f0:	1c5a      	adds	r2, r3, #1
 80008f2:	60ba      	str	r2, [r7, #8]
 80008f4:	781b      	ldrb	r3, [r3, #0]
 80008f6:	4618      	mov	r0, r3
 80008f8:	f000 f80a 	bl	8000910 <putchar>
	while(len--){
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	1e5a      	subs	r2, r3, #1
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d1f3      	bne.n	80008ee <_write+0xe>
	}
	return len;
 8000906:	687b      	ldr	r3, [r7, #4]
}
 8000908:	4618      	mov	r0, r3
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <putchar>:
/**
 *
 * @param ch		... Character to be transmitted.
 * @return	(int) 	... Returns the character.
 */
int	putchar (int ch){
 8000910:	b580      	push	{r7, lr}
 8000912:	b084      	sub	sp, #16
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
	char charTemp = (char) ch;
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	b2db      	uxtb	r3, r3
 800091c:	73fb      	strb	r3, [r7, #15]
	 * Either that, or both '\r' and '\n' need to be provided.
	 */
//	if (charTemp == '\n'){
//		putchar('\r');
//	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&charTemp, 1, -1);
 800091e:	f107 010f 	add.w	r1, r7, #15
 8000922:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000926:	2201      	movs	r2, #1
 8000928:	4803      	ldr	r0, [pc, #12]	; (8000938 <putchar+0x28>)
 800092a:	f002 fb31 	bl	8002f90 <HAL_UART_Transmit>
	return ch;
 800092e:	687b      	ldr	r3, [r7, #4]
}
 8000930:	4618      	mov	r0, r3
 8000932:	3710      	adds	r7, #16
 8000934:	46bd      	mov	sp, r7
 8000936:	bd80      	pop	{r7, pc}
 8000938:	2000011c 	.word	0x2000011c

0800093c <Ringbuffer_Put>:
};

// Global variable for a single allocated ringbuffer on the shared memory
ringbuffer_t *rb_allocated = NULL;

bool Ringbuffer_Put(rb_elem_t elem) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b084      	sub	sp, #16
 8000940:	af00      	add	r7, sp, #0
 8000942:	463b      	mov	r3, r7
 8000944:	e883 0003 	stmia.w	r3, {r0, r1}
	osStatus_t ret;
	// Check if ringbuffer is initialized
	if(rb_allocated == NULL) {
 8000948:	4b2c      	ldr	r3, [pc, #176]	; (80009fc <Ringbuffer_Put+0xc0>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	2b00      	cmp	r3, #0
 800094e:	d106      	bne.n	800095e <Ringbuffer_Put+0x22>
		Ringbuffer_ErrorHandler(0, "Ringbuffer_Put()", "uninitialized");
 8000950:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <Ringbuffer_Put+0xc4>)
 8000952:	492c      	ldr	r1, [pc, #176]	; (8000a04 <Ringbuffer_Put+0xc8>)
 8000954:	2000      	movs	r0, #0
 8000956:	f000 f91b 	bl	8000b90 <Ringbuffer_ErrorHandler>
		return false;
 800095a:	2300      	movs	r3, #0
 800095c:	e04a      	b.n	80009f4 <Ringbuffer_Put+0xb8>
	}
	// Check semaphores
	if((ret = osSemaphoreAcquire(rb_allocated->sem_write, osWaitForever)) != osOK) {
 800095e:	4b27      	ldr	r3, [pc, #156]	; (80009fc <Ringbuffer_Put+0xc0>)
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000968:	4618      	mov	r0, r3
 800096a:	f003 fddd 	bl	8004528 <osSemaphoreAcquire>
 800096e:	60f8      	str	r0, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d006      	beq.n	8000984 <Ringbuffer_Put+0x48>
		Ringbuffer_ErrorHandler(ret, "Ringbuffer_Put()", "acquire (write)");
 8000976:	4a24      	ldr	r2, [pc, #144]	; (8000a08 <Ringbuffer_Put+0xcc>)
 8000978:	4922      	ldr	r1, [pc, #136]	; (8000a04 <Ringbuffer_Put+0xc8>)
 800097a:	68f8      	ldr	r0, [r7, #12]
 800097c:	f000 f908 	bl	8000b90 <Ringbuffer_ErrorHandler>
		return false; // Could not acquire semaphore to lock read in given timeout
 8000980:	2300      	movs	r3, #0
 8000982:	e037      	b.n	80009f4 <Ringbuffer_Put+0xb8>
	}
	osKernelLock();
 8000984:	f003 fbb0 	bl	80040e8 <osKernelLock>
	// Write ringbuffer element
	rb_allocated->rb_elements[rb_allocated->wIndex] = elem;
 8000988:	4b1c      	ldr	r3, [pc, #112]	; (80009fc <Ringbuffer_Put+0xc0>)
 800098a:	681a      	ldr	r2, [r3, #0]
 800098c:	4b1b      	ldr	r3, [pc, #108]	; (80009fc <Ringbuffer_Put+0xc0>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	4413      	add	r3, r2
 8000998:	463a      	mov	r2, r7
 800099a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800099e:	e883 0003 	stmia.w	r3, {r0, r1}
	rb_allocated->wIndex = (rb_allocated->wIndex+1) % RINGBUFFER_SIZE;
 80009a2:	4b16      	ldr	r3, [pc, #88]	; (80009fc <Ringbuffer_Put+0xc0>)
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80009aa:	1c5a      	adds	r2, r3, #1
 80009ac:	4b17      	ldr	r3, [pc, #92]	; (8000a0c <Ringbuffer_Put+0xd0>)
 80009ae:	fb83 1302 	smull	r1, r3, r3, r2
 80009b2:	1099      	asrs	r1, r3, #2
 80009b4:	17d3      	asrs	r3, r2, #31
 80009b6:	1ac9      	subs	r1, r1, r3
 80009b8:	460b      	mov	r3, r1
 80009ba:	009b      	lsls	r3, r3, #2
 80009bc:	440b      	add	r3, r1
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	1ad1      	subs	r1, r2, r3
 80009c2:	4b0e      	ldr	r3, [pc, #56]	; (80009fc <Ringbuffer_Put+0xc0>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	b2ca      	uxtb	r2, r1
 80009c8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	osKernelUnlock();
 80009cc:	f003 fbb2 	bl	8004134 <osKernelUnlock>
	// Release semaphores
	if((ret = osSemaphoreRelease(rb_allocated->sem_read)) != osOK) {
 80009d0:	4b0a      	ldr	r3, [pc, #40]	; (80009fc <Ringbuffer_Put+0xc0>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80009d6:	4618      	mov	r0, r3
 80009d8:	f003 fdf8 	bl	80045cc <osSemaphoreRelease>
 80009dc:	60f8      	str	r0, [r7, #12]
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d006      	beq.n	80009f2 <Ringbuffer_Put+0xb6>
		Ringbuffer_ErrorHandler(ret, "Ringbuffer_Put()", "release (read)");
 80009e4:	4a0a      	ldr	r2, [pc, #40]	; (8000a10 <Ringbuffer_Put+0xd4>)
 80009e6:	4907      	ldr	r1, [pc, #28]	; (8000a04 <Ringbuffer_Put+0xc8>)
 80009e8:	68f8      	ldr	r0, [r7, #12]
 80009ea:	f000 f8d1 	bl	8000b90 <Ringbuffer_ErrorHandler>
		return false; // Could not release semaphore
 80009ee:	2300      	movs	r3, #0
 80009f0:	e000      	b.n	80009f4 <Ringbuffer_Put+0xb8>
	}
	return true;
 80009f2:	2301      	movs	r3, #1
}
 80009f4:	4618      	mov	r0, r3
 80009f6:	3710      	adds	r7, #16
 80009f8:	46bd      	mov	sp, r7
 80009fa:	bd80      	pop	{r7, pc}
 80009fc:	200000c8 	.word	0x200000c8
 8000a00:	08008f44 	.word	0x08008f44
 8000a04:	08008f54 	.word	0x08008f54
 8000a08:	08008f68 	.word	0x08008f68
 8000a0c:	66666667 	.word	0x66666667
 8000a10:	08008f78 	.word	0x08008f78

08000a14 <Ringbuffer_Get>:

bool Ringbuffer_Get(rb_elem_t *elem) {
 8000a14:	b590      	push	{r4, r7, lr}
 8000a16:	b085      	sub	sp, #20
 8000a18:	af00      	add	r7, sp, #0
 8000a1a:	6078      	str	r0, [r7, #4]
	osStatus_t ret;
	// Check if ringbuffer is initialized
	if(rb_allocated == NULL) {
 8000a1c:	4b2d      	ldr	r3, [pc, #180]	; (8000ad4 <Ringbuffer_Get+0xc0>)
 8000a1e:	681b      	ldr	r3, [r3, #0]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d106      	bne.n	8000a32 <Ringbuffer_Get+0x1e>
		Ringbuffer_ErrorHandler(0, "Ringbuffer_Get()", "uninitialized");
 8000a24:	4a2c      	ldr	r2, [pc, #176]	; (8000ad8 <Ringbuffer_Get+0xc4>)
 8000a26:	492d      	ldr	r1, [pc, #180]	; (8000adc <Ringbuffer_Get+0xc8>)
 8000a28:	2000      	movs	r0, #0
 8000a2a:	f000 f8b1 	bl	8000b90 <Ringbuffer_ErrorHandler>
		return false;
 8000a2e:	2300      	movs	r3, #0
 8000a30:	e04b      	b.n	8000aca <Ringbuffer_Get+0xb6>
	}
	// Acquire read semaphore
	if((ret = osSemaphoreAcquire(rb_allocated->sem_read, osWaitForever)) != osOK) {
 8000a32:	4b28      	ldr	r3, [pc, #160]	; (8000ad4 <Ringbuffer_Get+0xc0>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000a38:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f003 fd73 	bl	8004528 <osSemaphoreAcquire>
 8000a42:	60f8      	str	r0, [r7, #12]
 8000a44:	68fb      	ldr	r3, [r7, #12]
 8000a46:	2b00      	cmp	r3, #0
 8000a48:	d006      	beq.n	8000a58 <Ringbuffer_Get+0x44>
		Ringbuffer_ErrorHandler(ret, "Ringbuffer_Get()", "acquire (read)");
 8000a4a:	4a25      	ldr	r2, [pc, #148]	; (8000ae0 <Ringbuffer_Get+0xcc>)
 8000a4c:	4923      	ldr	r1, [pc, #140]	; (8000adc <Ringbuffer_Get+0xc8>)
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f000 f89e 	bl	8000b90 <Ringbuffer_ErrorHandler>
		return false; // Could not acquire semaphore to lock write in given timeout
 8000a54:	2300      	movs	r3, #0
 8000a56:	e038      	b.n	8000aca <Ringbuffer_Get+0xb6>
	}
	osKernelLock();
 8000a58:	f003 fb46 	bl	80040e8 <osKernelLock>
	// Read ringbuffer element
	*elem = rb_allocated->rb_elements[rb_allocated->rIndex];
 8000a5c:	4b1d      	ldr	r3, [pc, #116]	; (8000ad4 <Ringbuffer_Get+0xc0>)
 8000a5e:	681a      	ldr	r2, [r3, #0]
 8000a60:	4b1c      	ldr	r3, [pc, #112]	; (8000ad4 <Ringbuffer_Get+0xc0>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000a68:	6879      	ldr	r1, [r7, #4]
 8000a6a:	460c      	mov	r4, r1
 8000a6c:	00db      	lsls	r3, r3, #3
 8000a6e:	4413      	add	r3, r2
 8000a70:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000a74:	e884 0003 	stmia.w	r4, {r0, r1}
	rb_allocated->rIndex = (rb_allocated->rIndex+1) % RINGBUFFER_SIZE;
 8000a78:	4b16      	ldr	r3, [pc, #88]	; (8000ad4 <Ringbuffer_Get+0xc0>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000a80:	1c5a      	adds	r2, r3, #1
 8000a82:	4b18      	ldr	r3, [pc, #96]	; (8000ae4 <Ringbuffer_Get+0xd0>)
 8000a84:	fb83 1302 	smull	r1, r3, r3, r2
 8000a88:	1099      	asrs	r1, r3, #2
 8000a8a:	17d3      	asrs	r3, r2, #31
 8000a8c:	1ac9      	subs	r1, r1, r3
 8000a8e:	460b      	mov	r3, r1
 8000a90:	009b      	lsls	r3, r3, #2
 8000a92:	440b      	add	r3, r1
 8000a94:	005b      	lsls	r3, r3, #1
 8000a96:	1ad1      	subs	r1, r2, r3
 8000a98:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <Ringbuffer_Get+0xc0>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	b2ca      	uxtb	r2, r1
 8000a9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	osKernelUnlock();
 8000aa2:	f003 fb47 	bl	8004134 <osKernelUnlock>
	// Release write semaphore
	if((ret = osSemaphoreRelease(rb_allocated->sem_write)) != osOK) {
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <Ringbuffer_Get+0xc0>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000aac:	4618      	mov	r0, r3
 8000aae:	f003 fd8d 	bl	80045cc <osSemaphoreRelease>
 8000ab2:	60f8      	str	r0, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d006      	beq.n	8000ac8 <Ringbuffer_Get+0xb4>
		Ringbuffer_ErrorHandler(ret, "Ringbuffer_Get()", "release (write)");
 8000aba:	4a0b      	ldr	r2, [pc, #44]	; (8000ae8 <Ringbuffer_Get+0xd4>)
 8000abc:	4907      	ldr	r1, [pc, #28]	; (8000adc <Ringbuffer_Get+0xc8>)
 8000abe:	68f8      	ldr	r0, [r7, #12]
 8000ac0:	f000 f866 	bl	8000b90 <Ringbuffer_ErrorHandler>
		return false; // Could not release semaphore
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	e000      	b.n	8000aca <Ringbuffer_Get+0xb6>
	}
	return true;
 8000ac8:	2301      	movs	r3, #1
}
 8000aca:	4618      	mov	r0, r3
 8000acc:	3714      	adds	r7, #20
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	bd90      	pop	{r4, r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000c8 	.word	0x200000c8
 8000ad8:	08008f44 	.word	0x08008f44
 8000adc:	08008f88 	.word	0x08008f88
 8000ae0:	08008f9c 	.word	0x08008f9c
 8000ae4:	66666667 	.word	0x66666667
 8000ae8:	08008fac 	.word	0x08008fac

08000aec <Ringbuffer_Init>:

osMemoryPoolId_t Ringbuffer_Init(uint8_t producer_count) {
 8000aec:	b590      	push	{r4, r7, lr}
 8000aee:	b085      	sub	sp, #20
 8000af0:	af00      	add	r7, sp, #0
 8000af2:	4603      	mov	r3, r0
 8000af4:	71fb      	strb	r3, [r7, #7]
	osMemoryPoolId_t newPool = osMemoryPoolNew(1, sizeof(ringbuffer_t), &ringbufferPool_attributes);
 8000af6:	4a20      	ldr	r2, [pc, #128]	; (8000b78 <Ringbuffer_Init+0x8c>)
 8000af8:	215c      	movs	r1, #92	; 0x5c
 8000afa:	2001      	movs	r0, #1
 8000afc:	f003 fdaa 	bl	8004654 <osMemoryPoolNew>
 8000b00:	60f8      	str	r0, [r7, #12]
	if(newPool == NULL) {
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	2b00      	cmp	r3, #0
 8000b06:	d104      	bne.n	8000b12 <Ringbuffer_Init+0x26>
		Ringbuffer_ErrorHandler(0, "Ringbuffer_Init()", "Failed to create new memory pool");
 8000b08:	4a1c      	ldr	r2, [pc, #112]	; (8000b7c <Ringbuffer_Init+0x90>)
 8000b0a:	491d      	ldr	r1, [pc, #116]	; (8000b80 <Ringbuffer_Init+0x94>)
 8000b0c:	2000      	movs	r0, #0
 8000b0e:	f000 f83f 	bl	8000b90 <Ringbuffer_ErrorHandler>
	}
	rb_allocated = (ringbuffer_t*) osMemoryPoolAlloc(newPool, RINGBUFFER_TIMEOUT);
 8000b12:	f241 3188 	movw	r1, #5000	; 0x1388
 8000b16:	68f8      	ldr	r0, [r7, #12]
 8000b18:	f003 fe72 	bl	8004800 <osMemoryPoolAlloc>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <Ringbuffer_Init+0x98>)
 8000b20:	6013      	str	r3, [r2, #0]
	/*
	 * According to the assignment, there will always be only 1 consumer.
	 * This means the read semaphore is always binary (thus max_count=1).
	 * I assume, that the consumer initially needs to wait (thus initial_count=0)
	 */
	rb_allocated->sem_read = osSemaphoreNew(RINGBUFFER_SIZE, 0, NULL);
 8000b22:	4b18      	ldr	r3, [pc, #96]	; (8000b84 <Ringbuffer_Init+0x98>)
 8000b24:	681c      	ldr	r4, [r3, #0]
 8000b26:	2200      	movs	r2, #0
 8000b28:	2100      	movs	r1, #0
 8000b2a:	200a      	movs	r0, #10
 8000b2c:	f003 fc72 	bl	8004414 <osSemaphoreNew>
 8000b30:	4603      	mov	r3, r0
 8000b32:	6523      	str	r3, [r4, #80]	; 0x50
	if(rb_allocated->sem_read == NULL) {
 8000b34:	4b13      	ldr	r3, [pc, #76]	; (8000b84 <Ringbuffer_Init+0x98>)
 8000b36:	681b      	ldr	r3, [r3, #0]
 8000b38:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d104      	bne.n	8000b48 <Ringbuffer_Init+0x5c>
		Ringbuffer_ErrorHandler(0, "Ringbuffer_Init()", "Failed to create 'read' semaphore");
 8000b3e:	4a12      	ldr	r2, [pc, #72]	; (8000b88 <Ringbuffer_Init+0x9c>)
 8000b40:	490f      	ldr	r1, [pc, #60]	; (8000b80 <Ringbuffer_Init+0x94>)
 8000b42:	2000      	movs	r0, #0
 8000b44:	f000 f824 	bl	8000b90 <Ringbuffer_ErrorHandler>
	}
	/*
	 * In the assignment, there will always be NUM_PRODS producers.
	 * This means the write semaphore is equal to NUM_PRODS (thus max_count=NUM_PRODS).
	 */
	rb_allocated->sem_write = osSemaphoreNew(RINGBUFFER_SIZE, 1, NULL);
 8000b48:	4b0e      	ldr	r3, [pc, #56]	; (8000b84 <Ringbuffer_Init+0x98>)
 8000b4a:	681c      	ldr	r4, [r3, #0]
 8000b4c:	2200      	movs	r2, #0
 8000b4e:	2101      	movs	r1, #1
 8000b50:	200a      	movs	r0, #10
 8000b52:	f003 fc5f 	bl	8004414 <osSemaphoreNew>
 8000b56:	4603      	mov	r3, r0
 8000b58:	6563      	str	r3, [r4, #84]	; 0x54
	if(rb_allocated->sem_write == NULL) {
 8000b5a:	4b0a      	ldr	r3, [pc, #40]	; (8000b84 <Ringbuffer_Init+0x98>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d104      	bne.n	8000b6e <Ringbuffer_Init+0x82>
		Ringbuffer_ErrorHandler(0, "Ringbuffer_Init()", "Failed to create 'write' semaphore");
 8000b64:	4a09      	ldr	r2, [pc, #36]	; (8000b8c <Ringbuffer_Init+0xa0>)
 8000b66:	4906      	ldr	r1, [pc, #24]	; (8000b80 <Ringbuffer_Init+0x94>)
 8000b68:	2000      	movs	r0, #0
 8000b6a:	f000 f811 	bl	8000b90 <Ringbuffer_ErrorHandler>
	}
	return newPool;
 8000b6e:	68fb      	ldr	r3, [r7, #12]
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3714      	adds	r7, #20
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd90      	pop	{r4, r7, pc}
 8000b78:	0800909c 	.word	0x0800909c
 8000b7c:	08008fbc 	.word	0x08008fbc
 8000b80:	08008fe0 	.word	0x08008fe0
 8000b84:	200000c8 	.word	0x200000c8
 8000b88:	08008ff4 	.word	0x08008ff4
 8000b8c:	08009018 	.word	0x08009018

08000b90 <Ringbuffer_ErrorHandler>:

osStatus_t Ringbuffer_Delete(osMemoryPoolId_t ringbuffer) {
	return osMemoryPoolDelete(ringbuffer);
}

void Ringbuffer_ErrorHandler(osStatus_t status, char * function, char * msg) {
 8000b90:	b480      	push	{r7}
 8000b92:	b085      	sub	sp, #20
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	60f8      	str	r0, [r7, #12]
 8000b98:	60b9      	str	r1, [r7, #8]
 8000b9a:	607a      	str	r2, [r7, #4]
		default:
			break;
	}
	printf("\r\n");
#endif
}
 8000b9c:	bf00      	nop
 8000b9e:	3714      	adds	r7, #20
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bae:	4b11      	ldr	r3, [pc, #68]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bb2:	4a10      	ldr	r2, [pc, #64]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 0301 	orr.w	r3, r3, #1
 8000bb8:	6613      	str	r3, [r2, #96]	; 0x60
 8000bba:	4b0e      	ldr	r3, [pc, #56]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000bbe:	f003 0301 	and.w	r3, r3, #1
 8000bc2:	607b      	str	r3, [r7, #4]
 8000bc4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bc6:	4b0b      	ldr	r3, [pc, #44]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bc8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bca:	4a0a      	ldr	r2, [pc, #40]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bd0:	6593      	str	r3, [r2, #88]	; 0x58
 8000bd2:	4b08      	ldr	r3, [pc, #32]	; (8000bf4 <HAL_MspInit+0x4c>)
 8000bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000bd6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bda:	603b      	str	r3, [r7, #0]
 8000bdc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000bde:	2200      	movs	r2, #0
 8000be0:	210f      	movs	r1, #15
 8000be2:	f06f 0001 	mvn.w	r0, #1
 8000be6:	f000 fb23 	bl	8001230 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}
 8000bf2:	bf00      	nop
 8000bf4:	40021000 	.word	0x40021000

08000bf8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b08e      	sub	sp, #56	; 0x38
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000c00:	2300      	movs	r3, #0
 8000c02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c06:	4b34      	ldr	r3, [pc, #208]	; (8000cd8 <HAL_InitTick+0xe0>)
 8000c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c0a:	4a33      	ldr	r2, [pc, #204]	; (8000cd8 <HAL_InitTick+0xe0>)
 8000c0c:	f043 0310 	orr.w	r3, r3, #16
 8000c10:	6593      	str	r3, [r2, #88]	; 0x58
 8000c12:	4b31      	ldr	r3, [pc, #196]	; (8000cd8 <HAL_InitTick+0xe0>)
 8000c14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c16:	f003 0310 	and.w	r3, r3, #16
 8000c1a:	60fb      	str	r3, [r7, #12]
 8000c1c:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c1e:	f107 0210 	add.w	r2, r7, #16
 8000c22:	f107 0314 	add.w	r3, r7, #20
 8000c26:	4611      	mov	r1, r2
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f001 fb69 	bl	8002300 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000c2e:	6a3b      	ldr	r3, [r7, #32]
 8000c30:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d103      	bne.n	8000c40 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000c38:	f001 fb36 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 8000c3c:	6378      	str	r0, [r7, #52]	; 0x34
 8000c3e:	e004      	b.n	8000c4a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000c40:	f001 fb32 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 8000c44:	4603      	mov	r3, r0
 8000c46:	005b      	lsls	r3, r3, #1
 8000c48:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000c4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000c4c:	4a23      	ldr	r2, [pc, #140]	; (8000cdc <HAL_InitTick+0xe4>)
 8000c4e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c52:	0c9b      	lsrs	r3, r3, #18
 8000c54:	3b01      	subs	r3, #1
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000c58:	4b21      	ldr	r3, [pc, #132]	; (8000ce0 <HAL_InitTick+0xe8>)
 8000c5a:	4a22      	ldr	r2, [pc, #136]	; (8000ce4 <HAL_InitTick+0xec>)
 8000c5c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000c5e:	4b20      	ldr	r3, [pc, #128]	; (8000ce0 <HAL_InitTick+0xe8>)
 8000c60:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c64:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000c66:	4a1e      	ldr	r2, [pc, #120]	; (8000ce0 <HAL_InitTick+0xe8>)
 8000c68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000c6a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000c6c:	4b1c      	ldr	r3, [pc, #112]	; (8000ce0 <HAL_InitTick+0xe8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c72:	4b1b      	ldr	r3, [pc, #108]	; (8000ce0 <HAL_InitTick+0xe8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c78:	4b19      	ldr	r3, [pc, #100]	; (8000ce0 <HAL_InitTick+0xe8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000c7e:	4818      	ldr	r0, [pc, #96]	; (8000ce0 <HAL_InitTick+0xe8>)
 8000c80:	f001 feb8 	bl	80029f4 <HAL_TIM_Base_Init>
 8000c84:	4603      	mov	r3, r0
 8000c86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000c8a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000c8e:	2b00      	cmp	r3, #0
 8000c90:	d11b      	bne.n	8000cca <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000c92:	4813      	ldr	r0, [pc, #76]	; (8000ce0 <HAL_InitTick+0xe8>)
 8000c94:	f001 ff10 	bl	8002ab8 <HAL_TIM_Base_Start_IT>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ca2:	2b00      	cmp	r3, #0
 8000ca4:	d111      	bne.n	8000cca <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000ca6:	2036      	movs	r0, #54	; 0x36
 8000ca8:	f000 fade 	bl	8001268 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	2b0f      	cmp	r3, #15
 8000cb0:	d808      	bhi.n	8000cc4 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	6879      	ldr	r1, [r7, #4]
 8000cb6:	2036      	movs	r0, #54	; 0x36
 8000cb8:	f000 faba 	bl	8001230 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000cbc:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <HAL_InitTick+0xf0>)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	6013      	str	r3, [r2, #0]
 8000cc2:	e002      	b.n	8000cca <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000cc4:	2301      	movs	r3, #1
 8000cc6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000cca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3738      	adds	r7, #56	; 0x38
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	40021000 	.word	0x40021000
 8000cdc:	431bde83 	.word	0x431bde83
 8000ce0:	200000cc 	.word	0x200000cc
 8000ce4:	40001000 	.word	0x40001000
 8000ce8:	20000030 	.word	0x20000030

08000cec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cec:	b480      	push	{r7}
 8000cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000cf0:	e7fe      	b.n	8000cf0 <NMI_Handler+0x4>

08000cf2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000cf2:	b480      	push	{r7}
 8000cf4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000cf6:	e7fe      	b.n	8000cf6 <HardFault_Handler+0x4>

08000cf8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000cf8:	b480      	push	{r7}
 8000cfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <MemManage_Handler+0x4>

08000cfe <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000cfe:	b480      	push	{r7}
 8000d00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d02:	e7fe      	b.n	8000d02 <BusFault_Handler+0x4>

08000d04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d04:	b480      	push	{r7}
 8000d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d08:	e7fe      	b.n	8000d08 <UsageFault_Handler+0x4>

08000d0a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d0e:	bf00      	nop
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr

08000d18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000d18:	b580      	push	{r7, lr}
 8000d1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000d1c:	4802      	ldr	r0, [pc, #8]	; (8000d28 <USART2_IRQHandler+0x10>)
 8000d1e:	f002 f9cb 	bl	80030b8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000d22:	bf00      	nop
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000011c 	.word	0x2000011c

08000d2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d30:	4802      	ldr	r0, [pc, #8]	; (8000d3c <TIM6_DAC_IRQHandler+0x10>)
 8000d32:	f001 ff15 	bl	8002b60 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d36:	bf00      	nop
 8000d38:	bd80      	pop	{r7, pc}
 8000d3a:	bf00      	nop
 8000d3c:	200000cc 	.word	0x200000cc

08000d40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
	return 1;
 8000d44:	2301      	movs	r3, #1
}
 8000d46:	4618      	mov	r0, r3
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4e:	4770      	bx	lr

08000d50 <_kill>:

int _kill(int pid, int sig)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	b082      	sub	sp, #8
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
 8000d58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000d5a:	f006 ff47 	bl	8007bec <__errno>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	2216      	movs	r2, #22
 8000d62:	601a      	str	r2, [r3, #0]
	return -1;
 8000d64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d68:	4618      	mov	r0, r3
 8000d6a:	3708      	adds	r7, #8
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}

08000d70 <_exit>:

void _exit (int status)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000d78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d7c:	6878      	ldr	r0, [r7, #4]
 8000d7e:	f7ff ffe7 	bl	8000d50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000d82:	e7fe      	b.n	8000d82 <_exit+0x12>

08000d84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b086      	sub	sp, #24
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	60f8      	str	r0, [r7, #12]
 8000d8c:	60b9      	str	r1, [r7, #8]
 8000d8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d90:	2300      	movs	r3, #0
 8000d92:	617b      	str	r3, [r7, #20]
 8000d94:	e00a      	b.n	8000dac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000d96:	f3af 8000 	nop.w
 8000d9a:	4601      	mov	r1, r0
 8000d9c:	68bb      	ldr	r3, [r7, #8]
 8000d9e:	1c5a      	adds	r2, r3, #1
 8000da0:	60ba      	str	r2, [r7, #8]
 8000da2:	b2ca      	uxtb	r2, r1
 8000da4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	3301      	adds	r3, #1
 8000daa:	617b      	str	r3, [r7, #20]
 8000dac:	697a      	ldr	r2, [r7, #20]
 8000dae:	687b      	ldr	r3, [r7, #4]
 8000db0:	429a      	cmp	r2, r3
 8000db2:	dbf0      	blt.n	8000d96 <_read+0x12>
	}

return len;
 8000db4:	687b      	ldr	r3, [r7, #4]
}
 8000db6:	4618      	mov	r0, r3
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <_close>:
	}
	return len;
}

int _close(int file)
{
 8000dbe:	b480      	push	{r7}
 8000dc0:	b083      	sub	sp, #12
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
	return -1;
 8000dc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000dca:	4618      	mov	r0, r3
 8000dcc:	370c      	adds	r7, #12
 8000dce:	46bd      	mov	sp, r7
 8000dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd4:	4770      	bx	lr

08000dd6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	b083      	sub	sp, #12
 8000dda:	af00      	add	r7, sp, #0
 8000ddc:	6078      	str	r0, [r7, #4]
 8000dde:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000de0:	683b      	ldr	r3, [r7, #0]
 8000de2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000de6:	605a      	str	r2, [r3, #4]
	return 0;
 8000de8:	2300      	movs	r3, #0
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	370c      	adds	r7, #12
 8000dee:	46bd      	mov	sp, r7
 8000df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df4:	4770      	bx	lr

08000df6 <_isatty>:

int _isatty(int file)
{
 8000df6:	b480      	push	{r7}
 8000df8:	b083      	sub	sp, #12
 8000dfa:	af00      	add	r7, sp, #0
 8000dfc:	6078      	str	r0, [r7, #4]
	return 1;
 8000dfe:	2301      	movs	r3, #1
}
 8000e00:	4618      	mov	r0, r3
 8000e02:	370c      	adds	r7, #12
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	b085      	sub	sp, #20
 8000e10:	af00      	add	r7, sp, #0
 8000e12:	60f8      	str	r0, [r7, #12]
 8000e14:	60b9      	str	r1, [r7, #8]
 8000e16:	607a      	str	r2, [r7, #4]
	return 0;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	3714      	adds	r7, #20
 8000e1e:	46bd      	mov	sp, r7
 8000e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e24:	4770      	bx	lr
	...

08000e28 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e30:	4a14      	ldr	r2, [pc, #80]	; (8000e84 <_sbrk+0x5c>)
 8000e32:	4b15      	ldr	r3, [pc, #84]	; (8000e88 <_sbrk+0x60>)
 8000e34:	1ad3      	subs	r3, r2, r3
 8000e36:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e38:	697b      	ldr	r3, [r7, #20]
 8000e3a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e3c:	4b13      	ldr	r3, [pc, #76]	; (8000e8c <_sbrk+0x64>)
 8000e3e:	681b      	ldr	r3, [r3, #0]
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d102      	bne.n	8000e4a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e44:	4b11      	ldr	r3, [pc, #68]	; (8000e8c <_sbrk+0x64>)
 8000e46:	4a12      	ldr	r2, [pc, #72]	; (8000e90 <_sbrk+0x68>)
 8000e48:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4a:	4b10      	ldr	r3, [pc, #64]	; (8000e8c <_sbrk+0x64>)
 8000e4c:	681a      	ldr	r2, [r3, #0]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4413      	add	r3, r2
 8000e52:	693a      	ldr	r2, [r7, #16]
 8000e54:	429a      	cmp	r2, r3
 8000e56:	d207      	bcs.n	8000e68 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e58:	f006 fec8 	bl	8007bec <__errno>
 8000e5c:	4603      	mov	r3, r0
 8000e5e:	220c      	movs	r2, #12
 8000e60:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e66:	e009      	b.n	8000e7c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e68:	4b08      	ldr	r3, [pc, #32]	; (8000e8c <_sbrk+0x64>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e6e:	4b07      	ldr	r3, [pc, #28]	; (8000e8c <_sbrk+0x64>)
 8000e70:	681a      	ldr	r2, [r3, #0]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	4413      	add	r3, r2
 8000e76:	4a05      	ldr	r2, [pc, #20]	; (8000e8c <_sbrk+0x64>)
 8000e78:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7a:	68fb      	ldr	r3, [r7, #12]
}
 8000e7c:	4618      	mov	r0, r3
 8000e7e:	3718      	adds	r7, #24
 8000e80:	46bd      	mov	sp, r7
 8000e82:	bd80      	pop	{r7, pc}
 8000e84:	20010000 	.word	0x20010000
 8000e88:	00000400 	.word	0x00000400
 8000e8c:	20000118 	.word	0x20000118
 8000e90:	200089c8 	.word	0x200089c8

08000e94 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000e94:	b480      	push	{r7}
 8000e96:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000e98:	4b06      	ldr	r3, [pc, #24]	; (8000eb4 <SystemInit+0x20>)
 8000e9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <SystemInit+0x20>)
 8000ea0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ea4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000ea8:	bf00      	nop
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ebc:	4b14      	ldr	r3, [pc, #80]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ebe:	4a15      	ldr	r2, [pc, #84]	; (8000f14 <MX_USART2_UART_Init+0x5c>)
 8000ec0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ec2:	4b13      	ldr	r3, [pc, #76]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ec4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ec8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eca:	4b11      	ldr	r3, [pc, #68]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ed0:	4b0f      	ldr	r3, [pc, #60]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ed6:	4b0e      	ldr	r3, [pc, #56]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000edc:	4b0c      	ldr	r3, [pc, #48]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ede:	220c      	movs	r2, #12
 8000ee0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ee2:	4b0b      	ldr	r3, [pc, #44]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ee8:	4b09      	ldr	r3, [pc, #36]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000eee:	4b08      	ldr	r3, [pc, #32]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ef4:	4b06      	ldr	r3, [pc, #24]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000ef6:	2200      	movs	r2, #0
 8000ef8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000efa:	4805      	ldr	r0, [pc, #20]	; (8000f10 <MX_USART2_UART_Init+0x58>)
 8000efc:	f001 fffa 	bl	8002ef4 <HAL_UART_Init>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d001      	beq.n	8000f0a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000f06:	f7ff fc1f 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	2000011c 	.word	0x2000011c
 8000f14:	40004400 	.word	0x40004400

08000f18 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b09e      	sub	sp, #120	; 0x78
 8000f1c:	af00      	add	r7, sp, #0
 8000f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f20:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f24:	2200      	movs	r2, #0
 8000f26:	601a      	str	r2, [r3, #0]
 8000f28:	605a      	str	r2, [r3, #4]
 8000f2a:	609a      	str	r2, [r3, #8]
 8000f2c:	60da      	str	r2, [r3, #12]
 8000f2e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000f30:	f107 0310 	add.w	r3, r7, #16
 8000f34:	2254      	movs	r2, #84	; 0x54
 8000f36:	2100      	movs	r1, #0
 8000f38:	4618      	mov	r0, r3
 8000f3a:	f006 ff88 	bl	8007e4e <memset>
  if(uartHandle->Instance==USART2)
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	4a2c      	ldr	r2, [pc, #176]	; (8000ff4 <HAL_UART_MspInit+0xdc>)
 8000f44:	4293      	cmp	r3, r2
 8000f46:	d150      	bne.n	8000fea <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000f48:	2302      	movs	r3, #2
 8000f4a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000f50:	f107 0310 	add.w	r3, r7, #16
 8000f54:	4618      	mov	r0, r3
 8000f56:	f001 fa65 	bl	8002424 <HAL_RCCEx_PeriphCLKConfig>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	d001      	beq.n	8000f64 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000f60:	f7ff fbf2 	bl	8000748 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f64:	4b24      	ldr	r3, [pc, #144]	; (8000ff8 <HAL_UART_MspInit+0xe0>)
 8000f66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f68:	4a23      	ldr	r2, [pc, #140]	; (8000ff8 <HAL_UART_MspInit+0xe0>)
 8000f6a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000f6e:	6593      	str	r3, [r2, #88]	; 0x58
 8000f70:	4b21      	ldr	r3, [pc, #132]	; (8000ff8 <HAL_UART_MspInit+0xe0>)
 8000f72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000f78:	60fb      	str	r3, [r7, #12]
 8000f7a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7c:	4b1e      	ldr	r3, [pc, #120]	; (8000ff8 <HAL_UART_MspInit+0xe0>)
 8000f7e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f80:	4a1d      	ldr	r2, [pc, #116]	; (8000ff8 <HAL_UART_MspInit+0xe0>)
 8000f82:	f043 0301 	orr.w	r3, r3, #1
 8000f86:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f88:	4b1b      	ldr	r3, [pc, #108]	; (8000ff8 <HAL_UART_MspInit+0xe0>)
 8000f8a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8c:	f003 0301 	and.w	r3, r3, #1
 8000f90:	60bb      	str	r3, [r7, #8]
 8000f92:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000f94:	2304      	movs	r3, #4
 8000f96:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f98:	2302      	movs	r3, #2
 8000f9a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fa0:	2303      	movs	r3, #3
 8000fa2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000fa4:	2307      	movs	r3, #7
 8000fa6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000fa8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fac:	4619      	mov	r1, r3
 8000fae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fb2:	f000 f9e7 	bl	8001384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000fb6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000fba:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fbc:	2302      	movs	r3, #2
 8000fbe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000fc4:	2303      	movs	r3, #3
 8000fc6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000fc8:	2303      	movs	r3, #3
 8000fca:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000fcc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000fd6:	f000 f9d5 	bl	8001384 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000fda:	2200      	movs	r2, #0
 8000fdc:	2105      	movs	r1, #5
 8000fde:	2026      	movs	r0, #38	; 0x26
 8000fe0:	f000 f926 	bl	8001230 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fe4:	2026      	movs	r0, #38	; 0x26
 8000fe6:	f000 f93f 	bl	8001268 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000fea:	bf00      	nop
 8000fec:	3778      	adds	r7, #120	; 0x78
 8000fee:	46bd      	mov	sp, r7
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	40004400 	.word	0x40004400
 8000ff8:	40021000 	.word	0x40021000

08000ffc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ffc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001034 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001000:	f7ff ff48 	bl	8000e94 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001004:	480c      	ldr	r0, [pc, #48]	; (8001038 <LoopForever+0x6>)
  ldr r1, =_edata
 8001006:	490d      	ldr	r1, [pc, #52]	; (800103c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001008:	4a0d      	ldr	r2, [pc, #52]	; (8001040 <LoopForever+0xe>)
  movs r3, #0
 800100a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800100c:	e002      	b.n	8001014 <LoopCopyDataInit>

0800100e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800100e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001010:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001012:	3304      	adds	r3, #4

08001014 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001014:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001016:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001018:	d3f9      	bcc.n	800100e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800101a:	4a0a      	ldr	r2, [pc, #40]	; (8001044 <LoopForever+0x12>)
  ldr r4, =_ebss
 800101c:	4c0a      	ldr	r4, [pc, #40]	; (8001048 <LoopForever+0x16>)
  movs r3, #0
 800101e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001020:	e001      	b.n	8001026 <LoopFillZerobss>

08001022 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001022:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001024:	3204      	adds	r2, #4

08001026 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001026:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001028:	d3fb      	bcc.n	8001022 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800102a:	f006 fedb 	bl	8007de4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800102e:	f7ff fb15 	bl	800065c <main>

08001032 <LoopForever>:

LoopForever:
    b LoopForever
 8001032:	e7fe      	b.n	8001032 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001034:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001038:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800103c:	200000a0 	.word	0x200000a0
  ldr r2, =_sidata
 8001040:	08009254 	.word	0x08009254
  ldr r2, =_sbss
 8001044:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001048:	200089c4 	.word	0x200089c4

0800104c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800104c:	e7fe      	b.n	800104c <ADC1_IRQHandler>

0800104e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800104e:	b580      	push	{r7, lr}
 8001050:	b082      	sub	sp, #8
 8001052:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	2300      	movs	r3, #0
 8001056:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001058:	2003      	movs	r0, #3
 800105a:	f000 f8de 	bl	800121a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800105e:	200f      	movs	r0, #15
 8001060:	f7ff fdca 	bl	8000bf8 <HAL_InitTick>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d002      	beq.n	8001070 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800106a:	2301      	movs	r3, #1
 800106c:	71fb      	strb	r3, [r7, #7]
 800106e:	e001      	b.n	8001074 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001070:	f7ff fd9a 	bl	8000ba8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001074:	79fb      	ldrb	r3, [r7, #7]
}
 8001076:	4618      	mov	r0, r3
 8001078:	3708      	adds	r7, #8
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
	...

08001080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001084:	4b06      	ldr	r3, [pc, #24]	; (80010a0 <HAL_IncTick+0x20>)
 8001086:	781b      	ldrb	r3, [r3, #0]
 8001088:	461a      	mov	r2, r3
 800108a:	4b06      	ldr	r3, [pc, #24]	; (80010a4 <HAL_IncTick+0x24>)
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	4413      	add	r3, r2
 8001090:	4a04      	ldr	r2, [pc, #16]	; (80010a4 <HAL_IncTick+0x24>)
 8001092:	6013      	str	r3, [r2, #0]
}
 8001094:	bf00      	nop
 8001096:	46bd      	mov	sp, r7
 8001098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109c:	4770      	bx	lr
 800109e:	bf00      	nop
 80010a0:	20000034 	.word	0x20000034
 80010a4:	200001a0 	.word	0x200001a0

080010a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
  return uwTick;
 80010ac:	4b03      	ldr	r3, [pc, #12]	; (80010bc <HAL_GetTick+0x14>)
 80010ae:	681b      	ldr	r3, [r3, #0]
}
 80010b0:	4618      	mov	r0, r3
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	200001a0 	.word	0x200001a0

080010c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010c0:	b480      	push	{r7}
 80010c2:	b085      	sub	sp, #20
 80010c4:	af00      	add	r7, sp, #0
 80010c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	f003 0307 	and.w	r3, r3, #7
 80010ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010d2:	68db      	ldr	r3, [r3, #12]
 80010d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80010d6:	68ba      	ldr	r2, [r7, #8]
 80010d8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80010dc:	4013      	ands	r3, r2
 80010de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010e0:	68fb      	ldr	r3, [r7, #12]
 80010e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80010e8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80010ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80010f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010f2:	4a04      	ldr	r2, [pc, #16]	; (8001104 <__NVIC_SetPriorityGrouping+0x44>)
 80010f4:	68bb      	ldr	r3, [r7, #8]
 80010f6:	60d3      	str	r3, [r2, #12]
}
 80010f8:	bf00      	nop
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr
 8001104:	e000ed00 	.word	0xe000ed00

08001108 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001108:	b480      	push	{r7}
 800110a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800110c:	4b04      	ldr	r3, [pc, #16]	; (8001120 <__NVIC_GetPriorityGrouping+0x18>)
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	0a1b      	lsrs	r3, r3, #8
 8001112:	f003 0307 	and.w	r3, r3, #7
}
 8001116:	4618      	mov	r0, r3
 8001118:	46bd      	mov	sp, r7
 800111a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111e:	4770      	bx	lr
 8001120:	e000ed00 	.word	0xe000ed00

08001124 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001124:	b480      	push	{r7}
 8001126:	b083      	sub	sp, #12
 8001128:	af00      	add	r7, sp, #0
 800112a:	4603      	mov	r3, r0
 800112c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800112e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001132:	2b00      	cmp	r3, #0
 8001134:	db0b      	blt.n	800114e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001136:	79fb      	ldrb	r3, [r7, #7]
 8001138:	f003 021f 	and.w	r2, r3, #31
 800113c:	4907      	ldr	r1, [pc, #28]	; (800115c <__NVIC_EnableIRQ+0x38>)
 800113e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001142:	095b      	lsrs	r3, r3, #5
 8001144:	2001      	movs	r0, #1
 8001146:	fa00 f202 	lsl.w	r2, r0, r2
 800114a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800114e:	bf00      	nop
 8001150:	370c      	adds	r7, #12
 8001152:	46bd      	mov	sp, r7
 8001154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001158:	4770      	bx	lr
 800115a:	bf00      	nop
 800115c:	e000e100 	.word	0xe000e100

08001160 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	4603      	mov	r3, r0
 8001168:	6039      	str	r1, [r7, #0]
 800116a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800116c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001170:	2b00      	cmp	r3, #0
 8001172:	db0a      	blt.n	800118a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001174:	683b      	ldr	r3, [r7, #0]
 8001176:	b2da      	uxtb	r2, r3
 8001178:	490c      	ldr	r1, [pc, #48]	; (80011ac <__NVIC_SetPriority+0x4c>)
 800117a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800117e:	0112      	lsls	r2, r2, #4
 8001180:	b2d2      	uxtb	r2, r2
 8001182:	440b      	add	r3, r1
 8001184:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001188:	e00a      	b.n	80011a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800118a:	683b      	ldr	r3, [r7, #0]
 800118c:	b2da      	uxtb	r2, r3
 800118e:	4908      	ldr	r1, [pc, #32]	; (80011b0 <__NVIC_SetPriority+0x50>)
 8001190:	79fb      	ldrb	r3, [r7, #7]
 8001192:	f003 030f 	and.w	r3, r3, #15
 8001196:	3b04      	subs	r3, #4
 8001198:	0112      	lsls	r2, r2, #4
 800119a:	b2d2      	uxtb	r2, r2
 800119c:	440b      	add	r3, r1
 800119e:	761a      	strb	r2, [r3, #24]
}
 80011a0:	bf00      	nop
 80011a2:	370c      	adds	r7, #12
 80011a4:	46bd      	mov	sp, r7
 80011a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011aa:	4770      	bx	lr
 80011ac:	e000e100 	.word	0xe000e100
 80011b0:	e000ed00 	.word	0xe000ed00

080011b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011b4:	b480      	push	{r7}
 80011b6:	b089      	sub	sp, #36	; 0x24
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	60f8      	str	r0, [r7, #12]
 80011bc:	60b9      	str	r1, [r7, #8]
 80011be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80011c0:	68fb      	ldr	r3, [r7, #12]
 80011c2:	f003 0307 	and.w	r3, r3, #7
 80011c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80011c8:	69fb      	ldr	r3, [r7, #28]
 80011ca:	f1c3 0307 	rsb	r3, r3, #7
 80011ce:	2b04      	cmp	r3, #4
 80011d0:	bf28      	it	cs
 80011d2:	2304      	movcs	r3, #4
 80011d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80011d6:	69fb      	ldr	r3, [r7, #28]
 80011d8:	3304      	adds	r3, #4
 80011da:	2b06      	cmp	r3, #6
 80011dc:	d902      	bls.n	80011e4 <NVIC_EncodePriority+0x30>
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	3b03      	subs	r3, #3
 80011e2:	e000      	b.n	80011e6 <NVIC_EncodePriority+0x32>
 80011e4:	2300      	movs	r3, #0
 80011e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80011e8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80011ec:	69bb      	ldr	r3, [r7, #24]
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43da      	mvns	r2, r3
 80011f4:	68bb      	ldr	r3, [r7, #8]
 80011f6:	401a      	ands	r2, r3
 80011f8:	697b      	ldr	r3, [r7, #20]
 80011fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80011fc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001200:	697b      	ldr	r3, [r7, #20]
 8001202:	fa01 f303 	lsl.w	r3, r1, r3
 8001206:	43d9      	mvns	r1, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800120c:	4313      	orrs	r3, r2
         );
}
 800120e:	4618      	mov	r0, r3
 8001210:	3724      	adds	r7, #36	; 0x24
 8001212:	46bd      	mov	sp, r7
 8001214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001218:	4770      	bx	lr

0800121a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800121a:	b580      	push	{r7, lr}
 800121c:	b082      	sub	sp, #8
 800121e:	af00      	add	r7, sp, #0
 8001220:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001222:	6878      	ldr	r0, [r7, #4]
 8001224:	f7ff ff4c 	bl	80010c0 <__NVIC_SetPriorityGrouping>
}
 8001228:	bf00      	nop
 800122a:	3708      	adds	r7, #8
 800122c:	46bd      	mov	sp, r7
 800122e:	bd80      	pop	{r7, pc}

08001230 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b086      	sub	sp, #24
 8001234:	af00      	add	r7, sp, #0
 8001236:	4603      	mov	r3, r0
 8001238:	60b9      	str	r1, [r7, #8]
 800123a:	607a      	str	r2, [r7, #4]
 800123c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001242:	f7ff ff61 	bl	8001108 <__NVIC_GetPriorityGrouping>
 8001246:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001248:	687a      	ldr	r2, [r7, #4]
 800124a:	68b9      	ldr	r1, [r7, #8]
 800124c:	6978      	ldr	r0, [r7, #20]
 800124e:	f7ff ffb1 	bl	80011b4 <NVIC_EncodePriority>
 8001252:	4602      	mov	r2, r0
 8001254:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001258:	4611      	mov	r1, r2
 800125a:	4618      	mov	r0, r3
 800125c:	f7ff ff80 	bl	8001160 <__NVIC_SetPriority>
}
 8001260:	bf00      	nop
 8001262:	3718      	adds	r7, #24
 8001264:	46bd      	mov	sp, r7
 8001266:	bd80      	pop	{r7, pc}

08001268 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b082      	sub	sp, #8
 800126c:	af00      	add	r7, sp, #0
 800126e:	4603      	mov	r3, r0
 8001270:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001272:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001276:	4618      	mov	r0, r3
 8001278:	f7ff ff54 	bl	8001124 <__NVIC_EnableIRQ>
}
 800127c:	bf00      	nop
 800127e:	3708      	adds	r7, #8
 8001280:	46bd      	mov	sp, r7
 8001282:	bd80      	pop	{r7, pc}

08001284 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001284:	b480      	push	{r7}
 8001286:	b085      	sub	sp, #20
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800128c:	2300      	movs	r3, #0
 800128e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b02      	cmp	r3, #2
 800129a:	d008      	beq.n	80012ae <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	2204      	movs	r2, #4
 80012a0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2200      	movs	r2, #0
 80012a6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	e022      	b.n	80012f4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	681a      	ldr	r2, [r3, #0]
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	f022 020e 	bic.w	r2, r2, #14
 80012bc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	681a      	ldr	r2, [r3, #0]
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f022 0201 	bic.w	r2, r2, #1
 80012cc:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d2:	f003 021c 	and.w	r2, r3, #28
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012da:	2101      	movs	r1, #1
 80012dc:	fa01 f202 	lsl.w	r2, r1, r2
 80012e0:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2201      	movs	r2, #1
 80012e6:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	2200      	movs	r2, #0
 80012ee:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80012f2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012f4:	4618      	mov	r0, r3
 80012f6:	3714      	adds	r7, #20
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b084      	sub	sp, #16
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001308:	2300      	movs	r3, #0
 800130a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001312:	b2db      	uxtb	r3, r3
 8001314:	2b02      	cmp	r3, #2
 8001316:	d005      	beq.n	8001324 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	2204      	movs	r2, #4
 800131c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800131e:	2301      	movs	r3, #1
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e029      	b.n	8001378 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	681a      	ldr	r2, [r3, #0]
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	681b      	ldr	r3, [r3, #0]
 800132e:	f022 020e 	bic.w	r2, r2, #14
 8001332:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	681a      	ldr	r2, [r3, #0]
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	f022 0201 	bic.w	r2, r2, #1
 8001342:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001348:	f003 021c 	and.w	r2, r3, #28
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001350:	2101      	movs	r1, #1
 8001352:	fa01 f202 	lsl.w	r2, r1, r2
 8001356:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2201      	movs	r2, #1
 800135c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800136c:	2b00      	cmp	r3, #0
 800136e:	d003      	beq.n	8001378 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001374:	6878      	ldr	r0, [r7, #4]
 8001376:	4798      	blx	r3
    }
  }
  return status;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
}
 800137a:	4618      	mov	r0, r3
 800137c:	3710      	adds	r7, #16
 800137e:	46bd      	mov	sp, r7
 8001380:	bd80      	pop	{r7, pc}
	...

08001384 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001384:	b480      	push	{r7}
 8001386:	b087      	sub	sp, #28
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
 800138c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800138e:	2300      	movs	r3, #0
 8001390:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001392:	e148      	b.n	8001626 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681a      	ldr	r2, [r3, #0]
 8001398:	2101      	movs	r1, #1
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	fa01 f303 	lsl.w	r3, r1, r3
 80013a0:	4013      	ands	r3, r2
 80013a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	f000 813a 	beq.w	8001620 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	685b      	ldr	r3, [r3, #4]
 80013b0:	f003 0303 	and.w	r3, r3, #3
 80013b4:	2b01      	cmp	r3, #1
 80013b6:	d005      	beq.n	80013c4 <HAL_GPIO_Init+0x40>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f003 0303 	and.w	r3, r3, #3
 80013c0:	2b02      	cmp	r3, #2
 80013c2:	d130      	bne.n	8001426 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013ca:	697b      	ldr	r3, [r7, #20]
 80013cc:	005b      	lsls	r3, r3, #1
 80013ce:	2203      	movs	r2, #3
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43db      	mvns	r3, r3
 80013d6:	693a      	ldr	r2, [r7, #16]
 80013d8:	4013      	ands	r3, r2
 80013da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	68da      	ldr	r2, [r3, #12]
 80013e0:	697b      	ldr	r3, [r7, #20]
 80013e2:	005b      	lsls	r3, r3, #1
 80013e4:	fa02 f303 	lsl.w	r3, r2, r3
 80013e8:	693a      	ldr	r2, [r7, #16]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013fa:	2201      	movs	r2, #1
 80013fc:	697b      	ldr	r3, [r7, #20]
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	693a      	ldr	r2, [r7, #16]
 8001406:	4013      	ands	r3, r2
 8001408:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	685b      	ldr	r3, [r3, #4]
 800140e:	091b      	lsrs	r3, r3, #4
 8001410:	f003 0201 	and.w	r2, r3, #1
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	fa02 f303 	lsl.w	r3, r2, r3
 800141a:	693a      	ldr	r2, [r7, #16]
 800141c:	4313      	orrs	r3, r2
 800141e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001426:	683b      	ldr	r3, [r7, #0]
 8001428:	685b      	ldr	r3, [r3, #4]
 800142a:	f003 0303 	and.w	r3, r3, #3
 800142e:	2b03      	cmp	r3, #3
 8001430:	d017      	beq.n	8001462 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	68db      	ldr	r3, [r3, #12]
 8001436:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001438:	697b      	ldr	r3, [r7, #20]
 800143a:	005b      	lsls	r3, r3, #1
 800143c:	2203      	movs	r2, #3
 800143e:	fa02 f303 	lsl.w	r3, r2, r3
 8001442:	43db      	mvns	r3, r3
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	4013      	ands	r3, r2
 8001448:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	689a      	ldr	r2, [r3, #8]
 800144e:	697b      	ldr	r3, [r7, #20]
 8001450:	005b      	lsls	r3, r3, #1
 8001452:	fa02 f303 	lsl.w	r3, r2, r3
 8001456:	693a      	ldr	r2, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	693a      	ldr	r2, [r7, #16]
 8001460:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f003 0303 	and.w	r3, r3, #3
 800146a:	2b02      	cmp	r3, #2
 800146c:	d123      	bne.n	80014b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800146e:	697b      	ldr	r3, [r7, #20]
 8001470:	08da      	lsrs	r2, r3, #3
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	3208      	adds	r2, #8
 8001476:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800147a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800147c:	697b      	ldr	r3, [r7, #20]
 800147e:	f003 0307 	and.w	r3, r3, #7
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	220f      	movs	r2, #15
 8001486:	fa02 f303 	lsl.w	r3, r2, r3
 800148a:	43db      	mvns	r3, r3
 800148c:	693a      	ldr	r2, [r7, #16]
 800148e:	4013      	ands	r3, r2
 8001490:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001492:	683b      	ldr	r3, [r7, #0]
 8001494:	691a      	ldr	r2, [r3, #16]
 8001496:	697b      	ldr	r3, [r7, #20]
 8001498:	f003 0307 	and.w	r3, r3, #7
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	fa02 f303 	lsl.w	r3, r2, r3
 80014a2:	693a      	ldr	r2, [r7, #16]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	08da      	lsrs	r2, r3, #3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3208      	adds	r2, #8
 80014b0:	6939      	ldr	r1, [r7, #16]
 80014b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	005b      	lsls	r3, r3, #1
 80014c0:	2203      	movs	r2, #3
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	43db      	mvns	r3, r3
 80014c8:	693a      	ldr	r2, [r7, #16]
 80014ca:	4013      	ands	r3, r2
 80014cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 0203 	and.w	r2, r3, #3
 80014d6:	697b      	ldr	r3, [r7, #20]
 80014d8:	005b      	lsls	r3, r3, #1
 80014da:	fa02 f303 	lsl.w	r3, r2, r3
 80014de:	693a      	ldr	r2, [r7, #16]
 80014e0:	4313      	orrs	r3, r2
 80014e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	693a      	ldr	r2, [r7, #16]
 80014e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	f000 8094 	beq.w	8001620 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014f8:	4b52      	ldr	r3, [pc, #328]	; (8001644 <HAL_GPIO_Init+0x2c0>)
 80014fa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014fc:	4a51      	ldr	r2, [pc, #324]	; (8001644 <HAL_GPIO_Init+0x2c0>)
 80014fe:	f043 0301 	orr.w	r3, r3, #1
 8001502:	6613      	str	r3, [r2, #96]	; 0x60
 8001504:	4b4f      	ldr	r3, [pc, #316]	; (8001644 <HAL_GPIO_Init+0x2c0>)
 8001506:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001508:	f003 0301 	and.w	r3, r3, #1
 800150c:	60bb      	str	r3, [r7, #8]
 800150e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001510:	4a4d      	ldr	r2, [pc, #308]	; (8001648 <HAL_GPIO_Init+0x2c4>)
 8001512:	697b      	ldr	r3, [r7, #20]
 8001514:	089b      	lsrs	r3, r3, #2
 8001516:	3302      	adds	r3, #2
 8001518:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800151c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800151e:	697b      	ldr	r3, [r7, #20]
 8001520:	f003 0303 	and.w	r3, r3, #3
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	220f      	movs	r2, #15
 8001528:	fa02 f303 	lsl.w	r3, r2, r3
 800152c:	43db      	mvns	r3, r3
 800152e:	693a      	ldr	r2, [r7, #16]
 8001530:	4013      	ands	r3, r2
 8001532:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800153a:	d00d      	beq.n	8001558 <HAL_GPIO_Init+0x1d4>
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	4a43      	ldr	r2, [pc, #268]	; (800164c <HAL_GPIO_Init+0x2c8>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d007      	beq.n	8001554 <HAL_GPIO_Init+0x1d0>
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	4a42      	ldr	r2, [pc, #264]	; (8001650 <HAL_GPIO_Init+0x2cc>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d101      	bne.n	8001550 <HAL_GPIO_Init+0x1cc>
 800154c:	2302      	movs	r3, #2
 800154e:	e004      	b.n	800155a <HAL_GPIO_Init+0x1d6>
 8001550:	2307      	movs	r3, #7
 8001552:	e002      	b.n	800155a <HAL_GPIO_Init+0x1d6>
 8001554:	2301      	movs	r3, #1
 8001556:	e000      	b.n	800155a <HAL_GPIO_Init+0x1d6>
 8001558:	2300      	movs	r3, #0
 800155a:	697a      	ldr	r2, [r7, #20]
 800155c:	f002 0203 	and.w	r2, r2, #3
 8001560:	0092      	lsls	r2, r2, #2
 8001562:	4093      	lsls	r3, r2
 8001564:	693a      	ldr	r2, [r7, #16]
 8001566:	4313      	orrs	r3, r2
 8001568:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800156a:	4937      	ldr	r1, [pc, #220]	; (8001648 <HAL_GPIO_Init+0x2c4>)
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	089b      	lsrs	r3, r3, #2
 8001570:	3302      	adds	r3, #2
 8001572:	693a      	ldr	r2, [r7, #16]
 8001574:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001578:	4b36      	ldr	r3, [pc, #216]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 800157a:	689b      	ldr	r3, [r3, #8]
 800157c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	43db      	mvns	r3, r3
 8001582:	693a      	ldr	r2, [r7, #16]
 8001584:	4013      	ands	r3, r2
 8001586:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001588:	683b      	ldr	r3, [r7, #0]
 800158a:	685b      	ldr	r3, [r3, #4]
 800158c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001590:	2b00      	cmp	r3, #0
 8001592:	d003      	beq.n	800159c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001594:	693a      	ldr	r2, [r7, #16]
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	4313      	orrs	r3, r2
 800159a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800159c:	4a2d      	ldr	r2, [pc, #180]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 800159e:	693b      	ldr	r3, [r7, #16]
 80015a0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80015a2:	4b2c      	ldr	r3, [pc, #176]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015a4:	68db      	ldr	r3, [r3, #12]
 80015a6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	43db      	mvns	r3, r3
 80015ac:	693a      	ldr	r2, [r7, #16]
 80015ae:	4013      	ands	r3, r2
 80015b0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d003      	beq.n	80015c6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80015be:	693a      	ldr	r2, [r7, #16]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80015c6:	4a23      	ldr	r2, [pc, #140]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015c8:	693b      	ldr	r3, [r7, #16]
 80015ca:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80015cc:	4b21      	ldr	r3, [pc, #132]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	43db      	mvns	r3, r3
 80015d6:	693a      	ldr	r2, [r7, #16]
 80015d8:	4013      	ands	r3, r2
 80015da:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80015dc:	683b      	ldr	r3, [r7, #0]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d003      	beq.n	80015f0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80015e8:	693a      	ldr	r2, [r7, #16]
 80015ea:	68fb      	ldr	r3, [r7, #12]
 80015ec:	4313      	orrs	r3, r2
 80015ee:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015f0:	4a18      	ldr	r2, [pc, #96]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80015f6:	4b17      	ldr	r3, [pc, #92]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015fc:	68fb      	ldr	r3, [r7, #12]
 80015fe:	43db      	mvns	r3, r3
 8001600:	693a      	ldr	r2, [r7, #16]
 8001602:	4013      	ands	r3, r2
 8001604:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	685b      	ldr	r3, [r3, #4]
 800160a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800160e:	2b00      	cmp	r3, #0
 8001610:	d003      	beq.n	800161a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001612:	693a      	ldr	r2, [r7, #16]
 8001614:	68fb      	ldr	r3, [r7, #12]
 8001616:	4313      	orrs	r3, r2
 8001618:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800161a:	4a0e      	ldr	r2, [pc, #56]	; (8001654 <HAL_GPIO_Init+0x2d0>)
 800161c:	693b      	ldr	r3, [r7, #16]
 800161e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001620:	697b      	ldr	r3, [r7, #20]
 8001622:	3301      	adds	r3, #1
 8001624:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	681a      	ldr	r2, [r3, #0]
 800162a:	697b      	ldr	r3, [r7, #20]
 800162c:	fa22 f303 	lsr.w	r3, r2, r3
 8001630:	2b00      	cmp	r3, #0
 8001632:	f47f aeaf 	bne.w	8001394 <HAL_GPIO_Init+0x10>
  }
}
 8001636:	bf00      	nop
 8001638:	bf00      	nop
 800163a:	371c      	adds	r7, #28
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr
 8001644:	40021000 	.word	0x40021000
 8001648:	40010000 	.word	0x40010000
 800164c:	48000400 	.word	0x48000400
 8001650:	48000800 	.word	0x48000800
 8001654:	40010400 	.word	0x40010400

08001658 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001658:	b480      	push	{r7}
 800165a:	b083      	sub	sp, #12
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
 8001660:	460b      	mov	r3, r1
 8001662:	807b      	strh	r3, [r7, #2]
 8001664:	4613      	mov	r3, r2
 8001666:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001668:	787b      	ldrb	r3, [r7, #1]
 800166a:	2b00      	cmp	r3, #0
 800166c:	d003      	beq.n	8001676 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800166e:	887a      	ldrh	r2, [r7, #2]
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001674:	e002      	b.n	800167c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001676:	887a      	ldrh	r2, [r7, #2]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800167c:	bf00      	nop
 800167e:	370c      	adds	r7, #12
 8001680:	46bd      	mov	sp, r7
 8001682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001686:	4770      	bx	lr

08001688 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800168c:	4b04      	ldr	r3, [pc, #16]	; (80016a0 <HAL_PWREx_GetVoltageRange+0x18>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001694:	4618      	mov	r0, r3
 8001696:	46bd      	mov	sp, r7
 8001698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800169c:	4770      	bx	lr
 800169e:	bf00      	nop
 80016a0:	40007000 	.word	0x40007000

080016a4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80016a4:	b480      	push	{r7}
 80016a6:	b085      	sub	sp, #20
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016b2:	d130      	bne.n	8001716 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80016b4:	4b23      	ldr	r3, [pc, #140]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016bc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016c0:	d038      	beq.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80016c2:	4b20      	ldr	r3, [pc, #128]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016ca:	4a1e      	ldr	r2, [pc, #120]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016cc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016d2:	4b1d      	ldr	r3, [pc, #116]	; (8001748 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	2232      	movs	r2, #50	; 0x32
 80016d8:	fb02 f303 	mul.w	r3, r2, r3
 80016dc:	4a1b      	ldr	r2, [pc, #108]	; (800174c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016de:	fba2 2303 	umull	r2, r3, r2, r3
 80016e2:	0c9b      	lsrs	r3, r3, #18
 80016e4:	3301      	adds	r3, #1
 80016e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016e8:	e002      	b.n	80016f0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016ea:	68fb      	ldr	r3, [r7, #12]
 80016ec:	3b01      	subs	r3, #1
 80016ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016f0:	4b14      	ldr	r3, [pc, #80]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f2:	695b      	ldr	r3, [r3, #20]
 80016f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fc:	d102      	bne.n	8001704 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	2b00      	cmp	r3, #0
 8001702:	d1f2      	bne.n	80016ea <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001706:	695b      	ldr	r3, [r3, #20]
 8001708:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800170c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001710:	d110      	bne.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001712:	2303      	movs	r3, #3
 8001714:	e00f      	b.n	8001736 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001716:	4b0b      	ldr	r3, [pc, #44]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800171e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001722:	d007      	beq.n	8001734 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001724:	4b07      	ldr	r3, [pc, #28]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800172c:	4a05      	ldr	r2, [pc, #20]	; (8001744 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800172e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001732:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3714      	adds	r7, #20
 800173a:	46bd      	mov	sp, r7
 800173c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001740:	4770      	bx	lr
 8001742:	bf00      	nop
 8001744:	40007000 	.word	0x40007000
 8001748:	2000002c 	.word	0x2000002c
 800174c:	431bde83 	.word	0x431bde83

08001750 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b088      	sub	sp, #32
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	2b00      	cmp	r3, #0
 800175c:	d102      	bne.n	8001764 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	f000 bc02 	b.w	8001f68 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001764:	4b96      	ldr	r3, [pc, #600]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001766:	689b      	ldr	r3, [r3, #8]
 8001768:	f003 030c 	and.w	r3, r3, #12
 800176c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800176e:	4b94      	ldr	r3, [pc, #592]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001770:	68db      	ldr	r3, [r3, #12]
 8001772:	f003 0303 	and.w	r3, r3, #3
 8001776:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001778:	687b      	ldr	r3, [r7, #4]
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 0310 	and.w	r3, r3, #16
 8001780:	2b00      	cmp	r3, #0
 8001782:	f000 80e4 	beq.w	800194e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001786:	69bb      	ldr	r3, [r7, #24]
 8001788:	2b00      	cmp	r3, #0
 800178a:	d007      	beq.n	800179c <HAL_RCC_OscConfig+0x4c>
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	2b0c      	cmp	r3, #12
 8001790:	f040 808b 	bne.w	80018aa <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001794:	697b      	ldr	r3, [r7, #20]
 8001796:	2b01      	cmp	r3, #1
 8001798:	f040 8087 	bne.w	80018aa <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800179c:	4b88      	ldr	r3, [pc, #544]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f003 0302 	and.w	r3, r3, #2
 80017a4:	2b00      	cmp	r3, #0
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x64>
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	699b      	ldr	r3, [r3, #24]
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d101      	bne.n	80017b4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80017b0:	2301      	movs	r3, #1
 80017b2:	e3d9      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	6a1a      	ldr	r2, [r3, #32]
 80017b8:	4b81      	ldr	r3, [pc, #516]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	f003 0308 	and.w	r3, r3, #8
 80017c0:	2b00      	cmp	r3, #0
 80017c2:	d004      	beq.n	80017ce <HAL_RCC_OscConfig+0x7e>
 80017c4:	4b7e      	ldr	r3, [pc, #504]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017cc:	e005      	b.n	80017da <HAL_RCC_OscConfig+0x8a>
 80017ce:	4b7c      	ldr	r3, [pc, #496]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017d4:	091b      	lsrs	r3, r3, #4
 80017d6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017da:	4293      	cmp	r3, r2
 80017dc:	d223      	bcs.n	8001826 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	4618      	mov	r0, r3
 80017e4:	f000 fdbe 	bl	8002364 <RCC_SetFlashLatencyFromMSIRange>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e3ba      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017f2:	4b73      	ldr	r3, [pc, #460]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	4a72      	ldr	r2, [pc, #456]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80017f8:	f043 0308 	orr.w	r3, r3, #8
 80017fc:	6013      	str	r3, [r2, #0]
 80017fe:	4b70      	ldr	r3, [pc, #448]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6a1b      	ldr	r3, [r3, #32]
 800180a:	496d      	ldr	r1, [pc, #436]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800180c:	4313      	orrs	r3, r2
 800180e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001810:	4b6b      	ldr	r3, [pc, #428]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001812:	685b      	ldr	r3, [r3, #4]
 8001814:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	69db      	ldr	r3, [r3, #28]
 800181c:	021b      	lsls	r3, r3, #8
 800181e:	4968      	ldr	r1, [pc, #416]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001820:	4313      	orrs	r3, r2
 8001822:	604b      	str	r3, [r1, #4]
 8001824:	e025      	b.n	8001872 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001826:	4b66      	ldr	r3, [pc, #408]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	4a65      	ldr	r2, [pc, #404]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800182c:	f043 0308 	orr.w	r3, r3, #8
 8001830:	6013      	str	r3, [r2, #0]
 8001832:	4b63      	ldr	r3, [pc, #396]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	6a1b      	ldr	r3, [r3, #32]
 800183e:	4960      	ldr	r1, [pc, #384]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001840:	4313      	orrs	r3, r2
 8001842:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001844:	4b5e      	ldr	r3, [pc, #376]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001846:	685b      	ldr	r3, [r3, #4]
 8001848:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	69db      	ldr	r3, [r3, #28]
 8001850:	021b      	lsls	r3, r3, #8
 8001852:	495b      	ldr	r1, [pc, #364]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001854:	4313      	orrs	r3, r2
 8001856:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001858:	69bb      	ldr	r3, [r7, #24]
 800185a:	2b00      	cmp	r3, #0
 800185c:	d109      	bne.n	8001872 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	6a1b      	ldr	r3, [r3, #32]
 8001862:	4618      	mov	r0, r3
 8001864:	f000 fd7e 	bl	8002364 <RCC_SetFlashLatencyFromMSIRange>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800186e:	2301      	movs	r3, #1
 8001870:	e37a      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001872:	f000 fc81 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8001876:	4602      	mov	r2, r0
 8001878:	4b51      	ldr	r3, [pc, #324]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800187a:	689b      	ldr	r3, [r3, #8]
 800187c:	091b      	lsrs	r3, r3, #4
 800187e:	f003 030f 	and.w	r3, r3, #15
 8001882:	4950      	ldr	r1, [pc, #320]	; (80019c4 <HAL_RCC_OscConfig+0x274>)
 8001884:	5ccb      	ldrb	r3, [r1, r3]
 8001886:	f003 031f 	and.w	r3, r3, #31
 800188a:	fa22 f303 	lsr.w	r3, r2, r3
 800188e:	4a4e      	ldr	r2, [pc, #312]	; (80019c8 <HAL_RCC_OscConfig+0x278>)
 8001890:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001892:	4b4e      	ldr	r3, [pc, #312]	; (80019cc <HAL_RCC_OscConfig+0x27c>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	4618      	mov	r0, r3
 8001898:	f7ff f9ae 	bl	8000bf8 <HAL_InitTick>
 800189c:	4603      	mov	r3, r0
 800189e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d052      	beq.n	800194c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80018a6:	7bfb      	ldrb	r3, [r7, #15]
 80018a8:	e35e      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	699b      	ldr	r3, [r3, #24]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d032      	beq.n	8001918 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80018b2:	4b43      	ldr	r3, [pc, #268]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	4a42      	ldr	r2, [pc, #264]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018be:	f7ff fbf3 	bl	80010a8 <HAL_GetTick>
 80018c2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018c4:	e008      	b.n	80018d8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80018c6:	f7ff fbef 	bl	80010a8 <HAL_GetTick>
 80018ca:	4602      	mov	r2, r0
 80018cc:	693b      	ldr	r3, [r7, #16]
 80018ce:	1ad3      	subs	r3, r2, r3
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	d901      	bls.n	80018d8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80018d4:	2303      	movs	r3, #3
 80018d6:	e347      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d8:	4b39      	ldr	r3, [pc, #228]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018da:	681b      	ldr	r3, [r3, #0]
 80018dc:	f003 0302 	and.w	r3, r3, #2
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d0f0      	beq.n	80018c6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018e4:	4b36      	ldr	r3, [pc, #216]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	4a35      	ldr	r2, [pc, #212]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018ea:	f043 0308 	orr.w	r3, r3, #8
 80018ee:	6013      	str	r3, [r2, #0]
 80018f0:	4b33      	ldr	r3, [pc, #204]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	6a1b      	ldr	r3, [r3, #32]
 80018fc:	4930      	ldr	r1, [pc, #192]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80018fe:	4313      	orrs	r3, r2
 8001900:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001902:	4b2f      	ldr	r3, [pc, #188]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	69db      	ldr	r3, [r3, #28]
 800190e:	021b      	lsls	r3, r3, #8
 8001910:	492b      	ldr	r1, [pc, #172]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001912:	4313      	orrs	r3, r2
 8001914:	604b      	str	r3, [r1, #4]
 8001916:	e01a      	b.n	800194e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001918:	4b29      	ldr	r3, [pc, #164]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a28      	ldr	r2, [pc, #160]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800191e:	f023 0301 	bic.w	r3, r3, #1
 8001922:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001924:	f7ff fbc0 	bl	80010a8 <HAL_GetTick>
 8001928:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800192a:	e008      	b.n	800193e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800192c:	f7ff fbbc 	bl	80010a8 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	2b02      	cmp	r3, #2
 8001938:	d901      	bls.n	800193e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800193a:	2303      	movs	r3, #3
 800193c:	e314      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800193e:	4b20      	ldr	r3, [pc, #128]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	f003 0302 	and.w	r3, r3, #2
 8001946:	2b00      	cmp	r3, #0
 8001948:	d1f0      	bne.n	800192c <HAL_RCC_OscConfig+0x1dc>
 800194a:	e000      	b.n	800194e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800194c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f003 0301 	and.w	r3, r3, #1
 8001956:	2b00      	cmp	r3, #0
 8001958:	d073      	beq.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800195a:	69bb      	ldr	r3, [r7, #24]
 800195c:	2b08      	cmp	r3, #8
 800195e:	d005      	beq.n	800196c <HAL_RCC_OscConfig+0x21c>
 8001960:	69bb      	ldr	r3, [r7, #24]
 8001962:	2b0c      	cmp	r3, #12
 8001964:	d10e      	bne.n	8001984 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001966:	697b      	ldr	r3, [r7, #20]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d10b      	bne.n	8001984 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800196c:	4b14      	ldr	r3, [pc, #80]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001974:	2b00      	cmp	r3, #0
 8001976:	d063      	beq.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	2b00      	cmp	r3, #0
 800197e:	d15f      	bne.n	8001a40 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001980:	2301      	movs	r3, #1
 8001982:	e2f1      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	685b      	ldr	r3, [r3, #4]
 8001988:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800198c:	d106      	bne.n	800199c <HAL_RCC_OscConfig+0x24c>
 800198e:	4b0c      	ldr	r3, [pc, #48]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a0b      	ldr	r2, [pc, #44]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 8001994:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001998:	6013      	str	r3, [r2, #0]
 800199a:	e025      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80019a4:	d114      	bne.n	80019d0 <HAL_RCC_OscConfig+0x280>
 80019a6:	4b06      	ldr	r3, [pc, #24]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a05      	ldr	r2, [pc, #20]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80019b0:	6013      	str	r3, [r2, #0]
 80019b2:	4b03      	ldr	r3, [pc, #12]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	4a02      	ldr	r2, [pc, #8]	; (80019c0 <HAL_RCC_OscConfig+0x270>)
 80019b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019bc:	6013      	str	r3, [r2, #0]
 80019be:	e013      	b.n	80019e8 <HAL_RCC_OscConfig+0x298>
 80019c0:	40021000 	.word	0x40021000
 80019c4:	080090b4 	.word	0x080090b4
 80019c8:	2000002c 	.word	0x2000002c
 80019cc:	20000030 	.word	0x20000030
 80019d0:	4ba0      	ldr	r3, [pc, #640]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a9f      	ldr	r2, [pc, #636]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80019da:	6013      	str	r3, [r2, #0]
 80019dc:	4b9d      	ldr	r3, [pc, #628]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	4a9c      	ldr	r2, [pc, #624]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 80019e2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019e6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	685b      	ldr	r3, [r3, #4]
 80019ec:	2b00      	cmp	r3, #0
 80019ee:	d013      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019f0:	f7ff fb5a 	bl	80010a8 <HAL_GetTick>
 80019f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f6:	e008      	b.n	8001a0a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f8:	f7ff fb56 	bl	80010a8 <HAL_GetTick>
 80019fc:	4602      	mov	r2, r0
 80019fe:	693b      	ldr	r3, [r7, #16]
 8001a00:	1ad3      	subs	r3, r2, r3
 8001a02:	2b64      	cmp	r3, #100	; 0x64
 8001a04:	d901      	bls.n	8001a0a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001a06:	2303      	movs	r3, #3
 8001a08:	e2ae      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a0a:	4b92      	ldr	r3, [pc, #584]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d0f0      	beq.n	80019f8 <HAL_RCC_OscConfig+0x2a8>
 8001a16:	e014      	b.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a18:	f7ff fb46 	bl	80010a8 <HAL_GetTick>
 8001a1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1e:	e008      	b.n	8001a32 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001a20:	f7ff fb42 	bl	80010a8 <HAL_GetTick>
 8001a24:	4602      	mov	r2, r0
 8001a26:	693b      	ldr	r3, [r7, #16]
 8001a28:	1ad3      	subs	r3, r2, r3
 8001a2a:	2b64      	cmp	r3, #100	; 0x64
 8001a2c:	d901      	bls.n	8001a32 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001a2e:	2303      	movs	r3, #3
 8001a30:	e29a      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a32:	4b88      	ldr	r3, [pc, #544]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d1f0      	bne.n	8001a20 <HAL_RCC_OscConfig+0x2d0>
 8001a3e:	e000      	b.n	8001a42 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0302 	and.w	r3, r3, #2
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d060      	beq.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a4e:	69bb      	ldr	r3, [r7, #24]
 8001a50:	2b04      	cmp	r3, #4
 8001a52:	d005      	beq.n	8001a60 <HAL_RCC_OscConfig+0x310>
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	2b0c      	cmp	r3, #12
 8001a58:	d119      	bne.n	8001a8e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	2b02      	cmp	r3, #2
 8001a5e:	d116      	bne.n	8001a8e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a60:	4b7c      	ldr	r3, [pc, #496]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d005      	beq.n	8001a78 <HAL_RCC_OscConfig+0x328>
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	68db      	ldr	r3, [r3, #12]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d101      	bne.n	8001a78 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001a74:	2301      	movs	r3, #1
 8001a76:	e277      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a78:	4b76      	ldr	r3, [pc, #472]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a7a:	685b      	ldr	r3, [r3, #4]
 8001a7c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	691b      	ldr	r3, [r3, #16]
 8001a84:	061b      	lsls	r3, r3, #24
 8001a86:	4973      	ldr	r1, [pc, #460]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a88:	4313      	orrs	r3, r2
 8001a8a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a8c:	e040      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	68db      	ldr	r3, [r3, #12]
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	d023      	beq.n	8001ade <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a96:	4b6f      	ldr	r3, [pc, #444]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a6e      	ldr	r2, [pc, #440]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001aa0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aa2:	f7ff fb01 	bl	80010a8 <HAL_GetTick>
 8001aa6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001aa8:	e008      	b.n	8001abc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001aaa:	f7ff fafd 	bl	80010a8 <HAL_GetTick>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	693b      	ldr	r3, [r7, #16]
 8001ab2:	1ad3      	subs	r3, r2, r3
 8001ab4:	2b02      	cmp	r3, #2
 8001ab6:	d901      	bls.n	8001abc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ab8:	2303      	movs	r3, #3
 8001aba:	e255      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001abc:	4b65      	ldr	r3, [pc, #404]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac4:	2b00      	cmp	r3, #0
 8001ac6:	d0f0      	beq.n	8001aaa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ac8:	4b62      	ldr	r3, [pc, #392]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	691b      	ldr	r3, [r3, #16]
 8001ad4:	061b      	lsls	r3, r3, #24
 8001ad6:	495f      	ldr	r1, [pc, #380]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001ad8:	4313      	orrs	r3, r2
 8001ada:	604b      	str	r3, [r1, #4]
 8001adc:	e018      	b.n	8001b10 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ade:	4b5d      	ldr	r3, [pc, #372]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	4a5c      	ldr	r2, [pc, #368]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001ae4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001ae8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001aea:	f7ff fadd 	bl	80010a8 <HAL_GetTick>
 8001aee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001af0:	e008      	b.n	8001b04 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001af2:	f7ff fad9 	bl	80010a8 <HAL_GetTick>
 8001af6:	4602      	mov	r2, r0
 8001af8:	693b      	ldr	r3, [r7, #16]
 8001afa:	1ad3      	subs	r3, r2, r3
 8001afc:	2b02      	cmp	r3, #2
 8001afe:	d901      	bls.n	8001b04 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001b00:	2303      	movs	r3, #3
 8001b02:	e231      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b04:	4b53      	ldr	r3, [pc, #332]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d1f0      	bne.n	8001af2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f003 0308 	and.w	r3, r3, #8
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d03c      	beq.n	8001b96 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	695b      	ldr	r3, [r3, #20]
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d01c      	beq.n	8001b5e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001b24:	4b4b      	ldr	r3, [pc, #300]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	4a4a      	ldr	r2, [pc, #296]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b2c:	f043 0301 	orr.w	r3, r3, #1
 8001b30:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff fab8 	bl	80010a8 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b3a:	e008      	b.n	8001b4e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b3c:	f7ff fab4 	bl	80010a8 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	2b02      	cmp	r3, #2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e20c      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b4e:	4b41      	ldr	r3, [pc, #260]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b50:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b54:	f003 0302 	and.w	r3, r3, #2
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d0ef      	beq.n	8001b3c <HAL_RCC_OscConfig+0x3ec>
 8001b5c:	e01b      	b.n	8001b96 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b5e:	4b3d      	ldr	r3, [pc, #244]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b64:	4a3b      	ldr	r2, [pc, #236]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b66:	f023 0301 	bic.w	r3, r3, #1
 8001b6a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b6e:	f7ff fa9b 	bl	80010a8 <HAL_GetTick>
 8001b72:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b74:	e008      	b.n	8001b88 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b76:	f7ff fa97 	bl	80010a8 <HAL_GetTick>
 8001b7a:	4602      	mov	r2, r0
 8001b7c:	693b      	ldr	r3, [r7, #16]
 8001b7e:	1ad3      	subs	r3, r2, r3
 8001b80:	2b02      	cmp	r3, #2
 8001b82:	d901      	bls.n	8001b88 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	e1ef      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b88:	4b32      	ldr	r3, [pc, #200]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001b8a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b8e:	f003 0302 	and.w	r3, r3, #2
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d1ef      	bne.n	8001b76 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 0304 	and.w	r3, r3, #4
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	f000 80a6 	beq.w	8001cf0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ba4:	2300      	movs	r3, #0
 8001ba6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001ba8:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001baa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d10d      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001bb4:	4b27      	ldr	r3, [pc, #156]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	4a26      	ldr	r2, [pc, #152]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001bba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bbe:	6593      	str	r3, [r2, #88]	; 0x58
 8001bc0:	4b24      	ldr	r3, [pc, #144]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001bc2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bc4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bc8:	60bb      	str	r3, [r7, #8]
 8001bca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd0:	4b21      	ldr	r3, [pc, #132]	; (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bd8:	2b00      	cmp	r3, #0
 8001bda:	d118      	bne.n	8001c0e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bdc:	4b1e      	ldr	r3, [pc, #120]	; (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	4a1d      	ldr	r2, [pc, #116]	; (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001be2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001be6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001be8:	f7ff fa5e 	bl	80010a8 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bee:	e008      	b.n	8001c02 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bf0:	f7ff fa5a 	bl	80010a8 <HAL_GetTick>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	693b      	ldr	r3, [r7, #16]
 8001bf8:	1ad3      	subs	r3, r2, r3
 8001bfa:	2b02      	cmp	r3, #2
 8001bfc:	d901      	bls.n	8001c02 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001bfe:	2303      	movs	r3, #3
 8001c00:	e1b2      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001c02:	4b15      	ldr	r3, [pc, #84]	; (8001c58 <HAL_RCC_OscConfig+0x508>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d0f0      	beq.n	8001bf0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	689b      	ldr	r3, [r3, #8]
 8001c12:	2b01      	cmp	r3, #1
 8001c14:	d108      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4d8>
 8001c16:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1c:	4a0d      	ldr	r2, [pc, #52]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c26:	e029      	b.n	8001c7c <HAL_RCC_OscConfig+0x52c>
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	2b05      	cmp	r3, #5
 8001c2e:	d115      	bne.n	8001c5c <HAL_RCC_OscConfig+0x50c>
 8001c30:	4b08      	ldr	r3, [pc, #32]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c32:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c36:	4a07      	ldr	r2, [pc, #28]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c38:	f043 0304 	orr.w	r3, r3, #4
 8001c3c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c40:	4b04      	ldr	r3, [pc, #16]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c46:	4a03      	ldr	r2, [pc, #12]	; (8001c54 <HAL_RCC_OscConfig+0x504>)
 8001c48:	f043 0301 	orr.w	r3, r3, #1
 8001c4c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c50:	e014      	b.n	8001c7c <HAL_RCC_OscConfig+0x52c>
 8001c52:	bf00      	nop
 8001c54:	40021000 	.word	0x40021000
 8001c58:	40007000 	.word	0x40007000
 8001c5c:	4b9a      	ldr	r3, [pc, #616]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001c5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c62:	4a99      	ldr	r2, [pc, #612]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001c64:	f023 0301 	bic.w	r3, r3, #1
 8001c68:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c6c:	4b96      	ldr	r3, [pc, #600]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001c6e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c72:	4a95      	ldr	r2, [pc, #596]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001c74:	f023 0304 	bic.w	r3, r3, #4
 8001c78:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d016      	beq.n	8001cb2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c84:	f7ff fa10 	bl	80010a8 <HAL_GetTick>
 8001c88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c8a:	e00a      	b.n	8001ca2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c8c:	f7ff fa0c 	bl	80010a8 <HAL_GetTick>
 8001c90:	4602      	mov	r2, r0
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	1ad3      	subs	r3, r2, r3
 8001c96:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c9a:	4293      	cmp	r3, r2
 8001c9c:	d901      	bls.n	8001ca2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001c9e:	2303      	movs	r3, #3
 8001ca0:	e162      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ca2:	4b89      	ldr	r3, [pc, #548]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ca8:	f003 0302 	and.w	r3, r3, #2
 8001cac:	2b00      	cmp	r3, #0
 8001cae:	d0ed      	beq.n	8001c8c <HAL_RCC_OscConfig+0x53c>
 8001cb0:	e015      	b.n	8001cde <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001cb2:	f7ff f9f9 	bl	80010a8 <HAL_GetTick>
 8001cb6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cb8:	e00a      	b.n	8001cd0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cba:	f7ff f9f5 	bl	80010a8 <HAL_GetTick>
 8001cbe:	4602      	mov	r2, r0
 8001cc0:	693b      	ldr	r3, [r7, #16]
 8001cc2:	1ad3      	subs	r3, r2, r3
 8001cc4:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d901      	bls.n	8001cd0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001ccc:	2303      	movs	r3, #3
 8001cce:	e14b      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001cd0:	4b7d      	ldr	r3, [pc, #500]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001cd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d1ed      	bne.n	8001cba <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cde:	7ffb      	ldrb	r3, [r7, #31]
 8001ce0:	2b01      	cmp	r3, #1
 8001ce2:	d105      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001ce4:	4b78      	ldr	r3, [pc, #480]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001ce6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ce8:	4a77      	ldr	r2, [pc, #476]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001cea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cee:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	f003 0320 	and.w	r3, r3, #32
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d03c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d01c      	beq.n	8001d3e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001d04:	4b70      	ldr	r3, [pc, #448]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001d06:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d0a:	4a6f      	ldr	r2, [pc, #444]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001d0c:	f043 0301 	orr.w	r3, r3, #1
 8001d10:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d14:	f7ff f9c8 	bl	80010a8 <HAL_GetTick>
 8001d18:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d1a:	e008      	b.n	8001d2e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d1c:	f7ff f9c4 	bl	80010a8 <HAL_GetTick>
 8001d20:	4602      	mov	r2, r0
 8001d22:	693b      	ldr	r3, [r7, #16]
 8001d24:	1ad3      	subs	r3, r2, r3
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d901      	bls.n	8001d2e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001d2a:	2303      	movs	r3, #3
 8001d2c:	e11c      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001d2e:	4b66      	ldr	r3, [pc, #408]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001d30:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d34:	f003 0302 	and.w	r3, r3, #2
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	d0ef      	beq.n	8001d1c <HAL_RCC_OscConfig+0x5cc>
 8001d3c:	e01b      	b.n	8001d76 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001d3e:	4b62      	ldr	r3, [pc, #392]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001d40:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d44:	4a60      	ldr	r2, [pc, #384]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001d46:	f023 0301 	bic.w	r3, r3, #1
 8001d4a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d4e:	f7ff f9ab 	bl	80010a8 <HAL_GetTick>
 8001d52:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d54:	e008      	b.n	8001d68 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001d56:	f7ff f9a7 	bl	80010a8 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	1ad3      	subs	r3, r2, r3
 8001d60:	2b02      	cmp	r3, #2
 8001d62:	d901      	bls.n	8001d68 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001d64:	2303      	movs	r3, #3
 8001d66:	e0ff      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001d68:	4b57      	ldr	r3, [pc, #348]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001d6a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001d6e:	f003 0302 	and.w	r3, r3, #2
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d1ef      	bne.n	8001d56 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	f000 80f3 	beq.w	8001f66 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d84:	2b02      	cmp	r3, #2
 8001d86:	f040 80c9 	bne.w	8001f1c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001d8a:	4b4f      	ldr	r3, [pc, #316]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001d90:	697b      	ldr	r3, [r7, #20]
 8001d92:	f003 0203 	and.w	r2, r3, #3
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d9a:	429a      	cmp	r2, r3
 8001d9c:	d12c      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da8:	3b01      	subs	r3, #1
 8001daa:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001dac:	429a      	cmp	r2, r3
 8001dae:	d123      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001db0:	697b      	ldr	r3, [r7, #20]
 8001db2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001dba:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d11b      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001dc0:	697b      	ldr	r3, [r7, #20]
 8001dc2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001dca:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	d113      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001dda:	085b      	lsrs	r3, r3, #1
 8001ddc:	3b01      	subs	r3, #1
 8001dde:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001de0:	429a      	cmp	r2, r3
 8001de2:	d109      	bne.n	8001df8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001de4:	697b      	ldr	r3, [r7, #20]
 8001de6:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dee:	085b      	lsrs	r3, r3, #1
 8001df0:	3b01      	subs	r3, #1
 8001df2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001df4:	429a      	cmp	r2, r3
 8001df6:	d06b      	beq.n	8001ed0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001df8:	69bb      	ldr	r3, [r7, #24]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d062      	beq.n	8001ec4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001dfe:	4b32      	ldr	r3, [pc, #200]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e0ac      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001e0e:	4b2e      	ldr	r3, [pc, #184]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	4a2d      	ldr	r2, [pc, #180]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001e14:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001e18:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e1a:	f7ff f945 	bl	80010a8 <HAL_GetTick>
 8001e1e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e20:	e008      	b.n	8001e34 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001e22:	f7ff f941 	bl	80010a8 <HAL_GetTick>
 8001e26:	4602      	mov	r2, r0
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	1ad3      	subs	r3, r2, r3
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d901      	bls.n	8001e34 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001e30:	2303      	movs	r3, #3
 8001e32:	e099      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001e34:	4b24      	ldr	r3, [pc, #144]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d1f0      	bne.n	8001e22 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001e40:	4b21      	ldr	r3, [pc, #132]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001e42:	68da      	ldr	r2, [r3, #12]
 8001e44:	4b21      	ldr	r3, [pc, #132]	; (8001ecc <HAL_RCC_OscConfig+0x77c>)
 8001e46:	4013      	ands	r3, r2
 8001e48:	687a      	ldr	r2, [r7, #4]
 8001e4a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001e4c:	687a      	ldr	r2, [r7, #4]
 8001e4e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001e50:	3a01      	subs	r2, #1
 8001e52:	0112      	lsls	r2, r2, #4
 8001e54:	4311      	orrs	r1, r2
 8001e56:	687a      	ldr	r2, [r7, #4]
 8001e58:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001e5a:	0212      	lsls	r2, r2, #8
 8001e5c:	4311      	orrs	r1, r2
 8001e5e:	687a      	ldr	r2, [r7, #4]
 8001e60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001e62:	0852      	lsrs	r2, r2, #1
 8001e64:	3a01      	subs	r2, #1
 8001e66:	0552      	lsls	r2, r2, #21
 8001e68:	4311      	orrs	r1, r2
 8001e6a:	687a      	ldr	r2, [r7, #4]
 8001e6c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001e6e:	0852      	lsrs	r2, r2, #1
 8001e70:	3a01      	subs	r2, #1
 8001e72:	0652      	lsls	r2, r2, #25
 8001e74:	4311      	orrs	r1, r2
 8001e76:	687a      	ldr	r2, [r7, #4]
 8001e78:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e7a:	06d2      	lsls	r2, r2, #27
 8001e7c:	430a      	orrs	r2, r1
 8001e7e:	4912      	ldr	r1, [pc, #72]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001e80:	4313      	orrs	r3, r2
 8001e82:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001e84:	4b10      	ldr	r3, [pc, #64]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a0f      	ldr	r2, [pc, #60]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001e8a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e8e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001e90:	4b0d      	ldr	r3, [pc, #52]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001e92:	68db      	ldr	r3, [r3, #12]
 8001e94:	4a0c      	ldr	r2, [pc, #48]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001e96:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001e9a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001e9c:	f7ff f904 	bl	80010a8 <HAL_GetTick>
 8001ea0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ea2:	e008      	b.n	8001eb6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ea4:	f7ff f900 	bl	80010a8 <HAL_GetTick>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	1ad3      	subs	r3, r2, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d901      	bls.n	8001eb6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	e058      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eb6:	4b04      	ldr	r3, [pc, #16]	; (8001ec8 <HAL_RCC_OscConfig+0x778>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d0f0      	beq.n	8001ea4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ec2:	e050      	b.n	8001f66 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e04f      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
 8001ec8:	40021000 	.word	0x40021000
 8001ecc:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ed0:	4b27      	ldr	r3, [pc, #156]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d144      	bne.n	8001f66 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001edc:	4b24      	ldr	r3, [pc, #144]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	4a23      	ldr	r2, [pc, #140]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001ee2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ee6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ee8:	4b21      	ldr	r3, [pc, #132]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001eea:	68db      	ldr	r3, [r3, #12]
 8001eec:	4a20      	ldr	r2, [pc, #128]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001eee:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ef2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001ef4:	f7ff f8d8 	bl	80010a8 <HAL_GetTick>
 8001ef8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001efa:	e008      	b.n	8001f0e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001efc:	f7ff f8d4 	bl	80010a8 <HAL_GetTick>
 8001f00:	4602      	mov	r2, r0
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	1ad3      	subs	r3, r2, r3
 8001f06:	2b02      	cmp	r3, #2
 8001f08:	d901      	bls.n	8001f0e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001f0a:	2303      	movs	r3, #3
 8001f0c:	e02c      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d0f0      	beq.n	8001efc <HAL_RCC_OscConfig+0x7ac>
 8001f1a:	e024      	b.n	8001f66 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001f1c:	69bb      	ldr	r3, [r7, #24]
 8001f1e:	2b0c      	cmp	r3, #12
 8001f20:	d01f      	beq.n	8001f62 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001f22:	4b13      	ldr	r3, [pc, #76]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	4a12      	ldr	r2, [pc, #72]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001f28:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f2c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f2e:	f7ff f8bb 	bl	80010a8 <HAL_GetTick>
 8001f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f34:	e008      	b.n	8001f48 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f36:	f7ff f8b7 	bl	80010a8 <HAL_GetTick>
 8001f3a:	4602      	mov	r2, r0
 8001f3c:	693b      	ldr	r3, [r7, #16]
 8001f3e:	1ad3      	subs	r3, r2, r3
 8001f40:	2b02      	cmp	r3, #2
 8001f42:	d901      	bls.n	8001f48 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001f44:	2303      	movs	r3, #3
 8001f46:	e00f      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f48:	4b09      	ldr	r3, [pc, #36]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d1f0      	bne.n	8001f36 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001f54:	4b06      	ldr	r3, [pc, #24]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	4905      	ldr	r1, [pc, #20]	; (8001f70 <HAL_RCC_OscConfig+0x820>)
 8001f5a:	4b06      	ldr	r3, [pc, #24]	; (8001f74 <HAL_RCC_OscConfig+0x824>)
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	60cb      	str	r3, [r1, #12]
 8001f60:	e001      	b.n	8001f66 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e000      	b.n	8001f68 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3720      	adds	r7, #32
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}
 8001f70:	40021000 	.word	0x40021000
 8001f74:	feeefffc 	.word	0xfeeefffc

08001f78 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
 8001f7e:	6078      	str	r0, [r7, #4]
 8001f80:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e0e7      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001f8c:	4b75      	ldr	r3, [pc, #468]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d910      	bls.n	8001fbc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f9a:	4b72      	ldr	r3, [pc, #456]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f023 0207 	bic.w	r2, r3, #7
 8001fa2:	4970      	ldr	r1, [pc, #448]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 8001fa4:	683b      	ldr	r3, [r7, #0]
 8001fa6:	4313      	orrs	r3, r2
 8001fa8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001faa:	4b6e      	ldr	r3, [pc, #440]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	f003 0307 	and.w	r3, r3, #7
 8001fb2:	683a      	ldr	r2, [r7, #0]
 8001fb4:	429a      	cmp	r2, r3
 8001fb6:	d001      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	e0cf      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	4b66      	ldr	r3, [pc, #408]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8001fce:	689b      	ldr	r3, [r3, #8]
 8001fd0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d908      	bls.n	8001fea <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b63      	ldr	r3, [pc, #396]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8001fda:	689b      	ldr	r3, [r3, #8]
 8001fdc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4960      	ldr	r1, [pc, #384]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d04c      	beq.n	8002090 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	2b03      	cmp	r3, #3
 8001ffc:	d107      	bne.n	800200e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ffe:	4b5a      	ldr	r3, [pc, #360]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002006:	2b00      	cmp	r3, #0
 8002008:	d121      	bne.n	800204e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 800200a:	2301      	movs	r3, #1
 800200c:	e0a6      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	685b      	ldr	r3, [r3, #4]
 8002012:	2b02      	cmp	r3, #2
 8002014:	d107      	bne.n	8002026 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002016:	4b54      	ldr	r3, [pc, #336]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800201e:	2b00      	cmp	r3, #0
 8002020:	d115      	bne.n	800204e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e09a      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	685b      	ldr	r3, [r3, #4]
 800202a:	2b00      	cmp	r3, #0
 800202c:	d107      	bne.n	800203e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800202e:	4b4e      	ldr	r3, [pc, #312]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0302 	and.w	r3, r3, #2
 8002036:	2b00      	cmp	r3, #0
 8002038:	d109      	bne.n	800204e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800203a:	2301      	movs	r3, #1
 800203c:	e08e      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800203e:	4b4a      	ldr	r3, [pc, #296]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002046:	2b00      	cmp	r3, #0
 8002048:	d101      	bne.n	800204e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e086      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800204e:	4b46      	ldr	r3, [pc, #280]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f023 0203 	bic.w	r2, r3, #3
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	685b      	ldr	r3, [r3, #4]
 800205a:	4943      	ldr	r1, [pc, #268]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 800205c:	4313      	orrs	r3, r2
 800205e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002060:	f7ff f822 	bl	80010a8 <HAL_GetTick>
 8002064:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002066:	e00a      	b.n	800207e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002068:	f7ff f81e 	bl	80010a8 <HAL_GetTick>
 800206c:	4602      	mov	r2, r0
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	1ad3      	subs	r3, r2, r3
 8002072:	f241 3288 	movw	r2, #5000	; 0x1388
 8002076:	4293      	cmp	r3, r2
 8002078:	d901      	bls.n	800207e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e06e      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800207e:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002080:	689b      	ldr	r3, [r3, #8]
 8002082:	f003 020c 	and.w	r2, r3, #12
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	685b      	ldr	r3, [r3, #4]
 800208a:	009b      	lsls	r3, r3, #2
 800208c:	429a      	cmp	r2, r3
 800208e:	d1eb      	bne.n	8002068 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 0302 	and.w	r3, r3, #2
 8002098:	2b00      	cmp	r3, #0
 800209a:	d010      	beq.n	80020be <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	689a      	ldr	r2, [r3, #8]
 80020a0:	4b31      	ldr	r3, [pc, #196]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 80020a2:	689b      	ldr	r3, [r3, #8]
 80020a4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d208      	bcs.n	80020be <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020ac:	4b2e      	ldr	r3, [pc, #184]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 80020ae:	689b      	ldr	r3, [r3, #8]
 80020b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	492b      	ldr	r1, [pc, #172]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80020be:	4b29      	ldr	r3, [pc, #164]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0307 	and.w	r3, r3, #7
 80020c6:	683a      	ldr	r2, [r7, #0]
 80020c8:	429a      	cmp	r2, r3
 80020ca:	d210      	bcs.n	80020ee <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020cc:	4b25      	ldr	r3, [pc, #148]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f023 0207 	bic.w	r2, r3, #7
 80020d4:	4923      	ldr	r1, [pc, #140]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 80020d6:	683b      	ldr	r3, [r7, #0]
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80020dc:	4b21      	ldr	r3, [pc, #132]	; (8002164 <HAL_RCC_ClockConfig+0x1ec>)
 80020de:	681b      	ldr	r3, [r3, #0]
 80020e0:	f003 0307 	and.w	r3, r3, #7
 80020e4:	683a      	ldr	r2, [r7, #0]
 80020e6:	429a      	cmp	r2, r3
 80020e8:	d001      	beq.n	80020ee <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80020ea:	2301      	movs	r3, #1
 80020ec:	e036      	b.n	800215c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 0304 	and.w	r3, r3, #4
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d008      	beq.n	800210c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	68db      	ldr	r3, [r3, #12]
 8002106:	4918      	ldr	r1, [pc, #96]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002108:	4313      	orrs	r3, r2
 800210a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	f003 0308 	and.w	r3, r3, #8
 8002114:	2b00      	cmp	r3, #0
 8002116:	d009      	beq.n	800212c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002118:	4b13      	ldr	r3, [pc, #76]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	691b      	ldr	r3, [r3, #16]
 8002124:	00db      	lsls	r3, r3, #3
 8002126:	4910      	ldr	r1, [pc, #64]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	4313      	orrs	r3, r2
 800212a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800212c:	f000 f824 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8002130:	4602      	mov	r2, r0
 8002132:	4b0d      	ldr	r3, [pc, #52]	; (8002168 <HAL_RCC_ClockConfig+0x1f0>)
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	091b      	lsrs	r3, r3, #4
 8002138:	f003 030f 	and.w	r3, r3, #15
 800213c:	490b      	ldr	r1, [pc, #44]	; (800216c <HAL_RCC_ClockConfig+0x1f4>)
 800213e:	5ccb      	ldrb	r3, [r1, r3]
 8002140:	f003 031f 	and.w	r3, r3, #31
 8002144:	fa22 f303 	lsr.w	r3, r2, r3
 8002148:	4a09      	ldr	r2, [pc, #36]	; (8002170 <HAL_RCC_ClockConfig+0x1f8>)
 800214a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800214c:	4b09      	ldr	r3, [pc, #36]	; (8002174 <HAL_RCC_ClockConfig+0x1fc>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	4618      	mov	r0, r3
 8002152:	f7fe fd51 	bl	8000bf8 <HAL_InitTick>
 8002156:	4603      	mov	r3, r0
 8002158:	72fb      	strb	r3, [r7, #11]

  return status;
 800215a:	7afb      	ldrb	r3, [r7, #11]
}
 800215c:	4618      	mov	r0, r3
 800215e:	3710      	adds	r7, #16
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40022000 	.word	0x40022000
 8002168:	40021000 	.word	0x40021000
 800216c:	080090b4 	.word	0x080090b4
 8002170:	2000002c 	.word	0x2000002c
 8002174:	20000030 	.word	0x20000030

08002178 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002178:	b480      	push	{r7}
 800217a:	b089      	sub	sp, #36	; 0x24
 800217c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800217e:	2300      	movs	r3, #0
 8002180:	61fb      	str	r3, [r7, #28]
 8002182:	2300      	movs	r3, #0
 8002184:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002186:	4b3e      	ldr	r3, [pc, #248]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	f003 030c 	and.w	r3, r3, #12
 800218e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002190:	4b3b      	ldr	r3, [pc, #236]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002192:	68db      	ldr	r3, [r3, #12]
 8002194:	f003 0303 	and.w	r3, r3, #3
 8002198:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800219a:	693b      	ldr	r3, [r7, #16]
 800219c:	2b00      	cmp	r3, #0
 800219e:	d005      	beq.n	80021ac <HAL_RCC_GetSysClockFreq+0x34>
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	2b0c      	cmp	r3, #12
 80021a4:	d121      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d11e      	bne.n	80021ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80021ac:	4b34      	ldr	r3, [pc, #208]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 0308 	and.w	r3, r3, #8
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d107      	bne.n	80021c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80021b8:	4b31      	ldr	r3, [pc, #196]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80021be:	0a1b      	lsrs	r3, r3, #8
 80021c0:	f003 030f 	and.w	r3, r3, #15
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e005      	b.n	80021d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80021c8:	4b2d      	ldr	r3, [pc, #180]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	091b      	lsrs	r3, r3, #4
 80021ce:	f003 030f 	and.w	r3, r3, #15
 80021d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80021d4:	4a2b      	ldr	r2, [pc, #172]	; (8002284 <HAL_RCC_GetSysClockFreq+0x10c>)
 80021d6:	69fb      	ldr	r3, [r7, #28]
 80021d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d10d      	bne.n	8002200 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80021e4:	69fb      	ldr	r3, [r7, #28]
 80021e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80021e8:	e00a      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80021ea:	693b      	ldr	r3, [r7, #16]
 80021ec:	2b04      	cmp	r3, #4
 80021ee:	d102      	bne.n	80021f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80021f0:	4b25      	ldr	r3, [pc, #148]	; (8002288 <HAL_RCC_GetSysClockFreq+0x110>)
 80021f2:	61bb      	str	r3, [r7, #24]
 80021f4:	e004      	b.n	8002200 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	2b08      	cmp	r3, #8
 80021fa:	d101      	bne.n	8002200 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80021fc:	4b23      	ldr	r3, [pc, #140]	; (800228c <HAL_RCC_GetSysClockFreq+0x114>)
 80021fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	2b0c      	cmp	r3, #12
 8002204:	d134      	bne.n	8002270 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002206:	4b1e      	ldr	r3, [pc, #120]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002208:	68db      	ldr	r3, [r3, #12]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002210:	68bb      	ldr	r3, [r7, #8]
 8002212:	2b02      	cmp	r3, #2
 8002214:	d003      	beq.n	800221e <HAL_RCC_GetSysClockFreq+0xa6>
 8002216:	68bb      	ldr	r3, [r7, #8]
 8002218:	2b03      	cmp	r3, #3
 800221a:	d003      	beq.n	8002224 <HAL_RCC_GetSysClockFreq+0xac>
 800221c:	e005      	b.n	800222a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800221e:	4b1a      	ldr	r3, [pc, #104]	; (8002288 <HAL_RCC_GetSysClockFreq+0x110>)
 8002220:	617b      	str	r3, [r7, #20]
      break;
 8002222:	e005      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002224:	4b19      	ldr	r3, [pc, #100]	; (800228c <HAL_RCC_GetSysClockFreq+0x114>)
 8002226:	617b      	str	r3, [r7, #20]
      break;
 8002228:	e002      	b.n	8002230 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800222a:	69fb      	ldr	r3, [r7, #28]
 800222c:	617b      	str	r3, [r7, #20]
      break;
 800222e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002230:	4b13      	ldr	r3, [pc, #76]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002232:	68db      	ldr	r3, [r3, #12]
 8002234:	091b      	lsrs	r3, r3, #4
 8002236:	f003 0307 	and.w	r3, r3, #7
 800223a:	3301      	adds	r3, #1
 800223c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800223e:	4b10      	ldr	r3, [pc, #64]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	0a1b      	lsrs	r3, r3, #8
 8002244:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002248:	697a      	ldr	r2, [r7, #20]
 800224a:	fb03 f202 	mul.w	r2, r3, r2
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	fbb2 f3f3 	udiv	r3, r2, r3
 8002254:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002256:	4b0a      	ldr	r3, [pc, #40]	; (8002280 <HAL_RCC_GetSysClockFreq+0x108>)
 8002258:	68db      	ldr	r3, [r3, #12]
 800225a:	0e5b      	lsrs	r3, r3, #25
 800225c:	f003 0303 	and.w	r3, r3, #3
 8002260:	3301      	adds	r3, #1
 8002262:	005b      	lsls	r3, r3, #1
 8002264:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	fbb2 f3f3 	udiv	r3, r2, r3
 800226e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002270:	69bb      	ldr	r3, [r7, #24]
}
 8002272:	4618      	mov	r0, r3
 8002274:	3724      	adds	r7, #36	; 0x24
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr
 800227e:	bf00      	nop
 8002280:	40021000 	.word	0x40021000
 8002284:	080090cc 	.word	0x080090cc
 8002288:	00f42400 	.word	0x00f42400
 800228c:	007a1200 	.word	0x007a1200

08002290 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002290:	b480      	push	{r7}
 8002292:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002294:	4b03      	ldr	r3, [pc, #12]	; (80022a4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002296:	681b      	ldr	r3, [r3, #0]
}
 8002298:	4618      	mov	r0, r3
 800229a:	46bd      	mov	sp, r7
 800229c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a0:	4770      	bx	lr
 80022a2:	bf00      	nop
 80022a4:	2000002c 	.word	0x2000002c

080022a8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80022ac:	f7ff fff0 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022b0:	4602      	mov	r2, r0
 80022b2:	4b06      	ldr	r3, [pc, #24]	; (80022cc <HAL_RCC_GetPCLK1Freq+0x24>)
 80022b4:	689b      	ldr	r3, [r3, #8]
 80022b6:	0a1b      	lsrs	r3, r3, #8
 80022b8:	f003 0307 	and.w	r3, r3, #7
 80022bc:	4904      	ldr	r1, [pc, #16]	; (80022d0 <HAL_RCC_GetPCLK1Freq+0x28>)
 80022be:	5ccb      	ldrb	r3, [r1, r3]
 80022c0:	f003 031f 	and.w	r3, r3, #31
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	080090c4 	.word	0x080090c4

080022d4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80022d8:	f7ff ffda 	bl	8002290 <HAL_RCC_GetHCLKFreq>
 80022dc:	4602      	mov	r2, r0
 80022de:	4b06      	ldr	r3, [pc, #24]	; (80022f8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	0adb      	lsrs	r3, r3, #11
 80022e4:	f003 0307 	and.w	r3, r3, #7
 80022e8:	4904      	ldr	r1, [pc, #16]	; (80022fc <HAL_RCC_GetPCLK2Freq+0x28>)
 80022ea:	5ccb      	ldrb	r3, [r1, r3]
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80022f4:	4618      	mov	r0, r3
 80022f6:	bd80      	pop	{r7, pc}
 80022f8:	40021000 	.word	0x40021000
 80022fc:	080090c4 	.word	0x080090c4

08002300 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002300:	b480      	push	{r7}
 8002302:	b083      	sub	sp, #12
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
 8002308:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	220f      	movs	r2, #15
 800230e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002310:	4b12      	ldr	r3, [pc, #72]	; (800235c <HAL_RCC_GetClockConfig+0x5c>)
 8002312:	689b      	ldr	r3, [r3, #8]
 8002314:	f003 0203 	and.w	r2, r3, #3
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800231c:	4b0f      	ldr	r3, [pc, #60]	; (800235c <HAL_RCC_GetClockConfig+0x5c>)
 800231e:	689b      	ldr	r3, [r3, #8]
 8002320:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002328:	4b0c      	ldr	r3, [pc, #48]	; (800235c <HAL_RCC_GetClockConfig+0x5c>)
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002334:	4b09      	ldr	r3, [pc, #36]	; (800235c <HAL_RCC_GetClockConfig+0x5c>)
 8002336:	689b      	ldr	r3, [r3, #8]
 8002338:	08db      	lsrs	r3, r3, #3
 800233a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002342:	4b07      	ldr	r3, [pc, #28]	; (8002360 <HAL_RCC_GetClockConfig+0x60>)
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0207 	and.w	r2, r3, #7
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	601a      	str	r2, [r3, #0]
}
 800234e:	bf00      	nop
 8002350:	370c      	adds	r7, #12
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
 800235a:	bf00      	nop
 800235c:	40021000 	.word	0x40021000
 8002360:	40022000 	.word	0x40022000

08002364 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002364:	b580      	push	{r7, lr}
 8002366:	b086      	sub	sp, #24
 8002368:	af00      	add	r7, sp, #0
 800236a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800236c:	2300      	movs	r3, #0
 800236e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002370:	4b2a      	ldr	r3, [pc, #168]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002372:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002378:	2b00      	cmp	r3, #0
 800237a:	d003      	beq.n	8002384 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800237c:	f7ff f984 	bl	8001688 <HAL_PWREx_GetVoltageRange>
 8002380:	6178      	str	r0, [r7, #20]
 8002382:	e014      	b.n	80023ae <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002384:	4b25      	ldr	r3, [pc, #148]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002386:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002388:	4a24      	ldr	r2, [pc, #144]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800238a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800238e:	6593      	str	r3, [r2, #88]	; 0x58
 8002390:	4b22      	ldr	r3, [pc, #136]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002392:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002394:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002398:	60fb      	str	r3, [r7, #12]
 800239a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800239c:	f7ff f974 	bl	8001688 <HAL_PWREx_GetVoltageRange>
 80023a0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80023a2:	4b1e      	ldr	r3, [pc, #120]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023a6:	4a1d      	ldr	r2, [pc, #116]	; (800241c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80023a8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023ac:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80023b4:	d10b      	bne.n	80023ce <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2b80      	cmp	r3, #128	; 0x80
 80023ba:	d919      	bls.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2ba0      	cmp	r3, #160	; 0xa0
 80023c0:	d902      	bls.n	80023c8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023c2:	2302      	movs	r3, #2
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	e013      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023c8:	2301      	movs	r3, #1
 80023ca:	613b      	str	r3, [r7, #16]
 80023cc:	e010      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	2b80      	cmp	r3, #128	; 0x80
 80023d2:	d902      	bls.n	80023da <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80023d4:	2303      	movs	r3, #3
 80023d6:	613b      	str	r3, [r7, #16]
 80023d8:	e00a      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	2b80      	cmp	r3, #128	; 0x80
 80023de:	d102      	bne.n	80023e6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80023e0:	2302      	movs	r3, #2
 80023e2:	613b      	str	r3, [r7, #16]
 80023e4:	e004      	b.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	2b70      	cmp	r3, #112	; 0x70
 80023ea:	d101      	bne.n	80023f0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80023ec:	2301      	movs	r3, #1
 80023ee:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80023f0:	4b0b      	ldr	r3, [pc, #44]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f023 0207 	bic.w	r2, r3, #7
 80023f8:	4909      	ldr	r1, [pc, #36]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002400:	4b07      	ldr	r3, [pc, #28]	; (8002420 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0307 	and.w	r3, r3, #7
 8002408:	693a      	ldr	r2, [r7, #16]
 800240a:	429a      	cmp	r2, r3
 800240c:	d001      	beq.n	8002412 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	e000      	b.n	8002414 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002412:	2300      	movs	r3, #0
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40021000 	.word	0x40021000
 8002420:	40022000 	.word	0x40022000

08002424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b086      	sub	sp, #24
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800242c:	2300      	movs	r3, #0
 800242e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002430:	2300      	movs	r3, #0
 8002432:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800243c:	2b00      	cmp	r3, #0
 800243e:	d031      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002444:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002448:	d01a      	beq.n	8002480 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 800244a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 800244e:	d814      	bhi.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002450:	2b00      	cmp	r3, #0
 8002452:	d009      	beq.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002454:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002458:	d10f      	bne.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800245a:	4b5d      	ldr	r3, [pc, #372]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	4a5c      	ldr	r2, [pc, #368]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002464:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002466:	e00c      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	3304      	adds	r3, #4
 800246c:	2100      	movs	r1, #0
 800246e:	4618      	mov	r0, r3
 8002470:	f000 f9ce 	bl	8002810 <RCCEx_PLLSAI1_Config>
 8002474:	4603      	mov	r3, r0
 8002476:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002478:	e003      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800247a:	2301      	movs	r3, #1
 800247c:	74fb      	strb	r3, [r7, #19]
      break;
 800247e:	e000      	b.n	8002482 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002480:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002482:	7cfb      	ldrb	r3, [r7, #19]
 8002484:	2b00      	cmp	r3, #0
 8002486:	d10b      	bne.n	80024a0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002488:	4b51      	ldr	r3, [pc, #324]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800248a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002496:	494e      	ldr	r1, [pc, #312]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002498:	4313      	orrs	r3, r2
 800249a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800249e:	e001      	b.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024a0:	7cfb      	ldrb	r3, [r7, #19]
 80024a2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	f000 809e 	beq.w	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b2:	2300      	movs	r3, #0
 80024b4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80024b6:	4b46      	ldr	r3, [pc, #280]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024be:	2b00      	cmp	r3, #0
 80024c0:	d101      	bne.n	80024c6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80024c2:	2301      	movs	r3, #1
 80024c4:	e000      	b.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80024c6:	2300      	movs	r3, #0
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00d      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024cc:	4b40      	ldr	r3, [pc, #256]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024d0:	4a3f      	ldr	r2, [pc, #252]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d6:	6593      	str	r3, [r2, #88]	; 0x58
 80024d8:	4b3d      	ldr	r3, [pc, #244]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80024da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80024dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e4:	2301      	movs	r3, #1
 80024e6:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024e8:	4b3a      	ldr	r3, [pc, #232]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a39      	ldr	r2, [pc, #228]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80024ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024f2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80024f4:	f7fe fdd8 	bl	80010a8 <HAL_GetTick>
 80024f8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80024fa:	e009      	b.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024fc:	f7fe fdd4 	bl	80010a8 <HAL_GetTick>
 8002500:	4602      	mov	r2, r0
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	1ad3      	subs	r3, r2, r3
 8002506:	2b02      	cmp	r3, #2
 8002508:	d902      	bls.n	8002510 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 800250a:	2303      	movs	r3, #3
 800250c:	74fb      	strb	r3, [r7, #19]
        break;
 800250e:	e005      	b.n	800251c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002510:	4b30      	ldr	r3, [pc, #192]	; (80025d4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002518:	2b00      	cmp	r3, #0
 800251a:	d0ef      	beq.n	80024fc <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 800251c:	7cfb      	ldrb	r3, [r7, #19]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d15a      	bne.n	80025d8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002522:	4b2b      	ldr	r3, [pc, #172]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002524:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002528:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800252c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800252e:	697b      	ldr	r3, [r7, #20]
 8002530:	2b00      	cmp	r3, #0
 8002532:	d01e      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002538:	697a      	ldr	r2, [r7, #20]
 800253a:	429a      	cmp	r2, r3
 800253c:	d019      	beq.n	8002572 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800253e:	4b24      	ldr	r3, [pc, #144]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002540:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002544:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002548:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800254a:	4b21      	ldr	r3, [pc, #132]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800254c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002550:	4a1f      	ldr	r2, [pc, #124]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002552:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002556:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800255a:	4b1d      	ldr	r3, [pc, #116]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800255c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002560:	4a1b      	ldr	r2, [pc, #108]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002562:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002566:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800256a:	4a19      	ldr	r2, [pc, #100]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002572:	697b      	ldr	r3, [r7, #20]
 8002574:	f003 0301 	and.w	r3, r3, #1
 8002578:	2b00      	cmp	r3, #0
 800257a:	d016      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800257c:	f7fe fd94 	bl	80010a8 <HAL_GetTick>
 8002580:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002582:	e00b      	b.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002584:	f7fe fd90 	bl	80010a8 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d902      	bls.n	800259c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	74fb      	strb	r3, [r7, #19]
            break;
 800259a:	e006      	b.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800259c:	4b0c      	ldr	r3, [pc, #48]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d0ec      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80025aa:	7cfb      	ldrb	r3, [r7, #19]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d10b      	bne.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025b0:	4b07      	ldr	r3, [pc, #28]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025b6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80025be:	4904      	ldr	r1, [pc, #16]	; (80025d0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80025c6:	e009      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80025c8:	7cfb      	ldrb	r3, [r7, #19]
 80025ca:	74bb      	strb	r3, [r7, #18]
 80025cc:	e006      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80025ce:	bf00      	nop
 80025d0:	40021000 	.word	0x40021000
 80025d4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d8:	7cfb      	ldrb	r3, [r7, #19]
 80025da:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025dc:	7c7b      	ldrb	r3, [r7, #17]
 80025de:	2b01      	cmp	r3, #1
 80025e0:	d105      	bne.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e2:	4b8a      	ldr	r3, [pc, #552]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025e6:	4a89      	ldr	r2, [pc, #548]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ec:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0301 	and.w	r3, r3, #1
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d00a      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025fa:	4b84      	ldr	r3, [pc, #528]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002600:	f023 0203 	bic.w	r2, r3, #3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a1b      	ldr	r3, [r3, #32]
 8002608:	4980      	ldr	r1, [pc, #512]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800260a:	4313      	orrs	r3, r2
 800260c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0302 	and.w	r3, r3, #2
 8002618:	2b00      	cmp	r3, #0
 800261a:	d00a      	beq.n	8002632 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800261c:	4b7b      	ldr	r3, [pc, #492]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800261e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002622:	f023 020c 	bic.w	r2, r3, #12
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800262a:	4978      	ldr	r1, [pc, #480]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800262c:	4313      	orrs	r3, r2
 800262e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f003 0320 	and.w	r3, r3, #32
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00a      	beq.n	8002654 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800263e:	4b73      	ldr	r3, [pc, #460]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800264c:	496f      	ldr	r1, [pc, #444]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800264e:	4313      	orrs	r3, r2
 8002650:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800265c:	2b00      	cmp	r3, #0
 800265e:	d00a      	beq.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002660:	4b6a      	ldr	r3, [pc, #424]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002662:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002666:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800266e:	4967      	ldr	r1, [pc, #412]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002670:	4313      	orrs	r3, r2
 8002672:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800267e:	2b00      	cmp	r3, #0
 8002680:	d00a      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002682:	4b62      	ldr	r3, [pc, #392]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002684:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002688:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002690:	495e      	ldr	r1, [pc, #376]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002692:	4313      	orrs	r3, r2
 8002694:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d00a      	beq.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026a4:	4b59      	ldr	r3, [pc, #356]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026b2:	4956      	ldr	r1, [pc, #344]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026b4:	4313      	orrs	r3, r2
 80026b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d00a      	beq.n	80026dc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80026c6:	4b51      	ldr	r3, [pc, #324]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026cc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d4:	494d      	ldr	r1, [pc, #308]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026d6:	4313      	orrs	r3, r2
 80026d8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d028      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80026e8:	4b48      	ldr	r3, [pc, #288]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026f6:	4945      	ldr	r1, [pc, #276]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f8:	4313      	orrs	r3, r2
 80026fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002706:	d106      	bne.n	8002716 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002708:	4b40      	ldr	r3, [pc, #256]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800270a:	68db      	ldr	r3, [r3, #12]
 800270c:	4a3f      	ldr	r2, [pc, #252]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800270e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002712:	60d3      	str	r3, [r2, #12]
 8002714:	e011      	b.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800271e:	d10c      	bne.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	3304      	adds	r3, #4
 8002724:	2101      	movs	r1, #1
 8002726:	4618      	mov	r0, r3
 8002728:	f000 f872 	bl	8002810 <RCCEx_PLLSAI1_Config>
 800272c:	4603      	mov	r3, r0
 800272e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002730:	7cfb      	ldrb	r3, [r7, #19]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d001      	beq.n	800273a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002736:	7cfb      	ldrb	r3, [r7, #19]
 8002738:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002742:	2b00      	cmp	r3, #0
 8002744:	d028      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002746:	4b31      	ldr	r3, [pc, #196]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002754:	492d      	ldr	r1, [pc, #180]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002756:	4313      	orrs	r3, r2
 8002758:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002760:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002764:	d106      	bne.n	8002774 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002766:	4b29      	ldr	r3, [pc, #164]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002768:	68db      	ldr	r3, [r3, #12]
 800276a:	4a28      	ldr	r2, [pc, #160]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800276c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002770:	60d3      	str	r3, [r2, #12]
 8002772:	e011      	b.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002778:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800277c:	d10c      	bne.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3304      	adds	r3, #4
 8002782:	2101      	movs	r1, #1
 8002784:	4618      	mov	r0, r3
 8002786:	f000 f843 	bl	8002810 <RCCEx_PLLSAI1_Config>
 800278a:	4603      	mov	r3, r0
 800278c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800278e:	7cfb      	ldrb	r3, [r7, #19]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d001      	beq.n	8002798 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002794:	7cfb      	ldrb	r3, [r7, #19]
 8002796:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d01c      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027a4:	4b19      	ldr	r3, [pc, #100]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027aa:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027b2:	4916      	ldr	r1, [pc, #88]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027b4:	4313      	orrs	r3, r2
 80027b6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80027be:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027c2:	d10c      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	3304      	adds	r3, #4
 80027c8:	2102      	movs	r1, #2
 80027ca:	4618      	mov	r0, r3
 80027cc:	f000 f820 	bl	8002810 <RCCEx_PLLSAI1_Config>
 80027d0:	4603      	mov	r3, r0
 80027d2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027d4:	7cfb      	ldrb	r3, [r7, #19]
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d001      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80027da:	7cfb      	ldrb	r3, [r7, #19]
 80027dc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d00a      	beq.n	8002800 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80027ea:	4b08      	ldr	r3, [pc, #32]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027f0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027f8:	4904      	ldr	r1, [pc, #16]	; (800280c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027fa:	4313      	orrs	r3, r2
 80027fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002800:	7cbb      	ldrb	r3, [r7, #18]
}
 8002802:	4618      	mov	r0, r3
 8002804:	3718      	adds	r7, #24
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	40021000 	.word	0x40021000

08002810 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002810:	b580      	push	{r7, lr}
 8002812:	b084      	sub	sp, #16
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800281a:	2300      	movs	r3, #0
 800281c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800281e:	4b74      	ldr	r3, [pc, #464]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002820:	68db      	ldr	r3, [r3, #12]
 8002822:	f003 0303 	and.w	r3, r3, #3
 8002826:	2b00      	cmp	r3, #0
 8002828:	d018      	beq.n	800285c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800282a:	4b71      	ldr	r3, [pc, #452]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	68db      	ldr	r3, [r3, #12]
 800282e:	f003 0203 	and.w	r2, r3, #3
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	429a      	cmp	r2, r3
 8002838:	d10d      	bne.n	8002856 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
       ||
 800283e:	2b00      	cmp	r3, #0
 8002840:	d009      	beq.n	8002856 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002842:	4b6b      	ldr	r3, [pc, #428]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	091b      	lsrs	r3, r3, #4
 8002848:	f003 0307 	and.w	r3, r3, #7
 800284c:	1c5a      	adds	r2, r3, #1
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	685b      	ldr	r3, [r3, #4]
       ||
 8002852:	429a      	cmp	r2, r3
 8002854:	d047      	beq.n	80028e6 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	73fb      	strb	r3, [r7, #15]
 800285a:	e044      	b.n	80028e6 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	2b03      	cmp	r3, #3
 8002862:	d018      	beq.n	8002896 <RCCEx_PLLSAI1_Config+0x86>
 8002864:	2b03      	cmp	r3, #3
 8002866:	d825      	bhi.n	80028b4 <RCCEx_PLLSAI1_Config+0xa4>
 8002868:	2b01      	cmp	r3, #1
 800286a:	d002      	beq.n	8002872 <RCCEx_PLLSAI1_Config+0x62>
 800286c:	2b02      	cmp	r3, #2
 800286e:	d009      	beq.n	8002884 <RCCEx_PLLSAI1_Config+0x74>
 8002870:	e020      	b.n	80028b4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002872:	4b5f      	ldr	r3, [pc, #380]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f003 0302 	and.w	r3, r3, #2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d11d      	bne.n	80028ba <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002882:	e01a      	b.n	80028ba <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002884:	4b5a      	ldr	r3, [pc, #360]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800288c:	2b00      	cmp	r3, #0
 800288e:	d116      	bne.n	80028be <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002894:	e013      	b.n	80028be <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002896:	4b56      	ldr	r3, [pc, #344]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800289e:	2b00      	cmp	r3, #0
 80028a0:	d10f      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028a2:	4b53      	ldr	r3, [pc, #332]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028aa:	2b00      	cmp	r3, #0
 80028ac:	d109      	bne.n	80028c2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80028ae:	2301      	movs	r3, #1
 80028b0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028b2:	e006      	b.n	80028c2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80028b4:	2301      	movs	r3, #1
 80028b6:	73fb      	strb	r3, [r7, #15]
      break;
 80028b8:	e004      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028ba:	bf00      	nop
 80028bc:	e002      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028be:	bf00      	nop
 80028c0:	e000      	b.n	80028c4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80028c2:	bf00      	nop
    }

    if(status == HAL_OK)
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	2b00      	cmp	r3, #0
 80028c8:	d10d      	bne.n	80028e6 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80028ca:	4b49      	ldr	r3, [pc, #292]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028cc:	68db      	ldr	r3, [r3, #12]
 80028ce:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6819      	ldr	r1, [r3, #0]
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	3b01      	subs	r3, #1
 80028dc:	011b      	lsls	r3, r3, #4
 80028de:	430b      	orrs	r3, r1
 80028e0:	4943      	ldr	r1, [pc, #268]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80028e6:	7bfb      	ldrb	r3, [r7, #15]
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d17c      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80028ec:	4b40      	ldr	r3, [pc, #256]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a3f      	ldr	r2, [pc, #252]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80028f2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80028f6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80028f8:	f7fe fbd6 	bl	80010a8 <HAL_GetTick>
 80028fc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80028fe:	e009      	b.n	8002914 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002900:	f7fe fbd2 	bl	80010a8 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	2b02      	cmp	r3, #2
 800290c:	d902      	bls.n	8002914 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	73fb      	strb	r3, [r7, #15]
        break;
 8002912:	e005      	b.n	8002920 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002914:	4b36      	ldr	r3, [pc, #216]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d1ef      	bne.n	8002900 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002920:	7bfb      	ldrb	r3, [r7, #15]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d15f      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	d110      	bne.n	800294e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800292c:	4b30      	ldr	r3, [pc, #192]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800292e:	691b      	ldr	r3, [r3, #16]
 8002930:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002934:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002938:	687a      	ldr	r2, [r7, #4]
 800293a:	6892      	ldr	r2, [r2, #8]
 800293c:	0211      	lsls	r1, r2, #8
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68d2      	ldr	r2, [r2, #12]
 8002942:	06d2      	lsls	r2, r2, #27
 8002944:	430a      	orrs	r2, r1
 8002946:	492a      	ldr	r1, [pc, #168]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002948:	4313      	orrs	r3, r2
 800294a:	610b      	str	r3, [r1, #16]
 800294c:	e027      	b.n	800299e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	2b01      	cmp	r3, #1
 8002952:	d112      	bne.n	800297a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002954:	4b26      	ldr	r3, [pc, #152]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002956:	691b      	ldr	r3, [r3, #16]
 8002958:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800295c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002960:	687a      	ldr	r2, [r7, #4]
 8002962:	6892      	ldr	r2, [r2, #8]
 8002964:	0211      	lsls	r1, r2, #8
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	6912      	ldr	r2, [r2, #16]
 800296a:	0852      	lsrs	r2, r2, #1
 800296c:	3a01      	subs	r2, #1
 800296e:	0552      	lsls	r2, r2, #21
 8002970:	430a      	orrs	r2, r1
 8002972:	491f      	ldr	r1, [pc, #124]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002974:	4313      	orrs	r3, r2
 8002976:	610b      	str	r3, [r1, #16]
 8002978:	e011      	b.n	800299e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800297a:	4b1d      	ldr	r3, [pc, #116]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297c:	691b      	ldr	r3, [r3, #16]
 800297e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002982:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002986:	687a      	ldr	r2, [r7, #4]
 8002988:	6892      	ldr	r2, [r2, #8]
 800298a:	0211      	lsls	r1, r2, #8
 800298c:	687a      	ldr	r2, [r7, #4]
 800298e:	6952      	ldr	r2, [r2, #20]
 8002990:	0852      	lsrs	r2, r2, #1
 8002992:	3a01      	subs	r2, #1
 8002994:	0652      	lsls	r2, r2, #25
 8002996:	430a      	orrs	r2, r1
 8002998:	4915      	ldr	r1, [pc, #84]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800299a:	4313      	orrs	r3, r2
 800299c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800299e:	4b14      	ldr	r3, [pc, #80]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a13      	ldr	r2, [pc, #76]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029a8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029aa:	f7fe fb7d 	bl	80010a8 <HAL_GetTick>
 80029ae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029b0:	e009      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029b2:	f7fe fb79 	bl	80010a8 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	68bb      	ldr	r3, [r7, #8]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b02      	cmp	r3, #2
 80029be:	d902      	bls.n	80029c6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	73fb      	strb	r3, [r7, #15]
          break;
 80029c4:	e005      	b.n	80029d2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029c6:	4b0a      	ldr	r3, [pc, #40]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d0ef      	beq.n	80029b2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80029d2:	7bfb      	ldrb	r3, [r7, #15]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d106      	bne.n	80029e6 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80029d8:	4b05      	ldr	r3, [pc, #20]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029da:	691a      	ldr	r2, [r3, #16]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	699b      	ldr	r3, [r3, #24]
 80029e0:	4903      	ldr	r1, [pc, #12]	; (80029f0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029e2:	4313      	orrs	r3, r2
 80029e4:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80029e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40021000 	.word	0x40021000

080029f4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80029f4:	b580      	push	{r7, lr}
 80029f6:	b082      	sub	sp, #8
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002a02:	2301      	movs	r3, #1
 8002a04:	e049      	b.n	8002a9a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d106      	bne.n	8002a20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2200      	movs	r2, #0
 8002a16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f000 f841 	bl	8002aa2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	2202      	movs	r2, #2
 8002a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	681a      	ldr	r2, [r3, #0]
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	3304      	adds	r3, #4
 8002a30:	4619      	mov	r1, r3
 8002a32:	4610      	mov	r0, r2
 8002a34:	f000 f9dc 	bl	8002df0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2201      	movs	r2, #1
 8002a44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	2201      	movs	r2, #1
 8002a4c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	2201      	movs	r2, #1
 8002a5c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	2201      	movs	r2, #1
 8002a64:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3708      	adds	r7, #8
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}

08002aa2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002aa2:	b480      	push	{r7}
 8002aa4:	b083      	sub	sp, #12
 8002aa6:	af00      	add	r7, sp, #0
 8002aa8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002aaa:	bf00      	nop
 8002aac:	370c      	adds	r7, #12
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
	...

08002ab8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	d001      	beq.n	8002ad0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002acc:	2301      	movs	r3, #1
 8002ace:	e03b      	b.n	8002b48 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	2202      	movs	r2, #2
 8002ad4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	68da      	ldr	r2, [r3, #12]
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	681b      	ldr	r3, [r3, #0]
 8002ae2:	f042 0201 	orr.w	r2, r2, #1
 8002ae6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	4a19      	ldr	r2, [pc, #100]	; (8002b54 <HAL_TIM_Base_Start_IT+0x9c>)
 8002aee:	4293      	cmp	r3, r2
 8002af0:	d009      	beq.n	8002b06 <HAL_TIM_Base_Start_IT+0x4e>
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002afa:	d004      	beq.n	8002b06 <HAL_TIM_Base_Start_IT+0x4e>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	4a15      	ldr	r2, [pc, #84]	; (8002b58 <HAL_TIM_Base_Start_IT+0xa0>)
 8002b02:	4293      	cmp	r3, r2
 8002b04:	d115      	bne.n	8002b32 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	689a      	ldr	r2, [r3, #8]
 8002b0c:	4b13      	ldr	r3, [pc, #76]	; (8002b5c <HAL_TIM_Base_Start_IT+0xa4>)
 8002b0e:	4013      	ands	r3, r2
 8002b10:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	2b06      	cmp	r3, #6
 8002b16:	d015      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x8c>
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b1e:	d011      	beq.n	8002b44 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	681a      	ldr	r2, [r3, #0]
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	f042 0201 	orr.w	r2, r2, #1
 8002b2e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b30:	e008      	b.n	8002b44 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	681b      	ldr	r3, [r3, #0]
 8002b36:	681a      	ldr	r2, [r3, #0]
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	f042 0201 	orr.w	r2, r2, #1
 8002b40:	601a      	str	r2, [r3, #0]
 8002b42:	e000      	b.n	8002b46 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b44:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr
 8002b54:	40012c00 	.word	0x40012c00
 8002b58:	40014000 	.word	0x40014000
 8002b5c:	00010007 	.word	0x00010007

08002b60 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0302 	and.w	r3, r3, #2
 8002b72:	2b02      	cmp	r3, #2
 8002b74:	d122      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0302 	and.w	r3, r3, #2
 8002b80:	2b02      	cmp	r3, #2
 8002b82:	d11b      	bne.n	8002bbc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0202 	mvn.w	r2, #2
 8002b8c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2201      	movs	r2, #1
 8002b92:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	699b      	ldr	r3, [r3, #24]
 8002b9a:	f003 0303 	and.w	r3, r3, #3
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d003      	beq.n	8002baa <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002ba2:	6878      	ldr	r0, [r7, #4]
 8002ba4:	f000 f905 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002ba8:	e005      	b.n	8002bb6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002baa:	6878      	ldr	r0, [r7, #4]
 8002bac:	f000 f8f7 	bl	8002d9e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bb0:	6878      	ldr	r0, [r7, #4]
 8002bb2:	f000 f908 	bl	8002dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	691b      	ldr	r3, [r3, #16]
 8002bc2:	f003 0304 	and.w	r3, r3, #4
 8002bc6:	2b04      	cmp	r3, #4
 8002bc8:	d122      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	68db      	ldr	r3, [r3, #12]
 8002bd0:	f003 0304 	and.w	r3, r3, #4
 8002bd4:	2b04      	cmp	r3, #4
 8002bd6:	d11b      	bne.n	8002c10 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f06f 0204 	mvn.w	r2, #4
 8002be0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2202      	movs	r2, #2
 8002be6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	699b      	ldr	r3, [r3, #24]
 8002bee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d003      	beq.n	8002bfe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bf6:	6878      	ldr	r0, [r7, #4]
 8002bf8:	f000 f8db 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002bfc:	e005      	b.n	8002c0a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bfe:	6878      	ldr	r0, [r7, #4]
 8002c00:	f000 f8cd 	bl	8002d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c04:	6878      	ldr	r0, [r7, #4]
 8002c06:	f000 f8de 	bl	8002dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2200      	movs	r2, #0
 8002c0e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	691b      	ldr	r3, [r3, #16]
 8002c16:	f003 0308 	and.w	r3, r3, #8
 8002c1a:	2b08      	cmp	r3, #8
 8002c1c:	d122      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	68db      	ldr	r3, [r3, #12]
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	2b08      	cmp	r3, #8
 8002c2a:	d11b      	bne.n	8002c64 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f06f 0208 	mvn.w	r2, #8
 8002c34:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	2204      	movs	r2, #4
 8002c3a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	69db      	ldr	r3, [r3, #28]
 8002c42:	f003 0303 	and.w	r3, r3, #3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d003      	beq.n	8002c52 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 f8b1 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002c50:	e005      	b.n	8002c5e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f000 f8a3 	bl	8002d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f000 f8b4 	bl	8002dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	2200      	movs	r2, #0
 8002c62:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	691b      	ldr	r3, [r3, #16]
 8002c6a:	f003 0310 	and.w	r3, r3, #16
 8002c6e:	2b10      	cmp	r3, #16
 8002c70:	d122      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	f003 0310 	and.w	r3, r3, #16
 8002c7c:	2b10      	cmp	r3, #16
 8002c7e:	d11b      	bne.n	8002cb8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f06f 0210 	mvn.w	r2, #16
 8002c88:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	2208      	movs	r2, #8
 8002c8e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	69db      	ldr	r3, [r3, #28]
 8002c96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d003      	beq.n	8002ca6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f000 f887 	bl	8002db2 <HAL_TIM_IC_CaptureCallback>
 8002ca4:	e005      	b.n	8002cb2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f000 f879 	bl	8002d9e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f000 f88a 	bl	8002dc6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	691b      	ldr	r3, [r3, #16]
 8002cbe:	f003 0301 	and.w	r3, r3, #1
 8002cc2:	2b01      	cmp	r3, #1
 8002cc4:	d10e      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	2b01      	cmp	r3, #1
 8002cd2:	d107      	bne.n	8002ce4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f06f 0201 	mvn.w	r2, #1
 8002cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f7fd fd20 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cee:	2b80      	cmp	r3, #128	; 0x80
 8002cf0:	d10e      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	68db      	ldr	r3, [r3, #12]
 8002cf8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cfc:	2b80      	cmp	r3, #128	; 0x80
 8002cfe:	d107      	bne.n	8002d10 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002d08:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 f8de 	bl	8002ecc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	691b      	ldr	r3, [r3, #16]
 8002d16:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d1e:	d10e      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	68db      	ldr	r3, [r3, #12]
 8002d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d2a:	2b80      	cmp	r3, #128	; 0x80
 8002d2c:	d107      	bne.n	8002d3e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d36:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d38:	6878      	ldr	r0, [r7, #4]
 8002d3a:	f000 f8d1 	bl	8002ee0 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	691b      	ldr	r3, [r3, #16]
 8002d44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d48:	2b40      	cmp	r3, #64	; 0x40
 8002d4a:	d10e      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	68db      	ldr	r3, [r3, #12]
 8002d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d56:	2b40      	cmp	r3, #64	; 0x40
 8002d58:	d107      	bne.n	8002d6a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d62:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 f838 	bl	8002dda <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	691b      	ldr	r3, [r3, #16]
 8002d70:	f003 0320 	and.w	r3, r3, #32
 8002d74:	2b20      	cmp	r3, #32
 8002d76:	d10e      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	68db      	ldr	r3, [r3, #12]
 8002d7e:	f003 0320 	and.w	r3, r3, #32
 8002d82:	2b20      	cmp	r3, #32
 8002d84:	d107      	bne.n	8002d96 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f06f 0220 	mvn.w	r2, #32
 8002d8e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d90:	6878      	ldr	r0, [r7, #4]
 8002d92:	f000 f891 	bl	8002eb8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d96:	bf00      	nop
 8002d98:	3708      	adds	r7, #8
 8002d9a:	46bd      	mov	sp, r7
 8002d9c:	bd80      	pop	{r7, pc}

08002d9e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d9e:	b480      	push	{r7}
 8002da0:	b083      	sub	sp, #12
 8002da2:	af00      	add	r7, sp, #0
 8002da4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002da6:	bf00      	nop
 8002da8:	370c      	adds	r7, #12
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr

08002db2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002dba:	bf00      	nop
 8002dbc:	370c      	adds	r7, #12
 8002dbe:	46bd      	mov	sp, r7
 8002dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dc4:	4770      	bx	lr

08002dc6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc6:	b480      	push	{r7}
 8002dc8:	b083      	sub	sp, #12
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002dce:	bf00      	nop
 8002dd0:	370c      	adds	r7, #12
 8002dd2:	46bd      	mov	sp, r7
 8002dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd8:	4770      	bx	lr

08002dda <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002dda:	b480      	push	{r7}
 8002ddc:	b083      	sub	sp, #12
 8002dde:	af00      	add	r7, sp, #0
 8002de0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002de2:	bf00      	nop
 8002de4:	370c      	adds	r7, #12
 8002de6:	46bd      	mov	sp, r7
 8002de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dec:	4770      	bx	lr
	...

08002df0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002df0:	b480      	push	{r7}
 8002df2:	b085      	sub	sp, #20
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	6078      	str	r0, [r7, #4]
 8002df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	4a2a      	ldr	r2, [pc, #168]	; (8002eac <TIM_Base_SetConfig+0xbc>)
 8002e04:	4293      	cmp	r3, r2
 8002e06:	d003      	beq.n	8002e10 <TIM_Base_SetConfig+0x20>
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e0e:	d108      	bne.n	8002e22 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e16:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	68fa      	ldr	r2, [r7, #12]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a21      	ldr	r2, [pc, #132]	; (8002eac <TIM_Base_SetConfig+0xbc>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d00b      	beq.n	8002e42 <TIM_Base_SetConfig+0x52>
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e30:	d007      	beq.n	8002e42 <TIM_Base_SetConfig+0x52>
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	4a1e      	ldr	r2, [pc, #120]	; (8002eb0 <TIM_Base_SetConfig+0xc0>)
 8002e36:	4293      	cmp	r3, r2
 8002e38:	d003      	beq.n	8002e42 <TIM_Base_SetConfig+0x52>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	4a1d      	ldr	r2, [pc, #116]	; (8002eb4 <TIM_Base_SetConfig+0xc4>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d108      	bne.n	8002e54 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e48:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	68db      	ldr	r3, [r3, #12]
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4313      	orrs	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	695b      	ldr	r3, [r3, #20]
 8002e5e:	4313      	orrs	r3, r2
 8002e60:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	68fa      	ldr	r2, [r7, #12]
 8002e66:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	689a      	ldr	r2, [r3, #8]
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	4a0c      	ldr	r2, [pc, #48]	; (8002eac <TIM_Base_SetConfig+0xbc>)
 8002e7c:	4293      	cmp	r3, r2
 8002e7e:	d007      	beq.n	8002e90 <TIM_Base_SetConfig+0xa0>
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	4a0b      	ldr	r2, [pc, #44]	; (8002eb0 <TIM_Base_SetConfig+0xc0>)
 8002e84:	4293      	cmp	r3, r2
 8002e86:	d003      	beq.n	8002e90 <TIM_Base_SetConfig+0xa0>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	4a0a      	ldr	r2, [pc, #40]	; (8002eb4 <TIM_Base_SetConfig+0xc4>)
 8002e8c:	4293      	cmp	r3, r2
 8002e8e:	d103      	bne.n	8002e98 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002e90:	683b      	ldr	r3, [r7, #0]
 8002e92:	691a      	ldr	r2, [r3, #16]
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	2201      	movs	r2, #1
 8002e9c:	615a      	str	r2, [r3, #20]
}
 8002e9e:	bf00      	nop
 8002ea0:	3714      	adds	r7, #20
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	40012c00 	.word	0x40012c00
 8002eb0:	40014000 	.word	0x40014000
 8002eb4:	40014400 	.word	0x40014400

08002eb8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b083      	sub	sp, #12
 8002ebc:	af00      	add	r7, sp, #0
 8002ebe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec0:	bf00      	nop
 8002ec2:	370c      	adds	r7, #12
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b083      	sub	sp, #12
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr

08002ee0 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ee0:	b480      	push	{r7}
 8002ee2:	b083      	sub	sp, #12
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ee8:	bf00      	nop
 8002eea:	370c      	adds	r7, #12
 8002eec:	46bd      	mov	sp, r7
 8002eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef2:	4770      	bx	lr

08002ef4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d101      	bne.n	8002f06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002f02:	2301      	movs	r3, #1
 8002f04:	e040      	b.n	8002f88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d106      	bne.n	8002f1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	2200      	movs	r2, #0
 8002f12:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002f16:	6878      	ldr	r0, [r7, #4]
 8002f18:	f7fd fffe 	bl	8000f18 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2224      	movs	r2, #36	; 0x24
 8002f20:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	681a      	ldr	r2, [r3, #0]
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	f022 0201 	bic.w	r2, r2, #1
 8002f30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002f32:	6878      	ldr	r0, [r7, #4]
 8002f34:	f000 fbc2 	bl	80036bc <UART_SetConfig>
 8002f38:	4603      	mov	r3, r0
 8002f3a:	2b01      	cmp	r3, #1
 8002f3c:	d101      	bne.n	8002f42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	e022      	b.n	8002f88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d002      	beq.n	8002f50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002f4a:	6878      	ldr	r0, [r7, #4]
 8002f4c:	f000 fde2 	bl	8003b14 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	685a      	ldr	r2, [r3, #4]
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002f5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	681b      	ldr	r3, [r3, #0]
 8002f6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002f6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	681a      	ldr	r2, [r3, #0]
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f042 0201 	orr.w	r2, r2, #1
 8002f7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002f80:	6878      	ldr	r0, [r7, #4]
 8002f82:	f000 fe69 	bl	8003c58 <UART_CheckIdleState>
 8002f86:	4603      	mov	r3, r0
}
 8002f88:	4618      	mov	r0, r3
 8002f8a:	3708      	adds	r7, #8
 8002f8c:	46bd      	mov	sp, r7
 8002f8e:	bd80      	pop	{r7, pc}

08002f90 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f90:	b580      	push	{r7, lr}
 8002f92:	b08a      	sub	sp, #40	; 0x28
 8002f94:	af02      	add	r7, sp, #8
 8002f96:	60f8      	str	r0, [r7, #12]
 8002f98:	60b9      	str	r1, [r7, #8]
 8002f9a:	603b      	str	r3, [r7, #0]
 8002f9c:	4613      	mov	r3, r2
 8002f9e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002fa4:	2b20      	cmp	r3, #32
 8002fa6:	f040 8082 	bne.w	80030ae <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002faa:	68bb      	ldr	r3, [r7, #8]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d002      	beq.n	8002fb6 <HAL_UART_Transmit+0x26>
 8002fb0:	88fb      	ldrh	r3, [r7, #6]
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d101      	bne.n	8002fba <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	e07a      	b.n	80030b0 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_UART_Transmit+0x38>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e073      	b.n	80030b0 <HAL_UART_Transmit+0x120>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2200      	movs	r2, #0
 8002fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2221      	movs	r2, #33	; 0x21
 8002fdc:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002fde:	f7fe f863 	bl	80010a8 <HAL_GetTick>
 8002fe2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	88fa      	ldrh	r2, [r7, #6]
 8002fe8:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	88fa      	ldrh	r2, [r7, #6]
 8002ff0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ffc:	d108      	bne.n	8003010 <HAL_UART_Transmit+0x80>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d104      	bne.n	8003010 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003006:	2300      	movs	r3, #0
 8003008:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800300a:	68bb      	ldr	r3, [r7, #8]
 800300c:	61bb      	str	r3, [r7, #24]
 800300e:	e003      	b.n	8003018 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003010:	68bb      	ldr	r3, [r7, #8]
 8003012:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003014:	2300      	movs	r3, #0
 8003016:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	2200      	movs	r2, #0
 800301c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003020:	e02d      	b.n	800307e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	9300      	str	r3, [sp, #0]
 8003026:	697b      	ldr	r3, [r7, #20]
 8003028:	2200      	movs	r2, #0
 800302a:	2180      	movs	r1, #128	; 0x80
 800302c:	68f8      	ldr	r0, [r7, #12]
 800302e:	f000 fe5c 	bl	8003cea <UART_WaitOnFlagUntilTimeout>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d001      	beq.n	800303c <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003038:	2303      	movs	r3, #3
 800303a:	e039      	b.n	80030b0 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 800303c:	69fb      	ldr	r3, [r7, #28]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d10b      	bne.n	800305a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	881a      	ldrh	r2, [r3, #0]
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800304e:	b292      	uxth	r2, r2
 8003050:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003052:	69bb      	ldr	r3, [r7, #24]
 8003054:	3302      	adds	r3, #2
 8003056:	61bb      	str	r3, [r7, #24]
 8003058:	e008      	b.n	800306c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800305a:	69fb      	ldr	r3, [r7, #28]
 800305c:	781a      	ldrb	r2, [r3, #0]
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	b292      	uxth	r2, r2
 8003064:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	3301      	adds	r3, #1
 800306a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003072:	b29b      	uxth	r3, r3
 8003074:	3b01      	subs	r3, #1
 8003076:	b29a      	uxth	r2, r3
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003084:	b29b      	uxth	r3, r3
 8003086:	2b00      	cmp	r3, #0
 8003088:	d1cb      	bne.n	8003022 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800308a:	683b      	ldr	r3, [r7, #0]
 800308c:	9300      	str	r3, [sp, #0]
 800308e:	697b      	ldr	r3, [r7, #20]
 8003090:	2200      	movs	r2, #0
 8003092:	2140      	movs	r1, #64	; 0x40
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f000 fe28 	bl	8003cea <UART_WaitOnFlagUntilTimeout>
 800309a:	4603      	mov	r3, r0
 800309c:	2b00      	cmp	r3, #0
 800309e:	d001      	beq.n	80030a4 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80030a0:	2303      	movs	r3, #3
 80030a2:	e005      	b.n	80030b0 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	2220      	movs	r2, #32
 80030a8:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80030aa:	2300      	movs	r3, #0
 80030ac:	e000      	b.n	80030b0 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80030ae:	2302      	movs	r3, #2
  }
}
 80030b0:	4618      	mov	r0, r3
 80030b2:	3720      	adds	r7, #32
 80030b4:	46bd      	mov	sp, r7
 80030b6:	bd80      	pop	{r7, pc}

080030b8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b0ba      	sub	sp, #232	; 0xe8
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	69db      	ldr	r3, [r3, #28]
 80030c6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	689b      	ldr	r3, [r3, #8]
 80030da:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80030de:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80030e2:	f640 030f 	movw	r3, #2063	; 0x80f
 80030e6:	4013      	ands	r3, r2
 80030e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80030ec:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d115      	bne.n	8003120 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80030f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030f8:	f003 0320 	and.w	r3, r3, #32
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d00f      	beq.n	8003120 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003100:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003104:	f003 0320 	and.w	r3, r3, #32
 8003108:	2b00      	cmp	r3, #0
 800310a:	d009      	beq.n	8003120 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003110:	2b00      	cmp	r3, #0
 8003112:	f000 82a6 	beq.w	8003662 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311a:	6878      	ldr	r0, [r7, #4]
 800311c:	4798      	blx	r3
      }
      return;
 800311e:	e2a0      	b.n	8003662 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003120:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003124:	2b00      	cmp	r3, #0
 8003126:	f000 8117 	beq.w	8003358 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800312a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800312e:	f003 0301 	and.w	r3, r3, #1
 8003132:	2b00      	cmp	r3, #0
 8003134:	d106      	bne.n	8003144 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003136:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800313a:	4b85      	ldr	r3, [pc, #532]	; (8003350 <HAL_UART_IRQHandler+0x298>)
 800313c:	4013      	ands	r3, r2
 800313e:	2b00      	cmp	r3, #0
 8003140:	f000 810a 	beq.w	8003358 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003144:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003148:	f003 0301 	and.w	r3, r3, #1
 800314c:	2b00      	cmp	r3, #0
 800314e:	d011      	beq.n	8003174 <HAL_UART_IRQHandler+0xbc>
 8003150:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003154:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003158:	2b00      	cmp	r3, #0
 800315a:	d00b      	beq.n	8003174 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2201      	movs	r2, #1
 8003162:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800316a:	f043 0201 	orr.w	r2, r3, #1
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003174:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d011      	beq.n	80031a4 <HAL_UART_IRQHandler+0xec>
 8003180:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003184:	f003 0301 	and.w	r3, r3, #1
 8003188:	2b00      	cmp	r3, #0
 800318a:	d00b      	beq.n	80031a4 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2202      	movs	r2, #2
 8003192:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800319a:	f043 0204 	orr.w	r2, r3, #4
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80031a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031a8:	f003 0304 	and.w	r3, r3, #4
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d011      	beq.n	80031d4 <HAL_UART_IRQHandler+0x11c>
 80031b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00b      	beq.n	80031d4 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	2204      	movs	r2, #4
 80031c2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80031ca:	f043 0202 	orr.w	r2, r3, #2
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 80031d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80031d8:	f003 0308 	and.w	r3, r3, #8
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d017      	beq.n	8003210 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80031e4:	f003 0320 	and.w	r3, r3, #32
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d105      	bne.n	80031f8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80031ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80031f0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d00b      	beq.n	8003210 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	2208      	movs	r2, #8
 80031fe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003206:	f043 0208 	orr.w	r2, r3, #8
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003210:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003214:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003218:	2b00      	cmp	r3, #0
 800321a:	d012      	beq.n	8003242 <HAL_UART_IRQHandler+0x18a>
 800321c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003220:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00c      	beq.n	8003242 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003230:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003238:	f043 0220 	orr.w	r2, r3, #32
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003248:	2b00      	cmp	r3, #0
 800324a:	f000 820c 	beq.w	8003666 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800324e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003252:	f003 0320 	and.w	r3, r3, #32
 8003256:	2b00      	cmp	r3, #0
 8003258:	d00d      	beq.n	8003276 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800325a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d007      	beq.n	8003276 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800326a:	2b00      	cmp	r3, #0
 800326c:	d003      	beq.n	8003276 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003272:	6878      	ldr	r0, [r7, #4]
 8003274:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800327c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800328a:	2b40      	cmp	r3, #64	; 0x40
 800328c:	d005      	beq.n	800329a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800328e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003292:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003296:	2b00      	cmp	r3, #0
 8003298:	d04f      	beq.n	800333a <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f000 fde9 	bl	8003e72 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032aa:	2b40      	cmp	r3, #64	; 0x40
 80032ac:	d141      	bne.n	8003332 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	3308      	adds	r3, #8
 80032b4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80032bc:	e853 3f00 	ldrex	r3, [r3]
 80032c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80032c4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80032c8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80032cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	3308      	adds	r3, #8
 80032d6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80032da:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80032de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032e2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80032e6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80032ea:	e841 2300 	strex	r3, r2, [r1]
 80032ee:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80032f2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d1d9      	bne.n	80032ae <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d013      	beq.n	800332a <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003306:	4a13      	ldr	r2, [pc, #76]	; (8003354 <HAL_UART_IRQHandler+0x29c>)
 8003308:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800330e:	4618      	mov	r0, r3
 8003310:	f7fd fff6 	bl	8001300 <HAL_DMA_Abort_IT>
 8003314:	4603      	mov	r3, r0
 8003316:	2b00      	cmp	r3, #0
 8003318:	d017      	beq.n	800334a <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800331e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003320:	687a      	ldr	r2, [r7, #4]
 8003322:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8003324:	4610      	mov	r0, r2
 8003326:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003328:	e00f      	b.n	800334a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800332a:	6878      	ldr	r0, [r7, #4]
 800332c:	f000 f9b0 	bl	8003690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003330:	e00b      	b.n	800334a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003332:	6878      	ldr	r0, [r7, #4]
 8003334:	f000 f9ac 	bl	8003690 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003338:	e007      	b.n	800334a <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f000 f9a8 	bl	8003690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	2200      	movs	r2, #0
 8003344:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003348:	e18d      	b.n	8003666 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800334a:	bf00      	nop
    return;
 800334c:	e18b      	b.n	8003666 <HAL_UART_IRQHandler+0x5ae>
 800334e:	bf00      	nop
 8003350:	04000120 	.word	0x04000120
 8003354:	08003f39 	.word	0x08003f39

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800335c:	2b01      	cmp	r3, #1
 800335e:	f040 8146 	bne.w	80035ee <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003362:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003366:	f003 0310 	and.w	r3, r3, #16
 800336a:	2b00      	cmp	r3, #0
 800336c:	f000 813f 	beq.w	80035ee <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003370:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003374:	f003 0310 	and.w	r3, r3, #16
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8138 	beq.w	80035ee <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	2210      	movs	r2, #16
 8003384:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003390:	2b40      	cmp	r3, #64	; 0x40
 8003392:	f040 80b4 	bne.w	80034fe <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80033a2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	f000 815f 	beq.w	800366a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80033b2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033b6:	429a      	cmp	r2, r3
 80033b8:	f080 8157 	bcs.w	800366a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80033c2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f003 0320 	and.w	r3, r3, #32
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	f040 8085 	bne.w	80034e2 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80033e4:	e853 3f00 	ldrex	r3, [r3]
 80033e8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80033ec:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80033f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033f4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	461a      	mov	r2, r3
 80033fe:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003402:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003406:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800340a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800340e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8003412:	e841 2300 	strex	r3, r2, [r1]
 8003416:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800341a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800341e:	2b00      	cmp	r3, #0
 8003420:	d1da      	bne.n	80033d8 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	3308      	adds	r3, #8
 8003428:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800342a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800342c:	e853 3f00 	ldrex	r3, [r3]
 8003430:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8003432:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003434:	f023 0301 	bic.w	r3, r3, #1
 8003438:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	3308      	adds	r3, #8
 8003442:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8003446:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800344a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800344c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800344e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003452:	e841 2300 	strex	r3, r2, [r1]
 8003456:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003458:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800345a:	2b00      	cmp	r3, #0
 800345c:	d1e1      	bne.n	8003422 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	3308      	adds	r3, #8
 8003464:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003466:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003468:	e853 3f00 	ldrex	r3, [r3]
 800346c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800346e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003470:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003474:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	3308      	adds	r3, #8
 800347e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003482:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003484:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003486:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003488:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800348a:	e841 2300 	strex	r3, r2, [r1]
 800348e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003490:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003492:	2b00      	cmp	r3, #0
 8003494:	d1e3      	bne.n	800345e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2220      	movs	r2, #32
 800349a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	2200      	movs	r2, #0
 80034a0:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034aa:	e853 3f00 	ldrex	r3, [r3]
 80034ae:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80034b0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80034b2:	f023 0310 	bic.w	r3, r3, #16
 80034b6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	461a      	mov	r2, r3
 80034c0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034c4:	65bb      	str	r3, [r7, #88]	; 0x58
 80034c6:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80034ca:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80034cc:	e841 2300 	strex	r3, r2, [r1]
 80034d0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80034d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d1e4      	bne.n	80034a2 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034dc:	4618      	mov	r0, r3
 80034de:	f7fd fed1 	bl	8001284 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	b29b      	uxth	r3, r3
 80034f4:	4619      	mov	r1, r3
 80034f6:	6878      	ldr	r0, [r7, #4]
 80034f8:	f000 f8d4 	bl	80036a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80034fc:	e0b5      	b.n	800366a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800350a:	b29b      	uxth	r3, r3
 800350c:	1ad3      	subs	r3, r2, r3
 800350e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003518:	b29b      	uxth	r3, r3
 800351a:	2b00      	cmp	r3, #0
 800351c:	f000 80a7 	beq.w	800366e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003520:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003524:	2b00      	cmp	r3, #0
 8003526:	f000 80a2 	beq.w	800366e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003530:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003532:	e853 3f00 	ldrex	r3, [r3]
 8003536:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003538:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800353a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800353e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	461a      	mov	r2, r3
 8003548:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800354c:	647b      	str	r3, [r7, #68]	; 0x44
 800354e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003550:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003552:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003554:	e841 2300 	strex	r3, r2, [r1]
 8003558:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800355a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800355c:	2b00      	cmp	r3, #0
 800355e:	d1e4      	bne.n	800352a <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	3308      	adds	r3, #8
 8003566:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800356a:	e853 3f00 	ldrex	r3, [r3]
 800356e:	623b      	str	r3, [r7, #32]
   return(result);
 8003570:	6a3b      	ldr	r3, [r7, #32]
 8003572:	f023 0301 	bic.w	r3, r3, #1
 8003576:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	3308      	adds	r3, #8
 8003580:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003584:	633a      	str	r2, [r7, #48]	; 0x30
 8003586:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003588:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800358a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800358c:	e841 2300 	strex	r3, r2, [r1]
 8003590:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003592:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1e3      	bne.n	8003560 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2220      	movs	r2, #32
 800359c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2200      	movs	r2, #0
 80035a8:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	e853 3f00 	ldrex	r3, [r3]
 80035b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	f023 0310 	bic.w	r3, r3, #16
 80035be:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	461a      	mov	r2, r3
 80035c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035cc:	61fb      	str	r3, [r7, #28]
 80035ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	69b9      	ldr	r1, [r7, #24]
 80035d2:	69fa      	ldr	r2, [r7, #28]
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	617b      	str	r3, [r7, #20]
   return(result);
 80035da:	697b      	ldr	r3, [r7, #20]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e4      	bne.n	80035aa <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80035e0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80035e4:	4619      	mov	r1, r3
 80035e6:	6878      	ldr	r0, [r7, #4]
 80035e8:	f000 f85c 	bl	80036a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80035ec:	e03f      	b.n	800366e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80035ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035f2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d00e      	beq.n	8003618 <HAL_UART_IRQHandler+0x560>
 80035fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d008      	beq.n	8003618 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800360e:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003610:	6878      	ldr	r0, [r7, #4]
 8003612:	f000 fcd1 	bl	8003fb8 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003616:	e02d      	b.n	8003674 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003618:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800361c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003620:	2b00      	cmp	r3, #0
 8003622:	d00e      	beq.n	8003642 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003624:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003628:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800362c:	2b00      	cmp	r3, #0
 800362e:	d008      	beq.n	8003642 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003634:	2b00      	cmp	r3, #0
 8003636:	d01c      	beq.n	8003672 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800363c:	6878      	ldr	r0, [r7, #4]
 800363e:	4798      	blx	r3
    }
    return;
 8003640:	e017      	b.n	8003672 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003642:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003646:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800364a:	2b00      	cmp	r3, #0
 800364c:	d012      	beq.n	8003674 <HAL_UART_IRQHandler+0x5bc>
 800364e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003652:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003656:	2b00      	cmp	r3, #0
 8003658:	d00c      	beq.n	8003674 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	f000 fc82 	bl	8003f64 <UART_EndTransmit_IT>
    return;
 8003660:	e008      	b.n	8003674 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003662:	bf00      	nop
 8003664:	e006      	b.n	8003674 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003666:	bf00      	nop
 8003668:	e004      	b.n	8003674 <HAL_UART_IRQHandler+0x5bc>
      return;
 800366a:	bf00      	nop
 800366c:	e002      	b.n	8003674 <HAL_UART_IRQHandler+0x5bc>
      return;
 800366e:	bf00      	nop
 8003670:	e000      	b.n	8003674 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003672:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003674:	37e8      	adds	r7, #232	; 0xe8
 8003676:	46bd      	mov	sp, r7
 8003678:	bd80      	pop	{r7, pc}
 800367a:	bf00      	nop

0800367c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800367c:	b480      	push	{r7}
 800367e:	b083      	sub	sp, #12
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003684:	bf00      	nop
 8003686:	370c      	adds	r7, #12
 8003688:	46bd      	mov	sp, r7
 800368a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368e:	4770      	bx	lr

08003690 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003690:	b480      	push	{r7}
 8003692:	b083      	sub	sp, #12
 8003694:	af00      	add	r7, sp, #0
 8003696:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003698:	bf00      	nop
 800369a:	370c      	adds	r7, #12
 800369c:	46bd      	mov	sp, r7
 800369e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036a2:	4770      	bx	lr

080036a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80036a4:	b480      	push	{r7}
 80036a6:	b083      	sub	sp, #12
 80036a8:	af00      	add	r7, sp, #0
 80036aa:	6078      	str	r0, [r7, #4]
 80036ac:	460b      	mov	r3, r1
 80036ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80036b0:	bf00      	nop
 80036b2:	370c      	adds	r7, #12
 80036b4:	46bd      	mov	sp, r7
 80036b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036ba:	4770      	bx	lr

080036bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80036bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80036c0:	b08a      	sub	sp, #40	; 0x28
 80036c2:	af00      	add	r7, sp, #0
 80036c4:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80036c6:	2300      	movs	r3, #0
 80036c8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	689a      	ldr	r2, [r3, #8]
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	691b      	ldr	r3, [r3, #16]
 80036d4:	431a      	orrs	r2, r3
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	695b      	ldr	r3, [r3, #20]
 80036da:	431a      	orrs	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	69db      	ldr	r3, [r3, #28]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	681a      	ldr	r2, [r3, #0]
 80036ea:	4bb4      	ldr	r3, [pc, #720]	; (80039bc <UART_SetConfig+0x300>)
 80036ec:	4013      	ands	r3, r2
 80036ee:	68fa      	ldr	r2, [r7, #12]
 80036f0:	6812      	ldr	r2, [r2, #0]
 80036f2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80036f4:	430b      	orrs	r3, r1
 80036f6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	685b      	ldr	r3, [r3, #4]
 80036fe:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	68da      	ldr	r2, [r3, #12]
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	681b      	ldr	r3, [r3, #0]
 800370a:	430a      	orrs	r2, r1
 800370c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	699b      	ldr	r3, [r3, #24]
 8003712:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	4aa9      	ldr	r2, [pc, #676]	; (80039c0 <UART_SetConfig+0x304>)
 800371a:	4293      	cmp	r3, r2
 800371c:	d004      	beq.n	8003728 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	6a1b      	ldr	r3, [r3, #32]
 8003722:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003724:	4313      	orrs	r3, r2
 8003726:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	689b      	ldr	r3, [r3, #8]
 800372e:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003738:	430a      	orrs	r2, r1
 800373a:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4aa0      	ldr	r2, [pc, #640]	; (80039c4 <UART_SetConfig+0x308>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d126      	bne.n	8003794 <UART_SetConfig+0xd8>
 8003746:	4ba0      	ldr	r3, [pc, #640]	; (80039c8 <UART_SetConfig+0x30c>)
 8003748:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800374c:	f003 0303 	and.w	r3, r3, #3
 8003750:	2b03      	cmp	r3, #3
 8003752:	d81b      	bhi.n	800378c <UART_SetConfig+0xd0>
 8003754:	a201      	add	r2, pc, #4	; (adr r2, 800375c <UART_SetConfig+0xa0>)
 8003756:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800375a:	bf00      	nop
 800375c:	0800376d 	.word	0x0800376d
 8003760:	0800377d 	.word	0x0800377d
 8003764:	08003775 	.word	0x08003775
 8003768:	08003785 	.word	0x08003785
 800376c:	2301      	movs	r3, #1
 800376e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003772:	e080      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003774:	2302      	movs	r3, #2
 8003776:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800377a:	e07c      	b.n	8003876 <UART_SetConfig+0x1ba>
 800377c:	2304      	movs	r3, #4
 800377e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003782:	e078      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003784:	2308      	movs	r3, #8
 8003786:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800378a:	e074      	b.n	8003876 <UART_SetConfig+0x1ba>
 800378c:	2310      	movs	r3, #16
 800378e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003792:	e070      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	4a8c      	ldr	r2, [pc, #560]	; (80039cc <UART_SetConfig+0x310>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d138      	bne.n	8003810 <UART_SetConfig+0x154>
 800379e:	4b8a      	ldr	r3, [pc, #552]	; (80039c8 <UART_SetConfig+0x30c>)
 80037a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037a4:	f003 030c 	and.w	r3, r3, #12
 80037a8:	2b0c      	cmp	r3, #12
 80037aa:	d82d      	bhi.n	8003808 <UART_SetConfig+0x14c>
 80037ac:	a201      	add	r2, pc, #4	; (adr r2, 80037b4 <UART_SetConfig+0xf8>)
 80037ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80037b2:	bf00      	nop
 80037b4:	080037e9 	.word	0x080037e9
 80037b8:	08003809 	.word	0x08003809
 80037bc:	08003809 	.word	0x08003809
 80037c0:	08003809 	.word	0x08003809
 80037c4:	080037f9 	.word	0x080037f9
 80037c8:	08003809 	.word	0x08003809
 80037cc:	08003809 	.word	0x08003809
 80037d0:	08003809 	.word	0x08003809
 80037d4:	080037f1 	.word	0x080037f1
 80037d8:	08003809 	.word	0x08003809
 80037dc:	08003809 	.word	0x08003809
 80037e0:	08003809 	.word	0x08003809
 80037e4:	08003801 	.word	0x08003801
 80037e8:	2300      	movs	r3, #0
 80037ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037ee:	e042      	b.n	8003876 <UART_SetConfig+0x1ba>
 80037f0:	2302      	movs	r3, #2
 80037f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037f6:	e03e      	b.n	8003876 <UART_SetConfig+0x1ba>
 80037f8:	2304      	movs	r3, #4
 80037fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80037fe:	e03a      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003800:	2308      	movs	r3, #8
 8003802:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003806:	e036      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003808:	2310      	movs	r3, #16
 800380a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800380e:	e032      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	4a6a      	ldr	r2, [pc, #424]	; (80039c0 <UART_SetConfig+0x304>)
 8003816:	4293      	cmp	r3, r2
 8003818:	d12a      	bne.n	8003870 <UART_SetConfig+0x1b4>
 800381a:	4b6b      	ldr	r3, [pc, #428]	; (80039c8 <UART_SetConfig+0x30c>)
 800381c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003820:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003824:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003828:	d01a      	beq.n	8003860 <UART_SetConfig+0x1a4>
 800382a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800382e:	d81b      	bhi.n	8003868 <UART_SetConfig+0x1ac>
 8003830:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003834:	d00c      	beq.n	8003850 <UART_SetConfig+0x194>
 8003836:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800383a:	d815      	bhi.n	8003868 <UART_SetConfig+0x1ac>
 800383c:	2b00      	cmp	r3, #0
 800383e:	d003      	beq.n	8003848 <UART_SetConfig+0x18c>
 8003840:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003844:	d008      	beq.n	8003858 <UART_SetConfig+0x19c>
 8003846:	e00f      	b.n	8003868 <UART_SetConfig+0x1ac>
 8003848:	2300      	movs	r3, #0
 800384a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800384e:	e012      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003850:	2302      	movs	r3, #2
 8003852:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003856:	e00e      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003858:	2304      	movs	r3, #4
 800385a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800385e:	e00a      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003860:	2308      	movs	r3, #8
 8003862:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003866:	e006      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003868:	2310      	movs	r3, #16
 800386a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800386e:	e002      	b.n	8003876 <UART_SetConfig+0x1ba>
 8003870:	2310      	movs	r3, #16
 8003872:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	4a51      	ldr	r2, [pc, #324]	; (80039c0 <UART_SetConfig+0x304>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d17a      	bne.n	8003976 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003880:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003884:	2b08      	cmp	r3, #8
 8003886:	d824      	bhi.n	80038d2 <UART_SetConfig+0x216>
 8003888:	a201      	add	r2, pc, #4	; (adr r2, 8003890 <UART_SetConfig+0x1d4>)
 800388a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800388e:	bf00      	nop
 8003890:	080038b5 	.word	0x080038b5
 8003894:	080038d3 	.word	0x080038d3
 8003898:	080038bd 	.word	0x080038bd
 800389c:	080038d3 	.word	0x080038d3
 80038a0:	080038c3 	.word	0x080038c3
 80038a4:	080038d3 	.word	0x080038d3
 80038a8:	080038d3 	.word	0x080038d3
 80038ac:	080038d3 	.word	0x080038d3
 80038b0:	080038cb 	.word	0x080038cb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80038b4:	f7fe fcf8 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 80038b8:	61f8      	str	r0, [r7, #28]
        break;
 80038ba:	e010      	b.n	80038de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80038bc:	4b44      	ldr	r3, [pc, #272]	; (80039d0 <UART_SetConfig+0x314>)
 80038be:	61fb      	str	r3, [r7, #28]
        break;
 80038c0:	e00d      	b.n	80038de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80038c2:	f7fe fc59 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 80038c6:	61f8      	str	r0, [r7, #28]
        break;
 80038c8:	e009      	b.n	80038de <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80038ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038ce:	61fb      	str	r3, [r7, #28]
        break;
 80038d0:	e005      	b.n	80038de <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80038d2:	2300      	movs	r3, #0
 80038d4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038d6:	2301      	movs	r3, #1
 80038d8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038dc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80038de:	69fb      	ldr	r3, [r7, #28]
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	f000 8107 	beq.w	8003af4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685a      	ldr	r2, [r3, #4]
 80038ea:	4613      	mov	r3, r2
 80038ec:	005b      	lsls	r3, r3, #1
 80038ee:	4413      	add	r3, r2
 80038f0:	69fa      	ldr	r2, [r7, #28]
 80038f2:	429a      	cmp	r2, r3
 80038f4:	d305      	bcc.n	8003902 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	685b      	ldr	r3, [r3, #4]
 80038fa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80038fc:	69fa      	ldr	r2, [r7, #28]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d903      	bls.n	800390a <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003902:	2301      	movs	r3, #1
 8003904:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003908:	e0f4      	b.n	8003af4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	2200      	movs	r2, #0
 800390e:	461c      	mov	r4, r3
 8003910:	4615      	mov	r5, r2
 8003912:	f04f 0200 	mov.w	r2, #0
 8003916:	f04f 0300 	mov.w	r3, #0
 800391a:	022b      	lsls	r3, r5, #8
 800391c:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003920:	0222      	lsls	r2, r4, #8
 8003922:	68f9      	ldr	r1, [r7, #12]
 8003924:	6849      	ldr	r1, [r1, #4]
 8003926:	0849      	lsrs	r1, r1, #1
 8003928:	2000      	movs	r0, #0
 800392a:	4688      	mov	r8, r1
 800392c:	4681      	mov	r9, r0
 800392e:	eb12 0a08 	adds.w	sl, r2, r8
 8003932:	eb43 0b09 	adc.w	fp, r3, r9
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	2200      	movs	r2, #0
 800393c:	603b      	str	r3, [r7, #0]
 800393e:	607a      	str	r2, [r7, #4]
 8003940:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003944:	4650      	mov	r0, sl
 8003946:	4659      	mov	r1, fp
 8003948:	f7fc fc92 	bl	8000270 <__aeabi_uldivmod>
 800394c:	4602      	mov	r2, r0
 800394e:	460b      	mov	r3, r1
 8003950:	4613      	mov	r3, r2
 8003952:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003954:	69bb      	ldr	r3, [r7, #24]
 8003956:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800395a:	d308      	bcc.n	800396e <UART_SetConfig+0x2b2>
 800395c:	69bb      	ldr	r3, [r7, #24]
 800395e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003962:	d204      	bcs.n	800396e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	60da      	str	r2, [r3, #12]
 800396c:	e0c2      	b.n	8003af4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003974:	e0be      	b.n	8003af4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	69db      	ldr	r3, [r3, #28]
 800397a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800397e:	d16a      	bne.n	8003a56 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003980:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003984:	2b08      	cmp	r3, #8
 8003986:	d834      	bhi.n	80039f2 <UART_SetConfig+0x336>
 8003988:	a201      	add	r2, pc, #4	; (adr r2, 8003990 <UART_SetConfig+0x2d4>)
 800398a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800398e:	bf00      	nop
 8003990:	080039b5 	.word	0x080039b5
 8003994:	080039d5 	.word	0x080039d5
 8003998:	080039dd 	.word	0x080039dd
 800399c:	080039f3 	.word	0x080039f3
 80039a0:	080039e3 	.word	0x080039e3
 80039a4:	080039f3 	.word	0x080039f3
 80039a8:	080039f3 	.word	0x080039f3
 80039ac:	080039f3 	.word	0x080039f3
 80039b0:	080039eb 	.word	0x080039eb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80039b4:	f7fe fc78 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 80039b8:	61f8      	str	r0, [r7, #28]
        break;
 80039ba:	e020      	b.n	80039fe <UART_SetConfig+0x342>
 80039bc:	efff69f3 	.word	0xefff69f3
 80039c0:	40008000 	.word	0x40008000
 80039c4:	40013800 	.word	0x40013800
 80039c8:	40021000 	.word	0x40021000
 80039cc:	40004400 	.word	0x40004400
 80039d0:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80039d4:	f7fe fc7e 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 80039d8:	61f8      	str	r0, [r7, #28]
        break;
 80039da:	e010      	b.n	80039fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80039dc:	4b4c      	ldr	r3, [pc, #304]	; (8003b10 <UART_SetConfig+0x454>)
 80039de:	61fb      	str	r3, [r7, #28]
        break;
 80039e0:	e00d      	b.n	80039fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80039e2:	f7fe fbc9 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 80039e6:	61f8      	str	r0, [r7, #28]
        break;
 80039e8:	e009      	b.n	80039fe <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80039ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80039ee:	61fb      	str	r3, [r7, #28]
        break;
 80039f0:	e005      	b.n	80039fe <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80039f2:	2300      	movs	r3, #0
 80039f4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80039f6:	2301      	movs	r3, #1
 80039f8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80039fc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80039fe:	69fb      	ldr	r3, [r7, #28]
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d077      	beq.n	8003af4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003a04:	69fb      	ldr	r3, [r7, #28]
 8003a06:	005a      	lsls	r2, r3, #1
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	085b      	lsrs	r3, r3, #1
 8003a0e:	441a      	add	r2, r3
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	685b      	ldr	r3, [r3, #4]
 8003a14:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a18:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	2b0f      	cmp	r3, #15
 8003a1e:	d916      	bls.n	8003a4e <UART_SetConfig+0x392>
 8003a20:	69bb      	ldr	r3, [r7, #24]
 8003a22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a26:	d212      	bcs.n	8003a4e <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003a28:	69bb      	ldr	r3, [r7, #24]
 8003a2a:	b29b      	uxth	r3, r3
 8003a2c:	f023 030f 	bic.w	r3, r3, #15
 8003a30:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	085b      	lsrs	r3, r3, #1
 8003a36:	b29b      	uxth	r3, r3
 8003a38:	f003 0307 	and.w	r3, r3, #7
 8003a3c:	b29a      	uxth	r2, r3
 8003a3e:	8afb      	ldrh	r3, [r7, #22]
 8003a40:	4313      	orrs	r3, r2
 8003a42:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	8afa      	ldrh	r2, [r7, #22]
 8003a4a:	60da      	str	r2, [r3, #12]
 8003a4c:	e052      	b.n	8003af4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003a4e:	2301      	movs	r3, #1
 8003a50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003a54:	e04e      	b.n	8003af4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003a56:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d827      	bhi.n	8003aae <UART_SetConfig+0x3f2>
 8003a5e:	a201      	add	r2, pc, #4	; (adr r2, 8003a64 <UART_SetConfig+0x3a8>)
 8003a60:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a64:	08003a89 	.word	0x08003a89
 8003a68:	08003a91 	.word	0x08003a91
 8003a6c:	08003a99 	.word	0x08003a99
 8003a70:	08003aaf 	.word	0x08003aaf
 8003a74:	08003a9f 	.word	0x08003a9f
 8003a78:	08003aaf 	.word	0x08003aaf
 8003a7c:	08003aaf 	.word	0x08003aaf
 8003a80:	08003aaf 	.word	0x08003aaf
 8003a84:	08003aa7 	.word	0x08003aa7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a88:	f7fe fc0e 	bl	80022a8 <HAL_RCC_GetPCLK1Freq>
 8003a8c:	61f8      	str	r0, [r7, #28]
        break;
 8003a8e:	e014      	b.n	8003aba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003a90:	f7fe fc20 	bl	80022d4 <HAL_RCC_GetPCLK2Freq>
 8003a94:	61f8      	str	r0, [r7, #28]
        break;
 8003a96:	e010      	b.n	8003aba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a98:	4b1d      	ldr	r3, [pc, #116]	; (8003b10 <UART_SetConfig+0x454>)
 8003a9a:	61fb      	str	r3, [r7, #28]
        break;
 8003a9c:	e00d      	b.n	8003aba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a9e:	f7fe fb6b 	bl	8002178 <HAL_RCC_GetSysClockFreq>
 8003aa2:	61f8      	str	r0, [r7, #28]
        break;
 8003aa4:	e009      	b.n	8003aba <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003aa6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003aaa:	61fb      	str	r3, [r7, #28]
        break;
 8003aac:	e005      	b.n	8003aba <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003aae:	2300      	movs	r3, #0
 8003ab0:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003ab2:	2301      	movs	r3, #1
 8003ab4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ab8:	bf00      	nop
    }

    if (pclk != 0U)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d019      	beq.n	8003af4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	085a      	lsrs	r2, r3, #1
 8003ac6:	69fb      	ldr	r3, [r7, #28]
 8003ac8:	441a      	add	r2, r3
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	685b      	ldr	r3, [r3, #4]
 8003ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad2:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	2b0f      	cmp	r3, #15
 8003ad8:	d909      	bls.n	8003aee <UART_SetConfig+0x432>
 8003ada:	69bb      	ldr	r3, [r7, #24]
 8003adc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ae0:	d205      	bcs.n	8003aee <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003ae2:	69bb      	ldr	r3, [r7, #24]
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	60da      	str	r2, [r3, #12]
 8003aec:	e002      	b.n	8003af4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003aee:	2301      	movs	r3, #1
 8003af0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	2200      	movs	r2, #0
 8003af8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	2200      	movs	r2, #0
 8003afe:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003b00:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003b04:	4618      	mov	r0, r3
 8003b06:	3728      	adds	r7, #40	; 0x28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b0e:	bf00      	nop
 8003b10:	00f42400 	.word	0x00f42400

08003b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b083      	sub	sp, #12
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b20:	f003 0301 	and.w	r3, r3, #1
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d00a      	beq.n	8003b3e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	430a      	orrs	r2, r1
 8003b3c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	f003 0302 	and.w	r3, r3, #2
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d00a      	beq.n	8003b60 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	430a      	orrs	r2, r1
 8003b5e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b64:	f003 0304 	and.w	r3, r3, #4
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d00a      	beq.n	8003b82 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	430a      	orrs	r2, r1
 8003b80:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b86:	f003 0308 	and.w	r3, r3, #8
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d00a      	beq.n	8003ba4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba8:	f003 0310 	and.w	r3, r3, #16
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d00a      	beq.n	8003bc6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	689b      	ldr	r3, [r3, #8]
 8003bb6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	430a      	orrs	r2, r1
 8003bc4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bca:	f003 0320 	and.w	r3, r3, #32
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d00a      	beq.n	8003be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	430a      	orrs	r2, r1
 8003be6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d01a      	beq.n	8003c2a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c12:	d10a      	bne.n	8003c2a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	685b      	ldr	r3, [r3, #4]
 8003c1a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	430a      	orrs	r2, r1
 8003c28:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d00a      	beq.n	8003c4c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	685b      	ldr	r3, [r3, #4]
 8003c3c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	430a      	orrs	r2, r1
 8003c4a:	605a      	str	r2, [r3, #4]
  }
}
 8003c4c:	bf00      	nop
 8003c4e:	370c      	adds	r7, #12
 8003c50:	46bd      	mov	sp, r7
 8003c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c56:	4770      	bx	lr

08003c58 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003c58:	b580      	push	{r7, lr}
 8003c5a:	b086      	sub	sp, #24
 8003c5c:	af02      	add	r7, sp, #8
 8003c5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2200      	movs	r2, #0
 8003c64:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003c68:	f7fd fa1e 	bl	80010a8 <HAL_GetTick>
 8003c6c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f003 0308 	and.w	r3, r3, #8
 8003c78:	2b08      	cmp	r3, #8
 8003c7a:	d10e      	bne.n	8003c9a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003c7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003c8a:	6878      	ldr	r0, [r7, #4]
 8003c8c:	f000 f82d 	bl	8003cea <UART_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003c96:	2303      	movs	r3, #3
 8003c98:	e023      	b.n	8003ce2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f003 0304 	and.w	r3, r3, #4
 8003ca4:	2b04      	cmp	r3, #4
 8003ca6:	d10e      	bne.n	8003cc6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003ca8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003cac:	9300      	str	r3, [sp, #0]
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f000 f817 	bl	8003cea <UART_WaitOnFlagUntilTimeout>
 8003cbc:	4603      	mov	r3, r0
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d001      	beq.n	8003cc6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e00d      	b.n	8003ce2 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2220      	movs	r2, #32
 8003cca:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2220      	movs	r2, #32
 8003cd0:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003ce0:	2300      	movs	r3, #0
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	3710      	adds	r7, #16
 8003ce6:	46bd      	mov	sp, r7
 8003ce8:	bd80      	pop	{r7, pc}

08003cea <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003cea:	b580      	push	{r7, lr}
 8003cec:	b09c      	sub	sp, #112	; 0x70
 8003cee:	af00      	add	r7, sp, #0
 8003cf0:	60f8      	str	r0, [r7, #12]
 8003cf2:	60b9      	str	r1, [r7, #8]
 8003cf4:	603b      	str	r3, [r7, #0]
 8003cf6:	4613      	mov	r3, r2
 8003cf8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cfa:	e0a5      	b.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003cfc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003cfe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d02:	f000 80a1 	beq.w	8003e48 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d06:	f7fd f9cf 	bl	80010a8 <HAL_GetTick>
 8003d0a:	4602      	mov	r2, r0
 8003d0c:	683b      	ldr	r3, [r7, #0]
 8003d0e:	1ad3      	subs	r3, r2, r3
 8003d10:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003d12:	429a      	cmp	r2, r3
 8003d14:	d302      	bcc.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x32>
 8003d16:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d13e      	bne.n	8003d9a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003d24:	e853 3f00 	ldrex	r3, [r3]
 8003d28:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003d2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d2c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003d30:	667b      	str	r3, [r7, #100]	; 0x64
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	461a      	mov	r2, r3
 8003d38:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003d3a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003d3c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003d40:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003d42:	e841 2300 	strex	r3, r2, [r1]
 8003d46:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003d48:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d1e6      	bne.n	8003d1c <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	3308      	adds	r3, #8
 8003d54:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d56:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003d58:	e853 3f00 	ldrex	r3, [r3]
 8003d5c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d60:	f023 0301 	bic.w	r3, r3, #1
 8003d64:	663b      	str	r3, [r7, #96]	; 0x60
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3308      	adds	r3, #8
 8003d6c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003d6e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003d70:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d72:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003d74:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d76:	e841 2300 	strex	r3, r2, [r1]
 8003d7a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003d7c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d1e5      	bne.n	8003d4e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	2220      	movs	r2, #32
 8003d86:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	2220      	movs	r2, #32
 8003d8c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003d96:	2303      	movs	r3, #3
 8003d98:	e067      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d04f      	beq.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003db2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003db6:	d147      	bne.n	8003e48 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003dc0:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dca:	e853 3f00 	ldrex	r3, [r3]
 8003dce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003dd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003dd2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003dd6:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	461a      	mov	r2, r3
 8003dde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003de0:	637b      	str	r3, [r7, #52]	; 0x34
 8003de2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003de4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003de6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003de8:	e841 2300 	strex	r3, r2, [r1]
 8003dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003dee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d1e6      	bne.n	8003dc2 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	3308      	adds	r3, #8
 8003dfa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dfc:	697b      	ldr	r3, [r7, #20]
 8003dfe:	e853 3f00 	ldrex	r3, [r3]
 8003e02:	613b      	str	r3, [r7, #16]
   return(result);
 8003e04:	693b      	ldr	r3, [r7, #16]
 8003e06:	f023 0301 	bic.w	r3, r3, #1
 8003e0a:	66bb      	str	r3, [r7, #104]	; 0x68
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	3308      	adds	r3, #8
 8003e12:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003e14:	623a      	str	r2, [r7, #32]
 8003e16:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e18:	69f9      	ldr	r1, [r7, #28]
 8003e1a:	6a3a      	ldr	r2, [r7, #32]
 8003e1c:	e841 2300 	strex	r3, r2, [r1]
 8003e20:	61bb      	str	r3, [r7, #24]
   return(result);
 8003e22:	69bb      	ldr	r3, [r7, #24]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d1e5      	bne.n	8003df4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	2220      	movs	r2, #32
 8003e2c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	2220      	movs	r2, #32
 8003e32:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003e44:	2303      	movs	r3, #3
 8003e46:	e010      	b.n	8003e6a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	69da      	ldr	r2, [r3, #28]
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	4013      	ands	r3, r2
 8003e52:	68ba      	ldr	r2, [r7, #8]
 8003e54:	429a      	cmp	r2, r3
 8003e56:	bf0c      	ite	eq
 8003e58:	2301      	moveq	r3, #1
 8003e5a:	2300      	movne	r3, #0
 8003e5c:	b2db      	uxtb	r3, r3
 8003e5e:	461a      	mov	r2, r3
 8003e60:	79fb      	ldrb	r3, [r7, #7]
 8003e62:	429a      	cmp	r2, r3
 8003e64:	f43f af4a 	beq.w	8003cfc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003e68:	2300      	movs	r3, #0
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	3770      	adds	r7, #112	; 0x70
 8003e6e:	46bd      	mov	sp, r7
 8003e70:	bd80      	pop	{r7, pc}

08003e72 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003e72:	b480      	push	{r7}
 8003e74:	b095      	sub	sp, #84	; 0x54
 8003e76:	af00      	add	r7, sp, #0
 8003e78:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e82:	e853 3f00 	ldrex	r3, [r3]
 8003e86:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003e88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e8a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	461a      	mov	r2, r3
 8003e96:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e98:	643b      	str	r3, [r7, #64]	; 0x40
 8003e9a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003e9e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003ea0:	e841 2300 	strex	r3, r2, [r1]
 8003ea4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003ea6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d1e6      	bne.n	8003e7a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	3308      	adds	r3, #8
 8003eb2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eb4:	6a3b      	ldr	r3, [r7, #32]
 8003eb6:	e853 3f00 	ldrex	r3, [r3]
 8003eba:	61fb      	str	r3, [r7, #28]
   return(result);
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f023 0301 	bic.w	r3, r3, #1
 8003ec2:	64bb      	str	r3, [r7, #72]	; 0x48
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	3308      	adds	r3, #8
 8003eca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003ecc:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003ece:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ed0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ed2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ed4:	e841 2300 	strex	r3, r2, [r1]
 8003ed8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d1e5      	bne.n	8003eac <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ee4:	2b01      	cmp	r3, #1
 8003ee6:	d118      	bne.n	8003f1a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	e853 3f00 	ldrex	r3, [r3]
 8003ef4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f023 0310 	bic.w	r3, r3, #16
 8003efc:	647b      	str	r3, [r7, #68]	; 0x44
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	461a      	mov	r2, r3
 8003f04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003f06:	61bb      	str	r3, [r7, #24]
 8003f08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0a:	6979      	ldr	r1, [r7, #20]
 8003f0c:	69ba      	ldr	r2, [r7, #24]
 8003f0e:	e841 2300 	strex	r3, r2, [r1]
 8003f12:	613b      	str	r3, [r7, #16]
   return(result);
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1e6      	bne.n	8003ee8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2220      	movs	r2, #32
 8003f1e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	2200      	movs	r2, #0
 8003f24:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	2200      	movs	r2, #0
 8003f2a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003f2c:	bf00      	nop
 8003f2e:	3754      	adds	r7, #84	; 0x54
 8003f30:	46bd      	mov	sp, r7
 8003f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f36:	4770      	bx	lr

08003f38 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	2200      	movs	r2, #0
 8003f4a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	2200      	movs	r2, #0
 8003f52:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003f56:	68f8      	ldr	r0, [r7, #12]
 8003f58:	f7ff fb9a 	bl	8003690 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003f5c:	bf00      	nop
 8003f5e:	3710      	adds	r7, #16
 8003f60:	46bd      	mov	sp, r7
 8003f62:	bd80      	pop	{r7, pc}

08003f64 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003f64:	b580      	push	{r7, lr}
 8003f66:	b088      	sub	sp, #32
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	e853 3f00 	ldrex	r3, [r3]
 8003f78:	60bb      	str	r3, [r7, #8]
   return(result);
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003f80:	61fb      	str	r3, [r7, #28]
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	461a      	mov	r2, r3
 8003f88:	69fb      	ldr	r3, [r7, #28]
 8003f8a:	61bb      	str	r3, [r7, #24]
 8003f8c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f8e:	6979      	ldr	r1, [r7, #20]
 8003f90:	69ba      	ldr	r2, [r7, #24]
 8003f92:	e841 2300 	strex	r3, r2, [r1]
 8003f96:	613b      	str	r3, [r7, #16]
   return(result);
 8003f98:	693b      	ldr	r3, [r7, #16]
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d1e6      	bne.n	8003f6c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	2220      	movs	r2, #32
 8003fa2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f7ff fb66 	bl	800367c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003fb0:	bf00      	nop
 8003fb2:	3720      	adds	r7, #32
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bd80      	pop	{r7, pc}

08003fb8 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003fb8:	b480      	push	{r7}
 8003fba:	b083      	sub	sp, #12
 8003fbc:	af00      	add	r7, sp, #0
 8003fbe:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003fc0:	bf00      	nop
 8003fc2:	370c      	adds	r7, #12
 8003fc4:	46bd      	mov	sp, r7
 8003fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fca:	4770      	bx	lr

08003fcc <__NVIC_SetPriority>:
{
 8003fcc:	b480      	push	{r7}
 8003fce:	b083      	sub	sp, #12
 8003fd0:	af00      	add	r7, sp, #0
 8003fd2:	4603      	mov	r3, r0
 8003fd4:	6039      	str	r1, [r7, #0]
 8003fd6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003fd8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	db0a      	blt.n	8003ff6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	b2da      	uxtb	r2, r3
 8003fe4:	490c      	ldr	r1, [pc, #48]	; (8004018 <__NVIC_SetPriority+0x4c>)
 8003fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fea:	0112      	lsls	r2, r2, #4
 8003fec:	b2d2      	uxtb	r2, r2
 8003fee:	440b      	add	r3, r1
 8003ff0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ff4:	e00a      	b.n	800400c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ff6:	683b      	ldr	r3, [r7, #0]
 8003ff8:	b2da      	uxtb	r2, r3
 8003ffa:	4908      	ldr	r1, [pc, #32]	; (800401c <__NVIC_SetPriority+0x50>)
 8003ffc:	79fb      	ldrb	r3, [r7, #7]
 8003ffe:	f003 030f 	and.w	r3, r3, #15
 8004002:	3b04      	subs	r3, #4
 8004004:	0112      	lsls	r2, r2, #4
 8004006:	b2d2      	uxtb	r2, r2
 8004008:	440b      	add	r3, r1
 800400a:	761a      	strb	r2, [r3, #24]
}
 800400c:	bf00      	nop
 800400e:	370c      	adds	r7, #12
 8004010:	46bd      	mov	sp, r7
 8004012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004016:	4770      	bx	lr
 8004018:	e000e100 	.word	0xe000e100
 800401c:	e000ed00 	.word	0xe000ed00

08004020 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004020:	b580      	push	{r7, lr}
 8004022:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004024:	4b05      	ldr	r3, [pc, #20]	; (800403c <SysTick_Handler+0x1c>)
 8004026:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004028:	f002 fc7e 	bl	8006928 <xTaskGetSchedulerState>
 800402c:	4603      	mov	r3, r0
 800402e:	2b01      	cmp	r3, #1
 8004030:	d001      	beq.n	8004036 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004032:	f003 fb61 	bl	80076f8 <xPortSysTickHandler>
  }
}
 8004036:	bf00      	nop
 8004038:	bd80      	pop	{r7, pc}
 800403a:	bf00      	nop
 800403c:	e000e010 	.word	0xe000e010

08004040 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004040:	b580      	push	{r7, lr}
 8004042:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004044:	2100      	movs	r1, #0
 8004046:	f06f 0004 	mvn.w	r0, #4
 800404a:	f7ff ffbf 	bl	8003fcc <__NVIC_SetPriority>
#endif
}
 800404e:	bf00      	nop
 8004050:	bd80      	pop	{r7, pc}
	...

08004054 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004054:	b480      	push	{r7}
 8004056:	b083      	sub	sp, #12
 8004058:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800405a:	f3ef 8305 	mrs	r3, IPSR
 800405e:	603b      	str	r3, [r7, #0]
  return(result);
 8004060:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004062:	2b00      	cmp	r3, #0
 8004064:	d003      	beq.n	800406e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004066:	f06f 0305 	mvn.w	r3, #5
 800406a:	607b      	str	r3, [r7, #4]
 800406c:	e00c      	b.n	8004088 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800406e:	4b0a      	ldr	r3, [pc, #40]	; (8004098 <osKernelInitialize+0x44>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	2b00      	cmp	r3, #0
 8004074:	d105      	bne.n	8004082 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004076:	4b08      	ldr	r3, [pc, #32]	; (8004098 <osKernelInitialize+0x44>)
 8004078:	2201      	movs	r2, #1
 800407a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800407c:	2300      	movs	r3, #0
 800407e:	607b      	str	r3, [r7, #4]
 8004080:	e002      	b.n	8004088 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004082:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004086:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004088:	687b      	ldr	r3, [r7, #4]
}
 800408a:	4618      	mov	r0, r3
 800408c:	370c      	adds	r7, #12
 800408e:	46bd      	mov	sp, r7
 8004090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004094:	4770      	bx	lr
 8004096:	bf00      	nop
 8004098:	200001a4 	.word	0x200001a4

0800409c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040a2:	f3ef 8305 	mrs	r3, IPSR
 80040a6:	603b      	str	r3, [r7, #0]
  return(result);
 80040a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d003      	beq.n	80040b6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80040ae:	f06f 0305 	mvn.w	r3, #5
 80040b2:	607b      	str	r3, [r7, #4]
 80040b4:	e010      	b.n	80040d8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80040b6:	4b0b      	ldr	r3, [pc, #44]	; (80040e4 <osKernelStart+0x48>)
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	2b01      	cmp	r3, #1
 80040bc:	d109      	bne.n	80040d2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80040be:	f7ff ffbf 	bl	8004040 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80040c2:	4b08      	ldr	r3, [pc, #32]	; (80040e4 <osKernelStart+0x48>)
 80040c4:	2202      	movs	r2, #2
 80040c6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80040c8:	f001 ff9e 	bl	8006008 <vTaskStartScheduler>
      stat = osOK;
 80040cc:	2300      	movs	r3, #0
 80040ce:	607b      	str	r3, [r7, #4]
 80040d0:	e002      	b.n	80040d8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80040d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80040d6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80040d8:	687b      	ldr	r3, [r7, #4]
}
 80040da:	4618      	mov	r0, r3
 80040dc:	3708      	adds	r7, #8
 80040de:	46bd      	mov	sp, r7
 80040e0:	bd80      	pop	{r7, pc}
 80040e2:	bf00      	nop
 80040e4:	200001a4 	.word	0x200001a4

080040e8 <osKernelLock>:

int32_t osKernelLock (void) {
 80040e8:	b580      	push	{r7, lr}
 80040ea:	b082      	sub	sp, #8
 80040ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80040ee:	f3ef 8305 	mrs	r3, IPSR
 80040f2:	603b      	str	r3, [r7, #0]
  return(result);
 80040f4:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d003      	beq.n	8004102 <osKernelLock+0x1a>
    lock = (int32_t)osErrorISR;
 80040fa:	f06f 0305 	mvn.w	r3, #5
 80040fe:	607b      	str	r3, [r7, #4]
 8004100:	e013      	b.n	800412a <osKernelLock+0x42>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 8004102:	f002 fc11 	bl	8006928 <xTaskGetSchedulerState>
 8004106:	4603      	mov	r3, r0
 8004108:	2b00      	cmp	r3, #0
 800410a:	d002      	beq.n	8004112 <osKernelLock+0x2a>
 800410c:	2b02      	cmp	r3, #2
 800410e:	d003      	beq.n	8004118 <osKernelLock+0x30>
 8004110:	e007      	b.n	8004122 <osKernelLock+0x3a>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 8004112:	2301      	movs	r3, #1
 8004114:	607b      	str	r3, [r7, #4]
        break;
 8004116:	e008      	b.n	800412a <osKernelLock+0x42>

      case taskSCHEDULER_RUNNING:
        vTaskSuspendAll();
 8004118:	f001 ffe6 	bl	80060e8 <vTaskSuspendAll>
        lock = 0;
 800411c:	2300      	movs	r3, #0
 800411e:	607b      	str	r3, [r7, #4]
        break;
 8004120:	e003      	b.n	800412a <osKernelLock+0x42>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8004122:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004126:	607b      	str	r3, [r7, #4]
        break;
 8004128:	bf00      	nop
    }
  }

  return (lock);
 800412a:	687b      	ldr	r3, [r7, #4]
}
 800412c:	4618      	mov	r0, r3
 800412e:	3708      	adds	r7, #8
 8004130:	46bd      	mov	sp, r7
 8004132:	bd80      	pop	{r7, pc}

08004134 <osKernelUnlock>:

int32_t osKernelUnlock (void) {
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800413a:	f3ef 8305 	mrs	r3, IPSR
 800413e:	603b      	str	r3, [r7, #0]
  return(result);
 8004140:	683b      	ldr	r3, [r7, #0]
  int32_t lock;

  if (IS_IRQ()) {
 8004142:	2b00      	cmp	r3, #0
 8004144:	d003      	beq.n	800414e <osKernelUnlock+0x1a>
    lock = (int32_t)osErrorISR;
 8004146:	f06f 0305 	mvn.w	r3, #5
 800414a:	607b      	str	r3, [r7, #4]
 800414c:	e01f      	b.n	800418e <osKernelUnlock+0x5a>
  }
  else {
    switch (xTaskGetSchedulerState()) {
 800414e:	f002 fbeb 	bl	8006928 <xTaskGetSchedulerState>
 8004152:	4603      	mov	r3, r0
 8004154:	2b00      	cmp	r3, #0
 8004156:	d002      	beq.n	800415e <osKernelUnlock+0x2a>
 8004158:	2b02      	cmp	r3, #2
 800415a:	d010      	beq.n	800417e <osKernelUnlock+0x4a>
 800415c:	e012      	b.n	8004184 <osKernelUnlock+0x50>
      case taskSCHEDULER_SUSPENDED:
        lock = 1;
 800415e:	2301      	movs	r3, #1
 8004160:	607b      	str	r3, [r7, #4]

        if (xTaskResumeAll() != pdTRUE) {
 8004162:	f001 ffcf 	bl	8006104 <xTaskResumeAll>
 8004166:	4603      	mov	r3, r0
 8004168:	2b01      	cmp	r3, #1
 800416a:	d00f      	beq.n	800418c <osKernelUnlock+0x58>
          if (xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED) {
 800416c:	f002 fbdc 	bl	8006928 <xTaskGetSchedulerState>
 8004170:	4603      	mov	r3, r0
 8004172:	2b00      	cmp	r3, #0
 8004174:	d10a      	bne.n	800418c <osKernelUnlock+0x58>
            lock = (int32_t)osError;
 8004176:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800417a:	607b      	str	r3, [r7, #4]
          }
        }
        break;
 800417c:	e006      	b.n	800418c <osKernelUnlock+0x58>

      case taskSCHEDULER_RUNNING:
        lock = 0;
 800417e:	2300      	movs	r3, #0
 8004180:	607b      	str	r3, [r7, #4]
        break;
 8004182:	e004      	b.n	800418e <osKernelUnlock+0x5a>

      case taskSCHEDULER_NOT_STARTED:
      default:
        lock = (int32_t)osError;
 8004184:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004188:	607b      	str	r3, [r7, #4]
        break;
 800418a:	e000      	b.n	800418e <osKernelUnlock+0x5a>
        break;
 800418c:	bf00      	nop
    }
  }

  return (lock);
 800418e:	687b      	ldr	r3, [r7, #4]
}
 8004190:	4618      	mov	r0, r3
 8004192:	3708      	adds	r7, #8
 8004194:	46bd      	mov	sp, r7
 8004196:	bd80      	pop	{r7, pc}

08004198 <OS_Tick_GetCount>:
uint32_t osKernelGetTickFreq (void) {
  return (configTICK_RATE_HZ);
}

/* Get OS Tick count value */
static uint32_t OS_Tick_GetCount (void) {
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
  uint32_t load = SysTick->LOAD;
 800419e:	4b06      	ldr	r3, [pc, #24]	; (80041b8 <OS_Tick_GetCount+0x20>)
 80041a0:	685b      	ldr	r3, [r3, #4]
 80041a2:	607b      	str	r3, [r7, #4]
  return  (load - SysTick->VAL);
 80041a4:	4b04      	ldr	r3, [pc, #16]	; (80041b8 <OS_Tick_GetCount+0x20>)
 80041a6:	689b      	ldr	r3, [r3, #8]
 80041a8:	687a      	ldr	r2, [r7, #4]
 80041aa:	1ad3      	subs	r3, r2, r3
}
 80041ac:	4618      	mov	r0, r3
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr
 80041b8:	e000e010 	.word	0xe000e010

080041bc <OS_Tick_GetOverflow>:

/* Get OS Tick overflow status */
static uint32_t OS_Tick_GetOverflow (void) {
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
  return ((SysTick->CTRL >> 16) & 1U);
 80041c0:	4b04      	ldr	r3, [pc, #16]	; (80041d4 <OS_Tick_GetOverflow+0x18>)
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	0c1b      	lsrs	r3, r3, #16
 80041c6:	f003 0301 	and.w	r3, r3, #1
}
 80041ca:	4618      	mov	r0, r3
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr
 80041d4:	e000e010 	.word	0xe000e010

080041d8 <OS_Tick_GetInterval>:

/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void) {
 80041d8:	b480      	push	{r7}
 80041da:	af00      	add	r7, sp, #0
  return (SysTick->LOAD + 1U);
 80041dc:	4b03      	ldr	r3, [pc, #12]	; (80041ec <OS_Tick_GetInterval+0x14>)
 80041de:	685b      	ldr	r3, [r3, #4]
 80041e0:	3301      	adds	r3, #1
}
 80041e2:	4618      	mov	r0, r3
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr
 80041ec:	e000e010 	.word	0xe000e010

080041f0 <osKernelGetSysTimerCount>:

uint32_t osKernelGetSysTimerCount (void) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	b086      	sub	sp, #24
 80041f4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80041f6:	f3ef 8310 	mrs	r3, PRIMASK
 80041fa:	60bb      	str	r3, [r7, #8]
  return(result);
 80041fc:	68bb      	ldr	r3, [r7, #8]
  uint32_t irqmask = IS_IRQ_MASKED();
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d105      	bne.n	800420e <osKernelGetSysTimerCount+0x1e>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 8004202:	f3ef 8311 	mrs	r3, BASEPRI
 8004206:	607b      	str	r3, [r7, #4]
  return(result);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d001      	beq.n	8004212 <osKernelGetSysTimerCount+0x22>
 800420e:	2301      	movs	r3, #1
 8004210:	e000      	b.n	8004214 <osKernelGetSysTimerCount+0x24>
 8004212:	2300      	movs	r3, #0
 8004214:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 8004216:	b672      	cpsid	i
}
 8004218:	bf00      	nop
  TickType_t ticks;
  uint32_t val;

  __disable_irq();

  ticks = xTaskGetTickCount();
 800421a:	f002 f811 	bl	8006240 <xTaskGetTickCount>
 800421e:	6178      	str	r0, [r7, #20]
  val   = OS_Tick_GetCount();
 8004220:	f7ff ffba 	bl	8004198 <OS_Tick_GetCount>
 8004224:	6138      	str	r0, [r7, #16]

  if (OS_Tick_GetOverflow() != 0U) {
 8004226:	f7ff ffc9 	bl	80041bc <OS_Tick_GetOverflow>
 800422a:	4603      	mov	r3, r0
 800422c:	2b00      	cmp	r3, #0
 800422e:	d005      	beq.n	800423c <osKernelGetSysTimerCount+0x4c>
    val = OS_Tick_GetCount();
 8004230:	f7ff ffb2 	bl	8004198 <OS_Tick_GetCount>
 8004234:	6138      	str	r0, [r7, #16]
    ticks++;
 8004236:	697b      	ldr	r3, [r7, #20]
 8004238:	3301      	adds	r3, #1
 800423a:	617b      	str	r3, [r7, #20]
  }
  val += ticks * OS_Tick_GetInterval();
 800423c:	f7ff ffcc 	bl	80041d8 <OS_Tick_GetInterval>
 8004240:	4602      	mov	r2, r0
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	fb02 f303 	mul.w	r3, r2, r3
 8004248:	693a      	ldr	r2, [r7, #16]
 800424a:	4413      	add	r3, r2
 800424c:	613b      	str	r3, [r7, #16]

  if (irqmask == 0U) {
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2b00      	cmp	r3, #0
 8004252:	d101      	bne.n	8004258 <osKernelGetSysTimerCount+0x68>
  __ASM volatile ("cpsie i" : : : "memory");
 8004254:	b662      	cpsie	i
}
 8004256:	bf00      	nop
    __enable_irq();
  }

  return (val);
 8004258:	693b      	ldr	r3, [r7, #16]
}
 800425a:	4618      	mov	r0, r3
 800425c:	3718      	adds	r7, #24
 800425e:	46bd      	mov	sp, r7
 8004260:	bd80      	pop	{r7, pc}

08004262 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004262:	b580      	push	{r7, lr}
 8004264:	b08e      	sub	sp, #56	; 0x38
 8004266:	af04      	add	r7, sp, #16
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800426e:	2300      	movs	r3, #0
 8004270:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004272:	f3ef 8305 	mrs	r3, IPSR
 8004276:	617b      	str	r3, [r7, #20]
  return(result);
 8004278:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800427a:	2b00      	cmp	r3, #0
 800427c:	d17e      	bne.n	800437c <osThreadNew+0x11a>
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2b00      	cmp	r3, #0
 8004282:	d07b      	beq.n	800437c <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004284:	2340      	movs	r3, #64	; 0x40
 8004286:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004288:	2318      	movs	r3, #24
 800428a:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800428c:	2300      	movs	r3, #0
 800428e:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004290:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004294:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2b00      	cmp	r3, #0
 800429a:	d045      	beq.n	8004328 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d002      	beq.n	80042aa <osThreadNew+0x48>
        name = attr->name;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	699b      	ldr	r3, [r3, #24]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d002      	beq.n	80042b8 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	699b      	ldr	r3, [r3, #24]
 80042b6:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042b8:	69fb      	ldr	r3, [r7, #28]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d008      	beq.n	80042d0 <osThreadNew+0x6e>
 80042be:	69fb      	ldr	r3, [r7, #28]
 80042c0:	2b38      	cmp	r3, #56	; 0x38
 80042c2:	d805      	bhi.n	80042d0 <osThreadNew+0x6e>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	685b      	ldr	r3, [r3, #4]
 80042c8:	f003 0301 	and.w	r3, r3, #1
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d001      	beq.n	80042d4 <osThreadNew+0x72>
        return (NULL);
 80042d0:	2300      	movs	r3, #0
 80042d2:	e054      	b.n	800437e <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	695b      	ldr	r3, [r3, #20]
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d003      	beq.n	80042e4 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	695b      	ldr	r3, [r3, #20]
 80042e0:	089b      	lsrs	r3, r3, #2
 80042e2:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	689b      	ldr	r3, [r3, #8]
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d00e      	beq.n	800430a <osThreadNew+0xa8>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	68db      	ldr	r3, [r3, #12]
 80042f0:	2bbb      	cmp	r3, #187	; 0xbb
 80042f2:	d90a      	bls.n	800430a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d006      	beq.n	800430a <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	695b      	ldr	r3, [r3, #20]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d002      	beq.n	800430a <osThreadNew+0xa8>
        mem = 1;
 8004304:	2301      	movs	r3, #1
 8004306:	61bb      	str	r3, [r7, #24]
 8004308:	e010      	b.n	800432c <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	2b00      	cmp	r3, #0
 8004310:	d10c      	bne.n	800432c <osThreadNew+0xca>
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	68db      	ldr	r3, [r3, #12]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d108      	bne.n	800432c <osThreadNew+0xca>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	691b      	ldr	r3, [r3, #16]
 800431e:	2b00      	cmp	r3, #0
 8004320:	d104      	bne.n	800432c <osThreadNew+0xca>
          mem = 0;
 8004322:	2300      	movs	r3, #0
 8004324:	61bb      	str	r3, [r7, #24]
 8004326:	e001      	b.n	800432c <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004328:	2300      	movs	r3, #0
 800432a:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800432c:	69bb      	ldr	r3, [r7, #24]
 800432e:	2b01      	cmp	r3, #1
 8004330:	d110      	bne.n	8004354 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004336:	687a      	ldr	r2, [r7, #4]
 8004338:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800433a:	9202      	str	r2, [sp, #8]
 800433c:	9301      	str	r3, [sp, #4]
 800433e:	69fb      	ldr	r3, [r7, #28]
 8004340:	9300      	str	r3, [sp, #0]
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	6a3a      	ldr	r2, [r7, #32]
 8004346:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004348:	68f8      	ldr	r0, [r7, #12]
 800434a:	f001 fbff 	bl	8005b4c <xTaskCreateStatic>
 800434e:	4603      	mov	r3, r0
 8004350:	613b      	str	r3, [r7, #16]
 8004352:	e013      	b.n	800437c <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004354:	69bb      	ldr	r3, [r7, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d110      	bne.n	800437c <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800435a:	6a3b      	ldr	r3, [r7, #32]
 800435c:	b29a      	uxth	r2, r3
 800435e:	f107 0310 	add.w	r3, r7, #16
 8004362:	9301      	str	r3, [sp, #4]
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	9300      	str	r3, [sp, #0]
 8004368:	68bb      	ldr	r3, [r7, #8]
 800436a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800436c:	68f8      	ldr	r0, [r7, #12]
 800436e:	f001 fc4a 	bl	8005c06 <xTaskCreate>
 8004372:	4603      	mov	r3, r0
 8004374:	2b01      	cmp	r3, #1
 8004376:	d001      	beq.n	800437c <osThreadNew+0x11a>
            hTask = NULL;
 8004378:	2300      	movs	r3, #0
 800437a:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800437c:	693b      	ldr	r3, [r7, #16]
}
 800437e:	4618      	mov	r0, r3
 8004380:	3728      	adds	r7, #40	; 0x28
 8004382:	46bd      	mov	sp, r7
 8004384:	bd80      	pop	{r7, pc}

08004386 <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 8004386:	b580      	push	{r7, lr}
 8004388:	b086      	sub	sp, #24
 800438a:	af00      	add	r7, sp, #0
 800438c:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004392:	f3ef 8305 	mrs	r3, IPSR
 8004396:	60fb      	str	r3, [r7, #12]
  return(result);
 8004398:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 800439a:	2b00      	cmp	r3, #0
 800439c:	d102      	bne.n	80043a4 <osThreadGetName+0x1e>
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d102      	bne.n	80043aa <osThreadGetName+0x24>
    name = NULL;
 80043a4:	2300      	movs	r3, #0
 80043a6:	617b      	str	r3, [r7, #20]
 80043a8:	e003      	b.n	80043b2 <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 80043aa:	6938      	ldr	r0, [r7, #16]
 80043ac:	f001 ff58 	bl	8006260 <pcTaskGetName>
 80043b0:	6178      	str	r0, [r7, #20]
  }

  return (name);
 80043b2:	697b      	ldr	r3, [r7, #20]
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3718      	adds	r7, #24
 80043b8:	46bd      	mov	sp, r7
 80043ba:	bd80      	pop	{r7, pc}

080043bc <osThreadGetId>:

osThreadId_t osThreadGetId (void) {
 80043bc:	b580      	push	{r7, lr}
 80043be:	b082      	sub	sp, #8
 80043c0:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 80043c2:	f002 faa1 	bl	8006908 <xTaskGetCurrentTaskHandle>
 80043c6:	6078      	str	r0, [r7, #4]

  return (id);
 80043c8:	687b      	ldr	r3, [r7, #4]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3708      	adds	r7, #8
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 80043d2:	b580      	push	{r7, lr}
 80043d4:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 80043d6:	2000      	movs	r0, #0
 80043d8:	f001 fd70 	bl	8005ebc <vTaskDelete>
#endif
  for (;;);
 80043dc:	e7fe      	b.n	80043dc <osThreadExit+0xa>

080043de <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80043de:	b580      	push	{r7, lr}
 80043e0:	b084      	sub	sp, #16
 80043e2:	af00      	add	r7, sp, #0
 80043e4:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043e6:	f3ef 8305 	mrs	r3, IPSR
 80043ea:	60bb      	str	r3, [r7, #8]
  return(result);
 80043ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d003      	beq.n	80043fa <osDelay+0x1c>
    stat = osErrorISR;
 80043f2:	f06f 0305 	mvn.w	r3, #5
 80043f6:	60fb      	str	r3, [r7, #12]
 80043f8:	e007      	b.n	800440a <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80043fa:	2300      	movs	r3, #0
 80043fc:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d002      	beq.n	800440a <osDelay+0x2c>
      vTaskDelay(ticks);
 8004404:	6878      	ldr	r0, [r7, #4]
 8004406:	f001 fdcb 	bl	8005fa0 <vTaskDelay>
    }
  }

  return (stat);
 800440a:	68fb      	ldr	r3, [r7, #12]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8004414:	b580      	push	{r7, lr}
 8004416:	b08a      	sub	sp, #40	; 0x28
 8004418:	af02      	add	r7, sp, #8
 800441a:	60f8      	str	r0, [r7, #12]
 800441c:	60b9      	str	r1, [r7, #8]
 800441e:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8004420:	2300      	movs	r3, #0
 8004422:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004424:	f3ef 8305 	mrs	r3, IPSR
 8004428:	613b      	str	r3, [r7, #16]
  return(result);
 800442a:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800442c:	2b00      	cmp	r3, #0
 800442e:	d175      	bne.n	800451c <osSemaphoreNew+0x108>
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d072      	beq.n	800451c <osSemaphoreNew+0x108>
 8004436:	68ba      	ldr	r2, [r7, #8]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	429a      	cmp	r2, r3
 800443c:	d86e      	bhi.n	800451c <osSemaphoreNew+0x108>
    mem = -1;
 800443e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004442:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2b00      	cmp	r3, #0
 8004448:	d015      	beq.n	8004476 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	689b      	ldr	r3, [r3, #8]
 800444e:	2b00      	cmp	r3, #0
 8004450:	d006      	beq.n	8004460 <osSemaphoreNew+0x4c>
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	2b4f      	cmp	r3, #79	; 0x4f
 8004458:	d902      	bls.n	8004460 <osSemaphoreNew+0x4c>
        mem = 1;
 800445a:	2301      	movs	r3, #1
 800445c:	61bb      	str	r3, [r7, #24]
 800445e:	e00c      	b.n	800447a <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	689b      	ldr	r3, [r3, #8]
 8004464:	2b00      	cmp	r3, #0
 8004466:	d108      	bne.n	800447a <osSemaphoreNew+0x66>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	68db      	ldr	r3, [r3, #12]
 800446c:	2b00      	cmp	r3, #0
 800446e:	d104      	bne.n	800447a <osSemaphoreNew+0x66>
          mem = 0;
 8004470:	2300      	movs	r3, #0
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	e001      	b.n	800447a <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 800447a:	69bb      	ldr	r3, [r7, #24]
 800447c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004480:	d04c      	beq.n	800451c <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	2b01      	cmp	r3, #1
 8004486:	d128      	bne.n	80044da <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8004488:	69bb      	ldr	r3, [r7, #24]
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10a      	bne.n	80044a4 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	689b      	ldr	r3, [r3, #8]
 8004492:	2203      	movs	r2, #3
 8004494:	9200      	str	r2, [sp, #0]
 8004496:	2200      	movs	r2, #0
 8004498:	2100      	movs	r1, #0
 800449a:	2001      	movs	r0, #1
 800449c:	f000 fbb0 	bl	8004c00 <xQueueGenericCreateStatic>
 80044a0:	61f8      	str	r0, [r7, #28]
 80044a2:	e005      	b.n	80044b0 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 80044a4:	2203      	movs	r2, #3
 80044a6:	2100      	movs	r1, #0
 80044a8:	2001      	movs	r0, #1
 80044aa:	f000 fc21 	bl	8004cf0 <xQueueGenericCreate>
 80044ae:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 80044b0:	69fb      	ldr	r3, [r7, #28]
 80044b2:	2b00      	cmp	r3, #0
 80044b4:	d022      	beq.n	80044fc <osSemaphoreNew+0xe8>
 80044b6:	68bb      	ldr	r3, [r7, #8]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d01f      	beq.n	80044fc <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 80044bc:	2300      	movs	r3, #0
 80044be:	2200      	movs	r2, #0
 80044c0:	2100      	movs	r1, #0
 80044c2:	69f8      	ldr	r0, [r7, #28]
 80044c4:	f000 fcdc 	bl	8004e80 <xQueueGenericSend>
 80044c8:	4603      	mov	r3, r0
 80044ca:	2b01      	cmp	r3, #1
 80044cc:	d016      	beq.n	80044fc <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 80044ce:	69f8      	ldr	r0, [r7, #28]
 80044d0:	f001 f968 	bl	80057a4 <vQueueDelete>
            hSemaphore = NULL;
 80044d4:	2300      	movs	r3, #0
 80044d6:	61fb      	str	r3, [r7, #28]
 80044d8:	e010      	b.n	80044fc <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 80044da:	69bb      	ldr	r3, [r7, #24]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d108      	bne.n	80044f2 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	689b      	ldr	r3, [r3, #8]
 80044e4:	461a      	mov	r2, r3
 80044e6:	68b9      	ldr	r1, [r7, #8]
 80044e8:	68f8      	ldr	r0, [r7, #12]
 80044ea:	f000 fc5e 	bl	8004daa <xQueueCreateCountingSemaphoreStatic>
 80044ee:	61f8      	str	r0, [r7, #28]
 80044f0:	e004      	b.n	80044fc <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 80044f2:	68b9      	ldr	r1, [r7, #8]
 80044f4:	68f8      	ldr	r0, [r7, #12]
 80044f6:	f000 fc8f 	bl	8004e18 <xQueueCreateCountingSemaphore>
 80044fa:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 80044fc:	69fb      	ldr	r3, [r7, #28]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00c      	beq.n	800451c <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	2b00      	cmp	r3, #0
 8004506:	d003      	beq.n	8004510 <osSemaphoreNew+0xfc>
          name = attr->name;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	617b      	str	r3, [r7, #20]
 800450e:	e001      	b.n	8004514 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8004510:	2300      	movs	r3, #0
 8004512:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8004514:	6979      	ldr	r1, [r7, #20]
 8004516:	69f8      	ldr	r0, [r7, #28]
 8004518:	f001 fa90 	bl	8005a3c <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 800451c:	69fb      	ldr	r3, [r7, #28]
}
 800451e:	4618      	mov	r0, r3
 8004520:	3720      	adds	r7, #32
 8004522:	46bd      	mov	sp, r7
 8004524:	bd80      	pop	{r7, pc}
	...

08004528 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8004528:	b580      	push	{r7, lr}
 800452a:	b086      	sub	sp, #24
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
 8004530:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8004536:	2300      	movs	r3, #0
 8004538:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	2b00      	cmp	r3, #0
 800453e:	d103      	bne.n	8004548 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8004540:	f06f 0303 	mvn.w	r3, #3
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	e039      	b.n	80045bc <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004548:	f3ef 8305 	mrs	r3, IPSR
 800454c:	60fb      	str	r3, [r7, #12]
  return(result);
 800454e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004550:	2b00      	cmp	r3, #0
 8004552:	d022      	beq.n	800459a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d003      	beq.n	8004562 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 800455a:	f06f 0303 	mvn.w	r3, #3
 800455e:	617b      	str	r3, [r7, #20]
 8004560:	e02c      	b.n	80045bc <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8004562:	2300      	movs	r3, #0
 8004564:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8004566:	f107 0308 	add.w	r3, r7, #8
 800456a:	461a      	mov	r2, r3
 800456c:	2100      	movs	r1, #0
 800456e:	6938      	ldr	r0, [r7, #16]
 8004570:	f001 f898 	bl	80056a4 <xQueueReceiveFromISR>
 8004574:	4603      	mov	r3, r0
 8004576:	2b01      	cmp	r3, #1
 8004578:	d003      	beq.n	8004582 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 800457a:	f06f 0302 	mvn.w	r3, #2
 800457e:	617b      	str	r3, [r7, #20]
 8004580:	e01c      	b.n	80045bc <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	2b00      	cmp	r3, #0
 8004586:	d019      	beq.n	80045bc <osSemaphoreAcquire+0x94>
 8004588:	4b0f      	ldr	r3, [pc, #60]	; (80045c8 <osSemaphoreAcquire+0xa0>)
 800458a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800458e:	601a      	str	r2, [r3, #0]
 8004590:	f3bf 8f4f 	dsb	sy
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	e010      	b.n	80045bc <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800459a:	6839      	ldr	r1, [r7, #0]
 800459c:	6938      	ldr	r0, [r7, #16]
 800459e:	f000 ff75 	bl	800548c <xQueueSemaphoreTake>
 80045a2:	4603      	mov	r3, r0
 80045a4:	2b01      	cmp	r3, #1
 80045a6:	d009      	beq.n	80045bc <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d003      	beq.n	80045b6 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 80045ae:	f06f 0301 	mvn.w	r3, #1
 80045b2:	617b      	str	r3, [r7, #20]
 80045b4:	e002      	b.n	80045bc <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 80045b6:	f06f 0302 	mvn.w	r3, #2
 80045ba:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 80045bc:	697b      	ldr	r3, [r7, #20]
}
 80045be:	4618      	mov	r0, r3
 80045c0:	3718      	adds	r7, #24
 80045c2:	46bd      	mov	sp, r7
 80045c4:	bd80      	pop	{r7, pc}
 80045c6:	bf00      	nop
 80045c8:	e000ed04 	.word	0xe000ed04

080045cc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b086      	sub	sp, #24
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 80045d8:	2300      	movs	r3, #0
 80045da:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 80045dc:	693b      	ldr	r3, [r7, #16]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d103      	bne.n	80045ea <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 80045e2:	f06f 0303 	mvn.w	r3, #3
 80045e6:	617b      	str	r3, [r7, #20]
 80045e8:	e02c      	b.n	8004644 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045ea:	f3ef 8305 	mrs	r3, IPSR
 80045ee:	60fb      	str	r3, [r7, #12]
  return(result);
 80045f0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d01a      	beq.n	800462c <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 80045f6:	2300      	movs	r3, #0
 80045f8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 80045fa:	f107 0308 	add.w	r3, r7, #8
 80045fe:	4619      	mov	r1, r3
 8004600:	6938      	ldr	r0, [r7, #16]
 8004602:	f000 fdd6 	bl	80051b2 <xQueueGiveFromISR>
 8004606:	4603      	mov	r3, r0
 8004608:	2b01      	cmp	r3, #1
 800460a:	d003      	beq.n	8004614 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 800460c:	f06f 0302 	mvn.w	r3, #2
 8004610:	617b      	str	r3, [r7, #20]
 8004612:	e017      	b.n	8004644 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8004614:	68bb      	ldr	r3, [r7, #8]
 8004616:	2b00      	cmp	r3, #0
 8004618:	d014      	beq.n	8004644 <osSemaphoreRelease+0x78>
 800461a:	4b0d      	ldr	r3, [pc, #52]	; (8004650 <osSemaphoreRelease+0x84>)
 800461c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004620:	601a      	str	r2, [r3, #0]
 8004622:	f3bf 8f4f 	dsb	sy
 8004626:	f3bf 8f6f 	isb	sy
 800462a:	e00b      	b.n	8004644 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800462c:	2300      	movs	r3, #0
 800462e:	2200      	movs	r2, #0
 8004630:	2100      	movs	r1, #0
 8004632:	6938      	ldr	r0, [r7, #16]
 8004634:	f000 fc24 	bl	8004e80 <xQueueGenericSend>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d002      	beq.n	8004644 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 800463e:	f06f 0302 	mvn.w	r3, #2
 8004642:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004644:	697b      	ldr	r3, [r7, #20]
}
 8004646:	4618      	mov	r0, r3
 8004648:	3718      	adds	r7, #24
 800464a:	46bd      	mov	sp, r7
 800464c:	bd80      	pop	{r7, pc}
 800464e:	bf00      	nop
 8004650:	e000ed04 	.word	0xe000ed04

08004654 <osMemoryPoolNew>:
/* Static memory pool functions */
static void  FreeBlock   (MemPool_t *mp, void *block);
static void *AllocBlock  (MemPool_t *mp);
static void *CreateBlock (MemPool_t *mp);

osMemoryPoolId_t osMemoryPoolNew (uint32_t block_count, uint32_t block_size, const osMemoryPoolAttr_t *attr) {
 8004654:	b580      	push	{r7, lr}
 8004656:	b08a      	sub	sp, #40	; 0x28
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004660:	f3ef 8305 	mrs	r3, IPSR
 8004664:	613b      	str	r3, [r7, #16]
  return(result);
 8004666:	693b      	ldr	r3, [r7, #16]
  MemPool_t *mp;
  const char *name;
  int32_t mem_cb, mem_mp;
  uint32_t sz;

  if (IS_IRQ()) {
 8004668:	2b00      	cmp	r3, #0
 800466a:	d002      	beq.n	8004672 <osMemoryPoolNew+0x1e>
    mp = NULL;
 800466c:	2300      	movs	r3, #0
 800466e:	627b      	str	r3, [r7, #36]	; 0x24
 8004670:	e0be      	b.n	80047f0 <osMemoryPoolNew+0x19c>
  }
  else if ((block_count == 0U) || (block_size == 0U)) {
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	2b00      	cmp	r3, #0
 8004676:	d002      	beq.n	800467e <osMemoryPoolNew+0x2a>
 8004678:	68bb      	ldr	r3, [r7, #8]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d102      	bne.n	8004684 <osMemoryPoolNew+0x30>
    mp = NULL;
 800467e:	2300      	movs	r3, #0
 8004680:	627b      	str	r3, [r7, #36]	; 0x24
 8004682:	e0b5      	b.n	80047f0 <osMemoryPoolNew+0x19c>
  }
  else {
    mp = NULL;
 8004684:	2300      	movs	r3, #0
 8004686:	627b      	str	r3, [r7, #36]	; 0x24
    sz = MEMPOOL_ARR_SIZE (block_count, block_size);
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	3303      	adds	r3, #3
 800468c:	f023 0203 	bic.w	r2, r3, #3
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	fb02 f303 	mul.w	r3, r2, r3
 8004696:	617b      	str	r3, [r7, #20]

    name = NULL;
 8004698:	2300      	movs	r3, #0
 800469a:	623b      	str	r3, [r7, #32]
    mem_cb = -1;
 800469c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046a0:	61fb      	str	r3, [r7, #28]
    mem_mp = -1;
 80046a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046a6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d038      	beq.n	8004720 <osMemoryPoolNew+0xcc>
      if (attr->name != NULL) {
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d002      	beq.n	80046bc <osMemoryPoolNew+0x68>
        name = attr->name;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(MemPool_t))) {
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	689b      	ldr	r3, [r3, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d006      	beq.n	80046d2 <osMemoryPoolNew+0x7e>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	68db      	ldr	r3, [r3, #12]
 80046c8:	2b73      	cmp	r3, #115	; 0x73
 80046ca:	d902      	bls.n	80046d2 <osMemoryPoolNew+0x7e>
        /* Static control block is provided */
        mem_cb = 1;
 80046cc:	2301      	movs	r3, #1
 80046ce:	61fb      	str	r3, [r7, #28]
 80046d0:	e009      	b.n	80046e6 <osMemoryPoolNew+0x92>
      }
      else if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	689b      	ldr	r3, [r3, #8]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d105      	bne.n	80046e6 <osMemoryPoolNew+0x92>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d101      	bne.n	80046e6 <osMemoryPoolNew+0x92>
        /* Allocate control block memory on heap */
        mem_cb = 0;
 80046e2:	2300      	movs	r3, #0
 80046e4:	61fb      	str	r3, [r7, #28]
      }

      if ((attr->mp_mem == NULL) && (attr->mp_size == 0U)) {
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	691b      	ldr	r3, [r3, #16]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d106      	bne.n	80046fc <osMemoryPoolNew+0xa8>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	695b      	ldr	r3, [r3, #20]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d102      	bne.n	80046fc <osMemoryPoolNew+0xa8>
        /* Allocate memory array on heap */
          mem_mp = 0;
 80046f6:	2300      	movs	r3, #0
 80046f8:	61bb      	str	r3, [r7, #24]
 80046fa:	e015      	b.n	8004728 <osMemoryPoolNew+0xd4>
      }
      else {
        if (attr->mp_mem != NULL) {
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	691b      	ldr	r3, [r3, #16]
 8004700:	2b00      	cmp	r3, #0
 8004702:	d011      	beq.n	8004728 <osMemoryPoolNew+0xd4>
          /* Check if array is 4-byte aligned */
          if (((uint32_t)attr->mp_mem & 3U) == 0U) {
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	691b      	ldr	r3, [r3, #16]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10b      	bne.n	8004728 <osMemoryPoolNew+0xd4>
            /* Check if array big enough */
            if (attr->mp_size >= sz) {
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	695b      	ldr	r3, [r3, #20]
 8004714:	697a      	ldr	r2, [r7, #20]
 8004716:	429a      	cmp	r2, r3
 8004718:	d806      	bhi.n	8004728 <osMemoryPoolNew+0xd4>
              /* Static memory pool array is provided */
              mem_mp = 1;
 800471a:	2301      	movs	r3, #1
 800471c:	61bb      	str	r3, [r7, #24]
 800471e:	e003      	b.n	8004728 <osMemoryPoolNew+0xd4>
        }
      }
    }
    else {
      /* Attributes not provided, allocate memory on heap */
      mem_cb = 0;
 8004720:	2300      	movs	r3, #0
 8004722:	61fb      	str	r3, [r7, #28]
      mem_mp = 0;
 8004724:	2300      	movs	r3, #0
 8004726:	61bb      	str	r3, [r7, #24]
    }

    if (mem_cb == 0) {
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d104      	bne.n	8004738 <osMemoryPoolNew+0xe4>
      mp = pvPortMalloc (sizeof(MemPool_t));
 800472e:	2074      	movs	r0, #116	; 0x74
 8004730:	f003 f872 	bl	8007818 <pvPortMalloc>
 8004734:	6278      	str	r0, [r7, #36]	; 0x24
 8004736:	e002      	b.n	800473e <osMemoryPoolNew+0xea>
    } else {
      mp = attr->cb_mem;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (mp != NULL) {
 800473e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004740:	2b00      	cmp	r3, #0
 8004742:	d01b      	beq.n	800477c <osMemoryPoolNew+0x128>
      /* Create a semaphore (max count == initial count == block_count) */
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        mp->sem = xSemaphoreCreateCountingStatic (block_count, block_count, &mp->mem_sem);
 8004744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004746:	3324      	adds	r3, #36	; 0x24
 8004748:	461a      	mov	r2, r3
 800474a:	68f9      	ldr	r1, [r7, #12]
 800474c:	68f8      	ldr	r0, [r7, #12]
 800474e:	f000 fb2c 	bl	8004daa <xQueueCreateCountingSemaphoreStatic>
 8004752:	4602      	mov	r2, r0
 8004754:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004756:	605a      	str	r2, [r3, #4]
        mp->sem = xSemaphoreCreateCounting (block_count, block_count);
      #else
        mp->sem == NULL;
      #endif

      if (mp->sem != NULL) {
 8004758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475a:	685b      	ldr	r3, [r3, #4]
 800475c:	2b00      	cmp	r3, #0
 800475e:	d00d      	beq.n	800477c <osMemoryPoolNew+0x128>
        /* Setup memory array */
        if (mem_mp == 0) {
 8004760:	69bb      	ldr	r3, [r7, #24]
 8004762:	2b00      	cmp	r3, #0
 8004764:	d106      	bne.n	8004774 <osMemoryPoolNew+0x120>
          mp->mem_arr = pvPortMalloc (sz);
 8004766:	6978      	ldr	r0, [r7, #20]
 8004768:	f003 f856 	bl	8007818 <pvPortMalloc>
 800476c:	4602      	mov	r2, r0
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	609a      	str	r2, [r3, #8]
 8004772:	e003      	b.n	800477c <osMemoryPoolNew+0x128>
        } else {
          mp->mem_arr = attr->mp_mem;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	691a      	ldr	r2, [r3, #16]
 8004778:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477a:	609a      	str	r2, [r3, #8]
        }
      }
    }

    if ((mp != NULL) && (mp->mem_arr != NULL)) {
 800477c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800477e:	2b00      	cmp	r3, #0
 8004780:	d02b      	beq.n	80047da <osMemoryPoolNew+0x186>
 8004782:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004784:	689b      	ldr	r3, [r3, #8]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d027      	beq.n	80047da <osMemoryPoolNew+0x186>
      /* Memory pool can be created */
      mp->head    = NULL;
 800478a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
      mp->mem_sz  = sz;
 8004790:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004792:	697a      	ldr	r2, [r7, #20]
 8004794:	60da      	str	r2, [r3, #12]
      mp->name    = name;
 8004796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004798:	6a3a      	ldr	r2, [r7, #32]
 800479a:	611a      	str	r2, [r3, #16]
      mp->bl_sz   = block_size;
 800479c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	615a      	str	r2, [r3, #20]
      mp->bl_cnt  = block_count;
 80047a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	619a      	str	r2, [r3, #24]
      mp->n       = 0U;
 80047a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047aa:	2200      	movs	r2, #0
 80047ac:	61da      	str	r2, [r3, #28]

      /* Set heap allocated memory flags */
      mp->status = MPOOL_STATUS;
 80047ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047b0:	4a12      	ldr	r2, [pc, #72]	; (80047fc <osMemoryPoolNew+0x1a8>)
 80047b2:	621a      	str	r2, [r3, #32]

      if (mem_cb == 0) {
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d105      	bne.n	80047c6 <osMemoryPoolNew+0x172>
        /* Control block on heap */
        mp->status |= 1U;
 80047ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	f043 0201 	orr.w	r2, r3, #1
 80047c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047c4:	621a      	str	r2, [r3, #32]
      }
      if (mem_mp == 0) {
 80047c6:	69bb      	ldr	r3, [r7, #24]
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	d111      	bne.n	80047f0 <osMemoryPoolNew+0x19c>
        /* Memory array on heap */
        mp->status |= 2U;
 80047cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ce:	6a1b      	ldr	r3, [r3, #32]
 80047d0:	f043 0202 	orr.w	r2, r3, #2
 80047d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047d6:	621a      	str	r2, [r3, #32]
      if (mem_mp == 0) {
 80047d8:	e00a      	b.n	80047f0 <osMemoryPoolNew+0x19c>
      }
    }
    else {
      /* Memory pool cannot be created, release allocated resources */
      if ((mem_cb == 0) && (mp != NULL)) {
 80047da:	69fb      	ldr	r3, [r7, #28]
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d105      	bne.n	80047ec <osMemoryPoolNew+0x198>
 80047e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e2:	2b00      	cmp	r3, #0
 80047e4:	d002      	beq.n	80047ec <osMemoryPoolNew+0x198>
        /* Free control block memory */
        vPortFree (mp);
 80047e6:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80047e8:	f003 f8e2 	bl	80079b0 <vPortFree>
      }
      mp = NULL;
 80047ec:	2300      	movs	r3, #0
 80047ee:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }

  return (mp);
 80047f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3728      	adds	r7, #40	; 0x28
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	5eed0000 	.word	0x5eed0000

08004800 <osMemoryPoolAlloc>:
  }

  return (p);
}

void *osMemoryPoolAlloc (osMemoryPoolId_t mp_id, uint32_t timeout) {
 8004800:	b580      	push	{r7, lr}
 8004802:	b08a      	sub	sp, #40	; 0x28
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  MemPool_t *mp;
  void *block;
  uint32_t isrm;

  if (mp_id == NULL) {
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d102      	bne.n	8004816 <osMemoryPoolAlloc+0x16>
    /* Invalid input parameters */
    block = NULL;
 8004810:	2300      	movs	r3, #0
 8004812:	627b      	str	r3, [r7, #36]	; 0x24
 8004814:	e062      	b.n	80048dc <osMemoryPoolAlloc+0xdc>
  }
  else {
    block = NULL;
 8004816:	2300      	movs	r3, #0
 8004818:	627b      	str	r3, [r7, #36]	; 0x24

    mp = (MemPool_t *)mp_id;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	623b      	str	r3, [r7, #32]

    if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 800481e:	6a3b      	ldr	r3, [r7, #32]
 8004820:	6a1a      	ldr	r2, [r3, #32]
 8004822:	4b31      	ldr	r3, [pc, #196]	; (80048e8 <osMemoryPoolAlloc+0xe8>)
 8004824:	4013      	ands	r3, r2
 8004826:	4a30      	ldr	r2, [pc, #192]	; (80048e8 <osMemoryPoolAlloc+0xe8>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d157      	bne.n	80048dc <osMemoryPoolAlloc+0xdc>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800482c:	f3ef 8305 	mrs	r3, IPSR
 8004830:	61bb      	str	r3, [r7, #24]
  return(result);
 8004832:	69bb      	ldr	r3, [r7, #24]
      if (IS_IRQ()) {
 8004834:	2b00      	cmp	r3, #0
 8004836:	d032      	beq.n	800489e <osMemoryPoolAlloc+0x9e>
        if (timeout == 0U) {
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d14e      	bne.n	80048dc <osMemoryPoolAlloc+0xdc>
          if (xSemaphoreTakeFromISR (mp->sem, NULL) == pdTRUE) {
 800483e:	6a3b      	ldr	r3, [r7, #32]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	2200      	movs	r2, #0
 8004844:	2100      	movs	r1, #0
 8004846:	4618      	mov	r0, r3
 8004848:	f000 ff2c 	bl	80056a4 <xQueueReceiveFromISR>
 800484c:	4603      	mov	r3, r0
 800484e:	2b01      	cmp	r3, #1
 8004850:	d144      	bne.n	80048dc <osMemoryPoolAlloc+0xdc>
            if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 8004852:	6a3b      	ldr	r3, [r7, #32]
 8004854:	6a1a      	ldr	r2, [r3, #32]
 8004856:	4b24      	ldr	r3, [pc, #144]	; (80048e8 <osMemoryPoolAlloc+0xe8>)
 8004858:	4013      	ands	r3, r2
 800485a:	4a23      	ldr	r2, [pc, #140]	; (80048e8 <osMemoryPoolAlloc+0xe8>)
 800485c:	4293      	cmp	r3, r2
 800485e:	d13d      	bne.n	80048dc <osMemoryPoolAlloc+0xdc>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004860:	f3ef 8211 	mrs	r2, BASEPRI
 8004864:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004868:	f383 8811 	msr	BASEPRI, r3
 800486c:	f3bf 8f6f 	isb	sy
 8004870:	f3bf 8f4f 	dsb	sy
 8004874:	617a      	str	r2, [r7, #20]
 8004876:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004878:	697b      	ldr	r3, [r7, #20]
              isrm  = taskENTER_CRITICAL_FROM_ISR();
 800487a:	61fb      	str	r3, [r7, #28]

              /* Get a block from the free-list */
              block = AllocBlock(mp);
 800487c:	6a38      	ldr	r0, [r7, #32]
 800487e:	f000 f857 	bl	8004930 <AllocBlock>
 8004882:	6278      	str	r0, [r7, #36]	; 0x24

              if (block == NULL) {
 8004884:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004886:	2b00      	cmp	r3, #0
 8004888:	d103      	bne.n	8004892 <osMemoryPoolAlloc+0x92>
                /* List of free blocks is empty, 'create' new block */
                block = CreateBlock(mp);
 800488a:	6a38      	ldr	r0, [r7, #32]
 800488c:	f000 f82e 	bl	80048ec <CreateBlock>
 8004890:	6278      	str	r0, [r7, #36]	; 0x24
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800489c:	e01e      	b.n	80048dc <osMemoryPoolAlloc+0xdc>
            }
          }
        }
      }
      else {
        if (xSemaphoreTake (mp->sem, (TickType_t)timeout) == pdTRUE) {
 800489e:	6a3b      	ldr	r3, [r7, #32]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	6839      	ldr	r1, [r7, #0]
 80048a4:	4618      	mov	r0, r3
 80048a6:	f000 fdf1 	bl	800548c <xQueueSemaphoreTake>
 80048aa:	4603      	mov	r3, r0
 80048ac:	2b01      	cmp	r3, #1
 80048ae:	d115      	bne.n	80048dc <osMemoryPoolAlloc+0xdc>
          if ((mp->status & MPOOL_STATUS) == MPOOL_STATUS) {
 80048b0:	6a3b      	ldr	r3, [r7, #32]
 80048b2:	6a1a      	ldr	r2, [r3, #32]
 80048b4:	4b0c      	ldr	r3, [pc, #48]	; (80048e8 <osMemoryPoolAlloc+0xe8>)
 80048b6:	4013      	ands	r3, r2
 80048b8:	4a0b      	ldr	r2, [pc, #44]	; (80048e8 <osMemoryPoolAlloc+0xe8>)
 80048ba:	4293      	cmp	r3, r2
 80048bc:	d10e      	bne.n	80048dc <osMemoryPoolAlloc+0xdc>
            taskENTER_CRITICAL();
 80048be:	f002 fe89 	bl	80075d4 <vPortEnterCritical>

            /* Get a block from the free-list */
            block = AllocBlock(mp);
 80048c2:	6a38      	ldr	r0, [r7, #32]
 80048c4:	f000 f834 	bl	8004930 <AllocBlock>
 80048c8:	6278      	str	r0, [r7, #36]	; 0x24

            if (block == NULL) {
 80048ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <osMemoryPoolAlloc+0xd8>
              /* List of free blocks is empty, 'create' new block */
              block = CreateBlock(mp);
 80048d0:	6a38      	ldr	r0, [r7, #32]
 80048d2:	f000 f80b 	bl	80048ec <CreateBlock>
 80048d6:	6278      	str	r0, [r7, #36]	; 0x24
            }

            taskEXIT_CRITICAL();
 80048d8:	f002 feac 	bl	8007634 <vPortExitCritical>
        }
      }
    }
  }

  return (block);
 80048dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3728      	adds	r7, #40	; 0x28
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	5eed0000 	.word	0x5eed0000

080048ec <CreateBlock>:
}

/*
  Create new block given according to the current block index.
*/
static void *CreateBlock (MemPool_t *mp) {
 80048ec:	b480      	push	{r7}
 80048ee:	b085      	sub	sp, #20
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 80048f4:	2300      	movs	r3, #0
 80048f6:	60fb      	str	r3, [r7, #12]

  if (mp->n < mp->bl_cnt) {
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	69da      	ldr	r2, [r3, #28]
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	699b      	ldr	r3, [r3, #24]
 8004900:	429a      	cmp	r2, r3
 8004902:	d20e      	bcs.n	8004922 <CreateBlock+0x36>
    /* Unallocated blocks exist, set pointer to new block */
    p = (void *)(mp->mem_arr + (mp->bl_sz * mp->n));
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689a      	ldr	r2, [r3, #8]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	695b      	ldr	r3, [r3, #20]
 800490c:	6879      	ldr	r1, [r7, #4]
 800490e:	69c9      	ldr	r1, [r1, #28]
 8004910:	fb01 f303 	mul.w	r3, r1, r3
 8004914:	4413      	add	r3, r2
 8004916:	60fb      	str	r3, [r7, #12]

    /* Increment block index */
    mp->n += 1U;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	69db      	ldr	r3, [r3, #28]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	61da      	str	r2, [r3, #28]
  }

  return (p);
 8004922:	68fb      	ldr	r3, [r7, #12]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <AllocBlock>:

/*
  Allocate a block by reading the list of free blocks.
*/
static void *AllocBlock (MemPool_t *mp) {
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
  MemPoolBlock_t *p = NULL;
 8004938:	2300      	movs	r3, #0
 800493a:	60fb      	str	r3, [r7, #12]

  if (mp->head != NULL) {
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d006      	beq.n	8004952 <AllocBlock+0x22>
    /* List of free block exists, get head block */
    p = mp->head;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	60fb      	str	r3, [r7, #12]

    /* Head block is now next on the list */
    mp->head = p->next;
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681a      	ldr	r2, [r3, #0]
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	601a      	str	r2, [r3, #0]
  }

  return (p);
 8004952:	68fb      	ldr	r3, [r7, #12]
}
 8004954:	4618      	mov	r0, r3
 8004956:	3714      	adds	r7, #20
 8004958:	46bd      	mov	sp, r7
 800495a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495e:	4770      	bx	lr

08004960 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004960:	b480      	push	{r7}
 8004962:	b085      	sub	sp, #20
 8004964:	af00      	add	r7, sp, #0
 8004966:	60f8      	str	r0, [r7, #12]
 8004968:	60b9      	str	r1, [r7, #8]
 800496a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	4a07      	ldr	r2, [pc, #28]	; (800498c <vApplicationGetIdleTaskMemory+0x2c>)
 8004970:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004972:	68bb      	ldr	r3, [r7, #8]
 8004974:	4a06      	ldr	r2, [pc, #24]	; (8004990 <vApplicationGetIdleTaskMemory+0x30>)
 8004976:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2240      	movs	r2, #64	; 0x40
 800497c:	601a      	str	r2, [r3, #0]
}
 800497e:	bf00      	nop
 8004980:	3714      	adds	r7, #20
 8004982:	46bd      	mov	sp, r7
 8004984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004988:	4770      	bx	lr
 800498a:	bf00      	nop
 800498c:	200001a8 	.word	0x200001a8
 8004990:	20000264 	.word	0x20000264

08004994 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004994:	b480      	push	{r7}
 8004996:	b085      	sub	sp, #20
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4a07      	ldr	r2, [pc, #28]	; (80049c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80049a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80049a6:	68bb      	ldr	r3, [r7, #8]
 80049a8:	4a06      	ldr	r2, [pc, #24]	; (80049c4 <vApplicationGetTimerTaskMemory+0x30>)
 80049aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2280      	movs	r2, #128	; 0x80
 80049b0:	601a      	str	r2, [r3, #0]
}
 80049b2:	bf00      	nop
 80049b4:	3714      	adds	r7, #20
 80049b6:	46bd      	mov	sp, r7
 80049b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049bc:	4770      	bx	lr
 80049be:	bf00      	nop
 80049c0:	20000364 	.word	0x20000364
 80049c4:	20000420 	.word	0x20000420

080049c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80049c8:	b480      	push	{r7}
 80049ca:	b083      	sub	sp, #12
 80049cc:	af00      	add	r7, sp, #0
 80049ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	f103 0208 	add.w	r2, r3, #8
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f103 0208 	add.w	r2, r3, #8
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	f103 0208 	add.w	r2, r3, #8
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	2200      	movs	r2, #0
 80049fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80049fc:	bf00      	nop
 80049fe:	370c      	adds	r7, #12
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b083      	sub	sp, #12
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2200      	movs	r2, #0
 8004a14:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004a16:	bf00      	nop
 8004a18:	370c      	adds	r7, #12
 8004a1a:	46bd      	mov	sp, r7
 8004a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a20:	4770      	bx	lr

08004a22 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a22:	b480      	push	{r7}
 8004a24:	b085      	sub	sp, #20
 8004a26:	af00      	add	r7, sp, #0
 8004a28:	6078      	str	r0, [r7, #4]
 8004a2a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	685b      	ldr	r3, [r3, #4]
 8004a30:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004a32:	683b      	ldr	r3, [r7, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004a38:	68fb      	ldr	r3, [r7, #12]
 8004a3a:	689a      	ldr	r2, [r3, #8]
 8004a3c:	683b      	ldr	r3, [r7, #0]
 8004a3e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	689b      	ldr	r3, [r3, #8]
 8004a44:	683a      	ldr	r2, [r7, #0]
 8004a46:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004a48:	68fb      	ldr	r3, [r7, #12]
 8004a4a:	683a      	ldr	r2, [r7, #0]
 8004a4c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	687a      	ldr	r2, [r7, #4]
 8004a52:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	1c5a      	adds	r2, r3, #1
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	601a      	str	r2, [r3, #0]
}
 8004a5e:	bf00      	nop
 8004a60:	3714      	adds	r7, #20
 8004a62:	46bd      	mov	sp, r7
 8004a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a68:	4770      	bx	lr

08004a6a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004a6a:	b480      	push	{r7}
 8004a6c:	b085      	sub	sp, #20
 8004a6e:	af00      	add	r7, sp, #0
 8004a70:	6078      	str	r0, [r7, #4]
 8004a72:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004a80:	d103      	bne.n	8004a8a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	691b      	ldr	r3, [r3, #16]
 8004a86:	60fb      	str	r3, [r7, #12]
 8004a88:	e00c      	b.n	8004aa4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004a8a:	687b      	ldr	r3, [r7, #4]
 8004a8c:	3308      	adds	r3, #8
 8004a8e:	60fb      	str	r3, [r7, #12]
 8004a90:	e002      	b.n	8004a98 <vListInsert+0x2e>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	60fb      	str	r3, [r7, #12]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	685b      	ldr	r3, [r3, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d2f6      	bcs.n	8004a92 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	685a      	ldr	r2, [r3, #4]
 8004aa8:	683b      	ldr	r3, [r7, #0]
 8004aaa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004aac:	683b      	ldr	r3, [r7, #0]
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	683a      	ldr	r2, [r7, #0]
 8004ab2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	68fa      	ldr	r2, [r7, #12]
 8004ab8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	683a      	ldr	r2, [r7, #0]
 8004abe:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004ac0:	683b      	ldr	r3, [r7, #0]
 8004ac2:	687a      	ldr	r2, [r7, #4]
 8004ac4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	1c5a      	adds	r2, r3, #1
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	601a      	str	r2, [r3, #0]
}
 8004ad0:	bf00      	nop
 8004ad2:	3714      	adds	r7, #20
 8004ad4:	46bd      	mov	sp, r7
 8004ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ada:	4770      	bx	lr

08004adc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004adc:	b480      	push	{r7}
 8004ade:	b085      	sub	sp, #20
 8004ae0:	af00      	add	r7, sp, #0
 8004ae2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	691b      	ldr	r3, [r3, #16]
 8004ae8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	685b      	ldr	r3, [r3, #4]
 8004aee:	687a      	ldr	r2, [r7, #4]
 8004af0:	6892      	ldr	r2, [r2, #8]
 8004af2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	687a      	ldr	r2, [r7, #4]
 8004afa:	6852      	ldr	r2, [r2, #4]
 8004afc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	685b      	ldr	r3, [r3, #4]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	429a      	cmp	r2, r3
 8004b06:	d103      	bne.n	8004b10 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	689a      	ldr	r2, [r3, #8]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2200      	movs	r2, #0
 8004b14:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	1e5a      	subs	r2, r3, #1
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	681b      	ldr	r3, [r3, #0]
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3714      	adds	r7, #20
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2e:	4770      	bx	lr

08004b30 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004b30:	b580      	push	{r7, lr}
 8004b32:	b084      	sub	sp, #16
 8004b34:	af00      	add	r7, sp, #0
 8004b36:	6078      	str	r0, [r7, #4]
 8004b38:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <xQueueGenericReset+0x2a>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	60bb      	str	r3, [r7, #8]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004b5a:	f002 fd3b 	bl	80075d4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	681a      	ldr	r2, [r3, #0]
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b66:	68f9      	ldr	r1, [r7, #12]
 8004b68:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b6a:	fb01 f303 	mul.w	r3, r1, r3
 8004b6e:	441a      	add	r2, r3
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2200      	movs	r2, #0
 8004b78:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681a      	ldr	r2, [r3, #0]
 8004b7e:	68fb      	ldr	r3, [r7, #12]
 8004b80:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681a      	ldr	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b8a:	3b01      	subs	r3, #1
 8004b8c:	68f9      	ldr	r1, [r7, #12]
 8004b8e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004b90:	fb01 f303 	mul.w	r3, r1, r3
 8004b94:	441a      	add	r2, r3
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	22ff      	movs	r2, #255	; 0xff
 8004b9e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	22ff      	movs	r2, #255	; 0xff
 8004ba6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d114      	bne.n	8004bda <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	691b      	ldr	r3, [r3, #16]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d01a      	beq.n	8004bee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	3310      	adds	r3, #16
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f001 fce1 	bl	8006584 <xTaskRemoveFromEventList>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d012      	beq.n	8004bee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004bc8:	4b0c      	ldr	r3, [pc, #48]	; (8004bfc <xQueueGenericReset+0xcc>)
 8004bca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004bce:	601a      	str	r2, [r3, #0]
 8004bd0:	f3bf 8f4f 	dsb	sy
 8004bd4:	f3bf 8f6f 	isb	sy
 8004bd8:	e009      	b.n	8004bee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	3310      	adds	r3, #16
 8004bde:	4618      	mov	r0, r3
 8004be0:	f7ff fef2 	bl	80049c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	3324      	adds	r3, #36	; 0x24
 8004be8:	4618      	mov	r0, r3
 8004bea:	f7ff feed 	bl	80049c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004bee:	f002 fd21 	bl	8007634 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004bf2:	2301      	movs	r3, #1
}
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	e000ed04 	.word	0xe000ed04

08004c00 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b08e      	sub	sp, #56	; 0x38
 8004c04:	af02      	add	r7, sp, #8
 8004c06:	60f8      	str	r0, [r7, #12]
 8004c08:	60b9      	str	r1, [r7, #8]
 8004c0a:	607a      	str	r2, [r7, #4]
 8004c0c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d10a      	bne.n	8004c2a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004c14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c18:	f383 8811 	msr	BASEPRI, r3
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	f3bf 8f4f 	dsb	sy
 8004c24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004c26:	bf00      	nop
 8004c28:	e7fe      	b.n	8004c28 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004c2a:	683b      	ldr	r3, [r7, #0]
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10a      	bne.n	8004c46 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004c30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c34:	f383 8811 	msr	BASEPRI, r3
 8004c38:	f3bf 8f6f 	isb	sy
 8004c3c:	f3bf 8f4f 	dsb	sy
 8004c40:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004c42:	bf00      	nop
 8004c44:	e7fe      	b.n	8004c44 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d002      	beq.n	8004c52 <xQueueGenericCreateStatic+0x52>
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d001      	beq.n	8004c56 <xQueueGenericCreateStatic+0x56>
 8004c52:	2301      	movs	r3, #1
 8004c54:	e000      	b.n	8004c58 <xQueueGenericCreateStatic+0x58>
 8004c56:	2300      	movs	r3, #0
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d10a      	bne.n	8004c72 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004c5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c60:	f383 8811 	msr	BASEPRI, r3
 8004c64:	f3bf 8f6f 	isb	sy
 8004c68:	f3bf 8f4f 	dsb	sy
 8004c6c:	623b      	str	r3, [r7, #32]
}
 8004c6e:	bf00      	nop
 8004c70:	e7fe      	b.n	8004c70 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d102      	bne.n	8004c7e <xQueueGenericCreateStatic+0x7e>
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d101      	bne.n	8004c82 <xQueueGenericCreateStatic+0x82>
 8004c7e:	2301      	movs	r3, #1
 8004c80:	e000      	b.n	8004c84 <xQueueGenericCreateStatic+0x84>
 8004c82:	2300      	movs	r3, #0
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d10a      	bne.n	8004c9e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004c8c:	f383 8811 	msr	BASEPRI, r3
 8004c90:	f3bf 8f6f 	isb	sy
 8004c94:	f3bf 8f4f 	dsb	sy
 8004c98:	61fb      	str	r3, [r7, #28]
}
 8004c9a:	bf00      	nop
 8004c9c:	e7fe      	b.n	8004c9c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004c9e:	2350      	movs	r3, #80	; 0x50
 8004ca0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	2b50      	cmp	r3, #80	; 0x50
 8004ca6:	d00a      	beq.n	8004cbe <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cac:	f383 8811 	msr	BASEPRI, r3
 8004cb0:	f3bf 8f6f 	isb	sy
 8004cb4:	f3bf 8f4f 	dsb	sy
 8004cb8:	61bb      	str	r3, [r7, #24]
}
 8004cba:	bf00      	nop
 8004cbc:	e7fe      	b.n	8004cbc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004cbe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004cc0:	683b      	ldr	r3, [r7, #0]
 8004cc2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d00d      	beq.n	8004ce6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004cca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ccc:	2201      	movs	r2, #1
 8004cce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004cd2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cd8:	9300      	str	r3, [sp, #0]
 8004cda:	4613      	mov	r3, r2
 8004cdc:	687a      	ldr	r2, [r7, #4]
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	68f8      	ldr	r0, [r7, #12]
 8004ce2:	f000 f83f 	bl	8004d64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004ce6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3730      	adds	r7, #48	; 0x30
 8004cec:	46bd      	mov	sp, r7
 8004cee:	bd80      	pop	{r7, pc}

08004cf0 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b08a      	sub	sp, #40	; 0x28
 8004cf4:	af02      	add	r7, sp, #8
 8004cf6:	60f8      	str	r0, [r7, #12]
 8004cf8:	60b9      	str	r1, [r7, #8]
 8004cfa:	4613      	mov	r3, r2
 8004cfc:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10a      	bne.n	8004d1a <xQueueGenericCreate+0x2a>
	__asm volatile
 8004d04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d08:	f383 8811 	msr	BASEPRI, r3
 8004d0c:	f3bf 8f6f 	isb	sy
 8004d10:	f3bf 8f4f 	dsb	sy
 8004d14:	613b      	str	r3, [r7, #16]
}
 8004d16:	bf00      	nop
 8004d18:	e7fe      	b.n	8004d18 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	68ba      	ldr	r2, [r7, #8]
 8004d1e:	fb02 f303 	mul.w	r3, r2, r3
 8004d22:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004d24:	69fb      	ldr	r3, [r7, #28]
 8004d26:	3350      	adds	r3, #80	; 0x50
 8004d28:	4618      	mov	r0, r3
 8004d2a:	f002 fd75 	bl	8007818 <pvPortMalloc>
 8004d2e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004d30:	69bb      	ldr	r3, [r7, #24]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d011      	beq.n	8004d5a <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004d36:	69bb      	ldr	r3, [r7, #24]
 8004d38:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	3350      	adds	r3, #80	; 0x50
 8004d3e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004d40:	69bb      	ldr	r3, [r7, #24]
 8004d42:	2200      	movs	r2, #0
 8004d44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004d48:	79fa      	ldrb	r2, [r7, #7]
 8004d4a:	69bb      	ldr	r3, [r7, #24]
 8004d4c:	9300      	str	r3, [sp, #0]
 8004d4e:	4613      	mov	r3, r2
 8004d50:	697a      	ldr	r2, [r7, #20]
 8004d52:	68b9      	ldr	r1, [r7, #8]
 8004d54:	68f8      	ldr	r0, [r7, #12]
 8004d56:	f000 f805 	bl	8004d64 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004d5a:	69bb      	ldr	r3, [r7, #24]
	}
 8004d5c:	4618      	mov	r0, r3
 8004d5e:	3720      	adds	r7, #32
 8004d60:	46bd      	mov	sp, r7
 8004d62:	bd80      	pop	{r7, pc}

08004d64 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004d64:	b580      	push	{r7, lr}
 8004d66:	b084      	sub	sp, #16
 8004d68:	af00      	add	r7, sp, #0
 8004d6a:	60f8      	str	r0, [r7, #12]
 8004d6c:	60b9      	str	r1, [r7, #8]
 8004d6e:	607a      	str	r2, [r7, #4]
 8004d70:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004d72:	68bb      	ldr	r3, [r7, #8]
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d103      	bne.n	8004d80 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004d78:	69bb      	ldr	r3, [r7, #24]
 8004d7a:	69ba      	ldr	r2, [r7, #24]
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	e002      	b.n	8004d86 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	687a      	ldr	r2, [r7, #4]
 8004d84:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004d86:	69bb      	ldr	r3, [r7, #24]
 8004d88:	68fa      	ldr	r2, [r7, #12]
 8004d8a:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004d8c:	69bb      	ldr	r3, [r7, #24]
 8004d8e:	68ba      	ldr	r2, [r7, #8]
 8004d90:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004d92:	2101      	movs	r1, #1
 8004d94:	69b8      	ldr	r0, [r7, #24]
 8004d96:	f7ff fecb 	bl	8004b30 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004d9a:	69bb      	ldr	r3, [r7, #24]
 8004d9c:	78fa      	ldrb	r2, [r7, #3]
 8004d9e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004da2:	bf00      	nop
 8004da4:	3710      	adds	r7, #16
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}

08004daa <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004daa:	b580      	push	{r7, lr}
 8004dac:	b08a      	sub	sp, #40	; 0x28
 8004dae:	af02      	add	r7, sp, #8
 8004db0:	60f8      	str	r0, [r7, #12]
 8004db2:	60b9      	str	r1, [r7, #8]
 8004db4:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d10a      	bne.n	8004dd2 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dc0:	f383 8811 	msr	BASEPRI, r3
 8004dc4:	f3bf 8f6f 	isb	sy
 8004dc8:	f3bf 8f4f 	dsb	sy
 8004dcc:	61bb      	str	r3, [r7, #24]
}
 8004dce:	bf00      	nop
 8004dd0:	e7fe      	b.n	8004dd0 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004dd2:	68ba      	ldr	r2, [r7, #8]
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	429a      	cmp	r2, r3
 8004dd8:	d90a      	bls.n	8004df0 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004dda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dde:	f383 8811 	msr	BASEPRI, r3
 8004de2:	f3bf 8f6f 	isb	sy
 8004de6:	f3bf 8f4f 	dsb	sy
 8004dea:	617b      	str	r3, [r7, #20]
}
 8004dec:	bf00      	nop
 8004dee:	e7fe      	b.n	8004dee <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004df0:	2302      	movs	r3, #2
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2200      	movs	r2, #0
 8004df8:	2100      	movs	r1, #0
 8004dfa:	68f8      	ldr	r0, [r7, #12]
 8004dfc:	f7ff ff00 	bl	8004c00 <xQueueGenericCreateStatic>
 8004e00:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d002      	beq.n	8004e0e <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	68ba      	ldr	r2, [r7, #8]
 8004e0c:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004e0e:	69fb      	ldr	r3, [r7, #28]
	}
 8004e10:	4618      	mov	r0, r3
 8004e12:	3720      	adds	r7, #32
 8004e14:	46bd      	mov	sp, r7
 8004e16:	bd80      	pop	{r7, pc}

08004e18 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004e18:	b580      	push	{r7, lr}
 8004e1a:	b086      	sub	sp, #24
 8004e1c:	af00      	add	r7, sp, #0
 8004e1e:	6078      	str	r0, [r7, #4]
 8004e20:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10a      	bne.n	8004e3e <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004e28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e2c:	f383 8811 	msr	BASEPRI, r3
 8004e30:	f3bf 8f6f 	isb	sy
 8004e34:	f3bf 8f4f 	dsb	sy
 8004e38:	613b      	str	r3, [r7, #16]
}
 8004e3a:	bf00      	nop
 8004e3c:	e7fe      	b.n	8004e3c <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 8004e3e:	683a      	ldr	r2, [r7, #0]
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	d90a      	bls.n	8004e5c <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e4a:	f383 8811 	msr	BASEPRI, r3
 8004e4e:	f3bf 8f6f 	isb	sy
 8004e52:	f3bf 8f4f 	dsb	sy
 8004e56:	60fb      	str	r3, [r7, #12]
}
 8004e58:	bf00      	nop
 8004e5a:	e7fe      	b.n	8004e5a <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004e5c:	2202      	movs	r2, #2
 8004e5e:	2100      	movs	r1, #0
 8004e60:	6878      	ldr	r0, [r7, #4]
 8004e62:	f7ff ff45 	bl	8004cf0 <xQueueGenericCreate>
 8004e66:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004e68:	697b      	ldr	r3, [r7, #20]
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d002      	beq.n	8004e74 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004e6e:	697b      	ldr	r3, [r7, #20]
 8004e70:	683a      	ldr	r2, [r7, #0]
 8004e72:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004e74:	697b      	ldr	r3, [r7, #20]
	}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}
	...

08004e80 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b08e      	sub	sp, #56	; 0x38
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	60f8      	str	r0, [r7, #12]
 8004e88:	60b9      	str	r1, [r7, #8]
 8004e8a:	607a      	str	r2, [r7, #4]
 8004e8c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004e8e:	2300      	movs	r3, #0
 8004e90:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004e96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d10a      	bne.n	8004eb2 <xQueueGenericSend+0x32>
	__asm volatile
 8004e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea0:	f383 8811 	msr	BASEPRI, r3
 8004ea4:	f3bf 8f6f 	isb	sy
 8004ea8:	f3bf 8f4f 	dsb	sy
 8004eac:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004eae:	bf00      	nop
 8004eb0:	e7fe      	b.n	8004eb0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	d103      	bne.n	8004ec0 <xQueueGenericSend+0x40>
 8004eb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004eba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d101      	bne.n	8004ec4 <xQueueGenericSend+0x44>
 8004ec0:	2301      	movs	r3, #1
 8004ec2:	e000      	b.n	8004ec6 <xQueueGenericSend+0x46>
 8004ec4:	2300      	movs	r3, #0
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d10a      	bne.n	8004ee0 <xQueueGenericSend+0x60>
	__asm volatile
 8004eca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ece:	f383 8811 	msr	BASEPRI, r3
 8004ed2:	f3bf 8f6f 	isb	sy
 8004ed6:	f3bf 8f4f 	dsb	sy
 8004eda:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004edc:	bf00      	nop
 8004ede:	e7fe      	b.n	8004ede <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	2b02      	cmp	r3, #2
 8004ee4:	d103      	bne.n	8004eee <xQueueGenericSend+0x6e>
 8004ee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ee8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	d101      	bne.n	8004ef2 <xQueueGenericSend+0x72>
 8004eee:	2301      	movs	r3, #1
 8004ef0:	e000      	b.n	8004ef4 <xQueueGenericSend+0x74>
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d10a      	bne.n	8004f0e <xQueueGenericSend+0x8e>
	__asm volatile
 8004ef8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004efc:	f383 8811 	msr	BASEPRI, r3
 8004f00:	f3bf 8f6f 	isb	sy
 8004f04:	f3bf 8f4f 	dsb	sy
 8004f08:	623b      	str	r3, [r7, #32]
}
 8004f0a:	bf00      	nop
 8004f0c:	e7fe      	b.n	8004f0c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f0e:	f001 fd0b 	bl	8006928 <xTaskGetSchedulerState>
 8004f12:	4603      	mov	r3, r0
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d102      	bne.n	8004f1e <xQueueGenericSend+0x9e>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d101      	bne.n	8004f22 <xQueueGenericSend+0xa2>
 8004f1e:	2301      	movs	r3, #1
 8004f20:	e000      	b.n	8004f24 <xQueueGenericSend+0xa4>
 8004f22:	2300      	movs	r3, #0
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d10a      	bne.n	8004f3e <xQueueGenericSend+0xbe>
	__asm volatile
 8004f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f2c:	f383 8811 	msr	BASEPRI, r3
 8004f30:	f3bf 8f6f 	isb	sy
 8004f34:	f3bf 8f4f 	dsb	sy
 8004f38:	61fb      	str	r3, [r7, #28]
}
 8004f3a:	bf00      	nop
 8004f3c:	e7fe      	b.n	8004f3c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f3e:	f002 fb49 	bl	80075d4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004f42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f44:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f48:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f4a:	429a      	cmp	r2, r3
 8004f4c:	d302      	bcc.n	8004f54 <xQueueGenericSend+0xd4>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d129      	bne.n	8004fa8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004f54:	683a      	ldr	r2, [r7, #0]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004f5a:	f000 fc5e 	bl	800581a <prvCopyDataToQueue>
 8004f5e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004f60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d010      	beq.n	8004f8a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004f68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f6a:	3324      	adds	r3, #36	; 0x24
 8004f6c:	4618      	mov	r0, r3
 8004f6e:	f001 fb09 	bl	8006584 <xTaskRemoveFromEventList>
 8004f72:	4603      	mov	r3, r0
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d013      	beq.n	8004fa0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004f78:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <xQueueGenericSend+0x1f8>)
 8004f7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f7e:	601a      	str	r2, [r3, #0]
 8004f80:	f3bf 8f4f 	dsb	sy
 8004f84:	f3bf 8f6f 	isb	sy
 8004f88:	e00a      	b.n	8004fa0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d007      	beq.n	8004fa0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004f90:	4b39      	ldr	r3, [pc, #228]	; (8005078 <xQueueGenericSend+0x1f8>)
 8004f92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004f96:	601a      	str	r2, [r3, #0]
 8004f98:	f3bf 8f4f 	dsb	sy
 8004f9c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004fa0:	f002 fb48 	bl	8007634 <vPortExitCritical>
				return pdPASS;
 8004fa4:	2301      	movs	r3, #1
 8004fa6:	e063      	b.n	8005070 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d103      	bne.n	8004fb6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004fae:	f002 fb41 	bl	8007634 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	e05c      	b.n	8005070 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004fb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d106      	bne.n	8004fca <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004fbc:	f107 0314 	add.w	r3, r7, #20
 8004fc0:	4618      	mov	r0, r3
 8004fc2:	f001 fb43 	bl	800664c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004fca:	f002 fb33 	bl	8007634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004fce:	f001 f88b 	bl	80060e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004fd2:	f002 faff 	bl	80075d4 <vPortEnterCritical>
 8004fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004fdc:	b25b      	sxtb	r3, r3
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fe2:	d103      	bne.n	8004fec <xQueueGenericSend+0x16c>
 8004fe4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe6:	2200      	movs	r2, #0
 8004fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ff2:	b25b      	sxtb	r3, r3
 8004ff4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ff8:	d103      	bne.n	8005002 <xQueueGenericSend+0x182>
 8004ffa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005002:	f002 fb17 	bl	8007634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005006:	1d3a      	adds	r2, r7, #4
 8005008:	f107 0314 	add.w	r3, r7, #20
 800500c:	4611      	mov	r1, r2
 800500e:	4618      	mov	r0, r3
 8005010:	f001 fb32 	bl	8006678 <xTaskCheckForTimeOut>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d124      	bne.n	8005064 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800501a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800501c:	f000 fcf5 	bl	8005a0a <prvIsQueueFull>
 8005020:	4603      	mov	r3, r0
 8005022:	2b00      	cmp	r3, #0
 8005024:	d018      	beq.n	8005058 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005026:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005028:	3310      	adds	r3, #16
 800502a:	687a      	ldr	r2, [r7, #4]
 800502c:	4611      	mov	r1, r2
 800502e:	4618      	mov	r0, r3
 8005030:	f001 fa58 	bl	80064e4 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005034:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005036:	f000 fc80 	bl	800593a <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800503a:	f001 f863 	bl	8006104 <xTaskResumeAll>
 800503e:	4603      	mov	r3, r0
 8005040:	2b00      	cmp	r3, #0
 8005042:	f47f af7c 	bne.w	8004f3e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005046:	4b0c      	ldr	r3, [pc, #48]	; (8005078 <xQueueGenericSend+0x1f8>)
 8005048:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800504c:	601a      	str	r2, [r3, #0]
 800504e:	f3bf 8f4f 	dsb	sy
 8005052:	f3bf 8f6f 	isb	sy
 8005056:	e772      	b.n	8004f3e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005058:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800505a:	f000 fc6e 	bl	800593a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800505e:	f001 f851 	bl	8006104 <xTaskResumeAll>
 8005062:	e76c      	b.n	8004f3e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005064:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005066:	f000 fc68 	bl	800593a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800506a:	f001 f84b 	bl	8006104 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800506e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005070:	4618      	mov	r0, r3
 8005072:	3738      	adds	r7, #56	; 0x38
 8005074:	46bd      	mov	sp, r7
 8005076:	bd80      	pop	{r7, pc}
 8005078:	e000ed04 	.word	0xe000ed04

0800507c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800507c:	b580      	push	{r7, lr}
 800507e:	b090      	sub	sp, #64	; 0x40
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	607a      	str	r2, [r7, #4]
 8005088:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800508e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005090:	2b00      	cmp	r3, #0
 8005092:	d10a      	bne.n	80050aa <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005094:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005098:	f383 8811 	msr	BASEPRI, r3
 800509c:	f3bf 8f6f 	isb	sy
 80050a0:	f3bf 8f4f 	dsb	sy
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80050a6:	bf00      	nop
 80050a8:	e7fe      	b.n	80050a8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d103      	bne.n	80050b8 <xQueueGenericSendFromISR+0x3c>
 80050b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d101      	bne.n	80050bc <xQueueGenericSendFromISR+0x40>
 80050b8:	2301      	movs	r3, #1
 80050ba:	e000      	b.n	80050be <xQueueGenericSendFromISR+0x42>
 80050bc:	2300      	movs	r3, #0
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d10a      	bne.n	80050d8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80050c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050c6:	f383 8811 	msr	BASEPRI, r3
 80050ca:	f3bf 8f6f 	isb	sy
 80050ce:	f3bf 8f4f 	dsb	sy
 80050d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80050d4:	bf00      	nop
 80050d6:	e7fe      	b.n	80050d6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d103      	bne.n	80050e6 <xQueueGenericSendFromISR+0x6a>
 80050de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <xQueueGenericSendFromISR+0x6e>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <xQueueGenericSendFromISR+0x70>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10a      	bne.n	8005106 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	623b      	str	r3, [r7, #32]
}
 8005102:	bf00      	nop
 8005104:	e7fe      	b.n	8005104 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005106:	f002 fb47 	bl	8007798 <vPortValidateInterruptPriority>
	__asm volatile
 800510a:	f3ef 8211 	mrs	r2, BASEPRI
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	61fa      	str	r2, [r7, #28]
 8005120:	61bb      	str	r3, [r7, #24]
	return ulOriginalBASEPRI;
 8005122:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005124:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005126:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800512a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800512c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800512e:	429a      	cmp	r2, r3
 8005130:	d302      	bcc.n	8005138 <xQueueGenericSendFromISR+0xbc>
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	2b02      	cmp	r3, #2
 8005136:	d12f      	bne.n	8005198 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800513e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005142:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005144:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005146:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005148:	683a      	ldr	r2, [r7, #0]
 800514a:	68b9      	ldr	r1, [r7, #8]
 800514c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800514e:	f000 fb64 	bl	800581a <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005152:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005156:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800515a:	d112      	bne.n	8005182 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800515c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	d016      	beq.n	8005192 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005166:	3324      	adds	r3, #36	; 0x24
 8005168:	4618      	mov	r0, r3
 800516a:	f001 fa0b 	bl	8006584 <xTaskRemoveFromEventList>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d00e      	beq.n	8005192 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	2b00      	cmp	r3, #0
 8005178:	d00b      	beq.n	8005192 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2201      	movs	r2, #1
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e007      	b.n	8005192 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005182:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005186:	3301      	adds	r3, #1
 8005188:	b2db      	uxtb	r3, r3
 800518a:	b25a      	sxtb	r2, r3
 800518c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800518e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005192:	2301      	movs	r3, #1
 8005194:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005196:	e001      	b.n	800519c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005198:	2300      	movs	r3, #0
 800519a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800519c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800519e:	617b      	str	r3, [r7, #20]
	__asm volatile
 80051a0:	697b      	ldr	r3, [r7, #20]
 80051a2:	f383 8811 	msr	BASEPRI, r3
}
 80051a6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80051a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3740      	adds	r7, #64	; 0x40
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}

080051b2 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80051b2:	b580      	push	{r7, lr}
 80051b4:	b08e      	sub	sp, #56	; 0x38
 80051b6:	af00      	add	r7, sp, #0
 80051b8:	6078      	str	r0, [r7, #4]
 80051ba:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 80051c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d10a      	bne.n	80051dc <xQueueGiveFromISR+0x2a>
	__asm volatile
 80051c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ca:	f383 8811 	msr	BASEPRI, r3
 80051ce:	f3bf 8f6f 	isb	sy
 80051d2:	f3bf 8f4f 	dsb	sy
 80051d6:	623b      	str	r3, [r7, #32]
}
 80051d8:	bf00      	nop
 80051da:	e7fe      	b.n	80051da <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80051dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00a      	beq.n	80051fa <xQueueGiveFromISR+0x48>
	__asm volatile
 80051e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e8:	f383 8811 	msr	BASEPRI, r3
 80051ec:	f3bf 8f6f 	isb	sy
 80051f0:	f3bf 8f4f 	dsb	sy
 80051f4:	61fb      	str	r3, [r7, #28]
}
 80051f6:	bf00      	nop
 80051f8:	e7fe      	b.n	80051f8 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80051fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d103      	bne.n	800520a <xQueueGiveFromISR+0x58>
 8005202:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005204:	689b      	ldr	r3, [r3, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <xQueueGiveFromISR+0x5c>
 800520a:	2301      	movs	r3, #1
 800520c:	e000      	b.n	8005210 <xQueueGiveFromISR+0x5e>
 800520e:	2300      	movs	r3, #0
 8005210:	2b00      	cmp	r3, #0
 8005212:	d10a      	bne.n	800522a <xQueueGiveFromISR+0x78>
	__asm volatile
 8005214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005218:	f383 8811 	msr	BASEPRI, r3
 800521c:	f3bf 8f6f 	isb	sy
 8005220:	f3bf 8f4f 	dsb	sy
 8005224:	61bb      	str	r3, [r7, #24]
}
 8005226:	bf00      	nop
 8005228:	e7fe      	b.n	8005228 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800522a:	f002 fab5 	bl	8007798 <vPortValidateInterruptPriority>
	__asm volatile
 800522e:	f3ef 8211 	mrs	r2, BASEPRI
 8005232:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005236:	f383 8811 	msr	BASEPRI, r3
 800523a:	f3bf 8f6f 	isb	sy
 800523e:	f3bf 8f4f 	dsb	sy
 8005242:	617a      	str	r2, [r7, #20]
 8005244:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8005246:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005248:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800524a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800524c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8005250:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005254:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005256:	429a      	cmp	r2, r3
 8005258:	d22b      	bcs.n	80052b2 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800525a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005260:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005264:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005266:	1c5a      	adds	r2, r3, #1
 8005268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800526a:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800526c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005270:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005274:	d112      	bne.n	800529c <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005276:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005278:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800527a:	2b00      	cmp	r3, #0
 800527c:	d016      	beq.n	80052ac <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800527e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005280:	3324      	adds	r3, #36	; 0x24
 8005282:	4618      	mov	r0, r3
 8005284:	f001 f97e 	bl	8006584 <xTaskRemoveFromEventList>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00e      	beq.n	80052ac <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	2b00      	cmp	r3, #0
 8005292:	d00b      	beq.n	80052ac <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	2201      	movs	r2, #1
 8005298:	601a      	str	r2, [r3, #0]
 800529a:	e007      	b.n	80052ac <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800529c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80052a0:	3301      	adds	r3, #1
 80052a2:	b2db      	uxtb	r3, r3
 80052a4:	b25a      	sxtb	r2, r3
 80052a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80052a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80052ac:	2301      	movs	r3, #1
 80052ae:	637b      	str	r3, [r7, #52]	; 0x34
 80052b0:	e001      	b.n	80052b6 <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80052b2:	2300      	movs	r3, #0
 80052b4:	637b      	str	r3, [r7, #52]	; 0x34
 80052b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80052b8:	60fb      	str	r3, [r7, #12]
	__asm volatile
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f383 8811 	msr	BASEPRI, r3
}
 80052c0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80052c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80052c4:	4618      	mov	r0, r3
 80052c6:	3738      	adds	r7, #56	; 0x38
 80052c8:	46bd      	mov	sp, r7
 80052ca:	bd80      	pop	{r7, pc}

080052cc <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b08c      	sub	sp, #48	; 0x30
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	60f8      	str	r0, [r7, #12]
 80052d4:	60b9      	str	r1, [r7, #8]
 80052d6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80052d8:	2300      	movs	r3, #0
 80052da:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80052e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d10a      	bne.n	80052fc <xQueueReceive+0x30>
	__asm volatile
 80052e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052ea:	f383 8811 	msr	BASEPRI, r3
 80052ee:	f3bf 8f6f 	isb	sy
 80052f2:	f3bf 8f4f 	dsb	sy
 80052f6:	623b      	str	r3, [r7, #32]
}
 80052f8:	bf00      	nop
 80052fa:	e7fe      	b.n	80052fa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052fc:	68bb      	ldr	r3, [r7, #8]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d103      	bne.n	800530a <xQueueReceive+0x3e>
 8005302:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005304:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005306:	2b00      	cmp	r3, #0
 8005308:	d101      	bne.n	800530e <xQueueReceive+0x42>
 800530a:	2301      	movs	r3, #1
 800530c:	e000      	b.n	8005310 <xQueueReceive+0x44>
 800530e:	2300      	movs	r3, #0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <xQueueReceive+0x5e>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	61fb      	str	r3, [r7, #28]
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800532a:	f001 fafd 	bl	8006928 <xTaskGetSchedulerState>
 800532e:	4603      	mov	r3, r0
 8005330:	2b00      	cmp	r3, #0
 8005332:	d102      	bne.n	800533a <xQueueReceive+0x6e>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2b00      	cmp	r3, #0
 8005338:	d101      	bne.n	800533e <xQueueReceive+0x72>
 800533a:	2301      	movs	r3, #1
 800533c:	e000      	b.n	8005340 <xQueueReceive+0x74>
 800533e:	2300      	movs	r3, #0
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <xQueueReceive+0x8e>
	__asm volatile
 8005344:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005348:	f383 8811 	msr	BASEPRI, r3
 800534c:	f3bf 8f6f 	isb	sy
 8005350:	f3bf 8f4f 	dsb	sy
 8005354:	61bb      	str	r3, [r7, #24]
}
 8005356:	bf00      	nop
 8005358:	e7fe      	b.n	8005358 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800535a:	f002 f93b 	bl	80075d4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005362:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005364:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005366:	2b00      	cmp	r3, #0
 8005368:	d01f      	beq.n	80053aa <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800536a:	68b9      	ldr	r1, [r7, #8]
 800536c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800536e:	f000 fabe 	bl	80058ee <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005372:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005374:	1e5a      	subs	r2, r3, #1
 8005376:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005378:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800537a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800537c:	691b      	ldr	r3, [r3, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d00f      	beq.n	80053a2 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005382:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005384:	3310      	adds	r3, #16
 8005386:	4618      	mov	r0, r3
 8005388:	f001 f8fc 	bl	8006584 <xTaskRemoveFromEventList>
 800538c:	4603      	mov	r3, r0
 800538e:	2b00      	cmp	r3, #0
 8005390:	d007      	beq.n	80053a2 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005392:	4b3d      	ldr	r3, [pc, #244]	; (8005488 <xQueueReceive+0x1bc>)
 8005394:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005398:	601a      	str	r2, [r3, #0]
 800539a:	f3bf 8f4f 	dsb	sy
 800539e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80053a2:	f002 f947 	bl	8007634 <vPortExitCritical>
				return pdPASS;
 80053a6:	2301      	movs	r3, #1
 80053a8:	e069      	b.n	800547e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d103      	bne.n	80053b8 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80053b0:	f002 f940 	bl	8007634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80053b4:	2300      	movs	r3, #0
 80053b6:	e062      	b.n	800547e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80053b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d106      	bne.n	80053cc <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80053be:	f107 0310 	add.w	r3, r7, #16
 80053c2:	4618      	mov	r0, r3
 80053c4:	f001 f942 	bl	800664c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80053c8:	2301      	movs	r3, #1
 80053ca:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80053cc:	f002 f932 	bl	8007634 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80053d0:	f000 fe8a 	bl	80060e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80053d4:	f002 f8fe 	bl	80075d4 <vPortEnterCritical>
 80053d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053da:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053de:	b25b      	sxtb	r3, r3
 80053e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053e4:	d103      	bne.n	80053ee <xQueueReceive+0x122>
 80053e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053e8:	2200      	movs	r2, #0
 80053ea:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053f0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053f4:	b25b      	sxtb	r3, r3
 80053f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80053fa:	d103      	bne.n	8005404 <xQueueReceive+0x138>
 80053fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80053fe:	2200      	movs	r2, #0
 8005400:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005404:	f002 f916 	bl	8007634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005408:	1d3a      	adds	r2, r7, #4
 800540a:	f107 0310 	add.w	r3, r7, #16
 800540e:	4611      	mov	r1, r2
 8005410:	4618      	mov	r0, r3
 8005412:	f001 f931 	bl	8006678 <xTaskCheckForTimeOut>
 8005416:	4603      	mov	r3, r0
 8005418:	2b00      	cmp	r3, #0
 800541a:	d123      	bne.n	8005464 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800541c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800541e:	f000 fade 	bl	80059de <prvIsQueueEmpty>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d017      	beq.n	8005458 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800542a:	3324      	adds	r3, #36	; 0x24
 800542c:	687a      	ldr	r2, [r7, #4]
 800542e:	4611      	mov	r1, r2
 8005430:	4618      	mov	r0, r3
 8005432:	f001 f857 	bl	80064e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005436:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005438:	f000 fa7f 	bl	800593a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800543c:	f000 fe62 	bl	8006104 <xTaskResumeAll>
 8005440:	4603      	mov	r3, r0
 8005442:	2b00      	cmp	r3, #0
 8005444:	d189      	bne.n	800535a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005446:	4b10      	ldr	r3, [pc, #64]	; (8005488 <xQueueReceive+0x1bc>)
 8005448:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800544c:	601a      	str	r2, [r3, #0]
 800544e:	f3bf 8f4f 	dsb	sy
 8005452:	f3bf 8f6f 	isb	sy
 8005456:	e780      	b.n	800535a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005458:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800545a:	f000 fa6e 	bl	800593a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800545e:	f000 fe51 	bl	8006104 <xTaskResumeAll>
 8005462:	e77a      	b.n	800535a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005464:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005466:	f000 fa68 	bl	800593a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800546a:	f000 fe4b 	bl	8006104 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800546e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005470:	f000 fab5 	bl	80059de <prvIsQueueEmpty>
 8005474:	4603      	mov	r3, r0
 8005476:	2b00      	cmp	r3, #0
 8005478:	f43f af6f 	beq.w	800535a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800547c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800547e:	4618      	mov	r0, r3
 8005480:	3730      	adds	r7, #48	; 0x30
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	e000ed04 	.word	0xe000ed04

0800548c <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b08e      	sub	sp, #56	; 0x38
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8005496:	2300      	movs	r3, #0
 8005498:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800549e:	2300      	movs	r3, #0
 80054a0:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80054a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d10a      	bne.n	80054be <xQueueSemaphoreTake+0x32>
	__asm volatile
 80054a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ac:	f383 8811 	msr	BASEPRI, r3
 80054b0:	f3bf 8f6f 	isb	sy
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	623b      	str	r3, [r7, #32]
}
 80054ba:	bf00      	nop
 80054bc:	e7fe      	b.n	80054bc <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80054be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d00a      	beq.n	80054dc <xQueueSemaphoreTake+0x50>
	__asm volatile
 80054c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ca:	f383 8811 	msr	BASEPRI, r3
 80054ce:	f3bf 8f6f 	isb	sy
 80054d2:	f3bf 8f4f 	dsb	sy
 80054d6:	61fb      	str	r3, [r7, #28]
}
 80054d8:	bf00      	nop
 80054da:	e7fe      	b.n	80054da <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054dc:	f001 fa24 	bl	8006928 <xTaskGetSchedulerState>
 80054e0:	4603      	mov	r3, r0
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d102      	bne.n	80054ec <xQueueSemaphoreTake+0x60>
 80054e6:	683b      	ldr	r3, [r7, #0]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <xQueueSemaphoreTake+0x64>
 80054ec:	2301      	movs	r3, #1
 80054ee:	e000      	b.n	80054f2 <xQueueSemaphoreTake+0x66>
 80054f0:	2300      	movs	r3, #0
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10a      	bne.n	800550c <xQueueSemaphoreTake+0x80>
	__asm volatile
 80054f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054fa:	f383 8811 	msr	BASEPRI, r3
 80054fe:	f3bf 8f6f 	isb	sy
 8005502:	f3bf 8f4f 	dsb	sy
 8005506:	61bb      	str	r3, [r7, #24]
}
 8005508:	bf00      	nop
 800550a:	e7fe      	b.n	800550a <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800550c:	f002 f862 	bl	80075d4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8005510:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005512:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005514:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8005516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005518:	2b00      	cmp	r3, #0
 800551a:	d024      	beq.n	8005566 <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800551c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800551e:	1e5a      	subs	r2, r3, #1
 8005520:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005522:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005524:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d104      	bne.n	8005536 <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800552c:	f001 fb72 	bl	8006c14 <pvTaskIncrementMutexHeldCount>
 8005530:	4602      	mov	r2, r0
 8005532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005534:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005536:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005538:	691b      	ldr	r3, [r3, #16]
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00f      	beq.n	800555e <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800553e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005540:	3310      	adds	r3, #16
 8005542:	4618      	mov	r0, r3
 8005544:	f001 f81e 	bl	8006584 <xTaskRemoveFromEventList>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d007      	beq.n	800555e <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800554e:	4b54      	ldr	r3, [pc, #336]	; (80056a0 <xQueueSemaphoreTake+0x214>)
 8005550:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	f3bf 8f4f 	dsb	sy
 800555a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800555e:	f002 f869 	bl	8007634 <vPortExitCritical>
				return pdPASS;
 8005562:	2301      	movs	r3, #1
 8005564:	e097      	b.n	8005696 <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005566:	683b      	ldr	r3, [r7, #0]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d111      	bne.n	8005590 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800556c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800556e:	2b00      	cmp	r3, #0
 8005570:	d00a      	beq.n	8005588 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8005572:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005576:	f383 8811 	msr	BASEPRI, r3
 800557a:	f3bf 8f6f 	isb	sy
 800557e:	f3bf 8f4f 	dsb	sy
 8005582:	617b      	str	r3, [r7, #20]
}
 8005584:	bf00      	nop
 8005586:	e7fe      	b.n	8005586 <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8005588:	f002 f854 	bl	8007634 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800558c:	2300      	movs	r3, #0
 800558e:	e082      	b.n	8005696 <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005590:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005592:	2b00      	cmp	r3, #0
 8005594:	d106      	bne.n	80055a4 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005596:	f107 030c 	add.w	r3, r7, #12
 800559a:	4618      	mov	r0, r3
 800559c:	f001 f856 	bl	800664c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80055a0:	2301      	movs	r3, #1
 80055a2:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80055a4:	f002 f846 	bl	8007634 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80055a8:	f000 fd9e 	bl	80060e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80055ac:	f002 f812 	bl	80075d4 <vPortEnterCritical>
 80055b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80055b6:	b25b      	sxtb	r3, r3
 80055b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055bc:	d103      	bne.n	80055c6 <xQueueSemaphoreTake+0x13a>
 80055be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c0:	2200      	movs	r2, #0
 80055c2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055cc:	b25b      	sxtb	r3, r3
 80055ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055d2:	d103      	bne.n	80055dc <xQueueSemaphoreTake+0x150>
 80055d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055d6:	2200      	movs	r2, #0
 80055d8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055dc:	f002 f82a 	bl	8007634 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055e0:	463a      	mov	r2, r7
 80055e2:	f107 030c 	add.w	r3, r7, #12
 80055e6:	4611      	mov	r1, r2
 80055e8:	4618      	mov	r0, r3
 80055ea:	f001 f845 	bl	8006678 <xTaskCheckForTimeOut>
 80055ee:	4603      	mov	r3, r0
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d132      	bne.n	800565a <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80055f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80055f6:	f000 f9f2 	bl	80059de <prvIsQueueEmpty>
 80055fa:	4603      	mov	r3, r0
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d026      	beq.n	800564e <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d109      	bne.n	800561c <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8005608:	f001 ffe4 	bl	80075d4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800560c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	4618      	mov	r0, r3
 8005612:	f001 f9a7 	bl	8006964 <xTaskPriorityInherit>
 8005616:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8005618:	f002 f80c 	bl	8007634 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800561c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800561e:	3324      	adds	r3, #36	; 0x24
 8005620:	683a      	ldr	r2, [r7, #0]
 8005622:	4611      	mov	r1, r2
 8005624:	4618      	mov	r0, r3
 8005626:	f000 ff5d 	bl	80064e4 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800562a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800562c:	f000 f985 	bl	800593a <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005630:	f000 fd68 	bl	8006104 <xTaskResumeAll>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	f47f af68 	bne.w	800550c <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 800563c:	4b18      	ldr	r3, [pc, #96]	; (80056a0 <xQueueSemaphoreTake+0x214>)
 800563e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	f3bf 8f4f 	dsb	sy
 8005648:	f3bf 8f6f 	isb	sy
 800564c:	e75e      	b.n	800550c <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800564e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005650:	f000 f973 	bl	800593a <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005654:	f000 fd56 	bl	8006104 <xTaskResumeAll>
 8005658:	e758      	b.n	800550c <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800565a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800565c:	f000 f96d 	bl	800593a <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005660:	f000 fd50 	bl	8006104 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005664:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005666:	f000 f9ba 	bl	80059de <prvIsQueueEmpty>
 800566a:	4603      	mov	r3, r0
 800566c:	2b00      	cmp	r3, #0
 800566e:	f43f af4d 	beq.w	800550c <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8005672:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005674:	2b00      	cmp	r3, #0
 8005676:	d00d      	beq.n	8005694 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8005678:	f001 ffac 	bl	80075d4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800567c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800567e:	f000 f8b4 	bl	80057ea <prvGetDisinheritPriorityAfterTimeout>
 8005682:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8005684:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800568a:	4618      	mov	r0, r3
 800568c:	f001 fa40 	bl	8006b10 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8005690:	f001 ffd0 	bl	8007634 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005694:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005696:	4618      	mov	r0, r3
 8005698:	3738      	adds	r7, #56	; 0x38
 800569a:	46bd      	mov	sp, r7
 800569c:	bd80      	pop	{r7, pc}
 800569e:	bf00      	nop
 80056a0:	e000ed04 	.word	0xe000ed04

080056a4 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b08e      	sub	sp, #56	; 0x38
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	60f8      	str	r0, [r7, #12]
 80056ac:	60b9      	str	r1, [r7, #8]
 80056ae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80056b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d10a      	bne.n	80056d0 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 80056ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056be:	f383 8811 	msr	BASEPRI, r3
 80056c2:	f3bf 8f6f 	isb	sy
 80056c6:	f3bf 8f4f 	dsb	sy
 80056ca:	623b      	str	r3, [r7, #32]
}
 80056cc:	bf00      	nop
 80056ce:	e7fe      	b.n	80056ce <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d103      	bne.n	80056de <xQueueReceiveFromISR+0x3a>
 80056d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d101      	bne.n	80056e2 <xQueueReceiveFromISR+0x3e>
 80056de:	2301      	movs	r3, #1
 80056e0:	e000      	b.n	80056e4 <xQueueReceiveFromISR+0x40>
 80056e2:	2300      	movs	r3, #0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d10a      	bne.n	80056fe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 80056e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ec:	f383 8811 	msr	BASEPRI, r3
 80056f0:	f3bf 8f6f 	isb	sy
 80056f4:	f3bf 8f4f 	dsb	sy
 80056f8:	61fb      	str	r3, [r7, #28]
}
 80056fa:	bf00      	nop
 80056fc:	e7fe      	b.n	80056fc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056fe:	f002 f84b 	bl	8007798 <vPortValidateInterruptPriority>
	__asm volatile
 8005702:	f3ef 8211 	mrs	r2, BASEPRI
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	61ba      	str	r2, [r7, #24]
 8005718:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800571a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800571c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005722:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005724:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005726:	2b00      	cmp	r3, #0
 8005728:	d02f      	beq.n	800578a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800572a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800572c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005730:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005734:	68b9      	ldr	r1, [r7, #8]
 8005736:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005738:	f000 f8d9 	bl	80058ee <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800573c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800573e:	1e5a      	subs	r2, r3, #1
 8005740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005742:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005744:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8005748:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800574c:	d112      	bne.n	8005774 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800574e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005750:	691b      	ldr	r3, [r3, #16]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d016      	beq.n	8005784 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005758:	3310      	adds	r3, #16
 800575a:	4618      	mov	r0, r3
 800575c:	f000 ff12 	bl	8006584 <xTaskRemoveFromEventList>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d00e      	beq.n	8005784 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2b00      	cmp	r3, #0
 800576a:	d00b      	beq.n	8005784 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	2201      	movs	r2, #1
 8005770:	601a      	str	r2, [r3, #0]
 8005772:	e007      	b.n	8005784 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005774:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8005778:	3301      	adds	r3, #1
 800577a:	b2db      	uxtb	r3, r3
 800577c:	b25a      	sxtb	r2, r3
 800577e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005780:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8005784:	2301      	movs	r3, #1
 8005786:	637b      	str	r3, [r7, #52]	; 0x34
 8005788:	e001      	b.n	800578e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800578a:	2300      	movs	r3, #0
 800578c:	637b      	str	r3, [r7, #52]	; 0x34
 800578e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005790:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005792:	693b      	ldr	r3, [r7, #16]
 8005794:	f383 8811 	msr	BASEPRI, r3
}
 8005798:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800579a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800579c:	4618      	mov	r0, r3
 800579e:	3738      	adds	r7, #56	; 0x38
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b084      	sub	sp, #16
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d10a      	bne.n	80057cc <vQueueDelete+0x28>
	__asm volatile
 80057b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057ba:	f383 8811 	msr	BASEPRI, r3
 80057be:	f3bf 8f6f 	isb	sy
 80057c2:	f3bf 8f4f 	dsb	sy
 80057c6:	60bb      	str	r3, [r7, #8]
}
 80057c8:	bf00      	nop
 80057ca:	e7fe      	b.n	80057ca <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80057cc:	68f8      	ldr	r0, [r7, #12]
 80057ce:	f000 f95f 	bl	8005a90 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d102      	bne.n	80057e2 <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80057dc:	68f8      	ldr	r0, [r7, #12]
 80057de:	f002 f8e7 	bl	80079b0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80057e2:	bf00      	nop
 80057e4:	3710      	adds	r7, #16
 80057e6:	46bd      	mov	sp, r7
 80057e8:	bd80      	pop	{r7, pc}

080057ea <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80057ea:	b480      	push	{r7}
 80057ec:	b085      	sub	sp, #20
 80057ee:	af00      	add	r7, sp, #0
 80057f0:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d006      	beq.n	8005808 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8005804:	60fb      	str	r3, [r7, #12]
 8005806:	e001      	b.n	800580c <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8005808:	2300      	movs	r3, #0
 800580a:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800580c:	68fb      	ldr	r3, [r7, #12]
	}
 800580e:	4618      	mov	r0, r3
 8005810:	3714      	adds	r7, #20
 8005812:	46bd      	mov	sp, r7
 8005814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005818:	4770      	bx	lr

0800581a <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800581a:	b580      	push	{r7, lr}
 800581c:	b086      	sub	sp, #24
 800581e:	af00      	add	r7, sp, #0
 8005820:	60f8      	str	r0, [r7, #12]
 8005822:	60b9      	str	r1, [r7, #8]
 8005824:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005826:	2300      	movs	r3, #0
 8005828:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800582e:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005830:	68fb      	ldr	r3, [r7, #12]
 8005832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005834:	2b00      	cmp	r3, #0
 8005836:	d10d      	bne.n	8005854 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d14d      	bne.n	80058dc <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	4618      	mov	r0, r3
 8005846:	f001 f8f5 	bl	8006a34 <xTaskPriorityDisinherit>
 800584a:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	2200      	movs	r2, #0
 8005850:	609a      	str	r2, [r3, #8]
 8005852:	e043      	b.n	80058dc <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2b00      	cmp	r3, #0
 8005858:	d119      	bne.n	800588e <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	6858      	ldr	r0, [r3, #4]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005862:	461a      	mov	r2, r3
 8005864:	68b9      	ldr	r1, [r7, #8]
 8005866:	f002 fae4 	bl	8007e32 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	685a      	ldr	r2, [r3, #4]
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005872:	441a      	add	r2, r3
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	429a      	cmp	r2, r3
 8005882:	d32b      	bcc.n	80058dc <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	605a      	str	r2, [r3, #4]
 800588c:	e026      	b.n	80058dc <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	68d8      	ldr	r0, [r3, #12]
 8005892:	68fb      	ldr	r3, [r7, #12]
 8005894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005896:	461a      	mov	r2, r3
 8005898:	68b9      	ldr	r1, [r7, #8]
 800589a:	f002 faca 	bl	8007e32 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	68da      	ldr	r2, [r3, #12]
 80058a2:	68fb      	ldr	r3, [r7, #12]
 80058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058a6:	425b      	negs	r3, r3
 80058a8:	441a      	add	r2, r3
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	68da      	ldr	r2, [r3, #12]
 80058b2:	68fb      	ldr	r3, [r7, #12]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	429a      	cmp	r2, r3
 80058b8:	d207      	bcs.n	80058ca <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	689a      	ldr	r2, [r3, #8]
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c2:	425b      	negs	r3, r3
 80058c4:	441a      	add	r2, r3
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2b02      	cmp	r3, #2
 80058ce:	d105      	bne.n	80058dc <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d002      	beq.n	80058dc <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	3b01      	subs	r3, #1
 80058da:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80058dc:	693b      	ldr	r3, [r7, #16]
 80058de:	1c5a      	adds	r2, r3, #1
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80058e4:	697b      	ldr	r3, [r7, #20]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	3718      	adds	r7, #24
 80058ea:	46bd      	mov	sp, r7
 80058ec:	bd80      	pop	{r7, pc}

080058ee <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80058ee:	b580      	push	{r7, lr}
 80058f0:	b082      	sub	sp, #8
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d018      	beq.n	8005932 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	68da      	ldr	r2, [r3, #12]
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005908:	441a      	add	r2, r3
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	68da      	ldr	r2, [r3, #12]
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	689b      	ldr	r3, [r3, #8]
 8005916:	429a      	cmp	r2, r3
 8005918:	d303      	bcc.n	8005922 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	68d9      	ldr	r1, [r3, #12]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800592a:	461a      	mov	r2, r3
 800592c:	6838      	ldr	r0, [r7, #0]
 800592e:	f002 fa80 	bl	8007e32 <memcpy>
	}
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b084      	sub	sp, #16
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005942:	f001 fe47 	bl	80075d4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800594c:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800594e:	e011      	b.n	8005974 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005954:	2b00      	cmp	r3, #0
 8005956:	d012      	beq.n	800597e <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	3324      	adds	r3, #36	; 0x24
 800595c:	4618      	mov	r0, r3
 800595e:	f000 fe11 	bl	8006584 <xTaskRemoveFromEventList>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d001      	beq.n	800596c <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005968:	f000 fee8 	bl	800673c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800596c:	7bfb      	ldrb	r3, [r7, #15]
 800596e:	3b01      	subs	r3, #1
 8005970:	b2db      	uxtb	r3, r3
 8005972:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005974:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005978:	2b00      	cmp	r3, #0
 800597a:	dce9      	bgt.n	8005950 <prvUnlockQueue+0x16>
 800597c:	e000      	b.n	8005980 <prvUnlockQueue+0x46>
					break;
 800597e:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	22ff      	movs	r2, #255	; 0xff
 8005984:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005988:	f001 fe54 	bl	8007634 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800598c:	f001 fe22 	bl	80075d4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005996:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005998:	e011      	b.n	80059be <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	691b      	ldr	r3, [r3, #16]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d012      	beq.n	80059c8 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	3310      	adds	r3, #16
 80059a6:	4618      	mov	r0, r3
 80059a8:	f000 fdec 	bl	8006584 <xTaskRemoveFromEventList>
 80059ac:	4603      	mov	r3, r0
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d001      	beq.n	80059b6 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80059b2:	f000 fec3 	bl	800673c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80059b6:	7bbb      	ldrb	r3, [r7, #14]
 80059b8:	3b01      	subs	r3, #1
 80059ba:	b2db      	uxtb	r3, r3
 80059bc:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80059be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	dce9      	bgt.n	800599a <prvUnlockQueue+0x60>
 80059c6:	e000      	b.n	80059ca <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80059c8:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	22ff      	movs	r2, #255	; 0xff
 80059ce:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80059d2:	f001 fe2f 	bl	8007634 <vPortExitCritical>
}
 80059d6:	bf00      	nop
 80059d8:	3710      	adds	r7, #16
 80059da:	46bd      	mov	sp, r7
 80059dc:	bd80      	pop	{r7, pc}

080059de <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80059de:	b580      	push	{r7, lr}
 80059e0:	b084      	sub	sp, #16
 80059e2:	af00      	add	r7, sp, #0
 80059e4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80059e6:	f001 fdf5 	bl	80075d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80059f2:	2301      	movs	r3, #1
 80059f4:	60fb      	str	r3, [r7, #12]
 80059f6:	e001      	b.n	80059fc <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80059f8:	2300      	movs	r3, #0
 80059fa:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80059fc:	f001 fe1a 	bl	8007634 <vPortExitCritical>

	return xReturn;
 8005a00:	68fb      	ldr	r3, [r7, #12]
}
 8005a02:	4618      	mov	r0, r3
 8005a04:	3710      	adds	r7, #16
 8005a06:	46bd      	mov	sp, r7
 8005a08:	bd80      	pop	{r7, pc}

08005a0a <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005a0a:	b580      	push	{r7, lr}
 8005a0c:	b084      	sub	sp, #16
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005a12:	f001 fddf 	bl	80075d4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a1e:	429a      	cmp	r2, r3
 8005a20:	d102      	bne.n	8005a28 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005a22:	2301      	movs	r3, #1
 8005a24:	60fb      	str	r3, [r7, #12]
 8005a26:	e001      	b.n	8005a2c <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005a2c:	f001 fe02 	bl	8007634 <vPortExitCritical>

	return xReturn;
 8005a30:	68fb      	ldr	r3, [r7, #12]
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3710      	adds	r7, #16
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b085      	sub	sp, #20
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
 8005a44:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	e014      	b.n	8005a76 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005a4c:	4a0f      	ldr	r2, [pc, #60]	; (8005a8c <vQueueAddToRegistry+0x50>)
 8005a4e:	68fb      	ldr	r3, [r7, #12]
 8005a50:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005a54:	2b00      	cmp	r3, #0
 8005a56:	d10b      	bne.n	8005a70 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005a58:	490c      	ldr	r1, [pc, #48]	; (8005a8c <vQueueAddToRegistry+0x50>)
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	683a      	ldr	r2, [r7, #0]
 8005a5e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005a62:	4a0a      	ldr	r2, [pc, #40]	; (8005a8c <vQueueAddToRegistry+0x50>)
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	00db      	lsls	r3, r3, #3
 8005a68:	4413      	add	r3, r2
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005a6e:	e006      	b.n	8005a7e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3301      	adds	r3, #1
 8005a74:	60fb      	str	r3, [r7, #12]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	2b07      	cmp	r3, #7
 8005a7a:	d9e7      	bls.n	8005a4c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3714      	adds	r7, #20
 8005a82:	46bd      	mov	sp, r7
 8005a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a88:	4770      	bx	lr
 8005a8a:	bf00      	nop
 8005a8c:	20000620 	.word	0x20000620

08005a90 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005a98:	2300      	movs	r3, #0
 8005a9a:	60fb      	str	r3, [r7, #12]
 8005a9c:	e016      	b.n	8005acc <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8005a9e:	4a10      	ldr	r2, [pc, #64]	; (8005ae0 <vQueueUnregisterQueue+0x50>)
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	00db      	lsls	r3, r3, #3
 8005aa4:	4413      	add	r3, r2
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	687a      	ldr	r2, [r7, #4]
 8005aaa:	429a      	cmp	r2, r3
 8005aac:	d10b      	bne.n	8005ac6 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8005aae:	4a0c      	ldr	r2, [pc, #48]	; (8005ae0 <vQueueUnregisterQueue+0x50>)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	2100      	movs	r1, #0
 8005ab4:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8005ab8:	4a09      	ldr	r2, [pc, #36]	; (8005ae0 <vQueueUnregisterQueue+0x50>)
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	00db      	lsls	r3, r3, #3
 8005abe:	4413      	add	r3, r2
 8005ac0:	2200      	movs	r2, #0
 8005ac2:	605a      	str	r2, [r3, #4]
				break;
 8005ac4:	e006      	b.n	8005ad4 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	3301      	adds	r3, #1
 8005aca:	60fb      	str	r3, [r7, #12]
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2b07      	cmp	r3, #7
 8005ad0:	d9e5      	bls.n	8005a9e <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8005ad2:	bf00      	nop
 8005ad4:	bf00      	nop
 8005ad6:	3714      	adds	r7, #20
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ade:	4770      	bx	lr
 8005ae0:	20000620 	.word	0x20000620

08005ae4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b086      	sub	sp, #24
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005af4:	f001 fd6e 	bl	80075d4 <vPortEnterCritical>
 8005af8:	697b      	ldr	r3, [r7, #20]
 8005afa:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005afe:	b25b      	sxtb	r3, r3
 8005b00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b04:	d103      	bne.n	8005b0e <vQueueWaitForMessageRestricted+0x2a>
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	2200      	movs	r2, #0
 8005b0a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005b14:	b25b      	sxtb	r3, r3
 8005b16:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b1a:	d103      	bne.n	8005b24 <vQueueWaitForMessageRestricted+0x40>
 8005b1c:	697b      	ldr	r3, [r7, #20]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005b24:	f001 fd86 	bl	8007634 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005b28:	697b      	ldr	r3, [r7, #20]
 8005b2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d106      	bne.n	8005b3e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005b30:	697b      	ldr	r3, [r7, #20]
 8005b32:	3324      	adds	r3, #36	; 0x24
 8005b34:	687a      	ldr	r2, [r7, #4]
 8005b36:	68b9      	ldr	r1, [r7, #8]
 8005b38:	4618      	mov	r0, r3
 8005b3a:	f000 fcf7 	bl	800652c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005b3e:	6978      	ldr	r0, [r7, #20]
 8005b40:	f7ff fefb 	bl	800593a <prvUnlockQueue>
	}
 8005b44:	bf00      	nop
 8005b46:	3718      	adds	r7, #24
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005b4c:	b580      	push	{r7, lr}
 8005b4e:	b08e      	sub	sp, #56	; 0x38
 8005b50:	af04      	add	r7, sp, #16
 8005b52:	60f8      	str	r0, [r7, #12]
 8005b54:	60b9      	str	r1, [r7, #8]
 8005b56:	607a      	str	r2, [r7, #4]
 8005b58:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005b5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d10a      	bne.n	8005b76 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	623b      	str	r3, [r7, #32]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xTaskCreateStatic+0x46>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	61fb      	str	r3, [r7, #28]
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005b92:	23bc      	movs	r3, #188	; 0xbc
 8005b94:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	2bbc      	cmp	r3, #188	; 0xbc
 8005b9a:	d00a      	beq.n	8005bb2 <xTaskCreateStatic+0x66>
	__asm volatile
 8005b9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ba0:	f383 8811 	msr	BASEPRI, r3
 8005ba4:	f3bf 8f6f 	isb	sy
 8005ba8:	f3bf 8f4f 	dsb	sy
 8005bac:	61bb      	str	r3, [r7, #24]
}
 8005bae:	bf00      	nop
 8005bb0:	e7fe      	b.n	8005bb0 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005bb2:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005bb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d01e      	beq.n	8005bf8 <xTaskCreateStatic+0xac>
 8005bba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005bbc:	2b00      	cmp	r3, #0
 8005bbe:	d01b      	beq.n	8005bf8 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bc2:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bc6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005bc8:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bcc:	2202      	movs	r2, #2
 8005bce:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	9303      	str	r3, [sp, #12]
 8005bd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bd8:	9302      	str	r3, [sp, #8]
 8005bda:	f107 0314 	add.w	r3, r7, #20
 8005bde:	9301      	str	r3, [sp, #4]
 8005be0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005be2:	9300      	str	r3, [sp, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	687a      	ldr	r2, [r7, #4]
 8005be8:	68b9      	ldr	r1, [r7, #8]
 8005bea:	68f8      	ldr	r0, [r7, #12]
 8005bec:	f000 f850 	bl	8005c90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005bf0:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005bf2:	f000 f8f3 	bl	8005ddc <prvAddNewTaskToReadyList>
 8005bf6:	e001      	b.n	8005bfc <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005bfc:	697b      	ldr	r3, [r7, #20]
	}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3728      	adds	r7, #40	; 0x28
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b08c      	sub	sp, #48	; 0x30
 8005c0a:	af04      	add	r7, sp, #16
 8005c0c:	60f8      	str	r0, [r7, #12]
 8005c0e:	60b9      	str	r1, [r7, #8]
 8005c10:	603b      	str	r3, [r7, #0]
 8005c12:	4613      	mov	r3, r2
 8005c14:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005c16:	88fb      	ldrh	r3, [r7, #6]
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4618      	mov	r0, r3
 8005c1c:	f001 fdfc 	bl	8007818 <pvPortMalloc>
 8005c20:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005c22:	697b      	ldr	r3, [r7, #20]
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d00e      	beq.n	8005c46 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005c28:	20bc      	movs	r0, #188	; 0xbc
 8005c2a:	f001 fdf5 	bl	8007818 <pvPortMalloc>
 8005c2e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005c30:	69fb      	ldr	r3, [r7, #28]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d003      	beq.n	8005c3e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005c36:	69fb      	ldr	r3, [r7, #28]
 8005c38:	697a      	ldr	r2, [r7, #20]
 8005c3a:	631a      	str	r2, [r3, #48]	; 0x30
 8005c3c:	e005      	b.n	8005c4a <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005c3e:	6978      	ldr	r0, [r7, #20]
 8005c40:	f001 feb6 	bl	80079b0 <vPortFree>
 8005c44:	e001      	b.n	8005c4a <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005c46:	2300      	movs	r3, #0
 8005c48:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	d017      	beq.n	8005c80 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005c50:	69fb      	ldr	r3, [r7, #28]
 8005c52:	2200      	movs	r2, #0
 8005c54:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005c58:	88fa      	ldrh	r2, [r7, #6]
 8005c5a:	2300      	movs	r3, #0
 8005c5c:	9303      	str	r3, [sp, #12]
 8005c5e:	69fb      	ldr	r3, [r7, #28]
 8005c60:	9302      	str	r3, [sp, #8]
 8005c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c64:	9301      	str	r3, [sp, #4]
 8005c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c68:	9300      	str	r3, [sp, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	68b9      	ldr	r1, [r7, #8]
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f000 f80e 	bl	8005c90 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005c74:	69f8      	ldr	r0, [r7, #28]
 8005c76:	f000 f8b1 	bl	8005ddc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	61bb      	str	r3, [r7, #24]
 8005c7e:	e002      	b.n	8005c86 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005c80:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005c84:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005c86:	69bb      	ldr	r3, [r7, #24]
	}
 8005c88:	4618      	mov	r0, r3
 8005c8a:	3720      	adds	r7, #32
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b088      	sub	sp, #32
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005c9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ca0:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	009b      	lsls	r3, r3, #2
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	21a5      	movs	r1, #165	; 0xa5
 8005caa:	f002 f8d0 	bl	8007e4e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	009b      	lsls	r3, r3, #2
 8005cbc:	4413      	add	r3, r2
 8005cbe:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005cc0:	69bb      	ldr	r3, [r7, #24]
 8005cc2:	f023 0307 	bic.w	r3, r3, #7
 8005cc6:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005cc8:	69bb      	ldr	r3, [r7, #24]
 8005cca:	f003 0307 	and.w	r3, r3, #7
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d00a      	beq.n	8005ce8 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005cd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cd6:	f383 8811 	msr	BASEPRI, r3
 8005cda:	f3bf 8f6f 	isb	sy
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	617b      	str	r3, [r7, #20]
}
 8005ce4:	bf00      	nop
 8005ce6:	e7fe      	b.n	8005ce6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d01f      	beq.n	8005d2e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005cee:	2300      	movs	r3, #0
 8005cf0:	61fb      	str	r3, [r7, #28]
 8005cf2:	e012      	b.n	8005d1a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005cf4:	68ba      	ldr	r2, [r7, #8]
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	4413      	add	r3, r2
 8005cfa:	7819      	ldrb	r1, [r3, #0]
 8005cfc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005cfe:	69fb      	ldr	r3, [r7, #28]
 8005d00:	4413      	add	r3, r2
 8005d02:	3334      	adds	r3, #52	; 0x34
 8005d04:	460a      	mov	r2, r1
 8005d06:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	69fb      	ldr	r3, [r7, #28]
 8005d0c:	4413      	add	r3, r2
 8005d0e:	781b      	ldrb	r3, [r3, #0]
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d006      	beq.n	8005d22 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005d14:	69fb      	ldr	r3, [r7, #28]
 8005d16:	3301      	adds	r3, #1
 8005d18:	61fb      	str	r3, [r7, #28]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	2b0f      	cmp	r3, #15
 8005d1e:	d9e9      	bls.n	8005cf4 <prvInitialiseNewTask+0x64>
 8005d20:	e000      	b.n	8005d24 <prvInitialiseNewTask+0x94>
			{
				break;
 8005d22:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005d24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d26:	2200      	movs	r2, #0
 8005d28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d2c:	e003      	b.n	8005d36 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005d2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d38:	2b37      	cmp	r3, #55	; 0x37
 8005d3a:	d901      	bls.n	8005d40 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005d3c:	2337      	movs	r3, #55	; 0x37
 8005d3e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005d40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d42:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d44:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005d46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d48:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005d4a:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005d4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d4e:	2200      	movs	r2, #0
 8005d50:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d54:	3304      	adds	r3, #4
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe fe56 	bl	8004a08 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005d5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5e:	3318      	adds	r3, #24
 8005d60:	4618      	mov	r0, r3
 8005d62:	f7fe fe51 	bl	8004a08 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d6a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d6c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d6e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d74:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005d76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d78:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005d7a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005d7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d7e:	2200      	movs	r2, #0
 8005d80:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005d84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	3354      	adds	r3, #84	; 0x54
 8005d90:	2260      	movs	r2, #96	; 0x60
 8005d92:	2100      	movs	r1, #0
 8005d94:	4618      	mov	r0, r3
 8005d96:	f002 f85a 	bl	8007e4e <memset>
 8005d9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d9c:	4a0c      	ldr	r2, [pc, #48]	; (8005dd0 <prvInitialiseNewTask+0x140>)
 8005d9e:	659a      	str	r2, [r3, #88]	; 0x58
 8005da0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da2:	4a0c      	ldr	r2, [pc, #48]	; (8005dd4 <prvInitialiseNewTask+0x144>)
 8005da4:	65da      	str	r2, [r3, #92]	; 0x5c
 8005da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005da8:	4a0b      	ldr	r2, [pc, #44]	; (8005dd8 <prvInitialiseNewTask+0x148>)
 8005daa:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005dac:	683a      	ldr	r2, [r7, #0]
 8005dae:	68f9      	ldr	r1, [r7, #12]
 8005db0:	69b8      	ldr	r0, [r7, #24]
 8005db2:	f001 fae5 	bl	8007380 <pxPortInitialiseStack>
 8005db6:	4602      	mov	r2, r0
 8005db8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dba:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005dbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d002      	beq.n	8005dc8 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005dc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dc6:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005dc8:	bf00      	nop
 8005dca:	3720      	adds	r7, #32
 8005dcc:	46bd      	mov	sp, r7
 8005dce:	bd80      	pop	{r7, pc}
 8005dd0:	0800911c 	.word	0x0800911c
 8005dd4:	0800913c 	.word	0x0800913c
 8005dd8:	080090fc 	.word	0x080090fc

08005ddc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b082      	sub	sp, #8
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005de4:	f001 fbf6 	bl	80075d4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005de8:	4b2d      	ldr	r3, [pc, #180]	; (8005ea0 <prvAddNewTaskToReadyList+0xc4>)
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	3301      	adds	r3, #1
 8005dee:	4a2c      	ldr	r2, [pc, #176]	; (8005ea0 <prvAddNewTaskToReadyList+0xc4>)
 8005df0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005df2:	4b2c      	ldr	r3, [pc, #176]	; (8005ea4 <prvAddNewTaskToReadyList+0xc8>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d109      	bne.n	8005e0e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005dfa:	4a2a      	ldr	r2, [pc, #168]	; (8005ea4 <prvAddNewTaskToReadyList+0xc8>)
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005e00:	4b27      	ldr	r3, [pc, #156]	; (8005ea0 <prvAddNewTaskToReadyList+0xc4>)
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	2b01      	cmp	r3, #1
 8005e06:	d110      	bne.n	8005e2a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005e08:	f000 fcbc 	bl	8006784 <prvInitialiseTaskLists>
 8005e0c:	e00d      	b.n	8005e2a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005e0e:	4b26      	ldr	r3, [pc, #152]	; (8005ea8 <prvAddNewTaskToReadyList+0xcc>)
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d109      	bne.n	8005e2a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005e16:	4b23      	ldr	r3, [pc, #140]	; (8005ea4 <prvAddNewTaskToReadyList+0xc8>)
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	429a      	cmp	r2, r3
 8005e22:	d802      	bhi.n	8005e2a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005e24:	4a1f      	ldr	r2, [pc, #124]	; (8005ea4 <prvAddNewTaskToReadyList+0xc8>)
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005e2a:	4b20      	ldr	r3, [pc, #128]	; (8005eac <prvAddNewTaskToReadyList+0xd0>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3301      	adds	r3, #1
 8005e30:	4a1e      	ldr	r2, [pc, #120]	; (8005eac <prvAddNewTaskToReadyList+0xd0>)
 8005e32:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005e34:	4b1d      	ldr	r3, [pc, #116]	; (8005eac <prvAddNewTaskToReadyList+0xd0>)
 8005e36:	681a      	ldr	r2, [r3, #0]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e40:	4b1b      	ldr	r3, [pc, #108]	; (8005eb0 <prvAddNewTaskToReadyList+0xd4>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	429a      	cmp	r2, r3
 8005e46:	d903      	bls.n	8005e50 <prvAddNewTaskToReadyList+0x74>
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e4c:	4a18      	ldr	r2, [pc, #96]	; (8005eb0 <prvAddNewTaskToReadyList+0xd4>)
 8005e4e:	6013      	str	r3, [r2, #0]
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e54:	4613      	mov	r3, r2
 8005e56:	009b      	lsls	r3, r3, #2
 8005e58:	4413      	add	r3, r2
 8005e5a:	009b      	lsls	r3, r3, #2
 8005e5c:	4a15      	ldr	r2, [pc, #84]	; (8005eb4 <prvAddNewTaskToReadyList+0xd8>)
 8005e5e:	441a      	add	r2, r3
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	3304      	adds	r3, #4
 8005e64:	4619      	mov	r1, r3
 8005e66:	4610      	mov	r0, r2
 8005e68:	f7fe fddb 	bl	8004a22 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005e6c:	f001 fbe2 	bl	8007634 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005e70:	4b0d      	ldr	r3, [pc, #52]	; (8005ea8 <prvAddNewTaskToReadyList+0xcc>)
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	2b00      	cmp	r3, #0
 8005e76:	d00e      	beq.n	8005e96 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005e78:	4b0a      	ldr	r3, [pc, #40]	; (8005ea4 <prvAddNewTaskToReadyList+0xc8>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e82:	429a      	cmp	r2, r3
 8005e84:	d207      	bcs.n	8005e96 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005e86:	4b0c      	ldr	r3, [pc, #48]	; (8005eb8 <prvAddNewTaskToReadyList+0xdc>)
 8005e88:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8c:	601a      	str	r2, [r3, #0]
 8005e8e:	f3bf 8f4f 	dsb	sy
 8005e92:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e96:	bf00      	nop
 8005e98:	3708      	adds	r7, #8
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000b34 	.word	0x20000b34
 8005ea4:	20000660 	.word	0x20000660
 8005ea8:	20000b40 	.word	0x20000b40
 8005eac:	20000b50 	.word	0x20000b50
 8005eb0:	20000b3c 	.word	0x20000b3c
 8005eb4:	20000664 	.word	0x20000664
 8005eb8:	e000ed04 	.word	0xe000ed04

08005ebc <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005ebc:	b580      	push	{r7, lr}
 8005ebe:	b084      	sub	sp, #16
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005ec4:	f001 fb86 	bl	80075d4 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d102      	bne.n	8005ed4 <vTaskDelete+0x18>
 8005ece:	4b2c      	ldr	r3, [pc, #176]	; (8005f80 <vTaskDelete+0xc4>)
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	e000      	b.n	8005ed6 <vTaskDelete+0x1a>
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	3304      	adds	r3, #4
 8005edc:	4618      	mov	r0, r3
 8005ede:	f7fe fdfd 	bl	8004adc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005ee2:	68fb      	ldr	r3, [r7, #12]
 8005ee4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d004      	beq.n	8005ef4 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005eea:	68fb      	ldr	r3, [r7, #12]
 8005eec:	3318      	adds	r3, #24
 8005eee:	4618      	mov	r0, r3
 8005ef0:	f7fe fdf4 	bl	8004adc <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005ef4:	4b23      	ldr	r3, [pc, #140]	; (8005f84 <vTaskDelete+0xc8>)
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	3301      	adds	r3, #1
 8005efa:	4a22      	ldr	r2, [pc, #136]	; (8005f84 <vTaskDelete+0xc8>)
 8005efc:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005efe:	4b20      	ldr	r3, [pc, #128]	; (8005f80 <vTaskDelete+0xc4>)
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68fa      	ldr	r2, [r7, #12]
 8005f04:	429a      	cmp	r2, r3
 8005f06:	d10b      	bne.n	8005f20 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	3304      	adds	r3, #4
 8005f0c:	4619      	mov	r1, r3
 8005f0e:	481e      	ldr	r0, [pc, #120]	; (8005f88 <vTaskDelete+0xcc>)
 8005f10:	f7fe fd87 	bl	8004a22 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005f14:	4b1d      	ldr	r3, [pc, #116]	; (8005f8c <vTaskDelete+0xd0>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	3301      	adds	r3, #1
 8005f1a:	4a1c      	ldr	r2, [pc, #112]	; (8005f8c <vTaskDelete+0xd0>)
 8005f1c:	6013      	str	r3, [r2, #0]
 8005f1e:	e009      	b.n	8005f34 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005f20:	4b1b      	ldr	r3, [pc, #108]	; (8005f90 <vTaskDelete+0xd4>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3b01      	subs	r3, #1
 8005f26:	4a1a      	ldr	r2, [pc, #104]	; (8005f90 <vTaskDelete+0xd4>)
 8005f28:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005f2a:	68f8      	ldr	r0, [r7, #12]
 8005f2c:	f000 fc98 	bl	8006860 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005f30:	f000 fcca 	bl	80068c8 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005f34:	f001 fb7e 	bl	8007634 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005f38:	4b16      	ldr	r3, [pc, #88]	; (8005f94 <vTaskDelete+0xd8>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d01b      	beq.n	8005f78 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8005f40:	4b0f      	ldr	r3, [pc, #60]	; (8005f80 <vTaskDelete+0xc4>)
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	68fa      	ldr	r2, [r7, #12]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d116      	bne.n	8005f78 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005f4a:	4b13      	ldr	r3, [pc, #76]	; (8005f98 <vTaskDelete+0xdc>)
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d00a      	beq.n	8005f68 <vTaskDelete+0xac>
	__asm volatile
 8005f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f56:	f383 8811 	msr	BASEPRI, r3
 8005f5a:	f3bf 8f6f 	isb	sy
 8005f5e:	f3bf 8f4f 	dsb	sy
 8005f62:	60bb      	str	r3, [r7, #8]
}
 8005f64:	bf00      	nop
 8005f66:	e7fe      	b.n	8005f66 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8005f68:	4b0c      	ldr	r3, [pc, #48]	; (8005f9c <vTaskDelete+0xe0>)
 8005f6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f6e:	601a      	str	r2, [r3, #0]
 8005f70:	f3bf 8f4f 	dsb	sy
 8005f74:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005f78:	bf00      	nop
 8005f7a:	3710      	adds	r7, #16
 8005f7c:	46bd      	mov	sp, r7
 8005f7e:	bd80      	pop	{r7, pc}
 8005f80:	20000660 	.word	0x20000660
 8005f84:	20000b50 	.word	0x20000b50
 8005f88:	20000b08 	.word	0x20000b08
 8005f8c:	20000b1c 	.word	0x20000b1c
 8005f90:	20000b34 	.word	0x20000b34
 8005f94:	20000b40 	.word	0x20000b40
 8005f98:	20000b5c 	.word	0x20000b5c
 8005f9c:	e000ed04 	.word	0xe000ed04

08005fa0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005fa0:	b580      	push	{r7, lr}
 8005fa2:	b084      	sub	sp, #16
 8005fa4:	af00      	add	r7, sp, #0
 8005fa6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005fa8:	2300      	movs	r3, #0
 8005faa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d017      	beq.n	8005fe2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005fb2:	4b13      	ldr	r3, [pc, #76]	; (8006000 <vTaskDelay+0x60>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d00a      	beq.n	8005fd0 <vTaskDelay+0x30>
	__asm volatile
 8005fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fbe:	f383 8811 	msr	BASEPRI, r3
 8005fc2:	f3bf 8f6f 	isb	sy
 8005fc6:	f3bf 8f4f 	dsb	sy
 8005fca:	60bb      	str	r3, [r7, #8]
}
 8005fcc:	bf00      	nop
 8005fce:	e7fe      	b.n	8005fce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005fd0:	f000 f88a 	bl	80060e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fd4:	2100      	movs	r1, #0
 8005fd6:	6878      	ldr	r0, [r7, #4]
 8005fd8:	f000 fe30 	bl	8006c3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fdc:	f000 f892 	bl	8006104 <xTaskResumeAll>
 8005fe0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	2b00      	cmp	r3, #0
 8005fe6:	d107      	bne.n	8005ff8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005fe8:	4b06      	ldr	r3, [pc, #24]	; (8006004 <vTaskDelay+0x64>)
 8005fea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fee:	601a      	str	r2, [r3, #0]
 8005ff0:	f3bf 8f4f 	dsb	sy
 8005ff4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005ff8:	bf00      	nop
 8005ffa:	3710      	adds	r7, #16
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	20000b5c 	.word	0x20000b5c
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b08a      	sub	sp, #40	; 0x28
 800600c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800600e:	2300      	movs	r3, #0
 8006010:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006012:	2300      	movs	r3, #0
 8006014:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006016:	463a      	mov	r2, r7
 8006018:	1d39      	adds	r1, r7, #4
 800601a:	f107 0308 	add.w	r3, r7, #8
 800601e:	4618      	mov	r0, r3
 8006020:	f7fe fc9e 	bl	8004960 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006024:	6839      	ldr	r1, [r7, #0]
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	68ba      	ldr	r2, [r7, #8]
 800602a:	9202      	str	r2, [sp, #8]
 800602c:	9301      	str	r3, [sp, #4]
 800602e:	2300      	movs	r3, #0
 8006030:	9300      	str	r3, [sp, #0]
 8006032:	2300      	movs	r3, #0
 8006034:	460a      	mov	r2, r1
 8006036:	4924      	ldr	r1, [pc, #144]	; (80060c8 <vTaskStartScheduler+0xc0>)
 8006038:	4824      	ldr	r0, [pc, #144]	; (80060cc <vTaskStartScheduler+0xc4>)
 800603a:	f7ff fd87 	bl	8005b4c <xTaskCreateStatic>
 800603e:	4603      	mov	r3, r0
 8006040:	4a23      	ldr	r2, [pc, #140]	; (80060d0 <vTaskStartScheduler+0xc8>)
 8006042:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006044:	4b22      	ldr	r3, [pc, #136]	; (80060d0 <vTaskStartScheduler+0xc8>)
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	2b00      	cmp	r3, #0
 800604a:	d002      	beq.n	8006052 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800604c:	2301      	movs	r3, #1
 800604e:	617b      	str	r3, [r7, #20]
 8006050:	e001      	b.n	8006056 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006052:	2300      	movs	r3, #0
 8006054:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006056:	697b      	ldr	r3, [r7, #20]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d102      	bne.n	8006062 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800605c:	f000 fe42 	bl	8006ce4 <xTimerCreateTimerTask>
 8006060:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	2b01      	cmp	r3, #1
 8006066:	d11b      	bne.n	80060a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8006068:	f04f 0350 	mov.w	r3, #80	; 0x50
 800606c:	f383 8811 	msr	BASEPRI, r3
 8006070:	f3bf 8f6f 	isb	sy
 8006074:	f3bf 8f4f 	dsb	sy
 8006078:	613b      	str	r3, [r7, #16]
}
 800607a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800607c:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <vTaskStartScheduler+0xcc>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	3354      	adds	r3, #84	; 0x54
 8006082:	4a15      	ldr	r2, [pc, #84]	; (80060d8 <vTaskStartScheduler+0xd0>)
 8006084:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006086:	4b15      	ldr	r3, [pc, #84]	; (80060dc <vTaskStartScheduler+0xd4>)
 8006088:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800608c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800608e:	4b14      	ldr	r3, [pc, #80]	; (80060e0 <vTaskStartScheduler+0xd8>)
 8006090:	2201      	movs	r2, #1
 8006092:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006094:	4b13      	ldr	r3, [pc, #76]	; (80060e4 <vTaskStartScheduler+0xdc>)
 8006096:	2200      	movs	r2, #0
 8006098:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800609a:	f001 f9f9 	bl	8007490 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800609e:	e00e      	b.n	80060be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80060a0:	697b      	ldr	r3, [r7, #20]
 80060a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80060a6:	d10a      	bne.n	80060be <vTaskStartScheduler+0xb6>
	__asm volatile
 80060a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060ac:	f383 8811 	msr	BASEPRI, r3
 80060b0:	f3bf 8f6f 	isb	sy
 80060b4:	f3bf 8f4f 	dsb	sy
 80060b8:	60fb      	str	r3, [r7, #12]
}
 80060ba:	bf00      	nop
 80060bc:	e7fe      	b.n	80060bc <vTaskStartScheduler+0xb4>
}
 80060be:	bf00      	nop
 80060c0:	3718      	adds	r7, #24
 80060c2:	46bd      	mov	sp, r7
 80060c4:	bd80      	pop	{r7, pc}
 80060c6:	bf00      	nop
 80060c8:	0800903c 	.word	0x0800903c
 80060cc:	08006755 	.word	0x08006755
 80060d0:	20000b58 	.word	0x20000b58
 80060d4:	20000660 	.word	0x20000660
 80060d8:	2000003c 	.word	0x2000003c
 80060dc:	20000b54 	.word	0x20000b54
 80060e0:	20000b40 	.word	0x20000b40
 80060e4:	20000b38 	.word	0x20000b38

080060e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060e8:	b480      	push	{r7}
 80060ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060ec:	4b04      	ldr	r3, [pc, #16]	; (8006100 <vTaskSuspendAll+0x18>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3301      	adds	r3, #1
 80060f2:	4a03      	ldr	r2, [pc, #12]	; (8006100 <vTaskSuspendAll+0x18>)
 80060f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060f6:	bf00      	nop
 80060f8:	46bd      	mov	sp, r7
 80060fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fe:	4770      	bx	lr
 8006100:	20000b5c 	.word	0x20000b5c

08006104 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b084      	sub	sp, #16
 8006108:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800610a:	2300      	movs	r3, #0
 800610c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800610e:	2300      	movs	r3, #0
 8006110:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006112:	4b42      	ldr	r3, [pc, #264]	; (800621c <xTaskResumeAll+0x118>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d10a      	bne.n	8006130 <xTaskResumeAll+0x2c>
	__asm volatile
 800611a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800611e:	f383 8811 	msr	BASEPRI, r3
 8006122:	f3bf 8f6f 	isb	sy
 8006126:	f3bf 8f4f 	dsb	sy
 800612a:	603b      	str	r3, [r7, #0]
}
 800612c:	bf00      	nop
 800612e:	e7fe      	b.n	800612e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006130:	f001 fa50 	bl	80075d4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006134:	4b39      	ldr	r3, [pc, #228]	; (800621c <xTaskResumeAll+0x118>)
 8006136:	681b      	ldr	r3, [r3, #0]
 8006138:	3b01      	subs	r3, #1
 800613a:	4a38      	ldr	r2, [pc, #224]	; (800621c <xTaskResumeAll+0x118>)
 800613c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800613e:	4b37      	ldr	r3, [pc, #220]	; (800621c <xTaskResumeAll+0x118>)
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	2b00      	cmp	r3, #0
 8006144:	d162      	bne.n	800620c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006146:	4b36      	ldr	r3, [pc, #216]	; (8006220 <xTaskResumeAll+0x11c>)
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	2b00      	cmp	r3, #0
 800614c:	d05e      	beq.n	800620c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800614e:	e02f      	b.n	80061b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006150:	4b34      	ldr	r3, [pc, #208]	; (8006224 <xTaskResumeAll+0x120>)
 8006152:	68db      	ldr	r3, [r3, #12]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	3318      	adds	r3, #24
 800615c:	4618      	mov	r0, r3
 800615e:	f7fe fcbd 	bl	8004adc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	3304      	adds	r3, #4
 8006166:	4618      	mov	r0, r3
 8006168:	f7fe fcb8 	bl	8004adc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800616c:	68fb      	ldr	r3, [r7, #12]
 800616e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006170:	4b2d      	ldr	r3, [pc, #180]	; (8006228 <xTaskResumeAll+0x124>)
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	429a      	cmp	r2, r3
 8006176:	d903      	bls.n	8006180 <xTaskResumeAll+0x7c>
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617c:	4a2a      	ldr	r2, [pc, #168]	; (8006228 <xTaskResumeAll+0x124>)
 800617e:	6013      	str	r3, [r2, #0]
 8006180:	68fb      	ldr	r3, [r7, #12]
 8006182:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	4a27      	ldr	r2, [pc, #156]	; (800622c <xTaskResumeAll+0x128>)
 800618e:	441a      	add	r2, r3
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	3304      	adds	r3, #4
 8006194:	4619      	mov	r1, r3
 8006196:	4610      	mov	r0, r2
 8006198:	f7fe fc43 	bl	8004a22 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800619c:	68fb      	ldr	r3, [r7, #12]
 800619e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80061a0:	4b23      	ldr	r3, [pc, #140]	; (8006230 <xTaskResumeAll+0x12c>)
 80061a2:	681b      	ldr	r3, [r3, #0]
 80061a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a6:	429a      	cmp	r2, r3
 80061a8:	d302      	bcc.n	80061b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80061aa:	4b22      	ldr	r3, [pc, #136]	; (8006234 <xTaskResumeAll+0x130>)
 80061ac:	2201      	movs	r2, #1
 80061ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061b0:	4b1c      	ldr	r3, [pc, #112]	; (8006224 <xTaskResumeAll+0x120>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d1cb      	bne.n	8006150 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d001      	beq.n	80061c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80061be:	f000 fb83 	bl	80068c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80061c2:	4b1d      	ldr	r3, [pc, #116]	; (8006238 <xTaskResumeAll+0x134>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d010      	beq.n	80061f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061ce:	f000 f86b 	bl	80062a8 <xTaskIncrementTick>
 80061d2:	4603      	mov	r3, r0
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80061d8:	4b16      	ldr	r3, [pc, #88]	; (8006234 <xTaskResumeAll+0x130>)
 80061da:	2201      	movs	r2, #1
 80061dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	3b01      	subs	r3, #1
 80061e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b00      	cmp	r3, #0
 80061e8:	d1f1      	bne.n	80061ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80061ea:	4b13      	ldr	r3, [pc, #76]	; (8006238 <xTaskResumeAll+0x134>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061f0:	4b10      	ldr	r3, [pc, #64]	; (8006234 <xTaskResumeAll+0x130>)
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d009      	beq.n	800620c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061f8:	2301      	movs	r3, #1
 80061fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061fc:	4b0f      	ldr	r3, [pc, #60]	; (800623c <xTaskResumeAll+0x138>)
 80061fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006202:	601a      	str	r2, [r3, #0]
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800620c:	f001 fa12 	bl	8007634 <vPortExitCritical>

	return xAlreadyYielded;
 8006210:	68bb      	ldr	r3, [r7, #8]
}
 8006212:	4618      	mov	r0, r3
 8006214:	3710      	adds	r7, #16
 8006216:	46bd      	mov	sp, r7
 8006218:	bd80      	pop	{r7, pc}
 800621a:	bf00      	nop
 800621c:	20000b5c 	.word	0x20000b5c
 8006220:	20000b34 	.word	0x20000b34
 8006224:	20000af4 	.word	0x20000af4
 8006228:	20000b3c 	.word	0x20000b3c
 800622c:	20000664 	.word	0x20000664
 8006230:	20000660 	.word	0x20000660
 8006234:	20000b48 	.word	0x20000b48
 8006238:	20000b44 	.word	0x20000b44
 800623c:	e000ed04 	.word	0xe000ed04

08006240 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006240:	b480      	push	{r7}
 8006242:	b083      	sub	sp, #12
 8006244:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006246:	4b05      	ldr	r3, [pc, #20]	; (800625c <xTaskGetTickCount+0x1c>)
 8006248:	681b      	ldr	r3, [r3, #0]
 800624a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800624c:	687b      	ldr	r3, [r7, #4]
}
 800624e:	4618      	mov	r0, r3
 8006250:	370c      	adds	r7, #12
 8006252:	46bd      	mov	sp, r7
 8006254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006258:	4770      	bx	lr
 800625a:	bf00      	nop
 800625c:	20000b38 	.word	0x20000b38

08006260 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8006260:	b480      	push	{r7}
 8006262:	b085      	sub	sp, #20
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	2b00      	cmp	r3, #0
 800626c:	d102      	bne.n	8006274 <pcTaskGetName+0x14>
 800626e:	4b0d      	ldr	r3, [pc, #52]	; (80062a4 <pcTaskGetName+0x44>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	e000      	b.n	8006276 <pcTaskGetName+0x16>
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d10a      	bne.n	8006294 <pcTaskGetName+0x34>
	__asm volatile
 800627e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006282:	f383 8811 	msr	BASEPRI, r3
 8006286:	f3bf 8f6f 	isb	sy
 800628a:	f3bf 8f4f 	dsb	sy
 800628e:	60bb      	str	r3, [r7, #8]
}
 8006290:	bf00      	nop
 8006292:	e7fe      	b.n	8006292 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	3334      	adds	r3, #52	; 0x34
}
 8006298:	4618      	mov	r0, r3
 800629a:	3714      	adds	r7, #20
 800629c:	46bd      	mov	sp, r7
 800629e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062a2:	4770      	bx	lr
 80062a4:	20000660 	.word	0x20000660

080062a8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b086      	sub	sp, #24
 80062ac:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062ae:	2300      	movs	r3, #0
 80062b0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b2:	4b4f      	ldr	r3, [pc, #316]	; (80063f0 <xTaskIncrementTick+0x148>)
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	f040 808f 	bne.w	80063da <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062bc:	4b4d      	ldr	r3, [pc, #308]	; (80063f4 <xTaskIncrementTick+0x14c>)
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	3301      	adds	r3, #1
 80062c2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062c4:	4a4b      	ldr	r2, [pc, #300]	; (80063f4 <xTaskIncrementTick+0x14c>)
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	2b00      	cmp	r3, #0
 80062ce:	d120      	bne.n	8006312 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 80062d0:	4b49      	ldr	r3, [pc, #292]	; (80063f8 <xTaskIncrementTick+0x150>)
 80062d2:	681b      	ldr	r3, [r3, #0]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00a      	beq.n	80062f0 <xTaskIncrementTick+0x48>
	__asm volatile
 80062da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062de:	f383 8811 	msr	BASEPRI, r3
 80062e2:	f3bf 8f6f 	isb	sy
 80062e6:	f3bf 8f4f 	dsb	sy
 80062ea:	603b      	str	r3, [r7, #0]
}
 80062ec:	bf00      	nop
 80062ee:	e7fe      	b.n	80062ee <xTaskIncrementTick+0x46>
 80062f0:	4b41      	ldr	r3, [pc, #260]	; (80063f8 <xTaskIncrementTick+0x150>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	60fb      	str	r3, [r7, #12]
 80062f6:	4b41      	ldr	r3, [pc, #260]	; (80063fc <xTaskIncrementTick+0x154>)
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	4a3f      	ldr	r2, [pc, #252]	; (80063f8 <xTaskIncrementTick+0x150>)
 80062fc:	6013      	str	r3, [r2, #0]
 80062fe:	4a3f      	ldr	r2, [pc, #252]	; (80063fc <xTaskIncrementTick+0x154>)
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	6013      	str	r3, [r2, #0]
 8006304:	4b3e      	ldr	r3, [pc, #248]	; (8006400 <xTaskIncrementTick+0x158>)
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	3301      	adds	r3, #1
 800630a:	4a3d      	ldr	r2, [pc, #244]	; (8006400 <xTaskIncrementTick+0x158>)
 800630c:	6013      	str	r3, [r2, #0]
 800630e:	f000 fadb 	bl	80068c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006312:	4b3c      	ldr	r3, [pc, #240]	; (8006404 <xTaskIncrementTick+0x15c>)
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	693a      	ldr	r2, [r7, #16]
 8006318:	429a      	cmp	r2, r3
 800631a:	d349      	bcc.n	80063b0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800631c:	4b36      	ldr	r3, [pc, #216]	; (80063f8 <xTaskIncrementTick+0x150>)
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	2b00      	cmp	r3, #0
 8006324:	d104      	bne.n	8006330 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006326:	4b37      	ldr	r3, [pc, #220]	; (8006404 <xTaskIncrementTick+0x15c>)
 8006328:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800632c:	601a      	str	r2, [r3, #0]
					break;
 800632e:	e03f      	b.n	80063b0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006330:	4b31      	ldr	r3, [pc, #196]	; (80063f8 <xTaskIncrementTick+0x150>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	68db      	ldr	r3, [r3, #12]
 8006336:	68db      	ldr	r3, [r3, #12]
 8006338:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800633a:	68bb      	ldr	r3, [r7, #8]
 800633c:	685b      	ldr	r3, [r3, #4]
 800633e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	429a      	cmp	r2, r3
 8006346:	d203      	bcs.n	8006350 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006348:	4a2e      	ldr	r2, [pc, #184]	; (8006404 <xTaskIncrementTick+0x15c>)
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800634e:	e02f      	b.n	80063b0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006350:	68bb      	ldr	r3, [r7, #8]
 8006352:	3304      	adds	r3, #4
 8006354:	4618      	mov	r0, r3
 8006356:	f7fe fbc1 	bl	8004adc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800635e:	2b00      	cmp	r3, #0
 8006360:	d004      	beq.n	800636c <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	3318      	adds	r3, #24
 8006366:	4618      	mov	r0, r3
 8006368:	f7fe fbb8 	bl	8004adc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800636c:	68bb      	ldr	r3, [r7, #8]
 800636e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006370:	4b25      	ldr	r3, [pc, #148]	; (8006408 <xTaskIncrementTick+0x160>)
 8006372:	681b      	ldr	r3, [r3, #0]
 8006374:	429a      	cmp	r2, r3
 8006376:	d903      	bls.n	8006380 <xTaskIncrementTick+0xd8>
 8006378:	68bb      	ldr	r3, [r7, #8]
 800637a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800637c:	4a22      	ldr	r2, [pc, #136]	; (8006408 <xTaskIncrementTick+0x160>)
 800637e:	6013      	str	r3, [r2, #0]
 8006380:	68bb      	ldr	r3, [r7, #8]
 8006382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006384:	4613      	mov	r3, r2
 8006386:	009b      	lsls	r3, r3, #2
 8006388:	4413      	add	r3, r2
 800638a:	009b      	lsls	r3, r3, #2
 800638c:	4a1f      	ldr	r2, [pc, #124]	; (800640c <xTaskIncrementTick+0x164>)
 800638e:	441a      	add	r2, r3
 8006390:	68bb      	ldr	r3, [r7, #8]
 8006392:	3304      	adds	r3, #4
 8006394:	4619      	mov	r1, r3
 8006396:	4610      	mov	r0, r2
 8006398:	f7fe fb43 	bl	8004a22 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063a0:	4b1b      	ldr	r3, [pc, #108]	; (8006410 <xTaskIncrementTick+0x168>)
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a6:	429a      	cmp	r2, r3
 80063a8:	d3b8      	bcc.n	800631c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80063aa:	2301      	movs	r3, #1
 80063ac:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063ae:	e7b5      	b.n	800631c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063b0:	4b17      	ldr	r3, [pc, #92]	; (8006410 <xTaskIncrementTick+0x168>)
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80063b6:	4915      	ldr	r1, [pc, #84]	; (800640c <xTaskIncrementTick+0x164>)
 80063b8:	4613      	mov	r3, r2
 80063ba:	009b      	lsls	r3, r3, #2
 80063bc:	4413      	add	r3, r2
 80063be:	009b      	lsls	r3, r3, #2
 80063c0:	440b      	add	r3, r1
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	2b01      	cmp	r3, #1
 80063c6:	d901      	bls.n	80063cc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80063c8:	2301      	movs	r3, #1
 80063ca:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063cc:	4b11      	ldr	r3, [pc, #68]	; (8006414 <xTaskIncrementTick+0x16c>)
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d007      	beq.n	80063e4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	e004      	b.n	80063e4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80063da:	4b0f      	ldr	r3, [pc, #60]	; (8006418 <xTaskIncrementTick+0x170>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	3301      	adds	r3, #1
 80063e0:	4a0d      	ldr	r2, [pc, #52]	; (8006418 <xTaskIncrementTick+0x170>)
 80063e2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80063e4:	697b      	ldr	r3, [r7, #20]
}
 80063e6:	4618      	mov	r0, r3
 80063e8:	3718      	adds	r7, #24
 80063ea:	46bd      	mov	sp, r7
 80063ec:	bd80      	pop	{r7, pc}
 80063ee:	bf00      	nop
 80063f0:	20000b5c 	.word	0x20000b5c
 80063f4:	20000b38 	.word	0x20000b38
 80063f8:	20000aec 	.word	0x20000aec
 80063fc:	20000af0 	.word	0x20000af0
 8006400:	20000b4c 	.word	0x20000b4c
 8006404:	20000b54 	.word	0x20000b54
 8006408:	20000b3c 	.word	0x20000b3c
 800640c:	20000664 	.word	0x20000664
 8006410:	20000660 	.word	0x20000660
 8006414:	20000b48 	.word	0x20000b48
 8006418:	20000b44 	.word	0x20000b44

0800641c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800641c:	b480      	push	{r7}
 800641e:	b085      	sub	sp, #20
 8006420:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006422:	4b2a      	ldr	r3, [pc, #168]	; (80064cc <vTaskSwitchContext+0xb0>)
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800642a:	4b29      	ldr	r3, [pc, #164]	; (80064d0 <vTaskSwitchContext+0xb4>)
 800642c:	2201      	movs	r2, #1
 800642e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006430:	e046      	b.n	80064c0 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006432:	4b27      	ldr	r3, [pc, #156]	; (80064d0 <vTaskSwitchContext+0xb4>)
 8006434:	2200      	movs	r2, #0
 8006436:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006438:	4b26      	ldr	r3, [pc, #152]	; (80064d4 <vTaskSwitchContext+0xb8>)
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	60fb      	str	r3, [r7, #12]
 800643e:	e010      	b.n	8006462 <vTaskSwitchContext+0x46>
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d10a      	bne.n	800645c <vTaskSwitchContext+0x40>
	__asm volatile
 8006446:	f04f 0350 	mov.w	r3, #80	; 0x50
 800644a:	f383 8811 	msr	BASEPRI, r3
 800644e:	f3bf 8f6f 	isb	sy
 8006452:	f3bf 8f4f 	dsb	sy
 8006456:	607b      	str	r3, [r7, #4]
}
 8006458:	bf00      	nop
 800645a:	e7fe      	b.n	800645a <vTaskSwitchContext+0x3e>
 800645c:	68fb      	ldr	r3, [r7, #12]
 800645e:	3b01      	subs	r3, #1
 8006460:	60fb      	str	r3, [r7, #12]
 8006462:	491d      	ldr	r1, [pc, #116]	; (80064d8 <vTaskSwitchContext+0xbc>)
 8006464:	68fa      	ldr	r2, [r7, #12]
 8006466:	4613      	mov	r3, r2
 8006468:	009b      	lsls	r3, r3, #2
 800646a:	4413      	add	r3, r2
 800646c:	009b      	lsls	r3, r3, #2
 800646e:	440b      	add	r3, r1
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	2b00      	cmp	r3, #0
 8006474:	d0e4      	beq.n	8006440 <vTaskSwitchContext+0x24>
 8006476:	68fa      	ldr	r2, [r7, #12]
 8006478:	4613      	mov	r3, r2
 800647a:	009b      	lsls	r3, r3, #2
 800647c:	4413      	add	r3, r2
 800647e:	009b      	lsls	r3, r3, #2
 8006480:	4a15      	ldr	r2, [pc, #84]	; (80064d8 <vTaskSwitchContext+0xbc>)
 8006482:	4413      	add	r3, r2
 8006484:	60bb      	str	r3, [r7, #8]
 8006486:	68bb      	ldr	r3, [r7, #8]
 8006488:	685b      	ldr	r3, [r3, #4]
 800648a:	685a      	ldr	r2, [r3, #4]
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	605a      	str	r2, [r3, #4]
 8006490:	68bb      	ldr	r3, [r7, #8]
 8006492:	685a      	ldr	r2, [r3, #4]
 8006494:	68bb      	ldr	r3, [r7, #8]
 8006496:	3308      	adds	r3, #8
 8006498:	429a      	cmp	r2, r3
 800649a:	d104      	bne.n	80064a6 <vTaskSwitchContext+0x8a>
 800649c:	68bb      	ldr	r3, [r7, #8]
 800649e:	685b      	ldr	r3, [r3, #4]
 80064a0:	685a      	ldr	r2, [r3, #4]
 80064a2:	68bb      	ldr	r3, [r7, #8]
 80064a4:	605a      	str	r2, [r3, #4]
 80064a6:	68bb      	ldr	r3, [r7, #8]
 80064a8:	685b      	ldr	r3, [r3, #4]
 80064aa:	68db      	ldr	r3, [r3, #12]
 80064ac:	4a0b      	ldr	r2, [pc, #44]	; (80064dc <vTaskSwitchContext+0xc0>)
 80064ae:	6013      	str	r3, [r2, #0]
 80064b0:	4a08      	ldr	r2, [pc, #32]	; (80064d4 <vTaskSwitchContext+0xb8>)
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064b6:	4b09      	ldr	r3, [pc, #36]	; (80064dc <vTaskSwitchContext+0xc0>)
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	3354      	adds	r3, #84	; 0x54
 80064bc:	4a08      	ldr	r2, [pc, #32]	; (80064e0 <vTaskSwitchContext+0xc4>)
 80064be:	6013      	str	r3, [r2, #0]
}
 80064c0:	bf00      	nop
 80064c2:	3714      	adds	r7, #20
 80064c4:	46bd      	mov	sp, r7
 80064c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ca:	4770      	bx	lr
 80064cc:	20000b5c 	.word	0x20000b5c
 80064d0:	20000b48 	.word	0x20000b48
 80064d4:	20000b3c 	.word	0x20000b3c
 80064d8:	20000664 	.word	0x20000664
 80064dc:	20000660 	.word	0x20000660
 80064e0:	2000003c 	.word	0x2000003c

080064e4 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80064e4:	b580      	push	{r7, lr}
 80064e6:	b084      	sub	sp, #16
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
 80064ec:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d10a      	bne.n	800650a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80064f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f8:	f383 8811 	msr	BASEPRI, r3
 80064fc:	f3bf 8f6f 	isb	sy
 8006500:	f3bf 8f4f 	dsb	sy
 8006504:	60fb      	str	r3, [r7, #12]
}
 8006506:	bf00      	nop
 8006508:	e7fe      	b.n	8006508 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800650a:	4b07      	ldr	r3, [pc, #28]	; (8006528 <vTaskPlaceOnEventList+0x44>)
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	3318      	adds	r3, #24
 8006510:	4619      	mov	r1, r3
 8006512:	6878      	ldr	r0, [r7, #4]
 8006514:	f7fe faa9 	bl	8004a6a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006518:	2101      	movs	r1, #1
 800651a:	6838      	ldr	r0, [r7, #0]
 800651c:	f000 fb8e 	bl	8006c3c <prvAddCurrentTaskToDelayedList>
}
 8006520:	bf00      	nop
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}
 8006528:	20000660 	.word	0x20000660

0800652c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800652c:	b580      	push	{r7, lr}
 800652e:	b086      	sub	sp, #24
 8006530:	af00      	add	r7, sp, #0
 8006532:	60f8      	str	r0, [r7, #12]
 8006534:	60b9      	str	r1, [r7, #8]
 8006536:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d10a      	bne.n	8006554 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800653e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006542:	f383 8811 	msr	BASEPRI, r3
 8006546:	f3bf 8f6f 	isb	sy
 800654a:	f3bf 8f4f 	dsb	sy
 800654e:	617b      	str	r3, [r7, #20]
}
 8006550:	bf00      	nop
 8006552:	e7fe      	b.n	8006552 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006554:	4b0a      	ldr	r3, [pc, #40]	; (8006580 <vTaskPlaceOnEventListRestricted+0x54>)
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	3318      	adds	r3, #24
 800655a:	4619      	mov	r1, r3
 800655c:	68f8      	ldr	r0, [r7, #12]
 800655e:	f7fe fa60 	bl	8004a22 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d002      	beq.n	800656e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006568:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800656c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800656e:	6879      	ldr	r1, [r7, #4]
 8006570:	68b8      	ldr	r0, [r7, #8]
 8006572:	f000 fb63 	bl	8006c3c <prvAddCurrentTaskToDelayedList>
	}
 8006576:	bf00      	nop
 8006578:	3718      	adds	r7, #24
 800657a:	46bd      	mov	sp, r7
 800657c:	bd80      	pop	{r7, pc}
 800657e:	bf00      	nop
 8006580:	20000660 	.word	0x20000660

08006584 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006584:	b580      	push	{r7, lr}
 8006586:	b086      	sub	sp, #24
 8006588:	af00      	add	r7, sp, #0
 800658a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	68db      	ldr	r3, [r3, #12]
 8006590:	68db      	ldr	r3, [r3, #12]
 8006592:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006594:	693b      	ldr	r3, [r7, #16]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d10a      	bne.n	80065b0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800659a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800659e:	f383 8811 	msr	BASEPRI, r3
 80065a2:	f3bf 8f6f 	isb	sy
 80065a6:	f3bf 8f4f 	dsb	sy
 80065aa:	60fb      	str	r3, [r7, #12]
}
 80065ac:	bf00      	nop
 80065ae:	e7fe      	b.n	80065ae <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065b0:	693b      	ldr	r3, [r7, #16]
 80065b2:	3318      	adds	r3, #24
 80065b4:	4618      	mov	r0, r3
 80065b6:	f7fe fa91 	bl	8004adc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ba:	4b1e      	ldr	r3, [pc, #120]	; (8006634 <xTaskRemoveFromEventList+0xb0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d11d      	bne.n	80065fe <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065c2:	693b      	ldr	r3, [r7, #16]
 80065c4:	3304      	adds	r3, #4
 80065c6:	4618      	mov	r0, r3
 80065c8:	f7fe fa88 	bl	8004adc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065cc:	693b      	ldr	r3, [r7, #16]
 80065ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065d0:	4b19      	ldr	r3, [pc, #100]	; (8006638 <xTaskRemoveFromEventList+0xb4>)
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	429a      	cmp	r2, r3
 80065d6:	d903      	bls.n	80065e0 <xTaskRemoveFromEventList+0x5c>
 80065d8:	693b      	ldr	r3, [r7, #16]
 80065da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065dc:	4a16      	ldr	r2, [pc, #88]	; (8006638 <xTaskRemoveFromEventList+0xb4>)
 80065de:	6013      	str	r3, [r2, #0]
 80065e0:	693b      	ldr	r3, [r7, #16]
 80065e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065e4:	4613      	mov	r3, r2
 80065e6:	009b      	lsls	r3, r3, #2
 80065e8:	4413      	add	r3, r2
 80065ea:	009b      	lsls	r3, r3, #2
 80065ec:	4a13      	ldr	r2, [pc, #76]	; (800663c <xTaskRemoveFromEventList+0xb8>)
 80065ee:	441a      	add	r2, r3
 80065f0:	693b      	ldr	r3, [r7, #16]
 80065f2:	3304      	adds	r3, #4
 80065f4:	4619      	mov	r1, r3
 80065f6:	4610      	mov	r0, r2
 80065f8:	f7fe fa13 	bl	8004a22 <vListInsertEnd>
 80065fc:	e005      	b.n	800660a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	3318      	adds	r3, #24
 8006602:	4619      	mov	r1, r3
 8006604:	480e      	ldr	r0, [pc, #56]	; (8006640 <xTaskRemoveFromEventList+0xbc>)
 8006606:	f7fe fa0c 	bl	8004a22 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800660e:	4b0d      	ldr	r3, [pc, #52]	; (8006644 <xTaskRemoveFromEventList+0xc0>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	429a      	cmp	r2, r3
 8006616:	d905      	bls.n	8006624 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006618:	2301      	movs	r3, #1
 800661a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800661c:	4b0a      	ldr	r3, [pc, #40]	; (8006648 <xTaskRemoveFromEventList+0xc4>)
 800661e:	2201      	movs	r2, #1
 8006620:	601a      	str	r2, [r3, #0]
 8006622:	e001      	b.n	8006628 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006624:	2300      	movs	r3, #0
 8006626:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006628:	697b      	ldr	r3, [r7, #20]
}
 800662a:	4618      	mov	r0, r3
 800662c:	3718      	adds	r7, #24
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	20000b5c 	.word	0x20000b5c
 8006638:	20000b3c 	.word	0x20000b3c
 800663c:	20000664 	.word	0x20000664
 8006640:	20000af4 	.word	0x20000af4
 8006644:	20000660 	.word	0x20000660
 8006648:	20000b48 	.word	0x20000b48

0800664c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006654:	4b06      	ldr	r3, [pc, #24]	; (8006670 <vTaskInternalSetTimeOutState+0x24>)
 8006656:	681a      	ldr	r2, [r3, #0]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800665c:	4b05      	ldr	r3, [pc, #20]	; (8006674 <vTaskInternalSetTimeOutState+0x28>)
 800665e:	681a      	ldr	r2, [r3, #0]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	605a      	str	r2, [r3, #4]
}
 8006664:	bf00      	nop
 8006666:	370c      	adds	r7, #12
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	20000b4c 	.word	0x20000b4c
 8006674:	20000b38 	.word	0x20000b38

08006678 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006678:	b580      	push	{r7, lr}
 800667a:	b088      	sub	sp, #32
 800667c:	af00      	add	r7, sp, #0
 800667e:	6078      	str	r0, [r7, #4]
 8006680:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2b00      	cmp	r3, #0
 8006686:	d10a      	bne.n	800669e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800668c:	f383 8811 	msr	BASEPRI, r3
 8006690:	f3bf 8f6f 	isb	sy
 8006694:	f3bf 8f4f 	dsb	sy
 8006698:	613b      	str	r3, [r7, #16]
}
 800669a:	bf00      	nop
 800669c:	e7fe      	b.n	800669c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d10a      	bne.n	80066ba <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80066a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066a8:	f383 8811 	msr	BASEPRI, r3
 80066ac:	f3bf 8f6f 	isb	sy
 80066b0:	f3bf 8f4f 	dsb	sy
 80066b4:	60fb      	str	r3, [r7, #12]
}
 80066b6:	bf00      	nop
 80066b8:	e7fe      	b.n	80066b8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80066ba:	f000 ff8b 	bl	80075d4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066be:	4b1d      	ldr	r3, [pc, #116]	; (8006734 <xTaskCheckForTimeOut+0xbc>)
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	685b      	ldr	r3, [r3, #4]
 80066c8:	69ba      	ldr	r2, [r7, #24]
 80066ca:	1ad3      	subs	r3, r2, r3
 80066cc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80066d6:	d102      	bne.n	80066de <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80066d8:	2300      	movs	r3, #0
 80066da:	61fb      	str	r3, [r7, #28]
 80066dc:	e023      	b.n	8006726 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681a      	ldr	r2, [r3, #0]
 80066e2:	4b15      	ldr	r3, [pc, #84]	; (8006738 <xTaskCheckForTimeOut+0xc0>)
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d007      	beq.n	80066fa <xTaskCheckForTimeOut+0x82>
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	685b      	ldr	r3, [r3, #4]
 80066ee:	69ba      	ldr	r2, [r7, #24]
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d302      	bcc.n	80066fa <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80066f4:	2301      	movs	r3, #1
 80066f6:	61fb      	str	r3, [r7, #28]
 80066f8:	e015      	b.n	8006726 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80066fa:	683b      	ldr	r3, [r7, #0]
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	697a      	ldr	r2, [r7, #20]
 8006700:	429a      	cmp	r2, r3
 8006702:	d20b      	bcs.n	800671c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006704:	683b      	ldr	r3, [r7, #0]
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	1ad2      	subs	r2, r2, r3
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f7ff ff9b 	bl	800664c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006716:	2300      	movs	r3, #0
 8006718:	61fb      	str	r3, [r7, #28]
 800671a:	e004      	b.n	8006726 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	2200      	movs	r2, #0
 8006720:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006722:	2301      	movs	r3, #1
 8006724:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006726:	f000 ff85 	bl	8007634 <vPortExitCritical>

	return xReturn;
 800672a:	69fb      	ldr	r3, [r7, #28]
}
 800672c:	4618      	mov	r0, r3
 800672e:	3720      	adds	r7, #32
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}
 8006734:	20000b38 	.word	0x20000b38
 8006738:	20000b4c 	.word	0x20000b4c

0800673c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006740:	4b03      	ldr	r3, [pc, #12]	; (8006750 <vTaskMissedYield+0x14>)
 8006742:	2201      	movs	r2, #1
 8006744:	601a      	str	r2, [r3, #0]
}
 8006746:	bf00      	nop
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000b48 	.word	0x20000b48

08006754 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b082      	sub	sp, #8
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800675c:	f000 f852 	bl	8006804 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006760:	4b06      	ldr	r3, [pc, #24]	; (800677c <prvIdleTask+0x28>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	2b01      	cmp	r3, #1
 8006766:	d9f9      	bls.n	800675c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006768:	4b05      	ldr	r3, [pc, #20]	; (8006780 <prvIdleTask+0x2c>)
 800676a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800676e:	601a      	str	r2, [r3, #0]
 8006770:	f3bf 8f4f 	dsb	sy
 8006774:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006778:	e7f0      	b.n	800675c <prvIdleTask+0x8>
 800677a:	bf00      	nop
 800677c:	20000664 	.word	0x20000664
 8006780:	e000ed04 	.word	0xe000ed04

08006784 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006784:	b580      	push	{r7, lr}
 8006786:	b082      	sub	sp, #8
 8006788:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800678a:	2300      	movs	r3, #0
 800678c:	607b      	str	r3, [r7, #4]
 800678e:	e00c      	b.n	80067aa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006790:	687a      	ldr	r2, [r7, #4]
 8006792:	4613      	mov	r3, r2
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	4413      	add	r3, r2
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	4a12      	ldr	r2, [pc, #72]	; (80067e4 <prvInitialiseTaskLists+0x60>)
 800679c:	4413      	add	r3, r2
 800679e:	4618      	mov	r0, r3
 80067a0:	f7fe f912 	bl	80049c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	3301      	adds	r3, #1
 80067a8:	607b      	str	r3, [r7, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2b37      	cmp	r3, #55	; 0x37
 80067ae:	d9ef      	bls.n	8006790 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067b0:	480d      	ldr	r0, [pc, #52]	; (80067e8 <prvInitialiseTaskLists+0x64>)
 80067b2:	f7fe f909 	bl	80049c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067b6:	480d      	ldr	r0, [pc, #52]	; (80067ec <prvInitialiseTaskLists+0x68>)
 80067b8:	f7fe f906 	bl	80049c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067bc:	480c      	ldr	r0, [pc, #48]	; (80067f0 <prvInitialiseTaskLists+0x6c>)
 80067be:	f7fe f903 	bl	80049c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067c2:	480c      	ldr	r0, [pc, #48]	; (80067f4 <prvInitialiseTaskLists+0x70>)
 80067c4:	f7fe f900 	bl	80049c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067c8:	480b      	ldr	r0, [pc, #44]	; (80067f8 <prvInitialiseTaskLists+0x74>)
 80067ca:	f7fe f8fd 	bl	80049c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80067ce:	4b0b      	ldr	r3, [pc, #44]	; (80067fc <prvInitialiseTaskLists+0x78>)
 80067d0:	4a05      	ldr	r2, [pc, #20]	; (80067e8 <prvInitialiseTaskLists+0x64>)
 80067d2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80067d4:	4b0a      	ldr	r3, [pc, #40]	; (8006800 <prvInitialiseTaskLists+0x7c>)
 80067d6:	4a05      	ldr	r2, [pc, #20]	; (80067ec <prvInitialiseTaskLists+0x68>)
 80067d8:	601a      	str	r2, [r3, #0]
}
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000664 	.word	0x20000664
 80067e8:	20000ac4 	.word	0x20000ac4
 80067ec:	20000ad8 	.word	0x20000ad8
 80067f0:	20000af4 	.word	0x20000af4
 80067f4:	20000b08 	.word	0x20000b08
 80067f8:	20000b20 	.word	0x20000b20
 80067fc:	20000aec 	.word	0x20000aec
 8006800:	20000af0 	.word	0x20000af0

08006804 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b082      	sub	sp, #8
 8006808:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800680a:	e019      	b.n	8006840 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800680c:	f000 fee2 	bl	80075d4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006810:	4b10      	ldr	r3, [pc, #64]	; (8006854 <prvCheckTasksWaitingTermination+0x50>)
 8006812:	68db      	ldr	r3, [r3, #12]
 8006814:	68db      	ldr	r3, [r3, #12]
 8006816:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	3304      	adds	r3, #4
 800681c:	4618      	mov	r0, r3
 800681e:	f7fe f95d 	bl	8004adc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006822:	4b0d      	ldr	r3, [pc, #52]	; (8006858 <prvCheckTasksWaitingTermination+0x54>)
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	3b01      	subs	r3, #1
 8006828:	4a0b      	ldr	r2, [pc, #44]	; (8006858 <prvCheckTasksWaitingTermination+0x54>)
 800682a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800682c:	4b0b      	ldr	r3, [pc, #44]	; (800685c <prvCheckTasksWaitingTermination+0x58>)
 800682e:	681b      	ldr	r3, [r3, #0]
 8006830:	3b01      	subs	r3, #1
 8006832:	4a0a      	ldr	r2, [pc, #40]	; (800685c <prvCheckTasksWaitingTermination+0x58>)
 8006834:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006836:	f000 fefd 	bl	8007634 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 f810 	bl	8006860 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <prvCheckTasksWaitingTermination+0x58>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d1e1      	bne.n	800680c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006848:	bf00      	nop
 800684a:	bf00      	nop
 800684c:	3708      	adds	r7, #8
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	20000b08 	.word	0x20000b08
 8006858:	20000b34 	.word	0x20000b34
 800685c:	20000b1c 	.word	0x20000b1c

08006860 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006860:	b580      	push	{r7, lr}
 8006862:	b084      	sub	sp, #16
 8006864:	af00      	add	r7, sp, #0
 8006866:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	3354      	adds	r3, #84	; 0x54
 800686c:	4618      	mov	r0, r3
 800686e:	f001 fc1d 	bl	80080ac <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006878:	2b00      	cmp	r3, #0
 800687a:	d108      	bne.n	800688e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006880:	4618      	mov	r0, r3
 8006882:	f001 f895 	bl	80079b0 <vPortFree>
				vPortFree( pxTCB );
 8006886:	6878      	ldr	r0, [r7, #4]
 8006888:	f001 f892 	bl	80079b0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800688c:	e018      	b.n	80068c0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8006894:	2b01      	cmp	r3, #1
 8006896:	d103      	bne.n	80068a0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006898:	6878      	ldr	r0, [r7, #4]
 800689a:	f001 f889 	bl	80079b0 <vPortFree>
	}
 800689e:	e00f      	b.n	80068c0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80068a6:	2b02      	cmp	r3, #2
 80068a8:	d00a      	beq.n	80068c0 <prvDeleteTCB+0x60>
	__asm volatile
 80068aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ae:	f383 8811 	msr	BASEPRI, r3
 80068b2:	f3bf 8f6f 	isb	sy
 80068b6:	f3bf 8f4f 	dsb	sy
 80068ba:	60fb      	str	r3, [r7, #12]
}
 80068bc:	bf00      	nop
 80068be:	e7fe      	b.n	80068be <prvDeleteTCB+0x5e>
	}
 80068c0:	bf00      	nop
 80068c2:	3710      	adds	r7, #16
 80068c4:	46bd      	mov	sp, r7
 80068c6:	bd80      	pop	{r7, pc}

080068c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80068c8:	b480      	push	{r7}
 80068ca:	b083      	sub	sp, #12
 80068cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ce:	4b0c      	ldr	r3, [pc, #48]	; (8006900 <prvResetNextTaskUnblockTime+0x38>)
 80068d0:	681b      	ldr	r3, [r3, #0]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d104      	bne.n	80068e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80068d8:	4b0a      	ldr	r3, [pc, #40]	; (8006904 <prvResetNextTaskUnblockTime+0x3c>)
 80068da:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80068de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80068e0:	e008      	b.n	80068f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068e2:	4b07      	ldr	r3, [pc, #28]	; (8006900 <prvResetNextTaskUnblockTime+0x38>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68db      	ldr	r3, [r3, #12]
 80068e8:	68db      	ldr	r3, [r3, #12]
 80068ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	4a04      	ldr	r2, [pc, #16]	; (8006904 <prvResetNextTaskUnblockTime+0x3c>)
 80068f2:	6013      	str	r3, [r2, #0]
}
 80068f4:	bf00      	nop
 80068f6:	370c      	adds	r7, #12
 80068f8:	46bd      	mov	sp, r7
 80068fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fe:	4770      	bx	lr
 8006900:	20000aec 	.word	0x20000aec
 8006904:	20000b54 	.word	0x20000b54

08006908 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8006908:	b480      	push	{r7}
 800690a:	b083      	sub	sp, #12
 800690c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800690e:	4b05      	ldr	r3, [pc, #20]	; (8006924 <xTaskGetCurrentTaskHandle+0x1c>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	607b      	str	r3, [r7, #4]

		return xReturn;
 8006914:	687b      	ldr	r3, [r7, #4]
	}
 8006916:	4618      	mov	r0, r3
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	20000660 	.word	0x20000660

08006928 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006928:	b480      	push	{r7}
 800692a:	b083      	sub	sp, #12
 800692c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800692e:	4b0b      	ldr	r3, [pc, #44]	; (800695c <xTaskGetSchedulerState+0x34>)
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d102      	bne.n	800693c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006936:	2301      	movs	r3, #1
 8006938:	607b      	str	r3, [r7, #4]
 800693a:	e008      	b.n	800694e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800693c:	4b08      	ldr	r3, [pc, #32]	; (8006960 <xTaskGetSchedulerState+0x38>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d102      	bne.n	800694a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006944:	2302      	movs	r3, #2
 8006946:	607b      	str	r3, [r7, #4]
 8006948:	e001      	b.n	800694e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800694a:	2300      	movs	r3, #0
 800694c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800694e:	687b      	ldr	r3, [r7, #4]
	}
 8006950:	4618      	mov	r0, r3
 8006952:	370c      	adds	r7, #12
 8006954:	46bd      	mov	sp, r7
 8006956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800695a:	4770      	bx	lr
 800695c:	20000b40 	.word	0x20000b40
 8006960:	20000b5c 	.word	0x20000b5c

08006964 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8006964:	b580      	push	{r7, lr}
 8006966:	b084      	sub	sp, #16
 8006968:	af00      	add	r7, sp, #0
 800696a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8006970:	2300      	movs	r3, #0
 8006972:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	2b00      	cmp	r3, #0
 8006978:	d051      	beq.n	8006a1e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800697a:	68bb      	ldr	r3, [r7, #8]
 800697c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697e:	4b2a      	ldr	r3, [pc, #168]	; (8006a28 <xTaskPriorityInherit+0xc4>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006984:	429a      	cmp	r2, r3
 8006986:	d241      	bcs.n	8006a0c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	699b      	ldr	r3, [r3, #24]
 800698c:	2b00      	cmp	r3, #0
 800698e:	db06      	blt.n	800699e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006990:	4b25      	ldr	r3, [pc, #148]	; (8006a28 <xTaskPriorityInherit+0xc4>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006996:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800699e:	68bb      	ldr	r3, [r7, #8]
 80069a0:	6959      	ldr	r1, [r3, #20]
 80069a2:	68bb      	ldr	r3, [r7, #8]
 80069a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069a6:	4613      	mov	r3, r2
 80069a8:	009b      	lsls	r3, r3, #2
 80069aa:	4413      	add	r3, r2
 80069ac:	009b      	lsls	r3, r3, #2
 80069ae:	4a1f      	ldr	r2, [pc, #124]	; (8006a2c <xTaskPriorityInherit+0xc8>)
 80069b0:	4413      	add	r3, r2
 80069b2:	4299      	cmp	r1, r3
 80069b4:	d122      	bne.n	80069fc <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069b6:	68bb      	ldr	r3, [r7, #8]
 80069b8:	3304      	adds	r3, #4
 80069ba:	4618      	mov	r0, r3
 80069bc:	f7fe f88e 	bl	8004adc <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069c0:	4b19      	ldr	r3, [pc, #100]	; (8006a28 <xTaskPriorityInherit+0xc4>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c6:	68bb      	ldr	r3, [r7, #8]
 80069c8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069ce:	4b18      	ldr	r3, [pc, #96]	; (8006a30 <xTaskPriorityInherit+0xcc>)
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	429a      	cmp	r2, r3
 80069d4:	d903      	bls.n	80069de <xTaskPriorityInherit+0x7a>
 80069d6:	68bb      	ldr	r3, [r7, #8]
 80069d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069da:	4a15      	ldr	r2, [pc, #84]	; (8006a30 <xTaskPriorityInherit+0xcc>)
 80069dc:	6013      	str	r3, [r2, #0]
 80069de:	68bb      	ldr	r3, [r7, #8]
 80069e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e2:	4613      	mov	r3, r2
 80069e4:	009b      	lsls	r3, r3, #2
 80069e6:	4413      	add	r3, r2
 80069e8:	009b      	lsls	r3, r3, #2
 80069ea:	4a10      	ldr	r2, [pc, #64]	; (8006a2c <xTaskPriorityInherit+0xc8>)
 80069ec:	441a      	add	r2, r3
 80069ee:	68bb      	ldr	r3, [r7, #8]
 80069f0:	3304      	adds	r3, #4
 80069f2:	4619      	mov	r1, r3
 80069f4:	4610      	mov	r0, r2
 80069f6:	f7fe f814 	bl	8004a22 <vListInsertEnd>
 80069fa:	e004      	b.n	8006a06 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80069fc:	4b0a      	ldr	r3, [pc, #40]	; (8006a28 <xTaskPriorityInherit+0xc4>)
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a02:	68bb      	ldr	r3, [r7, #8]
 8006a04:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8006a06:	2301      	movs	r3, #1
 8006a08:	60fb      	str	r3, [r7, #12]
 8006a0a:	e008      	b.n	8006a1e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8006a0c:	68bb      	ldr	r3, [r7, #8]
 8006a0e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006a10:	4b05      	ldr	r3, [pc, #20]	; (8006a28 <xTaskPriorityInherit+0xc4>)
 8006a12:	681b      	ldr	r3, [r3, #0]
 8006a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a16:	429a      	cmp	r2, r3
 8006a18:	d201      	bcs.n	8006a1e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8006a1a:	2301      	movs	r3, #1
 8006a1c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
	}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3710      	adds	r7, #16
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000660 	.word	0x20000660
 8006a2c:	20000664 	.word	0x20000664
 8006a30:	20000b3c 	.word	0x20000b3c

08006a34 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006a40:	2300      	movs	r3, #0
 8006a42:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	2b00      	cmp	r3, #0
 8006a48:	d056      	beq.n	8006af8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006a4a:	4b2e      	ldr	r3, [pc, #184]	; (8006b04 <xTaskPriorityDisinherit+0xd0>)
 8006a4c:	681b      	ldr	r3, [r3, #0]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	429a      	cmp	r2, r3
 8006a52:	d00a      	beq.n	8006a6a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8006a54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a58:	f383 8811 	msr	BASEPRI, r3
 8006a5c:	f3bf 8f6f 	isb	sy
 8006a60:	f3bf 8f4f 	dsb	sy
 8006a64:	60fb      	str	r3, [r7, #12]
}
 8006a66:	bf00      	nop
 8006a68:	e7fe      	b.n	8006a68 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d10a      	bne.n	8006a88 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006a72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a76:	f383 8811 	msr	BASEPRI, r3
 8006a7a:	f3bf 8f6f 	isb	sy
 8006a7e:	f3bf 8f4f 	dsb	sy
 8006a82:	60bb      	str	r3, [r7, #8]
}
 8006a84:	bf00      	nop
 8006a86:	e7fe      	b.n	8006a86 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006a8c:	1e5a      	subs	r2, r3, #1
 8006a8e:	693b      	ldr	r3, [r7, #16]
 8006a90:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006a96:	693b      	ldr	r3, [r7, #16]
 8006a98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006a9a:	429a      	cmp	r2, r3
 8006a9c:	d02c      	beq.n	8006af8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006a9e:	693b      	ldr	r3, [r7, #16]
 8006aa0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d128      	bne.n	8006af8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006aa6:	693b      	ldr	r3, [r7, #16]
 8006aa8:	3304      	adds	r3, #4
 8006aaa:	4618      	mov	r0, r3
 8006aac:	f7fe f816 	bl	8004adc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006ab0:	693b      	ldr	r3, [r7, #16]
 8006ab2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab8:	693b      	ldr	r3, [r7, #16]
 8006aba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006abc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006ac0:	693b      	ldr	r3, [r7, #16]
 8006ac2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ac4:	693b      	ldr	r3, [r7, #16]
 8006ac6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ac8:	4b0f      	ldr	r3, [pc, #60]	; (8006b08 <xTaskPriorityDisinherit+0xd4>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	429a      	cmp	r2, r3
 8006ace:	d903      	bls.n	8006ad8 <xTaskPriorityDisinherit+0xa4>
 8006ad0:	693b      	ldr	r3, [r7, #16]
 8006ad2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ad4:	4a0c      	ldr	r2, [pc, #48]	; (8006b08 <xTaskPriorityDisinherit+0xd4>)
 8006ad6:	6013      	str	r3, [r2, #0]
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006adc:	4613      	mov	r3, r2
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	4413      	add	r3, r2
 8006ae2:	009b      	lsls	r3, r3, #2
 8006ae4:	4a09      	ldr	r2, [pc, #36]	; (8006b0c <xTaskPriorityDisinherit+0xd8>)
 8006ae6:	441a      	add	r2, r3
 8006ae8:	693b      	ldr	r3, [r7, #16]
 8006aea:	3304      	adds	r3, #4
 8006aec:	4619      	mov	r1, r3
 8006aee:	4610      	mov	r0, r2
 8006af0:	f7fd ff97 	bl	8004a22 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006af4:	2301      	movs	r3, #1
 8006af6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006af8:	697b      	ldr	r3, [r7, #20]
	}
 8006afa:	4618      	mov	r0, r3
 8006afc:	3718      	adds	r7, #24
 8006afe:	46bd      	mov	sp, r7
 8006b00:	bd80      	pop	{r7, pc}
 8006b02:	bf00      	nop
 8006b04:	20000660 	.word	0x20000660
 8006b08:	20000b3c 	.word	0x20000b3c
 8006b0c:	20000664 	.word	0x20000664

08006b10 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b088      	sub	sp, #32
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8006b1e:	2301      	movs	r3, #1
 8006b20:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d06a      	beq.n	8006bfe <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8006b28:	69bb      	ldr	r3, [r7, #24]
 8006b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b2c:	2b00      	cmp	r3, #0
 8006b2e:	d10a      	bne.n	8006b46 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8006b30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b34:	f383 8811 	msr	BASEPRI, r3
 8006b38:	f3bf 8f6f 	isb	sy
 8006b3c:	f3bf 8f4f 	dsb	sy
 8006b40:	60fb      	str	r3, [r7, #12]
}
 8006b42:	bf00      	nop
 8006b44:	e7fe      	b.n	8006b44 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8006b46:	69bb      	ldr	r3, [r7, #24]
 8006b48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b4a:	683a      	ldr	r2, [r7, #0]
 8006b4c:	429a      	cmp	r2, r3
 8006b4e:	d902      	bls.n	8006b56 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	61fb      	str	r3, [r7, #28]
 8006b54:	e002      	b.n	8006b5c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8006b56:	69bb      	ldr	r3, [r7, #24]
 8006b58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006b5a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8006b5c:	69bb      	ldr	r3, [r7, #24]
 8006b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b60:	69fa      	ldr	r2, [r7, #28]
 8006b62:	429a      	cmp	r2, r3
 8006b64:	d04b      	beq.n	8006bfe <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8006b66:	69bb      	ldr	r3, [r7, #24]
 8006b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006b6a:	697a      	ldr	r2, [r7, #20]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d146      	bne.n	8006bfe <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8006b70:	4b25      	ldr	r3, [pc, #148]	; (8006c08 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69ba      	ldr	r2, [r7, #24]
 8006b76:	429a      	cmp	r2, r3
 8006b78:	d10a      	bne.n	8006b90 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8006b7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b7e:	f383 8811 	msr	BASEPRI, r3
 8006b82:	f3bf 8f6f 	isb	sy
 8006b86:	f3bf 8f4f 	dsb	sy
 8006b8a:	60bb      	str	r3, [r7, #8]
}
 8006b8c:	bf00      	nop
 8006b8e:	e7fe      	b.n	8006b8e <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8006b90:	69bb      	ldr	r3, [r7, #24]
 8006b92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8006b96:	69bb      	ldr	r3, [r7, #24]
 8006b98:	69fa      	ldr	r2, [r7, #28]
 8006b9a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8006b9c:	69bb      	ldr	r3, [r7, #24]
 8006b9e:	699b      	ldr	r3, [r3, #24]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	db04      	blt.n	8006bae <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba4:	69fb      	ldr	r3, [r7, #28]
 8006ba6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006baa:	69bb      	ldr	r3, [r7, #24]
 8006bac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8006bae:	69bb      	ldr	r3, [r7, #24]
 8006bb0:	6959      	ldr	r1, [r3, #20]
 8006bb2:	693a      	ldr	r2, [r7, #16]
 8006bb4:	4613      	mov	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	4413      	add	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4a13      	ldr	r2, [pc, #76]	; (8006c0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006bbe:	4413      	add	r3, r2
 8006bc0:	4299      	cmp	r1, r3
 8006bc2:	d11c      	bne.n	8006bfe <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006bc4:	69bb      	ldr	r3, [r7, #24]
 8006bc6:	3304      	adds	r3, #4
 8006bc8:	4618      	mov	r0, r3
 8006bca:	f7fd ff87 	bl	8004adc <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8006bce:	69bb      	ldr	r3, [r7, #24]
 8006bd0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bd2:	4b0f      	ldr	r3, [pc, #60]	; (8006c10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	429a      	cmp	r2, r3
 8006bd8:	d903      	bls.n	8006be2 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8006bda:	69bb      	ldr	r3, [r7, #24]
 8006bdc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006bde:	4a0c      	ldr	r2, [pc, #48]	; (8006c10 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8006be0:	6013      	str	r3, [r2, #0]
 8006be2:	69bb      	ldr	r3, [r7, #24]
 8006be4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006be6:	4613      	mov	r3, r2
 8006be8:	009b      	lsls	r3, r3, #2
 8006bea:	4413      	add	r3, r2
 8006bec:	009b      	lsls	r3, r3, #2
 8006bee:	4a07      	ldr	r2, [pc, #28]	; (8006c0c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8006bf0:	441a      	add	r2, r3
 8006bf2:	69bb      	ldr	r3, [r7, #24]
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4619      	mov	r1, r3
 8006bf8:	4610      	mov	r0, r2
 8006bfa:	f7fd ff12 	bl	8004a22 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006bfe:	bf00      	nop
 8006c00:	3720      	adds	r7, #32
 8006c02:	46bd      	mov	sp, r7
 8006c04:	bd80      	pop	{r7, pc}
 8006c06:	bf00      	nop
 8006c08:	20000660 	.word	0x20000660
 8006c0c:	20000664 	.word	0x20000664
 8006c10:	20000b3c 	.word	0x20000b3c

08006c14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8006c14:	b480      	push	{r7}
 8006c16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8006c18:	4b07      	ldr	r3, [pc, #28]	; (8006c38 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d004      	beq.n	8006c2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8006c20:	4b05      	ldr	r3, [pc, #20]	; (8006c38 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006c26:	3201      	adds	r2, #1
 8006c28:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8006c2a:	4b03      	ldr	r3, [pc, #12]	; (8006c38 <pvTaskIncrementMutexHeldCount+0x24>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
	}
 8006c2e:	4618      	mov	r0, r3
 8006c30:	46bd      	mov	sp, r7
 8006c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c36:	4770      	bx	lr
 8006c38:	20000660 	.word	0x20000660

08006c3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006c3c:	b580      	push	{r7, lr}
 8006c3e:	b084      	sub	sp, #16
 8006c40:	af00      	add	r7, sp, #0
 8006c42:	6078      	str	r0, [r7, #4]
 8006c44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006c46:	4b21      	ldr	r3, [pc, #132]	; (8006ccc <prvAddCurrentTaskToDelayedList+0x90>)
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006c4c:	4b20      	ldr	r3, [pc, #128]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	3304      	adds	r3, #4
 8006c52:	4618      	mov	r0, r3
 8006c54:	f7fd ff42 	bl	8004adc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006c5e:	d10a      	bne.n	8006c76 <prvAddCurrentTaskToDelayedList+0x3a>
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d007      	beq.n	8006c76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c66:	4b1a      	ldr	r3, [pc, #104]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	3304      	adds	r3, #4
 8006c6c:	4619      	mov	r1, r3
 8006c6e:	4819      	ldr	r0, [pc, #100]	; (8006cd4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006c70:	f7fd fed7 	bl	8004a22 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006c74:	e026      	b.n	8006cc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006c76:	68fa      	ldr	r2, [r7, #12]
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	4413      	add	r3, r2
 8006c7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006c7e:	4b14      	ldr	r3, [pc, #80]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	68ba      	ldr	r2, [r7, #8]
 8006c84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006c86:	68ba      	ldr	r2, [r7, #8]
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	429a      	cmp	r2, r3
 8006c8c:	d209      	bcs.n	8006ca2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006c8e:	4b12      	ldr	r3, [pc, #72]	; (8006cd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006c90:	681a      	ldr	r2, [r3, #0]
 8006c92:	4b0f      	ldr	r3, [pc, #60]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006c94:	681b      	ldr	r3, [r3, #0]
 8006c96:	3304      	adds	r3, #4
 8006c98:	4619      	mov	r1, r3
 8006c9a:	4610      	mov	r0, r2
 8006c9c:	f7fd fee5 	bl	8004a6a <vListInsert>
}
 8006ca0:	e010      	b.n	8006cc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ca2:	4b0e      	ldr	r3, [pc, #56]	; (8006cdc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	4b0a      	ldr	r3, [pc, #40]	; (8006cd0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	3304      	adds	r3, #4
 8006cac:	4619      	mov	r1, r3
 8006cae:	4610      	mov	r0, r2
 8006cb0:	f7fd fedb 	bl	8004a6a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006cb4:	4b0a      	ldr	r3, [pc, #40]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	68ba      	ldr	r2, [r7, #8]
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d202      	bcs.n	8006cc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006cbe:	4a08      	ldr	r2, [pc, #32]	; (8006ce0 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006cc0:	68bb      	ldr	r3, [r7, #8]
 8006cc2:	6013      	str	r3, [r2, #0]
}
 8006cc4:	bf00      	nop
 8006cc6:	3710      	adds	r7, #16
 8006cc8:	46bd      	mov	sp, r7
 8006cca:	bd80      	pop	{r7, pc}
 8006ccc:	20000b38 	.word	0x20000b38
 8006cd0:	20000660 	.word	0x20000660
 8006cd4:	20000b20 	.word	0x20000b20
 8006cd8:	20000af0 	.word	0x20000af0
 8006cdc:	20000aec 	.word	0x20000aec
 8006ce0:	20000b54 	.word	0x20000b54

08006ce4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006ce4:	b580      	push	{r7, lr}
 8006ce6:	b08a      	sub	sp, #40	; 0x28
 8006ce8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006cea:	2300      	movs	r3, #0
 8006cec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006cee:	f000 fb07 	bl	8007300 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006cf2:	4b1c      	ldr	r3, [pc, #112]	; (8006d64 <xTimerCreateTimerTask+0x80>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d021      	beq.n	8006d3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006cfa:	2300      	movs	r3, #0
 8006cfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006d02:	1d3a      	adds	r2, r7, #4
 8006d04:	f107 0108 	add.w	r1, r7, #8
 8006d08:	f107 030c 	add.w	r3, r7, #12
 8006d0c:	4618      	mov	r0, r3
 8006d0e:	f7fd fe41 	bl	8004994 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006d12:	6879      	ldr	r1, [r7, #4]
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	68fa      	ldr	r2, [r7, #12]
 8006d18:	9202      	str	r2, [sp, #8]
 8006d1a:	9301      	str	r3, [sp, #4]
 8006d1c:	2302      	movs	r3, #2
 8006d1e:	9300      	str	r3, [sp, #0]
 8006d20:	2300      	movs	r3, #0
 8006d22:	460a      	mov	r2, r1
 8006d24:	4910      	ldr	r1, [pc, #64]	; (8006d68 <xTimerCreateTimerTask+0x84>)
 8006d26:	4811      	ldr	r0, [pc, #68]	; (8006d6c <xTimerCreateTimerTask+0x88>)
 8006d28:	f7fe ff10 	bl	8005b4c <xTaskCreateStatic>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	4a10      	ldr	r2, [pc, #64]	; (8006d70 <xTimerCreateTimerTask+0x8c>)
 8006d30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006d32:	4b0f      	ldr	r3, [pc, #60]	; (8006d70 <xTimerCreateTimerTask+0x8c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d001      	beq.n	8006d3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006d3a:	2301      	movs	r3, #1
 8006d3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006d3e:	697b      	ldr	r3, [r7, #20]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d10a      	bne.n	8006d5a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	613b      	str	r3, [r7, #16]
}
 8006d56:	bf00      	nop
 8006d58:	e7fe      	b.n	8006d58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006d5a:	697b      	ldr	r3, [r7, #20]
}
 8006d5c:	4618      	mov	r0, r3
 8006d5e:	3718      	adds	r7, #24
 8006d60:	46bd      	mov	sp, r7
 8006d62:	bd80      	pop	{r7, pc}
 8006d64:	20000b90 	.word	0x20000b90
 8006d68:	08009044 	.word	0x08009044
 8006d6c:	08006ea9 	.word	0x08006ea9
 8006d70:	20000b94 	.word	0x20000b94

08006d74 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b08a      	sub	sp, #40	; 0x28
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	60f8      	str	r0, [r7, #12]
 8006d7c:	60b9      	str	r1, [r7, #8]
 8006d7e:	607a      	str	r2, [r7, #4]
 8006d80:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006d82:	2300      	movs	r3, #0
 8006d84:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10a      	bne.n	8006da2 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	623b      	str	r3, [r7, #32]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006da2:	4b1a      	ldr	r3, [pc, #104]	; (8006e0c <xTimerGenericCommand+0x98>)
 8006da4:	681b      	ldr	r3, [r3, #0]
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d02a      	beq.n	8006e00 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006daa:	68bb      	ldr	r3, [r7, #8]
 8006dac:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006db6:	68bb      	ldr	r3, [r7, #8]
 8006db8:	2b05      	cmp	r3, #5
 8006dba:	dc18      	bgt.n	8006dee <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006dbc:	f7ff fdb4 	bl	8006928 <xTaskGetSchedulerState>
 8006dc0:	4603      	mov	r3, r0
 8006dc2:	2b02      	cmp	r3, #2
 8006dc4:	d109      	bne.n	8006dda <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006dc6:	4b11      	ldr	r3, [pc, #68]	; (8006e0c <xTimerGenericCommand+0x98>)
 8006dc8:	6818      	ldr	r0, [r3, #0]
 8006dca:	f107 0110 	add.w	r1, r7, #16
 8006dce:	2300      	movs	r3, #0
 8006dd0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006dd2:	f7fe f855 	bl	8004e80 <xQueueGenericSend>
 8006dd6:	6278      	str	r0, [r7, #36]	; 0x24
 8006dd8:	e012      	b.n	8006e00 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006dda:	4b0c      	ldr	r3, [pc, #48]	; (8006e0c <xTimerGenericCommand+0x98>)
 8006ddc:	6818      	ldr	r0, [r3, #0]
 8006dde:	f107 0110 	add.w	r1, r7, #16
 8006de2:	2300      	movs	r3, #0
 8006de4:	2200      	movs	r2, #0
 8006de6:	f7fe f84b 	bl	8004e80 <xQueueGenericSend>
 8006dea:	6278      	str	r0, [r7, #36]	; 0x24
 8006dec:	e008      	b.n	8006e00 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006dee:	4b07      	ldr	r3, [pc, #28]	; (8006e0c <xTimerGenericCommand+0x98>)
 8006df0:	6818      	ldr	r0, [r3, #0]
 8006df2:	f107 0110 	add.w	r1, r7, #16
 8006df6:	2300      	movs	r3, #0
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	f7fe f93f 	bl	800507c <xQueueGenericSendFromISR>
 8006dfe:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006e02:	4618      	mov	r0, r3
 8006e04:	3728      	adds	r7, #40	; 0x28
 8006e06:	46bd      	mov	sp, r7
 8006e08:	bd80      	pop	{r7, pc}
 8006e0a:	bf00      	nop
 8006e0c:	20000b90 	.word	0x20000b90

08006e10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006e10:	b580      	push	{r7, lr}
 8006e12:	b088      	sub	sp, #32
 8006e14:	af02      	add	r7, sp, #8
 8006e16:	6078      	str	r0, [r7, #4]
 8006e18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e1a:	4b22      	ldr	r3, [pc, #136]	; (8006ea4 <prvProcessExpiredTimer+0x94>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	68db      	ldr	r3, [r3, #12]
 8006e20:	68db      	ldr	r3, [r3, #12]
 8006e22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e24:	697b      	ldr	r3, [r7, #20]
 8006e26:	3304      	adds	r3, #4
 8006e28:	4618      	mov	r0, r3
 8006e2a:	f7fd fe57 	bl	8004adc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e34:	f003 0304 	and.w	r3, r3, #4
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d022      	beq.n	8006e82 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	699a      	ldr	r2, [r3, #24]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	18d1      	adds	r1, r2, r3
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	683a      	ldr	r2, [r7, #0]
 8006e48:	6978      	ldr	r0, [r7, #20]
 8006e4a:	f000 f8d1 	bl	8006ff0 <prvInsertTimerInActiveList>
 8006e4e:	4603      	mov	r3, r0
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d01f      	beq.n	8006e94 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006e54:	2300      	movs	r3, #0
 8006e56:	9300      	str	r3, [sp, #0]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	687a      	ldr	r2, [r7, #4]
 8006e5c:	2100      	movs	r1, #0
 8006e5e:	6978      	ldr	r0, [r7, #20]
 8006e60:	f7ff ff88 	bl	8006d74 <xTimerGenericCommand>
 8006e64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006e66:	693b      	ldr	r3, [r7, #16]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d113      	bne.n	8006e94 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006e6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e70:	f383 8811 	msr	BASEPRI, r3
 8006e74:	f3bf 8f6f 	isb	sy
 8006e78:	f3bf 8f4f 	dsb	sy
 8006e7c:	60fb      	str	r3, [r7, #12]
}
 8006e7e:	bf00      	nop
 8006e80:	e7fe      	b.n	8006e80 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006e82:	697b      	ldr	r3, [r7, #20]
 8006e84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e88:	f023 0301 	bic.w	r3, r3, #1
 8006e8c:	b2da      	uxtb	r2, r3
 8006e8e:	697b      	ldr	r3, [r7, #20]
 8006e90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006e94:	697b      	ldr	r3, [r7, #20]
 8006e96:	6a1b      	ldr	r3, [r3, #32]
 8006e98:	6978      	ldr	r0, [r7, #20]
 8006e9a:	4798      	blx	r3
}
 8006e9c:	bf00      	nop
 8006e9e:	3718      	adds	r7, #24
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}
 8006ea4:	20000b88 	.word	0x20000b88

08006ea8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006ea8:	b580      	push	{r7, lr}
 8006eaa:	b084      	sub	sp, #16
 8006eac:	af00      	add	r7, sp, #0
 8006eae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eb0:	f107 0308 	add.w	r3, r7, #8
 8006eb4:	4618      	mov	r0, r3
 8006eb6:	f000 f857 	bl	8006f68 <prvGetNextExpireTime>
 8006eba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ebc:	68bb      	ldr	r3, [r7, #8]
 8006ebe:	4619      	mov	r1, r3
 8006ec0:	68f8      	ldr	r0, [r7, #12]
 8006ec2:	f000 f803 	bl	8006ecc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006ec6:	f000 f8d5 	bl	8007074 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006eca:	e7f1      	b.n	8006eb0 <prvTimerTask+0x8>

08006ecc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b084      	sub	sp, #16
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
 8006ed4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006ed6:	f7ff f907 	bl	80060e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006eda:	f107 0308 	add.w	r3, r7, #8
 8006ede:	4618      	mov	r0, r3
 8006ee0:	f000 f866 	bl	8006fb0 <prvSampleTimeNow>
 8006ee4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006ee6:	68bb      	ldr	r3, [r7, #8]
 8006ee8:	2b00      	cmp	r3, #0
 8006eea:	d130      	bne.n	8006f4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10a      	bne.n	8006f08 <prvProcessTimerOrBlockTask+0x3c>
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	d806      	bhi.n	8006f08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006efa:	f7ff f903 	bl	8006104 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006efe:	68f9      	ldr	r1, [r7, #12]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f7ff ff85 	bl	8006e10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006f06:	e024      	b.n	8006f52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006f08:	683b      	ldr	r3, [r7, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d008      	beq.n	8006f20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006f0e:	4b13      	ldr	r3, [pc, #76]	; (8006f5c <prvProcessTimerOrBlockTask+0x90>)
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d101      	bne.n	8006f1c <prvProcessTimerOrBlockTask+0x50>
 8006f18:	2301      	movs	r3, #1
 8006f1a:	e000      	b.n	8006f1e <prvProcessTimerOrBlockTask+0x52>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006f20:	4b0f      	ldr	r3, [pc, #60]	; (8006f60 <prvProcessTimerOrBlockTask+0x94>)
 8006f22:	6818      	ldr	r0, [r3, #0]
 8006f24:	687a      	ldr	r2, [r7, #4]
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	1ad3      	subs	r3, r2, r3
 8006f2a:	683a      	ldr	r2, [r7, #0]
 8006f2c:	4619      	mov	r1, r3
 8006f2e:	f7fe fdd9 	bl	8005ae4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006f32:	f7ff f8e7 	bl	8006104 <xTaskResumeAll>
 8006f36:	4603      	mov	r3, r0
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d10a      	bne.n	8006f52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006f3c:	4b09      	ldr	r3, [pc, #36]	; (8006f64 <prvProcessTimerOrBlockTask+0x98>)
 8006f3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	f3bf 8f6f 	isb	sy
}
 8006f4c:	e001      	b.n	8006f52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006f4e:	f7ff f8d9 	bl	8006104 <xTaskResumeAll>
}
 8006f52:	bf00      	nop
 8006f54:	3710      	adds	r7, #16
 8006f56:	46bd      	mov	sp, r7
 8006f58:	bd80      	pop	{r7, pc}
 8006f5a:	bf00      	nop
 8006f5c:	20000b8c 	.word	0x20000b8c
 8006f60:	20000b90 	.word	0x20000b90
 8006f64:	e000ed04 	.word	0xe000ed04

08006f68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006f68:	b480      	push	{r7}
 8006f6a:	b085      	sub	sp, #20
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006f70:	4b0e      	ldr	r3, [pc, #56]	; (8006fac <prvGetNextExpireTime+0x44>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d101      	bne.n	8006f7e <prvGetNextExpireTime+0x16>
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	e000      	b.n	8006f80 <prvGetNextExpireTime+0x18>
 8006f7e:	2200      	movs	r2, #0
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d105      	bne.n	8006f98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006f8c:	4b07      	ldr	r3, [pc, #28]	; (8006fac <prvGetNextExpireTime+0x44>)
 8006f8e:	681b      	ldr	r3, [r3, #0]
 8006f90:	68db      	ldr	r3, [r3, #12]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	60fb      	str	r3, [r7, #12]
 8006f96:	e001      	b.n	8006f9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006f9c:	68fb      	ldr	r3, [r7, #12]
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	3714      	adds	r7, #20
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fa8:	4770      	bx	lr
 8006faa:	bf00      	nop
 8006fac:	20000b88 	.word	0x20000b88

08006fb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006fb0:	b580      	push	{r7, lr}
 8006fb2:	b084      	sub	sp, #16
 8006fb4:	af00      	add	r7, sp, #0
 8006fb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006fb8:	f7ff f942 	bl	8006240 <xTaskGetTickCount>
 8006fbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006fbe:	4b0b      	ldr	r3, [pc, #44]	; (8006fec <prvSampleTimeNow+0x3c>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68fa      	ldr	r2, [r7, #12]
 8006fc4:	429a      	cmp	r2, r3
 8006fc6:	d205      	bcs.n	8006fd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006fc8:	f000 f936 	bl	8007238 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	2201      	movs	r2, #1
 8006fd0:	601a      	str	r2, [r3, #0]
 8006fd2:	e002      	b.n	8006fda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	2200      	movs	r2, #0
 8006fd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006fda:	4a04      	ldr	r2, [pc, #16]	; (8006fec <prvSampleTimeNow+0x3c>)
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006fe0:	68fb      	ldr	r3, [r7, #12]
}
 8006fe2:	4618      	mov	r0, r3
 8006fe4:	3710      	adds	r7, #16
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop
 8006fec:	20000b98 	.word	0x20000b98

08006ff0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ff0:	b580      	push	{r7, lr}
 8006ff2:	b086      	sub	sp, #24
 8006ff4:	af00      	add	r7, sp, #0
 8006ff6:	60f8      	str	r0, [r7, #12]
 8006ff8:	60b9      	str	r1, [r7, #8]
 8006ffa:	607a      	str	r2, [r7, #4]
 8006ffc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006ffe:	2300      	movs	r3, #0
 8007000:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	68fa      	ldr	r2, [r7, #12]
 800700c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800700e:	68ba      	ldr	r2, [r7, #8]
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	429a      	cmp	r2, r3
 8007014:	d812      	bhi.n	800703c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007016:	687a      	ldr	r2, [r7, #4]
 8007018:	683b      	ldr	r3, [r7, #0]
 800701a:	1ad2      	subs	r2, r2, r3
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	699b      	ldr	r3, [r3, #24]
 8007020:	429a      	cmp	r2, r3
 8007022:	d302      	bcc.n	800702a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007024:	2301      	movs	r3, #1
 8007026:	617b      	str	r3, [r7, #20]
 8007028:	e01b      	b.n	8007062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800702a:	4b10      	ldr	r3, [pc, #64]	; (800706c <prvInsertTimerInActiveList+0x7c>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	3304      	adds	r3, #4
 8007032:	4619      	mov	r1, r3
 8007034:	4610      	mov	r0, r2
 8007036:	f7fd fd18 	bl	8004a6a <vListInsert>
 800703a:	e012      	b.n	8007062 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800703c:	687a      	ldr	r2, [r7, #4]
 800703e:	683b      	ldr	r3, [r7, #0]
 8007040:	429a      	cmp	r2, r3
 8007042:	d206      	bcs.n	8007052 <prvInsertTimerInActiveList+0x62>
 8007044:	68ba      	ldr	r2, [r7, #8]
 8007046:	683b      	ldr	r3, [r7, #0]
 8007048:	429a      	cmp	r2, r3
 800704a:	d302      	bcc.n	8007052 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800704c:	2301      	movs	r3, #1
 800704e:	617b      	str	r3, [r7, #20]
 8007050:	e007      	b.n	8007062 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007052:	4b07      	ldr	r3, [pc, #28]	; (8007070 <prvInsertTimerInActiveList+0x80>)
 8007054:	681a      	ldr	r2, [r3, #0]
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	3304      	adds	r3, #4
 800705a:	4619      	mov	r1, r3
 800705c:	4610      	mov	r0, r2
 800705e:	f7fd fd04 	bl	8004a6a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007062:	697b      	ldr	r3, [r7, #20]
}
 8007064:	4618      	mov	r0, r3
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000b8c 	.word	0x20000b8c
 8007070:	20000b88 	.word	0x20000b88

08007074 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b08e      	sub	sp, #56	; 0x38
 8007078:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800707a:	e0ca      	b.n	8007212 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	da18      	bge.n	80070b4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007082:	1d3b      	adds	r3, r7, #4
 8007084:	3304      	adds	r3, #4
 8007086:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800708a:	2b00      	cmp	r3, #0
 800708c:	d10a      	bne.n	80070a4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800708e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007092:	f383 8811 	msr	BASEPRI, r3
 8007096:	f3bf 8f6f 	isb	sy
 800709a:	f3bf 8f4f 	dsb	sy
 800709e:	61fb      	str	r3, [r7, #28]
}
 80070a0:	bf00      	nop
 80070a2:	e7fe      	b.n	80070a2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80070a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070a6:	681b      	ldr	r3, [r3, #0]
 80070a8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070aa:	6850      	ldr	r0, [r2, #4]
 80070ac:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80070ae:	6892      	ldr	r2, [r2, #8]
 80070b0:	4611      	mov	r1, r2
 80070b2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	2b00      	cmp	r3, #0
 80070b8:	f2c0 80aa 	blt.w	8007210 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80070c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070c2:	695b      	ldr	r3, [r3, #20]
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	d004      	beq.n	80070d2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80070c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80070ca:	3304      	adds	r3, #4
 80070cc:	4618      	mov	r0, r3
 80070ce:	f7fd fd05 	bl	8004adc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80070d2:	463b      	mov	r3, r7
 80070d4:	4618      	mov	r0, r3
 80070d6:	f7ff ff6b 	bl	8006fb0 <prvSampleTimeNow>
 80070da:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2b09      	cmp	r3, #9
 80070e0:	f200 8097 	bhi.w	8007212 <prvProcessReceivedCommands+0x19e>
 80070e4:	a201      	add	r2, pc, #4	; (adr r2, 80070ec <prvProcessReceivedCommands+0x78>)
 80070e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070ea:	bf00      	nop
 80070ec:	08007115 	.word	0x08007115
 80070f0:	08007115 	.word	0x08007115
 80070f4:	08007115 	.word	0x08007115
 80070f8:	08007189 	.word	0x08007189
 80070fc:	0800719d 	.word	0x0800719d
 8007100:	080071e7 	.word	0x080071e7
 8007104:	08007115 	.word	0x08007115
 8007108:	08007115 	.word	0x08007115
 800710c:	08007189 	.word	0x08007189
 8007110:	0800719d 	.word	0x0800719d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007114:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007116:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800711a:	f043 0301 	orr.w	r3, r3, #1
 800711e:	b2da      	uxtb	r2, r3
 8007120:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007122:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007126:	68ba      	ldr	r2, [r7, #8]
 8007128:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800712a:	699b      	ldr	r3, [r3, #24]
 800712c:	18d1      	adds	r1, r2, r3
 800712e:	68bb      	ldr	r3, [r7, #8]
 8007130:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007132:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007134:	f7ff ff5c 	bl	8006ff0 <prvInsertTimerInActiveList>
 8007138:	4603      	mov	r3, r0
 800713a:	2b00      	cmp	r3, #0
 800713c:	d069      	beq.n	8007212 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800713e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007140:	6a1b      	ldr	r3, [r3, #32]
 8007142:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007144:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007146:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007148:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800714c:	f003 0304 	and.w	r3, r3, #4
 8007150:	2b00      	cmp	r3, #0
 8007152:	d05e      	beq.n	8007212 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007154:	68ba      	ldr	r2, [r7, #8]
 8007156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007158:	699b      	ldr	r3, [r3, #24]
 800715a:	441a      	add	r2, r3
 800715c:	2300      	movs	r3, #0
 800715e:	9300      	str	r3, [sp, #0]
 8007160:	2300      	movs	r3, #0
 8007162:	2100      	movs	r1, #0
 8007164:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007166:	f7ff fe05 	bl	8006d74 <xTimerGenericCommand>
 800716a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800716c:	6a3b      	ldr	r3, [r7, #32]
 800716e:	2b00      	cmp	r3, #0
 8007170:	d14f      	bne.n	8007212 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	61bb      	str	r3, [r7, #24]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800718e:	f023 0301 	bic.w	r3, r3, #1
 8007192:	b2da      	uxtb	r2, r3
 8007194:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007196:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800719a:	e03a      	b.n	8007212 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800719c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800719e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071a2:	f043 0301 	orr.w	r3, r3, #1
 80071a6:	b2da      	uxtb	r2, r3
 80071a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80071ae:	68ba      	ldr	r2, [r7, #8]
 80071b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80071b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071b6:	699b      	ldr	r3, [r3, #24]
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d10a      	bne.n	80071d2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80071bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071c0:	f383 8811 	msr	BASEPRI, r3
 80071c4:	f3bf 8f6f 	isb	sy
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	617b      	str	r3, [r7, #20]
}
 80071ce:	bf00      	nop
 80071d0:	e7fe      	b.n	80071d0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80071d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071d4:	699a      	ldr	r2, [r3, #24]
 80071d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071d8:	18d1      	adds	r1, r2, r3
 80071da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80071de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071e0:	f7ff ff06 	bl	8006ff0 <prvInsertTimerInActiveList>
					break;
 80071e4:	e015      	b.n	8007212 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80071e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80071ec:	f003 0302 	and.w	r3, r3, #2
 80071f0:	2b00      	cmp	r3, #0
 80071f2:	d103      	bne.n	80071fc <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80071f4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80071f6:	f000 fbdb 	bl	80079b0 <vPortFree>
 80071fa:	e00a      	b.n	8007212 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071fe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007202:	f023 0301 	bic.w	r3, r3, #1
 8007206:	b2da      	uxtb	r2, r3
 8007208:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800720a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800720e:	e000      	b.n	8007212 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007210:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007212:	4b08      	ldr	r3, [pc, #32]	; (8007234 <prvProcessReceivedCommands+0x1c0>)
 8007214:	681b      	ldr	r3, [r3, #0]
 8007216:	1d39      	adds	r1, r7, #4
 8007218:	2200      	movs	r2, #0
 800721a:	4618      	mov	r0, r3
 800721c:	f7fe f856 	bl	80052cc <xQueueReceive>
 8007220:	4603      	mov	r3, r0
 8007222:	2b00      	cmp	r3, #0
 8007224:	f47f af2a 	bne.w	800707c <prvProcessReceivedCommands+0x8>
	}
}
 8007228:	bf00      	nop
 800722a:	bf00      	nop
 800722c:	3730      	adds	r7, #48	; 0x30
 800722e:	46bd      	mov	sp, r7
 8007230:	bd80      	pop	{r7, pc}
 8007232:	bf00      	nop
 8007234:	20000b90 	.word	0x20000b90

08007238 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007238:	b580      	push	{r7, lr}
 800723a:	b088      	sub	sp, #32
 800723c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800723e:	e048      	b.n	80072d2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007240:	4b2d      	ldr	r3, [pc, #180]	; (80072f8 <prvSwitchTimerLists+0xc0>)
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	68db      	ldr	r3, [r3, #12]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800724a:	4b2b      	ldr	r3, [pc, #172]	; (80072f8 <prvSwitchTimerLists+0xc0>)
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	68db      	ldr	r3, [r3, #12]
 8007250:	68db      	ldr	r3, [r3, #12]
 8007252:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	3304      	adds	r3, #4
 8007258:	4618      	mov	r0, r3
 800725a:	f7fd fc3f 	bl	8004adc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800725e:	68fb      	ldr	r3, [r7, #12]
 8007260:	6a1b      	ldr	r3, [r3, #32]
 8007262:	68f8      	ldr	r0, [r7, #12]
 8007264:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800726c:	f003 0304 	and.w	r3, r3, #4
 8007270:	2b00      	cmp	r3, #0
 8007272:	d02e      	beq.n	80072d2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	699b      	ldr	r3, [r3, #24]
 8007278:	693a      	ldr	r2, [r7, #16]
 800727a:	4413      	add	r3, r2
 800727c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800727e:	68ba      	ldr	r2, [r7, #8]
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	429a      	cmp	r2, r3
 8007284:	d90e      	bls.n	80072a4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	68ba      	ldr	r2, [r7, #8]
 800728a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	68fa      	ldr	r2, [r7, #12]
 8007290:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007292:	4b19      	ldr	r3, [pc, #100]	; (80072f8 <prvSwitchTimerLists+0xc0>)
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	68fb      	ldr	r3, [r7, #12]
 8007298:	3304      	adds	r3, #4
 800729a:	4619      	mov	r1, r3
 800729c:	4610      	mov	r0, r2
 800729e:	f7fd fbe4 	bl	8004a6a <vListInsert>
 80072a2:	e016      	b.n	80072d2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80072a4:	2300      	movs	r3, #0
 80072a6:	9300      	str	r3, [sp, #0]
 80072a8:	2300      	movs	r3, #0
 80072aa:	693a      	ldr	r2, [r7, #16]
 80072ac:	2100      	movs	r1, #0
 80072ae:	68f8      	ldr	r0, [r7, #12]
 80072b0:	f7ff fd60 	bl	8006d74 <xTimerGenericCommand>
 80072b4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d10a      	bne.n	80072d2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80072bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072c0:	f383 8811 	msr	BASEPRI, r3
 80072c4:	f3bf 8f6f 	isb	sy
 80072c8:	f3bf 8f4f 	dsb	sy
 80072cc:	603b      	str	r3, [r7, #0]
}
 80072ce:	bf00      	nop
 80072d0:	e7fe      	b.n	80072d0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80072d2:	4b09      	ldr	r3, [pc, #36]	; (80072f8 <prvSwitchTimerLists+0xc0>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d1b1      	bne.n	8007240 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80072dc:	4b06      	ldr	r3, [pc, #24]	; (80072f8 <prvSwitchTimerLists+0xc0>)
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80072e2:	4b06      	ldr	r3, [pc, #24]	; (80072fc <prvSwitchTimerLists+0xc4>)
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	4a04      	ldr	r2, [pc, #16]	; (80072f8 <prvSwitchTimerLists+0xc0>)
 80072e8:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80072ea:	4a04      	ldr	r2, [pc, #16]	; (80072fc <prvSwitchTimerLists+0xc4>)
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	6013      	str	r3, [r2, #0]
}
 80072f0:	bf00      	nop
 80072f2:	3718      	adds	r7, #24
 80072f4:	46bd      	mov	sp, r7
 80072f6:	bd80      	pop	{r7, pc}
 80072f8:	20000b88 	.word	0x20000b88
 80072fc:	20000b8c 	.word	0x20000b8c

08007300 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007300:	b580      	push	{r7, lr}
 8007302:	b082      	sub	sp, #8
 8007304:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007306:	f000 f965 	bl	80075d4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800730a:	4b15      	ldr	r3, [pc, #84]	; (8007360 <prvCheckForValidListAndQueue+0x60>)
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	2b00      	cmp	r3, #0
 8007310:	d120      	bne.n	8007354 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007312:	4814      	ldr	r0, [pc, #80]	; (8007364 <prvCheckForValidListAndQueue+0x64>)
 8007314:	f7fd fb58 	bl	80049c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007318:	4813      	ldr	r0, [pc, #76]	; (8007368 <prvCheckForValidListAndQueue+0x68>)
 800731a:	f7fd fb55 	bl	80049c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800731e:	4b13      	ldr	r3, [pc, #76]	; (800736c <prvCheckForValidListAndQueue+0x6c>)
 8007320:	4a10      	ldr	r2, [pc, #64]	; (8007364 <prvCheckForValidListAndQueue+0x64>)
 8007322:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007324:	4b12      	ldr	r3, [pc, #72]	; (8007370 <prvCheckForValidListAndQueue+0x70>)
 8007326:	4a10      	ldr	r2, [pc, #64]	; (8007368 <prvCheckForValidListAndQueue+0x68>)
 8007328:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800732a:	2300      	movs	r3, #0
 800732c:	9300      	str	r3, [sp, #0]
 800732e:	4b11      	ldr	r3, [pc, #68]	; (8007374 <prvCheckForValidListAndQueue+0x74>)
 8007330:	4a11      	ldr	r2, [pc, #68]	; (8007378 <prvCheckForValidListAndQueue+0x78>)
 8007332:	2110      	movs	r1, #16
 8007334:	200a      	movs	r0, #10
 8007336:	f7fd fc63 	bl	8004c00 <xQueueGenericCreateStatic>
 800733a:	4603      	mov	r3, r0
 800733c:	4a08      	ldr	r2, [pc, #32]	; (8007360 <prvCheckForValidListAndQueue+0x60>)
 800733e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007340:	4b07      	ldr	r3, [pc, #28]	; (8007360 <prvCheckForValidListAndQueue+0x60>)
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d005      	beq.n	8007354 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007348:	4b05      	ldr	r3, [pc, #20]	; (8007360 <prvCheckForValidListAndQueue+0x60>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	490b      	ldr	r1, [pc, #44]	; (800737c <prvCheckForValidListAndQueue+0x7c>)
 800734e:	4618      	mov	r0, r3
 8007350:	f7fe fb74 	bl	8005a3c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007354:	f000 f96e 	bl	8007634 <vPortExitCritical>
}
 8007358:	bf00      	nop
 800735a:	46bd      	mov	sp, r7
 800735c:	bd80      	pop	{r7, pc}
 800735e:	bf00      	nop
 8007360:	20000b90 	.word	0x20000b90
 8007364:	20000b60 	.word	0x20000b60
 8007368:	20000b74 	.word	0x20000b74
 800736c:	20000b88 	.word	0x20000b88
 8007370:	20000b8c 	.word	0x20000b8c
 8007374:	20000c3c 	.word	0x20000c3c
 8007378:	20000b9c 	.word	0x20000b9c
 800737c:	0800904c 	.word	0x0800904c

08007380 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007380:	b480      	push	{r7}
 8007382:	b085      	sub	sp, #20
 8007384:	af00      	add	r7, sp, #0
 8007386:	60f8      	str	r0, [r7, #12]
 8007388:	60b9      	str	r1, [r7, #8]
 800738a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	3b04      	subs	r3, #4
 8007390:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007398:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	3b04      	subs	r3, #4
 800739e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80073a0:	68bb      	ldr	r3, [r7, #8]
 80073a2:	f023 0201 	bic.w	r2, r3, #1
 80073a6:	68fb      	ldr	r3, [r7, #12]
 80073a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	3b04      	subs	r3, #4
 80073ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80073b0:	4a0c      	ldr	r2, [pc, #48]	; (80073e4 <pxPortInitialiseStack+0x64>)
 80073b2:	68fb      	ldr	r3, [r7, #12]
 80073b4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80073b6:	68fb      	ldr	r3, [r7, #12]
 80073b8:	3b14      	subs	r3, #20
 80073ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80073bc:	687a      	ldr	r2, [r7, #4]
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80073c2:	68fb      	ldr	r3, [r7, #12]
 80073c4:	3b04      	subs	r3, #4
 80073c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80073c8:	68fb      	ldr	r3, [r7, #12]
 80073ca:	f06f 0202 	mvn.w	r2, #2
 80073ce:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80073d0:	68fb      	ldr	r3, [r7, #12]
 80073d2:	3b20      	subs	r3, #32
 80073d4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80073d6:	68fb      	ldr	r3, [r7, #12]
}
 80073d8:	4618      	mov	r0, r3
 80073da:	3714      	adds	r7, #20
 80073dc:	46bd      	mov	sp, r7
 80073de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073e2:	4770      	bx	lr
 80073e4:	080073e9 	.word	0x080073e9

080073e8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80073e8:	b480      	push	{r7}
 80073ea:	b085      	sub	sp, #20
 80073ec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80073ee:	2300      	movs	r3, #0
 80073f0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80073f2:	4b12      	ldr	r3, [pc, #72]	; (800743c <prvTaskExitError+0x54>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80073fa:	d00a      	beq.n	8007412 <prvTaskExitError+0x2a>
	__asm volatile
 80073fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007400:	f383 8811 	msr	BASEPRI, r3
 8007404:	f3bf 8f6f 	isb	sy
 8007408:	f3bf 8f4f 	dsb	sy
 800740c:	60fb      	str	r3, [r7, #12]
}
 800740e:	bf00      	nop
 8007410:	e7fe      	b.n	8007410 <prvTaskExitError+0x28>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	60bb      	str	r3, [r7, #8]
}
 8007424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007426:	bf00      	nop
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	2b00      	cmp	r3, #0
 800742c:	d0fc      	beq.n	8007428 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800742e:	bf00      	nop
 8007430:	bf00      	nop
 8007432:	3714      	adds	r7, #20
 8007434:	46bd      	mov	sp, r7
 8007436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800743a:	4770      	bx	lr
 800743c:	20000038 	.word	0x20000038

08007440 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007440:	4b07      	ldr	r3, [pc, #28]	; (8007460 <pxCurrentTCBConst2>)
 8007442:	6819      	ldr	r1, [r3, #0]
 8007444:	6808      	ldr	r0, [r1, #0]
 8007446:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800744a:	f380 8809 	msr	PSP, r0
 800744e:	f3bf 8f6f 	isb	sy
 8007452:	f04f 0000 	mov.w	r0, #0
 8007456:	f380 8811 	msr	BASEPRI, r0
 800745a:	4770      	bx	lr
 800745c:	f3af 8000 	nop.w

08007460 <pxCurrentTCBConst2>:
 8007460:	20000660 	.word	0x20000660
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007464:	bf00      	nop
 8007466:	bf00      	nop

08007468 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007468:	4808      	ldr	r0, [pc, #32]	; (800748c <prvPortStartFirstTask+0x24>)
 800746a:	6800      	ldr	r0, [r0, #0]
 800746c:	6800      	ldr	r0, [r0, #0]
 800746e:	f380 8808 	msr	MSP, r0
 8007472:	f04f 0000 	mov.w	r0, #0
 8007476:	f380 8814 	msr	CONTROL, r0
 800747a:	b662      	cpsie	i
 800747c:	b661      	cpsie	f
 800747e:	f3bf 8f4f 	dsb	sy
 8007482:	f3bf 8f6f 	isb	sy
 8007486:	df00      	svc	0
 8007488:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800748a:	bf00      	nop
 800748c:	e000ed08 	.word	0xe000ed08

08007490 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007490:	b580      	push	{r7, lr}
 8007492:	b086      	sub	sp, #24
 8007494:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007496:	4b46      	ldr	r3, [pc, #280]	; (80075b0 <xPortStartScheduler+0x120>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	4a46      	ldr	r2, [pc, #280]	; (80075b4 <xPortStartScheduler+0x124>)
 800749c:	4293      	cmp	r3, r2
 800749e:	d10a      	bne.n	80074b6 <xPortStartScheduler+0x26>
	__asm volatile
 80074a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074a4:	f383 8811 	msr	BASEPRI, r3
 80074a8:	f3bf 8f6f 	isb	sy
 80074ac:	f3bf 8f4f 	dsb	sy
 80074b0:	613b      	str	r3, [r7, #16]
}
 80074b2:	bf00      	nop
 80074b4:	e7fe      	b.n	80074b4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80074b6:	4b3e      	ldr	r3, [pc, #248]	; (80075b0 <xPortStartScheduler+0x120>)
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	4a3f      	ldr	r2, [pc, #252]	; (80075b8 <xPortStartScheduler+0x128>)
 80074bc:	4293      	cmp	r3, r2
 80074be:	d10a      	bne.n	80074d6 <xPortStartScheduler+0x46>
	__asm volatile
 80074c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c4:	f383 8811 	msr	BASEPRI, r3
 80074c8:	f3bf 8f6f 	isb	sy
 80074cc:	f3bf 8f4f 	dsb	sy
 80074d0:	60fb      	str	r3, [r7, #12]
}
 80074d2:	bf00      	nop
 80074d4:	e7fe      	b.n	80074d4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80074d6:	4b39      	ldr	r3, [pc, #228]	; (80075bc <xPortStartScheduler+0x12c>)
 80074d8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	781b      	ldrb	r3, [r3, #0]
 80074de:	b2db      	uxtb	r3, r3
 80074e0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	22ff      	movs	r2, #255	; 0xff
 80074e6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80074e8:	697b      	ldr	r3, [r7, #20]
 80074ea:	781b      	ldrb	r3, [r3, #0]
 80074ec:	b2db      	uxtb	r3, r3
 80074ee:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80074f0:	78fb      	ldrb	r3, [r7, #3]
 80074f2:	b2db      	uxtb	r3, r3
 80074f4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80074f8:	b2da      	uxtb	r2, r3
 80074fa:	4b31      	ldr	r3, [pc, #196]	; (80075c0 <xPortStartScheduler+0x130>)
 80074fc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80074fe:	4b31      	ldr	r3, [pc, #196]	; (80075c4 <xPortStartScheduler+0x134>)
 8007500:	2207      	movs	r2, #7
 8007502:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007504:	e009      	b.n	800751a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007506:	4b2f      	ldr	r3, [pc, #188]	; (80075c4 <xPortStartScheduler+0x134>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	3b01      	subs	r3, #1
 800750c:	4a2d      	ldr	r2, [pc, #180]	; (80075c4 <xPortStartScheduler+0x134>)
 800750e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007510:	78fb      	ldrb	r3, [r7, #3]
 8007512:	b2db      	uxtb	r3, r3
 8007514:	005b      	lsls	r3, r3, #1
 8007516:	b2db      	uxtb	r3, r3
 8007518:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800751a:	78fb      	ldrb	r3, [r7, #3]
 800751c:	b2db      	uxtb	r3, r3
 800751e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007522:	2b80      	cmp	r3, #128	; 0x80
 8007524:	d0ef      	beq.n	8007506 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007526:	4b27      	ldr	r3, [pc, #156]	; (80075c4 <xPortStartScheduler+0x134>)
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	f1c3 0307 	rsb	r3, r3, #7
 800752e:	2b04      	cmp	r3, #4
 8007530:	d00a      	beq.n	8007548 <xPortStartScheduler+0xb8>
	__asm volatile
 8007532:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007536:	f383 8811 	msr	BASEPRI, r3
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	f3bf 8f4f 	dsb	sy
 8007542:	60bb      	str	r3, [r7, #8]
}
 8007544:	bf00      	nop
 8007546:	e7fe      	b.n	8007546 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007548:	4b1e      	ldr	r3, [pc, #120]	; (80075c4 <xPortStartScheduler+0x134>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	021b      	lsls	r3, r3, #8
 800754e:	4a1d      	ldr	r2, [pc, #116]	; (80075c4 <xPortStartScheduler+0x134>)
 8007550:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007552:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <xPortStartScheduler+0x134>)
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800755a:	4a1a      	ldr	r2, [pc, #104]	; (80075c4 <xPortStartScheduler+0x134>)
 800755c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	b2da      	uxtb	r2, r3
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007566:	4b18      	ldr	r3, [pc, #96]	; (80075c8 <xPortStartScheduler+0x138>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <xPortStartScheduler+0x138>)
 800756c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007570:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007572:	4b15      	ldr	r3, [pc, #84]	; (80075c8 <xPortStartScheduler+0x138>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	4a14      	ldr	r2, [pc, #80]	; (80075c8 <xPortStartScheduler+0x138>)
 8007578:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800757c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800757e:	f000 f8dd 	bl	800773c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007582:	4b12      	ldr	r3, [pc, #72]	; (80075cc <xPortStartScheduler+0x13c>)
 8007584:	2200      	movs	r2, #0
 8007586:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007588:	f000 f8fc 	bl	8007784 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800758c:	4b10      	ldr	r3, [pc, #64]	; (80075d0 <xPortStartScheduler+0x140>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a0f      	ldr	r2, [pc, #60]	; (80075d0 <xPortStartScheduler+0x140>)
 8007592:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007596:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007598:	f7ff ff66 	bl	8007468 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800759c:	f7fe ff3e 	bl	800641c <vTaskSwitchContext>
	prvTaskExitError();
 80075a0:	f7ff ff22 	bl	80073e8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80075a4:	2300      	movs	r3, #0
}
 80075a6:	4618      	mov	r0, r3
 80075a8:	3718      	adds	r7, #24
 80075aa:	46bd      	mov	sp, r7
 80075ac:	bd80      	pop	{r7, pc}
 80075ae:	bf00      	nop
 80075b0:	e000ed00 	.word	0xe000ed00
 80075b4:	410fc271 	.word	0x410fc271
 80075b8:	410fc270 	.word	0x410fc270
 80075bc:	e000e400 	.word	0xe000e400
 80075c0:	20000c8c 	.word	0x20000c8c
 80075c4:	20000c90 	.word	0x20000c90
 80075c8:	e000ed20 	.word	0xe000ed20
 80075cc:	20000038 	.word	0x20000038
 80075d0:	e000ef34 	.word	0xe000ef34

080075d4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80075d4:	b480      	push	{r7}
 80075d6:	b083      	sub	sp, #12
 80075d8:	af00      	add	r7, sp, #0
	__asm volatile
 80075da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075de:	f383 8811 	msr	BASEPRI, r3
 80075e2:	f3bf 8f6f 	isb	sy
 80075e6:	f3bf 8f4f 	dsb	sy
 80075ea:	607b      	str	r3, [r7, #4]
}
 80075ec:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80075ee:	4b0f      	ldr	r3, [pc, #60]	; (800762c <vPortEnterCritical+0x58>)
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	3301      	adds	r3, #1
 80075f4:	4a0d      	ldr	r2, [pc, #52]	; (800762c <vPortEnterCritical+0x58>)
 80075f6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80075f8:	4b0c      	ldr	r3, [pc, #48]	; (800762c <vPortEnterCritical+0x58>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d10f      	bne.n	8007620 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007600:	4b0b      	ldr	r3, [pc, #44]	; (8007630 <vPortEnterCritical+0x5c>)
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	b2db      	uxtb	r3, r3
 8007606:	2b00      	cmp	r3, #0
 8007608:	d00a      	beq.n	8007620 <vPortEnterCritical+0x4c>
	__asm volatile
 800760a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800760e:	f383 8811 	msr	BASEPRI, r3
 8007612:	f3bf 8f6f 	isb	sy
 8007616:	f3bf 8f4f 	dsb	sy
 800761a:	603b      	str	r3, [r7, #0]
}
 800761c:	bf00      	nop
 800761e:	e7fe      	b.n	800761e <vPortEnterCritical+0x4a>
	}
}
 8007620:	bf00      	nop
 8007622:	370c      	adds	r7, #12
 8007624:	46bd      	mov	sp, r7
 8007626:	f85d 7b04 	ldr.w	r7, [sp], #4
 800762a:	4770      	bx	lr
 800762c:	20000038 	.word	0x20000038
 8007630:	e000ed04 	.word	0xe000ed04

08007634 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007634:	b480      	push	{r7}
 8007636:	b083      	sub	sp, #12
 8007638:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800763a:	4b12      	ldr	r3, [pc, #72]	; (8007684 <vPortExitCritical+0x50>)
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	2b00      	cmp	r3, #0
 8007640:	d10a      	bne.n	8007658 <vPortExitCritical+0x24>
	__asm volatile
 8007642:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007646:	f383 8811 	msr	BASEPRI, r3
 800764a:	f3bf 8f6f 	isb	sy
 800764e:	f3bf 8f4f 	dsb	sy
 8007652:	607b      	str	r3, [r7, #4]
}
 8007654:	bf00      	nop
 8007656:	e7fe      	b.n	8007656 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007658:	4b0a      	ldr	r3, [pc, #40]	; (8007684 <vPortExitCritical+0x50>)
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3b01      	subs	r3, #1
 800765e:	4a09      	ldr	r2, [pc, #36]	; (8007684 <vPortExitCritical+0x50>)
 8007660:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007662:	4b08      	ldr	r3, [pc, #32]	; (8007684 <vPortExitCritical+0x50>)
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	2b00      	cmp	r3, #0
 8007668:	d105      	bne.n	8007676 <vPortExitCritical+0x42>
 800766a:	2300      	movs	r3, #0
 800766c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800766e:	683b      	ldr	r3, [r7, #0]
 8007670:	f383 8811 	msr	BASEPRI, r3
}
 8007674:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007676:	bf00      	nop
 8007678:	370c      	adds	r7, #12
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	20000038 	.word	0x20000038
	...

08007690 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007690:	f3ef 8009 	mrs	r0, PSP
 8007694:	f3bf 8f6f 	isb	sy
 8007698:	4b15      	ldr	r3, [pc, #84]	; (80076f0 <pxCurrentTCBConst>)
 800769a:	681a      	ldr	r2, [r3, #0]
 800769c:	f01e 0f10 	tst.w	lr, #16
 80076a0:	bf08      	it	eq
 80076a2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80076a6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076aa:	6010      	str	r0, [r2, #0]
 80076ac:	e92d 0009 	stmdb	sp!, {r0, r3}
 80076b0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80076b4:	f380 8811 	msr	BASEPRI, r0
 80076b8:	f3bf 8f4f 	dsb	sy
 80076bc:	f3bf 8f6f 	isb	sy
 80076c0:	f7fe feac 	bl	800641c <vTaskSwitchContext>
 80076c4:	f04f 0000 	mov.w	r0, #0
 80076c8:	f380 8811 	msr	BASEPRI, r0
 80076cc:	bc09      	pop	{r0, r3}
 80076ce:	6819      	ldr	r1, [r3, #0]
 80076d0:	6808      	ldr	r0, [r1, #0]
 80076d2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80076d6:	f01e 0f10 	tst.w	lr, #16
 80076da:	bf08      	it	eq
 80076dc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80076e0:	f380 8809 	msr	PSP, r0
 80076e4:	f3bf 8f6f 	isb	sy
 80076e8:	4770      	bx	lr
 80076ea:	bf00      	nop
 80076ec:	f3af 8000 	nop.w

080076f0 <pxCurrentTCBConst>:
 80076f0:	20000660 	.word	0x20000660
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80076f4:	bf00      	nop
 80076f6:	bf00      	nop

080076f8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b082      	sub	sp, #8
 80076fc:	af00      	add	r7, sp, #0
	__asm volatile
 80076fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007702:	f383 8811 	msr	BASEPRI, r3
 8007706:	f3bf 8f6f 	isb	sy
 800770a:	f3bf 8f4f 	dsb	sy
 800770e:	607b      	str	r3, [r7, #4]
}
 8007710:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007712:	f7fe fdc9 	bl	80062a8 <xTaskIncrementTick>
 8007716:	4603      	mov	r3, r0
 8007718:	2b00      	cmp	r3, #0
 800771a:	d003      	beq.n	8007724 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800771c:	4b06      	ldr	r3, [pc, #24]	; (8007738 <xPortSysTickHandler+0x40>)
 800771e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007722:	601a      	str	r2, [r3, #0]
 8007724:	2300      	movs	r3, #0
 8007726:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007728:	683b      	ldr	r3, [r7, #0]
 800772a:	f383 8811 	msr	BASEPRI, r3
}
 800772e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007730:	bf00      	nop
 8007732:	3708      	adds	r7, #8
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}
 8007738:	e000ed04 	.word	0xe000ed04

0800773c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800773c:	b480      	push	{r7}
 800773e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007740:	4b0b      	ldr	r3, [pc, #44]	; (8007770 <vPortSetupTimerInterrupt+0x34>)
 8007742:	2200      	movs	r2, #0
 8007744:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007746:	4b0b      	ldr	r3, [pc, #44]	; (8007774 <vPortSetupTimerInterrupt+0x38>)
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800774c:	4b0a      	ldr	r3, [pc, #40]	; (8007778 <vPortSetupTimerInterrupt+0x3c>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	4a0a      	ldr	r2, [pc, #40]	; (800777c <vPortSetupTimerInterrupt+0x40>)
 8007752:	fba2 2303 	umull	r2, r3, r2, r3
 8007756:	099b      	lsrs	r3, r3, #6
 8007758:	4a09      	ldr	r2, [pc, #36]	; (8007780 <vPortSetupTimerInterrupt+0x44>)
 800775a:	3b01      	subs	r3, #1
 800775c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800775e:	4b04      	ldr	r3, [pc, #16]	; (8007770 <vPortSetupTimerInterrupt+0x34>)
 8007760:	2207      	movs	r2, #7
 8007762:	601a      	str	r2, [r3, #0]
}
 8007764:	bf00      	nop
 8007766:	46bd      	mov	sp, r7
 8007768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800776c:	4770      	bx	lr
 800776e:	bf00      	nop
 8007770:	e000e010 	.word	0xe000e010
 8007774:	e000e018 	.word	0xe000e018
 8007778:	2000002c 	.word	0x2000002c
 800777c:	10624dd3 	.word	0x10624dd3
 8007780:	e000e014 	.word	0xe000e014

08007784 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007784:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007794 <vPortEnableVFP+0x10>
 8007788:	6801      	ldr	r1, [r0, #0]
 800778a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800778e:	6001      	str	r1, [r0, #0]
 8007790:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007792:	bf00      	nop
 8007794:	e000ed88 	.word	0xe000ed88

08007798 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800779e:	f3ef 8305 	mrs	r3, IPSR
 80077a2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b0f      	cmp	r3, #15
 80077a8:	d914      	bls.n	80077d4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80077aa:	4a17      	ldr	r2, [pc, #92]	; (8007808 <vPortValidateInterruptPriority+0x70>)
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	4413      	add	r3, r2
 80077b0:	781b      	ldrb	r3, [r3, #0]
 80077b2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80077b4:	4b15      	ldr	r3, [pc, #84]	; (800780c <vPortValidateInterruptPriority+0x74>)
 80077b6:	781b      	ldrb	r3, [r3, #0]
 80077b8:	7afa      	ldrb	r2, [r7, #11]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d20a      	bcs.n	80077d4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	607b      	str	r3, [r7, #4]
}
 80077d0:	bf00      	nop
 80077d2:	e7fe      	b.n	80077d2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80077d4:	4b0e      	ldr	r3, [pc, #56]	; (8007810 <vPortValidateInterruptPriority+0x78>)
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80077dc:	4b0d      	ldr	r3, [pc, #52]	; (8007814 <vPortValidateInterruptPriority+0x7c>)
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	429a      	cmp	r2, r3
 80077e2:	d90a      	bls.n	80077fa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80077e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077e8:	f383 8811 	msr	BASEPRI, r3
 80077ec:	f3bf 8f6f 	isb	sy
 80077f0:	f3bf 8f4f 	dsb	sy
 80077f4:	603b      	str	r3, [r7, #0]
}
 80077f6:	bf00      	nop
 80077f8:	e7fe      	b.n	80077f8 <vPortValidateInterruptPriority+0x60>
	}
 80077fa:	bf00      	nop
 80077fc:	3714      	adds	r7, #20
 80077fe:	46bd      	mov	sp, r7
 8007800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007804:	4770      	bx	lr
 8007806:	bf00      	nop
 8007808:	e000e3f0 	.word	0xe000e3f0
 800780c:	20000c8c 	.word	0x20000c8c
 8007810:	e000ed0c 	.word	0xe000ed0c
 8007814:	20000c90 	.word	0x20000c90

08007818 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007818:	b580      	push	{r7, lr}
 800781a:	b08a      	sub	sp, #40	; 0x28
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007820:	2300      	movs	r3, #0
 8007822:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007824:	f7fe fc60 	bl	80060e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007828:	4b5b      	ldr	r3, [pc, #364]	; (8007998 <pvPortMalloc+0x180>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	2b00      	cmp	r3, #0
 800782e:	d101      	bne.n	8007834 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007830:	f000 f920 	bl	8007a74 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007834:	4b59      	ldr	r3, [pc, #356]	; (800799c <pvPortMalloc+0x184>)
 8007836:	681a      	ldr	r2, [r3, #0]
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	4013      	ands	r3, r2
 800783c:	2b00      	cmp	r3, #0
 800783e:	f040 8093 	bne.w	8007968 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d01d      	beq.n	8007884 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007848:	2208      	movs	r2, #8
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	4413      	add	r3, r2
 800784e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	f003 0307 	and.w	r3, r3, #7
 8007856:	2b00      	cmp	r3, #0
 8007858:	d014      	beq.n	8007884 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	f023 0307 	bic.w	r3, r3, #7
 8007860:	3308      	adds	r3, #8
 8007862:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007864:	687b      	ldr	r3, [r7, #4]
 8007866:	f003 0307 	and.w	r3, r3, #7
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00a      	beq.n	8007884 <pvPortMalloc+0x6c>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	617b      	str	r3, [r7, #20]
}
 8007880:	bf00      	nop
 8007882:	e7fe      	b.n	8007882 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007884:	687b      	ldr	r3, [r7, #4]
 8007886:	2b00      	cmp	r3, #0
 8007888:	d06e      	beq.n	8007968 <pvPortMalloc+0x150>
 800788a:	4b45      	ldr	r3, [pc, #276]	; (80079a0 <pvPortMalloc+0x188>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	687a      	ldr	r2, [r7, #4]
 8007890:	429a      	cmp	r2, r3
 8007892:	d869      	bhi.n	8007968 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007894:	4b43      	ldr	r3, [pc, #268]	; (80079a4 <pvPortMalloc+0x18c>)
 8007896:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007898:	4b42      	ldr	r3, [pc, #264]	; (80079a4 <pvPortMalloc+0x18c>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800789e:	e004      	b.n	80078aa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80078a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80078a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078a6:	681b      	ldr	r3, [r3, #0]
 80078a8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80078aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078ac:	685b      	ldr	r3, [r3, #4]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	429a      	cmp	r2, r3
 80078b2:	d903      	bls.n	80078bc <pvPortMalloc+0xa4>
 80078b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d1f1      	bne.n	80078a0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80078bc:	4b36      	ldr	r3, [pc, #216]	; (8007998 <pvPortMalloc+0x180>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078c2:	429a      	cmp	r2, r3
 80078c4:	d050      	beq.n	8007968 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80078c6:	6a3b      	ldr	r3, [r7, #32]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2208      	movs	r2, #8
 80078cc:	4413      	add	r3, r2
 80078ce:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80078d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078d2:	681a      	ldr	r2, [r3, #0]
 80078d4:	6a3b      	ldr	r3, [r7, #32]
 80078d6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80078d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80078da:	685a      	ldr	r2, [r3, #4]
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	1ad2      	subs	r2, r2, r3
 80078e0:	2308      	movs	r3, #8
 80078e2:	005b      	lsls	r3, r3, #1
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d91f      	bls.n	8007928 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80078e8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80078ea:	687b      	ldr	r3, [r7, #4]
 80078ec:	4413      	add	r3, r2
 80078ee:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80078f0:	69bb      	ldr	r3, [r7, #24]
 80078f2:	f003 0307 	and.w	r3, r3, #7
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <pvPortMalloc+0xf8>
	__asm volatile
 80078fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078fe:	f383 8811 	msr	BASEPRI, r3
 8007902:	f3bf 8f6f 	isb	sy
 8007906:	f3bf 8f4f 	dsb	sy
 800790a:	613b      	str	r3, [r7, #16]
}
 800790c:	bf00      	nop
 800790e:	e7fe      	b.n	800790e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007910:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007912:	685a      	ldr	r2, [r3, #4]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	1ad2      	subs	r2, r2, r3
 8007918:	69bb      	ldr	r3, [r7, #24]
 800791a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800791c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007922:	69b8      	ldr	r0, [r7, #24]
 8007924:	f000 f908 	bl	8007b38 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007928:	4b1d      	ldr	r3, [pc, #116]	; (80079a0 <pvPortMalloc+0x188>)
 800792a:	681a      	ldr	r2, [r3, #0]
 800792c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800792e:	685b      	ldr	r3, [r3, #4]
 8007930:	1ad3      	subs	r3, r2, r3
 8007932:	4a1b      	ldr	r2, [pc, #108]	; (80079a0 <pvPortMalloc+0x188>)
 8007934:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007936:	4b1a      	ldr	r3, [pc, #104]	; (80079a0 <pvPortMalloc+0x188>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	4b1b      	ldr	r3, [pc, #108]	; (80079a8 <pvPortMalloc+0x190>)
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	429a      	cmp	r2, r3
 8007940:	d203      	bcs.n	800794a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007942:	4b17      	ldr	r3, [pc, #92]	; (80079a0 <pvPortMalloc+0x188>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	4a18      	ldr	r2, [pc, #96]	; (80079a8 <pvPortMalloc+0x190>)
 8007948:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800794a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800794c:	685a      	ldr	r2, [r3, #4]
 800794e:	4b13      	ldr	r3, [pc, #76]	; (800799c <pvPortMalloc+0x184>)
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	431a      	orrs	r2, r3
 8007954:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007956:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795a:	2200      	movs	r2, #0
 800795c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800795e:	4b13      	ldr	r3, [pc, #76]	; (80079ac <pvPortMalloc+0x194>)
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	3301      	adds	r3, #1
 8007964:	4a11      	ldr	r2, [pc, #68]	; (80079ac <pvPortMalloc+0x194>)
 8007966:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007968:	f7fe fbcc 	bl	8006104 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800796c:	69fb      	ldr	r3, [r7, #28]
 800796e:	f003 0307 	and.w	r3, r3, #7
 8007972:	2b00      	cmp	r3, #0
 8007974:	d00a      	beq.n	800798c <pvPortMalloc+0x174>
	__asm volatile
 8007976:	f04f 0350 	mov.w	r3, #80	; 0x50
 800797a:	f383 8811 	msr	BASEPRI, r3
 800797e:	f3bf 8f6f 	isb	sy
 8007982:	f3bf 8f4f 	dsb	sy
 8007986:	60fb      	str	r3, [r7, #12]
}
 8007988:	bf00      	nop
 800798a:	e7fe      	b.n	800798a <pvPortMalloc+0x172>
	return pvReturn;
 800798c:	69fb      	ldr	r3, [r7, #28]
}
 800798e:	4618      	mov	r0, r3
 8007990:	3728      	adds	r7, #40	; 0x28
 8007992:	46bd      	mov	sp, r7
 8007994:	bd80      	pop	{r7, pc}
 8007996:	bf00      	nop
 8007998:	2000899c 	.word	0x2000899c
 800799c:	200089b0 	.word	0x200089b0
 80079a0:	200089a0 	.word	0x200089a0
 80079a4:	20008994 	.word	0x20008994
 80079a8:	200089a4 	.word	0x200089a4
 80079ac:	200089a8 	.word	0x200089a8

080079b0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	b086      	sub	sp, #24
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d04d      	beq.n	8007a5e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80079c2:	2308      	movs	r3, #8
 80079c4:	425b      	negs	r3, r3
 80079c6:	697a      	ldr	r2, [r7, #20]
 80079c8:	4413      	add	r3, r2
 80079ca:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80079cc:	697b      	ldr	r3, [r7, #20]
 80079ce:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80079d0:	693b      	ldr	r3, [r7, #16]
 80079d2:	685a      	ldr	r2, [r3, #4]
 80079d4:	4b24      	ldr	r3, [pc, #144]	; (8007a68 <vPortFree+0xb8>)
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	4013      	ands	r3, r2
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d10a      	bne.n	80079f4 <vPortFree+0x44>
	__asm volatile
 80079de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079e2:	f383 8811 	msr	BASEPRI, r3
 80079e6:	f3bf 8f6f 	isb	sy
 80079ea:	f3bf 8f4f 	dsb	sy
 80079ee:	60fb      	str	r3, [r7, #12]
}
 80079f0:	bf00      	nop
 80079f2:	e7fe      	b.n	80079f2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80079f4:	693b      	ldr	r3, [r7, #16]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	2b00      	cmp	r3, #0
 80079fa:	d00a      	beq.n	8007a12 <vPortFree+0x62>
	__asm volatile
 80079fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a00:	f383 8811 	msr	BASEPRI, r3
 8007a04:	f3bf 8f6f 	isb	sy
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	60bb      	str	r3, [r7, #8]
}
 8007a0e:	bf00      	nop
 8007a10:	e7fe      	b.n	8007a10 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007a12:	693b      	ldr	r3, [r7, #16]
 8007a14:	685a      	ldr	r2, [r3, #4]
 8007a16:	4b14      	ldr	r3, [pc, #80]	; (8007a68 <vPortFree+0xb8>)
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	4013      	ands	r3, r2
 8007a1c:	2b00      	cmp	r3, #0
 8007a1e:	d01e      	beq.n	8007a5e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007a20:	693b      	ldr	r3, [r7, #16]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d11a      	bne.n	8007a5e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007a28:	693b      	ldr	r3, [r7, #16]
 8007a2a:	685a      	ldr	r2, [r3, #4]
 8007a2c:	4b0e      	ldr	r3, [pc, #56]	; (8007a68 <vPortFree+0xb8>)
 8007a2e:	681b      	ldr	r3, [r3, #0]
 8007a30:	43db      	mvns	r3, r3
 8007a32:	401a      	ands	r2, r3
 8007a34:	693b      	ldr	r3, [r7, #16]
 8007a36:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007a38:	f7fe fb56 	bl	80060e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007a3c:	693b      	ldr	r3, [r7, #16]
 8007a3e:	685a      	ldr	r2, [r3, #4]
 8007a40:	4b0a      	ldr	r3, [pc, #40]	; (8007a6c <vPortFree+0xbc>)
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	4413      	add	r3, r2
 8007a46:	4a09      	ldr	r2, [pc, #36]	; (8007a6c <vPortFree+0xbc>)
 8007a48:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007a4a:	6938      	ldr	r0, [r7, #16]
 8007a4c:	f000 f874 	bl	8007b38 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007a50:	4b07      	ldr	r3, [pc, #28]	; (8007a70 <vPortFree+0xc0>)
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	3301      	adds	r3, #1
 8007a56:	4a06      	ldr	r2, [pc, #24]	; (8007a70 <vPortFree+0xc0>)
 8007a58:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007a5a:	f7fe fb53 	bl	8006104 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007a5e:	bf00      	nop
 8007a60:	3718      	adds	r7, #24
 8007a62:	46bd      	mov	sp, r7
 8007a64:	bd80      	pop	{r7, pc}
 8007a66:	bf00      	nop
 8007a68:	200089b0 	.word	0x200089b0
 8007a6c:	200089a0 	.word	0x200089a0
 8007a70:	200089ac 	.word	0x200089ac

08007a74 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007a74:	b480      	push	{r7}
 8007a76:	b085      	sub	sp, #20
 8007a78:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007a7a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8007a7e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007a80:	4b27      	ldr	r3, [pc, #156]	; (8007b20 <prvHeapInit+0xac>)
 8007a82:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f003 0307 	and.w	r3, r3, #7
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d00c      	beq.n	8007aa8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	3307      	adds	r3, #7
 8007a92:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	f023 0307 	bic.w	r3, r3, #7
 8007a9a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007a9c:	68ba      	ldr	r2, [r7, #8]
 8007a9e:	68fb      	ldr	r3, [r7, #12]
 8007aa0:	1ad3      	subs	r3, r2, r3
 8007aa2:	4a1f      	ldr	r2, [pc, #124]	; (8007b20 <prvHeapInit+0xac>)
 8007aa4:	4413      	add	r3, r2
 8007aa6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007aac:	4a1d      	ldr	r2, [pc, #116]	; (8007b24 <prvHeapInit+0xb0>)
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ab2:	4b1c      	ldr	r3, [pc, #112]	; (8007b24 <prvHeapInit+0xb0>)
 8007ab4:	2200      	movs	r2, #0
 8007ab6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ab8:	687b      	ldr	r3, [r7, #4]
 8007aba:	68ba      	ldr	r2, [r7, #8]
 8007abc:	4413      	add	r3, r2
 8007abe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007ac0:	2208      	movs	r2, #8
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	1a9b      	subs	r3, r3, r2
 8007ac6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	f023 0307 	bic.w	r3, r3, #7
 8007ace:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	4a15      	ldr	r2, [pc, #84]	; (8007b28 <prvHeapInit+0xb4>)
 8007ad4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007ad6:	4b14      	ldr	r3, [pc, #80]	; (8007b28 <prvHeapInit+0xb4>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	2200      	movs	r2, #0
 8007adc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007ade:	4b12      	ldr	r3, [pc, #72]	; (8007b28 <prvHeapInit+0xb4>)
 8007ae0:	681b      	ldr	r3, [r3, #0]
 8007ae2:	2200      	movs	r2, #0
 8007ae4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007aea:	683b      	ldr	r3, [r7, #0]
 8007aec:	68fa      	ldr	r2, [r7, #12]
 8007aee:	1ad2      	subs	r2, r2, r3
 8007af0:	683b      	ldr	r3, [r7, #0]
 8007af2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007af4:	4b0c      	ldr	r3, [pc, #48]	; (8007b28 <prvHeapInit+0xb4>)
 8007af6:	681a      	ldr	r2, [r3, #0]
 8007af8:	683b      	ldr	r3, [r7, #0]
 8007afa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007afc:	683b      	ldr	r3, [r7, #0]
 8007afe:	685b      	ldr	r3, [r3, #4]
 8007b00:	4a0a      	ldr	r2, [pc, #40]	; (8007b2c <prvHeapInit+0xb8>)
 8007b02:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007b04:	683b      	ldr	r3, [r7, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	4a09      	ldr	r2, [pc, #36]	; (8007b30 <prvHeapInit+0xbc>)
 8007b0a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007b0c:	4b09      	ldr	r3, [pc, #36]	; (8007b34 <prvHeapInit+0xc0>)
 8007b0e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007b12:	601a      	str	r2, [r3, #0]
}
 8007b14:	bf00      	nop
 8007b16:	3714      	adds	r7, #20
 8007b18:	46bd      	mov	sp, r7
 8007b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1e:	4770      	bx	lr
 8007b20:	20000c94 	.word	0x20000c94
 8007b24:	20008994 	.word	0x20008994
 8007b28:	2000899c 	.word	0x2000899c
 8007b2c:	200089a4 	.word	0x200089a4
 8007b30:	200089a0 	.word	0x200089a0
 8007b34:	200089b0 	.word	0x200089b0

08007b38 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007b38:	b480      	push	{r7}
 8007b3a:	b085      	sub	sp, #20
 8007b3c:	af00      	add	r7, sp, #0
 8007b3e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007b40:	4b28      	ldr	r3, [pc, #160]	; (8007be4 <prvInsertBlockIntoFreeList+0xac>)
 8007b42:	60fb      	str	r3, [r7, #12]
 8007b44:	e002      	b.n	8007b4c <prvInsertBlockIntoFreeList+0x14>
 8007b46:	68fb      	ldr	r3, [r7, #12]
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	60fb      	str	r3, [r7, #12]
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	687a      	ldr	r2, [r7, #4]
 8007b52:	429a      	cmp	r2, r3
 8007b54:	d8f7      	bhi.n	8007b46 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	685b      	ldr	r3, [r3, #4]
 8007b5e:	68ba      	ldr	r2, [r7, #8]
 8007b60:	4413      	add	r3, r2
 8007b62:	687a      	ldr	r2, [r7, #4]
 8007b64:	429a      	cmp	r2, r3
 8007b66:	d108      	bne.n	8007b7a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	685a      	ldr	r2, [r3, #4]
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	685b      	ldr	r3, [r3, #4]
 8007b70:	441a      	add	r2, r3
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007b76:	68fb      	ldr	r3, [r7, #12]
 8007b78:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	685b      	ldr	r3, [r3, #4]
 8007b82:	68ba      	ldr	r2, [r7, #8]
 8007b84:	441a      	add	r2, r3
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	429a      	cmp	r2, r3
 8007b8c:	d118      	bne.n	8007bc0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681a      	ldr	r2, [r3, #0]
 8007b92:	4b15      	ldr	r3, [pc, #84]	; (8007be8 <prvInsertBlockIntoFreeList+0xb0>)
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	429a      	cmp	r2, r3
 8007b98:	d00d      	beq.n	8007bb6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	685a      	ldr	r2, [r3, #4]
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	685b      	ldr	r3, [r3, #4]
 8007ba4:	441a      	add	r2, r3
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	681a      	ldr	r2, [r3, #0]
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	601a      	str	r2, [r3, #0]
 8007bb4:	e008      	b.n	8007bc8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007bb6:	4b0c      	ldr	r3, [pc, #48]	; (8007be8 <prvInsertBlockIntoFreeList+0xb0>)
 8007bb8:	681a      	ldr	r2, [r3, #0]
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	601a      	str	r2, [r3, #0]
 8007bbe:	e003      	b.n	8007bc8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	681a      	ldr	r2, [r3, #0]
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007bc8:	68fa      	ldr	r2, [r7, #12]
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	429a      	cmp	r2, r3
 8007bce:	d002      	beq.n	8007bd6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
 8007bd2:	687a      	ldr	r2, [r7, #4]
 8007bd4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007bd6:	bf00      	nop
 8007bd8:	3714      	adds	r7, #20
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be0:	4770      	bx	lr
 8007be2:	bf00      	nop
 8007be4:	20008994 	.word	0x20008994
 8007be8:	2000899c 	.word	0x2000899c

08007bec <__errno>:
 8007bec:	4b01      	ldr	r3, [pc, #4]	; (8007bf4 <__errno+0x8>)
 8007bee:	6818      	ldr	r0, [r3, #0]
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	2000003c 	.word	0x2000003c

08007bf8 <std>:
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	b510      	push	{r4, lr}
 8007bfc:	4604      	mov	r4, r0
 8007bfe:	e9c0 3300 	strd	r3, r3, [r0]
 8007c02:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007c06:	6083      	str	r3, [r0, #8]
 8007c08:	8181      	strh	r1, [r0, #12]
 8007c0a:	6643      	str	r3, [r0, #100]	; 0x64
 8007c0c:	81c2      	strh	r2, [r0, #14]
 8007c0e:	6183      	str	r3, [r0, #24]
 8007c10:	4619      	mov	r1, r3
 8007c12:	2208      	movs	r2, #8
 8007c14:	305c      	adds	r0, #92	; 0x5c
 8007c16:	f000 f91a 	bl	8007e4e <memset>
 8007c1a:	4b05      	ldr	r3, [pc, #20]	; (8007c30 <std+0x38>)
 8007c1c:	6263      	str	r3, [r4, #36]	; 0x24
 8007c1e:	4b05      	ldr	r3, [pc, #20]	; (8007c34 <std+0x3c>)
 8007c20:	62a3      	str	r3, [r4, #40]	; 0x28
 8007c22:	4b05      	ldr	r3, [pc, #20]	; (8007c38 <std+0x40>)
 8007c24:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007c26:	4b05      	ldr	r3, [pc, #20]	; (8007c3c <std+0x44>)
 8007c28:	6224      	str	r4, [r4, #32]
 8007c2a:	6323      	str	r3, [r4, #48]	; 0x30
 8007c2c:	bd10      	pop	{r4, pc}
 8007c2e:	bf00      	nop
 8007c30:	08008185 	.word	0x08008185
 8007c34:	080081a7 	.word	0x080081a7
 8007c38:	080081df 	.word	0x080081df
 8007c3c:	08008203 	.word	0x08008203

08007c40 <_cleanup_r>:
 8007c40:	4901      	ldr	r1, [pc, #4]	; (8007c48 <_cleanup_r+0x8>)
 8007c42:	f000 b8af 	b.w	8007da4 <_fwalk_reent>
 8007c46:	bf00      	nop
 8007c48:	08008399 	.word	0x08008399

08007c4c <__sfmoreglue>:
 8007c4c:	b570      	push	{r4, r5, r6, lr}
 8007c4e:	2268      	movs	r2, #104	; 0x68
 8007c50:	1e4d      	subs	r5, r1, #1
 8007c52:	4355      	muls	r5, r2
 8007c54:	460e      	mov	r6, r1
 8007c56:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8007c5a:	f000 f921 	bl	8007ea0 <_malloc_r>
 8007c5e:	4604      	mov	r4, r0
 8007c60:	b140      	cbz	r0, 8007c74 <__sfmoreglue+0x28>
 8007c62:	2100      	movs	r1, #0
 8007c64:	e9c0 1600 	strd	r1, r6, [r0]
 8007c68:	300c      	adds	r0, #12
 8007c6a:	60a0      	str	r0, [r4, #8]
 8007c6c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007c70:	f000 f8ed 	bl	8007e4e <memset>
 8007c74:	4620      	mov	r0, r4
 8007c76:	bd70      	pop	{r4, r5, r6, pc}

08007c78 <__sfp_lock_acquire>:
 8007c78:	4801      	ldr	r0, [pc, #4]	; (8007c80 <__sfp_lock_acquire+0x8>)
 8007c7a:	f000 b8d8 	b.w	8007e2e <__retarget_lock_acquire_recursive>
 8007c7e:	bf00      	nop
 8007c80:	200089b5 	.word	0x200089b5

08007c84 <__sfp_lock_release>:
 8007c84:	4801      	ldr	r0, [pc, #4]	; (8007c8c <__sfp_lock_release+0x8>)
 8007c86:	f000 b8d3 	b.w	8007e30 <__retarget_lock_release_recursive>
 8007c8a:	bf00      	nop
 8007c8c:	200089b5 	.word	0x200089b5

08007c90 <__sinit_lock_acquire>:
 8007c90:	4801      	ldr	r0, [pc, #4]	; (8007c98 <__sinit_lock_acquire+0x8>)
 8007c92:	f000 b8cc 	b.w	8007e2e <__retarget_lock_acquire_recursive>
 8007c96:	bf00      	nop
 8007c98:	200089b6 	.word	0x200089b6

08007c9c <__sinit_lock_release>:
 8007c9c:	4801      	ldr	r0, [pc, #4]	; (8007ca4 <__sinit_lock_release+0x8>)
 8007c9e:	f000 b8c7 	b.w	8007e30 <__retarget_lock_release_recursive>
 8007ca2:	bf00      	nop
 8007ca4:	200089b6 	.word	0x200089b6

08007ca8 <__sinit>:
 8007ca8:	b510      	push	{r4, lr}
 8007caa:	4604      	mov	r4, r0
 8007cac:	f7ff fff0 	bl	8007c90 <__sinit_lock_acquire>
 8007cb0:	69a3      	ldr	r3, [r4, #24]
 8007cb2:	b11b      	cbz	r3, 8007cbc <__sinit+0x14>
 8007cb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cb8:	f7ff bff0 	b.w	8007c9c <__sinit_lock_release>
 8007cbc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007cc0:	6523      	str	r3, [r4, #80]	; 0x50
 8007cc2:	4b13      	ldr	r3, [pc, #76]	; (8007d10 <__sinit+0x68>)
 8007cc4:	4a13      	ldr	r2, [pc, #76]	; (8007d14 <__sinit+0x6c>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	62a2      	str	r2, [r4, #40]	; 0x28
 8007cca:	42a3      	cmp	r3, r4
 8007ccc:	bf04      	itt	eq
 8007cce:	2301      	moveq	r3, #1
 8007cd0:	61a3      	streq	r3, [r4, #24]
 8007cd2:	4620      	mov	r0, r4
 8007cd4:	f000 f820 	bl	8007d18 <__sfp>
 8007cd8:	6060      	str	r0, [r4, #4]
 8007cda:	4620      	mov	r0, r4
 8007cdc:	f000 f81c 	bl	8007d18 <__sfp>
 8007ce0:	60a0      	str	r0, [r4, #8]
 8007ce2:	4620      	mov	r0, r4
 8007ce4:	f000 f818 	bl	8007d18 <__sfp>
 8007ce8:	2200      	movs	r2, #0
 8007cea:	60e0      	str	r0, [r4, #12]
 8007cec:	2104      	movs	r1, #4
 8007cee:	6860      	ldr	r0, [r4, #4]
 8007cf0:	f7ff ff82 	bl	8007bf8 <std>
 8007cf4:	68a0      	ldr	r0, [r4, #8]
 8007cf6:	2201      	movs	r2, #1
 8007cf8:	2109      	movs	r1, #9
 8007cfa:	f7ff ff7d 	bl	8007bf8 <std>
 8007cfe:	68e0      	ldr	r0, [r4, #12]
 8007d00:	2202      	movs	r2, #2
 8007d02:	2112      	movs	r1, #18
 8007d04:	f7ff ff78 	bl	8007bf8 <std>
 8007d08:	2301      	movs	r3, #1
 8007d0a:	61a3      	str	r3, [r4, #24]
 8007d0c:	e7d2      	b.n	8007cb4 <__sinit+0xc>
 8007d0e:	bf00      	nop
 8007d10:	0800915c 	.word	0x0800915c
 8007d14:	08007c41 	.word	0x08007c41

08007d18 <__sfp>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	4607      	mov	r7, r0
 8007d1c:	f7ff ffac 	bl	8007c78 <__sfp_lock_acquire>
 8007d20:	4b1e      	ldr	r3, [pc, #120]	; (8007d9c <__sfp+0x84>)
 8007d22:	681e      	ldr	r6, [r3, #0]
 8007d24:	69b3      	ldr	r3, [r6, #24]
 8007d26:	b913      	cbnz	r3, 8007d2e <__sfp+0x16>
 8007d28:	4630      	mov	r0, r6
 8007d2a:	f7ff ffbd 	bl	8007ca8 <__sinit>
 8007d2e:	3648      	adds	r6, #72	; 0x48
 8007d30:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007d34:	3b01      	subs	r3, #1
 8007d36:	d503      	bpl.n	8007d40 <__sfp+0x28>
 8007d38:	6833      	ldr	r3, [r6, #0]
 8007d3a:	b30b      	cbz	r3, 8007d80 <__sfp+0x68>
 8007d3c:	6836      	ldr	r6, [r6, #0]
 8007d3e:	e7f7      	b.n	8007d30 <__sfp+0x18>
 8007d40:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007d44:	b9d5      	cbnz	r5, 8007d7c <__sfp+0x64>
 8007d46:	4b16      	ldr	r3, [pc, #88]	; (8007da0 <__sfp+0x88>)
 8007d48:	60e3      	str	r3, [r4, #12]
 8007d4a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007d4e:	6665      	str	r5, [r4, #100]	; 0x64
 8007d50:	f000 f86c 	bl	8007e2c <__retarget_lock_init_recursive>
 8007d54:	f7ff ff96 	bl	8007c84 <__sfp_lock_release>
 8007d58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007d5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007d60:	6025      	str	r5, [r4, #0]
 8007d62:	61a5      	str	r5, [r4, #24]
 8007d64:	2208      	movs	r2, #8
 8007d66:	4629      	mov	r1, r5
 8007d68:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007d6c:	f000 f86f 	bl	8007e4e <memset>
 8007d70:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007d74:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007d78:	4620      	mov	r0, r4
 8007d7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d7c:	3468      	adds	r4, #104	; 0x68
 8007d7e:	e7d9      	b.n	8007d34 <__sfp+0x1c>
 8007d80:	2104      	movs	r1, #4
 8007d82:	4638      	mov	r0, r7
 8007d84:	f7ff ff62 	bl	8007c4c <__sfmoreglue>
 8007d88:	4604      	mov	r4, r0
 8007d8a:	6030      	str	r0, [r6, #0]
 8007d8c:	2800      	cmp	r0, #0
 8007d8e:	d1d5      	bne.n	8007d3c <__sfp+0x24>
 8007d90:	f7ff ff78 	bl	8007c84 <__sfp_lock_release>
 8007d94:	230c      	movs	r3, #12
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	e7ee      	b.n	8007d78 <__sfp+0x60>
 8007d9a:	bf00      	nop
 8007d9c:	0800915c 	.word	0x0800915c
 8007da0:	ffff0001 	.word	0xffff0001

08007da4 <_fwalk_reent>:
 8007da4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007da8:	4606      	mov	r6, r0
 8007daa:	4688      	mov	r8, r1
 8007dac:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007db0:	2700      	movs	r7, #0
 8007db2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007db6:	f1b9 0901 	subs.w	r9, r9, #1
 8007dba:	d505      	bpl.n	8007dc8 <_fwalk_reent+0x24>
 8007dbc:	6824      	ldr	r4, [r4, #0]
 8007dbe:	2c00      	cmp	r4, #0
 8007dc0:	d1f7      	bne.n	8007db2 <_fwalk_reent+0xe>
 8007dc2:	4638      	mov	r0, r7
 8007dc4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007dc8:	89ab      	ldrh	r3, [r5, #12]
 8007dca:	2b01      	cmp	r3, #1
 8007dcc:	d907      	bls.n	8007dde <_fwalk_reent+0x3a>
 8007dce:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007dd2:	3301      	adds	r3, #1
 8007dd4:	d003      	beq.n	8007dde <_fwalk_reent+0x3a>
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4630      	mov	r0, r6
 8007dda:	47c0      	blx	r8
 8007ddc:	4307      	orrs	r7, r0
 8007dde:	3568      	adds	r5, #104	; 0x68
 8007de0:	e7e9      	b.n	8007db6 <_fwalk_reent+0x12>
	...

08007de4 <__libc_init_array>:
 8007de4:	b570      	push	{r4, r5, r6, lr}
 8007de6:	4d0d      	ldr	r5, [pc, #52]	; (8007e1c <__libc_init_array+0x38>)
 8007de8:	4c0d      	ldr	r4, [pc, #52]	; (8007e20 <__libc_init_array+0x3c>)
 8007dea:	1b64      	subs	r4, r4, r5
 8007dec:	10a4      	asrs	r4, r4, #2
 8007dee:	2600      	movs	r6, #0
 8007df0:	42a6      	cmp	r6, r4
 8007df2:	d109      	bne.n	8007e08 <__libc_init_array+0x24>
 8007df4:	4d0b      	ldr	r5, [pc, #44]	; (8007e24 <__libc_init_array+0x40>)
 8007df6:	4c0c      	ldr	r4, [pc, #48]	; (8007e28 <__libc_init_array+0x44>)
 8007df8:	f001 f820 	bl	8008e3c <_init>
 8007dfc:	1b64      	subs	r4, r4, r5
 8007dfe:	10a4      	asrs	r4, r4, #2
 8007e00:	2600      	movs	r6, #0
 8007e02:	42a6      	cmp	r6, r4
 8007e04:	d105      	bne.n	8007e12 <__libc_init_array+0x2e>
 8007e06:	bd70      	pop	{r4, r5, r6, pc}
 8007e08:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e0c:	4798      	blx	r3
 8007e0e:	3601      	adds	r6, #1
 8007e10:	e7ee      	b.n	8007df0 <__libc_init_array+0xc>
 8007e12:	f855 3b04 	ldr.w	r3, [r5], #4
 8007e16:	4798      	blx	r3
 8007e18:	3601      	adds	r6, #1
 8007e1a:	e7f2      	b.n	8007e02 <__libc_init_array+0x1e>
 8007e1c:	0800924c 	.word	0x0800924c
 8007e20:	0800924c 	.word	0x0800924c
 8007e24:	0800924c 	.word	0x0800924c
 8007e28:	08009250 	.word	0x08009250

08007e2c <__retarget_lock_init_recursive>:
 8007e2c:	4770      	bx	lr

08007e2e <__retarget_lock_acquire_recursive>:
 8007e2e:	4770      	bx	lr

08007e30 <__retarget_lock_release_recursive>:
 8007e30:	4770      	bx	lr

08007e32 <memcpy>:
 8007e32:	440a      	add	r2, r1
 8007e34:	4291      	cmp	r1, r2
 8007e36:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8007e3a:	d100      	bne.n	8007e3e <memcpy+0xc>
 8007e3c:	4770      	bx	lr
 8007e3e:	b510      	push	{r4, lr}
 8007e40:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007e44:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007e48:	4291      	cmp	r1, r2
 8007e4a:	d1f9      	bne.n	8007e40 <memcpy+0xe>
 8007e4c:	bd10      	pop	{r4, pc}

08007e4e <memset>:
 8007e4e:	4402      	add	r2, r0
 8007e50:	4603      	mov	r3, r0
 8007e52:	4293      	cmp	r3, r2
 8007e54:	d100      	bne.n	8007e58 <memset+0xa>
 8007e56:	4770      	bx	lr
 8007e58:	f803 1b01 	strb.w	r1, [r3], #1
 8007e5c:	e7f9      	b.n	8007e52 <memset+0x4>
	...

08007e60 <sbrk_aligned>:
 8007e60:	b570      	push	{r4, r5, r6, lr}
 8007e62:	4e0e      	ldr	r6, [pc, #56]	; (8007e9c <sbrk_aligned+0x3c>)
 8007e64:	460c      	mov	r4, r1
 8007e66:	6831      	ldr	r1, [r6, #0]
 8007e68:	4605      	mov	r5, r0
 8007e6a:	b911      	cbnz	r1, 8007e72 <sbrk_aligned+0x12>
 8007e6c:	f000 f97a 	bl	8008164 <_sbrk_r>
 8007e70:	6030      	str	r0, [r6, #0]
 8007e72:	4621      	mov	r1, r4
 8007e74:	4628      	mov	r0, r5
 8007e76:	f000 f975 	bl	8008164 <_sbrk_r>
 8007e7a:	1c43      	adds	r3, r0, #1
 8007e7c:	d00a      	beq.n	8007e94 <sbrk_aligned+0x34>
 8007e7e:	1cc4      	adds	r4, r0, #3
 8007e80:	f024 0403 	bic.w	r4, r4, #3
 8007e84:	42a0      	cmp	r0, r4
 8007e86:	d007      	beq.n	8007e98 <sbrk_aligned+0x38>
 8007e88:	1a21      	subs	r1, r4, r0
 8007e8a:	4628      	mov	r0, r5
 8007e8c:	f000 f96a 	bl	8008164 <_sbrk_r>
 8007e90:	3001      	adds	r0, #1
 8007e92:	d101      	bne.n	8007e98 <sbrk_aligned+0x38>
 8007e94:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007e98:	4620      	mov	r0, r4
 8007e9a:	bd70      	pop	{r4, r5, r6, pc}
 8007e9c:	200089bc 	.word	0x200089bc

08007ea0 <_malloc_r>:
 8007ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007ea4:	1ccd      	adds	r5, r1, #3
 8007ea6:	f025 0503 	bic.w	r5, r5, #3
 8007eaa:	3508      	adds	r5, #8
 8007eac:	2d0c      	cmp	r5, #12
 8007eae:	bf38      	it	cc
 8007eb0:	250c      	movcc	r5, #12
 8007eb2:	2d00      	cmp	r5, #0
 8007eb4:	4607      	mov	r7, r0
 8007eb6:	db01      	blt.n	8007ebc <_malloc_r+0x1c>
 8007eb8:	42a9      	cmp	r1, r5
 8007eba:	d905      	bls.n	8007ec8 <_malloc_r+0x28>
 8007ebc:	230c      	movs	r3, #12
 8007ebe:	603b      	str	r3, [r7, #0]
 8007ec0:	2600      	movs	r6, #0
 8007ec2:	4630      	mov	r0, r6
 8007ec4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007ec8:	4e2e      	ldr	r6, [pc, #184]	; (8007f84 <_malloc_r+0xe4>)
 8007eca:	f000 facd 	bl	8008468 <__malloc_lock>
 8007ece:	6833      	ldr	r3, [r6, #0]
 8007ed0:	461c      	mov	r4, r3
 8007ed2:	bb34      	cbnz	r4, 8007f22 <_malloc_r+0x82>
 8007ed4:	4629      	mov	r1, r5
 8007ed6:	4638      	mov	r0, r7
 8007ed8:	f7ff ffc2 	bl	8007e60 <sbrk_aligned>
 8007edc:	1c43      	adds	r3, r0, #1
 8007ede:	4604      	mov	r4, r0
 8007ee0:	d14d      	bne.n	8007f7e <_malloc_r+0xde>
 8007ee2:	6834      	ldr	r4, [r6, #0]
 8007ee4:	4626      	mov	r6, r4
 8007ee6:	2e00      	cmp	r6, #0
 8007ee8:	d140      	bne.n	8007f6c <_malloc_r+0xcc>
 8007eea:	6823      	ldr	r3, [r4, #0]
 8007eec:	4631      	mov	r1, r6
 8007eee:	4638      	mov	r0, r7
 8007ef0:	eb04 0803 	add.w	r8, r4, r3
 8007ef4:	f000 f936 	bl	8008164 <_sbrk_r>
 8007ef8:	4580      	cmp	r8, r0
 8007efa:	d13a      	bne.n	8007f72 <_malloc_r+0xd2>
 8007efc:	6821      	ldr	r1, [r4, #0]
 8007efe:	3503      	adds	r5, #3
 8007f00:	1a6d      	subs	r5, r5, r1
 8007f02:	f025 0503 	bic.w	r5, r5, #3
 8007f06:	3508      	adds	r5, #8
 8007f08:	2d0c      	cmp	r5, #12
 8007f0a:	bf38      	it	cc
 8007f0c:	250c      	movcc	r5, #12
 8007f0e:	4629      	mov	r1, r5
 8007f10:	4638      	mov	r0, r7
 8007f12:	f7ff ffa5 	bl	8007e60 <sbrk_aligned>
 8007f16:	3001      	adds	r0, #1
 8007f18:	d02b      	beq.n	8007f72 <_malloc_r+0xd2>
 8007f1a:	6823      	ldr	r3, [r4, #0]
 8007f1c:	442b      	add	r3, r5
 8007f1e:	6023      	str	r3, [r4, #0]
 8007f20:	e00e      	b.n	8007f40 <_malloc_r+0xa0>
 8007f22:	6822      	ldr	r2, [r4, #0]
 8007f24:	1b52      	subs	r2, r2, r5
 8007f26:	d41e      	bmi.n	8007f66 <_malloc_r+0xc6>
 8007f28:	2a0b      	cmp	r2, #11
 8007f2a:	d916      	bls.n	8007f5a <_malloc_r+0xba>
 8007f2c:	1961      	adds	r1, r4, r5
 8007f2e:	42a3      	cmp	r3, r4
 8007f30:	6025      	str	r5, [r4, #0]
 8007f32:	bf18      	it	ne
 8007f34:	6059      	strne	r1, [r3, #4]
 8007f36:	6863      	ldr	r3, [r4, #4]
 8007f38:	bf08      	it	eq
 8007f3a:	6031      	streq	r1, [r6, #0]
 8007f3c:	5162      	str	r2, [r4, r5]
 8007f3e:	604b      	str	r3, [r1, #4]
 8007f40:	4638      	mov	r0, r7
 8007f42:	f104 060b 	add.w	r6, r4, #11
 8007f46:	f000 fa95 	bl	8008474 <__malloc_unlock>
 8007f4a:	f026 0607 	bic.w	r6, r6, #7
 8007f4e:	1d23      	adds	r3, r4, #4
 8007f50:	1af2      	subs	r2, r6, r3
 8007f52:	d0b6      	beq.n	8007ec2 <_malloc_r+0x22>
 8007f54:	1b9b      	subs	r3, r3, r6
 8007f56:	50a3      	str	r3, [r4, r2]
 8007f58:	e7b3      	b.n	8007ec2 <_malloc_r+0x22>
 8007f5a:	6862      	ldr	r2, [r4, #4]
 8007f5c:	42a3      	cmp	r3, r4
 8007f5e:	bf0c      	ite	eq
 8007f60:	6032      	streq	r2, [r6, #0]
 8007f62:	605a      	strne	r2, [r3, #4]
 8007f64:	e7ec      	b.n	8007f40 <_malloc_r+0xa0>
 8007f66:	4623      	mov	r3, r4
 8007f68:	6864      	ldr	r4, [r4, #4]
 8007f6a:	e7b2      	b.n	8007ed2 <_malloc_r+0x32>
 8007f6c:	4634      	mov	r4, r6
 8007f6e:	6876      	ldr	r6, [r6, #4]
 8007f70:	e7b9      	b.n	8007ee6 <_malloc_r+0x46>
 8007f72:	230c      	movs	r3, #12
 8007f74:	603b      	str	r3, [r7, #0]
 8007f76:	4638      	mov	r0, r7
 8007f78:	f000 fa7c 	bl	8008474 <__malloc_unlock>
 8007f7c:	e7a1      	b.n	8007ec2 <_malloc_r+0x22>
 8007f7e:	6025      	str	r5, [r4, #0]
 8007f80:	e7de      	b.n	8007f40 <_malloc_r+0xa0>
 8007f82:	bf00      	nop
 8007f84:	200089b8 	.word	0x200089b8

08007f88 <iprintf>:
 8007f88:	b40f      	push	{r0, r1, r2, r3}
 8007f8a:	4b0a      	ldr	r3, [pc, #40]	; (8007fb4 <iprintf+0x2c>)
 8007f8c:	b513      	push	{r0, r1, r4, lr}
 8007f8e:	681c      	ldr	r4, [r3, #0]
 8007f90:	b124      	cbz	r4, 8007f9c <iprintf+0x14>
 8007f92:	69a3      	ldr	r3, [r4, #24]
 8007f94:	b913      	cbnz	r3, 8007f9c <iprintf+0x14>
 8007f96:	4620      	mov	r0, r4
 8007f98:	f7ff fe86 	bl	8007ca8 <__sinit>
 8007f9c:	ab05      	add	r3, sp, #20
 8007f9e:	9a04      	ldr	r2, [sp, #16]
 8007fa0:	68a1      	ldr	r1, [r4, #8]
 8007fa2:	9301      	str	r3, [sp, #4]
 8007fa4:	4620      	mov	r0, r4
 8007fa6:	f000 fae1 	bl	800856c <_vfiprintf_r>
 8007faa:	b002      	add	sp, #8
 8007fac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007fb0:	b004      	add	sp, #16
 8007fb2:	4770      	bx	lr
 8007fb4:	2000003c 	.word	0x2000003c

08007fb8 <srand>:
 8007fb8:	b538      	push	{r3, r4, r5, lr}
 8007fba:	4b10      	ldr	r3, [pc, #64]	; (8007ffc <srand+0x44>)
 8007fbc:	681d      	ldr	r5, [r3, #0]
 8007fbe:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007fc0:	4604      	mov	r4, r0
 8007fc2:	b9b3      	cbnz	r3, 8007ff2 <srand+0x3a>
 8007fc4:	2018      	movs	r0, #24
 8007fc6:	f000 fa47 	bl	8008458 <malloc>
 8007fca:	4602      	mov	r2, r0
 8007fcc:	63a8      	str	r0, [r5, #56]	; 0x38
 8007fce:	b920      	cbnz	r0, 8007fda <srand+0x22>
 8007fd0:	4b0b      	ldr	r3, [pc, #44]	; (8008000 <srand+0x48>)
 8007fd2:	480c      	ldr	r0, [pc, #48]	; (8008004 <srand+0x4c>)
 8007fd4:	2142      	movs	r1, #66	; 0x42
 8007fd6:	f000 f92b 	bl	8008230 <__assert_func>
 8007fda:	490b      	ldr	r1, [pc, #44]	; (8008008 <srand+0x50>)
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	; (800800c <srand+0x54>)
 8007fde:	e9c0 1300 	strd	r1, r3, [r0]
 8007fe2:	4b0b      	ldr	r3, [pc, #44]	; (8008010 <srand+0x58>)
 8007fe4:	6083      	str	r3, [r0, #8]
 8007fe6:	230b      	movs	r3, #11
 8007fe8:	8183      	strh	r3, [r0, #12]
 8007fea:	2100      	movs	r1, #0
 8007fec:	2001      	movs	r0, #1
 8007fee:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007ff2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007ff4:	2200      	movs	r2, #0
 8007ff6:	611c      	str	r4, [r3, #16]
 8007ff8:	615a      	str	r2, [r3, #20]
 8007ffa:	bd38      	pop	{r3, r4, r5, pc}
 8007ffc:	2000003c 	.word	0x2000003c
 8008000:	08009160 	.word	0x08009160
 8008004:	08009177 	.word	0x08009177
 8008008:	abcd330e 	.word	0xabcd330e
 800800c:	e66d1234 	.word	0xe66d1234
 8008010:	0005deec 	.word	0x0005deec

08008014 <rand>:
 8008014:	4b16      	ldr	r3, [pc, #88]	; (8008070 <rand+0x5c>)
 8008016:	b510      	push	{r4, lr}
 8008018:	681c      	ldr	r4, [r3, #0]
 800801a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800801c:	b9b3      	cbnz	r3, 800804c <rand+0x38>
 800801e:	2018      	movs	r0, #24
 8008020:	f000 fa1a 	bl	8008458 <malloc>
 8008024:	63a0      	str	r0, [r4, #56]	; 0x38
 8008026:	b928      	cbnz	r0, 8008034 <rand+0x20>
 8008028:	4602      	mov	r2, r0
 800802a:	4b12      	ldr	r3, [pc, #72]	; (8008074 <rand+0x60>)
 800802c:	4812      	ldr	r0, [pc, #72]	; (8008078 <rand+0x64>)
 800802e:	214e      	movs	r1, #78	; 0x4e
 8008030:	f000 f8fe 	bl	8008230 <__assert_func>
 8008034:	4a11      	ldr	r2, [pc, #68]	; (800807c <rand+0x68>)
 8008036:	4b12      	ldr	r3, [pc, #72]	; (8008080 <rand+0x6c>)
 8008038:	e9c0 2300 	strd	r2, r3, [r0]
 800803c:	4b11      	ldr	r3, [pc, #68]	; (8008084 <rand+0x70>)
 800803e:	6083      	str	r3, [r0, #8]
 8008040:	230b      	movs	r3, #11
 8008042:	8183      	strh	r3, [r0, #12]
 8008044:	2201      	movs	r2, #1
 8008046:	2300      	movs	r3, #0
 8008048:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800804c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800804e:	4a0e      	ldr	r2, [pc, #56]	; (8008088 <rand+0x74>)
 8008050:	6920      	ldr	r0, [r4, #16]
 8008052:	6963      	ldr	r3, [r4, #20]
 8008054:	490d      	ldr	r1, [pc, #52]	; (800808c <rand+0x78>)
 8008056:	4342      	muls	r2, r0
 8008058:	fb01 2203 	mla	r2, r1, r3, r2
 800805c:	fba0 0101 	umull	r0, r1, r0, r1
 8008060:	1c43      	adds	r3, r0, #1
 8008062:	eb42 0001 	adc.w	r0, r2, r1
 8008066:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800806a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800806e:	bd10      	pop	{r4, pc}
 8008070:	2000003c 	.word	0x2000003c
 8008074:	08009160 	.word	0x08009160
 8008078:	08009177 	.word	0x08009177
 800807c:	abcd330e 	.word	0xabcd330e
 8008080:	e66d1234 	.word	0xe66d1234
 8008084:	0005deec 	.word	0x0005deec
 8008088:	5851f42d 	.word	0x5851f42d
 800808c:	4c957f2d 	.word	0x4c957f2d

08008090 <cleanup_glue>:
 8008090:	b538      	push	{r3, r4, r5, lr}
 8008092:	460c      	mov	r4, r1
 8008094:	6809      	ldr	r1, [r1, #0]
 8008096:	4605      	mov	r5, r0
 8008098:	b109      	cbz	r1, 800809e <cleanup_glue+0xe>
 800809a:	f7ff fff9 	bl	8008090 <cleanup_glue>
 800809e:	4621      	mov	r1, r4
 80080a0:	4628      	mov	r0, r5
 80080a2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80080a6:	f000 b9eb 	b.w	8008480 <_free_r>
	...

080080ac <_reclaim_reent>:
 80080ac:	4b2c      	ldr	r3, [pc, #176]	; (8008160 <_reclaim_reent+0xb4>)
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4283      	cmp	r3, r0
 80080b2:	b570      	push	{r4, r5, r6, lr}
 80080b4:	4604      	mov	r4, r0
 80080b6:	d051      	beq.n	800815c <_reclaim_reent+0xb0>
 80080b8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80080ba:	b143      	cbz	r3, 80080ce <_reclaim_reent+0x22>
 80080bc:	68db      	ldr	r3, [r3, #12]
 80080be:	2b00      	cmp	r3, #0
 80080c0:	d14a      	bne.n	8008158 <_reclaim_reent+0xac>
 80080c2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080c4:	6819      	ldr	r1, [r3, #0]
 80080c6:	b111      	cbz	r1, 80080ce <_reclaim_reent+0x22>
 80080c8:	4620      	mov	r0, r4
 80080ca:	f000 f9d9 	bl	8008480 <_free_r>
 80080ce:	6961      	ldr	r1, [r4, #20]
 80080d0:	b111      	cbz	r1, 80080d8 <_reclaim_reent+0x2c>
 80080d2:	4620      	mov	r0, r4
 80080d4:	f000 f9d4 	bl	8008480 <_free_r>
 80080d8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80080da:	b111      	cbz	r1, 80080e2 <_reclaim_reent+0x36>
 80080dc:	4620      	mov	r0, r4
 80080de:	f000 f9cf 	bl	8008480 <_free_r>
 80080e2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80080e4:	b111      	cbz	r1, 80080ec <_reclaim_reent+0x40>
 80080e6:	4620      	mov	r0, r4
 80080e8:	f000 f9ca 	bl	8008480 <_free_r>
 80080ec:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80080ee:	b111      	cbz	r1, 80080f6 <_reclaim_reent+0x4a>
 80080f0:	4620      	mov	r0, r4
 80080f2:	f000 f9c5 	bl	8008480 <_free_r>
 80080f6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80080f8:	b111      	cbz	r1, 8008100 <_reclaim_reent+0x54>
 80080fa:	4620      	mov	r0, r4
 80080fc:	f000 f9c0 	bl	8008480 <_free_r>
 8008100:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008102:	b111      	cbz	r1, 800810a <_reclaim_reent+0x5e>
 8008104:	4620      	mov	r0, r4
 8008106:	f000 f9bb 	bl	8008480 <_free_r>
 800810a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800810c:	b111      	cbz	r1, 8008114 <_reclaim_reent+0x68>
 800810e:	4620      	mov	r0, r4
 8008110:	f000 f9b6 	bl	8008480 <_free_r>
 8008114:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008116:	b111      	cbz	r1, 800811e <_reclaim_reent+0x72>
 8008118:	4620      	mov	r0, r4
 800811a:	f000 f9b1 	bl	8008480 <_free_r>
 800811e:	69a3      	ldr	r3, [r4, #24]
 8008120:	b1e3      	cbz	r3, 800815c <_reclaim_reent+0xb0>
 8008122:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008124:	4620      	mov	r0, r4
 8008126:	4798      	blx	r3
 8008128:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800812a:	b1b9      	cbz	r1, 800815c <_reclaim_reent+0xb0>
 800812c:	4620      	mov	r0, r4
 800812e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008132:	f7ff bfad 	b.w	8008090 <cleanup_glue>
 8008136:	5949      	ldr	r1, [r1, r5]
 8008138:	b941      	cbnz	r1, 800814c <_reclaim_reent+0xa0>
 800813a:	3504      	adds	r5, #4
 800813c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800813e:	2d80      	cmp	r5, #128	; 0x80
 8008140:	68d9      	ldr	r1, [r3, #12]
 8008142:	d1f8      	bne.n	8008136 <_reclaim_reent+0x8a>
 8008144:	4620      	mov	r0, r4
 8008146:	f000 f99b 	bl	8008480 <_free_r>
 800814a:	e7ba      	b.n	80080c2 <_reclaim_reent+0x16>
 800814c:	680e      	ldr	r6, [r1, #0]
 800814e:	4620      	mov	r0, r4
 8008150:	f000 f996 	bl	8008480 <_free_r>
 8008154:	4631      	mov	r1, r6
 8008156:	e7ef      	b.n	8008138 <_reclaim_reent+0x8c>
 8008158:	2500      	movs	r5, #0
 800815a:	e7ef      	b.n	800813c <_reclaim_reent+0x90>
 800815c:	bd70      	pop	{r4, r5, r6, pc}
 800815e:	bf00      	nop
 8008160:	2000003c 	.word	0x2000003c

08008164 <_sbrk_r>:
 8008164:	b538      	push	{r3, r4, r5, lr}
 8008166:	4d06      	ldr	r5, [pc, #24]	; (8008180 <_sbrk_r+0x1c>)
 8008168:	2300      	movs	r3, #0
 800816a:	4604      	mov	r4, r0
 800816c:	4608      	mov	r0, r1
 800816e:	602b      	str	r3, [r5, #0]
 8008170:	f7f8 fe5a 	bl	8000e28 <_sbrk>
 8008174:	1c43      	adds	r3, r0, #1
 8008176:	d102      	bne.n	800817e <_sbrk_r+0x1a>
 8008178:	682b      	ldr	r3, [r5, #0]
 800817a:	b103      	cbz	r3, 800817e <_sbrk_r+0x1a>
 800817c:	6023      	str	r3, [r4, #0]
 800817e:	bd38      	pop	{r3, r4, r5, pc}
 8008180:	200089c0 	.word	0x200089c0

08008184 <__sread>:
 8008184:	b510      	push	{r4, lr}
 8008186:	460c      	mov	r4, r1
 8008188:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800818c:	f000 fcb2 	bl	8008af4 <_read_r>
 8008190:	2800      	cmp	r0, #0
 8008192:	bfab      	itete	ge
 8008194:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008196:	89a3      	ldrhlt	r3, [r4, #12]
 8008198:	181b      	addge	r3, r3, r0
 800819a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800819e:	bfac      	ite	ge
 80081a0:	6563      	strge	r3, [r4, #84]	; 0x54
 80081a2:	81a3      	strhlt	r3, [r4, #12]
 80081a4:	bd10      	pop	{r4, pc}

080081a6 <__swrite>:
 80081a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081aa:	461f      	mov	r7, r3
 80081ac:	898b      	ldrh	r3, [r1, #12]
 80081ae:	05db      	lsls	r3, r3, #23
 80081b0:	4605      	mov	r5, r0
 80081b2:	460c      	mov	r4, r1
 80081b4:	4616      	mov	r6, r2
 80081b6:	d505      	bpl.n	80081c4 <__swrite+0x1e>
 80081b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081bc:	2302      	movs	r3, #2
 80081be:	2200      	movs	r2, #0
 80081c0:	f000 f938 	bl	8008434 <_lseek_r>
 80081c4:	89a3      	ldrh	r3, [r4, #12]
 80081c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80081ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80081ce:	81a3      	strh	r3, [r4, #12]
 80081d0:	4632      	mov	r2, r6
 80081d2:	463b      	mov	r3, r7
 80081d4:	4628      	mov	r0, r5
 80081d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80081da:	f000 b817 	b.w	800820c <_write_r>

080081de <__sseek>:
 80081de:	b510      	push	{r4, lr}
 80081e0:	460c      	mov	r4, r1
 80081e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081e6:	f000 f925 	bl	8008434 <_lseek_r>
 80081ea:	1c43      	adds	r3, r0, #1
 80081ec:	89a3      	ldrh	r3, [r4, #12]
 80081ee:	bf15      	itete	ne
 80081f0:	6560      	strne	r0, [r4, #84]	; 0x54
 80081f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80081f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80081fa:	81a3      	strheq	r3, [r4, #12]
 80081fc:	bf18      	it	ne
 80081fe:	81a3      	strhne	r3, [r4, #12]
 8008200:	bd10      	pop	{r4, pc}

08008202 <__sclose>:
 8008202:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008206:	f000 b831 	b.w	800826c <_close_r>
	...

0800820c <_write_r>:
 800820c:	b538      	push	{r3, r4, r5, lr}
 800820e:	4d07      	ldr	r5, [pc, #28]	; (800822c <_write_r+0x20>)
 8008210:	4604      	mov	r4, r0
 8008212:	4608      	mov	r0, r1
 8008214:	4611      	mov	r1, r2
 8008216:	2200      	movs	r2, #0
 8008218:	602a      	str	r2, [r5, #0]
 800821a:	461a      	mov	r2, r3
 800821c:	f7f8 fb60 	bl	80008e0 <_write>
 8008220:	1c43      	adds	r3, r0, #1
 8008222:	d102      	bne.n	800822a <_write_r+0x1e>
 8008224:	682b      	ldr	r3, [r5, #0]
 8008226:	b103      	cbz	r3, 800822a <_write_r+0x1e>
 8008228:	6023      	str	r3, [r4, #0]
 800822a:	bd38      	pop	{r3, r4, r5, pc}
 800822c:	200089c0 	.word	0x200089c0

08008230 <__assert_func>:
 8008230:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008232:	4614      	mov	r4, r2
 8008234:	461a      	mov	r2, r3
 8008236:	4b09      	ldr	r3, [pc, #36]	; (800825c <__assert_func+0x2c>)
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	4605      	mov	r5, r0
 800823c:	68d8      	ldr	r0, [r3, #12]
 800823e:	b14c      	cbz	r4, 8008254 <__assert_func+0x24>
 8008240:	4b07      	ldr	r3, [pc, #28]	; (8008260 <__assert_func+0x30>)
 8008242:	9100      	str	r1, [sp, #0]
 8008244:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008248:	4906      	ldr	r1, [pc, #24]	; (8008264 <__assert_func+0x34>)
 800824a:	462b      	mov	r3, r5
 800824c:	f000 f8e0 	bl	8008410 <fiprintf>
 8008250:	f000 fd22 	bl	8008c98 <abort>
 8008254:	4b04      	ldr	r3, [pc, #16]	; (8008268 <__assert_func+0x38>)
 8008256:	461c      	mov	r4, r3
 8008258:	e7f3      	b.n	8008242 <__assert_func+0x12>
 800825a:	bf00      	nop
 800825c:	2000003c 	.word	0x2000003c
 8008260:	080091d2 	.word	0x080091d2
 8008264:	080091df 	.word	0x080091df
 8008268:	0800920d 	.word	0x0800920d

0800826c <_close_r>:
 800826c:	b538      	push	{r3, r4, r5, lr}
 800826e:	4d06      	ldr	r5, [pc, #24]	; (8008288 <_close_r+0x1c>)
 8008270:	2300      	movs	r3, #0
 8008272:	4604      	mov	r4, r0
 8008274:	4608      	mov	r0, r1
 8008276:	602b      	str	r3, [r5, #0]
 8008278:	f7f8 fda1 	bl	8000dbe <_close>
 800827c:	1c43      	adds	r3, r0, #1
 800827e:	d102      	bne.n	8008286 <_close_r+0x1a>
 8008280:	682b      	ldr	r3, [r5, #0]
 8008282:	b103      	cbz	r3, 8008286 <_close_r+0x1a>
 8008284:	6023      	str	r3, [r4, #0]
 8008286:	bd38      	pop	{r3, r4, r5, pc}
 8008288:	200089c0 	.word	0x200089c0

0800828c <__sflush_r>:
 800828c:	898a      	ldrh	r2, [r1, #12]
 800828e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008292:	4605      	mov	r5, r0
 8008294:	0710      	lsls	r0, r2, #28
 8008296:	460c      	mov	r4, r1
 8008298:	d458      	bmi.n	800834c <__sflush_r+0xc0>
 800829a:	684b      	ldr	r3, [r1, #4]
 800829c:	2b00      	cmp	r3, #0
 800829e:	dc05      	bgt.n	80082ac <__sflush_r+0x20>
 80082a0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80082a2:	2b00      	cmp	r3, #0
 80082a4:	dc02      	bgt.n	80082ac <__sflush_r+0x20>
 80082a6:	2000      	movs	r0, #0
 80082a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082ac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082ae:	2e00      	cmp	r6, #0
 80082b0:	d0f9      	beq.n	80082a6 <__sflush_r+0x1a>
 80082b2:	2300      	movs	r3, #0
 80082b4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80082b8:	682f      	ldr	r7, [r5, #0]
 80082ba:	602b      	str	r3, [r5, #0]
 80082bc:	d032      	beq.n	8008324 <__sflush_r+0x98>
 80082be:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80082c0:	89a3      	ldrh	r3, [r4, #12]
 80082c2:	075a      	lsls	r2, r3, #29
 80082c4:	d505      	bpl.n	80082d2 <__sflush_r+0x46>
 80082c6:	6863      	ldr	r3, [r4, #4]
 80082c8:	1ac0      	subs	r0, r0, r3
 80082ca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082cc:	b10b      	cbz	r3, 80082d2 <__sflush_r+0x46>
 80082ce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80082d0:	1ac0      	subs	r0, r0, r3
 80082d2:	2300      	movs	r3, #0
 80082d4:	4602      	mov	r2, r0
 80082d6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80082d8:	6a21      	ldr	r1, [r4, #32]
 80082da:	4628      	mov	r0, r5
 80082dc:	47b0      	blx	r6
 80082de:	1c43      	adds	r3, r0, #1
 80082e0:	89a3      	ldrh	r3, [r4, #12]
 80082e2:	d106      	bne.n	80082f2 <__sflush_r+0x66>
 80082e4:	6829      	ldr	r1, [r5, #0]
 80082e6:	291d      	cmp	r1, #29
 80082e8:	d82c      	bhi.n	8008344 <__sflush_r+0xb8>
 80082ea:	4a2a      	ldr	r2, [pc, #168]	; (8008394 <__sflush_r+0x108>)
 80082ec:	40ca      	lsrs	r2, r1
 80082ee:	07d6      	lsls	r6, r2, #31
 80082f0:	d528      	bpl.n	8008344 <__sflush_r+0xb8>
 80082f2:	2200      	movs	r2, #0
 80082f4:	6062      	str	r2, [r4, #4]
 80082f6:	04d9      	lsls	r1, r3, #19
 80082f8:	6922      	ldr	r2, [r4, #16]
 80082fa:	6022      	str	r2, [r4, #0]
 80082fc:	d504      	bpl.n	8008308 <__sflush_r+0x7c>
 80082fe:	1c42      	adds	r2, r0, #1
 8008300:	d101      	bne.n	8008306 <__sflush_r+0x7a>
 8008302:	682b      	ldr	r3, [r5, #0]
 8008304:	b903      	cbnz	r3, 8008308 <__sflush_r+0x7c>
 8008306:	6560      	str	r0, [r4, #84]	; 0x54
 8008308:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800830a:	602f      	str	r7, [r5, #0]
 800830c:	2900      	cmp	r1, #0
 800830e:	d0ca      	beq.n	80082a6 <__sflush_r+0x1a>
 8008310:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008314:	4299      	cmp	r1, r3
 8008316:	d002      	beq.n	800831e <__sflush_r+0x92>
 8008318:	4628      	mov	r0, r5
 800831a:	f000 f8b1 	bl	8008480 <_free_r>
 800831e:	2000      	movs	r0, #0
 8008320:	6360      	str	r0, [r4, #52]	; 0x34
 8008322:	e7c1      	b.n	80082a8 <__sflush_r+0x1c>
 8008324:	6a21      	ldr	r1, [r4, #32]
 8008326:	2301      	movs	r3, #1
 8008328:	4628      	mov	r0, r5
 800832a:	47b0      	blx	r6
 800832c:	1c41      	adds	r1, r0, #1
 800832e:	d1c7      	bne.n	80082c0 <__sflush_r+0x34>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	2b00      	cmp	r3, #0
 8008334:	d0c4      	beq.n	80082c0 <__sflush_r+0x34>
 8008336:	2b1d      	cmp	r3, #29
 8008338:	d001      	beq.n	800833e <__sflush_r+0xb2>
 800833a:	2b16      	cmp	r3, #22
 800833c:	d101      	bne.n	8008342 <__sflush_r+0xb6>
 800833e:	602f      	str	r7, [r5, #0]
 8008340:	e7b1      	b.n	80082a6 <__sflush_r+0x1a>
 8008342:	89a3      	ldrh	r3, [r4, #12]
 8008344:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008348:	81a3      	strh	r3, [r4, #12]
 800834a:	e7ad      	b.n	80082a8 <__sflush_r+0x1c>
 800834c:	690f      	ldr	r7, [r1, #16]
 800834e:	2f00      	cmp	r7, #0
 8008350:	d0a9      	beq.n	80082a6 <__sflush_r+0x1a>
 8008352:	0793      	lsls	r3, r2, #30
 8008354:	680e      	ldr	r6, [r1, #0]
 8008356:	bf08      	it	eq
 8008358:	694b      	ldreq	r3, [r1, #20]
 800835a:	600f      	str	r7, [r1, #0]
 800835c:	bf18      	it	ne
 800835e:	2300      	movne	r3, #0
 8008360:	eba6 0807 	sub.w	r8, r6, r7
 8008364:	608b      	str	r3, [r1, #8]
 8008366:	f1b8 0f00 	cmp.w	r8, #0
 800836a:	dd9c      	ble.n	80082a6 <__sflush_r+0x1a>
 800836c:	6a21      	ldr	r1, [r4, #32]
 800836e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008370:	4643      	mov	r3, r8
 8008372:	463a      	mov	r2, r7
 8008374:	4628      	mov	r0, r5
 8008376:	47b0      	blx	r6
 8008378:	2800      	cmp	r0, #0
 800837a:	dc06      	bgt.n	800838a <__sflush_r+0xfe>
 800837c:	89a3      	ldrh	r3, [r4, #12]
 800837e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008382:	81a3      	strh	r3, [r4, #12]
 8008384:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008388:	e78e      	b.n	80082a8 <__sflush_r+0x1c>
 800838a:	4407      	add	r7, r0
 800838c:	eba8 0800 	sub.w	r8, r8, r0
 8008390:	e7e9      	b.n	8008366 <__sflush_r+0xda>
 8008392:	bf00      	nop
 8008394:	20400001 	.word	0x20400001

08008398 <_fflush_r>:
 8008398:	b538      	push	{r3, r4, r5, lr}
 800839a:	690b      	ldr	r3, [r1, #16]
 800839c:	4605      	mov	r5, r0
 800839e:	460c      	mov	r4, r1
 80083a0:	b913      	cbnz	r3, 80083a8 <_fflush_r+0x10>
 80083a2:	2500      	movs	r5, #0
 80083a4:	4628      	mov	r0, r5
 80083a6:	bd38      	pop	{r3, r4, r5, pc}
 80083a8:	b118      	cbz	r0, 80083b2 <_fflush_r+0x1a>
 80083aa:	6983      	ldr	r3, [r0, #24]
 80083ac:	b90b      	cbnz	r3, 80083b2 <_fflush_r+0x1a>
 80083ae:	f7ff fc7b 	bl	8007ca8 <__sinit>
 80083b2:	4b14      	ldr	r3, [pc, #80]	; (8008404 <_fflush_r+0x6c>)
 80083b4:	429c      	cmp	r4, r3
 80083b6:	d11b      	bne.n	80083f0 <_fflush_r+0x58>
 80083b8:	686c      	ldr	r4, [r5, #4]
 80083ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083be:	2b00      	cmp	r3, #0
 80083c0:	d0ef      	beq.n	80083a2 <_fflush_r+0xa>
 80083c2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80083c4:	07d0      	lsls	r0, r2, #31
 80083c6:	d404      	bmi.n	80083d2 <_fflush_r+0x3a>
 80083c8:	0599      	lsls	r1, r3, #22
 80083ca:	d402      	bmi.n	80083d2 <_fflush_r+0x3a>
 80083cc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ce:	f7ff fd2e 	bl	8007e2e <__retarget_lock_acquire_recursive>
 80083d2:	4628      	mov	r0, r5
 80083d4:	4621      	mov	r1, r4
 80083d6:	f7ff ff59 	bl	800828c <__sflush_r>
 80083da:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80083dc:	07da      	lsls	r2, r3, #31
 80083de:	4605      	mov	r5, r0
 80083e0:	d4e0      	bmi.n	80083a4 <_fflush_r+0xc>
 80083e2:	89a3      	ldrh	r3, [r4, #12]
 80083e4:	059b      	lsls	r3, r3, #22
 80083e6:	d4dd      	bmi.n	80083a4 <_fflush_r+0xc>
 80083e8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80083ea:	f7ff fd21 	bl	8007e30 <__retarget_lock_release_recursive>
 80083ee:	e7d9      	b.n	80083a4 <_fflush_r+0xc>
 80083f0:	4b05      	ldr	r3, [pc, #20]	; (8008408 <_fflush_r+0x70>)
 80083f2:	429c      	cmp	r4, r3
 80083f4:	d101      	bne.n	80083fa <_fflush_r+0x62>
 80083f6:	68ac      	ldr	r4, [r5, #8]
 80083f8:	e7df      	b.n	80083ba <_fflush_r+0x22>
 80083fa:	4b04      	ldr	r3, [pc, #16]	; (800840c <_fflush_r+0x74>)
 80083fc:	429c      	cmp	r4, r3
 80083fe:	bf08      	it	eq
 8008400:	68ec      	ldreq	r4, [r5, #12]
 8008402:	e7da      	b.n	80083ba <_fflush_r+0x22>
 8008404:	0800911c 	.word	0x0800911c
 8008408:	0800913c 	.word	0x0800913c
 800840c:	080090fc 	.word	0x080090fc

08008410 <fiprintf>:
 8008410:	b40e      	push	{r1, r2, r3}
 8008412:	b503      	push	{r0, r1, lr}
 8008414:	4601      	mov	r1, r0
 8008416:	ab03      	add	r3, sp, #12
 8008418:	4805      	ldr	r0, [pc, #20]	; (8008430 <fiprintf+0x20>)
 800841a:	f853 2b04 	ldr.w	r2, [r3], #4
 800841e:	6800      	ldr	r0, [r0, #0]
 8008420:	9301      	str	r3, [sp, #4]
 8008422:	f000 f8a3 	bl	800856c <_vfiprintf_r>
 8008426:	b002      	add	sp, #8
 8008428:	f85d eb04 	ldr.w	lr, [sp], #4
 800842c:	b003      	add	sp, #12
 800842e:	4770      	bx	lr
 8008430:	2000003c 	.word	0x2000003c

08008434 <_lseek_r>:
 8008434:	b538      	push	{r3, r4, r5, lr}
 8008436:	4d07      	ldr	r5, [pc, #28]	; (8008454 <_lseek_r+0x20>)
 8008438:	4604      	mov	r4, r0
 800843a:	4608      	mov	r0, r1
 800843c:	4611      	mov	r1, r2
 800843e:	2200      	movs	r2, #0
 8008440:	602a      	str	r2, [r5, #0]
 8008442:	461a      	mov	r2, r3
 8008444:	f7f8 fce2 	bl	8000e0c <_lseek>
 8008448:	1c43      	adds	r3, r0, #1
 800844a:	d102      	bne.n	8008452 <_lseek_r+0x1e>
 800844c:	682b      	ldr	r3, [r5, #0]
 800844e:	b103      	cbz	r3, 8008452 <_lseek_r+0x1e>
 8008450:	6023      	str	r3, [r4, #0]
 8008452:	bd38      	pop	{r3, r4, r5, pc}
 8008454:	200089c0 	.word	0x200089c0

08008458 <malloc>:
 8008458:	4b02      	ldr	r3, [pc, #8]	; (8008464 <malloc+0xc>)
 800845a:	4601      	mov	r1, r0
 800845c:	6818      	ldr	r0, [r3, #0]
 800845e:	f7ff bd1f 	b.w	8007ea0 <_malloc_r>
 8008462:	bf00      	nop
 8008464:	2000003c 	.word	0x2000003c

08008468 <__malloc_lock>:
 8008468:	4801      	ldr	r0, [pc, #4]	; (8008470 <__malloc_lock+0x8>)
 800846a:	f7ff bce0 	b.w	8007e2e <__retarget_lock_acquire_recursive>
 800846e:	bf00      	nop
 8008470:	200089b4 	.word	0x200089b4

08008474 <__malloc_unlock>:
 8008474:	4801      	ldr	r0, [pc, #4]	; (800847c <__malloc_unlock+0x8>)
 8008476:	f7ff bcdb 	b.w	8007e30 <__retarget_lock_release_recursive>
 800847a:	bf00      	nop
 800847c:	200089b4 	.word	0x200089b4

08008480 <_free_r>:
 8008480:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008482:	2900      	cmp	r1, #0
 8008484:	d044      	beq.n	8008510 <_free_r+0x90>
 8008486:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800848a:	9001      	str	r0, [sp, #4]
 800848c:	2b00      	cmp	r3, #0
 800848e:	f1a1 0404 	sub.w	r4, r1, #4
 8008492:	bfb8      	it	lt
 8008494:	18e4      	addlt	r4, r4, r3
 8008496:	f7ff ffe7 	bl	8008468 <__malloc_lock>
 800849a:	4a1e      	ldr	r2, [pc, #120]	; (8008514 <_free_r+0x94>)
 800849c:	9801      	ldr	r0, [sp, #4]
 800849e:	6813      	ldr	r3, [r2, #0]
 80084a0:	b933      	cbnz	r3, 80084b0 <_free_r+0x30>
 80084a2:	6063      	str	r3, [r4, #4]
 80084a4:	6014      	str	r4, [r2, #0]
 80084a6:	b003      	add	sp, #12
 80084a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80084ac:	f7ff bfe2 	b.w	8008474 <__malloc_unlock>
 80084b0:	42a3      	cmp	r3, r4
 80084b2:	d908      	bls.n	80084c6 <_free_r+0x46>
 80084b4:	6825      	ldr	r5, [r4, #0]
 80084b6:	1961      	adds	r1, r4, r5
 80084b8:	428b      	cmp	r3, r1
 80084ba:	bf01      	itttt	eq
 80084bc:	6819      	ldreq	r1, [r3, #0]
 80084be:	685b      	ldreq	r3, [r3, #4]
 80084c0:	1949      	addeq	r1, r1, r5
 80084c2:	6021      	streq	r1, [r4, #0]
 80084c4:	e7ed      	b.n	80084a2 <_free_r+0x22>
 80084c6:	461a      	mov	r2, r3
 80084c8:	685b      	ldr	r3, [r3, #4]
 80084ca:	b10b      	cbz	r3, 80084d0 <_free_r+0x50>
 80084cc:	42a3      	cmp	r3, r4
 80084ce:	d9fa      	bls.n	80084c6 <_free_r+0x46>
 80084d0:	6811      	ldr	r1, [r2, #0]
 80084d2:	1855      	adds	r5, r2, r1
 80084d4:	42a5      	cmp	r5, r4
 80084d6:	d10b      	bne.n	80084f0 <_free_r+0x70>
 80084d8:	6824      	ldr	r4, [r4, #0]
 80084da:	4421      	add	r1, r4
 80084dc:	1854      	adds	r4, r2, r1
 80084de:	42a3      	cmp	r3, r4
 80084e0:	6011      	str	r1, [r2, #0]
 80084e2:	d1e0      	bne.n	80084a6 <_free_r+0x26>
 80084e4:	681c      	ldr	r4, [r3, #0]
 80084e6:	685b      	ldr	r3, [r3, #4]
 80084e8:	6053      	str	r3, [r2, #4]
 80084ea:	4421      	add	r1, r4
 80084ec:	6011      	str	r1, [r2, #0]
 80084ee:	e7da      	b.n	80084a6 <_free_r+0x26>
 80084f0:	d902      	bls.n	80084f8 <_free_r+0x78>
 80084f2:	230c      	movs	r3, #12
 80084f4:	6003      	str	r3, [r0, #0]
 80084f6:	e7d6      	b.n	80084a6 <_free_r+0x26>
 80084f8:	6825      	ldr	r5, [r4, #0]
 80084fa:	1961      	adds	r1, r4, r5
 80084fc:	428b      	cmp	r3, r1
 80084fe:	bf04      	itt	eq
 8008500:	6819      	ldreq	r1, [r3, #0]
 8008502:	685b      	ldreq	r3, [r3, #4]
 8008504:	6063      	str	r3, [r4, #4]
 8008506:	bf04      	itt	eq
 8008508:	1949      	addeq	r1, r1, r5
 800850a:	6021      	streq	r1, [r4, #0]
 800850c:	6054      	str	r4, [r2, #4]
 800850e:	e7ca      	b.n	80084a6 <_free_r+0x26>
 8008510:	b003      	add	sp, #12
 8008512:	bd30      	pop	{r4, r5, pc}
 8008514:	200089b8 	.word	0x200089b8

08008518 <__sfputc_r>:
 8008518:	6893      	ldr	r3, [r2, #8]
 800851a:	3b01      	subs	r3, #1
 800851c:	2b00      	cmp	r3, #0
 800851e:	b410      	push	{r4}
 8008520:	6093      	str	r3, [r2, #8]
 8008522:	da08      	bge.n	8008536 <__sfputc_r+0x1e>
 8008524:	6994      	ldr	r4, [r2, #24]
 8008526:	42a3      	cmp	r3, r4
 8008528:	db01      	blt.n	800852e <__sfputc_r+0x16>
 800852a:	290a      	cmp	r1, #10
 800852c:	d103      	bne.n	8008536 <__sfputc_r+0x1e>
 800852e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008532:	f000 baf1 	b.w	8008b18 <__swbuf_r>
 8008536:	6813      	ldr	r3, [r2, #0]
 8008538:	1c58      	adds	r0, r3, #1
 800853a:	6010      	str	r0, [r2, #0]
 800853c:	7019      	strb	r1, [r3, #0]
 800853e:	4608      	mov	r0, r1
 8008540:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008544:	4770      	bx	lr

08008546 <__sfputs_r>:
 8008546:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008548:	4606      	mov	r6, r0
 800854a:	460f      	mov	r7, r1
 800854c:	4614      	mov	r4, r2
 800854e:	18d5      	adds	r5, r2, r3
 8008550:	42ac      	cmp	r4, r5
 8008552:	d101      	bne.n	8008558 <__sfputs_r+0x12>
 8008554:	2000      	movs	r0, #0
 8008556:	e007      	b.n	8008568 <__sfputs_r+0x22>
 8008558:	f814 1b01 	ldrb.w	r1, [r4], #1
 800855c:	463a      	mov	r2, r7
 800855e:	4630      	mov	r0, r6
 8008560:	f7ff ffda 	bl	8008518 <__sfputc_r>
 8008564:	1c43      	adds	r3, r0, #1
 8008566:	d1f3      	bne.n	8008550 <__sfputs_r+0xa>
 8008568:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800856c <_vfiprintf_r>:
 800856c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008570:	460d      	mov	r5, r1
 8008572:	b09d      	sub	sp, #116	; 0x74
 8008574:	4614      	mov	r4, r2
 8008576:	4698      	mov	r8, r3
 8008578:	4606      	mov	r6, r0
 800857a:	b118      	cbz	r0, 8008584 <_vfiprintf_r+0x18>
 800857c:	6983      	ldr	r3, [r0, #24]
 800857e:	b90b      	cbnz	r3, 8008584 <_vfiprintf_r+0x18>
 8008580:	f7ff fb92 	bl	8007ca8 <__sinit>
 8008584:	4b89      	ldr	r3, [pc, #548]	; (80087ac <_vfiprintf_r+0x240>)
 8008586:	429d      	cmp	r5, r3
 8008588:	d11b      	bne.n	80085c2 <_vfiprintf_r+0x56>
 800858a:	6875      	ldr	r5, [r6, #4]
 800858c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800858e:	07d9      	lsls	r1, r3, #31
 8008590:	d405      	bmi.n	800859e <_vfiprintf_r+0x32>
 8008592:	89ab      	ldrh	r3, [r5, #12]
 8008594:	059a      	lsls	r2, r3, #22
 8008596:	d402      	bmi.n	800859e <_vfiprintf_r+0x32>
 8008598:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800859a:	f7ff fc48 	bl	8007e2e <__retarget_lock_acquire_recursive>
 800859e:	89ab      	ldrh	r3, [r5, #12]
 80085a0:	071b      	lsls	r3, r3, #28
 80085a2:	d501      	bpl.n	80085a8 <_vfiprintf_r+0x3c>
 80085a4:	692b      	ldr	r3, [r5, #16]
 80085a6:	b9eb      	cbnz	r3, 80085e4 <_vfiprintf_r+0x78>
 80085a8:	4629      	mov	r1, r5
 80085aa:	4630      	mov	r0, r6
 80085ac:	f000 fb06 	bl	8008bbc <__swsetup_r>
 80085b0:	b1c0      	cbz	r0, 80085e4 <_vfiprintf_r+0x78>
 80085b2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085b4:	07dc      	lsls	r4, r3, #31
 80085b6:	d50e      	bpl.n	80085d6 <_vfiprintf_r+0x6a>
 80085b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085bc:	b01d      	add	sp, #116	; 0x74
 80085be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085c2:	4b7b      	ldr	r3, [pc, #492]	; (80087b0 <_vfiprintf_r+0x244>)
 80085c4:	429d      	cmp	r5, r3
 80085c6:	d101      	bne.n	80085cc <_vfiprintf_r+0x60>
 80085c8:	68b5      	ldr	r5, [r6, #8]
 80085ca:	e7df      	b.n	800858c <_vfiprintf_r+0x20>
 80085cc:	4b79      	ldr	r3, [pc, #484]	; (80087b4 <_vfiprintf_r+0x248>)
 80085ce:	429d      	cmp	r5, r3
 80085d0:	bf08      	it	eq
 80085d2:	68f5      	ldreq	r5, [r6, #12]
 80085d4:	e7da      	b.n	800858c <_vfiprintf_r+0x20>
 80085d6:	89ab      	ldrh	r3, [r5, #12]
 80085d8:	0598      	lsls	r0, r3, #22
 80085da:	d4ed      	bmi.n	80085b8 <_vfiprintf_r+0x4c>
 80085dc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085de:	f7ff fc27 	bl	8007e30 <__retarget_lock_release_recursive>
 80085e2:	e7e9      	b.n	80085b8 <_vfiprintf_r+0x4c>
 80085e4:	2300      	movs	r3, #0
 80085e6:	9309      	str	r3, [sp, #36]	; 0x24
 80085e8:	2320      	movs	r3, #32
 80085ea:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80085ee:	f8cd 800c 	str.w	r8, [sp, #12]
 80085f2:	2330      	movs	r3, #48	; 0x30
 80085f4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087b8 <_vfiprintf_r+0x24c>
 80085f8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80085fc:	f04f 0901 	mov.w	r9, #1
 8008600:	4623      	mov	r3, r4
 8008602:	469a      	mov	sl, r3
 8008604:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008608:	b10a      	cbz	r2, 800860e <_vfiprintf_r+0xa2>
 800860a:	2a25      	cmp	r2, #37	; 0x25
 800860c:	d1f9      	bne.n	8008602 <_vfiprintf_r+0x96>
 800860e:	ebba 0b04 	subs.w	fp, sl, r4
 8008612:	d00b      	beq.n	800862c <_vfiprintf_r+0xc0>
 8008614:	465b      	mov	r3, fp
 8008616:	4622      	mov	r2, r4
 8008618:	4629      	mov	r1, r5
 800861a:	4630      	mov	r0, r6
 800861c:	f7ff ff93 	bl	8008546 <__sfputs_r>
 8008620:	3001      	adds	r0, #1
 8008622:	f000 80aa 	beq.w	800877a <_vfiprintf_r+0x20e>
 8008626:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008628:	445a      	add	r2, fp
 800862a:	9209      	str	r2, [sp, #36]	; 0x24
 800862c:	f89a 3000 	ldrb.w	r3, [sl]
 8008630:	2b00      	cmp	r3, #0
 8008632:	f000 80a2 	beq.w	800877a <_vfiprintf_r+0x20e>
 8008636:	2300      	movs	r3, #0
 8008638:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800863c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008640:	f10a 0a01 	add.w	sl, sl, #1
 8008644:	9304      	str	r3, [sp, #16]
 8008646:	9307      	str	r3, [sp, #28]
 8008648:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800864c:	931a      	str	r3, [sp, #104]	; 0x68
 800864e:	4654      	mov	r4, sl
 8008650:	2205      	movs	r2, #5
 8008652:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008656:	4858      	ldr	r0, [pc, #352]	; (80087b8 <_vfiprintf_r+0x24c>)
 8008658:	f7f7 fdba 	bl	80001d0 <memchr>
 800865c:	9a04      	ldr	r2, [sp, #16]
 800865e:	b9d8      	cbnz	r0, 8008698 <_vfiprintf_r+0x12c>
 8008660:	06d1      	lsls	r1, r2, #27
 8008662:	bf44      	itt	mi
 8008664:	2320      	movmi	r3, #32
 8008666:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800866a:	0713      	lsls	r3, r2, #28
 800866c:	bf44      	itt	mi
 800866e:	232b      	movmi	r3, #43	; 0x2b
 8008670:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008674:	f89a 3000 	ldrb.w	r3, [sl]
 8008678:	2b2a      	cmp	r3, #42	; 0x2a
 800867a:	d015      	beq.n	80086a8 <_vfiprintf_r+0x13c>
 800867c:	9a07      	ldr	r2, [sp, #28]
 800867e:	4654      	mov	r4, sl
 8008680:	2000      	movs	r0, #0
 8008682:	f04f 0c0a 	mov.w	ip, #10
 8008686:	4621      	mov	r1, r4
 8008688:	f811 3b01 	ldrb.w	r3, [r1], #1
 800868c:	3b30      	subs	r3, #48	; 0x30
 800868e:	2b09      	cmp	r3, #9
 8008690:	d94e      	bls.n	8008730 <_vfiprintf_r+0x1c4>
 8008692:	b1b0      	cbz	r0, 80086c2 <_vfiprintf_r+0x156>
 8008694:	9207      	str	r2, [sp, #28]
 8008696:	e014      	b.n	80086c2 <_vfiprintf_r+0x156>
 8008698:	eba0 0308 	sub.w	r3, r0, r8
 800869c:	fa09 f303 	lsl.w	r3, r9, r3
 80086a0:	4313      	orrs	r3, r2
 80086a2:	9304      	str	r3, [sp, #16]
 80086a4:	46a2      	mov	sl, r4
 80086a6:	e7d2      	b.n	800864e <_vfiprintf_r+0xe2>
 80086a8:	9b03      	ldr	r3, [sp, #12]
 80086aa:	1d19      	adds	r1, r3, #4
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	9103      	str	r1, [sp, #12]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	bfbb      	ittet	lt
 80086b4:	425b      	neglt	r3, r3
 80086b6:	f042 0202 	orrlt.w	r2, r2, #2
 80086ba:	9307      	strge	r3, [sp, #28]
 80086bc:	9307      	strlt	r3, [sp, #28]
 80086be:	bfb8      	it	lt
 80086c0:	9204      	strlt	r2, [sp, #16]
 80086c2:	7823      	ldrb	r3, [r4, #0]
 80086c4:	2b2e      	cmp	r3, #46	; 0x2e
 80086c6:	d10c      	bne.n	80086e2 <_vfiprintf_r+0x176>
 80086c8:	7863      	ldrb	r3, [r4, #1]
 80086ca:	2b2a      	cmp	r3, #42	; 0x2a
 80086cc:	d135      	bne.n	800873a <_vfiprintf_r+0x1ce>
 80086ce:	9b03      	ldr	r3, [sp, #12]
 80086d0:	1d1a      	adds	r2, r3, #4
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	9203      	str	r2, [sp, #12]
 80086d6:	2b00      	cmp	r3, #0
 80086d8:	bfb8      	it	lt
 80086da:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086de:	3402      	adds	r4, #2
 80086e0:	9305      	str	r3, [sp, #20]
 80086e2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087c8 <_vfiprintf_r+0x25c>
 80086e6:	7821      	ldrb	r1, [r4, #0]
 80086e8:	2203      	movs	r2, #3
 80086ea:	4650      	mov	r0, sl
 80086ec:	f7f7 fd70 	bl	80001d0 <memchr>
 80086f0:	b140      	cbz	r0, 8008704 <_vfiprintf_r+0x198>
 80086f2:	2340      	movs	r3, #64	; 0x40
 80086f4:	eba0 000a 	sub.w	r0, r0, sl
 80086f8:	fa03 f000 	lsl.w	r0, r3, r0
 80086fc:	9b04      	ldr	r3, [sp, #16]
 80086fe:	4303      	orrs	r3, r0
 8008700:	3401      	adds	r4, #1
 8008702:	9304      	str	r3, [sp, #16]
 8008704:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008708:	482c      	ldr	r0, [pc, #176]	; (80087bc <_vfiprintf_r+0x250>)
 800870a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800870e:	2206      	movs	r2, #6
 8008710:	f7f7 fd5e 	bl	80001d0 <memchr>
 8008714:	2800      	cmp	r0, #0
 8008716:	d03f      	beq.n	8008798 <_vfiprintf_r+0x22c>
 8008718:	4b29      	ldr	r3, [pc, #164]	; (80087c0 <_vfiprintf_r+0x254>)
 800871a:	bb1b      	cbnz	r3, 8008764 <_vfiprintf_r+0x1f8>
 800871c:	9b03      	ldr	r3, [sp, #12]
 800871e:	3307      	adds	r3, #7
 8008720:	f023 0307 	bic.w	r3, r3, #7
 8008724:	3308      	adds	r3, #8
 8008726:	9303      	str	r3, [sp, #12]
 8008728:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800872a:	443b      	add	r3, r7
 800872c:	9309      	str	r3, [sp, #36]	; 0x24
 800872e:	e767      	b.n	8008600 <_vfiprintf_r+0x94>
 8008730:	fb0c 3202 	mla	r2, ip, r2, r3
 8008734:	460c      	mov	r4, r1
 8008736:	2001      	movs	r0, #1
 8008738:	e7a5      	b.n	8008686 <_vfiprintf_r+0x11a>
 800873a:	2300      	movs	r3, #0
 800873c:	3401      	adds	r4, #1
 800873e:	9305      	str	r3, [sp, #20]
 8008740:	4619      	mov	r1, r3
 8008742:	f04f 0c0a 	mov.w	ip, #10
 8008746:	4620      	mov	r0, r4
 8008748:	f810 2b01 	ldrb.w	r2, [r0], #1
 800874c:	3a30      	subs	r2, #48	; 0x30
 800874e:	2a09      	cmp	r2, #9
 8008750:	d903      	bls.n	800875a <_vfiprintf_r+0x1ee>
 8008752:	2b00      	cmp	r3, #0
 8008754:	d0c5      	beq.n	80086e2 <_vfiprintf_r+0x176>
 8008756:	9105      	str	r1, [sp, #20]
 8008758:	e7c3      	b.n	80086e2 <_vfiprintf_r+0x176>
 800875a:	fb0c 2101 	mla	r1, ip, r1, r2
 800875e:	4604      	mov	r4, r0
 8008760:	2301      	movs	r3, #1
 8008762:	e7f0      	b.n	8008746 <_vfiprintf_r+0x1da>
 8008764:	ab03      	add	r3, sp, #12
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	462a      	mov	r2, r5
 800876a:	4b16      	ldr	r3, [pc, #88]	; (80087c4 <_vfiprintf_r+0x258>)
 800876c:	a904      	add	r1, sp, #16
 800876e:	4630      	mov	r0, r6
 8008770:	f3af 8000 	nop.w
 8008774:	4607      	mov	r7, r0
 8008776:	1c78      	adds	r0, r7, #1
 8008778:	d1d6      	bne.n	8008728 <_vfiprintf_r+0x1bc>
 800877a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800877c:	07d9      	lsls	r1, r3, #31
 800877e:	d405      	bmi.n	800878c <_vfiprintf_r+0x220>
 8008780:	89ab      	ldrh	r3, [r5, #12]
 8008782:	059a      	lsls	r2, r3, #22
 8008784:	d402      	bmi.n	800878c <_vfiprintf_r+0x220>
 8008786:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008788:	f7ff fb52 	bl	8007e30 <__retarget_lock_release_recursive>
 800878c:	89ab      	ldrh	r3, [r5, #12]
 800878e:	065b      	lsls	r3, r3, #25
 8008790:	f53f af12 	bmi.w	80085b8 <_vfiprintf_r+0x4c>
 8008794:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008796:	e711      	b.n	80085bc <_vfiprintf_r+0x50>
 8008798:	ab03      	add	r3, sp, #12
 800879a:	9300      	str	r3, [sp, #0]
 800879c:	462a      	mov	r2, r5
 800879e:	4b09      	ldr	r3, [pc, #36]	; (80087c4 <_vfiprintf_r+0x258>)
 80087a0:	a904      	add	r1, sp, #16
 80087a2:	4630      	mov	r0, r6
 80087a4:	f000 f880 	bl	80088a8 <_printf_i>
 80087a8:	e7e4      	b.n	8008774 <_vfiprintf_r+0x208>
 80087aa:	bf00      	nop
 80087ac:	0800911c 	.word	0x0800911c
 80087b0:	0800913c 	.word	0x0800913c
 80087b4:	080090fc 	.word	0x080090fc
 80087b8:	0800920e 	.word	0x0800920e
 80087bc:	08009218 	.word	0x08009218
 80087c0:	00000000 	.word	0x00000000
 80087c4:	08008547 	.word	0x08008547
 80087c8:	08009214 	.word	0x08009214

080087cc <_printf_common>:
 80087cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087d0:	4616      	mov	r6, r2
 80087d2:	4699      	mov	r9, r3
 80087d4:	688a      	ldr	r2, [r1, #8]
 80087d6:	690b      	ldr	r3, [r1, #16]
 80087d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087dc:	4293      	cmp	r3, r2
 80087de:	bfb8      	it	lt
 80087e0:	4613      	movlt	r3, r2
 80087e2:	6033      	str	r3, [r6, #0]
 80087e4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80087e8:	4607      	mov	r7, r0
 80087ea:	460c      	mov	r4, r1
 80087ec:	b10a      	cbz	r2, 80087f2 <_printf_common+0x26>
 80087ee:	3301      	adds	r3, #1
 80087f0:	6033      	str	r3, [r6, #0]
 80087f2:	6823      	ldr	r3, [r4, #0]
 80087f4:	0699      	lsls	r1, r3, #26
 80087f6:	bf42      	ittt	mi
 80087f8:	6833      	ldrmi	r3, [r6, #0]
 80087fa:	3302      	addmi	r3, #2
 80087fc:	6033      	strmi	r3, [r6, #0]
 80087fe:	6825      	ldr	r5, [r4, #0]
 8008800:	f015 0506 	ands.w	r5, r5, #6
 8008804:	d106      	bne.n	8008814 <_printf_common+0x48>
 8008806:	f104 0a19 	add.w	sl, r4, #25
 800880a:	68e3      	ldr	r3, [r4, #12]
 800880c:	6832      	ldr	r2, [r6, #0]
 800880e:	1a9b      	subs	r3, r3, r2
 8008810:	42ab      	cmp	r3, r5
 8008812:	dc26      	bgt.n	8008862 <_printf_common+0x96>
 8008814:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008818:	1e13      	subs	r3, r2, #0
 800881a:	6822      	ldr	r2, [r4, #0]
 800881c:	bf18      	it	ne
 800881e:	2301      	movne	r3, #1
 8008820:	0692      	lsls	r2, r2, #26
 8008822:	d42b      	bmi.n	800887c <_printf_common+0xb0>
 8008824:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008828:	4649      	mov	r1, r9
 800882a:	4638      	mov	r0, r7
 800882c:	47c0      	blx	r8
 800882e:	3001      	adds	r0, #1
 8008830:	d01e      	beq.n	8008870 <_printf_common+0xa4>
 8008832:	6823      	ldr	r3, [r4, #0]
 8008834:	68e5      	ldr	r5, [r4, #12]
 8008836:	6832      	ldr	r2, [r6, #0]
 8008838:	f003 0306 	and.w	r3, r3, #6
 800883c:	2b04      	cmp	r3, #4
 800883e:	bf08      	it	eq
 8008840:	1aad      	subeq	r5, r5, r2
 8008842:	68a3      	ldr	r3, [r4, #8]
 8008844:	6922      	ldr	r2, [r4, #16]
 8008846:	bf0c      	ite	eq
 8008848:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800884c:	2500      	movne	r5, #0
 800884e:	4293      	cmp	r3, r2
 8008850:	bfc4      	itt	gt
 8008852:	1a9b      	subgt	r3, r3, r2
 8008854:	18ed      	addgt	r5, r5, r3
 8008856:	2600      	movs	r6, #0
 8008858:	341a      	adds	r4, #26
 800885a:	42b5      	cmp	r5, r6
 800885c:	d11a      	bne.n	8008894 <_printf_common+0xc8>
 800885e:	2000      	movs	r0, #0
 8008860:	e008      	b.n	8008874 <_printf_common+0xa8>
 8008862:	2301      	movs	r3, #1
 8008864:	4652      	mov	r2, sl
 8008866:	4649      	mov	r1, r9
 8008868:	4638      	mov	r0, r7
 800886a:	47c0      	blx	r8
 800886c:	3001      	adds	r0, #1
 800886e:	d103      	bne.n	8008878 <_printf_common+0xac>
 8008870:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008874:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008878:	3501      	adds	r5, #1
 800887a:	e7c6      	b.n	800880a <_printf_common+0x3e>
 800887c:	18e1      	adds	r1, r4, r3
 800887e:	1c5a      	adds	r2, r3, #1
 8008880:	2030      	movs	r0, #48	; 0x30
 8008882:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008886:	4422      	add	r2, r4
 8008888:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800888c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008890:	3302      	adds	r3, #2
 8008892:	e7c7      	b.n	8008824 <_printf_common+0x58>
 8008894:	2301      	movs	r3, #1
 8008896:	4622      	mov	r2, r4
 8008898:	4649      	mov	r1, r9
 800889a:	4638      	mov	r0, r7
 800889c:	47c0      	blx	r8
 800889e:	3001      	adds	r0, #1
 80088a0:	d0e6      	beq.n	8008870 <_printf_common+0xa4>
 80088a2:	3601      	adds	r6, #1
 80088a4:	e7d9      	b.n	800885a <_printf_common+0x8e>
	...

080088a8 <_printf_i>:
 80088a8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088ac:	7e0f      	ldrb	r7, [r1, #24]
 80088ae:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088b0:	2f78      	cmp	r7, #120	; 0x78
 80088b2:	4691      	mov	r9, r2
 80088b4:	4680      	mov	r8, r0
 80088b6:	460c      	mov	r4, r1
 80088b8:	469a      	mov	sl, r3
 80088ba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088be:	d807      	bhi.n	80088d0 <_printf_i+0x28>
 80088c0:	2f62      	cmp	r7, #98	; 0x62
 80088c2:	d80a      	bhi.n	80088da <_printf_i+0x32>
 80088c4:	2f00      	cmp	r7, #0
 80088c6:	f000 80d8 	beq.w	8008a7a <_printf_i+0x1d2>
 80088ca:	2f58      	cmp	r7, #88	; 0x58
 80088cc:	f000 80a3 	beq.w	8008a16 <_printf_i+0x16e>
 80088d0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088d4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088d8:	e03a      	b.n	8008950 <_printf_i+0xa8>
 80088da:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088de:	2b15      	cmp	r3, #21
 80088e0:	d8f6      	bhi.n	80088d0 <_printf_i+0x28>
 80088e2:	a101      	add	r1, pc, #4	; (adr r1, 80088e8 <_printf_i+0x40>)
 80088e4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80088e8:	08008941 	.word	0x08008941
 80088ec:	08008955 	.word	0x08008955
 80088f0:	080088d1 	.word	0x080088d1
 80088f4:	080088d1 	.word	0x080088d1
 80088f8:	080088d1 	.word	0x080088d1
 80088fc:	080088d1 	.word	0x080088d1
 8008900:	08008955 	.word	0x08008955
 8008904:	080088d1 	.word	0x080088d1
 8008908:	080088d1 	.word	0x080088d1
 800890c:	080088d1 	.word	0x080088d1
 8008910:	080088d1 	.word	0x080088d1
 8008914:	08008a61 	.word	0x08008a61
 8008918:	08008985 	.word	0x08008985
 800891c:	08008a43 	.word	0x08008a43
 8008920:	080088d1 	.word	0x080088d1
 8008924:	080088d1 	.word	0x080088d1
 8008928:	08008a83 	.word	0x08008a83
 800892c:	080088d1 	.word	0x080088d1
 8008930:	08008985 	.word	0x08008985
 8008934:	080088d1 	.word	0x080088d1
 8008938:	080088d1 	.word	0x080088d1
 800893c:	08008a4b 	.word	0x08008a4b
 8008940:	682b      	ldr	r3, [r5, #0]
 8008942:	1d1a      	adds	r2, r3, #4
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	602a      	str	r2, [r5, #0]
 8008948:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800894c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008950:	2301      	movs	r3, #1
 8008952:	e0a3      	b.n	8008a9c <_printf_i+0x1f4>
 8008954:	6820      	ldr	r0, [r4, #0]
 8008956:	6829      	ldr	r1, [r5, #0]
 8008958:	0606      	lsls	r6, r0, #24
 800895a:	f101 0304 	add.w	r3, r1, #4
 800895e:	d50a      	bpl.n	8008976 <_printf_i+0xce>
 8008960:	680e      	ldr	r6, [r1, #0]
 8008962:	602b      	str	r3, [r5, #0]
 8008964:	2e00      	cmp	r6, #0
 8008966:	da03      	bge.n	8008970 <_printf_i+0xc8>
 8008968:	232d      	movs	r3, #45	; 0x2d
 800896a:	4276      	negs	r6, r6
 800896c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008970:	485e      	ldr	r0, [pc, #376]	; (8008aec <_printf_i+0x244>)
 8008972:	230a      	movs	r3, #10
 8008974:	e019      	b.n	80089aa <_printf_i+0x102>
 8008976:	680e      	ldr	r6, [r1, #0]
 8008978:	602b      	str	r3, [r5, #0]
 800897a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800897e:	bf18      	it	ne
 8008980:	b236      	sxthne	r6, r6
 8008982:	e7ef      	b.n	8008964 <_printf_i+0xbc>
 8008984:	682b      	ldr	r3, [r5, #0]
 8008986:	6820      	ldr	r0, [r4, #0]
 8008988:	1d19      	adds	r1, r3, #4
 800898a:	6029      	str	r1, [r5, #0]
 800898c:	0601      	lsls	r1, r0, #24
 800898e:	d501      	bpl.n	8008994 <_printf_i+0xec>
 8008990:	681e      	ldr	r6, [r3, #0]
 8008992:	e002      	b.n	800899a <_printf_i+0xf2>
 8008994:	0646      	lsls	r6, r0, #25
 8008996:	d5fb      	bpl.n	8008990 <_printf_i+0xe8>
 8008998:	881e      	ldrh	r6, [r3, #0]
 800899a:	4854      	ldr	r0, [pc, #336]	; (8008aec <_printf_i+0x244>)
 800899c:	2f6f      	cmp	r7, #111	; 0x6f
 800899e:	bf0c      	ite	eq
 80089a0:	2308      	moveq	r3, #8
 80089a2:	230a      	movne	r3, #10
 80089a4:	2100      	movs	r1, #0
 80089a6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089aa:	6865      	ldr	r5, [r4, #4]
 80089ac:	60a5      	str	r5, [r4, #8]
 80089ae:	2d00      	cmp	r5, #0
 80089b0:	bfa2      	ittt	ge
 80089b2:	6821      	ldrge	r1, [r4, #0]
 80089b4:	f021 0104 	bicge.w	r1, r1, #4
 80089b8:	6021      	strge	r1, [r4, #0]
 80089ba:	b90e      	cbnz	r6, 80089c0 <_printf_i+0x118>
 80089bc:	2d00      	cmp	r5, #0
 80089be:	d04d      	beq.n	8008a5c <_printf_i+0x1b4>
 80089c0:	4615      	mov	r5, r2
 80089c2:	fbb6 f1f3 	udiv	r1, r6, r3
 80089c6:	fb03 6711 	mls	r7, r3, r1, r6
 80089ca:	5dc7      	ldrb	r7, [r0, r7]
 80089cc:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089d0:	4637      	mov	r7, r6
 80089d2:	42bb      	cmp	r3, r7
 80089d4:	460e      	mov	r6, r1
 80089d6:	d9f4      	bls.n	80089c2 <_printf_i+0x11a>
 80089d8:	2b08      	cmp	r3, #8
 80089da:	d10b      	bne.n	80089f4 <_printf_i+0x14c>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	07de      	lsls	r6, r3, #31
 80089e0:	d508      	bpl.n	80089f4 <_printf_i+0x14c>
 80089e2:	6923      	ldr	r3, [r4, #16]
 80089e4:	6861      	ldr	r1, [r4, #4]
 80089e6:	4299      	cmp	r1, r3
 80089e8:	bfde      	ittt	le
 80089ea:	2330      	movle	r3, #48	; 0x30
 80089ec:	f805 3c01 	strble.w	r3, [r5, #-1]
 80089f0:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 80089f4:	1b52      	subs	r2, r2, r5
 80089f6:	6122      	str	r2, [r4, #16]
 80089f8:	f8cd a000 	str.w	sl, [sp]
 80089fc:	464b      	mov	r3, r9
 80089fe:	aa03      	add	r2, sp, #12
 8008a00:	4621      	mov	r1, r4
 8008a02:	4640      	mov	r0, r8
 8008a04:	f7ff fee2 	bl	80087cc <_printf_common>
 8008a08:	3001      	adds	r0, #1
 8008a0a:	d14c      	bne.n	8008aa6 <_printf_i+0x1fe>
 8008a0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a10:	b004      	add	sp, #16
 8008a12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a16:	4835      	ldr	r0, [pc, #212]	; (8008aec <_printf_i+0x244>)
 8008a18:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a1c:	6829      	ldr	r1, [r5, #0]
 8008a1e:	6823      	ldr	r3, [r4, #0]
 8008a20:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a24:	6029      	str	r1, [r5, #0]
 8008a26:	061d      	lsls	r5, r3, #24
 8008a28:	d514      	bpl.n	8008a54 <_printf_i+0x1ac>
 8008a2a:	07df      	lsls	r7, r3, #31
 8008a2c:	bf44      	itt	mi
 8008a2e:	f043 0320 	orrmi.w	r3, r3, #32
 8008a32:	6023      	strmi	r3, [r4, #0]
 8008a34:	b91e      	cbnz	r6, 8008a3e <_printf_i+0x196>
 8008a36:	6823      	ldr	r3, [r4, #0]
 8008a38:	f023 0320 	bic.w	r3, r3, #32
 8008a3c:	6023      	str	r3, [r4, #0]
 8008a3e:	2310      	movs	r3, #16
 8008a40:	e7b0      	b.n	80089a4 <_printf_i+0xfc>
 8008a42:	6823      	ldr	r3, [r4, #0]
 8008a44:	f043 0320 	orr.w	r3, r3, #32
 8008a48:	6023      	str	r3, [r4, #0]
 8008a4a:	2378      	movs	r3, #120	; 0x78
 8008a4c:	4828      	ldr	r0, [pc, #160]	; (8008af0 <_printf_i+0x248>)
 8008a4e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a52:	e7e3      	b.n	8008a1c <_printf_i+0x174>
 8008a54:	0659      	lsls	r1, r3, #25
 8008a56:	bf48      	it	mi
 8008a58:	b2b6      	uxthmi	r6, r6
 8008a5a:	e7e6      	b.n	8008a2a <_printf_i+0x182>
 8008a5c:	4615      	mov	r5, r2
 8008a5e:	e7bb      	b.n	80089d8 <_printf_i+0x130>
 8008a60:	682b      	ldr	r3, [r5, #0]
 8008a62:	6826      	ldr	r6, [r4, #0]
 8008a64:	6961      	ldr	r1, [r4, #20]
 8008a66:	1d18      	adds	r0, r3, #4
 8008a68:	6028      	str	r0, [r5, #0]
 8008a6a:	0635      	lsls	r5, r6, #24
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	d501      	bpl.n	8008a74 <_printf_i+0x1cc>
 8008a70:	6019      	str	r1, [r3, #0]
 8008a72:	e002      	b.n	8008a7a <_printf_i+0x1d2>
 8008a74:	0670      	lsls	r0, r6, #25
 8008a76:	d5fb      	bpl.n	8008a70 <_printf_i+0x1c8>
 8008a78:	8019      	strh	r1, [r3, #0]
 8008a7a:	2300      	movs	r3, #0
 8008a7c:	6123      	str	r3, [r4, #16]
 8008a7e:	4615      	mov	r5, r2
 8008a80:	e7ba      	b.n	80089f8 <_printf_i+0x150>
 8008a82:	682b      	ldr	r3, [r5, #0]
 8008a84:	1d1a      	adds	r2, r3, #4
 8008a86:	602a      	str	r2, [r5, #0]
 8008a88:	681d      	ldr	r5, [r3, #0]
 8008a8a:	6862      	ldr	r2, [r4, #4]
 8008a8c:	2100      	movs	r1, #0
 8008a8e:	4628      	mov	r0, r5
 8008a90:	f7f7 fb9e 	bl	80001d0 <memchr>
 8008a94:	b108      	cbz	r0, 8008a9a <_printf_i+0x1f2>
 8008a96:	1b40      	subs	r0, r0, r5
 8008a98:	6060      	str	r0, [r4, #4]
 8008a9a:	6863      	ldr	r3, [r4, #4]
 8008a9c:	6123      	str	r3, [r4, #16]
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008aa4:	e7a8      	b.n	80089f8 <_printf_i+0x150>
 8008aa6:	6923      	ldr	r3, [r4, #16]
 8008aa8:	462a      	mov	r2, r5
 8008aaa:	4649      	mov	r1, r9
 8008aac:	4640      	mov	r0, r8
 8008aae:	47d0      	blx	sl
 8008ab0:	3001      	adds	r0, #1
 8008ab2:	d0ab      	beq.n	8008a0c <_printf_i+0x164>
 8008ab4:	6823      	ldr	r3, [r4, #0]
 8008ab6:	079b      	lsls	r3, r3, #30
 8008ab8:	d413      	bmi.n	8008ae2 <_printf_i+0x23a>
 8008aba:	68e0      	ldr	r0, [r4, #12]
 8008abc:	9b03      	ldr	r3, [sp, #12]
 8008abe:	4298      	cmp	r0, r3
 8008ac0:	bfb8      	it	lt
 8008ac2:	4618      	movlt	r0, r3
 8008ac4:	e7a4      	b.n	8008a10 <_printf_i+0x168>
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	4632      	mov	r2, r6
 8008aca:	4649      	mov	r1, r9
 8008acc:	4640      	mov	r0, r8
 8008ace:	47d0      	blx	sl
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d09b      	beq.n	8008a0c <_printf_i+0x164>
 8008ad4:	3501      	adds	r5, #1
 8008ad6:	68e3      	ldr	r3, [r4, #12]
 8008ad8:	9903      	ldr	r1, [sp, #12]
 8008ada:	1a5b      	subs	r3, r3, r1
 8008adc:	42ab      	cmp	r3, r5
 8008ade:	dcf2      	bgt.n	8008ac6 <_printf_i+0x21e>
 8008ae0:	e7eb      	b.n	8008aba <_printf_i+0x212>
 8008ae2:	2500      	movs	r5, #0
 8008ae4:	f104 0619 	add.w	r6, r4, #25
 8008ae8:	e7f5      	b.n	8008ad6 <_printf_i+0x22e>
 8008aea:	bf00      	nop
 8008aec:	0800921f 	.word	0x0800921f
 8008af0:	08009230 	.word	0x08009230

08008af4 <_read_r>:
 8008af4:	b538      	push	{r3, r4, r5, lr}
 8008af6:	4d07      	ldr	r5, [pc, #28]	; (8008b14 <_read_r+0x20>)
 8008af8:	4604      	mov	r4, r0
 8008afa:	4608      	mov	r0, r1
 8008afc:	4611      	mov	r1, r2
 8008afe:	2200      	movs	r2, #0
 8008b00:	602a      	str	r2, [r5, #0]
 8008b02:	461a      	mov	r2, r3
 8008b04:	f7f8 f93e 	bl	8000d84 <_read>
 8008b08:	1c43      	adds	r3, r0, #1
 8008b0a:	d102      	bne.n	8008b12 <_read_r+0x1e>
 8008b0c:	682b      	ldr	r3, [r5, #0]
 8008b0e:	b103      	cbz	r3, 8008b12 <_read_r+0x1e>
 8008b10:	6023      	str	r3, [r4, #0]
 8008b12:	bd38      	pop	{r3, r4, r5, pc}
 8008b14:	200089c0 	.word	0x200089c0

08008b18 <__swbuf_r>:
 8008b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008b1a:	460e      	mov	r6, r1
 8008b1c:	4614      	mov	r4, r2
 8008b1e:	4605      	mov	r5, r0
 8008b20:	b118      	cbz	r0, 8008b2a <__swbuf_r+0x12>
 8008b22:	6983      	ldr	r3, [r0, #24]
 8008b24:	b90b      	cbnz	r3, 8008b2a <__swbuf_r+0x12>
 8008b26:	f7ff f8bf 	bl	8007ca8 <__sinit>
 8008b2a:	4b21      	ldr	r3, [pc, #132]	; (8008bb0 <__swbuf_r+0x98>)
 8008b2c:	429c      	cmp	r4, r3
 8008b2e:	d12b      	bne.n	8008b88 <__swbuf_r+0x70>
 8008b30:	686c      	ldr	r4, [r5, #4]
 8008b32:	69a3      	ldr	r3, [r4, #24]
 8008b34:	60a3      	str	r3, [r4, #8]
 8008b36:	89a3      	ldrh	r3, [r4, #12]
 8008b38:	071a      	lsls	r2, r3, #28
 8008b3a:	d52f      	bpl.n	8008b9c <__swbuf_r+0x84>
 8008b3c:	6923      	ldr	r3, [r4, #16]
 8008b3e:	b36b      	cbz	r3, 8008b9c <__swbuf_r+0x84>
 8008b40:	6923      	ldr	r3, [r4, #16]
 8008b42:	6820      	ldr	r0, [r4, #0]
 8008b44:	1ac0      	subs	r0, r0, r3
 8008b46:	6963      	ldr	r3, [r4, #20]
 8008b48:	b2f6      	uxtb	r6, r6
 8008b4a:	4283      	cmp	r3, r0
 8008b4c:	4637      	mov	r7, r6
 8008b4e:	dc04      	bgt.n	8008b5a <__swbuf_r+0x42>
 8008b50:	4621      	mov	r1, r4
 8008b52:	4628      	mov	r0, r5
 8008b54:	f7ff fc20 	bl	8008398 <_fflush_r>
 8008b58:	bb30      	cbnz	r0, 8008ba8 <__swbuf_r+0x90>
 8008b5a:	68a3      	ldr	r3, [r4, #8]
 8008b5c:	3b01      	subs	r3, #1
 8008b5e:	60a3      	str	r3, [r4, #8]
 8008b60:	6823      	ldr	r3, [r4, #0]
 8008b62:	1c5a      	adds	r2, r3, #1
 8008b64:	6022      	str	r2, [r4, #0]
 8008b66:	701e      	strb	r6, [r3, #0]
 8008b68:	6963      	ldr	r3, [r4, #20]
 8008b6a:	3001      	adds	r0, #1
 8008b6c:	4283      	cmp	r3, r0
 8008b6e:	d004      	beq.n	8008b7a <__swbuf_r+0x62>
 8008b70:	89a3      	ldrh	r3, [r4, #12]
 8008b72:	07db      	lsls	r3, r3, #31
 8008b74:	d506      	bpl.n	8008b84 <__swbuf_r+0x6c>
 8008b76:	2e0a      	cmp	r6, #10
 8008b78:	d104      	bne.n	8008b84 <__swbuf_r+0x6c>
 8008b7a:	4621      	mov	r1, r4
 8008b7c:	4628      	mov	r0, r5
 8008b7e:	f7ff fc0b 	bl	8008398 <_fflush_r>
 8008b82:	b988      	cbnz	r0, 8008ba8 <__swbuf_r+0x90>
 8008b84:	4638      	mov	r0, r7
 8008b86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008b88:	4b0a      	ldr	r3, [pc, #40]	; (8008bb4 <__swbuf_r+0x9c>)
 8008b8a:	429c      	cmp	r4, r3
 8008b8c:	d101      	bne.n	8008b92 <__swbuf_r+0x7a>
 8008b8e:	68ac      	ldr	r4, [r5, #8]
 8008b90:	e7cf      	b.n	8008b32 <__swbuf_r+0x1a>
 8008b92:	4b09      	ldr	r3, [pc, #36]	; (8008bb8 <__swbuf_r+0xa0>)
 8008b94:	429c      	cmp	r4, r3
 8008b96:	bf08      	it	eq
 8008b98:	68ec      	ldreq	r4, [r5, #12]
 8008b9a:	e7ca      	b.n	8008b32 <__swbuf_r+0x1a>
 8008b9c:	4621      	mov	r1, r4
 8008b9e:	4628      	mov	r0, r5
 8008ba0:	f000 f80c 	bl	8008bbc <__swsetup_r>
 8008ba4:	2800      	cmp	r0, #0
 8008ba6:	d0cb      	beq.n	8008b40 <__swbuf_r+0x28>
 8008ba8:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008bac:	e7ea      	b.n	8008b84 <__swbuf_r+0x6c>
 8008bae:	bf00      	nop
 8008bb0:	0800911c 	.word	0x0800911c
 8008bb4:	0800913c 	.word	0x0800913c
 8008bb8:	080090fc 	.word	0x080090fc

08008bbc <__swsetup_r>:
 8008bbc:	4b32      	ldr	r3, [pc, #200]	; (8008c88 <__swsetup_r+0xcc>)
 8008bbe:	b570      	push	{r4, r5, r6, lr}
 8008bc0:	681d      	ldr	r5, [r3, #0]
 8008bc2:	4606      	mov	r6, r0
 8008bc4:	460c      	mov	r4, r1
 8008bc6:	b125      	cbz	r5, 8008bd2 <__swsetup_r+0x16>
 8008bc8:	69ab      	ldr	r3, [r5, #24]
 8008bca:	b913      	cbnz	r3, 8008bd2 <__swsetup_r+0x16>
 8008bcc:	4628      	mov	r0, r5
 8008bce:	f7ff f86b 	bl	8007ca8 <__sinit>
 8008bd2:	4b2e      	ldr	r3, [pc, #184]	; (8008c8c <__swsetup_r+0xd0>)
 8008bd4:	429c      	cmp	r4, r3
 8008bd6:	d10f      	bne.n	8008bf8 <__swsetup_r+0x3c>
 8008bd8:	686c      	ldr	r4, [r5, #4]
 8008bda:	89a3      	ldrh	r3, [r4, #12]
 8008bdc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008be0:	0719      	lsls	r1, r3, #28
 8008be2:	d42c      	bmi.n	8008c3e <__swsetup_r+0x82>
 8008be4:	06dd      	lsls	r5, r3, #27
 8008be6:	d411      	bmi.n	8008c0c <__swsetup_r+0x50>
 8008be8:	2309      	movs	r3, #9
 8008bea:	6033      	str	r3, [r6, #0]
 8008bec:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008bf0:	81a3      	strh	r3, [r4, #12]
 8008bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bf6:	e03e      	b.n	8008c76 <__swsetup_r+0xba>
 8008bf8:	4b25      	ldr	r3, [pc, #148]	; (8008c90 <__swsetup_r+0xd4>)
 8008bfa:	429c      	cmp	r4, r3
 8008bfc:	d101      	bne.n	8008c02 <__swsetup_r+0x46>
 8008bfe:	68ac      	ldr	r4, [r5, #8]
 8008c00:	e7eb      	b.n	8008bda <__swsetup_r+0x1e>
 8008c02:	4b24      	ldr	r3, [pc, #144]	; (8008c94 <__swsetup_r+0xd8>)
 8008c04:	429c      	cmp	r4, r3
 8008c06:	bf08      	it	eq
 8008c08:	68ec      	ldreq	r4, [r5, #12]
 8008c0a:	e7e6      	b.n	8008bda <__swsetup_r+0x1e>
 8008c0c:	0758      	lsls	r0, r3, #29
 8008c0e:	d512      	bpl.n	8008c36 <__swsetup_r+0x7a>
 8008c10:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008c12:	b141      	cbz	r1, 8008c26 <__swsetup_r+0x6a>
 8008c14:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008c18:	4299      	cmp	r1, r3
 8008c1a:	d002      	beq.n	8008c22 <__swsetup_r+0x66>
 8008c1c:	4630      	mov	r0, r6
 8008c1e:	f7ff fc2f 	bl	8008480 <_free_r>
 8008c22:	2300      	movs	r3, #0
 8008c24:	6363      	str	r3, [r4, #52]	; 0x34
 8008c26:	89a3      	ldrh	r3, [r4, #12]
 8008c28:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008c2c:	81a3      	strh	r3, [r4, #12]
 8008c2e:	2300      	movs	r3, #0
 8008c30:	6063      	str	r3, [r4, #4]
 8008c32:	6923      	ldr	r3, [r4, #16]
 8008c34:	6023      	str	r3, [r4, #0]
 8008c36:	89a3      	ldrh	r3, [r4, #12]
 8008c38:	f043 0308 	orr.w	r3, r3, #8
 8008c3c:	81a3      	strh	r3, [r4, #12]
 8008c3e:	6923      	ldr	r3, [r4, #16]
 8008c40:	b94b      	cbnz	r3, 8008c56 <__swsetup_r+0x9a>
 8008c42:	89a3      	ldrh	r3, [r4, #12]
 8008c44:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008c4c:	d003      	beq.n	8008c56 <__swsetup_r+0x9a>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4630      	mov	r0, r6
 8008c52:	f000 f84d 	bl	8008cf0 <__smakebuf_r>
 8008c56:	89a0      	ldrh	r0, [r4, #12]
 8008c58:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008c5c:	f010 0301 	ands.w	r3, r0, #1
 8008c60:	d00a      	beq.n	8008c78 <__swsetup_r+0xbc>
 8008c62:	2300      	movs	r3, #0
 8008c64:	60a3      	str	r3, [r4, #8]
 8008c66:	6963      	ldr	r3, [r4, #20]
 8008c68:	425b      	negs	r3, r3
 8008c6a:	61a3      	str	r3, [r4, #24]
 8008c6c:	6923      	ldr	r3, [r4, #16]
 8008c6e:	b943      	cbnz	r3, 8008c82 <__swsetup_r+0xc6>
 8008c70:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8008c74:	d1ba      	bne.n	8008bec <__swsetup_r+0x30>
 8008c76:	bd70      	pop	{r4, r5, r6, pc}
 8008c78:	0781      	lsls	r1, r0, #30
 8008c7a:	bf58      	it	pl
 8008c7c:	6963      	ldrpl	r3, [r4, #20]
 8008c7e:	60a3      	str	r3, [r4, #8]
 8008c80:	e7f4      	b.n	8008c6c <__swsetup_r+0xb0>
 8008c82:	2000      	movs	r0, #0
 8008c84:	e7f7      	b.n	8008c76 <__swsetup_r+0xba>
 8008c86:	bf00      	nop
 8008c88:	2000003c 	.word	0x2000003c
 8008c8c:	0800911c 	.word	0x0800911c
 8008c90:	0800913c 	.word	0x0800913c
 8008c94:	080090fc 	.word	0x080090fc

08008c98 <abort>:
 8008c98:	b508      	push	{r3, lr}
 8008c9a:	2006      	movs	r0, #6
 8008c9c:	f000 f890 	bl	8008dc0 <raise>
 8008ca0:	2001      	movs	r0, #1
 8008ca2:	f7f8 f865 	bl	8000d70 <_exit>

08008ca6 <__swhatbuf_r>:
 8008ca6:	b570      	push	{r4, r5, r6, lr}
 8008ca8:	460e      	mov	r6, r1
 8008caa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cae:	2900      	cmp	r1, #0
 8008cb0:	b096      	sub	sp, #88	; 0x58
 8008cb2:	4614      	mov	r4, r2
 8008cb4:	461d      	mov	r5, r3
 8008cb6:	da08      	bge.n	8008cca <__swhatbuf_r+0x24>
 8008cb8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008cbc:	2200      	movs	r2, #0
 8008cbe:	602a      	str	r2, [r5, #0]
 8008cc0:	061a      	lsls	r2, r3, #24
 8008cc2:	d410      	bmi.n	8008ce6 <__swhatbuf_r+0x40>
 8008cc4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008cc8:	e00e      	b.n	8008ce8 <__swhatbuf_r+0x42>
 8008cca:	466a      	mov	r2, sp
 8008ccc:	f000 f894 	bl	8008df8 <_fstat_r>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	dbf1      	blt.n	8008cb8 <__swhatbuf_r+0x12>
 8008cd4:	9a01      	ldr	r2, [sp, #4]
 8008cd6:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008cda:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008cde:	425a      	negs	r2, r3
 8008ce0:	415a      	adcs	r2, r3
 8008ce2:	602a      	str	r2, [r5, #0]
 8008ce4:	e7ee      	b.n	8008cc4 <__swhatbuf_r+0x1e>
 8008ce6:	2340      	movs	r3, #64	; 0x40
 8008ce8:	2000      	movs	r0, #0
 8008cea:	6023      	str	r3, [r4, #0]
 8008cec:	b016      	add	sp, #88	; 0x58
 8008cee:	bd70      	pop	{r4, r5, r6, pc}

08008cf0 <__smakebuf_r>:
 8008cf0:	898b      	ldrh	r3, [r1, #12]
 8008cf2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008cf4:	079d      	lsls	r5, r3, #30
 8008cf6:	4606      	mov	r6, r0
 8008cf8:	460c      	mov	r4, r1
 8008cfa:	d507      	bpl.n	8008d0c <__smakebuf_r+0x1c>
 8008cfc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008d00:	6023      	str	r3, [r4, #0]
 8008d02:	6123      	str	r3, [r4, #16]
 8008d04:	2301      	movs	r3, #1
 8008d06:	6163      	str	r3, [r4, #20]
 8008d08:	b002      	add	sp, #8
 8008d0a:	bd70      	pop	{r4, r5, r6, pc}
 8008d0c:	ab01      	add	r3, sp, #4
 8008d0e:	466a      	mov	r2, sp
 8008d10:	f7ff ffc9 	bl	8008ca6 <__swhatbuf_r>
 8008d14:	9900      	ldr	r1, [sp, #0]
 8008d16:	4605      	mov	r5, r0
 8008d18:	4630      	mov	r0, r6
 8008d1a:	f7ff f8c1 	bl	8007ea0 <_malloc_r>
 8008d1e:	b948      	cbnz	r0, 8008d34 <__smakebuf_r+0x44>
 8008d20:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d24:	059a      	lsls	r2, r3, #22
 8008d26:	d4ef      	bmi.n	8008d08 <__smakebuf_r+0x18>
 8008d28:	f023 0303 	bic.w	r3, r3, #3
 8008d2c:	f043 0302 	orr.w	r3, r3, #2
 8008d30:	81a3      	strh	r3, [r4, #12]
 8008d32:	e7e3      	b.n	8008cfc <__smakebuf_r+0xc>
 8008d34:	4b0d      	ldr	r3, [pc, #52]	; (8008d6c <__smakebuf_r+0x7c>)
 8008d36:	62b3      	str	r3, [r6, #40]	; 0x28
 8008d38:	89a3      	ldrh	r3, [r4, #12]
 8008d3a:	6020      	str	r0, [r4, #0]
 8008d3c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008d40:	81a3      	strh	r3, [r4, #12]
 8008d42:	9b00      	ldr	r3, [sp, #0]
 8008d44:	6163      	str	r3, [r4, #20]
 8008d46:	9b01      	ldr	r3, [sp, #4]
 8008d48:	6120      	str	r0, [r4, #16]
 8008d4a:	b15b      	cbz	r3, 8008d64 <__smakebuf_r+0x74>
 8008d4c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008d50:	4630      	mov	r0, r6
 8008d52:	f000 f863 	bl	8008e1c <_isatty_r>
 8008d56:	b128      	cbz	r0, 8008d64 <__smakebuf_r+0x74>
 8008d58:	89a3      	ldrh	r3, [r4, #12]
 8008d5a:	f023 0303 	bic.w	r3, r3, #3
 8008d5e:	f043 0301 	orr.w	r3, r3, #1
 8008d62:	81a3      	strh	r3, [r4, #12]
 8008d64:	89a0      	ldrh	r0, [r4, #12]
 8008d66:	4305      	orrs	r5, r0
 8008d68:	81a5      	strh	r5, [r4, #12]
 8008d6a:	e7cd      	b.n	8008d08 <__smakebuf_r+0x18>
 8008d6c:	08007c41 	.word	0x08007c41

08008d70 <_raise_r>:
 8008d70:	291f      	cmp	r1, #31
 8008d72:	b538      	push	{r3, r4, r5, lr}
 8008d74:	4604      	mov	r4, r0
 8008d76:	460d      	mov	r5, r1
 8008d78:	d904      	bls.n	8008d84 <_raise_r+0x14>
 8008d7a:	2316      	movs	r3, #22
 8008d7c:	6003      	str	r3, [r0, #0]
 8008d7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008d82:	bd38      	pop	{r3, r4, r5, pc}
 8008d84:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008d86:	b112      	cbz	r2, 8008d8e <_raise_r+0x1e>
 8008d88:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008d8c:	b94b      	cbnz	r3, 8008da2 <_raise_r+0x32>
 8008d8e:	4620      	mov	r0, r4
 8008d90:	f000 f830 	bl	8008df4 <_getpid_r>
 8008d94:	462a      	mov	r2, r5
 8008d96:	4601      	mov	r1, r0
 8008d98:	4620      	mov	r0, r4
 8008d9a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d9e:	f000 b817 	b.w	8008dd0 <_kill_r>
 8008da2:	2b01      	cmp	r3, #1
 8008da4:	d00a      	beq.n	8008dbc <_raise_r+0x4c>
 8008da6:	1c59      	adds	r1, r3, #1
 8008da8:	d103      	bne.n	8008db2 <_raise_r+0x42>
 8008daa:	2316      	movs	r3, #22
 8008dac:	6003      	str	r3, [r0, #0]
 8008dae:	2001      	movs	r0, #1
 8008db0:	e7e7      	b.n	8008d82 <_raise_r+0x12>
 8008db2:	2400      	movs	r4, #0
 8008db4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008db8:	4628      	mov	r0, r5
 8008dba:	4798      	blx	r3
 8008dbc:	2000      	movs	r0, #0
 8008dbe:	e7e0      	b.n	8008d82 <_raise_r+0x12>

08008dc0 <raise>:
 8008dc0:	4b02      	ldr	r3, [pc, #8]	; (8008dcc <raise+0xc>)
 8008dc2:	4601      	mov	r1, r0
 8008dc4:	6818      	ldr	r0, [r3, #0]
 8008dc6:	f7ff bfd3 	b.w	8008d70 <_raise_r>
 8008dca:	bf00      	nop
 8008dcc:	2000003c 	.word	0x2000003c

08008dd0 <_kill_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	4d07      	ldr	r5, [pc, #28]	; (8008df0 <_kill_r+0x20>)
 8008dd4:	2300      	movs	r3, #0
 8008dd6:	4604      	mov	r4, r0
 8008dd8:	4608      	mov	r0, r1
 8008dda:	4611      	mov	r1, r2
 8008ddc:	602b      	str	r3, [r5, #0]
 8008dde:	f7f7 ffb7 	bl	8000d50 <_kill>
 8008de2:	1c43      	adds	r3, r0, #1
 8008de4:	d102      	bne.n	8008dec <_kill_r+0x1c>
 8008de6:	682b      	ldr	r3, [r5, #0]
 8008de8:	b103      	cbz	r3, 8008dec <_kill_r+0x1c>
 8008dea:	6023      	str	r3, [r4, #0]
 8008dec:	bd38      	pop	{r3, r4, r5, pc}
 8008dee:	bf00      	nop
 8008df0:	200089c0 	.word	0x200089c0

08008df4 <_getpid_r>:
 8008df4:	f7f7 bfa4 	b.w	8000d40 <_getpid>

08008df8 <_fstat_r>:
 8008df8:	b538      	push	{r3, r4, r5, lr}
 8008dfa:	4d07      	ldr	r5, [pc, #28]	; (8008e18 <_fstat_r+0x20>)
 8008dfc:	2300      	movs	r3, #0
 8008dfe:	4604      	mov	r4, r0
 8008e00:	4608      	mov	r0, r1
 8008e02:	4611      	mov	r1, r2
 8008e04:	602b      	str	r3, [r5, #0]
 8008e06:	f7f7 ffe6 	bl	8000dd6 <_fstat>
 8008e0a:	1c43      	adds	r3, r0, #1
 8008e0c:	d102      	bne.n	8008e14 <_fstat_r+0x1c>
 8008e0e:	682b      	ldr	r3, [r5, #0]
 8008e10:	b103      	cbz	r3, 8008e14 <_fstat_r+0x1c>
 8008e12:	6023      	str	r3, [r4, #0]
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	bf00      	nop
 8008e18:	200089c0 	.word	0x200089c0

08008e1c <_isatty_r>:
 8008e1c:	b538      	push	{r3, r4, r5, lr}
 8008e1e:	4d06      	ldr	r5, [pc, #24]	; (8008e38 <_isatty_r+0x1c>)
 8008e20:	2300      	movs	r3, #0
 8008e22:	4604      	mov	r4, r0
 8008e24:	4608      	mov	r0, r1
 8008e26:	602b      	str	r3, [r5, #0]
 8008e28:	f7f7 ffe5 	bl	8000df6 <_isatty>
 8008e2c:	1c43      	adds	r3, r0, #1
 8008e2e:	d102      	bne.n	8008e36 <_isatty_r+0x1a>
 8008e30:	682b      	ldr	r3, [r5, #0]
 8008e32:	b103      	cbz	r3, 8008e36 <_isatty_r+0x1a>
 8008e34:	6023      	str	r3, [r4, #0]
 8008e36:	bd38      	pop	{r3, r4, r5, pc}
 8008e38:	200089c0 	.word	0x200089c0

08008e3c <_init>:
 8008e3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e3e:	bf00      	nop
 8008e40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e42:	bc08      	pop	{r3}
 8008e44:	469e      	mov	lr, r3
 8008e46:	4770      	bx	lr

08008e48 <_fini>:
 8008e48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e4a:	bf00      	nop
 8008e4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e4e:	bc08      	pop	{r3}
 8008e50:	469e      	mov	lr, r3
 8008e52:	4770      	bx	lr
