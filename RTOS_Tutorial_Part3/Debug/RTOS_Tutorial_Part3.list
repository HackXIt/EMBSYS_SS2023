
RTOS_Tutorial_Part3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006df8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  08006f88  08006f88  00016f88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007354  08007354  00020078  2**0
                  CONTENTS
  4 .ARM          00000008  08007354  08007354  00017354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800735c  0800735c  00020078  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800735c  0800735c  0001735c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007360  08007360  00017360  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000078  20000000  08007364  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad4  20000078  080073dc  00020078  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b4c  080073dc  00021b4c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ce9b  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a97  00000000  00000000  0003cf43  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001728  00000000  00000000  000409e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015b0  00000000  00000000  00042108  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f66  00000000  00000000  000436b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a21e  00000000  00000000  0006761e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6e04  00000000  00000000  0008183c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00158640  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006614  00000000  00000000  00158690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000078 	.word	0x20000078
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006f70 	.word	0x08006f70

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000007c 	.word	0x2000007c
 80001cc:	08006f70 	.word	0x08006f70

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of UART_task */
  UART_taskHandle = osThreadNew(UARTThread, NULL, &UART_task_attributes);
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <MX_FREERTOS_Init+0x28>)
 800058a:	2100      	movs	r1, #0
 800058c:	4808      	ldr	r0, [pc, #32]	; (80005b0 <MX_FREERTOS_Init+0x2c>)
 800058e:	f003 f8db 	bl	8003748 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <MX_FREERTOS_Init+0x30>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of blinkLED_task */
  blinkLED_taskHandle = osThreadNew(BlinkLED, NULL, &blinkLED_task_attributes);
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <MX_FREERTOS_Init+0x34>)
 800059a:	2100      	movs	r1, #0
 800059c:	4807      	ldr	r0, [pc, #28]	; (80005bc <MX_FREERTOS_Init+0x38>)
 800059e:	f003 f8d3 	bl	8003748 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <MX_FREERTOS_Init+0x3c>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	0800712c 	.word	0x0800712c
 80005b0:	080005c5 	.word	0x080005c5
 80005b4:	20000094 	.word	0x20000094
 80005b8:	08007150 	.word	0x08007150
 80005bc:	08000785 	.word	0x08000785
 80005c0:	20000098 	.word	0x20000098

080005c4 <UARTThread>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_UARTThread */
void UARTThread(void *argument)
{
 80005c4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c6:	b0c9      	sub	sp, #292	; 0x124
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005ce:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80005d2:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN UARTThread */
  /* Infinite loop */
	char txBuffer[UART_TX_BUFFER_SIZE] = "Running RTOS on STM32...\r\nEnter LED Delay (0 - 65535):\r\n";
 80005d4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80005d8:	f5a3 7684 	sub.w	r6, r3, #264	; 0x108
 80005dc:	4b62      	ldr	r3, [pc, #392]	; (8000768 <UARTThread+0x1a4>)
 80005de:	4634      	mov	r4, r6
 80005e0:	461d      	mov	r5, r3
 80005e2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005e6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005e8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ea:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80005ec:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80005ee:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80005f2:	c403      	stmia	r4!, {r0, r1}
 80005f4:	7022      	strb	r2, [r4, #0]
 80005f6:	f106 0339 	add.w	r3, r6, #57	; 0x39
 80005fa:	22c6      	movs	r2, #198	; 0xc6
 80005fc:	2100      	movs	r1, #0
 80005fe:	4618      	mov	r0, r3
 8000600:	f005 ff5a 	bl	80064b8 <memset>
	HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), UART_MAX_DELAY);
 8000604:	f107 0318 	add.w	r3, r7, #24
 8000608:	4618      	mov	r0, r3
 800060a:	f7ff fde1 	bl	80001d0 <strlen>
 800060e:	4603      	mov	r3, r0
 8000610:	b29a      	uxth	r2, r3
 8000612:	f107 0118 	add.w	r1, r7, #24
 8000616:	f241 3388 	movw	r3, #5000	; 0x1388
 800061a:	4854      	ldr	r0, [pc, #336]	; (800076c <UARTThread+0x1a8>)
 800061c:	f002 fac4 	bl	8002ba8 <HAL_UART_Transmit>
	char rxBuffer[UART_RX_BUFFER_SIZE] = "";
 8000620:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000624:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8000628:	2200      	movs	r2, #0
 800062a:	601a      	str	r2, [r3, #0]
 800062c:	2200      	movs	r2, #0
 800062e:	809a      	strh	r2, [r3, #4]
	uint8_t rxByte;
	uint8_t rxIndex = 0;
 8000630:	2300      	movs	r3, #0
 8000632:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	unsigned int tmpDelay = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
	for(;;)
	{
	  HAL_UART_Receive(&huart2, &rxByte, 1, HAL_MAX_DELAY);
 800063c:	f107 010f 	add.w	r1, r7, #15
 8000640:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000644:	2201      	movs	r2, #1
 8000646:	4849      	ldr	r0, [pc, #292]	; (800076c <UARTThread+0x1a8>)
 8000648:	f002 fb42 	bl	8002cd0 <HAL_UART_Receive>
	  if((char)rxByte == '\r') {
 800064c:	f507 7390 	add.w	r3, r7, #288	; 0x120
 8000650:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 8000654:	781b      	ldrb	r3, [r3, #0]
 8000656:	2b0d      	cmp	r3, #13
 8000658:	d144      	bne.n	80006e4 <UARTThread+0x120>
		  // Suspend blinking Thread, so we can change delay without Interruption
		  osThreadSuspend(blinkLED_taskHandle);
 800065a:	4b45      	ldr	r3, [pc, #276]	; (8000770 <UARTThread+0x1ac>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f003 f904 	bl	800386c <osThreadSuspend>
		  // Convert integer
		  tmpDelay = atoi((char*)rxBuffer);
 8000664:	f107 0310 	add.w	r3, r7, #16
 8000668:	4618      	mov	r0, r3
 800066a:	f005 fee7 	bl	800643c <atoi>
 800066e:	4603      	mov	r3, r0
 8000670:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		  if(tmpDelay > 0xFFFF) {
 8000674:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 8000678:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800067c:	d304      	bcc.n	8000688 <UARTThread+0xc4>
			  ledDelay = 0xFFFF;
 800067e:	4b3d      	ldr	r3, [pc, #244]	; (8000774 <UARTThread+0x1b0>)
 8000680:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000684:	801a      	strh	r2, [r3, #0]
 8000686:	e004      	b.n	8000692 <UARTThread+0xce>
		  } else {
			  ledDelay = tmpDelay;
 8000688:	f8d7 3118 	ldr.w	r3, [r7, #280]	; 0x118
 800068c:	b29a      	uxth	r2, r3
 800068e:	4b39      	ldr	r3, [pc, #228]	; (8000774 <UARTThread+0x1b0>)
 8000690:	801a      	strh	r2, [r3, #0]
		  }
		  sprintf(txBuffer, "Changed LED delay to: %u\r\nEnter LED Delay (0 - 65535):\r\n", ledDelay);
 8000692:	4b38      	ldr	r3, [pc, #224]	; (8000774 <UARTThread+0x1b0>)
 8000694:	881b      	ldrh	r3, [r3, #0]
 8000696:	461a      	mov	r2, r3
 8000698:	f107 0318 	add.w	r3, r7, #24
 800069c:	4936      	ldr	r1, [pc, #216]	; (8000778 <UARTThread+0x1b4>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f006 f820 	bl	80066e4 <siprintf>
		  HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), UART_MAX_DELAY);
 80006a4:	f107 0318 	add.w	r3, r7, #24
 80006a8:	4618      	mov	r0, r3
 80006aa:	f7ff fd91 	bl	80001d0 <strlen>
 80006ae:	4603      	mov	r3, r0
 80006b0:	b29a      	uxth	r2, r3
 80006b2:	f107 0118 	add.w	r1, r7, #24
 80006b6:	f241 3388 	movw	r3, #5000	; 0x1388
 80006ba:	482c      	ldr	r0, [pc, #176]	; (800076c <UARTThread+0x1a8>)
 80006bc:	f002 fa74 	bl	8002ba8 <HAL_UART_Transmit>
		  // Reset all memory for new input
		  memset(rxBuffer, 0, UART_RX_BUFFER_SIZE);
 80006c0:	f107 0310 	add.w	r3, r7, #16
 80006c4:	2206      	movs	r2, #6
 80006c6:	2100      	movs	r1, #0
 80006c8:	4618      	mov	r0, r3
 80006ca:	f005 fef5 	bl	80064b8 <memset>
		  rxIndex = 0;
 80006ce:	2300      	movs	r3, #0
 80006d0:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		  tmpDelay = 0;
 80006d4:	2300      	movs	r3, #0
 80006d6:	f8c7 3118 	str.w	r3, [r7, #280]	; 0x118
		  // Resume blinking Thread, effectively restarting it, so it immediately picks up the new delay.
		  osThreadResume(blinkLED_taskHandle);
 80006da:	4b25      	ldr	r3, [pc, #148]	; (8000770 <UARTThread+0x1ac>)
 80006dc:	681b      	ldr	r3, [r3, #0]
 80006de:	4618      	mov	r0, r3
 80006e0:	f003 f8e5 	bl	80038ae <osThreadResume>
	  }
	  if(isdigit(rxByte)) {
 80006e4:	f507 7390 	add.w	r3, r7, #288	; 0x120
 80006e8:	f2a3 1311 	subw	r3, r3, #273	; 0x111
 80006ec:	781b      	ldrb	r3, [r3, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	4a22      	ldr	r2, [pc, #136]	; (800077c <UARTThread+0x1b8>)
 80006f2:	4413      	add	r3, r2
 80006f4:	781b      	ldrb	r3, [r3, #0]
 80006f6:	f003 0304 	and.w	r3, r3, #4
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d09e      	beq.n	800063c <UARTThread+0x78>
		  // Ignore all characters that are not digits.
		  rxBuffer[rxIndex] = rxByte;
 80006fe:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000702:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000706:	f2a2 1211 	subw	r2, r2, #273	; 0x111
 800070a:	7811      	ldrb	r1, [r2, #0]
 800070c:	f507 7290 	add.w	r2, r7, #288	; 0x120
 8000710:	f5a2 7288 	sub.w	r2, r2, #272	; 0x110
 8000714:	54d1      	strb	r1, [r2, r3]
		  rxIndex++;
 8000716:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 800071a:	3301      	adds	r3, #1
 800071c:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
		  if(rxIndex == UART_RX_BUFFER_SIZE) {
 8000720:	f897 311f 	ldrb.w	r3, [r7, #287]	; 0x11f
 8000724:	2b06      	cmp	r3, #6
 8000726:	d189      	bne.n	800063c <UARTThread+0x78>
			  sprintf(txBuffer, "Too many Digits!\r\nRe-enter number (0 - 65535):\r\n");
 8000728:	f107 0318 	add.w	r3, r7, #24
 800072c:	4914      	ldr	r1, [pc, #80]	; (8000780 <UARTThread+0x1bc>)
 800072e:	4618      	mov	r0, r3
 8000730:	f005 ffd8 	bl	80066e4 <siprintf>
			  HAL_UART_Transmit(&huart2, (uint8_t*)txBuffer, strlen(txBuffer), UART_MAX_DELAY);
 8000734:	f107 0318 	add.w	r3, r7, #24
 8000738:	4618      	mov	r0, r3
 800073a:	f7ff fd49 	bl	80001d0 <strlen>
 800073e:	4603      	mov	r3, r0
 8000740:	b29a      	uxth	r2, r3
 8000742:	f107 0118 	add.w	r1, r7, #24
 8000746:	f241 3388 	movw	r3, #5000	; 0x1388
 800074a:	4808      	ldr	r0, [pc, #32]	; (800076c <UARTThread+0x1a8>)
 800074c:	f002 fa2c 	bl	8002ba8 <HAL_UART_Transmit>
			  memset(rxBuffer, 0, UART_RX_BUFFER_SIZE);
 8000750:	f107 0310 	add.w	r3, r7, #16
 8000754:	2206      	movs	r2, #6
 8000756:	2100      	movs	r1, #0
 8000758:	4618      	mov	r0, r3
 800075a:	f005 fead 	bl	80064b8 <memset>
			  rxIndex = 0;
 800075e:	2300      	movs	r3, #0
 8000760:	f887 311f 	strb.w	r3, [r7, #287]	; 0x11f
	  HAL_UART_Receive(&huart2, &rxByte, 1, HAL_MAX_DELAY);
 8000764:	e76a      	b.n	800063c <UARTThread+0x78>
 8000766:	bf00      	nop
 8000768:	08007014 	.word	0x08007014
 800076c:	200000ec 	.word	0x200000ec
 8000770:	20000098 	.word	0x20000098
 8000774:	20000000 	.word	0x20000000
 8000778:	08006fa4 	.word	0x08006fa4
 800077c:	080071bc 	.word	0x080071bc
 8000780:	08006fe0 	.word	0x08006fe0

08000784 <BlinkLED>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BlinkLED */
void BlinkLED(void *argument)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BlinkLED */
  /* Infinite loop */
	uint16_t current_delay;
  for(;;)
  {
	  current_delay = ledDelay;
 800078c:	4b05      	ldr	r3, [pc, #20]	; (80007a4 <BlinkLED+0x20>)
 800078e:	881b      	ldrh	r3, [r3, #0]
 8000790:	81fb      	strh	r3, [r7, #14]
	  HAL_GPIO_TogglePin(Board_LED_GPIO_Port, Board_LED_Pin);
 8000792:	2108      	movs	r1, #8
 8000794:	4804      	ldr	r0, [pc, #16]	; (80007a8 <BlinkLED+0x24>)
 8000796:	f000 fd49 	bl	800122c <HAL_GPIO_TogglePin>
	  osDelay(current_delay);
 800079a:	89fb      	ldrh	r3, [r7, #14]
 800079c:	4618      	mov	r0, r3
 800079e:	f003 f8a7 	bl	80038f0 <osDelay>
	  current_delay = ledDelay;
 80007a2:	e7f3      	b.n	800078c <BlinkLED+0x8>
 80007a4:	20000000 	.word	0x20000000
 80007a8:	48000400 	.word	0x48000400

080007ac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80007ac:	b580      	push	{r7, lr}
 80007ae:	b088      	sub	sp, #32
 80007b0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b2:	f107 030c 	add.w	r3, r7, #12
 80007b6:	2200      	movs	r2, #0
 80007b8:	601a      	str	r2, [r3, #0]
 80007ba:	605a      	str	r2, [r3, #4]
 80007bc:	609a      	str	r2, [r3, #8]
 80007be:	60da      	str	r2, [r3, #12]
 80007c0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007c2:	4b1d      	ldr	r3, [pc, #116]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c6:	4a1c      	ldr	r2, [pc, #112]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007c8:	f043 0304 	orr.w	r3, r3, #4
 80007cc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007ce:	4b1a      	ldr	r3, [pc, #104]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007d2:	f003 0304 	and.w	r3, r3, #4
 80007d6:	60bb      	str	r3, [r7, #8]
 80007d8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007da:	4b17      	ldr	r3, [pc, #92]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007de:	4a16      	ldr	r2, [pc, #88]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007e6:	4b14      	ldr	r3, [pc, #80]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007f2:	4b11      	ldr	r3, [pc, #68]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007f6:	4a10      	ldr	r2, [pc, #64]	; (8000838 <MX_GPIO_Init+0x8c>)
 80007f8:	f043 0302 	orr.w	r3, r3, #2
 80007fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007fe:	4b0e      	ldr	r3, [pc, #56]	; (8000838 <MX_GPIO_Init+0x8c>)
 8000800:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000802:	f003 0302 	and.w	r3, r3, #2
 8000806:	603b      	str	r3, [r7, #0]
 8000808:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Board_LED_GPIO_Port, Board_LED_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	2108      	movs	r1, #8
 800080e:	480b      	ldr	r0, [pc, #44]	; (800083c <MX_GPIO_Init+0x90>)
 8000810:	f000 fcf4 	bl	80011fc <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Board_LED_Pin;
 8000814:	2308      	movs	r3, #8
 8000816:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000818:	2301      	movs	r3, #1
 800081a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800081c:	2300      	movs	r3, #0
 800081e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000820:	2300      	movs	r3, #0
 8000822:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Board_LED_GPIO_Port, &GPIO_InitStruct);
 8000824:	f107 030c 	add.w	r3, r7, #12
 8000828:	4619      	mov	r1, r3
 800082a:	4804      	ldr	r0, [pc, #16]	; (800083c <MX_GPIO_Init+0x90>)
 800082c:	f000 fb7c 	bl	8000f28 <HAL_GPIO_Init>

}
 8000830:	bf00      	nop
 8000832:	3720      	adds	r7, #32
 8000834:	46bd      	mov	sp, r7
 8000836:	bd80      	pop	{r7, pc}
 8000838:	40021000 	.word	0x40021000
 800083c:	48000400 	.word	0x48000400

08000840 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000844:	f000 fa55 	bl	8000cf2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000848:	f000 f80c 	bl	8000864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800084c:	f7ff ffae 	bl	80007ac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000850:	f000 f98c 	bl	8000b6c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000854:	f002 ff2e 	bl	80036b4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000858:	f7ff fe94 	bl	8000584 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800085c:	f002 ff4e 	bl	80036fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000860:	e7fe      	b.n	8000860 <main+0x20>
	...

08000864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b096      	sub	sp, #88	; 0x58
 8000868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800086a:	f107 0314 	add.w	r3, r7, #20
 800086e:	2244      	movs	r2, #68	; 0x44
 8000870:	2100      	movs	r1, #0
 8000872:	4618      	mov	r0, r3
 8000874:	f005 fe20 	bl	80064b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000878:	463b      	mov	r3, r7
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
 800087e:	605a      	str	r2, [r3, #4]
 8000880:	609a      	str	r2, [r3, #8]
 8000882:	60da      	str	r2, [r3, #12]
 8000884:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000886:	f44f 7000 	mov.w	r0, #512	; 0x200
 800088a:	f000 fd07 	bl	800129c <HAL_PWREx_ControlVoltageScaling>
 800088e:	4603      	mov	r3, r0
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000894:	f000 f85a 	bl	800094c <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000898:	f000 fce2 	bl	8001260 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 800089c:	4b21      	ldr	r3, [pc, #132]	; (8000924 <SystemClock_Config+0xc0>)
 800089e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80008a2:	4a20      	ldr	r2, [pc, #128]	; (8000924 <SystemClock_Config+0xc0>)
 80008a4:	f023 0318 	bic.w	r3, r3, #24
 80008a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80008ac:	2314      	movs	r3, #20
 80008ae:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80008b0:	2301      	movs	r3, #1
 80008b2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80008b4:	2301      	movs	r3, #1
 80008b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80008bc:	2360      	movs	r3, #96	; 0x60
 80008be:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80008c0:	2302      	movs	r3, #2
 80008c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80008c4:	2301      	movs	r3, #1
 80008c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80008c8:	2301      	movs	r3, #1
 80008ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80008cc:	2310      	movs	r3, #16
 80008ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80008d0:	2307      	movs	r3, #7
 80008d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80008d4:	2302      	movs	r3, #2
 80008d6:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80008d8:	2302      	movs	r3, #2
 80008da:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	4618      	mov	r0, r3
 80008e2:	f000 fd31 	bl	8001348 <HAL_RCC_OscConfig>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80008ec:	f000 f82e 	bl	800094c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80008f0:	230f      	movs	r3, #15
 80008f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80008f4:	2303      	movs	r3, #3
 80008f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80008f8:	2300      	movs	r3, #0
 80008fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80008fc:	2300      	movs	r3, #0
 80008fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000900:	2300      	movs	r3, #0
 8000902:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000904:	463b      	mov	r3, r7
 8000906:	2101      	movs	r1, #1
 8000908:	4618      	mov	r0, r3
 800090a:	f001 f931 	bl	8001b70 <HAL_RCC_ClockConfig>
 800090e:	4603      	mov	r3, r0
 8000910:	2b00      	cmp	r3, #0
 8000912:	d001      	beq.n	8000918 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000914:	f000 f81a 	bl	800094c <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000918:	f001 fd76 	bl	8002408 <HAL_RCCEx_EnableMSIPLLMode>
}
 800091c:	bf00      	nop
 800091e:	3758      	adds	r7, #88	; 0x58
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	40021000 	.word	0x40021000

08000928 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000928:	b580      	push	{r7, lr}
 800092a:	b082      	sub	sp, #8
 800092c:	af00      	add	r7, sp, #0
 800092e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	4a04      	ldr	r2, [pc, #16]	; (8000948 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000936:	4293      	cmp	r3, r2
 8000938:	d101      	bne.n	800093e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800093a:	f000 f9f3 	bl	8000d24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}
 8000946:	bf00      	nop
 8000948:	40001000 	.word	0x40001000

0800094c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800094c:	b480      	push	{r7}
 800094e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000950:	b672      	cpsid	i
}
 8000952:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000954:	e7fe      	b.n	8000954 <Error_Handler+0x8>
	...

08000958 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000958:	b580      	push	{r7, lr}
 800095a:	b082      	sub	sp, #8
 800095c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095e:	4b11      	ldr	r3, [pc, #68]	; (80009a4 <HAL_MspInit+0x4c>)
 8000960:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000962:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <HAL_MspInit+0x4c>)
 8000964:	f043 0301 	orr.w	r3, r3, #1
 8000968:	6613      	str	r3, [r2, #96]	; 0x60
 800096a:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <HAL_MspInit+0x4c>)
 800096c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800096e:	f003 0301 	and.w	r3, r3, #1
 8000972:	607b      	str	r3, [r7, #4]
 8000974:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000976:	4b0b      	ldr	r3, [pc, #44]	; (80009a4 <HAL_MspInit+0x4c>)
 8000978:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800097a:	4a0a      	ldr	r2, [pc, #40]	; (80009a4 <HAL_MspInit+0x4c>)
 800097c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000980:	6593      	str	r3, [r2, #88]	; 0x58
 8000982:	4b08      	ldr	r3, [pc, #32]	; (80009a4 <HAL_MspInit+0x4c>)
 8000984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098a:	603b      	str	r3, [r7, #0]
 800098c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800098e:	2200      	movs	r2, #0
 8000990:	210f      	movs	r1, #15
 8000992:	f06f 0001 	mvn.w	r0, #1
 8000996:	f000 fa9d 	bl	8000ed4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800099a:	bf00      	nop
 800099c:	3708      	adds	r7, #8
 800099e:	46bd      	mov	sp, r7
 80009a0:	bd80      	pop	{r7, pc}
 80009a2:	bf00      	nop
 80009a4:	40021000 	.word	0x40021000

080009a8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b08e      	sub	sp, #56	; 0x38
 80009ac:	af00      	add	r7, sp, #0
 80009ae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80009b0:	2300      	movs	r3, #0
 80009b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80009b6:	4b34      	ldr	r3, [pc, #208]	; (8000a88 <HAL_InitTick+0xe0>)
 80009b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009ba:	4a33      	ldr	r2, [pc, #204]	; (8000a88 <HAL_InitTick+0xe0>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6593      	str	r3, [r2, #88]	; 0x58
 80009c2:	4b31      	ldr	r3, [pc, #196]	; (8000a88 <HAL_InitTick+0xe0>)
 80009c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	60fb      	str	r3, [r7, #12]
 80009cc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009ce:	f107 0210 	add.w	r2, r7, #16
 80009d2:	f107 0314 	add.w	r3, r7, #20
 80009d6:	4611      	mov	r1, r2
 80009d8:	4618      	mov	r0, r3
 80009da:	f001 fa8d 	bl	8001ef8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009de:	6a3b      	ldr	r3, [r7, #32]
 80009e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d103      	bne.n	80009f0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009e8:	f001 fa5a 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 80009ec:	6378      	str	r0, [r7, #52]	; 0x34
 80009ee:	e004      	b.n	80009fa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009f0:	f001 fa56 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 80009f4:	4603      	mov	r3, r0
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009fc:	4a23      	ldr	r2, [pc, #140]	; (8000a8c <HAL_InitTick+0xe4>)
 80009fe:	fba2 2303 	umull	r2, r3, r2, r3
 8000a02:	0c9b      	lsrs	r3, r3, #18
 8000a04:	3b01      	subs	r3, #1
 8000a06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000a08:	4b21      	ldr	r3, [pc, #132]	; (8000a90 <HAL_InitTick+0xe8>)
 8000a0a:	4a22      	ldr	r2, [pc, #136]	; (8000a94 <HAL_InitTick+0xec>)
 8000a0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000a0e:	4b20      	ldr	r3, [pc, #128]	; (8000a90 <HAL_InitTick+0xe8>)
 8000a10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000a16:	4a1e      	ldr	r2, [pc, #120]	; (8000a90 <HAL_InitTick+0xe8>)
 8000a18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000a1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a1c:	4b1c      	ldr	r3, [pc, #112]	; (8000a90 <HAL_InitTick+0xe8>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a22:	4b1b      	ldr	r3, [pc, #108]	; (8000a90 <HAL_InitTick+0xe8>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a28:	4b19      	ldr	r3, [pc, #100]	; (8000a90 <HAL_InitTick+0xe8>)
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a2e:	4818      	ldr	r0, [pc, #96]	; (8000a90 <HAL_InitTick+0xe8>)
 8000a30:	f001 fdec 	bl	800260c <HAL_TIM_Base_Init>
 8000a34:	4603      	mov	r3, r0
 8000a36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d11b      	bne.n	8000a7a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a42:	4813      	ldr	r0, [pc, #76]	; (8000a90 <HAL_InitTick+0xe8>)
 8000a44:	f001 fe44 	bl	80026d0 <HAL_TIM_Base_Start_IT>
 8000a48:	4603      	mov	r3, r0
 8000a4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a52:	2b00      	cmp	r3, #0
 8000a54:	d111      	bne.n	8000a7a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a56:	2036      	movs	r0, #54	; 0x36
 8000a58:	f000 fa58 	bl	8000f0c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	2b0f      	cmp	r3, #15
 8000a60:	d808      	bhi.n	8000a74 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a62:	2200      	movs	r2, #0
 8000a64:	6879      	ldr	r1, [r7, #4]
 8000a66:	2036      	movs	r0, #54	; 0x36
 8000a68:	f000 fa34 	bl	8000ed4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a6c:	4a0a      	ldr	r2, [pc, #40]	; (8000a98 <HAL_InitTick+0xf0>)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	6013      	str	r3, [r2, #0]
 8000a72:	e002      	b.n	8000a7a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a74:	2301      	movs	r3, #1
 8000a76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a7e:	4618      	mov	r0, r3
 8000a80:	3738      	adds	r7, #56	; 0x38
 8000a82:	46bd      	mov	sp, r7
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40021000 	.word	0x40021000
 8000a8c:	431bde83 	.word	0x431bde83
 8000a90:	2000009c 	.word	0x2000009c
 8000a94:	40001000 	.word	0x40001000
 8000a98:	20000008 	.word	0x20000008

08000a9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a9c:	b480      	push	{r7}
 8000a9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000aa0:	e7fe      	b.n	8000aa0 <NMI_Handler+0x4>

08000aa2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aa2:	b480      	push	{r7}
 8000aa4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000aa6:	e7fe      	b.n	8000aa6 <HardFault_Handler+0x4>

08000aa8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000aac:	e7fe      	b.n	8000aac <MemManage_Handler+0x4>

08000aae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000aae:	b480      	push	{r7}
 8000ab0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <BusFault_Handler+0x4>

08000ab4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <UsageFault_Handler+0x4>

08000aba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000aba:	b480      	push	{r7}
 8000abc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac6:	4770      	bx	lr

08000ac8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000acc:	4802      	ldr	r0, [pc, #8]	; (8000ad8 <TIM6_DAC_IRQHandler+0x10>)
 8000ace:	f001 fe53 	bl	8002778 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ad2:	bf00      	nop
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	2000009c 	.word	0x2000009c

08000adc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b086      	sub	sp, #24
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ae4:	4a14      	ldr	r2, [pc, #80]	; (8000b38 <_sbrk+0x5c>)
 8000ae6:	4b15      	ldr	r3, [pc, #84]	; (8000b3c <_sbrk+0x60>)
 8000ae8:	1ad3      	subs	r3, r2, r3
 8000aea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000af0:	4b13      	ldr	r3, [pc, #76]	; (8000b40 <_sbrk+0x64>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d102      	bne.n	8000afe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000af8:	4b11      	ldr	r3, [pc, #68]	; (8000b40 <_sbrk+0x64>)
 8000afa:	4a12      	ldr	r2, [pc, #72]	; (8000b44 <_sbrk+0x68>)
 8000afc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000afe:	4b10      	ldr	r3, [pc, #64]	; (8000b40 <_sbrk+0x64>)
 8000b00:	681a      	ldr	r2, [r3, #0]
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	4413      	add	r3, r2
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	429a      	cmp	r2, r3
 8000b0a:	d207      	bcs.n	8000b1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b0c:	f005 fc9a 	bl	8006444 <__errno>
 8000b10:	4603      	mov	r3, r0
 8000b12:	220c      	movs	r2, #12
 8000b14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b1a:	e009      	b.n	8000b30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b1c:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <_sbrk+0x64>)
 8000b1e:	681b      	ldr	r3, [r3, #0]
 8000b20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b22:	4b07      	ldr	r3, [pc, #28]	; (8000b40 <_sbrk+0x64>)
 8000b24:	681a      	ldr	r2, [r3, #0]
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	4413      	add	r3, r2
 8000b2a:	4a05      	ldr	r2, [pc, #20]	; (8000b40 <_sbrk+0x64>)
 8000b2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b2e:	68fb      	ldr	r3, [r7, #12]
}
 8000b30:	4618      	mov	r0, r3
 8000b32:	3718      	adds	r7, #24
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	20010000 	.word	0x20010000
 8000b3c:	00000400 	.word	0x00000400
 8000b40:	200000e8 	.word	0x200000e8
 8000b44:	20001b50 	.word	0x20001b50

08000b48 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000b4c:	4b06      	ldr	r3, [pc, #24]	; (8000b68 <SystemInit+0x20>)
 8000b4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b52:	4a05      	ldr	r2, [pc, #20]	; (8000b68 <SystemInit+0x20>)
 8000b54:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b58:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000b5c:	bf00      	nop
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop
 8000b68:	e000ed00 	.word	0xe000ed00

08000b6c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b70:	4b14      	ldr	r3, [pc, #80]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b72:	4a15      	ldr	r2, [pc, #84]	; (8000bc8 <MX_USART2_UART_Init+0x5c>)
 8000b74:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b76:	4b13      	ldr	r3, [pc, #76]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b7c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b7e:	4b11      	ldr	r3, [pc, #68]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b84:	4b0f      	ldr	r3, [pc, #60]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b8a:	4b0e      	ldr	r3, [pc, #56]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b90:	4b0c      	ldr	r3, [pc, #48]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b92:	220c      	movs	r2, #12
 8000b94:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b96:	4b0b      	ldr	r3, [pc, #44]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b98:	2200      	movs	r2, #0
 8000b9a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b9c:	4b09      	ldr	r3, [pc, #36]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ba2:	4b08      	ldr	r3, [pc, #32]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ba8:	4b06      	ldr	r3, [pc, #24]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000bae:	4805      	ldr	r0, [pc, #20]	; (8000bc4 <MX_USART2_UART_Init+0x58>)
 8000bb0:	f001 ffac 	bl	8002b0c <HAL_UART_Init>
 8000bb4:	4603      	mov	r3, r0
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d001      	beq.n	8000bbe <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000bba:	f7ff fec7 	bl	800094c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200000ec 	.word	0x200000ec
 8000bc8:	40004400 	.word	0x40004400

08000bcc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b09e      	sub	sp, #120	; 0x78
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bd4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000bd8:	2200      	movs	r2, #0
 8000bda:	601a      	str	r2, [r3, #0]
 8000bdc:	605a      	str	r2, [r3, #4]
 8000bde:	609a      	str	r2, [r3, #8]
 8000be0:	60da      	str	r2, [r3, #12]
 8000be2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000be4:	f107 0310 	add.w	r3, r7, #16
 8000be8:	2254      	movs	r2, #84	; 0x54
 8000bea:	2100      	movs	r1, #0
 8000bec:	4618      	mov	r0, r3
 8000bee:	f005 fc63 	bl	80064b8 <memset>
  if(uartHandle->Instance==USART2)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	681b      	ldr	r3, [r3, #0]
 8000bf6:	4a28      	ldr	r2, [pc, #160]	; (8000c98 <HAL_UART_MspInit+0xcc>)
 8000bf8:	4293      	cmp	r3, r2
 8000bfa:	d148      	bne.n	8000c8e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000bfc:	2302      	movs	r3, #2
 8000bfe:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000c00:	2300      	movs	r3, #0
 8000c02:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c04:	f107 0310 	add.w	r3, r7, #16
 8000c08:	4618      	mov	r0, r3
 8000c0a:	f001 fa07 	bl	800201c <HAL_RCCEx_PeriphCLKConfig>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d001      	beq.n	8000c18 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000c14:	f7ff fe9a 	bl	800094c <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c18:	4b20      	ldr	r3, [pc, #128]	; (8000c9c <HAL_UART_MspInit+0xd0>)
 8000c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c1c:	4a1f      	ldr	r2, [pc, #124]	; (8000c9c <HAL_UART_MspInit+0xd0>)
 8000c1e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c22:	6593      	str	r3, [r2, #88]	; 0x58
 8000c24:	4b1d      	ldr	r3, [pc, #116]	; (8000c9c <HAL_UART_MspInit+0xd0>)
 8000c26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000c2c:	60fb      	str	r3, [r7, #12]
 8000c2e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c30:	4b1a      	ldr	r3, [pc, #104]	; (8000c9c <HAL_UART_MspInit+0xd0>)
 8000c32:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c34:	4a19      	ldr	r2, [pc, #100]	; (8000c9c <HAL_UART_MspInit+0xd0>)
 8000c36:	f043 0301 	orr.w	r3, r3, #1
 8000c3a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000c3c:	4b17      	ldr	r3, [pc, #92]	; (8000c9c <HAL_UART_MspInit+0xd0>)
 8000c3e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000c40:	f003 0301 	and.w	r3, r3, #1
 8000c44:	60bb      	str	r3, [r7, #8]
 8000c46:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000c48:	2304      	movs	r3, #4
 8000c4a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c54:	2303      	movs	r3, #3
 8000c56:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000c58:	2307      	movs	r3, #7
 8000c5a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000c5c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c60:	4619      	mov	r1, r3
 8000c62:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c66:	f000 f95f 	bl	8000f28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000c6a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000c6e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c70:	2302      	movs	r3, #2
 8000c72:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c74:	2300      	movs	r3, #0
 8000c76:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000c7c:	2303      	movs	r3, #3
 8000c7e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000c80:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000c84:	4619      	mov	r1, r3
 8000c86:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000c8a:	f000 f94d 	bl	8000f28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000c8e:	bf00      	nop
 8000c90:	3778      	adds	r7, #120	; 0x78
 8000c92:	46bd      	mov	sp, r7
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	40004400 	.word	0x40004400
 8000c9c:	40021000 	.word	0x40021000

08000ca0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000ca0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000cd8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000ca4:	f7ff ff50 	bl	8000b48 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000ca8:	480c      	ldr	r0, [pc, #48]	; (8000cdc <LoopForever+0x6>)
  ldr r1, =_edata
 8000caa:	490d      	ldr	r1, [pc, #52]	; (8000ce0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000cac:	4a0d      	ldr	r2, [pc, #52]	; (8000ce4 <LoopForever+0xe>)
  movs r3, #0
 8000cae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000cb0:	e002      	b.n	8000cb8 <LoopCopyDataInit>

08000cb2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000cb2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000cb4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000cb6:	3304      	adds	r3, #4

08000cb8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000cb8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000cba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000cbc:	d3f9      	bcc.n	8000cb2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000cbe:	4a0a      	ldr	r2, [pc, #40]	; (8000ce8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000cc0:	4c0a      	ldr	r4, [pc, #40]	; (8000cec <LoopForever+0x16>)
  movs r3, #0
 8000cc2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000cc4:	e001      	b.n	8000cca <LoopFillZerobss>

08000cc6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000cc6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000cc8:	3204      	adds	r2, #4

08000cca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000cca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ccc:	d3fb      	bcc.n	8000cc6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000cce:	f005 fbbf 	bl	8006450 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000cd2:	f7ff fdb5 	bl	8000840 <main>

08000cd6 <LoopForever>:

LoopForever:
    b LoopForever
 8000cd6:	e7fe      	b.n	8000cd6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000cd8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000cdc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ce0:	20000078 	.word	0x20000078
  ldr r2, =_sidata
 8000ce4:	08007364 	.word	0x08007364
  ldr r2, =_sbss
 8000ce8:	20000078 	.word	0x20000078
  ldr r4, =_ebss
 8000cec:	20001b4c 	.word	0x20001b4c

08000cf0 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000cf0:	e7fe      	b.n	8000cf0 <ADC1_IRQHandler>

08000cf2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf2:	b580      	push	{r7, lr}
 8000cf4:	b082      	sub	sp, #8
 8000cf6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000cf8:	2300      	movs	r3, #0
 8000cfa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cfc:	2003      	movs	r0, #3
 8000cfe:	f000 f8de 	bl	8000ebe <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000d02:	200f      	movs	r0, #15
 8000d04:	f7ff fe50 	bl	80009a8 <HAL_InitTick>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	d002      	beq.n	8000d14 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000d0e:	2301      	movs	r3, #1
 8000d10:	71fb      	strb	r3, [r7, #7]
 8000d12:	e001      	b.n	8000d18 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000d14:	f7ff fe20 	bl	8000958 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000d18:	79fb      	ldrb	r3, [r7, #7]
}
 8000d1a:	4618      	mov	r0, r3
 8000d1c:	3708      	adds	r7, #8
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d28:	4b06      	ldr	r3, [pc, #24]	; (8000d44 <HAL_IncTick+0x20>)
 8000d2a:	781b      	ldrb	r3, [r3, #0]
 8000d2c:	461a      	mov	r2, r3
 8000d2e:	4b06      	ldr	r3, [pc, #24]	; (8000d48 <HAL_IncTick+0x24>)
 8000d30:	681b      	ldr	r3, [r3, #0]
 8000d32:	4413      	add	r3, r2
 8000d34:	4a04      	ldr	r2, [pc, #16]	; (8000d48 <HAL_IncTick+0x24>)
 8000d36:	6013      	str	r3, [r2, #0]
}
 8000d38:	bf00      	nop
 8000d3a:	46bd      	mov	sp, r7
 8000d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d40:	4770      	bx	lr
 8000d42:	bf00      	nop
 8000d44:	2000000c 	.word	0x2000000c
 8000d48:	20000170 	.word	0x20000170

08000d4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d50:	4b03      	ldr	r3, [pc, #12]	; (8000d60 <HAL_GetTick+0x14>)
 8000d52:	681b      	ldr	r3, [r3, #0]
}
 8000d54:	4618      	mov	r0, r3
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
 8000d5e:	bf00      	nop
 8000d60:	20000170 	.word	0x20000170

08000d64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d64:	b480      	push	{r7}
 8000d66:	b085      	sub	sp, #20
 8000d68:	af00      	add	r7, sp, #0
 8000d6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	f003 0307 	and.w	r3, r3, #7
 8000d72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d74:	4b0c      	ldr	r3, [pc, #48]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d76:	68db      	ldr	r3, [r3, #12]
 8000d78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d7a:	68ba      	ldr	r2, [r7, #8]
 8000d7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000d80:	4013      	ands	r3, r2
 8000d82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d84:	68fb      	ldr	r3, [r7, #12]
 8000d86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d88:	68bb      	ldr	r3, [r7, #8]
 8000d8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000d94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d96:	4a04      	ldr	r2, [pc, #16]	; (8000da8 <__NVIC_SetPriorityGrouping+0x44>)
 8000d98:	68bb      	ldr	r3, [r7, #8]
 8000d9a:	60d3      	str	r3, [r2, #12]
}
 8000d9c:	bf00      	nop
 8000d9e:	3714      	adds	r7, #20
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000db0:	4b04      	ldr	r3, [pc, #16]	; (8000dc4 <__NVIC_GetPriorityGrouping+0x18>)
 8000db2:	68db      	ldr	r3, [r3, #12]
 8000db4:	0a1b      	lsrs	r3, r3, #8
 8000db6:	f003 0307 	and.w	r3, r3, #7
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b083      	sub	sp, #12
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	4603      	mov	r3, r0
 8000dd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000dd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	db0b      	blt.n	8000df2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000dda:	79fb      	ldrb	r3, [r7, #7]
 8000ddc:	f003 021f 	and.w	r2, r3, #31
 8000de0:	4907      	ldr	r1, [pc, #28]	; (8000e00 <__NVIC_EnableIRQ+0x38>)
 8000de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000de6:	095b      	lsrs	r3, r3, #5
 8000de8:	2001      	movs	r0, #1
 8000dea:	fa00 f202 	lsl.w	r2, r0, r2
 8000dee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000df2:	bf00      	nop
 8000df4:	370c      	adds	r7, #12
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr
 8000dfe:	bf00      	nop
 8000e00:	e000e100 	.word	0xe000e100

08000e04 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e04:	b480      	push	{r7}
 8000e06:	b083      	sub	sp, #12
 8000e08:	af00      	add	r7, sp, #0
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	6039      	str	r1, [r7, #0]
 8000e0e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	db0a      	blt.n	8000e2e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	b2da      	uxtb	r2, r3
 8000e1c:	490c      	ldr	r1, [pc, #48]	; (8000e50 <__NVIC_SetPriority+0x4c>)
 8000e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e22:	0112      	lsls	r2, r2, #4
 8000e24:	b2d2      	uxtb	r2, r2
 8000e26:	440b      	add	r3, r1
 8000e28:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e2c:	e00a      	b.n	8000e44 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e2e:	683b      	ldr	r3, [r7, #0]
 8000e30:	b2da      	uxtb	r2, r3
 8000e32:	4908      	ldr	r1, [pc, #32]	; (8000e54 <__NVIC_SetPriority+0x50>)
 8000e34:	79fb      	ldrb	r3, [r7, #7]
 8000e36:	f003 030f 	and.w	r3, r3, #15
 8000e3a:	3b04      	subs	r3, #4
 8000e3c:	0112      	lsls	r2, r2, #4
 8000e3e:	b2d2      	uxtb	r2, r2
 8000e40:	440b      	add	r3, r1
 8000e42:	761a      	strb	r2, [r3, #24]
}
 8000e44:	bf00      	nop
 8000e46:	370c      	adds	r7, #12
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr
 8000e50:	e000e100 	.word	0xe000e100
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	b089      	sub	sp, #36	; 0x24
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	60f8      	str	r0, [r7, #12]
 8000e60:	60b9      	str	r1, [r7, #8]
 8000e62:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000e64:	68fb      	ldr	r3, [r7, #12]
 8000e66:	f003 0307 	and.w	r3, r3, #7
 8000e6a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	f1c3 0307 	rsb	r3, r3, #7
 8000e72:	2b04      	cmp	r3, #4
 8000e74:	bf28      	it	cs
 8000e76:	2304      	movcs	r3, #4
 8000e78:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	3304      	adds	r3, #4
 8000e7e:	2b06      	cmp	r3, #6
 8000e80:	d902      	bls.n	8000e88 <NVIC_EncodePriority+0x30>
 8000e82:	69fb      	ldr	r3, [r7, #28]
 8000e84:	3b03      	subs	r3, #3
 8000e86:	e000      	b.n	8000e8a <NVIC_EncodePriority+0x32>
 8000e88:	2300      	movs	r3, #0
 8000e8a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000e90:	69bb      	ldr	r3, [r7, #24]
 8000e92:	fa02 f303 	lsl.w	r3, r2, r3
 8000e96:	43da      	mvns	r2, r3
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	401a      	ands	r2, r3
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ea0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000ea4:	697b      	ldr	r3, [r7, #20]
 8000ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8000eaa:	43d9      	mvns	r1, r3
 8000eac:	687b      	ldr	r3, [r7, #4]
 8000eae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000eb0:	4313      	orrs	r3, r2
         );
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3724      	adds	r7, #36	; 0x24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ff4c 	bl	8000d64 <__NVIC_SetPriorityGrouping>
}
 8000ecc:	bf00      	nop
 8000ece:	3708      	adds	r7, #8
 8000ed0:	46bd      	mov	sp, r7
 8000ed2:	bd80      	pop	{r7, pc}

08000ed4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b086      	sub	sp, #24
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000ee6:	f7ff ff61 	bl	8000dac <__NVIC_GetPriorityGrouping>
 8000eea:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eec:	687a      	ldr	r2, [r7, #4]
 8000eee:	68b9      	ldr	r1, [r7, #8]
 8000ef0:	6978      	ldr	r0, [r7, #20]
 8000ef2:	f7ff ffb1 	bl	8000e58 <NVIC_EncodePriority>
 8000ef6:	4602      	mov	r2, r0
 8000ef8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000efc:	4611      	mov	r1, r2
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff80 	bl	8000e04 <__NVIC_SetPriority>
}
 8000f04:	bf00      	nop
 8000f06:	3718      	adds	r7, #24
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	4618      	mov	r0, r3
 8000f1c:	f7ff ff54 	bl	8000dc8 <__NVIC_EnableIRQ>
}
 8000f20:	bf00      	nop
 8000f22:	3708      	adds	r7, #8
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000f28:	b480      	push	{r7}
 8000f2a:	b087      	sub	sp, #28
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
 8000f30:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000f32:	2300      	movs	r3, #0
 8000f34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000f36:	e148      	b.n	80011ca <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000f38:	683b      	ldr	r3, [r7, #0]
 8000f3a:	681a      	ldr	r2, [r3, #0]
 8000f3c:	2101      	movs	r1, #1
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	fa01 f303 	lsl.w	r3, r1, r3
 8000f44:	4013      	ands	r3, r2
 8000f46:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	f000 813a 	beq.w	80011c4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f003 0303 	and.w	r3, r3, #3
 8000f58:	2b01      	cmp	r3, #1
 8000f5a:	d005      	beq.n	8000f68 <HAL_GPIO_Init+0x40>
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685b      	ldr	r3, [r3, #4]
 8000f60:	f003 0303 	and.w	r3, r3, #3
 8000f64:	2b02      	cmp	r3, #2
 8000f66:	d130      	bne.n	8000fca <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	689b      	ldr	r3, [r3, #8]
 8000f6c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000f6e:	697b      	ldr	r3, [r7, #20]
 8000f70:	005b      	lsls	r3, r3, #1
 8000f72:	2203      	movs	r2, #3
 8000f74:	fa02 f303 	lsl.w	r3, r2, r3
 8000f78:	43db      	mvns	r3, r3
 8000f7a:	693a      	ldr	r2, [r7, #16]
 8000f7c:	4013      	ands	r3, r2
 8000f7e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000f80:	683b      	ldr	r3, [r7, #0]
 8000f82:	68da      	ldr	r2, [r3, #12]
 8000f84:	697b      	ldr	r3, [r7, #20]
 8000f86:	005b      	lsls	r3, r3, #1
 8000f88:	fa02 f303 	lsl.w	r3, r2, r3
 8000f8c:	693a      	ldr	r2, [r7, #16]
 8000f8e:	4313      	orrs	r3, r2
 8000f90:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	693a      	ldr	r2, [r7, #16]
 8000f96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	685b      	ldr	r3, [r3, #4]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000f9e:	2201      	movs	r2, #1
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa6:	43db      	mvns	r3, r3
 8000fa8:	693a      	ldr	r2, [r7, #16]
 8000faa:	4013      	ands	r3, r2
 8000fac:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000fae:	683b      	ldr	r3, [r7, #0]
 8000fb0:	685b      	ldr	r3, [r3, #4]
 8000fb2:	091b      	lsrs	r3, r3, #4
 8000fb4:	f003 0201 	and.w	r2, r3, #1
 8000fb8:	697b      	ldr	r3, [r7, #20]
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	693a      	ldr	r2, [r7, #16]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	693a      	ldr	r2, [r7, #16]
 8000fc8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	f003 0303 	and.w	r3, r3, #3
 8000fd2:	2b03      	cmp	r3, #3
 8000fd4:	d017      	beq.n	8001006 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	68db      	ldr	r3, [r3, #12]
 8000fda:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	005b      	lsls	r3, r3, #1
 8000fe0:	2203      	movs	r2, #3
 8000fe2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe6:	43db      	mvns	r3, r3
 8000fe8:	693a      	ldr	r2, [r7, #16]
 8000fea:	4013      	ands	r3, r2
 8000fec:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	697b      	ldr	r3, [r7, #20]
 8000ff4:	005b      	lsls	r3, r3, #1
 8000ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8000ffa:	693a      	ldr	r2, [r7, #16]
 8000ffc:	4313      	orrs	r3, r2
 8000ffe:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	693a      	ldr	r2, [r7, #16]
 8001004:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001006:	683b      	ldr	r3, [r7, #0]
 8001008:	685b      	ldr	r3, [r3, #4]
 800100a:	f003 0303 	and.w	r3, r3, #3
 800100e:	2b02      	cmp	r3, #2
 8001010:	d123      	bne.n	800105a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001012:	697b      	ldr	r3, [r7, #20]
 8001014:	08da      	lsrs	r2, r3, #3
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	3208      	adds	r2, #8
 800101a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800101e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	f003 0307 	and.w	r3, r3, #7
 8001026:	009b      	lsls	r3, r3, #2
 8001028:	220f      	movs	r2, #15
 800102a:	fa02 f303 	lsl.w	r3, r2, r3
 800102e:	43db      	mvns	r3, r3
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	4013      	ands	r3, r2
 8001034:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	691a      	ldr	r2, [r3, #16]
 800103a:	697b      	ldr	r3, [r7, #20]
 800103c:	f003 0307 	and.w	r3, r3, #7
 8001040:	009b      	lsls	r3, r3, #2
 8001042:	fa02 f303 	lsl.w	r3, r2, r3
 8001046:	693a      	ldr	r2, [r7, #16]
 8001048:	4313      	orrs	r3, r2
 800104a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800104c:	697b      	ldr	r3, [r7, #20]
 800104e:	08da      	lsrs	r2, r3, #3
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	3208      	adds	r2, #8
 8001054:	6939      	ldr	r1, [r7, #16]
 8001056:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	693a      	ldr	r2, [r7, #16]
 800106e:	4013      	ands	r3, r2
 8001070:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	685b      	ldr	r3, [r3, #4]
 8001076:	f003 0203 	and.w	r2, r3, #3
 800107a:	697b      	ldr	r3, [r7, #20]
 800107c:	005b      	lsls	r3, r3, #1
 800107e:	fa02 f303 	lsl.w	r3, r2, r3
 8001082:	693a      	ldr	r2, [r7, #16]
 8001084:	4313      	orrs	r3, r2
 8001086:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	685b      	ldr	r3, [r3, #4]
 8001092:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001096:	2b00      	cmp	r3, #0
 8001098:	f000 8094 	beq.w	80011c4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109c:	4b52      	ldr	r3, [pc, #328]	; (80011e8 <HAL_GPIO_Init+0x2c0>)
 800109e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010a0:	4a51      	ldr	r2, [pc, #324]	; (80011e8 <HAL_GPIO_Init+0x2c0>)
 80010a2:	f043 0301 	orr.w	r3, r3, #1
 80010a6:	6613      	str	r3, [r2, #96]	; 0x60
 80010a8:	4b4f      	ldr	r3, [pc, #316]	; (80011e8 <HAL_GPIO_Init+0x2c0>)
 80010aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80010ac:	f003 0301 	and.w	r3, r3, #1
 80010b0:	60bb      	str	r3, [r7, #8]
 80010b2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80010b4:	4a4d      	ldr	r2, [pc, #308]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 80010b6:	697b      	ldr	r3, [r7, #20]
 80010b8:	089b      	lsrs	r3, r3, #2
 80010ba:	3302      	adds	r3, #2
 80010bc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80010c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80010c2:	697b      	ldr	r3, [r7, #20]
 80010c4:	f003 0303 	and.w	r3, r3, #3
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	220f      	movs	r2, #15
 80010cc:	fa02 f303 	lsl.w	r3, r2, r3
 80010d0:	43db      	mvns	r3, r3
 80010d2:	693a      	ldr	r2, [r7, #16]
 80010d4:	4013      	ands	r3, r2
 80010d6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80010de:	d00d      	beq.n	80010fc <HAL_GPIO_Init+0x1d4>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	4a43      	ldr	r2, [pc, #268]	; (80011f0 <HAL_GPIO_Init+0x2c8>)
 80010e4:	4293      	cmp	r3, r2
 80010e6:	d007      	beq.n	80010f8 <HAL_GPIO_Init+0x1d0>
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	4a42      	ldr	r2, [pc, #264]	; (80011f4 <HAL_GPIO_Init+0x2cc>)
 80010ec:	4293      	cmp	r3, r2
 80010ee:	d101      	bne.n	80010f4 <HAL_GPIO_Init+0x1cc>
 80010f0:	2302      	movs	r3, #2
 80010f2:	e004      	b.n	80010fe <HAL_GPIO_Init+0x1d6>
 80010f4:	2307      	movs	r3, #7
 80010f6:	e002      	b.n	80010fe <HAL_GPIO_Init+0x1d6>
 80010f8:	2301      	movs	r3, #1
 80010fa:	e000      	b.n	80010fe <HAL_GPIO_Init+0x1d6>
 80010fc:	2300      	movs	r3, #0
 80010fe:	697a      	ldr	r2, [r7, #20]
 8001100:	f002 0203 	and.w	r2, r2, #3
 8001104:	0092      	lsls	r2, r2, #2
 8001106:	4093      	lsls	r3, r2
 8001108:	693a      	ldr	r2, [r7, #16]
 800110a:	4313      	orrs	r3, r2
 800110c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800110e:	4937      	ldr	r1, [pc, #220]	; (80011ec <HAL_GPIO_Init+0x2c4>)
 8001110:	697b      	ldr	r3, [r7, #20]
 8001112:	089b      	lsrs	r3, r3, #2
 8001114:	3302      	adds	r3, #2
 8001116:	693a      	ldr	r2, [r7, #16]
 8001118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800111c:	4b36      	ldr	r3, [pc, #216]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 800111e:	689b      	ldr	r3, [r3, #8]
 8001120:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	43db      	mvns	r3, r3
 8001126:	693a      	ldr	r2, [r7, #16]
 8001128:	4013      	ands	r3, r2
 800112a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800112c:	683b      	ldr	r3, [r7, #0]
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001134:	2b00      	cmp	r3, #0
 8001136:	d003      	beq.n	8001140 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001138:	693a      	ldr	r2, [r7, #16]
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	4313      	orrs	r3, r2
 800113e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001142:	693b      	ldr	r3, [r7, #16]
 8001144:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001146:	4b2c      	ldr	r3, [pc, #176]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001148:	68db      	ldr	r3, [r3, #12]
 800114a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	43db      	mvns	r3, r3
 8001150:	693a      	ldr	r2, [r7, #16]
 8001152:	4013      	ands	r3, r2
 8001154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	685b      	ldr	r3, [r3, #4]
 800115a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d003      	beq.n	800116a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001162:	693a      	ldr	r2, [r7, #16]
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	4313      	orrs	r3, r2
 8001168:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800116a:	4a23      	ldr	r2, [pc, #140]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 800116c:	693b      	ldr	r3, [r7, #16]
 800116e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001170:	4b21      	ldr	r3, [pc, #132]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001172:	685b      	ldr	r3, [r3, #4]
 8001174:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	43db      	mvns	r3, r3
 800117a:	693a      	ldr	r2, [r7, #16]
 800117c:	4013      	ands	r3, r2
 800117e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001180:	683b      	ldr	r3, [r7, #0]
 8001182:	685b      	ldr	r3, [r3, #4]
 8001184:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001188:	2b00      	cmp	r3, #0
 800118a:	d003      	beq.n	8001194 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	4313      	orrs	r3, r2
 8001192:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001194:	4a18      	ldr	r2, [pc, #96]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 8001196:	693b      	ldr	r3, [r7, #16]
 8001198:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800119a:	4b17      	ldr	r3, [pc, #92]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	43db      	mvns	r3, r3
 80011a4:	693a      	ldr	r2, [r7, #16]
 80011a6:	4013      	ands	r3, r2
 80011a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80011aa:	683b      	ldr	r3, [r7, #0]
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011b2:	2b00      	cmp	r3, #0
 80011b4:	d003      	beq.n	80011be <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80011b6:	693a      	ldr	r2, [r7, #16]
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	4313      	orrs	r3, r2
 80011bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80011be:	4a0e      	ldr	r2, [pc, #56]	; (80011f8 <HAL_GPIO_Init+0x2d0>)
 80011c0:	693b      	ldr	r3, [r7, #16]
 80011c2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80011c4:	697b      	ldr	r3, [r7, #20]
 80011c6:	3301      	adds	r3, #1
 80011c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ca:	683b      	ldr	r3, [r7, #0]
 80011cc:	681a      	ldr	r2, [r3, #0]
 80011ce:	697b      	ldr	r3, [r7, #20]
 80011d0:	fa22 f303 	lsr.w	r3, r2, r3
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	f47f aeaf 	bne.w	8000f38 <HAL_GPIO_Init+0x10>
  }
}
 80011da:	bf00      	nop
 80011dc:	bf00      	nop
 80011de:	371c      	adds	r7, #28
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	40021000 	.word	0x40021000
 80011ec:	40010000 	.word	0x40010000
 80011f0:	48000400 	.word	0x48000400
 80011f4:	48000800 	.word	0x48000800
 80011f8:	40010400 	.word	0x40010400

080011fc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80011fc:	b480      	push	{r7}
 80011fe:	b083      	sub	sp, #12
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
 8001204:	460b      	mov	r3, r1
 8001206:	807b      	strh	r3, [r7, #2]
 8001208:	4613      	mov	r3, r2
 800120a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800120c:	787b      	ldrb	r3, [r7, #1]
 800120e:	2b00      	cmp	r3, #0
 8001210:	d003      	beq.n	800121a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001212:	887a      	ldrh	r2, [r7, #2]
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001218:	e002      	b.n	8001220 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800121a:	887a      	ldrh	r2, [r7, #2]
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122a:	4770      	bx	lr

0800122c <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800122c:	b480      	push	{r7}
 800122e:	b085      	sub	sp, #20
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]
 8001234:	460b      	mov	r3, r1
 8001236:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	695b      	ldr	r3, [r3, #20]
 800123c:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800123e:	887a      	ldrh	r2, [r7, #2]
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	4013      	ands	r3, r2
 8001244:	041a      	lsls	r2, r3, #16
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	43d9      	mvns	r1, r3
 800124a:	887b      	ldrh	r3, [r7, #2]
 800124c:	400b      	ands	r3, r1
 800124e:	431a      	orrs	r2, r3
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	619a      	str	r2, [r3, #24]
}
 8001254:	bf00      	nop
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001260:	b480      	push	{r7}
 8001262:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001264:	4b05      	ldr	r3, [pc, #20]	; (800127c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	4a04      	ldr	r2, [pc, #16]	; (800127c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800126a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800126e:	6013      	str	r3, [r2, #0]
}
 8001270:	bf00      	nop
 8001272:	46bd      	mov	sp, r7
 8001274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001278:	4770      	bx	lr
 800127a:	bf00      	nop
 800127c:	40007000 	.word	0x40007000

08001280 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001284:	4b04      	ldr	r3, [pc, #16]	; (8001298 <HAL_PWREx_GetVoltageRange+0x18>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800128c:	4618      	mov	r0, r3
 800128e:	46bd      	mov	sp, r7
 8001290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001294:	4770      	bx	lr
 8001296:	bf00      	nop
 8001298:	40007000 	.word	0x40007000

0800129c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800129c:	b480      	push	{r7}
 800129e:	b085      	sub	sp, #20
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012aa:	d130      	bne.n	800130e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ac:	4b23      	ldr	r3, [pc, #140]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80012b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80012b8:	d038      	beq.n	800132c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012ba:	4b20      	ldr	r3, [pc, #128]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80012c2:	4a1e      	ldr	r2, [pc, #120]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012c4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012c8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80012ca:	4b1d      	ldr	r3, [pc, #116]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	2232      	movs	r2, #50	; 0x32
 80012d0:	fb02 f303 	mul.w	r3, r2, r3
 80012d4:	4a1b      	ldr	r2, [pc, #108]	; (8001344 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80012d6:	fba2 2303 	umull	r2, r3, r2, r3
 80012da:	0c9b      	lsrs	r3, r3, #18
 80012dc:	3301      	adds	r3, #1
 80012de:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e0:	e002      	b.n	80012e8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	3b01      	subs	r3, #1
 80012e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80012e8:	4b14      	ldr	r3, [pc, #80]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012ea:	695b      	ldr	r3, [r3, #20]
 80012ec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80012f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80012f4:	d102      	bne.n	80012fc <HAL_PWREx_ControlVoltageScaling+0x60>
 80012f6:	68fb      	ldr	r3, [r7, #12]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d1f2      	bne.n	80012e2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80012fe:	695b      	ldr	r3, [r3, #20]
 8001300:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001304:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001308:	d110      	bne.n	800132c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800130a:	2303      	movs	r3, #3
 800130c:	e00f      	b.n	800132e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800130e:	4b0b      	ldr	r3, [pc, #44]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001316:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800131a:	d007      	beq.n	800132c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001324:	4a05      	ldr	r2, [pc, #20]	; (800133c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001326:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800132a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3714      	adds	r7, #20
 8001332:	46bd      	mov	sp, r7
 8001334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001338:	4770      	bx	lr
 800133a:	bf00      	nop
 800133c:	40007000 	.word	0x40007000
 8001340:	20000004 	.word	0x20000004
 8001344:	431bde83 	.word	0x431bde83

08001348 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b088      	sub	sp, #32
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001350:	687b      	ldr	r3, [r7, #4]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d102      	bne.n	800135c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001356:	2301      	movs	r3, #1
 8001358:	f000 bc02 	b.w	8001b60 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800135c:	4b96      	ldr	r3, [pc, #600]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 800135e:	689b      	ldr	r3, [r3, #8]
 8001360:	f003 030c 	and.w	r3, r3, #12
 8001364:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001366:	4b94      	ldr	r3, [pc, #592]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	f003 0303 	and.w	r3, r3, #3
 800136e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	f003 0310 	and.w	r3, r3, #16
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 80e4 	beq.w	8001546 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800137e:	69bb      	ldr	r3, [r7, #24]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d007      	beq.n	8001394 <HAL_RCC_OscConfig+0x4c>
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	2b0c      	cmp	r3, #12
 8001388:	f040 808b 	bne.w	80014a2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800138c:	697b      	ldr	r3, [r7, #20]
 800138e:	2b01      	cmp	r3, #1
 8001390:	f040 8087 	bne.w	80014a2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001394:	4b88      	ldr	r3, [pc, #544]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	f003 0302 	and.w	r3, r3, #2
 800139c:	2b00      	cmp	r3, #0
 800139e:	d005      	beq.n	80013ac <HAL_RCC_OscConfig+0x64>
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	699b      	ldr	r3, [r3, #24]
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d101      	bne.n	80013ac <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80013a8:	2301      	movs	r3, #1
 80013aa:	e3d9      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	6a1a      	ldr	r2, [r3, #32]
 80013b0:	4b81      	ldr	r3, [pc, #516]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	f003 0308 	and.w	r3, r3, #8
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d004      	beq.n	80013c6 <HAL_RCC_OscConfig+0x7e>
 80013bc:	4b7e      	ldr	r3, [pc, #504]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013c4:	e005      	b.n	80013d2 <HAL_RCC_OscConfig+0x8a>
 80013c6:	4b7c      	ldr	r3, [pc, #496]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013cc:	091b      	lsrs	r3, r3, #4
 80013ce:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80013d2:	4293      	cmp	r3, r2
 80013d4:	d223      	bcs.n	800141e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	6a1b      	ldr	r3, [r3, #32]
 80013da:	4618      	mov	r0, r3
 80013dc:	f000 fdbe 	bl	8001f5c <RCC_SetFlashLatencyFromMSIRange>
 80013e0:	4603      	mov	r3, r0
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d001      	beq.n	80013ea <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	e3ba      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013ea:	4b73      	ldr	r3, [pc, #460]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4a72      	ldr	r2, [pc, #456]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013f0:	f043 0308 	orr.w	r3, r3, #8
 80013f4:	6013      	str	r3, [r2, #0]
 80013f6:	4b70      	ldr	r3, [pc, #448]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	6a1b      	ldr	r3, [r3, #32]
 8001402:	496d      	ldr	r1, [pc, #436]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001404:	4313      	orrs	r3, r2
 8001406:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001408:	4b6b      	ldr	r3, [pc, #428]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	69db      	ldr	r3, [r3, #28]
 8001414:	021b      	lsls	r3, r3, #8
 8001416:	4968      	ldr	r1, [pc, #416]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001418:	4313      	orrs	r3, r2
 800141a:	604b      	str	r3, [r1, #4]
 800141c:	e025      	b.n	800146a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800141e:	4b66      	ldr	r3, [pc, #408]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	4a65      	ldr	r2, [pc, #404]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001424:	f043 0308 	orr.w	r3, r3, #8
 8001428:	6013      	str	r3, [r2, #0]
 800142a:	4b63      	ldr	r3, [pc, #396]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	6a1b      	ldr	r3, [r3, #32]
 8001436:	4960      	ldr	r1, [pc, #384]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001438:	4313      	orrs	r3, r2
 800143a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800143c:	4b5e      	ldr	r3, [pc, #376]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	69db      	ldr	r3, [r3, #28]
 8001448:	021b      	lsls	r3, r3, #8
 800144a:	495b      	ldr	r1, [pc, #364]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 800144c:	4313      	orrs	r3, r2
 800144e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001450:	69bb      	ldr	r3, [r7, #24]
 8001452:	2b00      	cmp	r3, #0
 8001454:	d109      	bne.n	800146a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	6a1b      	ldr	r3, [r3, #32]
 800145a:	4618      	mov	r0, r3
 800145c:	f000 fd7e 	bl	8001f5c <RCC_SetFlashLatencyFromMSIRange>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001466:	2301      	movs	r3, #1
 8001468:	e37a      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800146a:	f000 fc81 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 800146e:	4602      	mov	r2, r0
 8001470:	4b51      	ldr	r3, [pc, #324]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001472:	689b      	ldr	r3, [r3, #8]
 8001474:	091b      	lsrs	r3, r3, #4
 8001476:	f003 030f 	and.w	r3, r3, #15
 800147a:	4950      	ldr	r1, [pc, #320]	; (80015bc <HAL_RCC_OscConfig+0x274>)
 800147c:	5ccb      	ldrb	r3, [r1, r3]
 800147e:	f003 031f 	and.w	r3, r3, #31
 8001482:	fa22 f303 	lsr.w	r3, r2, r3
 8001486:	4a4e      	ldr	r2, [pc, #312]	; (80015c0 <HAL_RCC_OscConfig+0x278>)
 8001488:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800148a:	4b4e      	ldr	r3, [pc, #312]	; (80015c4 <HAL_RCC_OscConfig+0x27c>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	4618      	mov	r0, r3
 8001490:	f7ff fa8a 	bl	80009a8 <HAL_InitTick>
 8001494:	4603      	mov	r3, r0
 8001496:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001498:	7bfb      	ldrb	r3, [r7, #15]
 800149a:	2b00      	cmp	r3, #0
 800149c:	d052      	beq.n	8001544 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800149e:	7bfb      	ldrb	r3, [r7, #15]
 80014a0:	e35e      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d032      	beq.n	8001510 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80014aa:	4b43      	ldr	r3, [pc, #268]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4a42      	ldr	r2, [pc, #264]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80014b6:	f7ff fc49 	bl	8000d4c <HAL_GetTick>
 80014ba:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014bc:	e008      	b.n	80014d0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80014be:	f7ff fc45 	bl	8000d4c <HAL_GetTick>
 80014c2:	4602      	mov	r2, r0
 80014c4:	693b      	ldr	r3, [r7, #16]
 80014c6:	1ad3      	subs	r3, r2, r3
 80014c8:	2b02      	cmp	r3, #2
 80014ca:	d901      	bls.n	80014d0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80014cc:	2303      	movs	r3, #3
 80014ce:	e347      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80014d0:	4b39      	ldr	r3, [pc, #228]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0302 	and.w	r3, r3, #2
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d0f0      	beq.n	80014be <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014dc:	4b36      	ldr	r3, [pc, #216]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	4a35      	ldr	r2, [pc, #212]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014e2:	f043 0308 	orr.w	r3, r3, #8
 80014e6:	6013      	str	r3, [r2, #0]
 80014e8:	4b33      	ldr	r3, [pc, #204]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	6a1b      	ldr	r3, [r3, #32]
 80014f4:	4930      	ldr	r1, [pc, #192]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014f6:	4313      	orrs	r3, r2
 80014f8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80014fa:	4b2f      	ldr	r3, [pc, #188]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69db      	ldr	r3, [r3, #28]
 8001506:	021b      	lsls	r3, r3, #8
 8001508:	492b      	ldr	r1, [pc, #172]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 800150a:	4313      	orrs	r3, r2
 800150c:	604b      	str	r3, [r1, #4]
 800150e:	e01a      	b.n	8001546 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001510:	4b29      	ldr	r3, [pc, #164]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a28      	ldr	r2, [pc, #160]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001516:	f023 0301 	bic.w	r3, r3, #1
 800151a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800151c:	f7ff fc16 	bl	8000d4c <HAL_GetTick>
 8001520:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001522:	e008      	b.n	8001536 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001524:	f7ff fc12 	bl	8000d4c <HAL_GetTick>
 8001528:	4602      	mov	r2, r0
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d901      	bls.n	8001536 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	e314      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001536:	4b20      	ldr	r3, [pc, #128]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0302 	and.w	r3, r3, #2
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f0      	bne.n	8001524 <HAL_RCC_OscConfig+0x1dc>
 8001542:	e000      	b.n	8001546 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001544:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	2b00      	cmp	r3, #0
 8001550:	d073      	beq.n	800163a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001552:	69bb      	ldr	r3, [r7, #24]
 8001554:	2b08      	cmp	r3, #8
 8001556:	d005      	beq.n	8001564 <HAL_RCC_OscConfig+0x21c>
 8001558:	69bb      	ldr	r3, [r7, #24]
 800155a:	2b0c      	cmp	r3, #12
 800155c:	d10e      	bne.n	800157c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	2b03      	cmp	r3, #3
 8001562:	d10b      	bne.n	800157c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001564:	4b14      	ldr	r3, [pc, #80]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800156c:	2b00      	cmp	r3, #0
 800156e:	d063      	beq.n	8001638 <HAL_RCC_OscConfig+0x2f0>
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	685b      	ldr	r3, [r3, #4]
 8001574:	2b00      	cmp	r3, #0
 8001576:	d15f      	bne.n	8001638 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001578:	2301      	movs	r3, #1
 800157a:	e2f1      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	685b      	ldr	r3, [r3, #4]
 8001580:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001584:	d106      	bne.n	8001594 <HAL_RCC_OscConfig+0x24c>
 8001586:	4b0c      	ldr	r3, [pc, #48]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a0b      	ldr	r2, [pc, #44]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 800158c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001590:	6013      	str	r3, [r2, #0]
 8001592:	e025      	b.n	80015e0 <HAL_RCC_OscConfig+0x298>
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800159c:	d114      	bne.n	80015c8 <HAL_RCC_OscConfig+0x280>
 800159e:	4b06      	ldr	r3, [pc, #24]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	4a05      	ldr	r2, [pc, #20]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015a4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015a8:	6013      	str	r3, [r2, #0]
 80015aa:	4b03      	ldr	r3, [pc, #12]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	4a02      	ldr	r2, [pc, #8]	; (80015b8 <HAL_RCC_OscConfig+0x270>)
 80015b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e013      	b.n	80015e0 <HAL_RCC_OscConfig+0x298>
 80015b8:	40021000 	.word	0x40021000
 80015bc:	08007174 	.word	0x08007174
 80015c0:	20000004 	.word	0x20000004
 80015c4:	20000008 	.word	0x20000008
 80015c8:	4ba0      	ldr	r3, [pc, #640]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a9f      	ldr	r2, [pc, #636]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80015ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80015d2:	6013      	str	r3, [r2, #0]
 80015d4:	4b9d      	ldr	r3, [pc, #628]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a9c      	ldr	r2, [pc, #624]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80015da:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80015de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d013      	beq.n	8001610 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015e8:	f7ff fbb0 	bl	8000d4c <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015ee:	e008      	b.n	8001602 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80015f0:	f7ff fbac 	bl	8000d4c <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	2b64      	cmp	r3, #100	; 0x64
 80015fc:	d901      	bls.n	8001602 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80015fe:	2303      	movs	r3, #3
 8001600:	e2ae      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001602:	4b92      	ldr	r3, [pc, #584]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800160a:	2b00      	cmp	r3, #0
 800160c:	d0f0      	beq.n	80015f0 <HAL_RCC_OscConfig+0x2a8>
 800160e:	e014      	b.n	800163a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001610:	f7ff fb9c 	bl	8000d4c <HAL_GetTick>
 8001614:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001616:	e008      	b.n	800162a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001618:	f7ff fb98 	bl	8000d4c <HAL_GetTick>
 800161c:	4602      	mov	r2, r0
 800161e:	693b      	ldr	r3, [r7, #16]
 8001620:	1ad3      	subs	r3, r2, r3
 8001622:	2b64      	cmp	r3, #100	; 0x64
 8001624:	d901      	bls.n	800162a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001626:	2303      	movs	r3, #3
 8001628:	e29a      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800162a:	4b88      	ldr	r3, [pc, #544]	; (800184c <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f0      	bne.n	8001618 <HAL_RCC_OscConfig+0x2d0>
 8001636:	e000      	b.n	800163a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001638:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	f003 0302 	and.w	r3, r3, #2
 8001642:	2b00      	cmp	r3, #0
 8001644:	d060      	beq.n	8001708 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001646:	69bb      	ldr	r3, [r7, #24]
 8001648:	2b04      	cmp	r3, #4
 800164a:	d005      	beq.n	8001658 <HAL_RCC_OscConfig+0x310>
 800164c:	69bb      	ldr	r3, [r7, #24]
 800164e:	2b0c      	cmp	r3, #12
 8001650:	d119      	bne.n	8001686 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001652:	697b      	ldr	r3, [r7, #20]
 8001654:	2b02      	cmp	r3, #2
 8001656:	d116      	bne.n	8001686 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001658:	4b7c      	ldr	r3, [pc, #496]	; (800184c <HAL_RCC_OscConfig+0x504>)
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001660:	2b00      	cmp	r3, #0
 8001662:	d005      	beq.n	8001670 <HAL_RCC_OscConfig+0x328>
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	68db      	ldr	r3, [r3, #12]
 8001668:	2b00      	cmp	r3, #0
 800166a:	d101      	bne.n	8001670 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800166c:	2301      	movs	r3, #1
 800166e:	e277      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001670:	4b76      	ldr	r3, [pc, #472]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001672:	685b      	ldr	r3, [r3, #4]
 8001674:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	691b      	ldr	r3, [r3, #16]
 800167c:	061b      	lsls	r3, r3, #24
 800167e:	4973      	ldr	r1, [pc, #460]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001680:	4313      	orrs	r3, r2
 8001682:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001684:	e040      	b.n	8001708 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	68db      	ldr	r3, [r3, #12]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d023      	beq.n	80016d6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800168e:	4b6f      	ldr	r3, [pc, #444]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a6e      	ldr	r2, [pc, #440]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001694:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001698:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800169a:	f7ff fb57 	bl	8000d4c <HAL_GetTick>
 800169e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016a0:	e008      	b.n	80016b4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016a2:	f7ff fb53 	bl	8000d4c <HAL_GetTick>
 80016a6:	4602      	mov	r2, r0
 80016a8:	693b      	ldr	r3, [r7, #16]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	2b02      	cmp	r3, #2
 80016ae:	d901      	bls.n	80016b4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80016b0:	2303      	movs	r3, #3
 80016b2:	e255      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80016b4:	4b65      	ldr	r3, [pc, #404]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d0f0      	beq.n	80016a2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016c0:	4b62      	ldr	r3, [pc, #392]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	691b      	ldr	r3, [r3, #16]
 80016cc:	061b      	lsls	r3, r3, #24
 80016ce:	495f      	ldr	r1, [pc, #380]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
 80016d4:	e018      	b.n	8001708 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80016d6:	4b5d      	ldr	r3, [pc, #372]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a5c      	ldr	r2, [pc, #368]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80016dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016e0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016e2:	f7ff fb33 	bl	8000d4c <HAL_GetTick>
 80016e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016e8:	e008      	b.n	80016fc <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016ea:	f7ff fb2f 	bl	8000d4c <HAL_GetTick>
 80016ee:	4602      	mov	r2, r0
 80016f0:	693b      	ldr	r3, [r7, #16]
 80016f2:	1ad3      	subs	r3, r2, r3
 80016f4:	2b02      	cmp	r3, #2
 80016f6:	d901      	bls.n	80016fc <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80016f8:	2303      	movs	r3, #3
 80016fa:	e231      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80016fc:	4b53      	ldr	r3, [pc, #332]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1f0      	bne.n	80016ea <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f003 0308 	and.w	r3, r3, #8
 8001710:	2b00      	cmp	r3, #0
 8001712:	d03c      	beq.n	800178e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	695b      	ldr	r3, [r3, #20]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d01c      	beq.n	8001756 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800171c:	4b4b      	ldr	r3, [pc, #300]	; (800184c <HAL_RCC_OscConfig+0x504>)
 800171e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001722:	4a4a      	ldr	r2, [pc, #296]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001724:	f043 0301 	orr.w	r3, r3, #1
 8001728:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800172c:	f7ff fb0e 	bl	8000d4c <HAL_GetTick>
 8001730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001732:	e008      	b.n	8001746 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001734:	f7ff fb0a 	bl	8000d4c <HAL_GetTick>
 8001738:	4602      	mov	r2, r0
 800173a:	693b      	ldr	r3, [r7, #16]
 800173c:	1ad3      	subs	r3, r2, r3
 800173e:	2b02      	cmp	r3, #2
 8001740:	d901      	bls.n	8001746 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001742:	2303      	movs	r3, #3
 8001744:	e20c      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001746:	4b41      	ldr	r3, [pc, #260]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001748:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800174c:	f003 0302 	and.w	r3, r3, #2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d0ef      	beq.n	8001734 <HAL_RCC_OscConfig+0x3ec>
 8001754:	e01b      	b.n	800178e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001756:	4b3d      	ldr	r3, [pc, #244]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001758:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800175c:	4a3b      	ldr	r2, [pc, #236]	; (800184c <HAL_RCC_OscConfig+0x504>)
 800175e:	f023 0301 	bic.w	r3, r3, #1
 8001762:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001766:	f7ff faf1 	bl	8000d4c <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800176e:	f7ff faed 	bl	8000d4c <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e1ef      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001780:	4b32      	ldr	r3, [pc, #200]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001782:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001786:	f003 0302 	and.w	r3, r3, #2
 800178a:	2b00      	cmp	r3, #0
 800178c:	d1ef      	bne.n	800176e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f003 0304 	and.w	r3, r3, #4
 8001796:	2b00      	cmp	r3, #0
 8001798:	f000 80a6 	beq.w	80018e8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80017a0:	4b2a      	ldr	r3, [pc, #168]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80017a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d10d      	bne.n	80017c8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80017ac:	4b27      	ldr	r3, [pc, #156]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	4a26      	ldr	r2, [pc, #152]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80017b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80017b6:	6593      	str	r3, [r2, #88]	; 0x58
 80017b8:	4b24      	ldr	r3, [pc, #144]	; (800184c <HAL_RCC_OscConfig+0x504>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017c0:	60bb      	str	r3, [r7, #8]
 80017c2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80017c4:	2301      	movs	r3, #1
 80017c6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017c8:	4b21      	ldr	r3, [pc, #132]	; (8001850 <HAL_RCC_OscConfig+0x508>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80017d0:	2b00      	cmp	r3, #0
 80017d2:	d118      	bne.n	8001806 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <HAL_RCC_OscConfig+0x508>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	4a1d      	ldr	r2, [pc, #116]	; (8001850 <HAL_RCC_OscConfig+0x508>)
 80017da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017de:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80017e0:	f7ff fab4 	bl	8000d4c <HAL_GetTick>
 80017e4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017e6:	e008      	b.n	80017fa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e8:	f7ff fab0 	bl	8000d4c <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	693b      	ldr	r3, [r7, #16]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	2b02      	cmp	r3, #2
 80017f4:	d901      	bls.n	80017fa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80017f6:	2303      	movs	r3, #3
 80017f8:	e1b2      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017fa:	4b15      	ldr	r3, [pc, #84]	; (8001850 <HAL_RCC_OscConfig+0x508>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001802:	2b00      	cmp	r3, #0
 8001804:	d0f0      	beq.n	80017e8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	689b      	ldr	r3, [r3, #8]
 800180a:	2b01      	cmp	r3, #1
 800180c:	d108      	bne.n	8001820 <HAL_RCC_OscConfig+0x4d8>
 800180e:	4b0f      	ldr	r3, [pc, #60]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001810:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001814:	4a0d      	ldr	r2, [pc, #52]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001816:	f043 0301 	orr.w	r3, r3, #1
 800181a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800181e:	e029      	b.n	8001874 <HAL_RCC_OscConfig+0x52c>
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	2b05      	cmp	r3, #5
 8001826:	d115      	bne.n	8001854 <HAL_RCC_OscConfig+0x50c>
 8001828:	4b08      	ldr	r3, [pc, #32]	; (800184c <HAL_RCC_OscConfig+0x504>)
 800182a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800182e:	4a07      	ldr	r2, [pc, #28]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001830:	f043 0304 	orr.w	r3, r3, #4
 8001834:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001838:	4b04      	ldr	r3, [pc, #16]	; (800184c <HAL_RCC_OscConfig+0x504>)
 800183a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800183e:	4a03      	ldr	r2, [pc, #12]	; (800184c <HAL_RCC_OscConfig+0x504>)
 8001840:	f043 0301 	orr.w	r3, r3, #1
 8001844:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001848:	e014      	b.n	8001874 <HAL_RCC_OscConfig+0x52c>
 800184a:	bf00      	nop
 800184c:	40021000 	.word	0x40021000
 8001850:	40007000 	.word	0x40007000
 8001854:	4b9a      	ldr	r3, [pc, #616]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001856:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800185a:	4a99      	ldr	r2, [pc, #612]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 800185c:	f023 0301 	bic.w	r3, r3, #1
 8001860:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001864:	4b96      	ldr	r3, [pc, #600]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001866:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800186a:	4a95      	ldr	r2, [pc, #596]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 800186c:	f023 0304 	bic.w	r3, r3, #4
 8001870:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	2b00      	cmp	r3, #0
 800187a:	d016      	beq.n	80018aa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800187c:	f7ff fa66 	bl	8000d4c <HAL_GetTick>
 8001880:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001882:	e00a      	b.n	800189a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001884:	f7ff fa62 	bl	8000d4c <HAL_GetTick>
 8001888:	4602      	mov	r2, r0
 800188a:	693b      	ldr	r3, [r7, #16]
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001892:	4293      	cmp	r3, r2
 8001894:	d901      	bls.n	800189a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001896:	2303      	movs	r3, #3
 8001898:	e162      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800189a:	4b89      	ldr	r3, [pc, #548]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 800189c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018a0:	f003 0302 	and.w	r3, r3, #2
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	d0ed      	beq.n	8001884 <HAL_RCC_OscConfig+0x53c>
 80018a8:	e015      	b.n	80018d6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018aa:	f7ff fa4f 	bl	8000d4c <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018b0:	e00a      	b.n	80018c8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80018b2:	f7ff fa4b 	bl	8000d4c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d901      	bls.n	80018c8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80018c4:	2303      	movs	r3, #3
 80018c6:	e14b      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80018c8:	4b7d      	ldr	r3, [pc, #500]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 80018ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80018ce:	f003 0302 	and.w	r3, r3, #2
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d1ed      	bne.n	80018b2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80018d6:	7ffb      	ldrb	r3, [r7, #31]
 80018d8:	2b01      	cmp	r3, #1
 80018da:	d105      	bne.n	80018e8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80018dc:	4b78      	ldr	r3, [pc, #480]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 80018de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018e0:	4a77      	ldr	r2, [pc, #476]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 80018e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018e6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	f003 0320 	and.w	r3, r3, #32
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d03c      	beq.n	800196e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d01c      	beq.n	8001936 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80018fc:	4b70      	ldr	r3, [pc, #448]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 80018fe:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001902:	4a6f      	ldr	r2, [pc, #444]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001904:	f043 0301 	orr.w	r3, r3, #1
 8001908:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800190c:	f7ff fa1e 	bl	8000d4c <HAL_GetTick>
 8001910:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001912:	e008      	b.n	8001926 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001914:	f7ff fa1a 	bl	8000d4c <HAL_GetTick>
 8001918:	4602      	mov	r2, r0
 800191a:	693b      	ldr	r3, [r7, #16]
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	2b02      	cmp	r3, #2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e11c      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001926:	4b66      	ldr	r3, [pc, #408]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001928:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800192c:	f003 0302 	and.w	r3, r3, #2
 8001930:	2b00      	cmp	r3, #0
 8001932:	d0ef      	beq.n	8001914 <HAL_RCC_OscConfig+0x5cc>
 8001934:	e01b      	b.n	800196e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001936:	4b62      	ldr	r3, [pc, #392]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001938:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800193c:	4a60      	ldr	r2, [pc, #384]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 800193e:	f023 0301 	bic.w	r3, r3, #1
 8001942:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001946:	f7ff fa01 	bl	8000d4c <HAL_GetTick>
 800194a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800194c:	e008      	b.n	8001960 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800194e:	f7ff f9fd 	bl	8000d4c <HAL_GetTick>
 8001952:	4602      	mov	r2, r0
 8001954:	693b      	ldr	r3, [r7, #16]
 8001956:	1ad3      	subs	r3, r2, r3
 8001958:	2b02      	cmp	r3, #2
 800195a:	d901      	bls.n	8001960 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800195c:	2303      	movs	r3, #3
 800195e:	e0ff      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001960:	4b57      	ldr	r3, [pc, #348]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001962:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ef      	bne.n	800194e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001972:	2b00      	cmp	r3, #0
 8001974:	f000 80f3 	beq.w	8001b5e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800197c:	2b02      	cmp	r3, #2
 800197e:	f040 80c9 	bne.w	8001b14 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001982:	4b4f      	ldr	r3, [pc, #316]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001984:	68db      	ldr	r3, [r3, #12]
 8001986:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001988:	697b      	ldr	r3, [r7, #20]
 800198a:	f003 0203 	and.w	r2, r3, #3
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001992:	429a      	cmp	r2, r3
 8001994:	d12c      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001996:	697b      	ldr	r3, [r7, #20]
 8001998:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a0:	3b01      	subs	r3, #1
 80019a2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80019a4:	429a      	cmp	r2, r3
 80019a6:	d123      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80019b2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80019b4:	429a      	cmp	r2, r3
 80019b6:	d11b      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80019c2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80019c4:	429a      	cmp	r2, r3
 80019c6:	d113      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80019d2:	085b      	lsrs	r3, r3, #1
 80019d4:	3b01      	subs	r3, #1
 80019d6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80019d8:	429a      	cmp	r2, r3
 80019da:	d109      	bne.n	80019f0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019e6:	085b      	lsrs	r3, r3, #1
 80019e8:	3b01      	subs	r3, #1
 80019ea:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80019ec:	429a      	cmp	r2, r3
 80019ee:	d06b      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d062      	beq.n	8001abc <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80019f6:	4b32      	ldr	r3, [pc, #200]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001a02:	2301      	movs	r3, #1
 8001a04:	e0ac      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001a06:	4b2e      	ldr	r3, [pc, #184]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4a2d      	ldr	r2, [pc, #180]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001a0c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a10:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a12:	f7ff f99b 	bl	8000d4c <HAL_GetTick>
 8001a16:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a18:	e008      	b.n	8001a2c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a1a:	f7ff f997 	bl	8000d4c <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	693b      	ldr	r3, [r7, #16]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	2b02      	cmp	r3, #2
 8001a26:	d901      	bls.n	8001a2c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001a28:	2303      	movs	r3, #3
 8001a2a:	e099      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a2c:	4b24      	ldr	r3, [pc, #144]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1f0      	bne.n	8001a1a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a38:	4b21      	ldr	r3, [pc, #132]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001a3a:	68da      	ldr	r2, [r3, #12]
 8001a3c:	4b21      	ldr	r3, [pc, #132]	; (8001ac4 <HAL_RCC_OscConfig+0x77c>)
 8001a3e:	4013      	ands	r3, r2
 8001a40:	687a      	ldr	r2, [r7, #4]
 8001a42:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001a44:	687a      	ldr	r2, [r7, #4]
 8001a46:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001a48:	3a01      	subs	r2, #1
 8001a4a:	0112      	lsls	r2, r2, #4
 8001a4c:	4311      	orrs	r1, r2
 8001a4e:	687a      	ldr	r2, [r7, #4]
 8001a50:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001a52:	0212      	lsls	r2, r2, #8
 8001a54:	4311      	orrs	r1, r2
 8001a56:	687a      	ldr	r2, [r7, #4]
 8001a58:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001a5a:	0852      	lsrs	r2, r2, #1
 8001a5c:	3a01      	subs	r2, #1
 8001a5e:	0552      	lsls	r2, r2, #21
 8001a60:	4311      	orrs	r1, r2
 8001a62:	687a      	ldr	r2, [r7, #4]
 8001a64:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001a66:	0852      	lsrs	r2, r2, #1
 8001a68:	3a01      	subs	r2, #1
 8001a6a:	0652      	lsls	r2, r2, #25
 8001a6c:	4311      	orrs	r1, r2
 8001a6e:	687a      	ldr	r2, [r7, #4]
 8001a70:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001a72:	06d2      	lsls	r2, r2, #27
 8001a74:	430a      	orrs	r2, r1
 8001a76:	4912      	ldr	r1, [pc, #72]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001a78:	4313      	orrs	r3, r2
 8001a7a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001a7c:	4b10      	ldr	r3, [pc, #64]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4a0f      	ldr	r2, [pc, #60]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001a82:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a86:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a88:	4b0d      	ldr	r3, [pc, #52]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001a8a:	68db      	ldr	r3, [r3, #12]
 8001a8c:	4a0c      	ldr	r2, [pc, #48]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001a8e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a92:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001a94:	f7ff f95a 	bl	8000d4c <HAL_GetTick>
 8001a98:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a9c:	f7ff f956 	bl	8000d4c <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	693b      	ldr	r3, [r7, #16]
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e058      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001aae:	4b04      	ldr	r3, [pc, #16]	; (8001ac0 <HAL_RCC_OscConfig+0x778>)
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d0f0      	beq.n	8001a9c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001aba:	e050      	b.n	8001b5e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e04f      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ac8:	4b27      	ldr	r3, [pc, #156]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d144      	bne.n	8001b5e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001ad4:	4b24      	ldr	r3, [pc, #144]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a23      	ldr	r2, [pc, #140]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001ada:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ade:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001ae0:	4b21      	ldr	r3, [pc, #132]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001ae2:	68db      	ldr	r3, [r3, #12]
 8001ae4:	4a20      	ldr	r2, [pc, #128]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001ae6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001aea:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001aec:	f7ff f92e 	bl	8000d4c <HAL_GetTick>
 8001af0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001af2:	e008      	b.n	8001b06 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001af4:	f7ff f92a 	bl	8000d4c <HAL_GetTick>
 8001af8:	4602      	mov	r2, r0
 8001afa:	693b      	ldr	r3, [r7, #16]
 8001afc:	1ad3      	subs	r3, r2, r3
 8001afe:	2b02      	cmp	r3, #2
 8001b00:	d901      	bls.n	8001b06 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001b02:	2303      	movs	r3, #3
 8001b04:	e02c      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b06:	4b18      	ldr	r3, [pc, #96]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	d0f0      	beq.n	8001af4 <HAL_RCC_OscConfig+0x7ac>
 8001b12:	e024      	b.n	8001b5e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	2b0c      	cmp	r3, #12
 8001b18:	d01f      	beq.n	8001b5a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b1a:	4b13      	ldr	r3, [pc, #76]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a12      	ldr	r2, [pc, #72]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001b20:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b24:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b26:	f7ff f911 	bl	8000d4c <HAL_GetTick>
 8001b2a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b2c:	e008      	b.n	8001b40 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b2e:	f7ff f90d 	bl	8000d4c <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b02      	cmp	r3, #2
 8001b3a:	d901      	bls.n	8001b40 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001b3c:	2303      	movs	r3, #3
 8001b3e:	e00f      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001b40:	4b09      	ldr	r3, [pc, #36]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d1f0      	bne.n	8001b2e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001b4c:	4b06      	ldr	r3, [pc, #24]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001b4e:	68da      	ldr	r2, [r3, #12]
 8001b50:	4905      	ldr	r1, [pc, #20]	; (8001b68 <HAL_RCC_OscConfig+0x820>)
 8001b52:	4b06      	ldr	r3, [pc, #24]	; (8001b6c <HAL_RCC_OscConfig+0x824>)
 8001b54:	4013      	ands	r3, r2
 8001b56:	60cb      	str	r3, [r1, #12]
 8001b58:	e001      	b.n	8001b5e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e000      	b.n	8001b60 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001b5e:	2300      	movs	r3, #0
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	3720      	adds	r7, #32
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd80      	pop	{r7, pc}
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	feeefffc 	.word	0xfeeefffc

08001b70 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b084      	sub	sp, #16
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
 8001b78:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d101      	bne.n	8001b84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001b80:	2301      	movs	r3, #1
 8001b82:	e0e7      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001b84:	4b75      	ldr	r3, [pc, #468]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	f003 0307 	and.w	r3, r3, #7
 8001b8c:	683a      	ldr	r2, [r7, #0]
 8001b8e:	429a      	cmp	r2, r3
 8001b90:	d910      	bls.n	8001bb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001b92:	4b72      	ldr	r3, [pc, #456]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f023 0207 	bic.w	r2, r3, #7
 8001b9a:	4970      	ldr	r1, [pc, #448]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ba2:	4b6e      	ldr	r3, [pc, #440]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f003 0307 	and.w	r3, r3, #7
 8001baa:	683a      	ldr	r2, [r7, #0]
 8001bac:	429a      	cmp	r2, r3
 8001bae:	d001      	beq.n	8001bb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001bb0:	2301      	movs	r3, #1
 8001bb2:	e0cf      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 0302 	and.w	r3, r3, #2
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d010      	beq.n	8001be2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	689a      	ldr	r2, [r3, #8]
 8001bc4:	4b66      	ldr	r3, [pc, #408]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bcc:	429a      	cmp	r2, r3
 8001bce:	d908      	bls.n	8001be2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bd0:	4b63      	ldr	r3, [pc, #396]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	689b      	ldr	r3, [r3, #8]
 8001bdc:	4960      	ldr	r1, [pc, #384]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bde:	4313      	orrs	r3, r2
 8001be0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	f003 0301 	and.w	r3, r3, #1
 8001bea:	2b00      	cmp	r3, #0
 8001bec:	d04c      	beq.n	8001c88 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	2b03      	cmp	r3, #3
 8001bf4:	d107      	bne.n	8001c06 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001bf6:	4b5a      	ldr	r3, [pc, #360]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001bfe:	2b00      	cmp	r3, #0
 8001c00:	d121      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001c02:	2301      	movs	r3, #1
 8001c04:	e0a6      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	685b      	ldr	r3, [r3, #4]
 8001c0a:	2b02      	cmp	r3, #2
 8001c0c:	d107      	bne.n	8001c1e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001c0e:	4b54      	ldr	r3, [pc, #336]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c10:	681b      	ldr	r3, [r3, #0]
 8001c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d115      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e09a      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d107      	bne.n	8001c36 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c26:	4b4e      	ldr	r3, [pc, #312]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0302 	and.w	r3, r3, #2
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d109      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c32:	2301      	movs	r3, #1
 8001c34:	e08e      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001c36:	4b4a      	ldr	r3, [pc, #296]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001c3e:	2b00      	cmp	r3, #0
 8001c40:	d101      	bne.n	8001c46 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001c42:	2301      	movs	r3, #1
 8001c44:	e086      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001c46:	4b46      	ldr	r3, [pc, #280]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f023 0203 	bic.w	r2, r3, #3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	685b      	ldr	r3, [r3, #4]
 8001c52:	4943      	ldr	r1, [pc, #268]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001c58:	f7ff f878 	bl	8000d4c <HAL_GetTick>
 8001c5c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c5e:	e00a      	b.n	8001c76 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001c60:	f7ff f874 	bl	8000d4c <HAL_GetTick>
 8001c64:	4602      	mov	r2, r0
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c6e:	4293      	cmp	r3, r2
 8001c70:	d901      	bls.n	8001c76 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001c72:	2303      	movs	r3, #3
 8001c74:	e06e      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001c76:	4b3a      	ldr	r3, [pc, #232]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	f003 020c 	and.w	r2, r3, #12
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	429a      	cmp	r2, r3
 8001c86:	d1eb      	bne.n	8001c60 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d010      	beq.n	8001cb6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	689a      	ldr	r2, [r3, #8]
 8001c98:	4b31      	ldr	r3, [pc, #196]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001c9a:	689b      	ldr	r3, [r3, #8]
 8001c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d208      	bcs.n	8001cb6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ca4:	4b2e      	ldr	r3, [pc, #184]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001ca6:	689b      	ldr	r3, [r3, #8]
 8001ca8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	492b      	ldr	r1, [pc, #172]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cb2:	4313      	orrs	r3, r2
 8001cb4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001cb6:	4b29      	ldr	r3, [pc, #164]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	f003 0307 	and.w	r3, r3, #7
 8001cbe:	683a      	ldr	r2, [r7, #0]
 8001cc0:	429a      	cmp	r2, r3
 8001cc2:	d210      	bcs.n	8001ce6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	f023 0207 	bic.w	r2, r3, #7
 8001ccc:	4923      	ldr	r1, [pc, #140]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cce:	683b      	ldr	r3, [r7, #0]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cd4:	4b21      	ldr	r3, [pc, #132]	; (8001d5c <HAL_RCC_ClockConfig+0x1ec>)
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d001      	beq.n	8001ce6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e036      	b.n	8001d54 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f003 0304 	and.w	r3, r3, #4
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d008      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001cf2:	4b1b      	ldr	r3, [pc, #108]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001cf4:	689b      	ldr	r3, [r3, #8]
 8001cf6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	68db      	ldr	r3, [r3, #12]
 8001cfe:	4918      	ldr	r1, [pc, #96]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d00:	4313      	orrs	r3, r2
 8001d02:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0308 	and.w	r3, r3, #8
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d009      	beq.n	8001d24 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001d10:	4b13      	ldr	r3, [pc, #76]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	691b      	ldr	r3, [r3, #16]
 8001d1c:	00db      	lsls	r3, r3, #3
 8001d1e:	4910      	ldr	r1, [pc, #64]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	4313      	orrs	r3, r2
 8001d22:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001d24:	f000 f824 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 8001d28:	4602      	mov	r2, r0
 8001d2a:	4b0d      	ldr	r3, [pc, #52]	; (8001d60 <HAL_RCC_ClockConfig+0x1f0>)
 8001d2c:	689b      	ldr	r3, [r3, #8]
 8001d2e:	091b      	lsrs	r3, r3, #4
 8001d30:	f003 030f 	and.w	r3, r3, #15
 8001d34:	490b      	ldr	r1, [pc, #44]	; (8001d64 <HAL_RCC_ClockConfig+0x1f4>)
 8001d36:	5ccb      	ldrb	r3, [r1, r3]
 8001d38:	f003 031f 	and.w	r3, r3, #31
 8001d3c:	fa22 f303 	lsr.w	r3, r2, r3
 8001d40:	4a09      	ldr	r2, [pc, #36]	; (8001d68 <HAL_RCC_ClockConfig+0x1f8>)
 8001d42:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001d44:	4b09      	ldr	r3, [pc, #36]	; (8001d6c <HAL_RCC_ClockConfig+0x1fc>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4618      	mov	r0, r3
 8001d4a:	f7fe fe2d 	bl	80009a8 <HAL_InitTick>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	72fb      	strb	r3, [r7, #11]

  return status;
 8001d52:	7afb      	ldrb	r3, [r7, #11]
}
 8001d54:	4618      	mov	r0, r3
 8001d56:	3710      	adds	r7, #16
 8001d58:	46bd      	mov	sp, r7
 8001d5a:	bd80      	pop	{r7, pc}
 8001d5c:	40022000 	.word	0x40022000
 8001d60:	40021000 	.word	0x40021000
 8001d64:	08007174 	.word	0x08007174
 8001d68:	20000004 	.word	0x20000004
 8001d6c:	20000008 	.word	0x20000008

08001d70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	; 0x24
 8001d74:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001d76:	2300      	movs	r3, #0
 8001d78:	61fb      	str	r3, [r7, #28]
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001d7e:	4b3e      	ldr	r3, [pc, #248]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d80:	689b      	ldr	r3, [r3, #8]
 8001d82:	f003 030c 	and.w	r3, r3, #12
 8001d86:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001d88:	4b3b      	ldr	r3, [pc, #236]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	f003 0303 	and.w	r3, r3, #3
 8001d90:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d005      	beq.n	8001da4 <HAL_RCC_GetSysClockFreq+0x34>
 8001d98:	693b      	ldr	r3, [r7, #16]
 8001d9a:	2b0c      	cmp	r3, #12
 8001d9c:	d121      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	2b01      	cmp	r3, #1
 8001da2:	d11e      	bne.n	8001de2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001da4:	4b34      	ldr	r3, [pc, #208]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	f003 0308 	and.w	r3, r3, #8
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d107      	bne.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001db0:	4b31      	ldr	r3, [pc, #196]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001db2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001db6:	0a1b      	lsrs	r3, r3, #8
 8001db8:	f003 030f 	and.w	r3, r3, #15
 8001dbc:	61fb      	str	r3, [r7, #28]
 8001dbe:	e005      	b.n	8001dcc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001dc0:	4b2d      	ldr	r3, [pc, #180]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	091b      	lsrs	r3, r3, #4
 8001dc6:	f003 030f 	and.w	r3, r3, #15
 8001dca:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001dcc:	4a2b      	ldr	r2, [pc, #172]	; (8001e7c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001dce:	69fb      	ldr	r3, [r7, #28]
 8001dd0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dd4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d10d      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001ddc:	69fb      	ldr	r3, [r7, #28]
 8001dde:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001de0:	e00a      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d102      	bne.n	8001dee <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001de8:	4b25      	ldr	r3, [pc, #148]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001dea:	61bb      	str	r3, [r7, #24]
 8001dec:	e004      	b.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001dee:	693b      	ldr	r3, [r7, #16]
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d101      	bne.n	8001df8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001df4:	4b23      	ldr	r3, [pc, #140]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001df6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001df8:	693b      	ldr	r3, [r7, #16]
 8001dfa:	2b0c      	cmp	r3, #12
 8001dfc:	d134      	bne.n	8001e68 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001dfe:	4b1e      	ldr	r3, [pc, #120]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f003 0303 	and.w	r3, r3, #3
 8001e06:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001e08:	68bb      	ldr	r3, [r7, #8]
 8001e0a:	2b02      	cmp	r3, #2
 8001e0c:	d003      	beq.n	8001e16 <HAL_RCC_GetSysClockFreq+0xa6>
 8001e0e:	68bb      	ldr	r3, [r7, #8]
 8001e10:	2b03      	cmp	r3, #3
 8001e12:	d003      	beq.n	8001e1c <HAL_RCC_GetSysClockFreq+0xac>
 8001e14:	e005      	b.n	8001e22 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001e16:	4b1a      	ldr	r3, [pc, #104]	; (8001e80 <HAL_RCC_GetSysClockFreq+0x110>)
 8001e18:	617b      	str	r3, [r7, #20]
      break;
 8001e1a:	e005      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001e1c:	4b19      	ldr	r3, [pc, #100]	; (8001e84 <HAL_RCC_GetSysClockFreq+0x114>)
 8001e1e:	617b      	str	r3, [r7, #20]
      break;
 8001e20:	e002      	b.n	8001e28 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	617b      	str	r3, [r7, #20]
      break;
 8001e26:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001e28:	4b13      	ldr	r3, [pc, #76]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e2a:	68db      	ldr	r3, [r3, #12]
 8001e2c:	091b      	lsrs	r3, r3, #4
 8001e2e:	f003 0307 	and.w	r3, r3, #7
 8001e32:	3301      	adds	r3, #1
 8001e34:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001e36:	4b10      	ldr	r3, [pc, #64]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e38:	68db      	ldr	r3, [r3, #12]
 8001e3a:	0a1b      	lsrs	r3, r3, #8
 8001e3c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001e40:	697a      	ldr	r2, [r7, #20]
 8001e42:	fb03 f202 	mul.w	r2, r3, r2
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e4c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001e4e:	4b0a      	ldr	r3, [pc, #40]	; (8001e78 <HAL_RCC_GetSysClockFreq+0x108>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	0e5b      	lsrs	r3, r3, #25
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	3301      	adds	r3, #1
 8001e5a:	005b      	lsls	r3, r3, #1
 8001e5c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001e5e:	697a      	ldr	r2, [r7, #20]
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e66:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001e68:	69bb      	ldr	r3, [r7, #24]
}
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	3724      	adds	r7, #36	; 0x24
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	0800718c 	.word	0x0800718c
 8001e80:	00f42400 	.word	0x00f42400
 8001e84:	007a1200 	.word	0x007a1200

08001e88 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001e88:	b480      	push	{r7}
 8001e8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001e8c:	4b03      	ldr	r3, [pc, #12]	; (8001e9c <HAL_RCC_GetHCLKFreq+0x14>)
 8001e8e:	681b      	ldr	r3, [r3, #0]
}
 8001e90:	4618      	mov	r0, r3
 8001e92:	46bd      	mov	sp, r7
 8001e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e98:	4770      	bx	lr
 8001e9a:	bf00      	nop
 8001e9c:	20000004 	.word	0x20000004

08001ea0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ea4:	f7ff fff0 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ea8:	4602      	mov	r2, r0
 8001eaa:	4b06      	ldr	r3, [pc, #24]	; (8001ec4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001eac:	689b      	ldr	r3, [r3, #8]
 8001eae:	0a1b      	lsrs	r3, r3, #8
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	4904      	ldr	r1, [pc, #16]	; (8001ec8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001eb6:	5ccb      	ldrb	r3, [r1, r3]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ec0:	4618      	mov	r0, r3
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	40021000 	.word	0x40021000
 8001ec8:	08007184 	.word	0x08007184

08001ecc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001ed0:	f7ff ffda 	bl	8001e88 <HAL_RCC_GetHCLKFreq>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	4b06      	ldr	r3, [pc, #24]	; (8001ef0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001ed8:	689b      	ldr	r3, [r3, #8]
 8001eda:	0adb      	lsrs	r3, r3, #11
 8001edc:	f003 0307 	and.w	r3, r3, #7
 8001ee0:	4904      	ldr	r1, [pc, #16]	; (8001ef4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001ee2:	5ccb      	ldrb	r3, [r1, r3]
 8001ee4:	f003 031f 	and.w	r3, r3, #31
 8001ee8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001eec:	4618      	mov	r0, r3
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	08007184 	.word	0x08007184

08001ef8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ef8:	b480      	push	{r7}
 8001efa:	b083      	sub	sp, #12
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
 8001f00:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	220f      	movs	r2, #15
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001f08:	4b12      	ldr	r3, [pc, #72]	; (8001f54 <HAL_RCC_GetClockConfig+0x5c>)
 8001f0a:	689b      	ldr	r3, [r3, #8]
 8001f0c:	f003 0203 	and.w	r2, r3, #3
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001f14:	4b0f      	ldr	r3, [pc, #60]	; (8001f54 <HAL_RCC_GetClockConfig+0x5c>)
 8001f16:	689b      	ldr	r3, [r3, #8]
 8001f18:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001f20:	4b0c      	ldr	r3, [pc, #48]	; (8001f54 <HAL_RCC_GetClockConfig+0x5c>)
 8001f22:	689b      	ldr	r3, [r3, #8]
 8001f24:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001f2c:	4b09      	ldr	r3, [pc, #36]	; (8001f54 <HAL_RCC_GetClockConfig+0x5c>)
 8001f2e:	689b      	ldr	r3, [r3, #8]
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001f3a:	4b07      	ldr	r3, [pc, #28]	; (8001f58 <HAL_RCC_GetClockConfig+0x60>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f003 0207 	and.w	r2, r3, #7
 8001f42:	683b      	ldr	r3, [r7, #0]
 8001f44:	601a      	str	r2, [r3, #0]
}
 8001f46:	bf00      	nop
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr
 8001f52:	bf00      	nop
 8001f54:	40021000 	.word	0x40021000
 8001f58:	40022000 	.word	0x40022000

08001f5c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001f5c:	b580      	push	{r7, lr}
 8001f5e:	b086      	sub	sp, #24
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001f64:	2300      	movs	r3, #0
 8001f66:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001f68:	4b2a      	ldr	r3, [pc, #168]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	d003      	beq.n	8001f7c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001f74:	f7ff f984 	bl	8001280 <HAL_PWREx_GetVoltageRange>
 8001f78:	6178      	str	r0, [r7, #20]
 8001f7a:	e014      	b.n	8001fa6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f7e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f80:	4a24      	ldr	r2, [pc, #144]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f86:	6593      	str	r3, [r2, #88]	; 0x58
 8001f88:	4b22      	ldr	r3, [pc, #136]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f8a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f90:	60fb      	str	r3, [r7, #12]
 8001f92:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001f94:	f7ff f974 	bl	8001280 <HAL_PWREx_GetVoltageRange>
 8001f98:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001f9c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f9e:	4a1d      	ldr	r2, [pc, #116]	; (8002014 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001fa0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001fa4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001fa6:	697b      	ldr	r3, [r7, #20]
 8001fa8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001fac:	d10b      	bne.n	8001fc6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	2b80      	cmp	r3, #128	; 0x80
 8001fb2:	d919      	bls.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	2ba0      	cmp	r3, #160	; 0xa0
 8001fb8:	d902      	bls.n	8001fc0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fba:	2302      	movs	r3, #2
 8001fbc:	613b      	str	r3, [r7, #16]
 8001fbe:	e013      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	613b      	str	r3, [r7, #16]
 8001fc4:	e010      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2b80      	cmp	r3, #128	; 0x80
 8001fca:	d902      	bls.n	8001fd2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001fcc:	2303      	movs	r3, #3
 8001fce:	613b      	str	r3, [r7, #16]
 8001fd0:	e00a      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b80      	cmp	r3, #128	; 0x80
 8001fd6:	d102      	bne.n	8001fde <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001fd8:	2302      	movs	r3, #2
 8001fda:	613b      	str	r3, [r7, #16]
 8001fdc:	e004      	b.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	2b70      	cmp	r3, #112	; 0x70
 8001fe2:	d101      	bne.n	8001fe8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001fe4:	2301      	movs	r3, #1
 8001fe6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001fe8:	4b0b      	ldr	r3, [pc, #44]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	f023 0207 	bic.w	r2, r3, #7
 8001ff0:	4909      	ldr	r1, [pc, #36]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ff8:	4b07      	ldr	r3, [pc, #28]	; (8002018 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f003 0307 	and.w	r3, r3, #7
 8002000:	693a      	ldr	r2, [r7, #16]
 8002002:	429a      	cmp	r2, r3
 8002004:	d001      	beq.n	800200a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002006:	2301      	movs	r3, #1
 8002008:	e000      	b.n	800200c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800200a:	2300      	movs	r3, #0
}
 800200c:	4618      	mov	r0, r3
 800200e:	3718      	adds	r7, #24
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40021000 	.word	0x40021000
 8002018:	40022000 	.word	0x40022000

0800201c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002024:	2300      	movs	r3, #0
 8002026:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002028:	2300      	movs	r3, #0
 800202a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002034:	2b00      	cmp	r3, #0
 8002036:	d031      	beq.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002040:	d01a      	beq.n	8002078 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002042:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002046:	d814      	bhi.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002048:	2b00      	cmp	r3, #0
 800204a:	d009      	beq.n	8002060 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800204c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002050:	d10f      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002052:	4b5d      	ldr	r3, [pc, #372]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002054:	68db      	ldr	r3, [r3, #12]
 8002056:	4a5c      	ldr	r2, [pc, #368]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002058:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800205c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800205e:	e00c      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	3304      	adds	r3, #4
 8002064:	2100      	movs	r1, #0
 8002066:	4618      	mov	r0, r3
 8002068:	f000 f9de 	bl	8002428 <RCCEx_PLLSAI1_Config>
 800206c:	4603      	mov	r3, r0
 800206e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002070:	e003      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002072:	2301      	movs	r3, #1
 8002074:	74fb      	strb	r3, [r7, #19]
      break;
 8002076:	e000      	b.n	800207a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002078:	bf00      	nop
    }

    if(ret == HAL_OK)
 800207a:	7cfb      	ldrb	r3, [r7, #19]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d10b      	bne.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002080:	4b51      	ldr	r3, [pc, #324]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800208e:	494e      	ldr	r1, [pc, #312]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002096:	e001      	b.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002098:	7cfb      	ldrb	r3, [r7, #19]
 800209a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	681b      	ldr	r3, [r3, #0]
 80020a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	f000 809e 	beq.w	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80020aa:	2300      	movs	r3, #0
 80020ac:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80020ae:	4b46      	ldr	r3, [pc, #280]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d101      	bne.n	80020be <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e000      	b.n	80020c0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80020be:	2300      	movs	r3, #0
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00d      	beq.n	80020e0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80020c4:	4b40      	ldr	r3, [pc, #256]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c8:	4a3f      	ldr	r2, [pc, #252]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ca:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ce:	6593      	str	r3, [r2, #88]	; 0x58
 80020d0:	4b3d      	ldr	r3, [pc, #244]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020d2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020d8:	60bb      	str	r3, [r7, #8]
 80020da:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80020dc:	2301      	movs	r3, #1
 80020de:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80020e0:	4b3a      	ldr	r3, [pc, #232]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	4a39      	ldr	r2, [pc, #228]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80020e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020ea:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80020ec:	f7fe fe2e 	bl	8000d4c <HAL_GetTick>
 80020f0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80020f2:	e009      	b.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020f4:	f7fe fe2a 	bl	8000d4c <HAL_GetTick>
 80020f8:	4602      	mov	r2, r0
 80020fa:	68fb      	ldr	r3, [r7, #12]
 80020fc:	1ad3      	subs	r3, r2, r3
 80020fe:	2b02      	cmp	r3, #2
 8002100:	d902      	bls.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002102:	2303      	movs	r3, #3
 8002104:	74fb      	strb	r3, [r7, #19]
        break;
 8002106:	e005      	b.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002108:	4b30      	ldr	r3, [pc, #192]	; (80021cc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002110:	2b00      	cmp	r3, #0
 8002112:	d0ef      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	2b00      	cmp	r3, #0
 8002118:	d15a      	bne.n	80021d0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800211a:	4b2b      	ldr	r3, [pc, #172]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800211c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002120:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002124:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	2b00      	cmp	r3, #0
 800212a:	d01e      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	429a      	cmp	r2, r3
 8002134:	d019      	beq.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002136:	4b24      	ldr	r3, [pc, #144]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002138:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800213c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002140:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002142:	4b21      	ldr	r3, [pc, #132]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002144:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002148:	4a1f      	ldr	r2, [pc, #124]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800214a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800214e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002152:	4b1d      	ldr	r3, [pc, #116]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002154:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002158:	4a1b      	ldr	r2, [pc, #108]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800215a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800215e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002162:	4a19      	ldr	r2, [pc, #100]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800216a:	697b      	ldr	r3, [r7, #20]
 800216c:	f003 0301 	and.w	r3, r3, #1
 8002170:	2b00      	cmp	r3, #0
 8002172:	d016      	beq.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002174:	f7fe fdea 	bl	8000d4c <HAL_GetTick>
 8002178:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800217a:	e00b      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800217c:	f7fe fde6 	bl	8000d4c <HAL_GetTick>
 8002180:	4602      	mov	r2, r0
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	1ad3      	subs	r3, r2, r3
 8002186:	f241 3288 	movw	r2, #5000	; 0x1388
 800218a:	4293      	cmp	r3, r2
 800218c:	d902      	bls.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800218e:	2303      	movs	r3, #3
 8002190:	74fb      	strb	r3, [r7, #19]
            break;
 8002192:	e006      	b.n	80021a2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002194:	4b0c      	ldr	r3, [pc, #48]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002196:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800219a:	f003 0302 	and.w	r3, r3, #2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d0ec      	beq.n	800217c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80021a2:	7cfb      	ldrb	r3, [r7, #19]
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d10b      	bne.n	80021c0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021a8:	4b07      	ldr	r3, [pc, #28]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021ae:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021b6:	4904      	ldr	r1, [pc, #16]	; (80021c8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80021b8:	4313      	orrs	r3, r2
 80021ba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80021be:	e009      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80021c0:	7cfb      	ldrb	r3, [r7, #19]
 80021c2:	74bb      	strb	r3, [r7, #18]
 80021c4:	e006      	b.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80021c6:	bf00      	nop
 80021c8:	40021000 	.word	0x40021000
 80021cc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80021d0:	7cfb      	ldrb	r3, [r7, #19]
 80021d2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80021d4:	7c7b      	ldrb	r3, [r7, #17]
 80021d6:	2b01      	cmp	r3, #1
 80021d8:	d105      	bne.n	80021e6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80021da:	4b8a      	ldr	r3, [pc, #552]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021de:	4a89      	ldr	r2, [pc, #548]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021e4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	f003 0301 	and.w	r3, r3, #1
 80021ee:	2b00      	cmp	r3, #0
 80021f0:	d00a      	beq.n	8002208 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80021f2:	4b84      	ldr	r3, [pc, #528]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f8:	f023 0203 	bic.w	r2, r3, #3
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6a1b      	ldr	r3, [r3, #32]
 8002200:	4980      	ldr	r1, [pc, #512]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002202:	4313      	orrs	r3, r2
 8002204:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f003 0302 	and.w	r3, r3, #2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d00a      	beq.n	800222a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002214:	4b7b      	ldr	r3, [pc, #492]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002216:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800221a:	f023 020c 	bic.w	r2, r3, #12
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002222:	4978      	ldr	r1, [pc, #480]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002224:	4313      	orrs	r3, r2
 8002226:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0320 	and.w	r3, r3, #32
 8002232:	2b00      	cmp	r3, #0
 8002234:	d00a      	beq.n	800224c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002236:	4b73      	ldr	r3, [pc, #460]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002238:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002244:	496f      	ldr	r1, [pc, #444]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002246:	4313      	orrs	r3, r2
 8002248:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	681b      	ldr	r3, [r3, #0]
 8002250:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002254:	2b00      	cmp	r3, #0
 8002256:	d00a      	beq.n	800226e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002258:	4b6a      	ldr	r3, [pc, #424]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800225a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800225e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002266:	4967      	ldr	r1, [pc, #412]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002268:	4313      	orrs	r3, r2
 800226a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002276:	2b00      	cmp	r3, #0
 8002278:	d00a      	beq.n	8002290 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800227a:	4b62      	ldr	r3, [pc, #392]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800227c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002280:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002288:	495e      	ldr	r1, [pc, #376]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800228a:	4313      	orrs	r3, r2
 800228c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002298:	2b00      	cmp	r3, #0
 800229a:	d00a      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800229c:	4b59      	ldr	r3, [pc, #356]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800229e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022a2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022aa:	4956      	ldr	r1, [pc, #344]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ac:	4313      	orrs	r3, r2
 80022ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80022be:	4b51      	ldr	r3, [pc, #324]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022cc:	494d      	ldr	r1, [pc, #308]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d028      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80022e0:	4b48      	ldr	r3, [pc, #288]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ee:	4945      	ldr	r1, [pc, #276]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022fe:	d106      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002300:	4b40      	ldr	r3, [pc, #256]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	4a3f      	ldr	r2, [pc, #252]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002306:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800230a:	60d3      	str	r3, [r2, #12]
 800230c:	e011      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002312:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002316:	d10c      	bne.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	2101      	movs	r1, #1
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f882 	bl	8002428 <RCCEx_PLLSAI1_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002328:	7cfb      	ldrb	r3, [r7, #19]
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800232e:	7cfb      	ldrb	r3, [r7, #19]
 8002330:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800233a:	2b00      	cmp	r3, #0
 800233c:	d028      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800233e:	4b31      	ldr	r3, [pc, #196]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002340:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002344:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800234c:	492d      	ldr	r1, [pc, #180]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800234e:	4313      	orrs	r3, r2
 8002350:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002358:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800235c:	d106      	bne.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800235e:	4b29      	ldr	r3, [pc, #164]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002360:	68db      	ldr	r3, [r3, #12]
 8002362:	4a28      	ldr	r2, [pc, #160]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002364:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002368:	60d3      	str	r3, [r2, #12]
 800236a:	e011      	b.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002370:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002374:	d10c      	bne.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	3304      	adds	r3, #4
 800237a:	2101      	movs	r1, #1
 800237c:	4618      	mov	r0, r3
 800237e:	f000 f853 	bl	8002428 <RCCEx_PLLSAI1_Config>
 8002382:	4603      	mov	r3, r0
 8002384:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002386:	7cfb      	ldrb	r3, [r7, #19]
 8002388:	2b00      	cmp	r3, #0
 800238a:	d001      	beq.n	8002390 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800238c:	7cfb      	ldrb	r3, [r7, #19]
 800238e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002398:	2b00      	cmp	r3, #0
 800239a:	d01c      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800239c:	4b19      	ldr	r3, [pc, #100]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800239e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023aa:	4916      	ldr	r1, [pc, #88]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80023b6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80023ba:	d10c      	bne.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	3304      	adds	r3, #4
 80023c0:	2102      	movs	r1, #2
 80023c2:	4618      	mov	r0, r3
 80023c4:	f000 f830 	bl	8002428 <RCCEx_PLLSAI1_Config>
 80023c8:	4603      	mov	r3, r0
 80023ca:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d001      	beq.n	80023d6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80023d2:	7cfb      	ldrb	r3, [r7, #19]
 80023d4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d00a      	beq.n	80023f8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80023e2:	4b08      	ldr	r3, [pc, #32]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023e8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80023f0:	4904      	ldr	r1, [pc, #16]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80023f8:	7cbb      	ldrb	r3, [r7, #18]
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3718      	adds	r7, #24
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	40021000 	.word	0x40021000

08002408 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002408:	b480      	push	{r7}
 800240a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800240c:	4b05      	ldr	r3, [pc, #20]	; (8002424 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a04      	ldr	r2, [pc, #16]	; (8002424 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002412:	f043 0304 	orr.w	r3, r3, #4
 8002416:	6013      	str	r3, [r2, #0]
}
 8002418:	bf00      	nop
 800241a:	46bd      	mov	sp, r7
 800241c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002420:	4770      	bx	lr
 8002422:	bf00      	nop
 8002424:	40021000 	.word	0x40021000

08002428 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002432:	2300      	movs	r3, #0
 8002434:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002436:	4b74      	ldr	r3, [pc, #464]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f003 0303 	and.w	r3, r3, #3
 800243e:	2b00      	cmp	r3, #0
 8002440:	d018      	beq.n	8002474 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002442:	4b71      	ldr	r3, [pc, #452]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002444:	68db      	ldr	r3, [r3, #12]
 8002446:	f003 0203 	and.w	r2, r3, #3
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	429a      	cmp	r2, r3
 8002450:	d10d      	bne.n	800246e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
       ||
 8002456:	2b00      	cmp	r3, #0
 8002458:	d009      	beq.n	800246e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800245a:	4b6b      	ldr	r3, [pc, #428]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800245c:	68db      	ldr	r3, [r3, #12]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f003 0307 	and.w	r3, r3, #7
 8002464:	1c5a      	adds	r2, r3, #1
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	685b      	ldr	r3, [r3, #4]
       ||
 800246a:	429a      	cmp	r2, r3
 800246c:	d047      	beq.n	80024fe <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800246e:	2301      	movs	r3, #1
 8002470:	73fb      	strb	r3, [r7, #15]
 8002472:	e044      	b.n	80024fe <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d018      	beq.n	80024ae <RCCEx_PLLSAI1_Config+0x86>
 800247c:	2b03      	cmp	r3, #3
 800247e:	d825      	bhi.n	80024cc <RCCEx_PLLSAI1_Config+0xa4>
 8002480:	2b01      	cmp	r3, #1
 8002482:	d002      	beq.n	800248a <RCCEx_PLLSAI1_Config+0x62>
 8002484:	2b02      	cmp	r3, #2
 8002486:	d009      	beq.n	800249c <RCCEx_PLLSAI1_Config+0x74>
 8002488:	e020      	b.n	80024cc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800248a:	4b5f      	ldr	r3, [pc, #380]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	f003 0302 	and.w	r3, r3, #2
 8002492:	2b00      	cmp	r3, #0
 8002494:	d11d      	bne.n	80024d2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002496:	2301      	movs	r3, #1
 8002498:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800249a:	e01a      	b.n	80024d2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800249c:	4b5a      	ldr	r3, [pc, #360]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d116      	bne.n	80024d6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80024a8:	2301      	movs	r3, #1
 80024aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024ac:	e013      	b.n	80024d6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80024ae:	4b56      	ldr	r3, [pc, #344]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d10f      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80024ba:	4b53      	ldr	r3, [pc, #332]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d109      	bne.n	80024da <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80024c6:	2301      	movs	r3, #1
 80024c8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80024ca:	e006      	b.n	80024da <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
 80024ce:	73fb      	strb	r3, [r7, #15]
      break;
 80024d0:	e004      	b.n	80024dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d2:	bf00      	nop
 80024d4:	e002      	b.n	80024dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024d6:	bf00      	nop
 80024d8:	e000      	b.n	80024dc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80024da:	bf00      	nop
    }

    if(status == HAL_OK)
 80024dc:	7bfb      	ldrb	r3, [r7, #15]
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d10d      	bne.n	80024fe <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80024e2:	4b49      	ldr	r3, [pc, #292]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e4:	68db      	ldr	r3, [r3, #12]
 80024e6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6819      	ldr	r1, [r3, #0]
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	3b01      	subs	r3, #1
 80024f4:	011b      	lsls	r3, r3, #4
 80024f6:	430b      	orrs	r3, r1
 80024f8:	4943      	ldr	r1, [pc, #268]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80024fe:	7bfb      	ldrb	r3, [r7, #15]
 8002500:	2b00      	cmp	r3, #0
 8002502:	d17c      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002504:	4b40      	ldr	r3, [pc, #256]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	4a3f      	ldr	r2, [pc, #252]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800250a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800250e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002510:	f7fe fc1c 	bl	8000d4c <HAL_GetTick>
 8002514:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002516:	e009      	b.n	800252c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002518:	f7fe fc18 	bl	8000d4c <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	68bb      	ldr	r3, [r7, #8]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	2b02      	cmp	r3, #2
 8002524:	d902      	bls.n	800252c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002526:	2303      	movs	r3, #3
 8002528:	73fb      	strb	r3, [r7, #15]
        break;
 800252a:	e005      	b.n	8002538 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800252c:	4b36      	ldr	r3, [pc, #216]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002534:	2b00      	cmp	r3, #0
 8002536:	d1ef      	bne.n	8002518 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002538:	7bfb      	ldrb	r3, [r7, #15]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d15f      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d110      	bne.n	8002566 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002544:	4b30      	ldr	r3, [pc, #192]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002546:	691b      	ldr	r3, [r3, #16]
 8002548:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800254c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002550:	687a      	ldr	r2, [r7, #4]
 8002552:	6892      	ldr	r2, [r2, #8]
 8002554:	0211      	lsls	r1, r2, #8
 8002556:	687a      	ldr	r2, [r7, #4]
 8002558:	68d2      	ldr	r2, [r2, #12]
 800255a:	06d2      	lsls	r2, r2, #27
 800255c:	430a      	orrs	r2, r1
 800255e:	492a      	ldr	r1, [pc, #168]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002560:	4313      	orrs	r3, r2
 8002562:	610b      	str	r3, [r1, #16]
 8002564:	e027      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	2b01      	cmp	r3, #1
 800256a:	d112      	bne.n	8002592 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800256c:	4b26      	ldr	r3, [pc, #152]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800256e:	691b      	ldr	r3, [r3, #16]
 8002570:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002574:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002578:	687a      	ldr	r2, [r7, #4]
 800257a:	6892      	ldr	r2, [r2, #8]
 800257c:	0211      	lsls	r1, r2, #8
 800257e:	687a      	ldr	r2, [r7, #4]
 8002580:	6912      	ldr	r2, [r2, #16]
 8002582:	0852      	lsrs	r2, r2, #1
 8002584:	3a01      	subs	r2, #1
 8002586:	0552      	lsls	r2, r2, #21
 8002588:	430a      	orrs	r2, r1
 800258a:	491f      	ldr	r1, [pc, #124]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 800258c:	4313      	orrs	r3, r2
 800258e:	610b      	str	r3, [r1, #16]
 8002590:	e011      	b.n	80025b6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002592:	4b1d      	ldr	r3, [pc, #116]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002594:	691b      	ldr	r3, [r3, #16]
 8002596:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800259a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800259e:	687a      	ldr	r2, [r7, #4]
 80025a0:	6892      	ldr	r2, [r2, #8]
 80025a2:	0211      	lsls	r1, r2, #8
 80025a4:	687a      	ldr	r2, [r7, #4]
 80025a6:	6952      	ldr	r2, [r2, #20]
 80025a8:	0852      	lsrs	r2, r2, #1
 80025aa:	3a01      	subs	r2, #1
 80025ac:	0652      	lsls	r2, r2, #25
 80025ae:	430a      	orrs	r2, r1
 80025b0:	4915      	ldr	r1, [pc, #84]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b2:	4313      	orrs	r3, r2
 80025b4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80025b6:	4b14      	ldr	r3, [pc, #80]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	4a13      	ldr	r2, [pc, #76]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025bc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025c0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025c2:	f7fe fbc3 	bl	8000d4c <HAL_GetTick>
 80025c6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025c8:	e009      	b.n	80025de <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80025ca:	f7fe fbbf 	bl	8000d4c <HAL_GetTick>
 80025ce:	4602      	mov	r2, r0
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	1ad3      	subs	r3, r2, r3
 80025d4:	2b02      	cmp	r3, #2
 80025d6:	d902      	bls.n	80025de <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80025d8:	2303      	movs	r3, #3
 80025da:	73fb      	strb	r3, [r7, #15]
          break;
 80025dc:	e005      	b.n	80025ea <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80025de:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d0ef      	beq.n	80025ca <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80025ea:	7bfb      	ldrb	r3, [r7, #15]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d106      	bne.n	80025fe <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80025f0:	4b05      	ldr	r3, [pc, #20]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025f2:	691a      	ldr	r2, [r3, #16]
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	699b      	ldr	r3, [r3, #24]
 80025f8:	4903      	ldr	r1, [pc, #12]	; (8002608 <RCCEx_PLLSAI1_Config+0x1e0>)
 80025fa:	4313      	orrs	r3, r2
 80025fc:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80025fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8002600:	4618      	mov	r0, r3
 8002602:	3710      	adds	r7, #16
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40021000 	.word	0x40021000

0800260c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800260c:	b580      	push	{r7, lr}
 800260e:	b082      	sub	sp, #8
 8002610:	af00      	add	r7, sp, #0
 8002612:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	2b00      	cmp	r3, #0
 8002618:	d101      	bne.n	800261e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800261a:	2301      	movs	r3, #1
 800261c:	e049      	b.n	80026b2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002624:	b2db      	uxtb	r3, r3
 8002626:	2b00      	cmp	r3, #0
 8002628:	d106      	bne.n	8002638 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002632:	6878      	ldr	r0, [r7, #4]
 8002634:	f000 f841 	bl	80026ba <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	2202      	movs	r2, #2
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681a      	ldr	r2, [r3, #0]
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	3304      	adds	r3, #4
 8002648:	4619      	mov	r1, r3
 800264a:	4610      	mov	r0, r2
 800264c:	f000 f9dc 	bl	8002a08 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2201      	movs	r2, #1
 800265c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2201      	movs	r2, #1
 8002664:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	2201      	movs	r2, #1
 800266c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	2201      	movs	r2, #1
 8002674:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2201      	movs	r2, #1
 800267c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	2201      	movs	r2, #1
 8002684:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	2201      	movs	r2, #1
 800268c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2201      	movs	r2, #1
 8002694:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2201      	movs	r2, #1
 800269c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2201      	movs	r2, #1
 80026a4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2201      	movs	r2, #1
 80026ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026b0:	2300      	movs	r3, #0
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3708      	adds	r7, #8
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}

080026ba <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80026c2:	bf00      	nop
 80026c4:	370c      	adds	r7, #12
 80026c6:	46bd      	mov	sp, r7
 80026c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026cc:	4770      	bx	lr
	...

080026d0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80026d0:	b480      	push	{r7}
 80026d2:	b085      	sub	sp, #20
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	d001      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80026e4:	2301      	movs	r3, #1
 80026e6:	e03b      	b.n	8002760 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2202      	movs	r2, #2
 80026ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68da      	ldr	r2, [r3, #12]
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f042 0201 	orr.w	r2, r2, #1
 80026fe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a19      	ldr	r2, [pc, #100]	; (800276c <HAL_TIM_Base_Start_IT+0x9c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d009      	beq.n	800271e <HAL_TIM_Base_Start_IT+0x4e>
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002712:	d004      	beq.n	800271e <HAL_TIM_Base_Start_IT+0x4e>
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	4a15      	ldr	r2, [pc, #84]	; (8002770 <HAL_TIM_Base_Start_IT+0xa0>)
 800271a:	4293      	cmp	r3, r2
 800271c:	d115      	bne.n	800274a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	689a      	ldr	r2, [r3, #8]
 8002724:	4b13      	ldr	r3, [pc, #76]	; (8002774 <HAL_TIM_Base_Start_IT+0xa4>)
 8002726:	4013      	ands	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	2b06      	cmp	r3, #6
 800272e:	d015      	beq.n	800275c <HAL_TIM_Base_Start_IT+0x8c>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002736:	d011      	beq.n	800275c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681a      	ldr	r2, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	f042 0201 	orr.w	r2, r2, #1
 8002746:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002748:	e008      	b.n	800275c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	681a      	ldr	r2, [r3, #0]
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	f042 0201 	orr.w	r2, r2, #1
 8002758:	601a      	str	r2, [r3, #0]
 800275a:	e000      	b.n	800275e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800275c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	3714      	adds	r7, #20
 8002764:	46bd      	mov	sp, r7
 8002766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800276a:	4770      	bx	lr
 800276c:	40012c00 	.word	0x40012c00
 8002770:	40014000 	.word	0x40014000
 8002774:	00010007 	.word	0x00010007

08002778 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b082      	sub	sp, #8
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	691b      	ldr	r3, [r3, #16]
 8002786:	f003 0302 	and.w	r3, r3, #2
 800278a:	2b02      	cmp	r3, #2
 800278c:	d122      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	68db      	ldr	r3, [r3, #12]
 8002794:	f003 0302 	and.w	r3, r3, #2
 8002798:	2b02      	cmp	r3, #2
 800279a:	d11b      	bne.n	80027d4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f06f 0202 	mvn.w	r2, #2
 80027a4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	699b      	ldr	r3, [r3, #24]
 80027b2:	f003 0303 	and.w	r3, r3, #3
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d003      	beq.n	80027c2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f000 f905 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 80027c0:	e005      	b.n	80027ce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80027c2:	6878      	ldr	r0, [r7, #4]
 80027c4:	f000 f8f7 	bl	80029b6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c8:	6878      	ldr	r0, [r7, #4]
 80027ca:	f000 f908 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2200      	movs	r2, #0
 80027d2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	691b      	ldr	r3, [r3, #16]
 80027da:	f003 0304 	and.w	r3, r3, #4
 80027de:	2b04      	cmp	r3, #4
 80027e0:	d122      	bne.n	8002828 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68db      	ldr	r3, [r3, #12]
 80027e8:	f003 0304 	and.w	r3, r3, #4
 80027ec:	2b04      	cmp	r3, #4
 80027ee:	d11b      	bne.n	8002828 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f06f 0204 	mvn.w	r2, #4
 80027f8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	2202      	movs	r2, #2
 80027fe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	699b      	ldr	r3, [r3, #24]
 8002806:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800280a:	2b00      	cmp	r3, #0
 800280c:	d003      	beq.n	8002816 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280e:	6878      	ldr	r0, [r7, #4]
 8002810:	f000 f8db 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 8002814:	e005      	b.n	8002822 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f8cd 	bl	80029b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800281c:	6878      	ldr	r0, [r7, #4]
 800281e:	f000 f8de 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f003 0308 	and.w	r3, r3, #8
 8002832:	2b08      	cmp	r3, #8
 8002834:	d122      	bne.n	800287c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	68db      	ldr	r3, [r3, #12]
 800283c:	f003 0308 	and.w	r3, r3, #8
 8002840:	2b08      	cmp	r3, #8
 8002842:	d11b      	bne.n	800287c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	f06f 0208 	mvn.w	r2, #8
 800284c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2204      	movs	r2, #4
 8002852:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	69db      	ldr	r3, [r3, #28]
 800285a:	f003 0303 	and.w	r3, r3, #3
 800285e:	2b00      	cmp	r3, #0
 8002860:	d003      	beq.n	800286a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 f8b1 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 8002868:	e005      	b.n	8002876 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800286a:	6878      	ldr	r0, [r7, #4]
 800286c:	f000 f8a3 	bl	80029b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002870:	6878      	ldr	r0, [r7, #4]
 8002872:	f000 f8b4 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	2200      	movs	r2, #0
 800287a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f003 0310 	and.w	r3, r3, #16
 8002886:	2b10      	cmp	r3, #16
 8002888:	d122      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	68db      	ldr	r3, [r3, #12]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	2b10      	cmp	r3, #16
 8002896:	d11b      	bne.n	80028d0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f06f 0210 	mvn.w	r2, #16
 80028a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	2208      	movs	r2, #8
 80028a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	69db      	ldr	r3, [r3, #28]
 80028ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d003      	beq.n	80028be <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80028b6:	6878      	ldr	r0, [r7, #4]
 80028b8:	f000 f887 	bl	80029ca <HAL_TIM_IC_CaptureCallback>
 80028bc:	e005      	b.n	80028ca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 f879 	bl	80029b6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80028c4:	6878      	ldr	r0, [r7, #4]
 80028c6:	f000 f88a 	bl	80029de <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	2200      	movs	r2, #0
 80028ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	691b      	ldr	r3, [r3, #16]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d10e      	bne.n	80028fc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	68db      	ldr	r3, [r3, #12]
 80028e4:	f003 0301 	and.w	r3, r3, #1
 80028e8:	2b01      	cmp	r3, #1
 80028ea:	d107      	bne.n	80028fc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f06f 0201 	mvn.w	r2, #1
 80028f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7fe f816 	bl	8000928 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	691b      	ldr	r3, [r3, #16]
 8002902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002906:	2b80      	cmp	r3, #128	; 0x80
 8002908:	d10e      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	68db      	ldr	r3, [r3, #12]
 8002910:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002914:	2b80      	cmp	r3, #128	; 0x80
 8002916:	d107      	bne.n	8002928 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002920:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 f8de 	bl	8002ae4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	691b      	ldr	r3, [r3, #16]
 800292e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002932:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002936:	d10e      	bne.n	8002956 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	68db      	ldr	r3, [r3, #12]
 800293e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002942:	2b80      	cmp	r3, #128	; 0x80
 8002944:	d107      	bne.n	8002956 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800294e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002950:	6878      	ldr	r0, [r7, #4]
 8002952:	f000 f8d1 	bl	8002af8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002960:	2b40      	cmp	r3, #64	; 0x40
 8002962:	d10e      	bne.n	8002982 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	68db      	ldr	r3, [r3, #12]
 800296a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800296e:	2b40      	cmp	r3, #64	; 0x40
 8002970:	d107      	bne.n	8002982 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800297a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800297c:	6878      	ldr	r0, [r7, #4]
 800297e:	f000 f838 	bl	80029f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	691b      	ldr	r3, [r3, #16]
 8002988:	f003 0320 	and.w	r3, r3, #32
 800298c:	2b20      	cmp	r3, #32
 800298e:	d10e      	bne.n	80029ae <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	f003 0320 	and.w	r3, r3, #32
 800299a:	2b20      	cmp	r3, #32
 800299c:	d107      	bne.n	80029ae <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f06f 0220 	mvn.w	r2, #32
 80029a6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80029a8:	6878      	ldr	r0, [r7, #4]
 80029aa:	f000 f891 	bl	8002ad0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80029ae:	bf00      	nop
 80029b0:	3708      	adds	r7, #8
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bd80      	pop	{r7, pc}

080029b6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029b6:	b480      	push	{r7}
 80029b8:	b083      	sub	sp, #12
 80029ba:	af00      	add	r7, sp, #0
 80029bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80029ca:	b480      	push	{r7}
 80029cc:	b083      	sub	sp, #12
 80029ce:	af00      	add	r7, sp, #0
 80029d0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80029d2:	bf00      	nop
 80029d4:	370c      	adds	r7, #12
 80029d6:	46bd      	mov	sp, r7
 80029d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029dc:	4770      	bx	lr

080029de <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80029de:	b480      	push	{r7}
 80029e0:	b083      	sub	sp, #12
 80029e2:	af00      	add	r7, sp, #0
 80029e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80029e6:	bf00      	nop
 80029e8:	370c      	adds	r7, #12
 80029ea:	46bd      	mov	sp, r7
 80029ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f0:	4770      	bx	lr

080029f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80029f2:	b480      	push	{r7}
 80029f4:	b083      	sub	sp, #12
 80029f6:	af00      	add	r7, sp, #0
 80029f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80029fa:	bf00      	nop
 80029fc:	370c      	adds	r7, #12
 80029fe:	46bd      	mov	sp, r7
 8002a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a04:	4770      	bx	lr
	...

08002a08 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	b085      	sub	sp, #20
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
 8002a10:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	4a2a      	ldr	r2, [pc, #168]	; (8002ac4 <TIM_Base_SetConfig+0xbc>)
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d003      	beq.n	8002a28 <TIM_Base_SetConfig+0x20>
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a26:	d108      	bne.n	8002a3a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002a2e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	685b      	ldr	r3, [r3, #4]
 8002a34:	68fa      	ldr	r2, [r7, #12]
 8002a36:	4313      	orrs	r3, r2
 8002a38:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	4a21      	ldr	r2, [pc, #132]	; (8002ac4 <TIM_Base_SetConfig+0xbc>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d00b      	beq.n	8002a5a <TIM_Base_SetConfig+0x52>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a48:	d007      	beq.n	8002a5a <TIM_Base_SetConfig+0x52>
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	4a1e      	ldr	r2, [pc, #120]	; (8002ac8 <TIM_Base_SetConfig+0xc0>)
 8002a4e:	4293      	cmp	r3, r2
 8002a50:	d003      	beq.n	8002a5a <TIM_Base_SetConfig+0x52>
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	4a1d      	ldr	r2, [pc, #116]	; (8002acc <TIM_Base_SetConfig+0xc4>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d108      	bne.n	8002a6c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	68db      	ldr	r3, [r3, #12]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	4313      	orrs	r3, r2
 8002a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	695b      	ldr	r3, [r3, #20]
 8002a76:	4313      	orrs	r3, r2
 8002a78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68fa      	ldr	r2, [r7, #12]
 8002a7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002a80:	683b      	ldr	r3, [r7, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002a88:	683b      	ldr	r3, [r7, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	4a0c      	ldr	r2, [pc, #48]	; (8002ac4 <TIM_Base_SetConfig+0xbc>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d007      	beq.n	8002aa8 <TIM_Base_SetConfig+0xa0>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	4a0b      	ldr	r2, [pc, #44]	; (8002ac8 <TIM_Base_SetConfig+0xc0>)
 8002a9c:	4293      	cmp	r3, r2
 8002a9e:	d003      	beq.n	8002aa8 <TIM_Base_SetConfig+0xa0>
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	4a0a      	ldr	r2, [pc, #40]	; (8002acc <TIM_Base_SetConfig+0xc4>)
 8002aa4:	4293      	cmp	r3, r2
 8002aa6:	d103      	bne.n	8002ab0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002aa8:	683b      	ldr	r3, [r7, #0]
 8002aaa:	691a      	ldr	r2, [r3, #16]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	615a      	str	r2, [r3, #20]
}
 8002ab6:	bf00      	nop
 8002ab8:	3714      	adds	r7, #20
 8002aba:	46bd      	mov	sp, r7
 8002abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac0:	4770      	bx	lr
 8002ac2:	bf00      	nop
 8002ac4:	40012c00 	.word	0x40012c00
 8002ac8:	40014000 	.word	0x40014000
 8002acc:	40014400 	.word	0x40014400

08002ad0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ad8:	bf00      	nop
 8002ada:	370c      	adds	r7, #12
 8002adc:	46bd      	mov	sp, r7
 8002ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae2:	4770      	bx	lr

08002ae4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b082      	sub	sp, #8
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d101      	bne.n	8002b1e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002b1a:	2301      	movs	r3, #1
 8002b1c:	e040      	b.n	8002ba0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d106      	bne.n	8002b34 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002b2e:	6878      	ldr	r0, [r7, #4]
 8002b30:	f7fe f84c 	bl	8000bcc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2224      	movs	r2, #36	; 0x24
 8002b38:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	681a      	ldr	r2, [r3, #0]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f022 0201 	bic.w	r2, r2, #1
 8002b48:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 f992 	bl	8002e74 <UART_SetConfig>
 8002b50:	4603      	mov	r3, r0
 8002b52:	2b01      	cmp	r3, #1
 8002b54:	d101      	bne.n	8002b5a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002b56:	2301      	movs	r3, #1
 8002b58:	e022      	b.n	8002ba0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d002      	beq.n	8002b68 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002b62:	6878      	ldr	r0, [r7, #4]
 8002b64:	f000 fbb2 	bl	80032cc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	685a      	ldr	r2, [r3, #4]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002b76:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689a      	ldr	r2, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002b86:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f042 0201 	orr.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002b98:	6878      	ldr	r0, [r7, #4]
 8002b9a:	f000 fc39 	bl	8003410 <UART_CheckIdleState>
 8002b9e:	4603      	mov	r3, r0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3708      	adds	r7, #8
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	b08a      	sub	sp, #40	; 0x28
 8002bac:	af02      	add	r7, sp, #8
 8002bae:	60f8      	str	r0, [r7, #12]
 8002bb0:	60b9      	str	r1, [r7, #8]
 8002bb2:	603b      	str	r3, [r7, #0]
 8002bb4:	4613      	mov	r3, r2
 8002bb6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002bbc:	2b20      	cmp	r3, #32
 8002bbe:	f040 8082 	bne.w	8002cc6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d002      	beq.n	8002bce <HAL_UART_Transmit+0x26>
 8002bc8:	88fb      	ldrh	r3, [r7, #6]
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d101      	bne.n	8002bd2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002bce:	2301      	movs	r3, #1
 8002bd0:	e07a      	b.n	8002cc8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002bd8:	2b01      	cmp	r3, #1
 8002bda:	d101      	bne.n	8002be0 <HAL_UART_Transmit+0x38>
 8002bdc:	2302      	movs	r3, #2
 8002bde:	e073      	b.n	8002cc8 <HAL_UART_Transmit+0x120>
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	2221      	movs	r2, #33	; 0x21
 8002bf4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002bf6:	f7fe f8a9 	bl	8000d4c <HAL_GetTick>
 8002bfa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	88fa      	ldrh	r2, [r7, #6]
 8002c00:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	88fa      	ldrh	r2, [r7, #6]
 8002c08:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	689b      	ldr	r3, [r3, #8]
 8002c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c14:	d108      	bne.n	8002c28 <HAL_UART_Transmit+0x80>
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	691b      	ldr	r3, [r3, #16]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d104      	bne.n	8002c28 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002c1e:	2300      	movs	r3, #0
 8002c20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002c22:	68bb      	ldr	r3, [r7, #8]
 8002c24:	61bb      	str	r3, [r7, #24]
 8002c26:	e003      	b.n	8002c30 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002c28:	68bb      	ldr	r3, [r7, #8]
 8002c2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	2200      	movs	r2, #0
 8002c34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002c38:	e02d      	b.n	8002c96 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	9300      	str	r3, [sp, #0]
 8002c3e:	697b      	ldr	r3, [r7, #20]
 8002c40:	2200      	movs	r2, #0
 8002c42:	2180      	movs	r1, #128	; 0x80
 8002c44:	68f8      	ldr	r0, [r7, #12]
 8002c46:	f000 fc2c 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8002c4a:	4603      	mov	r3, r0
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d001      	beq.n	8002c54 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002c50:	2303      	movs	r3, #3
 8002c52:	e039      	b.n	8002cc8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d10b      	bne.n	8002c72 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002c5a:	69bb      	ldr	r3, [r7, #24]
 8002c5c:	881a      	ldrh	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002c66:	b292      	uxth	r2, r2
 8002c68:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002c6a:	69bb      	ldr	r3, [r7, #24]
 8002c6c:	3302      	adds	r3, #2
 8002c6e:	61bb      	str	r3, [r7, #24]
 8002c70:	e008      	b.n	8002c84 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	781a      	ldrb	r2, [r3, #0]
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b292      	uxth	r2, r2
 8002c7c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002c7e:	69fb      	ldr	r3, [r7, #28]
 8002c80:	3301      	adds	r3, #1
 8002c82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c8a:	b29b      	uxth	r3, r3
 8002c8c:	3b01      	subs	r3, #1
 8002c8e:	b29a      	uxth	r2, r3
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002c9c:	b29b      	uxth	r3, r3
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d1cb      	bne.n	8002c3a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ca2:	683b      	ldr	r3, [r7, #0]
 8002ca4:	9300      	str	r3, [sp, #0]
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	2140      	movs	r1, #64	; 0x40
 8002cac:	68f8      	ldr	r0, [r7, #12]
 8002cae:	f000 fbf8 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8002cb2:	4603      	mov	r3, r0
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d001      	beq.n	8002cbc <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e005      	b.n	8002cc8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2220      	movs	r2, #32
 8002cc0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	e000      	b.n	8002cc8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002cc6:	2302      	movs	r3, #2
  }
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3720      	adds	r7, #32
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}

08002cd0 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b08a      	sub	sp, #40	; 0x28
 8002cd4:	af02      	add	r7, sp, #8
 8002cd6:	60f8      	str	r0, [r7, #12]
 8002cd8:	60b9      	str	r1, [r7, #8]
 8002cda:	603b      	str	r3, [r7, #0]
 8002cdc:	4613      	mov	r3, r2
 8002cde:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002ce4:	2b20      	cmp	r3, #32
 8002ce6:	f040 80bf 	bne.w	8002e68 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cea:	68bb      	ldr	r3, [r7, #8]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d002      	beq.n	8002cf6 <HAL_UART_Receive+0x26>
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d101      	bne.n	8002cfa <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002cf6:	2301      	movs	r3, #1
 8002cf8:	e0b7      	b.n	8002e6a <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002d00:	2b01      	cmp	r3, #1
 8002d02:	d101      	bne.n	8002d08 <HAL_UART_Receive+0x38>
 8002d04:	2302      	movs	r3, #2
 8002d06:	e0b0      	b.n	8002e6a <HAL_UART_Receive+0x19a>
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	2201      	movs	r2, #1
 8002d0c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	2222      	movs	r2, #34	; 0x22
 8002d1c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2200      	movs	r2, #0
 8002d22:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d24:	f7fe f812 	bl	8000d4c <HAL_GetTick>
 8002d28:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
 8002d2c:	88fa      	ldrh	r2, [r7, #6]
 8002d2e:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	88fa      	ldrh	r2, [r7, #6]
 8002d36:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	689b      	ldr	r3, [r3, #8]
 8002d3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002d42:	d10e      	bne.n	8002d62 <HAL_UART_Receive+0x92>
 8002d44:	68fb      	ldr	r3, [r7, #12]
 8002d46:	691b      	ldr	r3, [r3, #16]
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d105      	bne.n	8002d58 <HAL_UART_Receive+0x88>
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002d52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d56:	e02d      	b.n	8002db4 <HAL_UART_Receive+0xe4>
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	22ff      	movs	r2, #255	; 0xff
 8002d5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d60:	e028      	b.n	8002db4 <HAL_UART_Receive+0xe4>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	689b      	ldr	r3, [r3, #8]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d10d      	bne.n	8002d86 <HAL_UART_Receive+0xb6>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	691b      	ldr	r3, [r3, #16]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d104      	bne.n	8002d7c <HAL_UART_Receive+0xac>
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	22ff      	movs	r2, #255	; 0xff
 8002d76:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d7a:	e01b      	b.n	8002db4 <HAL_UART_Receive+0xe4>
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	227f      	movs	r2, #127	; 0x7f
 8002d80:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002d84:	e016      	b.n	8002db4 <HAL_UART_Receive+0xe4>
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002d8e:	d10d      	bne.n	8002dac <HAL_UART_Receive+0xdc>
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	691b      	ldr	r3, [r3, #16]
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d104      	bne.n	8002da2 <HAL_UART_Receive+0xd2>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	227f      	movs	r2, #127	; 0x7f
 8002d9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002da0:	e008      	b.n	8002db4 <HAL_UART_Receive+0xe4>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	223f      	movs	r2, #63	; 0x3f
 8002da6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002daa:	e003      	b.n	8002db4 <HAL_UART_Receive+0xe4>
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	2200      	movs	r2, #0
 8002db0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002dba:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dc4:	d108      	bne.n	8002dd8 <HAL_UART_Receive+0x108>
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	691b      	ldr	r3, [r3, #16]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002dce:	2300      	movs	r3, #0
 8002dd0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002dd2:	68bb      	ldr	r3, [r7, #8]
 8002dd4:	61bb      	str	r3, [r7, #24]
 8002dd6:	e003      	b.n	8002de0 <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ddc:	2300      	movs	r3, #0
 8002dde:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002de8:	e033      	b.n	8002e52 <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	9300      	str	r3, [sp, #0]
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	2200      	movs	r2, #0
 8002df2:	2120      	movs	r1, #32
 8002df4:	68f8      	ldr	r0, [r7, #12]
 8002df6:	f000 fb54 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	e032      	b.n	8002e6a <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d10c      	bne.n	8002e24 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e10:	b29a      	uxth	r2, r3
 8002e12:	8a7b      	ldrh	r3, [r7, #18]
 8002e14:	4013      	ands	r3, r2
 8002e16:	b29a      	uxth	r2, r3
 8002e18:	69bb      	ldr	r3, [r7, #24]
 8002e1a:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e1c:	69bb      	ldr	r3, [r7, #24]
 8002e1e:	3302      	adds	r3, #2
 8002e20:	61bb      	str	r3, [r7, #24]
 8002e22:	e00d      	b.n	8002e40 <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002e2a:	b29b      	uxth	r3, r3
 8002e2c:	b2da      	uxtb	r2, r3
 8002e2e:	8a7b      	ldrh	r3, [r7, #18]
 8002e30:	b2db      	uxtb	r3, r3
 8002e32:	4013      	ands	r3, r2
 8002e34:	b2da      	uxtb	r2, r3
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	3301      	adds	r3, #1
 8002e3e:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e46:	b29b      	uxth	r3, r3
 8002e48:	3b01      	subs	r3, #1
 8002e4a:	b29a      	uxth	r2, r3
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d1c5      	bne.n	8002dea <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	2220      	movs	r2, #32
 8002e62:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002e64:	2300      	movs	r3, #0
 8002e66:	e000      	b.n	8002e6a <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002e68:	2302      	movs	r3, #2
  }
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3720      	adds	r7, #32
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bd80      	pop	{r7, pc}
	...

08002e74 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002e74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e78:	b08a      	sub	sp, #40	; 0x28
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002e7e:	2300      	movs	r3, #0
 8002e80:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	689a      	ldr	r2, [r3, #8]
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	431a      	orrs	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	695b      	ldr	r3, [r3, #20]
 8002e92:	431a      	orrs	r2, r3
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	69db      	ldr	r3, [r3, #28]
 8002e98:	4313      	orrs	r3, r2
 8002e9a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	681a      	ldr	r2, [r3, #0]
 8002ea2:	4bb4      	ldr	r3, [pc, #720]	; (8003174 <UART_SetConfig+0x300>)
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	68fa      	ldr	r2, [r7, #12]
 8002ea8:	6812      	ldr	r2, [r2, #0]
 8002eaa:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002eac:	430b      	orrs	r3, r1
 8002eae:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	68da      	ldr	r2, [r3, #12]
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	430a      	orrs	r2, r1
 8002ec4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	699b      	ldr	r3, [r3, #24]
 8002eca:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4aa9      	ldr	r2, [pc, #676]	; (8003178 <UART_SetConfig+0x304>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d004      	beq.n	8002ee0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	6a1b      	ldr	r3, [r3, #32]
 8002eda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002edc:	4313      	orrs	r3, r2
 8002ede:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	689b      	ldr	r3, [r3, #8]
 8002ee6:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef0:	430a      	orrs	r2, r1
 8002ef2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4aa0      	ldr	r2, [pc, #640]	; (800317c <UART_SetConfig+0x308>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d126      	bne.n	8002f4c <UART_SetConfig+0xd8>
 8002efe:	4ba0      	ldr	r3, [pc, #640]	; (8003180 <UART_SetConfig+0x30c>)
 8002f00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f04:	f003 0303 	and.w	r3, r3, #3
 8002f08:	2b03      	cmp	r3, #3
 8002f0a:	d81b      	bhi.n	8002f44 <UART_SetConfig+0xd0>
 8002f0c:	a201      	add	r2, pc, #4	; (adr r2, 8002f14 <UART_SetConfig+0xa0>)
 8002f0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f12:	bf00      	nop
 8002f14:	08002f25 	.word	0x08002f25
 8002f18:	08002f35 	.word	0x08002f35
 8002f1c:	08002f2d 	.word	0x08002f2d
 8002f20:	08002f3d 	.word	0x08002f3d
 8002f24:	2301      	movs	r3, #1
 8002f26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f2a:	e080      	b.n	800302e <UART_SetConfig+0x1ba>
 8002f2c:	2302      	movs	r3, #2
 8002f2e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f32:	e07c      	b.n	800302e <UART_SetConfig+0x1ba>
 8002f34:	2304      	movs	r3, #4
 8002f36:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f3a:	e078      	b.n	800302e <UART_SetConfig+0x1ba>
 8002f3c:	2308      	movs	r3, #8
 8002f3e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f42:	e074      	b.n	800302e <UART_SetConfig+0x1ba>
 8002f44:	2310      	movs	r3, #16
 8002f46:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f4a:	e070      	b.n	800302e <UART_SetConfig+0x1ba>
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4a8c      	ldr	r2, [pc, #560]	; (8003184 <UART_SetConfig+0x310>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d138      	bne.n	8002fc8 <UART_SetConfig+0x154>
 8002f56:	4b8a      	ldr	r3, [pc, #552]	; (8003180 <UART_SetConfig+0x30c>)
 8002f58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f5c:	f003 030c 	and.w	r3, r3, #12
 8002f60:	2b0c      	cmp	r3, #12
 8002f62:	d82d      	bhi.n	8002fc0 <UART_SetConfig+0x14c>
 8002f64:	a201      	add	r2, pc, #4	; (adr r2, 8002f6c <UART_SetConfig+0xf8>)
 8002f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f6a:	bf00      	nop
 8002f6c:	08002fa1 	.word	0x08002fa1
 8002f70:	08002fc1 	.word	0x08002fc1
 8002f74:	08002fc1 	.word	0x08002fc1
 8002f78:	08002fc1 	.word	0x08002fc1
 8002f7c:	08002fb1 	.word	0x08002fb1
 8002f80:	08002fc1 	.word	0x08002fc1
 8002f84:	08002fc1 	.word	0x08002fc1
 8002f88:	08002fc1 	.word	0x08002fc1
 8002f8c:	08002fa9 	.word	0x08002fa9
 8002f90:	08002fc1 	.word	0x08002fc1
 8002f94:	08002fc1 	.word	0x08002fc1
 8002f98:	08002fc1 	.word	0x08002fc1
 8002f9c:	08002fb9 	.word	0x08002fb9
 8002fa0:	2300      	movs	r3, #0
 8002fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fa6:	e042      	b.n	800302e <UART_SetConfig+0x1ba>
 8002fa8:	2302      	movs	r3, #2
 8002faa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fae:	e03e      	b.n	800302e <UART_SetConfig+0x1ba>
 8002fb0:	2304      	movs	r3, #4
 8002fb2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fb6:	e03a      	b.n	800302e <UART_SetConfig+0x1ba>
 8002fb8:	2308      	movs	r3, #8
 8002fba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fbe:	e036      	b.n	800302e <UART_SetConfig+0x1ba>
 8002fc0:	2310      	movs	r3, #16
 8002fc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fc6:	e032      	b.n	800302e <UART_SetConfig+0x1ba>
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4a6a      	ldr	r2, [pc, #424]	; (8003178 <UART_SetConfig+0x304>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d12a      	bne.n	8003028 <UART_SetConfig+0x1b4>
 8002fd2:	4b6b      	ldr	r3, [pc, #428]	; (8003180 <UART_SetConfig+0x30c>)
 8002fd4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fd8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002fdc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fe0:	d01a      	beq.n	8003018 <UART_SetConfig+0x1a4>
 8002fe2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002fe6:	d81b      	bhi.n	8003020 <UART_SetConfig+0x1ac>
 8002fe8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fec:	d00c      	beq.n	8003008 <UART_SetConfig+0x194>
 8002fee:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ff2:	d815      	bhi.n	8003020 <UART_SetConfig+0x1ac>
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <UART_SetConfig+0x18c>
 8002ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ffc:	d008      	beq.n	8003010 <UART_SetConfig+0x19c>
 8002ffe:	e00f      	b.n	8003020 <UART_SetConfig+0x1ac>
 8003000:	2300      	movs	r3, #0
 8003002:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003006:	e012      	b.n	800302e <UART_SetConfig+0x1ba>
 8003008:	2302      	movs	r3, #2
 800300a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800300e:	e00e      	b.n	800302e <UART_SetConfig+0x1ba>
 8003010:	2304      	movs	r3, #4
 8003012:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003016:	e00a      	b.n	800302e <UART_SetConfig+0x1ba>
 8003018:	2308      	movs	r3, #8
 800301a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800301e:	e006      	b.n	800302e <UART_SetConfig+0x1ba>
 8003020:	2310      	movs	r3, #16
 8003022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003026:	e002      	b.n	800302e <UART_SetConfig+0x1ba>
 8003028:	2310      	movs	r3, #16
 800302a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a51      	ldr	r2, [pc, #324]	; (8003178 <UART_SetConfig+0x304>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d17a      	bne.n	800312e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003038:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800303c:	2b08      	cmp	r3, #8
 800303e:	d824      	bhi.n	800308a <UART_SetConfig+0x216>
 8003040:	a201      	add	r2, pc, #4	; (adr r2, 8003048 <UART_SetConfig+0x1d4>)
 8003042:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003046:	bf00      	nop
 8003048:	0800306d 	.word	0x0800306d
 800304c:	0800308b 	.word	0x0800308b
 8003050:	08003075 	.word	0x08003075
 8003054:	0800308b 	.word	0x0800308b
 8003058:	0800307b 	.word	0x0800307b
 800305c:	0800308b 	.word	0x0800308b
 8003060:	0800308b 	.word	0x0800308b
 8003064:	0800308b 	.word	0x0800308b
 8003068:	08003083 	.word	0x08003083
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800306c:	f7fe ff18 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 8003070:	61f8      	str	r0, [r7, #28]
        break;
 8003072:	e010      	b.n	8003096 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003074:	4b44      	ldr	r3, [pc, #272]	; (8003188 <UART_SetConfig+0x314>)
 8003076:	61fb      	str	r3, [r7, #28]
        break;
 8003078:	e00d      	b.n	8003096 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800307a:	f7fe fe79 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 800307e:	61f8      	str	r0, [r7, #28]
        break;
 8003080:	e009      	b.n	8003096 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003086:	61fb      	str	r3, [r7, #28]
        break;
 8003088:	e005      	b.n	8003096 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 800308a:	2300      	movs	r3, #0
 800308c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800308e:	2301      	movs	r3, #1
 8003090:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003094:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	2b00      	cmp	r3, #0
 800309a:	f000 8107 	beq.w	80032ac <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	685a      	ldr	r2, [r3, #4]
 80030a2:	4613      	mov	r3, r2
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	4413      	add	r3, r2
 80030a8:	69fa      	ldr	r2, [r7, #28]
 80030aa:	429a      	cmp	r2, r3
 80030ac:	d305      	bcc.n	80030ba <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80030b4:	69fa      	ldr	r2, [r7, #28]
 80030b6:	429a      	cmp	r2, r3
 80030b8:	d903      	bls.n	80030c2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80030ba:	2301      	movs	r3, #1
 80030bc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030c0:	e0f4      	b.n	80032ac <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80030c2:	69fb      	ldr	r3, [r7, #28]
 80030c4:	2200      	movs	r2, #0
 80030c6:	461c      	mov	r4, r3
 80030c8:	4615      	mov	r5, r2
 80030ca:	f04f 0200 	mov.w	r2, #0
 80030ce:	f04f 0300 	mov.w	r3, #0
 80030d2:	022b      	lsls	r3, r5, #8
 80030d4:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80030d8:	0222      	lsls	r2, r4, #8
 80030da:	68f9      	ldr	r1, [r7, #12]
 80030dc:	6849      	ldr	r1, [r1, #4]
 80030de:	0849      	lsrs	r1, r1, #1
 80030e0:	2000      	movs	r0, #0
 80030e2:	4688      	mov	r8, r1
 80030e4:	4681      	mov	r9, r0
 80030e6:	eb12 0a08 	adds.w	sl, r2, r8
 80030ea:	eb43 0b09 	adc.w	fp, r3, r9
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	2200      	movs	r2, #0
 80030f4:	603b      	str	r3, [r7, #0]
 80030f6:	607a      	str	r2, [r7, #4]
 80030f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80030fc:	4650      	mov	r0, sl
 80030fe:	4659      	mov	r1, fp
 8003100:	f7fd f8be 	bl	8000280 <__aeabi_uldivmod>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4613      	mov	r3, r2
 800310a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800310c:	69bb      	ldr	r3, [r7, #24]
 800310e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003112:	d308      	bcc.n	8003126 <UART_SetConfig+0x2b2>
 8003114:	69bb      	ldr	r3, [r7, #24]
 8003116:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800311a:	d204      	bcs.n	8003126 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	69ba      	ldr	r2, [r7, #24]
 8003122:	60da      	str	r2, [r3, #12]
 8003124:	e0c2      	b.n	80032ac <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800312c:	e0be      	b.n	80032ac <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	69db      	ldr	r3, [r3, #28]
 8003132:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003136:	d16a      	bne.n	800320e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003138:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800313c:	2b08      	cmp	r3, #8
 800313e:	d834      	bhi.n	80031aa <UART_SetConfig+0x336>
 8003140:	a201      	add	r2, pc, #4	; (adr r2, 8003148 <UART_SetConfig+0x2d4>)
 8003142:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003146:	bf00      	nop
 8003148:	0800316d 	.word	0x0800316d
 800314c:	0800318d 	.word	0x0800318d
 8003150:	08003195 	.word	0x08003195
 8003154:	080031ab 	.word	0x080031ab
 8003158:	0800319b 	.word	0x0800319b
 800315c:	080031ab 	.word	0x080031ab
 8003160:	080031ab 	.word	0x080031ab
 8003164:	080031ab 	.word	0x080031ab
 8003168:	080031a3 	.word	0x080031a3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800316c:	f7fe fe98 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 8003170:	61f8      	str	r0, [r7, #28]
        break;
 8003172:	e020      	b.n	80031b6 <UART_SetConfig+0x342>
 8003174:	efff69f3 	.word	0xefff69f3
 8003178:	40008000 	.word	0x40008000
 800317c:	40013800 	.word	0x40013800
 8003180:	40021000 	.word	0x40021000
 8003184:	40004400 	.word	0x40004400
 8003188:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800318c:	f7fe fe9e 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 8003190:	61f8      	str	r0, [r7, #28]
        break;
 8003192:	e010      	b.n	80031b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003194:	4b4c      	ldr	r3, [pc, #304]	; (80032c8 <UART_SetConfig+0x454>)
 8003196:	61fb      	str	r3, [r7, #28]
        break;
 8003198:	e00d      	b.n	80031b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800319a:	f7fe fde9 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 800319e:	61f8      	str	r0, [r7, #28]
        break;
 80031a0:	e009      	b.n	80031b6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031a2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031a6:	61fb      	str	r3, [r7, #28]
        break;
 80031a8:	e005      	b.n	80031b6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80031aa:	2300      	movs	r3, #0
 80031ac:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ae:	2301      	movs	r3, #1
 80031b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031b4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d077      	beq.n	80032ac <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80031bc:	69fb      	ldr	r3, [r7, #28]
 80031be:	005a      	lsls	r2, r3, #1
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	441a      	add	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	685b      	ldr	r3, [r3, #4]
 80031cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031d0:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031d2:	69bb      	ldr	r3, [r7, #24]
 80031d4:	2b0f      	cmp	r3, #15
 80031d6:	d916      	bls.n	8003206 <UART_SetConfig+0x392>
 80031d8:	69bb      	ldr	r3, [r7, #24]
 80031da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031de:	d212      	bcs.n	8003206 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031e0:	69bb      	ldr	r3, [r7, #24]
 80031e2:	b29b      	uxth	r3, r3
 80031e4:	f023 030f 	bic.w	r3, r3, #15
 80031e8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	085b      	lsrs	r3, r3, #1
 80031ee:	b29b      	uxth	r3, r3
 80031f0:	f003 0307 	and.w	r3, r3, #7
 80031f4:	b29a      	uxth	r2, r3
 80031f6:	8afb      	ldrh	r3, [r7, #22]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	8afa      	ldrh	r2, [r7, #22]
 8003202:	60da      	str	r2, [r3, #12]
 8003204:	e052      	b.n	80032ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003206:	2301      	movs	r3, #1
 8003208:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800320c:	e04e      	b.n	80032ac <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800320e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003212:	2b08      	cmp	r3, #8
 8003214:	d827      	bhi.n	8003266 <UART_SetConfig+0x3f2>
 8003216:	a201      	add	r2, pc, #4	; (adr r2, 800321c <UART_SetConfig+0x3a8>)
 8003218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800321c:	08003241 	.word	0x08003241
 8003220:	08003249 	.word	0x08003249
 8003224:	08003251 	.word	0x08003251
 8003228:	08003267 	.word	0x08003267
 800322c:	08003257 	.word	0x08003257
 8003230:	08003267 	.word	0x08003267
 8003234:	08003267 	.word	0x08003267
 8003238:	08003267 	.word	0x08003267
 800323c:	0800325f 	.word	0x0800325f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003240:	f7fe fe2e 	bl	8001ea0 <HAL_RCC_GetPCLK1Freq>
 8003244:	61f8      	str	r0, [r7, #28]
        break;
 8003246:	e014      	b.n	8003272 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003248:	f7fe fe40 	bl	8001ecc <HAL_RCC_GetPCLK2Freq>
 800324c:	61f8      	str	r0, [r7, #28]
        break;
 800324e:	e010      	b.n	8003272 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003250:	4b1d      	ldr	r3, [pc, #116]	; (80032c8 <UART_SetConfig+0x454>)
 8003252:	61fb      	str	r3, [r7, #28]
        break;
 8003254:	e00d      	b.n	8003272 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003256:	f7fe fd8b 	bl	8001d70 <HAL_RCC_GetSysClockFreq>
 800325a:	61f8      	str	r0, [r7, #28]
        break;
 800325c:	e009      	b.n	8003272 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800325e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003262:	61fb      	str	r3, [r7, #28]
        break;
 8003264:	e005      	b.n	8003272 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003266:	2300      	movs	r3, #0
 8003268:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003270:	bf00      	nop
    }

    if (pclk != 0U)
 8003272:	69fb      	ldr	r3, [r7, #28]
 8003274:	2b00      	cmp	r3, #0
 8003276:	d019      	beq.n	80032ac <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	685b      	ldr	r3, [r3, #4]
 800327c:	085a      	lsrs	r2, r3, #1
 800327e:	69fb      	ldr	r3, [r7, #28]
 8003280:	441a      	add	r2, r3
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	2b0f      	cmp	r3, #15
 8003290:	d909      	bls.n	80032a6 <UART_SetConfig+0x432>
 8003292:	69bb      	ldr	r3, [r7, #24]
 8003294:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003298:	d205      	bcs.n	80032a6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800329a:	69bb      	ldr	r3, [r7, #24]
 800329c:	b29a      	uxth	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	60da      	str	r2, [r3, #12]
 80032a4:	e002      	b.n	80032ac <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80032a6:	2301      	movs	r3, #1
 80032a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	2200      	movs	r2, #0
 80032b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	2200      	movs	r2, #0
 80032b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80032b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80032bc:	4618      	mov	r0, r3
 80032be:	3728      	adds	r7, #40	; 0x28
 80032c0:	46bd      	mov	sp, r7
 80032c2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032c6:	bf00      	nop
 80032c8:	00f42400 	.word	0x00f42400

080032cc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b083      	sub	sp, #12
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d8:	f003 0301 	and.w	r3, r3, #1
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d00a      	beq.n	80032f6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	430a      	orrs	r2, r1
 80032f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d00a      	beq.n	8003318 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	685b      	ldr	r3, [r3, #4]
 800332a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	681b      	ldr	r3, [r3, #0]
 8003336:	430a      	orrs	r2, r1
 8003338:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800333e:	f003 0308 	and.w	r3, r3, #8
 8003342:	2b00      	cmp	r3, #0
 8003344:	d00a      	beq.n	800335c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	430a      	orrs	r2, r1
 800335a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003360:	f003 0310 	and.w	r3, r3, #16
 8003364:	2b00      	cmp	r3, #0
 8003366:	d00a      	beq.n	800337e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	689b      	ldr	r3, [r3, #8]
 800336e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	430a      	orrs	r2, r1
 800337c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003382:	f003 0320 	and.w	r3, r3, #32
 8003386:	2b00      	cmp	r3, #0
 8003388:	d00a      	beq.n	80033a0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	689b      	ldr	r3, [r3, #8]
 8003390:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	430a      	orrs	r2, r1
 800339e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d01a      	beq.n	80033e2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	430a      	orrs	r2, r1
 80033c0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033c6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80033ca:	d10a      	bne.n	80033e2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	685b      	ldr	r3, [r3, #4]
 80033d2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	430a      	orrs	r2, r1
 80033e0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d00a      	beq.n	8003404 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	430a      	orrs	r2, r1
 8003402:	605a      	str	r2, [r3, #4]
  }
}
 8003404:	bf00      	nop
 8003406:	370c      	adds	r7, #12
 8003408:	46bd      	mov	sp, r7
 800340a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800340e:	4770      	bx	lr

08003410 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003410:	b580      	push	{r7, lr}
 8003412:	b086      	sub	sp, #24
 8003414:	af02      	add	r7, sp, #8
 8003416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	2200      	movs	r2, #0
 800341c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003420:	f7fd fc94 	bl	8000d4c <HAL_GetTick>
 8003424:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0308 	and.w	r3, r3, #8
 8003430:	2b08      	cmp	r3, #8
 8003432:	d10e      	bne.n	8003452 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003434:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003438:	9300      	str	r3, [sp, #0]
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	2200      	movs	r2, #0
 800343e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003442:	6878      	ldr	r0, [r7, #4]
 8003444:	f000 f82d 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8003448:	4603      	mov	r3, r0
 800344a:	2b00      	cmp	r3, #0
 800344c:	d001      	beq.n	8003452 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e023      	b.n	800349a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0304 	and.w	r3, r3, #4
 800345c:	2b04      	cmp	r3, #4
 800345e:	d10e      	bne.n	800347e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003460:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003464:	9300      	str	r3, [sp, #0]
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2200      	movs	r2, #0
 800346a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800346e:	6878      	ldr	r0, [r7, #4]
 8003470:	f000 f817 	bl	80034a2 <UART_WaitOnFlagUntilTimeout>
 8003474:	4603      	mov	r3, r0
 8003476:	2b00      	cmp	r3, #0
 8003478:	d001      	beq.n	800347e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800347a:	2303      	movs	r3, #3
 800347c:	e00d      	b.n	800349a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2220      	movs	r2, #32
 8003482:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2220      	movs	r2, #32
 8003488:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	2200      	movs	r2, #0
 800348e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	2200      	movs	r2, #0
 8003494:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	4618      	mov	r0, r3
 800349c:	3710      	adds	r7, #16
 800349e:	46bd      	mov	sp, r7
 80034a0:	bd80      	pop	{r7, pc}

080034a2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034a2:	b580      	push	{r7, lr}
 80034a4:	b09c      	sub	sp, #112	; 0x70
 80034a6:	af00      	add	r7, sp, #0
 80034a8:	60f8      	str	r0, [r7, #12]
 80034aa:	60b9      	str	r1, [r7, #8]
 80034ac:	603b      	str	r3, [r7, #0]
 80034ae:	4613      	mov	r3, r2
 80034b0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034b2:	e0a5      	b.n	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80034b4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034b6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034ba:	f000 80a1 	beq.w	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80034be:	f7fd fc45 	bl	8000d4c <HAL_GetTick>
 80034c2:	4602      	mov	r2, r0
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	1ad3      	subs	r3, r2, r3
 80034c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80034ca:	429a      	cmp	r2, r3
 80034cc:	d302      	bcc.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x32>
 80034ce:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d13e      	bne.n	8003552 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034da:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80034dc:	e853 3f00 	ldrex	r3, [r3]
 80034e0:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80034e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80034e4:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034e8:	667b      	str	r3, [r7, #100]	; 0x64
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	461a      	mov	r2, r3
 80034f0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80034f2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80034f4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80034f8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80034fa:	e841 2300 	strex	r3, r2, [r1]
 80034fe:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003500:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1e6      	bne.n	80034d4 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	3308      	adds	r3, #8
 800350c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800350e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003510:	e853 3f00 	ldrex	r3, [r3]
 8003514:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003518:	f023 0301 	bic.w	r3, r3, #1
 800351c:	663b      	str	r3, [r7, #96]	; 0x60
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	3308      	adds	r3, #8
 8003524:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003526:	64ba      	str	r2, [r7, #72]	; 0x48
 8003528:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800352a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800352c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800352e:	e841 2300 	strex	r3, r2, [r1]
 8003532:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003534:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003536:	2b00      	cmp	r3, #0
 8003538:	d1e5      	bne.n	8003506 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2220      	movs	r2, #32
 800353e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	2220      	movs	r2, #32
 8003544:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	2200      	movs	r2, #0
 800354a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800354e:	2303      	movs	r3, #3
 8003550:	e067      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d04f      	beq.n	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	69db      	ldr	r3, [r3, #28]
 8003566:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800356a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800356e:	d147      	bne.n	8003600 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003578:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003580:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003582:	e853 3f00 	ldrex	r3, [r3]
 8003586:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800358a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800358e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	461a      	mov	r2, r3
 8003596:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003598:	637b      	str	r3, [r7, #52]	; 0x34
 800359a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800359c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800359e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80035a0:	e841 2300 	strex	r3, r2, [r1]
 80035a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80035a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d1e6      	bne.n	800357a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	3308      	adds	r3, #8
 80035b2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	e853 3f00 	ldrex	r3, [r3]
 80035ba:	613b      	str	r3, [r7, #16]
   return(result);
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	f023 0301 	bic.w	r3, r3, #1
 80035c2:	66bb      	str	r3, [r7, #104]	; 0x68
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	3308      	adds	r3, #8
 80035ca:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80035cc:	623a      	str	r2, [r7, #32]
 80035ce:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d0:	69f9      	ldr	r1, [r7, #28]
 80035d2:	6a3a      	ldr	r2, [r7, #32]
 80035d4:	e841 2300 	strex	r3, r2, [r1]
 80035d8:	61bb      	str	r3, [r7, #24]
   return(result);
 80035da:	69bb      	ldr	r3, [r7, #24]
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d1e5      	bne.n	80035ac <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2220      	movs	r2, #32
 80035e4:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	2200      	movs	r2, #0
 80035f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80035fc:	2303      	movs	r3, #3
 80035fe:	e010      	b.n	8003622 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	69da      	ldr	r2, [r3, #28]
 8003606:	68bb      	ldr	r3, [r7, #8]
 8003608:	4013      	ands	r3, r2
 800360a:	68ba      	ldr	r2, [r7, #8]
 800360c:	429a      	cmp	r2, r3
 800360e:	bf0c      	ite	eq
 8003610:	2301      	moveq	r3, #1
 8003612:	2300      	movne	r3, #0
 8003614:	b2db      	uxtb	r3, r3
 8003616:	461a      	mov	r2, r3
 8003618:	79fb      	ldrb	r3, [r7, #7]
 800361a:	429a      	cmp	r2, r3
 800361c:	f43f af4a 	beq.w	80034b4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003620:	2300      	movs	r3, #0
}
 8003622:	4618      	mov	r0, r3
 8003624:	3770      	adds	r7, #112	; 0x70
 8003626:	46bd      	mov	sp, r7
 8003628:	bd80      	pop	{r7, pc}
	...

0800362c <__NVIC_SetPriority>:
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	4603      	mov	r3, r0
 8003634:	6039      	str	r1, [r7, #0]
 8003636:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003638:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800363c:	2b00      	cmp	r3, #0
 800363e:	db0a      	blt.n	8003656 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	b2da      	uxtb	r2, r3
 8003644:	490c      	ldr	r1, [pc, #48]	; (8003678 <__NVIC_SetPriority+0x4c>)
 8003646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800364a:	0112      	lsls	r2, r2, #4
 800364c:	b2d2      	uxtb	r2, r2
 800364e:	440b      	add	r3, r1
 8003650:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003654:	e00a      	b.n	800366c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	b2da      	uxtb	r2, r3
 800365a:	4908      	ldr	r1, [pc, #32]	; (800367c <__NVIC_SetPriority+0x50>)
 800365c:	79fb      	ldrb	r3, [r7, #7]
 800365e:	f003 030f 	and.w	r3, r3, #15
 8003662:	3b04      	subs	r3, #4
 8003664:	0112      	lsls	r2, r2, #4
 8003666:	b2d2      	uxtb	r2, r2
 8003668:	440b      	add	r3, r1
 800366a:	761a      	strb	r2, [r3, #24]
}
 800366c:	bf00      	nop
 800366e:	370c      	adds	r7, #12
 8003670:	46bd      	mov	sp, r7
 8003672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003676:	4770      	bx	lr
 8003678:	e000e100 	.word	0xe000e100
 800367c:	e000ed00 	.word	0xe000ed00

08003680 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003680:	b580      	push	{r7, lr}
 8003682:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003684:	4b05      	ldr	r3, [pc, #20]	; (800369c <SysTick_Handler+0x1c>)
 8003686:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003688:	f001 fe70 	bl	800536c <xTaskGetSchedulerState>
 800368c:	4603      	mov	r3, r0
 800368e:	2b01      	cmp	r3, #1
 8003690:	d001      	beq.n	8003696 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003692:	f002 fc59 	bl	8005f48 <xPortSysTickHandler>
  }
}
 8003696:	bf00      	nop
 8003698:	bd80      	pop	{r7, pc}
 800369a:	bf00      	nop
 800369c:	e000e010 	.word	0xe000e010

080036a0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80036a0:	b580      	push	{r7, lr}
 80036a2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80036a4:	2100      	movs	r1, #0
 80036a6:	f06f 0004 	mvn.w	r0, #4
 80036aa:	f7ff ffbf 	bl	800362c <__NVIC_SetPriority>
#endif
}
 80036ae:	bf00      	nop
 80036b0:	bd80      	pop	{r7, pc}
	...

080036b4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036ba:	f3ef 8305 	mrs	r3, IPSR
 80036be:	603b      	str	r3, [r7, #0]
  return(result);
 80036c0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d003      	beq.n	80036ce <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80036c6:	f06f 0305 	mvn.w	r3, #5
 80036ca:	607b      	str	r3, [r7, #4]
 80036cc:	e00c      	b.n	80036e8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80036ce:	4b0a      	ldr	r3, [pc, #40]	; (80036f8 <osKernelInitialize+0x44>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d105      	bne.n	80036e2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80036d6:	4b08      	ldr	r3, [pc, #32]	; (80036f8 <osKernelInitialize+0x44>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80036dc:	2300      	movs	r3, #0
 80036de:	607b      	str	r3, [r7, #4]
 80036e0:	e002      	b.n	80036e8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80036e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80036e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80036e8:	687b      	ldr	r3, [r7, #4]
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	370c      	adds	r7, #12
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	20000174 	.word	0x20000174

080036fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80036fc:	b580      	push	{r7, lr}
 80036fe:	b082      	sub	sp, #8
 8003700:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003702:	f3ef 8305 	mrs	r3, IPSR
 8003706:	603b      	str	r3, [r7, #0]
  return(result);
 8003708:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <osKernelStart+0x1a>
    stat = osErrorISR;
 800370e:	f06f 0305 	mvn.w	r3, #5
 8003712:	607b      	str	r3, [r7, #4]
 8003714:	e010      	b.n	8003738 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003716:	4b0b      	ldr	r3, [pc, #44]	; (8003744 <osKernelStart+0x48>)
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d109      	bne.n	8003732 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800371e:	f7ff ffbf 	bl	80036a0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003722:	4b08      	ldr	r3, [pc, #32]	; (8003744 <osKernelStart+0x48>)
 8003724:	2202      	movs	r2, #2
 8003726:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003728:	f001 f9c4 	bl	8004ab4 <vTaskStartScheduler>
      stat = osOK;
 800372c:	2300      	movs	r3, #0
 800372e:	607b      	str	r3, [r7, #4]
 8003730:	e002      	b.n	8003738 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003736:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003738:	687b      	ldr	r3, [r7, #4]
}
 800373a:	4618      	mov	r0, r3
 800373c:	3708      	adds	r7, #8
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	20000174 	.word	0x20000174

08003748 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b08e      	sub	sp, #56	; 0x38
 800374c:	af04      	add	r7, sp, #16
 800374e:	60f8      	str	r0, [r7, #12]
 8003750:	60b9      	str	r1, [r7, #8]
 8003752:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003758:	f3ef 8305 	mrs	r3, IPSR
 800375c:	617b      	str	r3, [r7, #20]
  return(result);
 800375e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003760:	2b00      	cmp	r3, #0
 8003762:	d17e      	bne.n	8003862 <osThreadNew+0x11a>
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d07b      	beq.n	8003862 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800376a:	2380      	movs	r3, #128	; 0x80
 800376c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800376e:	2318      	movs	r3, #24
 8003770:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003772:	2300      	movs	r3, #0
 8003774:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800377a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d045      	beq.n	800380e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d002      	beq.n	8003790 <osThreadNew+0x48>
        name = attr->name;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	699b      	ldr	r3, [r3, #24]
 8003794:	2b00      	cmp	r3, #0
 8003796:	d002      	beq.n	800379e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800379e:	69fb      	ldr	r3, [r7, #28]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d008      	beq.n	80037b6 <osThreadNew+0x6e>
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	2b38      	cmp	r3, #56	; 0x38
 80037a8:	d805      	bhi.n	80037b6 <osThreadNew+0x6e>
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	685b      	ldr	r3, [r3, #4]
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <osThreadNew+0x72>
        return (NULL);
 80037b6:	2300      	movs	r3, #0
 80037b8:	e054      	b.n	8003864 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d003      	beq.n	80037ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	695b      	ldr	r3, [r3, #20]
 80037c6:	089b      	lsrs	r3, r3, #2
 80037c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d00e      	beq.n	80037f0 <osThreadNew+0xa8>
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	68db      	ldr	r3, [r3, #12]
 80037d6:	2bbb      	cmp	r3, #187	; 0xbb
 80037d8:	d90a      	bls.n	80037f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d006      	beq.n	80037f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	695b      	ldr	r3, [r3, #20]
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d002      	beq.n	80037f0 <osThreadNew+0xa8>
        mem = 1;
 80037ea:	2301      	movs	r3, #1
 80037ec:	61bb      	str	r3, [r7, #24]
 80037ee:	e010      	b.n	8003812 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	689b      	ldr	r3, [r3, #8]
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d10c      	bne.n	8003812 <osThreadNew+0xca>
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	68db      	ldr	r3, [r3, #12]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d108      	bne.n	8003812 <osThreadNew+0xca>
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	691b      	ldr	r3, [r3, #16]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d104      	bne.n	8003812 <osThreadNew+0xca>
          mem = 0;
 8003808:	2300      	movs	r3, #0
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	e001      	b.n	8003812 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800380e:	2300      	movs	r3, #0
 8003810:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	2b01      	cmp	r3, #1
 8003816:	d110      	bne.n	800383a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800381c:	687a      	ldr	r2, [r7, #4]
 800381e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003820:	9202      	str	r2, [sp, #8]
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	68bb      	ldr	r3, [r7, #8]
 800382a:	6a3a      	ldr	r2, [r7, #32]
 800382c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f000 fe4e 	bl	80044d0 <xTaskCreateStatic>
 8003834:	4603      	mov	r3, r0
 8003836:	613b      	str	r3, [r7, #16]
 8003838:	e013      	b.n	8003862 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800383a:	69bb      	ldr	r3, [r7, #24]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d110      	bne.n	8003862 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003840:	6a3b      	ldr	r3, [r7, #32]
 8003842:	b29a      	uxth	r2, r3
 8003844:	f107 0310 	add.w	r3, r7, #16
 8003848:	9301      	str	r3, [sp, #4]
 800384a:	69fb      	ldr	r3, [r7, #28]
 800384c:	9300      	str	r3, [sp, #0]
 800384e:	68bb      	ldr	r3, [r7, #8]
 8003850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003852:	68f8      	ldr	r0, [r7, #12]
 8003854:	f000 fe99 	bl	800458a <xTaskCreate>
 8003858:	4603      	mov	r3, r0
 800385a:	2b01      	cmp	r3, #1
 800385c:	d001      	beq.n	8003862 <osThreadNew+0x11a>
            hTask = NULL;
 800385e:	2300      	movs	r3, #0
 8003860:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003862:	693b      	ldr	r3, [r7, #16]
}
 8003864:	4618      	mov	r0, r3
 8003866:	3728      	adds	r7, #40	; 0x28
 8003868:	46bd      	mov	sp, r7
 800386a:	bd80      	pop	{r7, pc}

0800386c <osThreadSuspend>:

  return (stat);
}

#if (configUSE_OS2_THREAD_SUSPEND_RESUME == 1)
osStatus_t osThreadSuspend (osThreadId_t thread_id) {
 800386c:	b580      	push	{r7, lr}
 800386e:	b086      	sub	sp, #24
 8003870:	af00      	add	r7, sp, #0
 8003872:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003878:	f3ef 8305 	mrs	r3, IPSR
 800387c:	60fb      	str	r3, [r7, #12]
  return(result);
 800387e:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003880:	2b00      	cmp	r3, #0
 8003882:	d003      	beq.n	800388c <osThreadSuspend+0x20>
    stat = osErrorISR;
 8003884:	f06f 0305 	mvn.w	r3, #5
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e00b      	b.n	80038a4 <osThreadSuspend+0x38>
  }
  else if (hTask == NULL) {
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	2b00      	cmp	r3, #0
 8003890:	d103      	bne.n	800389a <osThreadSuspend+0x2e>
    stat = osErrorParameter;
 8003892:	f06f 0303 	mvn.w	r3, #3
 8003896:	617b      	str	r3, [r7, #20]
 8003898:	e004      	b.n	80038a4 <osThreadSuspend+0x38>
  }
  else {
    stat = osOK;
 800389a:	2300      	movs	r3, #0
 800389c:	617b      	str	r3, [r7, #20]
    vTaskSuspend (hTask);
 800389e:	6938      	ldr	r0, [r7, #16]
 80038a0:	f001 f802 	bl	80048a8 <vTaskSuspend>
  }

  return (stat);
 80038a4:	697b      	ldr	r3, [r7, #20]
}
 80038a6:	4618      	mov	r0, r3
 80038a8:	3718      	adds	r7, #24
 80038aa:	46bd      	mov	sp, r7
 80038ac:	bd80      	pop	{r7, pc}

080038ae <osThreadResume>:

osStatus_t osThreadResume (osThreadId_t thread_id) {
 80038ae:	b580      	push	{r7, lr}
 80038b0:	b086      	sub	sp, #24
 80038b2:	af00      	add	r7, sp, #0
 80038b4:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038ba:	f3ef 8305 	mrs	r3, IPSR
 80038be:	60fb      	str	r3, [r7, #12]
  return(result);
 80038c0:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d003      	beq.n	80038ce <osThreadResume+0x20>
    stat = osErrorISR;
 80038c6:	f06f 0305 	mvn.w	r3, #5
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e00b      	b.n	80038e6 <osThreadResume+0x38>
  }
  else if (hTask == NULL) {
 80038ce:	693b      	ldr	r3, [r7, #16]
 80038d0:	2b00      	cmp	r3, #0
 80038d2:	d103      	bne.n	80038dc <osThreadResume+0x2e>
    stat = osErrorParameter;
 80038d4:	f06f 0303 	mvn.w	r3, #3
 80038d8:	617b      	str	r3, [r7, #20]
 80038da:	e004      	b.n	80038e6 <osThreadResume+0x38>
  }
  else {
    stat = osOK;
 80038dc:	2300      	movs	r3, #0
 80038de:	617b      	str	r3, [r7, #20]
    vTaskResume (hTask);
 80038e0:	6938      	ldr	r0, [r7, #16]
 80038e2:	f001 f889 	bl	80049f8 <vTaskResume>
  }

  return (stat);
 80038e6:	697b      	ldr	r3, [r7, #20]
}
 80038e8:	4618      	mov	r0, r3
 80038ea:	3718      	adds	r7, #24
 80038ec:	46bd      	mov	sp, r7
 80038ee:	bd80      	pop	{r7, pc}

080038f0 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80038f8:	f3ef 8305 	mrs	r3, IPSR
 80038fc:	60bb      	str	r3, [r7, #8]
  return(result);
 80038fe:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003900:	2b00      	cmp	r3, #0
 8003902:	d003      	beq.n	800390c <osDelay+0x1c>
    stat = osErrorISR;
 8003904:	f06f 0305 	mvn.w	r3, #5
 8003908:	60fb      	str	r3, [r7, #12]
 800390a:	e007      	b.n	800391c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800390c:	2300      	movs	r3, #0
 800390e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d002      	beq.n	800391c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003916:	6878      	ldr	r0, [r7, #4]
 8003918:	f000 ff92 	bl	8004840 <vTaskDelay>
    }
  }

  return (stat);
 800391c:	68fb      	ldr	r3, [r7, #12]
}
 800391e:	4618      	mov	r0, r3
 8003920:	3710      	adds	r7, #16
 8003922:	46bd      	mov	sp, r7
 8003924:	bd80      	pop	{r7, pc}
	...

08003928 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003928:	b480      	push	{r7}
 800392a:	b085      	sub	sp, #20
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4a07      	ldr	r2, [pc, #28]	; (8003954 <vApplicationGetIdleTaskMemory+0x2c>)
 8003938:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800393a:	68bb      	ldr	r3, [r7, #8]
 800393c:	4a06      	ldr	r2, [pc, #24]	; (8003958 <vApplicationGetIdleTaskMemory+0x30>)
 800393e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2280      	movs	r2, #128	; 0x80
 8003944:	601a      	str	r2, [r3, #0]
}
 8003946:	bf00      	nop
 8003948:	3714      	adds	r7, #20
 800394a:	46bd      	mov	sp, r7
 800394c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003950:	4770      	bx	lr
 8003952:	bf00      	nop
 8003954:	20000178 	.word	0x20000178
 8003958:	20000234 	.word	0x20000234

0800395c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800395c:	b480      	push	{r7}
 800395e:	b085      	sub	sp, #20
 8003960:	af00      	add	r7, sp, #0
 8003962:	60f8      	str	r0, [r7, #12]
 8003964:	60b9      	str	r1, [r7, #8]
 8003966:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	4a07      	ldr	r2, [pc, #28]	; (8003988 <vApplicationGetTimerTaskMemory+0x2c>)
 800396c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800396e:	68bb      	ldr	r3, [r7, #8]
 8003970:	4a06      	ldr	r2, [pc, #24]	; (800398c <vApplicationGetTimerTaskMemory+0x30>)
 8003972:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f44f 7280 	mov.w	r2, #256	; 0x100
 800397a:	601a      	str	r2, [r3, #0]
}
 800397c:	bf00      	nop
 800397e:	3714      	adds	r7, #20
 8003980:	46bd      	mov	sp, r7
 8003982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003986:	4770      	bx	lr
 8003988:	20000434 	.word	0x20000434
 800398c:	200004f0 	.word	0x200004f0

08003990 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	f103 0208 	add.w	r2, r3, #8
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80039a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	f103 0208 	add.w	r2, r3, #8
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f103 0208 	add.w	r2, r3, #8
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2200      	movs	r2, #0
 80039c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80039c4:	bf00      	nop
 80039c6:	370c      	adds	r7, #12
 80039c8:	46bd      	mov	sp, r7
 80039ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ce:	4770      	bx	lr

080039d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80039d0:	b480      	push	{r7}
 80039d2:	b083      	sub	sp, #12
 80039d4:	af00      	add	r7, sp, #0
 80039d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80039de:	bf00      	nop
 80039e0:	370c      	adds	r7, #12
 80039e2:	46bd      	mov	sp, r7
 80039e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e8:	4770      	bx	lr

080039ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80039ea:	b480      	push	{r7}
 80039ec:	b085      	sub	sp, #20
 80039ee:	af00      	add	r7, sp, #0
 80039f0:	6078      	str	r0, [r7, #4]
 80039f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	685b      	ldr	r3, [r3, #4]
 80039f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	68fa      	ldr	r2, [r7, #12]
 80039fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	689a      	ldr	r2, [r3, #8]
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	689b      	ldr	r3, [r3, #8]
 8003a0c:	683a      	ldr	r2, [r7, #0]
 8003a0e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	687a      	ldr	r2, [r7, #4]
 8003a1a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	1c5a      	adds	r2, r3, #1
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	601a      	str	r2, [r3, #0]
}
 8003a26:	bf00      	nop
 8003a28:	3714      	adds	r7, #20
 8003a2a:	46bd      	mov	sp, r7
 8003a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a30:	4770      	bx	lr

08003a32 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003a32:	b480      	push	{r7}
 8003a34:	b085      	sub	sp, #20
 8003a36:	af00      	add	r7, sp, #0
 8003a38:	6078      	str	r0, [r7, #4]
 8003a3a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003a3c:	683b      	ldr	r3, [r7, #0]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003a42:	68bb      	ldr	r3, [r7, #8]
 8003a44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a48:	d103      	bne.n	8003a52 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	691b      	ldr	r3, [r3, #16]
 8003a4e:	60fb      	str	r3, [r7, #12]
 8003a50:	e00c      	b.n	8003a6c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	3308      	adds	r3, #8
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	e002      	b.n	8003a60 <vListInsert+0x2e>
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	685b      	ldr	r3, [r3, #4]
 8003a5e:	60fb      	str	r3, [r7, #12]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	68ba      	ldr	r2, [r7, #8]
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d2f6      	bcs.n	8003a5a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	685a      	ldr	r2, [r3, #4]
 8003a70:	683b      	ldr	r3, [r7, #0]
 8003a72:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	683a      	ldr	r2, [r7, #0]
 8003a7a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003a7c:	683b      	ldr	r3, [r7, #0]
 8003a7e:	68fa      	ldr	r2, [r7, #12]
 8003a80:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	683a      	ldr	r2, [r7, #0]
 8003a86:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003a88:	683b      	ldr	r3, [r7, #0]
 8003a8a:	687a      	ldr	r2, [r7, #4]
 8003a8c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	601a      	str	r2, [r3, #0]
}
 8003a98:	bf00      	nop
 8003a9a:	3714      	adds	r7, #20
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b085      	sub	sp, #20
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	691b      	ldr	r3, [r3, #16]
 8003ab0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	687a      	ldr	r2, [r7, #4]
 8003ab8:	6892      	ldr	r2, [r2, #8]
 8003aba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	687a      	ldr	r2, [r7, #4]
 8003ac2:	6852      	ldr	r2, [r2, #4]
 8003ac4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	687a      	ldr	r2, [r7, #4]
 8003acc:	429a      	cmp	r2, r3
 8003ace:	d103      	bne.n	8003ad8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	689a      	ldr	r2, [r3, #8]
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	2200      	movs	r2, #0
 8003adc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	1e5a      	subs	r2, r3, #1
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	681b      	ldr	r3, [r3, #0]
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr

08003af8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b084      	sub	sp, #16
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
 8003b00:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d10a      	bne.n	8003b22 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b10:	f383 8811 	msr	BASEPRI, r3
 8003b14:	f3bf 8f6f 	isb	sy
 8003b18:	f3bf 8f4f 	dsb	sy
 8003b1c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003b1e:	bf00      	nop
 8003b20:	e7fe      	b.n	8003b20 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003b22:	f002 f97f 	bl	8005e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681a      	ldr	r2, [r3, #0]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b2e:	68f9      	ldr	r1, [r7, #12]
 8003b30:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b32:	fb01 f303 	mul.w	r3, r1, r3
 8003b36:	441a      	add	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2200      	movs	r2, #0
 8003b40:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681a      	ldr	r2, [r3, #0]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b52:	3b01      	subs	r3, #1
 8003b54:	68f9      	ldr	r1, [r7, #12]
 8003b56:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003b58:	fb01 f303 	mul.w	r3, r1, r3
 8003b5c:	441a      	add	r2, r3
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	22ff      	movs	r2, #255	; 0xff
 8003b66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	22ff      	movs	r2, #255	; 0xff
 8003b6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003b72:	683b      	ldr	r3, [r7, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d114      	bne.n	8003ba2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	2b00      	cmp	r3, #0
 8003b7e:	d01a      	beq.n	8003bb6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	3310      	adds	r3, #16
 8003b84:	4618      	mov	r0, r3
 8003b86:	f001 fa2f 	bl	8004fe8 <xTaskRemoveFromEventList>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d012      	beq.n	8003bb6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003b90:	4b0c      	ldr	r3, [pc, #48]	; (8003bc4 <xQueueGenericReset+0xcc>)
 8003b92:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b96:	601a      	str	r2, [r3, #0]
 8003b98:	f3bf 8f4f 	dsb	sy
 8003b9c:	f3bf 8f6f 	isb	sy
 8003ba0:	e009      	b.n	8003bb6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	3310      	adds	r3, #16
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	f7ff fef2 	bl	8003990 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	3324      	adds	r3, #36	; 0x24
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	f7ff feed 	bl	8003990 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003bb6:	f002 f965 	bl	8005e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003bba:	2301      	movs	r3, #1
}
 8003bbc:	4618      	mov	r0, r3
 8003bbe:	3710      	adds	r7, #16
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	bd80      	pop	{r7, pc}
 8003bc4:	e000ed04 	.word	0xe000ed04

08003bc8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b08e      	sub	sp, #56	; 0x38
 8003bcc:	af02      	add	r7, sp, #8
 8003bce:	60f8      	str	r0, [r7, #12]
 8003bd0:	60b9      	str	r1, [r7, #8]
 8003bd2:	607a      	str	r2, [r7, #4]
 8003bd4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003be0:	f383 8811 	msr	BASEPRI, r3
 8003be4:	f3bf 8f6f 	isb	sy
 8003be8:	f3bf 8f4f 	dsb	sy
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003bee:	bf00      	nop
 8003bf0:	e7fe      	b.n	8003bf0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003bf2:	683b      	ldr	r3, [r7, #0]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d10a      	bne.n	8003c0e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003bf8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bfc:	f383 8811 	msr	BASEPRI, r3
 8003c00:	f3bf 8f6f 	isb	sy
 8003c04:	f3bf 8f4f 	dsb	sy
 8003c08:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003c0a:	bf00      	nop
 8003c0c:	e7fe      	b.n	8003c0c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d002      	beq.n	8003c1a <xQueueGenericCreateStatic+0x52>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <xQueueGenericCreateStatic+0x56>
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e000      	b.n	8003c20 <xQueueGenericCreateStatic+0x58>
 8003c1e:	2300      	movs	r3, #0
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d10a      	bne.n	8003c3a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c28:	f383 8811 	msr	BASEPRI, r3
 8003c2c:	f3bf 8f6f 	isb	sy
 8003c30:	f3bf 8f4f 	dsb	sy
 8003c34:	623b      	str	r3, [r7, #32]
}
 8003c36:	bf00      	nop
 8003c38:	e7fe      	b.n	8003c38 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d102      	bne.n	8003c46 <xQueueGenericCreateStatic+0x7e>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d101      	bne.n	8003c4a <xQueueGenericCreateStatic+0x82>
 8003c46:	2301      	movs	r3, #1
 8003c48:	e000      	b.n	8003c4c <xQueueGenericCreateStatic+0x84>
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d10a      	bne.n	8003c66 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003c50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c54:	f383 8811 	msr	BASEPRI, r3
 8003c58:	f3bf 8f6f 	isb	sy
 8003c5c:	f3bf 8f4f 	dsb	sy
 8003c60:	61fb      	str	r3, [r7, #28]
}
 8003c62:	bf00      	nop
 8003c64:	e7fe      	b.n	8003c64 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003c66:	2350      	movs	r3, #80	; 0x50
 8003c68:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003c6a:	697b      	ldr	r3, [r7, #20]
 8003c6c:	2b50      	cmp	r3, #80	; 0x50
 8003c6e:	d00a      	beq.n	8003c86 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003c70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c74:	f383 8811 	msr	BASEPRI, r3
 8003c78:	f3bf 8f6f 	isb	sy
 8003c7c:	f3bf 8f4f 	dsb	sy
 8003c80:	61bb      	str	r3, [r7, #24]
}
 8003c82:	bf00      	nop
 8003c84:	e7fe      	b.n	8003c84 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003c86:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d00d      	beq.n	8003cae <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003c92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c94:	2201      	movs	r2, #1
 8003c96:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003c9a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	9300      	str	r3, [sp, #0]
 8003ca2:	4613      	mov	r3, r2
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68b9      	ldr	r1, [r7, #8]
 8003ca8:	68f8      	ldr	r0, [r7, #12]
 8003caa:	f000 f805 	bl	8003cb8 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003cae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3730      	adds	r7, #48	; 0x30
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b084      	sub	sp, #16
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003cc6:	68bb      	ldr	r3, [r7, #8]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d103      	bne.n	8003cd4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ccc:	69bb      	ldr	r3, [r7, #24]
 8003cce:	69ba      	ldr	r2, [r7, #24]
 8003cd0:	601a      	str	r2, [r3, #0]
 8003cd2:	e002      	b.n	8003cda <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003cd4:	69bb      	ldr	r3, [r7, #24]
 8003cd6:	687a      	ldr	r2, [r7, #4]
 8003cd8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003cda:	69bb      	ldr	r3, [r7, #24]
 8003cdc:	68fa      	ldr	r2, [r7, #12]
 8003cde:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ce0:	69bb      	ldr	r3, [r7, #24]
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003ce6:	2101      	movs	r1, #1
 8003ce8:	69b8      	ldr	r0, [r7, #24]
 8003cea:	f7ff ff05 	bl	8003af8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003cee:	69bb      	ldr	r3, [r7, #24]
 8003cf0:	78fa      	ldrb	r2, [r7, #3]
 8003cf2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003cf6:	bf00      	nop
 8003cf8:	3710      	adds	r7, #16
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	bd80      	pop	{r7, pc}
	...

08003d00 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003d00:	b580      	push	{r7, lr}
 8003d02:	b08e      	sub	sp, #56	; 0x38
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	60f8      	str	r0, [r7, #12]
 8003d08:	60b9      	str	r1, [r7, #8]
 8003d0a:	607a      	str	r2, [r7, #4]
 8003d0c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003d0e:	2300      	movs	r3, #0
 8003d10:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d10a      	bne.n	8003d32 <xQueueGenericSend+0x32>
	__asm volatile
 8003d1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d20:	f383 8811 	msr	BASEPRI, r3
 8003d24:	f3bf 8f6f 	isb	sy
 8003d28:	f3bf 8f4f 	dsb	sy
 8003d2c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d2e:	bf00      	nop
 8003d30:	e7fe      	b.n	8003d30 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d103      	bne.n	8003d40 <xQueueGenericSend+0x40>
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	d101      	bne.n	8003d44 <xQueueGenericSend+0x44>
 8003d40:	2301      	movs	r3, #1
 8003d42:	e000      	b.n	8003d46 <xQueueGenericSend+0x46>
 8003d44:	2300      	movs	r3, #0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d10a      	bne.n	8003d60 <xQueueGenericSend+0x60>
	__asm volatile
 8003d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d4e:	f383 8811 	msr	BASEPRI, r3
 8003d52:	f3bf 8f6f 	isb	sy
 8003d56:	f3bf 8f4f 	dsb	sy
 8003d5a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d5c:	bf00      	nop
 8003d5e:	e7fe      	b.n	8003d5e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	d103      	bne.n	8003d6e <xQueueGenericSend+0x6e>
 8003d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d6a:	2b01      	cmp	r3, #1
 8003d6c:	d101      	bne.n	8003d72 <xQueueGenericSend+0x72>
 8003d6e:	2301      	movs	r3, #1
 8003d70:	e000      	b.n	8003d74 <xQueueGenericSend+0x74>
 8003d72:	2300      	movs	r3, #0
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d10a      	bne.n	8003d8e <xQueueGenericSend+0x8e>
	__asm volatile
 8003d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d7c:	f383 8811 	msr	BASEPRI, r3
 8003d80:	f3bf 8f6f 	isb	sy
 8003d84:	f3bf 8f4f 	dsb	sy
 8003d88:	623b      	str	r3, [r7, #32]
}
 8003d8a:	bf00      	nop
 8003d8c:	e7fe      	b.n	8003d8c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003d8e:	f001 faed 	bl	800536c <xTaskGetSchedulerState>
 8003d92:	4603      	mov	r3, r0
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d102      	bne.n	8003d9e <xQueueGenericSend+0x9e>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <xQueueGenericSend+0xa2>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	e000      	b.n	8003da4 <xQueueGenericSend+0xa4>
 8003da2:	2300      	movs	r3, #0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d10a      	bne.n	8003dbe <xQueueGenericSend+0xbe>
	__asm volatile
 8003da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dac:	f383 8811 	msr	BASEPRI, r3
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	f3bf 8f4f 	dsb	sy
 8003db8:	61fb      	str	r3, [r7, #28]
}
 8003dba:	bf00      	nop
 8003dbc:	e7fe      	b.n	8003dbc <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003dbe:	f002 f831 	bl	8005e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003dc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dca:	429a      	cmp	r2, r3
 8003dcc:	d302      	bcc.n	8003dd4 <xQueueGenericSend+0xd4>
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	2b02      	cmp	r3, #2
 8003dd2:	d129      	bne.n	8003e28 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003dd4:	683a      	ldr	r2, [r7, #0]
 8003dd6:	68b9      	ldr	r1, [r7, #8]
 8003dd8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003dda:	f000 fa0b 	bl	80041f4 <prvCopyDataToQueue>
 8003dde:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003de2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d010      	beq.n	8003e0a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003de8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dea:	3324      	adds	r3, #36	; 0x24
 8003dec:	4618      	mov	r0, r3
 8003dee:	f001 f8fb 	bl	8004fe8 <xTaskRemoveFromEventList>
 8003df2:	4603      	mov	r3, r0
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d013      	beq.n	8003e20 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003df8:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <xQueueGenericSend+0x1f8>)
 8003dfa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003dfe:	601a      	str	r2, [r3, #0]
 8003e00:	f3bf 8f4f 	dsb	sy
 8003e04:	f3bf 8f6f 	isb	sy
 8003e08:	e00a      	b.n	8003e20 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003e0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d007      	beq.n	8003e20 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003e10:	4b39      	ldr	r3, [pc, #228]	; (8003ef8 <xQueueGenericSend+0x1f8>)
 8003e12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e16:	601a      	str	r2, [r3, #0]
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003e20:	f002 f830 	bl	8005e84 <vPortExitCritical>
				return pdPASS;
 8003e24:	2301      	movs	r3, #1
 8003e26:	e063      	b.n	8003ef0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d103      	bne.n	8003e36 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003e2e:	f002 f829 	bl	8005e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003e32:	2300      	movs	r3, #0
 8003e34:	e05c      	b.n	8003ef0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003e36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d106      	bne.n	8003e4a <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003e3c:	f107 0314 	add.w	r3, r7, #20
 8003e40:	4618      	mov	r0, r3
 8003e42:	f001 f935 	bl	80050b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003e46:	2301      	movs	r3, #1
 8003e48:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003e4a:	f002 f81b 	bl	8005e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003e4e:	f000 fea1 	bl	8004b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003e52:	f001 ffe7 	bl	8005e24 <vPortEnterCritical>
 8003e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e58:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e5c:	b25b      	sxtb	r3, r3
 8003e5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e62:	d103      	bne.n	8003e6c <xQueueGenericSend+0x16c>
 8003e64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e66:	2200      	movs	r2, #0
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e6c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e6e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e72:	b25b      	sxtb	r3, r3
 8003e74:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e78:	d103      	bne.n	8003e82 <xQueueGenericSend+0x182>
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e82:	f001 ffff 	bl	8005e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003e86:	1d3a      	adds	r2, r7, #4
 8003e88:	f107 0314 	add.w	r3, r7, #20
 8003e8c:	4611      	mov	r1, r2
 8003e8e:	4618      	mov	r0, r3
 8003e90:	f001 f924 	bl	80050dc <xTaskCheckForTimeOut>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d124      	bne.n	8003ee4 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003e9a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e9c:	f000 faa2 	bl	80043e4 <prvIsQueueFull>
 8003ea0:	4603      	mov	r3, r0
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d018      	beq.n	8003ed8 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003ea6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ea8:	3310      	adds	r3, #16
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	4611      	mov	r1, r2
 8003eae:	4618      	mov	r0, r3
 8003eb0:	f001 f84a 	bl	8004f48 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003eb4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eb6:	f000 fa2d 	bl	8004314 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003eba:	f000 fe79 	bl	8004bb0 <xTaskResumeAll>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	f47f af7c 	bne.w	8003dbe <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003ec6:	4b0c      	ldr	r3, [pc, #48]	; (8003ef8 <xQueueGenericSend+0x1f8>)
 8003ec8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ecc:	601a      	str	r2, [r3, #0]
 8003ece:	f3bf 8f4f 	dsb	sy
 8003ed2:	f3bf 8f6f 	isb	sy
 8003ed6:	e772      	b.n	8003dbe <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003ed8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003eda:	f000 fa1b 	bl	8004314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003ede:	f000 fe67 	bl	8004bb0 <xTaskResumeAll>
 8003ee2:	e76c      	b.n	8003dbe <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003ee4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003ee6:	f000 fa15 	bl	8004314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003eea:	f000 fe61 	bl	8004bb0 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003eee:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ef0:	4618      	mov	r0, r3
 8003ef2:	3738      	adds	r7, #56	; 0x38
 8003ef4:	46bd      	mov	sp, r7
 8003ef6:	bd80      	pop	{r7, pc}
 8003ef8:	e000ed04 	.word	0xe000ed04

08003efc <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b090      	sub	sp, #64	; 0x40
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	60f8      	str	r0, [r7, #12]
 8003f04:	60b9      	str	r1, [r7, #8]
 8003f06:	607a      	str	r2, [r7, #4]
 8003f08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003f0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f10:	2b00      	cmp	r3, #0
 8003f12:	d10a      	bne.n	8003f2a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f18:	f383 8811 	msr	BASEPRI, r3
 8003f1c:	f3bf 8f6f 	isb	sy
 8003f20:	f3bf 8f4f 	dsb	sy
 8003f24:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f26:	bf00      	nop
 8003f28:	e7fe      	b.n	8003f28 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f2a:	68bb      	ldr	r3, [r7, #8]
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d103      	bne.n	8003f38 <xQueueGenericSendFromISR+0x3c>
 8003f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d101      	bne.n	8003f3c <xQueueGenericSendFromISR+0x40>
 8003f38:	2301      	movs	r3, #1
 8003f3a:	e000      	b.n	8003f3e <xQueueGenericSendFromISR+0x42>
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d10a      	bne.n	8003f58 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003f42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f46:	f383 8811 	msr	BASEPRI, r3
 8003f4a:	f3bf 8f6f 	isb	sy
 8003f4e:	f3bf 8f4f 	dsb	sy
 8003f52:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f54:	bf00      	nop
 8003f56:	e7fe      	b.n	8003f56 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	2b02      	cmp	r3, #2
 8003f5c:	d103      	bne.n	8003f66 <xQueueGenericSendFromISR+0x6a>
 8003f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d101      	bne.n	8003f6a <xQueueGenericSendFromISR+0x6e>
 8003f66:	2301      	movs	r3, #1
 8003f68:	e000      	b.n	8003f6c <xQueueGenericSendFromISR+0x70>
 8003f6a:	2300      	movs	r3, #0
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d10a      	bne.n	8003f86 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003f70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f74:	f383 8811 	msr	BASEPRI, r3
 8003f78:	f3bf 8f6f 	isb	sy
 8003f7c:	f3bf 8f4f 	dsb	sy
 8003f80:	623b      	str	r3, [r7, #32]
}
 8003f82:	bf00      	nop
 8003f84:	e7fe      	b.n	8003f84 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003f86:	f002 f82f 	bl	8005fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003f8a:	f3ef 8211 	mrs	r2, BASEPRI
 8003f8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f92:	f383 8811 	msr	BASEPRI, r3
 8003f96:	f3bf 8f6f 	isb	sy
 8003f9a:	f3bf 8f4f 	dsb	sy
 8003f9e:	61fa      	str	r2, [r7, #28]
 8003fa0:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003fa2:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003fa4:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fa6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fa8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003faa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fae:	429a      	cmp	r2, r3
 8003fb0:	d302      	bcc.n	8003fb8 <xQueueGenericSendFromISR+0xbc>
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	2b02      	cmp	r3, #2
 8003fb6:	d12f      	bne.n	8004018 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003fb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fba:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fbe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fc6:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fc8:	683a      	ldr	r2, [r7, #0]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003fce:	f000 f911 	bl	80041f4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003fd2:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003fd6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fda:	d112      	bne.n	8004002 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d016      	beq.n	8004012 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003fe6:	3324      	adds	r3, #36	; 0x24
 8003fe8:	4618      	mov	r0, r3
 8003fea:	f000 fffd 	bl	8004fe8 <xTaskRemoveFromEventList>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d00e      	beq.n	8004012 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	2b00      	cmp	r3, #0
 8003ff8:	d00b      	beq.n	8004012 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	601a      	str	r2, [r3, #0]
 8004000:	e007      	b.n	8004012 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004002:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004006:	3301      	adds	r3, #1
 8004008:	b2db      	uxtb	r3, r3
 800400a:	b25a      	sxtb	r2, r3
 800400c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800400e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004012:	2301      	movs	r3, #1
 8004014:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004016:	e001      	b.n	800401c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004018:	2300      	movs	r3, #0
 800401a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800401c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800401e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004020:	697b      	ldr	r3, [r7, #20]
 8004022:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004026:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004028:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800402a:	4618      	mov	r0, r3
 800402c:	3740      	adds	r7, #64	; 0x40
 800402e:	46bd      	mov	sp, r7
 8004030:	bd80      	pop	{r7, pc}
	...

08004034 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004034:	b580      	push	{r7, lr}
 8004036:	b08c      	sub	sp, #48	; 0x30
 8004038:	af00      	add	r7, sp, #0
 800403a:	60f8      	str	r0, [r7, #12]
 800403c:	60b9      	str	r1, [r7, #8]
 800403e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004040:	2300      	movs	r3, #0
 8004042:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004048:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10a      	bne.n	8004064 <xQueueReceive+0x30>
	__asm volatile
 800404e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004052:	f383 8811 	msr	BASEPRI, r3
 8004056:	f3bf 8f6f 	isb	sy
 800405a:	f3bf 8f4f 	dsb	sy
 800405e:	623b      	str	r3, [r7, #32]
}
 8004060:	bf00      	nop
 8004062:	e7fe      	b.n	8004062 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004064:	68bb      	ldr	r3, [r7, #8]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d103      	bne.n	8004072 <xQueueReceive+0x3e>
 800406a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800406c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d101      	bne.n	8004076 <xQueueReceive+0x42>
 8004072:	2301      	movs	r3, #1
 8004074:	e000      	b.n	8004078 <xQueueReceive+0x44>
 8004076:	2300      	movs	r3, #0
 8004078:	2b00      	cmp	r3, #0
 800407a:	d10a      	bne.n	8004092 <xQueueReceive+0x5e>
	__asm volatile
 800407c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004080:	f383 8811 	msr	BASEPRI, r3
 8004084:	f3bf 8f6f 	isb	sy
 8004088:	f3bf 8f4f 	dsb	sy
 800408c:	61fb      	str	r3, [r7, #28]
}
 800408e:	bf00      	nop
 8004090:	e7fe      	b.n	8004090 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004092:	f001 f96b 	bl	800536c <xTaskGetSchedulerState>
 8004096:	4603      	mov	r3, r0
 8004098:	2b00      	cmp	r3, #0
 800409a:	d102      	bne.n	80040a2 <xQueueReceive+0x6e>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <xQueueReceive+0x72>
 80040a2:	2301      	movs	r3, #1
 80040a4:	e000      	b.n	80040a8 <xQueueReceive+0x74>
 80040a6:	2300      	movs	r3, #0
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d10a      	bne.n	80040c2 <xQueueReceive+0x8e>
	__asm volatile
 80040ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040b0:	f383 8811 	msr	BASEPRI, r3
 80040b4:	f3bf 8f6f 	isb	sy
 80040b8:	f3bf 8f4f 	dsb	sy
 80040bc:	61bb      	str	r3, [r7, #24]
}
 80040be:	bf00      	nop
 80040c0:	e7fe      	b.n	80040c0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80040c2:	f001 feaf 	bl	8005e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80040c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80040cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d01f      	beq.n	8004112 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80040d2:	68b9      	ldr	r1, [r7, #8]
 80040d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80040d6:	f000 f8f7 	bl	80042c8 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80040da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040dc:	1e5a      	subs	r2, r3, #1
 80040de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80040e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d00f      	beq.n	800410a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80040ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040ec:	3310      	adds	r3, #16
 80040ee:	4618      	mov	r0, r3
 80040f0:	f000 ff7a 	bl	8004fe8 <xTaskRemoveFromEventList>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d007      	beq.n	800410a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80040fa:	4b3d      	ldr	r3, [pc, #244]	; (80041f0 <xQueueReceive+0x1bc>)
 80040fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004100:	601a      	str	r2, [r3, #0]
 8004102:	f3bf 8f4f 	dsb	sy
 8004106:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800410a:	f001 febb 	bl	8005e84 <vPortExitCritical>
				return pdPASS;
 800410e:	2301      	movs	r3, #1
 8004110:	e069      	b.n	80041e6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	2b00      	cmp	r3, #0
 8004116:	d103      	bne.n	8004120 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004118:	f001 feb4 	bl	8005e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800411c:	2300      	movs	r3, #0
 800411e:	e062      	b.n	80041e6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004120:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004122:	2b00      	cmp	r3, #0
 8004124:	d106      	bne.n	8004134 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004126:	f107 0310 	add.w	r3, r7, #16
 800412a:	4618      	mov	r0, r3
 800412c:	f000 ffc0 	bl	80050b0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004130:	2301      	movs	r3, #1
 8004132:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004134:	f001 fea6 	bl	8005e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004138:	f000 fd2c 	bl	8004b94 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800413c:	f001 fe72 	bl	8005e24 <vPortEnterCritical>
 8004140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004142:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004146:	b25b      	sxtb	r3, r3
 8004148:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800414c:	d103      	bne.n	8004156 <xQueueReceive+0x122>
 800414e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004150:	2200      	movs	r2, #0
 8004152:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004156:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004158:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800415c:	b25b      	sxtb	r3, r3
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004162:	d103      	bne.n	800416c <xQueueReceive+0x138>
 8004164:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004166:	2200      	movs	r2, #0
 8004168:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800416c:	f001 fe8a 	bl	8005e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004170:	1d3a      	adds	r2, r7, #4
 8004172:	f107 0310 	add.w	r3, r7, #16
 8004176:	4611      	mov	r1, r2
 8004178:	4618      	mov	r0, r3
 800417a:	f000 ffaf 	bl	80050dc <xTaskCheckForTimeOut>
 800417e:	4603      	mov	r3, r0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d123      	bne.n	80041cc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004184:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004186:	f000 f917 	bl	80043b8 <prvIsQueueEmpty>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d017      	beq.n	80041c0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004190:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004192:	3324      	adds	r3, #36	; 0x24
 8004194:	687a      	ldr	r2, [r7, #4]
 8004196:	4611      	mov	r1, r2
 8004198:	4618      	mov	r0, r3
 800419a:	f000 fed5 	bl	8004f48 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800419e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041a0:	f000 f8b8 	bl	8004314 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80041a4:	f000 fd04 	bl	8004bb0 <xTaskResumeAll>
 80041a8:	4603      	mov	r3, r0
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d189      	bne.n	80040c2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80041ae:	4b10      	ldr	r3, [pc, #64]	; (80041f0 <xQueueReceive+0x1bc>)
 80041b0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041b4:	601a      	str	r2, [r3, #0]
 80041b6:	f3bf 8f4f 	dsb	sy
 80041ba:	f3bf 8f6f 	isb	sy
 80041be:	e780      	b.n	80040c2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80041c0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041c2:	f000 f8a7 	bl	8004314 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80041c6:	f000 fcf3 	bl	8004bb0 <xTaskResumeAll>
 80041ca:	e77a      	b.n	80040c2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80041cc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041ce:	f000 f8a1 	bl	8004314 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80041d2:	f000 fced 	bl	8004bb0 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80041d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80041d8:	f000 f8ee 	bl	80043b8 <prvIsQueueEmpty>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	f43f af6f 	beq.w	80040c2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80041e4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80041e6:	4618      	mov	r0, r3
 80041e8:	3730      	adds	r7, #48	; 0x30
 80041ea:	46bd      	mov	sp, r7
 80041ec:	bd80      	pop	{r7, pc}
 80041ee:	bf00      	nop
 80041f0:	e000ed04 	.word	0xe000ed04

080041f4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80041f4:	b580      	push	{r7, lr}
 80041f6:	b086      	sub	sp, #24
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	60f8      	str	r0, [r7, #12]
 80041fc:	60b9      	str	r1, [r7, #8]
 80041fe:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004200:	2300      	movs	r3, #0
 8004202:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004208:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420e:	2b00      	cmp	r3, #0
 8004210:	d10d      	bne.n	800422e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d14d      	bne.n	80042b6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	689b      	ldr	r3, [r3, #8]
 800421e:	4618      	mov	r0, r3
 8004220:	f001 f8c2 	bl	80053a8 <xTaskPriorityDisinherit>
 8004224:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	2200      	movs	r2, #0
 800422a:	609a      	str	r2, [r3, #8]
 800422c:	e043      	b.n	80042b6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d119      	bne.n	8004268 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	6858      	ldr	r0, [r3, #4]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800423c:	461a      	mov	r2, r3
 800423e:	68b9      	ldr	r1, [r7, #8]
 8004240:	f002 f92c 	bl	800649c <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800424c:	441a      	add	r2, r3
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	685a      	ldr	r2, [r3, #4]
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	689b      	ldr	r3, [r3, #8]
 800425a:	429a      	cmp	r2, r3
 800425c:	d32b      	bcc.n	80042b6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681a      	ldr	r2, [r3, #0]
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	e026      	b.n	80042b6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	68d8      	ldr	r0, [r3, #12]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004270:	461a      	mov	r2, r3
 8004272:	68b9      	ldr	r1, [r7, #8]
 8004274:	f002 f912 	bl	800649c <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	68da      	ldr	r2, [r3, #12]
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004280:	425b      	negs	r3, r3
 8004282:	441a      	add	r2, r3
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	68da      	ldr	r2, [r3, #12]
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	429a      	cmp	r2, r3
 8004292:	d207      	bcs.n	80042a4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	689a      	ldr	r2, [r3, #8]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429c:	425b      	negs	r3, r3
 800429e:	441a      	add	r2, r3
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2b02      	cmp	r3, #2
 80042a8:	d105      	bne.n	80042b6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042aa:	693b      	ldr	r3, [r7, #16]
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d002      	beq.n	80042b6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80042b0:	693b      	ldr	r3, [r7, #16]
 80042b2:	3b01      	subs	r3, #1
 80042b4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1c5a      	adds	r2, r3, #1
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80042be:	697b      	ldr	r3, [r7, #20]
}
 80042c0:	4618      	mov	r0, r3
 80042c2:	3718      	adds	r7, #24
 80042c4:	46bd      	mov	sp, r7
 80042c6:	bd80      	pop	{r7, pc}

080042c8 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80042c8:	b580      	push	{r7, lr}
 80042ca:	b082      	sub	sp, #8
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
 80042d0:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	d018      	beq.n	800430c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	68da      	ldr	r2, [r3, #12]
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042e2:	441a      	add	r2, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	68da      	ldr	r2, [r3, #12]
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	429a      	cmp	r2, r3
 80042f2:	d303      	bcc.n	80042fc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681a      	ldr	r2, [r3, #0]
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	68d9      	ldr	r1, [r3, #12]
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004304:	461a      	mov	r2, r3
 8004306:	6838      	ldr	r0, [r7, #0]
 8004308:	f002 f8c8 	bl	800649c <memcpy>
	}
}
 800430c:	bf00      	nop
 800430e:	3708      	adds	r7, #8
 8004310:	46bd      	mov	sp, r7
 8004312:	bd80      	pop	{r7, pc}

08004314 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b084      	sub	sp, #16
 8004318:	af00      	add	r7, sp, #0
 800431a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800431c:	f001 fd82 	bl	8005e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004326:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004328:	e011      	b.n	800434e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432e:	2b00      	cmp	r3, #0
 8004330:	d012      	beq.n	8004358 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3324      	adds	r3, #36	; 0x24
 8004336:	4618      	mov	r0, r3
 8004338:	f000 fe56 	bl	8004fe8 <xTaskRemoveFromEventList>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d001      	beq.n	8004346 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004342:	f000 ff2d 	bl	80051a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004346:	7bfb      	ldrb	r3, [r7, #15]
 8004348:	3b01      	subs	r3, #1
 800434a:	b2db      	uxtb	r3, r3
 800434c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800434e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004352:	2b00      	cmp	r3, #0
 8004354:	dce9      	bgt.n	800432a <prvUnlockQueue+0x16>
 8004356:	e000      	b.n	800435a <prvUnlockQueue+0x46>
					break;
 8004358:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	22ff      	movs	r2, #255	; 0xff
 800435e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004362:	f001 fd8f 	bl	8005e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004366:	f001 fd5d 	bl	8005e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004370:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004372:	e011      	b.n	8004398 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d012      	beq.n	80043a2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	3310      	adds	r3, #16
 8004380:	4618      	mov	r0, r3
 8004382:	f000 fe31 	bl	8004fe8 <xTaskRemoveFromEventList>
 8004386:	4603      	mov	r3, r0
 8004388:	2b00      	cmp	r3, #0
 800438a:	d001      	beq.n	8004390 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800438c:	f000 ff08 	bl	80051a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004390:	7bbb      	ldrb	r3, [r7, #14]
 8004392:	3b01      	subs	r3, #1
 8004394:	b2db      	uxtb	r3, r3
 8004396:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004398:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800439c:	2b00      	cmp	r3, #0
 800439e:	dce9      	bgt.n	8004374 <prvUnlockQueue+0x60>
 80043a0:	e000      	b.n	80043a4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80043a2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	22ff      	movs	r2, #255	; 0xff
 80043a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80043ac:	f001 fd6a 	bl	8005e84 <vPortExitCritical>
}
 80043b0:	bf00      	nop
 80043b2:	3710      	adds	r7, #16
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80043b8:	b580      	push	{r7, lr}
 80043ba:	b084      	sub	sp, #16
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043c0:	f001 fd30 	bl	8005e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d102      	bne.n	80043d2 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80043cc:	2301      	movs	r3, #1
 80043ce:	60fb      	str	r3, [r7, #12]
 80043d0:	e001      	b.n	80043d6 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80043d2:	2300      	movs	r3, #0
 80043d4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80043d6:	f001 fd55 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 80043da:	68fb      	ldr	r3, [r7, #12]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	3710      	adds	r7, #16
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}

080043e4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80043e4:	b580      	push	{r7, lr}
 80043e6:	b084      	sub	sp, #16
 80043e8:	af00      	add	r7, sp, #0
 80043ea:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80043ec:	f001 fd1a 	bl	8005e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043f8:	429a      	cmp	r2, r3
 80043fa:	d102      	bne.n	8004402 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80043fc:	2301      	movs	r3, #1
 80043fe:	60fb      	str	r3, [r7, #12]
 8004400:	e001      	b.n	8004406 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004402:	2300      	movs	r3, #0
 8004404:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004406:	f001 fd3d 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 800440a:	68fb      	ldr	r3, [r7, #12]
}
 800440c:	4618      	mov	r0, r3
 800440e:	3710      	adds	r7, #16
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
 800441c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800441e:	2300      	movs	r3, #0
 8004420:	60fb      	str	r3, [r7, #12]
 8004422:	e014      	b.n	800444e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004424:	4a0f      	ldr	r2, [pc, #60]	; (8004464 <vQueueAddToRegistry+0x50>)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800442c:	2b00      	cmp	r3, #0
 800442e:	d10b      	bne.n	8004448 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004430:	490c      	ldr	r1, [pc, #48]	; (8004464 <vQueueAddToRegistry+0x50>)
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	683a      	ldr	r2, [r7, #0]
 8004436:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800443a:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <vQueueAddToRegistry+0x50>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	00db      	lsls	r3, r3, #3
 8004440:	4413      	add	r3, r2
 8004442:	687a      	ldr	r2, [r7, #4]
 8004444:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004446:	e006      	b.n	8004456 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	3301      	adds	r3, #1
 800444c:	60fb      	str	r3, [r7, #12]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	2b07      	cmp	r3, #7
 8004452:	d9e7      	bls.n	8004424 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004454:	bf00      	nop
 8004456:	bf00      	nop
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop
 8004464:	200008f0 	.word	0x200008f0

08004468 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004468:	b580      	push	{r7, lr}
 800446a:	b086      	sub	sp, #24
 800446c:	af00      	add	r7, sp, #0
 800446e:	60f8      	str	r0, [r7, #12]
 8004470:	60b9      	str	r1, [r7, #8]
 8004472:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004474:	68fb      	ldr	r3, [r7, #12]
 8004476:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004478:	f001 fcd4 	bl	8005e24 <vPortEnterCritical>
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004482:	b25b      	sxtb	r3, r3
 8004484:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004488:	d103      	bne.n	8004492 <vQueueWaitForMessageRestricted+0x2a>
 800448a:	697b      	ldr	r3, [r7, #20]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004492:	697b      	ldr	r3, [r7, #20]
 8004494:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004498:	b25b      	sxtb	r3, r3
 800449a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800449e:	d103      	bne.n	80044a8 <vQueueWaitForMessageRestricted+0x40>
 80044a0:	697b      	ldr	r3, [r7, #20]
 80044a2:	2200      	movs	r2, #0
 80044a4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80044a8:	f001 fcec 	bl	8005e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80044ac:	697b      	ldr	r3, [r7, #20]
 80044ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d106      	bne.n	80044c2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80044b4:	697b      	ldr	r3, [r7, #20]
 80044b6:	3324      	adds	r3, #36	; 0x24
 80044b8:	687a      	ldr	r2, [r7, #4]
 80044ba:	68b9      	ldr	r1, [r7, #8]
 80044bc:	4618      	mov	r0, r3
 80044be:	f000 fd67 	bl	8004f90 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80044c2:	6978      	ldr	r0, [r7, #20]
 80044c4:	f7ff ff26 	bl	8004314 <prvUnlockQueue>
	}
 80044c8:	bf00      	nop
 80044ca:	3718      	adds	r7, #24
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}

080044d0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80044d0:	b580      	push	{r7, lr}
 80044d2:	b08e      	sub	sp, #56	; 0x38
 80044d4:	af04      	add	r7, sp, #16
 80044d6:	60f8      	str	r0, [r7, #12]
 80044d8:	60b9      	str	r1, [r7, #8]
 80044da:	607a      	str	r2, [r7, #4]
 80044dc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80044de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044e0:	2b00      	cmp	r3, #0
 80044e2:	d10a      	bne.n	80044fa <xTaskCreateStatic+0x2a>
	__asm volatile
 80044e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e8:	f383 8811 	msr	BASEPRI, r3
 80044ec:	f3bf 8f6f 	isb	sy
 80044f0:	f3bf 8f4f 	dsb	sy
 80044f4:	623b      	str	r3, [r7, #32]
}
 80044f6:	bf00      	nop
 80044f8:	e7fe      	b.n	80044f8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80044fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d10a      	bne.n	8004516 <xTaskCreateStatic+0x46>
	__asm volatile
 8004500:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004504:	f383 8811 	msr	BASEPRI, r3
 8004508:	f3bf 8f6f 	isb	sy
 800450c:	f3bf 8f4f 	dsb	sy
 8004510:	61fb      	str	r3, [r7, #28]
}
 8004512:	bf00      	nop
 8004514:	e7fe      	b.n	8004514 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004516:	23bc      	movs	r3, #188	; 0xbc
 8004518:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	2bbc      	cmp	r3, #188	; 0xbc
 800451e:	d00a      	beq.n	8004536 <xTaskCreateStatic+0x66>
	__asm volatile
 8004520:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004524:	f383 8811 	msr	BASEPRI, r3
 8004528:	f3bf 8f6f 	isb	sy
 800452c:	f3bf 8f4f 	dsb	sy
 8004530:	61bb      	str	r3, [r7, #24]
}
 8004532:	bf00      	nop
 8004534:	e7fe      	b.n	8004534 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004536:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004538:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800453a:	2b00      	cmp	r3, #0
 800453c:	d01e      	beq.n	800457c <xTaskCreateStatic+0xac>
 800453e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004540:	2b00      	cmp	r3, #0
 8004542:	d01b      	beq.n	800457c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004544:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004546:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800454a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800454c:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800454e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004550:	2202      	movs	r2, #2
 8004552:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004556:	2300      	movs	r3, #0
 8004558:	9303      	str	r3, [sp, #12]
 800455a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800455c:	9302      	str	r3, [sp, #8]
 800455e:	f107 0314 	add.w	r3, r7, #20
 8004562:	9301      	str	r3, [sp, #4]
 8004564:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004566:	9300      	str	r3, [sp, #0]
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	687a      	ldr	r2, [r7, #4]
 800456c:	68b9      	ldr	r1, [r7, #8]
 800456e:	68f8      	ldr	r0, [r7, #12]
 8004570:	f000 f850 	bl	8004614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004574:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004576:	f000 f8f3 	bl	8004760 <prvAddNewTaskToReadyList>
 800457a:	e001      	b.n	8004580 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800457c:	2300      	movs	r3, #0
 800457e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004580:	697b      	ldr	r3, [r7, #20]
	}
 8004582:	4618      	mov	r0, r3
 8004584:	3728      	adds	r7, #40	; 0x28
 8004586:	46bd      	mov	sp, r7
 8004588:	bd80      	pop	{r7, pc}

0800458a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800458a:	b580      	push	{r7, lr}
 800458c:	b08c      	sub	sp, #48	; 0x30
 800458e:	af04      	add	r7, sp, #16
 8004590:	60f8      	str	r0, [r7, #12]
 8004592:	60b9      	str	r1, [r7, #8]
 8004594:	603b      	str	r3, [r7, #0]
 8004596:	4613      	mov	r3, r2
 8004598:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800459a:	88fb      	ldrh	r3, [r7, #6]
 800459c:	009b      	lsls	r3, r3, #2
 800459e:	4618      	mov	r0, r3
 80045a0:	f001 fd62 	bl	8006068 <pvPortMalloc>
 80045a4:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80045ac:	20bc      	movs	r0, #188	; 0xbc
 80045ae:	f001 fd5b 	bl	8006068 <pvPortMalloc>
 80045b2:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80045b4:	69fb      	ldr	r3, [r7, #28]
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80045ba:	69fb      	ldr	r3, [r7, #28]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	631a      	str	r2, [r3, #48]	; 0x30
 80045c0:	e005      	b.n	80045ce <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80045c2:	6978      	ldr	r0, [r7, #20]
 80045c4:	f001 fe1c 	bl	8006200 <vPortFree>
 80045c8:	e001      	b.n	80045ce <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80045ca:	2300      	movs	r3, #0
 80045cc:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80045ce:	69fb      	ldr	r3, [r7, #28]
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d017      	beq.n	8004604 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	2200      	movs	r2, #0
 80045d8:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80045dc:	88fa      	ldrh	r2, [r7, #6]
 80045de:	2300      	movs	r3, #0
 80045e0:	9303      	str	r3, [sp, #12]
 80045e2:	69fb      	ldr	r3, [r7, #28]
 80045e4:	9302      	str	r3, [sp, #8]
 80045e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045e8:	9301      	str	r3, [sp, #4]
 80045ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68b9      	ldr	r1, [r7, #8]
 80045f2:	68f8      	ldr	r0, [r7, #12]
 80045f4:	f000 f80e 	bl	8004614 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80045f8:	69f8      	ldr	r0, [r7, #28]
 80045fa:	f000 f8b1 	bl	8004760 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80045fe:	2301      	movs	r3, #1
 8004600:	61bb      	str	r3, [r7, #24]
 8004602:	e002      	b.n	800460a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004604:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004608:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800460a:	69bb      	ldr	r3, [r7, #24]
	}
 800460c:	4618      	mov	r0, r3
 800460e:	3720      	adds	r7, #32
 8004610:	46bd      	mov	sp, r7
 8004612:	bd80      	pop	{r7, pc}

08004614 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b088      	sub	sp, #32
 8004618:	af00      	add	r7, sp, #0
 800461a:	60f8      	str	r0, [r7, #12]
 800461c:	60b9      	str	r1, [r7, #8]
 800461e:	607a      	str	r2, [r7, #4]
 8004620:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004622:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004624:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	009b      	lsls	r3, r3, #2
 800462a:	461a      	mov	r2, r3
 800462c:	21a5      	movs	r1, #165	; 0xa5
 800462e:	f001 ff43 	bl	80064b8 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800463c:	3b01      	subs	r3, #1
 800463e:	009b      	lsls	r3, r3, #2
 8004640:	4413      	add	r3, r2
 8004642:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004644:	69bb      	ldr	r3, [r7, #24]
 8004646:	f023 0307 	bic.w	r3, r3, #7
 800464a:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800464c:	69bb      	ldr	r3, [r7, #24]
 800464e:	f003 0307 	and.w	r3, r3, #7
 8004652:	2b00      	cmp	r3, #0
 8004654:	d00a      	beq.n	800466c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004656:	f04f 0350 	mov.w	r3, #80	; 0x50
 800465a:	f383 8811 	msr	BASEPRI, r3
 800465e:	f3bf 8f6f 	isb	sy
 8004662:	f3bf 8f4f 	dsb	sy
 8004666:	617b      	str	r3, [r7, #20]
}
 8004668:	bf00      	nop
 800466a:	e7fe      	b.n	800466a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800466c:	68bb      	ldr	r3, [r7, #8]
 800466e:	2b00      	cmp	r3, #0
 8004670:	d01f      	beq.n	80046b2 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004672:	2300      	movs	r3, #0
 8004674:	61fb      	str	r3, [r7, #28]
 8004676:	e012      	b.n	800469e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	69fb      	ldr	r3, [r7, #28]
 800467c:	4413      	add	r3, r2
 800467e:	7819      	ldrb	r1, [r3, #0]
 8004680:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	4413      	add	r3, r2
 8004686:	3334      	adds	r3, #52	; 0x34
 8004688:	460a      	mov	r2, r1
 800468a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800468c:	68ba      	ldr	r2, [r7, #8]
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	4413      	add	r3, r2
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d006      	beq.n	80046a6 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004698:	69fb      	ldr	r3, [r7, #28]
 800469a:	3301      	adds	r3, #1
 800469c:	61fb      	str	r3, [r7, #28]
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2b0f      	cmp	r3, #15
 80046a2:	d9e9      	bls.n	8004678 <prvInitialiseNewTask+0x64>
 80046a4:	e000      	b.n	80046a8 <prvInitialiseNewTask+0x94>
			{
				break;
 80046a6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80046a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046aa:	2200      	movs	r2, #0
 80046ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80046b0:	e003      	b.n	80046ba <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80046b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046b4:	2200      	movs	r2, #0
 80046b6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80046ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046bc:	2b37      	cmp	r3, #55	; 0x37
 80046be:	d901      	bls.n	80046c4 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80046c0:	2337      	movs	r3, #55	; 0x37
 80046c2:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80046c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046c8:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80046ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80046ce:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	2200      	movs	r2, #0
 80046d4:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80046d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d8:	3304      	adds	r3, #4
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff f978 	bl	80039d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80046e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e2:	3318      	adds	r3, #24
 80046e4:	4618      	mov	r0, r3
 80046e6:	f7ff f973 	bl	80039d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80046ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046ec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046ee:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046f2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80046f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046f8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80046fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80046fe:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004702:	2200      	movs	r2, #0
 8004704:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800470a:	2200      	movs	r2, #0
 800470c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004710:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004712:	3354      	adds	r3, #84	; 0x54
 8004714:	2260      	movs	r2, #96	; 0x60
 8004716:	2100      	movs	r1, #0
 8004718:	4618      	mov	r0, r3
 800471a:	f001 fecd 	bl	80064b8 <memset>
 800471e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004720:	4a0c      	ldr	r2, [pc, #48]	; (8004754 <prvInitialiseNewTask+0x140>)
 8004722:	659a      	str	r2, [r3, #88]	; 0x58
 8004724:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004726:	4a0c      	ldr	r2, [pc, #48]	; (8004758 <prvInitialiseNewTask+0x144>)
 8004728:	65da      	str	r2, [r3, #92]	; 0x5c
 800472a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800472c:	4a0b      	ldr	r2, [pc, #44]	; (800475c <prvInitialiseNewTask+0x148>)
 800472e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004730:	683a      	ldr	r2, [r7, #0]
 8004732:	68f9      	ldr	r1, [r7, #12]
 8004734:	69b8      	ldr	r0, [r7, #24]
 8004736:	f001 fa47 	bl	8005bc8 <pxPortInitialiseStack>
 800473a:	4602      	mov	r2, r0
 800473c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800473e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004740:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004742:	2b00      	cmp	r3, #0
 8004744:	d002      	beq.n	800474c <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8004746:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004748:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800474a:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800474c:	bf00      	nop
 800474e:	3720      	adds	r7, #32
 8004750:	46bd      	mov	sp, r7
 8004752:	bd80      	pop	{r7, pc}
 8004754:	080072e0 	.word	0x080072e0
 8004758:	08007300 	.word	0x08007300
 800475c:	080072c0 	.word	0x080072c0

08004760 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b082      	sub	sp, #8
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004768:	f001 fb5c 	bl	8005e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800476c:	4b2d      	ldr	r3, [pc, #180]	; (8004824 <prvAddNewTaskToReadyList+0xc4>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	3301      	adds	r3, #1
 8004772:	4a2c      	ldr	r2, [pc, #176]	; (8004824 <prvAddNewTaskToReadyList+0xc4>)
 8004774:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004776:	4b2c      	ldr	r3, [pc, #176]	; (8004828 <prvAddNewTaskToReadyList+0xc8>)
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d109      	bne.n	8004792 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800477e:	4a2a      	ldr	r2, [pc, #168]	; (8004828 <prvAddNewTaskToReadyList+0xc8>)
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004784:	4b27      	ldr	r3, [pc, #156]	; (8004824 <prvAddNewTaskToReadyList+0xc4>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	2b01      	cmp	r3, #1
 800478a:	d110      	bne.n	80047ae <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800478c:	f000 fd2c 	bl	80051e8 <prvInitialiseTaskLists>
 8004790:	e00d      	b.n	80047ae <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004792:	4b26      	ldr	r3, [pc, #152]	; (800482c <prvAddNewTaskToReadyList+0xcc>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d109      	bne.n	80047ae <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800479a:	4b23      	ldr	r3, [pc, #140]	; (8004828 <prvAddNewTaskToReadyList+0xc8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d802      	bhi.n	80047ae <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80047a8:	4a1f      	ldr	r2, [pc, #124]	; (8004828 <prvAddNewTaskToReadyList+0xc8>)
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80047ae:	4b20      	ldr	r3, [pc, #128]	; (8004830 <prvAddNewTaskToReadyList+0xd0>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	3301      	adds	r3, #1
 80047b4:	4a1e      	ldr	r2, [pc, #120]	; (8004830 <prvAddNewTaskToReadyList+0xd0>)
 80047b6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80047b8:	4b1d      	ldr	r3, [pc, #116]	; (8004830 <prvAddNewTaskToReadyList+0xd0>)
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c4:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <prvAddNewTaskToReadyList+0xd4>)
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	429a      	cmp	r2, r3
 80047ca:	d903      	bls.n	80047d4 <prvAddNewTaskToReadyList+0x74>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047d0:	4a18      	ldr	r2, [pc, #96]	; (8004834 <prvAddNewTaskToReadyList+0xd4>)
 80047d2:	6013      	str	r3, [r2, #0]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d8:	4613      	mov	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4413      	add	r3, r2
 80047de:	009b      	lsls	r3, r3, #2
 80047e0:	4a15      	ldr	r2, [pc, #84]	; (8004838 <prvAddNewTaskToReadyList+0xd8>)
 80047e2:	441a      	add	r2, r3
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	3304      	adds	r3, #4
 80047e8:	4619      	mov	r1, r3
 80047ea:	4610      	mov	r0, r2
 80047ec:	f7ff f8fd 	bl	80039ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80047f0:	f001 fb48 	bl	8005e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80047f4:	4b0d      	ldr	r3, [pc, #52]	; (800482c <prvAddNewTaskToReadyList+0xcc>)
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d00e      	beq.n	800481a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80047fc:	4b0a      	ldr	r3, [pc, #40]	; (8004828 <prvAddNewTaskToReadyList+0xc8>)
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004806:	429a      	cmp	r2, r3
 8004808:	d207      	bcs.n	800481a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800480a:	4b0c      	ldr	r3, [pc, #48]	; (800483c <prvAddNewTaskToReadyList+0xdc>)
 800480c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004810:	601a      	str	r2, [r3, #0]
 8004812:	f3bf 8f4f 	dsb	sy
 8004816:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800481a:	bf00      	nop
 800481c:	3708      	adds	r7, #8
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}
 8004822:	bf00      	nop
 8004824:	20000e04 	.word	0x20000e04
 8004828:	20000930 	.word	0x20000930
 800482c:	20000e10 	.word	0x20000e10
 8004830:	20000e20 	.word	0x20000e20
 8004834:	20000e0c 	.word	0x20000e0c
 8004838:	20000934 	.word	0x20000934
 800483c:	e000ed04 	.word	0xe000ed04

08004840 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004840:	b580      	push	{r7, lr}
 8004842:	b084      	sub	sp, #16
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004848:	2300      	movs	r3, #0
 800484a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d017      	beq.n	8004882 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004852:	4b13      	ldr	r3, [pc, #76]	; (80048a0 <vTaskDelay+0x60>)
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	2b00      	cmp	r3, #0
 8004858:	d00a      	beq.n	8004870 <vTaskDelay+0x30>
	__asm volatile
 800485a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800485e:	f383 8811 	msr	BASEPRI, r3
 8004862:	f3bf 8f6f 	isb	sy
 8004866:	f3bf 8f4f 	dsb	sy
 800486a:	60bb      	str	r3, [r7, #8]
}
 800486c:	bf00      	nop
 800486e:	e7fe      	b.n	800486e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004870:	f000 f990 	bl	8004b94 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004874:	2100      	movs	r1, #0
 8004876:	6878      	ldr	r0, [r7, #4]
 8004878:	f000 fe04 	bl	8005484 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800487c:	f000 f998 	bl	8004bb0 <xTaskResumeAll>
 8004880:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d107      	bne.n	8004898 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004888:	4b06      	ldr	r3, [pc, #24]	; (80048a4 <vTaskDelay+0x64>)
 800488a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800488e:	601a      	str	r2, [r3, #0]
 8004890:	f3bf 8f4f 	dsb	sy
 8004894:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004898:	bf00      	nop
 800489a:	3710      	adds	r7, #16
 800489c:	46bd      	mov	sp, r7
 800489e:	bd80      	pop	{r7, pc}
 80048a0:	20000e2c 	.word	0x20000e2c
 80048a4:	e000ed04 	.word	0xe000ed04

080048a8 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 80048a8:	b580      	push	{r7, lr}
 80048aa:	b084      	sub	sp, #16
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80048b0:	f001 fab8 	bl	8005e24 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d102      	bne.n	80048c0 <vTaskSuspend+0x18>
 80048ba:	4b30      	ldr	r3, [pc, #192]	; (800497c <vTaskSuspend+0xd4>)
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	e000      	b.n	80048c2 <vTaskSuspend+0x1a>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	3304      	adds	r3, #4
 80048c8:	4618      	mov	r0, r3
 80048ca:	f7ff f8eb 	bl	8003aa4 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d004      	beq.n	80048e0 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3318      	adds	r3, #24
 80048da:	4618      	mov	r0, r3
 80048dc:	f7ff f8e2 	bl	8003aa4 <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	3304      	adds	r3, #4
 80048e4:	4619      	mov	r1, r3
 80048e6:	4826      	ldr	r0, [pc, #152]	; (8004980 <vTaskSuspend+0xd8>)
 80048e8:	f7ff f87f 	bl	80039ea <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80048f2:	b2db      	uxtb	r3, r3
 80048f4:	2b01      	cmp	r3, #1
 80048f6:	d103      	bne.n	8004900 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80048f8:	68fb      	ldr	r3, [r7, #12]
 80048fa:	2200      	movs	r2, #0
 80048fc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004900:	f001 fac0 	bl	8005e84 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 8004904:	4b1f      	ldr	r3, [pc, #124]	; (8004984 <vTaskSuspend+0xdc>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d005      	beq.n	8004918 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 800490c:	f001 fa8a 	bl	8005e24 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004910:	f000 fd0c 	bl	800532c <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 8004914:	f001 fab6 	bl	8005e84 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004918:	4b18      	ldr	r3, [pc, #96]	; (800497c <vTaskSuspend+0xd4>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68fa      	ldr	r2, [r7, #12]
 800491e:	429a      	cmp	r2, r3
 8004920:	d127      	bne.n	8004972 <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 8004922:	4b18      	ldr	r3, [pc, #96]	; (8004984 <vTaskSuspend+0xdc>)
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d017      	beq.n	800495a <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 800492a:	4b17      	ldr	r3, [pc, #92]	; (8004988 <vTaskSuspend+0xe0>)
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00a      	beq.n	8004948 <vTaskSuspend+0xa0>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	60bb      	str	r3, [r7, #8]
}
 8004944:	bf00      	nop
 8004946:	e7fe      	b.n	8004946 <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 8004948:	4b10      	ldr	r3, [pc, #64]	; (800498c <vTaskSuspend+0xe4>)
 800494a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800494e:	601a      	str	r2, [r3, #0]
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004958:	e00b      	b.n	8004972 <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 800495a:	4b09      	ldr	r3, [pc, #36]	; (8004980 <vTaskSuspend+0xd8>)
 800495c:	681a      	ldr	r2, [r3, #0]
 800495e:	4b0c      	ldr	r3, [pc, #48]	; (8004990 <vTaskSuspend+0xe8>)
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	429a      	cmp	r2, r3
 8004964:	d103      	bne.n	800496e <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 8004966:	4b05      	ldr	r3, [pc, #20]	; (800497c <vTaskSuspend+0xd4>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]
	}
 800496c:	e001      	b.n	8004972 <vTaskSuspend+0xca>
					vTaskSwitchContext();
 800496e:	f000 fa87 	bl	8004e80 <vTaskSwitchContext>
	}
 8004972:	bf00      	nop
 8004974:	3710      	adds	r7, #16
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	20000930 	.word	0x20000930
 8004980:	20000df0 	.word	0x20000df0
 8004984:	20000e10 	.word	0x20000e10
 8004988:	20000e2c 	.word	0x20000e2c
 800498c:	e000ed04 	.word	0xe000ed04
 8004990:	20000e04 	.word	0x20000e04

08004994 <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 8004994:	b480      	push	{r7}
 8004996:	b087      	sub	sp, #28
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 800499c:	2300      	movs	r3, #0
 800499e:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2b00      	cmp	r3, #0
 80049a8:	d10a      	bne.n	80049c0 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 80049aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ae:	f383 8811 	msr	BASEPRI, r3
 80049b2:	f3bf 8f6f 	isb	sy
 80049b6:	f3bf 8f4f 	dsb	sy
 80049ba:	60fb      	str	r3, [r7, #12]
}
 80049bc:	bf00      	nop
 80049be:	e7fe      	b.n	80049be <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	695b      	ldr	r3, [r3, #20]
 80049c4:	4a0a      	ldr	r2, [pc, #40]	; (80049f0 <prvTaskIsTaskSuspended+0x5c>)
 80049c6:	4293      	cmp	r3, r2
 80049c8:	d10a      	bne.n	80049e0 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 80049ca:	693b      	ldr	r3, [r7, #16]
 80049cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ce:	4a09      	ldr	r2, [pc, #36]	; (80049f4 <prvTaskIsTaskSuspended+0x60>)
 80049d0:	4293      	cmp	r3, r2
 80049d2:	d005      	beq.n	80049e0 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 80049d4:	693b      	ldr	r3, [r7, #16]
 80049d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d101      	bne.n	80049e0 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 80049dc:	2301      	movs	r3, #1
 80049de:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80049e0:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 80049e2:	4618      	mov	r0, r3
 80049e4:	371c      	adds	r7, #28
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr
 80049ee:	bf00      	nop
 80049f0:	20000df0 	.word	0x20000df0
 80049f4:	20000dc4 	.word	0x20000dc4

080049f8 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 80049f8:	b580      	push	{r7, lr}
 80049fa:	b084      	sub	sp, #16
 80049fc:	af00      	add	r7, sp, #0
 80049fe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d10a      	bne.n	8004a20 <vTaskResume+0x28>
	__asm volatile
 8004a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a0e:	f383 8811 	msr	BASEPRI, r3
 8004a12:	f3bf 8f6f 	isb	sy
 8004a16:	f3bf 8f4f 	dsb	sy
 8004a1a:	60bb      	str	r3, [r7, #8]
}
 8004a1c:	bf00      	nop
 8004a1e:	e7fe      	b.n	8004a1e <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004a20:	4b20      	ldr	r3, [pc, #128]	; (8004aa4 <vTaskResume+0xac>)
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	68fa      	ldr	r2, [r7, #12]
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d038      	beq.n	8004a9c <vTaskResume+0xa4>
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d035      	beq.n	8004a9c <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8004a30:	f001 f9f8 	bl	8005e24 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 8004a34:	68f8      	ldr	r0, [r7, #12]
 8004a36:	f7ff ffad 	bl	8004994 <prvTaskIsTaskSuspended>
 8004a3a:	4603      	mov	r3, r0
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d02b      	beq.n	8004a98 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	3304      	adds	r3, #4
 8004a44:	4618      	mov	r0, r3
 8004a46:	f7ff f82d 	bl	8003aa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a4e:	4b16      	ldr	r3, [pc, #88]	; (8004aa8 <vTaskResume+0xb0>)
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	429a      	cmp	r2, r3
 8004a54:	d903      	bls.n	8004a5e <vTaskResume+0x66>
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a5a:	4a13      	ldr	r2, [pc, #76]	; (8004aa8 <vTaskResume+0xb0>)
 8004a5c:	6013      	str	r3, [r2, #0]
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a62:	4613      	mov	r3, r2
 8004a64:	009b      	lsls	r3, r3, #2
 8004a66:	4413      	add	r3, r2
 8004a68:	009b      	lsls	r3, r3, #2
 8004a6a:	4a10      	ldr	r2, [pc, #64]	; (8004aac <vTaskResume+0xb4>)
 8004a6c:	441a      	add	r2, r3
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	3304      	adds	r3, #4
 8004a72:	4619      	mov	r1, r3
 8004a74:	4610      	mov	r0, r2
 8004a76:	f7fe ffb8 	bl	80039ea <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004a7a:	68fb      	ldr	r3, [r7, #12]
 8004a7c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a7e:	4b09      	ldr	r3, [pc, #36]	; (8004aa4 <vTaskResume+0xac>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a84:	429a      	cmp	r2, r3
 8004a86:	d307      	bcc.n	8004a98 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 8004a88:	4b09      	ldr	r3, [pc, #36]	; (8004ab0 <vTaskResume+0xb8>)
 8004a8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a8e:	601a      	str	r2, [r3, #0]
 8004a90:	f3bf 8f4f 	dsb	sy
 8004a94:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 8004a98:	f001 f9f4 	bl	8005e84 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004a9c:	bf00      	nop
 8004a9e:	3710      	adds	r7, #16
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bd80      	pop	{r7, pc}
 8004aa4:	20000930 	.word	0x20000930
 8004aa8:	20000e0c 	.word	0x20000e0c
 8004aac:	20000934 	.word	0x20000934
 8004ab0:	e000ed04 	.word	0xe000ed04

08004ab4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b08a      	sub	sp, #40	; 0x28
 8004ab8:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004abe:	2300      	movs	r3, #0
 8004ac0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004ac2:	463a      	mov	r2, r7
 8004ac4:	1d39      	adds	r1, r7, #4
 8004ac6:	f107 0308 	add.w	r3, r7, #8
 8004aca:	4618      	mov	r0, r3
 8004acc:	f7fe ff2c 	bl	8003928 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ad0:	6839      	ldr	r1, [r7, #0]
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	68ba      	ldr	r2, [r7, #8]
 8004ad6:	9202      	str	r2, [sp, #8]
 8004ad8:	9301      	str	r3, [sp, #4]
 8004ada:	2300      	movs	r3, #0
 8004adc:	9300      	str	r3, [sp, #0]
 8004ade:	2300      	movs	r3, #0
 8004ae0:	460a      	mov	r2, r1
 8004ae2:	4924      	ldr	r1, [pc, #144]	; (8004b74 <vTaskStartScheduler+0xc0>)
 8004ae4:	4824      	ldr	r0, [pc, #144]	; (8004b78 <vTaskStartScheduler+0xc4>)
 8004ae6:	f7ff fcf3 	bl	80044d0 <xTaskCreateStatic>
 8004aea:	4603      	mov	r3, r0
 8004aec:	4a23      	ldr	r2, [pc, #140]	; (8004b7c <vTaskStartScheduler+0xc8>)
 8004aee:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004af0:	4b22      	ldr	r3, [pc, #136]	; (8004b7c <vTaskStartScheduler+0xc8>)
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d002      	beq.n	8004afe <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004af8:	2301      	movs	r3, #1
 8004afa:	617b      	str	r3, [r7, #20]
 8004afc:	e001      	b.n	8004b02 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004afe:	2300      	movs	r3, #0
 8004b00:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d102      	bne.n	8004b0e <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b08:	f000 fd10 	bl	800552c <xTimerCreateTimerTask>
 8004b0c:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b0e:	697b      	ldr	r3, [r7, #20]
 8004b10:	2b01      	cmp	r3, #1
 8004b12:	d11b      	bne.n	8004b4c <vTaskStartScheduler+0x98>
	__asm volatile
 8004b14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b18:	f383 8811 	msr	BASEPRI, r3
 8004b1c:	f3bf 8f6f 	isb	sy
 8004b20:	f3bf 8f4f 	dsb	sy
 8004b24:	613b      	str	r3, [r7, #16]
}
 8004b26:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b28:	4b15      	ldr	r3, [pc, #84]	; (8004b80 <vTaskStartScheduler+0xcc>)
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	3354      	adds	r3, #84	; 0x54
 8004b2e:	4a15      	ldr	r2, [pc, #84]	; (8004b84 <vTaskStartScheduler+0xd0>)
 8004b30:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b32:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <vTaskStartScheduler+0xd4>)
 8004b34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b38:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b3a:	4b14      	ldr	r3, [pc, #80]	; (8004b8c <vTaskStartScheduler+0xd8>)
 8004b3c:	2201      	movs	r2, #1
 8004b3e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b40:	4b13      	ldr	r3, [pc, #76]	; (8004b90 <vTaskStartScheduler+0xdc>)
 8004b42:	2200      	movs	r2, #0
 8004b44:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b46:	f001 f8cb 	bl	8005ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b4a:	e00e      	b.n	8004b6a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b52:	d10a      	bne.n	8004b6a <vTaskStartScheduler+0xb6>
	__asm volatile
 8004b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b58:	f383 8811 	msr	BASEPRI, r3
 8004b5c:	f3bf 8f6f 	isb	sy
 8004b60:	f3bf 8f4f 	dsb	sy
 8004b64:	60fb      	str	r3, [r7, #12]
}
 8004b66:	bf00      	nop
 8004b68:	e7fe      	b.n	8004b68 <vTaskStartScheduler+0xb4>
}
 8004b6a:	bf00      	nop
 8004b6c:	3718      	adds	r7, #24
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
 8004b72:	bf00      	nop
 8004b74:	08007114 	.word	0x08007114
 8004b78:	080051b9 	.word	0x080051b9
 8004b7c:	20000e28 	.word	0x20000e28
 8004b80:	20000930 	.word	0x20000930
 8004b84:	20000014 	.word	0x20000014
 8004b88:	20000e24 	.word	0x20000e24
 8004b8c:	20000e10 	.word	0x20000e10
 8004b90:	20000e08 	.word	0x20000e08

08004b94 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b94:	b480      	push	{r7}
 8004b96:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004b98:	4b04      	ldr	r3, [pc, #16]	; (8004bac <vTaskSuspendAll+0x18>)
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	3301      	adds	r3, #1
 8004b9e:	4a03      	ldr	r2, [pc, #12]	; (8004bac <vTaskSuspendAll+0x18>)
 8004ba0:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004ba2:	bf00      	nop
 8004ba4:	46bd      	mov	sp, r7
 8004ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004baa:	4770      	bx	lr
 8004bac:	20000e2c 	.word	0x20000e2c

08004bb0 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b084      	sub	sp, #16
 8004bb4:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bbe:	4b42      	ldr	r3, [pc, #264]	; (8004cc8 <xTaskResumeAll+0x118>)
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d10a      	bne.n	8004bdc <xTaskResumeAll+0x2c>
	__asm volatile
 8004bc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bca:	f383 8811 	msr	BASEPRI, r3
 8004bce:	f3bf 8f6f 	isb	sy
 8004bd2:	f3bf 8f4f 	dsb	sy
 8004bd6:	603b      	str	r3, [r7, #0]
}
 8004bd8:	bf00      	nop
 8004bda:	e7fe      	b.n	8004bda <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004bdc:	f001 f922 	bl	8005e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004be0:	4b39      	ldr	r3, [pc, #228]	; (8004cc8 <xTaskResumeAll+0x118>)
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	3b01      	subs	r3, #1
 8004be6:	4a38      	ldr	r2, [pc, #224]	; (8004cc8 <xTaskResumeAll+0x118>)
 8004be8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bea:	4b37      	ldr	r3, [pc, #220]	; (8004cc8 <xTaskResumeAll+0x118>)
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d162      	bne.n	8004cb8 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bf2:	4b36      	ldr	r3, [pc, #216]	; (8004ccc <xTaskResumeAll+0x11c>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d05e      	beq.n	8004cb8 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004bfa:	e02f      	b.n	8004c5c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bfc:	4b34      	ldr	r3, [pc, #208]	; (8004cd0 <xTaskResumeAll+0x120>)
 8004bfe:	68db      	ldr	r3, [r3, #12]
 8004c00:	68db      	ldr	r3, [r3, #12]
 8004c02:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	3318      	adds	r3, #24
 8004c08:	4618      	mov	r0, r3
 8004c0a:	f7fe ff4b 	bl	8003aa4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	3304      	adds	r3, #4
 8004c12:	4618      	mov	r0, r3
 8004c14:	f7fe ff46 	bl	8003aa4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c1c:	4b2d      	ldr	r3, [pc, #180]	; (8004cd4 <xTaskResumeAll+0x124>)
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	429a      	cmp	r2, r3
 8004c22:	d903      	bls.n	8004c2c <xTaskResumeAll+0x7c>
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c28:	4a2a      	ldr	r2, [pc, #168]	; (8004cd4 <xTaskResumeAll+0x124>)
 8004c2a:	6013      	str	r3, [r2, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c30:	4613      	mov	r3, r2
 8004c32:	009b      	lsls	r3, r3, #2
 8004c34:	4413      	add	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4a27      	ldr	r2, [pc, #156]	; (8004cd8 <xTaskResumeAll+0x128>)
 8004c3a:	441a      	add	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	3304      	adds	r3, #4
 8004c40:	4619      	mov	r1, r3
 8004c42:	4610      	mov	r0, r2
 8004c44:	f7fe fed1 	bl	80039ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4c:	4b23      	ldr	r3, [pc, #140]	; (8004cdc <xTaskResumeAll+0x12c>)
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d302      	bcc.n	8004c5c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c56:	4b22      	ldr	r3, [pc, #136]	; (8004ce0 <xTaskResumeAll+0x130>)
 8004c58:	2201      	movs	r2, #1
 8004c5a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c5c:	4b1c      	ldr	r3, [pc, #112]	; (8004cd0 <xTaskResumeAll+0x120>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d1cb      	bne.n	8004bfc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d001      	beq.n	8004c6e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c6a:	f000 fb5f 	bl	800532c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c6e:	4b1d      	ldr	r3, [pc, #116]	; (8004ce4 <xTaskResumeAll+0x134>)
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d010      	beq.n	8004c9c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c7a:	f000 f847 	bl	8004d0c <xTaskIncrementTick>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	d002      	beq.n	8004c8a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c84:	4b16      	ldr	r3, [pc, #88]	; (8004ce0 <xTaskResumeAll+0x130>)
 8004c86:	2201      	movs	r2, #1
 8004c88:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	3b01      	subs	r3, #1
 8004c8e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1f1      	bne.n	8004c7a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c96:	4b13      	ldr	r3, [pc, #76]	; (8004ce4 <xTaskResumeAll+0x134>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004c9c:	4b10      	ldr	r3, [pc, #64]	; (8004ce0 <xTaskResumeAll+0x130>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d009      	beq.n	8004cb8 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004ca8:	4b0f      	ldr	r3, [pc, #60]	; (8004ce8 <xTaskResumeAll+0x138>)
 8004caa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cae:	601a      	str	r2, [r3, #0]
 8004cb0:	f3bf 8f4f 	dsb	sy
 8004cb4:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cb8:	f001 f8e4 	bl	8005e84 <vPortExitCritical>

	return xAlreadyYielded;
 8004cbc:	68bb      	ldr	r3, [r7, #8]
}
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	3710      	adds	r7, #16
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	bd80      	pop	{r7, pc}
 8004cc6:	bf00      	nop
 8004cc8:	20000e2c 	.word	0x20000e2c
 8004ccc:	20000e04 	.word	0x20000e04
 8004cd0:	20000dc4 	.word	0x20000dc4
 8004cd4:	20000e0c 	.word	0x20000e0c
 8004cd8:	20000934 	.word	0x20000934
 8004cdc:	20000930 	.word	0x20000930
 8004ce0:	20000e18 	.word	0x20000e18
 8004ce4:	20000e14 	.word	0x20000e14
 8004ce8:	e000ed04 	.word	0xe000ed04

08004cec <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cec:	b480      	push	{r7}
 8004cee:	b083      	sub	sp, #12
 8004cf0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cf2:	4b05      	ldr	r3, [pc, #20]	; (8004d08 <xTaskGetTickCount+0x1c>)
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004cf8:	687b      	ldr	r3, [r7, #4]
}
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	370c      	adds	r7, #12
 8004cfe:	46bd      	mov	sp, r7
 8004d00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d04:	4770      	bx	lr
 8004d06:	bf00      	nop
 8004d08:	20000e08 	.word	0x20000e08

08004d0c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d0c:	b580      	push	{r7, lr}
 8004d0e:	b086      	sub	sp, #24
 8004d10:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d12:	2300      	movs	r3, #0
 8004d14:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d16:	4b4f      	ldr	r3, [pc, #316]	; (8004e54 <xTaskIncrementTick+0x148>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	f040 808f 	bne.w	8004e3e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d20:	4b4d      	ldr	r3, [pc, #308]	; (8004e58 <xTaskIncrementTick+0x14c>)
 8004d22:	681b      	ldr	r3, [r3, #0]
 8004d24:	3301      	adds	r3, #1
 8004d26:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d28:	4a4b      	ldr	r2, [pc, #300]	; (8004e58 <xTaskIncrementTick+0x14c>)
 8004d2a:	693b      	ldr	r3, [r7, #16]
 8004d2c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d120      	bne.n	8004d76 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d34:	4b49      	ldr	r3, [pc, #292]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	2b00      	cmp	r3, #0
 8004d3c:	d00a      	beq.n	8004d54 <xTaskIncrementTick+0x48>
	__asm volatile
 8004d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d42:	f383 8811 	msr	BASEPRI, r3
 8004d46:	f3bf 8f6f 	isb	sy
 8004d4a:	f3bf 8f4f 	dsb	sy
 8004d4e:	603b      	str	r3, [r7, #0]
}
 8004d50:	bf00      	nop
 8004d52:	e7fe      	b.n	8004d52 <xTaskIncrementTick+0x46>
 8004d54:	4b41      	ldr	r3, [pc, #260]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	60fb      	str	r3, [r7, #12]
 8004d5a:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <xTaskIncrementTick+0x154>)
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	4a3f      	ldr	r2, [pc, #252]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d60:	6013      	str	r3, [r2, #0]
 8004d62:	4a3f      	ldr	r2, [pc, #252]	; (8004e60 <xTaskIncrementTick+0x154>)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6013      	str	r3, [r2, #0]
 8004d68:	4b3e      	ldr	r3, [pc, #248]	; (8004e64 <xTaskIncrementTick+0x158>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	3301      	adds	r3, #1
 8004d6e:	4a3d      	ldr	r2, [pc, #244]	; (8004e64 <xTaskIncrementTick+0x158>)
 8004d70:	6013      	str	r3, [r2, #0]
 8004d72:	f000 fadb 	bl	800532c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d76:	4b3c      	ldr	r3, [pc, #240]	; (8004e68 <xTaskIncrementTick+0x15c>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	693a      	ldr	r2, [r7, #16]
 8004d7c:	429a      	cmp	r2, r3
 8004d7e:	d349      	bcc.n	8004e14 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d80:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d104      	bne.n	8004d94 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d8a:	4b37      	ldr	r3, [pc, #220]	; (8004e68 <xTaskIncrementTick+0x15c>)
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d90:	601a      	str	r2, [r3, #0]
					break;
 8004d92:	e03f      	b.n	8004e14 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d94:	4b31      	ldr	r3, [pc, #196]	; (8004e5c <xTaskIncrementTick+0x150>)
 8004d96:	681b      	ldr	r3, [r3, #0]
 8004d98:	68db      	ldr	r3, [r3, #12]
 8004d9a:	68db      	ldr	r3, [r3, #12]
 8004d9c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	685b      	ldr	r3, [r3, #4]
 8004da2:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004da4:	693a      	ldr	r2, [r7, #16]
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	429a      	cmp	r2, r3
 8004daa:	d203      	bcs.n	8004db4 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004dac:	4a2e      	ldr	r2, [pc, #184]	; (8004e68 <xTaskIncrementTick+0x15c>)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004db2:	e02f      	b.n	8004e14 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	3304      	adds	r3, #4
 8004db8:	4618      	mov	r0, r3
 8004dba:	f7fe fe73 	bl	8003aa4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dbe:	68bb      	ldr	r3, [r7, #8]
 8004dc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d004      	beq.n	8004dd0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	3318      	adds	r3, #24
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe fe6a 	bl	8003aa4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd4:	4b25      	ldr	r3, [pc, #148]	; (8004e6c <xTaskIncrementTick+0x160>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	429a      	cmp	r2, r3
 8004dda:	d903      	bls.n	8004de4 <xTaskIncrementTick+0xd8>
 8004ddc:	68bb      	ldr	r3, [r7, #8]
 8004dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <xTaskIncrementTick+0x160>)
 8004de2:	6013      	str	r3, [r2, #0]
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	4a1f      	ldr	r2, [pc, #124]	; (8004e70 <xTaskIncrementTick+0x164>)
 8004df2:	441a      	add	r2, r3
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	3304      	adds	r3, #4
 8004df8:	4619      	mov	r1, r3
 8004dfa:	4610      	mov	r0, r2
 8004dfc:	f7fe fdf5 	bl	80039ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e04:	4b1b      	ldr	r3, [pc, #108]	; (8004e74 <xTaskIncrementTick+0x168>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e0a:	429a      	cmp	r2, r3
 8004e0c:	d3b8      	bcc.n	8004d80 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e0e:	2301      	movs	r3, #1
 8004e10:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e12:	e7b5      	b.n	8004d80 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e14:	4b17      	ldr	r3, [pc, #92]	; (8004e74 <xTaskIncrementTick+0x168>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e1a:	4915      	ldr	r1, [pc, #84]	; (8004e70 <xTaskIncrementTick+0x164>)
 8004e1c:	4613      	mov	r3, r2
 8004e1e:	009b      	lsls	r3, r3, #2
 8004e20:	4413      	add	r3, r2
 8004e22:	009b      	lsls	r3, r3, #2
 8004e24:	440b      	add	r3, r1
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d901      	bls.n	8004e30 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e2c:	2301      	movs	r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e30:	4b11      	ldr	r3, [pc, #68]	; (8004e78 <xTaskIncrementTick+0x16c>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d007      	beq.n	8004e48 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e38:	2301      	movs	r3, #1
 8004e3a:	617b      	str	r3, [r7, #20]
 8004e3c:	e004      	b.n	8004e48 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <xTaskIncrementTick+0x170>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	3301      	adds	r3, #1
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <xTaskIncrementTick+0x170>)
 8004e46:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e48:	697b      	ldr	r3, [r7, #20]
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3718      	adds	r7, #24
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}
 8004e52:	bf00      	nop
 8004e54:	20000e2c 	.word	0x20000e2c
 8004e58:	20000e08 	.word	0x20000e08
 8004e5c:	20000dbc 	.word	0x20000dbc
 8004e60:	20000dc0 	.word	0x20000dc0
 8004e64:	20000e1c 	.word	0x20000e1c
 8004e68:	20000e24 	.word	0x20000e24
 8004e6c:	20000e0c 	.word	0x20000e0c
 8004e70:	20000934 	.word	0x20000934
 8004e74:	20000930 	.word	0x20000930
 8004e78:	20000e18 	.word	0x20000e18
 8004e7c:	20000e14 	.word	0x20000e14

08004e80 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e80:	b480      	push	{r7}
 8004e82:	b085      	sub	sp, #20
 8004e84:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e86:	4b2a      	ldr	r3, [pc, #168]	; (8004f30 <vTaskSwitchContext+0xb0>)
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d003      	beq.n	8004e96 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e8e:	4b29      	ldr	r3, [pc, #164]	; (8004f34 <vTaskSwitchContext+0xb4>)
 8004e90:	2201      	movs	r2, #1
 8004e92:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e94:	e046      	b.n	8004f24 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004e96:	4b27      	ldr	r3, [pc, #156]	; (8004f34 <vTaskSwitchContext+0xb4>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e9c:	4b26      	ldr	r3, [pc, #152]	; (8004f38 <vTaskSwitchContext+0xb8>)
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	60fb      	str	r3, [r7, #12]
 8004ea2:	e010      	b.n	8004ec6 <vTaskSwitchContext+0x46>
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d10a      	bne.n	8004ec0 <vTaskSwitchContext+0x40>
	__asm volatile
 8004eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eae:	f383 8811 	msr	BASEPRI, r3
 8004eb2:	f3bf 8f6f 	isb	sy
 8004eb6:	f3bf 8f4f 	dsb	sy
 8004eba:	607b      	str	r3, [r7, #4]
}
 8004ebc:	bf00      	nop
 8004ebe:	e7fe      	b.n	8004ebe <vTaskSwitchContext+0x3e>
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	3b01      	subs	r3, #1
 8004ec4:	60fb      	str	r3, [r7, #12]
 8004ec6:	491d      	ldr	r1, [pc, #116]	; (8004f3c <vTaskSwitchContext+0xbc>)
 8004ec8:	68fa      	ldr	r2, [r7, #12]
 8004eca:	4613      	mov	r3, r2
 8004ecc:	009b      	lsls	r3, r3, #2
 8004ece:	4413      	add	r3, r2
 8004ed0:	009b      	lsls	r3, r3, #2
 8004ed2:	440b      	add	r3, r1
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d0e4      	beq.n	8004ea4 <vTaskSwitchContext+0x24>
 8004eda:	68fa      	ldr	r2, [r7, #12]
 8004edc:	4613      	mov	r3, r2
 8004ede:	009b      	lsls	r3, r3, #2
 8004ee0:	4413      	add	r3, r2
 8004ee2:	009b      	lsls	r3, r3, #2
 8004ee4:	4a15      	ldr	r2, [pc, #84]	; (8004f3c <vTaskSwitchContext+0xbc>)
 8004ee6:	4413      	add	r3, r2
 8004ee8:	60bb      	str	r3, [r7, #8]
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	685b      	ldr	r3, [r3, #4]
 8004eee:	685a      	ldr	r2, [r3, #4]
 8004ef0:	68bb      	ldr	r3, [r7, #8]
 8004ef2:	605a      	str	r2, [r3, #4]
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	3308      	adds	r3, #8
 8004efc:	429a      	cmp	r2, r3
 8004efe:	d104      	bne.n	8004f0a <vTaskSwitchContext+0x8a>
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	685a      	ldr	r2, [r3, #4]
 8004f06:	68bb      	ldr	r3, [r7, #8]
 8004f08:	605a      	str	r2, [r3, #4]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	685b      	ldr	r3, [r3, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4a0b      	ldr	r2, [pc, #44]	; (8004f40 <vTaskSwitchContext+0xc0>)
 8004f12:	6013      	str	r3, [r2, #0]
 8004f14:	4a08      	ldr	r2, [pc, #32]	; (8004f38 <vTaskSwitchContext+0xb8>)
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f1a:	4b09      	ldr	r3, [pc, #36]	; (8004f40 <vTaskSwitchContext+0xc0>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	3354      	adds	r3, #84	; 0x54
 8004f20:	4a08      	ldr	r2, [pc, #32]	; (8004f44 <vTaskSwitchContext+0xc4>)
 8004f22:	6013      	str	r3, [r2, #0]
}
 8004f24:	bf00      	nop
 8004f26:	3714      	adds	r7, #20
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2e:	4770      	bx	lr
 8004f30:	20000e2c 	.word	0x20000e2c
 8004f34:	20000e18 	.word	0x20000e18
 8004f38:	20000e0c 	.word	0x20000e0c
 8004f3c:	20000934 	.word	0x20000934
 8004f40:	20000930 	.word	0x20000930
 8004f44:	20000014 	.word	0x20000014

08004f48 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f48:	b580      	push	{r7, lr}
 8004f4a:	b084      	sub	sp, #16
 8004f4c:	af00      	add	r7, sp, #0
 8004f4e:	6078      	str	r0, [r7, #4]
 8004f50:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f5c:	f383 8811 	msr	BASEPRI, r3
 8004f60:	f3bf 8f6f 	isb	sy
 8004f64:	f3bf 8f4f 	dsb	sy
 8004f68:	60fb      	str	r3, [r7, #12]
}
 8004f6a:	bf00      	nop
 8004f6c:	e7fe      	b.n	8004f6c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f6e:	4b07      	ldr	r3, [pc, #28]	; (8004f8c <vTaskPlaceOnEventList+0x44>)
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	3318      	adds	r3, #24
 8004f74:	4619      	mov	r1, r3
 8004f76:	6878      	ldr	r0, [r7, #4]
 8004f78:	f7fe fd5b 	bl	8003a32 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f7c:	2101      	movs	r1, #1
 8004f7e:	6838      	ldr	r0, [r7, #0]
 8004f80:	f000 fa80 	bl	8005484 <prvAddCurrentTaskToDelayedList>
}
 8004f84:	bf00      	nop
 8004f86:	3710      	adds	r7, #16
 8004f88:	46bd      	mov	sp, r7
 8004f8a:	bd80      	pop	{r7, pc}
 8004f8c:	20000930 	.word	0x20000930

08004f90 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b086      	sub	sp, #24
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	60f8      	str	r0, [r7, #12]
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d10a      	bne.n	8004fb8 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004fa2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fa6:	f383 8811 	msr	BASEPRI, r3
 8004faa:	f3bf 8f6f 	isb	sy
 8004fae:	f3bf 8f4f 	dsb	sy
 8004fb2:	617b      	str	r3, [r7, #20]
}
 8004fb4:	bf00      	nop
 8004fb6:	e7fe      	b.n	8004fb6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fb8:	4b0a      	ldr	r3, [pc, #40]	; (8004fe4 <vTaskPlaceOnEventListRestricted+0x54>)
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	3318      	adds	r3, #24
 8004fbe:	4619      	mov	r1, r3
 8004fc0:	68f8      	ldr	r0, [r7, #12]
 8004fc2:	f7fe fd12 	bl	80039ea <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d002      	beq.n	8004fd2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004fcc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fd0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004fd2:	6879      	ldr	r1, [r7, #4]
 8004fd4:	68b8      	ldr	r0, [r7, #8]
 8004fd6:	f000 fa55 	bl	8005484 <prvAddCurrentTaskToDelayedList>
	}
 8004fda:	bf00      	nop
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	20000930 	.word	0x20000930

08004fe8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b086      	sub	sp, #24
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	68db      	ldr	r3, [r3, #12]
 8004ff4:	68db      	ldr	r3, [r3, #12]
 8004ff6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d10a      	bne.n	8005014 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004ffe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005002:	f383 8811 	msr	BASEPRI, r3
 8005006:	f3bf 8f6f 	isb	sy
 800500a:	f3bf 8f4f 	dsb	sy
 800500e:	60fb      	str	r3, [r7, #12]
}
 8005010:	bf00      	nop
 8005012:	e7fe      	b.n	8005012 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005014:	693b      	ldr	r3, [r7, #16]
 8005016:	3318      	adds	r3, #24
 8005018:	4618      	mov	r0, r3
 800501a:	f7fe fd43 	bl	8003aa4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800501e:	4b1e      	ldr	r3, [pc, #120]	; (8005098 <xTaskRemoveFromEventList+0xb0>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	2b00      	cmp	r3, #0
 8005024:	d11d      	bne.n	8005062 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005026:	693b      	ldr	r3, [r7, #16]
 8005028:	3304      	adds	r3, #4
 800502a:	4618      	mov	r0, r3
 800502c:	f7fe fd3a 	bl	8003aa4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005034:	4b19      	ldr	r3, [pc, #100]	; (800509c <xTaskRemoveFromEventList+0xb4>)
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	429a      	cmp	r2, r3
 800503a:	d903      	bls.n	8005044 <xTaskRemoveFromEventList+0x5c>
 800503c:	693b      	ldr	r3, [r7, #16]
 800503e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005040:	4a16      	ldr	r2, [pc, #88]	; (800509c <xTaskRemoveFromEventList+0xb4>)
 8005042:	6013      	str	r3, [r2, #0]
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005048:	4613      	mov	r3, r2
 800504a:	009b      	lsls	r3, r3, #2
 800504c:	4413      	add	r3, r2
 800504e:	009b      	lsls	r3, r3, #2
 8005050:	4a13      	ldr	r2, [pc, #76]	; (80050a0 <xTaskRemoveFromEventList+0xb8>)
 8005052:	441a      	add	r2, r3
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	3304      	adds	r3, #4
 8005058:	4619      	mov	r1, r3
 800505a:	4610      	mov	r0, r2
 800505c:	f7fe fcc5 	bl	80039ea <vListInsertEnd>
 8005060:	e005      	b.n	800506e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	3318      	adds	r3, #24
 8005066:	4619      	mov	r1, r3
 8005068:	480e      	ldr	r0, [pc, #56]	; (80050a4 <xTaskRemoveFromEventList+0xbc>)
 800506a:	f7fe fcbe 	bl	80039ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005072:	4b0d      	ldr	r3, [pc, #52]	; (80050a8 <xTaskRemoveFromEventList+0xc0>)
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005078:	429a      	cmp	r2, r3
 800507a:	d905      	bls.n	8005088 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800507c:	2301      	movs	r3, #1
 800507e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005080:	4b0a      	ldr	r3, [pc, #40]	; (80050ac <xTaskRemoveFromEventList+0xc4>)
 8005082:	2201      	movs	r2, #1
 8005084:	601a      	str	r2, [r3, #0]
 8005086:	e001      	b.n	800508c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005088:	2300      	movs	r3, #0
 800508a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800508c:	697b      	ldr	r3, [r7, #20]
}
 800508e:	4618      	mov	r0, r3
 8005090:	3718      	adds	r7, #24
 8005092:	46bd      	mov	sp, r7
 8005094:	bd80      	pop	{r7, pc}
 8005096:	bf00      	nop
 8005098:	20000e2c 	.word	0x20000e2c
 800509c:	20000e0c 	.word	0x20000e0c
 80050a0:	20000934 	.word	0x20000934
 80050a4:	20000dc4 	.word	0x20000dc4
 80050a8:	20000930 	.word	0x20000930
 80050ac:	20000e18 	.word	0x20000e18

080050b0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050b0:	b480      	push	{r7}
 80050b2:	b083      	sub	sp, #12
 80050b4:	af00      	add	r7, sp, #0
 80050b6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050b8:	4b06      	ldr	r3, [pc, #24]	; (80050d4 <vTaskInternalSetTimeOutState+0x24>)
 80050ba:	681a      	ldr	r2, [r3, #0]
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050c0:	4b05      	ldr	r3, [pc, #20]	; (80050d8 <vTaskInternalSetTimeOutState+0x28>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	605a      	str	r2, [r3, #4]
}
 80050c8:	bf00      	nop
 80050ca:	370c      	adds	r7, #12
 80050cc:	46bd      	mov	sp, r7
 80050ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050d2:	4770      	bx	lr
 80050d4:	20000e1c 	.word	0x20000e1c
 80050d8:	20000e08 	.word	0x20000e08

080050dc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050dc:	b580      	push	{r7, lr}
 80050de:	b088      	sub	sp, #32
 80050e0:	af00      	add	r7, sp, #0
 80050e2:	6078      	str	r0, [r7, #4]
 80050e4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d10a      	bne.n	8005102 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f0:	f383 8811 	msr	BASEPRI, r3
 80050f4:	f3bf 8f6f 	isb	sy
 80050f8:	f3bf 8f4f 	dsb	sy
 80050fc:	613b      	str	r3, [r7, #16]
}
 80050fe:	bf00      	nop
 8005100:	e7fe      	b.n	8005100 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005102:	683b      	ldr	r3, [r7, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d10a      	bne.n	800511e <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005108:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510c:	f383 8811 	msr	BASEPRI, r3
 8005110:	f3bf 8f6f 	isb	sy
 8005114:	f3bf 8f4f 	dsb	sy
 8005118:	60fb      	str	r3, [r7, #12]
}
 800511a:	bf00      	nop
 800511c:	e7fe      	b.n	800511c <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800511e:	f000 fe81 	bl	8005e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005122:	4b1d      	ldr	r3, [pc, #116]	; (8005198 <xTaskCheckForTimeOut+0xbc>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	685b      	ldr	r3, [r3, #4]
 800512c:	69ba      	ldr	r2, [r7, #24]
 800512e:	1ad3      	subs	r3, r2, r3
 8005130:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800513a:	d102      	bne.n	8005142 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800513c:	2300      	movs	r3, #0
 800513e:	61fb      	str	r3, [r7, #28]
 8005140:	e023      	b.n	800518a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681a      	ldr	r2, [r3, #0]
 8005146:	4b15      	ldr	r3, [pc, #84]	; (800519c <xTaskCheckForTimeOut+0xc0>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	429a      	cmp	r2, r3
 800514c:	d007      	beq.n	800515e <xTaskCheckForTimeOut+0x82>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	685b      	ldr	r3, [r3, #4]
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	429a      	cmp	r2, r3
 8005156:	d302      	bcc.n	800515e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005158:	2301      	movs	r3, #1
 800515a:	61fb      	str	r3, [r7, #28]
 800515c:	e015      	b.n	800518a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	697a      	ldr	r2, [r7, #20]
 8005164:	429a      	cmp	r2, r3
 8005166:	d20b      	bcs.n	8005180 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	681a      	ldr	r2, [r3, #0]
 800516c:	697b      	ldr	r3, [r7, #20]
 800516e:	1ad2      	subs	r2, r2, r3
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005174:	6878      	ldr	r0, [r7, #4]
 8005176:	f7ff ff9b 	bl	80050b0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800517a:	2300      	movs	r3, #0
 800517c:	61fb      	str	r3, [r7, #28]
 800517e:	e004      	b.n	800518a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005180:	683b      	ldr	r3, [r7, #0]
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005186:	2301      	movs	r3, #1
 8005188:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800518a:	f000 fe7b 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 800518e:	69fb      	ldr	r3, [r7, #28]
}
 8005190:	4618      	mov	r0, r3
 8005192:	3720      	adds	r7, #32
 8005194:	46bd      	mov	sp, r7
 8005196:	bd80      	pop	{r7, pc}
 8005198:	20000e08 	.word	0x20000e08
 800519c:	20000e1c 	.word	0x20000e1c

080051a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051a0:	b480      	push	{r7}
 80051a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051a4:	4b03      	ldr	r3, [pc, #12]	; (80051b4 <vTaskMissedYield+0x14>)
 80051a6:	2201      	movs	r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
}
 80051aa:	bf00      	nop
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr
 80051b4:	20000e18 	.word	0x20000e18

080051b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b082      	sub	sp, #8
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051c0:	f000 f852 	bl	8005268 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051c4:	4b06      	ldr	r3, [pc, #24]	; (80051e0 <prvIdleTask+0x28>)
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2b01      	cmp	r3, #1
 80051ca:	d9f9      	bls.n	80051c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051cc:	4b05      	ldr	r3, [pc, #20]	; (80051e4 <prvIdleTask+0x2c>)
 80051ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051d2:	601a      	str	r2, [r3, #0]
 80051d4:	f3bf 8f4f 	dsb	sy
 80051d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051dc:	e7f0      	b.n	80051c0 <prvIdleTask+0x8>
 80051de:	bf00      	nop
 80051e0:	20000934 	.word	0x20000934
 80051e4:	e000ed04 	.word	0xe000ed04

080051e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051ee:	2300      	movs	r3, #0
 80051f0:	607b      	str	r3, [r7, #4]
 80051f2:	e00c      	b.n	800520e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051f4:	687a      	ldr	r2, [r7, #4]
 80051f6:	4613      	mov	r3, r2
 80051f8:	009b      	lsls	r3, r3, #2
 80051fa:	4413      	add	r3, r2
 80051fc:	009b      	lsls	r3, r3, #2
 80051fe:	4a12      	ldr	r2, [pc, #72]	; (8005248 <prvInitialiseTaskLists+0x60>)
 8005200:	4413      	add	r3, r2
 8005202:	4618      	mov	r0, r3
 8005204:	f7fe fbc4 	bl	8003990 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	3301      	adds	r3, #1
 800520c:	607b      	str	r3, [r7, #4]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2b37      	cmp	r3, #55	; 0x37
 8005212:	d9ef      	bls.n	80051f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005214:	480d      	ldr	r0, [pc, #52]	; (800524c <prvInitialiseTaskLists+0x64>)
 8005216:	f7fe fbbb 	bl	8003990 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800521a:	480d      	ldr	r0, [pc, #52]	; (8005250 <prvInitialiseTaskLists+0x68>)
 800521c:	f7fe fbb8 	bl	8003990 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005220:	480c      	ldr	r0, [pc, #48]	; (8005254 <prvInitialiseTaskLists+0x6c>)
 8005222:	f7fe fbb5 	bl	8003990 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005226:	480c      	ldr	r0, [pc, #48]	; (8005258 <prvInitialiseTaskLists+0x70>)
 8005228:	f7fe fbb2 	bl	8003990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800522c:	480b      	ldr	r0, [pc, #44]	; (800525c <prvInitialiseTaskLists+0x74>)
 800522e:	f7fe fbaf 	bl	8003990 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005232:	4b0b      	ldr	r3, [pc, #44]	; (8005260 <prvInitialiseTaskLists+0x78>)
 8005234:	4a05      	ldr	r2, [pc, #20]	; (800524c <prvInitialiseTaskLists+0x64>)
 8005236:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005238:	4b0a      	ldr	r3, [pc, #40]	; (8005264 <prvInitialiseTaskLists+0x7c>)
 800523a:	4a05      	ldr	r2, [pc, #20]	; (8005250 <prvInitialiseTaskLists+0x68>)
 800523c:	601a      	str	r2, [r3, #0]
}
 800523e:	bf00      	nop
 8005240:	3708      	adds	r7, #8
 8005242:	46bd      	mov	sp, r7
 8005244:	bd80      	pop	{r7, pc}
 8005246:	bf00      	nop
 8005248:	20000934 	.word	0x20000934
 800524c:	20000d94 	.word	0x20000d94
 8005250:	20000da8 	.word	0x20000da8
 8005254:	20000dc4 	.word	0x20000dc4
 8005258:	20000dd8 	.word	0x20000dd8
 800525c:	20000df0 	.word	0x20000df0
 8005260:	20000dbc 	.word	0x20000dbc
 8005264:	20000dc0 	.word	0x20000dc0

08005268 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005268:	b580      	push	{r7, lr}
 800526a:	b082      	sub	sp, #8
 800526c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800526e:	e019      	b.n	80052a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005270:	f000 fdd8 	bl	8005e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005274:	4b10      	ldr	r3, [pc, #64]	; (80052b8 <prvCheckTasksWaitingTermination+0x50>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	68db      	ldr	r3, [r3, #12]
 800527a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	3304      	adds	r3, #4
 8005280:	4618      	mov	r0, r3
 8005282:	f7fe fc0f 	bl	8003aa4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005286:	4b0d      	ldr	r3, [pc, #52]	; (80052bc <prvCheckTasksWaitingTermination+0x54>)
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	3b01      	subs	r3, #1
 800528c:	4a0b      	ldr	r2, [pc, #44]	; (80052bc <prvCheckTasksWaitingTermination+0x54>)
 800528e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005290:	4b0b      	ldr	r3, [pc, #44]	; (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3b01      	subs	r3, #1
 8005296:	4a0a      	ldr	r2, [pc, #40]	; (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 8005298:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800529a:	f000 fdf3 	bl	8005e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 f810 	bl	80052c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052a4:	4b06      	ldr	r3, [pc, #24]	; (80052c0 <prvCheckTasksWaitingTermination+0x58>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d1e1      	bne.n	8005270 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052ac:	bf00      	nop
 80052ae:	bf00      	nop
 80052b0:	3708      	adds	r7, #8
 80052b2:	46bd      	mov	sp, r7
 80052b4:	bd80      	pop	{r7, pc}
 80052b6:	bf00      	nop
 80052b8:	20000dd8 	.word	0x20000dd8
 80052bc:	20000e04 	.word	0x20000e04
 80052c0:	20000dec 	.word	0x20000dec

080052c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b084      	sub	sp, #16
 80052c8:	af00      	add	r7, sp, #0
 80052ca:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	3354      	adds	r3, #84	; 0x54
 80052d0:	4618      	mov	r0, r3
 80052d2:	f001 f99b 	bl	800660c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d108      	bne.n	80052f2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052e4:	4618      	mov	r0, r3
 80052e6:	f000 ff8b 	bl	8006200 <vPortFree>
				vPortFree( pxTCB );
 80052ea:	6878      	ldr	r0, [r7, #4]
 80052ec:	f000 ff88 	bl	8006200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052f0:	e018      	b.n	8005324 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80052f8:	2b01      	cmp	r3, #1
 80052fa:	d103      	bne.n	8005304 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f000 ff7f 	bl	8006200 <vPortFree>
	}
 8005302:	e00f      	b.n	8005324 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800530a:	2b02      	cmp	r3, #2
 800530c:	d00a      	beq.n	8005324 <prvDeleteTCB+0x60>
	__asm volatile
 800530e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005312:	f383 8811 	msr	BASEPRI, r3
 8005316:	f3bf 8f6f 	isb	sy
 800531a:	f3bf 8f4f 	dsb	sy
 800531e:	60fb      	str	r3, [r7, #12]
}
 8005320:	bf00      	nop
 8005322:	e7fe      	b.n	8005322 <prvDeleteTCB+0x5e>
	}
 8005324:	bf00      	nop
 8005326:	3710      	adds	r7, #16
 8005328:	46bd      	mov	sp, r7
 800532a:	bd80      	pop	{r7, pc}

0800532c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800532c:	b480      	push	{r7}
 800532e:	b083      	sub	sp, #12
 8005330:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005332:	4b0c      	ldr	r3, [pc, #48]	; (8005364 <prvResetNextTaskUnblockTime+0x38>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	2b00      	cmp	r3, #0
 800533a:	d104      	bne.n	8005346 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800533c:	4b0a      	ldr	r3, [pc, #40]	; (8005368 <prvResetNextTaskUnblockTime+0x3c>)
 800533e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005342:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005344:	e008      	b.n	8005358 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005346:	4b07      	ldr	r3, [pc, #28]	; (8005364 <prvResetNextTaskUnblockTime+0x38>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	685b      	ldr	r3, [r3, #4]
 8005354:	4a04      	ldr	r2, [pc, #16]	; (8005368 <prvResetNextTaskUnblockTime+0x3c>)
 8005356:	6013      	str	r3, [r2, #0]
}
 8005358:	bf00      	nop
 800535a:	370c      	adds	r7, #12
 800535c:	46bd      	mov	sp, r7
 800535e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005362:	4770      	bx	lr
 8005364:	20000dbc 	.word	0x20000dbc
 8005368:	20000e24 	.word	0x20000e24

0800536c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800536c:	b480      	push	{r7}
 800536e:	b083      	sub	sp, #12
 8005370:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005372:	4b0b      	ldr	r3, [pc, #44]	; (80053a0 <xTaskGetSchedulerState+0x34>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	2b00      	cmp	r3, #0
 8005378:	d102      	bne.n	8005380 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800537a:	2301      	movs	r3, #1
 800537c:	607b      	str	r3, [r7, #4]
 800537e:	e008      	b.n	8005392 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005380:	4b08      	ldr	r3, [pc, #32]	; (80053a4 <xTaskGetSchedulerState+0x38>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	2b00      	cmp	r3, #0
 8005386:	d102      	bne.n	800538e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005388:	2302      	movs	r3, #2
 800538a:	607b      	str	r3, [r7, #4]
 800538c:	e001      	b.n	8005392 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800538e:	2300      	movs	r3, #0
 8005390:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005392:	687b      	ldr	r3, [r7, #4]
	}
 8005394:	4618      	mov	r0, r3
 8005396:	370c      	adds	r7, #12
 8005398:	46bd      	mov	sp, r7
 800539a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539e:	4770      	bx	lr
 80053a0:	20000e10 	.word	0x20000e10
 80053a4:	20000e2c 	.word	0x20000e2c

080053a8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053a8:	b580      	push	{r7, lr}
 80053aa:	b086      	sub	sp, #24
 80053ac:	af00      	add	r7, sp, #0
 80053ae:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053b4:	2300      	movs	r3, #0
 80053b6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	d056      	beq.n	800546c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053be:	4b2e      	ldr	r3, [pc, #184]	; (8005478 <xTaskPriorityDisinherit+0xd0>)
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	693a      	ldr	r2, [r7, #16]
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d00a      	beq.n	80053de <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	60fb      	str	r3, [r7, #12]
}
 80053da:	bf00      	nop
 80053dc:	e7fe      	b.n	80053dc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053de:	693b      	ldr	r3, [r7, #16]
 80053e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d10a      	bne.n	80053fc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80053e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ea:	f383 8811 	msr	BASEPRI, r3
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f3bf 8f4f 	dsb	sy
 80053f6:	60bb      	str	r3, [r7, #8]
}
 80053f8:	bf00      	nop
 80053fa:	e7fe      	b.n	80053fa <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005400:	1e5a      	subs	r2, r3, #1
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800540e:	429a      	cmp	r2, r3
 8005410:	d02c      	beq.n	800546c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005416:	2b00      	cmp	r3, #0
 8005418:	d128      	bne.n	800546c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	3304      	adds	r3, #4
 800541e:	4618      	mov	r0, r3
 8005420:	f7fe fb40 	bl	8003aa4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005430:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005438:	693b      	ldr	r3, [r7, #16]
 800543a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800543c:	4b0f      	ldr	r3, [pc, #60]	; (800547c <xTaskPriorityDisinherit+0xd4>)
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	429a      	cmp	r2, r3
 8005442:	d903      	bls.n	800544c <xTaskPriorityDisinherit+0xa4>
 8005444:	693b      	ldr	r3, [r7, #16]
 8005446:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005448:	4a0c      	ldr	r2, [pc, #48]	; (800547c <xTaskPriorityDisinherit+0xd4>)
 800544a:	6013      	str	r3, [r2, #0]
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005450:	4613      	mov	r3, r2
 8005452:	009b      	lsls	r3, r3, #2
 8005454:	4413      	add	r3, r2
 8005456:	009b      	lsls	r3, r3, #2
 8005458:	4a09      	ldr	r2, [pc, #36]	; (8005480 <xTaskPriorityDisinherit+0xd8>)
 800545a:	441a      	add	r2, r3
 800545c:	693b      	ldr	r3, [r7, #16]
 800545e:	3304      	adds	r3, #4
 8005460:	4619      	mov	r1, r3
 8005462:	4610      	mov	r0, r2
 8005464:	f7fe fac1 	bl	80039ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005468:	2301      	movs	r3, #1
 800546a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800546c:	697b      	ldr	r3, [r7, #20]
	}
 800546e:	4618      	mov	r0, r3
 8005470:	3718      	adds	r7, #24
 8005472:	46bd      	mov	sp, r7
 8005474:	bd80      	pop	{r7, pc}
 8005476:	bf00      	nop
 8005478:	20000930 	.word	0x20000930
 800547c:	20000e0c 	.word	0x20000e0c
 8005480:	20000934 	.word	0x20000934

08005484 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005484:	b580      	push	{r7, lr}
 8005486:	b084      	sub	sp, #16
 8005488:	af00      	add	r7, sp, #0
 800548a:	6078      	str	r0, [r7, #4]
 800548c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800548e:	4b21      	ldr	r3, [pc, #132]	; (8005514 <prvAddCurrentTaskToDelayedList+0x90>)
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005494:	4b20      	ldr	r3, [pc, #128]	; (8005518 <prvAddCurrentTaskToDelayedList+0x94>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	3304      	adds	r3, #4
 800549a:	4618      	mov	r0, r3
 800549c:	f7fe fb02 	bl	8003aa4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a6:	d10a      	bne.n	80054be <prvAddCurrentTaskToDelayedList+0x3a>
 80054a8:	683b      	ldr	r3, [r7, #0]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d007      	beq.n	80054be <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054ae:	4b1a      	ldr	r3, [pc, #104]	; (8005518 <prvAddCurrentTaskToDelayedList+0x94>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	3304      	adds	r3, #4
 80054b4:	4619      	mov	r1, r3
 80054b6:	4819      	ldr	r0, [pc, #100]	; (800551c <prvAddCurrentTaskToDelayedList+0x98>)
 80054b8:	f7fe fa97 	bl	80039ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054bc:	e026      	b.n	800550c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054be:	68fa      	ldr	r2, [r7, #12]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	4413      	add	r3, r2
 80054c4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054c6:	4b14      	ldr	r3, [pc, #80]	; (8005518 <prvAddCurrentTaskToDelayedList+0x94>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	68ba      	ldr	r2, [r7, #8]
 80054cc:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054ce:	68ba      	ldr	r2, [r7, #8]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d209      	bcs.n	80054ea <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054d6:	4b12      	ldr	r3, [pc, #72]	; (8005520 <prvAddCurrentTaskToDelayedList+0x9c>)
 80054d8:	681a      	ldr	r2, [r3, #0]
 80054da:	4b0f      	ldr	r3, [pc, #60]	; (8005518 <prvAddCurrentTaskToDelayedList+0x94>)
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	3304      	adds	r3, #4
 80054e0:	4619      	mov	r1, r3
 80054e2:	4610      	mov	r0, r2
 80054e4:	f7fe faa5 	bl	8003a32 <vListInsert>
}
 80054e8:	e010      	b.n	800550c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054ea:	4b0e      	ldr	r3, [pc, #56]	; (8005524 <prvAddCurrentTaskToDelayedList+0xa0>)
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b0a      	ldr	r3, [pc, #40]	; (8005518 <prvAddCurrentTaskToDelayedList+0x94>)
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	3304      	adds	r3, #4
 80054f4:	4619      	mov	r1, r3
 80054f6:	4610      	mov	r0, r2
 80054f8:	f7fe fa9b 	bl	8003a32 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80054fc:	4b0a      	ldr	r3, [pc, #40]	; (8005528 <prvAddCurrentTaskToDelayedList+0xa4>)
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	68ba      	ldr	r2, [r7, #8]
 8005502:	429a      	cmp	r2, r3
 8005504:	d202      	bcs.n	800550c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005506:	4a08      	ldr	r2, [pc, #32]	; (8005528 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	6013      	str	r3, [r2, #0]
}
 800550c:	bf00      	nop
 800550e:	3710      	adds	r7, #16
 8005510:	46bd      	mov	sp, r7
 8005512:	bd80      	pop	{r7, pc}
 8005514:	20000e08 	.word	0x20000e08
 8005518:	20000930 	.word	0x20000930
 800551c:	20000df0 	.word	0x20000df0
 8005520:	20000dc0 	.word	0x20000dc0
 8005524:	20000dbc 	.word	0x20000dbc
 8005528:	20000e24 	.word	0x20000e24

0800552c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b08a      	sub	sp, #40	; 0x28
 8005530:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005532:	2300      	movs	r3, #0
 8005534:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005536:	f000 fb07 	bl	8005b48 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800553a:	4b1c      	ldr	r3, [pc, #112]	; (80055ac <xTimerCreateTimerTask+0x80>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	2b00      	cmp	r3, #0
 8005540:	d021      	beq.n	8005586 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005542:	2300      	movs	r3, #0
 8005544:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005546:	2300      	movs	r3, #0
 8005548:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800554a:	1d3a      	adds	r2, r7, #4
 800554c:	f107 0108 	add.w	r1, r7, #8
 8005550:	f107 030c 	add.w	r3, r7, #12
 8005554:	4618      	mov	r0, r3
 8005556:	f7fe fa01 	bl	800395c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800555a:	6879      	ldr	r1, [r7, #4]
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	9202      	str	r2, [sp, #8]
 8005562:	9301      	str	r3, [sp, #4]
 8005564:	2302      	movs	r3, #2
 8005566:	9300      	str	r3, [sp, #0]
 8005568:	2300      	movs	r3, #0
 800556a:	460a      	mov	r2, r1
 800556c:	4910      	ldr	r1, [pc, #64]	; (80055b0 <xTimerCreateTimerTask+0x84>)
 800556e:	4811      	ldr	r0, [pc, #68]	; (80055b4 <xTimerCreateTimerTask+0x88>)
 8005570:	f7fe ffae 	bl	80044d0 <xTaskCreateStatic>
 8005574:	4603      	mov	r3, r0
 8005576:	4a10      	ldr	r2, [pc, #64]	; (80055b8 <xTimerCreateTimerTask+0x8c>)
 8005578:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800557a:	4b0f      	ldr	r3, [pc, #60]	; (80055b8 <xTimerCreateTimerTask+0x8c>)
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	2b00      	cmp	r3, #0
 8005580:	d001      	beq.n	8005586 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005582:	2301      	movs	r3, #1
 8005584:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d10a      	bne.n	80055a2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800558c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005590:	f383 8811 	msr	BASEPRI, r3
 8005594:	f3bf 8f6f 	isb	sy
 8005598:	f3bf 8f4f 	dsb	sy
 800559c:	613b      	str	r3, [r7, #16]
}
 800559e:	bf00      	nop
 80055a0:	e7fe      	b.n	80055a0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80055a2:	697b      	ldr	r3, [r7, #20]
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3718      	adds	r7, #24
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	20000e60 	.word	0x20000e60
 80055b0:	0800711c 	.word	0x0800711c
 80055b4:	080056f1 	.word	0x080056f1
 80055b8:	20000e64 	.word	0x20000e64

080055bc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055bc:	b580      	push	{r7, lr}
 80055be:	b08a      	sub	sp, #40	; 0x28
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	60f8      	str	r0, [r7, #12]
 80055c4:	60b9      	str	r1, [r7, #8]
 80055c6:	607a      	str	r2, [r7, #4]
 80055c8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055ca:	2300      	movs	r3, #0
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b00      	cmp	r3, #0
 80055d2:	d10a      	bne.n	80055ea <xTimerGenericCommand+0x2e>
	__asm volatile
 80055d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055d8:	f383 8811 	msr	BASEPRI, r3
 80055dc:	f3bf 8f6f 	isb	sy
 80055e0:	f3bf 8f4f 	dsb	sy
 80055e4:	623b      	str	r3, [r7, #32]
}
 80055e6:	bf00      	nop
 80055e8:	e7fe      	b.n	80055e8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055ea:	4b1a      	ldr	r3, [pc, #104]	; (8005654 <xTimerGenericCommand+0x98>)
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	2b00      	cmp	r3, #0
 80055f0:	d02a      	beq.n	8005648 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80055fe:	68bb      	ldr	r3, [r7, #8]
 8005600:	2b05      	cmp	r3, #5
 8005602:	dc18      	bgt.n	8005636 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005604:	f7ff feb2 	bl	800536c <xTaskGetSchedulerState>
 8005608:	4603      	mov	r3, r0
 800560a:	2b02      	cmp	r3, #2
 800560c:	d109      	bne.n	8005622 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800560e:	4b11      	ldr	r3, [pc, #68]	; (8005654 <xTimerGenericCommand+0x98>)
 8005610:	6818      	ldr	r0, [r3, #0]
 8005612:	f107 0110 	add.w	r1, r7, #16
 8005616:	2300      	movs	r3, #0
 8005618:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800561a:	f7fe fb71 	bl	8003d00 <xQueueGenericSend>
 800561e:	6278      	str	r0, [r7, #36]	; 0x24
 8005620:	e012      	b.n	8005648 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8005622:	4b0c      	ldr	r3, [pc, #48]	; (8005654 <xTimerGenericCommand+0x98>)
 8005624:	6818      	ldr	r0, [r3, #0]
 8005626:	f107 0110 	add.w	r1, r7, #16
 800562a:	2300      	movs	r3, #0
 800562c:	2200      	movs	r2, #0
 800562e:	f7fe fb67 	bl	8003d00 <xQueueGenericSend>
 8005632:	6278      	str	r0, [r7, #36]	; 0x24
 8005634:	e008      	b.n	8005648 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8005636:	4b07      	ldr	r3, [pc, #28]	; (8005654 <xTimerGenericCommand+0x98>)
 8005638:	6818      	ldr	r0, [r3, #0]
 800563a:	f107 0110 	add.w	r1, r7, #16
 800563e:	2300      	movs	r3, #0
 8005640:	683a      	ldr	r2, [r7, #0]
 8005642:	f7fe fc5b 	bl	8003efc <xQueueGenericSendFromISR>
 8005646:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005648:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800564a:	4618      	mov	r0, r3
 800564c:	3728      	adds	r7, #40	; 0x28
 800564e:	46bd      	mov	sp, r7
 8005650:	bd80      	pop	{r7, pc}
 8005652:	bf00      	nop
 8005654:	20000e60 	.word	0x20000e60

08005658 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005658:	b580      	push	{r7, lr}
 800565a:	b088      	sub	sp, #32
 800565c:	af02      	add	r7, sp, #8
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005662:	4b22      	ldr	r3, [pc, #136]	; (80056ec <prvProcessExpiredTimer+0x94>)
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800566c:	697b      	ldr	r3, [r7, #20]
 800566e:	3304      	adds	r3, #4
 8005670:	4618      	mov	r0, r3
 8005672:	f7fe fa17 	bl	8003aa4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005676:	697b      	ldr	r3, [r7, #20]
 8005678:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800567c:	f003 0304 	and.w	r3, r3, #4
 8005680:	2b00      	cmp	r3, #0
 8005682:	d022      	beq.n	80056ca <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005684:	697b      	ldr	r3, [r7, #20]
 8005686:	699a      	ldr	r2, [r3, #24]
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	18d1      	adds	r1, r2, r3
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	683a      	ldr	r2, [r7, #0]
 8005690:	6978      	ldr	r0, [r7, #20]
 8005692:	f000 f8d1 	bl	8005838 <prvInsertTimerInActiveList>
 8005696:	4603      	mov	r3, r0
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01f      	beq.n	80056dc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800569c:	2300      	movs	r3, #0
 800569e:	9300      	str	r3, [sp, #0]
 80056a0:	2300      	movs	r3, #0
 80056a2:	687a      	ldr	r2, [r7, #4]
 80056a4:	2100      	movs	r1, #0
 80056a6:	6978      	ldr	r0, [r7, #20]
 80056a8:	f7ff ff88 	bl	80055bc <xTimerGenericCommand>
 80056ac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056ae:	693b      	ldr	r3, [r7, #16]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d113      	bne.n	80056dc <prvProcessExpiredTimer+0x84>
	__asm volatile
 80056b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056b8:	f383 8811 	msr	BASEPRI, r3
 80056bc:	f3bf 8f6f 	isb	sy
 80056c0:	f3bf 8f4f 	dsb	sy
 80056c4:	60fb      	str	r3, [r7, #12]
}
 80056c6:	bf00      	nop
 80056c8:	e7fe      	b.n	80056c8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d0:	f023 0301 	bic.w	r3, r3, #1
 80056d4:	b2da      	uxtb	r2, r3
 80056d6:	697b      	ldr	r3, [r7, #20]
 80056d8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056dc:	697b      	ldr	r3, [r7, #20]
 80056de:	6a1b      	ldr	r3, [r3, #32]
 80056e0:	6978      	ldr	r0, [r7, #20]
 80056e2:	4798      	blx	r3
}
 80056e4:	bf00      	nop
 80056e6:	3718      	adds	r7, #24
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}
 80056ec:	20000e58 	.word	0x20000e58

080056f0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80056f8:	f107 0308 	add.w	r3, r7, #8
 80056fc:	4618      	mov	r0, r3
 80056fe:	f000 f857 	bl	80057b0 <prvGetNextExpireTime>
 8005702:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005704:	68bb      	ldr	r3, [r7, #8]
 8005706:	4619      	mov	r1, r3
 8005708:	68f8      	ldr	r0, [r7, #12]
 800570a:	f000 f803 	bl	8005714 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800570e:	f000 f8d5 	bl	80058bc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005712:	e7f1      	b.n	80056f8 <prvTimerTask+0x8>

08005714 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b084      	sub	sp, #16
 8005718:	af00      	add	r7, sp, #0
 800571a:	6078      	str	r0, [r7, #4]
 800571c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800571e:	f7ff fa39 	bl	8004b94 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005722:	f107 0308 	add.w	r3, r7, #8
 8005726:	4618      	mov	r0, r3
 8005728:	f000 f866 	bl	80057f8 <prvSampleTimeNow>
 800572c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800572e:	68bb      	ldr	r3, [r7, #8]
 8005730:	2b00      	cmp	r3, #0
 8005732:	d130      	bne.n	8005796 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8005734:	683b      	ldr	r3, [r7, #0]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d10a      	bne.n	8005750 <prvProcessTimerOrBlockTask+0x3c>
 800573a:	687a      	ldr	r2, [r7, #4]
 800573c:	68fb      	ldr	r3, [r7, #12]
 800573e:	429a      	cmp	r2, r3
 8005740:	d806      	bhi.n	8005750 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8005742:	f7ff fa35 	bl	8004bb0 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8005746:	68f9      	ldr	r1, [r7, #12]
 8005748:	6878      	ldr	r0, [r7, #4]
 800574a:	f7ff ff85 	bl	8005658 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800574e:	e024      	b.n	800579a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8005756:	4b13      	ldr	r3, [pc, #76]	; (80057a4 <prvProcessTimerOrBlockTask+0x90>)
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	2b00      	cmp	r3, #0
 800575e:	d101      	bne.n	8005764 <prvProcessTimerOrBlockTask+0x50>
 8005760:	2301      	movs	r3, #1
 8005762:	e000      	b.n	8005766 <prvProcessTimerOrBlockTask+0x52>
 8005764:	2300      	movs	r3, #0
 8005766:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005768:	4b0f      	ldr	r3, [pc, #60]	; (80057a8 <prvProcessTimerOrBlockTask+0x94>)
 800576a:	6818      	ldr	r0, [r3, #0]
 800576c:	687a      	ldr	r2, [r7, #4]
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	1ad3      	subs	r3, r2, r3
 8005772:	683a      	ldr	r2, [r7, #0]
 8005774:	4619      	mov	r1, r3
 8005776:	f7fe fe77 	bl	8004468 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800577a:	f7ff fa19 	bl	8004bb0 <xTaskResumeAll>
 800577e:	4603      	mov	r3, r0
 8005780:	2b00      	cmp	r3, #0
 8005782:	d10a      	bne.n	800579a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005784:	4b09      	ldr	r3, [pc, #36]	; (80057ac <prvProcessTimerOrBlockTask+0x98>)
 8005786:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800578a:	601a      	str	r2, [r3, #0]
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	f3bf 8f6f 	isb	sy
}
 8005794:	e001      	b.n	800579a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005796:	f7ff fa0b 	bl	8004bb0 <xTaskResumeAll>
}
 800579a:	bf00      	nop
 800579c:	3710      	adds	r7, #16
 800579e:	46bd      	mov	sp, r7
 80057a0:	bd80      	pop	{r7, pc}
 80057a2:	bf00      	nop
 80057a4:	20000e5c 	.word	0x20000e5c
 80057a8:	20000e60 	.word	0x20000e60
 80057ac:	e000ed04 	.word	0xe000ed04

080057b0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057b0:	b480      	push	{r7}
 80057b2:	b085      	sub	sp, #20
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057b8:	4b0e      	ldr	r3, [pc, #56]	; (80057f4 <prvGetNextExpireTime+0x44>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d101      	bne.n	80057c6 <prvGetNextExpireTime+0x16>
 80057c2:	2201      	movs	r2, #1
 80057c4:	e000      	b.n	80057c8 <prvGetNextExpireTime+0x18>
 80057c6:	2200      	movs	r2, #0
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	681b      	ldr	r3, [r3, #0]
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d105      	bne.n	80057e0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057d4:	4b07      	ldr	r3, [pc, #28]	; (80057f4 <prvGetNextExpireTime+0x44>)
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	68db      	ldr	r3, [r3, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	60fb      	str	r3, [r7, #12]
 80057de:	e001      	b.n	80057e4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057e0:	2300      	movs	r3, #0
 80057e2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057e4:	68fb      	ldr	r3, [r7, #12]
}
 80057e6:	4618      	mov	r0, r3
 80057e8:	3714      	adds	r7, #20
 80057ea:	46bd      	mov	sp, r7
 80057ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f0:	4770      	bx	lr
 80057f2:	bf00      	nop
 80057f4:	20000e58 	.word	0x20000e58

080057f8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b084      	sub	sp, #16
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005800:	f7ff fa74 	bl	8004cec <xTaskGetTickCount>
 8005804:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005806:	4b0b      	ldr	r3, [pc, #44]	; (8005834 <prvSampleTimeNow+0x3c>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	429a      	cmp	r2, r3
 800580e:	d205      	bcs.n	800581c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005810:	f000 f936 	bl	8005a80 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	2201      	movs	r2, #1
 8005818:	601a      	str	r2, [r3, #0]
 800581a:	e002      	b.n	8005822 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2200      	movs	r2, #0
 8005820:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8005822:	4a04      	ldr	r2, [pc, #16]	; (8005834 <prvSampleTimeNow+0x3c>)
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005828:	68fb      	ldr	r3, [r7, #12]
}
 800582a:	4618      	mov	r0, r3
 800582c:	3710      	adds	r7, #16
 800582e:	46bd      	mov	sp, r7
 8005830:	bd80      	pop	{r7, pc}
 8005832:	bf00      	nop
 8005834:	20000e68 	.word	0x20000e68

08005838 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005838:	b580      	push	{r7, lr}
 800583a:	b086      	sub	sp, #24
 800583c:	af00      	add	r7, sp, #0
 800583e:	60f8      	str	r0, [r7, #12]
 8005840:	60b9      	str	r1, [r7, #8]
 8005842:	607a      	str	r2, [r7, #4]
 8005844:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8005846:	2300      	movs	r3, #0
 8005848:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	68ba      	ldr	r2, [r7, #8]
 800584e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	68fa      	ldr	r2, [r7, #12]
 8005854:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8005856:	68ba      	ldr	r2, [r7, #8]
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	429a      	cmp	r2, r3
 800585c:	d812      	bhi.n	8005884 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	683b      	ldr	r3, [r7, #0]
 8005862:	1ad2      	subs	r2, r2, r3
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	699b      	ldr	r3, [r3, #24]
 8005868:	429a      	cmp	r2, r3
 800586a:	d302      	bcc.n	8005872 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800586c:	2301      	movs	r3, #1
 800586e:	617b      	str	r3, [r7, #20]
 8005870:	e01b      	b.n	80058aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8005872:	4b10      	ldr	r3, [pc, #64]	; (80058b4 <prvInsertTimerInActiveList+0x7c>)
 8005874:	681a      	ldr	r2, [r3, #0]
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	3304      	adds	r3, #4
 800587a:	4619      	mov	r1, r3
 800587c:	4610      	mov	r0, r2
 800587e:	f7fe f8d8 	bl	8003a32 <vListInsert>
 8005882:	e012      	b.n	80058aa <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	429a      	cmp	r2, r3
 800588a:	d206      	bcs.n	800589a <prvInsertTimerInActiveList+0x62>
 800588c:	68ba      	ldr	r2, [r7, #8]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d302      	bcc.n	800589a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005894:	2301      	movs	r3, #1
 8005896:	617b      	str	r3, [r7, #20]
 8005898:	e007      	b.n	80058aa <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800589a:	4b07      	ldr	r3, [pc, #28]	; (80058b8 <prvInsertTimerInActiveList+0x80>)
 800589c:	681a      	ldr	r2, [r3, #0]
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3304      	adds	r3, #4
 80058a2:	4619      	mov	r1, r3
 80058a4:	4610      	mov	r0, r2
 80058a6:	f7fe f8c4 	bl	8003a32 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058aa:	697b      	ldr	r3, [r7, #20]
}
 80058ac:	4618      	mov	r0, r3
 80058ae:	3718      	adds	r7, #24
 80058b0:	46bd      	mov	sp, r7
 80058b2:	bd80      	pop	{r7, pc}
 80058b4:	20000e5c 	.word	0x20000e5c
 80058b8:	20000e58 	.word	0x20000e58

080058bc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058bc:	b580      	push	{r7, lr}
 80058be:	b08e      	sub	sp, #56	; 0x38
 80058c0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058c2:	e0ca      	b.n	8005a5a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	da18      	bge.n	80058fc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058ca:	1d3b      	adds	r3, r7, #4
 80058cc:	3304      	adds	r3, #4
 80058ce:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	d10a      	bne.n	80058ec <prvProcessReceivedCommands+0x30>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	61fb      	str	r3, [r7, #28]
}
 80058e8:	bf00      	nop
 80058ea:	e7fe      	b.n	80058ea <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f2:	6850      	ldr	r0, [r2, #4]
 80058f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058f6:	6892      	ldr	r2, [r2, #8]
 80058f8:	4611      	mov	r1, r2
 80058fa:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f2c0 80aa 	blt.w	8005a58 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005908:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d004      	beq.n	800591a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	3304      	adds	r3, #4
 8005914:	4618      	mov	r0, r3
 8005916:	f7fe f8c5 	bl	8003aa4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800591a:	463b      	mov	r3, r7
 800591c:	4618      	mov	r0, r3
 800591e:	f7ff ff6b 	bl	80057f8 <prvSampleTimeNow>
 8005922:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2b09      	cmp	r3, #9
 8005928:	f200 8097 	bhi.w	8005a5a <prvProcessReceivedCommands+0x19e>
 800592c:	a201      	add	r2, pc, #4	; (adr r2, 8005934 <prvProcessReceivedCommands+0x78>)
 800592e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005932:	bf00      	nop
 8005934:	0800595d 	.word	0x0800595d
 8005938:	0800595d 	.word	0x0800595d
 800593c:	0800595d 	.word	0x0800595d
 8005940:	080059d1 	.word	0x080059d1
 8005944:	080059e5 	.word	0x080059e5
 8005948:	08005a2f 	.word	0x08005a2f
 800594c:	0800595d 	.word	0x0800595d
 8005950:	0800595d 	.word	0x0800595d
 8005954:	080059d1 	.word	0x080059d1
 8005958:	080059e5 	.word	0x080059e5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800595c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800595e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005962:	f043 0301 	orr.w	r3, r3, #1
 8005966:	b2da      	uxtb	r2, r3
 8005968:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800596a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	699b      	ldr	r3, [r3, #24]
 8005974:	18d1      	adds	r1, r2, r3
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800597a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800597c:	f7ff ff5c 	bl	8005838 <prvInsertTimerInActiveList>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d069      	beq.n	8005a5a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005986:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800598c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005994:	f003 0304 	and.w	r3, r3, #4
 8005998:	2b00      	cmp	r3, #0
 800599a:	d05e      	beq.n	8005a5a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800599c:	68ba      	ldr	r2, [r7, #8]
 800599e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a0:	699b      	ldr	r3, [r3, #24]
 80059a2:	441a      	add	r2, r3
 80059a4:	2300      	movs	r3, #0
 80059a6:	9300      	str	r3, [sp, #0]
 80059a8:	2300      	movs	r3, #0
 80059aa:	2100      	movs	r1, #0
 80059ac:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059ae:	f7ff fe05 	bl	80055bc <xTimerGenericCommand>
 80059b2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059b4:	6a3b      	ldr	r3, [r7, #32]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d14f      	bne.n	8005a5a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80059ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059be:	f383 8811 	msr	BASEPRI, r3
 80059c2:	f3bf 8f6f 	isb	sy
 80059c6:	f3bf 8f4f 	dsb	sy
 80059ca:	61bb      	str	r3, [r7, #24]
}
 80059cc:	bf00      	nop
 80059ce:	e7fe      	b.n	80059ce <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	b2da      	uxtb	r2, r3
 80059dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80059e2:	e03a      	b.n	8005a5a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059ea:	f043 0301 	orr.w	r3, r3, #1
 80059ee:	b2da      	uxtb	r2, r3
 80059f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059f2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059f6:	68ba      	ldr	r2, [r7, #8]
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80059fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fe:	699b      	ldr	r3, [r3, #24]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d10a      	bne.n	8005a1a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005a04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a08:	f383 8811 	msr	BASEPRI, r3
 8005a0c:	f3bf 8f6f 	isb	sy
 8005a10:	f3bf 8f4f 	dsb	sy
 8005a14:	617b      	str	r3, [r7, #20]
}
 8005a16:	bf00      	nop
 8005a18:	e7fe      	b.n	8005a18 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a1c:	699a      	ldr	r2, [r3, #24]
 8005a1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a20:	18d1      	adds	r1, r2, r3
 8005a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a26:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a28:	f7ff ff06 	bl	8005838 <prvInsertTimerInActiveList>
					break;
 8005a2c:	e015      	b.n	8005a5a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a2e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a34:	f003 0302 	and.w	r3, r3, #2
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005a3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a3e:	f000 fbdf 	bl	8006200 <vPortFree>
 8005a42:	e00a      	b.n	8005a5a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a46:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a4a:	f023 0301 	bic.w	r3, r3, #1
 8005a4e:	b2da      	uxtb	r2, r3
 8005a50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a52:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a56:	e000      	b.n	8005a5a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a58:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a5a:	4b08      	ldr	r3, [pc, #32]	; (8005a7c <prvProcessReceivedCommands+0x1c0>)
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	1d39      	adds	r1, r7, #4
 8005a60:	2200      	movs	r2, #0
 8005a62:	4618      	mov	r0, r3
 8005a64:	f7fe fae6 	bl	8004034 <xQueueReceive>
 8005a68:	4603      	mov	r3, r0
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	f47f af2a 	bne.w	80058c4 <prvProcessReceivedCommands+0x8>
	}
}
 8005a70:	bf00      	nop
 8005a72:	bf00      	nop
 8005a74:	3730      	adds	r7, #48	; 0x30
 8005a76:	46bd      	mov	sp, r7
 8005a78:	bd80      	pop	{r7, pc}
 8005a7a:	bf00      	nop
 8005a7c:	20000e60 	.word	0x20000e60

08005a80 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b088      	sub	sp, #32
 8005a84:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a86:	e048      	b.n	8005b1a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a88:	4b2d      	ldr	r3, [pc, #180]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	68db      	ldr	r3, [r3, #12]
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a92:	4b2b      	ldr	r3, [pc, #172]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	68db      	ldr	r3, [r3, #12]
 8005a9a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	3304      	adds	r3, #4
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f7fd ffff 	bl	8003aa4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	6a1b      	ldr	r3, [r3, #32]
 8005aaa:	68f8      	ldr	r0, [r7, #12]
 8005aac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005ab4:	f003 0304 	and.w	r3, r3, #4
 8005ab8:	2b00      	cmp	r3, #0
 8005aba:	d02e      	beq.n	8005b1a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	699b      	ldr	r3, [r3, #24]
 8005ac0:	693a      	ldr	r2, [r7, #16]
 8005ac2:	4413      	add	r3, r2
 8005ac4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ac6:	68ba      	ldr	r2, [r7, #8]
 8005ac8:	693b      	ldr	r3, [r7, #16]
 8005aca:	429a      	cmp	r2, r3
 8005acc:	d90e      	bls.n	8005aec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	68ba      	ldr	r2, [r7, #8]
 8005ad2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	68fa      	ldr	r2, [r7, #12]
 8005ad8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ada:	4b19      	ldr	r3, [pc, #100]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	3304      	adds	r3, #4
 8005ae2:	4619      	mov	r1, r3
 8005ae4:	4610      	mov	r0, r2
 8005ae6:	f7fd ffa4 	bl	8003a32 <vListInsert>
 8005aea:	e016      	b.n	8005b1a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005aec:	2300      	movs	r3, #0
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	2300      	movs	r3, #0
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	2100      	movs	r1, #0
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f7ff fd60 	bl	80055bc <xTimerGenericCommand>
 8005afc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d10a      	bne.n	8005b1a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005b04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b08:	f383 8811 	msr	BASEPRI, r3
 8005b0c:	f3bf 8f6f 	isb	sy
 8005b10:	f3bf 8f4f 	dsb	sy
 8005b14:	603b      	str	r3, [r7, #0]
}
 8005b16:	bf00      	nop
 8005b18:	e7fe      	b.n	8005b18 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b1a:	4b09      	ldr	r3, [pc, #36]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	d1b1      	bne.n	8005a88 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b24:	4b06      	ldr	r3, [pc, #24]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b2a:	4b06      	ldr	r3, [pc, #24]	; (8005b44 <prvSwitchTimerLists+0xc4>)
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	4a04      	ldr	r2, [pc, #16]	; (8005b40 <prvSwitchTimerLists+0xc0>)
 8005b30:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b32:	4a04      	ldr	r2, [pc, #16]	; (8005b44 <prvSwitchTimerLists+0xc4>)
 8005b34:	697b      	ldr	r3, [r7, #20]
 8005b36:	6013      	str	r3, [r2, #0]
}
 8005b38:	bf00      	nop
 8005b3a:	3718      	adds	r7, #24
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	bd80      	pop	{r7, pc}
 8005b40:	20000e58 	.word	0x20000e58
 8005b44:	20000e5c 	.word	0x20000e5c

08005b48 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b4e:	f000 f969 	bl	8005e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b52:	4b15      	ldr	r3, [pc, #84]	; (8005ba8 <prvCheckForValidListAndQueue+0x60>)
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d120      	bne.n	8005b9c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b5a:	4814      	ldr	r0, [pc, #80]	; (8005bac <prvCheckForValidListAndQueue+0x64>)
 8005b5c:	f7fd ff18 	bl	8003990 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b60:	4813      	ldr	r0, [pc, #76]	; (8005bb0 <prvCheckForValidListAndQueue+0x68>)
 8005b62:	f7fd ff15 	bl	8003990 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b66:	4b13      	ldr	r3, [pc, #76]	; (8005bb4 <prvCheckForValidListAndQueue+0x6c>)
 8005b68:	4a10      	ldr	r2, [pc, #64]	; (8005bac <prvCheckForValidListAndQueue+0x64>)
 8005b6a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b6c:	4b12      	ldr	r3, [pc, #72]	; (8005bb8 <prvCheckForValidListAndQueue+0x70>)
 8005b6e:	4a10      	ldr	r2, [pc, #64]	; (8005bb0 <prvCheckForValidListAndQueue+0x68>)
 8005b70:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b72:	2300      	movs	r3, #0
 8005b74:	9300      	str	r3, [sp, #0]
 8005b76:	4b11      	ldr	r3, [pc, #68]	; (8005bbc <prvCheckForValidListAndQueue+0x74>)
 8005b78:	4a11      	ldr	r2, [pc, #68]	; (8005bc0 <prvCheckForValidListAndQueue+0x78>)
 8005b7a:	2110      	movs	r1, #16
 8005b7c:	200a      	movs	r0, #10
 8005b7e:	f7fe f823 	bl	8003bc8 <xQueueGenericCreateStatic>
 8005b82:	4603      	mov	r3, r0
 8005b84:	4a08      	ldr	r2, [pc, #32]	; (8005ba8 <prvCheckForValidListAndQueue+0x60>)
 8005b86:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b88:	4b07      	ldr	r3, [pc, #28]	; (8005ba8 <prvCheckForValidListAndQueue+0x60>)
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d005      	beq.n	8005b9c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b90:	4b05      	ldr	r3, [pc, #20]	; (8005ba8 <prvCheckForValidListAndQueue+0x60>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	490b      	ldr	r1, [pc, #44]	; (8005bc4 <prvCheckForValidListAndQueue+0x7c>)
 8005b96:	4618      	mov	r0, r3
 8005b98:	f7fe fc3c 	bl	8004414 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b9c:	f000 f972 	bl	8005e84 <vPortExitCritical>
}
 8005ba0:	bf00      	nop
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	20000e60 	.word	0x20000e60
 8005bac:	20000e30 	.word	0x20000e30
 8005bb0:	20000e44 	.word	0x20000e44
 8005bb4:	20000e58 	.word	0x20000e58
 8005bb8:	20000e5c 	.word	0x20000e5c
 8005bbc:	20000f0c 	.word	0x20000f0c
 8005bc0:	20000e6c 	.word	0x20000e6c
 8005bc4:	08007124 	.word	0x08007124

08005bc8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bc8:	b480      	push	{r7}
 8005bca:	b085      	sub	sp, #20
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	3b04      	subs	r3, #4
 8005bd8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005be0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	3b04      	subs	r3, #4
 8005be6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f023 0201 	bic.w	r2, r3, #1
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	3b04      	subs	r3, #4
 8005bf6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005bf8:	4a0c      	ldr	r2, [pc, #48]	; (8005c2c <pxPortInitialiseStack+0x64>)
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	3b14      	subs	r3, #20
 8005c02:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c04:	687a      	ldr	r2, [r7, #4]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	3b04      	subs	r3, #4
 8005c0e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	f06f 0202 	mvn.w	r2, #2
 8005c16:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	3b20      	subs	r3, #32
 8005c1c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3714      	adds	r7, #20
 8005c24:	46bd      	mov	sp, r7
 8005c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c2a:	4770      	bx	lr
 8005c2c:	08005c31 	.word	0x08005c31

08005c30 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c30:	b480      	push	{r7}
 8005c32:	b085      	sub	sp, #20
 8005c34:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c36:	2300      	movs	r3, #0
 8005c38:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c3a:	4b12      	ldr	r3, [pc, #72]	; (8005c84 <prvTaskExitError+0x54>)
 8005c3c:	681b      	ldr	r3, [r3, #0]
 8005c3e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c42:	d00a      	beq.n	8005c5a <prvTaskExitError+0x2a>
	__asm volatile
 8005c44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c48:	f383 8811 	msr	BASEPRI, r3
 8005c4c:	f3bf 8f6f 	isb	sy
 8005c50:	f3bf 8f4f 	dsb	sy
 8005c54:	60fb      	str	r3, [r7, #12]
}
 8005c56:	bf00      	nop
 8005c58:	e7fe      	b.n	8005c58 <prvTaskExitError+0x28>
	__asm volatile
 8005c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5e:	f383 8811 	msr	BASEPRI, r3
 8005c62:	f3bf 8f6f 	isb	sy
 8005c66:	f3bf 8f4f 	dsb	sy
 8005c6a:	60bb      	str	r3, [r7, #8]
}
 8005c6c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c6e:	bf00      	nop
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d0fc      	beq.n	8005c70 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c76:	bf00      	nop
 8005c78:	bf00      	nop
 8005c7a:	3714      	adds	r7, #20
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c82:	4770      	bx	lr
 8005c84:	20000010 	.word	0x20000010
	...

08005c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <pxCurrentTCBConst2>)
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	6808      	ldr	r0, [r1, #0]
 8005c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9a:	f380 8809 	msr	PSP, r0
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f380 8811 	msr	BASEPRI, r0
 8005caa:	4770      	bx	lr
 8005cac:	f3af 8000 	nop.w

08005cb0 <pxCurrentTCBConst2>:
 8005cb0:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop

08005cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cb8:	4808      	ldr	r0, [pc, #32]	; (8005cdc <prvPortStartFirstTask+0x24>)
 8005cba:	6800      	ldr	r0, [r0, #0]
 8005cbc:	6800      	ldr	r0, [r0, #0]
 8005cbe:	f380 8808 	msr	MSP, r0
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f380 8814 	msr	CONTROL, r0
 8005cca:	b662      	cpsie	i
 8005ccc:	b661      	cpsie	f
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	df00      	svc	0
 8005cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cda:	bf00      	nop
 8005cdc:	e000ed08 	.word	0xe000ed08

08005ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ce6:	4b46      	ldr	r3, [pc, #280]	; (8005e00 <xPortStartScheduler+0x120>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a46      	ldr	r2, [pc, #280]	; (8005e04 <xPortStartScheduler+0x124>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d10a      	bne.n	8005d06 <xPortStartScheduler+0x26>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	613b      	str	r3, [r7, #16]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d06:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <xPortStartScheduler+0x120>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	; (8005e08 <xPortStartScheduler+0x128>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d10a      	bne.n	8005d26 <xPortStartScheduler+0x46>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60fb      	str	r3, [r7, #12]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d26:	4b39      	ldr	r3, [pc, #228]	; (8005e0c <xPortStartScheduler+0x12c>)
 8005d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	22ff      	movs	r2, #255	; 0xff
 8005d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	4b31      	ldr	r3, [pc, #196]	; (8005e10 <xPortStartScheduler+0x130>)
 8005d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d4e:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d50:	2207      	movs	r2, #7
 8005d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d54:	e009      	b.n	8005d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d56:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	2b80      	cmp	r3, #128	; 0x80
 8005d74:	d0ef      	beq.n	8005d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1c3 0307 	rsb	r3, r3, #7
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d00a      	beq.n	8005d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60bb      	str	r3, [r7, #8]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <xPortStartScheduler+0x134>)
 8005da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005da2:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <xPortStartScheduler+0x134>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005daa:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <xPortStartScheduler+0x134>)
 8005dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005db6:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <xPortStartScheduler+0x138>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dce:	f000 f8dd 	bl	8005f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <xPortStartScheduler+0x13c>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dd8:	f000 f8fc 	bl	8005fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ddc:	4b10      	ldr	r3, [pc, #64]	; (8005e20 <xPortStartScheduler+0x140>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <xPortStartScheduler+0x140>)
 8005de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005de8:	f7ff ff66 	bl	8005cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dec:	f7ff f848 	bl	8004e80 <vTaskSwitchContext>
	prvTaskExitError();
 8005df0:	f7ff ff1e 	bl	8005c30 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	e000ed00 	.word	0xe000ed00
 8005e04:	410fc271 	.word	0x410fc271
 8005e08:	410fc270 	.word	0x410fc270
 8005e0c:	e000e400 	.word	0xe000e400
 8005e10:	20000f5c 	.word	0x20000f5c
 8005e14:	20000f60 	.word	0x20000f60
 8005e18:	e000ed20 	.word	0xe000ed20
 8005e1c:	20000010 	.word	0x20000010
 8005e20:	e000ef34 	.word	0xe000ef34

08005e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	607b      	str	r3, [r7, #4]
}
 8005e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d10f      	bne.n	8005e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <vPortEnterCritical+0x5c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	603b      	str	r3, [r7, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <vPortEnterCritical+0x4a>
	}
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	20000010 	.word	0x20000010
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e8a:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <vPortExitCritical+0x50>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <vPortExitCritical+0x24>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	607b      	str	r3, [r7, #4]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d105      	bne.n	8005ec6 <vPortExitCritical+0x42>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	f383 8811 	msr	BASEPRI, r3
}
 8005ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	20000010 	.word	0x20000010
	...

08005ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ee0:	f3ef 8009 	mrs	r0, PSP
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <pxCurrentTCBConst>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	f01e 0f10 	tst.w	lr, #16
 8005ef0:	bf08      	it	eq
 8005ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	6010      	str	r0, [r2, #0]
 8005efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f04:	f380 8811 	msr	BASEPRI, r0
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f7fe ffb6 	bl	8004e80 <vTaskSwitchContext>
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f380 8811 	msr	BASEPRI, r0
 8005f1c:	bc09      	pop	{r0, r3}
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	6808      	ldr	r0, [r1, #0]
 8005f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f26:	f01e 0f10 	tst.w	lr, #16
 8005f2a:	bf08      	it	eq
 8005f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f30:	f380 8809 	msr	PSP, r0
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst>:
 8005f40:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop

08005f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	607b      	str	r3, [r7, #4]
}
 8005f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f62:	f7fe fed3 	bl	8004d0c <xTaskIncrementTick>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <xPortSysTickHandler+0x40>)
 8005f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f383 8811 	msr	BASEPRI, r3
}
 8005f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <vPortSetupTimerInterrupt+0x34>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <vPortSetupTimerInterrupt+0x38>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <vPortSetupTimerInterrupt+0x3c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <vPortSetupTimerInterrupt+0x40>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	099b      	lsrs	r3, r3, #6
 8005fa8:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <vPortSetupTimerInterrupt+0x44>)
 8005faa:	3b01      	subs	r3, #1
 8005fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fae:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <vPortSetupTimerInterrupt+0x34>)
 8005fb0:	2207      	movs	r2, #7
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	e000e010 	.word	0xe000e010
 8005fc4:	e000e018 	.word	0xe000e018
 8005fc8:	20000004 	.word	0x20000004
 8005fcc:	10624dd3 	.word	0x10624dd3
 8005fd0:	e000e014 	.word	0xe000e014

08005fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fe4 <vPortEnableVFP+0x10>
 8005fd8:	6801      	ldr	r1, [r0, #0]
 8005fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fde:	6001      	str	r1, [r0, #0]
 8005fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fe2:	bf00      	nop
 8005fe4:	e000ed88 	.word	0xe000ed88

08005fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fee:	f3ef 8305 	mrs	r3, IPSR
 8005ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b0f      	cmp	r3, #15
 8005ff8:	d914      	bls.n	8006024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ffa:	4a17      	ldr	r2, [pc, #92]	; (8006058 <vPortValidateInterruptPriority+0x70>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006004:	4b15      	ldr	r3, [pc, #84]	; (800605c <vPortValidateInterruptPriority+0x74>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	7afa      	ldrb	r2, [r7, #11]
 800600a:	429a      	cmp	r2, r3
 800600c:	d20a      	bcs.n	8006024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	607b      	str	r3, [r7, #4]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006024:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <vPortValidateInterruptPriority+0x78>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800602c:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <vPortValidateInterruptPriority+0x7c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d90a      	bls.n	800604a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	603b      	str	r3, [r7, #0]
}
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <vPortValidateInterruptPriority+0x60>
	}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	e000e3f0 	.word	0xe000e3f0
 800605c:	20000f5c 	.word	0x20000f5c
 8006060:	e000ed0c 	.word	0xe000ed0c
 8006064:	20000f60 	.word	0x20000f60

08006068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006074:	f7fe fd8e 	bl	8004b94 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006078:	4b5b      	ldr	r3, [pc, #364]	; (80061e8 <pvPortMalloc+0x180>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006080:	f000 f920 	bl	80062c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006084:	4b59      	ldr	r3, [pc, #356]	; (80061ec <pvPortMalloc+0x184>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4013      	ands	r3, r2
 800608c:	2b00      	cmp	r3, #0
 800608e:	f040 8093 	bne.w	80061b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01d      	beq.n	80060d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006098:	2208      	movs	r2, #8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4413      	add	r3, r2
 800609e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d014      	beq.n	80060d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f023 0307 	bic.w	r3, r3, #7
 80060b0:	3308      	adds	r3, #8
 80060b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <pvPortMalloc+0x6c>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	617b      	str	r3, [r7, #20]
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d06e      	beq.n	80061b8 <pvPortMalloc+0x150>
 80060da:	4b45      	ldr	r3, [pc, #276]	; (80061f0 <pvPortMalloc+0x188>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d869      	bhi.n	80061b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060e4:	4b43      	ldr	r3, [pc, #268]	; (80061f4 <pvPortMalloc+0x18c>)
 80060e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060e8:	4b42      	ldr	r3, [pc, #264]	; (80061f4 <pvPortMalloc+0x18c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ee:	e004      	b.n	80060fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	429a      	cmp	r2, r3
 8006102:	d903      	bls.n	800610c <pvPortMalloc+0xa4>
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f1      	bne.n	80060f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800610c:	4b36      	ldr	r3, [pc, #216]	; (80061e8 <pvPortMalloc+0x180>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006112:	429a      	cmp	r2, r3
 8006114:	d050      	beq.n	80061b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2208      	movs	r2, #8
 800611c:	4413      	add	r3, r2
 800611e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	2308      	movs	r3, #8
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	429a      	cmp	r2, r3
 8006136:	d91f      	bls.n	8006178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <pvPortMalloc+0xf8>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	613b      	str	r3, [r7, #16]
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	1ad2      	subs	r2, r2, r3
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006172:	69b8      	ldr	r0, [r7, #24]
 8006174:	f000 f908 	bl	8006388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006178:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <pvPortMalloc+0x188>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <pvPortMalloc+0x188>)
 8006184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006186:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <pvPortMalloc+0x188>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <pvPortMalloc+0x190>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d203      	bcs.n	800619a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006192:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <pvPortMalloc+0x188>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a18      	ldr	r2, [pc, #96]	; (80061f8 <pvPortMalloc+0x190>)
 8006198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <pvPortMalloc+0x184>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <pvPortMalloc+0x194>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	4a11      	ldr	r2, [pc, #68]	; (80061fc <pvPortMalloc+0x194>)
 80061b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061b8:	f7fe fcfa 	bl	8004bb0 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <pvPortMalloc+0x174>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60fb      	str	r3, [r7, #12]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <pvPortMalloc+0x172>
	return pvReturn;
 80061dc:	69fb      	ldr	r3, [r7, #28]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3728      	adds	r7, #40	; 0x28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20001b24 	.word	0x20001b24
 80061ec:	20001b38 	.word	0x20001b38
 80061f0:	20001b28 	.word	0x20001b28
 80061f4:	20001b1c 	.word	0x20001b1c
 80061f8:	20001b2c 	.word	0x20001b2c
 80061fc:	20001b30 	.word	0x20001b30

08006200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d04d      	beq.n	80062ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006212:	2308      	movs	r3, #8
 8006214:	425b      	negs	r3, r3
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4413      	add	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	4b24      	ldr	r3, [pc, #144]	; (80062b8 <vPortFree+0xb8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <vPortFree+0x44>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	60fb      	str	r3, [r7, #12]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <vPortFree+0x62>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	60bb      	str	r3, [r7, #8]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	4b14      	ldr	r3, [pc, #80]	; (80062b8 <vPortFree+0xb8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4013      	ands	r3, r2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01e      	beq.n	80062ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d11a      	bne.n	80062ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	4b0e      	ldr	r3, [pc, #56]	; (80062b8 <vPortFree+0xb8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	43db      	mvns	r3, r3
 8006282:	401a      	ands	r2, r3
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006288:	f7fe fc84 	bl	8004b94 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <vPortFree+0xbc>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4413      	add	r3, r2
 8006296:	4a09      	ldr	r2, [pc, #36]	; (80062bc <vPortFree+0xbc>)
 8006298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800629a:	6938      	ldr	r0, [r7, #16]
 800629c:	f000 f874 	bl	8006388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <vPortFree+0xc0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	4a06      	ldr	r2, [pc, #24]	; (80062c0 <vPortFree+0xc0>)
 80062a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062aa:	f7fe fc81 	bl	8004bb0 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062ae:	bf00      	nop
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20001b38 	.word	0x20001b38
 80062bc:	20001b28 	.word	0x20001b28
 80062c0:	20001b34 	.word	0x20001b34

080062c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80062ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062d0:	4b27      	ldr	r3, [pc, #156]	; (8006370 <prvHeapInit+0xac>)
 80062d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00c      	beq.n	80062f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3307      	adds	r3, #7
 80062e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0307 	bic.w	r3, r3, #7
 80062ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	4a1f      	ldr	r2, [pc, #124]	; (8006370 <prvHeapInit+0xac>)
 80062f4:	4413      	add	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062fc:	4a1d      	ldr	r2, [pc, #116]	; (8006374 <prvHeapInit+0xb0>)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006302:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <prvHeapInit+0xb0>)
 8006304:	2200      	movs	r2, #0
 8006306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	4413      	add	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006310:	2208      	movs	r2, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0307 	bic.w	r3, r3, #7
 800631e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4a15      	ldr	r2, [pc, #84]	; (8006378 <prvHeapInit+0xb4>)
 8006324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006326:	4b14      	ldr	r3, [pc, #80]	; (8006378 <prvHeapInit+0xb4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800632e:	4b12      	ldr	r3, [pc, #72]	; (8006378 <prvHeapInit+0xb4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	1ad2      	subs	r2, r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006344:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <prvHeapInit+0xb4>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4a0a      	ldr	r2, [pc, #40]	; (800637c <prvHeapInit+0xb8>)
 8006352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4a09      	ldr	r2, [pc, #36]	; (8006380 <prvHeapInit+0xbc>)
 800635a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800635c:	4b09      	ldr	r3, [pc, #36]	; (8006384 <prvHeapInit+0xc0>)
 800635e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006362:	601a      	str	r2, [r3, #0]
}
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	20000f64 	.word	0x20000f64
 8006374:	20001b1c 	.word	0x20001b1c
 8006378:	20001b24 	.word	0x20001b24
 800637c:	20001b2c 	.word	0x20001b2c
 8006380:	20001b28 	.word	0x20001b28
 8006384:	20001b38 	.word	0x20001b38

08006388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006390:	4b28      	ldr	r3, [pc, #160]	; (8006434 <prvInsertBlockIntoFreeList+0xac>)
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e002      	b.n	800639c <prvInsertBlockIntoFreeList+0x14>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d8f7      	bhi.n	8006396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	4413      	add	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d108      	bne.n	80063ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	441a      	add	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	441a      	add	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d118      	bne.n	8006410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <prvInsertBlockIntoFreeList+0xb0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d00d      	beq.n	8006406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	441a      	add	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e008      	b.n	8006418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <prvInsertBlockIntoFreeList+0xb0>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e003      	b.n	8006418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	429a      	cmp	r2, r3
 800641e:	d002      	beq.n	8006426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20001b1c 	.word	0x20001b1c
 8006438:	20001b24 	.word	0x20001b24

0800643c <atoi>:
 800643c:	220a      	movs	r2, #10
 800643e:	2100      	movs	r1, #0
 8006440:	f000 b9f2 	b.w	8006828 <strtol>

08006444 <__errno>:
 8006444:	4b01      	ldr	r3, [pc, #4]	; (800644c <__errno+0x8>)
 8006446:	6818      	ldr	r0, [r3, #0]
 8006448:	4770      	bx	lr
 800644a:	bf00      	nop
 800644c:	20000014 	.word	0x20000014

08006450 <__libc_init_array>:
 8006450:	b570      	push	{r4, r5, r6, lr}
 8006452:	4d0d      	ldr	r5, [pc, #52]	; (8006488 <__libc_init_array+0x38>)
 8006454:	4c0d      	ldr	r4, [pc, #52]	; (800648c <__libc_init_array+0x3c>)
 8006456:	1b64      	subs	r4, r4, r5
 8006458:	10a4      	asrs	r4, r4, #2
 800645a:	2600      	movs	r6, #0
 800645c:	42a6      	cmp	r6, r4
 800645e:	d109      	bne.n	8006474 <__libc_init_array+0x24>
 8006460:	4d0b      	ldr	r5, [pc, #44]	; (8006490 <__libc_init_array+0x40>)
 8006462:	4c0c      	ldr	r4, [pc, #48]	; (8006494 <__libc_init_array+0x44>)
 8006464:	f000 fd84 	bl	8006f70 <_init>
 8006468:	1b64      	subs	r4, r4, r5
 800646a:	10a4      	asrs	r4, r4, #2
 800646c:	2600      	movs	r6, #0
 800646e:	42a6      	cmp	r6, r4
 8006470:	d105      	bne.n	800647e <__libc_init_array+0x2e>
 8006472:	bd70      	pop	{r4, r5, r6, pc}
 8006474:	f855 3b04 	ldr.w	r3, [r5], #4
 8006478:	4798      	blx	r3
 800647a:	3601      	adds	r6, #1
 800647c:	e7ee      	b.n	800645c <__libc_init_array+0xc>
 800647e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006482:	4798      	blx	r3
 8006484:	3601      	adds	r6, #1
 8006486:	e7f2      	b.n	800646e <__libc_init_array+0x1e>
 8006488:	0800735c 	.word	0x0800735c
 800648c:	0800735c 	.word	0x0800735c
 8006490:	0800735c 	.word	0x0800735c
 8006494:	08007360 	.word	0x08007360

08006498 <__retarget_lock_acquire_recursive>:
 8006498:	4770      	bx	lr

0800649a <__retarget_lock_release_recursive>:
 800649a:	4770      	bx	lr

0800649c <memcpy>:
 800649c:	440a      	add	r2, r1
 800649e:	4291      	cmp	r1, r2
 80064a0:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80064a4:	d100      	bne.n	80064a8 <memcpy+0xc>
 80064a6:	4770      	bx	lr
 80064a8:	b510      	push	{r4, lr}
 80064aa:	f811 4b01 	ldrb.w	r4, [r1], #1
 80064ae:	f803 4f01 	strb.w	r4, [r3, #1]!
 80064b2:	4291      	cmp	r1, r2
 80064b4:	d1f9      	bne.n	80064aa <memcpy+0xe>
 80064b6:	bd10      	pop	{r4, pc}

080064b8 <memset>:
 80064b8:	4402      	add	r2, r0
 80064ba:	4603      	mov	r3, r0
 80064bc:	4293      	cmp	r3, r2
 80064be:	d100      	bne.n	80064c2 <memset+0xa>
 80064c0:	4770      	bx	lr
 80064c2:	f803 1b01 	strb.w	r1, [r3], #1
 80064c6:	e7f9      	b.n	80064bc <memset+0x4>

080064c8 <sbrk_aligned>:
 80064c8:	b570      	push	{r4, r5, r6, lr}
 80064ca:	4e0e      	ldr	r6, [pc, #56]	; (8006504 <sbrk_aligned+0x3c>)
 80064cc:	460c      	mov	r4, r1
 80064ce:	6831      	ldr	r1, [r6, #0]
 80064d0:	4605      	mov	r5, r0
 80064d2:	b911      	cbnz	r1, 80064da <sbrk_aligned+0x12>
 80064d4:	f000 f8f6 	bl	80066c4 <_sbrk_r>
 80064d8:	6030      	str	r0, [r6, #0]
 80064da:	4621      	mov	r1, r4
 80064dc:	4628      	mov	r0, r5
 80064de:	f000 f8f1 	bl	80066c4 <_sbrk_r>
 80064e2:	1c43      	adds	r3, r0, #1
 80064e4:	d00a      	beq.n	80064fc <sbrk_aligned+0x34>
 80064e6:	1cc4      	adds	r4, r0, #3
 80064e8:	f024 0403 	bic.w	r4, r4, #3
 80064ec:	42a0      	cmp	r0, r4
 80064ee:	d007      	beq.n	8006500 <sbrk_aligned+0x38>
 80064f0:	1a21      	subs	r1, r4, r0
 80064f2:	4628      	mov	r0, r5
 80064f4:	f000 f8e6 	bl	80066c4 <_sbrk_r>
 80064f8:	3001      	adds	r0, #1
 80064fa:	d101      	bne.n	8006500 <sbrk_aligned+0x38>
 80064fc:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006500:	4620      	mov	r0, r4
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	20001b44 	.word	0x20001b44

08006508 <_malloc_r>:
 8006508:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800650c:	1ccd      	adds	r5, r1, #3
 800650e:	f025 0503 	bic.w	r5, r5, #3
 8006512:	3508      	adds	r5, #8
 8006514:	2d0c      	cmp	r5, #12
 8006516:	bf38      	it	cc
 8006518:	250c      	movcc	r5, #12
 800651a:	2d00      	cmp	r5, #0
 800651c:	4607      	mov	r7, r0
 800651e:	db01      	blt.n	8006524 <_malloc_r+0x1c>
 8006520:	42a9      	cmp	r1, r5
 8006522:	d905      	bls.n	8006530 <_malloc_r+0x28>
 8006524:	230c      	movs	r3, #12
 8006526:	603b      	str	r3, [r7, #0]
 8006528:	2600      	movs	r6, #0
 800652a:	4630      	mov	r0, r6
 800652c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006530:	4e2e      	ldr	r6, [pc, #184]	; (80065ec <_malloc_r+0xe4>)
 8006532:	f000 f983 	bl	800683c <__malloc_lock>
 8006536:	6833      	ldr	r3, [r6, #0]
 8006538:	461c      	mov	r4, r3
 800653a:	bb34      	cbnz	r4, 800658a <_malloc_r+0x82>
 800653c:	4629      	mov	r1, r5
 800653e:	4638      	mov	r0, r7
 8006540:	f7ff ffc2 	bl	80064c8 <sbrk_aligned>
 8006544:	1c43      	adds	r3, r0, #1
 8006546:	4604      	mov	r4, r0
 8006548:	d14d      	bne.n	80065e6 <_malloc_r+0xde>
 800654a:	6834      	ldr	r4, [r6, #0]
 800654c:	4626      	mov	r6, r4
 800654e:	2e00      	cmp	r6, #0
 8006550:	d140      	bne.n	80065d4 <_malloc_r+0xcc>
 8006552:	6823      	ldr	r3, [r4, #0]
 8006554:	4631      	mov	r1, r6
 8006556:	4638      	mov	r0, r7
 8006558:	eb04 0803 	add.w	r8, r4, r3
 800655c:	f000 f8b2 	bl	80066c4 <_sbrk_r>
 8006560:	4580      	cmp	r8, r0
 8006562:	d13a      	bne.n	80065da <_malloc_r+0xd2>
 8006564:	6821      	ldr	r1, [r4, #0]
 8006566:	3503      	adds	r5, #3
 8006568:	1a6d      	subs	r5, r5, r1
 800656a:	f025 0503 	bic.w	r5, r5, #3
 800656e:	3508      	adds	r5, #8
 8006570:	2d0c      	cmp	r5, #12
 8006572:	bf38      	it	cc
 8006574:	250c      	movcc	r5, #12
 8006576:	4629      	mov	r1, r5
 8006578:	4638      	mov	r0, r7
 800657a:	f7ff ffa5 	bl	80064c8 <sbrk_aligned>
 800657e:	3001      	adds	r0, #1
 8006580:	d02b      	beq.n	80065da <_malloc_r+0xd2>
 8006582:	6823      	ldr	r3, [r4, #0]
 8006584:	442b      	add	r3, r5
 8006586:	6023      	str	r3, [r4, #0]
 8006588:	e00e      	b.n	80065a8 <_malloc_r+0xa0>
 800658a:	6822      	ldr	r2, [r4, #0]
 800658c:	1b52      	subs	r2, r2, r5
 800658e:	d41e      	bmi.n	80065ce <_malloc_r+0xc6>
 8006590:	2a0b      	cmp	r2, #11
 8006592:	d916      	bls.n	80065c2 <_malloc_r+0xba>
 8006594:	1961      	adds	r1, r4, r5
 8006596:	42a3      	cmp	r3, r4
 8006598:	6025      	str	r5, [r4, #0]
 800659a:	bf18      	it	ne
 800659c:	6059      	strne	r1, [r3, #4]
 800659e:	6863      	ldr	r3, [r4, #4]
 80065a0:	bf08      	it	eq
 80065a2:	6031      	streq	r1, [r6, #0]
 80065a4:	5162      	str	r2, [r4, r5]
 80065a6:	604b      	str	r3, [r1, #4]
 80065a8:	4638      	mov	r0, r7
 80065aa:	f104 060b 	add.w	r6, r4, #11
 80065ae:	f000 f94b 	bl	8006848 <__malloc_unlock>
 80065b2:	f026 0607 	bic.w	r6, r6, #7
 80065b6:	1d23      	adds	r3, r4, #4
 80065b8:	1af2      	subs	r2, r6, r3
 80065ba:	d0b6      	beq.n	800652a <_malloc_r+0x22>
 80065bc:	1b9b      	subs	r3, r3, r6
 80065be:	50a3      	str	r3, [r4, r2]
 80065c0:	e7b3      	b.n	800652a <_malloc_r+0x22>
 80065c2:	6862      	ldr	r2, [r4, #4]
 80065c4:	42a3      	cmp	r3, r4
 80065c6:	bf0c      	ite	eq
 80065c8:	6032      	streq	r2, [r6, #0]
 80065ca:	605a      	strne	r2, [r3, #4]
 80065cc:	e7ec      	b.n	80065a8 <_malloc_r+0xa0>
 80065ce:	4623      	mov	r3, r4
 80065d0:	6864      	ldr	r4, [r4, #4]
 80065d2:	e7b2      	b.n	800653a <_malloc_r+0x32>
 80065d4:	4634      	mov	r4, r6
 80065d6:	6876      	ldr	r6, [r6, #4]
 80065d8:	e7b9      	b.n	800654e <_malloc_r+0x46>
 80065da:	230c      	movs	r3, #12
 80065dc:	603b      	str	r3, [r7, #0]
 80065de:	4638      	mov	r0, r7
 80065e0:	f000 f932 	bl	8006848 <__malloc_unlock>
 80065e4:	e7a1      	b.n	800652a <_malloc_r+0x22>
 80065e6:	6025      	str	r5, [r4, #0]
 80065e8:	e7de      	b.n	80065a8 <_malloc_r+0xa0>
 80065ea:	bf00      	nop
 80065ec:	20001b40 	.word	0x20001b40

080065f0 <cleanup_glue>:
 80065f0:	b538      	push	{r3, r4, r5, lr}
 80065f2:	460c      	mov	r4, r1
 80065f4:	6809      	ldr	r1, [r1, #0]
 80065f6:	4605      	mov	r5, r0
 80065f8:	b109      	cbz	r1, 80065fe <cleanup_glue+0xe>
 80065fa:	f7ff fff9 	bl	80065f0 <cleanup_glue>
 80065fe:	4621      	mov	r1, r4
 8006600:	4628      	mov	r0, r5
 8006602:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006606:	f000 b925 	b.w	8006854 <_free_r>
	...

0800660c <_reclaim_reent>:
 800660c:	4b2c      	ldr	r3, [pc, #176]	; (80066c0 <_reclaim_reent+0xb4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4283      	cmp	r3, r0
 8006612:	b570      	push	{r4, r5, r6, lr}
 8006614:	4604      	mov	r4, r0
 8006616:	d051      	beq.n	80066bc <_reclaim_reent+0xb0>
 8006618:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800661a:	b143      	cbz	r3, 800662e <_reclaim_reent+0x22>
 800661c:	68db      	ldr	r3, [r3, #12]
 800661e:	2b00      	cmp	r3, #0
 8006620:	d14a      	bne.n	80066b8 <_reclaim_reent+0xac>
 8006622:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006624:	6819      	ldr	r1, [r3, #0]
 8006626:	b111      	cbz	r1, 800662e <_reclaim_reent+0x22>
 8006628:	4620      	mov	r0, r4
 800662a:	f000 f913 	bl	8006854 <_free_r>
 800662e:	6961      	ldr	r1, [r4, #20]
 8006630:	b111      	cbz	r1, 8006638 <_reclaim_reent+0x2c>
 8006632:	4620      	mov	r0, r4
 8006634:	f000 f90e 	bl	8006854 <_free_r>
 8006638:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800663a:	b111      	cbz	r1, 8006642 <_reclaim_reent+0x36>
 800663c:	4620      	mov	r0, r4
 800663e:	f000 f909 	bl	8006854 <_free_r>
 8006642:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006644:	b111      	cbz	r1, 800664c <_reclaim_reent+0x40>
 8006646:	4620      	mov	r0, r4
 8006648:	f000 f904 	bl	8006854 <_free_r>
 800664c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800664e:	b111      	cbz	r1, 8006656 <_reclaim_reent+0x4a>
 8006650:	4620      	mov	r0, r4
 8006652:	f000 f8ff 	bl	8006854 <_free_r>
 8006656:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8006658:	b111      	cbz	r1, 8006660 <_reclaim_reent+0x54>
 800665a:	4620      	mov	r0, r4
 800665c:	f000 f8fa 	bl	8006854 <_free_r>
 8006660:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006662:	b111      	cbz	r1, 800666a <_reclaim_reent+0x5e>
 8006664:	4620      	mov	r0, r4
 8006666:	f000 f8f5 	bl	8006854 <_free_r>
 800666a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800666c:	b111      	cbz	r1, 8006674 <_reclaim_reent+0x68>
 800666e:	4620      	mov	r0, r4
 8006670:	f000 f8f0 	bl	8006854 <_free_r>
 8006674:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006676:	b111      	cbz	r1, 800667e <_reclaim_reent+0x72>
 8006678:	4620      	mov	r0, r4
 800667a:	f000 f8eb 	bl	8006854 <_free_r>
 800667e:	69a3      	ldr	r3, [r4, #24]
 8006680:	b1e3      	cbz	r3, 80066bc <_reclaim_reent+0xb0>
 8006682:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006684:	4620      	mov	r0, r4
 8006686:	4798      	blx	r3
 8006688:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800668a:	b1b9      	cbz	r1, 80066bc <_reclaim_reent+0xb0>
 800668c:	4620      	mov	r0, r4
 800668e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006692:	f7ff bfad 	b.w	80065f0 <cleanup_glue>
 8006696:	5949      	ldr	r1, [r1, r5]
 8006698:	b941      	cbnz	r1, 80066ac <_reclaim_reent+0xa0>
 800669a:	3504      	adds	r5, #4
 800669c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800669e:	2d80      	cmp	r5, #128	; 0x80
 80066a0:	68d9      	ldr	r1, [r3, #12]
 80066a2:	d1f8      	bne.n	8006696 <_reclaim_reent+0x8a>
 80066a4:	4620      	mov	r0, r4
 80066a6:	f000 f8d5 	bl	8006854 <_free_r>
 80066aa:	e7ba      	b.n	8006622 <_reclaim_reent+0x16>
 80066ac:	680e      	ldr	r6, [r1, #0]
 80066ae:	4620      	mov	r0, r4
 80066b0:	f000 f8d0 	bl	8006854 <_free_r>
 80066b4:	4631      	mov	r1, r6
 80066b6:	e7ef      	b.n	8006698 <_reclaim_reent+0x8c>
 80066b8:	2500      	movs	r5, #0
 80066ba:	e7ef      	b.n	800669c <_reclaim_reent+0x90>
 80066bc:	bd70      	pop	{r4, r5, r6, pc}
 80066be:	bf00      	nop
 80066c0:	20000014 	.word	0x20000014

080066c4 <_sbrk_r>:
 80066c4:	b538      	push	{r3, r4, r5, lr}
 80066c6:	4d06      	ldr	r5, [pc, #24]	; (80066e0 <_sbrk_r+0x1c>)
 80066c8:	2300      	movs	r3, #0
 80066ca:	4604      	mov	r4, r0
 80066cc:	4608      	mov	r0, r1
 80066ce:	602b      	str	r3, [r5, #0]
 80066d0:	f7fa fa04 	bl	8000adc <_sbrk>
 80066d4:	1c43      	adds	r3, r0, #1
 80066d6:	d102      	bne.n	80066de <_sbrk_r+0x1a>
 80066d8:	682b      	ldr	r3, [r5, #0]
 80066da:	b103      	cbz	r3, 80066de <_sbrk_r+0x1a>
 80066dc:	6023      	str	r3, [r4, #0]
 80066de:	bd38      	pop	{r3, r4, r5, pc}
 80066e0:	20001b48 	.word	0x20001b48

080066e4 <siprintf>:
 80066e4:	b40e      	push	{r1, r2, r3}
 80066e6:	b500      	push	{lr}
 80066e8:	b09c      	sub	sp, #112	; 0x70
 80066ea:	ab1d      	add	r3, sp, #116	; 0x74
 80066ec:	9002      	str	r0, [sp, #8]
 80066ee:	9006      	str	r0, [sp, #24]
 80066f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80066f4:	4809      	ldr	r0, [pc, #36]	; (800671c <siprintf+0x38>)
 80066f6:	9107      	str	r1, [sp, #28]
 80066f8:	9104      	str	r1, [sp, #16]
 80066fa:	4909      	ldr	r1, [pc, #36]	; (8006720 <siprintf+0x3c>)
 80066fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8006700:	9105      	str	r1, [sp, #20]
 8006702:	6800      	ldr	r0, [r0, #0]
 8006704:	9301      	str	r3, [sp, #4]
 8006706:	a902      	add	r1, sp, #8
 8006708:	f000 f94c 	bl	80069a4 <_svfiprintf_r>
 800670c:	9b02      	ldr	r3, [sp, #8]
 800670e:	2200      	movs	r2, #0
 8006710:	701a      	strb	r2, [r3, #0]
 8006712:	b01c      	add	sp, #112	; 0x70
 8006714:	f85d eb04 	ldr.w	lr, [sp], #4
 8006718:	b003      	add	sp, #12
 800671a:	4770      	bx	lr
 800671c:	20000014 	.word	0x20000014
 8006720:	ffff0208 	.word	0xffff0208

08006724 <_strtol_l.constprop.0>:
 8006724:	2b01      	cmp	r3, #1
 8006726:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800672a:	d001      	beq.n	8006730 <_strtol_l.constprop.0+0xc>
 800672c:	2b24      	cmp	r3, #36	; 0x24
 800672e:	d906      	bls.n	800673e <_strtol_l.constprop.0+0x1a>
 8006730:	f7ff fe88 	bl	8006444 <__errno>
 8006734:	2316      	movs	r3, #22
 8006736:	6003      	str	r3, [r0, #0]
 8006738:	2000      	movs	r0, #0
 800673a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800673e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8006824 <_strtol_l.constprop.0+0x100>
 8006742:	460d      	mov	r5, r1
 8006744:	462e      	mov	r6, r5
 8006746:	f815 4b01 	ldrb.w	r4, [r5], #1
 800674a:	f814 700c 	ldrb.w	r7, [r4, ip]
 800674e:	f017 0708 	ands.w	r7, r7, #8
 8006752:	d1f7      	bne.n	8006744 <_strtol_l.constprop.0+0x20>
 8006754:	2c2d      	cmp	r4, #45	; 0x2d
 8006756:	d132      	bne.n	80067be <_strtol_l.constprop.0+0x9a>
 8006758:	782c      	ldrb	r4, [r5, #0]
 800675a:	2701      	movs	r7, #1
 800675c:	1cb5      	adds	r5, r6, #2
 800675e:	2b00      	cmp	r3, #0
 8006760:	d05b      	beq.n	800681a <_strtol_l.constprop.0+0xf6>
 8006762:	2b10      	cmp	r3, #16
 8006764:	d109      	bne.n	800677a <_strtol_l.constprop.0+0x56>
 8006766:	2c30      	cmp	r4, #48	; 0x30
 8006768:	d107      	bne.n	800677a <_strtol_l.constprop.0+0x56>
 800676a:	782c      	ldrb	r4, [r5, #0]
 800676c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8006770:	2c58      	cmp	r4, #88	; 0x58
 8006772:	d14d      	bne.n	8006810 <_strtol_l.constprop.0+0xec>
 8006774:	786c      	ldrb	r4, [r5, #1]
 8006776:	2310      	movs	r3, #16
 8006778:	3502      	adds	r5, #2
 800677a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800677e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8006782:	f04f 0c00 	mov.w	ip, #0
 8006786:	fbb8 f9f3 	udiv	r9, r8, r3
 800678a:	4666      	mov	r6, ip
 800678c:	fb03 8a19 	mls	sl, r3, r9, r8
 8006790:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8006794:	f1be 0f09 	cmp.w	lr, #9
 8006798:	d816      	bhi.n	80067c8 <_strtol_l.constprop.0+0xa4>
 800679a:	4674      	mov	r4, lr
 800679c:	42a3      	cmp	r3, r4
 800679e:	dd24      	ble.n	80067ea <_strtol_l.constprop.0+0xc6>
 80067a0:	f1bc 0f00 	cmp.w	ip, #0
 80067a4:	db1e      	blt.n	80067e4 <_strtol_l.constprop.0+0xc0>
 80067a6:	45b1      	cmp	r9, r6
 80067a8:	d31c      	bcc.n	80067e4 <_strtol_l.constprop.0+0xc0>
 80067aa:	d101      	bne.n	80067b0 <_strtol_l.constprop.0+0x8c>
 80067ac:	45a2      	cmp	sl, r4
 80067ae:	db19      	blt.n	80067e4 <_strtol_l.constprop.0+0xc0>
 80067b0:	fb06 4603 	mla	r6, r6, r3, r4
 80067b4:	f04f 0c01 	mov.w	ip, #1
 80067b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80067bc:	e7e8      	b.n	8006790 <_strtol_l.constprop.0+0x6c>
 80067be:	2c2b      	cmp	r4, #43	; 0x2b
 80067c0:	bf04      	itt	eq
 80067c2:	782c      	ldrbeq	r4, [r5, #0]
 80067c4:	1cb5      	addeq	r5, r6, #2
 80067c6:	e7ca      	b.n	800675e <_strtol_l.constprop.0+0x3a>
 80067c8:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80067cc:	f1be 0f19 	cmp.w	lr, #25
 80067d0:	d801      	bhi.n	80067d6 <_strtol_l.constprop.0+0xb2>
 80067d2:	3c37      	subs	r4, #55	; 0x37
 80067d4:	e7e2      	b.n	800679c <_strtol_l.constprop.0+0x78>
 80067d6:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80067da:	f1be 0f19 	cmp.w	lr, #25
 80067de:	d804      	bhi.n	80067ea <_strtol_l.constprop.0+0xc6>
 80067e0:	3c57      	subs	r4, #87	; 0x57
 80067e2:	e7db      	b.n	800679c <_strtol_l.constprop.0+0x78>
 80067e4:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80067e8:	e7e6      	b.n	80067b8 <_strtol_l.constprop.0+0x94>
 80067ea:	f1bc 0f00 	cmp.w	ip, #0
 80067ee:	da05      	bge.n	80067fc <_strtol_l.constprop.0+0xd8>
 80067f0:	2322      	movs	r3, #34	; 0x22
 80067f2:	6003      	str	r3, [r0, #0]
 80067f4:	4646      	mov	r6, r8
 80067f6:	b942      	cbnz	r2, 800680a <_strtol_l.constprop.0+0xe6>
 80067f8:	4630      	mov	r0, r6
 80067fa:	e79e      	b.n	800673a <_strtol_l.constprop.0+0x16>
 80067fc:	b107      	cbz	r7, 8006800 <_strtol_l.constprop.0+0xdc>
 80067fe:	4276      	negs	r6, r6
 8006800:	2a00      	cmp	r2, #0
 8006802:	d0f9      	beq.n	80067f8 <_strtol_l.constprop.0+0xd4>
 8006804:	f1bc 0f00 	cmp.w	ip, #0
 8006808:	d000      	beq.n	800680c <_strtol_l.constprop.0+0xe8>
 800680a:	1e69      	subs	r1, r5, #1
 800680c:	6011      	str	r1, [r2, #0]
 800680e:	e7f3      	b.n	80067f8 <_strtol_l.constprop.0+0xd4>
 8006810:	2430      	movs	r4, #48	; 0x30
 8006812:	2b00      	cmp	r3, #0
 8006814:	d1b1      	bne.n	800677a <_strtol_l.constprop.0+0x56>
 8006816:	2308      	movs	r3, #8
 8006818:	e7af      	b.n	800677a <_strtol_l.constprop.0+0x56>
 800681a:	2c30      	cmp	r4, #48	; 0x30
 800681c:	d0a5      	beq.n	800676a <_strtol_l.constprop.0+0x46>
 800681e:	230a      	movs	r3, #10
 8006820:	e7ab      	b.n	800677a <_strtol_l.constprop.0+0x56>
 8006822:	bf00      	nop
 8006824:	080071bd 	.word	0x080071bd

08006828 <strtol>:
 8006828:	4613      	mov	r3, r2
 800682a:	460a      	mov	r2, r1
 800682c:	4601      	mov	r1, r0
 800682e:	4802      	ldr	r0, [pc, #8]	; (8006838 <strtol+0x10>)
 8006830:	6800      	ldr	r0, [r0, #0]
 8006832:	f7ff bf77 	b.w	8006724 <_strtol_l.constprop.0>
 8006836:	bf00      	nop
 8006838:	20000014 	.word	0x20000014

0800683c <__malloc_lock>:
 800683c:	4801      	ldr	r0, [pc, #4]	; (8006844 <__malloc_lock+0x8>)
 800683e:	f7ff be2b 	b.w	8006498 <__retarget_lock_acquire_recursive>
 8006842:	bf00      	nop
 8006844:	20001b3c 	.word	0x20001b3c

08006848 <__malloc_unlock>:
 8006848:	4801      	ldr	r0, [pc, #4]	; (8006850 <__malloc_unlock+0x8>)
 800684a:	f7ff be26 	b.w	800649a <__retarget_lock_release_recursive>
 800684e:	bf00      	nop
 8006850:	20001b3c 	.word	0x20001b3c

08006854 <_free_r>:
 8006854:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8006856:	2900      	cmp	r1, #0
 8006858:	d044      	beq.n	80068e4 <_free_r+0x90>
 800685a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800685e:	9001      	str	r0, [sp, #4]
 8006860:	2b00      	cmp	r3, #0
 8006862:	f1a1 0404 	sub.w	r4, r1, #4
 8006866:	bfb8      	it	lt
 8006868:	18e4      	addlt	r4, r4, r3
 800686a:	f7ff ffe7 	bl	800683c <__malloc_lock>
 800686e:	4a1e      	ldr	r2, [pc, #120]	; (80068e8 <_free_r+0x94>)
 8006870:	9801      	ldr	r0, [sp, #4]
 8006872:	6813      	ldr	r3, [r2, #0]
 8006874:	b933      	cbnz	r3, 8006884 <_free_r+0x30>
 8006876:	6063      	str	r3, [r4, #4]
 8006878:	6014      	str	r4, [r2, #0]
 800687a:	b003      	add	sp, #12
 800687c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006880:	f7ff bfe2 	b.w	8006848 <__malloc_unlock>
 8006884:	42a3      	cmp	r3, r4
 8006886:	d908      	bls.n	800689a <_free_r+0x46>
 8006888:	6825      	ldr	r5, [r4, #0]
 800688a:	1961      	adds	r1, r4, r5
 800688c:	428b      	cmp	r3, r1
 800688e:	bf01      	itttt	eq
 8006890:	6819      	ldreq	r1, [r3, #0]
 8006892:	685b      	ldreq	r3, [r3, #4]
 8006894:	1949      	addeq	r1, r1, r5
 8006896:	6021      	streq	r1, [r4, #0]
 8006898:	e7ed      	b.n	8006876 <_free_r+0x22>
 800689a:	461a      	mov	r2, r3
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	b10b      	cbz	r3, 80068a4 <_free_r+0x50>
 80068a0:	42a3      	cmp	r3, r4
 80068a2:	d9fa      	bls.n	800689a <_free_r+0x46>
 80068a4:	6811      	ldr	r1, [r2, #0]
 80068a6:	1855      	adds	r5, r2, r1
 80068a8:	42a5      	cmp	r5, r4
 80068aa:	d10b      	bne.n	80068c4 <_free_r+0x70>
 80068ac:	6824      	ldr	r4, [r4, #0]
 80068ae:	4421      	add	r1, r4
 80068b0:	1854      	adds	r4, r2, r1
 80068b2:	42a3      	cmp	r3, r4
 80068b4:	6011      	str	r1, [r2, #0]
 80068b6:	d1e0      	bne.n	800687a <_free_r+0x26>
 80068b8:	681c      	ldr	r4, [r3, #0]
 80068ba:	685b      	ldr	r3, [r3, #4]
 80068bc:	6053      	str	r3, [r2, #4]
 80068be:	4421      	add	r1, r4
 80068c0:	6011      	str	r1, [r2, #0]
 80068c2:	e7da      	b.n	800687a <_free_r+0x26>
 80068c4:	d902      	bls.n	80068cc <_free_r+0x78>
 80068c6:	230c      	movs	r3, #12
 80068c8:	6003      	str	r3, [r0, #0]
 80068ca:	e7d6      	b.n	800687a <_free_r+0x26>
 80068cc:	6825      	ldr	r5, [r4, #0]
 80068ce:	1961      	adds	r1, r4, r5
 80068d0:	428b      	cmp	r3, r1
 80068d2:	bf04      	itt	eq
 80068d4:	6819      	ldreq	r1, [r3, #0]
 80068d6:	685b      	ldreq	r3, [r3, #4]
 80068d8:	6063      	str	r3, [r4, #4]
 80068da:	bf04      	itt	eq
 80068dc:	1949      	addeq	r1, r1, r5
 80068de:	6021      	streq	r1, [r4, #0]
 80068e0:	6054      	str	r4, [r2, #4]
 80068e2:	e7ca      	b.n	800687a <_free_r+0x26>
 80068e4:	b003      	add	sp, #12
 80068e6:	bd30      	pop	{r4, r5, pc}
 80068e8:	20001b40 	.word	0x20001b40

080068ec <__ssputs_r>:
 80068ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068f0:	688e      	ldr	r6, [r1, #8]
 80068f2:	429e      	cmp	r6, r3
 80068f4:	4682      	mov	sl, r0
 80068f6:	460c      	mov	r4, r1
 80068f8:	4690      	mov	r8, r2
 80068fa:	461f      	mov	r7, r3
 80068fc:	d838      	bhi.n	8006970 <__ssputs_r+0x84>
 80068fe:	898a      	ldrh	r2, [r1, #12]
 8006900:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006904:	d032      	beq.n	800696c <__ssputs_r+0x80>
 8006906:	6825      	ldr	r5, [r4, #0]
 8006908:	6909      	ldr	r1, [r1, #16]
 800690a:	eba5 0901 	sub.w	r9, r5, r1
 800690e:	6965      	ldr	r5, [r4, #20]
 8006910:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006914:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006918:	3301      	adds	r3, #1
 800691a:	444b      	add	r3, r9
 800691c:	106d      	asrs	r5, r5, #1
 800691e:	429d      	cmp	r5, r3
 8006920:	bf38      	it	cc
 8006922:	461d      	movcc	r5, r3
 8006924:	0553      	lsls	r3, r2, #21
 8006926:	d531      	bpl.n	800698c <__ssputs_r+0xa0>
 8006928:	4629      	mov	r1, r5
 800692a:	f7ff fded 	bl	8006508 <_malloc_r>
 800692e:	4606      	mov	r6, r0
 8006930:	b950      	cbnz	r0, 8006948 <__ssputs_r+0x5c>
 8006932:	230c      	movs	r3, #12
 8006934:	f8ca 3000 	str.w	r3, [sl]
 8006938:	89a3      	ldrh	r3, [r4, #12]
 800693a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800693e:	81a3      	strh	r3, [r4, #12]
 8006940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006944:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006948:	6921      	ldr	r1, [r4, #16]
 800694a:	464a      	mov	r2, r9
 800694c:	f7ff fda6 	bl	800649c <memcpy>
 8006950:	89a3      	ldrh	r3, [r4, #12]
 8006952:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006956:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800695a:	81a3      	strh	r3, [r4, #12]
 800695c:	6126      	str	r6, [r4, #16]
 800695e:	6165      	str	r5, [r4, #20]
 8006960:	444e      	add	r6, r9
 8006962:	eba5 0509 	sub.w	r5, r5, r9
 8006966:	6026      	str	r6, [r4, #0]
 8006968:	60a5      	str	r5, [r4, #8]
 800696a:	463e      	mov	r6, r7
 800696c:	42be      	cmp	r6, r7
 800696e:	d900      	bls.n	8006972 <__ssputs_r+0x86>
 8006970:	463e      	mov	r6, r7
 8006972:	6820      	ldr	r0, [r4, #0]
 8006974:	4632      	mov	r2, r6
 8006976:	4641      	mov	r1, r8
 8006978:	f000 faa8 	bl	8006ecc <memmove>
 800697c:	68a3      	ldr	r3, [r4, #8]
 800697e:	1b9b      	subs	r3, r3, r6
 8006980:	60a3      	str	r3, [r4, #8]
 8006982:	6823      	ldr	r3, [r4, #0]
 8006984:	4433      	add	r3, r6
 8006986:	6023      	str	r3, [r4, #0]
 8006988:	2000      	movs	r0, #0
 800698a:	e7db      	b.n	8006944 <__ssputs_r+0x58>
 800698c:	462a      	mov	r2, r5
 800698e:	f000 fab7 	bl	8006f00 <_realloc_r>
 8006992:	4606      	mov	r6, r0
 8006994:	2800      	cmp	r0, #0
 8006996:	d1e1      	bne.n	800695c <__ssputs_r+0x70>
 8006998:	6921      	ldr	r1, [r4, #16]
 800699a:	4650      	mov	r0, sl
 800699c:	f7ff ff5a 	bl	8006854 <_free_r>
 80069a0:	e7c7      	b.n	8006932 <__ssputs_r+0x46>
	...

080069a4 <_svfiprintf_r>:
 80069a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80069a8:	4698      	mov	r8, r3
 80069aa:	898b      	ldrh	r3, [r1, #12]
 80069ac:	061b      	lsls	r3, r3, #24
 80069ae:	b09d      	sub	sp, #116	; 0x74
 80069b0:	4607      	mov	r7, r0
 80069b2:	460d      	mov	r5, r1
 80069b4:	4614      	mov	r4, r2
 80069b6:	d50e      	bpl.n	80069d6 <_svfiprintf_r+0x32>
 80069b8:	690b      	ldr	r3, [r1, #16]
 80069ba:	b963      	cbnz	r3, 80069d6 <_svfiprintf_r+0x32>
 80069bc:	2140      	movs	r1, #64	; 0x40
 80069be:	f7ff fda3 	bl	8006508 <_malloc_r>
 80069c2:	6028      	str	r0, [r5, #0]
 80069c4:	6128      	str	r0, [r5, #16]
 80069c6:	b920      	cbnz	r0, 80069d2 <_svfiprintf_r+0x2e>
 80069c8:	230c      	movs	r3, #12
 80069ca:	603b      	str	r3, [r7, #0]
 80069cc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80069d0:	e0d1      	b.n	8006b76 <_svfiprintf_r+0x1d2>
 80069d2:	2340      	movs	r3, #64	; 0x40
 80069d4:	616b      	str	r3, [r5, #20]
 80069d6:	2300      	movs	r3, #0
 80069d8:	9309      	str	r3, [sp, #36]	; 0x24
 80069da:	2320      	movs	r3, #32
 80069dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80069e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80069e4:	2330      	movs	r3, #48	; 0x30
 80069e6:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8006b90 <_svfiprintf_r+0x1ec>
 80069ea:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80069ee:	f04f 0901 	mov.w	r9, #1
 80069f2:	4623      	mov	r3, r4
 80069f4:	469a      	mov	sl, r3
 80069f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80069fa:	b10a      	cbz	r2, 8006a00 <_svfiprintf_r+0x5c>
 80069fc:	2a25      	cmp	r2, #37	; 0x25
 80069fe:	d1f9      	bne.n	80069f4 <_svfiprintf_r+0x50>
 8006a00:	ebba 0b04 	subs.w	fp, sl, r4
 8006a04:	d00b      	beq.n	8006a1e <_svfiprintf_r+0x7a>
 8006a06:	465b      	mov	r3, fp
 8006a08:	4622      	mov	r2, r4
 8006a0a:	4629      	mov	r1, r5
 8006a0c:	4638      	mov	r0, r7
 8006a0e:	f7ff ff6d 	bl	80068ec <__ssputs_r>
 8006a12:	3001      	adds	r0, #1
 8006a14:	f000 80aa 	beq.w	8006b6c <_svfiprintf_r+0x1c8>
 8006a18:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006a1a:	445a      	add	r2, fp
 8006a1c:	9209      	str	r2, [sp, #36]	; 0x24
 8006a1e:	f89a 3000 	ldrb.w	r3, [sl]
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 80a2 	beq.w	8006b6c <_svfiprintf_r+0x1c8>
 8006a28:	2300      	movs	r3, #0
 8006a2a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006a2e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006a32:	f10a 0a01 	add.w	sl, sl, #1
 8006a36:	9304      	str	r3, [sp, #16]
 8006a38:	9307      	str	r3, [sp, #28]
 8006a3a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006a3e:	931a      	str	r3, [sp, #104]	; 0x68
 8006a40:	4654      	mov	r4, sl
 8006a42:	2205      	movs	r2, #5
 8006a44:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a48:	4851      	ldr	r0, [pc, #324]	; (8006b90 <_svfiprintf_r+0x1ec>)
 8006a4a:	f7f9 fbc9 	bl	80001e0 <memchr>
 8006a4e:	9a04      	ldr	r2, [sp, #16]
 8006a50:	b9d8      	cbnz	r0, 8006a8a <_svfiprintf_r+0xe6>
 8006a52:	06d0      	lsls	r0, r2, #27
 8006a54:	bf44      	itt	mi
 8006a56:	2320      	movmi	r3, #32
 8006a58:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a5c:	0711      	lsls	r1, r2, #28
 8006a5e:	bf44      	itt	mi
 8006a60:	232b      	movmi	r3, #43	; 0x2b
 8006a62:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006a66:	f89a 3000 	ldrb.w	r3, [sl]
 8006a6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006a6c:	d015      	beq.n	8006a9a <_svfiprintf_r+0xf6>
 8006a6e:	9a07      	ldr	r2, [sp, #28]
 8006a70:	4654      	mov	r4, sl
 8006a72:	2000      	movs	r0, #0
 8006a74:	f04f 0c0a 	mov.w	ip, #10
 8006a78:	4621      	mov	r1, r4
 8006a7a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a7e:	3b30      	subs	r3, #48	; 0x30
 8006a80:	2b09      	cmp	r3, #9
 8006a82:	d94e      	bls.n	8006b22 <_svfiprintf_r+0x17e>
 8006a84:	b1b0      	cbz	r0, 8006ab4 <_svfiprintf_r+0x110>
 8006a86:	9207      	str	r2, [sp, #28]
 8006a88:	e014      	b.n	8006ab4 <_svfiprintf_r+0x110>
 8006a8a:	eba0 0308 	sub.w	r3, r0, r8
 8006a8e:	fa09 f303 	lsl.w	r3, r9, r3
 8006a92:	4313      	orrs	r3, r2
 8006a94:	9304      	str	r3, [sp, #16]
 8006a96:	46a2      	mov	sl, r4
 8006a98:	e7d2      	b.n	8006a40 <_svfiprintf_r+0x9c>
 8006a9a:	9b03      	ldr	r3, [sp, #12]
 8006a9c:	1d19      	adds	r1, r3, #4
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	9103      	str	r1, [sp, #12]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	bfbb      	ittet	lt
 8006aa6:	425b      	neglt	r3, r3
 8006aa8:	f042 0202 	orrlt.w	r2, r2, #2
 8006aac:	9307      	strge	r3, [sp, #28]
 8006aae:	9307      	strlt	r3, [sp, #28]
 8006ab0:	bfb8      	it	lt
 8006ab2:	9204      	strlt	r2, [sp, #16]
 8006ab4:	7823      	ldrb	r3, [r4, #0]
 8006ab6:	2b2e      	cmp	r3, #46	; 0x2e
 8006ab8:	d10c      	bne.n	8006ad4 <_svfiprintf_r+0x130>
 8006aba:	7863      	ldrb	r3, [r4, #1]
 8006abc:	2b2a      	cmp	r3, #42	; 0x2a
 8006abe:	d135      	bne.n	8006b2c <_svfiprintf_r+0x188>
 8006ac0:	9b03      	ldr	r3, [sp, #12]
 8006ac2:	1d1a      	adds	r2, r3, #4
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	9203      	str	r2, [sp, #12]
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	bfb8      	it	lt
 8006acc:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006ad0:	3402      	adds	r4, #2
 8006ad2:	9305      	str	r3, [sp, #20]
 8006ad4:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006ba0 <_svfiprintf_r+0x1fc>
 8006ad8:	7821      	ldrb	r1, [r4, #0]
 8006ada:	2203      	movs	r2, #3
 8006adc:	4650      	mov	r0, sl
 8006ade:	f7f9 fb7f 	bl	80001e0 <memchr>
 8006ae2:	b140      	cbz	r0, 8006af6 <_svfiprintf_r+0x152>
 8006ae4:	2340      	movs	r3, #64	; 0x40
 8006ae6:	eba0 000a 	sub.w	r0, r0, sl
 8006aea:	fa03 f000 	lsl.w	r0, r3, r0
 8006aee:	9b04      	ldr	r3, [sp, #16]
 8006af0:	4303      	orrs	r3, r0
 8006af2:	3401      	adds	r4, #1
 8006af4:	9304      	str	r3, [sp, #16]
 8006af6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006afa:	4826      	ldr	r0, [pc, #152]	; (8006b94 <_svfiprintf_r+0x1f0>)
 8006afc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006b00:	2206      	movs	r2, #6
 8006b02:	f7f9 fb6d 	bl	80001e0 <memchr>
 8006b06:	2800      	cmp	r0, #0
 8006b08:	d038      	beq.n	8006b7c <_svfiprintf_r+0x1d8>
 8006b0a:	4b23      	ldr	r3, [pc, #140]	; (8006b98 <_svfiprintf_r+0x1f4>)
 8006b0c:	bb1b      	cbnz	r3, 8006b56 <_svfiprintf_r+0x1b2>
 8006b0e:	9b03      	ldr	r3, [sp, #12]
 8006b10:	3307      	adds	r3, #7
 8006b12:	f023 0307 	bic.w	r3, r3, #7
 8006b16:	3308      	adds	r3, #8
 8006b18:	9303      	str	r3, [sp, #12]
 8006b1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006b1c:	4433      	add	r3, r6
 8006b1e:	9309      	str	r3, [sp, #36]	; 0x24
 8006b20:	e767      	b.n	80069f2 <_svfiprintf_r+0x4e>
 8006b22:	fb0c 3202 	mla	r2, ip, r2, r3
 8006b26:	460c      	mov	r4, r1
 8006b28:	2001      	movs	r0, #1
 8006b2a:	e7a5      	b.n	8006a78 <_svfiprintf_r+0xd4>
 8006b2c:	2300      	movs	r3, #0
 8006b2e:	3401      	adds	r4, #1
 8006b30:	9305      	str	r3, [sp, #20]
 8006b32:	4619      	mov	r1, r3
 8006b34:	f04f 0c0a 	mov.w	ip, #10
 8006b38:	4620      	mov	r0, r4
 8006b3a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006b3e:	3a30      	subs	r2, #48	; 0x30
 8006b40:	2a09      	cmp	r2, #9
 8006b42:	d903      	bls.n	8006b4c <_svfiprintf_r+0x1a8>
 8006b44:	2b00      	cmp	r3, #0
 8006b46:	d0c5      	beq.n	8006ad4 <_svfiprintf_r+0x130>
 8006b48:	9105      	str	r1, [sp, #20]
 8006b4a:	e7c3      	b.n	8006ad4 <_svfiprintf_r+0x130>
 8006b4c:	fb0c 2101 	mla	r1, ip, r1, r2
 8006b50:	4604      	mov	r4, r0
 8006b52:	2301      	movs	r3, #1
 8006b54:	e7f0      	b.n	8006b38 <_svfiprintf_r+0x194>
 8006b56:	ab03      	add	r3, sp, #12
 8006b58:	9300      	str	r3, [sp, #0]
 8006b5a:	462a      	mov	r2, r5
 8006b5c:	4b0f      	ldr	r3, [pc, #60]	; (8006b9c <_svfiprintf_r+0x1f8>)
 8006b5e:	a904      	add	r1, sp, #16
 8006b60:	4638      	mov	r0, r7
 8006b62:	f3af 8000 	nop.w
 8006b66:	1c42      	adds	r2, r0, #1
 8006b68:	4606      	mov	r6, r0
 8006b6a:	d1d6      	bne.n	8006b1a <_svfiprintf_r+0x176>
 8006b6c:	89ab      	ldrh	r3, [r5, #12]
 8006b6e:	065b      	lsls	r3, r3, #25
 8006b70:	f53f af2c 	bmi.w	80069cc <_svfiprintf_r+0x28>
 8006b74:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b76:	b01d      	add	sp, #116	; 0x74
 8006b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b7c:	ab03      	add	r3, sp, #12
 8006b7e:	9300      	str	r3, [sp, #0]
 8006b80:	462a      	mov	r2, r5
 8006b82:	4b06      	ldr	r3, [pc, #24]	; (8006b9c <_svfiprintf_r+0x1f8>)
 8006b84:	a904      	add	r1, sp, #16
 8006b86:	4638      	mov	r0, r7
 8006b88:	f000 f87a 	bl	8006c80 <_printf_i>
 8006b8c:	e7eb      	b.n	8006b66 <_svfiprintf_r+0x1c2>
 8006b8e:	bf00      	nop
 8006b90:	08007320 	.word	0x08007320
 8006b94:	0800732a 	.word	0x0800732a
 8006b98:	00000000 	.word	0x00000000
 8006b9c:	080068ed 	.word	0x080068ed
 8006ba0:	08007326 	.word	0x08007326

08006ba4 <_printf_common>:
 8006ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba8:	4616      	mov	r6, r2
 8006baa:	4699      	mov	r9, r3
 8006bac:	688a      	ldr	r2, [r1, #8]
 8006bae:	690b      	ldr	r3, [r1, #16]
 8006bb0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	bfb8      	it	lt
 8006bb8:	4613      	movlt	r3, r2
 8006bba:	6033      	str	r3, [r6, #0]
 8006bbc:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006bc0:	4607      	mov	r7, r0
 8006bc2:	460c      	mov	r4, r1
 8006bc4:	b10a      	cbz	r2, 8006bca <_printf_common+0x26>
 8006bc6:	3301      	adds	r3, #1
 8006bc8:	6033      	str	r3, [r6, #0]
 8006bca:	6823      	ldr	r3, [r4, #0]
 8006bcc:	0699      	lsls	r1, r3, #26
 8006bce:	bf42      	ittt	mi
 8006bd0:	6833      	ldrmi	r3, [r6, #0]
 8006bd2:	3302      	addmi	r3, #2
 8006bd4:	6033      	strmi	r3, [r6, #0]
 8006bd6:	6825      	ldr	r5, [r4, #0]
 8006bd8:	f015 0506 	ands.w	r5, r5, #6
 8006bdc:	d106      	bne.n	8006bec <_printf_common+0x48>
 8006bde:	f104 0a19 	add.w	sl, r4, #25
 8006be2:	68e3      	ldr	r3, [r4, #12]
 8006be4:	6832      	ldr	r2, [r6, #0]
 8006be6:	1a9b      	subs	r3, r3, r2
 8006be8:	42ab      	cmp	r3, r5
 8006bea:	dc26      	bgt.n	8006c3a <_printf_common+0x96>
 8006bec:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006bf0:	1e13      	subs	r3, r2, #0
 8006bf2:	6822      	ldr	r2, [r4, #0]
 8006bf4:	bf18      	it	ne
 8006bf6:	2301      	movne	r3, #1
 8006bf8:	0692      	lsls	r2, r2, #26
 8006bfa:	d42b      	bmi.n	8006c54 <_printf_common+0xb0>
 8006bfc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006c00:	4649      	mov	r1, r9
 8006c02:	4638      	mov	r0, r7
 8006c04:	47c0      	blx	r8
 8006c06:	3001      	adds	r0, #1
 8006c08:	d01e      	beq.n	8006c48 <_printf_common+0xa4>
 8006c0a:	6823      	ldr	r3, [r4, #0]
 8006c0c:	68e5      	ldr	r5, [r4, #12]
 8006c0e:	6832      	ldr	r2, [r6, #0]
 8006c10:	f003 0306 	and.w	r3, r3, #6
 8006c14:	2b04      	cmp	r3, #4
 8006c16:	bf08      	it	eq
 8006c18:	1aad      	subeq	r5, r5, r2
 8006c1a:	68a3      	ldr	r3, [r4, #8]
 8006c1c:	6922      	ldr	r2, [r4, #16]
 8006c1e:	bf0c      	ite	eq
 8006c20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c24:	2500      	movne	r5, #0
 8006c26:	4293      	cmp	r3, r2
 8006c28:	bfc4      	itt	gt
 8006c2a:	1a9b      	subgt	r3, r3, r2
 8006c2c:	18ed      	addgt	r5, r5, r3
 8006c2e:	2600      	movs	r6, #0
 8006c30:	341a      	adds	r4, #26
 8006c32:	42b5      	cmp	r5, r6
 8006c34:	d11a      	bne.n	8006c6c <_printf_common+0xc8>
 8006c36:	2000      	movs	r0, #0
 8006c38:	e008      	b.n	8006c4c <_printf_common+0xa8>
 8006c3a:	2301      	movs	r3, #1
 8006c3c:	4652      	mov	r2, sl
 8006c3e:	4649      	mov	r1, r9
 8006c40:	4638      	mov	r0, r7
 8006c42:	47c0      	blx	r8
 8006c44:	3001      	adds	r0, #1
 8006c46:	d103      	bne.n	8006c50 <_printf_common+0xac>
 8006c48:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006c4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c50:	3501      	adds	r5, #1
 8006c52:	e7c6      	b.n	8006be2 <_printf_common+0x3e>
 8006c54:	18e1      	adds	r1, r4, r3
 8006c56:	1c5a      	adds	r2, r3, #1
 8006c58:	2030      	movs	r0, #48	; 0x30
 8006c5a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c5e:	4422      	add	r2, r4
 8006c60:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c64:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c68:	3302      	adds	r3, #2
 8006c6a:	e7c7      	b.n	8006bfc <_printf_common+0x58>
 8006c6c:	2301      	movs	r3, #1
 8006c6e:	4622      	mov	r2, r4
 8006c70:	4649      	mov	r1, r9
 8006c72:	4638      	mov	r0, r7
 8006c74:	47c0      	blx	r8
 8006c76:	3001      	adds	r0, #1
 8006c78:	d0e6      	beq.n	8006c48 <_printf_common+0xa4>
 8006c7a:	3601      	adds	r6, #1
 8006c7c:	e7d9      	b.n	8006c32 <_printf_common+0x8e>
	...

08006c80 <_printf_i>:
 8006c80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c84:	7e0f      	ldrb	r7, [r1, #24]
 8006c86:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c88:	2f78      	cmp	r7, #120	; 0x78
 8006c8a:	4691      	mov	r9, r2
 8006c8c:	4680      	mov	r8, r0
 8006c8e:	460c      	mov	r4, r1
 8006c90:	469a      	mov	sl, r3
 8006c92:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c96:	d807      	bhi.n	8006ca8 <_printf_i+0x28>
 8006c98:	2f62      	cmp	r7, #98	; 0x62
 8006c9a:	d80a      	bhi.n	8006cb2 <_printf_i+0x32>
 8006c9c:	2f00      	cmp	r7, #0
 8006c9e:	f000 80d8 	beq.w	8006e52 <_printf_i+0x1d2>
 8006ca2:	2f58      	cmp	r7, #88	; 0x58
 8006ca4:	f000 80a3 	beq.w	8006dee <_printf_i+0x16e>
 8006ca8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cac:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006cb0:	e03a      	b.n	8006d28 <_printf_i+0xa8>
 8006cb2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006cb6:	2b15      	cmp	r3, #21
 8006cb8:	d8f6      	bhi.n	8006ca8 <_printf_i+0x28>
 8006cba:	a101      	add	r1, pc, #4	; (adr r1, 8006cc0 <_printf_i+0x40>)
 8006cbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cc0:	08006d19 	.word	0x08006d19
 8006cc4:	08006d2d 	.word	0x08006d2d
 8006cc8:	08006ca9 	.word	0x08006ca9
 8006ccc:	08006ca9 	.word	0x08006ca9
 8006cd0:	08006ca9 	.word	0x08006ca9
 8006cd4:	08006ca9 	.word	0x08006ca9
 8006cd8:	08006d2d 	.word	0x08006d2d
 8006cdc:	08006ca9 	.word	0x08006ca9
 8006ce0:	08006ca9 	.word	0x08006ca9
 8006ce4:	08006ca9 	.word	0x08006ca9
 8006ce8:	08006ca9 	.word	0x08006ca9
 8006cec:	08006e39 	.word	0x08006e39
 8006cf0:	08006d5d 	.word	0x08006d5d
 8006cf4:	08006e1b 	.word	0x08006e1b
 8006cf8:	08006ca9 	.word	0x08006ca9
 8006cfc:	08006ca9 	.word	0x08006ca9
 8006d00:	08006e5b 	.word	0x08006e5b
 8006d04:	08006ca9 	.word	0x08006ca9
 8006d08:	08006d5d 	.word	0x08006d5d
 8006d0c:	08006ca9 	.word	0x08006ca9
 8006d10:	08006ca9 	.word	0x08006ca9
 8006d14:	08006e23 	.word	0x08006e23
 8006d18:	682b      	ldr	r3, [r5, #0]
 8006d1a:	1d1a      	adds	r2, r3, #4
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	602a      	str	r2, [r5, #0]
 8006d20:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006d24:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006d28:	2301      	movs	r3, #1
 8006d2a:	e0a3      	b.n	8006e74 <_printf_i+0x1f4>
 8006d2c:	6820      	ldr	r0, [r4, #0]
 8006d2e:	6829      	ldr	r1, [r5, #0]
 8006d30:	0606      	lsls	r6, r0, #24
 8006d32:	f101 0304 	add.w	r3, r1, #4
 8006d36:	d50a      	bpl.n	8006d4e <_printf_i+0xce>
 8006d38:	680e      	ldr	r6, [r1, #0]
 8006d3a:	602b      	str	r3, [r5, #0]
 8006d3c:	2e00      	cmp	r6, #0
 8006d3e:	da03      	bge.n	8006d48 <_printf_i+0xc8>
 8006d40:	232d      	movs	r3, #45	; 0x2d
 8006d42:	4276      	negs	r6, r6
 8006d44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d48:	485e      	ldr	r0, [pc, #376]	; (8006ec4 <_printf_i+0x244>)
 8006d4a:	230a      	movs	r3, #10
 8006d4c:	e019      	b.n	8006d82 <_printf_i+0x102>
 8006d4e:	680e      	ldr	r6, [r1, #0]
 8006d50:	602b      	str	r3, [r5, #0]
 8006d52:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d56:	bf18      	it	ne
 8006d58:	b236      	sxthne	r6, r6
 8006d5a:	e7ef      	b.n	8006d3c <_printf_i+0xbc>
 8006d5c:	682b      	ldr	r3, [r5, #0]
 8006d5e:	6820      	ldr	r0, [r4, #0]
 8006d60:	1d19      	adds	r1, r3, #4
 8006d62:	6029      	str	r1, [r5, #0]
 8006d64:	0601      	lsls	r1, r0, #24
 8006d66:	d501      	bpl.n	8006d6c <_printf_i+0xec>
 8006d68:	681e      	ldr	r6, [r3, #0]
 8006d6a:	e002      	b.n	8006d72 <_printf_i+0xf2>
 8006d6c:	0646      	lsls	r6, r0, #25
 8006d6e:	d5fb      	bpl.n	8006d68 <_printf_i+0xe8>
 8006d70:	881e      	ldrh	r6, [r3, #0]
 8006d72:	4854      	ldr	r0, [pc, #336]	; (8006ec4 <_printf_i+0x244>)
 8006d74:	2f6f      	cmp	r7, #111	; 0x6f
 8006d76:	bf0c      	ite	eq
 8006d78:	2308      	moveq	r3, #8
 8006d7a:	230a      	movne	r3, #10
 8006d7c:	2100      	movs	r1, #0
 8006d7e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d82:	6865      	ldr	r5, [r4, #4]
 8006d84:	60a5      	str	r5, [r4, #8]
 8006d86:	2d00      	cmp	r5, #0
 8006d88:	bfa2      	ittt	ge
 8006d8a:	6821      	ldrge	r1, [r4, #0]
 8006d8c:	f021 0104 	bicge.w	r1, r1, #4
 8006d90:	6021      	strge	r1, [r4, #0]
 8006d92:	b90e      	cbnz	r6, 8006d98 <_printf_i+0x118>
 8006d94:	2d00      	cmp	r5, #0
 8006d96:	d04d      	beq.n	8006e34 <_printf_i+0x1b4>
 8006d98:	4615      	mov	r5, r2
 8006d9a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d9e:	fb03 6711 	mls	r7, r3, r1, r6
 8006da2:	5dc7      	ldrb	r7, [r0, r7]
 8006da4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006da8:	4637      	mov	r7, r6
 8006daa:	42bb      	cmp	r3, r7
 8006dac:	460e      	mov	r6, r1
 8006dae:	d9f4      	bls.n	8006d9a <_printf_i+0x11a>
 8006db0:	2b08      	cmp	r3, #8
 8006db2:	d10b      	bne.n	8006dcc <_printf_i+0x14c>
 8006db4:	6823      	ldr	r3, [r4, #0]
 8006db6:	07de      	lsls	r6, r3, #31
 8006db8:	d508      	bpl.n	8006dcc <_printf_i+0x14c>
 8006dba:	6923      	ldr	r3, [r4, #16]
 8006dbc:	6861      	ldr	r1, [r4, #4]
 8006dbe:	4299      	cmp	r1, r3
 8006dc0:	bfde      	ittt	le
 8006dc2:	2330      	movle	r3, #48	; 0x30
 8006dc4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006dc8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006dcc:	1b52      	subs	r2, r2, r5
 8006dce:	6122      	str	r2, [r4, #16]
 8006dd0:	f8cd a000 	str.w	sl, [sp]
 8006dd4:	464b      	mov	r3, r9
 8006dd6:	aa03      	add	r2, sp, #12
 8006dd8:	4621      	mov	r1, r4
 8006dda:	4640      	mov	r0, r8
 8006ddc:	f7ff fee2 	bl	8006ba4 <_printf_common>
 8006de0:	3001      	adds	r0, #1
 8006de2:	d14c      	bne.n	8006e7e <_printf_i+0x1fe>
 8006de4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006de8:	b004      	add	sp, #16
 8006dea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006dee:	4835      	ldr	r0, [pc, #212]	; (8006ec4 <_printf_i+0x244>)
 8006df0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006df4:	6829      	ldr	r1, [r5, #0]
 8006df6:	6823      	ldr	r3, [r4, #0]
 8006df8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dfc:	6029      	str	r1, [r5, #0]
 8006dfe:	061d      	lsls	r5, r3, #24
 8006e00:	d514      	bpl.n	8006e2c <_printf_i+0x1ac>
 8006e02:	07df      	lsls	r7, r3, #31
 8006e04:	bf44      	itt	mi
 8006e06:	f043 0320 	orrmi.w	r3, r3, #32
 8006e0a:	6023      	strmi	r3, [r4, #0]
 8006e0c:	b91e      	cbnz	r6, 8006e16 <_printf_i+0x196>
 8006e0e:	6823      	ldr	r3, [r4, #0]
 8006e10:	f023 0320 	bic.w	r3, r3, #32
 8006e14:	6023      	str	r3, [r4, #0]
 8006e16:	2310      	movs	r3, #16
 8006e18:	e7b0      	b.n	8006d7c <_printf_i+0xfc>
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	f043 0320 	orr.w	r3, r3, #32
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	2378      	movs	r3, #120	; 0x78
 8006e24:	4828      	ldr	r0, [pc, #160]	; (8006ec8 <_printf_i+0x248>)
 8006e26:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006e2a:	e7e3      	b.n	8006df4 <_printf_i+0x174>
 8006e2c:	0659      	lsls	r1, r3, #25
 8006e2e:	bf48      	it	mi
 8006e30:	b2b6      	uxthmi	r6, r6
 8006e32:	e7e6      	b.n	8006e02 <_printf_i+0x182>
 8006e34:	4615      	mov	r5, r2
 8006e36:	e7bb      	b.n	8006db0 <_printf_i+0x130>
 8006e38:	682b      	ldr	r3, [r5, #0]
 8006e3a:	6826      	ldr	r6, [r4, #0]
 8006e3c:	6961      	ldr	r1, [r4, #20]
 8006e3e:	1d18      	adds	r0, r3, #4
 8006e40:	6028      	str	r0, [r5, #0]
 8006e42:	0635      	lsls	r5, r6, #24
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	d501      	bpl.n	8006e4c <_printf_i+0x1cc>
 8006e48:	6019      	str	r1, [r3, #0]
 8006e4a:	e002      	b.n	8006e52 <_printf_i+0x1d2>
 8006e4c:	0670      	lsls	r0, r6, #25
 8006e4e:	d5fb      	bpl.n	8006e48 <_printf_i+0x1c8>
 8006e50:	8019      	strh	r1, [r3, #0]
 8006e52:	2300      	movs	r3, #0
 8006e54:	6123      	str	r3, [r4, #16]
 8006e56:	4615      	mov	r5, r2
 8006e58:	e7ba      	b.n	8006dd0 <_printf_i+0x150>
 8006e5a:	682b      	ldr	r3, [r5, #0]
 8006e5c:	1d1a      	adds	r2, r3, #4
 8006e5e:	602a      	str	r2, [r5, #0]
 8006e60:	681d      	ldr	r5, [r3, #0]
 8006e62:	6862      	ldr	r2, [r4, #4]
 8006e64:	2100      	movs	r1, #0
 8006e66:	4628      	mov	r0, r5
 8006e68:	f7f9 f9ba 	bl	80001e0 <memchr>
 8006e6c:	b108      	cbz	r0, 8006e72 <_printf_i+0x1f2>
 8006e6e:	1b40      	subs	r0, r0, r5
 8006e70:	6060      	str	r0, [r4, #4]
 8006e72:	6863      	ldr	r3, [r4, #4]
 8006e74:	6123      	str	r3, [r4, #16]
 8006e76:	2300      	movs	r3, #0
 8006e78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e7c:	e7a8      	b.n	8006dd0 <_printf_i+0x150>
 8006e7e:	6923      	ldr	r3, [r4, #16]
 8006e80:	462a      	mov	r2, r5
 8006e82:	4649      	mov	r1, r9
 8006e84:	4640      	mov	r0, r8
 8006e86:	47d0      	blx	sl
 8006e88:	3001      	adds	r0, #1
 8006e8a:	d0ab      	beq.n	8006de4 <_printf_i+0x164>
 8006e8c:	6823      	ldr	r3, [r4, #0]
 8006e8e:	079b      	lsls	r3, r3, #30
 8006e90:	d413      	bmi.n	8006eba <_printf_i+0x23a>
 8006e92:	68e0      	ldr	r0, [r4, #12]
 8006e94:	9b03      	ldr	r3, [sp, #12]
 8006e96:	4298      	cmp	r0, r3
 8006e98:	bfb8      	it	lt
 8006e9a:	4618      	movlt	r0, r3
 8006e9c:	e7a4      	b.n	8006de8 <_printf_i+0x168>
 8006e9e:	2301      	movs	r3, #1
 8006ea0:	4632      	mov	r2, r6
 8006ea2:	4649      	mov	r1, r9
 8006ea4:	4640      	mov	r0, r8
 8006ea6:	47d0      	blx	sl
 8006ea8:	3001      	adds	r0, #1
 8006eaa:	d09b      	beq.n	8006de4 <_printf_i+0x164>
 8006eac:	3501      	adds	r5, #1
 8006eae:	68e3      	ldr	r3, [r4, #12]
 8006eb0:	9903      	ldr	r1, [sp, #12]
 8006eb2:	1a5b      	subs	r3, r3, r1
 8006eb4:	42ab      	cmp	r3, r5
 8006eb6:	dcf2      	bgt.n	8006e9e <_printf_i+0x21e>
 8006eb8:	e7eb      	b.n	8006e92 <_printf_i+0x212>
 8006eba:	2500      	movs	r5, #0
 8006ebc:	f104 0619 	add.w	r6, r4, #25
 8006ec0:	e7f5      	b.n	8006eae <_printf_i+0x22e>
 8006ec2:	bf00      	nop
 8006ec4:	08007331 	.word	0x08007331
 8006ec8:	08007342 	.word	0x08007342

08006ecc <memmove>:
 8006ecc:	4288      	cmp	r0, r1
 8006ece:	b510      	push	{r4, lr}
 8006ed0:	eb01 0402 	add.w	r4, r1, r2
 8006ed4:	d902      	bls.n	8006edc <memmove+0x10>
 8006ed6:	4284      	cmp	r4, r0
 8006ed8:	4623      	mov	r3, r4
 8006eda:	d807      	bhi.n	8006eec <memmove+0x20>
 8006edc:	1e43      	subs	r3, r0, #1
 8006ede:	42a1      	cmp	r1, r4
 8006ee0:	d008      	beq.n	8006ef4 <memmove+0x28>
 8006ee2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006ee6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006eea:	e7f8      	b.n	8006ede <memmove+0x12>
 8006eec:	4402      	add	r2, r0
 8006eee:	4601      	mov	r1, r0
 8006ef0:	428a      	cmp	r2, r1
 8006ef2:	d100      	bne.n	8006ef6 <memmove+0x2a>
 8006ef4:	bd10      	pop	{r4, pc}
 8006ef6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006efa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006efe:	e7f7      	b.n	8006ef0 <memmove+0x24>

08006f00 <_realloc_r>:
 8006f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f04:	4680      	mov	r8, r0
 8006f06:	4614      	mov	r4, r2
 8006f08:	460e      	mov	r6, r1
 8006f0a:	b921      	cbnz	r1, 8006f16 <_realloc_r+0x16>
 8006f0c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f10:	4611      	mov	r1, r2
 8006f12:	f7ff baf9 	b.w	8006508 <_malloc_r>
 8006f16:	b92a      	cbnz	r2, 8006f24 <_realloc_r+0x24>
 8006f18:	f7ff fc9c 	bl	8006854 <_free_r>
 8006f1c:	4625      	mov	r5, r4
 8006f1e:	4628      	mov	r0, r5
 8006f20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f24:	f000 f81b 	bl	8006f5e <_malloc_usable_size_r>
 8006f28:	4284      	cmp	r4, r0
 8006f2a:	4607      	mov	r7, r0
 8006f2c:	d802      	bhi.n	8006f34 <_realloc_r+0x34>
 8006f2e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006f32:	d812      	bhi.n	8006f5a <_realloc_r+0x5a>
 8006f34:	4621      	mov	r1, r4
 8006f36:	4640      	mov	r0, r8
 8006f38:	f7ff fae6 	bl	8006508 <_malloc_r>
 8006f3c:	4605      	mov	r5, r0
 8006f3e:	2800      	cmp	r0, #0
 8006f40:	d0ed      	beq.n	8006f1e <_realloc_r+0x1e>
 8006f42:	42bc      	cmp	r4, r7
 8006f44:	4622      	mov	r2, r4
 8006f46:	4631      	mov	r1, r6
 8006f48:	bf28      	it	cs
 8006f4a:	463a      	movcs	r2, r7
 8006f4c:	f7ff faa6 	bl	800649c <memcpy>
 8006f50:	4631      	mov	r1, r6
 8006f52:	4640      	mov	r0, r8
 8006f54:	f7ff fc7e 	bl	8006854 <_free_r>
 8006f58:	e7e1      	b.n	8006f1e <_realloc_r+0x1e>
 8006f5a:	4635      	mov	r5, r6
 8006f5c:	e7df      	b.n	8006f1e <_realloc_r+0x1e>

08006f5e <_malloc_usable_size_r>:
 8006f5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006f62:	1f18      	subs	r0, r3, #4
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	bfbc      	itt	lt
 8006f68:	580b      	ldrlt	r3, [r1, r0]
 8006f6a:	18c0      	addlt	r0, r0, r3
 8006f6c:	4770      	bx	lr
	...

08006f70 <_init>:
 8006f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f72:	bf00      	nop
 8006f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f76:	bc08      	pop	{r3}
 8006f78:	469e      	mov	lr, r3
 8006f7a:	4770      	bx	lr

08006f7c <_fini>:
 8006f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f7e:	bf00      	nop
 8006f80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f82:	bc08      	pop	{r3}
 8006f84:	469e      	mov	lr, r3
 8006f86:	4770      	bx	lr
