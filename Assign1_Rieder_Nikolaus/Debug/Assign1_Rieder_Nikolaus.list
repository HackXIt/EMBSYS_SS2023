
Assign1_Rieder_Nikolaus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009b64  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006dc  08009cf8  08009cf8  00019cf8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a3d4  0800a3d4  000201e0  2**0
                  CONTENTS
  4 .ARM          00000008  0800a3d4  0800a3d4  0001a3d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a3dc  0800a3dc  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a3dc  0800a3dc  0001a3dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a3e0  0800a3e0  0001a3e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800a3e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000209c  200001e0  0800a5c4  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000227c  0800a5c4  0002227c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001e450  00000000  00000000  00020210  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003f8a  00000000  00000000  0003e660  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  000425f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016a8  00000000  00000000  00043e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025009  00000000  00000000  000454e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001bda3  00000000  00000000  0006a4f1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7949  00000000  00000000  00086294  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015dbdd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007550  00000000  00000000  0015dc30  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001e0 	.word	0x200001e0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009cdc 	.word	0x08009cdc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e4 	.word	0x200001e4
 80001cc:	08009cdc 	.word	0x08009cdc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_uldivmod>:
 8000ba8:	b953      	cbnz	r3, 8000bc0 <__aeabi_uldivmod+0x18>
 8000baa:	b94a      	cbnz	r2, 8000bc0 <__aeabi_uldivmod+0x18>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bf08      	it	eq
 8000bb0:	2800      	cmpeq	r0, #0
 8000bb2:	bf1c      	itt	ne
 8000bb4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bb8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000bbc:	f000 b974 	b.w	8000ea8 <__aeabi_idiv0>
 8000bc0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bc4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bc8:	f000 f806 	bl	8000bd8 <__udivmoddi4>
 8000bcc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bd4:	b004      	add	sp, #16
 8000bd6:	4770      	bx	lr

08000bd8 <__udivmoddi4>:
 8000bd8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bdc:	9d08      	ldr	r5, [sp, #32]
 8000bde:	4604      	mov	r4, r0
 8000be0:	468e      	mov	lr, r1
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	d14d      	bne.n	8000c82 <__udivmoddi4+0xaa>
 8000be6:	428a      	cmp	r2, r1
 8000be8:	4694      	mov	ip, r2
 8000bea:	d969      	bls.n	8000cc0 <__udivmoddi4+0xe8>
 8000bec:	fab2 f282 	clz	r2, r2
 8000bf0:	b152      	cbz	r2, 8000c08 <__udivmoddi4+0x30>
 8000bf2:	fa01 f302 	lsl.w	r3, r1, r2
 8000bf6:	f1c2 0120 	rsb	r1, r2, #32
 8000bfa:	fa20 f101 	lsr.w	r1, r0, r1
 8000bfe:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c02:	ea41 0e03 	orr.w	lr, r1, r3
 8000c06:	4094      	lsls	r4, r2
 8000c08:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000c0c:	0c21      	lsrs	r1, r4, #16
 8000c0e:	fbbe f6f8 	udiv	r6, lr, r8
 8000c12:	fa1f f78c 	uxth.w	r7, ip
 8000c16:	fb08 e316 	mls	r3, r8, r6, lr
 8000c1a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000c1e:	fb06 f107 	mul.w	r1, r6, r7
 8000c22:	4299      	cmp	r1, r3
 8000c24:	d90a      	bls.n	8000c3c <__udivmoddi4+0x64>
 8000c26:	eb1c 0303 	adds.w	r3, ip, r3
 8000c2a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000c2e:	f080 811f 	bcs.w	8000e70 <__udivmoddi4+0x298>
 8000c32:	4299      	cmp	r1, r3
 8000c34:	f240 811c 	bls.w	8000e70 <__udivmoddi4+0x298>
 8000c38:	3e02      	subs	r6, #2
 8000c3a:	4463      	add	r3, ip
 8000c3c:	1a5b      	subs	r3, r3, r1
 8000c3e:	b2a4      	uxth	r4, r4
 8000c40:	fbb3 f0f8 	udiv	r0, r3, r8
 8000c44:	fb08 3310 	mls	r3, r8, r0, r3
 8000c48:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c4c:	fb00 f707 	mul.w	r7, r0, r7
 8000c50:	42a7      	cmp	r7, r4
 8000c52:	d90a      	bls.n	8000c6a <__udivmoddi4+0x92>
 8000c54:	eb1c 0404 	adds.w	r4, ip, r4
 8000c58:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c5c:	f080 810a 	bcs.w	8000e74 <__udivmoddi4+0x29c>
 8000c60:	42a7      	cmp	r7, r4
 8000c62:	f240 8107 	bls.w	8000e74 <__udivmoddi4+0x29c>
 8000c66:	4464      	add	r4, ip
 8000c68:	3802      	subs	r0, #2
 8000c6a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c6e:	1be4      	subs	r4, r4, r7
 8000c70:	2600      	movs	r6, #0
 8000c72:	b11d      	cbz	r5, 8000c7c <__udivmoddi4+0xa4>
 8000c74:	40d4      	lsrs	r4, r2
 8000c76:	2300      	movs	r3, #0
 8000c78:	e9c5 4300 	strd	r4, r3, [r5]
 8000c7c:	4631      	mov	r1, r6
 8000c7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c82:	428b      	cmp	r3, r1
 8000c84:	d909      	bls.n	8000c9a <__udivmoddi4+0xc2>
 8000c86:	2d00      	cmp	r5, #0
 8000c88:	f000 80ef 	beq.w	8000e6a <__udivmoddi4+0x292>
 8000c8c:	2600      	movs	r6, #0
 8000c8e:	e9c5 0100 	strd	r0, r1, [r5]
 8000c92:	4630      	mov	r0, r6
 8000c94:	4631      	mov	r1, r6
 8000c96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9a:	fab3 f683 	clz	r6, r3
 8000c9e:	2e00      	cmp	r6, #0
 8000ca0:	d14a      	bne.n	8000d38 <__udivmoddi4+0x160>
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d302      	bcc.n	8000cac <__udivmoddi4+0xd4>
 8000ca6:	4282      	cmp	r2, r0
 8000ca8:	f200 80f9 	bhi.w	8000e9e <__udivmoddi4+0x2c6>
 8000cac:	1a84      	subs	r4, r0, r2
 8000cae:	eb61 0303 	sbc.w	r3, r1, r3
 8000cb2:	2001      	movs	r0, #1
 8000cb4:	469e      	mov	lr, r3
 8000cb6:	2d00      	cmp	r5, #0
 8000cb8:	d0e0      	beq.n	8000c7c <__udivmoddi4+0xa4>
 8000cba:	e9c5 4e00 	strd	r4, lr, [r5]
 8000cbe:	e7dd      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000cc0:	b902      	cbnz	r2, 8000cc4 <__udivmoddi4+0xec>
 8000cc2:	deff      	udf	#255	; 0xff
 8000cc4:	fab2 f282 	clz	r2, r2
 8000cc8:	2a00      	cmp	r2, #0
 8000cca:	f040 8092 	bne.w	8000df2 <__udivmoddi4+0x21a>
 8000cce:	eba1 010c 	sub.w	r1, r1, ip
 8000cd2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cd6:	fa1f fe8c 	uxth.w	lr, ip
 8000cda:	2601      	movs	r6, #1
 8000cdc:	0c20      	lsrs	r0, r4, #16
 8000cde:	fbb1 f3f7 	udiv	r3, r1, r7
 8000ce2:	fb07 1113 	mls	r1, r7, r3, r1
 8000ce6:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000cea:	fb0e f003 	mul.w	r0, lr, r3
 8000cee:	4288      	cmp	r0, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0x12c>
 8000cf2:	eb1c 0101 	adds.w	r1, ip, r1
 8000cf6:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000cfa:	d202      	bcs.n	8000d02 <__udivmoddi4+0x12a>
 8000cfc:	4288      	cmp	r0, r1
 8000cfe:	f200 80cb 	bhi.w	8000e98 <__udivmoddi4+0x2c0>
 8000d02:	4643      	mov	r3, r8
 8000d04:	1a09      	subs	r1, r1, r0
 8000d06:	b2a4      	uxth	r4, r4
 8000d08:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d0c:	fb07 1110 	mls	r1, r7, r0, r1
 8000d10:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000d14:	fb0e fe00 	mul.w	lr, lr, r0
 8000d18:	45a6      	cmp	lr, r4
 8000d1a:	d908      	bls.n	8000d2e <__udivmoddi4+0x156>
 8000d1c:	eb1c 0404 	adds.w	r4, ip, r4
 8000d20:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000d24:	d202      	bcs.n	8000d2c <__udivmoddi4+0x154>
 8000d26:	45a6      	cmp	lr, r4
 8000d28:	f200 80bb 	bhi.w	8000ea2 <__udivmoddi4+0x2ca>
 8000d2c:	4608      	mov	r0, r1
 8000d2e:	eba4 040e 	sub.w	r4, r4, lr
 8000d32:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000d36:	e79c      	b.n	8000c72 <__udivmoddi4+0x9a>
 8000d38:	f1c6 0720 	rsb	r7, r6, #32
 8000d3c:	40b3      	lsls	r3, r6
 8000d3e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d42:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d46:	fa20 f407 	lsr.w	r4, r0, r7
 8000d4a:	fa01 f306 	lsl.w	r3, r1, r6
 8000d4e:	431c      	orrs	r4, r3
 8000d50:	40f9      	lsrs	r1, r7
 8000d52:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d56:	fa00 f306 	lsl.w	r3, r0, r6
 8000d5a:	fbb1 f8f9 	udiv	r8, r1, r9
 8000d5e:	0c20      	lsrs	r0, r4, #16
 8000d60:	fa1f fe8c 	uxth.w	lr, ip
 8000d64:	fb09 1118 	mls	r1, r9, r8, r1
 8000d68:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d6c:	fb08 f00e 	mul.w	r0, r8, lr
 8000d70:	4288      	cmp	r0, r1
 8000d72:	fa02 f206 	lsl.w	r2, r2, r6
 8000d76:	d90b      	bls.n	8000d90 <__udivmoddi4+0x1b8>
 8000d78:	eb1c 0101 	adds.w	r1, ip, r1
 8000d7c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000d80:	f080 8088 	bcs.w	8000e94 <__udivmoddi4+0x2bc>
 8000d84:	4288      	cmp	r0, r1
 8000d86:	f240 8085 	bls.w	8000e94 <__udivmoddi4+0x2bc>
 8000d8a:	f1a8 0802 	sub.w	r8, r8, #2
 8000d8e:	4461      	add	r1, ip
 8000d90:	1a09      	subs	r1, r1, r0
 8000d92:	b2a4      	uxth	r4, r4
 8000d94:	fbb1 f0f9 	udiv	r0, r1, r9
 8000d98:	fb09 1110 	mls	r1, r9, r0, r1
 8000d9c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000da0:	fb00 fe0e 	mul.w	lr, r0, lr
 8000da4:	458e      	cmp	lr, r1
 8000da6:	d908      	bls.n	8000dba <__udivmoddi4+0x1e2>
 8000da8:	eb1c 0101 	adds.w	r1, ip, r1
 8000dac:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000db0:	d26c      	bcs.n	8000e8c <__udivmoddi4+0x2b4>
 8000db2:	458e      	cmp	lr, r1
 8000db4:	d96a      	bls.n	8000e8c <__udivmoddi4+0x2b4>
 8000db6:	3802      	subs	r0, #2
 8000db8:	4461      	add	r1, ip
 8000dba:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000dbe:	fba0 9402 	umull	r9, r4, r0, r2
 8000dc2:	eba1 010e 	sub.w	r1, r1, lr
 8000dc6:	42a1      	cmp	r1, r4
 8000dc8:	46c8      	mov	r8, r9
 8000dca:	46a6      	mov	lr, r4
 8000dcc:	d356      	bcc.n	8000e7c <__udivmoddi4+0x2a4>
 8000dce:	d053      	beq.n	8000e78 <__udivmoddi4+0x2a0>
 8000dd0:	b15d      	cbz	r5, 8000dea <__udivmoddi4+0x212>
 8000dd2:	ebb3 0208 	subs.w	r2, r3, r8
 8000dd6:	eb61 010e 	sbc.w	r1, r1, lr
 8000dda:	fa01 f707 	lsl.w	r7, r1, r7
 8000dde:	fa22 f306 	lsr.w	r3, r2, r6
 8000de2:	40f1      	lsrs	r1, r6
 8000de4:	431f      	orrs	r7, r3
 8000de6:	e9c5 7100 	strd	r7, r1, [r5]
 8000dea:	2600      	movs	r6, #0
 8000dec:	4631      	mov	r1, r6
 8000dee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df2:	f1c2 0320 	rsb	r3, r2, #32
 8000df6:	40d8      	lsrs	r0, r3
 8000df8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000dfc:	fa21 f303 	lsr.w	r3, r1, r3
 8000e00:	4091      	lsls	r1, r2
 8000e02:	4301      	orrs	r1, r0
 8000e04:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e08:	fa1f fe8c 	uxth.w	lr, ip
 8000e0c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000e10:	fb07 3610 	mls	r6, r7, r0, r3
 8000e14:	0c0b      	lsrs	r3, r1, #16
 8000e16:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000e1a:	fb00 f60e 	mul.w	r6, r0, lr
 8000e1e:	429e      	cmp	r6, r3
 8000e20:	fa04 f402 	lsl.w	r4, r4, r2
 8000e24:	d908      	bls.n	8000e38 <__udivmoddi4+0x260>
 8000e26:	eb1c 0303 	adds.w	r3, ip, r3
 8000e2a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000e2e:	d22f      	bcs.n	8000e90 <__udivmoddi4+0x2b8>
 8000e30:	429e      	cmp	r6, r3
 8000e32:	d92d      	bls.n	8000e90 <__udivmoddi4+0x2b8>
 8000e34:	3802      	subs	r0, #2
 8000e36:	4463      	add	r3, ip
 8000e38:	1b9b      	subs	r3, r3, r6
 8000e3a:	b289      	uxth	r1, r1
 8000e3c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000e40:	fb07 3316 	mls	r3, r7, r6, r3
 8000e44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e48:	fb06 f30e 	mul.w	r3, r6, lr
 8000e4c:	428b      	cmp	r3, r1
 8000e4e:	d908      	bls.n	8000e62 <__udivmoddi4+0x28a>
 8000e50:	eb1c 0101 	adds.w	r1, ip, r1
 8000e54:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000e58:	d216      	bcs.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5a:	428b      	cmp	r3, r1
 8000e5c:	d914      	bls.n	8000e88 <__udivmoddi4+0x2b0>
 8000e5e:	3e02      	subs	r6, #2
 8000e60:	4461      	add	r1, ip
 8000e62:	1ac9      	subs	r1, r1, r3
 8000e64:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000e68:	e738      	b.n	8000cdc <__udivmoddi4+0x104>
 8000e6a:	462e      	mov	r6, r5
 8000e6c:	4628      	mov	r0, r5
 8000e6e:	e705      	b.n	8000c7c <__udivmoddi4+0xa4>
 8000e70:	4606      	mov	r6, r0
 8000e72:	e6e3      	b.n	8000c3c <__udivmoddi4+0x64>
 8000e74:	4618      	mov	r0, r3
 8000e76:	e6f8      	b.n	8000c6a <__udivmoddi4+0x92>
 8000e78:	454b      	cmp	r3, r9
 8000e7a:	d2a9      	bcs.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e7c:	ebb9 0802 	subs.w	r8, r9, r2
 8000e80:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000e84:	3801      	subs	r0, #1
 8000e86:	e7a3      	b.n	8000dd0 <__udivmoddi4+0x1f8>
 8000e88:	4646      	mov	r6, r8
 8000e8a:	e7ea      	b.n	8000e62 <__udivmoddi4+0x28a>
 8000e8c:	4620      	mov	r0, r4
 8000e8e:	e794      	b.n	8000dba <__udivmoddi4+0x1e2>
 8000e90:	4640      	mov	r0, r8
 8000e92:	e7d1      	b.n	8000e38 <__udivmoddi4+0x260>
 8000e94:	46d0      	mov	r8, sl
 8000e96:	e77b      	b.n	8000d90 <__udivmoddi4+0x1b8>
 8000e98:	3b02      	subs	r3, #2
 8000e9a:	4461      	add	r1, ip
 8000e9c:	e732      	b.n	8000d04 <__udivmoddi4+0x12c>
 8000e9e:	4630      	mov	r0, r6
 8000ea0:	e709      	b.n	8000cb6 <__udivmoddi4+0xde>
 8000ea2:	4464      	add	r4, ip
 8000ea4:	3802      	subs	r0, #2
 8000ea6:	e742      	b.n	8000d2e <__udivmoddi4+0x156>

08000ea8 <__aeabi_idiv0>:
 8000ea8:	4770      	bx	lr
 8000eaa:	bf00      	nop

08000eac <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(DefaultTask, NULL, &defaultTask_attributes);
 8000eb0:	4a14      	ldr	r2, [pc, #80]	; (8000f04 <MX_FREERTOS_Init+0x58>)
 8000eb2:	2100      	movs	r1, #0
 8000eb4:	4814      	ldr	r0, [pc, #80]	; (8000f08 <MX_FREERTOS_Init+0x5c>)
 8000eb6:	f003 f9df 	bl	8004278 <osThreadNew>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	4a13      	ldr	r2, [pc, #76]	; (8000f0c <MX_FREERTOS_Init+0x60>)
 8000ebe:	6013      	str	r3, [r2, #0]

  /* creation of allocTask1 */
  allocTask1Handle = osThreadNew(AllocTask1, NULL, &allocTask1_attributes);
 8000ec0:	4a13      	ldr	r2, [pc, #76]	; (8000f10 <MX_FREERTOS_Init+0x64>)
 8000ec2:	2100      	movs	r1, #0
 8000ec4:	4813      	ldr	r0, [pc, #76]	; (8000f14 <MX_FREERTOS_Init+0x68>)
 8000ec6:	f003 f9d7 	bl	8004278 <osThreadNew>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	4a12      	ldr	r2, [pc, #72]	; (8000f18 <MX_FREERTOS_Init+0x6c>)
 8000ece:	6013      	str	r3, [r2, #0]

  /* creation of allocTask2 */
  allocTask2Handle = osThreadNew(AllocTask2, NULL, &allocTask2_attributes);
 8000ed0:	4a12      	ldr	r2, [pc, #72]	; (8000f1c <MX_FREERTOS_Init+0x70>)
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	4812      	ldr	r0, [pc, #72]	; (8000f20 <MX_FREERTOS_Init+0x74>)
 8000ed6:	f003 f9cf 	bl	8004278 <osThreadNew>
 8000eda:	4603      	mov	r3, r0
 8000edc:	4a11      	ldr	r2, [pc, #68]	; (8000f24 <MX_FREERTOS_Init+0x78>)
 8000ede:	6013      	str	r3, [r2, #0]

  /* creation of allocTask3 */
  allocTask3Handle = osThreadNew(AllocTask3, NULL, &allocTask3_attributes);
 8000ee0:	4a11      	ldr	r2, [pc, #68]	; (8000f28 <MX_FREERTOS_Init+0x7c>)
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	4811      	ldr	r0, [pc, #68]	; (8000f2c <MX_FREERTOS_Init+0x80>)
 8000ee6:	f003 f9c7 	bl	8004278 <osThreadNew>
 8000eea:	4603      	mov	r3, r0
 8000eec:	4a10      	ldr	r2, [pc, #64]	; (8000f30 <MX_FREERTOS_Init+0x84>)
 8000eee:	6013      	str	r3, [r2, #0]

  /* creation of pollStackSize */
  pollStackSizeHandle = osThreadNew(PollStackSize, NULL, &pollStackSize_attributes);
 8000ef0:	4a10      	ldr	r2, [pc, #64]	; (8000f34 <MX_FREERTOS_Init+0x88>)
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	4810      	ldr	r0, [pc, #64]	; (8000f38 <MX_FREERTOS_Init+0x8c>)
 8000ef6:	f003 f9bf 	bl	8004278 <osThreadNew>
 8000efa:	4603      	mov	r3, r0
 8000efc:	4a0f      	ldr	r2, [pc, #60]	; (8000f3c <MX_FREERTOS_Init+0x90>)
 8000efe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000f00:	bf00      	nop
 8000f02:	bd80      	pop	{r7, pc}
 8000f04:	08009efc 	.word	0x08009efc
 8000f08:	08000f41 	.word	0x08000f41
 8000f0c:	200001fc 	.word	0x200001fc
 8000f10:	08009f20 	.word	0x08009f20
 8000f14:	080010fb 	.word	0x080010fb
 8000f18:	20000200 	.word	0x20000200
 8000f1c:	08009f44 	.word	0x08009f44
 8000f20:	08001171 	.word	0x08001171
 8000f24:	20000204 	.word	0x20000204
 8000f28:	08009f68 	.word	0x08009f68
 8000f2c:	080011df 	.word	0x080011df
 8000f30:	20000208 	.word	0x20000208
 8000f34:	08009f8c 	.word	0x08009f8c
 8000f38:	0800124d 	.word	0x0800124d
 8000f3c:	2000020c 	.word	0x2000020c

08000f40 <DefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_DefaultTask */
void DefaultTask(void *argument)
{
 8000f40:	b580      	push	{r7, lr}
 8000f42:	b082      	sub	sp, #8
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN DefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000f48:	2001      	movs	r0, #1
 8000f4a:	f003 fa5f 	bl	800440c <osDelay>
 8000f4e:	e7fb      	b.n	8000f48 <DefaultTask+0x8>

08000f50 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b088      	sub	sp, #32
 8000f54:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	601a      	str	r2, [r3, #0]
 8000f5e:	605a      	str	r2, [r3, #4]
 8000f60:	609a      	str	r2, [r3, #8]
 8000f62:	60da      	str	r2, [r3, #12]
 8000f64:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f66:	4b1d      	ldr	r3, [pc, #116]	; (8000fdc <MX_GPIO_Init+0x8c>)
 8000f68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f6a:	4a1c      	ldr	r2, [pc, #112]	; (8000fdc <MX_GPIO_Init+0x8c>)
 8000f6c:	f043 0304 	orr.w	r3, r3, #4
 8000f70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f72:	4b1a      	ldr	r3, [pc, #104]	; (8000fdc <MX_GPIO_Init+0x8c>)
 8000f74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f76:	f003 0304 	and.w	r3, r3, #4
 8000f7a:	60bb      	str	r3, [r7, #8]
 8000f7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f7e:	4b17      	ldr	r3, [pc, #92]	; (8000fdc <MX_GPIO_Init+0x8c>)
 8000f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f82:	4a16      	ldr	r2, [pc, #88]	; (8000fdc <MX_GPIO_Init+0x8c>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f8a:	4b14      	ldr	r3, [pc, #80]	; (8000fdc <MX_GPIO_Init+0x8c>)
 8000f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f96:	4b11      	ldr	r3, [pc, #68]	; (8000fdc <MX_GPIO_Init+0x8c>)
 8000f98:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f9a:	4a10      	ldr	r2, [pc, #64]	; (8000fdc <MX_GPIO_Init+0x8c>)
 8000f9c:	f043 0302 	orr.w	r3, r3, #2
 8000fa0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000fa2:	4b0e      	ldr	r3, [pc, #56]	; (8000fdc <MX_GPIO_Init+0x8c>)
 8000fa4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000fa6:	f003 0302 	and.w	r3, r3, #2
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Board_LED_GPIO_Port, Board_LED_Pin, GPIO_PIN_RESET);
 8000fae:	2200      	movs	r2, #0
 8000fb0:	2108      	movs	r1, #8
 8000fb2:	480b      	ldr	r0, [pc, #44]	; (8000fe0 <MX_GPIO_Init+0x90>)
 8000fb4:	f000 ffa6 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Board_LED_Pin;
 8000fb8:	2308      	movs	r3, #8
 8000fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc4:	2300      	movs	r3, #0
 8000fc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Board_LED_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4804      	ldr	r0, [pc, #16]	; (8000fe0 <MX_GPIO_Init+0x90>)
 8000fd0:	f000 fe2e 	bl	8001c30 <HAL_GPIO_Init>

}
 8000fd4:	bf00      	nop
 8000fd6:	3720      	adds	r7, #32
 8000fd8:	46bd      	mov	sp, r7
 8000fda:	bd80      	pop	{r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	48000400 	.word	0x48000400

08000fe4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000fe8:	f000 fd07 	bl	80019fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fec:	f000 f80c 	bl	8001008 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ff0:	f7ff ffae 	bl	8000f50 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000ff4:	f000 fc3e 	bl	8001874 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000ff8:	f003 f8f4 	bl	80041e4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000ffc:	f7ff ff56 	bl	8000eac <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001000:	f003 f914 	bl	800422c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001004:	e7fe      	b.n	8001004 <main+0x20>
	...

08001008 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b096      	sub	sp, #88	; 0x58
 800100c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800100e:	f107 0314 	add.w	r3, r7, #20
 8001012:	2244      	movs	r2, #68	; 0x44
 8001014:	2100      	movs	r1, #0
 8001016:	4618      	mov	r0, r3
 8001018:	f006 f94f 	bl	80072ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800101c:	463b      	mov	r3, r7
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800102a:	f44f 7000 	mov.w	r0, #512	; 0x200
 800102e:	f000 ff9f 	bl	8001f70 <HAL_PWREx_ControlVoltageScaling>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x34>
  {
    Error_Handler();
 8001038:	f000 f85a 	bl	80010f0 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 800103c:	f000 ff7a 	bl	8001f34 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8001040:	4b21      	ldr	r3, [pc, #132]	; (80010c8 <SystemClock_Config+0xc0>)
 8001042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001046:	4a20      	ldr	r2, [pc, #128]	; (80010c8 <SystemClock_Config+0xc0>)
 8001048:	f023 0318 	bic.w	r3, r3, #24
 800104c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8001050:	2314      	movs	r3, #20
 8001052:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001054:	2301      	movs	r3, #1
 8001056:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8001058:	2301      	movs	r3, #1
 800105a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 800105c:	2300      	movs	r3, #0
 800105e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8001060:	2360      	movs	r3, #96	; 0x60
 8001062:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001064:	2302      	movs	r3, #2
 8001066:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8001068:	2301      	movs	r3, #1
 800106a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800106c:	2301      	movs	r3, #1
 800106e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8001070:	2310      	movs	r3, #16
 8001072:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8001074:	2307      	movs	r3, #7
 8001076:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001078:	2302      	movs	r3, #2
 800107a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800107c:	2302      	movs	r3, #2
 800107e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001080:	f107 0314 	add.w	r3, r7, #20
 8001084:	4618      	mov	r0, r3
 8001086:	f000 ffc9 	bl	800201c <HAL_RCC_OscConfig>
 800108a:	4603      	mov	r3, r0
 800108c:	2b00      	cmp	r3, #0
 800108e:	d001      	beq.n	8001094 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001090:	f000 f82e 	bl	80010f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001094:	230f      	movs	r3, #15
 8001096:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001098:	2303      	movs	r3, #3
 800109a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80010a0:	2300      	movs	r3, #0
 80010a2:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80010a4:	2300      	movs	r3, #0
 80010a6:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80010a8:	463b      	mov	r3, r7
 80010aa:	2101      	movs	r1, #1
 80010ac:	4618      	mov	r0, r3
 80010ae:	f001 fbc9 	bl	8002844 <HAL_RCC_ClockConfig>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d001      	beq.n	80010bc <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80010b8:	f000 f81a 	bl	80010f0 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80010bc:	f002 f80e 	bl	80030dc <HAL_RCCEx_EnableMSIPLLMode>
}
 80010c0:	bf00      	nop
 80010c2:	3758      	adds	r7, #88	; 0x58
 80010c4:	46bd      	mov	sp, r7
 80010c6:	bd80      	pop	{r7, pc}
 80010c8:	40021000 	.word	0x40021000

080010cc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010cc:	b580      	push	{r7, lr}
 80010ce:	b082      	sub	sp, #8
 80010d0:	af00      	add	r7, sp, #0
 80010d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	4a04      	ldr	r2, [pc, #16]	; (80010ec <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010da:	4293      	cmp	r3, r2
 80010dc:	d101      	bne.n	80010e2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010de:	f000 fca5 	bl	8001a2c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40001000 	.word	0x40001000

080010f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010f0:	b480      	push	{r7}
 80010f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010f4:	b672      	cpsid	i
}
 80010f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010f8:	e7fe      	b.n	80010f8 <Error_Handler+0x8>

080010fa <AllocTask1>:
/**
 * @brief Allocate memory on the stack (malloc)
 *
 * @param argument
 */
void AllocTask1(void *argument) {
 80010fa:	b580      	push	{r7, lr}
 80010fc:	b086      	sub	sp, #24
 80010fe:	af00      	add	r7, sp, #0
 8001100:	6078      	str	r0, [r7, #4]
	uint8_t values_on_stack[TASK1VALUES]; //
	uint8_t *values_on_heap;
	for(;;) {
		for(uint8_t i = 0; i < TASK1VALUES; i++) {
 8001102:	2300      	movs	r3, #0
 8001104:	75fb      	strb	r3, [r7, #23]
 8001106:	e008      	b.n	800111a <AllocTask1+0x20>
			values_on_stack[i] = 0xAA;
 8001108:	7dfb      	ldrb	r3, [r7, #23]
 800110a:	3318      	adds	r3, #24
 800110c:	443b      	add	r3, r7
 800110e:	22aa      	movs	r2, #170	; 0xaa
 8001110:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(uint8_t i = 0; i < TASK1VALUES; i++) {
 8001114:	7dfb      	ldrb	r3, [r7, #23]
 8001116:	3301      	adds	r3, #1
 8001118:	75fb      	strb	r3, [r7, #23]
 800111a:	7dfb      	ldrb	r3, [r7, #23]
 800111c:	2b04      	cmp	r3, #4
 800111e:	d9f3      	bls.n	8001108 <AllocTask1+0xe>
		}
		values_on_heap = (uint8_t*)pvPortMalloc(TASK1VALUES * sizeof(uint8_t));
 8001120:	2005      	movs	r0, #5
 8001122:	f005 fd51 	bl	8006bc8 <pvPortMalloc>
 8001126:	6138      	str	r0, [r7, #16]
		vTaskDelay(TASK1VALUES * 1000);
 8001128:	f241 3088 	movw	r0, #5000	; 0x1388
 800112c:	f004 f916 	bl	800535c <vTaskDelay>
		for(uint8_t i = 0; i < TASK1VALUES; i++) {
 8001130:	2300      	movs	r3, #0
 8001132:	75bb      	strb	r3, [r7, #22]
 8001134:	e011      	b.n	800115a <AllocTask1+0x60>
			values_on_heap[i] = values_on_stack[i] + 1;
 8001136:	7dbb      	ldrb	r3, [r7, #22]
 8001138:	3318      	adds	r3, #24
 800113a:	443b      	add	r3, r7
 800113c:	f813 2c10 	ldrb.w	r2, [r3, #-16]
 8001140:	7dbb      	ldrb	r3, [r7, #22]
 8001142:	6939      	ldr	r1, [r7, #16]
 8001144:	440b      	add	r3, r1
 8001146:	3201      	adds	r2, #1
 8001148:	b2d2      	uxtb	r2, r2
 800114a:	701a      	strb	r2, [r3, #0]
			/*
			 * Das zusätzliche Delay in diesem Task hilft bei der frühzeitigen Erkennung des Unterschieds.
			 * Beim dynamic allocation model wird durch die Recursion deutlich mehr Heap-Speicher angefragt/verwendet.
			 */
			vTaskDelay(TASK1VALUES * 1000);
 800114c:	f241 3088 	movw	r0, #5000	; 0x1388
 8001150:	f004 f904 	bl	800535c <vTaskDelay>
		for(uint8_t i = 0; i < TASK1VALUES; i++) {
 8001154:	7dbb      	ldrb	r3, [r7, #22]
 8001156:	3301      	adds	r3, #1
 8001158:	75bb      	strb	r3, [r7, #22]
 800115a:	7dbb      	ldrb	r3, [r7, #22]
 800115c:	2b04      	cmp	r3, #4
 800115e:	d9ea      	bls.n	8001136 <AllocTask1+0x3c>
		}
		vTaskDelay(TASK1VALUES * 1000);
 8001160:	f241 3088 	movw	r0, #5000	; 0x1388
 8001164:	f004 f8fa 	bl	800535c <vTaskDelay>
		vPortFree(values_on_heap);
 8001168:	6938      	ldr	r0, [r7, #16]
 800116a:	f005 fdf9 	bl	8006d60 <vPortFree>
		for(uint8_t i = 0; i < TASK1VALUES; i++) {
 800116e:	e7c8      	b.n	8001102 <AllocTask1+0x8>

08001170 <AllocTask2>:
/**
 * @brief Allocate memory on the stack (recursion)
 *
 * @param argument
 */
void AllocTask2(void *argument) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
	uint8_t values_on_stack[TASK2VALUES]; //
	uint8_t *values_on_heap;
	for(;;) {
		for(uint8_t i = 0; i < TASK2VALUES; i++) {
 8001178:	2300      	movs	r3, #0
 800117a:	77fb      	strb	r3, [r7, #31]
 800117c:	e008      	b.n	8001190 <AllocTask2+0x20>
			values_on_stack[i] = 0xBB;
 800117e:	7ffb      	ldrb	r3, [r7, #31]
 8001180:	3320      	adds	r3, #32
 8001182:	443b      	add	r3, r7
 8001184:	22bb      	movs	r2, #187	; 0xbb
 8001186:	f803 2c14 	strb.w	r2, [r3, #-20]
		for(uint8_t i = 0; i < TASK2VALUES; i++) {
 800118a:	7ffb      	ldrb	r3, [r7, #31]
 800118c:	3301      	adds	r3, #1
 800118e:	77fb      	strb	r3, [r7, #31]
 8001190:	7ffb      	ldrb	r3, [r7, #31]
 8001192:	2b09      	cmp	r3, #9
 8001194:	d9f3      	bls.n	800117e <AllocTask2+0xe>
		}
		values_on_heap = (uint8_t*)pvPortMalloc(TASK2VALUES * sizeof(uint8_t));
 8001196:	200a      	movs	r0, #10
 8001198:	f005 fd16 	bl	8006bc8 <pvPortMalloc>
 800119c:	61b8      	str	r0, [r7, #24]
		vTaskDelay(TASK2VALUES * 1000);
 800119e:	f242 7010 	movw	r0, #10000	; 0x2710
 80011a2:	f004 f8db 	bl	800535c <vTaskDelay>
		for(uint8_t i = 0; i < TASK2VALUES; i++) {
 80011a6:	2300      	movs	r3, #0
 80011a8:	77bb      	strb	r3, [r7, #30]
 80011aa:	e00d      	b.n	80011c8 <AllocTask2+0x58>
			values_on_heap[i] = values_on_stack[i] + 1;
 80011ac:	7fbb      	ldrb	r3, [r7, #30]
 80011ae:	3320      	adds	r3, #32
 80011b0:	443b      	add	r3, r7
 80011b2:	f813 2c14 	ldrb.w	r2, [r3, #-20]
 80011b6:	7fbb      	ldrb	r3, [r7, #30]
 80011b8:	69b9      	ldr	r1, [r7, #24]
 80011ba:	440b      	add	r3, r1
 80011bc:	3201      	adds	r2, #1
 80011be:	b2d2      	uxtb	r2, r2
 80011c0:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < TASK2VALUES; i++) {
 80011c2:	7fbb      	ldrb	r3, [r7, #30]
 80011c4:	3301      	adds	r3, #1
 80011c6:	77bb      	strb	r3, [r7, #30]
 80011c8:	7fbb      	ldrb	r3, [r7, #30]
 80011ca:	2b09      	cmp	r3, #9
 80011cc:	d9ee      	bls.n	80011ac <AllocTask2+0x3c>
		}
		vTaskDelay(TASK2VALUES * 1000);
 80011ce:	f242 7010 	movw	r0, #10000	; 0x2710
 80011d2:	f004 f8c3 	bl	800535c <vTaskDelay>
		vPortFree(values_on_heap);
 80011d6:	69b8      	ldr	r0, [r7, #24]
 80011d8:	f005 fdc2 	bl	8006d60 <vPortFree>
		for(uint8_t i = 0; i < TASK2VALUES; i++) {
 80011dc:	e7cc      	b.n	8001178 <AllocTask2+0x8>

080011de <AllocTask3>:
/**
 * @brief Allocate memory on the stack (etc.)
 *
 * @param argument
 */
void AllocTask3(void *argument) {
 80011de:	b580      	push	{r7, lr}
 80011e0:	b088      	sub	sp, #32
 80011e2:	af00      	add	r7, sp, #0
 80011e4:	6078      	str	r0, [r7, #4]
	uint8_t values_on_stack[TASK3VALUES]; //
	uint8_t *values_on_heap;
	for(;;) {
		for(uint8_t i = 0; i < TASK3VALUES; i++) {
 80011e6:	2300      	movs	r3, #0
 80011e8:	77fb      	strb	r3, [r7, #31]
 80011ea:	e008      	b.n	80011fe <AllocTask3+0x20>
			values_on_stack[i] = 0xCC;
 80011ec:	7ffb      	ldrb	r3, [r7, #31]
 80011ee:	3320      	adds	r3, #32
 80011f0:	443b      	add	r3, r7
 80011f2:	22cc      	movs	r2, #204	; 0xcc
 80011f4:	f803 2c18 	strb.w	r2, [r3, #-24]
		for(uint8_t i = 0; i < TASK3VALUES; i++) {
 80011f8:	7ffb      	ldrb	r3, [r7, #31]
 80011fa:	3301      	adds	r3, #1
 80011fc:	77fb      	strb	r3, [r7, #31]
 80011fe:	7ffb      	ldrb	r3, [r7, #31]
 8001200:	2b0e      	cmp	r3, #14
 8001202:	d9f3      	bls.n	80011ec <AllocTask3+0xe>
		}
		values_on_heap = (uint8_t*)pvPortMalloc(TASK3VALUES * sizeof(uint8_t));
 8001204:	200f      	movs	r0, #15
 8001206:	f005 fcdf 	bl	8006bc8 <pvPortMalloc>
 800120a:	61b8      	str	r0, [r7, #24]
		vTaskDelay(TASK3VALUES * 1000);
 800120c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001210:	f004 f8a4 	bl	800535c <vTaskDelay>
		for(uint8_t i = 0; i < TASK3VALUES; i++) {
 8001214:	2300      	movs	r3, #0
 8001216:	77bb      	strb	r3, [r7, #30]
 8001218:	e00d      	b.n	8001236 <AllocTask3+0x58>
			values_on_heap[i] = values_on_stack[i] + 1;
 800121a:	7fbb      	ldrb	r3, [r7, #30]
 800121c:	3320      	adds	r3, #32
 800121e:	443b      	add	r3, r7
 8001220:	f813 2c18 	ldrb.w	r2, [r3, #-24]
 8001224:	7fbb      	ldrb	r3, [r7, #30]
 8001226:	69b9      	ldr	r1, [r7, #24]
 8001228:	440b      	add	r3, r1
 800122a:	3201      	adds	r2, #1
 800122c:	b2d2      	uxtb	r2, r2
 800122e:	701a      	strb	r2, [r3, #0]
		for(uint8_t i = 0; i < TASK3VALUES; i++) {
 8001230:	7fbb      	ldrb	r3, [r7, #30]
 8001232:	3301      	adds	r3, #1
 8001234:	77bb      	strb	r3, [r7, #30]
 8001236:	7fbb      	ldrb	r3, [r7, #30]
 8001238:	2b0e      	cmp	r3, #14
 800123a:	d9ee      	bls.n	800121a <AllocTask3+0x3c>
		}
		vTaskDelay(TASK3VALUES * 1000);
 800123c:	f643 2098 	movw	r0, #15000	; 0x3a98
 8001240:	f004 f88c 	bl	800535c <vTaskDelay>
		vPortFree(values_on_heap);
 8001244:	69b8      	ldr	r0, [r7, #24]
 8001246:	f005 fd8b 	bl	8006d60 <vPortFree>
		for(uint8_t i = 0; i < TASK3VALUES; i++) {
 800124a:	e7cc      	b.n	80011e6 <AllocTask3+0x8>

0800124c <PollStackSize>:
/**
 * @brief Periodically output current and remaining stack size of tasks
 * The task should use the global structs (osThreadAttr_t) and osThreadGetStackSpace()
 * @param argument
 */
void PollStackSize(void *argument) {
 800124c:	b580      	push	{r7, lr}
 800124e:	b0aa      	sub	sp, #168	; 0xa8
 8001250:	af02      	add	r7, sp, #8
 8001252:	6078      	str	r0, [r7, #4]
	 * Doesn't work in STM32 for some reason
	 */
	//setbuf(stdout, NULL);
	HeapStats_t heapStats;
	// I could have used xTaskGetHandle("...") but this was simpler
	void *handles[3] = {allocTask1Handle, allocTask2Handle, allocTask3Handle};
 8001254:	4b35      	ldr	r3, [pc, #212]	; (800132c <PollStackSize+0xe0>)
 8001256:	681b      	ldr	r3, [r3, #0]
 8001258:	677b      	str	r3, [r7, #116]	; 0x74
 800125a:	4b35      	ldr	r3, [pc, #212]	; (8001330 <PollStackSize+0xe4>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	67bb      	str	r3, [r7, #120]	; 0x78
 8001260:	4b34      	ldr	r3, [pc, #208]	; (8001334 <PollStackSize+0xe8>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	67fb      	str	r3, [r7, #124]	; 0x7c
	// Irrelevant variables used during development
	//const osThreadAttr_t *attributes[3] = {&allocTask1_attributes, &allocTask2_attributes, &allocTask3_attributes};
	//uint32_t stackHighWaterMark[3];

	// Initial information
	for(uint8_t i = 0; i < 3; i++) {
 8001266:	2300      	movs	r3, #0
 8001268:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800126c:	e00e      	b.n	800128c <PollStackSize+0x40>
		taskInitialSpace(handles[i]);
 800126e:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001272:	009b      	lsls	r3, r3, #2
 8001274:	33a0      	adds	r3, #160	; 0xa0
 8001276:	443b      	add	r3, r7
 8001278:	f853 3c2c 	ldr.w	r3, [r3, #-44]
 800127c:	4618      	mov	r0, r3
 800127e:	f000 f86b 	bl	8001358 <taskInitialSpace>
	for(uint8_t i = 0; i < 3; i++) {
 8001282:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001286:	3301      	adds	r3, #1
 8001288:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
 800128c:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8001290:	2b02      	cmp	r3, #2
 8001292:	d9ec      	bls.n	800126e <PollStackSize+0x22>
		 * Alternative way of getting the remaining stack space of the tasks:
		stackHighWaterMark[0] = uxTaskGetStackHighWaterMark(allocTask1Handle) * 4;
		stackHighWaterMark[1] = uxTaskGetStackHighWaterMark(allocTask2Handle) * 4;
		stackHighWaterMark[2] = uxTaskGetStackHighWaterMark(allocTask3Handle) * 4;
		*/
		vPortGetHeapStats(&heapStats);
 8001294:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8001298:	4618      	mov	r0, r3
 800129a:	f005 fe7f 	bl	8006f9c <vPortGetHeapStats>
		heapInfoOutput(&heapStats);
 800129e:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f8de 	bl	8001464 <heapInfoOutput>
		printf("TASKS:\r\n");
 80012a8:	4823      	ldr	r0, [pc, #140]	; (8001338 <PollStackSize+0xec>)
 80012aa:	f006 fd93 	bl	8007dd4 <puts>
		printf("%-15s%-15s%-15s%-15s%-15s\r\n", "Task#", "TaskName", "TaskState", "TaskPriority", "RemainingStackSpace");
 80012ae:	4b23      	ldr	r3, [pc, #140]	; (800133c <PollStackSize+0xf0>)
 80012b0:	9301      	str	r3, [sp, #4]
 80012b2:	4b23      	ldr	r3, [pc, #140]	; (8001340 <PollStackSize+0xf4>)
 80012b4:	9300      	str	r3, [sp, #0]
 80012b6:	4b23      	ldr	r3, [pc, #140]	; (8001344 <PollStackSize+0xf8>)
 80012b8:	4a23      	ldr	r2, [pc, #140]	; (8001348 <PollStackSize+0xfc>)
 80012ba:	4924      	ldr	r1, [pc, #144]	; (800134c <PollStackSize+0x100>)
 80012bc:	4824      	ldr	r0, [pc, #144]	; (8001350 <PollStackSize+0x104>)
 80012be:	f006 fd03 	bl	8007cc8 <iprintf>
		for(uint8_t i = 0; i < 3; i++) {
 80012c2:	2300      	movs	r3, #0
 80012c4:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 80012c8:	e024      	b.n	8001314 <PollStackSize+0xc8>
			vTaskGetInfo(handles[i], &taskInfos[i], pdTRUE, eInvalid);
 80012ca:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 80012ce:	009b      	lsls	r3, r3, #2
 80012d0:	33a0      	adds	r3, #160	; 0xa0
 80012d2:	443b      	add	r3, r7
 80012d4:	f853 0c2c 	ldr.w	r0, [r3, #-44]
 80012d8:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 80012dc:	f107 0108 	add.w	r1, r7, #8
 80012e0:	4613      	mov	r3, r2
 80012e2:	00db      	lsls	r3, r3, #3
 80012e4:	4413      	add	r3, r2
 80012e6:	009b      	lsls	r3, r3, #2
 80012e8:	4419      	add	r1, r3
 80012ea:	2305      	movs	r3, #5
 80012ec:	2201      	movs	r2, #1
 80012ee:	f004 fcfb 	bl	8005ce8 <vTaskGetInfo>
			taskInfoOutput(&taskInfos[i]);
 80012f2:	f897 209e 	ldrb.w	r2, [r7, #158]	; 0x9e
 80012f6:	f107 0108 	add.w	r1, r7, #8
 80012fa:	4613      	mov	r3, r2
 80012fc:	00db      	lsls	r3, r3, #3
 80012fe:	4413      	add	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	440b      	add	r3, r1
 8001304:	4618      	mov	r0, r3
 8001306:	f000 f83f 	bl	8001388 <taskInfoOutput>
		for(uint8_t i = 0; i < 3; i++) {
 800130a:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 800130e:	3301      	adds	r3, #1
 8001310:	f887 309e 	strb.w	r3, [r7, #158]	; 0x9e
 8001314:	f897 309e 	ldrb.w	r3, [r7, #158]	; 0x9e
 8001318:	2b02      	cmp	r3, #2
 800131a:	d9d6      	bls.n	80012ca <PollStackSize+0x7e>
		}
		printf("\r\n");
 800131c:	480d      	ldr	r0, [pc, #52]	; (8001354 <PollStackSize+0x108>)
 800131e:	f006 fd59 	bl	8007dd4 <puts>
		 * Need to flush, because '\r' is added implicitly inside retarget.c
		 * Alternative would be to always write "\r\n" when using printf()
		 * I decided to always write "\r\n" and commented out the implicit '\r' in retarget.c
		 */
		// fflush(stdout);
		vTaskDelay(2000);
 8001322:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001326:	f004 f819 	bl	800535c <vTaskDelay>
		vPortGetHeapStats(&heapStats);
 800132a:	e7b3      	b.n	8001294 <PollStackSize+0x48>
 800132c:	20000200 	.word	0x20000200
 8001330:	20000204 	.word	0x20000204
 8001334:	20000208 	.word	0x20000208
 8001338:	08009d38 	.word	0x08009d38
 800133c:	08009d7c 	.word	0x08009d7c
 8001340:	08009d90 	.word	0x08009d90
 8001344:	08009d40 	.word	0x08009d40
 8001348:	08009d4c 	.word	0x08009d4c
 800134c:	08009d58 	.word	0x08009d58
 8001350:	08009d60 	.word	0x08009d60
 8001354:	08009da0 	.word	0x08009da0

08001358 <taskInitialSpace>:
	}
}

/* Implementations for arbitrary functions used in tasks */

void taskInitialSpace(osThreadId_t taskHandle) {
 8001358:	b590      	push	{r4, r7, lr}
 800135a:	b083      	sub	sp, #12
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
	printf("Initial space of %s: %u\r\n", osThreadGetName(taskHandle), (unsigned int)osThreadGetStackSpace(taskHandle));
 8001360:	6878      	ldr	r0, [r7, #4]
 8001362:	f003 f81b 	bl	800439c <osThreadGetName>
 8001366:	4604      	mov	r4, r0
 8001368:	6878      	ldr	r0, [r7, #4]
 800136a:	f003 f832 	bl	80043d2 <osThreadGetStackSpace>
 800136e:	4603      	mov	r3, r0
 8001370:	461a      	mov	r2, r3
 8001372:	4621      	mov	r1, r4
 8001374:	4803      	ldr	r0, [pc, #12]	; (8001384 <taskInitialSpace+0x2c>)
 8001376:	f006 fca7 	bl	8007cc8 <iprintf>
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	bd90      	pop	{r4, r7, pc}
 8001382:	bf00      	nop
 8001384:	08009da4 	.word	0x08009da4

08001388 <taskInfoOutput>:

void taskInfoOutput(TaskStatus_t *taskStatus) {
 8001388:	b580      	push	{r7, lr}
 800138a:	b082      	sub	sp, #8
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]
	printf("%-15lu%-15s", taskStatus->xTaskNumber, taskStatus->pcTaskName);
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	6899      	ldr	r1, [r3, #8]
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	461a      	mov	r2, r3
 800139a:	4826      	ldr	r0, [pc, #152]	; (8001434 <taskInfoOutput+0xac>)
 800139c:	f006 fc94 	bl	8007cc8 <iprintf>
	switch(taskStatus->eCurrentState) {
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	7b1b      	ldrb	r3, [r3, #12]
 80013a4:	2b05      	cmp	r3, #5
 80013a6:	d82d      	bhi.n	8001404 <taskInfoOutput+0x7c>
 80013a8:	a201      	add	r2, pc, #4	; (adr r2, 80013b0 <taskInfoOutput+0x28>)
 80013aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013ae:	bf00      	nop
 80013b0:	080013c9 	.word	0x080013c9
 80013b4:	080013d3 	.word	0x080013d3
 80013b8:	080013dd 	.word	0x080013dd
 80013bc:	080013e7 	.word	0x080013e7
 80013c0:	080013f1 	.word	0x080013f1
 80013c4:	080013fb 	.word	0x080013fb
		case eRunning:
			printf("%-15s", "RUNNING");
 80013c8:	491b      	ldr	r1, [pc, #108]	; (8001438 <taskInfoOutput+0xb0>)
 80013ca:	481c      	ldr	r0, [pc, #112]	; (800143c <taskInfoOutput+0xb4>)
 80013cc:	f006 fc7c 	bl	8007cc8 <iprintf>
			break;
 80013d0:	e01d      	b.n	800140e <taskInfoOutput+0x86>
		case eReady:
			printf("%-15s", "READY");
 80013d2:	491b      	ldr	r1, [pc, #108]	; (8001440 <taskInfoOutput+0xb8>)
 80013d4:	4819      	ldr	r0, [pc, #100]	; (800143c <taskInfoOutput+0xb4>)
 80013d6:	f006 fc77 	bl	8007cc8 <iprintf>
			break;
 80013da:	e018      	b.n	800140e <taskInfoOutput+0x86>
		case eBlocked:
			printf("%-15s", "BLOCKED");
 80013dc:	4919      	ldr	r1, [pc, #100]	; (8001444 <taskInfoOutput+0xbc>)
 80013de:	4817      	ldr	r0, [pc, #92]	; (800143c <taskInfoOutput+0xb4>)
 80013e0:	f006 fc72 	bl	8007cc8 <iprintf>
			break;
 80013e4:	e013      	b.n	800140e <taskInfoOutput+0x86>
		case eSuspended:
			printf("%-15s", "SUSPENDED");
 80013e6:	4918      	ldr	r1, [pc, #96]	; (8001448 <taskInfoOutput+0xc0>)
 80013e8:	4814      	ldr	r0, [pc, #80]	; (800143c <taskInfoOutput+0xb4>)
 80013ea:	f006 fc6d 	bl	8007cc8 <iprintf>
			break;
 80013ee:	e00e      	b.n	800140e <taskInfoOutput+0x86>
		case eDeleted:
			printf("%-15s", "DELETED");
 80013f0:	4916      	ldr	r1, [pc, #88]	; (800144c <taskInfoOutput+0xc4>)
 80013f2:	4812      	ldr	r0, [pc, #72]	; (800143c <taskInfoOutput+0xb4>)
 80013f4:	f006 fc68 	bl	8007cc8 <iprintf>
			break;
 80013f8:	e009      	b.n	800140e <taskInfoOutput+0x86>
		case eInvalid:
			printf("%-15s", "INVALID");
 80013fa:	4915      	ldr	r1, [pc, #84]	; (8001450 <taskInfoOutput+0xc8>)
 80013fc:	480f      	ldr	r0, [pc, #60]	; (800143c <taskInfoOutput+0xb4>)
 80013fe:	f006 fc63 	bl	8007cc8 <iprintf>
			break;
 8001402:	e004      	b.n	800140e <taskInfoOutput+0x86>
		default:
			printf("%-15s", "UNKNOWN");
 8001404:	4913      	ldr	r1, [pc, #76]	; (8001454 <taskInfoOutput+0xcc>)
 8001406:	480d      	ldr	r0, [pc, #52]	; (800143c <taskInfoOutput+0xb4>)
 8001408:	f006 fc5e 	bl	8007cc8 <iprintf>
			break;
 800140c:	bf00      	nop
	}
	printf("%-15lu", taskStatus->uxCurrentPriority);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	691b      	ldr	r3, [r3, #16]
 8001412:	4619      	mov	r1, r3
 8001414:	4810      	ldr	r0, [pc, #64]	; (8001458 <taskInfoOutput+0xd0>)
 8001416:	f006 fc57 	bl	8007cc8 <iprintf>
	printf("%-15u", taskStatus->usStackHighWaterMark);
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	8c1b      	ldrh	r3, [r3, #32]
 800141e:	4619      	mov	r1, r3
 8001420:	480e      	ldr	r0, [pc, #56]	; (800145c <taskInfoOutput+0xd4>)
 8001422:	f006 fc51 	bl	8007cc8 <iprintf>
	printf("\r\n");
 8001426:	480e      	ldr	r0, [pc, #56]	; (8001460 <taskInfoOutput+0xd8>)
 8001428:	f006 fcd4 	bl	8007dd4 <puts>
}
 800142c:	bf00      	nop
 800142e:	3708      	adds	r7, #8
 8001430:	46bd      	mov	sp, r7
 8001432:	bd80      	pop	{r7, pc}
 8001434:	08009dc0 	.word	0x08009dc0
 8001438:	08009dcc 	.word	0x08009dcc
 800143c:	08009dd4 	.word	0x08009dd4
 8001440:	08009ddc 	.word	0x08009ddc
 8001444:	08009de4 	.word	0x08009de4
 8001448:	08009dec 	.word	0x08009dec
 800144c:	08009df8 	.word	0x08009df8
 8001450:	08009e00 	.word	0x08009e00
 8001454:	08009e08 	.word	0x08009e08
 8001458:	08009e10 	.word	0x08009e10
 800145c:	08009e18 	.word	0x08009e18
 8001460:	08009da0 	.word	0x08009da0

08001464 <heapInfoOutput>:

void heapInfoOutput(HeapStats_t *heapStats) {
 8001464:	b580      	push	{r7, lr}
 8001466:	b086      	sub	sp, #24
 8001468:	af04      	add	r7, sp, #16
 800146a:	6078      	str	r0, [r7, #4]
	printf("HEAP:\r\n");
 800146c:	4820      	ldr	r0, [pc, #128]	; (80014f0 <heapInfoOutput+0x8c>)
 800146e:	f006 fcb1 	bl	8007dd4 <puts>
	printf("%-20s%-20s%-20s%-20s%-20s%-20s%-20s\r\n", "AvailableHeapBytes", "LargestFreeBlock", "SmallestFreeBlock", "#FreeBlocks", "MinRemainingBytes", "#Allocations", "#Frees");
 8001472:	4b20      	ldr	r3, [pc, #128]	; (80014f4 <heapInfoOutput+0x90>)
 8001474:	9303      	str	r3, [sp, #12]
 8001476:	4b20      	ldr	r3, [pc, #128]	; (80014f8 <heapInfoOutput+0x94>)
 8001478:	9302      	str	r3, [sp, #8]
 800147a:	4b20      	ldr	r3, [pc, #128]	; (80014fc <heapInfoOutput+0x98>)
 800147c:	9301      	str	r3, [sp, #4]
 800147e:	4b20      	ldr	r3, [pc, #128]	; (8001500 <heapInfoOutput+0x9c>)
 8001480:	9300      	str	r3, [sp, #0]
 8001482:	4b20      	ldr	r3, [pc, #128]	; (8001504 <heapInfoOutput+0xa0>)
 8001484:	4a20      	ldr	r2, [pc, #128]	; (8001508 <heapInfoOutput+0xa4>)
 8001486:	4921      	ldr	r1, [pc, #132]	; (800150c <heapInfoOutput+0xa8>)
 8001488:	4821      	ldr	r0, [pc, #132]	; (8001510 <heapInfoOutput+0xac>)
 800148a:	f006 fc1d 	bl	8007cc8 <iprintf>
	printf("%-20u", heapStats->xAvailableHeapSpaceInBytes);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4619      	mov	r1, r3
 8001494:	481f      	ldr	r0, [pc, #124]	; (8001514 <heapInfoOutput+0xb0>)
 8001496:	f006 fc17 	bl	8007cc8 <iprintf>
	printf("%-20u", heapStats->xSizeOfLargestFreeBlockInBytes);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	4619      	mov	r1, r3
 80014a0:	481c      	ldr	r0, [pc, #112]	; (8001514 <heapInfoOutput+0xb0>)
 80014a2:	f006 fc11 	bl	8007cc8 <iprintf>
	printf("%-20u", heapStats->xSizeOfSmallestFreeBlockInBytes);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	4619      	mov	r1, r3
 80014ac:	4819      	ldr	r0, [pc, #100]	; (8001514 <heapInfoOutput+0xb0>)
 80014ae:	f006 fc0b 	bl	8007cc8 <iprintf>
	printf("%-20u", heapStats->xNumberOfFreeBlocks);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	68db      	ldr	r3, [r3, #12]
 80014b6:	4619      	mov	r1, r3
 80014b8:	4816      	ldr	r0, [pc, #88]	; (8001514 <heapInfoOutput+0xb0>)
 80014ba:	f006 fc05 	bl	8007cc8 <iprintf>
	printf("%-20u", heapStats->xMinimumEverFreeBytesRemaining);
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	691b      	ldr	r3, [r3, #16]
 80014c2:	4619      	mov	r1, r3
 80014c4:	4813      	ldr	r0, [pc, #76]	; (8001514 <heapInfoOutput+0xb0>)
 80014c6:	f006 fbff 	bl	8007cc8 <iprintf>
	printf("%-20u", heapStats->xNumberOfSuccessfulAllocations);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	695b      	ldr	r3, [r3, #20]
 80014ce:	4619      	mov	r1, r3
 80014d0:	4810      	ldr	r0, [pc, #64]	; (8001514 <heapInfoOutput+0xb0>)
 80014d2:	f006 fbf9 	bl	8007cc8 <iprintf>
	printf("%-20u", heapStats->xNumberOfSuccessfulFrees);
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	4619      	mov	r1, r3
 80014dc:	480d      	ldr	r0, [pc, #52]	; (8001514 <heapInfoOutput+0xb0>)
 80014de:	f006 fbf3 	bl	8007cc8 <iprintf>
	printf("\r\n");
 80014e2:	480d      	ldr	r0, [pc, #52]	; (8001518 <heapInfoOutput+0xb4>)
 80014e4:	f006 fc76 	bl	8007dd4 <puts>
}
 80014e8:	bf00      	nop
 80014ea:	3708      	adds	r7, #8
 80014ec:	46bd      	mov	sp, r7
 80014ee:	bd80      	pop	{r7, pc}
 80014f0:	08009e20 	.word	0x08009e20
 80014f4:	08009e8c 	.word	0x08009e8c
 80014f8:	08009e94 	.word	0x08009e94
 80014fc:	08009ea4 	.word	0x08009ea4
 8001500:	08009eb8 	.word	0x08009eb8
 8001504:	08009e28 	.word	0x08009e28
 8001508:	08009e3c 	.word	0x08009e3c
 800150c:	08009e50 	.word	0x08009e50
 8001510:	08009e64 	.word	0x08009e64
 8001514:	08009ec4 	.word	0x08009ec4
 8001518:	08009da0 	.word	0x08009da0

0800151c <_write>:
  * @param 	file 	...	file descriptor
  * @param	ptr		... pointer to the data buffer.
  * @param	len 	...	length of the buffer in bytes.
  * @retval (int)	... Successfully transmitted bytes.
  */
int _write(int file, char *ptr, int len){
 800151c:	b580      	push	{r7, lr}
 800151e:	b084      	sub	sp, #16
 8001520:	af00      	add	r7, sp, #0
 8001522:	60f8      	str	r0, [r7, #12]
 8001524:	60b9      	str	r1, [r7, #8]
 8001526:	607a      	str	r2, [r7, #4]
	while(len--){
 8001528:	e006      	b.n	8001538 <_write+0x1c>
		putchar(*ptr++);
 800152a:	68bb      	ldr	r3, [r7, #8]
 800152c:	1c5a      	adds	r2, r3, #1
 800152e:	60ba      	str	r2, [r7, #8]
 8001530:	781b      	ldrb	r3, [r3, #0]
 8001532:	4618      	mov	r0, r3
 8001534:	f000 f80a 	bl	800154c <putchar>
	while(len--){
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	1e5a      	subs	r2, r3, #1
 800153c:	607a      	str	r2, [r7, #4]
 800153e:	2b00      	cmp	r3, #0
 8001540:	d1f3      	bne.n	800152a <_write+0xe>
	}
	return len;
 8001542:	687b      	ldr	r3, [r7, #4]
}
 8001544:	4618      	mov	r0, r3
 8001546:	3710      	adds	r7, #16
 8001548:	46bd      	mov	sp, r7
 800154a:	bd80      	pop	{r7, pc}

0800154c <putchar>:
/**
 *
 * @param ch		... Character to be transmitted.
 * @return	(int) 	... Returns the character.
 */
int	putchar (int ch){
 800154c:	b580      	push	{r7, lr}
 800154e:	b084      	sub	sp, #16
 8001550:	af00      	add	r7, sp, #0
 8001552:	6078      	str	r0, [r7, #4]
	char charTemp = (char) ch;
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	b2db      	uxtb	r3, r3
 8001558:	73fb      	strb	r3, [r7, #15]
	 * Either that, or both '\r' and '\n' need to be provided.
	 */
//	if (charTemp == '\n'){
//		putchar('\r');
//	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&charTemp, 1, -1);
 800155a:	f107 010f 	add.w	r1, r7, #15
 800155e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001562:	2201      	movs	r2, #1
 8001564:	4803      	ldr	r0, [pc, #12]	; (8001574 <putchar+0x28>)
 8001566:	f002 f989 	bl	800387c <HAL_UART_Transmit>
	return ch;
 800156a:	687b      	ldr	r3, [r7, #4]
}
 800156c:	4618      	mov	r0, r3
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	20000b1c 	.word	0x20000b1c

08001578 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800157e:	4b11      	ldr	r3, [pc, #68]	; (80015c4 <HAL_MspInit+0x4c>)
 8001580:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001582:	4a10      	ldr	r2, [pc, #64]	; (80015c4 <HAL_MspInit+0x4c>)
 8001584:	f043 0301 	orr.w	r3, r3, #1
 8001588:	6613      	str	r3, [r2, #96]	; 0x60
 800158a:	4b0e      	ldr	r3, [pc, #56]	; (80015c4 <HAL_MspInit+0x4c>)
 800158c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800158e:	f003 0301 	and.w	r3, r3, #1
 8001592:	607b      	str	r3, [r7, #4]
 8001594:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001596:	4b0b      	ldr	r3, [pc, #44]	; (80015c4 <HAL_MspInit+0x4c>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	4a0a      	ldr	r2, [pc, #40]	; (80015c4 <HAL_MspInit+0x4c>)
 800159c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015a0:	6593      	str	r3, [r2, #88]	; 0x58
 80015a2:	4b08      	ldr	r3, [pc, #32]	; (80015c4 <HAL_MspInit+0x4c>)
 80015a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015aa:	603b      	str	r3, [r7, #0]
 80015ac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80015ae:	2200      	movs	r2, #0
 80015b0:	210f      	movs	r1, #15
 80015b2:	f06f 0001 	mvn.w	r0, #1
 80015b6:	f000 fb11 	bl	8001bdc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40021000 	.word	0x40021000

080015c8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08e      	sub	sp, #56	; 0x38
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80015d6:	4b34      	ldr	r3, [pc, #208]	; (80016a8 <HAL_InitTick+0xe0>)
 80015d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015da:	4a33      	ldr	r2, [pc, #204]	; (80016a8 <HAL_InitTick+0xe0>)
 80015dc:	f043 0310 	orr.w	r3, r3, #16
 80015e0:	6593      	str	r3, [r2, #88]	; 0x58
 80015e2:	4b31      	ldr	r3, [pc, #196]	; (80016a8 <HAL_InitTick+0xe0>)
 80015e4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e6:	f003 0310 	and.w	r3, r3, #16
 80015ea:	60fb      	str	r3, [r7, #12]
 80015ec:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80015ee:	f107 0210 	add.w	r2, r7, #16
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4611      	mov	r1, r2
 80015f8:	4618      	mov	r0, r3
 80015fa:	f001 fae7 	bl	8002bcc <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80015fe:	6a3b      	ldr	r3, [r7, #32]
 8001600:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	2b00      	cmp	r3, #0
 8001606:	d103      	bne.n	8001610 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001608:	f001 fab4 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 800160c:	6378      	str	r0, [r7, #52]	; 0x34
 800160e:	e004      	b.n	800161a <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001610:	f001 fab0 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8001614:	4603      	mov	r3, r0
 8001616:	005b      	lsls	r3, r3, #1
 8001618:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800161a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800161c:	4a23      	ldr	r2, [pc, #140]	; (80016ac <HAL_InitTick+0xe4>)
 800161e:	fba2 2303 	umull	r2, r3, r2, r3
 8001622:	0c9b      	lsrs	r3, r3, #18
 8001624:	3b01      	subs	r3, #1
 8001626:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_InitTick+0xe8>)
 800162a:	4a22      	ldr	r2, [pc, #136]	; (80016b4 <HAL_InitTick+0xec>)
 800162c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800162e:	4b20      	ldr	r3, [pc, #128]	; (80016b0 <HAL_InitTick+0xe8>)
 8001630:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001634:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001636:	4a1e      	ldr	r2, [pc, #120]	; (80016b0 <HAL_InitTick+0xe8>)
 8001638:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800163a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 800163c:	4b1c      	ldr	r3, [pc, #112]	; (80016b0 <HAL_InitTick+0xe8>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001642:	4b1b      	ldr	r3, [pc, #108]	; (80016b0 <HAL_InitTick+0xe8>)
 8001644:	2200      	movs	r2, #0
 8001646:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001648:	4b19      	ldr	r3, [pc, #100]	; (80016b0 <HAL_InitTick+0xe8>)
 800164a:	2200      	movs	r2, #0
 800164c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 800164e:	4818      	ldr	r0, [pc, #96]	; (80016b0 <HAL_InitTick+0xe8>)
 8001650:	f001 fe46 	bl	80032e0 <HAL_TIM_Base_Init>
 8001654:	4603      	mov	r3, r0
 8001656:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 800165a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800165e:	2b00      	cmp	r3, #0
 8001660:	d11b      	bne.n	800169a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001662:	4813      	ldr	r0, [pc, #76]	; (80016b0 <HAL_InitTick+0xe8>)
 8001664:	f001 fe9e 	bl	80033a4 <HAL_TIM_Base_Start_IT>
 8001668:	4603      	mov	r3, r0
 800166a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 800166e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001672:	2b00      	cmp	r3, #0
 8001674:	d111      	bne.n	800169a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001676:	2036      	movs	r0, #54	; 0x36
 8001678:	f000 facc 	bl	8001c14 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b0f      	cmp	r3, #15
 8001680:	d808      	bhi.n	8001694 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001682:	2200      	movs	r2, #0
 8001684:	6879      	ldr	r1, [r7, #4]
 8001686:	2036      	movs	r0, #54	; 0x36
 8001688:	f000 faa8 	bl	8001bdc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800168c:	4a0a      	ldr	r2, [pc, #40]	; (80016b8 <HAL_InitTick+0xf0>)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6013      	str	r3, [r2, #0]
 8001692:	e002      	b.n	800169a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800169a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3738      	adds	r7, #56	; 0x38
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}
 80016a6:	bf00      	nop
 80016a8:	40021000 	.word	0x40021000
 80016ac:	431bde83 	.word	0x431bde83
 80016b0:	20000acc 	.word	0x20000acc
 80016b4:	40001000 	.word	0x40001000
 80016b8:	20000004 	.word	0x20000004

080016bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016bc:	b480      	push	{r7}
 80016be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016c0:	e7fe      	b.n	80016c0 <NMI_Handler+0x4>

080016c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016c2:	b480      	push	{r7}
 80016c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016c6:	e7fe      	b.n	80016c6 <HardFault_Handler+0x4>

080016c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016cc:	e7fe      	b.n	80016cc <MemManage_Handler+0x4>

080016ce <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ce:	b480      	push	{r7}
 80016d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016d2:	e7fe      	b.n	80016d2 <BusFault_Handler+0x4>

080016d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016d4:	b480      	push	{r7}
 80016d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016d8:	e7fe      	b.n	80016d8 <UsageFault_Handler+0x4>

080016da <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80016da:	b480      	push	{r7}
 80016dc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80016de:	bf00      	nop
 80016e0:	46bd      	mov	sp, r7
 80016e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016e6:	4770      	bx	lr

080016e8 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80016ec:	4802      	ldr	r0, [pc, #8]	; (80016f8 <TIM6_DAC_IRQHandler+0x10>)
 80016ee:	f001 fead 	bl	800344c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80016f2:	bf00      	nop
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20000acc 	.word	0x20000acc

080016fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80016fc:	b480      	push	{r7}
 80016fe:	af00      	add	r7, sp, #0
	return 1;
 8001700:	2301      	movs	r3, #1
}
 8001702:	4618      	mov	r0, r3
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr

0800170c <_kill>:

int _kill(int pid, int sig)
{
 800170c:	b580      	push	{r7, lr}
 800170e:	b082      	sub	sp, #8
 8001710:	af00      	add	r7, sp, #0
 8001712:	6078      	str	r0, [r7, #4]
 8001714:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001716:	f005 fc9f 	bl	8007058 <__errno>
 800171a:	4603      	mov	r3, r0
 800171c:	2216      	movs	r2, #22
 800171e:	601a      	str	r2, [r3, #0]
	return -1;
 8001720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}

0800172c <_exit>:

void _exit (int status)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001734:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001738:	6878      	ldr	r0, [r7, #4]
 800173a:	f7ff ffe7 	bl	800170c <_kill>
	while (1) {}		/* Make sure we hang here */
 800173e:	e7fe      	b.n	800173e <_exit+0x12>

08001740 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	60f8      	str	r0, [r7, #12]
 8001748:	60b9      	str	r1, [r7, #8]
 800174a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800174c:	2300      	movs	r3, #0
 800174e:	617b      	str	r3, [r7, #20]
 8001750:	e00a      	b.n	8001768 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001752:	f3af 8000 	nop.w
 8001756:	4601      	mov	r1, r0
 8001758:	68bb      	ldr	r3, [r7, #8]
 800175a:	1c5a      	adds	r2, r3, #1
 800175c:	60ba      	str	r2, [r7, #8]
 800175e:	b2ca      	uxtb	r2, r1
 8001760:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	3301      	adds	r3, #1
 8001766:	617b      	str	r3, [r7, #20]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	429a      	cmp	r2, r3
 800176e:	dbf0      	blt.n	8001752 <_read+0x12>
	}

return len;
 8001770:	687b      	ldr	r3, [r7, #4]
}
 8001772:	4618      	mov	r0, r3
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_close>:
	}
	return len;
}

int _close(int file)
{
 800177a:	b480      	push	{r7}
 800177c:	b083      	sub	sp, #12
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
	return -1;
 8001782:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8001786:	4618      	mov	r0, r3
 8001788:	370c      	adds	r7, #12
 800178a:	46bd      	mov	sp, r7
 800178c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001790:	4770      	bx	lr

08001792 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001792:	b480      	push	{r7}
 8001794:	b083      	sub	sp, #12
 8001796:	af00      	add	r7, sp, #0
 8001798:	6078      	str	r0, [r7, #4]
 800179a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80017a2:	605a      	str	r2, [r3, #4]
	return 0;
 80017a4:	2300      	movs	r3, #0
}
 80017a6:	4618      	mov	r0, r3
 80017a8:	370c      	adds	r7, #12
 80017aa:	46bd      	mov	sp, r7
 80017ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b0:	4770      	bx	lr

080017b2 <_isatty>:

int _isatty(int file)
{
 80017b2:	b480      	push	{r7}
 80017b4:	b083      	sub	sp, #12
 80017b6:	af00      	add	r7, sp, #0
 80017b8:	6078      	str	r0, [r7, #4]
	return 1;
 80017ba:	2301      	movs	r3, #1
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80017c8:	b480      	push	{r7}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	60b9      	str	r1, [r7, #8]
 80017d2:	607a      	str	r2, [r7, #4]
	return 0;
 80017d4:	2300      	movs	r3, #0
}
 80017d6:	4618      	mov	r0, r3
 80017d8:	3714      	adds	r7, #20
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
	...

080017e4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80017e4:	b580      	push	{r7, lr}
 80017e6:	b086      	sub	sp, #24
 80017e8:	af00      	add	r7, sp, #0
 80017ea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017ec:	4a14      	ldr	r2, [pc, #80]	; (8001840 <_sbrk+0x5c>)
 80017ee:	4b15      	ldr	r3, [pc, #84]	; (8001844 <_sbrk+0x60>)
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017f8:	4b13      	ldr	r3, [pc, #76]	; (8001848 <_sbrk+0x64>)
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d102      	bne.n	8001806 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001800:	4b11      	ldr	r3, [pc, #68]	; (8001848 <_sbrk+0x64>)
 8001802:	4a12      	ldr	r2, [pc, #72]	; (800184c <_sbrk+0x68>)
 8001804:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001806:	4b10      	ldr	r3, [pc, #64]	; (8001848 <_sbrk+0x64>)
 8001808:	681a      	ldr	r2, [r3, #0]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	4413      	add	r3, r2
 800180e:	693a      	ldr	r2, [r7, #16]
 8001810:	429a      	cmp	r2, r3
 8001812:	d207      	bcs.n	8001824 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001814:	f005 fc20 	bl	8007058 <__errno>
 8001818:	4603      	mov	r3, r0
 800181a:	220c      	movs	r2, #12
 800181c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800181e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001822:	e009      	b.n	8001838 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001824:	4b08      	ldr	r3, [pc, #32]	; (8001848 <_sbrk+0x64>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800182a:	4b07      	ldr	r3, [pc, #28]	; (8001848 <_sbrk+0x64>)
 800182c:	681a      	ldr	r2, [r3, #0]
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	4413      	add	r3, r2
 8001832:	4a05      	ldr	r2, [pc, #20]	; (8001848 <_sbrk+0x64>)
 8001834:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001836:	68fb      	ldr	r3, [r7, #12]
}
 8001838:	4618      	mov	r0, r3
 800183a:	3718      	adds	r7, #24
 800183c:	46bd      	mov	sp, r7
 800183e:	bd80      	pop	{r7, pc}
 8001840:	20010000 	.word	0x20010000
 8001844:	00000400 	.word	0x00000400
 8001848:	20000b18 	.word	0x20000b18
 800184c:	20002280 	.word	0x20002280

08001850 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001854:	4b06      	ldr	r3, [pc, #24]	; (8001870 <SystemInit+0x20>)
 8001856:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <SystemInit+0x20>)
 800185c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001860:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8001864:	bf00      	nop
 8001866:	46bd      	mov	sp, r7
 8001868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186c:	4770      	bx	lr
 800186e:	bf00      	nop
 8001870:	e000ed00 	.word	0xe000ed00

08001874 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001878:	4b14      	ldr	r3, [pc, #80]	; (80018cc <MX_USART2_UART_Init+0x58>)
 800187a:	4a15      	ldr	r2, [pc, #84]	; (80018d0 <MX_USART2_UART_Init+0x5c>)
 800187c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800187e:	4b13      	ldr	r3, [pc, #76]	; (80018cc <MX_USART2_UART_Init+0x58>)
 8001880:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001884:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001886:	4b11      	ldr	r3, [pc, #68]	; (80018cc <MX_USART2_UART_Init+0x58>)
 8001888:	2200      	movs	r2, #0
 800188a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800188c:	4b0f      	ldr	r3, [pc, #60]	; (80018cc <MX_USART2_UART_Init+0x58>)
 800188e:	2200      	movs	r2, #0
 8001890:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001892:	4b0e      	ldr	r3, [pc, #56]	; (80018cc <MX_USART2_UART_Init+0x58>)
 8001894:	2200      	movs	r2, #0
 8001896:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001898:	4b0c      	ldr	r3, [pc, #48]	; (80018cc <MX_USART2_UART_Init+0x58>)
 800189a:	220c      	movs	r2, #12
 800189c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800189e:	4b0b      	ldr	r3, [pc, #44]	; (80018cc <MX_USART2_UART_Init+0x58>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018a4:	4b09      	ldr	r3, [pc, #36]	; (80018cc <MX_USART2_UART_Init+0x58>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80018aa:	4b08      	ldr	r3, [pc, #32]	; (80018cc <MX_USART2_UART_Init+0x58>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80018b0:	4b06      	ldr	r3, [pc, #24]	; (80018cc <MX_USART2_UART_Init+0x58>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018b6:	4805      	ldr	r0, [pc, #20]	; (80018cc <MX_USART2_UART_Init+0x58>)
 80018b8:	f001 ff92 	bl	80037e0 <HAL_UART_Init>
 80018bc:	4603      	mov	r3, r0
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d001      	beq.n	80018c6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80018c2:	f7ff fc15 	bl	80010f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80018c6:	bf00      	nop
 80018c8:	bd80      	pop	{r7, pc}
 80018ca:	bf00      	nop
 80018cc:	20000b1c 	.word	0x20000b1c
 80018d0:	40004400 	.word	0x40004400

080018d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b09e      	sub	sp, #120	; 0x78
 80018d8:	af00      	add	r7, sp, #0
 80018da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018dc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80018e0:	2200      	movs	r2, #0
 80018e2:	601a      	str	r2, [r3, #0]
 80018e4:	605a      	str	r2, [r3, #4]
 80018e6:	609a      	str	r2, [r3, #8]
 80018e8:	60da      	str	r2, [r3, #12]
 80018ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80018ec:	f107 0310 	add.w	r3, r7, #16
 80018f0:	2254      	movs	r2, #84	; 0x54
 80018f2:	2100      	movs	r1, #0
 80018f4:	4618      	mov	r0, r3
 80018f6:	f005 fce0 	bl	80072ba <memset>
  if(uartHandle->Instance==USART2)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	4a28      	ldr	r2, [pc, #160]	; (80019a0 <HAL_UART_MspInit+0xcc>)
 8001900:	4293      	cmp	r3, r2
 8001902:	d148      	bne.n	8001996 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001904:	2302      	movs	r3, #2
 8001906:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001908:	2300      	movs	r3, #0
 800190a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800190c:	f107 0310 	add.w	r3, r7, #16
 8001910:	4618      	mov	r0, r3
 8001912:	f001 f9ed 	bl	8002cf0 <HAL_RCCEx_PeriphCLKConfig>
 8001916:	4603      	mov	r3, r0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d001      	beq.n	8001920 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800191c:	f7ff fbe8 	bl	80010f0 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001920:	4b20      	ldr	r3, [pc, #128]	; (80019a4 <HAL_UART_MspInit+0xd0>)
 8001922:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001924:	4a1f      	ldr	r2, [pc, #124]	; (80019a4 <HAL_UART_MspInit+0xd0>)
 8001926:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800192a:	6593      	str	r3, [r2, #88]	; 0x58
 800192c:	4b1d      	ldr	r3, [pc, #116]	; (80019a4 <HAL_UART_MspInit+0xd0>)
 800192e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001930:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001934:	60fb      	str	r3, [r7, #12]
 8001936:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001938:	4b1a      	ldr	r3, [pc, #104]	; (80019a4 <HAL_UART_MspInit+0xd0>)
 800193a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800193c:	4a19      	ldr	r2, [pc, #100]	; (80019a4 <HAL_UART_MspInit+0xd0>)
 800193e:	f043 0301 	orr.w	r3, r3, #1
 8001942:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001944:	4b17      	ldr	r3, [pc, #92]	; (80019a4 <HAL_UART_MspInit+0xd0>)
 8001946:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001948:	f003 0301 	and.w	r3, r3, #1
 800194c:	60bb      	str	r3, [r7, #8]
 800194e:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8001950:	2304      	movs	r3, #4
 8001952:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001954:	2302      	movs	r3, #2
 8001956:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001958:	2300      	movs	r3, #0
 800195a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800195c:	2303      	movs	r3, #3
 800195e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001960:	2307      	movs	r3, #7
 8001962:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001964:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001968:	4619      	mov	r1, r3
 800196a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800196e:	f000 f95f 	bl	8001c30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001972:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001976:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001978:	2302      	movs	r3, #2
 800197a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800197c:	2300      	movs	r3, #0
 800197e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	2303      	movs	r3, #3
 8001982:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001984:	2303      	movs	r3, #3
 8001986:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001988:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800198c:	4619      	mov	r1, r3
 800198e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001992:	f000 f94d 	bl	8001c30 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001996:	bf00      	nop
 8001998:	3778      	adds	r7, #120	; 0x78
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40004400 	.word	0x40004400
 80019a4:	40021000 	.word	0x40021000

080019a8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80019a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80019e0 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80019ac:	f7ff ff50 	bl	8001850 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80019b0:	480c      	ldr	r0, [pc, #48]	; (80019e4 <LoopForever+0x6>)
  ldr r1, =_edata
 80019b2:	490d      	ldr	r1, [pc, #52]	; (80019e8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80019b4:	4a0d      	ldr	r2, [pc, #52]	; (80019ec <LoopForever+0xe>)
  movs r3, #0
 80019b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80019b8:	e002      	b.n	80019c0 <LoopCopyDataInit>

080019ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80019ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80019bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80019be:	3304      	adds	r3, #4

080019c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80019c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80019c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019c4:	d3f9      	bcc.n	80019ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019c6:	4a0a      	ldr	r2, [pc, #40]	; (80019f0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80019c8:	4c0a      	ldr	r4, [pc, #40]	; (80019f4 <LoopForever+0x16>)
  movs r3, #0
 80019ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019cc:	e001      	b.n	80019d2 <LoopFillZerobss>

080019ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019d0:	3204      	adds	r2, #4

080019d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019d4:	d3fb      	bcc.n	80019ce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019d6:	f005 fc3b 	bl	8007250 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80019da:	f7ff fb03 	bl	8000fe4 <main>

080019de <LoopForever>:

LoopForever:
    b LoopForever
 80019de:	e7fe      	b.n	80019de <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80019e0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80019e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019e8:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80019ec:	0800a3e4 	.word	0x0800a3e4
  ldr r2, =_sbss
 80019f0:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80019f4:	2000227c 	.word	0x2000227c

080019f8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80019f8:	e7fe      	b.n	80019f8 <ADC1_IRQHandler>

080019fa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019fa:	b580      	push	{r7, lr}
 80019fc:	b082      	sub	sp, #8
 80019fe:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001a00:	2300      	movs	r3, #0
 8001a02:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001a04:	2003      	movs	r0, #3
 8001a06:	f000 f8de 	bl	8001bc6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001a0a:	200f      	movs	r0, #15
 8001a0c:	f7ff fddc 	bl	80015c8 <HAL_InitTick>
 8001a10:	4603      	mov	r3, r0
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d002      	beq.n	8001a1c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001a16:	2301      	movs	r3, #1
 8001a18:	71fb      	strb	r3, [r7, #7]
 8001a1a:	e001      	b.n	8001a20 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001a1c:	f7ff fdac 	bl	8001578 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001a20:	79fb      	ldrb	r3, [r7, #7]
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3708      	adds	r7, #8
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bd80      	pop	{r7, pc}
	...

08001a2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001a30:	4b06      	ldr	r3, [pc, #24]	; (8001a4c <HAL_IncTick+0x20>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	4b06      	ldr	r3, [pc, #24]	; (8001a50 <HAL_IncTick+0x24>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	4a04      	ldr	r2, [pc, #16]	; (8001a50 <HAL_IncTick+0x24>)
 8001a3e:	6013      	str	r3, [r2, #0]
}
 8001a40:	bf00      	nop
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	20000008 	.word	0x20000008
 8001a50:	20000ba0 	.word	0x20000ba0

08001a54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0
  return uwTick;
 8001a58:	4b03      	ldr	r3, [pc, #12]	; (8001a68 <HAL_GetTick+0x14>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
}
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	46bd      	mov	sp, r7
 8001a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a64:	4770      	bx	lr
 8001a66:	bf00      	nop
 8001a68:	20000ba0 	.word	0x20000ba0

08001a6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b480      	push	{r7}
 8001a6e:	b085      	sub	sp, #20
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	f003 0307 	and.w	r3, r3, #7
 8001a7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a7c:	4b0c      	ldr	r3, [pc, #48]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a82:	68ba      	ldr	r2, [r7, #8]
 8001a84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a88:	4013      	ands	r3, r2
 8001a8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a8c:	68fb      	ldr	r3, [r7, #12]
 8001a8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a90:	68bb      	ldr	r3, [r7, #8]
 8001a92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a9e:	4a04      	ldr	r2, [pc, #16]	; (8001ab0 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa0:	68bb      	ldr	r3, [r7, #8]
 8001aa2:	60d3      	str	r3, [r2, #12]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	e000ed00 	.word	0xe000ed00

08001ab4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ab8:	4b04      	ldr	r3, [pc, #16]	; (8001acc <__NVIC_GetPriorityGrouping+0x18>)
 8001aba:	68db      	ldr	r3, [r3, #12]
 8001abc:	0a1b      	lsrs	r3, r3, #8
 8001abe:	f003 0307 	and.w	r3, r3, #7
}
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	46bd      	mov	sp, r7
 8001ac6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aca:	4770      	bx	lr
 8001acc:	e000ed00 	.word	0xe000ed00

08001ad0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	db0b      	blt.n	8001afa <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001ae2:	79fb      	ldrb	r3, [r7, #7]
 8001ae4:	f003 021f 	and.w	r2, r3, #31
 8001ae8:	4907      	ldr	r1, [pc, #28]	; (8001b08 <__NVIC_EnableIRQ+0x38>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	095b      	lsrs	r3, r3, #5
 8001af0:	2001      	movs	r0, #1
 8001af2:	fa00 f202 	lsl.w	r2, r0, r2
 8001af6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001afa:	bf00      	nop
 8001afc:	370c      	adds	r7, #12
 8001afe:	46bd      	mov	sp, r7
 8001b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b04:	4770      	bx	lr
 8001b06:	bf00      	nop
 8001b08:	e000e100 	.word	0xe000e100

08001b0c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b0c:	b480      	push	{r7}
 8001b0e:	b083      	sub	sp, #12
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	4603      	mov	r3, r0
 8001b14:	6039      	str	r1, [r7, #0]
 8001b16:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b18:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	db0a      	blt.n	8001b36 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b20:	683b      	ldr	r3, [r7, #0]
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	490c      	ldr	r1, [pc, #48]	; (8001b58 <__NVIC_SetPriority+0x4c>)
 8001b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b2a:	0112      	lsls	r2, r2, #4
 8001b2c:	b2d2      	uxtb	r2, r2
 8001b2e:	440b      	add	r3, r1
 8001b30:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b34:	e00a      	b.n	8001b4c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	b2da      	uxtb	r2, r3
 8001b3a:	4908      	ldr	r1, [pc, #32]	; (8001b5c <__NVIC_SetPriority+0x50>)
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	3b04      	subs	r3, #4
 8001b44:	0112      	lsls	r2, r2, #4
 8001b46:	b2d2      	uxtb	r2, r2
 8001b48:	440b      	add	r3, r1
 8001b4a:	761a      	strb	r2, [r3, #24]
}
 8001b4c:	bf00      	nop
 8001b4e:	370c      	adds	r7, #12
 8001b50:	46bd      	mov	sp, r7
 8001b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b56:	4770      	bx	lr
 8001b58:	e000e100 	.word	0xe000e100
 8001b5c:	e000ed00 	.word	0xe000ed00

08001b60 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b60:	b480      	push	{r7}
 8001b62:	b089      	sub	sp, #36	; 0x24
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	60f8      	str	r0, [r7, #12]
 8001b68:	60b9      	str	r1, [r7, #8]
 8001b6a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f003 0307 	and.w	r3, r3, #7
 8001b72:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b74:	69fb      	ldr	r3, [r7, #28]
 8001b76:	f1c3 0307 	rsb	r3, r3, #7
 8001b7a:	2b04      	cmp	r3, #4
 8001b7c:	bf28      	it	cs
 8001b7e:	2304      	movcs	r3, #4
 8001b80:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b82:	69fb      	ldr	r3, [r7, #28]
 8001b84:	3304      	adds	r3, #4
 8001b86:	2b06      	cmp	r3, #6
 8001b88:	d902      	bls.n	8001b90 <NVIC_EncodePriority+0x30>
 8001b8a:	69fb      	ldr	r3, [r7, #28]
 8001b8c:	3b03      	subs	r3, #3
 8001b8e:	e000      	b.n	8001b92 <NVIC_EncodePriority+0x32>
 8001b90:	2300      	movs	r3, #0
 8001b92:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001b98:	69bb      	ldr	r3, [r7, #24]
 8001b9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b9e:	43da      	mvns	r2, r3
 8001ba0:	68bb      	ldr	r3, [r7, #8]
 8001ba2:	401a      	ands	r2, r3
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ba8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001bac:	697b      	ldr	r3, [r7, #20]
 8001bae:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb2:	43d9      	mvns	r1, r3
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	4313      	orrs	r3, r2
         );
}
 8001bba:	4618      	mov	r0, r3
 8001bbc:	3724      	adds	r7, #36	; 0x24
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc4:	4770      	bx	lr

08001bc6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bc6:	b580      	push	{r7, lr}
 8001bc8:	b082      	sub	sp, #8
 8001bca:	af00      	add	r7, sp, #0
 8001bcc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bce:	6878      	ldr	r0, [r7, #4]
 8001bd0:	f7ff ff4c 	bl	8001a6c <__NVIC_SetPriorityGrouping>
}
 8001bd4:	bf00      	nop
 8001bd6:	3708      	adds	r7, #8
 8001bd8:	46bd      	mov	sp, r7
 8001bda:	bd80      	pop	{r7, pc}

08001bdc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bdc:	b580      	push	{r7, lr}
 8001bde:	b086      	sub	sp, #24
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	4603      	mov	r3, r0
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
 8001be8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001bea:	2300      	movs	r3, #0
 8001bec:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001bee:	f7ff ff61 	bl	8001ab4 <__NVIC_GetPriorityGrouping>
 8001bf2:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bf4:	687a      	ldr	r2, [r7, #4]
 8001bf6:	68b9      	ldr	r1, [r7, #8]
 8001bf8:	6978      	ldr	r0, [r7, #20]
 8001bfa:	f7ff ffb1 	bl	8001b60 <NVIC_EncodePriority>
 8001bfe:	4602      	mov	r2, r0
 8001c00:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c04:	4611      	mov	r1, r2
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7ff ff80 	bl	8001b0c <__NVIC_SetPriority>
}
 8001c0c:	bf00      	nop
 8001c0e:	3718      	adds	r7, #24
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b082      	sub	sp, #8
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff ff54 	bl	8001ad0 <__NVIC_EnableIRQ>
}
 8001c28:	bf00      	nop
 8001c2a:	3708      	adds	r7, #8
 8001c2c:	46bd      	mov	sp, r7
 8001c2e:	bd80      	pop	{r7, pc}

08001c30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b087      	sub	sp, #28
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
 8001c38:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c3e:	e148      	b.n	8001ed2 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	681a      	ldr	r2, [r3, #0]
 8001c44:	2101      	movs	r1, #1
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	fa01 f303 	lsl.w	r3, r1, r3
 8001c4c:	4013      	ands	r3, r2
 8001c4e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001c50:	68fb      	ldr	r3, [r7, #12]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 813a 	beq.w	8001ecc <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	2b01      	cmp	r3, #1
 8001c62:	d005      	beq.n	8001c70 <HAL_GPIO_Init+0x40>
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	685b      	ldr	r3, [r3, #4]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	2b02      	cmp	r3, #2
 8001c6e:	d130      	bne.n	8001cd2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001c76:	697b      	ldr	r3, [r7, #20]
 8001c78:	005b      	lsls	r3, r3, #1
 8001c7a:	2203      	movs	r2, #3
 8001c7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c80:	43db      	mvns	r3, r3
 8001c82:	693a      	ldr	r2, [r7, #16]
 8001c84:	4013      	ands	r3, r2
 8001c86:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	697b      	ldr	r3, [r7, #20]
 8001c8e:	005b      	lsls	r3, r3, #1
 8001c90:	fa02 f303 	lsl.w	r3, r2, r3
 8001c94:	693a      	ldr	r2, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	693a      	ldr	r2, [r7, #16]
 8001c9e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	685b      	ldr	r3, [r3, #4]
 8001ca4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001ca6:	2201      	movs	r2, #1
 8001ca8:	697b      	ldr	r3, [r7, #20]
 8001caa:	fa02 f303 	lsl.w	r3, r2, r3
 8001cae:	43db      	mvns	r3, r3
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	4013      	ands	r3, r2
 8001cb4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	091b      	lsrs	r3, r3, #4
 8001cbc:	f003 0201 	and.w	r2, r3, #1
 8001cc0:	697b      	ldr	r3, [r7, #20]
 8001cc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc6:	693a      	ldr	r2, [r7, #16]
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	693a      	ldr	r2, [r7, #16]
 8001cd0:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	685b      	ldr	r3, [r3, #4]
 8001cd6:	f003 0303 	and.w	r3, r3, #3
 8001cda:	2b03      	cmp	r3, #3
 8001cdc:	d017      	beq.n	8001d0e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	68db      	ldr	r3, [r3, #12]
 8001ce2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	005b      	lsls	r3, r3, #1
 8001ce8:	2203      	movs	r2, #3
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43db      	mvns	r3, r3
 8001cf0:	693a      	ldr	r2, [r7, #16]
 8001cf2:	4013      	ands	r3, r2
 8001cf4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	689a      	ldr	r2, [r3, #8]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001d02:	693a      	ldr	r2, [r7, #16]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	693a      	ldr	r2, [r7, #16]
 8001d0c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	685b      	ldr	r3, [r3, #4]
 8001d12:	f003 0303 	and.w	r3, r3, #3
 8001d16:	2b02      	cmp	r3, #2
 8001d18:	d123      	bne.n	8001d62 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001d1a:	697b      	ldr	r3, [r7, #20]
 8001d1c:	08da      	lsrs	r2, r3, #3
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	3208      	adds	r2, #8
 8001d22:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d26:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	f003 0307 	and.w	r3, r3, #7
 8001d2e:	009b      	lsls	r3, r3, #2
 8001d30:	220f      	movs	r2, #15
 8001d32:	fa02 f303 	lsl.w	r3, r2, r3
 8001d36:	43db      	mvns	r3, r3
 8001d38:	693a      	ldr	r2, [r7, #16]
 8001d3a:	4013      	ands	r3, r2
 8001d3c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	691a      	ldr	r2, [r3, #16]
 8001d42:	697b      	ldr	r3, [r7, #20]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	009b      	lsls	r3, r3, #2
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	693a      	ldr	r2, [r7, #16]
 8001d50:	4313      	orrs	r3, r2
 8001d52:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	08da      	lsrs	r2, r3, #3
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	3208      	adds	r2, #8
 8001d5c:	6939      	ldr	r1, [r7, #16]
 8001d5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001d68:	697b      	ldr	r3, [r7, #20]
 8001d6a:	005b      	lsls	r3, r3, #1
 8001d6c:	2203      	movs	r2, #3
 8001d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d72:	43db      	mvns	r3, r3
 8001d74:	693a      	ldr	r2, [r7, #16]
 8001d76:	4013      	ands	r3, r2
 8001d78:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	685b      	ldr	r3, [r3, #4]
 8001d7e:	f003 0203 	and.w	r2, r3, #3
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	005b      	lsls	r3, r3, #1
 8001d86:	fa02 f303 	lsl.w	r3, r2, r3
 8001d8a:	693a      	ldr	r2, [r7, #16]
 8001d8c:	4313      	orrs	r3, r2
 8001d8e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	693a      	ldr	r2, [r7, #16]
 8001d94:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001d96:	683b      	ldr	r3, [r7, #0]
 8001d98:	685b      	ldr	r3, [r3, #4]
 8001d9a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	f000 8094 	beq.w	8001ecc <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001da4:	4b52      	ldr	r3, [pc, #328]	; (8001ef0 <HAL_GPIO_Init+0x2c0>)
 8001da6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001da8:	4a51      	ldr	r2, [pc, #324]	; (8001ef0 <HAL_GPIO_Init+0x2c0>)
 8001daa:	f043 0301 	orr.w	r3, r3, #1
 8001dae:	6613      	str	r3, [r2, #96]	; 0x60
 8001db0:	4b4f      	ldr	r3, [pc, #316]	; (8001ef0 <HAL_GPIO_Init+0x2c0>)
 8001db2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	60bb      	str	r3, [r7, #8]
 8001dba:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001dbc:	4a4d      	ldr	r2, [pc, #308]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	089b      	lsrs	r3, r3, #2
 8001dc2:	3302      	adds	r3, #2
 8001dc4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001dc8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001dca:	697b      	ldr	r3, [r7, #20]
 8001dcc:	f003 0303 	and.w	r3, r3, #3
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	220f      	movs	r2, #15
 8001dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd8:	43db      	mvns	r3, r3
 8001dda:	693a      	ldr	r2, [r7, #16]
 8001ddc:	4013      	ands	r3, r2
 8001dde:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001de6:	d00d      	beq.n	8001e04 <HAL_GPIO_Init+0x1d4>
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	4a43      	ldr	r2, [pc, #268]	; (8001ef8 <HAL_GPIO_Init+0x2c8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d007      	beq.n	8001e00 <HAL_GPIO_Init+0x1d0>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	4a42      	ldr	r2, [pc, #264]	; (8001efc <HAL_GPIO_Init+0x2cc>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_GPIO_Init+0x1cc>
 8001df8:	2302      	movs	r3, #2
 8001dfa:	e004      	b.n	8001e06 <HAL_GPIO_Init+0x1d6>
 8001dfc:	2307      	movs	r3, #7
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0x1d6>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <HAL_GPIO_Init+0x1d6>
 8001e04:	2300      	movs	r3, #0
 8001e06:	697a      	ldr	r2, [r7, #20]
 8001e08:	f002 0203 	and.w	r2, r2, #3
 8001e0c:	0092      	lsls	r2, r2, #2
 8001e0e:	4093      	lsls	r3, r2
 8001e10:	693a      	ldr	r2, [r7, #16]
 8001e12:	4313      	orrs	r3, r2
 8001e14:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001e16:	4937      	ldr	r1, [pc, #220]	; (8001ef4 <HAL_GPIO_Init+0x2c4>)
 8001e18:	697b      	ldr	r3, [r7, #20]
 8001e1a:	089b      	lsrs	r3, r3, #2
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	693a      	ldr	r2, [r7, #16]
 8001e20:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001e24:	4b36      	ldr	r3, [pc, #216]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	693a      	ldr	r2, [r7, #16]
 8001e30:	4013      	ands	r3, r2
 8001e32:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d003      	beq.n	8001e48 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001e40:	693a      	ldr	r2, [r7, #16]
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	4313      	orrs	r3, r2
 8001e46:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001e48:	4a2d      	ldr	r2, [pc, #180]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e4a:	693b      	ldr	r3, [r7, #16]
 8001e4c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001e4e:	4b2c      	ldr	r3, [pc, #176]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e50:	68db      	ldr	r3, [r3, #12]
 8001e52:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	43db      	mvns	r3, r3
 8001e58:	693a      	ldr	r2, [r7, #16]
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001e5e:	683b      	ldr	r3, [r7, #0]
 8001e60:	685b      	ldr	r3, [r3, #4]
 8001e62:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d003      	beq.n	8001e72 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001e6a:	693a      	ldr	r2, [r7, #16]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	4313      	orrs	r3, r2
 8001e70:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001e72:	4a23      	ldr	r2, [pc, #140]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001e78:	4b21      	ldr	r3, [pc, #132]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001e7e:	68fb      	ldr	r3, [r7, #12]
 8001e80:	43db      	mvns	r3, r3
 8001e82:	693a      	ldr	r2, [r7, #16]
 8001e84:	4013      	ands	r3, r2
 8001e86:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001e94:	693a      	ldr	r2, [r7, #16]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	4313      	orrs	r3, r2
 8001e9a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001e9c:	4a18      	ldr	r2, [pc, #96]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001e9e:	693b      	ldr	r3, [r7, #16]
 8001ea0:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001ea2:	4b17      	ldr	r3, [pc, #92]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	693a      	ldr	r2, [r7, #16]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001eb2:	683b      	ldr	r3, [r7, #0]
 8001eb4:	685b      	ldr	r3, [r3, #4]
 8001eb6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d003      	beq.n	8001ec6 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001ebe:	693a      	ldr	r2, [r7, #16]
 8001ec0:	68fb      	ldr	r3, [r7, #12]
 8001ec2:	4313      	orrs	r3, r2
 8001ec4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ec6:	4a0e      	ldr	r2, [pc, #56]	; (8001f00 <HAL_GPIO_Init+0x2d0>)
 8001ec8:	693b      	ldr	r3, [r7, #16]
 8001eca:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	3301      	adds	r3, #1
 8001ed0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	697b      	ldr	r3, [r7, #20]
 8001ed8:	fa22 f303 	lsr.w	r3, r2, r3
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	f47f aeaf 	bne.w	8001c40 <HAL_GPIO_Init+0x10>
  }
}
 8001ee2:	bf00      	nop
 8001ee4:	bf00      	nop
 8001ee6:	371c      	adds	r7, #28
 8001ee8:	46bd      	mov	sp, r7
 8001eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eee:	4770      	bx	lr
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40010000 	.word	0x40010000
 8001ef8:	48000400 	.word	0x48000400
 8001efc:	48000800 	.word	0x48000800
 8001f00:	40010400 	.word	0x40010400

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001f20:	e002      	b.n	8001f28 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001f28:	bf00      	nop
 8001f2a:	370c      	adds	r7, #12
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f32:	4770      	bx	lr

08001f34 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001f34:	b480      	push	{r7}
 8001f36:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f38:	4b05      	ldr	r3, [pc, #20]	; (8001f50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a04      	ldr	r2, [pc, #16]	; (8001f50 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001f3e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f42:	6013      	str	r3, [r2, #0]
}
 8001f44:	bf00      	nop
 8001f46:	46bd      	mov	sp, r7
 8001f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f4c:	4770      	bx	lr
 8001f4e:	bf00      	nop
 8001f50:	40007000 	.word	0x40007000

08001f54 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001f54:	b480      	push	{r7}
 8001f56:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001f58:	4b04      	ldr	r3, [pc, #16]	; (8001f6c <HAL_PWREx_GetVoltageRange+0x18>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	46bd      	mov	sp, r7
 8001f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f68:	4770      	bx	lr
 8001f6a:	bf00      	nop
 8001f6c:	40007000 	.word	0x40007000

08001f70 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001f70:	b480      	push	{r7}
 8001f72:	b085      	sub	sp, #20
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f7e:	d130      	bne.n	8001fe2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001f80:	4b23      	ldr	r3, [pc, #140]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001f88:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f8c:	d038      	beq.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001f8e:	4b20      	ldr	r3, [pc, #128]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001f96:	4a1e      	ldr	r2, [pc, #120]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001f98:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001f9c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001f9e:	4b1d      	ldr	r3, [pc, #116]	; (8002014 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	2232      	movs	r2, #50	; 0x32
 8001fa4:	fb02 f303 	mul.w	r3, r2, r3
 8001fa8:	4a1b      	ldr	r2, [pc, #108]	; (8002018 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9b      	lsrs	r3, r3, #18
 8001fb0:	3301      	adds	r3, #1
 8001fb2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fb4:	e002      	b.n	8001fbc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	3b01      	subs	r3, #1
 8001fba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001fbc:	4b14      	ldr	r3, [pc, #80]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fbe:	695b      	ldr	r3, [r3, #20]
 8001fc0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fc4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fc8:	d102      	bne.n	8001fd0 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d1f2      	bne.n	8001fb6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001fd0:	4b0f      	ldr	r3, [pc, #60]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fd2:	695b      	ldr	r3, [r3, #20]
 8001fd4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fd8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fdc:	d110      	bne.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	e00f      	b.n	8002002 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001fe2:	4b0b      	ldr	r3, [pc, #44]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001fea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fee:	d007      	beq.n	8002000 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001ff0:	4b07      	ldr	r3, [pc, #28]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001ff8:	4a05      	ldr	r2, [pc, #20]	; (8002010 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001ffa:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001ffe:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8002000:	2300      	movs	r3, #0
}
 8002002:	4618      	mov	r0, r3
 8002004:	3714      	adds	r7, #20
 8002006:	46bd      	mov	sp, r7
 8002008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800200c:	4770      	bx	lr
 800200e:	bf00      	nop
 8002010:	40007000 	.word	0x40007000
 8002014:	20000000 	.word	0x20000000
 8002018:	431bde83 	.word	0x431bde83

0800201c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b088      	sub	sp, #32
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d102      	bne.n	8002030 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	f000 bc02 	b.w	8002834 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002030:	4b96      	ldr	r3, [pc, #600]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002032:	689b      	ldr	r3, [r3, #8]
 8002034:	f003 030c 	and.w	r3, r3, #12
 8002038:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800203a:	4b94      	ldr	r3, [pc, #592]	; (800228c <HAL_RCC_OscConfig+0x270>)
 800203c:	68db      	ldr	r3, [r3, #12]
 800203e:	f003 0303 	and.w	r3, r3, #3
 8002042:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	f003 0310 	and.w	r3, r3, #16
 800204c:	2b00      	cmp	r3, #0
 800204e:	f000 80e4 	beq.w	800221a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002052:	69bb      	ldr	r3, [r7, #24]
 8002054:	2b00      	cmp	r3, #0
 8002056:	d007      	beq.n	8002068 <HAL_RCC_OscConfig+0x4c>
 8002058:	69bb      	ldr	r3, [r7, #24]
 800205a:	2b0c      	cmp	r3, #12
 800205c:	f040 808b 	bne.w	8002176 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002060:	697b      	ldr	r3, [r7, #20]
 8002062:	2b01      	cmp	r3, #1
 8002064:	f040 8087 	bne.w	8002176 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002068:	4b88      	ldr	r3, [pc, #544]	; (800228c <HAL_RCC_OscConfig+0x270>)
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f003 0302 	and.w	r3, r3, #2
 8002070:	2b00      	cmp	r3, #0
 8002072:	d005      	beq.n	8002080 <HAL_RCC_OscConfig+0x64>
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	2b00      	cmp	r3, #0
 800207a:	d101      	bne.n	8002080 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 800207c:	2301      	movs	r3, #1
 800207e:	e3d9      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6a1a      	ldr	r2, [r3, #32]
 8002084:	4b81      	ldr	r3, [pc, #516]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d004      	beq.n	800209a <HAL_RCC_OscConfig+0x7e>
 8002090:	4b7e      	ldr	r3, [pc, #504]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002098:	e005      	b.n	80020a6 <HAL_RCC_OscConfig+0x8a>
 800209a:	4b7c      	ldr	r3, [pc, #496]	; (800228c <HAL_RCC_OscConfig+0x270>)
 800209c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80020a0:	091b      	lsrs	r3, r3, #4
 80020a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020a6:	4293      	cmp	r3, r2
 80020a8:	d223      	bcs.n	80020f2 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	6a1b      	ldr	r3, [r3, #32]
 80020ae:	4618      	mov	r0, r3
 80020b0:	f000 fdbe 	bl	8002c30 <RCC_SetFlashLatencyFromMSIRange>
 80020b4:	4603      	mov	r3, r0
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d001      	beq.n	80020be <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	e3ba      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020be:	4b73      	ldr	r3, [pc, #460]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a72      	ldr	r2, [pc, #456]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80020c4:	f043 0308 	orr.w	r3, r3, #8
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b70      	ldr	r3, [pc, #448]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	6a1b      	ldr	r3, [r3, #32]
 80020d6:	496d      	ldr	r1, [pc, #436]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80020d8:	4313      	orrs	r3, r2
 80020da:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80020dc:	4b6b      	ldr	r3, [pc, #428]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80020de:	685b      	ldr	r3, [r3, #4]
 80020e0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	69db      	ldr	r3, [r3, #28]
 80020e8:	021b      	lsls	r3, r3, #8
 80020ea:	4968      	ldr	r1, [pc, #416]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80020ec:	4313      	orrs	r3, r2
 80020ee:	604b      	str	r3, [r1, #4]
 80020f0:	e025      	b.n	800213e <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80020f2:	4b66      	ldr	r3, [pc, #408]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4a65      	ldr	r2, [pc, #404]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80020f8:	f043 0308 	orr.w	r3, r3, #8
 80020fc:	6013      	str	r3, [r2, #0]
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6a1b      	ldr	r3, [r3, #32]
 800210a:	4960      	ldr	r1, [pc, #384]	; (800228c <HAL_RCC_OscConfig+0x270>)
 800210c:	4313      	orrs	r3, r2
 800210e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002110:	4b5e      	ldr	r3, [pc, #376]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	69db      	ldr	r3, [r3, #28]
 800211c:	021b      	lsls	r3, r3, #8
 800211e:	495b      	ldr	r1, [pc, #364]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002120:	4313      	orrs	r3, r2
 8002122:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d109      	bne.n	800213e <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6a1b      	ldr	r3, [r3, #32]
 800212e:	4618      	mov	r0, r3
 8002130:	f000 fd7e 	bl	8002c30 <RCC_SetFlashLatencyFromMSIRange>
 8002134:	4603      	mov	r3, r0
 8002136:	2b00      	cmp	r3, #0
 8002138:	d001      	beq.n	800213e <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e37a      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800213e:	f000 fc81 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8002142:	4602      	mov	r2, r0
 8002144:	4b51      	ldr	r3, [pc, #324]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002146:	689b      	ldr	r3, [r3, #8]
 8002148:	091b      	lsrs	r3, r3, #4
 800214a:	f003 030f 	and.w	r3, r3, #15
 800214e:	4950      	ldr	r1, [pc, #320]	; (8002290 <HAL_RCC_OscConfig+0x274>)
 8002150:	5ccb      	ldrb	r3, [r1, r3]
 8002152:	f003 031f 	and.w	r3, r3, #31
 8002156:	fa22 f303 	lsr.w	r3, r2, r3
 800215a:	4a4e      	ldr	r2, [pc, #312]	; (8002294 <HAL_RCC_OscConfig+0x278>)
 800215c:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800215e:	4b4e      	ldr	r3, [pc, #312]	; (8002298 <HAL_RCC_OscConfig+0x27c>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	4618      	mov	r0, r3
 8002164:	f7ff fa30 	bl	80015c8 <HAL_InitTick>
 8002168:	4603      	mov	r3, r0
 800216a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 800216c:	7bfb      	ldrb	r3, [r7, #15]
 800216e:	2b00      	cmp	r3, #0
 8002170:	d052      	beq.n	8002218 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002172:	7bfb      	ldrb	r3, [r7, #15]
 8002174:	e35e      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	699b      	ldr	r3, [r3, #24]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d032      	beq.n	80021e4 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800217e:	4b43      	ldr	r3, [pc, #268]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	4a42      	ldr	r2, [pc, #264]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002184:	f043 0301 	orr.w	r3, r3, #1
 8002188:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800218a:	f7ff fc63 	bl	8001a54 <HAL_GetTick>
 800218e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002190:	e008      	b.n	80021a4 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002192:	f7ff fc5f 	bl	8001a54 <HAL_GetTick>
 8002196:	4602      	mov	r2, r0
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	1ad3      	subs	r3, r2, r3
 800219c:	2b02      	cmp	r3, #2
 800219e:	d901      	bls.n	80021a4 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80021a0:	2303      	movs	r3, #3
 80021a2:	e347      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80021a4:	4b39      	ldr	r3, [pc, #228]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0302 	and.w	r3, r3, #2
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d0f0      	beq.n	8002192 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80021b0:	4b36      	ldr	r3, [pc, #216]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	4a35      	ldr	r2, [pc, #212]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80021b6:	f043 0308 	orr.w	r3, r3, #8
 80021ba:	6013      	str	r3, [r2, #0]
 80021bc:	4b33      	ldr	r3, [pc, #204]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	6a1b      	ldr	r3, [r3, #32]
 80021c8:	4930      	ldr	r1, [pc, #192]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80021ca:	4313      	orrs	r3, r2
 80021cc:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80021ce:	4b2f      	ldr	r3, [pc, #188]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80021d0:	685b      	ldr	r3, [r3, #4]
 80021d2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69db      	ldr	r3, [r3, #28]
 80021da:	021b      	lsls	r3, r3, #8
 80021dc:	492b      	ldr	r1, [pc, #172]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	604b      	str	r3, [r1, #4]
 80021e2:	e01a      	b.n	800221a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80021e4:	4b29      	ldr	r3, [pc, #164]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	4a28      	ldr	r2, [pc, #160]	; (800228c <HAL_RCC_OscConfig+0x270>)
 80021ea:	f023 0301 	bic.w	r3, r3, #1
 80021ee:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80021f0:	f7ff fc30 	bl	8001a54 <HAL_GetTick>
 80021f4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80021f6:	e008      	b.n	800220a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80021f8:	f7ff fc2c 	bl	8001a54 <HAL_GetTick>
 80021fc:	4602      	mov	r2, r0
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	1ad3      	subs	r3, r2, r3
 8002202:	2b02      	cmp	r3, #2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e314      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800220a:	4b20      	ldr	r3, [pc, #128]	; (800228c <HAL_RCC_OscConfig+0x270>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	f003 0302 	and.w	r3, r3, #2
 8002212:	2b00      	cmp	r3, #0
 8002214:	d1f0      	bne.n	80021f8 <HAL_RCC_OscConfig+0x1dc>
 8002216:	e000      	b.n	800221a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002218:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 0301 	and.w	r3, r3, #1
 8002222:	2b00      	cmp	r3, #0
 8002224:	d073      	beq.n	800230e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002226:	69bb      	ldr	r3, [r7, #24]
 8002228:	2b08      	cmp	r3, #8
 800222a:	d005      	beq.n	8002238 <HAL_RCC_OscConfig+0x21c>
 800222c:	69bb      	ldr	r3, [r7, #24]
 800222e:	2b0c      	cmp	r3, #12
 8002230:	d10e      	bne.n	8002250 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2b03      	cmp	r3, #3
 8002236:	d10b      	bne.n	8002250 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002238:	4b14      	ldr	r3, [pc, #80]	; (800228c <HAL_RCC_OscConfig+0x270>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d063      	beq.n	800230c <HAL_RCC_OscConfig+0x2f0>
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	685b      	ldr	r3, [r3, #4]
 8002248:	2b00      	cmp	r3, #0
 800224a:	d15f      	bne.n	800230c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 800224c:	2301      	movs	r3, #1
 800224e:	e2f1      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	685b      	ldr	r3, [r3, #4]
 8002254:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002258:	d106      	bne.n	8002268 <HAL_RCC_OscConfig+0x24c>
 800225a:	4b0c      	ldr	r3, [pc, #48]	; (800228c <HAL_RCC_OscConfig+0x270>)
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	4a0b      	ldr	r2, [pc, #44]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002264:	6013      	str	r3, [r2, #0]
 8002266:	e025      	b.n	80022b4 <HAL_RCC_OscConfig+0x298>
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002270:	d114      	bne.n	800229c <HAL_RCC_OscConfig+0x280>
 8002272:	4b06      	ldr	r3, [pc, #24]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a05      	ldr	r2, [pc, #20]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002278:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800227c:	6013      	str	r3, [r2, #0]
 800227e:	4b03      	ldr	r3, [pc, #12]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	4a02      	ldr	r2, [pc, #8]	; (800228c <HAL_RCC_OscConfig+0x270>)
 8002284:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002288:	6013      	str	r3, [r2, #0]
 800228a:	e013      	b.n	80022b4 <HAL_RCC_OscConfig+0x298>
 800228c:	40021000 	.word	0x40021000
 8002290:	08009fb0 	.word	0x08009fb0
 8002294:	20000000 	.word	0x20000000
 8002298:	20000004 	.word	0x20000004
 800229c:	4ba0      	ldr	r3, [pc, #640]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4a9f      	ldr	r2, [pc, #636]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80022a2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022a6:	6013      	str	r3, [r2, #0]
 80022a8:	4b9d      	ldr	r3, [pc, #628]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4a9c      	ldr	r2, [pc, #624]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80022ae:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022b2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	685b      	ldr	r3, [r3, #4]
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d013      	beq.n	80022e4 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7ff fbca 	bl	8001a54 <HAL_GetTick>
 80022c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022c2:	e008      	b.n	80022d6 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022c4:	f7ff fbc6 	bl	8001a54 <HAL_GetTick>
 80022c8:	4602      	mov	r2, r0
 80022ca:	693b      	ldr	r3, [r7, #16]
 80022cc:	1ad3      	subs	r3, r2, r3
 80022ce:	2b64      	cmp	r3, #100	; 0x64
 80022d0:	d901      	bls.n	80022d6 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80022d2:	2303      	movs	r3, #3
 80022d4:	e2ae      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80022d6:	4b92      	ldr	r3, [pc, #584]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d0f0      	beq.n	80022c4 <HAL_RCC_OscConfig+0x2a8>
 80022e2:	e014      	b.n	800230e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022e4:	f7ff fbb6 	bl	8001a54 <HAL_GetTick>
 80022e8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022ea:	e008      	b.n	80022fe <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022ec:	f7ff fbb2 	bl	8001a54 <HAL_GetTick>
 80022f0:	4602      	mov	r2, r0
 80022f2:	693b      	ldr	r3, [r7, #16]
 80022f4:	1ad3      	subs	r3, r2, r3
 80022f6:	2b64      	cmp	r3, #100	; 0x64
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e29a      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80022fe:	4b88      	ldr	r3, [pc, #544]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d1f0      	bne.n	80022ec <HAL_RCC_OscConfig+0x2d0>
 800230a:	e000      	b.n	800230e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800230c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f003 0302 	and.w	r3, r3, #2
 8002316:	2b00      	cmp	r3, #0
 8002318:	d060      	beq.n	80023dc <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800231a:	69bb      	ldr	r3, [r7, #24]
 800231c:	2b04      	cmp	r3, #4
 800231e:	d005      	beq.n	800232c <HAL_RCC_OscConfig+0x310>
 8002320:	69bb      	ldr	r3, [r7, #24]
 8002322:	2b0c      	cmp	r3, #12
 8002324:	d119      	bne.n	800235a <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2b02      	cmp	r3, #2
 800232a:	d116      	bne.n	800235a <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800232c:	4b7c      	ldr	r3, [pc, #496]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002334:	2b00      	cmp	r3, #0
 8002336:	d005      	beq.n	8002344 <HAL_RCC_OscConfig+0x328>
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d101      	bne.n	8002344 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002340:	2301      	movs	r3, #1
 8002342:	e277      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002344:	4b76      	ldr	r3, [pc, #472]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	061b      	lsls	r3, r3, #24
 8002352:	4973      	ldr	r1, [pc, #460]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002354:	4313      	orrs	r3, r2
 8002356:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002358:	e040      	b.n	80023dc <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	68db      	ldr	r3, [r3, #12]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d023      	beq.n	80023aa <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002362:	4b6f      	ldr	r3, [pc, #444]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4a6e      	ldr	r2, [pc, #440]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002368:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800236c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800236e:	f7ff fb71 	bl	8001a54 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002374:	e008      	b.n	8002388 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002376:	f7ff fb6d 	bl	8001a54 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	2b02      	cmp	r3, #2
 8002382:	d901      	bls.n	8002388 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002384:	2303      	movs	r3, #3
 8002386:	e255      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002388:	4b65      	ldr	r3, [pc, #404]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002390:	2b00      	cmp	r3, #0
 8002392:	d0f0      	beq.n	8002376 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002394:	4b62      	ldr	r3, [pc, #392]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002396:	685b      	ldr	r3, [r3, #4]
 8002398:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	691b      	ldr	r3, [r3, #16]
 80023a0:	061b      	lsls	r3, r3, #24
 80023a2:	495f      	ldr	r1, [pc, #380]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80023a4:	4313      	orrs	r3, r2
 80023a6:	604b      	str	r3, [r1, #4]
 80023a8:	e018      	b.n	80023dc <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80023aa:	4b5d      	ldr	r3, [pc, #372]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	4a5c      	ldr	r2, [pc, #368]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80023b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80023b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023b6:	f7ff fb4d 	bl	8001a54 <HAL_GetTick>
 80023ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023bc:	e008      	b.n	80023d0 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023be:	f7ff fb49 	bl	8001a54 <HAL_GetTick>
 80023c2:	4602      	mov	r2, r0
 80023c4:	693b      	ldr	r3, [r7, #16]
 80023c6:	1ad3      	subs	r3, r2, r3
 80023c8:	2b02      	cmp	r3, #2
 80023ca:	d901      	bls.n	80023d0 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e231      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80023d0:	4b53      	ldr	r3, [pc, #332]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d1f0      	bne.n	80023be <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	f003 0308 	and.w	r3, r3, #8
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d03c      	beq.n	8002462 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	695b      	ldr	r3, [r3, #20]
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d01c      	beq.n	800242a <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023f0:	4b4b      	ldr	r3, [pc, #300]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80023f2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80023f6:	4a4a      	ldr	r2, [pc, #296]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80023f8:	f043 0301 	orr.w	r3, r3, #1
 80023fc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002400:	f7ff fb28 	bl	8001a54 <HAL_GetTick>
 8002404:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002406:	e008      	b.n	800241a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002408:	f7ff fb24 	bl	8001a54 <HAL_GetTick>
 800240c:	4602      	mov	r2, r0
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	1ad3      	subs	r3, r2, r3
 8002412:	2b02      	cmp	r3, #2
 8002414:	d901      	bls.n	800241a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8002416:	2303      	movs	r3, #3
 8002418:	e20c      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800241a:	4b41      	ldr	r3, [pc, #260]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 800241c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002420:	f003 0302 	and.w	r3, r3, #2
 8002424:	2b00      	cmp	r3, #0
 8002426:	d0ef      	beq.n	8002408 <HAL_RCC_OscConfig+0x3ec>
 8002428:	e01b      	b.n	8002462 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800242a:	4b3d      	ldr	r3, [pc, #244]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 800242c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002430:	4a3b      	ldr	r2, [pc, #236]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002432:	f023 0301 	bic.w	r3, r3, #1
 8002436:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800243a:	f7ff fb0b 	bl	8001a54 <HAL_GetTick>
 800243e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002440:	e008      	b.n	8002454 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002442:	f7ff fb07 	bl	8001a54 <HAL_GetTick>
 8002446:	4602      	mov	r2, r0
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	1ad3      	subs	r3, r2, r3
 800244c:	2b02      	cmp	r3, #2
 800244e:	d901      	bls.n	8002454 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002450:	2303      	movs	r3, #3
 8002452:	e1ef      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002454:	4b32      	ldr	r3, [pc, #200]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002456:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	2b00      	cmp	r3, #0
 8002460:	d1ef      	bne.n	8002442 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	f003 0304 	and.w	r3, r3, #4
 800246a:	2b00      	cmp	r3, #0
 800246c:	f000 80a6 	beq.w	80025bc <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002470:	2300      	movs	r3, #0
 8002472:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002474:	4b2a      	ldr	r3, [pc, #168]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002476:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002478:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247c:	2b00      	cmp	r3, #0
 800247e:	d10d      	bne.n	800249c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002480:	4b27      	ldr	r3, [pc, #156]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002484:	4a26      	ldr	r2, [pc, #152]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002486:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800248a:	6593      	str	r3, [r2, #88]	; 0x58
 800248c:	4b24      	ldr	r3, [pc, #144]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 800248e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002490:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002494:	60bb      	str	r3, [r7, #8]
 8002496:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002498:	2301      	movs	r3, #1
 800249a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800249c:	4b21      	ldr	r3, [pc, #132]	; (8002524 <HAL_RCC_OscConfig+0x508>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d118      	bne.n	80024da <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80024a8:	4b1e      	ldr	r3, [pc, #120]	; (8002524 <HAL_RCC_OscConfig+0x508>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a1d      	ldr	r2, [pc, #116]	; (8002524 <HAL_RCC_OscConfig+0x508>)
 80024ae:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024b2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024b4:	f7ff face 	bl	8001a54 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024bc:	f7ff faca 	bl	8001a54 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b02      	cmp	r3, #2
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e1b2      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024ce:	4b15      	ldr	r3, [pc, #84]	; (8002524 <HAL_RCC_OscConfig+0x508>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	689b      	ldr	r3, [r3, #8]
 80024de:	2b01      	cmp	r3, #1
 80024e0:	d108      	bne.n	80024f4 <HAL_RCC_OscConfig+0x4d8>
 80024e2:	4b0f      	ldr	r3, [pc, #60]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80024e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024e8:	4a0d      	ldr	r2, [pc, #52]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80024ea:	f043 0301 	orr.w	r3, r3, #1
 80024ee:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80024f2:	e029      	b.n	8002548 <HAL_RCC_OscConfig+0x52c>
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	2b05      	cmp	r3, #5
 80024fa:	d115      	bne.n	8002528 <HAL_RCC_OscConfig+0x50c>
 80024fc:	4b08      	ldr	r3, [pc, #32]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 80024fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002502:	4a07      	ldr	r2, [pc, #28]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002504:	f043 0304 	orr.w	r3, r3, #4
 8002508:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800250c:	4b04      	ldr	r3, [pc, #16]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 800250e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002512:	4a03      	ldr	r2, [pc, #12]	; (8002520 <HAL_RCC_OscConfig+0x504>)
 8002514:	f043 0301 	orr.w	r3, r3, #1
 8002518:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800251c:	e014      	b.n	8002548 <HAL_RCC_OscConfig+0x52c>
 800251e:	bf00      	nop
 8002520:	40021000 	.word	0x40021000
 8002524:	40007000 	.word	0x40007000
 8002528:	4b9a      	ldr	r3, [pc, #616]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 800252a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800252e:	4a99      	ldr	r2, [pc, #612]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002530:	f023 0301 	bic.w	r3, r3, #1
 8002534:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002538:	4b96      	ldr	r3, [pc, #600]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 800253a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800253e:	4a95      	ldr	r2, [pc, #596]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002540:	f023 0304 	bic.w	r3, r3, #4
 8002544:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d016      	beq.n	800257e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002550:	f7ff fa80 	bl	8001a54 <HAL_GetTick>
 8002554:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002556:	e00a      	b.n	800256e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002558:	f7ff fa7c 	bl	8001a54 <HAL_GetTick>
 800255c:	4602      	mov	r2, r0
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	1ad3      	subs	r3, r2, r3
 8002562:	f241 3288 	movw	r2, #5000	; 0x1388
 8002566:	4293      	cmp	r3, r2
 8002568:	d901      	bls.n	800256e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800256a:	2303      	movs	r3, #3
 800256c:	e162      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800256e:	4b89      	ldr	r3, [pc, #548]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002570:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002574:	f003 0302 	and.w	r3, r3, #2
 8002578:	2b00      	cmp	r3, #0
 800257a:	d0ed      	beq.n	8002558 <HAL_RCC_OscConfig+0x53c>
 800257c:	e015      	b.n	80025aa <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257e:	f7ff fa69 	bl	8001a54 <HAL_GetTick>
 8002582:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002584:	e00a      	b.n	800259c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002586:	f7ff fa65 	bl	8001a54 <HAL_GetTick>
 800258a:	4602      	mov	r2, r0
 800258c:	693b      	ldr	r3, [r7, #16]
 800258e:	1ad3      	subs	r3, r2, r3
 8002590:	f241 3288 	movw	r2, #5000	; 0x1388
 8002594:	4293      	cmp	r3, r2
 8002596:	d901      	bls.n	800259c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002598:	2303      	movs	r3, #3
 800259a:	e14b      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800259c:	4b7d      	ldr	r3, [pc, #500]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 800259e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d1ed      	bne.n	8002586 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025aa:	7ffb      	ldrb	r3, [r7, #31]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d105      	bne.n	80025bc <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025b0:	4b78      	ldr	r3, [pc, #480]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 80025b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b4:	4a77      	ldr	r2, [pc, #476]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 80025b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025ba:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	f003 0320 	and.w	r3, r3, #32
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d03c      	beq.n	8002642 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01c      	beq.n	800260a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80025d0:	4b70      	ldr	r3, [pc, #448]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 80025d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80025d6:	4a6f      	ldr	r2, [pc, #444]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 80025d8:	f043 0301 	orr.w	r3, r3, #1
 80025dc:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025e0:	f7ff fa38 	bl	8001a54 <HAL_GetTick>
 80025e4:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025e6:	e008      	b.n	80025fa <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80025e8:	f7ff fa34 	bl	8001a54 <HAL_GetTick>
 80025ec:	4602      	mov	r2, r0
 80025ee:	693b      	ldr	r3, [r7, #16]
 80025f0:	1ad3      	subs	r3, r2, r3
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d901      	bls.n	80025fa <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80025f6:	2303      	movs	r3, #3
 80025f8:	e11c      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80025fa:	4b66      	ldr	r3, [pc, #408]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 80025fc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002600:	f003 0302 	and.w	r3, r3, #2
 8002604:	2b00      	cmp	r3, #0
 8002606:	d0ef      	beq.n	80025e8 <HAL_RCC_OscConfig+0x5cc>
 8002608:	e01b      	b.n	8002642 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800260a:	4b62      	ldr	r3, [pc, #392]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 800260c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002610:	4a60      	ldr	r2, [pc, #384]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002612:	f023 0301 	bic.w	r3, r3, #1
 8002616:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7ff fa1b 	bl	8001a54 <HAL_GetTick>
 800261e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002620:	e008      	b.n	8002634 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002622:	f7ff fa17 	bl	8001a54 <HAL_GetTick>
 8002626:	4602      	mov	r2, r0
 8002628:	693b      	ldr	r3, [r7, #16]
 800262a:	1ad3      	subs	r3, r2, r3
 800262c:	2b02      	cmp	r3, #2
 800262e:	d901      	bls.n	8002634 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e0ff      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002634:	4b57      	ldr	r3, [pc, #348]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002636:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1ef      	bne.n	8002622 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002646:	2b00      	cmp	r3, #0
 8002648:	f000 80f3 	beq.w	8002832 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002650:	2b02      	cmp	r3, #2
 8002652:	f040 80c9 	bne.w	80027e8 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002656:	4b4f      	ldr	r3, [pc, #316]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002658:	68db      	ldr	r3, [r3, #12]
 800265a:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	f003 0203 	and.w	r2, r3, #3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002666:	429a      	cmp	r2, r3
 8002668:	d12c      	bne.n	80026c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800266a:	697b      	ldr	r3, [r7, #20]
 800266c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002674:	3b01      	subs	r3, #1
 8002676:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002678:	429a      	cmp	r2, r3
 800267a:	d123      	bne.n	80026c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800267c:	697b      	ldr	r3, [r7, #20]
 800267e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002686:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002688:	429a      	cmp	r2, r3
 800268a:	d11b      	bne.n	80026c4 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002696:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002698:	429a      	cmp	r2, r3
 800269a:	d113      	bne.n	80026c4 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800269c:	697b      	ldr	r3, [r7, #20]
 800269e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026a6:	085b      	lsrs	r3, r3, #1
 80026a8:	3b01      	subs	r3, #1
 80026aa:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d109      	bne.n	80026c4 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	085b      	lsrs	r3, r3, #1
 80026bc:	3b01      	subs	r3, #1
 80026be:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80026c0:	429a      	cmp	r2, r3
 80026c2:	d06b      	beq.n	800279c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026c4:	69bb      	ldr	r3, [r7, #24]
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	d062      	beq.n	8002790 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80026ca:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80026d2:	2b00      	cmp	r3, #0
 80026d4:	d001      	beq.n	80026da <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e0ac      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80026da:	4b2e      	ldr	r3, [pc, #184]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	4a2d      	ldr	r2, [pc, #180]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 80026e0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80026e4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80026e6:	f7ff f9b5 	bl	8001a54 <HAL_GetTick>
 80026ea:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026ec:	e008      	b.n	8002700 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026ee:	f7ff f9b1 	bl	8001a54 <HAL_GetTick>
 80026f2:	4602      	mov	r2, r0
 80026f4:	693b      	ldr	r3, [r7, #16]
 80026f6:	1ad3      	subs	r3, r2, r3
 80026f8:	2b02      	cmp	r3, #2
 80026fa:	d901      	bls.n	8002700 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80026fc:	2303      	movs	r3, #3
 80026fe:	e099      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002700:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002708:	2b00      	cmp	r3, #0
 800270a:	d1f0      	bne.n	80026ee <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800270c:	4b21      	ldr	r3, [pc, #132]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 800270e:	68da      	ldr	r2, [r3, #12]
 8002710:	4b21      	ldr	r3, [pc, #132]	; (8002798 <HAL_RCC_OscConfig+0x77c>)
 8002712:	4013      	ands	r3, r2
 8002714:	687a      	ldr	r2, [r7, #4]
 8002716:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8002718:	687a      	ldr	r2, [r7, #4]
 800271a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800271c:	3a01      	subs	r2, #1
 800271e:	0112      	lsls	r2, r2, #4
 8002720:	4311      	orrs	r1, r2
 8002722:	687a      	ldr	r2, [r7, #4]
 8002724:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002726:	0212      	lsls	r2, r2, #8
 8002728:	4311      	orrs	r1, r2
 800272a:	687a      	ldr	r2, [r7, #4]
 800272c:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800272e:	0852      	lsrs	r2, r2, #1
 8002730:	3a01      	subs	r2, #1
 8002732:	0552      	lsls	r2, r2, #21
 8002734:	4311      	orrs	r1, r2
 8002736:	687a      	ldr	r2, [r7, #4]
 8002738:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800273a:	0852      	lsrs	r2, r2, #1
 800273c:	3a01      	subs	r2, #1
 800273e:	0652      	lsls	r2, r2, #25
 8002740:	4311      	orrs	r1, r2
 8002742:	687a      	ldr	r2, [r7, #4]
 8002744:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002746:	06d2      	lsls	r2, r2, #27
 8002748:	430a      	orrs	r2, r1
 800274a:	4912      	ldr	r1, [pc, #72]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 800274c:	4313      	orrs	r3, r2
 800274e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002750:	4b10      	ldr	r3, [pc, #64]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a0f      	ldr	r2, [pc, #60]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002756:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800275a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800275c:	4b0d      	ldr	r3, [pc, #52]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 800275e:	68db      	ldr	r3, [r3, #12]
 8002760:	4a0c      	ldr	r2, [pc, #48]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002762:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002766:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002768:	f7ff f974 	bl	8001a54 <HAL_GetTick>
 800276c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002770:	f7ff f970 	bl	8001a54 <HAL_GetTick>
 8002774:	4602      	mov	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e058      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002782:	4b04      	ldr	r3, [pc, #16]	; (8002794 <HAL_RCC_OscConfig+0x778>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800278a:	2b00      	cmp	r3, #0
 800278c:	d0f0      	beq.n	8002770 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800278e:	e050      	b.n	8002832 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002790:	2301      	movs	r3, #1
 8002792:	e04f      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
 8002794:	40021000 	.word	0x40021000
 8002798:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800279c:	4b27      	ldr	r3, [pc, #156]	; (800283c <HAL_RCC_OscConfig+0x820>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d144      	bne.n	8002832 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80027a8:	4b24      	ldr	r3, [pc, #144]	; (800283c <HAL_RCC_OscConfig+0x820>)
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	4a23      	ldr	r2, [pc, #140]	; (800283c <HAL_RCC_OscConfig+0x820>)
 80027ae:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027b2:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80027b4:	4b21      	ldr	r3, [pc, #132]	; (800283c <HAL_RCC_OscConfig+0x820>)
 80027b6:	68db      	ldr	r3, [r3, #12]
 80027b8:	4a20      	ldr	r2, [pc, #128]	; (800283c <HAL_RCC_OscConfig+0x820>)
 80027ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80027be:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80027c0:	f7ff f948 	bl	8001a54 <HAL_GetTick>
 80027c4:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027c6:	e008      	b.n	80027da <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027c8:	f7ff f944 	bl	8001a54 <HAL_GetTick>
 80027cc:	4602      	mov	r2, r0
 80027ce:	693b      	ldr	r3, [r7, #16]
 80027d0:	1ad3      	subs	r3, r2, r3
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d901      	bls.n	80027da <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80027d6:	2303      	movs	r3, #3
 80027d8:	e02c      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80027da:	4b18      	ldr	r3, [pc, #96]	; (800283c <HAL_RCC_OscConfig+0x820>)
 80027dc:	681b      	ldr	r3, [r3, #0]
 80027de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d0f0      	beq.n	80027c8 <HAL_RCC_OscConfig+0x7ac>
 80027e6:	e024      	b.n	8002832 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80027e8:	69bb      	ldr	r3, [r7, #24]
 80027ea:	2b0c      	cmp	r3, #12
 80027ec:	d01f      	beq.n	800282e <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ee:	4b13      	ldr	r3, [pc, #76]	; (800283c <HAL_RCC_OscConfig+0x820>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a12      	ldr	r2, [pc, #72]	; (800283c <HAL_RCC_OscConfig+0x820>)
 80027f4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80027f8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027fa:	f7ff f92b 	bl	8001a54 <HAL_GetTick>
 80027fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002800:	e008      	b.n	8002814 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002802:	f7ff f927 	bl	8001a54 <HAL_GetTick>
 8002806:	4602      	mov	r2, r0
 8002808:	693b      	ldr	r3, [r7, #16]
 800280a:	1ad3      	subs	r3, r2, r3
 800280c:	2b02      	cmp	r3, #2
 800280e:	d901      	bls.n	8002814 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8002810:	2303      	movs	r3, #3
 8002812:	e00f      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002814:	4b09      	ldr	r3, [pc, #36]	; (800283c <HAL_RCC_OscConfig+0x820>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800281c:	2b00      	cmp	r3, #0
 800281e:	d1f0      	bne.n	8002802 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8002820:	4b06      	ldr	r3, [pc, #24]	; (800283c <HAL_RCC_OscConfig+0x820>)
 8002822:	68da      	ldr	r2, [r3, #12]
 8002824:	4905      	ldr	r1, [pc, #20]	; (800283c <HAL_RCC_OscConfig+0x820>)
 8002826:	4b06      	ldr	r3, [pc, #24]	; (8002840 <HAL_RCC_OscConfig+0x824>)
 8002828:	4013      	ands	r3, r2
 800282a:	60cb      	str	r3, [r1, #12]
 800282c:	e001      	b.n	8002832 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8002832:	2300      	movs	r3, #0
}
 8002834:	4618      	mov	r0, r3
 8002836:	3720      	adds	r7, #32
 8002838:	46bd      	mov	sp, r7
 800283a:	bd80      	pop	{r7, pc}
 800283c:	40021000 	.word	0x40021000
 8002840:	feeefffc 	.word	0xfeeefffc

08002844 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	b084      	sub	sp, #16
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
 800284c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d101      	bne.n	8002858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e0e7      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002858:	4b75      	ldr	r3, [pc, #468]	; (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0307 	and.w	r3, r3, #7
 8002860:	683a      	ldr	r2, [r7, #0]
 8002862:	429a      	cmp	r2, r3
 8002864:	d910      	bls.n	8002888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002866:	4b72      	ldr	r3, [pc, #456]	; (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f023 0207 	bic.w	r2, r3, #7
 800286e:	4970      	ldr	r1, [pc, #448]	; (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 8002870:	683b      	ldr	r3, [r7, #0]
 8002872:	4313      	orrs	r3, r2
 8002874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b6e      	ldr	r3, [pc, #440]	; (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0cf      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d010      	beq.n	80028b6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	689a      	ldr	r2, [r3, #8]
 8002898:	4b66      	ldr	r3, [pc, #408]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800289a:	689b      	ldr	r3, [r3, #8]
 800289c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80028a0:	429a      	cmp	r2, r3
 80028a2:	d908      	bls.n	80028b6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a4:	4b63      	ldr	r3, [pc, #396]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80028a6:	689b      	ldr	r3, [r3, #8]
 80028a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	689b      	ldr	r3, [r3, #8]
 80028b0:	4960      	ldr	r1, [pc, #384]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80028b2:	4313      	orrs	r3, r2
 80028b4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0301 	and.w	r3, r3, #1
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d04c      	beq.n	800295c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	2b03      	cmp	r3, #3
 80028c8:	d107      	bne.n	80028da <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80028ca:	4b5a      	ldr	r3, [pc, #360]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d121      	bne.n	800291a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80028d6:	2301      	movs	r3, #1
 80028d8:	e0a6      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	2b02      	cmp	r3, #2
 80028e0:	d107      	bne.n	80028f2 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80028e2:	4b54      	ldr	r3, [pc, #336]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d115      	bne.n	800291a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e09a      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d107      	bne.n	800290a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80028fa:	4b4e      	ldr	r3, [pc, #312]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	f003 0302 	and.w	r3, r3, #2
 8002902:	2b00      	cmp	r3, #0
 8002904:	d109      	bne.n	800291a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002906:	2301      	movs	r3, #1
 8002908:	e08e      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800290a:	4b4a      	ldr	r3, [pc, #296]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002912:	2b00      	cmp	r3, #0
 8002914:	d101      	bne.n	800291a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002916:	2301      	movs	r3, #1
 8002918:	e086      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800291a:	4b46      	ldr	r3, [pc, #280]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800291c:	689b      	ldr	r3, [r3, #8]
 800291e:	f023 0203 	bic.w	r2, r3, #3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	4943      	ldr	r1, [pc, #268]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 8002928:	4313      	orrs	r3, r2
 800292a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800292c:	f7ff f892 	bl	8001a54 <HAL_GetTick>
 8002930:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002932:	e00a      	b.n	800294a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002934:	f7ff f88e 	bl	8001a54 <HAL_GetTick>
 8002938:	4602      	mov	r2, r0
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	1ad3      	subs	r3, r2, r3
 800293e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002942:	4293      	cmp	r3, r2
 8002944:	d901      	bls.n	800294a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002946:	2303      	movs	r3, #3
 8002948:	e06e      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800294a:	4b3a      	ldr	r3, [pc, #232]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800294c:	689b      	ldr	r3, [r3, #8]
 800294e:	f003 020c 	and.w	r2, r3, #12
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	009b      	lsls	r3, r3, #2
 8002958:	429a      	cmp	r2, r3
 800295a:	d1eb      	bne.n	8002934 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	f003 0302 	and.w	r3, r3, #2
 8002964:	2b00      	cmp	r3, #0
 8002966:	d010      	beq.n	800298a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689a      	ldr	r2, [r3, #8]
 800296c:	4b31      	ldr	r3, [pc, #196]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002974:	429a      	cmp	r2, r3
 8002976:	d208      	bcs.n	800298a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002978:	4b2e      	ldr	r3, [pc, #184]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 800297a:	689b      	ldr	r3, [r3, #8]
 800297c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	492b      	ldr	r1, [pc, #172]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 8002986:	4313      	orrs	r3, r2
 8002988:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800298a:	4b29      	ldr	r3, [pc, #164]	; (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0307 	and.w	r3, r3, #7
 8002992:	683a      	ldr	r2, [r7, #0]
 8002994:	429a      	cmp	r2, r3
 8002996:	d210      	bcs.n	80029ba <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	f023 0207 	bic.w	r2, r3, #7
 80029a0:	4923      	ldr	r1, [pc, #140]	; (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	4313      	orrs	r3, r2
 80029a6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80029a8:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <HAL_RCC_ClockConfig+0x1ec>)
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	f003 0307 	and.w	r3, r3, #7
 80029b0:	683a      	ldr	r2, [r7, #0]
 80029b2:	429a      	cmp	r2, r3
 80029b4:	d001      	beq.n	80029ba <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e036      	b.n	8002a28 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0304 	and.w	r3, r3, #4
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d008      	beq.n	80029d8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029c6:	4b1b      	ldr	r3, [pc, #108]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68db      	ldr	r3, [r3, #12]
 80029d2:	4918      	ldr	r1, [pc, #96]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	f003 0308 	and.w	r3, r3, #8
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d009      	beq.n	80029f8 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80029e4:	4b13      	ldr	r3, [pc, #76]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	00db      	lsls	r3, r3, #3
 80029f2:	4910      	ldr	r1, [pc, #64]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 80029f4:	4313      	orrs	r3, r2
 80029f6:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80029f8:	f000 f824 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 80029fc:	4602      	mov	r2, r0
 80029fe:	4b0d      	ldr	r3, [pc, #52]	; (8002a34 <HAL_RCC_ClockConfig+0x1f0>)
 8002a00:	689b      	ldr	r3, [r3, #8]
 8002a02:	091b      	lsrs	r3, r3, #4
 8002a04:	f003 030f 	and.w	r3, r3, #15
 8002a08:	490b      	ldr	r1, [pc, #44]	; (8002a38 <HAL_RCC_ClockConfig+0x1f4>)
 8002a0a:	5ccb      	ldrb	r3, [r1, r3]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
 8002a10:	fa22 f303 	lsr.w	r3, r2, r3
 8002a14:	4a09      	ldr	r2, [pc, #36]	; (8002a3c <HAL_RCC_ClockConfig+0x1f8>)
 8002a16:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002a18:	4b09      	ldr	r3, [pc, #36]	; (8002a40 <HAL_RCC_ClockConfig+0x1fc>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fe fdd3 	bl	80015c8 <HAL_InitTick>
 8002a22:	4603      	mov	r3, r0
 8002a24:	72fb      	strb	r3, [r7, #11]

  return status;
 8002a26:	7afb      	ldrb	r3, [r7, #11]
}
 8002a28:	4618      	mov	r0, r3
 8002a2a:	3710      	adds	r7, #16
 8002a2c:	46bd      	mov	sp, r7
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	40022000 	.word	0x40022000
 8002a34:	40021000 	.word	0x40021000
 8002a38:	08009fb0 	.word	0x08009fb0
 8002a3c:	20000000 	.word	0x20000000
 8002a40:	20000004 	.word	0x20000004

08002a44 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	b089      	sub	sp, #36	; 0x24
 8002a48:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	61fb      	str	r3, [r7, #28]
 8002a4e:	2300      	movs	r3, #0
 8002a50:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002a52:	4b3e      	ldr	r3, [pc, #248]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f003 030c 	and.w	r3, r3, #12
 8002a5a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002a5c:	4b3b      	ldr	r3, [pc, #236]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a5e:	68db      	ldr	r3, [r3, #12]
 8002a60:	f003 0303 	and.w	r3, r3, #3
 8002a64:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002a66:	693b      	ldr	r3, [r7, #16]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d005      	beq.n	8002a78 <HAL_RCC_GetSysClockFreq+0x34>
 8002a6c:	693b      	ldr	r3, [r7, #16]
 8002a6e:	2b0c      	cmp	r3, #12
 8002a70:	d121      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d11e      	bne.n	8002ab6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002a78:	4b34      	ldr	r3, [pc, #208]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f003 0308 	and.w	r3, r3, #8
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d107      	bne.n	8002a94 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002a84:	4b31      	ldr	r3, [pc, #196]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a86:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002a8a:	0a1b      	lsrs	r3, r3, #8
 8002a8c:	f003 030f 	and.w	r3, r3, #15
 8002a90:	61fb      	str	r3, [r7, #28]
 8002a92:	e005      	b.n	8002aa0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002a94:	4b2d      	ldr	r3, [pc, #180]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	091b      	lsrs	r3, r3, #4
 8002a9a:	f003 030f 	and.w	r3, r3, #15
 8002a9e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002aa0:	4a2b      	ldr	r2, [pc, #172]	; (8002b50 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002aa2:	69fb      	ldr	r3, [r7, #28]
 8002aa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002aa8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002aaa:	693b      	ldr	r3, [r7, #16]
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d10d      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002ab0:	69fb      	ldr	r3, [r7, #28]
 8002ab2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002ab4:	e00a      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002ab6:	693b      	ldr	r3, [r7, #16]
 8002ab8:	2b04      	cmp	r3, #4
 8002aba:	d102      	bne.n	8002ac2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002abc:	4b25      	ldr	r3, [pc, #148]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002abe:	61bb      	str	r3, [r7, #24]
 8002ac0:	e004      	b.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002ac2:	693b      	ldr	r3, [r7, #16]
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d101      	bne.n	8002acc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002ac8:	4b23      	ldr	r3, [pc, #140]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002aca:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	2b0c      	cmp	r3, #12
 8002ad0:	d134      	bne.n	8002b3c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002ad2:	4b1e      	ldr	r3, [pc, #120]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	f003 0303 	and.w	r3, r3, #3
 8002ada:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002adc:	68bb      	ldr	r3, [r7, #8]
 8002ade:	2b02      	cmp	r3, #2
 8002ae0:	d003      	beq.n	8002aea <HAL_RCC_GetSysClockFreq+0xa6>
 8002ae2:	68bb      	ldr	r3, [r7, #8]
 8002ae4:	2b03      	cmp	r3, #3
 8002ae6:	d003      	beq.n	8002af0 <HAL_RCC_GetSysClockFreq+0xac>
 8002ae8:	e005      	b.n	8002af6 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002aea:	4b1a      	ldr	r3, [pc, #104]	; (8002b54 <HAL_RCC_GetSysClockFreq+0x110>)
 8002aec:	617b      	str	r3, [r7, #20]
      break;
 8002aee:	e005      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002af0:	4b19      	ldr	r3, [pc, #100]	; (8002b58 <HAL_RCC_GetSysClockFreq+0x114>)
 8002af2:	617b      	str	r3, [r7, #20]
      break;
 8002af4:	e002      	b.n	8002afc <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	617b      	str	r3, [r7, #20]
      break;
 8002afa:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002afc:	4b13      	ldr	r3, [pc, #76]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	091b      	lsrs	r3, r3, #4
 8002b02:	f003 0307 	and.w	r3, r3, #7
 8002b06:	3301      	adds	r3, #1
 8002b08:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002b0a:	4b10      	ldr	r3, [pc, #64]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b0c:	68db      	ldr	r3, [r3, #12]
 8002b0e:	0a1b      	lsrs	r3, r3, #8
 8002b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002b14:	697a      	ldr	r2, [r7, #20]
 8002b16:	fb03 f202 	mul.w	r2, r3, r2
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b20:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002b22:	4b0a      	ldr	r3, [pc, #40]	; (8002b4c <HAL_RCC_GetSysClockFreq+0x108>)
 8002b24:	68db      	ldr	r3, [r3, #12]
 8002b26:	0e5b      	lsrs	r3, r3, #25
 8002b28:	f003 0303 	and.w	r3, r3, #3
 8002b2c:	3301      	adds	r3, #1
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002b32:	697a      	ldr	r2, [r7, #20]
 8002b34:	683b      	ldr	r3, [r7, #0]
 8002b36:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b3a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002b3c:	69bb      	ldr	r3, [r7, #24]
}
 8002b3e:	4618      	mov	r0, r3
 8002b40:	3724      	adds	r7, #36	; 0x24
 8002b42:	46bd      	mov	sp, r7
 8002b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b48:	4770      	bx	lr
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	08009fc8 	.word	0x08009fc8
 8002b54:	00f42400 	.word	0x00f42400
 8002b58:	007a1200 	.word	0x007a1200

08002b5c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b60:	4b03      	ldr	r3, [pc, #12]	; (8002b70 <HAL_RCC_GetHCLKFreq+0x14>)
 8002b62:	681b      	ldr	r3, [r3, #0]
}
 8002b64:	4618      	mov	r0, r3
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	20000000 	.word	0x20000000

08002b74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b74:	b580      	push	{r7, lr}
 8002b76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002b78:	f7ff fff0 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	0a1b      	lsrs	r3, r3, #8
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	4904      	ldr	r1, [pc, #16]	; (8002b9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8002b8a:	5ccb      	ldrb	r3, [r1, r3]
 8002b8c:	f003 031f 	and.w	r3, r3, #31
 8002b90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	bd80      	pop	{r7, pc}
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	08009fc0 	.word	0x08009fc0

08002ba0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002ba4:	f7ff ffda 	bl	8002b5c <HAL_RCC_GetHCLKFreq>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	4b06      	ldr	r3, [pc, #24]	; (8002bc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	0adb      	lsrs	r3, r3, #11
 8002bb0:	f003 0307 	and.w	r3, r3, #7
 8002bb4:	4904      	ldr	r1, [pc, #16]	; (8002bc8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002bb6:	5ccb      	ldrb	r3, [r1, r3]
 8002bb8:	f003 031f 	and.w	r3, r3, #31
 8002bbc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	08009fc0 	.word	0x08009fc0

08002bcc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002bcc:	b480      	push	{r7}
 8002bce:	b083      	sub	sp, #12
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	220f      	movs	r2, #15
 8002bda:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002bdc:	4b12      	ldr	r3, [pc, #72]	; (8002c28 <HAL_RCC_GetClockConfig+0x5c>)
 8002bde:	689b      	ldr	r3, [r3, #8]
 8002be0:	f003 0203 	and.w	r2, r3, #3
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002be8:	4b0f      	ldr	r3, [pc, #60]	; (8002c28 <HAL_RCC_GetClockConfig+0x5c>)
 8002bea:	689b      	ldr	r3, [r3, #8]
 8002bec:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002bf4:	4b0c      	ldr	r3, [pc, #48]	; (8002c28 <HAL_RCC_GetClockConfig+0x5c>)
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8002c00:	4b09      	ldr	r3, [pc, #36]	; (8002c28 <HAL_RCC_GetClockConfig+0x5c>)
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	08db      	lsrs	r3, r3, #3
 8002c06:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8002c0e:	4b07      	ldr	r3, [pc, #28]	; (8002c2c <HAL_RCC_GetClockConfig+0x60>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f003 0207 	and.w	r2, r3, #7
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	601a      	str	r2, [r3, #0]
}
 8002c1a:	bf00      	nop
 8002c1c:	370c      	adds	r7, #12
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c24:	4770      	bx	lr
 8002c26:	bf00      	nop
 8002c28:	40021000 	.word	0x40021000
 8002c2c:	40022000 	.word	0x40022000

08002c30 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002c30:	b580      	push	{r7, lr}
 8002c32:	b086      	sub	sp, #24
 8002c34:	af00      	add	r7, sp, #0
 8002c36:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002c38:	2300      	movs	r3, #0
 8002c3a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002c3c:	4b2a      	ldr	r3, [pc, #168]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c3e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c44:	2b00      	cmp	r3, #0
 8002c46:	d003      	beq.n	8002c50 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002c48:	f7ff f984 	bl	8001f54 <HAL_PWREx_GetVoltageRange>
 8002c4c:	6178      	str	r0, [r7, #20]
 8002c4e:	e014      	b.n	8002c7a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002c50:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c54:	4a24      	ldr	r2, [pc, #144]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c56:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002c5a:	6593      	str	r3, [r2, #88]	; 0x58
 8002c5c:	4b22      	ldr	r3, [pc, #136]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c5e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c60:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c64:	60fb      	str	r3, [r7, #12]
 8002c66:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002c68:	f7ff f974 	bl	8001f54 <HAL_PWREx_GetVoltageRange>
 8002c6c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002c6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002c72:	4a1d      	ldr	r2, [pc, #116]	; (8002ce8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002c74:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c78:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002c80:	d10b      	bne.n	8002c9a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2b80      	cmp	r3, #128	; 0x80
 8002c86:	d919      	bls.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2ba0      	cmp	r3, #160	; 0xa0
 8002c8c:	d902      	bls.n	8002c94 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002c8e:	2302      	movs	r3, #2
 8002c90:	613b      	str	r3, [r7, #16]
 8002c92:	e013      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002c94:	2301      	movs	r3, #1
 8002c96:	613b      	str	r3, [r7, #16]
 8002c98:	e010      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d902      	bls.n	8002ca6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002ca0:	2303      	movs	r3, #3
 8002ca2:	613b      	str	r3, [r7, #16]
 8002ca4:	e00a      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2b80      	cmp	r3, #128	; 0x80
 8002caa:	d102      	bne.n	8002cb2 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002cac:	2302      	movs	r3, #2
 8002cae:	613b      	str	r3, [r7, #16]
 8002cb0:	e004      	b.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2b70      	cmp	r3, #112	; 0x70
 8002cb6:	d101      	bne.n	8002cbc <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002cb8:	2301      	movs	r3, #1
 8002cba:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f023 0207 	bic.w	r2, r3, #7
 8002cc4:	4909      	ldr	r1, [pc, #36]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	4313      	orrs	r3, r2
 8002cca:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ccc:	4b07      	ldr	r3, [pc, #28]	; (8002cec <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0307 	and.w	r3, r3, #7
 8002cd4:	693a      	ldr	r2, [r7, #16]
 8002cd6:	429a      	cmp	r2, r3
 8002cd8:	d001      	beq.n	8002cde <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e000      	b.n	8002ce0 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002cde:	2300      	movs	r3, #0
}
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	3718      	adds	r7, #24
 8002ce4:	46bd      	mov	sp, r7
 8002ce6:	bd80      	pop	{r7, pc}
 8002ce8:	40021000 	.word	0x40021000
 8002cec:	40022000 	.word	0x40022000

08002cf0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d031      	beq.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d10:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d14:	d01a      	beq.n	8002d4c <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002d16:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002d1a:	d814      	bhi.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d009      	beq.n	8002d34 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002d20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002d24:	d10f      	bne.n	8002d46 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002d26:	4b5d      	ldr	r3, [pc, #372]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	4a5c      	ldr	r2, [pc, #368]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d2c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d30:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d32:	e00c      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	3304      	adds	r3, #4
 8002d38:	2100      	movs	r1, #0
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f000 f9de 	bl	80030fc <RCCEx_PLLSAI1_Config>
 8002d40:	4603      	mov	r3, r0
 8002d42:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002d44:	e003      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
 8002d48:	74fb      	strb	r3, [r7, #19]
      break;
 8002d4a:	e000      	b.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002d4c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002d4e:	7cfb      	ldrb	r3, [r7, #19]
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d10b      	bne.n	8002d6c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002d54:	4b51      	ldr	r3, [pc, #324]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d5a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002d62:	494e      	ldr	r1, [pc, #312]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d64:	4313      	orrs	r3, r2
 8002d66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002d6a:	e001      	b.n	8002d70 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d6c:	7cfb      	ldrb	r3, [r7, #19]
 8002d6e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	f000 809e 	beq.w	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002d82:	4b46      	ldr	r3, [pc, #280]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e000      	b.n	8002d94 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002d92:	2300      	movs	r3, #0
 8002d94:	2b00      	cmp	r3, #0
 8002d96:	d00d      	beq.n	8002db4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d98:	4b40      	ldr	r3, [pc, #256]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002d9c:	4a3f      	ldr	r2, [pc, #252]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002d9e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002da2:	6593      	str	r3, [r2, #88]	; 0x58
 8002da4:	4b3d      	ldr	r3, [pc, #244]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002da8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002dac:	60bb      	str	r3, [r7, #8]
 8002dae:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002db0:	2301      	movs	r3, #1
 8002db2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002db4:	4b3a      	ldr	r3, [pc, #232]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4a39      	ldr	r2, [pc, #228]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002dbe:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002dc0:	f7fe fe48 	bl	8001a54 <HAL_GetTick>
 8002dc4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002dc6:	e009      	b.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002dc8:	f7fe fe44 	bl	8001a54 <HAL_GetTick>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	1ad3      	subs	r3, r2, r3
 8002dd2:	2b02      	cmp	r3, #2
 8002dd4:	d902      	bls.n	8002ddc <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002dd6:	2303      	movs	r3, #3
 8002dd8:	74fb      	strb	r3, [r7, #19]
        break;
 8002dda:	e005      	b.n	8002de8 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002ddc:	4b30      	ldr	r3, [pc, #192]	; (8002ea0 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002de4:	2b00      	cmp	r3, #0
 8002de6:	d0ef      	beq.n	8002dc8 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002de8:	7cfb      	ldrb	r3, [r7, #19]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d15a      	bne.n	8002ea4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002df8:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d01e      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e04:	697a      	ldr	r2, [r7, #20]
 8002e06:	429a      	cmp	r2, r3
 8002e08:	d019      	beq.n	8002e3e <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002e0a:	4b24      	ldr	r3, [pc, #144]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e10:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e14:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e16:	4b21      	ldr	r3, [pc, #132]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e1c:	4a1f      	ldr	r2, [pc, #124]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e1e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002e22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002e26:	4b1d      	ldr	r3, [pc, #116]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e2c:	4a1b      	ldr	r2, [pc, #108]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e2e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002e36:	4a19      	ldr	r2, [pc, #100]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002e3e:	697b      	ldr	r3, [r7, #20]
 8002e40:	f003 0301 	and.w	r3, r3, #1
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d016      	beq.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e48:	f7fe fe04 	bl	8001a54 <HAL_GetTick>
 8002e4c:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e4e:	e00b      	b.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e50:	f7fe fe00 	bl	8001a54 <HAL_GetTick>
 8002e54:	4602      	mov	r2, r0
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	1ad3      	subs	r3, r2, r3
 8002e5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d902      	bls.n	8002e68 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002e62:	2303      	movs	r3, #3
 8002e64:	74fb      	strb	r3, [r7, #19]
            break;
 8002e66:	e006      	b.n	8002e76 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002e68:	4b0c      	ldr	r3, [pc, #48]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d0ec      	beq.n	8002e50 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002e76:	7cfb      	ldrb	r3, [r7, #19]
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d10b      	bne.n	8002e94 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002e7c:	4b07      	ldr	r3, [pc, #28]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e8a:	4904      	ldr	r1, [pc, #16]	; (8002e9c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002e8c:	4313      	orrs	r3, r2
 8002e8e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002e92:	e009      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002e94:	7cfb      	ldrb	r3, [r7, #19]
 8002e96:	74bb      	strb	r3, [r7, #18]
 8002e98:	e006      	b.n	8002ea8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002e9a:	bf00      	nop
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ea4:	7cfb      	ldrb	r3, [r7, #19]
 8002ea6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ea8:	7c7b      	ldrb	r3, [r7, #17]
 8002eaa:	2b01      	cmp	r3, #1
 8002eac:	d105      	bne.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eae:	4b8a      	ldr	r3, [pc, #552]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eb2:	4a89      	ldr	r2, [pc, #548]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eb4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002eb8:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 0301 	and.w	r3, r3, #1
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d00a      	beq.n	8002edc <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002ec6:	4b84      	ldr	r3, [pc, #528]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ec8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ecc:	f023 0203 	bic.w	r2, r3, #3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a1b      	ldr	r3, [r3, #32]
 8002ed4:	4980      	ldr	r1, [pc, #512]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ed6:	4313      	orrs	r3, r2
 8002ed8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d00a      	beq.n	8002efe <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002ee8:	4b7b      	ldr	r3, [pc, #492]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eee:	f023 020c 	bic.w	r2, r3, #12
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ef6:	4978      	ldr	r1, [pc, #480]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ef8:	4313      	orrs	r3, r2
 8002efa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d00a      	beq.n	8002f20 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002f0a:	4b73      	ldr	r3, [pc, #460]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f0c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f10:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f18:	496f      	ldr	r1, [pc, #444]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f1a:	4313      	orrs	r3, r2
 8002f1c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d00a      	beq.n	8002f42 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f2c:	4b6a      	ldr	r3, [pc, #424]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f32:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002f3a:	4967      	ldr	r1, [pc, #412]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f3c:	4313      	orrs	r3, r2
 8002f3e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d00a      	beq.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002f4e:	4b62      	ldr	r3, [pc, #392]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002f5c:	495e      	ldr	r1, [pc, #376]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d00a      	beq.n	8002f86 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f76:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f7e:	4956      	ldr	r1, [pc, #344]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f80:	4313      	orrs	r3, r2
 8002f82:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d00a      	beq.n	8002fa8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002f92:	4b51      	ldr	r3, [pc, #324]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002f98:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa0:	494d      	ldr	r1, [pc, #308]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fa2:	4313      	orrs	r3, r2
 8002fa4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d028      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002fb4:	4b48      	ldr	r3, [pc, #288]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fba:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	4945      	ldr	r1, [pc, #276]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fc4:	4313      	orrs	r3, r2
 8002fc6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002fd2:	d106      	bne.n	8002fe2 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002fd4:	4b40      	ldr	r3, [pc, #256]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fd6:	68db      	ldr	r3, [r3, #12]
 8002fd8:	4a3f      	ldr	r2, [pc, #252]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002fda:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002fde:	60d3      	str	r3, [r2, #12]
 8002fe0:	e011      	b.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002fea:	d10c      	bne.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	3304      	adds	r3, #4
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	f000 f882 	bl	80030fc <RCCEx_PLLSAI1_Config>
 8002ff8:	4603      	mov	r3, r0
 8002ffa:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002ffc:	7cfb      	ldrb	r3, [r7, #19]
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d001      	beq.n	8003006 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8003002:	7cfb      	ldrb	r3, [r7, #19]
 8003004:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800300e:	2b00      	cmp	r3, #0
 8003010:	d028      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8003012:	4b31      	ldr	r3, [pc, #196]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003018:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003020:	492d      	ldr	r1, [pc, #180]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003022:	4313      	orrs	r3, r2
 8003024:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003030:	d106      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003032:	4b29      	ldr	r3, [pc, #164]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003034:	68db      	ldr	r3, [r3, #12]
 8003036:	4a28      	ldr	r2, [pc, #160]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003038:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800303c:	60d3      	str	r3, [r2, #12]
 800303e:	e011      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003044:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003048:	d10c      	bne.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	3304      	adds	r3, #4
 800304e:	2101      	movs	r1, #1
 8003050:	4618      	mov	r0, r3
 8003052:	f000 f853 	bl	80030fc <RCCEx_PLLSAI1_Config>
 8003056:	4603      	mov	r3, r0
 8003058:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800305a:	7cfb      	ldrb	r3, [r7, #19]
 800305c:	2b00      	cmp	r3, #0
 800305e:	d001      	beq.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8003060:	7cfb      	ldrb	r3, [r7, #19]
 8003062:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800306c:	2b00      	cmp	r3, #0
 800306e:	d01c      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003072:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003076:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800307e:	4916      	ldr	r1, [pc, #88]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8003080:	4313      	orrs	r3, r2
 8003082:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800308a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800308e:	d10c      	bne.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	3304      	adds	r3, #4
 8003094:	2102      	movs	r1, #2
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f830 	bl	80030fc <RCCEx_PLLSAI1_Config>
 800309c:	4603      	mov	r3, r0
 800309e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80030a0:	7cfb      	ldrb	r3, [r7, #19]
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d001      	beq.n	80030aa <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80030a6:	7cfb      	ldrb	r3, [r7, #19]
 80030a8:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d00a      	beq.n	80030cc <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80030b6:	4b08      	ldr	r3, [pc, #32]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80030bc:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80030c4:	4904      	ldr	r1, [pc, #16]	; (80030d8 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80030c6:	4313      	orrs	r3, r2
 80030c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80030cc:	7cbb      	ldrb	r3, [r7, #18]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	3718      	adds	r7, #24
 80030d2:	46bd      	mov	sp, r7
 80030d4:	bd80      	pop	{r7, pc}
 80030d6:	bf00      	nop
 80030d8:	40021000 	.word	0x40021000

080030dc <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80030e0:	4b05      	ldr	r3, [pc, #20]	; (80030f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a04      	ldr	r2, [pc, #16]	; (80030f8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80030e6:	f043 0304 	orr.w	r3, r3, #4
 80030ea:	6013      	str	r3, [r2, #0]
}
 80030ec:	bf00      	nop
 80030ee:	46bd      	mov	sp, r7
 80030f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f4:	4770      	bx	lr
 80030f6:	bf00      	nop
 80030f8:	40021000 	.word	0x40021000

080030fc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80030fc:	b580      	push	{r7, lr}
 80030fe:	b084      	sub	sp, #16
 8003100:	af00      	add	r7, sp, #0
 8003102:	6078      	str	r0, [r7, #4]
 8003104:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800310a:	4b74      	ldr	r3, [pc, #464]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f003 0303 	and.w	r3, r3, #3
 8003112:	2b00      	cmp	r3, #0
 8003114:	d018      	beq.n	8003148 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003116:	4b71      	ldr	r3, [pc, #452]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003118:	68db      	ldr	r3, [r3, #12]
 800311a:	f003 0203 	and.w	r2, r3, #3
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	429a      	cmp	r2, r3
 8003124:	d10d      	bne.n	8003142 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
       ||
 800312a:	2b00      	cmp	r3, #0
 800312c:	d009      	beq.n	8003142 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800312e:	4b6b      	ldr	r3, [pc, #428]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003130:	68db      	ldr	r3, [r3, #12]
 8003132:	091b      	lsrs	r3, r3, #4
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	685b      	ldr	r3, [r3, #4]
       ||
 800313e:	429a      	cmp	r2, r3
 8003140:	d047      	beq.n	80031d2 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	73fb      	strb	r3, [r7, #15]
 8003146:	e044      	b.n	80031d2 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	2b03      	cmp	r3, #3
 800314e:	d018      	beq.n	8003182 <RCCEx_PLLSAI1_Config+0x86>
 8003150:	2b03      	cmp	r3, #3
 8003152:	d825      	bhi.n	80031a0 <RCCEx_PLLSAI1_Config+0xa4>
 8003154:	2b01      	cmp	r3, #1
 8003156:	d002      	beq.n	800315e <RCCEx_PLLSAI1_Config+0x62>
 8003158:	2b02      	cmp	r3, #2
 800315a:	d009      	beq.n	8003170 <RCCEx_PLLSAI1_Config+0x74>
 800315c:	e020      	b.n	80031a0 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800315e:	4b5f      	ldr	r3, [pc, #380]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d11d      	bne.n	80031a6 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800316e:	e01a      	b.n	80031a6 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003170:	4b5a      	ldr	r3, [pc, #360]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003178:	2b00      	cmp	r3, #0
 800317a:	d116      	bne.n	80031aa <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 800317c:	2301      	movs	r3, #1
 800317e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003180:	e013      	b.n	80031aa <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003182:	4b56      	ldr	r3, [pc, #344]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10f      	bne.n	80031ae <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800318e:	4b53      	ldr	r3, [pc, #332]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003196:	2b00      	cmp	r3, #0
 8003198:	d109      	bne.n	80031ae <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800319a:	2301      	movs	r3, #1
 800319c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800319e:	e006      	b.n	80031ae <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80031a0:	2301      	movs	r3, #1
 80031a2:	73fb      	strb	r3, [r7, #15]
      break;
 80031a4:	e004      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031a6:	bf00      	nop
 80031a8:	e002      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031aa:	bf00      	nop
 80031ac:	e000      	b.n	80031b0 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80031ae:	bf00      	nop
    }

    if(status == HAL_OK)
 80031b0:	7bfb      	ldrb	r3, [r7, #15]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d10d      	bne.n	80031d2 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80031b6:	4b49      	ldr	r3, [pc, #292]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6819      	ldr	r1, [r3, #0]
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	685b      	ldr	r3, [r3, #4]
 80031c6:	3b01      	subs	r3, #1
 80031c8:	011b      	lsls	r3, r3, #4
 80031ca:	430b      	orrs	r3, r1
 80031cc:	4943      	ldr	r1, [pc, #268]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031ce:	4313      	orrs	r3, r2
 80031d0:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80031d2:	7bfb      	ldrb	r3, [r7, #15]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d17c      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80031d8:	4b40      	ldr	r3, [pc, #256]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	4a3f      	ldr	r2, [pc, #252]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80031de:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80031e2:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80031e4:	f7fe fc36 	bl	8001a54 <HAL_GetTick>
 80031e8:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80031ea:	e009      	b.n	8003200 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80031ec:	f7fe fc32 	bl	8001a54 <HAL_GetTick>
 80031f0:	4602      	mov	r2, r0
 80031f2:	68bb      	ldr	r3, [r7, #8]
 80031f4:	1ad3      	subs	r3, r2, r3
 80031f6:	2b02      	cmp	r3, #2
 80031f8:	d902      	bls.n	8003200 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80031fa:	2303      	movs	r3, #3
 80031fc:	73fb      	strb	r3, [r7, #15]
        break;
 80031fe:	e005      	b.n	800320c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003200:	4b36      	ldr	r3, [pc, #216]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d1ef      	bne.n	80031ec <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800320c:	7bfb      	ldrb	r3, [r7, #15]
 800320e:	2b00      	cmp	r3, #0
 8003210:	d15f      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	2b00      	cmp	r3, #0
 8003216:	d110      	bne.n	800323a <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003218:	4b30      	ldr	r3, [pc, #192]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800321a:	691b      	ldr	r3, [r3, #16]
 800321c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8003220:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	6892      	ldr	r2, [r2, #8]
 8003228:	0211      	lsls	r1, r2, #8
 800322a:	687a      	ldr	r2, [r7, #4]
 800322c:	68d2      	ldr	r2, [r2, #12]
 800322e:	06d2      	lsls	r2, r2, #27
 8003230:	430a      	orrs	r2, r1
 8003232:	492a      	ldr	r1, [pc, #168]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003234:	4313      	orrs	r3, r2
 8003236:	610b      	str	r3, [r1, #16]
 8003238:	e027      	b.n	800328a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800323a:	683b      	ldr	r3, [r7, #0]
 800323c:	2b01      	cmp	r3, #1
 800323e:	d112      	bne.n	8003266 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003240:	4b26      	ldr	r3, [pc, #152]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003242:	691b      	ldr	r3, [r3, #16]
 8003244:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8003248:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800324c:	687a      	ldr	r2, [r7, #4]
 800324e:	6892      	ldr	r2, [r2, #8]
 8003250:	0211      	lsls	r1, r2, #8
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	6912      	ldr	r2, [r2, #16]
 8003256:	0852      	lsrs	r2, r2, #1
 8003258:	3a01      	subs	r2, #1
 800325a:	0552      	lsls	r2, r2, #21
 800325c:	430a      	orrs	r2, r1
 800325e:	491f      	ldr	r1, [pc, #124]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003260:	4313      	orrs	r3, r2
 8003262:	610b      	str	r3, [r1, #16]
 8003264:	e011      	b.n	800328a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003266:	4b1d      	ldr	r3, [pc, #116]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003268:	691b      	ldr	r3, [r3, #16]
 800326a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800326e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6892      	ldr	r2, [r2, #8]
 8003276:	0211      	lsls	r1, r2, #8
 8003278:	687a      	ldr	r2, [r7, #4]
 800327a:	6952      	ldr	r2, [r2, #20]
 800327c:	0852      	lsrs	r2, r2, #1
 800327e:	3a01      	subs	r2, #1
 8003280:	0652      	lsls	r2, r2, #25
 8003282:	430a      	orrs	r2, r1
 8003284:	4915      	ldr	r1, [pc, #84]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003286:	4313      	orrs	r3, r2
 8003288:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800328a:	4b14      	ldr	r3, [pc, #80]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4a13      	ldr	r2, [pc, #76]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 8003290:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003294:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003296:	f7fe fbdd 	bl	8001a54 <HAL_GetTick>
 800329a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800329c:	e009      	b.n	80032b2 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800329e:	f7fe fbd9 	bl	8001a54 <HAL_GetTick>
 80032a2:	4602      	mov	r2, r0
 80032a4:	68bb      	ldr	r3, [r7, #8]
 80032a6:	1ad3      	subs	r3, r2, r3
 80032a8:	2b02      	cmp	r3, #2
 80032aa:	d902      	bls.n	80032b2 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80032ac:	2303      	movs	r3, #3
 80032ae:	73fb      	strb	r3, [r7, #15]
          break;
 80032b0:	e005      	b.n	80032be <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80032b2:	4b0a      	ldr	r3, [pc, #40]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d0ef      	beq.n	800329e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80032be:	7bfb      	ldrb	r3, [r7, #15]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d106      	bne.n	80032d2 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80032c4:	4b05      	ldr	r3, [pc, #20]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032c6:	691a      	ldr	r2, [r3, #16]
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	699b      	ldr	r3, [r3, #24]
 80032cc:	4903      	ldr	r1, [pc, #12]	; (80032dc <RCCEx_PLLSAI1_Config+0x1e0>)
 80032ce:	4313      	orrs	r3, r2
 80032d0:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80032d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d4:	4618      	mov	r0, r3
 80032d6:	3710      	adds	r7, #16
 80032d8:	46bd      	mov	sp, r7
 80032da:	bd80      	pop	{r7, pc}
 80032dc:	40021000 	.word	0x40021000

080032e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	b082      	sub	sp, #8
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d101      	bne.n	80032f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	e049      	b.n	8003386 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032f8:	b2db      	uxtb	r3, r3
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d106      	bne.n	800330c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2200      	movs	r2, #0
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003306:	6878      	ldr	r0, [r7, #4]
 8003308:	f000 f841 	bl	800338e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	2202      	movs	r2, #2
 8003310:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3304      	adds	r3, #4
 800331c:	4619      	mov	r1, r3
 800331e:	4610      	mov	r0, r2
 8003320:	f000 f9dc 	bl	80036dc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2201      	movs	r2, #1
 8003328:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003384:	2300      	movs	r3, #0
}
 8003386:	4618      	mov	r0, r3
 8003388:	3708      	adds	r7, #8
 800338a:	46bd      	mov	sp, r7
 800338c:	bd80      	pop	{r7, pc}

0800338e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800338e:	b480      	push	{r7}
 8003390:	b083      	sub	sp, #12
 8003392:	af00      	add	r7, sp, #0
 8003394:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003396:	bf00      	nop
 8003398:	370c      	adds	r7, #12
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
	...

080033a4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80033a4:	b480      	push	{r7}
 80033a6:	b085      	sub	sp, #20
 80033a8:	af00      	add	r7, sp, #0
 80033aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033b2:	b2db      	uxtb	r3, r3
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d001      	beq.n	80033bc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e03b      	b.n	8003434 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	2202      	movs	r2, #2
 80033c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68da      	ldr	r2, [r3, #12]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0201 	orr.w	r2, r2, #1
 80033d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a19      	ldr	r2, [pc, #100]	; (8003440 <HAL_TIM_Base_Start_IT+0x9c>)
 80033da:	4293      	cmp	r3, r2
 80033dc:	d009      	beq.n	80033f2 <HAL_TIM_Base_Start_IT+0x4e>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033e6:	d004      	beq.n	80033f2 <HAL_TIM_Base_Start_IT+0x4e>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4a15      	ldr	r2, [pc, #84]	; (8003444 <HAL_TIM_Base_Start_IT+0xa0>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d115      	bne.n	800341e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	689a      	ldr	r2, [r3, #8]
 80033f8:	4b13      	ldr	r3, [pc, #76]	; (8003448 <HAL_TIM_Base_Start_IT+0xa4>)
 80033fa:	4013      	ands	r3, r2
 80033fc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	2b06      	cmp	r3, #6
 8003402:	d015      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x8c>
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800340a:	d011      	beq.n	8003430 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f042 0201 	orr.w	r2, r2, #1
 800341a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800341c:	e008      	b.n	8003430 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	681a      	ldr	r2, [r3, #0]
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f042 0201 	orr.w	r2, r2, #1
 800342c:	601a      	str	r2, [r3, #0]
 800342e:	e000      	b.n	8003432 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003430:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003432:	2300      	movs	r3, #0
}
 8003434:	4618      	mov	r0, r3
 8003436:	3714      	adds	r7, #20
 8003438:	46bd      	mov	sp, r7
 800343a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343e:	4770      	bx	lr
 8003440:	40012c00 	.word	0x40012c00
 8003444:	40014000 	.word	0x40014000
 8003448:	00010007 	.word	0x00010007

0800344c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b082      	sub	sp, #8
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	691b      	ldr	r3, [r3, #16]
 800345a:	f003 0302 	and.w	r3, r3, #2
 800345e:	2b02      	cmp	r3, #2
 8003460:	d122      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	68db      	ldr	r3, [r3, #12]
 8003468:	f003 0302 	and.w	r3, r3, #2
 800346c:	2b02      	cmp	r3, #2
 800346e:	d11b      	bne.n	80034a8 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f06f 0202 	mvn.w	r2, #2
 8003478:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2201      	movs	r2, #1
 800347e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	699b      	ldr	r3, [r3, #24]
 8003486:	f003 0303 	and.w	r3, r3, #3
 800348a:	2b00      	cmp	r3, #0
 800348c:	d003      	beq.n	8003496 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800348e:	6878      	ldr	r0, [r7, #4]
 8003490:	f000 f905 	bl	800369e <HAL_TIM_IC_CaptureCallback>
 8003494:	e005      	b.n	80034a2 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f8f7 	bl	800368a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800349c:	6878      	ldr	r0, [r7, #4]
 800349e:	f000 f908 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	2200      	movs	r2, #0
 80034a6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	f003 0304 	and.w	r3, r3, #4
 80034b2:	2b04      	cmp	r3, #4
 80034b4:	d122      	bne.n	80034fc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	68db      	ldr	r3, [r3, #12]
 80034bc:	f003 0304 	and.w	r3, r3, #4
 80034c0:	2b04      	cmp	r3, #4
 80034c2:	d11b      	bne.n	80034fc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f06f 0204 	mvn.w	r2, #4
 80034cc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2202      	movs	r2, #2
 80034d2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	699b      	ldr	r3, [r3, #24]
 80034da:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d003      	beq.n	80034ea <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80034e2:	6878      	ldr	r0, [r7, #4]
 80034e4:	f000 f8db 	bl	800369e <HAL_TIM_IC_CaptureCallback>
 80034e8:	e005      	b.n	80034f6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80034ea:	6878      	ldr	r0, [r7, #4]
 80034ec:	f000 f8cd 	bl	800368a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034f0:	6878      	ldr	r0, [r7, #4]
 80034f2:	f000 f8de 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	2200      	movs	r2, #0
 80034fa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	691b      	ldr	r3, [r3, #16]
 8003502:	f003 0308 	and.w	r3, r3, #8
 8003506:	2b08      	cmp	r3, #8
 8003508:	d122      	bne.n	8003550 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f003 0308 	and.w	r3, r3, #8
 8003514:	2b08      	cmp	r3, #8
 8003516:	d11b      	bne.n	8003550 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f06f 0208 	mvn.w	r2, #8
 8003520:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2204      	movs	r2, #4
 8003526:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	69db      	ldr	r3, [r3, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	2b00      	cmp	r3, #0
 8003534:	d003      	beq.n	800353e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003536:	6878      	ldr	r0, [r7, #4]
 8003538:	f000 f8b1 	bl	800369e <HAL_TIM_IC_CaptureCallback>
 800353c:	e005      	b.n	800354a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800353e:	6878      	ldr	r0, [r7, #4]
 8003540:	f000 f8a3 	bl	800368a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003544:	6878      	ldr	r0, [r7, #4]
 8003546:	f000 f8b4 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	691b      	ldr	r3, [r3, #16]
 8003556:	f003 0310 	and.w	r3, r3, #16
 800355a:	2b10      	cmp	r3, #16
 800355c:	d122      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	68db      	ldr	r3, [r3, #12]
 8003564:	f003 0310 	and.w	r3, r3, #16
 8003568:	2b10      	cmp	r3, #16
 800356a:	d11b      	bne.n	80035a4 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f06f 0210 	mvn.w	r2, #16
 8003574:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2208      	movs	r2, #8
 800357a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003586:	2b00      	cmp	r3, #0
 8003588:	d003      	beq.n	8003592 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800358a:	6878      	ldr	r0, [r7, #4]
 800358c:	f000 f887 	bl	800369e <HAL_TIM_IC_CaptureCallback>
 8003590:	e005      	b.n	800359e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 f879 	bl	800368a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003598:	6878      	ldr	r0, [r7, #4]
 800359a:	f000 f88a 	bl	80036b2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2200      	movs	r2, #0
 80035a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	691b      	ldr	r3, [r3, #16]
 80035aa:	f003 0301 	and.w	r3, r3, #1
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d10e      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d107      	bne.n	80035d0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f06f 0201 	mvn.w	r2, #1
 80035c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80035ca:	6878      	ldr	r0, [r7, #4]
 80035cc:	f7fd fd7e 	bl	80010cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035da:	2b80      	cmp	r3, #128	; 0x80
 80035dc:	d10e      	bne.n	80035fc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	68db      	ldr	r3, [r3, #12]
 80035e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80035e8:	2b80      	cmp	r3, #128	; 0x80
 80035ea:	d107      	bne.n	80035fc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80035f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80035f6:	6878      	ldr	r0, [r7, #4]
 80035f8:	f000 f8de 	bl	80037b8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	691b      	ldr	r3, [r3, #16]
 8003602:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003606:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800360a:	d10e      	bne.n	800362a <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	68db      	ldr	r3, [r3, #12]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d107      	bne.n	800362a <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003622:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003624:	6878      	ldr	r0, [r7, #4]
 8003626:	f000 f8d1 	bl	80037cc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	691b      	ldr	r3, [r3, #16]
 8003630:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003634:	2b40      	cmp	r3, #64	; 0x40
 8003636:	d10e      	bne.n	8003656 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	68db      	ldr	r3, [r3, #12]
 800363e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003642:	2b40      	cmp	r3, #64	; 0x40
 8003644:	d107      	bne.n	8003656 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800364e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003650:	6878      	ldr	r0, [r7, #4]
 8003652:	f000 f838 	bl	80036c6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	691b      	ldr	r3, [r3, #16]
 800365c:	f003 0320 	and.w	r3, r3, #32
 8003660:	2b20      	cmp	r3, #32
 8003662:	d10e      	bne.n	8003682 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	68db      	ldr	r3, [r3, #12]
 800366a:	f003 0320 	and.w	r3, r3, #32
 800366e:	2b20      	cmp	r3, #32
 8003670:	d107      	bne.n	8003682 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f06f 0220 	mvn.w	r2, #32
 800367a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800367c:	6878      	ldr	r0, [r7, #4]
 800367e:	f000 f891 	bl	80037a4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003682:	bf00      	nop
 8003684:	3708      	adds	r7, #8
 8003686:	46bd      	mov	sp, r7
 8003688:	bd80      	pop	{r7, pc}

0800368a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800368a:	b480      	push	{r7}
 800368c:	b083      	sub	sp, #12
 800368e:	af00      	add	r7, sp, #0
 8003690:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003692:	bf00      	nop
 8003694:	370c      	adds	r7, #12
 8003696:	46bd      	mov	sp, r7
 8003698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800369c:	4770      	bx	lr

0800369e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800369e:	b480      	push	{r7}
 80036a0:	b083      	sub	sp, #12
 80036a2:	af00      	add	r7, sp, #0
 80036a4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80036a6:	bf00      	nop
 80036a8:	370c      	adds	r7, #12
 80036aa:	46bd      	mov	sp, r7
 80036ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b0:	4770      	bx	lr

080036b2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80036b2:	b480      	push	{r7}
 80036b4:	b083      	sub	sp, #12
 80036b6:	af00      	add	r7, sp, #0
 80036b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80036ba:	bf00      	nop
 80036bc:	370c      	adds	r7, #12
 80036be:	46bd      	mov	sp, r7
 80036c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c4:	4770      	bx	lr

080036c6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80036c6:	b480      	push	{r7}
 80036c8:	b083      	sub	sp, #12
 80036ca:	af00      	add	r7, sp, #0
 80036cc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80036ce:	bf00      	nop
 80036d0:	370c      	adds	r7, #12
 80036d2:	46bd      	mov	sp, r7
 80036d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d8:	4770      	bx	lr
	...

080036dc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	4a2a      	ldr	r2, [pc, #168]	; (8003798 <TIM_Base_SetConfig+0xbc>)
 80036f0:	4293      	cmp	r3, r2
 80036f2:	d003      	beq.n	80036fc <TIM_Base_SetConfig+0x20>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036fa:	d108      	bne.n	800370e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003702:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	68fa      	ldr	r2, [r7, #12]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	4a21      	ldr	r2, [pc, #132]	; (8003798 <TIM_Base_SetConfig+0xbc>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00b      	beq.n	800372e <TIM_Base_SetConfig+0x52>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800371c:	d007      	beq.n	800372e <TIM_Base_SetConfig+0x52>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a1e      	ldr	r2, [pc, #120]	; (800379c <TIM_Base_SetConfig+0xc0>)
 8003722:	4293      	cmp	r3, r2
 8003724:	d003      	beq.n	800372e <TIM_Base_SetConfig+0x52>
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	4a1d      	ldr	r2, [pc, #116]	; (80037a0 <TIM_Base_SetConfig+0xc4>)
 800372a:	4293      	cmp	r3, r2
 800372c:	d108      	bne.n	8003740 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003734:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	68db      	ldr	r3, [r3, #12]
 800373a:	68fa      	ldr	r2, [r7, #12]
 800373c:	4313      	orrs	r3, r2
 800373e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	695b      	ldr	r3, [r3, #20]
 800374a:	4313      	orrs	r3, r2
 800374c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	68fa      	ldr	r2, [r7, #12]
 8003752:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	689a      	ldr	r2, [r3, #8]
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	681a      	ldr	r2, [r3, #0]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	4a0c      	ldr	r2, [pc, #48]	; (8003798 <TIM_Base_SetConfig+0xbc>)
 8003768:	4293      	cmp	r3, r2
 800376a:	d007      	beq.n	800377c <TIM_Base_SetConfig+0xa0>
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	4a0b      	ldr	r2, [pc, #44]	; (800379c <TIM_Base_SetConfig+0xc0>)
 8003770:	4293      	cmp	r3, r2
 8003772:	d003      	beq.n	800377c <TIM_Base_SetConfig+0xa0>
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	4a0a      	ldr	r2, [pc, #40]	; (80037a0 <TIM_Base_SetConfig+0xc4>)
 8003778:	4293      	cmp	r3, r2
 800377a:	d103      	bne.n	8003784 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	691a      	ldr	r2, [r3, #16]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2201      	movs	r2, #1
 8003788:	615a      	str	r2, [r3, #20]
}
 800378a:	bf00      	nop
 800378c:	3714      	adds	r7, #20
 800378e:	46bd      	mov	sp, r7
 8003790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003794:	4770      	bx	lr
 8003796:	bf00      	nop
 8003798:	40012c00 	.word	0x40012c00
 800379c:	40014000 	.word	0x40014000
 80037a0:	40014400 	.word	0x40014400

080037a4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80037a4:	b480      	push	{r7}
 80037a6:	b083      	sub	sp, #12
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037ac:	bf00      	nop
 80037ae:	370c      	adds	r7, #12
 80037b0:	46bd      	mov	sp, r7
 80037b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b6:	4770      	bx	lr

080037b8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037b8:	b480      	push	{r7}
 80037ba:	b083      	sub	sp, #12
 80037bc:	af00      	add	r7, sp, #0
 80037be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037c0:	bf00      	nop
 80037c2:	370c      	adds	r7, #12
 80037c4:	46bd      	mov	sp, r7
 80037c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ca:	4770      	bx	lr

080037cc <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80037cc:	b480      	push	{r7}
 80037ce:	b083      	sub	sp, #12
 80037d0:	af00      	add	r7, sp, #0
 80037d2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80037d4:	bf00      	nop
 80037d6:	370c      	adds	r7, #12
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr

080037e0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80037e0:	b580      	push	{r7, lr}
 80037e2:	b082      	sub	sp, #8
 80037e4:	af00      	add	r7, sp, #0
 80037e6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e040      	b.n	8003874 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fe f866 	bl	80018d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2224      	movs	r2, #36	; 0x24
 800380c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681a      	ldr	r2, [r3, #0]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	f022 0201 	bic.w	r2, r2, #1
 800381c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f000 f8c0 	bl	80039a4 <UART_SetConfig>
 8003824:	4603      	mov	r3, r0
 8003826:	2b01      	cmp	r3, #1
 8003828:	d101      	bne.n	800382e <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800382a:	2301      	movs	r3, #1
 800382c:	e022      	b.n	8003874 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003832:	2b00      	cmp	r3, #0
 8003834:	d002      	beq.n	800383c <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003836:	6878      	ldr	r0, [r7, #4]
 8003838:	f000 fae0 	bl	8003dfc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	685a      	ldr	r2, [r3, #4]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800384a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	689a      	ldr	r2, [r3, #8]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800385a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800386c:	6878      	ldr	r0, [r7, #4]
 800386e:	f000 fb67 	bl	8003f40 <UART_CheckIdleState>
 8003872:	4603      	mov	r3, r0
}
 8003874:	4618      	mov	r0, r3
 8003876:	3708      	adds	r7, #8
 8003878:	46bd      	mov	sp, r7
 800387a:	bd80      	pop	{r7, pc}

0800387c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b08a      	sub	sp, #40	; 0x28
 8003880:	af02      	add	r7, sp, #8
 8003882:	60f8      	str	r0, [r7, #12]
 8003884:	60b9      	str	r1, [r7, #8]
 8003886:	603b      	str	r3, [r7, #0]
 8003888:	4613      	mov	r3, r2
 800388a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003890:	2b20      	cmp	r3, #32
 8003892:	f040 8082 	bne.w	800399a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003896:	68bb      	ldr	r3, [r7, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d002      	beq.n	80038a2 <HAL_UART_Transmit+0x26>
 800389c:	88fb      	ldrh	r3, [r7, #6]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e07a      	b.n	800399c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80038ac:	2b01      	cmp	r3, #1
 80038ae:	d101      	bne.n	80038b4 <HAL_UART_Transmit+0x38>
 80038b0:	2302      	movs	r3, #2
 80038b2:	e073      	b.n	800399c <HAL_UART_Transmit+0x120>
 80038b4:	68fb      	ldr	r3, [r7, #12]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	2200      	movs	r2, #0
 80038c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	2221      	movs	r2, #33	; 0x21
 80038c8:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80038ca:	f7fe f8c3 	bl	8001a54 <HAL_GetTick>
 80038ce:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	88fa      	ldrh	r2, [r7, #6]
 80038d4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	88fa      	ldrh	r2, [r7, #6]
 80038dc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	689b      	ldr	r3, [r3, #8]
 80038e4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80038e8:	d108      	bne.n	80038fc <HAL_UART_Transmit+0x80>
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	691b      	ldr	r3, [r3, #16]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d104      	bne.n	80038fc <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 80038f2:	2300      	movs	r3, #0
 80038f4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80038f6:	68bb      	ldr	r3, [r7, #8]
 80038f8:	61bb      	str	r3, [r7, #24]
 80038fa:	e003      	b.n	8003904 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	2200      	movs	r2, #0
 8003908:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 800390c:	e02d      	b.n	800396a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800390e:	683b      	ldr	r3, [r7, #0]
 8003910:	9300      	str	r3, [sp, #0]
 8003912:	697b      	ldr	r3, [r7, #20]
 8003914:	2200      	movs	r2, #0
 8003916:	2180      	movs	r1, #128	; 0x80
 8003918:	68f8      	ldr	r0, [r7, #12]
 800391a:	f000 fb5a 	bl	8003fd2 <UART_WaitOnFlagUntilTimeout>
 800391e:	4603      	mov	r3, r0
 8003920:	2b00      	cmp	r3, #0
 8003922:	d001      	beq.n	8003928 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003924:	2303      	movs	r3, #3
 8003926:	e039      	b.n	800399c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	2b00      	cmp	r3, #0
 800392c:	d10b      	bne.n	8003946 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	881a      	ldrh	r2, [r3, #0]
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800393a:	b292      	uxth	r2, r2
 800393c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	3302      	adds	r3, #2
 8003942:	61bb      	str	r3, [r7, #24]
 8003944:	e008      	b.n	8003958 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003946:	69fb      	ldr	r3, [r7, #28]
 8003948:	781a      	ldrb	r2, [r3, #0]
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	b292      	uxth	r2, r2
 8003950:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003952:	69fb      	ldr	r3, [r7, #28]
 8003954:	3301      	adds	r3, #1
 8003956:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800395e:	b29b      	uxth	r3, r3
 8003960:	3b01      	subs	r3, #1
 8003962:	b29a      	uxth	r2, r3
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003970:	b29b      	uxth	r3, r3
 8003972:	2b00      	cmp	r3, #0
 8003974:	d1cb      	bne.n	800390e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003976:	683b      	ldr	r3, [r7, #0]
 8003978:	9300      	str	r3, [sp, #0]
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	2200      	movs	r2, #0
 800397e:	2140      	movs	r1, #64	; 0x40
 8003980:	68f8      	ldr	r0, [r7, #12]
 8003982:	f000 fb26 	bl	8003fd2 <UART_WaitOnFlagUntilTimeout>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d001      	beq.n	8003990 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800398c:	2303      	movs	r3, #3
 800398e:	e005      	b.n	800399c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2220      	movs	r2, #32
 8003994:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003996:	2300      	movs	r3, #0
 8003998:	e000      	b.n	800399c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800399a:	2302      	movs	r3, #2
  }
}
 800399c:	4618      	mov	r0, r3
 800399e:	3720      	adds	r7, #32
 80039a0:	46bd      	mov	sp, r7
 80039a2:	bd80      	pop	{r7, pc}

080039a4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80039a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80039a8:	b08a      	sub	sp, #40	; 0x28
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80039ae:	2300      	movs	r3, #0
 80039b0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	689a      	ldr	r2, [r3, #8]
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	691b      	ldr	r3, [r3, #16]
 80039bc:	431a      	orrs	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	695b      	ldr	r3, [r3, #20]
 80039c2:	431a      	orrs	r2, r3
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	69db      	ldr	r3, [r3, #28]
 80039c8:	4313      	orrs	r3, r2
 80039ca:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	681a      	ldr	r2, [r3, #0]
 80039d2:	4bb4      	ldr	r3, [pc, #720]	; (8003ca4 <UART_SetConfig+0x300>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	68fa      	ldr	r2, [r7, #12]
 80039d8:	6812      	ldr	r2, [r2, #0]
 80039da:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80039dc:	430b      	orrs	r3, r1
 80039de:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	685b      	ldr	r3, [r3, #4]
 80039e6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	68da      	ldr	r2, [r3, #12]
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	430a      	orrs	r2, r1
 80039f4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	699b      	ldr	r3, [r3, #24]
 80039fa:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	4aa9      	ldr	r2, [pc, #676]	; (8003ca8 <UART_SetConfig+0x304>)
 8003a02:	4293      	cmp	r3, r2
 8003a04:	d004      	beq.n	8003a10 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	6a1b      	ldr	r3, [r3, #32]
 8003a0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	689b      	ldr	r3, [r3, #8]
 8003a16:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003a20:	430a      	orrs	r2, r1
 8003a22:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4aa0      	ldr	r2, [pc, #640]	; (8003cac <UART_SetConfig+0x308>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d126      	bne.n	8003a7c <UART_SetConfig+0xd8>
 8003a2e:	4ba0      	ldr	r3, [pc, #640]	; (8003cb0 <UART_SetConfig+0x30c>)
 8003a30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a34:	f003 0303 	and.w	r3, r3, #3
 8003a38:	2b03      	cmp	r3, #3
 8003a3a:	d81b      	bhi.n	8003a74 <UART_SetConfig+0xd0>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <UART_SetConfig+0xa0>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a55 	.word	0x08003a55
 8003a48:	08003a65 	.word	0x08003a65
 8003a4c:	08003a5d 	.word	0x08003a5d
 8003a50:	08003a6d 	.word	0x08003a6d
 8003a54:	2301      	movs	r3, #1
 8003a56:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a5a:	e080      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a62:	e07c      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003a64:	2304      	movs	r3, #4
 8003a66:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a6a:	e078      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003a6c:	2308      	movs	r3, #8
 8003a6e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a72:	e074      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003a74:	2310      	movs	r3, #16
 8003a76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a7a:	e070      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	4a8c      	ldr	r2, [pc, #560]	; (8003cb4 <UART_SetConfig+0x310>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d138      	bne.n	8003af8 <UART_SetConfig+0x154>
 8003a86:	4b8a      	ldr	r3, [pc, #552]	; (8003cb0 <UART_SetConfig+0x30c>)
 8003a88:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003a8c:	f003 030c 	and.w	r3, r3, #12
 8003a90:	2b0c      	cmp	r3, #12
 8003a92:	d82d      	bhi.n	8003af0 <UART_SetConfig+0x14c>
 8003a94:	a201      	add	r2, pc, #4	; (adr r2, 8003a9c <UART_SetConfig+0xf8>)
 8003a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a9a:	bf00      	nop
 8003a9c:	08003ad1 	.word	0x08003ad1
 8003aa0:	08003af1 	.word	0x08003af1
 8003aa4:	08003af1 	.word	0x08003af1
 8003aa8:	08003af1 	.word	0x08003af1
 8003aac:	08003ae1 	.word	0x08003ae1
 8003ab0:	08003af1 	.word	0x08003af1
 8003ab4:	08003af1 	.word	0x08003af1
 8003ab8:	08003af1 	.word	0x08003af1
 8003abc:	08003ad9 	.word	0x08003ad9
 8003ac0:	08003af1 	.word	0x08003af1
 8003ac4:	08003af1 	.word	0x08003af1
 8003ac8:	08003af1 	.word	0x08003af1
 8003acc:	08003ae9 	.word	0x08003ae9
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ad6:	e042      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003ad8:	2302      	movs	r3, #2
 8003ada:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ade:	e03e      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003ae0:	2304      	movs	r3, #4
 8003ae2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ae6:	e03a      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003ae8:	2308      	movs	r3, #8
 8003aea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003aee:	e036      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003af0:	2310      	movs	r3, #16
 8003af2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003af6:	e032      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a6a      	ldr	r2, [pc, #424]	; (8003ca8 <UART_SetConfig+0x304>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d12a      	bne.n	8003b58 <UART_SetConfig+0x1b4>
 8003b02:	4b6b      	ldr	r3, [pc, #428]	; (8003cb0 <UART_SetConfig+0x30c>)
 8003b04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b08:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003b0c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b10:	d01a      	beq.n	8003b48 <UART_SetConfig+0x1a4>
 8003b12:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003b16:	d81b      	bhi.n	8003b50 <UART_SetConfig+0x1ac>
 8003b18:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b1c:	d00c      	beq.n	8003b38 <UART_SetConfig+0x194>
 8003b1e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003b22:	d815      	bhi.n	8003b50 <UART_SetConfig+0x1ac>
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d003      	beq.n	8003b30 <UART_SetConfig+0x18c>
 8003b28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b2c:	d008      	beq.n	8003b40 <UART_SetConfig+0x19c>
 8003b2e:	e00f      	b.n	8003b50 <UART_SetConfig+0x1ac>
 8003b30:	2300      	movs	r3, #0
 8003b32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b36:	e012      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003b38:	2302      	movs	r3, #2
 8003b3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b3e:	e00e      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003b40:	2304      	movs	r3, #4
 8003b42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b46:	e00a      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003b48:	2308      	movs	r3, #8
 8003b4a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b4e:	e006      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003b50:	2310      	movs	r3, #16
 8003b52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003b56:	e002      	b.n	8003b5e <UART_SetConfig+0x1ba>
 8003b58:	2310      	movs	r3, #16
 8003b5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a51      	ldr	r2, [pc, #324]	; (8003ca8 <UART_SetConfig+0x304>)
 8003b64:	4293      	cmp	r3, r2
 8003b66:	d17a      	bne.n	8003c5e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003b68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b6c:	2b08      	cmp	r3, #8
 8003b6e:	d824      	bhi.n	8003bba <UART_SetConfig+0x216>
 8003b70:	a201      	add	r2, pc, #4	; (adr r2, 8003b78 <UART_SetConfig+0x1d4>)
 8003b72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b76:	bf00      	nop
 8003b78:	08003b9d 	.word	0x08003b9d
 8003b7c:	08003bbb 	.word	0x08003bbb
 8003b80:	08003ba5 	.word	0x08003ba5
 8003b84:	08003bbb 	.word	0x08003bbb
 8003b88:	08003bab 	.word	0x08003bab
 8003b8c:	08003bbb 	.word	0x08003bbb
 8003b90:	08003bbb 	.word	0x08003bbb
 8003b94:	08003bbb 	.word	0x08003bbb
 8003b98:	08003bb3 	.word	0x08003bb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b9c:	f7fe ffea 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003ba0:	61f8      	str	r0, [r7, #28]
        break;
 8003ba2:	e010      	b.n	8003bc6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ba4:	4b44      	ldr	r3, [pc, #272]	; (8003cb8 <UART_SetConfig+0x314>)
 8003ba6:	61fb      	str	r3, [r7, #28]
        break;
 8003ba8:	e00d      	b.n	8003bc6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003baa:	f7fe ff4b 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8003bae:	61f8      	str	r0, [r7, #28]
        break;
 8003bb0:	e009      	b.n	8003bc6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003bb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bb6:	61fb      	str	r3, [r7, #28]
        break;
 8003bb8:	e005      	b.n	8003bc6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003bba:	2300      	movs	r3, #0
 8003bbc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003bbe:	2301      	movs	r3, #1
 8003bc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bc4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003bc6:	69fb      	ldr	r3, [r7, #28]
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	f000 8107 	beq.w	8003ddc <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	4613      	mov	r3, r2
 8003bd4:	005b      	lsls	r3, r3, #1
 8003bd6:	4413      	add	r3, r2
 8003bd8:	69fa      	ldr	r2, [r7, #28]
 8003bda:	429a      	cmp	r2, r3
 8003bdc:	d305      	bcc.n	8003bea <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	685b      	ldr	r3, [r3, #4]
 8003be2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003be4:	69fa      	ldr	r2, [r7, #28]
 8003be6:	429a      	cmp	r2, r3
 8003be8:	d903      	bls.n	8003bf2 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003bf0:	e0f4      	b.n	8003ddc <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003bf2:	69fb      	ldr	r3, [r7, #28]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	461c      	mov	r4, r3
 8003bf8:	4615      	mov	r5, r2
 8003bfa:	f04f 0200 	mov.w	r2, #0
 8003bfe:	f04f 0300 	mov.w	r3, #0
 8003c02:	022b      	lsls	r3, r5, #8
 8003c04:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003c08:	0222      	lsls	r2, r4, #8
 8003c0a:	68f9      	ldr	r1, [r7, #12]
 8003c0c:	6849      	ldr	r1, [r1, #4]
 8003c0e:	0849      	lsrs	r1, r1, #1
 8003c10:	2000      	movs	r0, #0
 8003c12:	4688      	mov	r8, r1
 8003c14:	4681      	mov	r9, r0
 8003c16:	eb12 0a08 	adds.w	sl, r2, r8
 8003c1a:	eb43 0b09 	adc.w	fp, r3, r9
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	685b      	ldr	r3, [r3, #4]
 8003c22:	2200      	movs	r2, #0
 8003c24:	603b      	str	r3, [r7, #0]
 8003c26:	607a      	str	r2, [r7, #4]
 8003c28:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003c2c:	4650      	mov	r0, sl
 8003c2e:	4659      	mov	r1, fp
 8003c30:	f7fc ffba 	bl	8000ba8 <__aeabi_uldivmod>
 8003c34:	4602      	mov	r2, r0
 8003c36:	460b      	mov	r3, r1
 8003c38:	4613      	mov	r3, r2
 8003c3a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c42:	d308      	bcc.n	8003c56 <UART_SetConfig+0x2b2>
 8003c44:	69bb      	ldr	r3, [r7, #24]
 8003c46:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003c4a:	d204      	bcs.n	8003c56 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	69ba      	ldr	r2, [r7, #24]
 8003c52:	60da      	str	r2, [r3, #12]
 8003c54:	e0c2      	b.n	8003ddc <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003c56:	2301      	movs	r3, #1
 8003c58:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c5c:	e0be      	b.n	8003ddc <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	69db      	ldr	r3, [r3, #28]
 8003c62:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c66:	d16a      	bne.n	8003d3e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003c68:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c6c:	2b08      	cmp	r3, #8
 8003c6e:	d834      	bhi.n	8003cda <UART_SetConfig+0x336>
 8003c70:	a201      	add	r2, pc, #4	; (adr r2, 8003c78 <UART_SetConfig+0x2d4>)
 8003c72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c76:	bf00      	nop
 8003c78:	08003c9d 	.word	0x08003c9d
 8003c7c:	08003cbd 	.word	0x08003cbd
 8003c80:	08003cc5 	.word	0x08003cc5
 8003c84:	08003cdb 	.word	0x08003cdb
 8003c88:	08003ccb 	.word	0x08003ccb
 8003c8c:	08003cdb 	.word	0x08003cdb
 8003c90:	08003cdb 	.word	0x08003cdb
 8003c94:	08003cdb 	.word	0x08003cdb
 8003c98:	08003cd3 	.word	0x08003cd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c9c:	f7fe ff6a 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003ca0:	61f8      	str	r0, [r7, #28]
        break;
 8003ca2:	e020      	b.n	8003ce6 <UART_SetConfig+0x342>
 8003ca4:	efff69f3 	.word	0xefff69f3
 8003ca8:	40008000 	.word	0x40008000
 8003cac:	40013800 	.word	0x40013800
 8003cb0:	40021000 	.word	0x40021000
 8003cb4:	40004400 	.word	0x40004400
 8003cb8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003cbc:	f7fe ff70 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8003cc0:	61f8      	str	r0, [r7, #28]
        break;
 8003cc2:	e010      	b.n	8003ce6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cc4:	4b4c      	ldr	r3, [pc, #304]	; (8003df8 <UART_SetConfig+0x454>)
 8003cc6:	61fb      	str	r3, [r7, #28]
        break;
 8003cc8:	e00d      	b.n	8003ce6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cca:	f7fe febb 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8003cce:	61f8      	str	r0, [r7, #28]
        break;
 8003cd0:	e009      	b.n	8003ce6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003cd2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003cd6:	61fb      	str	r3, [r7, #28]
        break;
 8003cd8:	e005      	b.n	8003ce6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003cda:	2300      	movs	r3, #0
 8003cdc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ce4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ce6:	69fb      	ldr	r3, [r7, #28]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d077      	beq.n	8003ddc <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003cec:	69fb      	ldr	r3, [r7, #28]
 8003cee:	005a      	lsls	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	685b      	ldr	r3, [r3, #4]
 8003cf4:	085b      	lsrs	r3, r3, #1
 8003cf6:	441a      	add	r2, r3
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	685b      	ldr	r3, [r3, #4]
 8003cfc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d00:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003d02:	69bb      	ldr	r3, [r7, #24]
 8003d04:	2b0f      	cmp	r3, #15
 8003d06:	d916      	bls.n	8003d36 <UART_SetConfig+0x392>
 8003d08:	69bb      	ldr	r3, [r7, #24]
 8003d0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d0e:	d212      	bcs.n	8003d36 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003d10:	69bb      	ldr	r3, [r7, #24]
 8003d12:	b29b      	uxth	r3, r3
 8003d14:	f023 030f 	bic.w	r3, r3, #15
 8003d18:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003d1a:	69bb      	ldr	r3, [r7, #24]
 8003d1c:	085b      	lsrs	r3, r3, #1
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	b29a      	uxth	r2, r3
 8003d26:	8afb      	ldrh	r3, [r7, #22]
 8003d28:	4313      	orrs	r3, r2
 8003d2a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	8afa      	ldrh	r2, [r7, #22]
 8003d32:	60da      	str	r2, [r3, #12]
 8003d34:	e052      	b.n	8003ddc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003d36:	2301      	movs	r3, #1
 8003d38:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d3c:	e04e      	b.n	8003ddc <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003d3e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003d42:	2b08      	cmp	r3, #8
 8003d44:	d827      	bhi.n	8003d96 <UART_SetConfig+0x3f2>
 8003d46:	a201      	add	r2, pc, #4	; (adr r2, 8003d4c <UART_SetConfig+0x3a8>)
 8003d48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d4c:	08003d71 	.word	0x08003d71
 8003d50:	08003d79 	.word	0x08003d79
 8003d54:	08003d81 	.word	0x08003d81
 8003d58:	08003d97 	.word	0x08003d97
 8003d5c:	08003d87 	.word	0x08003d87
 8003d60:	08003d97 	.word	0x08003d97
 8003d64:	08003d97 	.word	0x08003d97
 8003d68:	08003d97 	.word	0x08003d97
 8003d6c:	08003d8f 	.word	0x08003d8f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003d70:	f7fe ff00 	bl	8002b74 <HAL_RCC_GetPCLK1Freq>
 8003d74:	61f8      	str	r0, [r7, #28]
        break;
 8003d76:	e014      	b.n	8003da2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003d78:	f7fe ff12 	bl	8002ba0 <HAL_RCC_GetPCLK2Freq>
 8003d7c:	61f8      	str	r0, [r7, #28]
        break;
 8003d7e:	e010      	b.n	8003da2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003d80:	4b1d      	ldr	r3, [pc, #116]	; (8003df8 <UART_SetConfig+0x454>)
 8003d82:	61fb      	str	r3, [r7, #28]
        break;
 8003d84:	e00d      	b.n	8003da2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003d86:	f7fe fe5d 	bl	8002a44 <HAL_RCC_GetSysClockFreq>
 8003d8a:	61f8      	str	r0, [r7, #28]
        break;
 8003d8c:	e009      	b.n	8003da2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d8e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d92:	61fb      	str	r3, [r7, #28]
        break;
 8003d94:	e005      	b.n	8003da2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003d96:	2300      	movs	r3, #0
 8003d98:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d9a:	2301      	movs	r3, #1
 8003d9c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003da0:	bf00      	nop
    }

    if (pclk != 0U)
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d019      	beq.n	8003ddc <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	685b      	ldr	r3, [r3, #4]
 8003dac:	085a      	lsrs	r2, r3, #1
 8003dae:	69fb      	ldr	r3, [r7, #28]
 8003db0:	441a      	add	r2, r3
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dba:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003dbc:	69bb      	ldr	r3, [r7, #24]
 8003dbe:	2b0f      	cmp	r3, #15
 8003dc0:	d909      	bls.n	8003dd6 <UART_SetConfig+0x432>
 8003dc2:	69bb      	ldr	r3, [r7, #24]
 8003dc4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003dc8:	d205      	bcs.n	8003dd6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	60da      	str	r2, [r3, #12]
 8003dd4:	e002      	b.n	8003ddc <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003dd6:	2301      	movs	r3, #1
 8003dd8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2200      	movs	r2, #0
 8003de0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	2200      	movs	r2, #0
 8003de6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003de8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3728      	adds	r7, #40	; 0x28
 8003df0:	46bd      	mov	sp, r7
 8003df2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003df6:	bf00      	nop
 8003df8:	00f42400 	.word	0x00f42400

08003dfc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b083      	sub	sp, #12
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e08:	f003 0301 	and.w	r3, r3, #1
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00a      	beq.n	8003e26 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	685b      	ldr	r3, [r3, #4]
 8003e16:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	430a      	orrs	r2, r1
 8003e24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d00a      	beq.n	8003e48 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	430a      	orrs	r2, r1
 8003e46:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e4c:	f003 0304 	and.w	r3, r3, #4
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00a      	beq.n	8003e6a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	430a      	orrs	r2, r1
 8003e68:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e6e:	f003 0308 	and.w	r3, r3, #8
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d00a      	beq.n	8003e8c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	685b      	ldr	r3, [r3, #4]
 8003e7c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	430a      	orrs	r2, r1
 8003e8a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d00a      	beq.n	8003eae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003eb2:	f003 0320 	and.w	r3, r3, #32
 8003eb6:	2b00      	cmp	r3, #0
 8003eb8:	d00a      	beq.n	8003ed0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	430a      	orrs	r2, r1
 8003ece:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ed4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d01a      	beq.n	8003f12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	685b      	ldr	r3, [r3, #4]
 8003ee2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	430a      	orrs	r2, r1
 8003ef0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003efa:	d10a      	bne.n	8003f12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	685b      	ldr	r3, [r3, #4]
 8003f02:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	430a      	orrs	r2, r1
 8003f10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d00a      	beq.n	8003f34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	685b      	ldr	r3, [r3, #4]
 8003f24:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	605a      	str	r2, [r3, #4]
  }
}
 8003f34:	bf00      	nop
 8003f36:	370c      	adds	r7, #12
 8003f38:	46bd      	mov	sp, r7
 8003f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3e:	4770      	bx	lr

08003f40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b086      	sub	sp, #24
 8003f44:	af02      	add	r7, sp, #8
 8003f46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2200      	movs	r2, #0
 8003f4c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003f50:	f7fd fd80 	bl	8001a54 <HAL_GetTick>
 8003f54:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f003 0308 	and.w	r3, r3, #8
 8003f60:	2b08      	cmp	r3, #8
 8003f62:	d10e      	bne.n	8003f82 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f64:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f68:	9300      	str	r3, [sp, #0]
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f82d 	bl	8003fd2 <UART_WaitOnFlagUntilTimeout>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d001      	beq.n	8003f82 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003f7e:	2303      	movs	r3, #3
 8003f80:	e023      	b.n	8003fca <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f003 0304 	and.w	r3, r3, #4
 8003f8c:	2b04      	cmp	r3, #4
 8003f8e:	d10e      	bne.n	8003fae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003f90:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003f9e:	6878      	ldr	r0, [r7, #4]
 8003fa0:	f000 f817 	bl	8003fd2 <UART_WaitOnFlagUntilTimeout>
 8003fa4:	4603      	mov	r3, r0
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d001      	beq.n	8003fae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003faa:	2303      	movs	r3, #3
 8003fac:	e00d      	b.n	8003fca <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2220      	movs	r2, #32
 8003fb2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2220      	movs	r2, #32
 8003fb8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	2200      	movs	r2, #0
 8003fc4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003fc8:	2300      	movs	r3, #0
}
 8003fca:	4618      	mov	r0, r3
 8003fcc:	3710      	adds	r7, #16
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bd80      	pop	{r7, pc}

08003fd2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003fd2:	b580      	push	{r7, lr}
 8003fd4:	b09c      	sub	sp, #112	; 0x70
 8003fd6:	af00      	add	r7, sp, #0
 8003fd8:	60f8      	str	r0, [r7, #12]
 8003fda:	60b9      	str	r1, [r7, #8]
 8003fdc:	603b      	str	r3, [r7, #0]
 8003fde:	4613      	mov	r3, r2
 8003fe0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fe2:	e0a5      	b.n	8004130 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fe4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003fe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fea:	f000 80a1 	beq.w	8004130 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fee:	f7fd fd31 	bl	8001a54 <HAL_GetTick>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	1ad3      	subs	r3, r2, r3
 8003ff8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d302      	bcc.n	8004004 <UART_WaitOnFlagUntilTimeout+0x32>
 8003ffe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004000:	2b00      	cmp	r3, #0
 8004002:	d13e      	bne.n	8004082 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800400a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800400c:	e853 3f00 	ldrex	r3, [r3]
 8004010:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004012:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004014:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004018:	667b      	str	r3, [r7, #100]	; 0x64
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	461a      	mov	r2, r3
 8004020:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004022:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004024:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004026:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004028:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800402a:	e841 2300 	strex	r3, r2, [r1]
 800402e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004030:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004032:	2b00      	cmp	r3, #0
 8004034:	d1e6      	bne.n	8004004 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	3308      	adds	r3, #8
 800403c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800403e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004040:	e853 3f00 	ldrex	r3, [r3]
 8004044:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004046:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004048:	f023 0301 	bic.w	r3, r3, #1
 800404c:	663b      	str	r3, [r7, #96]	; 0x60
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	3308      	adds	r3, #8
 8004054:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004056:	64ba      	str	r2, [r7, #72]	; 0x48
 8004058:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800405a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800405c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800405e:	e841 2300 	strex	r3, r2, [r1]
 8004062:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004064:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d1e5      	bne.n	8004036 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2220      	movs	r2, #32
 800406e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2220      	movs	r2, #32
 8004074:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	2200      	movs	r2, #0
 800407a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e067      	b.n	8004152 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f003 0304 	and.w	r3, r3, #4
 800408c:	2b00      	cmp	r3, #0
 800408e:	d04f      	beq.n	8004130 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	69db      	ldr	r3, [r3, #28]
 8004096:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800409a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800409e:	d147      	bne.n	8004130 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80040a8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80040b2:	e853 3f00 	ldrex	r3, [r3]
 80040b6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80040b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ba:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80040be:	66fb      	str	r3, [r7, #108]	; 0x6c
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	461a      	mov	r2, r3
 80040c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80040c8:	637b      	str	r3, [r7, #52]	; 0x34
 80040ca:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040cc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80040ce:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80040d0:	e841 2300 	strex	r3, r2, [r1]
 80040d4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80040d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d1e6      	bne.n	80040aa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	3308      	adds	r3, #8
 80040e2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e4:	697b      	ldr	r3, [r7, #20]
 80040e6:	e853 3f00 	ldrex	r3, [r3]
 80040ea:	613b      	str	r3, [r7, #16]
   return(result);
 80040ec:	693b      	ldr	r3, [r7, #16]
 80040ee:	f023 0301 	bic.w	r3, r3, #1
 80040f2:	66bb      	str	r3, [r7, #104]	; 0x68
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	3308      	adds	r3, #8
 80040fa:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80040fc:	623a      	str	r2, [r7, #32]
 80040fe:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004100:	69f9      	ldr	r1, [r7, #28]
 8004102:	6a3a      	ldr	r2, [r7, #32]
 8004104:	e841 2300 	strex	r3, r2, [r1]
 8004108:	61bb      	str	r3, [r7, #24]
   return(result);
 800410a:	69bb      	ldr	r3, [r7, #24]
 800410c:	2b00      	cmp	r3, #0
 800410e:	d1e5      	bne.n	80040dc <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	2220      	movs	r2, #32
 8004114:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2220      	movs	r2, #32
 800411a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800412c:	2303      	movs	r3, #3
 800412e:	e010      	b.n	8004152 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	69da      	ldr	r2, [r3, #28]
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	4013      	ands	r3, r2
 800413a:	68ba      	ldr	r2, [r7, #8]
 800413c:	429a      	cmp	r2, r3
 800413e:	bf0c      	ite	eq
 8004140:	2301      	moveq	r3, #1
 8004142:	2300      	movne	r3, #0
 8004144:	b2db      	uxtb	r3, r3
 8004146:	461a      	mov	r2, r3
 8004148:	79fb      	ldrb	r3, [r7, #7]
 800414a:	429a      	cmp	r2, r3
 800414c:	f43f af4a 	beq.w	8003fe4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004150:	2300      	movs	r3, #0
}
 8004152:	4618      	mov	r0, r3
 8004154:	3770      	adds	r7, #112	; 0x70
 8004156:	46bd      	mov	sp, r7
 8004158:	bd80      	pop	{r7, pc}
	...

0800415c <__NVIC_SetPriority>:
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	4603      	mov	r3, r0
 8004164:	6039      	str	r1, [r7, #0]
 8004166:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004168:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800416c:	2b00      	cmp	r3, #0
 800416e:	db0a      	blt.n	8004186 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004170:	683b      	ldr	r3, [r7, #0]
 8004172:	b2da      	uxtb	r2, r3
 8004174:	490c      	ldr	r1, [pc, #48]	; (80041a8 <__NVIC_SetPriority+0x4c>)
 8004176:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800417a:	0112      	lsls	r2, r2, #4
 800417c:	b2d2      	uxtb	r2, r2
 800417e:	440b      	add	r3, r1
 8004180:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004184:	e00a      	b.n	800419c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004186:	683b      	ldr	r3, [r7, #0]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	4908      	ldr	r1, [pc, #32]	; (80041ac <__NVIC_SetPriority+0x50>)
 800418c:	79fb      	ldrb	r3, [r7, #7]
 800418e:	f003 030f 	and.w	r3, r3, #15
 8004192:	3b04      	subs	r3, #4
 8004194:	0112      	lsls	r2, r2, #4
 8004196:	b2d2      	uxtb	r2, r2
 8004198:	440b      	add	r3, r1
 800419a:	761a      	strb	r2, [r3, #24]
}
 800419c:	bf00      	nop
 800419e:	370c      	adds	r7, #12
 80041a0:	46bd      	mov	sp, r7
 80041a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a6:	4770      	bx	lr
 80041a8:	e000e100 	.word	0xe000e100
 80041ac:	e000ed00 	.word	0xe000ed00

080041b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80041b0:	b580      	push	{r7, lr}
 80041b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80041b4:	4b05      	ldr	r3, [pc, #20]	; (80041cc <SysTick_Handler+0x1c>)
 80041b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80041b8:	f001 fe88 	bl	8005ecc <xTaskGetSchedulerState>
 80041bc:	4603      	mov	r3, r0
 80041be:	2b01      	cmp	r3, #1
 80041c0:	d001      	beq.n	80041c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80041c2:	f002 fc71 	bl	8006aa8 <xPortSysTickHandler>
  }
}
 80041c6:	bf00      	nop
 80041c8:	bd80      	pop	{r7, pc}
 80041ca:	bf00      	nop
 80041cc:	e000e010 	.word	0xe000e010

080041d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80041d4:	2100      	movs	r1, #0
 80041d6:	f06f 0004 	mvn.w	r0, #4
 80041da:	f7ff ffbf 	bl	800415c <__NVIC_SetPriority>
#endif
}
 80041de:	bf00      	nop
 80041e0:	bd80      	pop	{r7, pc}
	...

080041e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80041e4:	b480      	push	{r7}
 80041e6:	b083      	sub	sp, #12
 80041e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80041ea:	f3ef 8305 	mrs	r3, IPSR
 80041ee:	603b      	str	r3, [r7, #0]
  return(result);
 80041f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d003      	beq.n	80041fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80041f6:	f06f 0305 	mvn.w	r3, #5
 80041fa:	607b      	str	r3, [r7, #4]
 80041fc:	e00c      	b.n	8004218 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80041fe:	4b0a      	ldr	r3, [pc, #40]	; (8004228 <osKernelInitialize+0x44>)
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d105      	bne.n	8004212 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004206:	4b08      	ldr	r3, [pc, #32]	; (8004228 <osKernelInitialize+0x44>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800420c:	2300      	movs	r3, #0
 800420e:	607b      	str	r3, [r7, #4]
 8004210:	e002      	b.n	8004218 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004216:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004218:	687b      	ldr	r3, [r7, #4]
}
 800421a:	4618      	mov	r0, r3
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr
 8004226:	bf00      	nop
 8004228:	20000ba4 	.word	0x20000ba4

0800422c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800422c:	b580      	push	{r7, lr}
 800422e:	b082      	sub	sp, #8
 8004230:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004232:	f3ef 8305 	mrs	r3, IPSR
 8004236:	603b      	str	r3, [r7, #0]
  return(result);
 8004238:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800423a:	2b00      	cmp	r3, #0
 800423c:	d003      	beq.n	8004246 <osKernelStart+0x1a>
    stat = osErrorISR;
 800423e:	f06f 0305 	mvn.w	r3, #5
 8004242:	607b      	str	r3, [r7, #4]
 8004244:	e010      	b.n	8004268 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004246:	4b0b      	ldr	r3, [pc, #44]	; (8004274 <osKernelStart+0x48>)
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	2b01      	cmp	r3, #1
 800424c:	d109      	bne.n	8004262 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800424e:	f7ff ffbf 	bl	80041d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004252:	4b08      	ldr	r3, [pc, #32]	; (8004274 <osKernelStart+0x48>)
 8004254:	2202      	movs	r2, #2
 8004256:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004258:	f001 f91a 	bl	8005490 <vTaskStartScheduler>
      stat = osOK;
 800425c:	2300      	movs	r3, #0
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	e002      	b.n	8004268 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004262:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004266:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004268:	687b      	ldr	r3, [r7, #4]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3708      	adds	r7, #8
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}
 8004272:	bf00      	nop
 8004274:	20000ba4 	.word	0x20000ba4

08004278 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004278:	b580      	push	{r7, lr}
 800427a:	b08e      	sub	sp, #56	; 0x38
 800427c:	af04      	add	r7, sp, #16
 800427e:	60f8      	str	r0, [r7, #12]
 8004280:	60b9      	str	r1, [r7, #8]
 8004282:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004284:	2300      	movs	r3, #0
 8004286:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004288:	f3ef 8305 	mrs	r3, IPSR
 800428c:	617b      	str	r3, [r7, #20]
  return(result);
 800428e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004290:	2b00      	cmp	r3, #0
 8004292:	d17e      	bne.n	8004392 <osThreadNew+0x11a>
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2b00      	cmp	r3, #0
 8004298:	d07b      	beq.n	8004392 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800429a:	2340      	movs	r3, #64	; 0x40
 800429c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800429e:	2318      	movs	r3, #24
 80042a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80042a2:	2300      	movs	r3, #0
 80042a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80042a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80042aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d045      	beq.n	800433e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d002      	beq.n	80042c0 <osThreadNew+0x48>
        name = attr->name;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	699b      	ldr	r3, [r3, #24]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d002      	beq.n	80042ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042ce:	69fb      	ldr	r3, [r7, #28]
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d008      	beq.n	80042e6 <osThreadNew+0x6e>
 80042d4:	69fb      	ldr	r3, [r7, #28]
 80042d6:	2b38      	cmp	r3, #56	; 0x38
 80042d8:	d805      	bhi.n	80042e6 <osThreadNew+0x6e>
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	685b      	ldr	r3, [r3, #4]
 80042de:	f003 0301 	and.w	r3, r3, #1
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d001      	beq.n	80042ea <osThreadNew+0x72>
        return (NULL);
 80042e6:	2300      	movs	r3, #0
 80042e8:	e054      	b.n	8004394 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	695b      	ldr	r3, [r3, #20]
 80042f6:	089b      	lsrs	r3, r3, #2
 80042f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	689b      	ldr	r3, [r3, #8]
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d00e      	beq.n	8004320 <osThreadNew+0xa8>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	68db      	ldr	r3, [r3, #12]
 8004306:	2bbb      	cmp	r3, #187	; 0xbb
 8004308:	d90a      	bls.n	8004320 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800430e:	2b00      	cmp	r3, #0
 8004310:	d006      	beq.n	8004320 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d002      	beq.n	8004320 <osThreadNew+0xa8>
        mem = 1;
 800431a:	2301      	movs	r3, #1
 800431c:	61bb      	str	r3, [r7, #24]
 800431e:	e010      	b.n	8004342 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	689b      	ldr	r3, [r3, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10c      	bne.n	8004342 <osThreadNew+0xca>
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	68db      	ldr	r3, [r3, #12]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d108      	bne.n	8004342 <osThreadNew+0xca>
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	691b      	ldr	r3, [r3, #16]
 8004334:	2b00      	cmp	r3, #0
 8004336:	d104      	bne.n	8004342 <osThreadNew+0xca>
          mem = 0;
 8004338:	2300      	movs	r3, #0
 800433a:	61bb      	str	r3, [r7, #24]
 800433c:	e001      	b.n	8004342 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800433e:	2300      	movs	r3, #0
 8004340:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004342:	69bb      	ldr	r3, [r7, #24]
 8004344:	2b01      	cmp	r3, #1
 8004346:	d110      	bne.n	800436a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800434c:	687a      	ldr	r2, [r7, #4]
 800434e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004350:	9202      	str	r2, [sp, #8]
 8004352:	9301      	str	r3, [sp, #4]
 8004354:	69fb      	ldr	r3, [r7, #28]
 8004356:	9300      	str	r3, [sp, #0]
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	6a3a      	ldr	r2, [r7, #32]
 800435c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800435e:	68f8      	ldr	r0, [r7, #12]
 8004360:	f000 fe44 	bl	8004fec <xTaskCreateStatic>
 8004364:	4603      	mov	r3, r0
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	e013      	b.n	8004392 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800436a:	69bb      	ldr	r3, [r7, #24]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d110      	bne.n	8004392 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004370:	6a3b      	ldr	r3, [r7, #32]
 8004372:	b29a      	uxth	r2, r3
 8004374:	f107 0310 	add.w	r3, r7, #16
 8004378:	9301      	str	r3, [sp, #4]
 800437a:	69fb      	ldr	r3, [r7, #28]
 800437c:	9300      	str	r3, [sp, #0]
 800437e:	68bb      	ldr	r3, [r7, #8]
 8004380:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004382:	68f8      	ldr	r0, [r7, #12]
 8004384:	f000 fe8f 	bl	80050a6 <xTaskCreate>
 8004388:	4603      	mov	r3, r0
 800438a:	2b01      	cmp	r3, #1
 800438c:	d001      	beq.n	8004392 <osThreadNew+0x11a>
            hTask = NULL;
 800438e:	2300      	movs	r3, #0
 8004390:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004392:	693b      	ldr	r3, [r7, #16]
}
 8004394:	4618      	mov	r0, r3
 8004396:	3728      	adds	r7, #40	; 0x28
 8004398:	46bd      	mov	sp, r7
 800439a:	bd80      	pop	{r7, pc}

0800439c <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043a8:	f3ef 8305 	mrs	r3, IPSR
 80043ac:	60fb      	str	r3, [r7, #12]
  return(result);
 80043ae:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d102      	bne.n	80043ba <osThreadGetName+0x1e>
 80043b4:	693b      	ldr	r3, [r7, #16]
 80043b6:	2b00      	cmp	r3, #0
 80043b8:	d102      	bne.n	80043c0 <osThreadGetName+0x24>
    name = NULL;
 80043ba:	2300      	movs	r3, #0
 80043bc:	617b      	str	r3, [r7, #20]
 80043be:	e003      	b.n	80043c8 <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 80043c0:	6938      	ldr	r0, [r7, #16]
 80043c2:	f001 f991 	bl	80056e8 <pcTaskGetName>
 80043c6:	6178      	str	r0, [r7, #20]
  }

  return (name);
 80043c8:	697b      	ldr	r3, [r7, #20]
}
 80043ca:	4618      	mov	r0, r3
 80043cc:	3718      	adds	r7, #24
 80043ce:	46bd      	mov	sp, r7
 80043d0:	bd80      	pop	{r7, pc}

080043d2 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b086      	sub	sp, #24
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80043de:	f3ef 8305 	mrs	r3, IPSR
 80043e2:	60fb      	str	r3, [r7, #12]
  return(result);
 80043e4:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <osThreadGetStackSpace+0x1e>
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d102      	bne.n	80043f6 <osThreadGetStackSpace+0x24>
    sz = 0U;
 80043f0:	2300      	movs	r3, #0
 80043f2:	617b      	str	r3, [r7, #20]
 80043f4:	e005      	b.n	8004402 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 80043f6:	6938      	ldr	r0, [r7, #16]
 80043f8:	f001 fcf8 	bl	8005dec <uxTaskGetStackHighWaterMark>
 80043fc:	4603      	mov	r3, r0
 80043fe:	009b      	lsls	r3, r3, #2
 8004400:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 8004402:	697b      	ldr	r3, [r7, #20]
}
 8004404:	4618      	mov	r0, r3
 8004406:	3718      	adds	r7, #24
 8004408:	46bd      	mov	sp, r7
 800440a:	bd80      	pop	{r7, pc}

0800440c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800440c:	b580      	push	{r7, lr}
 800440e:	b084      	sub	sp, #16
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004414:	f3ef 8305 	mrs	r3, IPSR
 8004418:	60bb      	str	r3, [r7, #8]
  return(result);
 800441a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800441c:	2b00      	cmp	r3, #0
 800441e:	d003      	beq.n	8004428 <osDelay+0x1c>
    stat = osErrorISR;
 8004420:	f06f 0305 	mvn.w	r3, #5
 8004424:	60fb      	str	r3, [r7, #12]
 8004426:	e007      	b.n	8004438 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004428:	2300      	movs	r3, #0
 800442a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d002      	beq.n	8004438 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 ff92 	bl	800535c <vTaskDelay>
    }
  }

  return (stat);
 8004438:	68fb      	ldr	r3, [r7, #12]
}
 800443a:	4618      	mov	r0, r3
 800443c:	3710      	adds	r7, #16
 800443e:	46bd      	mov	sp, r7
 8004440:	bd80      	pop	{r7, pc}
	...

08004444 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	60f8      	str	r0, [r7, #12]
 800444c:	60b9      	str	r1, [r7, #8]
 800444e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	4a07      	ldr	r2, [pc, #28]	; (8004470 <vApplicationGetIdleTaskMemory+0x2c>)
 8004454:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	4a06      	ldr	r2, [pc, #24]	; (8004474 <vApplicationGetIdleTaskMemory+0x30>)
 800445a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2240      	movs	r2, #64	; 0x40
 8004460:	601a      	str	r2, [r3, #0]
}
 8004462:	bf00      	nop
 8004464:	3714      	adds	r7, #20
 8004466:	46bd      	mov	sp, r7
 8004468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446c:	4770      	bx	lr
 800446e:	bf00      	nop
 8004470:	20000ba8 	.word	0x20000ba8
 8004474:	20000c64 	.word	0x20000c64

08004478 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004478:	b480      	push	{r7}
 800447a:	b085      	sub	sp, #20
 800447c:	af00      	add	r7, sp, #0
 800447e:	60f8      	str	r0, [r7, #12]
 8004480:	60b9      	str	r1, [r7, #8]
 8004482:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	4a07      	ldr	r2, [pc, #28]	; (80044a4 <vApplicationGetTimerTaskMemory+0x2c>)
 8004488:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	4a06      	ldr	r2, [pc, #24]	; (80044a8 <vApplicationGetTimerTaskMemory+0x30>)
 800448e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2280      	movs	r2, #128	; 0x80
 8004494:	601a      	str	r2, [r3, #0]
}
 8004496:	bf00      	nop
 8004498:	3714      	adds	r7, #20
 800449a:	46bd      	mov	sp, r7
 800449c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a0:	4770      	bx	lr
 80044a2:	bf00      	nop
 80044a4:	20000d64 	.word	0x20000d64
 80044a8:	20000e20 	.word	0x20000e20

080044ac <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80044ac:	b480      	push	{r7}
 80044ae:	b083      	sub	sp, #12
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f103 0208 	add.w	r2, r3, #8
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044c4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	f103 0208 	add.w	r2, r3, #8
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	f103 0208 	add.w	r2, r3, #8
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2200      	movs	r2, #0
 80044de:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80044e0:	bf00      	nop
 80044e2:	370c      	adds	r7, #12
 80044e4:	46bd      	mov	sp, r7
 80044e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ea:	4770      	bx	lr

080044ec <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80044ec:	b480      	push	{r7}
 80044ee:	b083      	sub	sp, #12
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80044fa:	bf00      	nop
 80044fc:	370c      	adds	r7, #12
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004506:	b480      	push	{r7}
 8004508:	b085      	sub	sp, #20
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	685b      	ldr	r3, [r3, #4]
 8004514:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004516:	683b      	ldr	r3, [r7, #0]
 8004518:	68fa      	ldr	r2, [r7, #12]
 800451a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	689a      	ldr	r2, [r3, #8]
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	689b      	ldr	r3, [r3, #8]
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	683a      	ldr	r2, [r7, #0]
 8004530:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004532:	683b      	ldr	r3, [r7, #0]
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	1c5a      	adds	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	601a      	str	r2, [r3, #0]
}
 8004542:	bf00      	nop
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800454e:	b480      	push	{r7}
 8004550:	b085      	sub	sp, #20
 8004552:	af00      	add	r7, sp, #0
 8004554:	6078      	str	r0, [r7, #4]
 8004556:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004558:	683b      	ldr	r3, [r7, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004564:	d103      	bne.n	800456e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	691b      	ldr	r3, [r3, #16]
 800456a:	60fb      	str	r3, [r7, #12]
 800456c:	e00c      	b.n	8004588 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	3308      	adds	r3, #8
 8004572:	60fb      	str	r3, [r7, #12]
 8004574:	e002      	b.n	800457c <vListInsert+0x2e>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685b      	ldr	r3, [r3, #4]
 800457a:	60fb      	str	r3, [r7, #12]
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	685b      	ldr	r3, [r3, #4]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	68ba      	ldr	r2, [r7, #8]
 8004584:	429a      	cmp	r2, r3
 8004586:	d2f6      	bcs.n	8004576 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	685a      	ldr	r2, [r3, #4]
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	685b      	ldr	r3, [r3, #4]
 8004594:	683a      	ldr	r2, [r7, #0]
 8004596:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004598:	683b      	ldr	r3, [r7, #0]
 800459a:	68fa      	ldr	r2, [r7, #12]
 800459c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800459e:	68fb      	ldr	r3, [r7, #12]
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	687a      	ldr	r2, [r7, #4]
 80045a8:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	1c5a      	adds	r2, r3, #1
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	601a      	str	r2, [r3, #0]
}
 80045b4:	bf00      	nop
 80045b6:	3714      	adds	r7, #20
 80045b8:	46bd      	mov	sp, r7
 80045ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045be:	4770      	bx	lr

080045c0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80045c0:	b480      	push	{r7}
 80045c2:	b085      	sub	sp, #20
 80045c4:	af00      	add	r7, sp, #0
 80045c6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	691b      	ldr	r3, [r3, #16]
 80045cc:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	685b      	ldr	r3, [r3, #4]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	6892      	ldr	r2, [r2, #8]
 80045d6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	689b      	ldr	r3, [r3, #8]
 80045dc:	687a      	ldr	r2, [r7, #4]
 80045de:	6852      	ldr	r2, [r2, #4]
 80045e0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	429a      	cmp	r2, r3
 80045ea:	d103      	bne.n	80045f4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	689a      	ldr	r2, [r3, #8]
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2200      	movs	r2, #0
 80045f8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80045fa:	68fb      	ldr	r3, [r7, #12]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	1e5a      	subs	r2, r3, #1
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
}
 8004608:	4618      	mov	r0, r3
 800460a:	3714      	adds	r7, #20
 800460c:	46bd      	mov	sp, r7
 800460e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004612:	4770      	bx	lr

08004614 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004614:	b580      	push	{r7, lr}
 8004616:	b084      	sub	sp, #16
 8004618:	af00      	add	r7, sp, #0
 800461a:	6078      	str	r0, [r7, #4]
 800461c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d10a      	bne.n	800463e <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004628:	f04f 0350 	mov.w	r3, #80	; 0x50
 800462c:	f383 8811 	msr	BASEPRI, r3
 8004630:	f3bf 8f6f 	isb	sy
 8004634:	f3bf 8f4f 	dsb	sy
 8004638:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800463a:	bf00      	nop
 800463c:	e7fe      	b.n	800463c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800463e:	f002 f9a1 	bl	8006984 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	681a      	ldr	r2, [r3, #0]
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800464a:	68f9      	ldr	r1, [r7, #12]
 800464c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800464e:	fb01 f303 	mul.w	r3, r1, r3
 8004652:	441a      	add	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	2200      	movs	r2, #0
 800465c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681a      	ldr	r2, [r3, #0]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	681a      	ldr	r2, [r3, #0]
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800466e:	3b01      	subs	r3, #1
 8004670:	68f9      	ldr	r1, [r7, #12]
 8004672:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004674:	fb01 f303 	mul.w	r3, r1, r3
 8004678:	441a      	add	r2, r3
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	22ff      	movs	r2, #255	; 0xff
 8004682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004686:	68fb      	ldr	r3, [r7, #12]
 8004688:	22ff      	movs	r2, #255	; 0xff
 800468a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	2b00      	cmp	r3, #0
 8004692:	d114      	bne.n	80046be <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	691b      	ldr	r3, [r3, #16]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d01a      	beq.n	80046d2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	3310      	adds	r3, #16
 80046a0:	4618      	mov	r0, r3
 80046a2:	f001 f9b3 	bl	8005a0c <xTaskRemoveFromEventList>
 80046a6:	4603      	mov	r3, r0
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d012      	beq.n	80046d2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80046ac:	4b0c      	ldr	r3, [pc, #48]	; (80046e0 <xQueueGenericReset+0xcc>)
 80046ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046b2:	601a      	str	r2, [r3, #0]
 80046b4:	f3bf 8f4f 	dsb	sy
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	e009      	b.n	80046d2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	3310      	adds	r3, #16
 80046c2:	4618      	mov	r0, r3
 80046c4:	f7ff fef2 	bl	80044ac <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80046c8:	68fb      	ldr	r3, [r7, #12]
 80046ca:	3324      	adds	r3, #36	; 0x24
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff feed 	bl	80044ac <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80046d2:	f002 f987 	bl	80069e4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80046d6:	2301      	movs	r3, #1
}
 80046d8:	4618      	mov	r0, r3
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	e000ed04 	.word	0xe000ed04

080046e4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08e      	sub	sp, #56	; 0x38
 80046e8:	af02      	add	r7, sp, #8
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	2b00      	cmp	r3, #0
 800472e:	d002      	beq.n	8004736 <xQueueGenericCreateStatic+0x52>
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d001      	beq.n	800473a <xQueueGenericCreateStatic+0x56>
 8004736:	2301      	movs	r3, #1
 8004738:	e000      	b.n	800473c <xQueueGenericCreateStatic+0x58>
 800473a:	2300      	movs	r3, #0
 800473c:	2b00      	cmp	r3, #0
 800473e:	d10a      	bne.n	8004756 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004740:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004744:	f383 8811 	msr	BASEPRI, r3
 8004748:	f3bf 8f6f 	isb	sy
 800474c:	f3bf 8f4f 	dsb	sy
 8004750:	623b      	str	r3, [r7, #32]
}
 8004752:	bf00      	nop
 8004754:	e7fe      	b.n	8004754 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2b00      	cmp	r3, #0
 800475a:	d102      	bne.n	8004762 <xQueueGenericCreateStatic+0x7e>
 800475c:	68bb      	ldr	r3, [r7, #8]
 800475e:	2b00      	cmp	r3, #0
 8004760:	d101      	bne.n	8004766 <xQueueGenericCreateStatic+0x82>
 8004762:	2301      	movs	r3, #1
 8004764:	e000      	b.n	8004768 <xQueueGenericCreateStatic+0x84>
 8004766:	2300      	movs	r3, #0
 8004768:	2b00      	cmp	r3, #0
 800476a:	d10a      	bne.n	8004782 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800476c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004770:	f383 8811 	msr	BASEPRI, r3
 8004774:	f3bf 8f6f 	isb	sy
 8004778:	f3bf 8f4f 	dsb	sy
 800477c:	61fb      	str	r3, [r7, #28]
}
 800477e:	bf00      	nop
 8004780:	e7fe      	b.n	8004780 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004782:	2350      	movs	r3, #80	; 0x50
 8004784:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004786:	697b      	ldr	r3, [r7, #20]
 8004788:	2b50      	cmp	r3, #80	; 0x50
 800478a:	d00a      	beq.n	80047a2 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800478c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004790:	f383 8811 	msr	BASEPRI, r3
 8004794:	f3bf 8f6f 	isb	sy
 8004798:	f3bf 8f4f 	dsb	sy
 800479c:	61bb      	str	r3, [r7, #24]
}
 800479e:	bf00      	nop
 80047a0:	e7fe      	b.n	80047a0 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80047a2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80047a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d00d      	beq.n	80047ca <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	2201      	movs	r2, #1
 80047b2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80047b6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80047ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047bc:	9300      	str	r3, [sp, #0]
 80047be:	4613      	mov	r3, r2
 80047c0:	687a      	ldr	r2, [r7, #4]
 80047c2:	68b9      	ldr	r1, [r7, #8]
 80047c4:	68f8      	ldr	r0, [r7, #12]
 80047c6:	f000 f805 	bl	80047d4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80047ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80047cc:	4618      	mov	r0, r3
 80047ce:	3730      	adds	r7, #48	; 0x30
 80047d0:	46bd      	mov	sp, r7
 80047d2:	bd80      	pop	{r7, pc}

080047d4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80047d4:	b580      	push	{r7, lr}
 80047d6:	b084      	sub	sp, #16
 80047d8:	af00      	add	r7, sp, #0
 80047da:	60f8      	str	r0, [r7, #12]
 80047dc:	60b9      	str	r1, [r7, #8]
 80047de:	607a      	str	r2, [r7, #4]
 80047e0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d103      	bne.n	80047f0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80047e8:	69bb      	ldr	r3, [r7, #24]
 80047ea:	69ba      	ldr	r2, [r7, #24]
 80047ec:	601a      	str	r2, [r3, #0]
 80047ee:	e002      	b.n	80047f6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80047f0:	69bb      	ldr	r3, [r7, #24]
 80047f2:	687a      	ldr	r2, [r7, #4]
 80047f4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80047fc:	69bb      	ldr	r3, [r7, #24]
 80047fe:	68ba      	ldr	r2, [r7, #8]
 8004800:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004802:	2101      	movs	r1, #1
 8004804:	69b8      	ldr	r0, [r7, #24]
 8004806:	f7ff ff05 	bl	8004614 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800480a:	69bb      	ldr	r3, [r7, #24]
 800480c:	78fa      	ldrb	r2, [r7, #3]
 800480e:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004812:	bf00      	nop
 8004814:	3710      	adds	r7, #16
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b08e      	sub	sp, #56	; 0x38
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
 8004828:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800482a:	2300      	movs	r3, #0
 800482c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004834:	2b00      	cmp	r3, #0
 8004836:	d10a      	bne.n	800484e <xQueueGenericSend+0x32>
	__asm volatile
 8004838:	f04f 0350 	mov.w	r3, #80	; 0x50
 800483c:	f383 8811 	msr	BASEPRI, r3
 8004840:	f3bf 8f6f 	isb	sy
 8004844:	f3bf 8f4f 	dsb	sy
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800484a:	bf00      	nop
 800484c:	e7fe      	b.n	800484c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800484e:	68bb      	ldr	r3, [r7, #8]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d103      	bne.n	800485c <xQueueGenericSend+0x40>
 8004854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004858:	2b00      	cmp	r3, #0
 800485a:	d101      	bne.n	8004860 <xQueueGenericSend+0x44>
 800485c:	2301      	movs	r3, #1
 800485e:	e000      	b.n	8004862 <xQueueGenericSend+0x46>
 8004860:	2300      	movs	r3, #0
 8004862:	2b00      	cmp	r3, #0
 8004864:	d10a      	bne.n	800487c <xQueueGenericSend+0x60>
	__asm volatile
 8004866:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486a:	f383 8811 	msr	BASEPRI, r3
 800486e:	f3bf 8f6f 	isb	sy
 8004872:	f3bf 8f4f 	dsb	sy
 8004876:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004878:	bf00      	nop
 800487a:	e7fe      	b.n	800487a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	2b02      	cmp	r3, #2
 8004880:	d103      	bne.n	800488a <xQueueGenericSend+0x6e>
 8004882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004884:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004886:	2b01      	cmp	r3, #1
 8004888:	d101      	bne.n	800488e <xQueueGenericSend+0x72>
 800488a:	2301      	movs	r3, #1
 800488c:	e000      	b.n	8004890 <xQueueGenericSend+0x74>
 800488e:	2300      	movs	r3, #0
 8004890:	2b00      	cmp	r3, #0
 8004892:	d10a      	bne.n	80048aa <xQueueGenericSend+0x8e>
	__asm volatile
 8004894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004898:	f383 8811 	msr	BASEPRI, r3
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	f3bf 8f4f 	dsb	sy
 80048a4:	623b      	str	r3, [r7, #32]
}
 80048a6:	bf00      	nop
 80048a8:	e7fe      	b.n	80048a8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048aa:	f001 fb0f 	bl	8005ecc <xTaskGetSchedulerState>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d102      	bne.n	80048ba <xQueueGenericSend+0x9e>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d101      	bne.n	80048be <xQueueGenericSend+0xa2>
 80048ba:	2301      	movs	r3, #1
 80048bc:	e000      	b.n	80048c0 <xQueueGenericSend+0xa4>
 80048be:	2300      	movs	r3, #0
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d10a      	bne.n	80048da <xQueueGenericSend+0xbe>
	__asm volatile
 80048c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048c8:	f383 8811 	msr	BASEPRI, r3
 80048cc:	f3bf 8f6f 	isb	sy
 80048d0:	f3bf 8f4f 	dsb	sy
 80048d4:	61fb      	str	r3, [r7, #28]
}
 80048d6:	bf00      	nop
 80048d8:	e7fe      	b.n	80048d8 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80048da:	f002 f853 	bl	8006984 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80048e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80048e6:	429a      	cmp	r2, r3
 80048e8:	d302      	bcc.n	80048f0 <xQueueGenericSend+0xd4>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b02      	cmp	r3, #2
 80048ee:	d129      	bne.n	8004944 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80048f0:	683a      	ldr	r2, [r7, #0]
 80048f2:	68b9      	ldr	r1, [r7, #8]
 80048f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80048f6:	f000 fa0b 	bl	8004d10 <prvCopyDataToQueue>
 80048fa:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80048fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004900:	2b00      	cmp	r3, #0
 8004902:	d010      	beq.n	8004926 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004904:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004906:	3324      	adds	r3, #36	; 0x24
 8004908:	4618      	mov	r0, r3
 800490a:	f001 f87f 	bl	8005a0c <xTaskRemoveFromEventList>
 800490e:	4603      	mov	r3, r0
 8004910:	2b00      	cmp	r3, #0
 8004912:	d013      	beq.n	800493c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004914:	4b3f      	ldr	r3, [pc, #252]	; (8004a14 <xQueueGenericSend+0x1f8>)
 8004916:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800491a:	601a      	str	r2, [r3, #0]
 800491c:	f3bf 8f4f 	dsb	sy
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	e00a      	b.n	800493c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004928:	2b00      	cmp	r3, #0
 800492a:	d007      	beq.n	800493c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800492c:	4b39      	ldr	r3, [pc, #228]	; (8004a14 <xQueueGenericSend+0x1f8>)
 800492e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004932:	601a      	str	r2, [r3, #0]
 8004934:	f3bf 8f4f 	dsb	sy
 8004938:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800493c:	f002 f852 	bl	80069e4 <vPortExitCritical>
				return pdPASS;
 8004940:	2301      	movs	r3, #1
 8004942:	e063      	b.n	8004a0c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2b00      	cmp	r3, #0
 8004948:	d103      	bne.n	8004952 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800494a:	f002 f84b 	bl	80069e4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800494e:	2300      	movs	r3, #0
 8004950:	e05c      	b.n	8004a0c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004952:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004954:	2b00      	cmp	r3, #0
 8004956:	d106      	bne.n	8004966 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004958:	f107 0314 	add.w	r3, r7, #20
 800495c:	4618      	mov	r0, r3
 800495e:	f001 f8b9 	bl	8005ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004962:	2301      	movs	r3, #1
 8004964:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004966:	f002 f83d 	bl	80069e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800496a:	f000 fe01 	bl	8005570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800496e:	f002 f809 	bl	8006984 <vPortEnterCritical>
 8004972:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004974:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004978:	b25b      	sxtb	r3, r3
 800497a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800497e:	d103      	bne.n	8004988 <xQueueGenericSend+0x16c>
 8004980:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004982:	2200      	movs	r2, #0
 8004984:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004988:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800498a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800498e:	b25b      	sxtb	r3, r3
 8004990:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004994:	d103      	bne.n	800499e <xQueueGenericSend+0x182>
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	2200      	movs	r2, #0
 800499a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800499e:	f002 f821 	bl	80069e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049a2:	1d3a      	adds	r2, r7, #4
 80049a4:	f107 0314 	add.w	r3, r7, #20
 80049a8:	4611      	mov	r1, r2
 80049aa:	4618      	mov	r0, r3
 80049ac:	f001 f8a8 	bl	8005b00 <xTaskCheckForTimeOut>
 80049b0:	4603      	mov	r3, r0
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d124      	bne.n	8004a00 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80049b6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b8:	f000 faa2 	bl	8004f00 <prvIsQueueFull>
 80049bc:	4603      	mov	r3, r0
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d018      	beq.n	80049f4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80049c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c4:	3310      	adds	r3, #16
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4611      	mov	r1, r2
 80049ca:	4618      	mov	r0, r3
 80049cc:	f000 ffce 	bl	800596c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80049d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049d2:	f000 fa2d 	bl	8004e30 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80049d6:	f000 fdd9 	bl	800558c <xTaskResumeAll>
 80049da:	4603      	mov	r3, r0
 80049dc:	2b00      	cmp	r3, #0
 80049de:	f47f af7c 	bne.w	80048da <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <xQueueGenericSend+0x1f8>)
 80049e4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	f3bf 8f4f 	dsb	sy
 80049ee:	f3bf 8f6f 	isb	sy
 80049f2:	e772      	b.n	80048da <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80049f4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049f6:	f000 fa1b 	bl	8004e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80049fa:	f000 fdc7 	bl	800558c <xTaskResumeAll>
 80049fe:	e76c      	b.n	80048da <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004a00:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004a02:	f000 fa15 	bl	8004e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a06:	f000 fdc1 	bl	800558c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004a0a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004a0c:	4618      	mov	r0, r3
 8004a0e:	3738      	adds	r7, #56	; 0x38
 8004a10:	46bd      	mov	sp, r7
 8004a12:	bd80      	pop	{r7, pc}
 8004a14:	e000ed04 	.word	0xe000ed04

08004a18 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b090      	sub	sp, #64	; 0x40
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	60f8      	str	r0, [r7, #12]
 8004a20:	60b9      	str	r1, [r7, #8]
 8004a22:	607a      	str	r2, [r7, #4]
 8004a24:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004a26:	68fb      	ldr	r3, [r7, #12]
 8004a28:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004a2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d10a      	bne.n	8004a46 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a34:	f383 8811 	msr	BASEPRI, r3
 8004a38:	f3bf 8f6f 	isb	sy
 8004a3c:	f3bf 8f4f 	dsb	sy
 8004a40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004a42:	bf00      	nop
 8004a44:	e7fe      	b.n	8004a44 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	d103      	bne.n	8004a54 <xQueueGenericSendFromISR+0x3c>
 8004a4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <xQueueGenericSendFromISR+0x40>
 8004a54:	2301      	movs	r3, #1
 8004a56:	e000      	b.n	8004a5a <xQueueGenericSendFromISR+0x42>
 8004a58:	2300      	movs	r3, #0
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10a      	bne.n	8004a74 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004a5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a62:	f383 8811 	msr	BASEPRI, r3
 8004a66:	f3bf 8f6f 	isb	sy
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004a70:	bf00      	nop
 8004a72:	e7fe      	b.n	8004a72 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	2b02      	cmp	r3, #2
 8004a78:	d103      	bne.n	8004a82 <xQueueGenericSendFromISR+0x6a>
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a7e:	2b01      	cmp	r3, #1
 8004a80:	d101      	bne.n	8004a86 <xQueueGenericSendFromISR+0x6e>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e000      	b.n	8004a88 <xQueueGenericSendFromISR+0x70>
 8004a86:	2300      	movs	r3, #0
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d10a      	bne.n	8004aa2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a90:	f383 8811 	msr	BASEPRI, r3
 8004a94:	f3bf 8f6f 	isb	sy
 8004a98:	f3bf 8f4f 	dsb	sy
 8004a9c:	623b      	str	r3, [r7, #32]
}
 8004a9e:	bf00      	nop
 8004aa0:	e7fe      	b.n	8004aa0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004aa2:	f002 f851 	bl	8006b48 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004aa6:	f3ef 8211 	mrs	r2, BASEPRI
 8004aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004aae:	f383 8811 	msr	BASEPRI, r3
 8004ab2:	f3bf 8f6f 	isb	sy
 8004ab6:	f3bf 8f4f 	dsb	sy
 8004aba:	61fa      	str	r2, [r7, #28]
 8004abc:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004abe:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004ac0:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004ac2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ac8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d302      	bcc.n	8004ad4 <xQueueGenericSendFromISR+0xbc>
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	2b02      	cmp	r3, #2
 8004ad2:	d12f      	bne.n	8004b34 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004ad4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ad6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ada:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ade:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004ae4:	683a      	ldr	r2, [r7, #0]
 8004ae6:	68b9      	ldr	r1, [r7, #8]
 8004ae8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8004aea:	f000 f911 	bl	8004d10 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004aee:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004af2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004af6:	d112      	bne.n	8004b1e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004af8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d016      	beq.n	8004b2e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b02:	3324      	adds	r3, #36	; 0x24
 8004b04:	4618      	mov	r0, r3
 8004b06:	f000 ff81 	bl	8005a0c <xTaskRemoveFromEventList>
 8004b0a:	4603      	mov	r3, r0
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d00e      	beq.n	8004b2e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d00b      	beq.n	8004b2e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]
 8004b1c:	e007      	b.n	8004b2e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004b1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004b22:	3301      	adds	r3, #1
 8004b24:	b2db      	uxtb	r3, r3
 8004b26:	b25a      	sxtb	r2, r3
 8004b28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004b2a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004b2e:	2301      	movs	r3, #1
 8004b30:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004b32:	e001      	b.n	8004b38 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004b34:	2300      	movs	r3, #0
 8004b36:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b3a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004b3c:	697b      	ldr	r3, [r7, #20]
 8004b3e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004b42:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004b44:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004b46:	4618      	mov	r0, r3
 8004b48:	3740      	adds	r7, #64	; 0x40
 8004b4a:	46bd      	mov	sp, r7
 8004b4c:	bd80      	pop	{r7, pc}
	...

08004b50 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b08c      	sub	sp, #48	; 0x30
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	60f8      	str	r0, [r7, #12]
 8004b58:	60b9      	str	r1, [r7, #8]
 8004b5a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d10a      	bne.n	8004b80 <xQueueReceive+0x30>
	__asm volatile
 8004b6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b6e:	f383 8811 	msr	BASEPRI, r3
 8004b72:	f3bf 8f6f 	isb	sy
 8004b76:	f3bf 8f4f 	dsb	sy
 8004b7a:	623b      	str	r3, [r7, #32]
}
 8004b7c:	bf00      	nop
 8004b7e:	e7fe      	b.n	8004b7e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b80:	68bb      	ldr	r3, [r7, #8]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d103      	bne.n	8004b8e <xQueueReceive+0x3e>
 8004b86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <xQueueReceive+0x42>
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e000      	b.n	8004b94 <xQueueReceive+0x44>
 8004b92:	2300      	movs	r3, #0
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d10a      	bne.n	8004bae <xQueueReceive+0x5e>
	__asm volatile
 8004b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9c:	f383 8811 	msr	BASEPRI, r3
 8004ba0:	f3bf 8f6f 	isb	sy
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	61fb      	str	r3, [r7, #28]
}
 8004baa:	bf00      	nop
 8004bac:	e7fe      	b.n	8004bac <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bae:	f001 f98d 	bl	8005ecc <xTaskGetSchedulerState>
 8004bb2:	4603      	mov	r3, r0
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d102      	bne.n	8004bbe <xQueueReceive+0x6e>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d101      	bne.n	8004bc2 <xQueueReceive+0x72>
 8004bbe:	2301      	movs	r3, #1
 8004bc0:	e000      	b.n	8004bc4 <xQueueReceive+0x74>
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d10a      	bne.n	8004bde <xQueueReceive+0x8e>
	__asm volatile
 8004bc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bcc:	f383 8811 	msr	BASEPRI, r3
 8004bd0:	f3bf 8f6f 	isb	sy
 8004bd4:	f3bf 8f4f 	dsb	sy
 8004bd8:	61bb      	str	r3, [r7, #24]
}
 8004bda:	bf00      	nop
 8004bdc:	e7fe      	b.n	8004bdc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004bde:	f001 fed1 	bl	8006984 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004be2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004be6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004be8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d01f      	beq.n	8004c2e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004bee:	68b9      	ldr	r1, [r7, #8]
 8004bf0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004bf2:	f000 f8f7 	bl	8004de4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bf8:	1e5a      	subs	r2, r3, #1
 8004bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004bfc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c00:	691b      	ldr	r3, [r3, #16]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d00f      	beq.n	8004c26 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c08:	3310      	adds	r3, #16
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f000 fefe 	bl	8005a0c <xTaskRemoveFromEventList>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d007      	beq.n	8004c26 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004c16:	4b3d      	ldr	r3, [pc, #244]	; (8004d0c <xQueueReceive+0x1bc>)
 8004c18:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c1c:	601a      	str	r2, [r3, #0]
 8004c1e:	f3bf 8f4f 	dsb	sy
 8004c22:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004c26:	f001 fedd 	bl	80069e4 <vPortExitCritical>
				return pdPASS;
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	e069      	b.n	8004d02 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d103      	bne.n	8004c3c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c34:	f001 fed6 	bl	80069e4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	e062      	b.n	8004d02 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d106      	bne.n	8004c50 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c42:	f107 0310 	add.w	r3, r7, #16
 8004c46:	4618      	mov	r0, r3
 8004c48:	f000 ff44 	bl	8005ad4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c4c:	2301      	movs	r3, #1
 8004c4e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c50:	f001 fec8 	bl	80069e4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c54:	f000 fc8c 	bl	8005570 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c58:	f001 fe94 	bl	8006984 <vPortEnterCritical>
 8004c5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c5e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c62:	b25b      	sxtb	r3, r3
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c68:	d103      	bne.n	8004c72 <xQueueReceive+0x122>
 8004c6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004c72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c74:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004c78:	b25b      	sxtb	r3, r3
 8004c7a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7e:	d103      	bne.n	8004c88 <xQueueReceive+0x138>
 8004c80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c82:	2200      	movs	r2, #0
 8004c84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004c88:	f001 feac 	bl	80069e4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c8c:	1d3a      	adds	r2, r7, #4
 8004c8e:	f107 0310 	add.w	r3, r7, #16
 8004c92:	4611      	mov	r1, r2
 8004c94:	4618      	mov	r0, r3
 8004c96:	f000 ff33 	bl	8005b00 <xTaskCheckForTimeOut>
 8004c9a:	4603      	mov	r3, r0
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d123      	bne.n	8004ce8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004ca0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004ca2:	f000 f917 	bl	8004ed4 <prvIsQueueEmpty>
 8004ca6:	4603      	mov	r3, r0
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d017      	beq.n	8004cdc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cae:	3324      	adds	r3, #36	; 0x24
 8004cb0:	687a      	ldr	r2, [r7, #4]
 8004cb2:	4611      	mov	r1, r2
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	f000 fe59 	bl	800596c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004cba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cbc:	f000 f8b8 	bl	8004e30 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004cc0:	f000 fc64 	bl	800558c <xTaskResumeAll>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	2b00      	cmp	r3, #0
 8004cc8:	d189      	bne.n	8004bde <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004cca:	4b10      	ldr	r3, [pc, #64]	; (8004d0c <xQueueReceive+0x1bc>)
 8004ccc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cd0:	601a      	str	r2, [r3, #0]
 8004cd2:	f3bf 8f4f 	dsb	sy
 8004cd6:	f3bf 8f6f 	isb	sy
 8004cda:	e780      	b.n	8004bde <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004cdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cde:	f000 f8a7 	bl	8004e30 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004ce2:	f000 fc53 	bl	800558c <xTaskResumeAll>
 8004ce6:	e77a      	b.n	8004bde <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004ce8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cea:	f000 f8a1 	bl	8004e30 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004cee:	f000 fc4d 	bl	800558c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004cf2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004cf4:	f000 f8ee 	bl	8004ed4 <prvIsQueueEmpty>
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	f43f af6f 	beq.w	8004bde <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004d00:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3730      	adds	r7, #48	; 0x30
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
 8004d0a:	bf00      	nop
 8004d0c:	e000ed04 	.word	0xe000ed04

08004d10 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b086      	sub	sp, #24
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004d1c:	2300      	movs	r3, #0
 8004d1e:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d24:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d10d      	bne.n	8004d4a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d14d      	bne.n	8004dd2 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	689b      	ldr	r3, [r3, #8]
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f001 f8e4 	bl	8005f08 <xTaskPriorityDisinherit>
 8004d40:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	2200      	movs	r2, #0
 8004d46:	609a      	str	r2, [r3, #8]
 8004d48:	e043      	b.n	8004dd2 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d119      	bne.n	8004d84 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	6858      	ldr	r0, [r3, #4]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d58:	461a      	mov	r2, r3
 8004d5a:	68b9      	ldr	r1, [r7, #8]
 8004d5c:	f002 fa9f 	bl	800729e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	685a      	ldr	r2, [r3, #4]
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d68:	441a      	add	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685a      	ldr	r2, [r3, #4]
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	689b      	ldr	r3, [r3, #8]
 8004d76:	429a      	cmp	r2, r3
 8004d78:	d32b      	bcc.n	8004dd2 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d7a:	68fb      	ldr	r3, [r7, #12]
 8004d7c:	681a      	ldr	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	605a      	str	r2, [r3, #4]
 8004d82:	e026      	b.n	8004dd2 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	68d8      	ldr	r0, [r3, #12]
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	f002 fa85 	bl	800729e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	68da      	ldr	r2, [r3, #12]
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d9c:	425b      	negs	r3, r3
 8004d9e:	441a      	add	r2, r3
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	68da      	ldr	r2, [r3, #12]
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	429a      	cmp	r2, r3
 8004dae:	d207      	bcs.n	8004dc0 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004db0:	68fb      	ldr	r3, [r7, #12]
 8004db2:	689a      	ldr	r2, [r3, #8]
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	425b      	negs	r3, r3
 8004dba:	441a      	add	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2b02      	cmp	r3, #2
 8004dc4:	d105      	bne.n	8004dd2 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004dc6:	693b      	ldr	r3, [r7, #16]
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d002      	beq.n	8004dd2 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	3b01      	subs	r3, #1
 8004dd0:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	1c5a      	adds	r2, r3, #1
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004dda:	697b      	ldr	r3, [r7, #20]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b082      	sub	sp, #8
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d018      	beq.n	8004e28 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dfe:	441a      	add	r2, r3
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	68da      	ldr	r2, [r3, #12]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	689b      	ldr	r3, [r3, #8]
 8004e0c:	429a      	cmp	r2, r3
 8004e0e:	d303      	bcc.n	8004e18 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681a      	ldr	r2, [r3, #0]
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68d9      	ldr	r1, [r3, #12]
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e20:	461a      	mov	r2, r3
 8004e22:	6838      	ldr	r0, [r7, #0]
 8004e24:	f002 fa3b 	bl	800729e <memcpy>
	}
}
 8004e28:	bf00      	nop
 8004e2a:	3708      	adds	r7, #8
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	bd80      	pop	{r7, pc}

08004e30 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b084      	sub	sp, #16
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004e38:	f001 fda4 	bl	8006984 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004e42:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e44:	e011      	b.n	8004e6a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d012      	beq.n	8004e74 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	3324      	adds	r3, #36	; 0x24
 8004e52:	4618      	mov	r0, r3
 8004e54:	f000 fdda 	bl	8005a0c <xTaskRemoveFromEventList>
 8004e58:	4603      	mov	r3, r0
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d001      	beq.n	8004e62 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004e5e:	f000 feb1 	bl	8005bc4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004e62:	7bfb      	ldrb	r3, [r7, #15]
 8004e64:	3b01      	subs	r3, #1
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	dce9      	bgt.n	8004e46 <prvUnlockQueue+0x16>
 8004e72:	e000      	b.n	8004e76 <prvUnlockQueue+0x46>
					break;
 8004e74:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	22ff      	movs	r2, #255	; 0xff
 8004e7a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e7e:	f001 fdb1 	bl	80069e4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e82:	f001 fd7f 	bl	8006984 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e8c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e8e:	e011      	b.n	8004eb4 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	691b      	ldr	r3, [r3, #16]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d012      	beq.n	8004ebe <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	3310      	adds	r3, #16
 8004e9c:	4618      	mov	r0, r3
 8004e9e:	f000 fdb5 	bl	8005a0c <xTaskRemoveFromEventList>
 8004ea2:	4603      	mov	r3, r0
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d001      	beq.n	8004eac <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004ea8:	f000 fe8c 	bl	8005bc4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004eac:	7bbb      	ldrb	r3, [r7, #14]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	b2db      	uxtb	r3, r3
 8004eb2:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004eb4:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	dce9      	bgt.n	8004e90 <prvUnlockQueue+0x60>
 8004ebc:	e000      	b.n	8004ec0 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004ebe:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	22ff      	movs	r2, #255	; 0xff
 8004ec4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004ec8:	f001 fd8c 	bl	80069e4 <vPortExitCritical>
}
 8004ecc:	bf00      	nop
 8004ece:	3710      	adds	r7, #16
 8004ed0:	46bd      	mov	sp, r7
 8004ed2:	bd80      	pop	{r7, pc}

08004ed4 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004ed4:	b580      	push	{r7, lr}
 8004ed6:	b084      	sub	sp, #16
 8004ed8:	af00      	add	r7, sp, #0
 8004eda:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004edc:	f001 fd52 	bl	8006984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d102      	bne.n	8004eee <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	60fb      	str	r3, [r7, #12]
 8004eec:	e001      	b.n	8004ef2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ef2:	f001 fd77 	bl	80069e4 <vPortExitCritical>

	return xReturn;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
}
 8004ef8:	4618      	mov	r0, r3
 8004efa:	3710      	adds	r7, #16
 8004efc:	46bd      	mov	sp, r7
 8004efe:	bd80      	pop	{r7, pc}

08004f00 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004f00:	b580      	push	{r7, lr}
 8004f02:	b084      	sub	sp, #16
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004f08:	f001 fd3c 	bl	8006984 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f14:	429a      	cmp	r2, r3
 8004f16:	d102      	bne.n	8004f1e <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	60fb      	str	r3, [r7, #12]
 8004f1c:	e001      	b.n	8004f22 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004f22:	f001 fd5f 	bl	80069e4 <vPortExitCritical>

	return xReturn;
 8004f26:	68fb      	ldr	r3, [r7, #12]
}
 8004f28:	4618      	mov	r0, r3
 8004f2a:	3710      	adds	r7, #16
 8004f2c:	46bd      	mov	sp, r7
 8004f2e:	bd80      	pop	{r7, pc}

08004f30 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004f30:	b480      	push	{r7}
 8004f32:	b085      	sub	sp, #20
 8004f34:	af00      	add	r7, sp, #0
 8004f36:	6078      	str	r0, [r7, #4]
 8004f38:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f3a:	2300      	movs	r3, #0
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e014      	b.n	8004f6a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004f40:	4a0f      	ldr	r2, [pc, #60]	; (8004f80 <vQueueAddToRegistry+0x50>)
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d10b      	bne.n	8004f64 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004f4c:	490c      	ldr	r1, [pc, #48]	; (8004f80 <vQueueAddToRegistry+0x50>)
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	683a      	ldr	r2, [r7, #0]
 8004f52:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004f56:	4a0a      	ldr	r2, [pc, #40]	; (8004f80 <vQueueAddToRegistry+0x50>)
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	00db      	lsls	r3, r3, #3
 8004f5c:	4413      	add	r3, r2
 8004f5e:	687a      	ldr	r2, [r7, #4]
 8004f60:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004f62:	e006      	b.n	8004f72 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	3301      	adds	r3, #1
 8004f68:	60fb      	str	r3, [r7, #12]
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	2b07      	cmp	r3, #7
 8004f6e:	d9e7      	bls.n	8004f40 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f70:	bf00      	nop
 8004f72:	bf00      	nop
 8004f74:	3714      	adds	r7, #20
 8004f76:	46bd      	mov	sp, r7
 8004f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f7c:	4770      	bx	lr
 8004f7e:	bf00      	nop
 8004f80:	20001020 	.word	0x20001020

08004f84 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b086      	sub	sp, #24
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f94:	f001 fcf6 	bl	8006984 <vPortEnterCritical>
 8004f98:	697b      	ldr	r3, [r7, #20]
 8004f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f9e:	b25b      	sxtb	r3, r3
 8004fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fa4:	d103      	bne.n	8004fae <vQueueWaitForMessageRestricted+0x2a>
 8004fa6:	697b      	ldr	r3, [r7, #20]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fae:	697b      	ldr	r3, [r7, #20]
 8004fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004fb4:	b25b      	sxtb	r3, r3
 8004fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fba:	d103      	bne.n	8004fc4 <vQueueWaitForMessageRestricted+0x40>
 8004fbc:	697b      	ldr	r3, [r7, #20]
 8004fbe:	2200      	movs	r2, #0
 8004fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004fc4:	f001 fd0e 	bl	80069e4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004fc8:	697b      	ldr	r3, [r7, #20]
 8004fca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fcc:	2b00      	cmp	r3, #0
 8004fce:	d106      	bne.n	8004fde <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004fd0:	697b      	ldr	r3, [r7, #20]
 8004fd2:	3324      	adds	r3, #36	; 0x24
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	68b9      	ldr	r1, [r7, #8]
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f000 fceb 	bl	80059b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004fde:	6978      	ldr	r0, [r7, #20]
 8004fe0:	f7ff ff26 	bl	8004e30 <prvUnlockQueue>
	}
 8004fe4:	bf00      	nop
 8004fe6:	3718      	adds	r7, #24
 8004fe8:	46bd      	mov	sp, r7
 8004fea:	bd80      	pop	{r7, pc}

08004fec <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004fec:	b580      	push	{r7, lr}
 8004fee:	b08e      	sub	sp, #56	; 0x38
 8004ff0:	af04      	add	r7, sp, #16
 8004ff2:	60f8      	str	r0, [r7, #12]
 8004ff4:	60b9      	str	r1, [r7, #8]
 8004ff6:	607a      	str	r2, [r7, #4]
 8004ff8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d10a      	bne.n	8005016 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005000:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005004:	f383 8811 	msr	BASEPRI, r3
 8005008:	f3bf 8f6f 	isb	sy
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	623b      	str	r3, [r7, #32]
}
 8005012:	bf00      	nop
 8005014:	e7fe      	b.n	8005014 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005016:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005018:	2b00      	cmp	r3, #0
 800501a:	d10a      	bne.n	8005032 <xTaskCreateStatic+0x46>
	__asm volatile
 800501c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005020:	f383 8811 	msr	BASEPRI, r3
 8005024:	f3bf 8f6f 	isb	sy
 8005028:	f3bf 8f4f 	dsb	sy
 800502c:	61fb      	str	r3, [r7, #28]
}
 800502e:	bf00      	nop
 8005030:	e7fe      	b.n	8005030 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005032:	23bc      	movs	r3, #188	; 0xbc
 8005034:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005036:	693b      	ldr	r3, [r7, #16]
 8005038:	2bbc      	cmp	r3, #188	; 0xbc
 800503a:	d00a      	beq.n	8005052 <xTaskCreateStatic+0x66>
	__asm volatile
 800503c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005040:	f383 8811 	msr	BASEPRI, r3
 8005044:	f3bf 8f6f 	isb	sy
 8005048:	f3bf 8f4f 	dsb	sy
 800504c:	61bb      	str	r3, [r7, #24]
}
 800504e:	bf00      	nop
 8005050:	e7fe      	b.n	8005050 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005052:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005054:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005056:	2b00      	cmp	r3, #0
 8005058:	d01e      	beq.n	8005098 <xTaskCreateStatic+0xac>
 800505a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800505c:	2b00      	cmp	r3, #0
 800505e:	d01b      	beq.n	8005098 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005060:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005062:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005066:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005068:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800506a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800506c:	2202      	movs	r2, #2
 800506e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005072:	2300      	movs	r3, #0
 8005074:	9303      	str	r3, [sp, #12]
 8005076:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005078:	9302      	str	r3, [sp, #8]
 800507a:	f107 0314 	add.w	r3, r7, #20
 800507e:	9301      	str	r3, [sp, #4]
 8005080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005082:	9300      	str	r3, [sp, #0]
 8005084:	683b      	ldr	r3, [r7, #0]
 8005086:	687a      	ldr	r2, [r7, #4]
 8005088:	68b9      	ldr	r1, [r7, #8]
 800508a:	68f8      	ldr	r0, [r7, #12]
 800508c:	f000 f850 	bl	8005130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005090:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005092:	f000 f8f3 	bl	800527c <prvAddNewTaskToReadyList>
 8005096:	e001      	b.n	800509c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005098:	2300      	movs	r3, #0
 800509a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800509c:	697b      	ldr	r3, [r7, #20]
	}
 800509e:	4618      	mov	r0, r3
 80050a0:	3728      	adds	r7, #40	; 0x28
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80050a6:	b580      	push	{r7, lr}
 80050a8:	b08c      	sub	sp, #48	; 0x30
 80050aa:	af04      	add	r7, sp, #16
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	603b      	str	r3, [r7, #0]
 80050b2:	4613      	mov	r3, r2
 80050b4:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80050b6:	88fb      	ldrh	r3, [r7, #6]
 80050b8:	009b      	lsls	r3, r3, #2
 80050ba:	4618      	mov	r0, r3
 80050bc:	f001 fd84 	bl	8006bc8 <pvPortMalloc>
 80050c0:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80050c2:	697b      	ldr	r3, [r7, #20]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d00e      	beq.n	80050e6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80050c8:	20bc      	movs	r0, #188	; 0xbc
 80050ca:	f001 fd7d 	bl	8006bc8 <pvPortMalloc>
 80050ce:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80050d0:	69fb      	ldr	r3, [r7, #28]
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d003      	beq.n	80050de <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	697a      	ldr	r2, [r7, #20]
 80050da:	631a      	str	r2, [r3, #48]	; 0x30
 80050dc:	e005      	b.n	80050ea <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80050de:	6978      	ldr	r0, [r7, #20]
 80050e0:	f001 fe3e 	bl	8006d60 <vPortFree>
 80050e4:	e001      	b.n	80050ea <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80050e6:	2300      	movs	r3, #0
 80050e8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d017      	beq.n	8005120 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80050f0:	69fb      	ldr	r3, [r7, #28]
 80050f2:	2200      	movs	r2, #0
 80050f4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80050f8:	88fa      	ldrh	r2, [r7, #6]
 80050fa:	2300      	movs	r3, #0
 80050fc:	9303      	str	r3, [sp, #12]
 80050fe:	69fb      	ldr	r3, [r7, #28]
 8005100:	9302      	str	r3, [sp, #8]
 8005102:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005104:	9301      	str	r3, [sp, #4]
 8005106:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005108:	9300      	str	r3, [sp, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	68b9      	ldr	r1, [r7, #8]
 800510e:	68f8      	ldr	r0, [r7, #12]
 8005110:	f000 f80e 	bl	8005130 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005114:	69f8      	ldr	r0, [r7, #28]
 8005116:	f000 f8b1 	bl	800527c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800511a:	2301      	movs	r3, #1
 800511c:	61bb      	str	r3, [r7, #24]
 800511e:	e002      	b.n	8005126 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005124:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005126:	69bb      	ldr	r3, [r7, #24]
	}
 8005128:	4618      	mov	r0, r3
 800512a:	3720      	adds	r7, #32
 800512c:	46bd      	mov	sp, r7
 800512e:	bd80      	pop	{r7, pc}

08005130 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005130:	b580      	push	{r7, lr}
 8005132:	b088      	sub	sp, #32
 8005134:	af00      	add	r7, sp, #0
 8005136:	60f8      	str	r0, [r7, #12]
 8005138:	60b9      	str	r1, [r7, #8]
 800513a:	607a      	str	r2, [r7, #4]
 800513c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800513e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005140:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	009b      	lsls	r3, r3, #2
 8005146:	461a      	mov	r2, r3
 8005148:	21a5      	movs	r1, #165	; 0xa5
 800514a:	f002 f8b6 	bl	80072ba <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800514e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005150:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005158:	3b01      	subs	r3, #1
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	4413      	add	r3, r2
 800515e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005160:	69bb      	ldr	r3, [r7, #24]
 8005162:	f023 0307 	bic.w	r3, r3, #7
 8005166:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005168:	69bb      	ldr	r3, [r7, #24]
 800516a:	f003 0307 	and.w	r3, r3, #7
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00a      	beq.n	8005188 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005176:	f383 8811 	msr	BASEPRI, r3
 800517a:	f3bf 8f6f 	isb	sy
 800517e:	f3bf 8f4f 	dsb	sy
 8005182:	617b      	str	r3, [r7, #20]
}
 8005184:	bf00      	nop
 8005186:	e7fe      	b.n	8005186 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005188:	68bb      	ldr	r3, [r7, #8]
 800518a:	2b00      	cmp	r3, #0
 800518c:	d01f      	beq.n	80051ce <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800518e:	2300      	movs	r3, #0
 8005190:	61fb      	str	r3, [r7, #28]
 8005192:	e012      	b.n	80051ba <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005194:	68ba      	ldr	r2, [r7, #8]
 8005196:	69fb      	ldr	r3, [r7, #28]
 8005198:	4413      	add	r3, r2
 800519a:	7819      	ldrb	r1, [r3, #0]
 800519c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	4413      	add	r3, r2
 80051a2:	3334      	adds	r3, #52	; 0x34
 80051a4:	460a      	mov	r2, r1
 80051a6:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80051a8:	68ba      	ldr	r2, [r7, #8]
 80051aa:	69fb      	ldr	r3, [r7, #28]
 80051ac:	4413      	add	r3, r2
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d006      	beq.n	80051c2 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	3301      	adds	r3, #1
 80051b8:	61fb      	str	r3, [r7, #28]
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	2b0f      	cmp	r3, #15
 80051be:	d9e9      	bls.n	8005194 <prvInitialiseNewTask+0x64>
 80051c0:	e000      	b.n	80051c4 <prvInitialiseNewTask+0x94>
			{
				break;
 80051c2:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	2200      	movs	r2, #0
 80051c8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051cc:	e003      	b.n	80051d6 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80051ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80051d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051d8:	2b37      	cmp	r3, #55	; 0x37
 80051da:	d901      	bls.n	80051e0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80051dc:	2337      	movs	r3, #55	; 0x37
 80051de:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80051e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051e4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80051e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80051ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80051ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ee:	2200      	movs	r2, #0
 80051f0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80051f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f4:	3304      	adds	r3, #4
 80051f6:	4618      	mov	r0, r3
 80051f8:	f7ff f978 	bl	80044ec <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80051fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051fe:	3318      	adds	r3, #24
 8005200:	4618      	mov	r0, r3
 8005202:	f7ff f973 	bl	80044ec <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005206:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005208:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800520a:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800520c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800520e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005212:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005214:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005216:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800521a:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800521c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800521e:	2200      	movs	r2, #0
 8005220:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005224:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005226:	2200      	movs	r2, #0
 8005228:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800522c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800522e:	3354      	adds	r3, #84	; 0x54
 8005230:	2260      	movs	r2, #96	; 0x60
 8005232:	2100      	movs	r1, #0
 8005234:	4618      	mov	r0, r3
 8005236:	f002 f840 	bl	80072ba <memset>
 800523a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800523c:	4a0c      	ldr	r2, [pc, #48]	; (8005270 <prvInitialiseNewTask+0x140>)
 800523e:	659a      	str	r2, [r3, #88]	; 0x58
 8005240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005242:	4a0c      	ldr	r2, [pc, #48]	; (8005274 <prvInitialiseNewTask+0x144>)
 8005244:	65da      	str	r2, [r3, #92]	; 0x5c
 8005246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005248:	4a0b      	ldr	r2, [pc, #44]	; (8005278 <prvInitialiseNewTask+0x148>)
 800524a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800524c:	683a      	ldr	r2, [r7, #0]
 800524e:	68f9      	ldr	r1, [r7, #12]
 8005250:	69b8      	ldr	r0, [r7, #24]
 8005252:	f001 fa69 	bl	8006728 <pxPortInitialiseStack>
 8005256:	4602      	mov	r2, r0
 8005258:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800525a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800525c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800525e:	2b00      	cmp	r3, #0
 8005260:	d002      	beq.n	8005268 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005264:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005266:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005268:	bf00      	nop
 800526a:	3720      	adds	r7, #32
 800526c:	46bd      	mov	sp, r7
 800526e:	bd80      	pop	{r7, pc}
 8005270:	0800a018 	.word	0x0800a018
 8005274:	0800a038 	.word	0x0800a038
 8005278:	08009ff8 	.word	0x08009ff8

0800527c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005284:	f001 fb7e 	bl	8006984 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005288:	4b2d      	ldr	r3, [pc, #180]	; (8005340 <prvAddNewTaskToReadyList+0xc4>)
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	3301      	adds	r3, #1
 800528e:	4a2c      	ldr	r2, [pc, #176]	; (8005340 <prvAddNewTaskToReadyList+0xc4>)
 8005290:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005292:	4b2c      	ldr	r3, [pc, #176]	; (8005344 <prvAddNewTaskToReadyList+0xc8>)
 8005294:	681b      	ldr	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	d109      	bne.n	80052ae <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800529a:	4a2a      	ldr	r2, [pc, #168]	; (8005344 <prvAddNewTaskToReadyList+0xc8>)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80052a0:	4b27      	ldr	r3, [pc, #156]	; (8005340 <prvAddNewTaskToReadyList+0xc4>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d110      	bne.n	80052ca <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80052a8:	f000 fcb0 	bl	8005c0c <prvInitialiseTaskLists>
 80052ac:	e00d      	b.n	80052ca <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80052ae:	4b26      	ldr	r3, [pc, #152]	; (8005348 <prvAddNewTaskToReadyList+0xcc>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d109      	bne.n	80052ca <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80052b6:	4b23      	ldr	r3, [pc, #140]	; (8005344 <prvAddNewTaskToReadyList+0xc8>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c0:	429a      	cmp	r2, r3
 80052c2:	d802      	bhi.n	80052ca <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80052c4:	4a1f      	ldr	r2, [pc, #124]	; (8005344 <prvAddNewTaskToReadyList+0xc8>)
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80052ca:	4b20      	ldr	r3, [pc, #128]	; (800534c <prvAddNewTaskToReadyList+0xd0>)
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	3301      	adds	r3, #1
 80052d0:	4a1e      	ldr	r2, [pc, #120]	; (800534c <prvAddNewTaskToReadyList+0xd0>)
 80052d2:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80052d4:	4b1d      	ldr	r3, [pc, #116]	; (800534c <prvAddNewTaskToReadyList+0xd0>)
 80052d6:	681a      	ldr	r2, [r3, #0]
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052e0:	4b1b      	ldr	r3, [pc, #108]	; (8005350 <prvAddNewTaskToReadyList+0xd4>)
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	429a      	cmp	r2, r3
 80052e6:	d903      	bls.n	80052f0 <prvAddNewTaskToReadyList+0x74>
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ec:	4a18      	ldr	r2, [pc, #96]	; (8005350 <prvAddNewTaskToReadyList+0xd4>)
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052f4:	4613      	mov	r3, r2
 80052f6:	009b      	lsls	r3, r3, #2
 80052f8:	4413      	add	r3, r2
 80052fa:	009b      	lsls	r3, r3, #2
 80052fc:	4a15      	ldr	r2, [pc, #84]	; (8005354 <prvAddNewTaskToReadyList+0xd8>)
 80052fe:	441a      	add	r2, r3
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	3304      	adds	r3, #4
 8005304:	4619      	mov	r1, r3
 8005306:	4610      	mov	r0, r2
 8005308:	f7ff f8fd 	bl	8004506 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800530c:	f001 fb6a 	bl	80069e4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005310:	4b0d      	ldr	r3, [pc, #52]	; (8005348 <prvAddNewTaskToReadyList+0xcc>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d00e      	beq.n	8005336 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005318:	4b0a      	ldr	r3, [pc, #40]	; (8005344 <prvAddNewTaskToReadyList+0xc8>)
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005322:	429a      	cmp	r2, r3
 8005324:	d207      	bcs.n	8005336 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005326:	4b0c      	ldr	r3, [pc, #48]	; (8005358 <prvAddNewTaskToReadyList+0xdc>)
 8005328:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800532c:	601a      	str	r2, [r3, #0]
 800532e:	f3bf 8f4f 	dsb	sy
 8005332:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005336:	bf00      	nop
 8005338:	3708      	adds	r7, #8
 800533a:	46bd      	mov	sp, r7
 800533c:	bd80      	pop	{r7, pc}
 800533e:	bf00      	nop
 8005340:	20001534 	.word	0x20001534
 8005344:	20001060 	.word	0x20001060
 8005348:	20001540 	.word	0x20001540
 800534c:	20001550 	.word	0x20001550
 8005350:	2000153c 	.word	0x2000153c
 8005354:	20001064 	.word	0x20001064
 8005358:	e000ed04 	.word	0xe000ed04

0800535c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800535c:	b580      	push	{r7, lr}
 800535e:	b084      	sub	sp, #16
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005364:	2300      	movs	r3, #0
 8005366:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2b00      	cmp	r3, #0
 800536c:	d017      	beq.n	800539e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800536e:	4b13      	ldr	r3, [pc, #76]	; (80053bc <vTaskDelay+0x60>)
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00a      	beq.n	800538c <vTaskDelay+0x30>
	__asm volatile
 8005376:	f04f 0350 	mov.w	r3, #80	; 0x50
 800537a:	f383 8811 	msr	BASEPRI, r3
 800537e:	f3bf 8f6f 	isb	sy
 8005382:	f3bf 8f4f 	dsb	sy
 8005386:	60bb      	str	r3, [r7, #8]
}
 8005388:	bf00      	nop
 800538a:	e7fe      	b.n	800538a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800538c:	f000 f8f0 	bl	8005570 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005390:	2100      	movs	r1, #0
 8005392:	6878      	ldr	r0, [r7, #4]
 8005394:	f000 fe26 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005398:	f000 f8f8 	bl	800558c <xTaskResumeAll>
 800539c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d107      	bne.n	80053b4 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80053a4:	4b06      	ldr	r3, [pc, #24]	; (80053c0 <vTaskDelay+0x64>)
 80053a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053aa:	601a      	str	r2, [r3, #0]
 80053ac:	f3bf 8f4f 	dsb	sy
 80053b0:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80053b4:	bf00      	nop
 80053b6:	3710      	adds	r7, #16
 80053b8:	46bd      	mov	sp, r7
 80053ba:	bd80      	pop	{r7, pc}
 80053bc:	2000155c 	.word	0x2000155c
 80053c0:	e000ed04 	.word	0xe000ed04

080053c4 <eTaskGetState>:
/*-----------------------------------------------------------*/

#if( ( INCLUDE_eTaskGetState == 1 ) || ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_xTaskAbortDelay == 1 ) )

	eTaskState eTaskGetState( TaskHandle_t xTask )
	{
 80053c4:	b580      	push	{r7, lr}
 80053c6:	b088      	sub	sp, #32
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	6078      	str	r0, [r7, #4]
	eTaskState eReturn;
	List_t const * pxStateList, *pxDelayedList, *pxOverflowedDelayedList;
	const TCB_t * const pxTCB = xTask;
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	61bb      	str	r3, [r7, #24]

		configASSERT( pxTCB );
 80053d0:	69bb      	ldr	r3, [r7, #24]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d10a      	bne.n	80053ec <eTaskGetState+0x28>
	__asm volatile
 80053d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053da:	f383 8811 	msr	BASEPRI, r3
 80053de:	f3bf 8f6f 	isb	sy
 80053e2:	f3bf 8f4f 	dsb	sy
 80053e6:	60bb      	str	r3, [r7, #8]
}
 80053e8:	bf00      	nop
 80053ea:	e7fe      	b.n	80053ea <eTaskGetState+0x26>

		if( pxTCB == pxCurrentTCB )
 80053ec:	4b23      	ldr	r3, [pc, #140]	; (800547c <eTaskGetState+0xb8>)
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	429a      	cmp	r2, r3
 80053f4:	d102      	bne.n	80053fc <eTaskGetState+0x38>
		{
			/* The task calling this function is querying its own state. */
			eReturn = eRunning;
 80053f6:	2300      	movs	r3, #0
 80053f8:	77fb      	strb	r3, [r7, #31]
 80053fa:	e03a      	b.n	8005472 <eTaskGetState+0xae>
		}
		else
		{
			taskENTER_CRITICAL();
 80053fc:	f001 fac2 	bl	8006984 <vPortEnterCritical>
			{
				pxStateList = listLIST_ITEM_CONTAINER( &( pxTCB->xStateListItem ) );
 8005400:	69bb      	ldr	r3, [r7, #24]
 8005402:	695b      	ldr	r3, [r3, #20]
 8005404:	617b      	str	r3, [r7, #20]
				pxDelayedList = pxDelayedTaskList;
 8005406:	4b1e      	ldr	r3, [pc, #120]	; (8005480 <eTaskGetState+0xbc>)
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	613b      	str	r3, [r7, #16]
				pxOverflowedDelayedList = pxOverflowDelayedTaskList;
 800540c:	4b1d      	ldr	r3, [pc, #116]	; (8005484 <eTaskGetState+0xc0>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	60fb      	str	r3, [r7, #12]
			}
			taskEXIT_CRITICAL();
 8005412:	f001 fae7 	bl	80069e4 <vPortExitCritical>

			if( ( pxStateList == pxDelayedList ) || ( pxStateList == pxOverflowedDelayedList ) )
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	693b      	ldr	r3, [r7, #16]
 800541a:	429a      	cmp	r2, r3
 800541c:	d003      	beq.n	8005426 <eTaskGetState+0x62>
 800541e:	697a      	ldr	r2, [r7, #20]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	429a      	cmp	r2, r3
 8005424:	d102      	bne.n	800542c <eTaskGetState+0x68>
			{
				/* The task being queried is referenced from one of the Blocked
				lists. */
				eReturn = eBlocked;
 8005426:	2302      	movs	r3, #2
 8005428:	77fb      	strb	r3, [r7, #31]
 800542a:	e022      	b.n	8005472 <eTaskGetState+0xae>
			}

			#if ( INCLUDE_vTaskSuspend == 1 )
				else if( pxStateList == &xSuspendedTaskList )
 800542c:	697b      	ldr	r3, [r7, #20]
 800542e:	4a16      	ldr	r2, [pc, #88]	; (8005488 <eTaskGetState+0xc4>)
 8005430:	4293      	cmp	r3, r2
 8005432:	d112      	bne.n	800545a <eTaskGetState+0x96>
				{
					/* The task being queried is referenced from the suspended
					list.  Is it genuinely suspended or is it blocked
					indefinitely? */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL )
 8005434:	69bb      	ldr	r3, [r7, #24]
 8005436:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005438:	2b00      	cmp	r3, #0
 800543a:	d10b      	bne.n	8005454 <eTaskGetState+0x90>
						{
							/* The task does not appear on the event list item of
							and of the RTOS objects, but could still be in the
							blocked state if it is waiting on its notification
							rather than waiting on an object. */
							if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 800543c:	69bb      	ldr	r3, [r7, #24]
 800543e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8005442:	b2db      	uxtb	r3, r3
 8005444:	2b01      	cmp	r3, #1
 8005446:	d102      	bne.n	800544e <eTaskGetState+0x8a>
							{
								eReturn = eBlocked;
 8005448:	2302      	movs	r3, #2
 800544a:	77fb      	strb	r3, [r7, #31]
 800544c:	e011      	b.n	8005472 <eTaskGetState+0xae>
							}
							else
							{
								eReturn = eSuspended;
 800544e:	2303      	movs	r3, #3
 8005450:	77fb      	strb	r3, [r7, #31]
 8005452:	e00e      	b.n	8005472 <eTaskGetState+0xae>
						}
						#endif
					}
					else
					{
						eReturn = eBlocked;
 8005454:	2302      	movs	r3, #2
 8005456:	77fb      	strb	r3, [r7, #31]
 8005458:	e00b      	b.n	8005472 <eTaskGetState+0xae>
					}
				}
			#endif

			#if ( INCLUDE_vTaskDelete == 1 )
				else if( ( pxStateList == &xTasksWaitingTermination ) || ( pxStateList == NULL ) )
 800545a:	697b      	ldr	r3, [r7, #20]
 800545c:	4a0b      	ldr	r2, [pc, #44]	; (800548c <eTaskGetState+0xc8>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d002      	beq.n	8005468 <eTaskGetState+0xa4>
 8005462:	697b      	ldr	r3, [r7, #20]
 8005464:	2b00      	cmp	r3, #0
 8005466:	d102      	bne.n	800546e <eTaskGetState+0xaa>
				{
					/* The task being queried is referenced from the deleted
					tasks list, or it is not referenced from any lists at
					all. */
					eReturn = eDeleted;
 8005468:	2304      	movs	r3, #4
 800546a:	77fb      	strb	r3, [r7, #31]
 800546c:	e001      	b.n	8005472 <eTaskGetState+0xae>

			else /*lint !e525 Negative indentation is intended to make use of pre-processor clearer. */
			{
				/* If the task is not in any other state, it must be in the
				Ready (including pending ready) state. */
				eReturn = eReady;
 800546e:	2301      	movs	r3, #1
 8005470:	77fb      	strb	r3, [r7, #31]
			}
		}

		return eReturn;
 8005472:	7ffb      	ldrb	r3, [r7, #31]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 8005474:	4618      	mov	r0, r3
 8005476:	3720      	adds	r7, #32
 8005478:	46bd      	mov	sp, r7
 800547a:	bd80      	pop	{r7, pc}
 800547c:	20001060 	.word	0x20001060
 8005480:	200014ec 	.word	0x200014ec
 8005484:	200014f0 	.word	0x200014f0
 8005488:	20001520 	.word	0x20001520
 800548c:	20001508 	.word	0x20001508

08005490 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005490:	b580      	push	{r7, lr}
 8005492:	b08a      	sub	sp, #40	; 0x28
 8005494:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005496:	2300      	movs	r3, #0
 8005498:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800549a:	2300      	movs	r3, #0
 800549c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800549e:	463a      	mov	r2, r7
 80054a0:	1d39      	adds	r1, r7, #4
 80054a2:	f107 0308 	add.w	r3, r7, #8
 80054a6:	4618      	mov	r0, r3
 80054a8:	f7fe ffcc 	bl	8004444 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80054ac:	6839      	ldr	r1, [r7, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	68ba      	ldr	r2, [r7, #8]
 80054b2:	9202      	str	r2, [sp, #8]
 80054b4:	9301      	str	r3, [sp, #4]
 80054b6:	2300      	movs	r3, #0
 80054b8:	9300      	str	r3, [sp, #0]
 80054ba:	2300      	movs	r3, #0
 80054bc:	460a      	mov	r2, r1
 80054be:	4924      	ldr	r1, [pc, #144]	; (8005550 <vTaskStartScheduler+0xc0>)
 80054c0:	4824      	ldr	r0, [pc, #144]	; (8005554 <vTaskStartScheduler+0xc4>)
 80054c2:	f7ff fd93 	bl	8004fec <xTaskCreateStatic>
 80054c6:	4603      	mov	r3, r0
 80054c8:	4a23      	ldr	r2, [pc, #140]	; (8005558 <vTaskStartScheduler+0xc8>)
 80054ca:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80054cc:	4b22      	ldr	r3, [pc, #136]	; (8005558 <vTaskStartScheduler+0xc8>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d002      	beq.n	80054da <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80054d4:	2301      	movs	r3, #1
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	e001      	b.n	80054de <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80054da:	2300      	movs	r3, #0
 80054dc:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80054de:	697b      	ldr	r3, [r7, #20]
 80054e0:	2b01      	cmp	r3, #1
 80054e2:	d102      	bne.n	80054ea <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80054e4:	f000 fdd2 	bl	800608c <xTimerCreateTimerTask>
 80054e8:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80054ea:	697b      	ldr	r3, [r7, #20]
 80054ec:	2b01      	cmp	r3, #1
 80054ee:	d11b      	bne.n	8005528 <vTaskStartScheduler+0x98>
	__asm volatile
 80054f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f4:	f383 8811 	msr	BASEPRI, r3
 80054f8:	f3bf 8f6f 	isb	sy
 80054fc:	f3bf 8f4f 	dsb	sy
 8005500:	613b      	str	r3, [r7, #16]
}
 8005502:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005504:	4b15      	ldr	r3, [pc, #84]	; (800555c <vTaskStartScheduler+0xcc>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3354      	adds	r3, #84	; 0x54
 800550a:	4a15      	ldr	r2, [pc, #84]	; (8005560 <vTaskStartScheduler+0xd0>)
 800550c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800550e:	4b15      	ldr	r3, [pc, #84]	; (8005564 <vTaskStartScheduler+0xd4>)
 8005510:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005514:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005516:	4b14      	ldr	r3, [pc, #80]	; (8005568 <vTaskStartScheduler+0xd8>)
 8005518:	2201      	movs	r2, #1
 800551a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800551c:	4b13      	ldr	r3, [pc, #76]	; (800556c <vTaskStartScheduler+0xdc>)
 800551e:	2200      	movs	r2, #0
 8005520:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005522:	f001 f98d 	bl	8006840 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005526:	e00e      	b.n	8005546 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800552e:	d10a      	bne.n	8005546 <vTaskStartScheduler+0xb6>
	__asm volatile
 8005530:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005534:	f383 8811 	msr	BASEPRI, r3
 8005538:	f3bf 8f6f 	isb	sy
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	60fb      	str	r3, [r7, #12]
}
 8005542:	bf00      	nop
 8005544:	e7fe      	b.n	8005544 <vTaskStartScheduler+0xb4>
}
 8005546:	bf00      	nop
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	08009ee4 	.word	0x08009ee4
 8005554:	08005bdd 	.word	0x08005bdd
 8005558:	20001558 	.word	0x20001558
 800555c:	20001060 	.word	0x20001060
 8005560:	20000010 	.word	0x20000010
 8005564:	20001554 	.word	0x20001554
 8005568:	20001540 	.word	0x20001540
 800556c:	20001538 	.word	0x20001538

08005570 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005570:	b480      	push	{r7}
 8005572:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005574:	4b04      	ldr	r3, [pc, #16]	; (8005588 <vTaskSuspendAll+0x18>)
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	3301      	adds	r3, #1
 800557a:	4a03      	ldr	r2, [pc, #12]	; (8005588 <vTaskSuspendAll+0x18>)
 800557c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800557e:	bf00      	nop
 8005580:	46bd      	mov	sp, r7
 8005582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005586:	4770      	bx	lr
 8005588:	2000155c 	.word	0x2000155c

0800558c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005592:	2300      	movs	r3, #0
 8005594:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005596:	2300      	movs	r3, #0
 8005598:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800559a:	4b42      	ldr	r3, [pc, #264]	; (80056a4 <xTaskResumeAll+0x118>)
 800559c:	681b      	ldr	r3, [r3, #0]
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d10a      	bne.n	80055b8 <xTaskResumeAll+0x2c>
	__asm volatile
 80055a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055a6:	f383 8811 	msr	BASEPRI, r3
 80055aa:	f3bf 8f6f 	isb	sy
 80055ae:	f3bf 8f4f 	dsb	sy
 80055b2:	603b      	str	r3, [r7, #0]
}
 80055b4:	bf00      	nop
 80055b6:	e7fe      	b.n	80055b6 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80055b8:	f001 f9e4 	bl	8006984 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80055bc:	4b39      	ldr	r3, [pc, #228]	; (80056a4 <xTaskResumeAll+0x118>)
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	3b01      	subs	r3, #1
 80055c2:	4a38      	ldr	r2, [pc, #224]	; (80056a4 <xTaskResumeAll+0x118>)
 80055c4:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80055c6:	4b37      	ldr	r3, [pc, #220]	; (80056a4 <xTaskResumeAll+0x118>)
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d162      	bne.n	8005694 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80055ce:	4b36      	ldr	r3, [pc, #216]	; (80056a8 <xTaskResumeAll+0x11c>)
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d05e      	beq.n	8005694 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80055d6:	e02f      	b.n	8005638 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80055d8:	4b34      	ldr	r3, [pc, #208]	; (80056ac <xTaskResumeAll+0x120>)
 80055da:	68db      	ldr	r3, [r3, #12]
 80055dc:	68db      	ldr	r3, [r3, #12]
 80055de:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	3318      	adds	r3, #24
 80055e4:	4618      	mov	r0, r3
 80055e6:	f7fe ffeb 	bl	80045c0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	3304      	adds	r3, #4
 80055ee:	4618      	mov	r0, r3
 80055f0:	f7fe ffe6 	bl	80045c0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055f8:	4b2d      	ldr	r3, [pc, #180]	; (80056b0 <xTaskResumeAll+0x124>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	429a      	cmp	r2, r3
 80055fe:	d903      	bls.n	8005608 <xTaskResumeAll+0x7c>
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005604:	4a2a      	ldr	r2, [pc, #168]	; (80056b0 <xTaskResumeAll+0x124>)
 8005606:	6013      	str	r3, [r2, #0]
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800560c:	4613      	mov	r3, r2
 800560e:	009b      	lsls	r3, r3, #2
 8005610:	4413      	add	r3, r2
 8005612:	009b      	lsls	r3, r3, #2
 8005614:	4a27      	ldr	r2, [pc, #156]	; (80056b4 <xTaskResumeAll+0x128>)
 8005616:	441a      	add	r2, r3
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	3304      	adds	r3, #4
 800561c:	4619      	mov	r1, r3
 800561e:	4610      	mov	r0, r2
 8005620:	f7fe ff71 	bl	8004506 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005628:	4b23      	ldr	r3, [pc, #140]	; (80056b8 <xTaskResumeAll+0x12c>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800562e:	429a      	cmp	r2, r3
 8005630:	d302      	bcc.n	8005638 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005632:	4b22      	ldr	r3, [pc, #136]	; (80056bc <xTaskResumeAll+0x130>)
 8005634:	2201      	movs	r2, #1
 8005636:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005638:	4b1c      	ldr	r3, [pc, #112]	; (80056ac <xTaskResumeAll+0x120>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	d1cb      	bne.n	80055d8 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d001      	beq.n	800564a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005646:	f000 fc21 	bl	8005e8c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800564a:	4b1d      	ldr	r3, [pc, #116]	; (80056c0 <xTaskResumeAll+0x134>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2b00      	cmp	r3, #0
 8005654:	d010      	beq.n	8005678 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005656:	f000 f86b 	bl	8005730 <xTaskIncrementTick>
 800565a:	4603      	mov	r3, r0
 800565c:	2b00      	cmp	r3, #0
 800565e:	d002      	beq.n	8005666 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005660:	4b16      	ldr	r3, [pc, #88]	; (80056bc <xTaskResumeAll+0x130>)
 8005662:	2201      	movs	r2, #1
 8005664:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	3b01      	subs	r3, #1
 800566a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2b00      	cmp	r3, #0
 8005670:	d1f1      	bne.n	8005656 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005672:	4b13      	ldr	r3, [pc, #76]	; (80056c0 <xTaskResumeAll+0x134>)
 8005674:	2200      	movs	r2, #0
 8005676:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005678:	4b10      	ldr	r3, [pc, #64]	; (80056bc <xTaskResumeAll+0x130>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d009      	beq.n	8005694 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005680:	2301      	movs	r3, #1
 8005682:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005684:	4b0f      	ldr	r3, [pc, #60]	; (80056c4 <xTaskResumeAll+0x138>)
 8005686:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800568a:	601a      	str	r2, [r3, #0]
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005694:	f001 f9a6 	bl	80069e4 <vPortExitCritical>

	return xAlreadyYielded;
 8005698:	68bb      	ldr	r3, [r7, #8]
}
 800569a:	4618      	mov	r0, r3
 800569c:	3710      	adds	r7, #16
 800569e:	46bd      	mov	sp, r7
 80056a0:	bd80      	pop	{r7, pc}
 80056a2:	bf00      	nop
 80056a4:	2000155c 	.word	0x2000155c
 80056a8:	20001534 	.word	0x20001534
 80056ac:	200014f4 	.word	0x200014f4
 80056b0:	2000153c 	.word	0x2000153c
 80056b4:	20001064 	.word	0x20001064
 80056b8:	20001060 	.word	0x20001060
 80056bc:	20001548 	.word	0x20001548
 80056c0:	20001544 	.word	0x20001544
 80056c4:	e000ed04 	.word	0xe000ed04

080056c8 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80056ce:	4b05      	ldr	r3, [pc, #20]	; (80056e4 <xTaskGetTickCount+0x1c>)
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80056d4:	687b      	ldr	r3, [r7, #4]
}
 80056d6:	4618      	mov	r0, r3
 80056d8:	370c      	adds	r7, #12
 80056da:	46bd      	mov	sp, r7
 80056dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e0:	4770      	bx	lr
 80056e2:	bf00      	nop
 80056e4:	20001538 	.word	0x20001538

080056e8 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80056e8:	b480      	push	{r7}
 80056ea:	b085      	sub	sp, #20
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d102      	bne.n	80056fc <pcTaskGetName+0x14>
 80056f6:	4b0d      	ldr	r3, [pc, #52]	; (800572c <pcTaskGetName+0x44>)
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	e000      	b.n	80056fe <pcTaskGetName+0x16>
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10a      	bne.n	800571c <pcTaskGetName+0x34>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	; 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	60bb      	str	r3, [r7, #8]
}
 8005718:	bf00      	nop
 800571a:	e7fe      	b.n	800571a <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	3334      	adds	r3, #52	; 0x34
}
 8005720:	4618      	mov	r0, r3
 8005722:	3714      	adds	r7, #20
 8005724:	46bd      	mov	sp, r7
 8005726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572a:	4770      	bx	lr
 800572c:	20001060 	.word	0x20001060

08005730 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005736:	2300      	movs	r3, #0
 8005738:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800573a:	4b4f      	ldr	r3, [pc, #316]	; (8005878 <xTaskIncrementTick+0x148>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	f040 808f 	bne.w	8005862 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005744:	4b4d      	ldr	r3, [pc, #308]	; (800587c <xTaskIncrementTick+0x14c>)
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	3301      	adds	r3, #1
 800574a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800574c:	4a4b      	ldr	r2, [pc, #300]	; (800587c <xTaskIncrementTick+0x14c>)
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005752:	693b      	ldr	r3, [r7, #16]
 8005754:	2b00      	cmp	r3, #0
 8005756:	d120      	bne.n	800579a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005758:	4b49      	ldr	r3, [pc, #292]	; (8005880 <xTaskIncrementTick+0x150>)
 800575a:	681b      	ldr	r3, [r3, #0]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d00a      	beq.n	8005778 <xTaskIncrementTick+0x48>
	__asm volatile
 8005762:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005766:	f383 8811 	msr	BASEPRI, r3
 800576a:	f3bf 8f6f 	isb	sy
 800576e:	f3bf 8f4f 	dsb	sy
 8005772:	603b      	str	r3, [r7, #0]
}
 8005774:	bf00      	nop
 8005776:	e7fe      	b.n	8005776 <xTaskIncrementTick+0x46>
 8005778:	4b41      	ldr	r3, [pc, #260]	; (8005880 <xTaskIncrementTick+0x150>)
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	60fb      	str	r3, [r7, #12]
 800577e:	4b41      	ldr	r3, [pc, #260]	; (8005884 <xTaskIncrementTick+0x154>)
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	4a3f      	ldr	r2, [pc, #252]	; (8005880 <xTaskIncrementTick+0x150>)
 8005784:	6013      	str	r3, [r2, #0]
 8005786:	4a3f      	ldr	r2, [pc, #252]	; (8005884 <xTaskIncrementTick+0x154>)
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	6013      	str	r3, [r2, #0]
 800578c:	4b3e      	ldr	r3, [pc, #248]	; (8005888 <xTaskIncrementTick+0x158>)
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	3301      	adds	r3, #1
 8005792:	4a3d      	ldr	r2, [pc, #244]	; (8005888 <xTaskIncrementTick+0x158>)
 8005794:	6013      	str	r3, [r2, #0]
 8005796:	f000 fb79 	bl	8005e8c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800579a:	4b3c      	ldr	r3, [pc, #240]	; (800588c <xTaskIncrementTick+0x15c>)
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	693a      	ldr	r2, [r7, #16]
 80057a0:	429a      	cmp	r2, r3
 80057a2:	d349      	bcc.n	8005838 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80057a4:	4b36      	ldr	r3, [pc, #216]	; (8005880 <xTaskIncrementTick+0x150>)
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d104      	bne.n	80057b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80057ae:	4b37      	ldr	r3, [pc, #220]	; (800588c <xTaskIncrementTick+0x15c>)
 80057b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80057b4:	601a      	str	r2, [r3, #0]
					break;
 80057b6:	e03f      	b.n	8005838 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057b8:	4b31      	ldr	r3, [pc, #196]	; (8005880 <xTaskIncrementTick+0x150>)
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	68db      	ldr	r3, [r3, #12]
 80057be:	68db      	ldr	r3, [r3, #12]
 80057c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80057c2:	68bb      	ldr	r3, [r7, #8]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80057c8:	693a      	ldr	r2, [r7, #16]
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	429a      	cmp	r2, r3
 80057ce:	d203      	bcs.n	80057d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80057d0:	4a2e      	ldr	r2, [pc, #184]	; (800588c <xTaskIncrementTick+0x15c>)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80057d6:	e02f      	b.n	8005838 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80057d8:	68bb      	ldr	r3, [r7, #8]
 80057da:	3304      	adds	r3, #4
 80057dc:	4618      	mov	r0, r3
 80057de:	f7fe feef 	bl	80045c0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d004      	beq.n	80057f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	3318      	adds	r3, #24
 80057ee:	4618      	mov	r0, r3
 80057f0:	f7fe fee6 	bl	80045c0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80057f4:	68bb      	ldr	r3, [r7, #8]
 80057f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80057f8:	4b25      	ldr	r3, [pc, #148]	; (8005890 <xTaskIncrementTick+0x160>)
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	429a      	cmp	r2, r3
 80057fe:	d903      	bls.n	8005808 <xTaskIncrementTick+0xd8>
 8005800:	68bb      	ldr	r3, [r7, #8]
 8005802:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005804:	4a22      	ldr	r2, [pc, #136]	; (8005890 <xTaskIncrementTick+0x160>)
 8005806:	6013      	str	r3, [r2, #0]
 8005808:	68bb      	ldr	r3, [r7, #8]
 800580a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800580c:	4613      	mov	r3, r2
 800580e:	009b      	lsls	r3, r3, #2
 8005810:	4413      	add	r3, r2
 8005812:	009b      	lsls	r3, r3, #2
 8005814:	4a1f      	ldr	r2, [pc, #124]	; (8005894 <xTaskIncrementTick+0x164>)
 8005816:	441a      	add	r2, r3
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	3304      	adds	r3, #4
 800581c:	4619      	mov	r1, r3
 800581e:	4610      	mov	r0, r2
 8005820:	f7fe fe71 	bl	8004506 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005828:	4b1b      	ldr	r3, [pc, #108]	; (8005898 <xTaskIncrementTick+0x168>)
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800582e:	429a      	cmp	r2, r3
 8005830:	d3b8      	bcc.n	80057a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005832:	2301      	movs	r3, #1
 8005834:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005836:	e7b5      	b.n	80057a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005838:	4b17      	ldr	r3, [pc, #92]	; (8005898 <xTaskIncrementTick+0x168>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800583e:	4915      	ldr	r1, [pc, #84]	; (8005894 <xTaskIncrementTick+0x164>)
 8005840:	4613      	mov	r3, r2
 8005842:	009b      	lsls	r3, r3, #2
 8005844:	4413      	add	r3, r2
 8005846:	009b      	lsls	r3, r3, #2
 8005848:	440b      	add	r3, r1
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	2b01      	cmp	r3, #1
 800584e:	d901      	bls.n	8005854 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005850:	2301      	movs	r3, #1
 8005852:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005854:	4b11      	ldr	r3, [pc, #68]	; (800589c <xTaskIncrementTick+0x16c>)
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d007      	beq.n	800586c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800585c:	2301      	movs	r3, #1
 800585e:	617b      	str	r3, [r7, #20]
 8005860:	e004      	b.n	800586c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005862:	4b0f      	ldr	r3, [pc, #60]	; (80058a0 <xTaskIncrementTick+0x170>)
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	3301      	adds	r3, #1
 8005868:	4a0d      	ldr	r2, [pc, #52]	; (80058a0 <xTaskIncrementTick+0x170>)
 800586a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800586c:	697b      	ldr	r3, [r7, #20]
}
 800586e:	4618      	mov	r0, r3
 8005870:	3718      	adds	r7, #24
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
 8005876:	bf00      	nop
 8005878:	2000155c 	.word	0x2000155c
 800587c:	20001538 	.word	0x20001538
 8005880:	200014ec 	.word	0x200014ec
 8005884:	200014f0 	.word	0x200014f0
 8005888:	2000154c 	.word	0x2000154c
 800588c:	20001554 	.word	0x20001554
 8005890:	2000153c 	.word	0x2000153c
 8005894:	20001064 	.word	0x20001064
 8005898:	20001060 	.word	0x20001060
 800589c:	20001548 	.word	0x20001548
 80058a0:	20001544 	.word	0x20001544

080058a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80058a4:	b480      	push	{r7}
 80058a6:	b085      	sub	sp, #20
 80058a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80058aa:	4b2a      	ldr	r3, [pc, #168]	; (8005954 <vTaskSwitchContext+0xb0>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d003      	beq.n	80058ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80058b2:	4b29      	ldr	r3, [pc, #164]	; (8005958 <vTaskSwitchContext+0xb4>)
 80058b4:	2201      	movs	r2, #1
 80058b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80058b8:	e046      	b.n	8005948 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80058ba:	4b27      	ldr	r3, [pc, #156]	; (8005958 <vTaskSwitchContext+0xb4>)
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058c0:	4b26      	ldr	r3, [pc, #152]	; (800595c <vTaskSwitchContext+0xb8>)
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	60fb      	str	r3, [r7, #12]
 80058c6:	e010      	b.n	80058ea <vTaskSwitchContext+0x46>
 80058c8:	68fb      	ldr	r3, [r7, #12]
 80058ca:	2b00      	cmp	r3, #0
 80058cc:	d10a      	bne.n	80058e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80058ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058d2:	f383 8811 	msr	BASEPRI, r3
 80058d6:	f3bf 8f6f 	isb	sy
 80058da:	f3bf 8f4f 	dsb	sy
 80058de:	607b      	str	r3, [r7, #4]
}
 80058e0:	bf00      	nop
 80058e2:	e7fe      	b.n	80058e2 <vTaskSwitchContext+0x3e>
 80058e4:	68fb      	ldr	r3, [r7, #12]
 80058e6:	3b01      	subs	r3, #1
 80058e8:	60fb      	str	r3, [r7, #12]
 80058ea:	491d      	ldr	r1, [pc, #116]	; (8005960 <vTaskSwitchContext+0xbc>)
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4613      	mov	r3, r2
 80058f0:	009b      	lsls	r3, r3, #2
 80058f2:	4413      	add	r3, r2
 80058f4:	009b      	lsls	r3, r3, #2
 80058f6:	440b      	add	r3, r1
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d0e4      	beq.n	80058c8 <vTaskSwitchContext+0x24>
 80058fe:	68fa      	ldr	r2, [r7, #12]
 8005900:	4613      	mov	r3, r2
 8005902:	009b      	lsls	r3, r3, #2
 8005904:	4413      	add	r3, r2
 8005906:	009b      	lsls	r3, r3, #2
 8005908:	4a15      	ldr	r2, [pc, #84]	; (8005960 <vTaskSwitchContext+0xbc>)
 800590a:	4413      	add	r3, r2
 800590c:	60bb      	str	r3, [r7, #8]
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	685b      	ldr	r3, [r3, #4]
 8005912:	685a      	ldr	r2, [r3, #4]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	605a      	str	r2, [r3, #4]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	3308      	adds	r3, #8
 8005920:	429a      	cmp	r2, r3
 8005922:	d104      	bne.n	800592e <vTaskSwitchContext+0x8a>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	685b      	ldr	r3, [r3, #4]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	605a      	str	r2, [r3, #4]
 800592e:	68bb      	ldr	r3, [r7, #8]
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	68db      	ldr	r3, [r3, #12]
 8005934:	4a0b      	ldr	r2, [pc, #44]	; (8005964 <vTaskSwitchContext+0xc0>)
 8005936:	6013      	str	r3, [r2, #0]
 8005938:	4a08      	ldr	r2, [pc, #32]	; (800595c <vTaskSwitchContext+0xb8>)
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800593e:	4b09      	ldr	r3, [pc, #36]	; (8005964 <vTaskSwitchContext+0xc0>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	3354      	adds	r3, #84	; 0x54
 8005944:	4a08      	ldr	r2, [pc, #32]	; (8005968 <vTaskSwitchContext+0xc4>)
 8005946:	6013      	str	r3, [r2, #0]
}
 8005948:	bf00      	nop
 800594a:	3714      	adds	r7, #20
 800594c:	46bd      	mov	sp, r7
 800594e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005952:	4770      	bx	lr
 8005954:	2000155c 	.word	0x2000155c
 8005958:	20001548 	.word	0x20001548
 800595c:	2000153c 	.word	0x2000153c
 8005960:	20001064 	.word	0x20001064
 8005964:	20001060 	.word	0x20001060
 8005968:	20000010 	.word	0x20000010

0800596c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b084      	sub	sp, #16
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
 8005974:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d10a      	bne.n	8005992 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	60fb      	str	r3, [r7, #12]
}
 800598e:	bf00      	nop
 8005990:	e7fe      	b.n	8005990 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005992:	4b07      	ldr	r3, [pc, #28]	; (80059b0 <vTaskPlaceOnEventList+0x44>)
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	3318      	adds	r3, #24
 8005998:	4619      	mov	r1, r3
 800599a:	6878      	ldr	r0, [r7, #4]
 800599c:	f7fe fdd7 	bl	800454e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80059a0:	2101      	movs	r1, #1
 80059a2:	6838      	ldr	r0, [r7, #0]
 80059a4:	f000 fb1e 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
}
 80059a8:	bf00      	nop
 80059aa:	3710      	adds	r7, #16
 80059ac:	46bd      	mov	sp, r7
 80059ae:	bd80      	pop	{r7, pc}
 80059b0:	20001060 	.word	0x20001060

080059b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d10a      	bne.n	80059dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80059c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059ca:	f383 8811 	msr	BASEPRI, r3
 80059ce:	f3bf 8f6f 	isb	sy
 80059d2:	f3bf 8f4f 	dsb	sy
 80059d6:	617b      	str	r3, [r7, #20]
}
 80059d8:	bf00      	nop
 80059da:	e7fe      	b.n	80059da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80059dc:	4b0a      	ldr	r3, [pc, #40]	; (8005a08 <vTaskPlaceOnEventListRestricted+0x54>)
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	3318      	adds	r3, #24
 80059e2:	4619      	mov	r1, r3
 80059e4:	68f8      	ldr	r0, [r7, #12]
 80059e6:	f7fe fd8e 	bl	8004506 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d002      	beq.n	80059f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80059f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80059f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80059f6:	6879      	ldr	r1, [r7, #4]
 80059f8:	68b8      	ldr	r0, [r7, #8]
 80059fa:	f000 faf3 	bl	8005fe4 <prvAddCurrentTaskToDelayedList>
	}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20001060 	.word	0x20001060

08005a0c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005a0c:	b580      	push	{r7, lr}
 8005a0e:	b086      	sub	sp, #24
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	68db      	ldr	r3, [r3, #12]
 8005a18:	68db      	ldr	r3, [r3, #12]
 8005a1a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005a1c:	693b      	ldr	r3, [r7, #16]
 8005a1e:	2b00      	cmp	r3, #0
 8005a20:	d10a      	bne.n	8005a38 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005a22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a26:	f383 8811 	msr	BASEPRI, r3
 8005a2a:	f3bf 8f6f 	isb	sy
 8005a2e:	f3bf 8f4f 	dsb	sy
 8005a32:	60fb      	str	r3, [r7, #12]
}
 8005a34:	bf00      	nop
 8005a36:	e7fe      	b.n	8005a36 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005a38:	693b      	ldr	r3, [r7, #16]
 8005a3a:	3318      	adds	r3, #24
 8005a3c:	4618      	mov	r0, r3
 8005a3e:	f7fe fdbf 	bl	80045c0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a42:	4b1e      	ldr	r3, [pc, #120]	; (8005abc <xTaskRemoveFromEventList+0xb0>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d11d      	bne.n	8005a86 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005a4a:	693b      	ldr	r3, [r7, #16]
 8005a4c:	3304      	adds	r3, #4
 8005a4e:	4618      	mov	r0, r3
 8005a50:	f7fe fdb6 	bl	80045c0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005a54:	693b      	ldr	r3, [r7, #16]
 8005a56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a58:	4b19      	ldr	r3, [pc, #100]	; (8005ac0 <xTaskRemoveFromEventList+0xb4>)
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	429a      	cmp	r2, r3
 8005a5e:	d903      	bls.n	8005a68 <xTaskRemoveFromEventList+0x5c>
 8005a60:	693b      	ldr	r3, [r7, #16]
 8005a62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a64:	4a16      	ldr	r2, [pc, #88]	; (8005ac0 <xTaskRemoveFromEventList+0xb4>)
 8005a66:	6013      	str	r3, [r2, #0]
 8005a68:	693b      	ldr	r3, [r7, #16]
 8005a6a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a6c:	4613      	mov	r3, r2
 8005a6e:	009b      	lsls	r3, r3, #2
 8005a70:	4413      	add	r3, r2
 8005a72:	009b      	lsls	r3, r3, #2
 8005a74:	4a13      	ldr	r2, [pc, #76]	; (8005ac4 <xTaskRemoveFromEventList+0xb8>)
 8005a76:	441a      	add	r2, r3
 8005a78:	693b      	ldr	r3, [r7, #16]
 8005a7a:	3304      	adds	r3, #4
 8005a7c:	4619      	mov	r1, r3
 8005a7e:	4610      	mov	r0, r2
 8005a80:	f7fe fd41 	bl	8004506 <vListInsertEnd>
 8005a84:	e005      	b.n	8005a92 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005a86:	693b      	ldr	r3, [r7, #16]
 8005a88:	3318      	adds	r3, #24
 8005a8a:	4619      	mov	r1, r3
 8005a8c:	480e      	ldr	r0, [pc, #56]	; (8005ac8 <xTaskRemoveFromEventList+0xbc>)
 8005a8e:	f7fe fd3a 	bl	8004506 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005a92:	693b      	ldr	r3, [r7, #16]
 8005a94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005a96:	4b0d      	ldr	r3, [pc, #52]	; (8005acc <xTaskRemoveFromEventList+0xc0>)
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a9c:	429a      	cmp	r2, r3
 8005a9e:	d905      	bls.n	8005aac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005aa4:	4b0a      	ldr	r3, [pc, #40]	; (8005ad0 <xTaskRemoveFromEventList+0xc4>)
 8005aa6:	2201      	movs	r2, #1
 8005aa8:	601a      	str	r2, [r3, #0]
 8005aaa:	e001      	b.n	8005ab0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005aac:	2300      	movs	r3, #0
 8005aae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005ab0:	697b      	ldr	r3, [r7, #20]
}
 8005ab2:	4618      	mov	r0, r3
 8005ab4:	3718      	adds	r7, #24
 8005ab6:	46bd      	mov	sp, r7
 8005ab8:	bd80      	pop	{r7, pc}
 8005aba:	bf00      	nop
 8005abc:	2000155c 	.word	0x2000155c
 8005ac0:	2000153c 	.word	0x2000153c
 8005ac4:	20001064 	.word	0x20001064
 8005ac8:	200014f4 	.word	0x200014f4
 8005acc:	20001060 	.word	0x20001060
 8005ad0:	20001548 	.word	0x20001548

08005ad4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b083      	sub	sp, #12
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005adc:	4b06      	ldr	r3, [pc, #24]	; (8005af8 <vTaskInternalSetTimeOutState+0x24>)
 8005ade:	681a      	ldr	r2, [r3, #0]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005ae4:	4b05      	ldr	r3, [pc, #20]	; (8005afc <vTaskInternalSetTimeOutState+0x28>)
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	605a      	str	r2, [r3, #4]
}
 8005aec:	bf00      	nop
 8005aee:	370c      	adds	r7, #12
 8005af0:	46bd      	mov	sp, r7
 8005af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005af6:	4770      	bx	lr
 8005af8:	2000154c 	.word	0x2000154c
 8005afc:	20001538 	.word	0x20001538

08005b00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b088      	sub	sp, #32
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d10a      	bne.n	8005b26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005b10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b14:	f383 8811 	msr	BASEPRI, r3
 8005b18:	f3bf 8f6f 	isb	sy
 8005b1c:	f3bf 8f4f 	dsb	sy
 8005b20:	613b      	str	r3, [r7, #16]
}
 8005b22:	bf00      	nop
 8005b24:	e7fe      	b.n	8005b24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d10a      	bne.n	8005b42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005b2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b30:	f383 8811 	msr	BASEPRI, r3
 8005b34:	f3bf 8f6f 	isb	sy
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	60fb      	str	r3, [r7, #12]
}
 8005b3e:	bf00      	nop
 8005b40:	e7fe      	b.n	8005b40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005b42:	f000 ff1f 	bl	8006984 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005b46:	4b1d      	ldr	r3, [pc, #116]	; (8005bbc <xTaskCheckForTimeOut+0xbc>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	69ba      	ldr	r2, [r7, #24]
 8005b52:	1ad3      	subs	r3, r2, r3
 8005b54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005b56:	683b      	ldr	r3, [r7, #0]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005b5e:	d102      	bne.n	8005b66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005b60:	2300      	movs	r3, #0
 8005b62:	61fb      	str	r3, [r7, #28]
 8005b64:	e023      	b.n	8005bae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681a      	ldr	r2, [r3, #0]
 8005b6a:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <xTaskCheckForTimeOut+0xc0>)
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	429a      	cmp	r2, r3
 8005b70:	d007      	beq.n	8005b82 <xTaskCheckForTimeOut+0x82>
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	685b      	ldr	r3, [r3, #4]
 8005b76:	69ba      	ldr	r2, [r7, #24]
 8005b78:	429a      	cmp	r2, r3
 8005b7a:	d302      	bcc.n	8005b82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005b7c:	2301      	movs	r3, #1
 8005b7e:	61fb      	str	r3, [r7, #28]
 8005b80:	e015      	b.n	8005bae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	697a      	ldr	r2, [r7, #20]
 8005b88:	429a      	cmp	r2, r3
 8005b8a:	d20b      	bcs.n	8005ba4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005b8c:	683b      	ldr	r3, [r7, #0]
 8005b8e:	681a      	ldr	r2, [r3, #0]
 8005b90:	697b      	ldr	r3, [r7, #20]
 8005b92:	1ad2      	subs	r2, r2, r3
 8005b94:	683b      	ldr	r3, [r7, #0]
 8005b96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005b98:	6878      	ldr	r0, [r7, #4]
 8005b9a:	f7ff ff9b 	bl	8005ad4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	e004      	b.n	8005bae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005baa:	2301      	movs	r3, #1
 8005bac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005bae:	f000 ff19 	bl	80069e4 <vPortExitCritical>

	return xReturn;
 8005bb2:	69fb      	ldr	r3, [r7, #28]
}
 8005bb4:	4618      	mov	r0, r3
 8005bb6:	3720      	adds	r7, #32
 8005bb8:	46bd      	mov	sp, r7
 8005bba:	bd80      	pop	{r7, pc}
 8005bbc:	20001538 	.word	0x20001538
 8005bc0:	2000154c 	.word	0x2000154c

08005bc4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005bc4:	b480      	push	{r7}
 8005bc6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005bc8:	4b03      	ldr	r3, [pc, #12]	; (8005bd8 <vTaskMissedYield+0x14>)
 8005bca:	2201      	movs	r2, #1
 8005bcc:	601a      	str	r2, [r3, #0]
}
 8005bce:	bf00      	nop
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bd6:	4770      	bx	lr
 8005bd8:	20001548 	.word	0x20001548

08005bdc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005bdc:	b580      	push	{r7, lr}
 8005bde:	b082      	sub	sp, #8
 8005be0:	af00      	add	r7, sp, #0
 8005be2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005be4:	f000 f852 	bl	8005c8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005be8:	4b06      	ldr	r3, [pc, #24]	; (8005c04 <prvIdleTask+0x28>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	2b01      	cmp	r3, #1
 8005bee:	d9f9      	bls.n	8005be4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005bf0:	4b05      	ldr	r3, [pc, #20]	; (8005c08 <prvIdleTask+0x2c>)
 8005bf2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf6:	601a      	str	r2, [r3, #0]
 8005bf8:	f3bf 8f4f 	dsb	sy
 8005bfc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005c00:	e7f0      	b.n	8005be4 <prvIdleTask+0x8>
 8005c02:	bf00      	nop
 8005c04:	20001064 	.word	0x20001064
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005c0c:	b580      	push	{r7, lr}
 8005c0e:	b082      	sub	sp, #8
 8005c10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c12:	2300      	movs	r3, #0
 8005c14:	607b      	str	r3, [r7, #4]
 8005c16:	e00c      	b.n	8005c32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005c18:	687a      	ldr	r2, [r7, #4]
 8005c1a:	4613      	mov	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4413      	add	r3, r2
 8005c20:	009b      	lsls	r3, r3, #2
 8005c22:	4a12      	ldr	r2, [pc, #72]	; (8005c6c <prvInitialiseTaskLists+0x60>)
 8005c24:	4413      	add	r3, r2
 8005c26:	4618      	mov	r0, r3
 8005c28:	f7fe fc40 	bl	80044ac <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	3301      	adds	r3, #1
 8005c30:	607b      	str	r3, [r7, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2b37      	cmp	r3, #55	; 0x37
 8005c36:	d9ef      	bls.n	8005c18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005c38:	480d      	ldr	r0, [pc, #52]	; (8005c70 <prvInitialiseTaskLists+0x64>)
 8005c3a:	f7fe fc37 	bl	80044ac <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005c3e:	480d      	ldr	r0, [pc, #52]	; (8005c74 <prvInitialiseTaskLists+0x68>)
 8005c40:	f7fe fc34 	bl	80044ac <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005c44:	480c      	ldr	r0, [pc, #48]	; (8005c78 <prvInitialiseTaskLists+0x6c>)
 8005c46:	f7fe fc31 	bl	80044ac <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005c4a:	480c      	ldr	r0, [pc, #48]	; (8005c7c <prvInitialiseTaskLists+0x70>)
 8005c4c:	f7fe fc2e 	bl	80044ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005c50:	480b      	ldr	r0, [pc, #44]	; (8005c80 <prvInitialiseTaskLists+0x74>)
 8005c52:	f7fe fc2b 	bl	80044ac <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005c56:	4b0b      	ldr	r3, [pc, #44]	; (8005c84 <prvInitialiseTaskLists+0x78>)
 8005c58:	4a05      	ldr	r2, [pc, #20]	; (8005c70 <prvInitialiseTaskLists+0x64>)
 8005c5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005c5c:	4b0a      	ldr	r3, [pc, #40]	; (8005c88 <prvInitialiseTaskLists+0x7c>)
 8005c5e:	4a05      	ldr	r2, [pc, #20]	; (8005c74 <prvInitialiseTaskLists+0x68>)
 8005c60:	601a      	str	r2, [r3, #0]
}
 8005c62:	bf00      	nop
 8005c64:	3708      	adds	r7, #8
 8005c66:	46bd      	mov	sp, r7
 8005c68:	bd80      	pop	{r7, pc}
 8005c6a:	bf00      	nop
 8005c6c:	20001064 	.word	0x20001064
 8005c70:	200014c4 	.word	0x200014c4
 8005c74:	200014d8 	.word	0x200014d8
 8005c78:	200014f4 	.word	0x200014f4
 8005c7c:	20001508 	.word	0x20001508
 8005c80:	20001520 	.word	0x20001520
 8005c84:	200014ec 	.word	0x200014ec
 8005c88:	200014f0 	.word	0x200014f0

08005c8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b082      	sub	sp, #8
 8005c90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005c92:	e019      	b.n	8005cc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005c94:	f000 fe76 	bl	8006984 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c98:	4b10      	ldr	r3, [pc, #64]	; (8005cdc <prvCheckTasksWaitingTermination+0x50>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	68db      	ldr	r3, [r3, #12]
 8005c9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	3304      	adds	r3, #4
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	f7fe fc8b 	bl	80045c0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005caa:	4b0d      	ldr	r3, [pc, #52]	; (8005ce0 <prvCheckTasksWaitingTermination+0x54>)
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	3b01      	subs	r3, #1
 8005cb0:	4a0b      	ldr	r2, [pc, #44]	; (8005ce0 <prvCheckTasksWaitingTermination+0x54>)
 8005cb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005cb4:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <prvCheckTasksWaitingTermination+0x58>)
 8005cb6:	681b      	ldr	r3, [r3, #0]
 8005cb8:	3b01      	subs	r3, #1
 8005cba:	4a0a      	ldr	r2, [pc, #40]	; (8005ce4 <prvCheckTasksWaitingTermination+0x58>)
 8005cbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005cbe:	f000 fe91 	bl	80069e4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f000 f8ae 	bl	8005e24 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005cc8:	4b06      	ldr	r3, [pc, #24]	; (8005ce4 <prvCheckTasksWaitingTermination+0x58>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	d1e1      	bne.n	8005c94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005cd0:	bf00      	nop
 8005cd2:	bf00      	nop
 8005cd4:	3708      	adds	r7, #8
 8005cd6:	46bd      	mov	sp, r7
 8005cd8:	bd80      	pop	{r7, pc}
 8005cda:	bf00      	nop
 8005cdc:	20001508 	.word	0x20001508
 8005ce0:	20001534 	.word	0x20001534
 8005ce4:	2000151c 	.word	0x2000151c

08005ce8 <vTaskGetInfo>:
/*-----------------------------------------------------------*/

#if( configUSE_TRACE_FACILITY == 1 )

	void vTaskGetInfo( TaskHandle_t xTask, TaskStatus_t *pxTaskStatus, BaseType_t xGetFreeStackSpace, eTaskState eState )
	{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b086      	sub	sp, #24
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	60f8      	str	r0, [r7, #12]
 8005cf0:	60b9      	str	r1, [r7, #8]
 8005cf2:	607a      	str	r2, [r7, #4]
 8005cf4:	70fb      	strb	r3, [r7, #3]
	TCB_t *pxTCB;

		/* xTask is NULL then get the state of the calling task. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2b00      	cmp	r3, #0
 8005cfa:	d102      	bne.n	8005d02 <vTaskGetInfo+0x1a>
 8005cfc:	4b2c      	ldr	r3, [pc, #176]	; (8005db0 <vTaskGetInfo+0xc8>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	e000      	b.n	8005d04 <vTaskGetInfo+0x1c>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	617b      	str	r3, [r7, #20]

		pxTaskStatus->xHandle = ( TaskHandle_t ) pxTCB;
 8005d06:	68bb      	ldr	r3, [r7, #8]
 8005d08:	697a      	ldr	r2, [r7, #20]
 8005d0a:	601a      	str	r2, [r3, #0]
		pxTaskStatus->pcTaskName = ( const char * ) &( pxTCB->pcTaskName [ 0 ] );
 8005d0c:	697b      	ldr	r3, [r7, #20]
 8005d0e:	f103 0234 	add.w	r2, r3, #52	; 0x34
 8005d12:	68bb      	ldr	r3, [r7, #8]
 8005d14:	605a      	str	r2, [r3, #4]
		pxTaskStatus->uxCurrentPriority = pxTCB->uxPriority;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d1a:	68bb      	ldr	r3, [r7, #8]
 8005d1c:	611a      	str	r2, [r3, #16]
		pxTaskStatus->pxStackBase = pxTCB->pxStack;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	61da      	str	r2, [r3, #28]
		pxTaskStatus->xTaskNumber = pxTCB->uxTCBNumber;
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	609a      	str	r2, [r3, #8]

		#if ( configUSE_MUTEXES == 1 )
		{
			pxTaskStatus->uxBasePriority = pxTCB->uxBasePriority;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	615a      	str	r2, [r3, #20]
		{
			pxTaskStatus->ulRunTimeCounter = pxTCB->ulRunTimeCounter;
		}
		#else
		{
			pxTaskStatus->ulRunTimeCounter = 0;
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2200      	movs	r2, #0
 8005d3a:	619a      	str	r2, [r3, #24]
		#endif

		/* Obtaining the task state is a little fiddly, so is only done if the
		value of eState passed into this function is eInvalid - otherwise the
		state is just set to whatever is passed in. */
		if( eState != eInvalid )
 8005d3c:	78fb      	ldrb	r3, [r7, #3]
 8005d3e:	2b05      	cmp	r3, #5
 8005d40:	d01a      	beq.n	8005d78 <vTaskGetInfo+0x90>
		{
			if( pxTCB == pxCurrentTCB )
 8005d42:	4b1b      	ldr	r3, [pc, #108]	; (8005db0 <vTaskGetInfo+0xc8>)
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	697a      	ldr	r2, [r7, #20]
 8005d48:	429a      	cmp	r2, r3
 8005d4a:	d103      	bne.n	8005d54 <vTaskGetInfo+0x6c>
			{
				pxTaskStatus->eCurrentState = eRunning;
 8005d4c:	68bb      	ldr	r3, [r7, #8]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	731a      	strb	r2, [r3, #12]
 8005d52:	e018      	b.n	8005d86 <vTaskGetInfo+0x9e>
			}
			else
			{
				pxTaskStatus->eCurrentState = eState;
 8005d54:	68bb      	ldr	r3, [r7, #8]
 8005d56:	78fa      	ldrb	r2, [r7, #3]
 8005d58:	731a      	strb	r2, [r3, #12]
				#if ( INCLUDE_vTaskSuspend == 1 )
				{
					/* If the task is in the suspended list then there is a
					chance it is actually just blocked indefinitely - so really
					it should be reported as being in the Blocked state. */
					if( eState == eSuspended )
 8005d5a:	78fb      	ldrb	r3, [r7, #3]
 8005d5c:	2b03      	cmp	r3, #3
 8005d5e:	d112      	bne.n	8005d86 <vTaskGetInfo+0x9e>
					{
						vTaskSuspendAll();
 8005d60:	f7ff fc06 	bl	8005570 <vTaskSuspendAll>
						{
							if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005d64:	697b      	ldr	r3, [r7, #20]
 8005d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d002      	beq.n	8005d72 <vTaskGetInfo+0x8a>
							{
								pxTaskStatus->eCurrentState = eBlocked;
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	2202      	movs	r2, #2
 8005d70:	731a      	strb	r2, [r3, #12]
							}
						}
						( void ) xTaskResumeAll();
 8005d72:	f7ff fc0b 	bl	800558c <xTaskResumeAll>
 8005d76:	e006      	b.n	8005d86 <vTaskGetInfo+0x9e>
				#endif /* INCLUDE_vTaskSuspend */
			}
		}
		else
		{
			pxTaskStatus->eCurrentState = eTaskGetState( pxTCB );
 8005d78:	6978      	ldr	r0, [r7, #20]
 8005d7a:	f7ff fb23 	bl	80053c4 <eTaskGetState>
 8005d7e:	4603      	mov	r3, r0
 8005d80:	461a      	mov	r2, r3
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	731a      	strb	r2, [r3, #12]
		}

		/* Obtaining the stack space takes some time, so the xGetFreeStackSpace
		parameter is provided to allow it to be skipped. */
		if( xGetFreeStackSpace != pdFALSE )
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d009      	beq.n	8005da0 <vTaskGetInfo+0xb8>
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxEndOfStack );
			}
			#else
			{
				pxTaskStatus->usStackHighWaterMark = prvTaskCheckFreeStackSpace( ( uint8_t * ) pxTCB->pxStack );
 8005d8c:	697b      	ldr	r3, [r7, #20]
 8005d8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d90:	4618      	mov	r0, r3
 8005d92:	f000 f80f 	bl	8005db4 <prvTaskCheckFreeStackSpace>
 8005d96:	4603      	mov	r3, r0
 8005d98:	461a      	mov	r2, r3
 8005d9a:	68bb      	ldr	r3, [r7, #8]
 8005d9c:	841a      	strh	r2, [r3, #32]
		}
		else
		{
			pxTaskStatus->usStackHighWaterMark = 0;
		}
	}
 8005d9e:	e002      	b.n	8005da6 <vTaskGetInfo+0xbe>
			pxTaskStatus->usStackHighWaterMark = 0;
 8005da0:	68bb      	ldr	r3, [r7, #8]
 8005da2:	2200      	movs	r2, #0
 8005da4:	841a      	strh	r2, [r3, #32]
	}
 8005da6:	bf00      	nop
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	20001060 	.word	0x20001060

08005db4 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8005db4:	b480      	push	{r7}
 8005db6:	b085      	sub	sp, #20
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8005dbc:	2300      	movs	r3, #0
 8005dbe:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005dc0:	e005      	b.n	8005dce <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	3301      	adds	r3, #1
 8005dc6:	607b      	str	r3, [r7, #4]
			ulCount++;
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	781b      	ldrb	r3, [r3, #0]
 8005dd2:	2ba5      	cmp	r3, #165	; 0xa5
 8005dd4:	d0f5      	beq.n	8005dc2 <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	089b      	lsrs	r3, r3, #2
 8005dda:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	b29b      	uxth	r3, r3
	}
 8005de0:	4618      	mov	r0, r3
 8005de2:	3714      	adds	r7, #20
 8005de4:	46bd      	mov	sp, r7
 8005de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dea:	4770      	bx	lr

08005dec <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b086      	sub	sp, #24
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d102      	bne.n	8005e00 <uxTaskGetStackHighWaterMark+0x14>
 8005dfa:	4b09      	ldr	r3, [pc, #36]	; (8005e20 <uxTaskGetStackHighWaterMark+0x34>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	e000      	b.n	8005e02 <uxTaskGetStackHighWaterMark+0x16>
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8005e04:	697b      	ldr	r3, [r7, #20]
 8005e06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e08:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8005e0a:	6938      	ldr	r0, [r7, #16]
 8005e0c:	f7ff ffd2 	bl	8005db4 <prvTaskCheckFreeStackSpace>
 8005e10:	4603      	mov	r3, r0
 8005e12:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8005e14:	68fb      	ldr	r3, [r7, #12]
	}
 8005e16:	4618      	mov	r0, r3
 8005e18:	3718      	adds	r7, #24
 8005e1a:	46bd      	mov	sp, r7
 8005e1c:	bd80      	pop	{r7, pc}
 8005e1e:	bf00      	nop
 8005e20:	20001060 	.word	0x20001060

08005e24 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	b084      	sub	sp, #16
 8005e28:	af00      	add	r7, sp, #0
 8005e2a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	3354      	adds	r3, #84	; 0x54
 8005e30:	4618      	mov	r0, r3
 8005e32:	f001 ffe5 	bl	8007e00 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d108      	bne.n	8005e52 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e44:	4618      	mov	r0, r3
 8005e46:	f000 ff8b 	bl	8006d60 <vPortFree>
				vPortFree( pxTCB );
 8005e4a:	6878      	ldr	r0, [r7, #4]
 8005e4c:	f000 ff88 	bl	8006d60 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005e50:	e018      	b.n	8005e84 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e58:	2b01      	cmp	r3, #1
 8005e5a:	d103      	bne.n	8005e64 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005e5c:	6878      	ldr	r0, [r7, #4]
 8005e5e:	f000 ff7f 	bl	8006d60 <vPortFree>
	}
 8005e62:	e00f      	b.n	8005e84 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005e6a:	2b02      	cmp	r3, #2
 8005e6c:	d00a      	beq.n	8005e84 <prvDeleteTCB+0x60>
	__asm volatile
 8005e6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e72:	f383 8811 	msr	BASEPRI, r3
 8005e76:	f3bf 8f6f 	isb	sy
 8005e7a:	f3bf 8f4f 	dsb	sy
 8005e7e:	60fb      	str	r3, [r7, #12]
}
 8005e80:	bf00      	nop
 8005e82:	e7fe      	b.n	8005e82 <prvDeleteTCB+0x5e>
	}
 8005e84:	bf00      	nop
 8005e86:	3710      	adds	r7, #16
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}

08005e8c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b083      	sub	sp, #12
 8005e90:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005e92:	4b0c      	ldr	r3, [pc, #48]	; (8005ec4 <prvResetNextTaskUnblockTime+0x38>)
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d104      	bne.n	8005ea6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005e9c:	4b0a      	ldr	r3, [pc, #40]	; (8005ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8005e9e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005ea2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005ea4:	e008      	b.n	8005eb8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ea6:	4b07      	ldr	r3, [pc, #28]	; (8005ec4 <prvResetNextTaskUnblockTime+0x38>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	68db      	ldr	r3, [r3, #12]
 8005eae:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	685b      	ldr	r3, [r3, #4]
 8005eb4:	4a04      	ldr	r2, [pc, #16]	; (8005ec8 <prvResetNextTaskUnblockTime+0x3c>)
 8005eb6:	6013      	str	r3, [r2, #0]
}
 8005eb8:	bf00      	nop
 8005eba:	370c      	adds	r7, #12
 8005ebc:	46bd      	mov	sp, r7
 8005ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ec2:	4770      	bx	lr
 8005ec4:	200014ec 	.word	0x200014ec
 8005ec8:	20001554 	.word	0x20001554

08005ecc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005ed2:	4b0b      	ldr	r3, [pc, #44]	; (8005f00 <xTaskGetSchedulerState+0x34>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d102      	bne.n	8005ee0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005eda:	2301      	movs	r3, #1
 8005edc:	607b      	str	r3, [r7, #4]
 8005ede:	e008      	b.n	8005ef2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ee0:	4b08      	ldr	r3, [pc, #32]	; (8005f04 <xTaskGetSchedulerState+0x38>)
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d102      	bne.n	8005eee <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ee8:	2302      	movs	r3, #2
 8005eea:	607b      	str	r3, [r7, #4]
 8005eec:	e001      	b.n	8005ef2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005ef2:	687b      	ldr	r3, [r7, #4]
	}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	370c      	adds	r7, #12
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efe:	4770      	bx	lr
 8005f00:	20001540 	.word	0x20001540
 8005f04:	2000155c 	.word	0x2000155c

08005f08 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005f08:	b580      	push	{r7, lr}
 8005f0a:	b086      	sub	sp, #24
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005f14:	2300      	movs	r3, #0
 8005f16:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d056      	beq.n	8005fcc <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005f1e:	4b2e      	ldr	r3, [pc, #184]	; (8005fd8 <xTaskPriorityDisinherit+0xd0>)
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	693a      	ldr	r2, [r7, #16]
 8005f24:	429a      	cmp	r2, r3
 8005f26:	d00a      	beq.n	8005f3e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005f28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f2c:	f383 8811 	msr	BASEPRI, r3
 8005f30:	f3bf 8f6f 	isb	sy
 8005f34:	f3bf 8f4f 	dsb	sy
 8005f38:	60fb      	str	r3, [r7, #12]
}
 8005f3a:	bf00      	nop
 8005f3c:	e7fe      	b.n	8005f3c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005f3e:	693b      	ldr	r3, [r7, #16]
 8005f40:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d10a      	bne.n	8005f5c <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005f46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f4a:	f383 8811 	msr	BASEPRI, r3
 8005f4e:	f3bf 8f6f 	isb	sy
 8005f52:	f3bf 8f4f 	dsb	sy
 8005f56:	60bb      	str	r3, [r7, #8]
}
 8005f58:	bf00      	nop
 8005f5a:	e7fe      	b.n	8005f5a <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005f5c:	693b      	ldr	r3, [r7, #16]
 8005f5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f60:	1e5a      	subs	r2, r3, #1
 8005f62:	693b      	ldr	r3, [r7, #16]
 8005f64:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005f66:	693b      	ldr	r3, [r7, #16]
 8005f68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6a:	693b      	ldr	r3, [r7, #16]
 8005f6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005f6e:	429a      	cmp	r2, r3
 8005f70:	d02c      	beq.n	8005fcc <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d128      	bne.n	8005fcc <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f7a:	693b      	ldr	r3, [r7, #16]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4618      	mov	r0, r3
 8005f80:	f7fe fb1e 	bl	80045c0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005f88:	693b      	ldr	r3, [r7, #16]
 8005f8a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f8c:	693b      	ldr	r3, [r7, #16]
 8005f8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f90:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f94:	693b      	ldr	r3, [r7, #16]
 8005f96:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005f98:	693b      	ldr	r3, [r7, #16]
 8005f9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f9c:	4b0f      	ldr	r3, [pc, #60]	; (8005fdc <xTaskPriorityDisinherit+0xd4>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	429a      	cmp	r2, r3
 8005fa2:	d903      	bls.n	8005fac <xTaskPriorityDisinherit+0xa4>
 8005fa4:	693b      	ldr	r3, [r7, #16]
 8005fa6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa8:	4a0c      	ldr	r2, [pc, #48]	; (8005fdc <xTaskPriorityDisinherit+0xd4>)
 8005faa:	6013      	str	r3, [r2, #0]
 8005fac:	693b      	ldr	r3, [r7, #16]
 8005fae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb0:	4613      	mov	r3, r2
 8005fb2:	009b      	lsls	r3, r3, #2
 8005fb4:	4413      	add	r3, r2
 8005fb6:	009b      	lsls	r3, r3, #2
 8005fb8:	4a09      	ldr	r2, [pc, #36]	; (8005fe0 <xTaskPriorityDisinherit+0xd8>)
 8005fba:	441a      	add	r2, r3
 8005fbc:	693b      	ldr	r3, [r7, #16]
 8005fbe:	3304      	adds	r3, #4
 8005fc0:	4619      	mov	r1, r3
 8005fc2:	4610      	mov	r0, r2
 8005fc4:	f7fe fa9f 	bl	8004506 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005fcc:	697b      	ldr	r3, [r7, #20]
	}
 8005fce:	4618      	mov	r0, r3
 8005fd0:	3718      	adds	r7, #24
 8005fd2:	46bd      	mov	sp, r7
 8005fd4:	bd80      	pop	{r7, pc}
 8005fd6:	bf00      	nop
 8005fd8:	20001060 	.word	0x20001060
 8005fdc:	2000153c 	.word	0x2000153c
 8005fe0:	20001064 	.word	0x20001064

08005fe4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fe4:	b580      	push	{r7, lr}
 8005fe6:	b084      	sub	sp, #16
 8005fe8:	af00      	add	r7, sp, #0
 8005fea:	6078      	str	r0, [r7, #4]
 8005fec:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fee:	4b21      	ldr	r3, [pc, #132]	; (8006074 <prvAddCurrentTaskToDelayedList+0x90>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005ff4:	4b20      	ldr	r3, [pc, #128]	; (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	3304      	adds	r3, #4
 8005ffa:	4618      	mov	r0, r3
 8005ffc:	f7fe fae0 	bl	80045c0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006006:	d10a      	bne.n	800601e <prvAddCurrentTaskToDelayedList+0x3a>
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	2b00      	cmp	r3, #0
 800600c:	d007      	beq.n	800601e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800600e:	4b1a      	ldr	r3, [pc, #104]	; (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	3304      	adds	r3, #4
 8006014:	4619      	mov	r1, r3
 8006016:	4819      	ldr	r0, [pc, #100]	; (800607c <prvAddCurrentTaskToDelayedList+0x98>)
 8006018:	f7fe fa75 	bl	8004506 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800601c:	e026      	b.n	800606c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800601e:	68fa      	ldr	r2, [r7, #12]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	4413      	add	r3, r2
 8006024:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006026:	4b14      	ldr	r3, [pc, #80]	; (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	68ba      	ldr	r2, [r7, #8]
 800602c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	68fb      	ldr	r3, [r7, #12]
 8006032:	429a      	cmp	r2, r3
 8006034:	d209      	bcs.n	800604a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006036:	4b12      	ldr	r3, [pc, #72]	; (8006080 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006038:	681a      	ldr	r2, [r3, #0]
 800603a:	4b0f      	ldr	r3, [pc, #60]	; (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	3304      	adds	r3, #4
 8006040:	4619      	mov	r1, r3
 8006042:	4610      	mov	r0, r2
 8006044:	f7fe fa83 	bl	800454e <vListInsert>
}
 8006048:	e010      	b.n	800606c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800604a:	4b0e      	ldr	r3, [pc, #56]	; (8006084 <prvAddCurrentTaskToDelayedList+0xa0>)
 800604c:	681a      	ldr	r2, [r3, #0]
 800604e:	4b0a      	ldr	r3, [pc, #40]	; (8006078 <prvAddCurrentTaskToDelayedList+0x94>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	3304      	adds	r3, #4
 8006054:	4619      	mov	r1, r3
 8006056:	4610      	mov	r0, r2
 8006058:	f7fe fa79 	bl	800454e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800605c:	4b0a      	ldr	r3, [pc, #40]	; (8006088 <prvAddCurrentTaskToDelayedList+0xa4>)
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68ba      	ldr	r2, [r7, #8]
 8006062:	429a      	cmp	r2, r3
 8006064:	d202      	bcs.n	800606c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006066:	4a08      	ldr	r2, [pc, #32]	; (8006088 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	6013      	str	r3, [r2, #0]
}
 800606c:	bf00      	nop
 800606e:	3710      	adds	r7, #16
 8006070:	46bd      	mov	sp, r7
 8006072:	bd80      	pop	{r7, pc}
 8006074:	20001538 	.word	0x20001538
 8006078:	20001060 	.word	0x20001060
 800607c:	20001520 	.word	0x20001520
 8006080:	200014f0 	.word	0x200014f0
 8006084:	200014ec 	.word	0x200014ec
 8006088:	20001554 	.word	0x20001554

0800608c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b08a      	sub	sp, #40	; 0x28
 8006090:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006092:	2300      	movs	r3, #0
 8006094:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006096:	f000 fb07 	bl	80066a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800609a:	4b1c      	ldr	r3, [pc, #112]	; (800610c <xTimerCreateTimerTask+0x80>)
 800609c:	681b      	ldr	r3, [r3, #0]
 800609e:	2b00      	cmp	r3, #0
 80060a0:	d021      	beq.n	80060e6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80060a2:	2300      	movs	r3, #0
 80060a4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80060aa:	1d3a      	adds	r2, r7, #4
 80060ac:	f107 0108 	add.w	r1, r7, #8
 80060b0:	f107 030c 	add.w	r3, r7, #12
 80060b4:	4618      	mov	r0, r3
 80060b6:	f7fe f9df 	bl	8004478 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80060ba:	6879      	ldr	r1, [r7, #4]
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	68fa      	ldr	r2, [r7, #12]
 80060c0:	9202      	str	r2, [sp, #8]
 80060c2:	9301      	str	r3, [sp, #4]
 80060c4:	2302      	movs	r3, #2
 80060c6:	9300      	str	r3, [sp, #0]
 80060c8:	2300      	movs	r3, #0
 80060ca:	460a      	mov	r2, r1
 80060cc:	4910      	ldr	r1, [pc, #64]	; (8006110 <xTimerCreateTimerTask+0x84>)
 80060ce:	4811      	ldr	r0, [pc, #68]	; (8006114 <xTimerCreateTimerTask+0x88>)
 80060d0:	f7fe ff8c 	bl	8004fec <xTaskCreateStatic>
 80060d4:	4603      	mov	r3, r0
 80060d6:	4a10      	ldr	r2, [pc, #64]	; (8006118 <xTimerCreateTimerTask+0x8c>)
 80060d8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060da:	4b0f      	ldr	r3, [pc, #60]	; (8006118 <xTimerCreateTimerTask+0x8c>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060e2:	2301      	movs	r3, #1
 80060e4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060e6:	697b      	ldr	r3, [r7, #20]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d10a      	bne.n	8006102 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80060ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f0:	f383 8811 	msr	BASEPRI, r3
 80060f4:	f3bf 8f6f 	isb	sy
 80060f8:	f3bf 8f4f 	dsb	sy
 80060fc:	613b      	str	r3, [r7, #16]
}
 80060fe:	bf00      	nop
 8006100:	e7fe      	b.n	8006100 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006102:	697b      	ldr	r3, [r7, #20]
}
 8006104:	4618      	mov	r0, r3
 8006106:	3718      	adds	r7, #24
 8006108:	46bd      	mov	sp, r7
 800610a:	bd80      	pop	{r7, pc}
 800610c:	20001590 	.word	0x20001590
 8006110:	08009eec 	.word	0x08009eec
 8006114:	08006251 	.word	0x08006251
 8006118:	20001594 	.word	0x20001594

0800611c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800611c:	b580      	push	{r7, lr}
 800611e:	b08a      	sub	sp, #40	; 0x28
 8006120:	af00      	add	r7, sp, #0
 8006122:	60f8      	str	r0, [r7, #12]
 8006124:	60b9      	str	r1, [r7, #8]
 8006126:	607a      	str	r2, [r7, #4]
 8006128:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800612a:	2300      	movs	r3, #0
 800612c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	2b00      	cmp	r3, #0
 8006132:	d10a      	bne.n	800614a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006138:	f383 8811 	msr	BASEPRI, r3
 800613c:	f3bf 8f6f 	isb	sy
 8006140:	f3bf 8f4f 	dsb	sy
 8006144:	623b      	str	r3, [r7, #32]
}
 8006146:	bf00      	nop
 8006148:	e7fe      	b.n	8006148 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800614a:	4b1a      	ldr	r3, [pc, #104]	; (80061b4 <xTimerGenericCommand+0x98>)
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	2b00      	cmp	r3, #0
 8006150:	d02a      	beq.n	80061a8 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006152:	68bb      	ldr	r3, [r7, #8]
 8006154:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800615e:	68bb      	ldr	r3, [r7, #8]
 8006160:	2b05      	cmp	r3, #5
 8006162:	dc18      	bgt.n	8006196 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006164:	f7ff feb2 	bl	8005ecc <xTaskGetSchedulerState>
 8006168:	4603      	mov	r3, r0
 800616a:	2b02      	cmp	r3, #2
 800616c:	d109      	bne.n	8006182 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800616e:	4b11      	ldr	r3, [pc, #68]	; (80061b4 <xTimerGenericCommand+0x98>)
 8006170:	6818      	ldr	r0, [r3, #0]
 8006172:	f107 0110 	add.w	r1, r7, #16
 8006176:	2300      	movs	r3, #0
 8006178:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800617a:	f7fe fb4f 	bl	800481c <xQueueGenericSend>
 800617e:	6278      	str	r0, [r7, #36]	; 0x24
 8006180:	e012      	b.n	80061a8 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006182:	4b0c      	ldr	r3, [pc, #48]	; (80061b4 <xTimerGenericCommand+0x98>)
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	f107 0110 	add.w	r1, r7, #16
 800618a:	2300      	movs	r3, #0
 800618c:	2200      	movs	r2, #0
 800618e:	f7fe fb45 	bl	800481c <xQueueGenericSend>
 8006192:	6278      	str	r0, [r7, #36]	; 0x24
 8006194:	e008      	b.n	80061a8 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006196:	4b07      	ldr	r3, [pc, #28]	; (80061b4 <xTimerGenericCommand+0x98>)
 8006198:	6818      	ldr	r0, [r3, #0]
 800619a:	f107 0110 	add.w	r1, r7, #16
 800619e:	2300      	movs	r3, #0
 80061a0:	683a      	ldr	r2, [r7, #0]
 80061a2:	f7fe fc39 	bl	8004a18 <xQueueGenericSendFromISR>
 80061a6:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80061aa:	4618      	mov	r0, r3
 80061ac:	3728      	adds	r7, #40	; 0x28
 80061ae:	46bd      	mov	sp, r7
 80061b0:	bd80      	pop	{r7, pc}
 80061b2:	bf00      	nop
 80061b4:	20001590 	.word	0x20001590

080061b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b088      	sub	sp, #32
 80061bc:	af02      	add	r7, sp, #8
 80061be:	6078      	str	r0, [r7, #4]
 80061c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c2:	4b22      	ldr	r3, [pc, #136]	; (800624c <prvProcessExpiredTimer+0x94>)
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	68db      	ldr	r3, [r3, #12]
 80061ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061cc:	697b      	ldr	r3, [r7, #20]
 80061ce:	3304      	adds	r3, #4
 80061d0:	4618      	mov	r0, r3
 80061d2:	f7fe f9f5 	bl	80045c0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061dc:	f003 0304 	and.w	r3, r3, #4
 80061e0:	2b00      	cmp	r3, #0
 80061e2:	d022      	beq.n	800622a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061e4:	697b      	ldr	r3, [r7, #20]
 80061e6:	699a      	ldr	r2, [r3, #24]
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	18d1      	adds	r1, r2, r3
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	683a      	ldr	r2, [r7, #0]
 80061f0:	6978      	ldr	r0, [r7, #20]
 80061f2:	f000 f8d1 	bl	8006398 <prvInsertTimerInActiveList>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d01f      	beq.n	800623c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061fc:	2300      	movs	r3, #0
 80061fe:	9300      	str	r3, [sp, #0]
 8006200:	2300      	movs	r3, #0
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	2100      	movs	r1, #0
 8006206:	6978      	ldr	r0, [r7, #20]
 8006208:	f7ff ff88 	bl	800611c <xTimerGenericCommand>
 800620c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800620e:	693b      	ldr	r3, [r7, #16]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d113      	bne.n	800623c <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006218:	f383 8811 	msr	BASEPRI, r3
 800621c:	f3bf 8f6f 	isb	sy
 8006220:	f3bf 8f4f 	dsb	sy
 8006224:	60fb      	str	r3, [r7, #12]
}
 8006226:	bf00      	nop
 8006228:	e7fe      	b.n	8006228 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006230:	f023 0301 	bic.w	r3, r3, #1
 8006234:	b2da      	uxtb	r2, r3
 8006236:	697b      	ldr	r3, [r7, #20]
 8006238:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800623c:	697b      	ldr	r3, [r7, #20]
 800623e:	6a1b      	ldr	r3, [r3, #32]
 8006240:	6978      	ldr	r0, [r7, #20]
 8006242:	4798      	blx	r3
}
 8006244:	bf00      	nop
 8006246:	3718      	adds	r7, #24
 8006248:	46bd      	mov	sp, r7
 800624a:	bd80      	pop	{r7, pc}
 800624c:	20001588 	.word	0x20001588

08006250 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006250:	b580      	push	{r7, lr}
 8006252:	b084      	sub	sp, #16
 8006254:	af00      	add	r7, sp, #0
 8006256:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006258:	f107 0308 	add.w	r3, r7, #8
 800625c:	4618      	mov	r0, r3
 800625e:	f000 f857 	bl	8006310 <prvGetNextExpireTime>
 8006262:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006264:	68bb      	ldr	r3, [r7, #8]
 8006266:	4619      	mov	r1, r3
 8006268:	68f8      	ldr	r0, [r7, #12]
 800626a:	f000 f803 	bl	8006274 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800626e:	f000 f8d5 	bl	800641c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006272:	e7f1      	b.n	8006258 <prvTimerTask+0x8>

08006274 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b084      	sub	sp, #16
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
 800627c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800627e:	f7ff f977 	bl	8005570 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006282:	f107 0308 	add.w	r3, r7, #8
 8006286:	4618      	mov	r0, r3
 8006288:	f000 f866 	bl	8006358 <prvSampleTimeNow>
 800628c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800628e:	68bb      	ldr	r3, [r7, #8]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d130      	bne.n	80062f6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d10a      	bne.n	80062b0 <prvProcessTimerOrBlockTask+0x3c>
 800629a:	687a      	ldr	r2, [r7, #4]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	429a      	cmp	r2, r3
 80062a0:	d806      	bhi.n	80062b0 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80062a2:	f7ff f973 	bl	800558c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80062a6:	68f9      	ldr	r1, [r7, #12]
 80062a8:	6878      	ldr	r0, [r7, #4]
 80062aa:	f7ff ff85 	bl	80061b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80062ae:	e024      	b.n	80062fa <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d008      	beq.n	80062c8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80062b6:	4b13      	ldr	r3, [pc, #76]	; (8006304 <prvProcessTimerOrBlockTask+0x90>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	2b00      	cmp	r3, #0
 80062be:	d101      	bne.n	80062c4 <prvProcessTimerOrBlockTask+0x50>
 80062c0:	2301      	movs	r3, #1
 80062c2:	e000      	b.n	80062c6 <prvProcessTimerOrBlockTask+0x52>
 80062c4:	2300      	movs	r3, #0
 80062c6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062c8:	4b0f      	ldr	r3, [pc, #60]	; (8006308 <prvProcessTimerOrBlockTask+0x94>)
 80062ca:	6818      	ldr	r0, [r3, #0]
 80062cc:	687a      	ldr	r2, [r7, #4]
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	1ad3      	subs	r3, r2, r3
 80062d2:	683a      	ldr	r2, [r7, #0]
 80062d4:	4619      	mov	r1, r3
 80062d6:	f7fe fe55 	bl	8004f84 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062da:	f7ff f957 	bl	800558c <xTaskResumeAll>
 80062de:	4603      	mov	r3, r0
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d10a      	bne.n	80062fa <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062e4:	4b09      	ldr	r3, [pc, #36]	; (800630c <prvProcessTimerOrBlockTask+0x98>)
 80062e6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ea:	601a      	str	r2, [r3, #0]
 80062ec:	f3bf 8f4f 	dsb	sy
 80062f0:	f3bf 8f6f 	isb	sy
}
 80062f4:	e001      	b.n	80062fa <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062f6:	f7ff f949 	bl	800558c <xTaskResumeAll>
}
 80062fa:	bf00      	nop
 80062fc:	3710      	adds	r7, #16
 80062fe:	46bd      	mov	sp, r7
 8006300:	bd80      	pop	{r7, pc}
 8006302:	bf00      	nop
 8006304:	2000158c 	.word	0x2000158c
 8006308:	20001590 	.word	0x20001590
 800630c:	e000ed04 	.word	0xe000ed04

08006310 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006310:	b480      	push	{r7}
 8006312:	b085      	sub	sp, #20
 8006314:	af00      	add	r7, sp, #0
 8006316:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006318:	4b0e      	ldr	r3, [pc, #56]	; (8006354 <prvGetNextExpireTime+0x44>)
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d101      	bne.n	8006326 <prvGetNextExpireTime+0x16>
 8006322:	2201      	movs	r2, #1
 8006324:	e000      	b.n	8006328 <prvGetNextExpireTime+0x18>
 8006326:	2200      	movs	r2, #0
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	2b00      	cmp	r3, #0
 8006332:	d105      	bne.n	8006340 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006334:	4b07      	ldr	r3, [pc, #28]	; (8006354 <prvGetNextExpireTime+0x44>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	68db      	ldr	r3, [r3, #12]
 800633a:	681b      	ldr	r3, [r3, #0]
 800633c:	60fb      	str	r3, [r7, #12]
 800633e:	e001      	b.n	8006344 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006340:	2300      	movs	r3, #0
 8006342:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006344:	68fb      	ldr	r3, [r7, #12]
}
 8006346:	4618      	mov	r0, r3
 8006348:	3714      	adds	r7, #20
 800634a:	46bd      	mov	sp, r7
 800634c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006350:	4770      	bx	lr
 8006352:	bf00      	nop
 8006354:	20001588 	.word	0x20001588

08006358 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006360:	f7ff f9b2 	bl	80056c8 <xTaskGetTickCount>
 8006364:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006366:	4b0b      	ldr	r3, [pc, #44]	; (8006394 <prvSampleTimeNow+0x3c>)
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	68fa      	ldr	r2, [r7, #12]
 800636c:	429a      	cmp	r2, r3
 800636e:	d205      	bcs.n	800637c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006370:	f000 f936 	bl	80065e0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	601a      	str	r2, [r3, #0]
 800637a:	e002      	b.n	8006382 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	2200      	movs	r2, #0
 8006380:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006382:	4a04      	ldr	r2, [pc, #16]	; (8006394 <prvSampleTimeNow+0x3c>)
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006388:	68fb      	ldr	r3, [r7, #12]
}
 800638a:	4618      	mov	r0, r3
 800638c:	3710      	adds	r7, #16
 800638e:	46bd      	mov	sp, r7
 8006390:	bd80      	pop	{r7, pc}
 8006392:	bf00      	nop
 8006394:	20001598 	.word	0x20001598

08006398 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b086      	sub	sp, #24
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80063a6:	2300      	movs	r3, #0
 80063a8:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	68ba      	ldr	r2, [r7, #8]
 80063ae:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	68fa      	ldr	r2, [r7, #12]
 80063b4:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80063b6:	68ba      	ldr	r2, [r7, #8]
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	429a      	cmp	r2, r3
 80063bc:	d812      	bhi.n	80063e4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063be:	687a      	ldr	r2, [r7, #4]
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	1ad2      	subs	r2, r2, r3
 80063c4:	68fb      	ldr	r3, [r7, #12]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d302      	bcc.n	80063d2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063cc:	2301      	movs	r3, #1
 80063ce:	617b      	str	r3, [r7, #20]
 80063d0:	e01b      	b.n	800640a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063d2:	4b10      	ldr	r3, [pc, #64]	; (8006414 <prvInsertTimerInActiveList+0x7c>)
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	3304      	adds	r3, #4
 80063da:	4619      	mov	r1, r3
 80063dc:	4610      	mov	r0, r2
 80063de:	f7fe f8b6 	bl	800454e <vListInsert>
 80063e2:	e012      	b.n	800640a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063e4:	687a      	ldr	r2, [r7, #4]
 80063e6:	683b      	ldr	r3, [r7, #0]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d206      	bcs.n	80063fa <prvInsertTimerInActiveList+0x62>
 80063ec:	68ba      	ldr	r2, [r7, #8]
 80063ee:	683b      	ldr	r3, [r7, #0]
 80063f0:	429a      	cmp	r2, r3
 80063f2:	d302      	bcc.n	80063fa <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063f4:	2301      	movs	r3, #1
 80063f6:	617b      	str	r3, [r7, #20]
 80063f8:	e007      	b.n	800640a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063fa:	4b07      	ldr	r3, [pc, #28]	; (8006418 <prvInsertTimerInActiveList+0x80>)
 80063fc:	681a      	ldr	r2, [r3, #0]
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	3304      	adds	r3, #4
 8006402:	4619      	mov	r1, r3
 8006404:	4610      	mov	r0, r2
 8006406:	f7fe f8a2 	bl	800454e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800640a:	697b      	ldr	r3, [r7, #20]
}
 800640c:	4618      	mov	r0, r3
 800640e:	3718      	adds	r7, #24
 8006410:	46bd      	mov	sp, r7
 8006412:	bd80      	pop	{r7, pc}
 8006414:	2000158c 	.word	0x2000158c
 8006418:	20001588 	.word	0x20001588

0800641c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800641c:	b580      	push	{r7, lr}
 800641e:	b08e      	sub	sp, #56	; 0x38
 8006420:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006422:	e0ca      	b.n	80065ba <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	2b00      	cmp	r3, #0
 8006428:	da18      	bge.n	800645c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800642a:	1d3b      	adds	r3, r7, #4
 800642c:	3304      	adds	r3, #4
 800642e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006430:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006432:	2b00      	cmp	r3, #0
 8006434:	d10a      	bne.n	800644c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006436:	f04f 0350 	mov.w	r3, #80	; 0x50
 800643a:	f383 8811 	msr	BASEPRI, r3
 800643e:	f3bf 8f6f 	isb	sy
 8006442:	f3bf 8f4f 	dsb	sy
 8006446:	61fb      	str	r3, [r7, #28]
}
 8006448:	bf00      	nop
 800644a:	e7fe      	b.n	800644a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800644c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006452:	6850      	ldr	r0, [r2, #4]
 8006454:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006456:	6892      	ldr	r2, [r2, #8]
 8006458:	4611      	mov	r1, r2
 800645a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2b00      	cmp	r3, #0
 8006460:	f2c0 80aa 	blt.w	80065b8 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006464:	68fb      	ldr	r3, [r7, #12]
 8006466:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006468:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800646a:	695b      	ldr	r3, [r3, #20]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d004      	beq.n	800647a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006470:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006472:	3304      	adds	r3, #4
 8006474:	4618      	mov	r0, r3
 8006476:	f7fe f8a3 	bl	80045c0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800647a:	463b      	mov	r3, r7
 800647c:	4618      	mov	r0, r3
 800647e:	f7ff ff6b 	bl	8006358 <prvSampleTimeNow>
 8006482:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b09      	cmp	r3, #9
 8006488:	f200 8097 	bhi.w	80065ba <prvProcessReceivedCommands+0x19e>
 800648c:	a201      	add	r2, pc, #4	; (adr r2, 8006494 <prvProcessReceivedCommands+0x78>)
 800648e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006492:	bf00      	nop
 8006494:	080064bd 	.word	0x080064bd
 8006498:	080064bd 	.word	0x080064bd
 800649c:	080064bd 	.word	0x080064bd
 80064a0:	08006531 	.word	0x08006531
 80064a4:	08006545 	.word	0x08006545
 80064a8:	0800658f 	.word	0x0800658f
 80064ac:	080064bd 	.word	0x080064bd
 80064b0:	080064bd 	.word	0x080064bd
 80064b4:	08006531 	.word	0x08006531
 80064b8:	08006545 	.word	0x08006545
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80064bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064c2:	f043 0301 	orr.w	r3, r3, #1
 80064c6:	b2da      	uxtb	r2, r3
 80064c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064ce:	68ba      	ldr	r2, [r7, #8]
 80064d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	18d1      	adds	r1, r2, r3
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064da:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064dc:	f7ff ff5c 	bl	8006398 <prvInsertTimerInActiveList>
 80064e0:	4603      	mov	r3, r0
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d069      	beq.n	80065ba <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e8:	6a1b      	ldr	r3, [r3, #32]
 80064ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ec:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064f4:	f003 0304 	and.w	r3, r3, #4
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d05e      	beq.n	80065ba <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006500:	699b      	ldr	r3, [r3, #24]
 8006502:	441a      	add	r2, r3
 8006504:	2300      	movs	r3, #0
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	2300      	movs	r3, #0
 800650a:	2100      	movs	r1, #0
 800650c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800650e:	f7ff fe05 	bl	800611c <xTimerGenericCommand>
 8006512:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006514:	6a3b      	ldr	r3, [r7, #32]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d14f      	bne.n	80065ba <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800651a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800651e:	f383 8811 	msr	BASEPRI, r3
 8006522:	f3bf 8f6f 	isb	sy
 8006526:	f3bf 8f4f 	dsb	sy
 800652a:	61bb      	str	r3, [r7, #24]
}
 800652c:	bf00      	nop
 800652e:	e7fe      	b.n	800652e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006536:	f023 0301 	bic.w	r3, r3, #1
 800653a:	b2da      	uxtb	r2, r3
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006542:	e03a      	b.n	80065ba <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006546:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800654a:	f043 0301 	orr.w	r3, r3, #1
 800654e:	b2da      	uxtb	r2, r3
 8006550:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006552:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006556:	68ba      	ldr	r2, [r7, #8]
 8006558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800655c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655e:	699b      	ldr	r3, [r3, #24]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d10a      	bne.n	800657a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006568:	f383 8811 	msr	BASEPRI, r3
 800656c:	f3bf 8f6f 	isb	sy
 8006570:	f3bf 8f4f 	dsb	sy
 8006574:	617b      	str	r3, [r7, #20]
}
 8006576:	bf00      	nop
 8006578:	e7fe      	b.n	8006578 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800657a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800657c:	699a      	ldr	r2, [r3, #24]
 800657e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006580:	18d1      	adds	r1, r2, r3
 8006582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006586:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006588:	f7ff ff06 	bl	8006398 <prvInsertTimerInActiveList>
					break;
 800658c:	e015      	b.n	80065ba <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800658e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006590:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006594:	f003 0302 	and.w	r3, r3, #2
 8006598:	2b00      	cmp	r3, #0
 800659a:	d103      	bne.n	80065a4 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800659c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800659e:	f000 fbdf 	bl	8006d60 <vPortFree>
 80065a2:	e00a      	b.n	80065ba <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80065a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065a6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065aa:	f023 0301 	bic.w	r3, r3, #1
 80065ae:	b2da      	uxtb	r2, r3
 80065b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80065b2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80065b6:	e000      	b.n	80065ba <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80065b8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80065ba:	4b08      	ldr	r3, [pc, #32]	; (80065dc <prvProcessReceivedCommands+0x1c0>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	1d39      	adds	r1, r7, #4
 80065c0:	2200      	movs	r2, #0
 80065c2:	4618      	mov	r0, r3
 80065c4:	f7fe fac4 	bl	8004b50 <xQueueReceive>
 80065c8:	4603      	mov	r3, r0
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	f47f af2a 	bne.w	8006424 <prvProcessReceivedCommands+0x8>
	}
}
 80065d0:	bf00      	nop
 80065d2:	bf00      	nop
 80065d4:	3730      	adds	r7, #48	; 0x30
 80065d6:	46bd      	mov	sp, r7
 80065d8:	bd80      	pop	{r7, pc}
 80065da:	bf00      	nop
 80065dc:	20001590 	.word	0x20001590

080065e0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065e0:	b580      	push	{r7, lr}
 80065e2:	b088      	sub	sp, #32
 80065e4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065e6:	e048      	b.n	800667a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065e8:	4b2d      	ldr	r3, [pc, #180]	; (80066a0 <prvSwitchTimerLists+0xc0>)
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	68db      	ldr	r3, [r3, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065f2:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <prvSwitchTimerLists+0xc0>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	68db      	ldr	r3, [r3, #12]
 80065f8:	68db      	ldr	r3, [r3, #12]
 80065fa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	3304      	adds	r3, #4
 8006600:	4618      	mov	r0, r3
 8006602:	f7fd ffdd 	bl	80045c0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	6a1b      	ldr	r3, [r3, #32]
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006614:	f003 0304 	and.w	r3, r3, #4
 8006618:	2b00      	cmp	r3, #0
 800661a:	d02e      	beq.n	800667a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	699b      	ldr	r3, [r3, #24]
 8006620:	693a      	ldr	r2, [r7, #16]
 8006622:	4413      	add	r3, r2
 8006624:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006626:	68ba      	ldr	r2, [r7, #8]
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	429a      	cmp	r2, r3
 800662c:	d90e      	bls.n	800664c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	68ba      	ldr	r2, [r7, #8]
 8006632:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006634:	68fb      	ldr	r3, [r7, #12]
 8006636:	68fa      	ldr	r2, [r7, #12]
 8006638:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800663a:	4b19      	ldr	r3, [pc, #100]	; (80066a0 <prvSwitchTimerLists+0xc0>)
 800663c:	681a      	ldr	r2, [r3, #0]
 800663e:	68fb      	ldr	r3, [r7, #12]
 8006640:	3304      	adds	r3, #4
 8006642:	4619      	mov	r1, r3
 8006644:	4610      	mov	r0, r2
 8006646:	f7fd ff82 	bl	800454e <vListInsert>
 800664a:	e016      	b.n	800667a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800664c:	2300      	movs	r3, #0
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	2300      	movs	r3, #0
 8006652:	693a      	ldr	r2, [r7, #16]
 8006654:	2100      	movs	r1, #0
 8006656:	68f8      	ldr	r0, [r7, #12]
 8006658:	f7ff fd60 	bl	800611c <xTimerGenericCommand>
 800665c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d10a      	bne.n	800667a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	603b      	str	r3, [r7, #0]
}
 8006676:	bf00      	nop
 8006678:	e7fe      	b.n	8006678 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800667a:	4b09      	ldr	r3, [pc, #36]	; (80066a0 <prvSwitchTimerLists+0xc0>)
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d1b1      	bne.n	80065e8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006684:	4b06      	ldr	r3, [pc, #24]	; (80066a0 <prvSwitchTimerLists+0xc0>)
 8006686:	681b      	ldr	r3, [r3, #0]
 8006688:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800668a:	4b06      	ldr	r3, [pc, #24]	; (80066a4 <prvSwitchTimerLists+0xc4>)
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a04      	ldr	r2, [pc, #16]	; (80066a0 <prvSwitchTimerLists+0xc0>)
 8006690:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006692:	4a04      	ldr	r2, [pc, #16]	; (80066a4 <prvSwitchTimerLists+0xc4>)
 8006694:	697b      	ldr	r3, [r7, #20]
 8006696:	6013      	str	r3, [r2, #0]
}
 8006698:	bf00      	nop
 800669a:	3718      	adds	r7, #24
 800669c:	46bd      	mov	sp, r7
 800669e:	bd80      	pop	{r7, pc}
 80066a0:	20001588 	.word	0x20001588
 80066a4:	2000158c 	.word	0x2000158c

080066a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b082      	sub	sp, #8
 80066ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80066ae:	f000 f969 	bl	8006984 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80066b2:	4b15      	ldr	r3, [pc, #84]	; (8006708 <prvCheckForValidListAndQueue+0x60>)
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d120      	bne.n	80066fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80066ba:	4814      	ldr	r0, [pc, #80]	; (800670c <prvCheckForValidListAndQueue+0x64>)
 80066bc:	f7fd fef6 	bl	80044ac <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066c0:	4813      	ldr	r0, [pc, #76]	; (8006710 <prvCheckForValidListAndQueue+0x68>)
 80066c2:	f7fd fef3 	bl	80044ac <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066c6:	4b13      	ldr	r3, [pc, #76]	; (8006714 <prvCheckForValidListAndQueue+0x6c>)
 80066c8:	4a10      	ldr	r2, [pc, #64]	; (800670c <prvCheckForValidListAndQueue+0x64>)
 80066ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066cc:	4b12      	ldr	r3, [pc, #72]	; (8006718 <prvCheckForValidListAndQueue+0x70>)
 80066ce:	4a10      	ldr	r2, [pc, #64]	; (8006710 <prvCheckForValidListAndQueue+0x68>)
 80066d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066d2:	2300      	movs	r3, #0
 80066d4:	9300      	str	r3, [sp, #0]
 80066d6:	4b11      	ldr	r3, [pc, #68]	; (800671c <prvCheckForValidListAndQueue+0x74>)
 80066d8:	4a11      	ldr	r2, [pc, #68]	; (8006720 <prvCheckForValidListAndQueue+0x78>)
 80066da:	2110      	movs	r1, #16
 80066dc:	200a      	movs	r0, #10
 80066de:	f7fe f801 	bl	80046e4 <xQueueGenericCreateStatic>
 80066e2:	4603      	mov	r3, r0
 80066e4:	4a08      	ldr	r2, [pc, #32]	; (8006708 <prvCheckForValidListAndQueue+0x60>)
 80066e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066e8:	4b07      	ldr	r3, [pc, #28]	; (8006708 <prvCheckForValidListAndQueue+0x60>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066f0:	4b05      	ldr	r3, [pc, #20]	; (8006708 <prvCheckForValidListAndQueue+0x60>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	490b      	ldr	r1, [pc, #44]	; (8006724 <prvCheckForValidListAndQueue+0x7c>)
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7fe fc1a 	bl	8004f30 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066fc:	f000 f972 	bl	80069e4 <vPortExitCritical>
}
 8006700:	bf00      	nop
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}
 8006706:	bf00      	nop
 8006708:	20001590 	.word	0x20001590
 800670c:	20001560 	.word	0x20001560
 8006710:	20001574 	.word	0x20001574
 8006714:	20001588 	.word	0x20001588
 8006718:	2000158c 	.word	0x2000158c
 800671c:	2000163c 	.word	0x2000163c
 8006720:	2000159c 	.word	0x2000159c
 8006724:	08009ef4 	.word	0x08009ef4

08006728 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006728:	b480      	push	{r7}
 800672a:	b085      	sub	sp, #20
 800672c:	af00      	add	r7, sp, #0
 800672e:	60f8      	str	r0, [r7, #12]
 8006730:	60b9      	str	r1, [r7, #8]
 8006732:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	3b04      	subs	r3, #4
 8006738:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006740:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	3b04      	subs	r3, #4
 8006746:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006748:	68bb      	ldr	r3, [r7, #8]
 800674a:	f023 0201 	bic.w	r2, r3, #1
 800674e:	68fb      	ldr	r3, [r7, #12]
 8006750:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	3b04      	subs	r3, #4
 8006756:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006758:	4a0c      	ldr	r2, [pc, #48]	; (800678c <pxPortInitialiseStack+0x64>)
 800675a:	68fb      	ldr	r3, [r7, #12]
 800675c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	3b14      	subs	r3, #20
 8006762:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006764:	687a      	ldr	r2, [r7, #4]
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	3b04      	subs	r3, #4
 800676e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	f06f 0202 	mvn.w	r2, #2
 8006776:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	3b20      	subs	r3, #32
 800677c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800677e:	68fb      	ldr	r3, [r7, #12]
}
 8006780:	4618      	mov	r0, r3
 8006782:	3714      	adds	r7, #20
 8006784:	46bd      	mov	sp, r7
 8006786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800678a:	4770      	bx	lr
 800678c:	08006791 	.word	0x08006791

08006790 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006790:	b480      	push	{r7}
 8006792:	b085      	sub	sp, #20
 8006794:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006796:	2300      	movs	r3, #0
 8006798:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800679a:	4b12      	ldr	r3, [pc, #72]	; (80067e4 <prvTaskExitError+0x54>)
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80067a2:	d00a      	beq.n	80067ba <prvTaskExitError+0x2a>
	__asm volatile
 80067a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067a8:	f383 8811 	msr	BASEPRI, r3
 80067ac:	f3bf 8f6f 	isb	sy
 80067b0:	f3bf 8f4f 	dsb	sy
 80067b4:	60fb      	str	r3, [r7, #12]
}
 80067b6:	bf00      	nop
 80067b8:	e7fe      	b.n	80067b8 <prvTaskExitError+0x28>
	__asm volatile
 80067ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067be:	f383 8811 	msr	BASEPRI, r3
 80067c2:	f3bf 8f6f 	isb	sy
 80067c6:	f3bf 8f4f 	dsb	sy
 80067ca:	60bb      	str	r3, [r7, #8]
}
 80067cc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067ce:	bf00      	nop
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d0fc      	beq.n	80067d0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067d6:	bf00      	nop
 80067d8:	bf00      	nop
 80067da:	3714      	adds	r7, #20
 80067dc:	46bd      	mov	sp, r7
 80067de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067e2:	4770      	bx	lr
 80067e4:	2000000c 	.word	0x2000000c
	...

080067f0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067f0:	4b07      	ldr	r3, [pc, #28]	; (8006810 <pxCurrentTCBConst2>)
 80067f2:	6819      	ldr	r1, [r3, #0]
 80067f4:	6808      	ldr	r0, [r1, #0]
 80067f6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067fa:	f380 8809 	msr	PSP, r0
 80067fe:	f3bf 8f6f 	isb	sy
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8811 	msr	BASEPRI, r0
 800680a:	4770      	bx	lr
 800680c:	f3af 8000 	nop.w

08006810 <pxCurrentTCBConst2>:
 8006810:	20001060 	.word	0x20001060
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006814:	bf00      	nop
 8006816:	bf00      	nop

08006818 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006818:	4808      	ldr	r0, [pc, #32]	; (800683c <prvPortStartFirstTask+0x24>)
 800681a:	6800      	ldr	r0, [r0, #0]
 800681c:	6800      	ldr	r0, [r0, #0]
 800681e:	f380 8808 	msr	MSP, r0
 8006822:	f04f 0000 	mov.w	r0, #0
 8006826:	f380 8814 	msr	CONTROL, r0
 800682a:	b662      	cpsie	i
 800682c:	b661      	cpsie	f
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	f3bf 8f6f 	isb	sy
 8006836:	df00      	svc	0
 8006838:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800683a:	bf00      	nop
 800683c:	e000ed08 	.word	0xe000ed08

08006840 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006840:	b580      	push	{r7, lr}
 8006842:	b086      	sub	sp, #24
 8006844:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006846:	4b46      	ldr	r3, [pc, #280]	; (8006960 <xPortStartScheduler+0x120>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a46      	ldr	r2, [pc, #280]	; (8006964 <xPortStartScheduler+0x124>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d10a      	bne.n	8006866 <xPortStartScheduler+0x26>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	613b      	str	r3, [r7, #16]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006866:	4b3e      	ldr	r3, [pc, #248]	; (8006960 <xPortStartScheduler+0x120>)
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	4a3f      	ldr	r2, [pc, #252]	; (8006968 <xPortStartScheduler+0x128>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d10a      	bne.n	8006886 <xPortStartScheduler+0x46>
	__asm volatile
 8006870:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006874:	f383 8811 	msr	BASEPRI, r3
 8006878:	f3bf 8f6f 	isb	sy
 800687c:	f3bf 8f4f 	dsb	sy
 8006880:	60fb      	str	r3, [r7, #12]
}
 8006882:	bf00      	nop
 8006884:	e7fe      	b.n	8006884 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006886:	4b39      	ldr	r3, [pc, #228]	; (800696c <xPortStartScheduler+0x12c>)
 8006888:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	781b      	ldrb	r3, [r3, #0]
 800688e:	b2db      	uxtb	r3, r3
 8006890:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006892:	697b      	ldr	r3, [r7, #20]
 8006894:	22ff      	movs	r2, #255	; 0xff
 8006896:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006898:	697b      	ldr	r3, [r7, #20]
 800689a:	781b      	ldrb	r3, [r3, #0]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80068a8:	b2da      	uxtb	r2, r3
 80068aa:	4b31      	ldr	r3, [pc, #196]	; (8006970 <xPortStartScheduler+0x130>)
 80068ac:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80068ae:	4b31      	ldr	r3, [pc, #196]	; (8006974 <xPortStartScheduler+0x134>)
 80068b0:	2207      	movs	r2, #7
 80068b2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068b4:	e009      	b.n	80068ca <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80068b6:	4b2f      	ldr	r3, [pc, #188]	; (8006974 <xPortStartScheduler+0x134>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	3b01      	subs	r3, #1
 80068bc:	4a2d      	ldr	r2, [pc, #180]	; (8006974 <xPortStartScheduler+0x134>)
 80068be:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068c0:	78fb      	ldrb	r3, [r7, #3]
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	005b      	lsls	r3, r3, #1
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068ca:	78fb      	ldrb	r3, [r7, #3]
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068d2:	2b80      	cmp	r3, #128	; 0x80
 80068d4:	d0ef      	beq.n	80068b6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068d6:	4b27      	ldr	r3, [pc, #156]	; (8006974 <xPortStartScheduler+0x134>)
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f1c3 0307 	rsb	r3, r3, #7
 80068de:	2b04      	cmp	r3, #4
 80068e0:	d00a      	beq.n	80068f8 <xPortStartScheduler+0xb8>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	60bb      	str	r3, [r7, #8]
}
 80068f4:	bf00      	nop
 80068f6:	e7fe      	b.n	80068f6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068f8:	4b1e      	ldr	r3, [pc, #120]	; (8006974 <xPortStartScheduler+0x134>)
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	4a1d      	ldr	r2, [pc, #116]	; (8006974 <xPortStartScheduler+0x134>)
 8006900:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006902:	4b1c      	ldr	r3, [pc, #112]	; (8006974 <xPortStartScheduler+0x134>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800690a:	4a1a      	ldr	r2, [pc, #104]	; (8006974 <xPortStartScheduler+0x134>)
 800690c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	b2da      	uxtb	r2, r3
 8006912:	697b      	ldr	r3, [r7, #20]
 8006914:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006916:	4b18      	ldr	r3, [pc, #96]	; (8006978 <xPortStartScheduler+0x138>)
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	4a17      	ldr	r2, [pc, #92]	; (8006978 <xPortStartScheduler+0x138>)
 800691c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006920:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006922:	4b15      	ldr	r3, [pc, #84]	; (8006978 <xPortStartScheduler+0x138>)
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	4a14      	ldr	r2, [pc, #80]	; (8006978 <xPortStartScheduler+0x138>)
 8006928:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800692c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800692e:	f000 f8dd 	bl	8006aec <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006932:	4b12      	ldr	r3, [pc, #72]	; (800697c <xPortStartScheduler+0x13c>)
 8006934:	2200      	movs	r2, #0
 8006936:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006938:	f000 f8fc 	bl	8006b34 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800693c:	4b10      	ldr	r3, [pc, #64]	; (8006980 <xPortStartScheduler+0x140>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	4a0f      	ldr	r2, [pc, #60]	; (8006980 <xPortStartScheduler+0x140>)
 8006942:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006946:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006948:	f7ff ff66 	bl	8006818 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800694c:	f7fe ffaa 	bl	80058a4 <vTaskSwitchContext>
	prvTaskExitError();
 8006950:	f7ff ff1e 	bl	8006790 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006954:	2300      	movs	r3, #0
}
 8006956:	4618      	mov	r0, r3
 8006958:	3718      	adds	r7, #24
 800695a:	46bd      	mov	sp, r7
 800695c:	bd80      	pop	{r7, pc}
 800695e:	bf00      	nop
 8006960:	e000ed00 	.word	0xe000ed00
 8006964:	410fc271 	.word	0x410fc271
 8006968:	410fc270 	.word	0x410fc270
 800696c:	e000e400 	.word	0xe000e400
 8006970:	2000168c 	.word	0x2000168c
 8006974:	20001690 	.word	0x20001690
 8006978:	e000ed20 	.word	0xe000ed20
 800697c:	2000000c 	.word	0x2000000c
 8006980:	e000ef34 	.word	0xe000ef34

08006984 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006984:	b480      	push	{r7}
 8006986:	b083      	sub	sp, #12
 8006988:	af00      	add	r7, sp, #0
	__asm volatile
 800698a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800698e:	f383 8811 	msr	BASEPRI, r3
 8006992:	f3bf 8f6f 	isb	sy
 8006996:	f3bf 8f4f 	dsb	sy
 800699a:	607b      	str	r3, [r7, #4]
}
 800699c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800699e:	4b0f      	ldr	r3, [pc, #60]	; (80069dc <vPortEnterCritical+0x58>)
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	3301      	adds	r3, #1
 80069a4:	4a0d      	ldr	r2, [pc, #52]	; (80069dc <vPortEnterCritical+0x58>)
 80069a6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80069a8:	4b0c      	ldr	r3, [pc, #48]	; (80069dc <vPortEnterCritical+0x58>)
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d10f      	bne.n	80069d0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80069b0:	4b0b      	ldr	r3, [pc, #44]	; (80069e0 <vPortEnterCritical+0x5c>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <vPortEnterCritical+0x4c>
	__asm volatile
 80069ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069be:	f383 8811 	msr	BASEPRI, r3
 80069c2:	f3bf 8f6f 	isb	sy
 80069c6:	f3bf 8f4f 	dsb	sy
 80069ca:	603b      	str	r3, [r7, #0]
}
 80069cc:	bf00      	nop
 80069ce:	e7fe      	b.n	80069ce <vPortEnterCritical+0x4a>
	}
}
 80069d0:	bf00      	nop
 80069d2:	370c      	adds	r7, #12
 80069d4:	46bd      	mov	sp, r7
 80069d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069da:	4770      	bx	lr
 80069dc:	2000000c 	.word	0x2000000c
 80069e0:	e000ed04 	.word	0xe000ed04

080069e4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069e4:	b480      	push	{r7}
 80069e6:	b083      	sub	sp, #12
 80069e8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069ea:	4b12      	ldr	r3, [pc, #72]	; (8006a34 <vPortExitCritical+0x50>)
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d10a      	bne.n	8006a08 <vPortExitCritical+0x24>
	__asm volatile
 80069f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069f6:	f383 8811 	msr	BASEPRI, r3
 80069fa:	f3bf 8f6f 	isb	sy
 80069fe:	f3bf 8f4f 	dsb	sy
 8006a02:	607b      	str	r3, [r7, #4]
}
 8006a04:	bf00      	nop
 8006a06:	e7fe      	b.n	8006a06 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006a08:	4b0a      	ldr	r3, [pc, #40]	; (8006a34 <vPortExitCritical+0x50>)
 8006a0a:	681b      	ldr	r3, [r3, #0]
 8006a0c:	3b01      	subs	r3, #1
 8006a0e:	4a09      	ldr	r2, [pc, #36]	; (8006a34 <vPortExitCritical+0x50>)
 8006a10:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8006a12:	4b08      	ldr	r3, [pc, #32]	; (8006a34 <vPortExitCritical+0x50>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d105      	bne.n	8006a26 <vPortExitCritical+0x42>
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	f383 8811 	msr	BASEPRI, r3
}
 8006a24:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a26:	bf00      	nop
 8006a28:	370c      	adds	r7, #12
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a30:	4770      	bx	lr
 8006a32:	bf00      	nop
 8006a34:	2000000c 	.word	0x2000000c
	...

08006a40 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a40:	f3ef 8009 	mrs	r0, PSP
 8006a44:	f3bf 8f6f 	isb	sy
 8006a48:	4b15      	ldr	r3, [pc, #84]	; (8006aa0 <pxCurrentTCBConst>)
 8006a4a:	681a      	ldr	r2, [r3, #0]
 8006a4c:	f01e 0f10 	tst.w	lr, #16
 8006a50:	bf08      	it	eq
 8006a52:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a56:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a5a:	6010      	str	r0, [r2, #0]
 8006a5c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a60:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a64:	f380 8811 	msr	BASEPRI, r0
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	f3bf 8f6f 	isb	sy
 8006a70:	f7fe ff18 	bl	80058a4 <vTaskSwitchContext>
 8006a74:	f04f 0000 	mov.w	r0, #0
 8006a78:	f380 8811 	msr	BASEPRI, r0
 8006a7c:	bc09      	pop	{r0, r3}
 8006a7e:	6819      	ldr	r1, [r3, #0]
 8006a80:	6808      	ldr	r0, [r1, #0]
 8006a82:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a86:	f01e 0f10 	tst.w	lr, #16
 8006a8a:	bf08      	it	eq
 8006a8c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a90:	f380 8809 	msr	PSP, r0
 8006a94:	f3bf 8f6f 	isb	sy
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	f3af 8000 	nop.w

08006aa0 <pxCurrentTCBConst>:
 8006aa0:	20001060 	.word	0x20001060
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006aa4:	bf00      	nop
 8006aa6:	bf00      	nop

08006aa8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006aa8:	b580      	push	{r7, lr}
 8006aaa:	b082      	sub	sp, #8
 8006aac:	af00      	add	r7, sp, #0
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	607b      	str	r3, [r7, #4]
}
 8006ac0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006ac2:	f7fe fe35 	bl	8005730 <xTaskIncrementTick>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d003      	beq.n	8006ad4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006acc:	4b06      	ldr	r3, [pc, #24]	; (8006ae8 <xPortSysTickHandler+0x40>)
 8006ace:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ad2:	601a      	str	r2, [r3, #0]
 8006ad4:	2300      	movs	r3, #0
 8006ad6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ad8:	683b      	ldr	r3, [r7, #0]
 8006ada:	f383 8811 	msr	BASEPRI, r3
}
 8006ade:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ae0:	bf00      	nop
 8006ae2:	3708      	adds	r7, #8
 8006ae4:	46bd      	mov	sp, r7
 8006ae6:	bd80      	pop	{r7, pc}
 8006ae8:	e000ed04 	.word	0xe000ed04

08006aec <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006aec:	b480      	push	{r7}
 8006aee:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006af0:	4b0b      	ldr	r3, [pc, #44]	; (8006b20 <vPortSetupTimerInterrupt+0x34>)
 8006af2:	2200      	movs	r2, #0
 8006af4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006af6:	4b0b      	ldr	r3, [pc, #44]	; (8006b24 <vPortSetupTimerInterrupt+0x38>)
 8006af8:	2200      	movs	r2, #0
 8006afa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006afc:	4b0a      	ldr	r3, [pc, #40]	; (8006b28 <vPortSetupTimerInterrupt+0x3c>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	4a0a      	ldr	r2, [pc, #40]	; (8006b2c <vPortSetupTimerInterrupt+0x40>)
 8006b02:	fba2 2303 	umull	r2, r3, r2, r3
 8006b06:	099b      	lsrs	r3, r3, #6
 8006b08:	4a09      	ldr	r2, [pc, #36]	; (8006b30 <vPortSetupTimerInterrupt+0x44>)
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006b0e:	4b04      	ldr	r3, [pc, #16]	; (8006b20 <vPortSetupTimerInterrupt+0x34>)
 8006b10:	2207      	movs	r2, #7
 8006b12:	601a      	str	r2, [r3, #0]
}
 8006b14:	bf00      	nop
 8006b16:	46bd      	mov	sp, r7
 8006b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1c:	4770      	bx	lr
 8006b1e:	bf00      	nop
 8006b20:	e000e010 	.word	0xe000e010
 8006b24:	e000e018 	.word	0xe000e018
 8006b28:	20000000 	.word	0x20000000
 8006b2c:	10624dd3 	.word	0x10624dd3
 8006b30:	e000e014 	.word	0xe000e014

08006b34 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b34:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b44 <vPortEnableVFP+0x10>
 8006b38:	6801      	ldr	r1, [r0, #0]
 8006b3a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b3e:	6001      	str	r1, [r0, #0]
 8006b40:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b42:	bf00      	nop
 8006b44:	e000ed88 	.word	0xe000ed88

08006b48 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b48:	b480      	push	{r7}
 8006b4a:	b085      	sub	sp, #20
 8006b4c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b4e:	f3ef 8305 	mrs	r3, IPSR
 8006b52:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	2b0f      	cmp	r3, #15
 8006b58:	d914      	bls.n	8006b84 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b5a:	4a17      	ldr	r2, [pc, #92]	; (8006bb8 <vPortValidateInterruptPriority+0x70>)
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	4413      	add	r3, r2
 8006b60:	781b      	ldrb	r3, [r3, #0]
 8006b62:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b64:	4b15      	ldr	r3, [pc, #84]	; (8006bbc <vPortValidateInterruptPriority+0x74>)
 8006b66:	781b      	ldrb	r3, [r3, #0]
 8006b68:	7afa      	ldrb	r2, [r7, #11]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d20a      	bcs.n	8006b84 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b72:	f383 8811 	msr	BASEPRI, r3
 8006b76:	f3bf 8f6f 	isb	sy
 8006b7a:	f3bf 8f4f 	dsb	sy
 8006b7e:	607b      	str	r3, [r7, #4]
}
 8006b80:	bf00      	nop
 8006b82:	e7fe      	b.n	8006b82 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b84:	4b0e      	ldr	r3, [pc, #56]	; (8006bc0 <vPortValidateInterruptPriority+0x78>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b8c:	4b0d      	ldr	r3, [pc, #52]	; (8006bc4 <vPortValidateInterruptPriority+0x7c>)
 8006b8e:	681b      	ldr	r3, [r3, #0]
 8006b90:	429a      	cmp	r2, r3
 8006b92:	d90a      	bls.n	8006baa <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b94:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b98:	f383 8811 	msr	BASEPRI, r3
 8006b9c:	f3bf 8f6f 	isb	sy
 8006ba0:	f3bf 8f4f 	dsb	sy
 8006ba4:	603b      	str	r3, [r7, #0]
}
 8006ba6:	bf00      	nop
 8006ba8:	e7fe      	b.n	8006ba8 <vPortValidateInterruptPriority+0x60>
	}
 8006baa:	bf00      	nop
 8006bac:	3714      	adds	r7, #20
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	e000e3f0 	.word	0xe000e3f0
 8006bbc:	2000168c 	.word	0x2000168c
 8006bc0:	e000ed0c 	.word	0xe000ed0c
 8006bc4:	20001690 	.word	0x20001690

08006bc8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006bc8:	b580      	push	{r7, lr}
 8006bca:	b08a      	sub	sp, #40	; 0x28
 8006bcc:	af00      	add	r7, sp, #0
 8006bce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bd0:	2300      	movs	r3, #0
 8006bd2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bd4:	f7fe fccc 	bl	8005570 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bd8:	4b5b      	ldr	r3, [pc, #364]	; (8006d48 <pvPortMalloc+0x180>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d101      	bne.n	8006be4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006be0:	f000 f920 	bl	8006e24 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006be4:	4b59      	ldr	r3, [pc, #356]	; (8006d4c <pvPortMalloc+0x184>)
 8006be6:	681a      	ldr	r2, [r3, #0]
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	4013      	ands	r3, r2
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	f040 8093 	bne.w	8006d18 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d01d      	beq.n	8006c34 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006bf8:	2208      	movs	r2, #8
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	4413      	add	r3, r2
 8006bfe:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	f003 0307 	and.w	r3, r3, #7
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d014      	beq.n	8006c34 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	f023 0307 	bic.w	r3, r3, #7
 8006c10:	3308      	adds	r3, #8
 8006c12:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	f003 0307 	and.w	r3, r3, #7
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d00a      	beq.n	8006c34 <pvPortMalloc+0x6c>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	617b      	str	r3, [r7, #20]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d06e      	beq.n	8006d18 <pvPortMalloc+0x150>
 8006c3a:	4b45      	ldr	r3, [pc, #276]	; (8006d50 <pvPortMalloc+0x188>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d869      	bhi.n	8006d18 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c44:	4b43      	ldr	r3, [pc, #268]	; (8006d54 <pvPortMalloc+0x18c>)
 8006c46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c48:	4b42      	ldr	r3, [pc, #264]	; (8006d54 <pvPortMalloc+0x18c>)
 8006c4a:	681b      	ldr	r3, [r3, #0]
 8006c4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c4e:	e004      	b.n	8006c5a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	687a      	ldr	r2, [r7, #4]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d903      	bls.n	8006c6c <pvPortMalloc+0xa4>
 8006c64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c66:	681b      	ldr	r3, [r3, #0]
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d1f1      	bne.n	8006c50 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c6c:	4b36      	ldr	r3, [pc, #216]	; (8006d48 <pvPortMalloc+0x180>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c72:	429a      	cmp	r2, r3
 8006c74:	d050      	beq.n	8006d18 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c76:	6a3b      	ldr	r3, [r7, #32]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	2208      	movs	r2, #8
 8006c7c:	4413      	add	r3, r2
 8006c7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	6a3b      	ldr	r3, [r7, #32]
 8006c86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	1ad2      	subs	r2, r2, r3
 8006c90:	2308      	movs	r3, #8
 8006c92:	005b      	lsls	r3, r3, #1
 8006c94:	429a      	cmp	r2, r3
 8006c96:	d91f      	bls.n	8006cd8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	4413      	add	r3, r2
 8006c9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006ca0:	69bb      	ldr	r3, [r7, #24]
 8006ca2:	f003 0307 	and.w	r3, r3, #7
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	d00a      	beq.n	8006cc0 <pvPortMalloc+0xf8>
	__asm volatile
 8006caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cae:	f383 8811 	msr	BASEPRI, r3
 8006cb2:	f3bf 8f6f 	isb	sy
 8006cb6:	f3bf 8f4f 	dsb	sy
 8006cba:	613b      	str	r3, [r7, #16]
}
 8006cbc:	bf00      	nop
 8006cbe:	e7fe      	b.n	8006cbe <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006cc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cc2:	685a      	ldr	r2, [r3, #4]
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	1ad2      	subs	r2, r2, r3
 8006cc8:	69bb      	ldr	r3, [r7, #24]
 8006cca:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006ccc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cce:	687a      	ldr	r2, [r7, #4]
 8006cd0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cd2:	69b8      	ldr	r0, [r7, #24]
 8006cd4:	f000 f908 	bl	8006ee8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cd8:	4b1d      	ldr	r3, [pc, #116]	; (8006d50 <pvPortMalloc+0x188>)
 8006cda:	681a      	ldr	r2, [r3, #0]
 8006cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cde:	685b      	ldr	r3, [r3, #4]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	4a1b      	ldr	r2, [pc, #108]	; (8006d50 <pvPortMalloc+0x188>)
 8006ce4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006ce6:	4b1a      	ldr	r3, [pc, #104]	; (8006d50 <pvPortMalloc+0x188>)
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	4b1b      	ldr	r3, [pc, #108]	; (8006d58 <pvPortMalloc+0x190>)
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	429a      	cmp	r2, r3
 8006cf0:	d203      	bcs.n	8006cfa <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cf2:	4b17      	ldr	r3, [pc, #92]	; (8006d50 <pvPortMalloc+0x188>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	4a18      	ldr	r2, [pc, #96]	; (8006d58 <pvPortMalloc+0x190>)
 8006cf8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cfc:	685a      	ldr	r2, [r3, #4]
 8006cfe:	4b13      	ldr	r3, [pc, #76]	; (8006d4c <pvPortMalloc+0x184>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	431a      	orrs	r2, r3
 8006d04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d06:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006d08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <pvPortMalloc+0x194>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	3301      	adds	r3, #1
 8006d14:	4a11      	ldr	r2, [pc, #68]	; (8006d5c <pvPortMalloc+0x194>)
 8006d16:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006d18:	f7fe fc38 	bl	800558c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006d1c:	69fb      	ldr	r3, [r7, #28]
 8006d1e:	f003 0307 	and.w	r3, r3, #7
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d00a      	beq.n	8006d3c <pvPortMalloc+0x174>
	__asm volatile
 8006d26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d2a:	f383 8811 	msr	BASEPRI, r3
 8006d2e:	f3bf 8f6f 	isb	sy
 8006d32:	f3bf 8f4f 	dsb	sy
 8006d36:	60fb      	str	r3, [r7, #12]
}
 8006d38:	bf00      	nop
 8006d3a:	e7fe      	b.n	8006d3a <pvPortMalloc+0x172>
	return pvReturn;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
}
 8006d3e:	4618      	mov	r0, r3
 8006d40:	3728      	adds	r7, #40	; 0x28
 8006d42:	46bd      	mov	sp, r7
 8006d44:	bd80      	pop	{r7, pc}
 8006d46:	bf00      	nop
 8006d48:	20002254 	.word	0x20002254
 8006d4c:	20002268 	.word	0x20002268
 8006d50:	20002258 	.word	0x20002258
 8006d54:	2000224c 	.word	0x2000224c
 8006d58:	2000225c 	.word	0x2000225c
 8006d5c:	20002260 	.word	0x20002260

08006d60 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b086      	sub	sp, #24
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d04d      	beq.n	8006e0e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d72:	2308      	movs	r3, #8
 8006d74:	425b      	negs	r3, r3
 8006d76:	697a      	ldr	r2, [r7, #20]
 8006d78:	4413      	add	r3, r2
 8006d7a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d7c:	697b      	ldr	r3, [r7, #20]
 8006d7e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d80:	693b      	ldr	r3, [r7, #16]
 8006d82:	685a      	ldr	r2, [r3, #4]
 8006d84:	4b24      	ldr	r3, [pc, #144]	; (8006e18 <vPortFree+0xb8>)
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4013      	ands	r3, r2
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d10a      	bne.n	8006da4 <vPortFree+0x44>
	__asm volatile
 8006d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d92:	f383 8811 	msr	BASEPRI, r3
 8006d96:	f3bf 8f6f 	isb	sy
 8006d9a:	f3bf 8f4f 	dsb	sy
 8006d9e:	60fb      	str	r3, [r7, #12]
}
 8006da0:	bf00      	nop
 8006da2:	e7fe      	b.n	8006da2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006da4:	693b      	ldr	r3, [r7, #16]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	2b00      	cmp	r3, #0
 8006daa:	d00a      	beq.n	8006dc2 <vPortFree+0x62>
	__asm volatile
 8006dac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006db0:	f383 8811 	msr	BASEPRI, r3
 8006db4:	f3bf 8f6f 	isb	sy
 8006db8:	f3bf 8f4f 	dsb	sy
 8006dbc:	60bb      	str	r3, [r7, #8]
}
 8006dbe:	bf00      	nop
 8006dc0:	e7fe      	b.n	8006dc0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006dc2:	693b      	ldr	r3, [r7, #16]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	4b14      	ldr	r3, [pc, #80]	; (8006e18 <vPortFree+0xb8>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	4013      	ands	r3, r2
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d01e      	beq.n	8006e0e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d11a      	bne.n	8006e0e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	685a      	ldr	r2, [r3, #4]
 8006ddc:	4b0e      	ldr	r3, [pc, #56]	; (8006e18 <vPortFree+0xb8>)
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	43db      	mvns	r3, r3
 8006de2:	401a      	ands	r2, r3
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006de8:	f7fe fbc2 	bl	8005570 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dec:	693b      	ldr	r3, [r7, #16]
 8006dee:	685a      	ldr	r2, [r3, #4]
 8006df0:	4b0a      	ldr	r3, [pc, #40]	; (8006e1c <vPortFree+0xbc>)
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4413      	add	r3, r2
 8006df6:	4a09      	ldr	r2, [pc, #36]	; (8006e1c <vPortFree+0xbc>)
 8006df8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dfa:	6938      	ldr	r0, [r7, #16]
 8006dfc:	f000 f874 	bl	8006ee8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006e00:	4b07      	ldr	r3, [pc, #28]	; (8006e20 <vPortFree+0xc0>)
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	3301      	adds	r3, #1
 8006e06:	4a06      	ldr	r2, [pc, #24]	; (8006e20 <vPortFree+0xc0>)
 8006e08:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006e0a:	f7fe fbbf 	bl	800558c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006e0e:	bf00      	nop
 8006e10:	3718      	adds	r7, #24
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20002268 	.word	0x20002268
 8006e1c:	20002258 	.word	0x20002258
 8006e20:	20002264 	.word	0x20002264

08006e24 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e24:	b480      	push	{r7}
 8006e26:	b085      	sub	sp, #20
 8006e28:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e2a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006e2e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e30:	4b27      	ldr	r3, [pc, #156]	; (8006ed0 <prvHeapInit+0xac>)
 8006e32:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f003 0307 	and.w	r3, r3, #7
 8006e3a:	2b00      	cmp	r3, #0
 8006e3c:	d00c      	beq.n	8006e58 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e3e:	68fb      	ldr	r3, [r7, #12]
 8006e40:	3307      	adds	r3, #7
 8006e42:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	f023 0307 	bic.w	r3, r3, #7
 8006e4a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e4c:	68ba      	ldr	r2, [r7, #8]
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	4a1f      	ldr	r2, [pc, #124]	; (8006ed0 <prvHeapInit+0xac>)
 8006e54:	4413      	add	r3, r2
 8006e56:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e5c:	4a1d      	ldr	r2, [pc, #116]	; (8006ed4 <prvHeapInit+0xb0>)
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e62:	4b1c      	ldr	r3, [pc, #112]	; (8006ed4 <prvHeapInit+0xb0>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	68ba      	ldr	r2, [r7, #8]
 8006e6c:	4413      	add	r3, r2
 8006e6e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e70:	2208      	movs	r2, #8
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	1a9b      	subs	r3, r3, r2
 8006e76:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	f023 0307 	bic.w	r3, r3, #7
 8006e7e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	4a15      	ldr	r2, [pc, #84]	; (8006ed8 <prvHeapInit+0xb4>)
 8006e84:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e86:	4b14      	ldr	r3, [pc, #80]	; (8006ed8 <prvHeapInit+0xb4>)
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	2200      	movs	r2, #0
 8006e8c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e8e:	4b12      	ldr	r3, [pc, #72]	; (8006ed8 <prvHeapInit+0xb4>)
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	2200      	movs	r2, #0
 8006e94:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e9a:	683b      	ldr	r3, [r7, #0]
 8006e9c:	68fa      	ldr	r2, [r7, #12]
 8006e9e:	1ad2      	subs	r2, r2, r3
 8006ea0:	683b      	ldr	r3, [r7, #0]
 8006ea2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006ea4:	4b0c      	ldr	r3, [pc, #48]	; (8006ed8 <prvHeapInit+0xb4>)
 8006ea6:	681a      	ldr	r2, [r3, #0]
 8006ea8:	683b      	ldr	r3, [r7, #0]
 8006eaa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006eac:	683b      	ldr	r3, [r7, #0]
 8006eae:	685b      	ldr	r3, [r3, #4]
 8006eb0:	4a0a      	ldr	r2, [pc, #40]	; (8006edc <prvHeapInit+0xb8>)
 8006eb2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006eb4:	683b      	ldr	r3, [r7, #0]
 8006eb6:	685b      	ldr	r3, [r3, #4]
 8006eb8:	4a09      	ldr	r2, [pc, #36]	; (8006ee0 <prvHeapInit+0xbc>)
 8006eba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006ebc:	4b09      	ldr	r3, [pc, #36]	; (8006ee4 <prvHeapInit+0xc0>)
 8006ebe:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ec2:	601a      	str	r2, [r3, #0]
}
 8006ec4:	bf00      	nop
 8006ec6:	3714      	adds	r7, #20
 8006ec8:	46bd      	mov	sp, r7
 8006eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ece:	4770      	bx	lr
 8006ed0:	20001694 	.word	0x20001694
 8006ed4:	2000224c 	.word	0x2000224c
 8006ed8:	20002254 	.word	0x20002254
 8006edc:	2000225c 	.word	0x2000225c
 8006ee0:	20002258 	.word	0x20002258
 8006ee4:	20002268 	.word	0x20002268

08006ee8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ef0:	4b28      	ldr	r3, [pc, #160]	; (8006f94 <prvInsertBlockIntoFreeList+0xac>)
 8006ef2:	60fb      	str	r3, [r7, #12]
 8006ef4:	e002      	b.n	8006efc <prvInsertBlockIntoFreeList+0x14>
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	681b      	ldr	r3, [r3, #0]
 8006efa:	60fb      	str	r3, [r7, #12]
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	687a      	ldr	r2, [r7, #4]
 8006f02:	429a      	cmp	r2, r3
 8006f04:	d8f7      	bhi.n	8006ef6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	685b      	ldr	r3, [r3, #4]
 8006f0e:	68ba      	ldr	r2, [r7, #8]
 8006f10:	4413      	add	r3, r2
 8006f12:	687a      	ldr	r2, [r7, #4]
 8006f14:	429a      	cmp	r2, r3
 8006f16:	d108      	bne.n	8006f2a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	685a      	ldr	r2, [r3, #4]
 8006f1c:	687b      	ldr	r3, [r7, #4]
 8006f1e:	685b      	ldr	r3, [r3, #4]
 8006f20:	441a      	add	r2, r3
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	441a      	add	r2, r3
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	429a      	cmp	r2, r3
 8006f3c:	d118      	bne.n	8006f70 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681a      	ldr	r2, [r3, #0]
 8006f42:	4b15      	ldr	r3, [pc, #84]	; (8006f98 <prvInsertBlockIntoFreeList+0xb0>)
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	429a      	cmp	r2, r3
 8006f48:	d00d      	beq.n	8006f66 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	685a      	ldr	r2, [r3, #4]
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	685b      	ldr	r3, [r3, #4]
 8006f54:	441a      	add	r2, r3
 8006f56:	687b      	ldr	r3, [r7, #4]
 8006f58:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	681a      	ldr	r2, [r3, #0]
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	601a      	str	r2, [r3, #0]
 8006f64:	e008      	b.n	8006f78 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f66:	4b0c      	ldr	r3, [pc, #48]	; (8006f98 <prvInsertBlockIntoFreeList+0xb0>)
 8006f68:	681a      	ldr	r2, [r3, #0]
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	601a      	str	r2, [r3, #0]
 8006f6e:	e003      	b.n	8006f78 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	681a      	ldr	r2, [r3, #0]
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f78:	68fa      	ldr	r2, [r7, #12]
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	429a      	cmp	r2, r3
 8006f7e:	d002      	beq.n	8006f86 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	687a      	ldr	r2, [r7, #4]
 8006f84:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f86:	bf00      	nop
 8006f88:	3714      	adds	r7, #20
 8006f8a:	46bd      	mov	sp, r7
 8006f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f90:	4770      	bx	lr
 8006f92:	bf00      	nop
 8006f94:	2000224c 	.word	0x2000224c
 8006f98:	20002254 	.word	0x20002254

08006f9c <vPortGetHeapStats>:
/*-----------------------------------------------------------*/

void vPortGetHeapStats( HeapStats_t *pxHeapStats )
{
 8006f9c:	b580      	push	{r7, lr}
 8006f9e:	b086      	sub	sp, #24
 8006fa0:	af00      	add	r7, sp, #0
 8006fa2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock;
size_t xBlocks = 0, xMaxSize = 0, xMinSize = portMAX_DELAY; /* portMAX_DELAY used as a portable way of getting the maximum value. */
 8006fa4:	2300      	movs	r3, #0
 8006fa6:	613b      	str	r3, [r7, #16]
 8006fa8:	2300      	movs	r3, #0
 8006faa:	60fb      	str	r3, [r7, #12]
 8006fac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006fb0:	60bb      	str	r3, [r7, #8]

	vTaskSuspendAll();
 8006fb2:	f7fe fadd 	bl	8005570 <vTaskSuspendAll>
	{
		pxBlock = xStart.pxNextFreeBlock;
 8006fb6:	4b22      	ldr	r3, [pc, #136]	; (8007040 <vPortGetHeapStats+0xa4>)
 8006fb8:	681b      	ldr	r3, [r3, #0]
 8006fba:	617b      	str	r3, [r7, #20]

		/* pxBlock will be NULL if the heap has not been initialised.  The heap
		is initialised automatically when the first allocation is made. */
		if( pxBlock != NULL )
 8006fbc:	697b      	ldr	r3, [r7, #20]
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d01a      	beq.n	8006ff8 <vPortGetHeapStats+0x5c>
		{
			do
			{
				/* Increment the number of blocks and record the largest block seen
				so far. */
				xBlocks++;
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	613b      	str	r3, [r7, #16]

				if( pxBlock->xBlockSize > xMaxSize )
 8006fc8:	697b      	ldr	r3, [r7, #20]
 8006fca:	685b      	ldr	r3, [r3, #4]
 8006fcc:	68fa      	ldr	r2, [r7, #12]
 8006fce:	429a      	cmp	r2, r3
 8006fd0:	d202      	bcs.n	8006fd8 <vPortGetHeapStats+0x3c>
				{
					xMaxSize = pxBlock->xBlockSize;
 8006fd2:	697b      	ldr	r3, [r7, #20]
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	60fb      	str	r3, [r7, #12]
				}

				if( pxBlock->xBlockSize < xMinSize )
 8006fd8:	697b      	ldr	r3, [r7, #20]
 8006fda:	685b      	ldr	r3, [r3, #4]
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d902      	bls.n	8006fe8 <vPortGetHeapStats+0x4c>
				{
					xMinSize = pxBlock->xBlockSize;
 8006fe2:	697b      	ldr	r3, [r7, #20]
 8006fe4:	685b      	ldr	r3, [r3, #4]
 8006fe6:	60bb      	str	r3, [r7, #8]
				}

				/* Move to the next block in the chain until the last block is
				reached. */
				pxBlock = pxBlock->pxNextFreeBlock;
 8006fe8:	697b      	ldr	r3, [r7, #20]
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	617b      	str	r3, [r7, #20]
			} while( pxBlock != pxEnd );
 8006fee:	4b15      	ldr	r3, [pc, #84]	; (8007044 <vPortGetHeapStats+0xa8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	697a      	ldr	r2, [r7, #20]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d1e4      	bne.n	8006fc2 <vPortGetHeapStats+0x26>
		}
	}
	xTaskResumeAll();
 8006ff8:	f7fe fac8 	bl	800558c <xTaskResumeAll>

	pxHeapStats->xSizeOfLargestFreeBlockInBytes = xMaxSize;
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	68fa      	ldr	r2, [r7, #12]
 8007000:	605a      	str	r2, [r3, #4]
	pxHeapStats->xSizeOfSmallestFreeBlockInBytes = xMinSize;
 8007002:	687b      	ldr	r3, [r7, #4]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	609a      	str	r2, [r3, #8]
	pxHeapStats->xNumberOfFreeBlocks = xBlocks;
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	693a      	ldr	r2, [r7, #16]
 800700c:	60da      	str	r2, [r3, #12]

	taskENTER_CRITICAL();
 800700e:	f7ff fcb9 	bl	8006984 <vPortEnterCritical>
	{
		pxHeapStats->xAvailableHeapSpaceInBytes = xFreeBytesRemaining;
 8007012:	4b0d      	ldr	r3, [pc, #52]	; (8007048 <vPortGetHeapStats+0xac>)
 8007014:	681a      	ldr	r2, [r3, #0]
 8007016:	687b      	ldr	r3, [r7, #4]
 8007018:	601a      	str	r2, [r3, #0]
		pxHeapStats->xNumberOfSuccessfulAllocations = xNumberOfSuccessfulAllocations;
 800701a:	4b0c      	ldr	r3, [pc, #48]	; (800704c <vPortGetHeapStats+0xb0>)
 800701c:	681a      	ldr	r2, [r3, #0]
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	615a      	str	r2, [r3, #20]
		pxHeapStats->xNumberOfSuccessfulFrees = xNumberOfSuccessfulFrees;
 8007022:	4b0b      	ldr	r3, [pc, #44]	; (8007050 <vPortGetHeapStats+0xb4>)
 8007024:	681a      	ldr	r2, [r3, #0]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	619a      	str	r2, [r3, #24]
		pxHeapStats->xMinimumEverFreeBytesRemaining = xMinimumEverFreeBytesRemaining;
 800702a:	4b0a      	ldr	r3, [pc, #40]	; (8007054 <vPortGetHeapStats+0xb8>)
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	611a      	str	r2, [r3, #16]
	}
	taskEXIT_CRITICAL();
 8007032:	f7ff fcd7 	bl	80069e4 <vPortExitCritical>
}
 8007036:	bf00      	nop
 8007038:	3718      	adds	r7, #24
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
 800703e:	bf00      	nop
 8007040:	2000224c 	.word	0x2000224c
 8007044:	20002254 	.word	0x20002254
 8007048:	20002258 	.word	0x20002258
 800704c:	20002260 	.word	0x20002260
 8007050:	20002264 	.word	0x20002264
 8007054:	2000225c 	.word	0x2000225c

08007058 <__errno>:
 8007058:	4b01      	ldr	r3, [pc, #4]	; (8007060 <__errno+0x8>)
 800705a:	6818      	ldr	r0, [r3, #0]
 800705c:	4770      	bx	lr
 800705e:	bf00      	nop
 8007060:	20000010 	.word	0x20000010

08007064 <std>:
 8007064:	2300      	movs	r3, #0
 8007066:	b510      	push	{r4, lr}
 8007068:	4604      	mov	r4, r0
 800706a:	e9c0 3300 	strd	r3, r3, [r0]
 800706e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007072:	6083      	str	r3, [r0, #8]
 8007074:	8181      	strh	r1, [r0, #12]
 8007076:	6643      	str	r3, [r0, #100]	; 0x64
 8007078:	81c2      	strh	r2, [r0, #14]
 800707a:	6183      	str	r3, [r0, #24]
 800707c:	4619      	mov	r1, r3
 800707e:	2208      	movs	r2, #8
 8007080:	305c      	adds	r0, #92	; 0x5c
 8007082:	f000 f91a 	bl	80072ba <memset>
 8007086:	4b05      	ldr	r3, [pc, #20]	; (800709c <std+0x38>)
 8007088:	6263      	str	r3, [r4, #36]	; 0x24
 800708a:	4b05      	ldr	r3, [pc, #20]	; (80070a0 <std+0x3c>)
 800708c:	62a3      	str	r3, [r4, #40]	; 0x28
 800708e:	4b05      	ldr	r3, [pc, #20]	; (80070a4 <std+0x40>)
 8007090:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007092:	4b05      	ldr	r3, [pc, #20]	; (80070a8 <std+0x44>)
 8007094:	6224      	str	r4, [r4, #32]
 8007096:	6323      	str	r3, [r4, #48]	; 0x30
 8007098:	bd10      	pop	{r4, pc}
 800709a:	bf00      	nop
 800709c:	08007ed9 	.word	0x08007ed9
 80070a0:	08007efb 	.word	0x08007efb
 80070a4:	08007f33 	.word	0x08007f33
 80070a8:	08007f57 	.word	0x08007f57

080070ac <_cleanup_r>:
 80070ac:	4901      	ldr	r1, [pc, #4]	; (80070b4 <_cleanup_r+0x8>)
 80070ae:	f000 b8af 	b.w	8007210 <_fwalk_reent>
 80070b2:	bf00      	nop
 80070b4:	08008f29 	.word	0x08008f29

080070b8 <__sfmoreglue>:
 80070b8:	b570      	push	{r4, r5, r6, lr}
 80070ba:	2268      	movs	r2, #104	; 0x68
 80070bc:	1e4d      	subs	r5, r1, #1
 80070be:	4355      	muls	r5, r2
 80070c0:	460e      	mov	r6, r1
 80070c2:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80070c6:	f000 f921 	bl	800730c <_malloc_r>
 80070ca:	4604      	mov	r4, r0
 80070cc:	b140      	cbz	r0, 80070e0 <__sfmoreglue+0x28>
 80070ce:	2100      	movs	r1, #0
 80070d0:	e9c0 1600 	strd	r1, r6, [r0]
 80070d4:	300c      	adds	r0, #12
 80070d6:	60a0      	str	r0, [r4, #8]
 80070d8:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80070dc:	f000 f8ed 	bl	80072ba <memset>
 80070e0:	4620      	mov	r0, r4
 80070e2:	bd70      	pop	{r4, r5, r6, pc}

080070e4 <__sfp_lock_acquire>:
 80070e4:	4801      	ldr	r0, [pc, #4]	; (80070ec <__sfp_lock_acquire+0x8>)
 80070e6:	f000 b8d8 	b.w	800729a <__retarget_lock_acquire_recursive>
 80070ea:	bf00      	nop
 80070ec:	2000226d 	.word	0x2000226d

080070f0 <__sfp_lock_release>:
 80070f0:	4801      	ldr	r0, [pc, #4]	; (80070f8 <__sfp_lock_release+0x8>)
 80070f2:	f000 b8d3 	b.w	800729c <__retarget_lock_release_recursive>
 80070f6:	bf00      	nop
 80070f8:	2000226d 	.word	0x2000226d

080070fc <__sinit_lock_acquire>:
 80070fc:	4801      	ldr	r0, [pc, #4]	; (8007104 <__sinit_lock_acquire+0x8>)
 80070fe:	f000 b8cc 	b.w	800729a <__retarget_lock_acquire_recursive>
 8007102:	bf00      	nop
 8007104:	2000226e 	.word	0x2000226e

08007108 <__sinit_lock_release>:
 8007108:	4801      	ldr	r0, [pc, #4]	; (8007110 <__sinit_lock_release+0x8>)
 800710a:	f000 b8c7 	b.w	800729c <__retarget_lock_release_recursive>
 800710e:	bf00      	nop
 8007110:	2000226e 	.word	0x2000226e

08007114 <__sinit>:
 8007114:	b510      	push	{r4, lr}
 8007116:	4604      	mov	r4, r0
 8007118:	f7ff fff0 	bl	80070fc <__sinit_lock_acquire>
 800711c:	69a3      	ldr	r3, [r4, #24]
 800711e:	b11b      	cbz	r3, 8007128 <__sinit+0x14>
 8007120:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007124:	f7ff bff0 	b.w	8007108 <__sinit_lock_release>
 8007128:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800712c:	6523      	str	r3, [r4, #80]	; 0x50
 800712e:	4b13      	ldr	r3, [pc, #76]	; (800717c <__sinit+0x68>)
 8007130:	4a13      	ldr	r2, [pc, #76]	; (8007180 <__sinit+0x6c>)
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	62a2      	str	r2, [r4, #40]	; 0x28
 8007136:	42a3      	cmp	r3, r4
 8007138:	bf04      	itt	eq
 800713a:	2301      	moveq	r3, #1
 800713c:	61a3      	streq	r3, [r4, #24]
 800713e:	4620      	mov	r0, r4
 8007140:	f000 f820 	bl	8007184 <__sfp>
 8007144:	6060      	str	r0, [r4, #4]
 8007146:	4620      	mov	r0, r4
 8007148:	f000 f81c 	bl	8007184 <__sfp>
 800714c:	60a0      	str	r0, [r4, #8]
 800714e:	4620      	mov	r0, r4
 8007150:	f000 f818 	bl	8007184 <__sfp>
 8007154:	2200      	movs	r2, #0
 8007156:	60e0      	str	r0, [r4, #12]
 8007158:	2104      	movs	r1, #4
 800715a:	6860      	ldr	r0, [r4, #4]
 800715c:	f7ff ff82 	bl	8007064 <std>
 8007160:	68a0      	ldr	r0, [r4, #8]
 8007162:	2201      	movs	r2, #1
 8007164:	2109      	movs	r1, #9
 8007166:	f7ff ff7d 	bl	8007064 <std>
 800716a:	68e0      	ldr	r0, [r4, #12]
 800716c:	2202      	movs	r2, #2
 800716e:	2112      	movs	r1, #18
 8007170:	f7ff ff78 	bl	8007064 <std>
 8007174:	2301      	movs	r3, #1
 8007176:	61a3      	str	r3, [r4, #24]
 8007178:	e7d2      	b.n	8007120 <__sinit+0xc>
 800717a:	bf00      	nop
 800717c:	0800a058 	.word	0x0800a058
 8007180:	080070ad 	.word	0x080070ad

08007184 <__sfp>:
 8007184:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007186:	4607      	mov	r7, r0
 8007188:	f7ff ffac 	bl	80070e4 <__sfp_lock_acquire>
 800718c:	4b1e      	ldr	r3, [pc, #120]	; (8007208 <__sfp+0x84>)
 800718e:	681e      	ldr	r6, [r3, #0]
 8007190:	69b3      	ldr	r3, [r6, #24]
 8007192:	b913      	cbnz	r3, 800719a <__sfp+0x16>
 8007194:	4630      	mov	r0, r6
 8007196:	f7ff ffbd 	bl	8007114 <__sinit>
 800719a:	3648      	adds	r6, #72	; 0x48
 800719c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	d503      	bpl.n	80071ac <__sfp+0x28>
 80071a4:	6833      	ldr	r3, [r6, #0]
 80071a6:	b30b      	cbz	r3, 80071ec <__sfp+0x68>
 80071a8:	6836      	ldr	r6, [r6, #0]
 80071aa:	e7f7      	b.n	800719c <__sfp+0x18>
 80071ac:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80071b0:	b9d5      	cbnz	r5, 80071e8 <__sfp+0x64>
 80071b2:	4b16      	ldr	r3, [pc, #88]	; (800720c <__sfp+0x88>)
 80071b4:	60e3      	str	r3, [r4, #12]
 80071b6:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80071ba:	6665      	str	r5, [r4, #100]	; 0x64
 80071bc:	f000 f86c 	bl	8007298 <__retarget_lock_init_recursive>
 80071c0:	f7ff ff96 	bl	80070f0 <__sfp_lock_release>
 80071c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80071c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80071cc:	6025      	str	r5, [r4, #0]
 80071ce:	61a5      	str	r5, [r4, #24]
 80071d0:	2208      	movs	r2, #8
 80071d2:	4629      	mov	r1, r5
 80071d4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80071d8:	f000 f86f 	bl	80072ba <memset>
 80071dc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80071e0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80071e4:	4620      	mov	r0, r4
 80071e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80071e8:	3468      	adds	r4, #104	; 0x68
 80071ea:	e7d9      	b.n	80071a0 <__sfp+0x1c>
 80071ec:	2104      	movs	r1, #4
 80071ee:	4638      	mov	r0, r7
 80071f0:	f7ff ff62 	bl	80070b8 <__sfmoreglue>
 80071f4:	4604      	mov	r4, r0
 80071f6:	6030      	str	r0, [r6, #0]
 80071f8:	2800      	cmp	r0, #0
 80071fa:	d1d5      	bne.n	80071a8 <__sfp+0x24>
 80071fc:	f7ff ff78 	bl	80070f0 <__sfp_lock_release>
 8007200:	230c      	movs	r3, #12
 8007202:	603b      	str	r3, [r7, #0]
 8007204:	e7ee      	b.n	80071e4 <__sfp+0x60>
 8007206:	bf00      	nop
 8007208:	0800a058 	.word	0x0800a058
 800720c:	ffff0001 	.word	0xffff0001

08007210 <_fwalk_reent>:
 8007210:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007214:	4606      	mov	r6, r0
 8007216:	4688      	mov	r8, r1
 8007218:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800721c:	2700      	movs	r7, #0
 800721e:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007222:	f1b9 0901 	subs.w	r9, r9, #1
 8007226:	d505      	bpl.n	8007234 <_fwalk_reent+0x24>
 8007228:	6824      	ldr	r4, [r4, #0]
 800722a:	2c00      	cmp	r4, #0
 800722c:	d1f7      	bne.n	800721e <_fwalk_reent+0xe>
 800722e:	4638      	mov	r0, r7
 8007230:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007234:	89ab      	ldrh	r3, [r5, #12]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d907      	bls.n	800724a <_fwalk_reent+0x3a>
 800723a:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800723e:	3301      	adds	r3, #1
 8007240:	d003      	beq.n	800724a <_fwalk_reent+0x3a>
 8007242:	4629      	mov	r1, r5
 8007244:	4630      	mov	r0, r6
 8007246:	47c0      	blx	r8
 8007248:	4307      	orrs	r7, r0
 800724a:	3568      	adds	r5, #104	; 0x68
 800724c:	e7e9      	b.n	8007222 <_fwalk_reent+0x12>
	...

08007250 <__libc_init_array>:
 8007250:	b570      	push	{r4, r5, r6, lr}
 8007252:	4d0d      	ldr	r5, [pc, #52]	; (8007288 <__libc_init_array+0x38>)
 8007254:	4c0d      	ldr	r4, [pc, #52]	; (800728c <__libc_init_array+0x3c>)
 8007256:	1b64      	subs	r4, r4, r5
 8007258:	10a4      	asrs	r4, r4, #2
 800725a:	2600      	movs	r6, #0
 800725c:	42a6      	cmp	r6, r4
 800725e:	d109      	bne.n	8007274 <__libc_init_array+0x24>
 8007260:	4d0b      	ldr	r5, [pc, #44]	; (8007290 <__libc_init_array+0x40>)
 8007262:	4c0c      	ldr	r4, [pc, #48]	; (8007294 <__libc_init_array+0x44>)
 8007264:	f002 fd3a 	bl	8009cdc <_init>
 8007268:	1b64      	subs	r4, r4, r5
 800726a:	10a4      	asrs	r4, r4, #2
 800726c:	2600      	movs	r6, #0
 800726e:	42a6      	cmp	r6, r4
 8007270:	d105      	bne.n	800727e <__libc_init_array+0x2e>
 8007272:	bd70      	pop	{r4, r5, r6, pc}
 8007274:	f855 3b04 	ldr.w	r3, [r5], #4
 8007278:	4798      	blx	r3
 800727a:	3601      	adds	r6, #1
 800727c:	e7ee      	b.n	800725c <__libc_init_array+0xc>
 800727e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007282:	4798      	blx	r3
 8007284:	3601      	adds	r6, #1
 8007286:	e7f2      	b.n	800726e <__libc_init_array+0x1e>
 8007288:	0800a3dc 	.word	0x0800a3dc
 800728c:	0800a3dc 	.word	0x0800a3dc
 8007290:	0800a3dc 	.word	0x0800a3dc
 8007294:	0800a3e0 	.word	0x0800a3e0

08007298 <__retarget_lock_init_recursive>:
 8007298:	4770      	bx	lr

0800729a <__retarget_lock_acquire_recursive>:
 800729a:	4770      	bx	lr

0800729c <__retarget_lock_release_recursive>:
 800729c:	4770      	bx	lr

0800729e <memcpy>:
 800729e:	440a      	add	r2, r1
 80072a0:	4291      	cmp	r1, r2
 80072a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80072a6:	d100      	bne.n	80072aa <memcpy+0xc>
 80072a8:	4770      	bx	lr
 80072aa:	b510      	push	{r4, lr}
 80072ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80072b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80072b4:	4291      	cmp	r1, r2
 80072b6:	d1f9      	bne.n	80072ac <memcpy+0xe>
 80072b8:	bd10      	pop	{r4, pc}

080072ba <memset>:
 80072ba:	4402      	add	r2, r0
 80072bc:	4603      	mov	r3, r0
 80072be:	4293      	cmp	r3, r2
 80072c0:	d100      	bne.n	80072c4 <memset+0xa>
 80072c2:	4770      	bx	lr
 80072c4:	f803 1b01 	strb.w	r1, [r3], #1
 80072c8:	e7f9      	b.n	80072be <memset+0x4>
	...

080072cc <sbrk_aligned>:
 80072cc:	b570      	push	{r4, r5, r6, lr}
 80072ce:	4e0e      	ldr	r6, [pc, #56]	; (8007308 <sbrk_aligned+0x3c>)
 80072d0:	460c      	mov	r4, r1
 80072d2:	6831      	ldr	r1, [r6, #0]
 80072d4:	4605      	mov	r5, r0
 80072d6:	b911      	cbnz	r1, 80072de <sbrk_aligned+0x12>
 80072d8:	f000 fdee 	bl	8007eb8 <_sbrk_r>
 80072dc:	6030      	str	r0, [r6, #0]
 80072de:	4621      	mov	r1, r4
 80072e0:	4628      	mov	r0, r5
 80072e2:	f000 fde9 	bl	8007eb8 <_sbrk_r>
 80072e6:	1c43      	adds	r3, r0, #1
 80072e8:	d00a      	beq.n	8007300 <sbrk_aligned+0x34>
 80072ea:	1cc4      	adds	r4, r0, #3
 80072ec:	f024 0403 	bic.w	r4, r4, #3
 80072f0:	42a0      	cmp	r0, r4
 80072f2:	d007      	beq.n	8007304 <sbrk_aligned+0x38>
 80072f4:	1a21      	subs	r1, r4, r0
 80072f6:	4628      	mov	r0, r5
 80072f8:	f000 fdde 	bl	8007eb8 <_sbrk_r>
 80072fc:	3001      	adds	r0, #1
 80072fe:	d101      	bne.n	8007304 <sbrk_aligned+0x38>
 8007300:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007304:	4620      	mov	r0, r4
 8007306:	bd70      	pop	{r4, r5, r6, pc}
 8007308:	20002274 	.word	0x20002274

0800730c <_malloc_r>:
 800730c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007310:	1ccd      	adds	r5, r1, #3
 8007312:	f025 0503 	bic.w	r5, r5, #3
 8007316:	3508      	adds	r5, #8
 8007318:	2d0c      	cmp	r5, #12
 800731a:	bf38      	it	cc
 800731c:	250c      	movcc	r5, #12
 800731e:	2d00      	cmp	r5, #0
 8007320:	4607      	mov	r7, r0
 8007322:	db01      	blt.n	8007328 <_malloc_r+0x1c>
 8007324:	42a9      	cmp	r1, r5
 8007326:	d905      	bls.n	8007334 <_malloc_r+0x28>
 8007328:	230c      	movs	r3, #12
 800732a:	603b      	str	r3, [r7, #0]
 800732c:	2600      	movs	r6, #0
 800732e:	4630      	mov	r0, r6
 8007330:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007334:	4e2e      	ldr	r6, [pc, #184]	; (80073f0 <_malloc_r+0xe4>)
 8007336:	f001 feb7 	bl	80090a8 <__malloc_lock>
 800733a:	6833      	ldr	r3, [r6, #0]
 800733c:	461c      	mov	r4, r3
 800733e:	bb34      	cbnz	r4, 800738e <_malloc_r+0x82>
 8007340:	4629      	mov	r1, r5
 8007342:	4638      	mov	r0, r7
 8007344:	f7ff ffc2 	bl	80072cc <sbrk_aligned>
 8007348:	1c43      	adds	r3, r0, #1
 800734a:	4604      	mov	r4, r0
 800734c:	d14d      	bne.n	80073ea <_malloc_r+0xde>
 800734e:	6834      	ldr	r4, [r6, #0]
 8007350:	4626      	mov	r6, r4
 8007352:	2e00      	cmp	r6, #0
 8007354:	d140      	bne.n	80073d8 <_malloc_r+0xcc>
 8007356:	6823      	ldr	r3, [r4, #0]
 8007358:	4631      	mov	r1, r6
 800735a:	4638      	mov	r0, r7
 800735c:	eb04 0803 	add.w	r8, r4, r3
 8007360:	f000 fdaa 	bl	8007eb8 <_sbrk_r>
 8007364:	4580      	cmp	r8, r0
 8007366:	d13a      	bne.n	80073de <_malloc_r+0xd2>
 8007368:	6821      	ldr	r1, [r4, #0]
 800736a:	3503      	adds	r5, #3
 800736c:	1a6d      	subs	r5, r5, r1
 800736e:	f025 0503 	bic.w	r5, r5, #3
 8007372:	3508      	adds	r5, #8
 8007374:	2d0c      	cmp	r5, #12
 8007376:	bf38      	it	cc
 8007378:	250c      	movcc	r5, #12
 800737a:	4629      	mov	r1, r5
 800737c:	4638      	mov	r0, r7
 800737e:	f7ff ffa5 	bl	80072cc <sbrk_aligned>
 8007382:	3001      	adds	r0, #1
 8007384:	d02b      	beq.n	80073de <_malloc_r+0xd2>
 8007386:	6823      	ldr	r3, [r4, #0]
 8007388:	442b      	add	r3, r5
 800738a:	6023      	str	r3, [r4, #0]
 800738c:	e00e      	b.n	80073ac <_malloc_r+0xa0>
 800738e:	6822      	ldr	r2, [r4, #0]
 8007390:	1b52      	subs	r2, r2, r5
 8007392:	d41e      	bmi.n	80073d2 <_malloc_r+0xc6>
 8007394:	2a0b      	cmp	r2, #11
 8007396:	d916      	bls.n	80073c6 <_malloc_r+0xba>
 8007398:	1961      	adds	r1, r4, r5
 800739a:	42a3      	cmp	r3, r4
 800739c:	6025      	str	r5, [r4, #0]
 800739e:	bf18      	it	ne
 80073a0:	6059      	strne	r1, [r3, #4]
 80073a2:	6863      	ldr	r3, [r4, #4]
 80073a4:	bf08      	it	eq
 80073a6:	6031      	streq	r1, [r6, #0]
 80073a8:	5162      	str	r2, [r4, r5]
 80073aa:	604b      	str	r3, [r1, #4]
 80073ac:	4638      	mov	r0, r7
 80073ae:	f104 060b 	add.w	r6, r4, #11
 80073b2:	f001 fe7f 	bl	80090b4 <__malloc_unlock>
 80073b6:	f026 0607 	bic.w	r6, r6, #7
 80073ba:	1d23      	adds	r3, r4, #4
 80073bc:	1af2      	subs	r2, r6, r3
 80073be:	d0b6      	beq.n	800732e <_malloc_r+0x22>
 80073c0:	1b9b      	subs	r3, r3, r6
 80073c2:	50a3      	str	r3, [r4, r2]
 80073c4:	e7b3      	b.n	800732e <_malloc_r+0x22>
 80073c6:	6862      	ldr	r2, [r4, #4]
 80073c8:	42a3      	cmp	r3, r4
 80073ca:	bf0c      	ite	eq
 80073cc:	6032      	streq	r2, [r6, #0]
 80073ce:	605a      	strne	r2, [r3, #4]
 80073d0:	e7ec      	b.n	80073ac <_malloc_r+0xa0>
 80073d2:	4623      	mov	r3, r4
 80073d4:	6864      	ldr	r4, [r4, #4]
 80073d6:	e7b2      	b.n	800733e <_malloc_r+0x32>
 80073d8:	4634      	mov	r4, r6
 80073da:	6876      	ldr	r6, [r6, #4]
 80073dc:	e7b9      	b.n	8007352 <_malloc_r+0x46>
 80073de:	230c      	movs	r3, #12
 80073e0:	603b      	str	r3, [r7, #0]
 80073e2:	4638      	mov	r0, r7
 80073e4:	f001 fe66 	bl	80090b4 <__malloc_unlock>
 80073e8:	e7a1      	b.n	800732e <_malloc_r+0x22>
 80073ea:	6025      	str	r5, [r4, #0]
 80073ec:	e7de      	b.n	80073ac <_malloc_r+0xa0>
 80073ee:	bf00      	nop
 80073f0:	20002270 	.word	0x20002270

080073f4 <__cvt>:
 80073f4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80073f8:	ec55 4b10 	vmov	r4, r5, d0
 80073fc:	2d00      	cmp	r5, #0
 80073fe:	460e      	mov	r6, r1
 8007400:	4619      	mov	r1, r3
 8007402:	462b      	mov	r3, r5
 8007404:	bfbb      	ittet	lt
 8007406:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800740a:	461d      	movlt	r5, r3
 800740c:	2300      	movge	r3, #0
 800740e:	232d      	movlt	r3, #45	; 0x2d
 8007410:	700b      	strb	r3, [r1, #0]
 8007412:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007414:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007418:	4691      	mov	r9, r2
 800741a:	f023 0820 	bic.w	r8, r3, #32
 800741e:	bfbc      	itt	lt
 8007420:	4622      	movlt	r2, r4
 8007422:	4614      	movlt	r4, r2
 8007424:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007428:	d005      	beq.n	8007436 <__cvt+0x42>
 800742a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800742e:	d100      	bne.n	8007432 <__cvt+0x3e>
 8007430:	3601      	adds	r6, #1
 8007432:	2102      	movs	r1, #2
 8007434:	e000      	b.n	8007438 <__cvt+0x44>
 8007436:	2103      	movs	r1, #3
 8007438:	ab03      	add	r3, sp, #12
 800743a:	9301      	str	r3, [sp, #4]
 800743c:	ab02      	add	r3, sp, #8
 800743e:	9300      	str	r3, [sp, #0]
 8007440:	ec45 4b10 	vmov	d0, r4, r5
 8007444:	4653      	mov	r3, sl
 8007446:	4632      	mov	r2, r6
 8007448:	f000 fefa 	bl	8008240 <_dtoa_r>
 800744c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007450:	4607      	mov	r7, r0
 8007452:	d102      	bne.n	800745a <__cvt+0x66>
 8007454:	f019 0f01 	tst.w	r9, #1
 8007458:	d022      	beq.n	80074a0 <__cvt+0xac>
 800745a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800745e:	eb07 0906 	add.w	r9, r7, r6
 8007462:	d110      	bne.n	8007486 <__cvt+0x92>
 8007464:	783b      	ldrb	r3, [r7, #0]
 8007466:	2b30      	cmp	r3, #48	; 0x30
 8007468:	d10a      	bne.n	8007480 <__cvt+0x8c>
 800746a:	2200      	movs	r2, #0
 800746c:	2300      	movs	r3, #0
 800746e:	4620      	mov	r0, r4
 8007470:	4629      	mov	r1, r5
 8007472:	f7f9 fb29 	bl	8000ac8 <__aeabi_dcmpeq>
 8007476:	b918      	cbnz	r0, 8007480 <__cvt+0x8c>
 8007478:	f1c6 0601 	rsb	r6, r6, #1
 800747c:	f8ca 6000 	str.w	r6, [sl]
 8007480:	f8da 3000 	ldr.w	r3, [sl]
 8007484:	4499      	add	r9, r3
 8007486:	2200      	movs	r2, #0
 8007488:	2300      	movs	r3, #0
 800748a:	4620      	mov	r0, r4
 800748c:	4629      	mov	r1, r5
 800748e:	f7f9 fb1b 	bl	8000ac8 <__aeabi_dcmpeq>
 8007492:	b108      	cbz	r0, 8007498 <__cvt+0xa4>
 8007494:	f8cd 900c 	str.w	r9, [sp, #12]
 8007498:	2230      	movs	r2, #48	; 0x30
 800749a:	9b03      	ldr	r3, [sp, #12]
 800749c:	454b      	cmp	r3, r9
 800749e:	d307      	bcc.n	80074b0 <__cvt+0xbc>
 80074a0:	9b03      	ldr	r3, [sp, #12]
 80074a2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074a4:	1bdb      	subs	r3, r3, r7
 80074a6:	4638      	mov	r0, r7
 80074a8:	6013      	str	r3, [r2, #0]
 80074aa:	b004      	add	sp, #16
 80074ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80074b0:	1c59      	adds	r1, r3, #1
 80074b2:	9103      	str	r1, [sp, #12]
 80074b4:	701a      	strb	r2, [r3, #0]
 80074b6:	e7f0      	b.n	800749a <__cvt+0xa6>

080074b8 <__exponent>:
 80074b8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074ba:	4603      	mov	r3, r0
 80074bc:	2900      	cmp	r1, #0
 80074be:	bfb8      	it	lt
 80074c0:	4249      	neglt	r1, r1
 80074c2:	f803 2b02 	strb.w	r2, [r3], #2
 80074c6:	bfb4      	ite	lt
 80074c8:	222d      	movlt	r2, #45	; 0x2d
 80074ca:	222b      	movge	r2, #43	; 0x2b
 80074cc:	2909      	cmp	r1, #9
 80074ce:	7042      	strb	r2, [r0, #1]
 80074d0:	dd2a      	ble.n	8007528 <__exponent+0x70>
 80074d2:	f10d 0407 	add.w	r4, sp, #7
 80074d6:	46a4      	mov	ip, r4
 80074d8:	270a      	movs	r7, #10
 80074da:	46a6      	mov	lr, r4
 80074dc:	460a      	mov	r2, r1
 80074de:	fb91 f6f7 	sdiv	r6, r1, r7
 80074e2:	fb07 1516 	mls	r5, r7, r6, r1
 80074e6:	3530      	adds	r5, #48	; 0x30
 80074e8:	2a63      	cmp	r2, #99	; 0x63
 80074ea:	f104 34ff 	add.w	r4, r4, #4294967295	; 0xffffffff
 80074ee:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80074f2:	4631      	mov	r1, r6
 80074f4:	dcf1      	bgt.n	80074da <__exponent+0x22>
 80074f6:	3130      	adds	r1, #48	; 0x30
 80074f8:	f1ae 0502 	sub.w	r5, lr, #2
 80074fc:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007500:	1c44      	adds	r4, r0, #1
 8007502:	4629      	mov	r1, r5
 8007504:	4561      	cmp	r1, ip
 8007506:	d30a      	bcc.n	800751e <__exponent+0x66>
 8007508:	f10d 0209 	add.w	r2, sp, #9
 800750c:	eba2 020e 	sub.w	r2, r2, lr
 8007510:	4565      	cmp	r5, ip
 8007512:	bf88      	it	hi
 8007514:	2200      	movhi	r2, #0
 8007516:	4413      	add	r3, r2
 8007518:	1a18      	subs	r0, r3, r0
 800751a:	b003      	add	sp, #12
 800751c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800751e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007522:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007526:	e7ed      	b.n	8007504 <__exponent+0x4c>
 8007528:	2330      	movs	r3, #48	; 0x30
 800752a:	3130      	adds	r1, #48	; 0x30
 800752c:	7083      	strb	r3, [r0, #2]
 800752e:	70c1      	strb	r1, [r0, #3]
 8007530:	1d03      	adds	r3, r0, #4
 8007532:	e7f1      	b.n	8007518 <__exponent+0x60>

08007534 <_printf_float>:
 8007534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007538:	ed2d 8b02 	vpush	{d8}
 800753c:	b08d      	sub	sp, #52	; 0x34
 800753e:	460c      	mov	r4, r1
 8007540:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007544:	4616      	mov	r6, r2
 8007546:	461f      	mov	r7, r3
 8007548:	4605      	mov	r5, r0
 800754a:	f001 fd29 	bl	8008fa0 <_localeconv_r>
 800754e:	f8d0 a000 	ldr.w	sl, [r0]
 8007552:	4650      	mov	r0, sl
 8007554:	f7f8 fe3c 	bl	80001d0 <strlen>
 8007558:	2300      	movs	r3, #0
 800755a:	930a      	str	r3, [sp, #40]	; 0x28
 800755c:	6823      	ldr	r3, [r4, #0]
 800755e:	9305      	str	r3, [sp, #20]
 8007560:	f8d8 3000 	ldr.w	r3, [r8]
 8007564:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007568:	3307      	adds	r3, #7
 800756a:	f023 0307 	bic.w	r3, r3, #7
 800756e:	f103 0208 	add.w	r2, r3, #8
 8007572:	f8c8 2000 	str.w	r2, [r8]
 8007576:	e9d3 2300 	ldrd	r2, r3, [r3]
 800757a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800757e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007582:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007586:	9307      	str	r3, [sp, #28]
 8007588:	f8cd 8018 	str.w	r8, [sp, #24]
 800758c:	ee08 0a10 	vmov	s16, r0
 8007590:	4b9f      	ldr	r3, [pc, #636]	; (8007810 <_printf_float+0x2dc>)
 8007592:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007596:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800759a:	f7f9 fac7 	bl	8000b2c <__aeabi_dcmpun>
 800759e:	bb88      	cbnz	r0, 8007604 <_printf_float+0xd0>
 80075a0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075a4:	4b9a      	ldr	r3, [pc, #616]	; (8007810 <_printf_float+0x2dc>)
 80075a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80075aa:	f7f9 faa1 	bl	8000af0 <__aeabi_dcmple>
 80075ae:	bb48      	cbnz	r0, 8007604 <_printf_float+0xd0>
 80075b0:	2200      	movs	r2, #0
 80075b2:	2300      	movs	r3, #0
 80075b4:	4640      	mov	r0, r8
 80075b6:	4649      	mov	r1, r9
 80075b8:	f7f9 fa90 	bl	8000adc <__aeabi_dcmplt>
 80075bc:	b110      	cbz	r0, 80075c4 <_printf_float+0x90>
 80075be:	232d      	movs	r3, #45	; 0x2d
 80075c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075c4:	4b93      	ldr	r3, [pc, #588]	; (8007814 <_printf_float+0x2e0>)
 80075c6:	4894      	ldr	r0, [pc, #592]	; (8007818 <_printf_float+0x2e4>)
 80075c8:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 80075cc:	bf94      	ite	ls
 80075ce:	4698      	movls	r8, r3
 80075d0:	4680      	movhi	r8, r0
 80075d2:	2303      	movs	r3, #3
 80075d4:	6123      	str	r3, [r4, #16]
 80075d6:	9b05      	ldr	r3, [sp, #20]
 80075d8:	f023 0204 	bic.w	r2, r3, #4
 80075dc:	6022      	str	r2, [r4, #0]
 80075de:	f04f 0900 	mov.w	r9, #0
 80075e2:	9700      	str	r7, [sp, #0]
 80075e4:	4633      	mov	r3, r6
 80075e6:	aa0b      	add	r2, sp, #44	; 0x2c
 80075e8:	4621      	mov	r1, r4
 80075ea:	4628      	mov	r0, r5
 80075ec:	f000 f9d8 	bl	80079a0 <_printf_common>
 80075f0:	3001      	adds	r0, #1
 80075f2:	f040 8090 	bne.w	8007716 <_printf_float+0x1e2>
 80075f6:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075fa:	b00d      	add	sp, #52	; 0x34
 80075fc:	ecbd 8b02 	vpop	{d8}
 8007600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007604:	4642      	mov	r2, r8
 8007606:	464b      	mov	r3, r9
 8007608:	4640      	mov	r0, r8
 800760a:	4649      	mov	r1, r9
 800760c:	f7f9 fa8e 	bl	8000b2c <__aeabi_dcmpun>
 8007610:	b140      	cbz	r0, 8007624 <_printf_float+0xf0>
 8007612:	464b      	mov	r3, r9
 8007614:	2b00      	cmp	r3, #0
 8007616:	bfbc      	itt	lt
 8007618:	232d      	movlt	r3, #45	; 0x2d
 800761a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800761e:	487f      	ldr	r0, [pc, #508]	; (800781c <_printf_float+0x2e8>)
 8007620:	4b7f      	ldr	r3, [pc, #508]	; (8007820 <_printf_float+0x2ec>)
 8007622:	e7d1      	b.n	80075c8 <_printf_float+0x94>
 8007624:	6863      	ldr	r3, [r4, #4]
 8007626:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800762a:	9206      	str	r2, [sp, #24]
 800762c:	1c5a      	adds	r2, r3, #1
 800762e:	d13f      	bne.n	80076b0 <_printf_float+0x17c>
 8007630:	2306      	movs	r3, #6
 8007632:	6063      	str	r3, [r4, #4]
 8007634:	9b05      	ldr	r3, [sp, #20]
 8007636:	6861      	ldr	r1, [r4, #4]
 8007638:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800763c:	2300      	movs	r3, #0
 800763e:	9303      	str	r3, [sp, #12]
 8007640:	ab0a      	add	r3, sp, #40	; 0x28
 8007642:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007646:	ab09      	add	r3, sp, #36	; 0x24
 8007648:	ec49 8b10 	vmov	d0, r8, r9
 800764c:	9300      	str	r3, [sp, #0]
 800764e:	6022      	str	r2, [r4, #0]
 8007650:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007654:	4628      	mov	r0, r5
 8007656:	f7ff fecd 	bl	80073f4 <__cvt>
 800765a:	9b06      	ldr	r3, [sp, #24]
 800765c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800765e:	2b47      	cmp	r3, #71	; 0x47
 8007660:	4680      	mov	r8, r0
 8007662:	d108      	bne.n	8007676 <_printf_float+0x142>
 8007664:	1cc8      	adds	r0, r1, #3
 8007666:	db02      	blt.n	800766e <_printf_float+0x13a>
 8007668:	6863      	ldr	r3, [r4, #4]
 800766a:	4299      	cmp	r1, r3
 800766c:	dd41      	ble.n	80076f2 <_printf_float+0x1be>
 800766e:	f1ab 0b02 	sub.w	fp, fp, #2
 8007672:	fa5f fb8b 	uxtb.w	fp, fp
 8007676:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800767a:	d820      	bhi.n	80076be <_printf_float+0x18a>
 800767c:	3901      	subs	r1, #1
 800767e:	465a      	mov	r2, fp
 8007680:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007684:	9109      	str	r1, [sp, #36]	; 0x24
 8007686:	f7ff ff17 	bl	80074b8 <__exponent>
 800768a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800768c:	1813      	adds	r3, r2, r0
 800768e:	2a01      	cmp	r2, #1
 8007690:	4681      	mov	r9, r0
 8007692:	6123      	str	r3, [r4, #16]
 8007694:	dc02      	bgt.n	800769c <_printf_float+0x168>
 8007696:	6822      	ldr	r2, [r4, #0]
 8007698:	07d2      	lsls	r2, r2, #31
 800769a:	d501      	bpl.n	80076a0 <_printf_float+0x16c>
 800769c:	3301      	adds	r3, #1
 800769e:	6123      	str	r3, [r4, #16]
 80076a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d09c      	beq.n	80075e2 <_printf_float+0xae>
 80076a8:	232d      	movs	r3, #45	; 0x2d
 80076aa:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ae:	e798      	b.n	80075e2 <_printf_float+0xae>
 80076b0:	9a06      	ldr	r2, [sp, #24]
 80076b2:	2a47      	cmp	r2, #71	; 0x47
 80076b4:	d1be      	bne.n	8007634 <_printf_float+0x100>
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d1bc      	bne.n	8007634 <_printf_float+0x100>
 80076ba:	2301      	movs	r3, #1
 80076bc:	e7b9      	b.n	8007632 <_printf_float+0xfe>
 80076be:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 80076c2:	d118      	bne.n	80076f6 <_printf_float+0x1c2>
 80076c4:	2900      	cmp	r1, #0
 80076c6:	6863      	ldr	r3, [r4, #4]
 80076c8:	dd0b      	ble.n	80076e2 <_printf_float+0x1ae>
 80076ca:	6121      	str	r1, [r4, #16]
 80076cc:	b913      	cbnz	r3, 80076d4 <_printf_float+0x1a0>
 80076ce:	6822      	ldr	r2, [r4, #0]
 80076d0:	07d0      	lsls	r0, r2, #31
 80076d2:	d502      	bpl.n	80076da <_printf_float+0x1a6>
 80076d4:	3301      	adds	r3, #1
 80076d6:	440b      	add	r3, r1
 80076d8:	6123      	str	r3, [r4, #16]
 80076da:	65a1      	str	r1, [r4, #88]	; 0x58
 80076dc:	f04f 0900 	mov.w	r9, #0
 80076e0:	e7de      	b.n	80076a0 <_printf_float+0x16c>
 80076e2:	b913      	cbnz	r3, 80076ea <_printf_float+0x1b6>
 80076e4:	6822      	ldr	r2, [r4, #0]
 80076e6:	07d2      	lsls	r2, r2, #31
 80076e8:	d501      	bpl.n	80076ee <_printf_float+0x1ba>
 80076ea:	3302      	adds	r3, #2
 80076ec:	e7f4      	b.n	80076d8 <_printf_float+0x1a4>
 80076ee:	2301      	movs	r3, #1
 80076f0:	e7f2      	b.n	80076d8 <_printf_float+0x1a4>
 80076f2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 80076f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80076f8:	4299      	cmp	r1, r3
 80076fa:	db05      	blt.n	8007708 <_printf_float+0x1d4>
 80076fc:	6823      	ldr	r3, [r4, #0]
 80076fe:	6121      	str	r1, [r4, #16]
 8007700:	07d8      	lsls	r0, r3, #31
 8007702:	d5ea      	bpl.n	80076da <_printf_float+0x1a6>
 8007704:	1c4b      	adds	r3, r1, #1
 8007706:	e7e7      	b.n	80076d8 <_printf_float+0x1a4>
 8007708:	2900      	cmp	r1, #0
 800770a:	bfd4      	ite	le
 800770c:	f1c1 0202 	rsble	r2, r1, #2
 8007710:	2201      	movgt	r2, #1
 8007712:	4413      	add	r3, r2
 8007714:	e7e0      	b.n	80076d8 <_printf_float+0x1a4>
 8007716:	6823      	ldr	r3, [r4, #0]
 8007718:	055a      	lsls	r2, r3, #21
 800771a:	d407      	bmi.n	800772c <_printf_float+0x1f8>
 800771c:	6923      	ldr	r3, [r4, #16]
 800771e:	4642      	mov	r2, r8
 8007720:	4631      	mov	r1, r6
 8007722:	4628      	mov	r0, r5
 8007724:	47b8      	blx	r7
 8007726:	3001      	adds	r0, #1
 8007728:	d12c      	bne.n	8007784 <_printf_float+0x250>
 800772a:	e764      	b.n	80075f6 <_printf_float+0xc2>
 800772c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007730:	f240 80e0 	bls.w	80078f4 <_printf_float+0x3c0>
 8007734:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007738:	2200      	movs	r2, #0
 800773a:	2300      	movs	r3, #0
 800773c:	f7f9 f9c4 	bl	8000ac8 <__aeabi_dcmpeq>
 8007740:	2800      	cmp	r0, #0
 8007742:	d034      	beq.n	80077ae <_printf_float+0x27a>
 8007744:	4a37      	ldr	r2, [pc, #220]	; (8007824 <_printf_float+0x2f0>)
 8007746:	2301      	movs	r3, #1
 8007748:	4631      	mov	r1, r6
 800774a:	4628      	mov	r0, r5
 800774c:	47b8      	blx	r7
 800774e:	3001      	adds	r0, #1
 8007750:	f43f af51 	beq.w	80075f6 <_printf_float+0xc2>
 8007754:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007758:	429a      	cmp	r2, r3
 800775a:	db02      	blt.n	8007762 <_printf_float+0x22e>
 800775c:	6823      	ldr	r3, [r4, #0]
 800775e:	07d8      	lsls	r0, r3, #31
 8007760:	d510      	bpl.n	8007784 <_printf_float+0x250>
 8007762:	ee18 3a10 	vmov	r3, s16
 8007766:	4652      	mov	r2, sl
 8007768:	4631      	mov	r1, r6
 800776a:	4628      	mov	r0, r5
 800776c:	47b8      	blx	r7
 800776e:	3001      	adds	r0, #1
 8007770:	f43f af41 	beq.w	80075f6 <_printf_float+0xc2>
 8007774:	f04f 0800 	mov.w	r8, #0
 8007778:	f104 091a 	add.w	r9, r4, #26
 800777c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800777e:	3b01      	subs	r3, #1
 8007780:	4543      	cmp	r3, r8
 8007782:	dc09      	bgt.n	8007798 <_printf_float+0x264>
 8007784:	6823      	ldr	r3, [r4, #0]
 8007786:	079b      	lsls	r3, r3, #30
 8007788:	f100 8105 	bmi.w	8007996 <_printf_float+0x462>
 800778c:	68e0      	ldr	r0, [r4, #12]
 800778e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007790:	4298      	cmp	r0, r3
 8007792:	bfb8      	it	lt
 8007794:	4618      	movlt	r0, r3
 8007796:	e730      	b.n	80075fa <_printf_float+0xc6>
 8007798:	2301      	movs	r3, #1
 800779a:	464a      	mov	r2, r9
 800779c:	4631      	mov	r1, r6
 800779e:	4628      	mov	r0, r5
 80077a0:	47b8      	blx	r7
 80077a2:	3001      	adds	r0, #1
 80077a4:	f43f af27 	beq.w	80075f6 <_printf_float+0xc2>
 80077a8:	f108 0801 	add.w	r8, r8, #1
 80077ac:	e7e6      	b.n	800777c <_printf_float+0x248>
 80077ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	dc39      	bgt.n	8007828 <_printf_float+0x2f4>
 80077b4:	4a1b      	ldr	r2, [pc, #108]	; (8007824 <_printf_float+0x2f0>)
 80077b6:	2301      	movs	r3, #1
 80077b8:	4631      	mov	r1, r6
 80077ba:	4628      	mov	r0, r5
 80077bc:	47b8      	blx	r7
 80077be:	3001      	adds	r0, #1
 80077c0:	f43f af19 	beq.w	80075f6 <_printf_float+0xc2>
 80077c4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80077c8:	4313      	orrs	r3, r2
 80077ca:	d102      	bne.n	80077d2 <_printf_float+0x29e>
 80077cc:	6823      	ldr	r3, [r4, #0]
 80077ce:	07d9      	lsls	r1, r3, #31
 80077d0:	d5d8      	bpl.n	8007784 <_printf_float+0x250>
 80077d2:	ee18 3a10 	vmov	r3, s16
 80077d6:	4652      	mov	r2, sl
 80077d8:	4631      	mov	r1, r6
 80077da:	4628      	mov	r0, r5
 80077dc:	47b8      	blx	r7
 80077de:	3001      	adds	r0, #1
 80077e0:	f43f af09 	beq.w	80075f6 <_printf_float+0xc2>
 80077e4:	f04f 0900 	mov.w	r9, #0
 80077e8:	f104 0a1a 	add.w	sl, r4, #26
 80077ec:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ee:	425b      	negs	r3, r3
 80077f0:	454b      	cmp	r3, r9
 80077f2:	dc01      	bgt.n	80077f8 <_printf_float+0x2c4>
 80077f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077f6:	e792      	b.n	800771e <_printf_float+0x1ea>
 80077f8:	2301      	movs	r3, #1
 80077fa:	4652      	mov	r2, sl
 80077fc:	4631      	mov	r1, r6
 80077fe:	4628      	mov	r0, r5
 8007800:	47b8      	blx	r7
 8007802:	3001      	adds	r0, #1
 8007804:	f43f aef7 	beq.w	80075f6 <_printf_float+0xc2>
 8007808:	f109 0901 	add.w	r9, r9, #1
 800780c:	e7ee      	b.n	80077ec <_printf_float+0x2b8>
 800780e:	bf00      	nop
 8007810:	7fefffff 	.word	0x7fefffff
 8007814:	0800a05c 	.word	0x0800a05c
 8007818:	0800a060 	.word	0x0800a060
 800781c:	0800a068 	.word	0x0800a068
 8007820:	0800a064 	.word	0x0800a064
 8007824:	0800a06c 	.word	0x0800a06c
 8007828:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800782a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800782c:	429a      	cmp	r2, r3
 800782e:	bfa8      	it	ge
 8007830:	461a      	movge	r2, r3
 8007832:	2a00      	cmp	r2, #0
 8007834:	4691      	mov	r9, r2
 8007836:	dc37      	bgt.n	80078a8 <_printf_float+0x374>
 8007838:	f04f 0b00 	mov.w	fp, #0
 800783c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007840:	f104 021a 	add.w	r2, r4, #26
 8007844:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007846:	9305      	str	r3, [sp, #20]
 8007848:	eba3 0309 	sub.w	r3, r3, r9
 800784c:	455b      	cmp	r3, fp
 800784e:	dc33      	bgt.n	80078b8 <_printf_float+0x384>
 8007850:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007854:	429a      	cmp	r2, r3
 8007856:	db3b      	blt.n	80078d0 <_printf_float+0x39c>
 8007858:	6823      	ldr	r3, [r4, #0]
 800785a:	07da      	lsls	r2, r3, #31
 800785c:	d438      	bmi.n	80078d0 <_printf_float+0x39c>
 800785e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007860:	9a05      	ldr	r2, [sp, #20]
 8007862:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007864:	1a9a      	subs	r2, r3, r2
 8007866:	eba3 0901 	sub.w	r9, r3, r1
 800786a:	4591      	cmp	r9, r2
 800786c:	bfa8      	it	ge
 800786e:	4691      	movge	r9, r2
 8007870:	f1b9 0f00 	cmp.w	r9, #0
 8007874:	dc35      	bgt.n	80078e2 <_printf_float+0x3ae>
 8007876:	f04f 0800 	mov.w	r8, #0
 800787a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800787e:	f104 0a1a 	add.w	sl, r4, #26
 8007882:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007886:	1a9b      	subs	r3, r3, r2
 8007888:	eba3 0309 	sub.w	r3, r3, r9
 800788c:	4543      	cmp	r3, r8
 800788e:	f77f af79 	ble.w	8007784 <_printf_float+0x250>
 8007892:	2301      	movs	r3, #1
 8007894:	4652      	mov	r2, sl
 8007896:	4631      	mov	r1, r6
 8007898:	4628      	mov	r0, r5
 800789a:	47b8      	blx	r7
 800789c:	3001      	adds	r0, #1
 800789e:	f43f aeaa 	beq.w	80075f6 <_printf_float+0xc2>
 80078a2:	f108 0801 	add.w	r8, r8, #1
 80078a6:	e7ec      	b.n	8007882 <_printf_float+0x34e>
 80078a8:	4613      	mov	r3, r2
 80078aa:	4631      	mov	r1, r6
 80078ac:	4642      	mov	r2, r8
 80078ae:	4628      	mov	r0, r5
 80078b0:	47b8      	blx	r7
 80078b2:	3001      	adds	r0, #1
 80078b4:	d1c0      	bne.n	8007838 <_printf_float+0x304>
 80078b6:	e69e      	b.n	80075f6 <_printf_float+0xc2>
 80078b8:	2301      	movs	r3, #1
 80078ba:	4631      	mov	r1, r6
 80078bc:	4628      	mov	r0, r5
 80078be:	9205      	str	r2, [sp, #20]
 80078c0:	47b8      	blx	r7
 80078c2:	3001      	adds	r0, #1
 80078c4:	f43f ae97 	beq.w	80075f6 <_printf_float+0xc2>
 80078c8:	9a05      	ldr	r2, [sp, #20]
 80078ca:	f10b 0b01 	add.w	fp, fp, #1
 80078ce:	e7b9      	b.n	8007844 <_printf_float+0x310>
 80078d0:	ee18 3a10 	vmov	r3, s16
 80078d4:	4652      	mov	r2, sl
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	d1be      	bne.n	800785e <_printf_float+0x32a>
 80078e0:	e689      	b.n	80075f6 <_printf_float+0xc2>
 80078e2:	9a05      	ldr	r2, [sp, #20]
 80078e4:	464b      	mov	r3, r9
 80078e6:	4442      	add	r2, r8
 80078e8:	4631      	mov	r1, r6
 80078ea:	4628      	mov	r0, r5
 80078ec:	47b8      	blx	r7
 80078ee:	3001      	adds	r0, #1
 80078f0:	d1c1      	bne.n	8007876 <_printf_float+0x342>
 80078f2:	e680      	b.n	80075f6 <_printf_float+0xc2>
 80078f4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078f6:	2a01      	cmp	r2, #1
 80078f8:	dc01      	bgt.n	80078fe <_printf_float+0x3ca>
 80078fa:	07db      	lsls	r3, r3, #31
 80078fc:	d538      	bpl.n	8007970 <_printf_float+0x43c>
 80078fe:	2301      	movs	r3, #1
 8007900:	4642      	mov	r2, r8
 8007902:	4631      	mov	r1, r6
 8007904:	4628      	mov	r0, r5
 8007906:	47b8      	blx	r7
 8007908:	3001      	adds	r0, #1
 800790a:	f43f ae74 	beq.w	80075f6 <_printf_float+0xc2>
 800790e:	ee18 3a10 	vmov	r3, s16
 8007912:	4652      	mov	r2, sl
 8007914:	4631      	mov	r1, r6
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f43f ae6b 	beq.w	80075f6 <_printf_float+0xc2>
 8007920:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007924:	2200      	movs	r2, #0
 8007926:	2300      	movs	r3, #0
 8007928:	f7f9 f8ce 	bl	8000ac8 <__aeabi_dcmpeq>
 800792c:	b9d8      	cbnz	r0, 8007966 <_printf_float+0x432>
 800792e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007930:	f108 0201 	add.w	r2, r8, #1
 8007934:	3b01      	subs	r3, #1
 8007936:	4631      	mov	r1, r6
 8007938:	4628      	mov	r0, r5
 800793a:	47b8      	blx	r7
 800793c:	3001      	adds	r0, #1
 800793e:	d10e      	bne.n	800795e <_printf_float+0x42a>
 8007940:	e659      	b.n	80075f6 <_printf_float+0xc2>
 8007942:	2301      	movs	r3, #1
 8007944:	4652      	mov	r2, sl
 8007946:	4631      	mov	r1, r6
 8007948:	4628      	mov	r0, r5
 800794a:	47b8      	blx	r7
 800794c:	3001      	adds	r0, #1
 800794e:	f43f ae52 	beq.w	80075f6 <_printf_float+0xc2>
 8007952:	f108 0801 	add.w	r8, r8, #1
 8007956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007958:	3b01      	subs	r3, #1
 800795a:	4543      	cmp	r3, r8
 800795c:	dcf1      	bgt.n	8007942 <_printf_float+0x40e>
 800795e:	464b      	mov	r3, r9
 8007960:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007964:	e6dc      	b.n	8007720 <_printf_float+0x1ec>
 8007966:	f04f 0800 	mov.w	r8, #0
 800796a:	f104 0a1a 	add.w	sl, r4, #26
 800796e:	e7f2      	b.n	8007956 <_printf_float+0x422>
 8007970:	2301      	movs	r3, #1
 8007972:	4642      	mov	r2, r8
 8007974:	e7df      	b.n	8007936 <_printf_float+0x402>
 8007976:	2301      	movs	r3, #1
 8007978:	464a      	mov	r2, r9
 800797a:	4631      	mov	r1, r6
 800797c:	4628      	mov	r0, r5
 800797e:	47b8      	blx	r7
 8007980:	3001      	adds	r0, #1
 8007982:	f43f ae38 	beq.w	80075f6 <_printf_float+0xc2>
 8007986:	f108 0801 	add.w	r8, r8, #1
 800798a:	68e3      	ldr	r3, [r4, #12]
 800798c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800798e:	1a5b      	subs	r3, r3, r1
 8007990:	4543      	cmp	r3, r8
 8007992:	dcf0      	bgt.n	8007976 <_printf_float+0x442>
 8007994:	e6fa      	b.n	800778c <_printf_float+0x258>
 8007996:	f04f 0800 	mov.w	r8, #0
 800799a:	f104 0919 	add.w	r9, r4, #25
 800799e:	e7f4      	b.n	800798a <_printf_float+0x456>

080079a0 <_printf_common>:
 80079a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079a4:	4616      	mov	r6, r2
 80079a6:	4699      	mov	r9, r3
 80079a8:	688a      	ldr	r2, [r1, #8]
 80079aa:	690b      	ldr	r3, [r1, #16]
 80079ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079b0:	4293      	cmp	r3, r2
 80079b2:	bfb8      	it	lt
 80079b4:	4613      	movlt	r3, r2
 80079b6:	6033      	str	r3, [r6, #0]
 80079b8:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079bc:	4607      	mov	r7, r0
 80079be:	460c      	mov	r4, r1
 80079c0:	b10a      	cbz	r2, 80079c6 <_printf_common+0x26>
 80079c2:	3301      	adds	r3, #1
 80079c4:	6033      	str	r3, [r6, #0]
 80079c6:	6823      	ldr	r3, [r4, #0]
 80079c8:	0699      	lsls	r1, r3, #26
 80079ca:	bf42      	ittt	mi
 80079cc:	6833      	ldrmi	r3, [r6, #0]
 80079ce:	3302      	addmi	r3, #2
 80079d0:	6033      	strmi	r3, [r6, #0]
 80079d2:	6825      	ldr	r5, [r4, #0]
 80079d4:	f015 0506 	ands.w	r5, r5, #6
 80079d8:	d106      	bne.n	80079e8 <_printf_common+0x48>
 80079da:	f104 0a19 	add.w	sl, r4, #25
 80079de:	68e3      	ldr	r3, [r4, #12]
 80079e0:	6832      	ldr	r2, [r6, #0]
 80079e2:	1a9b      	subs	r3, r3, r2
 80079e4:	42ab      	cmp	r3, r5
 80079e6:	dc26      	bgt.n	8007a36 <_printf_common+0x96>
 80079e8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80079ec:	1e13      	subs	r3, r2, #0
 80079ee:	6822      	ldr	r2, [r4, #0]
 80079f0:	bf18      	it	ne
 80079f2:	2301      	movne	r3, #1
 80079f4:	0692      	lsls	r2, r2, #26
 80079f6:	d42b      	bmi.n	8007a50 <_printf_common+0xb0>
 80079f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80079fc:	4649      	mov	r1, r9
 80079fe:	4638      	mov	r0, r7
 8007a00:	47c0      	blx	r8
 8007a02:	3001      	adds	r0, #1
 8007a04:	d01e      	beq.n	8007a44 <_printf_common+0xa4>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	68e5      	ldr	r5, [r4, #12]
 8007a0a:	6832      	ldr	r2, [r6, #0]
 8007a0c:	f003 0306 	and.w	r3, r3, #6
 8007a10:	2b04      	cmp	r3, #4
 8007a12:	bf08      	it	eq
 8007a14:	1aad      	subeq	r5, r5, r2
 8007a16:	68a3      	ldr	r3, [r4, #8]
 8007a18:	6922      	ldr	r2, [r4, #16]
 8007a1a:	bf0c      	ite	eq
 8007a1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a20:	2500      	movne	r5, #0
 8007a22:	4293      	cmp	r3, r2
 8007a24:	bfc4      	itt	gt
 8007a26:	1a9b      	subgt	r3, r3, r2
 8007a28:	18ed      	addgt	r5, r5, r3
 8007a2a:	2600      	movs	r6, #0
 8007a2c:	341a      	adds	r4, #26
 8007a2e:	42b5      	cmp	r5, r6
 8007a30:	d11a      	bne.n	8007a68 <_printf_common+0xc8>
 8007a32:	2000      	movs	r0, #0
 8007a34:	e008      	b.n	8007a48 <_printf_common+0xa8>
 8007a36:	2301      	movs	r3, #1
 8007a38:	4652      	mov	r2, sl
 8007a3a:	4649      	mov	r1, r9
 8007a3c:	4638      	mov	r0, r7
 8007a3e:	47c0      	blx	r8
 8007a40:	3001      	adds	r0, #1
 8007a42:	d103      	bne.n	8007a4c <_printf_common+0xac>
 8007a44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007a48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a4c:	3501      	adds	r5, #1
 8007a4e:	e7c6      	b.n	80079de <_printf_common+0x3e>
 8007a50:	18e1      	adds	r1, r4, r3
 8007a52:	1c5a      	adds	r2, r3, #1
 8007a54:	2030      	movs	r0, #48	; 0x30
 8007a56:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a5a:	4422      	add	r2, r4
 8007a5c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a60:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a64:	3302      	adds	r3, #2
 8007a66:	e7c7      	b.n	80079f8 <_printf_common+0x58>
 8007a68:	2301      	movs	r3, #1
 8007a6a:	4622      	mov	r2, r4
 8007a6c:	4649      	mov	r1, r9
 8007a6e:	4638      	mov	r0, r7
 8007a70:	47c0      	blx	r8
 8007a72:	3001      	adds	r0, #1
 8007a74:	d0e6      	beq.n	8007a44 <_printf_common+0xa4>
 8007a76:	3601      	adds	r6, #1
 8007a78:	e7d9      	b.n	8007a2e <_printf_common+0x8e>
	...

08007a7c <_printf_i>:
 8007a7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007a80:	7e0f      	ldrb	r7, [r1, #24]
 8007a82:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007a84:	2f78      	cmp	r7, #120	; 0x78
 8007a86:	4691      	mov	r9, r2
 8007a88:	4680      	mov	r8, r0
 8007a8a:	460c      	mov	r4, r1
 8007a8c:	469a      	mov	sl, r3
 8007a8e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007a92:	d807      	bhi.n	8007aa4 <_printf_i+0x28>
 8007a94:	2f62      	cmp	r7, #98	; 0x62
 8007a96:	d80a      	bhi.n	8007aae <_printf_i+0x32>
 8007a98:	2f00      	cmp	r7, #0
 8007a9a:	f000 80d8 	beq.w	8007c4e <_printf_i+0x1d2>
 8007a9e:	2f58      	cmp	r7, #88	; 0x58
 8007aa0:	f000 80a3 	beq.w	8007bea <_printf_i+0x16e>
 8007aa4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aa8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007aac:	e03a      	b.n	8007b24 <_printf_i+0xa8>
 8007aae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007ab2:	2b15      	cmp	r3, #21
 8007ab4:	d8f6      	bhi.n	8007aa4 <_printf_i+0x28>
 8007ab6:	a101      	add	r1, pc, #4	; (adr r1, 8007abc <_printf_i+0x40>)
 8007ab8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007abc:	08007b15 	.word	0x08007b15
 8007ac0:	08007b29 	.word	0x08007b29
 8007ac4:	08007aa5 	.word	0x08007aa5
 8007ac8:	08007aa5 	.word	0x08007aa5
 8007acc:	08007aa5 	.word	0x08007aa5
 8007ad0:	08007aa5 	.word	0x08007aa5
 8007ad4:	08007b29 	.word	0x08007b29
 8007ad8:	08007aa5 	.word	0x08007aa5
 8007adc:	08007aa5 	.word	0x08007aa5
 8007ae0:	08007aa5 	.word	0x08007aa5
 8007ae4:	08007aa5 	.word	0x08007aa5
 8007ae8:	08007c35 	.word	0x08007c35
 8007aec:	08007b59 	.word	0x08007b59
 8007af0:	08007c17 	.word	0x08007c17
 8007af4:	08007aa5 	.word	0x08007aa5
 8007af8:	08007aa5 	.word	0x08007aa5
 8007afc:	08007c57 	.word	0x08007c57
 8007b00:	08007aa5 	.word	0x08007aa5
 8007b04:	08007b59 	.word	0x08007b59
 8007b08:	08007aa5 	.word	0x08007aa5
 8007b0c:	08007aa5 	.word	0x08007aa5
 8007b10:	08007c1f 	.word	0x08007c1f
 8007b14:	682b      	ldr	r3, [r5, #0]
 8007b16:	1d1a      	adds	r2, r3, #4
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	602a      	str	r2, [r5, #0]
 8007b1c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b24:	2301      	movs	r3, #1
 8007b26:	e0a3      	b.n	8007c70 <_printf_i+0x1f4>
 8007b28:	6820      	ldr	r0, [r4, #0]
 8007b2a:	6829      	ldr	r1, [r5, #0]
 8007b2c:	0606      	lsls	r6, r0, #24
 8007b2e:	f101 0304 	add.w	r3, r1, #4
 8007b32:	d50a      	bpl.n	8007b4a <_printf_i+0xce>
 8007b34:	680e      	ldr	r6, [r1, #0]
 8007b36:	602b      	str	r3, [r5, #0]
 8007b38:	2e00      	cmp	r6, #0
 8007b3a:	da03      	bge.n	8007b44 <_printf_i+0xc8>
 8007b3c:	232d      	movs	r3, #45	; 0x2d
 8007b3e:	4276      	negs	r6, r6
 8007b40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b44:	485e      	ldr	r0, [pc, #376]	; (8007cc0 <_printf_i+0x244>)
 8007b46:	230a      	movs	r3, #10
 8007b48:	e019      	b.n	8007b7e <_printf_i+0x102>
 8007b4a:	680e      	ldr	r6, [r1, #0]
 8007b4c:	602b      	str	r3, [r5, #0]
 8007b4e:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b52:	bf18      	it	ne
 8007b54:	b236      	sxthne	r6, r6
 8007b56:	e7ef      	b.n	8007b38 <_printf_i+0xbc>
 8007b58:	682b      	ldr	r3, [r5, #0]
 8007b5a:	6820      	ldr	r0, [r4, #0]
 8007b5c:	1d19      	adds	r1, r3, #4
 8007b5e:	6029      	str	r1, [r5, #0]
 8007b60:	0601      	lsls	r1, r0, #24
 8007b62:	d501      	bpl.n	8007b68 <_printf_i+0xec>
 8007b64:	681e      	ldr	r6, [r3, #0]
 8007b66:	e002      	b.n	8007b6e <_printf_i+0xf2>
 8007b68:	0646      	lsls	r6, r0, #25
 8007b6a:	d5fb      	bpl.n	8007b64 <_printf_i+0xe8>
 8007b6c:	881e      	ldrh	r6, [r3, #0]
 8007b6e:	4854      	ldr	r0, [pc, #336]	; (8007cc0 <_printf_i+0x244>)
 8007b70:	2f6f      	cmp	r7, #111	; 0x6f
 8007b72:	bf0c      	ite	eq
 8007b74:	2308      	moveq	r3, #8
 8007b76:	230a      	movne	r3, #10
 8007b78:	2100      	movs	r1, #0
 8007b7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b7e:	6865      	ldr	r5, [r4, #4]
 8007b80:	60a5      	str	r5, [r4, #8]
 8007b82:	2d00      	cmp	r5, #0
 8007b84:	bfa2      	ittt	ge
 8007b86:	6821      	ldrge	r1, [r4, #0]
 8007b88:	f021 0104 	bicge.w	r1, r1, #4
 8007b8c:	6021      	strge	r1, [r4, #0]
 8007b8e:	b90e      	cbnz	r6, 8007b94 <_printf_i+0x118>
 8007b90:	2d00      	cmp	r5, #0
 8007b92:	d04d      	beq.n	8007c30 <_printf_i+0x1b4>
 8007b94:	4615      	mov	r5, r2
 8007b96:	fbb6 f1f3 	udiv	r1, r6, r3
 8007b9a:	fb03 6711 	mls	r7, r3, r1, r6
 8007b9e:	5dc7      	ldrb	r7, [r0, r7]
 8007ba0:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ba4:	4637      	mov	r7, r6
 8007ba6:	42bb      	cmp	r3, r7
 8007ba8:	460e      	mov	r6, r1
 8007baa:	d9f4      	bls.n	8007b96 <_printf_i+0x11a>
 8007bac:	2b08      	cmp	r3, #8
 8007bae:	d10b      	bne.n	8007bc8 <_printf_i+0x14c>
 8007bb0:	6823      	ldr	r3, [r4, #0]
 8007bb2:	07de      	lsls	r6, r3, #31
 8007bb4:	d508      	bpl.n	8007bc8 <_printf_i+0x14c>
 8007bb6:	6923      	ldr	r3, [r4, #16]
 8007bb8:	6861      	ldr	r1, [r4, #4]
 8007bba:	4299      	cmp	r1, r3
 8007bbc:	bfde      	ittt	le
 8007bbe:	2330      	movle	r3, #48	; 0x30
 8007bc0:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bc4:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007bc8:	1b52      	subs	r2, r2, r5
 8007bca:	6122      	str	r2, [r4, #16]
 8007bcc:	f8cd a000 	str.w	sl, [sp]
 8007bd0:	464b      	mov	r3, r9
 8007bd2:	aa03      	add	r2, sp, #12
 8007bd4:	4621      	mov	r1, r4
 8007bd6:	4640      	mov	r0, r8
 8007bd8:	f7ff fee2 	bl	80079a0 <_printf_common>
 8007bdc:	3001      	adds	r0, #1
 8007bde:	d14c      	bne.n	8007c7a <_printf_i+0x1fe>
 8007be0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007be4:	b004      	add	sp, #16
 8007be6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bea:	4835      	ldr	r0, [pc, #212]	; (8007cc0 <_printf_i+0x244>)
 8007bec:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007bf0:	6829      	ldr	r1, [r5, #0]
 8007bf2:	6823      	ldr	r3, [r4, #0]
 8007bf4:	f851 6b04 	ldr.w	r6, [r1], #4
 8007bf8:	6029      	str	r1, [r5, #0]
 8007bfa:	061d      	lsls	r5, r3, #24
 8007bfc:	d514      	bpl.n	8007c28 <_printf_i+0x1ac>
 8007bfe:	07df      	lsls	r7, r3, #31
 8007c00:	bf44      	itt	mi
 8007c02:	f043 0320 	orrmi.w	r3, r3, #32
 8007c06:	6023      	strmi	r3, [r4, #0]
 8007c08:	b91e      	cbnz	r6, 8007c12 <_printf_i+0x196>
 8007c0a:	6823      	ldr	r3, [r4, #0]
 8007c0c:	f023 0320 	bic.w	r3, r3, #32
 8007c10:	6023      	str	r3, [r4, #0]
 8007c12:	2310      	movs	r3, #16
 8007c14:	e7b0      	b.n	8007b78 <_printf_i+0xfc>
 8007c16:	6823      	ldr	r3, [r4, #0]
 8007c18:	f043 0320 	orr.w	r3, r3, #32
 8007c1c:	6023      	str	r3, [r4, #0]
 8007c1e:	2378      	movs	r3, #120	; 0x78
 8007c20:	4828      	ldr	r0, [pc, #160]	; (8007cc4 <_printf_i+0x248>)
 8007c22:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007c26:	e7e3      	b.n	8007bf0 <_printf_i+0x174>
 8007c28:	0659      	lsls	r1, r3, #25
 8007c2a:	bf48      	it	mi
 8007c2c:	b2b6      	uxthmi	r6, r6
 8007c2e:	e7e6      	b.n	8007bfe <_printf_i+0x182>
 8007c30:	4615      	mov	r5, r2
 8007c32:	e7bb      	b.n	8007bac <_printf_i+0x130>
 8007c34:	682b      	ldr	r3, [r5, #0]
 8007c36:	6826      	ldr	r6, [r4, #0]
 8007c38:	6961      	ldr	r1, [r4, #20]
 8007c3a:	1d18      	adds	r0, r3, #4
 8007c3c:	6028      	str	r0, [r5, #0]
 8007c3e:	0635      	lsls	r5, r6, #24
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	d501      	bpl.n	8007c48 <_printf_i+0x1cc>
 8007c44:	6019      	str	r1, [r3, #0]
 8007c46:	e002      	b.n	8007c4e <_printf_i+0x1d2>
 8007c48:	0670      	lsls	r0, r6, #25
 8007c4a:	d5fb      	bpl.n	8007c44 <_printf_i+0x1c8>
 8007c4c:	8019      	strh	r1, [r3, #0]
 8007c4e:	2300      	movs	r3, #0
 8007c50:	6123      	str	r3, [r4, #16]
 8007c52:	4615      	mov	r5, r2
 8007c54:	e7ba      	b.n	8007bcc <_printf_i+0x150>
 8007c56:	682b      	ldr	r3, [r5, #0]
 8007c58:	1d1a      	adds	r2, r3, #4
 8007c5a:	602a      	str	r2, [r5, #0]
 8007c5c:	681d      	ldr	r5, [r3, #0]
 8007c5e:	6862      	ldr	r2, [r4, #4]
 8007c60:	2100      	movs	r1, #0
 8007c62:	4628      	mov	r0, r5
 8007c64:	f7f8 fabc 	bl	80001e0 <memchr>
 8007c68:	b108      	cbz	r0, 8007c6e <_printf_i+0x1f2>
 8007c6a:	1b40      	subs	r0, r0, r5
 8007c6c:	6060      	str	r0, [r4, #4]
 8007c6e:	6863      	ldr	r3, [r4, #4]
 8007c70:	6123      	str	r3, [r4, #16]
 8007c72:	2300      	movs	r3, #0
 8007c74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c78:	e7a8      	b.n	8007bcc <_printf_i+0x150>
 8007c7a:	6923      	ldr	r3, [r4, #16]
 8007c7c:	462a      	mov	r2, r5
 8007c7e:	4649      	mov	r1, r9
 8007c80:	4640      	mov	r0, r8
 8007c82:	47d0      	blx	sl
 8007c84:	3001      	adds	r0, #1
 8007c86:	d0ab      	beq.n	8007be0 <_printf_i+0x164>
 8007c88:	6823      	ldr	r3, [r4, #0]
 8007c8a:	079b      	lsls	r3, r3, #30
 8007c8c:	d413      	bmi.n	8007cb6 <_printf_i+0x23a>
 8007c8e:	68e0      	ldr	r0, [r4, #12]
 8007c90:	9b03      	ldr	r3, [sp, #12]
 8007c92:	4298      	cmp	r0, r3
 8007c94:	bfb8      	it	lt
 8007c96:	4618      	movlt	r0, r3
 8007c98:	e7a4      	b.n	8007be4 <_printf_i+0x168>
 8007c9a:	2301      	movs	r3, #1
 8007c9c:	4632      	mov	r2, r6
 8007c9e:	4649      	mov	r1, r9
 8007ca0:	4640      	mov	r0, r8
 8007ca2:	47d0      	blx	sl
 8007ca4:	3001      	adds	r0, #1
 8007ca6:	d09b      	beq.n	8007be0 <_printf_i+0x164>
 8007ca8:	3501      	adds	r5, #1
 8007caa:	68e3      	ldr	r3, [r4, #12]
 8007cac:	9903      	ldr	r1, [sp, #12]
 8007cae:	1a5b      	subs	r3, r3, r1
 8007cb0:	42ab      	cmp	r3, r5
 8007cb2:	dcf2      	bgt.n	8007c9a <_printf_i+0x21e>
 8007cb4:	e7eb      	b.n	8007c8e <_printf_i+0x212>
 8007cb6:	2500      	movs	r5, #0
 8007cb8:	f104 0619 	add.w	r6, r4, #25
 8007cbc:	e7f5      	b.n	8007caa <_printf_i+0x22e>
 8007cbe:	bf00      	nop
 8007cc0:	0800a06e 	.word	0x0800a06e
 8007cc4:	0800a07f 	.word	0x0800a07f

08007cc8 <iprintf>:
 8007cc8:	b40f      	push	{r0, r1, r2, r3}
 8007cca:	4b0a      	ldr	r3, [pc, #40]	; (8007cf4 <iprintf+0x2c>)
 8007ccc:	b513      	push	{r0, r1, r4, lr}
 8007cce:	681c      	ldr	r4, [r3, #0]
 8007cd0:	b124      	cbz	r4, 8007cdc <iprintf+0x14>
 8007cd2:	69a3      	ldr	r3, [r4, #24]
 8007cd4:	b913      	cbnz	r3, 8007cdc <iprintf+0x14>
 8007cd6:	4620      	mov	r0, r4
 8007cd8:	f7ff fa1c 	bl	8007114 <__sinit>
 8007cdc:	ab05      	add	r3, sp, #20
 8007cde:	9a04      	ldr	r2, [sp, #16]
 8007ce0:	68a1      	ldr	r1, [r4, #8]
 8007ce2:	9301      	str	r3, [sp, #4]
 8007ce4:	4620      	mov	r0, r4
 8007ce6:	f001 fdfb 	bl	80098e0 <_vfiprintf_r>
 8007cea:	b002      	add	sp, #8
 8007cec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cf0:	b004      	add	sp, #16
 8007cf2:	4770      	bx	lr
 8007cf4:	20000010 	.word	0x20000010

08007cf8 <_puts_r>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	460e      	mov	r6, r1
 8007cfc:	4605      	mov	r5, r0
 8007cfe:	b118      	cbz	r0, 8007d08 <_puts_r+0x10>
 8007d00:	6983      	ldr	r3, [r0, #24]
 8007d02:	b90b      	cbnz	r3, 8007d08 <_puts_r+0x10>
 8007d04:	f7ff fa06 	bl	8007114 <__sinit>
 8007d08:	69ab      	ldr	r3, [r5, #24]
 8007d0a:	68ac      	ldr	r4, [r5, #8]
 8007d0c:	b913      	cbnz	r3, 8007d14 <_puts_r+0x1c>
 8007d0e:	4628      	mov	r0, r5
 8007d10:	f7ff fa00 	bl	8007114 <__sinit>
 8007d14:	4b2c      	ldr	r3, [pc, #176]	; (8007dc8 <_puts_r+0xd0>)
 8007d16:	429c      	cmp	r4, r3
 8007d18:	d120      	bne.n	8007d5c <_puts_r+0x64>
 8007d1a:	686c      	ldr	r4, [r5, #4]
 8007d1c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d1e:	07db      	lsls	r3, r3, #31
 8007d20:	d405      	bmi.n	8007d2e <_puts_r+0x36>
 8007d22:	89a3      	ldrh	r3, [r4, #12]
 8007d24:	0598      	lsls	r0, r3, #22
 8007d26:	d402      	bmi.n	8007d2e <_puts_r+0x36>
 8007d28:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d2a:	f7ff fab6 	bl	800729a <__retarget_lock_acquire_recursive>
 8007d2e:	89a3      	ldrh	r3, [r4, #12]
 8007d30:	0719      	lsls	r1, r3, #28
 8007d32:	d51d      	bpl.n	8007d70 <_puts_r+0x78>
 8007d34:	6923      	ldr	r3, [r4, #16]
 8007d36:	b1db      	cbz	r3, 8007d70 <_puts_r+0x78>
 8007d38:	3e01      	subs	r6, #1
 8007d3a:	68a3      	ldr	r3, [r4, #8]
 8007d3c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d40:	3b01      	subs	r3, #1
 8007d42:	60a3      	str	r3, [r4, #8]
 8007d44:	bb39      	cbnz	r1, 8007d96 <_puts_r+0x9e>
 8007d46:	2b00      	cmp	r3, #0
 8007d48:	da38      	bge.n	8007dbc <_puts_r+0xc4>
 8007d4a:	4622      	mov	r2, r4
 8007d4c:	210a      	movs	r1, #10
 8007d4e:	4628      	mov	r0, r5
 8007d50:	f000 f906 	bl	8007f60 <__swbuf_r>
 8007d54:	3001      	adds	r0, #1
 8007d56:	d011      	beq.n	8007d7c <_puts_r+0x84>
 8007d58:	250a      	movs	r5, #10
 8007d5a:	e011      	b.n	8007d80 <_puts_r+0x88>
 8007d5c:	4b1b      	ldr	r3, [pc, #108]	; (8007dcc <_puts_r+0xd4>)
 8007d5e:	429c      	cmp	r4, r3
 8007d60:	d101      	bne.n	8007d66 <_puts_r+0x6e>
 8007d62:	68ac      	ldr	r4, [r5, #8]
 8007d64:	e7da      	b.n	8007d1c <_puts_r+0x24>
 8007d66:	4b1a      	ldr	r3, [pc, #104]	; (8007dd0 <_puts_r+0xd8>)
 8007d68:	429c      	cmp	r4, r3
 8007d6a:	bf08      	it	eq
 8007d6c:	68ec      	ldreq	r4, [r5, #12]
 8007d6e:	e7d5      	b.n	8007d1c <_puts_r+0x24>
 8007d70:	4621      	mov	r1, r4
 8007d72:	4628      	mov	r0, r5
 8007d74:	f000 f958 	bl	8008028 <__swsetup_r>
 8007d78:	2800      	cmp	r0, #0
 8007d7a:	d0dd      	beq.n	8007d38 <_puts_r+0x40>
 8007d7c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007d80:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007d82:	07da      	lsls	r2, r3, #31
 8007d84:	d405      	bmi.n	8007d92 <_puts_r+0x9a>
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	059b      	lsls	r3, r3, #22
 8007d8a:	d402      	bmi.n	8007d92 <_puts_r+0x9a>
 8007d8c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007d8e:	f7ff fa85 	bl	800729c <__retarget_lock_release_recursive>
 8007d92:	4628      	mov	r0, r5
 8007d94:	bd70      	pop	{r4, r5, r6, pc}
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	da04      	bge.n	8007da4 <_puts_r+0xac>
 8007d9a:	69a2      	ldr	r2, [r4, #24]
 8007d9c:	429a      	cmp	r2, r3
 8007d9e:	dc06      	bgt.n	8007dae <_puts_r+0xb6>
 8007da0:	290a      	cmp	r1, #10
 8007da2:	d004      	beq.n	8007dae <_puts_r+0xb6>
 8007da4:	6823      	ldr	r3, [r4, #0]
 8007da6:	1c5a      	adds	r2, r3, #1
 8007da8:	6022      	str	r2, [r4, #0]
 8007daa:	7019      	strb	r1, [r3, #0]
 8007dac:	e7c5      	b.n	8007d3a <_puts_r+0x42>
 8007dae:	4622      	mov	r2, r4
 8007db0:	4628      	mov	r0, r5
 8007db2:	f000 f8d5 	bl	8007f60 <__swbuf_r>
 8007db6:	3001      	adds	r0, #1
 8007db8:	d1bf      	bne.n	8007d3a <_puts_r+0x42>
 8007dba:	e7df      	b.n	8007d7c <_puts_r+0x84>
 8007dbc:	6823      	ldr	r3, [r4, #0]
 8007dbe:	250a      	movs	r5, #10
 8007dc0:	1c5a      	adds	r2, r3, #1
 8007dc2:	6022      	str	r2, [r4, #0]
 8007dc4:	701d      	strb	r5, [r3, #0]
 8007dc6:	e7db      	b.n	8007d80 <_puts_r+0x88>
 8007dc8:	0800a018 	.word	0x0800a018
 8007dcc:	0800a038 	.word	0x0800a038
 8007dd0:	08009ff8 	.word	0x08009ff8

08007dd4 <puts>:
 8007dd4:	4b02      	ldr	r3, [pc, #8]	; (8007de0 <puts+0xc>)
 8007dd6:	4601      	mov	r1, r0
 8007dd8:	6818      	ldr	r0, [r3, #0]
 8007dda:	f7ff bf8d 	b.w	8007cf8 <_puts_r>
 8007dde:	bf00      	nop
 8007de0:	20000010 	.word	0x20000010

08007de4 <cleanup_glue>:
 8007de4:	b538      	push	{r3, r4, r5, lr}
 8007de6:	460c      	mov	r4, r1
 8007de8:	6809      	ldr	r1, [r1, #0]
 8007dea:	4605      	mov	r5, r0
 8007dec:	b109      	cbz	r1, 8007df2 <cleanup_glue+0xe>
 8007dee:	f7ff fff9 	bl	8007de4 <cleanup_glue>
 8007df2:	4621      	mov	r1, r4
 8007df4:	4628      	mov	r0, r5
 8007df6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007dfa:	f001 bcfb 	b.w	80097f4 <_free_r>
	...

08007e00 <_reclaim_reent>:
 8007e00:	4b2c      	ldr	r3, [pc, #176]	; (8007eb4 <_reclaim_reent+0xb4>)
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	4283      	cmp	r3, r0
 8007e06:	b570      	push	{r4, r5, r6, lr}
 8007e08:	4604      	mov	r4, r0
 8007e0a:	d051      	beq.n	8007eb0 <_reclaim_reent+0xb0>
 8007e0c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007e0e:	b143      	cbz	r3, 8007e22 <_reclaim_reent+0x22>
 8007e10:	68db      	ldr	r3, [r3, #12]
 8007e12:	2b00      	cmp	r3, #0
 8007e14:	d14a      	bne.n	8007eac <_reclaim_reent+0xac>
 8007e16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e18:	6819      	ldr	r1, [r3, #0]
 8007e1a:	b111      	cbz	r1, 8007e22 <_reclaim_reent+0x22>
 8007e1c:	4620      	mov	r0, r4
 8007e1e:	f001 fce9 	bl	80097f4 <_free_r>
 8007e22:	6961      	ldr	r1, [r4, #20]
 8007e24:	b111      	cbz	r1, 8007e2c <_reclaim_reent+0x2c>
 8007e26:	4620      	mov	r0, r4
 8007e28:	f001 fce4 	bl	80097f4 <_free_r>
 8007e2c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007e2e:	b111      	cbz	r1, 8007e36 <_reclaim_reent+0x36>
 8007e30:	4620      	mov	r0, r4
 8007e32:	f001 fcdf 	bl	80097f4 <_free_r>
 8007e36:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007e38:	b111      	cbz	r1, 8007e40 <_reclaim_reent+0x40>
 8007e3a:	4620      	mov	r0, r4
 8007e3c:	f001 fcda 	bl	80097f4 <_free_r>
 8007e40:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007e42:	b111      	cbz	r1, 8007e4a <_reclaim_reent+0x4a>
 8007e44:	4620      	mov	r0, r4
 8007e46:	f001 fcd5 	bl	80097f4 <_free_r>
 8007e4a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007e4c:	b111      	cbz	r1, 8007e54 <_reclaim_reent+0x54>
 8007e4e:	4620      	mov	r0, r4
 8007e50:	f001 fcd0 	bl	80097f4 <_free_r>
 8007e54:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007e56:	b111      	cbz	r1, 8007e5e <_reclaim_reent+0x5e>
 8007e58:	4620      	mov	r0, r4
 8007e5a:	f001 fccb 	bl	80097f4 <_free_r>
 8007e5e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007e60:	b111      	cbz	r1, 8007e68 <_reclaim_reent+0x68>
 8007e62:	4620      	mov	r0, r4
 8007e64:	f001 fcc6 	bl	80097f4 <_free_r>
 8007e68:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007e6a:	b111      	cbz	r1, 8007e72 <_reclaim_reent+0x72>
 8007e6c:	4620      	mov	r0, r4
 8007e6e:	f001 fcc1 	bl	80097f4 <_free_r>
 8007e72:	69a3      	ldr	r3, [r4, #24]
 8007e74:	b1e3      	cbz	r3, 8007eb0 <_reclaim_reent+0xb0>
 8007e76:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007e78:	4620      	mov	r0, r4
 8007e7a:	4798      	blx	r3
 8007e7c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007e7e:	b1b9      	cbz	r1, 8007eb0 <_reclaim_reent+0xb0>
 8007e80:	4620      	mov	r0, r4
 8007e82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007e86:	f7ff bfad 	b.w	8007de4 <cleanup_glue>
 8007e8a:	5949      	ldr	r1, [r1, r5]
 8007e8c:	b941      	cbnz	r1, 8007ea0 <_reclaim_reent+0xa0>
 8007e8e:	3504      	adds	r5, #4
 8007e90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007e92:	2d80      	cmp	r5, #128	; 0x80
 8007e94:	68d9      	ldr	r1, [r3, #12]
 8007e96:	d1f8      	bne.n	8007e8a <_reclaim_reent+0x8a>
 8007e98:	4620      	mov	r0, r4
 8007e9a:	f001 fcab 	bl	80097f4 <_free_r>
 8007e9e:	e7ba      	b.n	8007e16 <_reclaim_reent+0x16>
 8007ea0:	680e      	ldr	r6, [r1, #0]
 8007ea2:	4620      	mov	r0, r4
 8007ea4:	f001 fca6 	bl	80097f4 <_free_r>
 8007ea8:	4631      	mov	r1, r6
 8007eaa:	e7ef      	b.n	8007e8c <_reclaim_reent+0x8c>
 8007eac:	2500      	movs	r5, #0
 8007eae:	e7ef      	b.n	8007e90 <_reclaim_reent+0x90>
 8007eb0:	bd70      	pop	{r4, r5, r6, pc}
 8007eb2:	bf00      	nop
 8007eb4:	20000010 	.word	0x20000010

08007eb8 <_sbrk_r>:
 8007eb8:	b538      	push	{r3, r4, r5, lr}
 8007eba:	4d06      	ldr	r5, [pc, #24]	; (8007ed4 <_sbrk_r+0x1c>)
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	4604      	mov	r4, r0
 8007ec0:	4608      	mov	r0, r1
 8007ec2:	602b      	str	r3, [r5, #0]
 8007ec4:	f7f9 fc8e 	bl	80017e4 <_sbrk>
 8007ec8:	1c43      	adds	r3, r0, #1
 8007eca:	d102      	bne.n	8007ed2 <_sbrk_r+0x1a>
 8007ecc:	682b      	ldr	r3, [r5, #0]
 8007ece:	b103      	cbz	r3, 8007ed2 <_sbrk_r+0x1a>
 8007ed0:	6023      	str	r3, [r4, #0]
 8007ed2:	bd38      	pop	{r3, r4, r5, pc}
 8007ed4:	20002278 	.word	0x20002278

08007ed8 <__sread>:
 8007ed8:	b510      	push	{r4, lr}
 8007eda:	460c      	mov	r4, r1
 8007edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ee0:	f001 fe2e 	bl	8009b40 <_read_r>
 8007ee4:	2800      	cmp	r0, #0
 8007ee6:	bfab      	itete	ge
 8007ee8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007eea:	89a3      	ldrhlt	r3, [r4, #12]
 8007eec:	181b      	addge	r3, r3, r0
 8007eee:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ef2:	bfac      	ite	ge
 8007ef4:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ef6:	81a3      	strhlt	r3, [r4, #12]
 8007ef8:	bd10      	pop	{r4, pc}

08007efa <__swrite>:
 8007efa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007efe:	461f      	mov	r7, r3
 8007f00:	898b      	ldrh	r3, [r1, #12]
 8007f02:	05db      	lsls	r3, r3, #23
 8007f04:	4605      	mov	r5, r0
 8007f06:	460c      	mov	r4, r1
 8007f08:	4616      	mov	r6, r2
 8007f0a:	d505      	bpl.n	8007f18 <__swrite+0x1e>
 8007f0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f10:	2302      	movs	r3, #2
 8007f12:	2200      	movs	r2, #0
 8007f14:	f001 f848 	bl	8008fa8 <_lseek_r>
 8007f18:	89a3      	ldrh	r3, [r4, #12]
 8007f1a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007f1e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f22:	81a3      	strh	r3, [r4, #12]
 8007f24:	4632      	mov	r2, r6
 8007f26:	463b      	mov	r3, r7
 8007f28:	4628      	mov	r0, r5
 8007f2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007f2e:	f000 b869 	b.w	8008004 <_write_r>

08007f32 <__sseek>:
 8007f32:	b510      	push	{r4, lr}
 8007f34:	460c      	mov	r4, r1
 8007f36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f3a:	f001 f835 	bl	8008fa8 <_lseek_r>
 8007f3e:	1c43      	adds	r3, r0, #1
 8007f40:	89a3      	ldrh	r3, [r4, #12]
 8007f42:	bf15      	itete	ne
 8007f44:	6560      	strne	r0, [r4, #84]	; 0x54
 8007f46:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007f4a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007f4e:	81a3      	strheq	r3, [r4, #12]
 8007f50:	bf18      	it	ne
 8007f52:	81a3      	strhne	r3, [r4, #12]
 8007f54:	bd10      	pop	{r4, pc}

08007f56 <__sclose>:
 8007f56:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007f5a:	f000 b8d3 	b.w	8008104 <_close_r>
	...

08007f60 <__swbuf_r>:
 8007f60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f62:	460e      	mov	r6, r1
 8007f64:	4614      	mov	r4, r2
 8007f66:	4605      	mov	r5, r0
 8007f68:	b118      	cbz	r0, 8007f72 <__swbuf_r+0x12>
 8007f6a:	6983      	ldr	r3, [r0, #24]
 8007f6c:	b90b      	cbnz	r3, 8007f72 <__swbuf_r+0x12>
 8007f6e:	f7ff f8d1 	bl	8007114 <__sinit>
 8007f72:	4b21      	ldr	r3, [pc, #132]	; (8007ff8 <__swbuf_r+0x98>)
 8007f74:	429c      	cmp	r4, r3
 8007f76:	d12b      	bne.n	8007fd0 <__swbuf_r+0x70>
 8007f78:	686c      	ldr	r4, [r5, #4]
 8007f7a:	69a3      	ldr	r3, [r4, #24]
 8007f7c:	60a3      	str	r3, [r4, #8]
 8007f7e:	89a3      	ldrh	r3, [r4, #12]
 8007f80:	071a      	lsls	r2, r3, #28
 8007f82:	d52f      	bpl.n	8007fe4 <__swbuf_r+0x84>
 8007f84:	6923      	ldr	r3, [r4, #16]
 8007f86:	b36b      	cbz	r3, 8007fe4 <__swbuf_r+0x84>
 8007f88:	6923      	ldr	r3, [r4, #16]
 8007f8a:	6820      	ldr	r0, [r4, #0]
 8007f8c:	1ac0      	subs	r0, r0, r3
 8007f8e:	6963      	ldr	r3, [r4, #20]
 8007f90:	b2f6      	uxtb	r6, r6
 8007f92:	4283      	cmp	r3, r0
 8007f94:	4637      	mov	r7, r6
 8007f96:	dc04      	bgt.n	8007fa2 <__swbuf_r+0x42>
 8007f98:	4621      	mov	r1, r4
 8007f9a:	4628      	mov	r0, r5
 8007f9c:	f000 ffc4 	bl	8008f28 <_fflush_r>
 8007fa0:	bb30      	cbnz	r0, 8007ff0 <__swbuf_r+0x90>
 8007fa2:	68a3      	ldr	r3, [r4, #8]
 8007fa4:	3b01      	subs	r3, #1
 8007fa6:	60a3      	str	r3, [r4, #8]
 8007fa8:	6823      	ldr	r3, [r4, #0]
 8007faa:	1c5a      	adds	r2, r3, #1
 8007fac:	6022      	str	r2, [r4, #0]
 8007fae:	701e      	strb	r6, [r3, #0]
 8007fb0:	6963      	ldr	r3, [r4, #20]
 8007fb2:	3001      	adds	r0, #1
 8007fb4:	4283      	cmp	r3, r0
 8007fb6:	d004      	beq.n	8007fc2 <__swbuf_r+0x62>
 8007fb8:	89a3      	ldrh	r3, [r4, #12]
 8007fba:	07db      	lsls	r3, r3, #31
 8007fbc:	d506      	bpl.n	8007fcc <__swbuf_r+0x6c>
 8007fbe:	2e0a      	cmp	r6, #10
 8007fc0:	d104      	bne.n	8007fcc <__swbuf_r+0x6c>
 8007fc2:	4621      	mov	r1, r4
 8007fc4:	4628      	mov	r0, r5
 8007fc6:	f000 ffaf 	bl	8008f28 <_fflush_r>
 8007fca:	b988      	cbnz	r0, 8007ff0 <__swbuf_r+0x90>
 8007fcc:	4638      	mov	r0, r7
 8007fce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007fd0:	4b0a      	ldr	r3, [pc, #40]	; (8007ffc <__swbuf_r+0x9c>)
 8007fd2:	429c      	cmp	r4, r3
 8007fd4:	d101      	bne.n	8007fda <__swbuf_r+0x7a>
 8007fd6:	68ac      	ldr	r4, [r5, #8]
 8007fd8:	e7cf      	b.n	8007f7a <__swbuf_r+0x1a>
 8007fda:	4b09      	ldr	r3, [pc, #36]	; (8008000 <__swbuf_r+0xa0>)
 8007fdc:	429c      	cmp	r4, r3
 8007fde:	bf08      	it	eq
 8007fe0:	68ec      	ldreq	r4, [r5, #12]
 8007fe2:	e7ca      	b.n	8007f7a <__swbuf_r+0x1a>
 8007fe4:	4621      	mov	r1, r4
 8007fe6:	4628      	mov	r0, r5
 8007fe8:	f000 f81e 	bl	8008028 <__swsetup_r>
 8007fec:	2800      	cmp	r0, #0
 8007fee:	d0cb      	beq.n	8007f88 <__swbuf_r+0x28>
 8007ff0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007ff4:	e7ea      	b.n	8007fcc <__swbuf_r+0x6c>
 8007ff6:	bf00      	nop
 8007ff8:	0800a018 	.word	0x0800a018
 8007ffc:	0800a038 	.word	0x0800a038
 8008000:	08009ff8 	.word	0x08009ff8

08008004 <_write_r>:
 8008004:	b538      	push	{r3, r4, r5, lr}
 8008006:	4d07      	ldr	r5, [pc, #28]	; (8008024 <_write_r+0x20>)
 8008008:	4604      	mov	r4, r0
 800800a:	4608      	mov	r0, r1
 800800c:	4611      	mov	r1, r2
 800800e:	2200      	movs	r2, #0
 8008010:	602a      	str	r2, [r5, #0]
 8008012:	461a      	mov	r2, r3
 8008014:	f7f9 fa82 	bl	800151c <_write>
 8008018:	1c43      	adds	r3, r0, #1
 800801a:	d102      	bne.n	8008022 <_write_r+0x1e>
 800801c:	682b      	ldr	r3, [r5, #0]
 800801e:	b103      	cbz	r3, 8008022 <_write_r+0x1e>
 8008020:	6023      	str	r3, [r4, #0]
 8008022:	bd38      	pop	{r3, r4, r5, pc}
 8008024:	20002278 	.word	0x20002278

08008028 <__swsetup_r>:
 8008028:	4b32      	ldr	r3, [pc, #200]	; (80080f4 <__swsetup_r+0xcc>)
 800802a:	b570      	push	{r4, r5, r6, lr}
 800802c:	681d      	ldr	r5, [r3, #0]
 800802e:	4606      	mov	r6, r0
 8008030:	460c      	mov	r4, r1
 8008032:	b125      	cbz	r5, 800803e <__swsetup_r+0x16>
 8008034:	69ab      	ldr	r3, [r5, #24]
 8008036:	b913      	cbnz	r3, 800803e <__swsetup_r+0x16>
 8008038:	4628      	mov	r0, r5
 800803a:	f7ff f86b 	bl	8007114 <__sinit>
 800803e:	4b2e      	ldr	r3, [pc, #184]	; (80080f8 <__swsetup_r+0xd0>)
 8008040:	429c      	cmp	r4, r3
 8008042:	d10f      	bne.n	8008064 <__swsetup_r+0x3c>
 8008044:	686c      	ldr	r4, [r5, #4]
 8008046:	89a3      	ldrh	r3, [r4, #12]
 8008048:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800804c:	0719      	lsls	r1, r3, #28
 800804e:	d42c      	bmi.n	80080aa <__swsetup_r+0x82>
 8008050:	06dd      	lsls	r5, r3, #27
 8008052:	d411      	bmi.n	8008078 <__swsetup_r+0x50>
 8008054:	2309      	movs	r3, #9
 8008056:	6033      	str	r3, [r6, #0]
 8008058:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800805c:	81a3      	strh	r3, [r4, #12]
 800805e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008062:	e03e      	b.n	80080e2 <__swsetup_r+0xba>
 8008064:	4b25      	ldr	r3, [pc, #148]	; (80080fc <__swsetup_r+0xd4>)
 8008066:	429c      	cmp	r4, r3
 8008068:	d101      	bne.n	800806e <__swsetup_r+0x46>
 800806a:	68ac      	ldr	r4, [r5, #8]
 800806c:	e7eb      	b.n	8008046 <__swsetup_r+0x1e>
 800806e:	4b24      	ldr	r3, [pc, #144]	; (8008100 <__swsetup_r+0xd8>)
 8008070:	429c      	cmp	r4, r3
 8008072:	bf08      	it	eq
 8008074:	68ec      	ldreq	r4, [r5, #12]
 8008076:	e7e6      	b.n	8008046 <__swsetup_r+0x1e>
 8008078:	0758      	lsls	r0, r3, #29
 800807a:	d512      	bpl.n	80080a2 <__swsetup_r+0x7a>
 800807c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800807e:	b141      	cbz	r1, 8008092 <__swsetup_r+0x6a>
 8008080:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008084:	4299      	cmp	r1, r3
 8008086:	d002      	beq.n	800808e <__swsetup_r+0x66>
 8008088:	4630      	mov	r0, r6
 800808a:	f001 fbb3 	bl	80097f4 <_free_r>
 800808e:	2300      	movs	r3, #0
 8008090:	6363      	str	r3, [r4, #52]	; 0x34
 8008092:	89a3      	ldrh	r3, [r4, #12]
 8008094:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008098:	81a3      	strh	r3, [r4, #12]
 800809a:	2300      	movs	r3, #0
 800809c:	6063      	str	r3, [r4, #4]
 800809e:	6923      	ldr	r3, [r4, #16]
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	89a3      	ldrh	r3, [r4, #12]
 80080a4:	f043 0308 	orr.w	r3, r3, #8
 80080a8:	81a3      	strh	r3, [r4, #12]
 80080aa:	6923      	ldr	r3, [r4, #16]
 80080ac:	b94b      	cbnz	r3, 80080c2 <__swsetup_r+0x9a>
 80080ae:	89a3      	ldrh	r3, [r4, #12]
 80080b0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80080b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80080b8:	d003      	beq.n	80080c2 <__swsetup_r+0x9a>
 80080ba:	4621      	mov	r1, r4
 80080bc:	4630      	mov	r0, r6
 80080be:	f000 ffab 	bl	8009018 <__smakebuf_r>
 80080c2:	89a0      	ldrh	r0, [r4, #12]
 80080c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080c8:	f010 0301 	ands.w	r3, r0, #1
 80080cc:	d00a      	beq.n	80080e4 <__swsetup_r+0xbc>
 80080ce:	2300      	movs	r3, #0
 80080d0:	60a3      	str	r3, [r4, #8]
 80080d2:	6963      	ldr	r3, [r4, #20]
 80080d4:	425b      	negs	r3, r3
 80080d6:	61a3      	str	r3, [r4, #24]
 80080d8:	6923      	ldr	r3, [r4, #16]
 80080da:	b943      	cbnz	r3, 80080ee <__swsetup_r+0xc6>
 80080dc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80080e0:	d1ba      	bne.n	8008058 <__swsetup_r+0x30>
 80080e2:	bd70      	pop	{r4, r5, r6, pc}
 80080e4:	0781      	lsls	r1, r0, #30
 80080e6:	bf58      	it	pl
 80080e8:	6963      	ldrpl	r3, [r4, #20]
 80080ea:	60a3      	str	r3, [r4, #8]
 80080ec:	e7f4      	b.n	80080d8 <__swsetup_r+0xb0>
 80080ee:	2000      	movs	r0, #0
 80080f0:	e7f7      	b.n	80080e2 <__swsetup_r+0xba>
 80080f2:	bf00      	nop
 80080f4:	20000010 	.word	0x20000010
 80080f8:	0800a018 	.word	0x0800a018
 80080fc:	0800a038 	.word	0x0800a038
 8008100:	08009ff8 	.word	0x08009ff8

08008104 <_close_r>:
 8008104:	b538      	push	{r3, r4, r5, lr}
 8008106:	4d06      	ldr	r5, [pc, #24]	; (8008120 <_close_r+0x1c>)
 8008108:	2300      	movs	r3, #0
 800810a:	4604      	mov	r4, r0
 800810c:	4608      	mov	r0, r1
 800810e:	602b      	str	r3, [r5, #0]
 8008110:	f7f9 fb33 	bl	800177a <_close>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d102      	bne.n	800811e <_close_r+0x1a>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	b103      	cbz	r3, 800811e <_close_r+0x1a>
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	20002278 	.word	0x20002278

08008124 <quorem>:
 8008124:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008128:	6903      	ldr	r3, [r0, #16]
 800812a:	690c      	ldr	r4, [r1, #16]
 800812c:	42a3      	cmp	r3, r4
 800812e:	4607      	mov	r7, r0
 8008130:	f2c0 8081 	blt.w	8008236 <quorem+0x112>
 8008134:	3c01      	subs	r4, #1
 8008136:	f101 0814 	add.w	r8, r1, #20
 800813a:	f100 0514 	add.w	r5, r0, #20
 800813e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008148:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800814c:	3301      	adds	r3, #1
 800814e:	429a      	cmp	r2, r3
 8008150:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008154:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008158:	fbb2 f6f3 	udiv	r6, r2, r3
 800815c:	d331      	bcc.n	80081c2 <quorem+0x9e>
 800815e:	f04f 0e00 	mov.w	lr, #0
 8008162:	4640      	mov	r0, r8
 8008164:	46ac      	mov	ip, r5
 8008166:	46f2      	mov	sl, lr
 8008168:	f850 2b04 	ldr.w	r2, [r0], #4
 800816c:	b293      	uxth	r3, r2
 800816e:	fb06 e303 	mla	r3, r6, r3, lr
 8008172:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8008176:	b29b      	uxth	r3, r3
 8008178:	ebaa 0303 	sub.w	r3, sl, r3
 800817c:	f8dc a000 	ldr.w	sl, [ip]
 8008180:	0c12      	lsrs	r2, r2, #16
 8008182:	fa13 f38a 	uxtah	r3, r3, sl
 8008186:	fb06 e202 	mla	r2, r6, r2, lr
 800818a:	9300      	str	r3, [sp, #0]
 800818c:	9b00      	ldr	r3, [sp, #0]
 800818e:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8008192:	b292      	uxth	r2, r2
 8008194:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8008198:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800819c:	f8bd 3000 	ldrh.w	r3, [sp]
 80081a0:	4581      	cmp	r9, r0
 80081a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081a6:	f84c 3b04 	str.w	r3, [ip], #4
 80081aa:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80081ae:	d2db      	bcs.n	8008168 <quorem+0x44>
 80081b0:	f855 300b 	ldr.w	r3, [r5, fp]
 80081b4:	b92b      	cbnz	r3, 80081c2 <quorem+0x9e>
 80081b6:	9b01      	ldr	r3, [sp, #4]
 80081b8:	3b04      	subs	r3, #4
 80081ba:	429d      	cmp	r5, r3
 80081bc:	461a      	mov	r2, r3
 80081be:	d32e      	bcc.n	800821e <quorem+0xfa>
 80081c0:	613c      	str	r4, [r7, #16]
 80081c2:	4638      	mov	r0, r7
 80081c4:	f001 f9fe 	bl	80095c4 <__mcmp>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	db24      	blt.n	8008216 <quorem+0xf2>
 80081cc:	3601      	adds	r6, #1
 80081ce:	4628      	mov	r0, r5
 80081d0:	f04f 0c00 	mov.w	ip, #0
 80081d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80081d8:	f8d0 e000 	ldr.w	lr, [r0]
 80081dc:	b293      	uxth	r3, r2
 80081de:	ebac 0303 	sub.w	r3, ip, r3
 80081e2:	0c12      	lsrs	r2, r2, #16
 80081e4:	fa13 f38e 	uxtah	r3, r3, lr
 80081e8:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80081ec:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80081f0:	b29b      	uxth	r3, r3
 80081f2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80081f6:	45c1      	cmp	r9, r8
 80081f8:	f840 3b04 	str.w	r3, [r0], #4
 80081fc:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008200:	d2e8      	bcs.n	80081d4 <quorem+0xb0>
 8008202:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008206:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800820a:	b922      	cbnz	r2, 8008216 <quorem+0xf2>
 800820c:	3b04      	subs	r3, #4
 800820e:	429d      	cmp	r5, r3
 8008210:	461a      	mov	r2, r3
 8008212:	d30a      	bcc.n	800822a <quorem+0x106>
 8008214:	613c      	str	r4, [r7, #16]
 8008216:	4630      	mov	r0, r6
 8008218:	b003      	add	sp, #12
 800821a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800821e:	6812      	ldr	r2, [r2, #0]
 8008220:	3b04      	subs	r3, #4
 8008222:	2a00      	cmp	r2, #0
 8008224:	d1cc      	bne.n	80081c0 <quorem+0x9c>
 8008226:	3c01      	subs	r4, #1
 8008228:	e7c7      	b.n	80081ba <quorem+0x96>
 800822a:	6812      	ldr	r2, [r2, #0]
 800822c:	3b04      	subs	r3, #4
 800822e:	2a00      	cmp	r2, #0
 8008230:	d1f0      	bne.n	8008214 <quorem+0xf0>
 8008232:	3c01      	subs	r4, #1
 8008234:	e7eb      	b.n	800820e <quorem+0xea>
 8008236:	2000      	movs	r0, #0
 8008238:	e7ee      	b.n	8008218 <quorem+0xf4>
 800823a:	0000      	movs	r0, r0
 800823c:	0000      	movs	r0, r0
	...

08008240 <_dtoa_r>:
 8008240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008244:	ed2d 8b04 	vpush	{d8-d9}
 8008248:	ec57 6b10 	vmov	r6, r7, d0
 800824c:	b093      	sub	sp, #76	; 0x4c
 800824e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8008250:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8008254:	9106      	str	r1, [sp, #24]
 8008256:	ee10 aa10 	vmov	sl, s0
 800825a:	4604      	mov	r4, r0
 800825c:	9209      	str	r2, [sp, #36]	; 0x24
 800825e:	930c      	str	r3, [sp, #48]	; 0x30
 8008260:	46bb      	mov	fp, r7
 8008262:	b975      	cbnz	r5, 8008282 <_dtoa_r+0x42>
 8008264:	2010      	movs	r0, #16
 8008266:	f000 ff17 	bl	8009098 <malloc>
 800826a:	4602      	mov	r2, r0
 800826c:	6260      	str	r0, [r4, #36]	; 0x24
 800826e:	b920      	cbnz	r0, 800827a <_dtoa_r+0x3a>
 8008270:	4ba7      	ldr	r3, [pc, #668]	; (8008510 <_dtoa_r+0x2d0>)
 8008272:	21ea      	movs	r1, #234	; 0xea
 8008274:	48a7      	ldr	r0, [pc, #668]	; (8008514 <_dtoa_r+0x2d4>)
 8008276:	f001 fc75 	bl	8009b64 <__assert_func>
 800827a:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800827e:	6005      	str	r5, [r0, #0]
 8008280:	60c5      	str	r5, [r0, #12]
 8008282:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008284:	6819      	ldr	r1, [r3, #0]
 8008286:	b151      	cbz	r1, 800829e <_dtoa_r+0x5e>
 8008288:	685a      	ldr	r2, [r3, #4]
 800828a:	604a      	str	r2, [r1, #4]
 800828c:	2301      	movs	r3, #1
 800828e:	4093      	lsls	r3, r2
 8008290:	608b      	str	r3, [r1, #8]
 8008292:	4620      	mov	r0, r4
 8008294:	f000 ff54 	bl	8009140 <_Bfree>
 8008298:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800829a:	2200      	movs	r2, #0
 800829c:	601a      	str	r2, [r3, #0]
 800829e:	1e3b      	subs	r3, r7, #0
 80082a0:	bfaa      	itet	ge
 80082a2:	2300      	movge	r3, #0
 80082a4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80082a8:	f8c8 3000 	strge.w	r3, [r8]
 80082ac:	4b9a      	ldr	r3, [pc, #616]	; (8008518 <_dtoa_r+0x2d8>)
 80082ae:	bfbc      	itt	lt
 80082b0:	2201      	movlt	r2, #1
 80082b2:	f8c8 2000 	strlt.w	r2, [r8]
 80082b6:	ea33 030b 	bics.w	r3, r3, fp
 80082ba:	d11b      	bne.n	80082f4 <_dtoa_r+0xb4>
 80082bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80082be:	f242 730f 	movw	r3, #9999	; 0x270f
 80082c2:	6013      	str	r3, [r2, #0]
 80082c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80082c8:	4333      	orrs	r3, r6
 80082ca:	f000 8592 	beq.w	8008df2 <_dtoa_r+0xbb2>
 80082ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80082d0:	b963      	cbnz	r3, 80082ec <_dtoa_r+0xac>
 80082d2:	4b92      	ldr	r3, [pc, #584]	; (800851c <_dtoa_r+0x2dc>)
 80082d4:	e022      	b.n	800831c <_dtoa_r+0xdc>
 80082d6:	4b92      	ldr	r3, [pc, #584]	; (8008520 <_dtoa_r+0x2e0>)
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	3308      	adds	r3, #8
 80082dc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80082de:	6013      	str	r3, [r2, #0]
 80082e0:	9801      	ldr	r0, [sp, #4]
 80082e2:	b013      	add	sp, #76	; 0x4c
 80082e4:	ecbd 8b04 	vpop	{d8-d9}
 80082e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ec:	4b8b      	ldr	r3, [pc, #556]	; (800851c <_dtoa_r+0x2dc>)
 80082ee:	9301      	str	r3, [sp, #4]
 80082f0:	3303      	adds	r3, #3
 80082f2:	e7f3      	b.n	80082dc <_dtoa_r+0x9c>
 80082f4:	2200      	movs	r2, #0
 80082f6:	2300      	movs	r3, #0
 80082f8:	4650      	mov	r0, sl
 80082fa:	4659      	mov	r1, fp
 80082fc:	f7f8 fbe4 	bl	8000ac8 <__aeabi_dcmpeq>
 8008300:	ec4b ab19 	vmov	d9, sl, fp
 8008304:	4680      	mov	r8, r0
 8008306:	b158      	cbz	r0, 8008320 <_dtoa_r+0xe0>
 8008308:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800830a:	2301      	movs	r3, #1
 800830c:	6013      	str	r3, [r2, #0]
 800830e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008310:	2b00      	cmp	r3, #0
 8008312:	f000 856b 	beq.w	8008dec <_dtoa_r+0xbac>
 8008316:	4883      	ldr	r0, [pc, #524]	; (8008524 <_dtoa_r+0x2e4>)
 8008318:	6018      	str	r0, [r3, #0]
 800831a:	1e43      	subs	r3, r0, #1
 800831c:	9301      	str	r3, [sp, #4]
 800831e:	e7df      	b.n	80082e0 <_dtoa_r+0xa0>
 8008320:	ec4b ab10 	vmov	d0, sl, fp
 8008324:	aa10      	add	r2, sp, #64	; 0x40
 8008326:	a911      	add	r1, sp, #68	; 0x44
 8008328:	4620      	mov	r0, r4
 800832a:	f001 f9f1 	bl	8009710 <__d2b>
 800832e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8008332:	ee08 0a10 	vmov	s16, r0
 8008336:	2d00      	cmp	r5, #0
 8008338:	f000 8084 	beq.w	8008444 <_dtoa_r+0x204>
 800833c:	ee19 3a90 	vmov	r3, s19
 8008340:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008344:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8008348:	4656      	mov	r6, sl
 800834a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800834e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8008352:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8008356:	4b74      	ldr	r3, [pc, #464]	; (8008528 <_dtoa_r+0x2e8>)
 8008358:	2200      	movs	r2, #0
 800835a:	4630      	mov	r0, r6
 800835c:	4639      	mov	r1, r7
 800835e:	f7f7 ff93 	bl	8000288 <__aeabi_dsub>
 8008362:	a365      	add	r3, pc, #404	; (adr r3, 80084f8 <_dtoa_r+0x2b8>)
 8008364:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008368:	f7f8 f946 	bl	80005f8 <__aeabi_dmul>
 800836c:	a364      	add	r3, pc, #400	; (adr r3, 8008500 <_dtoa_r+0x2c0>)
 800836e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008372:	f7f7 ff8b 	bl	800028c <__adddf3>
 8008376:	4606      	mov	r6, r0
 8008378:	4628      	mov	r0, r5
 800837a:	460f      	mov	r7, r1
 800837c:	f7f8 f8d2 	bl	8000524 <__aeabi_i2d>
 8008380:	a361      	add	r3, pc, #388	; (adr r3, 8008508 <_dtoa_r+0x2c8>)
 8008382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008386:	f7f8 f937 	bl	80005f8 <__aeabi_dmul>
 800838a:	4602      	mov	r2, r0
 800838c:	460b      	mov	r3, r1
 800838e:	4630      	mov	r0, r6
 8008390:	4639      	mov	r1, r7
 8008392:	f7f7 ff7b 	bl	800028c <__adddf3>
 8008396:	4606      	mov	r6, r0
 8008398:	460f      	mov	r7, r1
 800839a:	f7f8 fbdd 	bl	8000b58 <__aeabi_d2iz>
 800839e:	2200      	movs	r2, #0
 80083a0:	9000      	str	r0, [sp, #0]
 80083a2:	2300      	movs	r3, #0
 80083a4:	4630      	mov	r0, r6
 80083a6:	4639      	mov	r1, r7
 80083a8:	f7f8 fb98 	bl	8000adc <__aeabi_dcmplt>
 80083ac:	b150      	cbz	r0, 80083c4 <_dtoa_r+0x184>
 80083ae:	9800      	ldr	r0, [sp, #0]
 80083b0:	f7f8 f8b8 	bl	8000524 <__aeabi_i2d>
 80083b4:	4632      	mov	r2, r6
 80083b6:	463b      	mov	r3, r7
 80083b8:	f7f8 fb86 	bl	8000ac8 <__aeabi_dcmpeq>
 80083bc:	b910      	cbnz	r0, 80083c4 <_dtoa_r+0x184>
 80083be:	9b00      	ldr	r3, [sp, #0]
 80083c0:	3b01      	subs	r3, #1
 80083c2:	9300      	str	r3, [sp, #0]
 80083c4:	9b00      	ldr	r3, [sp, #0]
 80083c6:	2b16      	cmp	r3, #22
 80083c8:	d85a      	bhi.n	8008480 <_dtoa_r+0x240>
 80083ca:	9a00      	ldr	r2, [sp, #0]
 80083cc:	4b57      	ldr	r3, [pc, #348]	; (800852c <_dtoa_r+0x2ec>)
 80083ce:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80083d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d6:	ec51 0b19 	vmov	r0, r1, d9
 80083da:	f7f8 fb7f 	bl	8000adc <__aeabi_dcmplt>
 80083de:	2800      	cmp	r0, #0
 80083e0:	d050      	beq.n	8008484 <_dtoa_r+0x244>
 80083e2:	9b00      	ldr	r3, [sp, #0]
 80083e4:	3b01      	subs	r3, #1
 80083e6:	9300      	str	r3, [sp, #0]
 80083e8:	2300      	movs	r3, #0
 80083ea:	930b      	str	r3, [sp, #44]	; 0x2c
 80083ec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80083ee:	1b5d      	subs	r5, r3, r5
 80083f0:	1e6b      	subs	r3, r5, #1
 80083f2:	9305      	str	r3, [sp, #20]
 80083f4:	bf45      	ittet	mi
 80083f6:	f1c5 0301 	rsbmi	r3, r5, #1
 80083fa:	9304      	strmi	r3, [sp, #16]
 80083fc:	2300      	movpl	r3, #0
 80083fe:	2300      	movmi	r3, #0
 8008400:	bf4c      	ite	mi
 8008402:	9305      	strmi	r3, [sp, #20]
 8008404:	9304      	strpl	r3, [sp, #16]
 8008406:	9b00      	ldr	r3, [sp, #0]
 8008408:	2b00      	cmp	r3, #0
 800840a:	db3d      	blt.n	8008488 <_dtoa_r+0x248>
 800840c:	9b05      	ldr	r3, [sp, #20]
 800840e:	9a00      	ldr	r2, [sp, #0]
 8008410:	920a      	str	r2, [sp, #40]	; 0x28
 8008412:	4413      	add	r3, r2
 8008414:	9305      	str	r3, [sp, #20]
 8008416:	2300      	movs	r3, #0
 8008418:	9307      	str	r3, [sp, #28]
 800841a:	9b06      	ldr	r3, [sp, #24]
 800841c:	2b09      	cmp	r3, #9
 800841e:	f200 8089 	bhi.w	8008534 <_dtoa_r+0x2f4>
 8008422:	2b05      	cmp	r3, #5
 8008424:	bfc4      	itt	gt
 8008426:	3b04      	subgt	r3, #4
 8008428:	9306      	strgt	r3, [sp, #24]
 800842a:	9b06      	ldr	r3, [sp, #24]
 800842c:	f1a3 0302 	sub.w	r3, r3, #2
 8008430:	bfcc      	ite	gt
 8008432:	2500      	movgt	r5, #0
 8008434:	2501      	movle	r5, #1
 8008436:	2b03      	cmp	r3, #3
 8008438:	f200 8087 	bhi.w	800854a <_dtoa_r+0x30a>
 800843c:	e8df f003 	tbb	[pc, r3]
 8008440:	59383a2d 	.word	0x59383a2d
 8008444:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8008448:	441d      	add	r5, r3
 800844a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800844e:	2b20      	cmp	r3, #32
 8008450:	bfc1      	itttt	gt
 8008452:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8008456:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800845a:	fa0b f303 	lslgt.w	r3, fp, r3
 800845e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8008462:	bfda      	itte	le
 8008464:	f1c3 0320 	rsble	r3, r3, #32
 8008468:	fa06 f003 	lslle.w	r0, r6, r3
 800846c:	4318      	orrgt	r0, r3
 800846e:	f7f8 f849 	bl	8000504 <__aeabi_ui2d>
 8008472:	2301      	movs	r3, #1
 8008474:	4606      	mov	r6, r0
 8008476:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800847a:	3d01      	subs	r5, #1
 800847c:	930e      	str	r3, [sp, #56]	; 0x38
 800847e:	e76a      	b.n	8008356 <_dtoa_r+0x116>
 8008480:	2301      	movs	r3, #1
 8008482:	e7b2      	b.n	80083ea <_dtoa_r+0x1aa>
 8008484:	900b      	str	r0, [sp, #44]	; 0x2c
 8008486:	e7b1      	b.n	80083ec <_dtoa_r+0x1ac>
 8008488:	9b04      	ldr	r3, [sp, #16]
 800848a:	9a00      	ldr	r2, [sp, #0]
 800848c:	1a9b      	subs	r3, r3, r2
 800848e:	9304      	str	r3, [sp, #16]
 8008490:	4253      	negs	r3, r2
 8008492:	9307      	str	r3, [sp, #28]
 8008494:	2300      	movs	r3, #0
 8008496:	930a      	str	r3, [sp, #40]	; 0x28
 8008498:	e7bf      	b.n	800841a <_dtoa_r+0x1da>
 800849a:	2300      	movs	r3, #0
 800849c:	9308      	str	r3, [sp, #32]
 800849e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	dc55      	bgt.n	8008550 <_dtoa_r+0x310>
 80084a4:	2301      	movs	r3, #1
 80084a6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80084aa:	461a      	mov	r2, r3
 80084ac:	9209      	str	r2, [sp, #36]	; 0x24
 80084ae:	e00c      	b.n	80084ca <_dtoa_r+0x28a>
 80084b0:	2301      	movs	r3, #1
 80084b2:	e7f3      	b.n	800849c <_dtoa_r+0x25c>
 80084b4:	2300      	movs	r3, #0
 80084b6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80084b8:	9308      	str	r3, [sp, #32]
 80084ba:	9b00      	ldr	r3, [sp, #0]
 80084bc:	4413      	add	r3, r2
 80084be:	9302      	str	r3, [sp, #8]
 80084c0:	3301      	adds	r3, #1
 80084c2:	2b01      	cmp	r3, #1
 80084c4:	9303      	str	r3, [sp, #12]
 80084c6:	bfb8      	it	lt
 80084c8:	2301      	movlt	r3, #1
 80084ca:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80084cc:	2200      	movs	r2, #0
 80084ce:	6042      	str	r2, [r0, #4]
 80084d0:	2204      	movs	r2, #4
 80084d2:	f102 0614 	add.w	r6, r2, #20
 80084d6:	429e      	cmp	r6, r3
 80084d8:	6841      	ldr	r1, [r0, #4]
 80084da:	d93d      	bls.n	8008558 <_dtoa_r+0x318>
 80084dc:	4620      	mov	r0, r4
 80084de:	f000 fdef 	bl	80090c0 <_Balloc>
 80084e2:	9001      	str	r0, [sp, #4]
 80084e4:	2800      	cmp	r0, #0
 80084e6:	d13b      	bne.n	8008560 <_dtoa_r+0x320>
 80084e8:	4b11      	ldr	r3, [pc, #68]	; (8008530 <_dtoa_r+0x2f0>)
 80084ea:	4602      	mov	r2, r0
 80084ec:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80084f0:	e6c0      	b.n	8008274 <_dtoa_r+0x34>
 80084f2:	2301      	movs	r3, #1
 80084f4:	e7df      	b.n	80084b6 <_dtoa_r+0x276>
 80084f6:	bf00      	nop
 80084f8:	636f4361 	.word	0x636f4361
 80084fc:	3fd287a7 	.word	0x3fd287a7
 8008500:	8b60c8b3 	.word	0x8b60c8b3
 8008504:	3fc68a28 	.word	0x3fc68a28
 8008508:	509f79fb 	.word	0x509f79fb
 800850c:	3fd34413 	.word	0x3fd34413
 8008510:	0800a09d 	.word	0x0800a09d
 8008514:	0800a0b4 	.word	0x0800a0b4
 8008518:	7ff00000 	.word	0x7ff00000
 800851c:	0800a099 	.word	0x0800a099
 8008520:	0800a090 	.word	0x0800a090
 8008524:	0800a06d 	.word	0x0800a06d
 8008528:	3ff80000 	.word	0x3ff80000
 800852c:	0800a1a8 	.word	0x0800a1a8
 8008530:	0800a10f 	.word	0x0800a10f
 8008534:	2501      	movs	r5, #1
 8008536:	2300      	movs	r3, #0
 8008538:	9306      	str	r3, [sp, #24]
 800853a:	9508      	str	r5, [sp, #32]
 800853c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008540:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008544:	2200      	movs	r2, #0
 8008546:	2312      	movs	r3, #18
 8008548:	e7b0      	b.n	80084ac <_dtoa_r+0x26c>
 800854a:	2301      	movs	r3, #1
 800854c:	9308      	str	r3, [sp, #32]
 800854e:	e7f5      	b.n	800853c <_dtoa_r+0x2fc>
 8008550:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008552:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8008556:	e7b8      	b.n	80084ca <_dtoa_r+0x28a>
 8008558:	3101      	adds	r1, #1
 800855a:	6041      	str	r1, [r0, #4]
 800855c:	0052      	lsls	r2, r2, #1
 800855e:	e7b8      	b.n	80084d2 <_dtoa_r+0x292>
 8008560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008562:	9a01      	ldr	r2, [sp, #4]
 8008564:	601a      	str	r2, [r3, #0]
 8008566:	9b03      	ldr	r3, [sp, #12]
 8008568:	2b0e      	cmp	r3, #14
 800856a:	f200 809d 	bhi.w	80086a8 <_dtoa_r+0x468>
 800856e:	2d00      	cmp	r5, #0
 8008570:	f000 809a 	beq.w	80086a8 <_dtoa_r+0x468>
 8008574:	9b00      	ldr	r3, [sp, #0]
 8008576:	2b00      	cmp	r3, #0
 8008578:	dd32      	ble.n	80085e0 <_dtoa_r+0x3a0>
 800857a:	4ab7      	ldr	r2, [pc, #732]	; (8008858 <_dtoa_r+0x618>)
 800857c:	f003 030f 	and.w	r3, r3, #15
 8008580:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008584:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008588:	9b00      	ldr	r3, [sp, #0]
 800858a:	05d8      	lsls	r0, r3, #23
 800858c:	ea4f 1723 	mov.w	r7, r3, asr #4
 8008590:	d516      	bpl.n	80085c0 <_dtoa_r+0x380>
 8008592:	4bb2      	ldr	r3, [pc, #712]	; (800885c <_dtoa_r+0x61c>)
 8008594:	ec51 0b19 	vmov	r0, r1, d9
 8008598:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800859c:	f7f8 f956 	bl	800084c <__aeabi_ddiv>
 80085a0:	f007 070f 	and.w	r7, r7, #15
 80085a4:	4682      	mov	sl, r0
 80085a6:	468b      	mov	fp, r1
 80085a8:	2503      	movs	r5, #3
 80085aa:	4eac      	ldr	r6, [pc, #688]	; (800885c <_dtoa_r+0x61c>)
 80085ac:	b957      	cbnz	r7, 80085c4 <_dtoa_r+0x384>
 80085ae:	4642      	mov	r2, r8
 80085b0:	464b      	mov	r3, r9
 80085b2:	4650      	mov	r0, sl
 80085b4:	4659      	mov	r1, fp
 80085b6:	f7f8 f949 	bl	800084c <__aeabi_ddiv>
 80085ba:	4682      	mov	sl, r0
 80085bc:	468b      	mov	fp, r1
 80085be:	e028      	b.n	8008612 <_dtoa_r+0x3d2>
 80085c0:	2502      	movs	r5, #2
 80085c2:	e7f2      	b.n	80085aa <_dtoa_r+0x36a>
 80085c4:	07f9      	lsls	r1, r7, #31
 80085c6:	d508      	bpl.n	80085da <_dtoa_r+0x39a>
 80085c8:	4640      	mov	r0, r8
 80085ca:	4649      	mov	r1, r9
 80085cc:	e9d6 2300 	ldrd	r2, r3, [r6]
 80085d0:	f7f8 f812 	bl	80005f8 <__aeabi_dmul>
 80085d4:	3501      	adds	r5, #1
 80085d6:	4680      	mov	r8, r0
 80085d8:	4689      	mov	r9, r1
 80085da:	107f      	asrs	r7, r7, #1
 80085dc:	3608      	adds	r6, #8
 80085de:	e7e5      	b.n	80085ac <_dtoa_r+0x36c>
 80085e0:	f000 809b 	beq.w	800871a <_dtoa_r+0x4da>
 80085e4:	9b00      	ldr	r3, [sp, #0]
 80085e6:	4f9d      	ldr	r7, [pc, #628]	; (800885c <_dtoa_r+0x61c>)
 80085e8:	425e      	negs	r6, r3
 80085ea:	4b9b      	ldr	r3, [pc, #620]	; (8008858 <_dtoa_r+0x618>)
 80085ec:	f006 020f 	and.w	r2, r6, #15
 80085f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80085f8:	ec51 0b19 	vmov	r0, r1, d9
 80085fc:	f7f7 fffc 	bl	80005f8 <__aeabi_dmul>
 8008600:	1136      	asrs	r6, r6, #4
 8008602:	4682      	mov	sl, r0
 8008604:	468b      	mov	fp, r1
 8008606:	2300      	movs	r3, #0
 8008608:	2502      	movs	r5, #2
 800860a:	2e00      	cmp	r6, #0
 800860c:	d17a      	bne.n	8008704 <_dtoa_r+0x4c4>
 800860e:	2b00      	cmp	r3, #0
 8008610:	d1d3      	bne.n	80085ba <_dtoa_r+0x37a>
 8008612:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008614:	2b00      	cmp	r3, #0
 8008616:	f000 8082 	beq.w	800871e <_dtoa_r+0x4de>
 800861a:	4b91      	ldr	r3, [pc, #580]	; (8008860 <_dtoa_r+0x620>)
 800861c:	2200      	movs	r2, #0
 800861e:	4650      	mov	r0, sl
 8008620:	4659      	mov	r1, fp
 8008622:	f7f8 fa5b 	bl	8000adc <__aeabi_dcmplt>
 8008626:	2800      	cmp	r0, #0
 8008628:	d079      	beq.n	800871e <_dtoa_r+0x4de>
 800862a:	9b03      	ldr	r3, [sp, #12]
 800862c:	2b00      	cmp	r3, #0
 800862e:	d076      	beq.n	800871e <_dtoa_r+0x4de>
 8008630:	9b02      	ldr	r3, [sp, #8]
 8008632:	2b00      	cmp	r3, #0
 8008634:	dd36      	ble.n	80086a4 <_dtoa_r+0x464>
 8008636:	9b00      	ldr	r3, [sp, #0]
 8008638:	4650      	mov	r0, sl
 800863a:	4659      	mov	r1, fp
 800863c:	1e5f      	subs	r7, r3, #1
 800863e:	2200      	movs	r2, #0
 8008640:	4b88      	ldr	r3, [pc, #544]	; (8008864 <_dtoa_r+0x624>)
 8008642:	f7f7 ffd9 	bl	80005f8 <__aeabi_dmul>
 8008646:	9e02      	ldr	r6, [sp, #8]
 8008648:	4682      	mov	sl, r0
 800864a:	468b      	mov	fp, r1
 800864c:	3501      	adds	r5, #1
 800864e:	4628      	mov	r0, r5
 8008650:	f7f7 ff68 	bl	8000524 <__aeabi_i2d>
 8008654:	4652      	mov	r2, sl
 8008656:	465b      	mov	r3, fp
 8008658:	f7f7 ffce 	bl	80005f8 <__aeabi_dmul>
 800865c:	4b82      	ldr	r3, [pc, #520]	; (8008868 <_dtoa_r+0x628>)
 800865e:	2200      	movs	r2, #0
 8008660:	f7f7 fe14 	bl	800028c <__adddf3>
 8008664:	46d0      	mov	r8, sl
 8008666:	46d9      	mov	r9, fp
 8008668:	4682      	mov	sl, r0
 800866a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800866e:	2e00      	cmp	r6, #0
 8008670:	d158      	bne.n	8008724 <_dtoa_r+0x4e4>
 8008672:	4b7e      	ldr	r3, [pc, #504]	; (800886c <_dtoa_r+0x62c>)
 8008674:	2200      	movs	r2, #0
 8008676:	4640      	mov	r0, r8
 8008678:	4649      	mov	r1, r9
 800867a:	f7f7 fe05 	bl	8000288 <__aeabi_dsub>
 800867e:	4652      	mov	r2, sl
 8008680:	465b      	mov	r3, fp
 8008682:	4680      	mov	r8, r0
 8008684:	4689      	mov	r9, r1
 8008686:	f7f8 fa47 	bl	8000b18 <__aeabi_dcmpgt>
 800868a:	2800      	cmp	r0, #0
 800868c:	f040 8295 	bne.w	8008bba <_dtoa_r+0x97a>
 8008690:	4652      	mov	r2, sl
 8008692:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8008696:	4640      	mov	r0, r8
 8008698:	4649      	mov	r1, r9
 800869a:	f7f8 fa1f 	bl	8000adc <__aeabi_dcmplt>
 800869e:	2800      	cmp	r0, #0
 80086a0:	f040 8289 	bne.w	8008bb6 <_dtoa_r+0x976>
 80086a4:	ec5b ab19 	vmov	sl, fp, d9
 80086a8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	f2c0 8148 	blt.w	8008940 <_dtoa_r+0x700>
 80086b0:	9a00      	ldr	r2, [sp, #0]
 80086b2:	2a0e      	cmp	r2, #14
 80086b4:	f300 8144 	bgt.w	8008940 <_dtoa_r+0x700>
 80086b8:	4b67      	ldr	r3, [pc, #412]	; (8008858 <_dtoa_r+0x618>)
 80086ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80086be:	e9d3 8900 	ldrd	r8, r9, [r3]
 80086c2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80086c4:	2b00      	cmp	r3, #0
 80086c6:	f280 80d5 	bge.w	8008874 <_dtoa_r+0x634>
 80086ca:	9b03      	ldr	r3, [sp, #12]
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f300 80d1 	bgt.w	8008874 <_dtoa_r+0x634>
 80086d2:	f040 826f 	bne.w	8008bb4 <_dtoa_r+0x974>
 80086d6:	4b65      	ldr	r3, [pc, #404]	; (800886c <_dtoa_r+0x62c>)
 80086d8:	2200      	movs	r2, #0
 80086da:	4640      	mov	r0, r8
 80086dc:	4649      	mov	r1, r9
 80086de:	f7f7 ff8b 	bl	80005f8 <__aeabi_dmul>
 80086e2:	4652      	mov	r2, sl
 80086e4:	465b      	mov	r3, fp
 80086e6:	f7f8 fa0d 	bl	8000b04 <__aeabi_dcmpge>
 80086ea:	9e03      	ldr	r6, [sp, #12]
 80086ec:	4637      	mov	r7, r6
 80086ee:	2800      	cmp	r0, #0
 80086f0:	f040 8245 	bne.w	8008b7e <_dtoa_r+0x93e>
 80086f4:	9d01      	ldr	r5, [sp, #4]
 80086f6:	2331      	movs	r3, #49	; 0x31
 80086f8:	f805 3b01 	strb.w	r3, [r5], #1
 80086fc:	9b00      	ldr	r3, [sp, #0]
 80086fe:	3301      	adds	r3, #1
 8008700:	9300      	str	r3, [sp, #0]
 8008702:	e240      	b.n	8008b86 <_dtoa_r+0x946>
 8008704:	07f2      	lsls	r2, r6, #31
 8008706:	d505      	bpl.n	8008714 <_dtoa_r+0x4d4>
 8008708:	e9d7 2300 	ldrd	r2, r3, [r7]
 800870c:	f7f7 ff74 	bl	80005f8 <__aeabi_dmul>
 8008710:	3501      	adds	r5, #1
 8008712:	2301      	movs	r3, #1
 8008714:	1076      	asrs	r6, r6, #1
 8008716:	3708      	adds	r7, #8
 8008718:	e777      	b.n	800860a <_dtoa_r+0x3ca>
 800871a:	2502      	movs	r5, #2
 800871c:	e779      	b.n	8008612 <_dtoa_r+0x3d2>
 800871e:	9f00      	ldr	r7, [sp, #0]
 8008720:	9e03      	ldr	r6, [sp, #12]
 8008722:	e794      	b.n	800864e <_dtoa_r+0x40e>
 8008724:	9901      	ldr	r1, [sp, #4]
 8008726:	4b4c      	ldr	r3, [pc, #304]	; (8008858 <_dtoa_r+0x618>)
 8008728:	4431      	add	r1, r6
 800872a:	910d      	str	r1, [sp, #52]	; 0x34
 800872c:	9908      	ldr	r1, [sp, #32]
 800872e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8008732:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008736:	2900      	cmp	r1, #0
 8008738:	d043      	beq.n	80087c2 <_dtoa_r+0x582>
 800873a:	494d      	ldr	r1, [pc, #308]	; (8008870 <_dtoa_r+0x630>)
 800873c:	2000      	movs	r0, #0
 800873e:	f7f8 f885 	bl	800084c <__aeabi_ddiv>
 8008742:	4652      	mov	r2, sl
 8008744:	465b      	mov	r3, fp
 8008746:	f7f7 fd9f 	bl	8000288 <__aeabi_dsub>
 800874a:	9d01      	ldr	r5, [sp, #4]
 800874c:	4682      	mov	sl, r0
 800874e:	468b      	mov	fp, r1
 8008750:	4649      	mov	r1, r9
 8008752:	4640      	mov	r0, r8
 8008754:	f7f8 fa00 	bl	8000b58 <__aeabi_d2iz>
 8008758:	4606      	mov	r6, r0
 800875a:	f7f7 fee3 	bl	8000524 <__aeabi_i2d>
 800875e:	4602      	mov	r2, r0
 8008760:	460b      	mov	r3, r1
 8008762:	4640      	mov	r0, r8
 8008764:	4649      	mov	r1, r9
 8008766:	f7f7 fd8f 	bl	8000288 <__aeabi_dsub>
 800876a:	3630      	adds	r6, #48	; 0x30
 800876c:	f805 6b01 	strb.w	r6, [r5], #1
 8008770:	4652      	mov	r2, sl
 8008772:	465b      	mov	r3, fp
 8008774:	4680      	mov	r8, r0
 8008776:	4689      	mov	r9, r1
 8008778:	f7f8 f9b0 	bl	8000adc <__aeabi_dcmplt>
 800877c:	2800      	cmp	r0, #0
 800877e:	d163      	bne.n	8008848 <_dtoa_r+0x608>
 8008780:	4642      	mov	r2, r8
 8008782:	464b      	mov	r3, r9
 8008784:	4936      	ldr	r1, [pc, #216]	; (8008860 <_dtoa_r+0x620>)
 8008786:	2000      	movs	r0, #0
 8008788:	f7f7 fd7e 	bl	8000288 <__aeabi_dsub>
 800878c:	4652      	mov	r2, sl
 800878e:	465b      	mov	r3, fp
 8008790:	f7f8 f9a4 	bl	8000adc <__aeabi_dcmplt>
 8008794:	2800      	cmp	r0, #0
 8008796:	f040 80b5 	bne.w	8008904 <_dtoa_r+0x6c4>
 800879a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800879c:	429d      	cmp	r5, r3
 800879e:	d081      	beq.n	80086a4 <_dtoa_r+0x464>
 80087a0:	4b30      	ldr	r3, [pc, #192]	; (8008864 <_dtoa_r+0x624>)
 80087a2:	2200      	movs	r2, #0
 80087a4:	4650      	mov	r0, sl
 80087a6:	4659      	mov	r1, fp
 80087a8:	f7f7 ff26 	bl	80005f8 <__aeabi_dmul>
 80087ac:	4b2d      	ldr	r3, [pc, #180]	; (8008864 <_dtoa_r+0x624>)
 80087ae:	4682      	mov	sl, r0
 80087b0:	468b      	mov	fp, r1
 80087b2:	4640      	mov	r0, r8
 80087b4:	4649      	mov	r1, r9
 80087b6:	2200      	movs	r2, #0
 80087b8:	f7f7 ff1e 	bl	80005f8 <__aeabi_dmul>
 80087bc:	4680      	mov	r8, r0
 80087be:	4689      	mov	r9, r1
 80087c0:	e7c6      	b.n	8008750 <_dtoa_r+0x510>
 80087c2:	4650      	mov	r0, sl
 80087c4:	4659      	mov	r1, fp
 80087c6:	f7f7 ff17 	bl	80005f8 <__aeabi_dmul>
 80087ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087cc:	9d01      	ldr	r5, [sp, #4]
 80087ce:	930f      	str	r3, [sp, #60]	; 0x3c
 80087d0:	4682      	mov	sl, r0
 80087d2:	468b      	mov	fp, r1
 80087d4:	4649      	mov	r1, r9
 80087d6:	4640      	mov	r0, r8
 80087d8:	f7f8 f9be 	bl	8000b58 <__aeabi_d2iz>
 80087dc:	4606      	mov	r6, r0
 80087de:	f7f7 fea1 	bl	8000524 <__aeabi_i2d>
 80087e2:	3630      	adds	r6, #48	; 0x30
 80087e4:	4602      	mov	r2, r0
 80087e6:	460b      	mov	r3, r1
 80087e8:	4640      	mov	r0, r8
 80087ea:	4649      	mov	r1, r9
 80087ec:	f7f7 fd4c 	bl	8000288 <__aeabi_dsub>
 80087f0:	f805 6b01 	strb.w	r6, [r5], #1
 80087f4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80087f6:	429d      	cmp	r5, r3
 80087f8:	4680      	mov	r8, r0
 80087fa:	4689      	mov	r9, r1
 80087fc:	f04f 0200 	mov.w	r2, #0
 8008800:	d124      	bne.n	800884c <_dtoa_r+0x60c>
 8008802:	4b1b      	ldr	r3, [pc, #108]	; (8008870 <_dtoa_r+0x630>)
 8008804:	4650      	mov	r0, sl
 8008806:	4659      	mov	r1, fp
 8008808:	f7f7 fd40 	bl	800028c <__adddf3>
 800880c:	4602      	mov	r2, r0
 800880e:	460b      	mov	r3, r1
 8008810:	4640      	mov	r0, r8
 8008812:	4649      	mov	r1, r9
 8008814:	f7f8 f980 	bl	8000b18 <__aeabi_dcmpgt>
 8008818:	2800      	cmp	r0, #0
 800881a:	d173      	bne.n	8008904 <_dtoa_r+0x6c4>
 800881c:	4652      	mov	r2, sl
 800881e:	465b      	mov	r3, fp
 8008820:	4913      	ldr	r1, [pc, #76]	; (8008870 <_dtoa_r+0x630>)
 8008822:	2000      	movs	r0, #0
 8008824:	f7f7 fd30 	bl	8000288 <__aeabi_dsub>
 8008828:	4602      	mov	r2, r0
 800882a:	460b      	mov	r3, r1
 800882c:	4640      	mov	r0, r8
 800882e:	4649      	mov	r1, r9
 8008830:	f7f8 f954 	bl	8000adc <__aeabi_dcmplt>
 8008834:	2800      	cmp	r0, #0
 8008836:	f43f af35 	beq.w	80086a4 <_dtoa_r+0x464>
 800883a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800883c:	1e6b      	subs	r3, r5, #1
 800883e:	930f      	str	r3, [sp, #60]	; 0x3c
 8008840:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008844:	2b30      	cmp	r3, #48	; 0x30
 8008846:	d0f8      	beq.n	800883a <_dtoa_r+0x5fa>
 8008848:	9700      	str	r7, [sp, #0]
 800884a:	e049      	b.n	80088e0 <_dtoa_r+0x6a0>
 800884c:	4b05      	ldr	r3, [pc, #20]	; (8008864 <_dtoa_r+0x624>)
 800884e:	f7f7 fed3 	bl	80005f8 <__aeabi_dmul>
 8008852:	4680      	mov	r8, r0
 8008854:	4689      	mov	r9, r1
 8008856:	e7bd      	b.n	80087d4 <_dtoa_r+0x594>
 8008858:	0800a1a8 	.word	0x0800a1a8
 800885c:	0800a180 	.word	0x0800a180
 8008860:	3ff00000 	.word	0x3ff00000
 8008864:	40240000 	.word	0x40240000
 8008868:	401c0000 	.word	0x401c0000
 800886c:	40140000 	.word	0x40140000
 8008870:	3fe00000 	.word	0x3fe00000
 8008874:	9d01      	ldr	r5, [sp, #4]
 8008876:	4656      	mov	r6, sl
 8008878:	465f      	mov	r7, fp
 800887a:	4642      	mov	r2, r8
 800887c:	464b      	mov	r3, r9
 800887e:	4630      	mov	r0, r6
 8008880:	4639      	mov	r1, r7
 8008882:	f7f7 ffe3 	bl	800084c <__aeabi_ddiv>
 8008886:	f7f8 f967 	bl	8000b58 <__aeabi_d2iz>
 800888a:	4682      	mov	sl, r0
 800888c:	f7f7 fe4a 	bl	8000524 <__aeabi_i2d>
 8008890:	4642      	mov	r2, r8
 8008892:	464b      	mov	r3, r9
 8008894:	f7f7 feb0 	bl	80005f8 <__aeabi_dmul>
 8008898:	4602      	mov	r2, r0
 800889a:	460b      	mov	r3, r1
 800889c:	4630      	mov	r0, r6
 800889e:	4639      	mov	r1, r7
 80088a0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 80088a4:	f7f7 fcf0 	bl	8000288 <__aeabi_dsub>
 80088a8:	f805 6b01 	strb.w	r6, [r5], #1
 80088ac:	9e01      	ldr	r6, [sp, #4]
 80088ae:	9f03      	ldr	r7, [sp, #12]
 80088b0:	1bae      	subs	r6, r5, r6
 80088b2:	42b7      	cmp	r7, r6
 80088b4:	4602      	mov	r2, r0
 80088b6:	460b      	mov	r3, r1
 80088b8:	d135      	bne.n	8008926 <_dtoa_r+0x6e6>
 80088ba:	f7f7 fce7 	bl	800028c <__adddf3>
 80088be:	4642      	mov	r2, r8
 80088c0:	464b      	mov	r3, r9
 80088c2:	4606      	mov	r6, r0
 80088c4:	460f      	mov	r7, r1
 80088c6:	f7f8 f927 	bl	8000b18 <__aeabi_dcmpgt>
 80088ca:	b9d0      	cbnz	r0, 8008902 <_dtoa_r+0x6c2>
 80088cc:	4642      	mov	r2, r8
 80088ce:	464b      	mov	r3, r9
 80088d0:	4630      	mov	r0, r6
 80088d2:	4639      	mov	r1, r7
 80088d4:	f7f8 f8f8 	bl	8000ac8 <__aeabi_dcmpeq>
 80088d8:	b110      	cbz	r0, 80088e0 <_dtoa_r+0x6a0>
 80088da:	f01a 0f01 	tst.w	sl, #1
 80088de:	d110      	bne.n	8008902 <_dtoa_r+0x6c2>
 80088e0:	4620      	mov	r0, r4
 80088e2:	ee18 1a10 	vmov	r1, s16
 80088e6:	f000 fc2b 	bl	8009140 <_Bfree>
 80088ea:	2300      	movs	r3, #0
 80088ec:	9800      	ldr	r0, [sp, #0]
 80088ee:	702b      	strb	r3, [r5, #0]
 80088f0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80088f2:	3001      	adds	r0, #1
 80088f4:	6018      	str	r0, [r3, #0]
 80088f6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80088f8:	2b00      	cmp	r3, #0
 80088fa:	f43f acf1 	beq.w	80082e0 <_dtoa_r+0xa0>
 80088fe:	601d      	str	r5, [r3, #0]
 8008900:	e4ee      	b.n	80082e0 <_dtoa_r+0xa0>
 8008902:	9f00      	ldr	r7, [sp, #0]
 8008904:	462b      	mov	r3, r5
 8008906:	461d      	mov	r5, r3
 8008908:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800890c:	2a39      	cmp	r2, #57	; 0x39
 800890e:	d106      	bne.n	800891e <_dtoa_r+0x6de>
 8008910:	9a01      	ldr	r2, [sp, #4]
 8008912:	429a      	cmp	r2, r3
 8008914:	d1f7      	bne.n	8008906 <_dtoa_r+0x6c6>
 8008916:	9901      	ldr	r1, [sp, #4]
 8008918:	2230      	movs	r2, #48	; 0x30
 800891a:	3701      	adds	r7, #1
 800891c:	700a      	strb	r2, [r1, #0]
 800891e:	781a      	ldrb	r2, [r3, #0]
 8008920:	3201      	adds	r2, #1
 8008922:	701a      	strb	r2, [r3, #0]
 8008924:	e790      	b.n	8008848 <_dtoa_r+0x608>
 8008926:	4ba6      	ldr	r3, [pc, #664]	; (8008bc0 <_dtoa_r+0x980>)
 8008928:	2200      	movs	r2, #0
 800892a:	f7f7 fe65 	bl	80005f8 <__aeabi_dmul>
 800892e:	2200      	movs	r2, #0
 8008930:	2300      	movs	r3, #0
 8008932:	4606      	mov	r6, r0
 8008934:	460f      	mov	r7, r1
 8008936:	f7f8 f8c7 	bl	8000ac8 <__aeabi_dcmpeq>
 800893a:	2800      	cmp	r0, #0
 800893c:	d09d      	beq.n	800887a <_dtoa_r+0x63a>
 800893e:	e7cf      	b.n	80088e0 <_dtoa_r+0x6a0>
 8008940:	9a08      	ldr	r2, [sp, #32]
 8008942:	2a00      	cmp	r2, #0
 8008944:	f000 80d7 	beq.w	8008af6 <_dtoa_r+0x8b6>
 8008948:	9a06      	ldr	r2, [sp, #24]
 800894a:	2a01      	cmp	r2, #1
 800894c:	f300 80ba 	bgt.w	8008ac4 <_dtoa_r+0x884>
 8008950:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8008952:	2a00      	cmp	r2, #0
 8008954:	f000 80b2 	beq.w	8008abc <_dtoa_r+0x87c>
 8008958:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800895c:	9e07      	ldr	r6, [sp, #28]
 800895e:	9d04      	ldr	r5, [sp, #16]
 8008960:	9a04      	ldr	r2, [sp, #16]
 8008962:	441a      	add	r2, r3
 8008964:	9204      	str	r2, [sp, #16]
 8008966:	9a05      	ldr	r2, [sp, #20]
 8008968:	2101      	movs	r1, #1
 800896a:	441a      	add	r2, r3
 800896c:	4620      	mov	r0, r4
 800896e:	9205      	str	r2, [sp, #20]
 8008970:	f000 fc9e 	bl	80092b0 <__i2b>
 8008974:	4607      	mov	r7, r0
 8008976:	2d00      	cmp	r5, #0
 8008978:	dd0c      	ble.n	8008994 <_dtoa_r+0x754>
 800897a:	9b05      	ldr	r3, [sp, #20]
 800897c:	2b00      	cmp	r3, #0
 800897e:	dd09      	ble.n	8008994 <_dtoa_r+0x754>
 8008980:	42ab      	cmp	r3, r5
 8008982:	9a04      	ldr	r2, [sp, #16]
 8008984:	bfa8      	it	ge
 8008986:	462b      	movge	r3, r5
 8008988:	1ad2      	subs	r2, r2, r3
 800898a:	9204      	str	r2, [sp, #16]
 800898c:	9a05      	ldr	r2, [sp, #20]
 800898e:	1aed      	subs	r5, r5, r3
 8008990:	1ad3      	subs	r3, r2, r3
 8008992:	9305      	str	r3, [sp, #20]
 8008994:	9b07      	ldr	r3, [sp, #28]
 8008996:	b31b      	cbz	r3, 80089e0 <_dtoa_r+0x7a0>
 8008998:	9b08      	ldr	r3, [sp, #32]
 800899a:	2b00      	cmp	r3, #0
 800899c:	f000 80af 	beq.w	8008afe <_dtoa_r+0x8be>
 80089a0:	2e00      	cmp	r6, #0
 80089a2:	dd13      	ble.n	80089cc <_dtoa_r+0x78c>
 80089a4:	4639      	mov	r1, r7
 80089a6:	4632      	mov	r2, r6
 80089a8:	4620      	mov	r0, r4
 80089aa:	f000 fd41 	bl	8009430 <__pow5mult>
 80089ae:	ee18 2a10 	vmov	r2, s16
 80089b2:	4601      	mov	r1, r0
 80089b4:	4607      	mov	r7, r0
 80089b6:	4620      	mov	r0, r4
 80089b8:	f000 fc90 	bl	80092dc <__multiply>
 80089bc:	ee18 1a10 	vmov	r1, s16
 80089c0:	4680      	mov	r8, r0
 80089c2:	4620      	mov	r0, r4
 80089c4:	f000 fbbc 	bl	8009140 <_Bfree>
 80089c8:	ee08 8a10 	vmov	s16, r8
 80089cc:	9b07      	ldr	r3, [sp, #28]
 80089ce:	1b9a      	subs	r2, r3, r6
 80089d0:	d006      	beq.n	80089e0 <_dtoa_r+0x7a0>
 80089d2:	ee18 1a10 	vmov	r1, s16
 80089d6:	4620      	mov	r0, r4
 80089d8:	f000 fd2a 	bl	8009430 <__pow5mult>
 80089dc:	ee08 0a10 	vmov	s16, r0
 80089e0:	2101      	movs	r1, #1
 80089e2:	4620      	mov	r0, r4
 80089e4:	f000 fc64 	bl	80092b0 <__i2b>
 80089e8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	4606      	mov	r6, r0
 80089ee:	f340 8088 	ble.w	8008b02 <_dtoa_r+0x8c2>
 80089f2:	461a      	mov	r2, r3
 80089f4:	4601      	mov	r1, r0
 80089f6:	4620      	mov	r0, r4
 80089f8:	f000 fd1a 	bl	8009430 <__pow5mult>
 80089fc:	9b06      	ldr	r3, [sp, #24]
 80089fe:	2b01      	cmp	r3, #1
 8008a00:	4606      	mov	r6, r0
 8008a02:	f340 8081 	ble.w	8008b08 <_dtoa_r+0x8c8>
 8008a06:	f04f 0800 	mov.w	r8, #0
 8008a0a:	6933      	ldr	r3, [r6, #16]
 8008a0c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8008a10:	6918      	ldr	r0, [r3, #16]
 8008a12:	f000 fbfd 	bl	8009210 <__hi0bits>
 8008a16:	f1c0 0020 	rsb	r0, r0, #32
 8008a1a:	9b05      	ldr	r3, [sp, #20]
 8008a1c:	4418      	add	r0, r3
 8008a1e:	f010 001f 	ands.w	r0, r0, #31
 8008a22:	f000 8092 	beq.w	8008b4a <_dtoa_r+0x90a>
 8008a26:	f1c0 0320 	rsb	r3, r0, #32
 8008a2a:	2b04      	cmp	r3, #4
 8008a2c:	f340 808a 	ble.w	8008b44 <_dtoa_r+0x904>
 8008a30:	f1c0 001c 	rsb	r0, r0, #28
 8008a34:	9b04      	ldr	r3, [sp, #16]
 8008a36:	4403      	add	r3, r0
 8008a38:	9304      	str	r3, [sp, #16]
 8008a3a:	9b05      	ldr	r3, [sp, #20]
 8008a3c:	4403      	add	r3, r0
 8008a3e:	4405      	add	r5, r0
 8008a40:	9305      	str	r3, [sp, #20]
 8008a42:	9b04      	ldr	r3, [sp, #16]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	dd07      	ble.n	8008a58 <_dtoa_r+0x818>
 8008a48:	ee18 1a10 	vmov	r1, s16
 8008a4c:	461a      	mov	r2, r3
 8008a4e:	4620      	mov	r0, r4
 8008a50:	f000 fd48 	bl	80094e4 <__lshift>
 8008a54:	ee08 0a10 	vmov	s16, r0
 8008a58:	9b05      	ldr	r3, [sp, #20]
 8008a5a:	2b00      	cmp	r3, #0
 8008a5c:	dd05      	ble.n	8008a6a <_dtoa_r+0x82a>
 8008a5e:	4631      	mov	r1, r6
 8008a60:	461a      	mov	r2, r3
 8008a62:	4620      	mov	r0, r4
 8008a64:	f000 fd3e 	bl	80094e4 <__lshift>
 8008a68:	4606      	mov	r6, r0
 8008a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008a6c:	2b00      	cmp	r3, #0
 8008a6e:	d06e      	beq.n	8008b4e <_dtoa_r+0x90e>
 8008a70:	ee18 0a10 	vmov	r0, s16
 8008a74:	4631      	mov	r1, r6
 8008a76:	f000 fda5 	bl	80095c4 <__mcmp>
 8008a7a:	2800      	cmp	r0, #0
 8008a7c:	da67      	bge.n	8008b4e <_dtoa_r+0x90e>
 8008a7e:	9b00      	ldr	r3, [sp, #0]
 8008a80:	3b01      	subs	r3, #1
 8008a82:	ee18 1a10 	vmov	r1, s16
 8008a86:	9300      	str	r3, [sp, #0]
 8008a88:	220a      	movs	r2, #10
 8008a8a:	2300      	movs	r3, #0
 8008a8c:	4620      	mov	r0, r4
 8008a8e:	f000 fb79 	bl	8009184 <__multadd>
 8008a92:	9b08      	ldr	r3, [sp, #32]
 8008a94:	ee08 0a10 	vmov	s16, r0
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	f000 81b1 	beq.w	8008e00 <_dtoa_r+0xbc0>
 8008a9e:	2300      	movs	r3, #0
 8008aa0:	4639      	mov	r1, r7
 8008aa2:	220a      	movs	r2, #10
 8008aa4:	4620      	mov	r0, r4
 8008aa6:	f000 fb6d 	bl	8009184 <__multadd>
 8008aaa:	9b02      	ldr	r3, [sp, #8]
 8008aac:	2b00      	cmp	r3, #0
 8008aae:	4607      	mov	r7, r0
 8008ab0:	f300 808e 	bgt.w	8008bd0 <_dtoa_r+0x990>
 8008ab4:	9b06      	ldr	r3, [sp, #24]
 8008ab6:	2b02      	cmp	r3, #2
 8008ab8:	dc51      	bgt.n	8008b5e <_dtoa_r+0x91e>
 8008aba:	e089      	b.n	8008bd0 <_dtoa_r+0x990>
 8008abc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8008abe:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008ac2:	e74b      	b.n	800895c <_dtoa_r+0x71c>
 8008ac4:	9b03      	ldr	r3, [sp, #12]
 8008ac6:	1e5e      	subs	r6, r3, #1
 8008ac8:	9b07      	ldr	r3, [sp, #28]
 8008aca:	42b3      	cmp	r3, r6
 8008acc:	bfbf      	itttt	lt
 8008ace:	9b07      	ldrlt	r3, [sp, #28]
 8008ad0:	9607      	strlt	r6, [sp, #28]
 8008ad2:	1af2      	sublt	r2, r6, r3
 8008ad4:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8008ad6:	bfb6      	itet	lt
 8008ad8:	189b      	addlt	r3, r3, r2
 8008ada:	1b9e      	subge	r6, r3, r6
 8008adc:	930a      	strlt	r3, [sp, #40]	; 0x28
 8008ade:	9b03      	ldr	r3, [sp, #12]
 8008ae0:	bfb8      	it	lt
 8008ae2:	2600      	movlt	r6, #0
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	bfb7      	itett	lt
 8008ae8:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8008aec:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8008af0:	1a9d      	sublt	r5, r3, r2
 8008af2:	2300      	movlt	r3, #0
 8008af4:	e734      	b.n	8008960 <_dtoa_r+0x720>
 8008af6:	9e07      	ldr	r6, [sp, #28]
 8008af8:	9d04      	ldr	r5, [sp, #16]
 8008afa:	9f08      	ldr	r7, [sp, #32]
 8008afc:	e73b      	b.n	8008976 <_dtoa_r+0x736>
 8008afe:	9a07      	ldr	r2, [sp, #28]
 8008b00:	e767      	b.n	80089d2 <_dtoa_r+0x792>
 8008b02:	9b06      	ldr	r3, [sp, #24]
 8008b04:	2b01      	cmp	r3, #1
 8008b06:	dc18      	bgt.n	8008b3a <_dtoa_r+0x8fa>
 8008b08:	f1ba 0f00 	cmp.w	sl, #0
 8008b0c:	d115      	bne.n	8008b3a <_dtoa_r+0x8fa>
 8008b0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008b12:	b993      	cbnz	r3, 8008b3a <_dtoa_r+0x8fa>
 8008b14:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008b18:	0d1b      	lsrs	r3, r3, #20
 8008b1a:	051b      	lsls	r3, r3, #20
 8008b1c:	b183      	cbz	r3, 8008b40 <_dtoa_r+0x900>
 8008b1e:	9b04      	ldr	r3, [sp, #16]
 8008b20:	3301      	adds	r3, #1
 8008b22:	9304      	str	r3, [sp, #16]
 8008b24:	9b05      	ldr	r3, [sp, #20]
 8008b26:	3301      	adds	r3, #1
 8008b28:	9305      	str	r3, [sp, #20]
 8008b2a:	f04f 0801 	mov.w	r8, #1
 8008b2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008b30:	2b00      	cmp	r3, #0
 8008b32:	f47f af6a 	bne.w	8008a0a <_dtoa_r+0x7ca>
 8008b36:	2001      	movs	r0, #1
 8008b38:	e76f      	b.n	8008a1a <_dtoa_r+0x7da>
 8008b3a:	f04f 0800 	mov.w	r8, #0
 8008b3e:	e7f6      	b.n	8008b2e <_dtoa_r+0x8ee>
 8008b40:	4698      	mov	r8, r3
 8008b42:	e7f4      	b.n	8008b2e <_dtoa_r+0x8ee>
 8008b44:	f43f af7d 	beq.w	8008a42 <_dtoa_r+0x802>
 8008b48:	4618      	mov	r0, r3
 8008b4a:	301c      	adds	r0, #28
 8008b4c:	e772      	b.n	8008a34 <_dtoa_r+0x7f4>
 8008b4e:	9b03      	ldr	r3, [sp, #12]
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	dc37      	bgt.n	8008bc4 <_dtoa_r+0x984>
 8008b54:	9b06      	ldr	r3, [sp, #24]
 8008b56:	2b02      	cmp	r3, #2
 8008b58:	dd34      	ble.n	8008bc4 <_dtoa_r+0x984>
 8008b5a:	9b03      	ldr	r3, [sp, #12]
 8008b5c:	9302      	str	r3, [sp, #8]
 8008b5e:	9b02      	ldr	r3, [sp, #8]
 8008b60:	b96b      	cbnz	r3, 8008b7e <_dtoa_r+0x93e>
 8008b62:	4631      	mov	r1, r6
 8008b64:	2205      	movs	r2, #5
 8008b66:	4620      	mov	r0, r4
 8008b68:	f000 fb0c 	bl	8009184 <__multadd>
 8008b6c:	4601      	mov	r1, r0
 8008b6e:	4606      	mov	r6, r0
 8008b70:	ee18 0a10 	vmov	r0, s16
 8008b74:	f000 fd26 	bl	80095c4 <__mcmp>
 8008b78:	2800      	cmp	r0, #0
 8008b7a:	f73f adbb 	bgt.w	80086f4 <_dtoa_r+0x4b4>
 8008b7e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008b80:	9d01      	ldr	r5, [sp, #4]
 8008b82:	43db      	mvns	r3, r3
 8008b84:	9300      	str	r3, [sp, #0]
 8008b86:	f04f 0800 	mov.w	r8, #0
 8008b8a:	4631      	mov	r1, r6
 8008b8c:	4620      	mov	r0, r4
 8008b8e:	f000 fad7 	bl	8009140 <_Bfree>
 8008b92:	2f00      	cmp	r7, #0
 8008b94:	f43f aea4 	beq.w	80088e0 <_dtoa_r+0x6a0>
 8008b98:	f1b8 0f00 	cmp.w	r8, #0
 8008b9c:	d005      	beq.n	8008baa <_dtoa_r+0x96a>
 8008b9e:	45b8      	cmp	r8, r7
 8008ba0:	d003      	beq.n	8008baa <_dtoa_r+0x96a>
 8008ba2:	4641      	mov	r1, r8
 8008ba4:	4620      	mov	r0, r4
 8008ba6:	f000 facb 	bl	8009140 <_Bfree>
 8008baa:	4639      	mov	r1, r7
 8008bac:	4620      	mov	r0, r4
 8008bae:	f000 fac7 	bl	8009140 <_Bfree>
 8008bb2:	e695      	b.n	80088e0 <_dtoa_r+0x6a0>
 8008bb4:	2600      	movs	r6, #0
 8008bb6:	4637      	mov	r7, r6
 8008bb8:	e7e1      	b.n	8008b7e <_dtoa_r+0x93e>
 8008bba:	9700      	str	r7, [sp, #0]
 8008bbc:	4637      	mov	r7, r6
 8008bbe:	e599      	b.n	80086f4 <_dtoa_r+0x4b4>
 8008bc0:	40240000 	.word	0x40240000
 8008bc4:	9b08      	ldr	r3, [sp, #32]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f000 80ca 	beq.w	8008d60 <_dtoa_r+0xb20>
 8008bcc:	9b03      	ldr	r3, [sp, #12]
 8008bce:	9302      	str	r3, [sp, #8]
 8008bd0:	2d00      	cmp	r5, #0
 8008bd2:	dd05      	ble.n	8008be0 <_dtoa_r+0x9a0>
 8008bd4:	4639      	mov	r1, r7
 8008bd6:	462a      	mov	r2, r5
 8008bd8:	4620      	mov	r0, r4
 8008bda:	f000 fc83 	bl	80094e4 <__lshift>
 8008bde:	4607      	mov	r7, r0
 8008be0:	f1b8 0f00 	cmp.w	r8, #0
 8008be4:	d05b      	beq.n	8008c9e <_dtoa_r+0xa5e>
 8008be6:	6879      	ldr	r1, [r7, #4]
 8008be8:	4620      	mov	r0, r4
 8008bea:	f000 fa69 	bl	80090c0 <_Balloc>
 8008bee:	4605      	mov	r5, r0
 8008bf0:	b928      	cbnz	r0, 8008bfe <_dtoa_r+0x9be>
 8008bf2:	4b87      	ldr	r3, [pc, #540]	; (8008e10 <_dtoa_r+0xbd0>)
 8008bf4:	4602      	mov	r2, r0
 8008bf6:	f240 21ea 	movw	r1, #746	; 0x2ea
 8008bfa:	f7ff bb3b 	b.w	8008274 <_dtoa_r+0x34>
 8008bfe:	693a      	ldr	r2, [r7, #16]
 8008c00:	3202      	adds	r2, #2
 8008c02:	0092      	lsls	r2, r2, #2
 8008c04:	f107 010c 	add.w	r1, r7, #12
 8008c08:	300c      	adds	r0, #12
 8008c0a:	f7fe fb48 	bl	800729e <memcpy>
 8008c0e:	2201      	movs	r2, #1
 8008c10:	4629      	mov	r1, r5
 8008c12:	4620      	mov	r0, r4
 8008c14:	f000 fc66 	bl	80094e4 <__lshift>
 8008c18:	9b01      	ldr	r3, [sp, #4]
 8008c1a:	f103 0901 	add.w	r9, r3, #1
 8008c1e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8008c22:	4413      	add	r3, r2
 8008c24:	9305      	str	r3, [sp, #20]
 8008c26:	f00a 0301 	and.w	r3, sl, #1
 8008c2a:	46b8      	mov	r8, r7
 8008c2c:	9304      	str	r3, [sp, #16]
 8008c2e:	4607      	mov	r7, r0
 8008c30:	4631      	mov	r1, r6
 8008c32:	ee18 0a10 	vmov	r0, s16
 8008c36:	f7ff fa75 	bl	8008124 <quorem>
 8008c3a:	4641      	mov	r1, r8
 8008c3c:	9002      	str	r0, [sp, #8]
 8008c3e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008c42:	ee18 0a10 	vmov	r0, s16
 8008c46:	f000 fcbd 	bl	80095c4 <__mcmp>
 8008c4a:	463a      	mov	r2, r7
 8008c4c:	9003      	str	r0, [sp, #12]
 8008c4e:	4631      	mov	r1, r6
 8008c50:	4620      	mov	r0, r4
 8008c52:	f000 fcd3 	bl	80095fc <__mdiff>
 8008c56:	68c2      	ldr	r2, [r0, #12]
 8008c58:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
 8008c5c:	4605      	mov	r5, r0
 8008c5e:	bb02      	cbnz	r2, 8008ca2 <_dtoa_r+0xa62>
 8008c60:	4601      	mov	r1, r0
 8008c62:	ee18 0a10 	vmov	r0, s16
 8008c66:	f000 fcad 	bl	80095c4 <__mcmp>
 8008c6a:	4602      	mov	r2, r0
 8008c6c:	4629      	mov	r1, r5
 8008c6e:	4620      	mov	r0, r4
 8008c70:	9207      	str	r2, [sp, #28]
 8008c72:	f000 fa65 	bl	8009140 <_Bfree>
 8008c76:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8008c7a:	ea43 0102 	orr.w	r1, r3, r2
 8008c7e:	9b04      	ldr	r3, [sp, #16]
 8008c80:	430b      	orrs	r3, r1
 8008c82:	464d      	mov	r5, r9
 8008c84:	d10f      	bne.n	8008ca6 <_dtoa_r+0xa66>
 8008c86:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008c8a:	d02a      	beq.n	8008ce2 <_dtoa_r+0xaa2>
 8008c8c:	9b03      	ldr	r3, [sp, #12]
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	dd02      	ble.n	8008c98 <_dtoa_r+0xa58>
 8008c92:	9b02      	ldr	r3, [sp, #8]
 8008c94:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8008c98:	f88b a000 	strb.w	sl, [fp]
 8008c9c:	e775      	b.n	8008b8a <_dtoa_r+0x94a>
 8008c9e:	4638      	mov	r0, r7
 8008ca0:	e7ba      	b.n	8008c18 <_dtoa_r+0x9d8>
 8008ca2:	2201      	movs	r2, #1
 8008ca4:	e7e2      	b.n	8008c6c <_dtoa_r+0xa2c>
 8008ca6:	9b03      	ldr	r3, [sp, #12]
 8008ca8:	2b00      	cmp	r3, #0
 8008caa:	db04      	blt.n	8008cb6 <_dtoa_r+0xa76>
 8008cac:	9906      	ldr	r1, [sp, #24]
 8008cae:	430b      	orrs	r3, r1
 8008cb0:	9904      	ldr	r1, [sp, #16]
 8008cb2:	430b      	orrs	r3, r1
 8008cb4:	d122      	bne.n	8008cfc <_dtoa_r+0xabc>
 8008cb6:	2a00      	cmp	r2, #0
 8008cb8:	ddee      	ble.n	8008c98 <_dtoa_r+0xa58>
 8008cba:	ee18 1a10 	vmov	r1, s16
 8008cbe:	2201      	movs	r2, #1
 8008cc0:	4620      	mov	r0, r4
 8008cc2:	f000 fc0f 	bl	80094e4 <__lshift>
 8008cc6:	4631      	mov	r1, r6
 8008cc8:	ee08 0a10 	vmov	s16, r0
 8008ccc:	f000 fc7a 	bl	80095c4 <__mcmp>
 8008cd0:	2800      	cmp	r0, #0
 8008cd2:	dc03      	bgt.n	8008cdc <_dtoa_r+0xa9c>
 8008cd4:	d1e0      	bne.n	8008c98 <_dtoa_r+0xa58>
 8008cd6:	f01a 0f01 	tst.w	sl, #1
 8008cda:	d0dd      	beq.n	8008c98 <_dtoa_r+0xa58>
 8008cdc:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008ce0:	d1d7      	bne.n	8008c92 <_dtoa_r+0xa52>
 8008ce2:	2339      	movs	r3, #57	; 0x39
 8008ce4:	f88b 3000 	strb.w	r3, [fp]
 8008ce8:	462b      	mov	r3, r5
 8008cea:	461d      	mov	r5, r3
 8008cec:	3b01      	subs	r3, #1
 8008cee:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8008cf2:	2a39      	cmp	r2, #57	; 0x39
 8008cf4:	d071      	beq.n	8008dda <_dtoa_r+0xb9a>
 8008cf6:	3201      	adds	r2, #1
 8008cf8:	701a      	strb	r2, [r3, #0]
 8008cfa:	e746      	b.n	8008b8a <_dtoa_r+0x94a>
 8008cfc:	2a00      	cmp	r2, #0
 8008cfe:	dd07      	ble.n	8008d10 <_dtoa_r+0xad0>
 8008d00:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8008d04:	d0ed      	beq.n	8008ce2 <_dtoa_r+0xaa2>
 8008d06:	f10a 0301 	add.w	r3, sl, #1
 8008d0a:	f88b 3000 	strb.w	r3, [fp]
 8008d0e:	e73c      	b.n	8008b8a <_dtoa_r+0x94a>
 8008d10:	9b05      	ldr	r3, [sp, #20]
 8008d12:	f809 ac01 	strb.w	sl, [r9, #-1]
 8008d16:	4599      	cmp	r9, r3
 8008d18:	d047      	beq.n	8008daa <_dtoa_r+0xb6a>
 8008d1a:	ee18 1a10 	vmov	r1, s16
 8008d1e:	2300      	movs	r3, #0
 8008d20:	220a      	movs	r2, #10
 8008d22:	4620      	mov	r0, r4
 8008d24:	f000 fa2e 	bl	8009184 <__multadd>
 8008d28:	45b8      	cmp	r8, r7
 8008d2a:	ee08 0a10 	vmov	s16, r0
 8008d2e:	f04f 0300 	mov.w	r3, #0
 8008d32:	f04f 020a 	mov.w	r2, #10
 8008d36:	4641      	mov	r1, r8
 8008d38:	4620      	mov	r0, r4
 8008d3a:	d106      	bne.n	8008d4a <_dtoa_r+0xb0a>
 8008d3c:	f000 fa22 	bl	8009184 <__multadd>
 8008d40:	4680      	mov	r8, r0
 8008d42:	4607      	mov	r7, r0
 8008d44:	f109 0901 	add.w	r9, r9, #1
 8008d48:	e772      	b.n	8008c30 <_dtoa_r+0x9f0>
 8008d4a:	f000 fa1b 	bl	8009184 <__multadd>
 8008d4e:	4639      	mov	r1, r7
 8008d50:	4680      	mov	r8, r0
 8008d52:	2300      	movs	r3, #0
 8008d54:	220a      	movs	r2, #10
 8008d56:	4620      	mov	r0, r4
 8008d58:	f000 fa14 	bl	8009184 <__multadd>
 8008d5c:	4607      	mov	r7, r0
 8008d5e:	e7f1      	b.n	8008d44 <_dtoa_r+0xb04>
 8008d60:	9b03      	ldr	r3, [sp, #12]
 8008d62:	9302      	str	r3, [sp, #8]
 8008d64:	9d01      	ldr	r5, [sp, #4]
 8008d66:	ee18 0a10 	vmov	r0, s16
 8008d6a:	4631      	mov	r1, r6
 8008d6c:	f7ff f9da 	bl	8008124 <quorem>
 8008d70:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8008d74:	9b01      	ldr	r3, [sp, #4]
 8008d76:	f805 ab01 	strb.w	sl, [r5], #1
 8008d7a:	1aea      	subs	r2, r5, r3
 8008d7c:	9b02      	ldr	r3, [sp, #8]
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	dd09      	ble.n	8008d96 <_dtoa_r+0xb56>
 8008d82:	ee18 1a10 	vmov	r1, s16
 8008d86:	2300      	movs	r3, #0
 8008d88:	220a      	movs	r2, #10
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	f000 f9fa 	bl	8009184 <__multadd>
 8008d90:	ee08 0a10 	vmov	s16, r0
 8008d94:	e7e7      	b.n	8008d66 <_dtoa_r+0xb26>
 8008d96:	9b02      	ldr	r3, [sp, #8]
 8008d98:	2b00      	cmp	r3, #0
 8008d9a:	bfc8      	it	gt
 8008d9c:	461d      	movgt	r5, r3
 8008d9e:	9b01      	ldr	r3, [sp, #4]
 8008da0:	bfd8      	it	le
 8008da2:	2501      	movle	r5, #1
 8008da4:	441d      	add	r5, r3
 8008da6:	f04f 0800 	mov.w	r8, #0
 8008daa:	ee18 1a10 	vmov	r1, s16
 8008dae:	2201      	movs	r2, #1
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 fb97 	bl	80094e4 <__lshift>
 8008db6:	4631      	mov	r1, r6
 8008db8:	ee08 0a10 	vmov	s16, r0
 8008dbc:	f000 fc02 	bl	80095c4 <__mcmp>
 8008dc0:	2800      	cmp	r0, #0
 8008dc2:	dc91      	bgt.n	8008ce8 <_dtoa_r+0xaa8>
 8008dc4:	d102      	bne.n	8008dcc <_dtoa_r+0xb8c>
 8008dc6:	f01a 0f01 	tst.w	sl, #1
 8008dca:	d18d      	bne.n	8008ce8 <_dtoa_r+0xaa8>
 8008dcc:	462b      	mov	r3, r5
 8008dce:	461d      	mov	r5, r3
 8008dd0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008dd4:	2a30      	cmp	r2, #48	; 0x30
 8008dd6:	d0fa      	beq.n	8008dce <_dtoa_r+0xb8e>
 8008dd8:	e6d7      	b.n	8008b8a <_dtoa_r+0x94a>
 8008dda:	9a01      	ldr	r2, [sp, #4]
 8008ddc:	429a      	cmp	r2, r3
 8008dde:	d184      	bne.n	8008cea <_dtoa_r+0xaaa>
 8008de0:	9b00      	ldr	r3, [sp, #0]
 8008de2:	3301      	adds	r3, #1
 8008de4:	9300      	str	r3, [sp, #0]
 8008de6:	2331      	movs	r3, #49	; 0x31
 8008de8:	7013      	strb	r3, [r2, #0]
 8008dea:	e6ce      	b.n	8008b8a <_dtoa_r+0x94a>
 8008dec:	4b09      	ldr	r3, [pc, #36]	; (8008e14 <_dtoa_r+0xbd4>)
 8008dee:	f7ff ba95 	b.w	800831c <_dtoa_r+0xdc>
 8008df2:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	f47f aa6e 	bne.w	80082d6 <_dtoa_r+0x96>
 8008dfa:	4b07      	ldr	r3, [pc, #28]	; (8008e18 <_dtoa_r+0xbd8>)
 8008dfc:	f7ff ba8e 	b.w	800831c <_dtoa_r+0xdc>
 8008e00:	9b02      	ldr	r3, [sp, #8]
 8008e02:	2b00      	cmp	r3, #0
 8008e04:	dcae      	bgt.n	8008d64 <_dtoa_r+0xb24>
 8008e06:	9b06      	ldr	r3, [sp, #24]
 8008e08:	2b02      	cmp	r3, #2
 8008e0a:	f73f aea8 	bgt.w	8008b5e <_dtoa_r+0x91e>
 8008e0e:	e7a9      	b.n	8008d64 <_dtoa_r+0xb24>
 8008e10:	0800a10f 	.word	0x0800a10f
 8008e14:	0800a06c 	.word	0x0800a06c
 8008e18:	0800a090 	.word	0x0800a090

08008e1c <__sflush_r>:
 8008e1c:	898a      	ldrh	r2, [r1, #12]
 8008e1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008e22:	4605      	mov	r5, r0
 8008e24:	0710      	lsls	r0, r2, #28
 8008e26:	460c      	mov	r4, r1
 8008e28:	d458      	bmi.n	8008edc <__sflush_r+0xc0>
 8008e2a:	684b      	ldr	r3, [r1, #4]
 8008e2c:	2b00      	cmp	r3, #0
 8008e2e:	dc05      	bgt.n	8008e3c <__sflush_r+0x20>
 8008e30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	dc02      	bgt.n	8008e3c <__sflush_r+0x20>
 8008e36:	2000      	movs	r0, #0
 8008e38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e3e:	2e00      	cmp	r6, #0
 8008e40:	d0f9      	beq.n	8008e36 <__sflush_r+0x1a>
 8008e42:	2300      	movs	r3, #0
 8008e44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008e48:	682f      	ldr	r7, [r5, #0]
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	d032      	beq.n	8008eb4 <__sflush_r+0x98>
 8008e4e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008e50:	89a3      	ldrh	r3, [r4, #12]
 8008e52:	075a      	lsls	r2, r3, #29
 8008e54:	d505      	bpl.n	8008e62 <__sflush_r+0x46>
 8008e56:	6863      	ldr	r3, [r4, #4]
 8008e58:	1ac0      	subs	r0, r0, r3
 8008e5a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008e5c:	b10b      	cbz	r3, 8008e62 <__sflush_r+0x46>
 8008e5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008e60:	1ac0      	subs	r0, r0, r3
 8008e62:	2300      	movs	r3, #0
 8008e64:	4602      	mov	r2, r0
 8008e66:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008e68:	6a21      	ldr	r1, [r4, #32]
 8008e6a:	4628      	mov	r0, r5
 8008e6c:	47b0      	blx	r6
 8008e6e:	1c43      	adds	r3, r0, #1
 8008e70:	89a3      	ldrh	r3, [r4, #12]
 8008e72:	d106      	bne.n	8008e82 <__sflush_r+0x66>
 8008e74:	6829      	ldr	r1, [r5, #0]
 8008e76:	291d      	cmp	r1, #29
 8008e78:	d82c      	bhi.n	8008ed4 <__sflush_r+0xb8>
 8008e7a:	4a2a      	ldr	r2, [pc, #168]	; (8008f24 <__sflush_r+0x108>)
 8008e7c:	40ca      	lsrs	r2, r1
 8008e7e:	07d6      	lsls	r6, r2, #31
 8008e80:	d528      	bpl.n	8008ed4 <__sflush_r+0xb8>
 8008e82:	2200      	movs	r2, #0
 8008e84:	6062      	str	r2, [r4, #4]
 8008e86:	04d9      	lsls	r1, r3, #19
 8008e88:	6922      	ldr	r2, [r4, #16]
 8008e8a:	6022      	str	r2, [r4, #0]
 8008e8c:	d504      	bpl.n	8008e98 <__sflush_r+0x7c>
 8008e8e:	1c42      	adds	r2, r0, #1
 8008e90:	d101      	bne.n	8008e96 <__sflush_r+0x7a>
 8008e92:	682b      	ldr	r3, [r5, #0]
 8008e94:	b903      	cbnz	r3, 8008e98 <__sflush_r+0x7c>
 8008e96:	6560      	str	r0, [r4, #84]	; 0x54
 8008e98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008e9a:	602f      	str	r7, [r5, #0]
 8008e9c:	2900      	cmp	r1, #0
 8008e9e:	d0ca      	beq.n	8008e36 <__sflush_r+0x1a>
 8008ea0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008ea4:	4299      	cmp	r1, r3
 8008ea6:	d002      	beq.n	8008eae <__sflush_r+0x92>
 8008ea8:	4628      	mov	r0, r5
 8008eaa:	f000 fca3 	bl	80097f4 <_free_r>
 8008eae:	2000      	movs	r0, #0
 8008eb0:	6360      	str	r0, [r4, #52]	; 0x34
 8008eb2:	e7c1      	b.n	8008e38 <__sflush_r+0x1c>
 8008eb4:	6a21      	ldr	r1, [r4, #32]
 8008eb6:	2301      	movs	r3, #1
 8008eb8:	4628      	mov	r0, r5
 8008eba:	47b0      	blx	r6
 8008ebc:	1c41      	adds	r1, r0, #1
 8008ebe:	d1c7      	bne.n	8008e50 <__sflush_r+0x34>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d0c4      	beq.n	8008e50 <__sflush_r+0x34>
 8008ec6:	2b1d      	cmp	r3, #29
 8008ec8:	d001      	beq.n	8008ece <__sflush_r+0xb2>
 8008eca:	2b16      	cmp	r3, #22
 8008ecc:	d101      	bne.n	8008ed2 <__sflush_r+0xb6>
 8008ece:	602f      	str	r7, [r5, #0]
 8008ed0:	e7b1      	b.n	8008e36 <__sflush_r+0x1a>
 8008ed2:	89a3      	ldrh	r3, [r4, #12]
 8008ed4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ed8:	81a3      	strh	r3, [r4, #12]
 8008eda:	e7ad      	b.n	8008e38 <__sflush_r+0x1c>
 8008edc:	690f      	ldr	r7, [r1, #16]
 8008ede:	2f00      	cmp	r7, #0
 8008ee0:	d0a9      	beq.n	8008e36 <__sflush_r+0x1a>
 8008ee2:	0793      	lsls	r3, r2, #30
 8008ee4:	680e      	ldr	r6, [r1, #0]
 8008ee6:	bf08      	it	eq
 8008ee8:	694b      	ldreq	r3, [r1, #20]
 8008eea:	600f      	str	r7, [r1, #0]
 8008eec:	bf18      	it	ne
 8008eee:	2300      	movne	r3, #0
 8008ef0:	eba6 0807 	sub.w	r8, r6, r7
 8008ef4:	608b      	str	r3, [r1, #8]
 8008ef6:	f1b8 0f00 	cmp.w	r8, #0
 8008efa:	dd9c      	ble.n	8008e36 <__sflush_r+0x1a>
 8008efc:	6a21      	ldr	r1, [r4, #32]
 8008efe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008f00:	4643      	mov	r3, r8
 8008f02:	463a      	mov	r2, r7
 8008f04:	4628      	mov	r0, r5
 8008f06:	47b0      	blx	r6
 8008f08:	2800      	cmp	r0, #0
 8008f0a:	dc06      	bgt.n	8008f1a <__sflush_r+0xfe>
 8008f0c:	89a3      	ldrh	r3, [r4, #12]
 8008f0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008f12:	81a3      	strh	r3, [r4, #12]
 8008f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008f18:	e78e      	b.n	8008e38 <__sflush_r+0x1c>
 8008f1a:	4407      	add	r7, r0
 8008f1c:	eba8 0800 	sub.w	r8, r8, r0
 8008f20:	e7e9      	b.n	8008ef6 <__sflush_r+0xda>
 8008f22:	bf00      	nop
 8008f24:	20400001 	.word	0x20400001

08008f28 <_fflush_r>:
 8008f28:	b538      	push	{r3, r4, r5, lr}
 8008f2a:	690b      	ldr	r3, [r1, #16]
 8008f2c:	4605      	mov	r5, r0
 8008f2e:	460c      	mov	r4, r1
 8008f30:	b913      	cbnz	r3, 8008f38 <_fflush_r+0x10>
 8008f32:	2500      	movs	r5, #0
 8008f34:	4628      	mov	r0, r5
 8008f36:	bd38      	pop	{r3, r4, r5, pc}
 8008f38:	b118      	cbz	r0, 8008f42 <_fflush_r+0x1a>
 8008f3a:	6983      	ldr	r3, [r0, #24]
 8008f3c:	b90b      	cbnz	r3, 8008f42 <_fflush_r+0x1a>
 8008f3e:	f7fe f8e9 	bl	8007114 <__sinit>
 8008f42:	4b14      	ldr	r3, [pc, #80]	; (8008f94 <_fflush_r+0x6c>)
 8008f44:	429c      	cmp	r4, r3
 8008f46:	d11b      	bne.n	8008f80 <_fflush_r+0x58>
 8008f48:	686c      	ldr	r4, [r5, #4]
 8008f4a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d0ef      	beq.n	8008f32 <_fflush_r+0xa>
 8008f52:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008f54:	07d0      	lsls	r0, r2, #31
 8008f56:	d404      	bmi.n	8008f62 <_fflush_r+0x3a>
 8008f58:	0599      	lsls	r1, r3, #22
 8008f5a:	d402      	bmi.n	8008f62 <_fflush_r+0x3a>
 8008f5c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f5e:	f7fe f99c 	bl	800729a <__retarget_lock_acquire_recursive>
 8008f62:	4628      	mov	r0, r5
 8008f64:	4621      	mov	r1, r4
 8008f66:	f7ff ff59 	bl	8008e1c <__sflush_r>
 8008f6a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008f6c:	07da      	lsls	r2, r3, #31
 8008f6e:	4605      	mov	r5, r0
 8008f70:	d4e0      	bmi.n	8008f34 <_fflush_r+0xc>
 8008f72:	89a3      	ldrh	r3, [r4, #12]
 8008f74:	059b      	lsls	r3, r3, #22
 8008f76:	d4dd      	bmi.n	8008f34 <_fflush_r+0xc>
 8008f78:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008f7a:	f7fe f98f 	bl	800729c <__retarget_lock_release_recursive>
 8008f7e:	e7d9      	b.n	8008f34 <_fflush_r+0xc>
 8008f80:	4b05      	ldr	r3, [pc, #20]	; (8008f98 <_fflush_r+0x70>)
 8008f82:	429c      	cmp	r4, r3
 8008f84:	d101      	bne.n	8008f8a <_fflush_r+0x62>
 8008f86:	68ac      	ldr	r4, [r5, #8]
 8008f88:	e7df      	b.n	8008f4a <_fflush_r+0x22>
 8008f8a:	4b04      	ldr	r3, [pc, #16]	; (8008f9c <_fflush_r+0x74>)
 8008f8c:	429c      	cmp	r4, r3
 8008f8e:	bf08      	it	eq
 8008f90:	68ec      	ldreq	r4, [r5, #12]
 8008f92:	e7da      	b.n	8008f4a <_fflush_r+0x22>
 8008f94:	0800a018 	.word	0x0800a018
 8008f98:	0800a038 	.word	0x0800a038
 8008f9c:	08009ff8 	.word	0x08009ff8

08008fa0 <_localeconv_r>:
 8008fa0:	4800      	ldr	r0, [pc, #0]	; (8008fa4 <_localeconv_r+0x4>)
 8008fa2:	4770      	bx	lr
 8008fa4:	20000164 	.word	0x20000164

08008fa8 <_lseek_r>:
 8008fa8:	b538      	push	{r3, r4, r5, lr}
 8008faa:	4d07      	ldr	r5, [pc, #28]	; (8008fc8 <_lseek_r+0x20>)
 8008fac:	4604      	mov	r4, r0
 8008fae:	4608      	mov	r0, r1
 8008fb0:	4611      	mov	r1, r2
 8008fb2:	2200      	movs	r2, #0
 8008fb4:	602a      	str	r2, [r5, #0]
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	f7f8 fc06 	bl	80017c8 <_lseek>
 8008fbc:	1c43      	adds	r3, r0, #1
 8008fbe:	d102      	bne.n	8008fc6 <_lseek_r+0x1e>
 8008fc0:	682b      	ldr	r3, [r5, #0]
 8008fc2:	b103      	cbz	r3, 8008fc6 <_lseek_r+0x1e>
 8008fc4:	6023      	str	r3, [r4, #0]
 8008fc6:	bd38      	pop	{r3, r4, r5, pc}
 8008fc8:	20002278 	.word	0x20002278

08008fcc <__swhatbuf_r>:
 8008fcc:	b570      	push	{r4, r5, r6, lr}
 8008fce:	460e      	mov	r6, r1
 8008fd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008fd4:	2900      	cmp	r1, #0
 8008fd6:	b096      	sub	sp, #88	; 0x58
 8008fd8:	4614      	mov	r4, r2
 8008fda:	461d      	mov	r5, r3
 8008fdc:	da08      	bge.n	8008ff0 <__swhatbuf_r+0x24>
 8008fde:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008fe2:	2200      	movs	r2, #0
 8008fe4:	602a      	str	r2, [r5, #0]
 8008fe6:	061a      	lsls	r2, r3, #24
 8008fe8:	d410      	bmi.n	800900c <__swhatbuf_r+0x40>
 8008fea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008fee:	e00e      	b.n	800900e <__swhatbuf_r+0x42>
 8008ff0:	466a      	mov	r2, sp
 8008ff2:	f000 fde7 	bl	8009bc4 <_fstat_r>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	dbf1      	blt.n	8008fde <__swhatbuf_r+0x12>
 8008ffa:	9a01      	ldr	r2, [sp, #4]
 8008ffc:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8009000:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009004:	425a      	negs	r2, r3
 8009006:	415a      	adcs	r2, r3
 8009008:	602a      	str	r2, [r5, #0]
 800900a:	e7ee      	b.n	8008fea <__swhatbuf_r+0x1e>
 800900c:	2340      	movs	r3, #64	; 0x40
 800900e:	2000      	movs	r0, #0
 8009010:	6023      	str	r3, [r4, #0]
 8009012:	b016      	add	sp, #88	; 0x58
 8009014:	bd70      	pop	{r4, r5, r6, pc}
	...

08009018 <__smakebuf_r>:
 8009018:	898b      	ldrh	r3, [r1, #12]
 800901a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800901c:	079d      	lsls	r5, r3, #30
 800901e:	4606      	mov	r6, r0
 8009020:	460c      	mov	r4, r1
 8009022:	d507      	bpl.n	8009034 <__smakebuf_r+0x1c>
 8009024:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009028:	6023      	str	r3, [r4, #0]
 800902a:	6123      	str	r3, [r4, #16]
 800902c:	2301      	movs	r3, #1
 800902e:	6163      	str	r3, [r4, #20]
 8009030:	b002      	add	sp, #8
 8009032:	bd70      	pop	{r4, r5, r6, pc}
 8009034:	ab01      	add	r3, sp, #4
 8009036:	466a      	mov	r2, sp
 8009038:	f7ff ffc8 	bl	8008fcc <__swhatbuf_r>
 800903c:	9900      	ldr	r1, [sp, #0]
 800903e:	4605      	mov	r5, r0
 8009040:	4630      	mov	r0, r6
 8009042:	f7fe f963 	bl	800730c <_malloc_r>
 8009046:	b948      	cbnz	r0, 800905c <__smakebuf_r+0x44>
 8009048:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800904c:	059a      	lsls	r2, r3, #22
 800904e:	d4ef      	bmi.n	8009030 <__smakebuf_r+0x18>
 8009050:	f023 0303 	bic.w	r3, r3, #3
 8009054:	f043 0302 	orr.w	r3, r3, #2
 8009058:	81a3      	strh	r3, [r4, #12]
 800905a:	e7e3      	b.n	8009024 <__smakebuf_r+0xc>
 800905c:	4b0d      	ldr	r3, [pc, #52]	; (8009094 <__smakebuf_r+0x7c>)
 800905e:	62b3      	str	r3, [r6, #40]	; 0x28
 8009060:	89a3      	ldrh	r3, [r4, #12]
 8009062:	6020      	str	r0, [r4, #0]
 8009064:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009068:	81a3      	strh	r3, [r4, #12]
 800906a:	9b00      	ldr	r3, [sp, #0]
 800906c:	6163      	str	r3, [r4, #20]
 800906e:	9b01      	ldr	r3, [sp, #4]
 8009070:	6120      	str	r0, [r4, #16]
 8009072:	b15b      	cbz	r3, 800908c <__smakebuf_r+0x74>
 8009074:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009078:	4630      	mov	r0, r6
 800907a:	f000 fdb5 	bl	8009be8 <_isatty_r>
 800907e:	b128      	cbz	r0, 800908c <__smakebuf_r+0x74>
 8009080:	89a3      	ldrh	r3, [r4, #12]
 8009082:	f023 0303 	bic.w	r3, r3, #3
 8009086:	f043 0301 	orr.w	r3, r3, #1
 800908a:	81a3      	strh	r3, [r4, #12]
 800908c:	89a0      	ldrh	r0, [r4, #12]
 800908e:	4305      	orrs	r5, r0
 8009090:	81a5      	strh	r5, [r4, #12]
 8009092:	e7cd      	b.n	8009030 <__smakebuf_r+0x18>
 8009094:	080070ad 	.word	0x080070ad

08009098 <malloc>:
 8009098:	4b02      	ldr	r3, [pc, #8]	; (80090a4 <malloc+0xc>)
 800909a:	4601      	mov	r1, r0
 800909c:	6818      	ldr	r0, [r3, #0]
 800909e:	f7fe b935 	b.w	800730c <_malloc_r>
 80090a2:	bf00      	nop
 80090a4:	20000010 	.word	0x20000010

080090a8 <__malloc_lock>:
 80090a8:	4801      	ldr	r0, [pc, #4]	; (80090b0 <__malloc_lock+0x8>)
 80090aa:	f7fe b8f6 	b.w	800729a <__retarget_lock_acquire_recursive>
 80090ae:	bf00      	nop
 80090b0:	2000226c 	.word	0x2000226c

080090b4 <__malloc_unlock>:
 80090b4:	4801      	ldr	r0, [pc, #4]	; (80090bc <__malloc_unlock+0x8>)
 80090b6:	f7fe b8f1 	b.w	800729c <__retarget_lock_release_recursive>
 80090ba:	bf00      	nop
 80090bc:	2000226c 	.word	0x2000226c

080090c0 <_Balloc>:
 80090c0:	b570      	push	{r4, r5, r6, lr}
 80090c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80090c4:	4604      	mov	r4, r0
 80090c6:	460d      	mov	r5, r1
 80090c8:	b976      	cbnz	r6, 80090e8 <_Balloc+0x28>
 80090ca:	2010      	movs	r0, #16
 80090cc:	f7ff ffe4 	bl	8009098 <malloc>
 80090d0:	4602      	mov	r2, r0
 80090d2:	6260      	str	r0, [r4, #36]	; 0x24
 80090d4:	b920      	cbnz	r0, 80090e0 <_Balloc+0x20>
 80090d6:	4b18      	ldr	r3, [pc, #96]	; (8009138 <_Balloc+0x78>)
 80090d8:	4818      	ldr	r0, [pc, #96]	; (800913c <_Balloc+0x7c>)
 80090da:	2166      	movs	r1, #102	; 0x66
 80090dc:	f000 fd42 	bl	8009b64 <__assert_func>
 80090e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090e4:	6006      	str	r6, [r0, #0]
 80090e6:	60c6      	str	r6, [r0, #12]
 80090e8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80090ea:	68f3      	ldr	r3, [r6, #12]
 80090ec:	b183      	cbz	r3, 8009110 <_Balloc+0x50>
 80090ee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80090f0:	68db      	ldr	r3, [r3, #12]
 80090f2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80090f6:	b9b8      	cbnz	r0, 8009128 <_Balloc+0x68>
 80090f8:	2101      	movs	r1, #1
 80090fa:	fa01 f605 	lsl.w	r6, r1, r5
 80090fe:	1d72      	adds	r2, r6, #5
 8009100:	0092      	lsls	r2, r2, #2
 8009102:	4620      	mov	r0, r4
 8009104:	f000 fb60 	bl	80097c8 <_calloc_r>
 8009108:	b160      	cbz	r0, 8009124 <_Balloc+0x64>
 800910a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800910e:	e00e      	b.n	800912e <_Balloc+0x6e>
 8009110:	2221      	movs	r2, #33	; 0x21
 8009112:	2104      	movs	r1, #4
 8009114:	4620      	mov	r0, r4
 8009116:	f000 fb57 	bl	80097c8 <_calloc_r>
 800911a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800911c:	60f0      	str	r0, [r6, #12]
 800911e:	68db      	ldr	r3, [r3, #12]
 8009120:	2b00      	cmp	r3, #0
 8009122:	d1e4      	bne.n	80090ee <_Balloc+0x2e>
 8009124:	2000      	movs	r0, #0
 8009126:	bd70      	pop	{r4, r5, r6, pc}
 8009128:	6802      	ldr	r2, [r0, #0]
 800912a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800912e:	2300      	movs	r3, #0
 8009130:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009134:	e7f7      	b.n	8009126 <_Balloc+0x66>
 8009136:	bf00      	nop
 8009138:	0800a09d 	.word	0x0800a09d
 800913c:	0800a120 	.word	0x0800a120

08009140 <_Bfree>:
 8009140:	b570      	push	{r4, r5, r6, lr}
 8009142:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8009144:	4605      	mov	r5, r0
 8009146:	460c      	mov	r4, r1
 8009148:	b976      	cbnz	r6, 8009168 <_Bfree+0x28>
 800914a:	2010      	movs	r0, #16
 800914c:	f7ff ffa4 	bl	8009098 <malloc>
 8009150:	4602      	mov	r2, r0
 8009152:	6268      	str	r0, [r5, #36]	; 0x24
 8009154:	b920      	cbnz	r0, 8009160 <_Bfree+0x20>
 8009156:	4b09      	ldr	r3, [pc, #36]	; (800917c <_Bfree+0x3c>)
 8009158:	4809      	ldr	r0, [pc, #36]	; (8009180 <_Bfree+0x40>)
 800915a:	218a      	movs	r1, #138	; 0x8a
 800915c:	f000 fd02 	bl	8009b64 <__assert_func>
 8009160:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009164:	6006      	str	r6, [r0, #0]
 8009166:	60c6      	str	r6, [r0, #12]
 8009168:	b13c      	cbz	r4, 800917a <_Bfree+0x3a>
 800916a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800916c:	6862      	ldr	r2, [r4, #4]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009174:	6021      	str	r1, [r4, #0]
 8009176:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800917a:	bd70      	pop	{r4, r5, r6, pc}
 800917c:	0800a09d 	.word	0x0800a09d
 8009180:	0800a120 	.word	0x0800a120

08009184 <__multadd>:
 8009184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009188:	690d      	ldr	r5, [r1, #16]
 800918a:	4607      	mov	r7, r0
 800918c:	460c      	mov	r4, r1
 800918e:	461e      	mov	r6, r3
 8009190:	f101 0c14 	add.w	ip, r1, #20
 8009194:	2000      	movs	r0, #0
 8009196:	f8dc 3000 	ldr.w	r3, [ip]
 800919a:	b299      	uxth	r1, r3
 800919c:	fb02 6101 	mla	r1, r2, r1, r6
 80091a0:	0c1e      	lsrs	r6, r3, #16
 80091a2:	0c0b      	lsrs	r3, r1, #16
 80091a4:	fb02 3306 	mla	r3, r2, r6, r3
 80091a8:	b289      	uxth	r1, r1
 80091aa:	3001      	adds	r0, #1
 80091ac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80091b0:	4285      	cmp	r5, r0
 80091b2:	f84c 1b04 	str.w	r1, [ip], #4
 80091b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80091ba:	dcec      	bgt.n	8009196 <__multadd+0x12>
 80091bc:	b30e      	cbz	r6, 8009202 <__multadd+0x7e>
 80091be:	68a3      	ldr	r3, [r4, #8]
 80091c0:	42ab      	cmp	r3, r5
 80091c2:	dc19      	bgt.n	80091f8 <__multadd+0x74>
 80091c4:	6861      	ldr	r1, [r4, #4]
 80091c6:	4638      	mov	r0, r7
 80091c8:	3101      	adds	r1, #1
 80091ca:	f7ff ff79 	bl	80090c0 <_Balloc>
 80091ce:	4680      	mov	r8, r0
 80091d0:	b928      	cbnz	r0, 80091de <__multadd+0x5a>
 80091d2:	4602      	mov	r2, r0
 80091d4:	4b0c      	ldr	r3, [pc, #48]	; (8009208 <__multadd+0x84>)
 80091d6:	480d      	ldr	r0, [pc, #52]	; (800920c <__multadd+0x88>)
 80091d8:	21b5      	movs	r1, #181	; 0xb5
 80091da:	f000 fcc3 	bl	8009b64 <__assert_func>
 80091de:	6922      	ldr	r2, [r4, #16]
 80091e0:	3202      	adds	r2, #2
 80091e2:	f104 010c 	add.w	r1, r4, #12
 80091e6:	0092      	lsls	r2, r2, #2
 80091e8:	300c      	adds	r0, #12
 80091ea:	f7fe f858 	bl	800729e <memcpy>
 80091ee:	4621      	mov	r1, r4
 80091f0:	4638      	mov	r0, r7
 80091f2:	f7ff ffa5 	bl	8009140 <_Bfree>
 80091f6:	4644      	mov	r4, r8
 80091f8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 80091fc:	3501      	adds	r5, #1
 80091fe:	615e      	str	r6, [r3, #20]
 8009200:	6125      	str	r5, [r4, #16]
 8009202:	4620      	mov	r0, r4
 8009204:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009208:	0800a10f 	.word	0x0800a10f
 800920c:	0800a120 	.word	0x0800a120

08009210 <__hi0bits>:
 8009210:	0c03      	lsrs	r3, r0, #16
 8009212:	041b      	lsls	r3, r3, #16
 8009214:	b9d3      	cbnz	r3, 800924c <__hi0bits+0x3c>
 8009216:	0400      	lsls	r0, r0, #16
 8009218:	2310      	movs	r3, #16
 800921a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800921e:	bf04      	itt	eq
 8009220:	0200      	lsleq	r0, r0, #8
 8009222:	3308      	addeq	r3, #8
 8009224:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 8009228:	bf04      	itt	eq
 800922a:	0100      	lsleq	r0, r0, #4
 800922c:	3304      	addeq	r3, #4
 800922e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 8009232:	bf04      	itt	eq
 8009234:	0080      	lsleq	r0, r0, #2
 8009236:	3302      	addeq	r3, #2
 8009238:	2800      	cmp	r0, #0
 800923a:	db05      	blt.n	8009248 <__hi0bits+0x38>
 800923c:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 8009240:	f103 0301 	add.w	r3, r3, #1
 8009244:	bf08      	it	eq
 8009246:	2320      	moveq	r3, #32
 8009248:	4618      	mov	r0, r3
 800924a:	4770      	bx	lr
 800924c:	2300      	movs	r3, #0
 800924e:	e7e4      	b.n	800921a <__hi0bits+0xa>

08009250 <__lo0bits>:
 8009250:	6803      	ldr	r3, [r0, #0]
 8009252:	f013 0207 	ands.w	r2, r3, #7
 8009256:	4601      	mov	r1, r0
 8009258:	d00b      	beq.n	8009272 <__lo0bits+0x22>
 800925a:	07da      	lsls	r2, r3, #31
 800925c:	d423      	bmi.n	80092a6 <__lo0bits+0x56>
 800925e:	0798      	lsls	r0, r3, #30
 8009260:	bf49      	itett	mi
 8009262:	085b      	lsrmi	r3, r3, #1
 8009264:	089b      	lsrpl	r3, r3, #2
 8009266:	2001      	movmi	r0, #1
 8009268:	600b      	strmi	r3, [r1, #0]
 800926a:	bf5c      	itt	pl
 800926c:	600b      	strpl	r3, [r1, #0]
 800926e:	2002      	movpl	r0, #2
 8009270:	4770      	bx	lr
 8009272:	b298      	uxth	r0, r3
 8009274:	b9a8      	cbnz	r0, 80092a2 <__lo0bits+0x52>
 8009276:	0c1b      	lsrs	r3, r3, #16
 8009278:	2010      	movs	r0, #16
 800927a:	b2da      	uxtb	r2, r3
 800927c:	b90a      	cbnz	r2, 8009282 <__lo0bits+0x32>
 800927e:	3008      	adds	r0, #8
 8009280:	0a1b      	lsrs	r3, r3, #8
 8009282:	071a      	lsls	r2, r3, #28
 8009284:	bf04      	itt	eq
 8009286:	091b      	lsreq	r3, r3, #4
 8009288:	3004      	addeq	r0, #4
 800928a:	079a      	lsls	r2, r3, #30
 800928c:	bf04      	itt	eq
 800928e:	089b      	lsreq	r3, r3, #2
 8009290:	3002      	addeq	r0, #2
 8009292:	07da      	lsls	r2, r3, #31
 8009294:	d403      	bmi.n	800929e <__lo0bits+0x4e>
 8009296:	085b      	lsrs	r3, r3, #1
 8009298:	f100 0001 	add.w	r0, r0, #1
 800929c:	d005      	beq.n	80092aa <__lo0bits+0x5a>
 800929e:	600b      	str	r3, [r1, #0]
 80092a0:	4770      	bx	lr
 80092a2:	4610      	mov	r0, r2
 80092a4:	e7e9      	b.n	800927a <__lo0bits+0x2a>
 80092a6:	2000      	movs	r0, #0
 80092a8:	4770      	bx	lr
 80092aa:	2020      	movs	r0, #32
 80092ac:	4770      	bx	lr
	...

080092b0 <__i2b>:
 80092b0:	b510      	push	{r4, lr}
 80092b2:	460c      	mov	r4, r1
 80092b4:	2101      	movs	r1, #1
 80092b6:	f7ff ff03 	bl	80090c0 <_Balloc>
 80092ba:	4602      	mov	r2, r0
 80092bc:	b928      	cbnz	r0, 80092ca <__i2b+0x1a>
 80092be:	4b05      	ldr	r3, [pc, #20]	; (80092d4 <__i2b+0x24>)
 80092c0:	4805      	ldr	r0, [pc, #20]	; (80092d8 <__i2b+0x28>)
 80092c2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80092c6:	f000 fc4d 	bl	8009b64 <__assert_func>
 80092ca:	2301      	movs	r3, #1
 80092cc:	6144      	str	r4, [r0, #20]
 80092ce:	6103      	str	r3, [r0, #16]
 80092d0:	bd10      	pop	{r4, pc}
 80092d2:	bf00      	nop
 80092d4:	0800a10f 	.word	0x0800a10f
 80092d8:	0800a120 	.word	0x0800a120

080092dc <__multiply>:
 80092dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092e0:	4691      	mov	r9, r2
 80092e2:	690a      	ldr	r2, [r1, #16]
 80092e4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80092e8:	429a      	cmp	r2, r3
 80092ea:	bfb8      	it	lt
 80092ec:	460b      	movlt	r3, r1
 80092ee:	460c      	mov	r4, r1
 80092f0:	bfbc      	itt	lt
 80092f2:	464c      	movlt	r4, r9
 80092f4:	4699      	movlt	r9, r3
 80092f6:	6927      	ldr	r7, [r4, #16]
 80092f8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80092fc:	68a3      	ldr	r3, [r4, #8]
 80092fe:	6861      	ldr	r1, [r4, #4]
 8009300:	eb07 060a 	add.w	r6, r7, sl
 8009304:	42b3      	cmp	r3, r6
 8009306:	b085      	sub	sp, #20
 8009308:	bfb8      	it	lt
 800930a:	3101      	addlt	r1, #1
 800930c:	f7ff fed8 	bl	80090c0 <_Balloc>
 8009310:	b930      	cbnz	r0, 8009320 <__multiply+0x44>
 8009312:	4602      	mov	r2, r0
 8009314:	4b44      	ldr	r3, [pc, #272]	; (8009428 <__multiply+0x14c>)
 8009316:	4845      	ldr	r0, [pc, #276]	; (800942c <__multiply+0x150>)
 8009318:	f240 115d 	movw	r1, #349	; 0x15d
 800931c:	f000 fc22 	bl	8009b64 <__assert_func>
 8009320:	f100 0514 	add.w	r5, r0, #20
 8009324:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009328:	462b      	mov	r3, r5
 800932a:	2200      	movs	r2, #0
 800932c:	4543      	cmp	r3, r8
 800932e:	d321      	bcc.n	8009374 <__multiply+0x98>
 8009330:	f104 0314 	add.w	r3, r4, #20
 8009334:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8009338:	f109 0314 	add.w	r3, r9, #20
 800933c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8009340:	9202      	str	r2, [sp, #8]
 8009342:	1b3a      	subs	r2, r7, r4
 8009344:	3a15      	subs	r2, #21
 8009346:	f022 0203 	bic.w	r2, r2, #3
 800934a:	3204      	adds	r2, #4
 800934c:	f104 0115 	add.w	r1, r4, #21
 8009350:	428f      	cmp	r7, r1
 8009352:	bf38      	it	cc
 8009354:	2204      	movcc	r2, #4
 8009356:	9201      	str	r2, [sp, #4]
 8009358:	9a02      	ldr	r2, [sp, #8]
 800935a:	9303      	str	r3, [sp, #12]
 800935c:	429a      	cmp	r2, r3
 800935e:	d80c      	bhi.n	800937a <__multiply+0x9e>
 8009360:	2e00      	cmp	r6, #0
 8009362:	dd03      	ble.n	800936c <__multiply+0x90>
 8009364:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009368:	2b00      	cmp	r3, #0
 800936a:	d05a      	beq.n	8009422 <__multiply+0x146>
 800936c:	6106      	str	r6, [r0, #16]
 800936e:	b005      	add	sp, #20
 8009370:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009374:	f843 2b04 	str.w	r2, [r3], #4
 8009378:	e7d8      	b.n	800932c <__multiply+0x50>
 800937a:	f8b3 a000 	ldrh.w	sl, [r3]
 800937e:	f1ba 0f00 	cmp.w	sl, #0
 8009382:	d024      	beq.n	80093ce <__multiply+0xf2>
 8009384:	f104 0e14 	add.w	lr, r4, #20
 8009388:	46a9      	mov	r9, r5
 800938a:	f04f 0c00 	mov.w	ip, #0
 800938e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8009392:	f8d9 1000 	ldr.w	r1, [r9]
 8009396:	fa1f fb82 	uxth.w	fp, r2
 800939a:	b289      	uxth	r1, r1
 800939c:	fb0a 110b 	mla	r1, sl, fp, r1
 80093a0:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 80093a4:	f8d9 2000 	ldr.w	r2, [r9]
 80093a8:	4461      	add	r1, ip
 80093aa:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093ae:	fb0a c20b 	mla	r2, sl, fp, ip
 80093b2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80093b6:	b289      	uxth	r1, r1
 80093b8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80093bc:	4577      	cmp	r7, lr
 80093be:	f849 1b04 	str.w	r1, [r9], #4
 80093c2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80093c6:	d8e2      	bhi.n	800938e <__multiply+0xb2>
 80093c8:	9a01      	ldr	r2, [sp, #4]
 80093ca:	f845 c002 	str.w	ip, [r5, r2]
 80093ce:	9a03      	ldr	r2, [sp, #12]
 80093d0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80093d4:	3304      	adds	r3, #4
 80093d6:	f1b9 0f00 	cmp.w	r9, #0
 80093da:	d020      	beq.n	800941e <__multiply+0x142>
 80093dc:	6829      	ldr	r1, [r5, #0]
 80093de:	f104 0c14 	add.w	ip, r4, #20
 80093e2:	46ae      	mov	lr, r5
 80093e4:	f04f 0a00 	mov.w	sl, #0
 80093e8:	f8bc b000 	ldrh.w	fp, [ip]
 80093ec:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80093f0:	fb09 220b 	mla	r2, r9, fp, r2
 80093f4:	4492      	add	sl, r2
 80093f6:	b289      	uxth	r1, r1
 80093f8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80093fc:	f84e 1b04 	str.w	r1, [lr], #4
 8009400:	f85c 2b04 	ldr.w	r2, [ip], #4
 8009404:	f8be 1000 	ldrh.w	r1, [lr]
 8009408:	0c12      	lsrs	r2, r2, #16
 800940a:	fb09 1102 	mla	r1, r9, r2, r1
 800940e:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8009412:	4567      	cmp	r7, ip
 8009414:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8009418:	d8e6      	bhi.n	80093e8 <__multiply+0x10c>
 800941a:	9a01      	ldr	r2, [sp, #4]
 800941c:	50a9      	str	r1, [r5, r2]
 800941e:	3504      	adds	r5, #4
 8009420:	e79a      	b.n	8009358 <__multiply+0x7c>
 8009422:	3e01      	subs	r6, #1
 8009424:	e79c      	b.n	8009360 <__multiply+0x84>
 8009426:	bf00      	nop
 8009428:	0800a10f 	.word	0x0800a10f
 800942c:	0800a120 	.word	0x0800a120

08009430 <__pow5mult>:
 8009430:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009434:	4615      	mov	r5, r2
 8009436:	f012 0203 	ands.w	r2, r2, #3
 800943a:	4606      	mov	r6, r0
 800943c:	460f      	mov	r7, r1
 800943e:	d007      	beq.n	8009450 <__pow5mult+0x20>
 8009440:	4c25      	ldr	r4, [pc, #148]	; (80094d8 <__pow5mult+0xa8>)
 8009442:	3a01      	subs	r2, #1
 8009444:	2300      	movs	r3, #0
 8009446:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800944a:	f7ff fe9b 	bl	8009184 <__multadd>
 800944e:	4607      	mov	r7, r0
 8009450:	10ad      	asrs	r5, r5, #2
 8009452:	d03d      	beq.n	80094d0 <__pow5mult+0xa0>
 8009454:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009456:	b97c      	cbnz	r4, 8009478 <__pow5mult+0x48>
 8009458:	2010      	movs	r0, #16
 800945a:	f7ff fe1d 	bl	8009098 <malloc>
 800945e:	4602      	mov	r2, r0
 8009460:	6270      	str	r0, [r6, #36]	; 0x24
 8009462:	b928      	cbnz	r0, 8009470 <__pow5mult+0x40>
 8009464:	4b1d      	ldr	r3, [pc, #116]	; (80094dc <__pow5mult+0xac>)
 8009466:	481e      	ldr	r0, [pc, #120]	; (80094e0 <__pow5mult+0xb0>)
 8009468:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800946c:	f000 fb7a 	bl	8009b64 <__assert_func>
 8009470:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009474:	6004      	str	r4, [r0, #0]
 8009476:	60c4      	str	r4, [r0, #12]
 8009478:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800947c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009480:	b94c      	cbnz	r4, 8009496 <__pow5mult+0x66>
 8009482:	f240 2171 	movw	r1, #625	; 0x271
 8009486:	4630      	mov	r0, r6
 8009488:	f7ff ff12 	bl	80092b0 <__i2b>
 800948c:	2300      	movs	r3, #0
 800948e:	f8c8 0008 	str.w	r0, [r8, #8]
 8009492:	4604      	mov	r4, r0
 8009494:	6003      	str	r3, [r0, #0]
 8009496:	f04f 0900 	mov.w	r9, #0
 800949a:	07eb      	lsls	r3, r5, #31
 800949c:	d50a      	bpl.n	80094b4 <__pow5mult+0x84>
 800949e:	4639      	mov	r1, r7
 80094a0:	4622      	mov	r2, r4
 80094a2:	4630      	mov	r0, r6
 80094a4:	f7ff ff1a 	bl	80092dc <__multiply>
 80094a8:	4639      	mov	r1, r7
 80094aa:	4680      	mov	r8, r0
 80094ac:	4630      	mov	r0, r6
 80094ae:	f7ff fe47 	bl	8009140 <_Bfree>
 80094b2:	4647      	mov	r7, r8
 80094b4:	106d      	asrs	r5, r5, #1
 80094b6:	d00b      	beq.n	80094d0 <__pow5mult+0xa0>
 80094b8:	6820      	ldr	r0, [r4, #0]
 80094ba:	b938      	cbnz	r0, 80094cc <__pow5mult+0x9c>
 80094bc:	4622      	mov	r2, r4
 80094be:	4621      	mov	r1, r4
 80094c0:	4630      	mov	r0, r6
 80094c2:	f7ff ff0b 	bl	80092dc <__multiply>
 80094c6:	6020      	str	r0, [r4, #0]
 80094c8:	f8c0 9000 	str.w	r9, [r0]
 80094cc:	4604      	mov	r4, r0
 80094ce:	e7e4      	b.n	800949a <__pow5mult+0x6a>
 80094d0:	4638      	mov	r0, r7
 80094d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d6:	bf00      	nop
 80094d8:	0800a270 	.word	0x0800a270
 80094dc:	0800a09d 	.word	0x0800a09d
 80094e0:	0800a120 	.word	0x0800a120

080094e4 <__lshift>:
 80094e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094e8:	460c      	mov	r4, r1
 80094ea:	6849      	ldr	r1, [r1, #4]
 80094ec:	6923      	ldr	r3, [r4, #16]
 80094ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80094f2:	68a3      	ldr	r3, [r4, #8]
 80094f4:	4607      	mov	r7, r0
 80094f6:	4691      	mov	r9, r2
 80094f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80094fc:	f108 0601 	add.w	r6, r8, #1
 8009500:	42b3      	cmp	r3, r6
 8009502:	db0b      	blt.n	800951c <__lshift+0x38>
 8009504:	4638      	mov	r0, r7
 8009506:	f7ff fddb 	bl	80090c0 <_Balloc>
 800950a:	4605      	mov	r5, r0
 800950c:	b948      	cbnz	r0, 8009522 <__lshift+0x3e>
 800950e:	4602      	mov	r2, r0
 8009510:	4b2a      	ldr	r3, [pc, #168]	; (80095bc <__lshift+0xd8>)
 8009512:	482b      	ldr	r0, [pc, #172]	; (80095c0 <__lshift+0xdc>)
 8009514:	f240 11d9 	movw	r1, #473	; 0x1d9
 8009518:	f000 fb24 	bl	8009b64 <__assert_func>
 800951c:	3101      	adds	r1, #1
 800951e:	005b      	lsls	r3, r3, #1
 8009520:	e7ee      	b.n	8009500 <__lshift+0x1c>
 8009522:	2300      	movs	r3, #0
 8009524:	f100 0114 	add.w	r1, r0, #20
 8009528:	f100 0210 	add.w	r2, r0, #16
 800952c:	4618      	mov	r0, r3
 800952e:	4553      	cmp	r3, sl
 8009530:	db37      	blt.n	80095a2 <__lshift+0xbe>
 8009532:	6920      	ldr	r0, [r4, #16]
 8009534:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009538:	f104 0314 	add.w	r3, r4, #20
 800953c:	f019 091f 	ands.w	r9, r9, #31
 8009540:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009544:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8009548:	d02f      	beq.n	80095aa <__lshift+0xc6>
 800954a:	f1c9 0e20 	rsb	lr, r9, #32
 800954e:	468a      	mov	sl, r1
 8009550:	f04f 0c00 	mov.w	ip, #0
 8009554:	681a      	ldr	r2, [r3, #0]
 8009556:	fa02 f209 	lsl.w	r2, r2, r9
 800955a:	ea42 020c 	orr.w	r2, r2, ip
 800955e:	f84a 2b04 	str.w	r2, [sl], #4
 8009562:	f853 2b04 	ldr.w	r2, [r3], #4
 8009566:	4298      	cmp	r0, r3
 8009568:	fa22 fc0e 	lsr.w	ip, r2, lr
 800956c:	d8f2      	bhi.n	8009554 <__lshift+0x70>
 800956e:	1b03      	subs	r3, r0, r4
 8009570:	3b15      	subs	r3, #21
 8009572:	f023 0303 	bic.w	r3, r3, #3
 8009576:	3304      	adds	r3, #4
 8009578:	f104 0215 	add.w	r2, r4, #21
 800957c:	4290      	cmp	r0, r2
 800957e:	bf38      	it	cc
 8009580:	2304      	movcc	r3, #4
 8009582:	f841 c003 	str.w	ip, [r1, r3]
 8009586:	f1bc 0f00 	cmp.w	ip, #0
 800958a:	d001      	beq.n	8009590 <__lshift+0xac>
 800958c:	f108 0602 	add.w	r6, r8, #2
 8009590:	3e01      	subs	r6, #1
 8009592:	4638      	mov	r0, r7
 8009594:	612e      	str	r6, [r5, #16]
 8009596:	4621      	mov	r1, r4
 8009598:	f7ff fdd2 	bl	8009140 <_Bfree>
 800959c:	4628      	mov	r0, r5
 800959e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095a2:	f842 0f04 	str.w	r0, [r2, #4]!
 80095a6:	3301      	adds	r3, #1
 80095a8:	e7c1      	b.n	800952e <__lshift+0x4a>
 80095aa:	3904      	subs	r1, #4
 80095ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80095b0:	f841 2f04 	str.w	r2, [r1, #4]!
 80095b4:	4298      	cmp	r0, r3
 80095b6:	d8f9      	bhi.n	80095ac <__lshift+0xc8>
 80095b8:	e7ea      	b.n	8009590 <__lshift+0xac>
 80095ba:	bf00      	nop
 80095bc:	0800a10f 	.word	0x0800a10f
 80095c0:	0800a120 	.word	0x0800a120

080095c4 <__mcmp>:
 80095c4:	b530      	push	{r4, r5, lr}
 80095c6:	6902      	ldr	r2, [r0, #16]
 80095c8:	690c      	ldr	r4, [r1, #16]
 80095ca:	1b12      	subs	r2, r2, r4
 80095cc:	d10e      	bne.n	80095ec <__mcmp+0x28>
 80095ce:	f100 0314 	add.w	r3, r0, #20
 80095d2:	3114      	adds	r1, #20
 80095d4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80095d8:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 80095dc:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 80095e0:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 80095e4:	42a5      	cmp	r5, r4
 80095e6:	d003      	beq.n	80095f0 <__mcmp+0x2c>
 80095e8:	d305      	bcc.n	80095f6 <__mcmp+0x32>
 80095ea:	2201      	movs	r2, #1
 80095ec:	4610      	mov	r0, r2
 80095ee:	bd30      	pop	{r4, r5, pc}
 80095f0:	4283      	cmp	r3, r0
 80095f2:	d3f3      	bcc.n	80095dc <__mcmp+0x18>
 80095f4:	e7fa      	b.n	80095ec <__mcmp+0x28>
 80095f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095fa:	e7f7      	b.n	80095ec <__mcmp+0x28>

080095fc <__mdiff>:
 80095fc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009600:	460c      	mov	r4, r1
 8009602:	4606      	mov	r6, r0
 8009604:	4611      	mov	r1, r2
 8009606:	4620      	mov	r0, r4
 8009608:	4690      	mov	r8, r2
 800960a:	f7ff ffdb 	bl	80095c4 <__mcmp>
 800960e:	1e05      	subs	r5, r0, #0
 8009610:	d110      	bne.n	8009634 <__mdiff+0x38>
 8009612:	4629      	mov	r1, r5
 8009614:	4630      	mov	r0, r6
 8009616:	f7ff fd53 	bl	80090c0 <_Balloc>
 800961a:	b930      	cbnz	r0, 800962a <__mdiff+0x2e>
 800961c:	4b3a      	ldr	r3, [pc, #232]	; (8009708 <__mdiff+0x10c>)
 800961e:	4602      	mov	r2, r0
 8009620:	f240 2132 	movw	r1, #562	; 0x232
 8009624:	4839      	ldr	r0, [pc, #228]	; (800970c <__mdiff+0x110>)
 8009626:	f000 fa9d 	bl	8009b64 <__assert_func>
 800962a:	2301      	movs	r3, #1
 800962c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009630:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009634:	bfa4      	itt	ge
 8009636:	4643      	movge	r3, r8
 8009638:	46a0      	movge	r8, r4
 800963a:	4630      	mov	r0, r6
 800963c:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8009640:	bfa6      	itte	ge
 8009642:	461c      	movge	r4, r3
 8009644:	2500      	movge	r5, #0
 8009646:	2501      	movlt	r5, #1
 8009648:	f7ff fd3a 	bl	80090c0 <_Balloc>
 800964c:	b920      	cbnz	r0, 8009658 <__mdiff+0x5c>
 800964e:	4b2e      	ldr	r3, [pc, #184]	; (8009708 <__mdiff+0x10c>)
 8009650:	4602      	mov	r2, r0
 8009652:	f44f 7110 	mov.w	r1, #576	; 0x240
 8009656:	e7e5      	b.n	8009624 <__mdiff+0x28>
 8009658:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800965c:	6926      	ldr	r6, [r4, #16]
 800965e:	60c5      	str	r5, [r0, #12]
 8009660:	f104 0914 	add.w	r9, r4, #20
 8009664:	f108 0514 	add.w	r5, r8, #20
 8009668:	f100 0e14 	add.w	lr, r0, #20
 800966c:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 8009670:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8009674:	f108 0210 	add.w	r2, r8, #16
 8009678:	46f2      	mov	sl, lr
 800967a:	2100      	movs	r1, #0
 800967c:	f859 3b04 	ldr.w	r3, [r9], #4
 8009680:	f852 bf04 	ldr.w	fp, [r2, #4]!
 8009684:	fa1f f883 	uxth.w	r8, r3
 8009688:	fa11 f18b 	uxtah	r1, r1, fp
 800968c:	0c1b      	lsrs	r3, r3, #16
 800968e:	eba1 0808 	sub.w	r8, r1, r8
 8009692:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8009696:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800969a:	fa1f f888 	uxth.w	r8, r8
 800969e:	1419      	asrs	r1, r3, #16
 80096a0:	454e      	cmp	r6, r9
 80096a2:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 80096a6:	f84a 3b04 	str.w	r3, [sl], #4
 80096aa:	d8e7      	bhi.n	800967c <__mdiff+0x80>
 80096ac:	1b33      	subs	r3, r6, r4
 80096ae:	3b15      	subs	r3, #21
 80096b0:	f023 0303 	bic.w	r3, r3, #3
 80096b4:	3304      	adds	r3, #4
 80096b6:	3415      	adds	r4, #21
 80096b8:	42a6      	cmp	r6, r4
 80096ba:	bf38      	it	cc
 80096bc:	2304      	movcc	r3, #4
 80096be:	441d      	add	r5, r3
 80096c0:	4473      	add	r3, lr
 80096c2:	469e      	mov	lr, r3
 80096c4:	462e      	mov	r6, r5
 80096c6:	4566      	cmp	r6, ip
 80096c8:	d30e      	bcc.n	80096e8 <__mdiff+0xec>
 80096ca:	f10c 0203 	add.w	r2, ip, #3
 80096ce:	1b52      	subs	r2, r2, r5
 80096d0:	f022 0203 	bic.w	r2, r2, #3
 80096d4:	3d03      	subs	r5, #3
 80096d6:	45ac      	cmp	ip, r5
 80096d8:	bf38      	it	cc
 80096da:	2200      	movcc	r2, #0
 80096dc:	441a      	add	r2, r3
 80096de:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 80096e2:	b17b      	cbz	r3, 8009704 <__mdiff+0x108>
 80096e4:	6107      	str	r7, [r0, #16]
 80096e6:	e7a3      	b.n	8009630 <__mdiff+0x34>
 80096e8:	f856 8b04 	ldr.w	r8, [r6], #4
 80096ec:	fa11 f288 	uxtah	r2, r1, r8
 80096f0:	1414      	asrs	r4, r2, #16
 80096f2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80096f6:	b292      	uxth	r2, r2
 80096f8:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 80096fc:	f84e 2b04 	str.w	r2, [lr], #4
 8009700:	1421      	asrs	r1, r4, #16
 8009702:	e7e0      	b.n	80096c6 <__mdiff+0xca>
 8009704:	3f01      	subs	r7, #1
 8009706:	e7ea      	b.n	80096de <__mdiff+0xe2>
 8009708:	0800a10f 	.word	0x0800a10f
 800970c:	0800a120 	.word	0x0800a120

08009710 <__d2b>:
 8009710:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009714:	4689      	mov	r9, r1
 8009716:	2101      	movs	r1, #1
 8009718:	ec57 6b10 	vmov	r6, r7, d0
 800971c:	4690      	mov	r8, r2
 800971e:	f7ff fccf 	bl	80090c0 <_Balloc>
 8009722:	4604      	mov	r4, r0
 8009724:	b930      	cbnz	r0, 8009734 <__d2b+0x24>
 8009726:	4602      	mov	r2, r0
 8009728:	4b25      	ldr	r3, [pc, #148]	; (80097c0 <__d2b+0xb0>)
 800972a:	4826      	ldr	r0, [pc, #152]	; (80097c4 <__d2b+0xb4>)
 800972c:	f240 310a 	movw	r1, #778	; 0x30a
 8009730:	f000 fa18 	bl	8009b64 <__assert_func>
 8009734:	f3c7 550a 	ubfx	r5, r7, #20, #11
 8009738:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800973c:	bb35      	cbnz	r5, 800978c <__d2b+0x7c>
 800973e:	2e00      	cmp	r6, #0
 8009740:	9301      	str	r3, [sp, #4]
 8009742:	d028      	beq.n	8009796 <__d2b+0x86>
 8009744:	4668      	mov	r0, sp
 8009746:	9600      	str	r6, [sp, #0]
 8009748:	f7ff fd82 	bl	8009250 <__lo0bits>
 800974c:	9900      	ldr	r1, [sp, #0]
 800974e:	b300      	cbz	r0, 8009792 <__d2b+0x82>
 8009750:	9a01      	ldr	r2, [sp, #4]
 8009752:	f1c0 0320 	rsb	r3, r0, #32
 8009756:	fa02 f303 	lsl.w	r3, r2, r3
 800975a:	430b      	orrs	r3, r1
 800975c:	40c2      	lsrs	r2, r0
 800975e:	6163      	str	r3, [r4, #20]
 8009760:	9201      	str	r2, [sp, #4]
 8009762:	9b01      	ldr	r3, [sp, #4]
 8009764:	61a3      	str	r3, [r4, #24]
 8009766:	2b00      	cmp	r3, #0
 8009768:	bf14      	ite	ne
 800976a:	2202      	movne	r2, #2
 800976c:	2201      	moveq	r2, #1
 800976e:	6122      	str	r2, [r4, #16]
 8009770:	b1d5      	cbz	r5, 80097a8 <__d2b+0x98>
 8009772:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8009776:	4405      	add	r5, r0
 8009778:	f8c9 5000 	str.w	r5, [r9]
 800977c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009780:	f8c8 0000 	str.w	r0, [r8]
 8009784:	4620      	mov	r0, r4
 8009786:	b003      	add	sp, #12
 8009788:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800978c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009790:	e7d5      	b.n	800973e <__d2b+0x2e>
 8009792:	6161      	str	r1, [r4, #20]
 8009794:	e7e5      	b.n	8009762 <__d2b+0x52>
 8009796:	a801      	add	r0, sp, #4
 8009798:	f7ff fd5a 	bl	8009250 <__lo0bits>
 800979c:	9b01      	ldr	r3, [sp, #4]
 800979e:	6163      	str	r3, [r4, #20]
 80097a0:	2201      	movs	r2, #1
 80097a2:	6122      	str	r2, [r4, #16]
 80097a4:	3020      	adds	r0, #32
 80097a6:	e7e3      	b.n	8009770 <__d2b+0x60>
 80097a8:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80097ac:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80097b0:	f8c9 0000 	str.w	r0, [r9]
 80097b4:	6918      	ldr	r0, [r3, #16]
 80097b6:	f7ff fd2b 	bl	8009210 <__hi0bits>
 80097ba:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80097be:	e7df      	b.n	8009780 <__d2b+0x70>
 80097c0:	0800a10f 	.word	0x0800a10f
 80097c4:	0800a120 	.word	0x0800a120

080097c8 <_calloc_r>:
 80097c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097ca:	fba1 2402 	umull	r2, r4, r1, r2
 80097ce:	b94c      	cbnz	r4, 80097e4 <_calloc_r+0x1c>
 80097d0:	4611      	mov	r1, r2
 80097d2:	9201      	str	r2, [sp, #4]
 80097d4:	f7fd fd9a 	bl	800730c <_malloc_r>
 80097d8:	9a01      	ldr	r2, [sp, #4]
 80097da:	4605      	mov	r5, r0
 80097dc:	b930      	cbnz	r0, 80097ec <_calloc_r+0x24>
 80097de:	4628      	mov	r0, r5
 80097e0:	b003      	add	sp, #12
 80097e2:	bd30      	pop	{r4, r5, pc}
 80097e4:	220c      	movs	r2, #12
 80097e6:	6002      	str	r2, [r0, #0]
 80097e8:	2500      	movs	r5, #0
 80097ea:	e7f8      	b.n	80097de <_calloc_r+0x16>
 80097ec:	4621      	mov	r1, r4
 80097ee:	f7fd fd64 	bl	80072ba <memset>
 80097f2:	e7f4      	b.n	80097de <_calloc_r+0x16>

080097f4 <_free_r>:
 80097f4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80097f6:	2900      	cmp	r1, #0
 80097f8:	d044      	beq.n	8009884 <_free_r+0x90>
 80097fa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80097fe:	9001      	str	r0, [sp, #4]
 8009800:	2b00      	cmp	r3, #0
 8009802:	f1a1 0404 	sub.w	r4, r1, #4
 8009806:	bfb8      	it	lt
 8009808:	18e4      	addlt	r4, r4, r3
 800980a:	f7ff fc4d 	bl	80090a8 <__malloc_lock>
 800980e:	4a1e      	ldr	r2, [pc, #120]	; (8009888 <_free_r+0x94>)
 8009810:	9801      	ldr	r0, [sp, #4]
 8009812:	6813      	ldr	r3, [r2, #0]
 8009814:	b933      	cbnz	r3, 8009824 <_free_r+0x30>
 8009816:	6063      	str	r3, [r4, #4]
 8009818:	6014      	str	r4, [r2, #0]
 800981a:	b003      	add	sp, #12
 800981c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009820:	f7ff bc48 	b.w	80090b4 <__malloc_unlock>
 8009824:	42a3      	cmp	r3, r4
 8009826:	d908      	bls.n	800983a <_free_r+0x46>
 8009828:	6825      	ldr	r5, [r4, #0]
 800982a:	1961      	adds	r1, r4, r5
 800982c:	428b      	cmp	r3, r1
 800982e:	bf01      	itttt	eq
 8009830:	6819      	ldreq	r1, [r3, #0]
 8009832:	685b      	ldreq	r3, [r3, #4]
 8009834:	1949      	addeq	r1, r1, r5
 8009836:	6021      	streq	r1, [r4, #0]
 8009838:	e7ed      	b.n	8009816 <_free_r+0x22>
 800983a:	461a      	mov	r2, r3
 800983c:	685b      	ldr	r3, [r3, #4]
 800983e:	b10b      	cbz	r3, 8009844 <_free_r+0x50>
 8009840:	42a3      	cmp	r3, r4
 8009842:	d9fa      	bls.n	800983a <_free_r+0x46>
 8009844:	6811      	ldr	r1, [r2, #0]
 8009846:	1855      	adds	r5, r2, r1
 8009848:	42a5      	cmp	r5, r4
 800984a:	d10b      	bne.n	8009864 <_free_r+0x70>
 800984c:	6824      	ldr	r4, [r4, #0]
 800984e:	4421      	add	r1, r4
 8009850:	1854      	adds	r4, r2, r1
 8009852:	42a3      	cmp	r3, r4
 8009854:	6011      	str	r1, [r2, #0]
 8009856:	d1e0      	bne.n	800981a <_free_r+0x26>
 8009858:	681c      	ldr	r4, [r3, #0]
 800985a:	685b      	ldr	r3, [r3, #4]
 800985c:	6053      	str	r3, [r2, #4]
 800985e:	4421      	add	r1, r4
 8009860:	6011      	str	r1, [r2, #0]
 8009862:	e7da      	b.n	800981a <_free_r+0x26>
 8009864:	d902      	bls.n	800986c <_free_r+0x78>
 8009866:	230c      	movs	r3, #12
 8009868:	6003      	str	r3, [r0, #0]
 800986a:	e7d6      	b.n	800981a <_free_r+0x26>
 800986c:	6825      	ldr	r5, [r4, #0]
 800986e:	1961      	adds	r1, r4, r5
 8009870:	428b      	cmp	r3, r1
 8009872:	bf04      	itt	eq
 8009874:	6819      	ldreq	r1, [r3, #0]
 8009876:	685b      	ldreq	r3, [r3, #4]
 8009878:	6063      	str	r3, [r4, #4]
 800987a:	bf04      	itt	eq
 800987c:	1949      	addeq	r1, r1, r5
 800987e:	6021      	streq	r1, [r4, #0]
 8009880:	6054      	str	r4, [r2, #4]
 8009882:	e7ca      	b.n	800981a <_free_r+0x26>
 8009884:	b003      	add	sp, #12
 8009886:	bd30      	pop	{r4, r5, pc}
 8009888:	20002270 	.word	0x20002270

0800988c <__sfputc_r>:
 800988c:	6893      	ldr	r3, [r2, #8]
 800988e:	3b01      	subs	r3, #1
 8009890:	2b00      	cmp	r3, #0
 8009892:	b410      	push	{r4}
 8009894:	6093      	str	r3, [r2, #8]
 8009896:	da08      	bge.n	80098aa <__sfputc_r+0x1e>
 8009898:	6994      	ldr	r4, [r2, #24]
 800989a:	42a3      	cmp	r3, r4
 800989c:	db01      	blt.n	80098a2 <__sfputc_r+0x16>
 800989e:	290a      	cmp	r1, #10
 80098a0:	d103      	bne.n	80098aa <__sfputc_r+0x1e>
 80098a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098a6:	f7fe bb5b 	b.w	8007f60 <__swbuf_r>
 80098aa:	6813      	ldr	r3, [r2, #0]
 80098ac:	1c58      	adds	r0, r3, #1
 80098ae:	6010      	str	r0, [r2, #0]
 80098b0:	7019      	strb	r1, [r3, #0]
 80098b2:	4608      	mov	r0, r1
 80098b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80098b8:	4770      	bx	lr

080098ba <__sfputs_r>:
 80098ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80098bc:	4606      	mov	r6, r0
 80098be:	460f      	mov	r7, r1
 80098c0:	4614      	mov	r4, r2
 80098c2:	18d5      	adds	r5, r2, r3
 80098c4:	42ac      	cmp	r4, r5
 80098c6:	d101      	bne.n	80098cc <__sfputs_r+0x12>
 80098c8:	2000      	movs	r0, #0
 80098ca:	e007      	b.n	80098dc <__sfputs_r+0x22>
 80098cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098d0:	463a      	mov	r2, r7
 80098d2:	4630      	mov	r0, r6
 80098d4:	f7ff ffda 	bl	800988c <__sfputc_r>
 80098d8:	1c43      	adds	r3, r0, #1
 80098da:	d1f3      	bne.n	80098c4 <__sfputs_r+0xa>
 80098dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080098e0 <_vfiprintf_r>:
 80098e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098e4:	460d      	mov	r5, r1
 80098e6:	b09d      	sub	sp, #116	; 0x74
 80098e8:	4614      	mov	r4, r2
 80098ea:	4698      	mov	r8, r3
 80098ec:	4606      	mov	r6, r0
 80098ee:	b118      	cbz	r0, 80098f8 <_vfiprintf_r+0x18>
 80098f0:	6983      	ldr	r3, [r0, #24]
 80098f2:	b90b      	cbnz	r3, 80098f8 <_vfiprintf_r+0x18>
 80098f4:	f7fd fc0e 	bl	8007114 <__sinit>
 80098f8:	4b89      	ldr	r3, [pc, #548]	; (8009b20 <_vfiprintf_r+0x240>)
 80098fa:	429d      	cmp	r5, r3
 80098fc:	d11b      	bne.n	8009936 <_vfiprintf_r+0x56>
 80098fe:	6875      	ldr	r5, [r6, #4]
 8009900:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009902:	07d9      	lsls	r1, r3, #31
 8009904:	d405      	bmi.n	8009912 <_vfiprintf_r+0x32>
 8009906:	89ab      	ldrh	r3, [r5, #12]
 8009908:	059a      	lsls	r2, r3, #22
 800990a:	d402      	bmi.n	8009912 <_vfiprintf_r+0x32>
 800990c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800990e:	f7fd fcc4 	bl	800729a <__retarget_lock_acquire_recursive>
 8009912:	89ab      	ldrh	r3, [r5, #12]
 8009914:	071b      	lsls	r3, r3, #28
 8009916:	d501      	bpl.n	800991c <_vfiprintf_r+0x3c>
 8009918:	692b      	ldr	r3, [r5, #16]
 800991a:	b9eb      	cbnz	r3, 8009958 <_vfiprintf_r+0x78>
 800991c:	4629      	mov	r1, r5
 800991e:	4630      	mov	r0, r6
 8009920:	f7fe fb82 	bl	8008028 <__swsetup_r>
 8009924:	b1c0      	cbz	r0, 8009958 <_vfiprintf_r+0x78>
 8009926:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009928:	07dc      	lsls	r4, r3, #31
 800992a:	d50e      	bpl.n	800994a <_vfiprintf_r+0x6a>
 800992c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009930:	b01d      	add	sp, #116	; 0x74
 8009932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009936:	4b7b      	ldr	r3, [pc, #492]	; (8009b24 <_vfiprintf_r+0x244>)
 8009938:	429d      	cmp	r5, r3
 800993a:	d101      	bne.n	8009940 <_vfiprintf_r+0x60>
 800993c:	68b5      	ldr	r5, [r6, #8]
 800993e:	e7df      	b.n	8009900 <_vfiprintf_r+0x20>
 8009940:	4b79      	ldr	r3, [pc, #484]	; (8009b28 <_vfiprintf_r+0x248>)
 8009942:	429d      	cmp	r5, r3
 8009944:	bf08      	it	eq
 8009946:	68f5      	ldreq	r5, [r6, #12]
 8009948:	e7da      	b.n	8009900 <_vfiprintf_r+0x20>
 800994a:	89ab      	ldrh	r3, [r5, #12]
 800994c:	0598      	lsls	r0, r3, #22
 800994e:	d4ed      	bmi.n	800992c <_vfiprintf_r+0x4c>
 8009950:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009952:	f7fd fca3 	bl	800729c <__retarget_lock_release_recursive>
 8009956:	e7e9      	b.n	800992c <_vfiprintf_r+0x4c>
 8009958:	2300      	movs	r3, #0
 800995a:	9309      	str	r3, [sp, #36]	; 0x24
 800995c:	2320      	movs	r3, #32
 800995e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009962:	f8cd 800c 	str.w	r8, [sp, #12]
 8009966:	2330      	movs	r3, #48	; 0x30
 8009968:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009b2c <_vfiprintf_r+0x24c>
 800996c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009970:	f04f 0901 	mov.w	r9, #1
 8009974:	4623      	mov	r3, r4
 8009976:	469a      	mov	sl, r3
 8009978:	f813 2b01 	ldrb.w	r2, [r3], #1
 800997c:	b10a      	cbz	r2, 8009982 <_vfiprintf_r+0xa2>
 800997e:	2a25      	cmp	r2, #37	; 0x25
 8009980:	d1f9      	bne.n	8009976 <_vfiprintf_r+0x96>
 8009982:	ebba 0b04 	subs.w	fp, sl, r4
 8009986:	d00b      	beq.n	80099a0 <_vfiprintf_r+0xc0>
 8009988:	465b      	mov	r3, fp
 800998a:	4622      	mov	r2, r4
 800998c:	4629      	mov	r1, r5
 800998e:	4630      	mov	r0, r6
 8009990:	f7ff ff93 	bl	80098ba <__sfputs_r>
 8009994:	3001      	adds	r0, #1
 8009996:	f000 80aa 	beq.w	8009aee <_vfiprintf_r+0x20e>
 800999a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800999c:	445a      	add	r2, fp
 800999e:	9209      	str	r2, [sp, #36]	; 0x24
 80099a0:	f89a 3000 	ldrb.w	r3, [sl]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	f000 80a2 	beq.w	8009aee <_vfiprintf_r+0x20e>
 80099aa:	2300      	movs	r3, #0
 80099ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80099b0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80099b4:	f10a 0a01 	add.w	sl, sl, #1
 80099b8:	9304      	str	r3, [sp, #16]
 80099ba:	9307      	str	r3, [sp, #28]
 80099bc:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80099c0:	931a      	str	r3, [sp, #104]	; 0x68
 80099c2:	4654      	mov	r4, sl
 80099c4:	2205      	movs	r2, #5
 80099c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80099ca:	4858      	ldr	r0, [pc, #352]	; (8009b2c <_vfiprintf_r+0x24c>)
 80099cc:	f7f6 fc08 	bl	80001e0 <memchr>
 80099d0:	9a04      	ldr	r2, [sp, #16]
 80099d2:	b9d8      	cbnz	r0, 8009a0c <_vfiprintf_r+0x12c>
 80099d4:	06d1      	lsls	r1, r2, #27
 80099d6:	bf44      	itt	mi
 80099d8:	2320      	movmi	r3, #32
 80099da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099de:	0713      	lsls	r3, r2, #28
 80099e0:	bf44      	itt	mi
 80099e2:	232b      	movmi	r3, #43	; 0x2b
 80099e4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80099e8:	f89a 3000 	ldrb.w	r3, [sl]
 80099ec:	2b2a      	cmp	r3, #42	; 0x2a
 80099ee:	d015      	beq.n	8009a1c <_vfiprintf_r+0x13c>
 80099f0:	9a07      	ldr	r2, [sp, #28]
 80099f2:	4654      	mov	r4, sl
 80099f4:	2000      	movs	r0, #0
 80099f6:	f04f 0c0a 	mov.w	ip, #10
 80099fa:	4621      	mov	r1, r4
 80099fc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009a00:	3b30      	subs	r3, #48	; 0x30
 8009a02:	2b09      	cmp	r3, #9
 8009a04:	d94e      	bls.n	8009aa4 <_vfiprintf_r+0x1c4>
 8009a06:	b1b0      	cbz	r0, 8009a36 <_vfiprintf_r+0x156>
 8009a08:	9207      	str	r2, [sp, #28]
 8009a0a:	e014      	b.n	8009a36 <_vfiprintf_r+0x156>
 8009a0c:	eba0 0308 	sub.w	r3, r0, r8
 8009a10:	fa09 f303 	lsl.w	r3, r9, r3
 8009a14:	4313      	orrs	r3, r2
 8009a16:	9304      	str	r3, [sp, #16]
 8009a18:	46a2      	mov	sl, r4
 8009a1a:	e7d2      	b.n	80099c2 <_vfiprintf_r+0xe2>
 8009a1c:	9b03      	ldr	r3, [sp, #12]
 8009a1e:	1d19      	adds	r1, r3, #4
 8009a20:	681b      	ldr	r3, [r3, #0]
 8009a22:	9103      	str	r1, [sp, #12]
 8009a24:	2b00      	cmp	r3, #0
 8009a26:	bfbb      	ittet	lt
 8009a28:	425b      	neglt	r3, r3
 8009a2a:	f042 0202 	orrlt.w	r2, r2, #2
 8009a2e:	9307      	strge	r3, [sp, #28]
 8009a30:	9307      	strlt	r3, [sp, #28]
 8009a32:	bfb8      	it	lt
 8009a34:	9204      	strlt	r2, [sp, #16]
 8009a36:	7823      	ldrb	r3, [r4, #0]
 8009a38:	2b2e      	cmp	r3, #46	; 0x2e
 8009a3a:	d10c      	bne.n	8009a56 <_vfiprintf_r+0x176>
 8009a3c:	7863      	ldrb	r3, [r4, #1]
 8009a3e:	2b2a      	cmp	r3, #42	; 0x2a
 8009a40:	d135      	bne.n	8009aae <_vfiprintf_r+0x1ce>
 8009a42:	9b03      	ldr	r3, [sp, #12]
 8009a44:	1d1a      	adds	r2, r3, #4
 8009a46:	681b      	ldr	r3, [r3, #0]
 8009a48:	9203      	str	r2, [sp, #12]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	bfb8      	it	lt
 8009a4e:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009a52:	3402      	adds	r4, #2
 8009a54:	9305      	str	r3, [sp, #20]
 8009a56:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009b3c <_vfiprintf_r+0x25c>
 8009a5a:	7821      	ldrb	r1, [r4, #0]
 8009a5c:	2203      	movs	r2, #3
 8009a5e:	4650      	mov	r0, sl
 8009a60:	f7f6 fbbe 	bl	80001e0 <memchr>
 8009a64:	b140      	cbz	r0, 8009a78 <_vfiprintf_r+0x198>
 8009a66:	2340      	movs	r3, #64	; 0x40
 8009a68:	eba0 000a 	sub.w	r0, r0, sl
 8009a6c:	fa03 f000 	lsl.w	r0, r3, r0
 8009a70:	9b04      	ldr	r3, [sp, #16]
 8009a72:	4303      	orrs	r3, r0
 8009a74:	3401      	adds	r4, #1
 8009a76:	9304      	str	r3, [sp, #16]
 8009a78:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a7c:	482c      	ldr	r0, [pc, #176]	; (8009b30 <_vfiprintf_r+0x250>)
 8009a7e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009a82:	2206      	movs	r2, #6
 8009a84:	f7f6 fbac 	bl	80001e0 <memchr>
 8009a88:	2800      	cmp	r0, #0
 8009a8a:	d03f      	beq.n	8009b0c <_vfiprintf_r+0x22c>
 8009a8c:	4b29      	ldr	r3, [pc, #164]	; (8009b34 <_vfiprintf_r+0x254>)
 8009a8e:	bb1b      	cbnz	r3, 8009ad8 <_vfiprintf_r+0x1f8>
 8009a90:	9b03      	ldr	r3, [sp, #12]
 8009a92:	3307      	adds	r3, #7
 8009a94:	f023 0307 	bic.w	r3, r3, #7
 8009a98:	3308      	adds	r3, #8
 8009a9a:	9303      	str	r3, [sp, #12]
 8009a9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009a9e:	443b      	add	r3, r7
 8009aa0:	9309      	str	r3, [sp, #36]	; 0x24
 8009aa2:	e767      	b.n	8009974 <_vfiprintf_r+0x94>
 8009aa4:	fb0c 3202 	mla	r2, ip, r2, r3
 8009aa8:	460c      	mov	r4, r1
 8009aaa:	2001      	movs	r0, #1
 8009aac:	e7a5      	b.n	80099fa <_vfiprintf_r+0x11a>
 8009aae:	2300      	movs	r3, #0
 8009ab0:	3401      	adds	r4, #1
 8009ab2:	9305      	str	r3, [sp, #20]
 8009ab4:	4619      	mov	r1, r3
 8009ab6:	f04f 0c0a 	mov.w	ip, #10
 8009aba:	4620      	mov	r0, r4
 8009abc:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009ac0:	3a30      	subs	r2, #48	; 0x30
 8009ac2:	2a09      	cmp	r2, #9
 8009ac4:	d903      	bls.n	8009ace <_vfiprintf_r+0x1ee>
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d0c5      	beq.n	8009a56 <_vfiprintf_r+0x176>
 8009aca:	9105      	str	r1, [sp, #20]
 8009acc:	e7c3      	b.n	8009a56 <_vfiprintf_r+0x176>
 8009ace:	fb0c 2101 	mla	r1, ip, r1, r2
 8009ad2:	4604      	mov	r4, r0
 8009ad4:	2301      	movs	r3, #1
 8009ad6:	e7f0      	b.n	8009aba <_vfiprintf_r+0x1da>
 8009ad8:	ab03      	add	r3, sp, #12
 8009ada:	9300      	str	r3, [sp, #0]
 8009adc:	462a      	mov	r2, r5
 8009ade:	4b16      	ldr	r3, [pc, #88]	; (8009b38 <_vfiprintf_r+0x258>)
 8009ae0:	a904      	add	r1, sp, #16
 8009ae2:	4630      	mov	r0, r6
 8009ae4:	f7fd fd26 	bl	8007534 <_printf_float>
 8009ae8:	4607      	mov	r7, r0
 8009aea:	1c78      	adds	r0, r7, #1
 8009aec:	d1d6      	bne.n	8009a9c <_vfiprintf_r+0x1bc>
 8009aee:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009af0:	07d9      	lsls	r1, r3, #31
 8009af2:	d405      	bmi.n	8009b00 <_vfiprintf_r+0x220>
 8009af4:	89ab      	ldrh	r3, [r5, #12]
 8009af6:	059a      	lsls	r2, r3, #22
 8009af8:	d402      	bmi.n	8009b00 <_vfiprintf_r+0x220>
 8009afa:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009afc:	f7fd fbce 	bl	800729c <__retarget_lock_release_recursive>
 8009b00:	89ab      	ldrh	r3, [r5, #12]
 8009b02:	065b      	lsls	r3, r3, #25
 8009b04:	f53f af12 	bmi.w	800992c <_vfiprintf_r+0x4c>
 8009b08:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b0a:	e711      	b.n	8009930 <_vfiprintf_r+0x50>
 8009b0c:	ab03      	add	r3, sp, #12
 8009b0e:	9300      	str	r3, [sp, #0]
 8009b10:	462a      	mov	r2, r5
 8009b12:	4b09      	ldr	r3, [pc, #36]	; (8009b38 <_vfiprintf_r+0x258>)
 8009b14:	a904      	add	r1, sp, #16
 8009b16:	4630      	mov	r0, r6
 8009b18:	f7fd ffb0 	bl	8007a7c <_printf_i>
 8009b1c:	e7e4      	b.n	8009ae8 <_vfiprintf_r+0x208>
 8009b1e:	bf00      	nop
 8009b20:	0800a018 	.word	0x0800a018
 8009b24:	0800a038 	.word	0x0800a038
 8009b28:	08009ff8 	.word	0x08009ff8
 8009b2c:	0800a27c 	.word	0x0800a27c
 8009b30:	0800a286 	.word	0x0800a286
 8009b34:	08007535 	.word	0x08007535
 8009b38:	080098bb 	.word	0x080098bb
 8009b3c:	0800a282 	.word	0x0800a282

08009b40 <_read_r>:
 8009b40:	b538      	push	{r3, r4, r5, lr}
 8009b42:	4d07      	ldr	r5, [pc, #28]	; (8009b60 <_read_r+0x20>)
 8009b44:	4604      	mov	r4, r0
 8009b46:	4608      	mov	r0, r1
 8009b48:	4611      	mov	r1, r2
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	602a      	str	r2, [r5, #0]
 8009b4e:	461a      	mov	r2, r3
 8009b50:	f7f7 fdf6 	bl	8001740 <_read>
 8009b54:	1c43      	adds	r3, r0, #1
 8009b56:	d102      	bne.n	8009b5e <_read_r+0x1e>
 8009b58:	682b      	ldr	r3, [r5, #0]
 8009b5a:	b103      	cbz	r3, 8009b5e <_read_r+0x1e>
 8009b5c:	6023      	str	r3, [r4, #0]
 8009b5e:	bd38      	pop	{r3, r4, r5, pc}
 8009b60:	20002278 	.word	0x20002278

08009b64 <__assert_func>:
 8009b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b66:	4614      	mov	r4, r2
 8009b68:	461a      	mov	r2, r3
 8009b6a:	4b09      	ldr	r3, [pc, #36]	; (8009b90 <__assert_func+0x2c>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	4605      	mov	r5, r0
 8009b70:	68d8      	ldr	r0, [r3, #12]
 8009b72:	b14c      	cbz	r4, 8009b88 <__assert_func+0x24>
 8009b74:	4b07      	ldr	r3, [pc, #28]	; (8009b94 <__assert_func+0x30>)
 8009b76:	9100      	str	r1, [sp, #0]
 8009b78:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b7c:	4906      	ldr	r1, [pc, #24]	; (8009b98 <__assert_func+0x34>)
 8009b7e:	462b      	mov	r3, r5
 8009b80:	f000 f80e 	bl	8009ba0 <fiprintf>
 8009b84:	f000 f85f 	bl	8009c46 <abort>
 8009b88:	4b04      	ldr	r3, [pc, #16]	; (8009b9c <__assert_func+0x38>)
 8009b8a:	461c      	mov	r4, r3
 8009b8c:	e7f3      	b.n	8009b76 <__assert_func+0x12>
 8009b8e:	bf00      	nop
 8009b90:	20000010 	.word	0x20000010
 8009b94:	0800a28d 	.word	0x0800a28d
 8009b98:	0800a29a 	.word	0x0800a29a
 8009b9c:	0800a2c8 	.word	0x0800a2c8

08009ba0 <fiprintf>:
 8009ba0:	b40e      	push	{r1, r2, r3}
 8009ba2:	b503      	push	{r0, r1, lr}
 8009ba4:	4601      	mov	r1, r0
 8009ba6:	ab03      	add	r3, sp, #12
 8009ba8:	4805      	ldr	r0, [pc, #20]	; (8009bc0 <fiprintf+0x20>)
 8009baa:	f853 2b04 	ldr.w	r2, [r3], #4
 8009bae:	6800      	ldr	r0, [r0, #0]
 8009bb0:	9301      	str	r3, [sp, #4]
 8009bb2:	f7ff fe95 	bl	80098e0 <_vfiprintf_r>
 8009bb6:	b002      	add	sp, #8
 8009bb8:	f85d eb04 	ldr.w	lr, [sp], #4
 8009bbc:	b003      	add	sp, #12
 8009bbe:	4770      	bx	lr
 8009bc0:	20000010 	.word	0x20000010

08009bc4 <_fstat_r>:
 8009bc4:	b538      	push	{r3, r4, r5, lr}
 8009bc6:	4d07      	ldr	r5, [pc, #28]	; (8009be4 <_fstat_r+0x20>)
 8009bc8:	2300      	movs	r3, #0
 8009bca:	4604      	mov	r4, r0
 8009bcc:	4608      	mov	r0, r1
 8009bce:	4611      	mov	r1, r2
 8009bd0:	602b      	str	r3, [r5, #0]
 8009bd2:	f7f7 fdde 	bl	8001792 <_fstat>
 8009bd6:	1c43      	adds	r3, r0, #1
 8009bd8:	d102      	bne.n	8009be0 <_fstat_r+0x1c>
 8009bda:	682b      	ldr	r3, [r5, #0]
 8009bdc:	b103      	cbz	r3, 8009be0 <_fstat_r+0x1c>
 8009bde:	6023      	str	r3, [r4, #0]
 8009be0:	bd38      	pop	{r3, r4, r5, pc}
 8009be2:	bf00      	nop
 8009be4:	20002278 	.word	0x20002278

08009be8 <_isatty_r>:
 8009be8:	b538      	push	{r3, r4, r5, lr}
 8009bea:	4d06      	ldr	r5, [pc, #24]	; (8009c04 <_isatty_r+0x1c>)
 8009bec:	2300      	movs	r3, #0
 8009bee:	4604      	mov	r4, r0
 8009bf0:	4608      	mov	r0, r1
 8009bf2:	602b      	str	r3, [r5, #0]
 8009bf4:	f7f7 fddd 	bl	80017b2 <_isatty>
 8009bf8:	1c43      	adds	r3, r0, #1
 8009bfa:	d102      	bne.n	8009c02 <_isatty_r+0x1a>
 8009bfc:	682b      	ldr	r3, [r5, #0]
 8009bfe:	b103      	cbz	r3, 8009c02 <_isatty_r+0x1a>
 8009c00:	6023      	str	r3, [r4, #0]
 8009c02:	bd38      	pop	{r3, r4, r5, pc}
 8009c04:	20002278 	.word	0x20002278

08009c08 <__ascii_mbtowc>:
 8009c08:	b082      	sub	sp, #8
 8009c0a:	b901      	cbnz	r1, 8009c0e <__ascii_mbtowc+0x6>
 8009c0c:	a901      	add	r1, sp, #4
 8009c0e:	b142      	cbz	r2, 8009c22 <__ascii_mbtowc+0x1a>
 8009c10:	b14b      	cbz	r3, 8009c26 <__ascii_mbtowc+0x1e>
 8009c12:	7813      	ldrb	r3, [r2, #0]
 8009c14:	600b      	str	r3, [r1, #0]
 8009c16:	7812      	ldrb	r2, [r2, #0]
 8009c18:	1e10      	subs	r0, r2, #0
 8009c1a:	bf18      	it	ne
 8009c1c:	2001      	movne	r0, #1
 8009c1e:	b002      	add	sp, #8
 8009c20:	4770      	bx	lr
 8009c22:	4610      	mov	r0, r2
 8009c24:	e7fb      	b.n	8009c1e <__ascii_mbtowc+0x16>
 8009c26:	f06f 0001 	mvn.w	r0, #1
 8009c2a:	e7f8      	b.n	8009c1e <__ascii_mbtowc+0x16>

08009c2c <__ascii_wctomb>:
 8009c2c:	b149      	cbz	r1, 8009c42 <__ascii_wctomb+0x16>
 8009c2e:	2aff      	cmp	r2, #255	; 0xff
 8009c30:	bf85      	ittet	hi
 8009c32:	238a      	movhi	r3, #138	; 0x8a
 8009c34:	6003      	strhi	r3, [r0, #0]
 8009c36:	700a      	strbls	r2, [r1, #0]
 8009c38:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8009c3c:	bf98      	it	ls
 8009c3e:	2001      	movls	r0, #1
 8009c40:	4770      	bx	lr
 8009c42:	4608      	mov	r0, r1
 8009c44:	4770      	bx	lr

08009c46 <abort>:
 8009c46:	b508      	push	{r3, lr}
 8009c48:	2006      	movs	r0, #6
 8009c4a:	f000 f82b 	bl	8009ca4 <raise>
 8009c4e:	2001      	movs	r0, #1
 8009c50:	f7f7 fd6c 	bl	800172c <_exit>

08009c54 <_raise_r>:
 8009c54:	291f      	cmp	r1, #31
 8009c56:	b538      	push	{r3, r4, r5, lr}
 8009c58:	4604      	mov	r4, r0
 8009c5a:	460d      	mov	r5, r1
 8009c5c:	d904      	bls.n	8009c68 <_raise_r+0x14>
 8009c5e:	2316      	movs	r3, #22
 8009c60:	6003      	str	r3, [r0, #0]
 8009c62:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009c66:	bd38      	pop	{r3, r4, r5, pc}
 8009c68:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8009c6a:	b112      	cbz	r2, 8009c72 <_raise_r+0x1e>
 8009c6c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009c70:	b94b      	cbnz	r3, 8009c86 <_raise_r+0x32>
 8009c72:	4620      	mov	r0, r4
 8009c74:	f000 f830 	bl	8009cd8 <_getpid_r>
 8009c78:	462a      	mov	r2, r5
 8009c7a:	4601      	mov	r1, r0
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009c82:	f000 b817 	b.w	8009cb4 <_kill_r>
 8009c86:	2b01      	cmp	r3, #1
 8009c88:	d00a      	beq.n	8009ca0 <_raise_r+0x4c>
 8009c8a:	1c59      	adds	r1, r3, #1
 8009c8c:	d103      	bne.n	8009c96 <_raise_r+0x42>
 8009c8e:	2316      	movs	r3, #22
 8009c90:	6003      	str	r3, [r0, #0]
 8009c92:	2001      	movs	r0, #1
 8009c94:	e7e7      	b.n	8009c66 <_raise_r+0x12>
 8009c96:	2400      	movs	r4, #0
 8009c98:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	4798      	blx	r3
 8009ca0:	2000      	movs	r0, #0
 8009ca2:	e7e0      	b.n	8009c66 <_raise_r+0x12>

08009ca4 <raise>:
 8009ca4:	4b02      	ldr	r3, [pc, #8]	; (8009cb0 <raise+0xc>)
 8009ca6:	4601      	mov	r1, r0
 8009ca8:	6818      	ldr	r0, [r3, #0]
 8009caa:	f7ff bfd3 	b.w	8009c54 <_raise_r>
 8009cae:	bf00      	nop
 8009cb0:	20000010 	.word	0x20000010

08009cb4 <_kill_r>:
 8009cb4:	b538      	push	{r3, r4, r5, lr}
 8009cb6:	4d07      	ldr	r5, [pc, #28]	; (8009cd4 <_kill_r+0x20>)
 8009cb8:	2300      	movs	r3, #0
 8009cba:	4604      	mov	r4, r0
 8009cbc:	4608      	mov	r0, r1
 8009cbe:	4611      	mov	r1, r2
 8009cc0:	602b      	str	r3, [r5, #0]
 8009cc2:	f7f7 fd23 	bl	800170c <_kill>
 8009cc6:	1c43      	adds	r3, r0, #1
 8009cc8:	d102      	bne.n	8009cd0 <_kill_r+0x1c>
 8009cca:	682b      	ldr	r3, [r5, #0]
 8009ccc:	b103      	cbz	r3, 8009cd0 <_kill_r+0x1c>
 8009cce:	6023      	str	r3, [r4, #0]
 8009cd0:	bd38      	pop	{r3, r4, r5, pc}
 8009cd2:	bf00      	nop
 8009cd4:	20002278 	.word	0x20002278

08009cd8 <_getpid_r>:
 8009cd8:	f7f7 bd10 	b.w	80016fc <_getpid>

08009cdc <_init>:
 8009cdc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cde:	bf00      	nop
 8009ce0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009ce2:	bc08      	pop	{r3}
 8009ce4:	469e      	mov	lr, r3
 8009ce6:	4770      	bx	lr

08009ce8 <_fini>:
 8009ce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009cea:	bf00      	nop
 8009cec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009cee:	bc08      	pop	{r3}
 8009cf0:	469e      	mov	lr, r3
 8009cf2:	4770      	bx	lr
