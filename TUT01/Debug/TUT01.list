
TUT01.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008270  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000234  08008400  08008400  00018400  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008634  08008634  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008634  08008634  00018634  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800863c  0800863c  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800863c  0800863c  0001863c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008640  08008640  00018640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008644  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000017f4  20000074  080086b8  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001868  080086b8  00021868  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d93d  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003e5e  00000000  00000000  0003d9e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001850  00000000  00000000  00041840  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016b8  00000000  00000000  00043090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024cc5  00000000  00000000  00044748  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b60d  00000000  00000000  0006940d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7948  00000000  00000000  00084a1a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015c362  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007000  00000000  00000000  0015c3b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080083e8 	.word	0x080083e8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	080083e8 	.word	0x080083e8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
	SemInit(NUM_PRODS);
 8000588:	2002      	movs	r0, #2
 800058a:	f000 f939 	bl	8000800 <SemInit>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800058e:	4a05      	ldr	r2, [pc, #20]	; (80005a4 <MX_FREERTOS_Init+0x20>)
 8000590:	2100      	movs	r1, #0
 8000592:	4805      	ldr	r0, [pc, #20]	; (80005a8 <MX_FREERTOS_Init+0x24>)
 8000594:	f003 f943 	bl	800381e <osThreadNew>
 8000598:	4603      	mov	r3, r0
 800059a:	4a04      	ldr	r2, [pc, #16]	; (80005ac <MX_FREERTOS_Init+0x28>)
 800059c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 800059e:	bf00      	nop
 80005a0:	bd80      	pop	{r7, pc}
 80005a2:	bf00      	nop
 80005a4:	08008480 	.word	0x08008480
 80005a8:	080005b1 	.word	0x080005b1
 80005ac:	2000009c 	.word	0x2000009c

080005b0 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80005b0:	b590      	push	{r4, r7, lr}
 80005b2:	b097      	sub	sp, #92	; 0x5c
 80005b4:	af00      	add	r7, sp, #0
 80005b6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
osThreadAttr_t producerAttributes = {
 80005b8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80005bc:	2224      	movs	r2, #36	; 0x24
 80005be:	2100      	movs	r1, #0
 80005c0:	4618      	mov	r0, r3
 80005c2:	f006 fd64 	bl	800708e <memset>
 80005c6:	4b1d      	ldr	r3, [pc, #116]	; (800063c <StartDefaultTask+0x8c>)
 80005c8:	633b      	str	r3, [r7, #48]	; 0x30
 80005ca:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ce:	647b      	str	r3, [r7, #68]	; 0x44
 80005d0:	2308      	movs	r3, #8
 80005d2:	64bb      	str	r3, [r7, #72]	; 0x48
		.name = "producerTask",
		.stack_size = 64 * 4,
		.priority = (osPriority_t) osPriorityLow,
};
osThreadAttr_t consumerAttributes = {
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2224      	movs	r2, #36	; 0x24
 80005da:	2100      	movs	r1, #0
 80005dc:	4618      	mov	r0, r3
 80005de:	f006 fd56 	bl	800708e <memset>
 80005e2:	4b17      	ldr	r3, [pc, #92]	; (8000640 <StartDefaultTask+0x90>)
 80005e4:	60fb      	str	r3, [r7, #12]
 80005e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80005ea:	623b      	str	r3, [r7, #32]
 80005ec:	2308      	movs	r3, #8
 80005ee:	627b      	str	r3, [r7, #36]	; 0x24
		.priority = (osPriority_t) osPriorityLow,
};
  /* Infinite loop */
  for(;;)
  {
	  for(uint8_t i = 0; i < NUM_PRODS; i++) {
 80005f0:	2300      	movs	r3, #0
 80005f2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 80005f6:	e011      	b.n	800061c <StartDefaultTask+0x6c>
		  producerHandles[i] = osThreadNew(ProducerTask, NULL, &producerAttributes);
 80005f8:	f897 4057 	ldrb.w	r4, [r7, #87]	; 0x57
 80005fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000600:	461a      	mov	r2, r3
 8000602:	2100      	movs	r1, #0
 8000604:	480f      	ldr	r0, [pc, #60]	; (8000644 <StartDefaultTask+0x94>)
 8000606:	f003 f90a 	bl	800381e <osThreadNew>
 800060a:	4603      	mov	r3, r0
 800060c:	4a0e      	ldr	r2, [pc, #56]	; (8000648 <StartDefaultTask+0x98>)
 800060e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
	  for(uint8_t i = 0; i < NUM_PRODS; i++) {
 8000612:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000616:	3301      	adds	r3, #1
 8000618:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
 800061c:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8000620:	2b01      	cmp	r3, #1
 8000622:	d9e9      	bls.n	80005f8 <StartDefaultTask+0x48>
	  }
	  consumerHandle = osThreadNew(ConsumerTask, NULL, &consumerAttributes);
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	461a      	mov	r2, r3
 800062a:	2100      	movs	r1, #0
 800062c:	4807      	ldr	r0, [pc, #28]	; (800064c <StartDefaultTask+0x9c>)
 800062e:	f003 f8f6 	bl	800381e <osThreadNew>
 8000632:	4603      	mov	r3, r0
 8000634:	4a06      	ldr	r2, [pc, #24]	; (8000650 <StartDefaultTask+0xa0>)
 8000636:	6013      	str	r3, [r2, #0]
	  osThreadExit();
 8000638:	f003 f9a9 	bl	800398e <osThreadExit>
 800063c:	0800840c 	.word	0x0800840c
 8000640:	0800841c 	.word	0x0800841c
 8000644:	080009d1 	.word	0x080009d1
 8000648:	20000090 	.word	0x20000090
 800064c:	08000a55 	.word	0x08000a55
 8000650:	20000098 	.word	0x20000098

08000654 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000654:	b580      	push	{r7, lr}
 8000656:	b088      	sub	sp, #32
 8000658:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800065a:	f107 030c 	add.w	r3, r7, #12
 800065e:	2200      	movs	r2, #0
 8000660:	601a      	str	r2, [r3, #0]
 8000662:	605a      	str	r2, [r3, #4]
 8000664:	609a      	str	r2, [r3, #8]
 8000666:	60da      	str	r2, [r3, #12]
 8000668:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800066a:	4b1d      	ldr	r3, [pc, #116]	; (80006e0 <MX_GPIO_Init+0x8c>)
 800066c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800066e:	4a1c      	ldr	r2, [pc, #112]	; (80006e0 <MX_GPIO_Init+0x8c>)
 8000670:	f043 0304 	orr.w	r3, r3, #4
 8000674:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000676:	4b1a      	ldr	r3, [pc, #104]	; (80006e0 <MX_GPIO_Init+0x8c>)
 8000678:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067a:	f003 0304 	and.w	r3, r3, #4
 800067e:	60bb      	str	r3, [r7, #8]
 8000680:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000682:	4b17      	ldr	r3, [pc, #92]	; (80006e0 <MX_GPIO_Init+0x8c>)
 8000684:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000686:	4a16      	ldr	r2, [pc, #88]	; (80006e0 <MX_GPIO_Init+0x8c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800068e:	4b14      	ldr	r3, [pc, #80]	; (80006e0 <MX_GPIO_Init+0x8c>)
 8000690:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	607b      	str	r3, [r7, #4]
 8000698:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800069a:	4b11      	ldr	r3, [pc, #68]	; (80006e0 <MX_GPIO_Init+0x8c>)
 800069c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800069e:	4a10      	ldr	r2, [pc, #64]	; (80006e0 <MX_GPIO_Init+0x8c>)
 80006a0:	f043 0302 	orr.w	r3, r3, #2
 80006a4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80006a6:	4b0e      	ldr	r3, [pc, #56]	; (80006e0 <MX_GPIO_Init+0x8c>)
 80006a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80006aa:	f003 0302 	and.w	r3, r3, #2
 80006ae:	603b      	str	r3, [r7, #0]
 80006b0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 80006b2:	2200      	movs	r2, #0
 80006b4:	2108      	movs	r1, #8
 80006b6:	480b      	ldr	r0, [pc, #44]	; (80006e4 <MX_GPIO_Init+0x90>)
 80006b8:	f000 fee2 	bl	8001480 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 80006bc:	2308      	movs	r3, #8
 80006be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006c0:	2301      	movs	r3, #1
 80006c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c4:	2300      	movs	r3, #0
 80006c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c8:	2300      	movs	r3, #0
 80006ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80006cc:	f107 030c 	add.w	r3, r7, #12
 80006d0:	4619      	mov	r1, r3
 80006d2:	4804      	ldr	r0, [pc, #16]	; (80006e4 <MX_GPIO_Init+0x90>)
 80006d4:	f000 fd6a 	bl	80011ac <HAL_GPIO_Init>

}
 80006d8:	bf00      	nop
 80006da:	3720      	adds	r7, #32
 80006dc:	46bd      	mov	sp, r7
 80006de:	bd80      	pop	{r7, pc}
 80006e0:	40021000 	.word	0x40021000
 80006e4:	48000400 	.word	0x48000400

080006e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80006ec:	f000 fc43 	bl	8000f76 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80006f0:	f000 f80c 	bl	800070c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80006f4:	f7ff ffae 	bl	8000654 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80006f8:	f000 fb7a 	bl	8000df0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80006fc:	f003 f830 	bl	8003760 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000700:	f7ff ff40 	bl	8000584 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000704:	f003 f850 	bl	80037a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000708:	e7fe      	b.n	8000708 <main+0x20>
	...

0800070c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b096      	sub	sp, #88	; 0x58
 8000710:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000712:	f107 0314 	add.w	r3, r7, #20
 8000716:	2244      	movs	r2, #68	; 0x44
 8000718:	2100      	movs	r1, #0
 800071a:	4618      	mov	r0, r3
 800071c:	f006 fcb7 	bl	800708e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	601a      	str	r2, [r3, #0]
 8000726:	605a      	str	r2, [r3, #4]
 8000728:	609a      	str	r2, [r3, #8]
 800072a:	60da      	str	r2, [r3, #12]
 800072c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800072e:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000732:	f000 fedb 	bl	80014ec <HAL_PWREx_ControlVoltageScaling>
 8000736:	4603      	mov	r3, r0
 8000738:	2b00      	cmp	r3, #0
 800073a:	d001      	beq.n	8000740 <SystemClock_Config+0x34>
  {
    Error_Handler();
 800073c:	f000 f85a 	bl	80007f4 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000740:	f000 feb6 	bl	80014b0 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000744:	4b21      	ldr	r3, [pc, #132]	; (80007cc <SystemClock_Config+0xc0>)
 8000746:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800074a:	4a20      	ldr	r2, [pc, #128]	; (80007cc <SystemClock_Config+0xc0>)
 800074c:	f023 0318 	bic.w	r3, r3, #24
 8000750:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000754:	2314      	movs	r3, #20
 8000756:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000758:	2301      	movs	r3, #1
 800075a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800075c:	2301      	movs	r3, #1
 800075e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000760:	2300      	movs	r3, #0
 8000762:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000764:	2360      	movs	r3, #96	; 0x60
 8000766:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000768:	2302      	movs	r3, #2
 800076a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800076c:	2301      	movs	r3, #1
 800076e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000770:	2301      	movs	r3, #1
 8000772:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000774:	2310      	movs	r3, #16
 8000776:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000778:	2307      	movs	r3, #7
 800077a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800077c:	2302      	movs	r3, #2
 800077e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000780:	2302      	movs	r3, #2
 8000782:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000784:	f107 0314 	add.w	r3, r7, #20
 8000788:	4618      	mov	r0, r3
 800078a:	f000 ff05 	bl	8001598 <HAL_RCC_OscConfig>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d001      	beq.n	8000798 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000794:	f000 f82e 	bl	80007f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000798:	230f      	movs	r3, #15
 800079a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800079c:	2303      	movs	r3, #3
 800079e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007a0:	2300      	movs	r3, #0
 80007a2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80007a4:	2300      	movs	r3, #0
 80007a6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007a8:	2300      	movs	r3, #0
 80007aa:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80007ac:	463b      	mov	r3, r7
 80007ae:	2101      	movs	r1, #1
 80007b0:	4618      	mov	r0, r3
 80007b2:	f001 fb05 	bl	8001dc0 <HAL_RCC_ClockConfig>
 80007b6:	4603      	mov	r3, r0
 80007b8:	2b00      	cmp	r3, #0
 80007ba:	d001      	beq.n	80007c0 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80007bc:	f000 f81a 	bl	80007f4 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80007c0:	f001 ff4a 	bl	8002658 <HAL_RCCEx_EnableMSIPLLMode>
}
 80007c4:	bf00      	nop
 80007c6:	3758      	adds	r7, #88	; 0x58
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b082      	sub	sp, #8
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	4a04      	ldr	r2, [pc, #16]	; (80007f0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007de:	4293      	cmp	r3, r2
 80007e0:	d101      	bne.n	80007e6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007e2:	f000 fbe1 	bl	8000fa8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007e6:	bf00      	nop
 80007e8:	3708      	adds	r7, #8
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	40001000 	.word	0x40001000

080007f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80007f4:	b480      	push	{r7}
 80007f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80007f8:	b672      	cpsid	i
}
 80007fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80007fc:	e7fe      	b.n	80007fc <Error_Handler+0x8>
	...

08000800 <SemInit>:
	.element = {0,0,0,0,0,0,0,0,0,0},
	.r_index = 0,
	.w_index = 0
};

void SemInit(uint8_t producers) {
 8000800:	b580      	push	{r7, lr}
 8000802:	b082      	sub	sp, #8
 8000804:	af00      	add	r7, sp, #0
 8000806:	4603      	mov	r3, r0
 8000808:	71fb      	strb	r3, [r7, #7]
	semaphore = osSemaphoreNew(1, 1, NULL);
 800080a:	2200      	movs	r2, #0
 800080c:	2101      	movs	r1, #1
 800080e:	2001      	movs	r0, #1
 8000810:	f003 f8c3 	bl	800399a <osSemaphoreNew>
 8000814:	4603      	mov	r3, r0
 8000816:	4a0c      	ldr	r2, [pc, #48]	; (8000848 <SemInit+0x48>)
 8000818:	6013      	str	r3, [r2, #0]
	if(semaphore == NULL) {
		// Things gone wrong, should not continue
	}
	myBuffer.sem_r = osSemaphoreNew(producers, 0, NULL);
 800081a:	79fb      	ldrb	r3, [r7, #7]
 800081c:	2200      	movs	r2, #0
 800081e:	2100      	movs	r1, #0
 8000820:	4618      	mov	r0, r3
 8000822:	f003 f8ba 	bl	800399a <osSemaphoreNew>
 8000826:	4603      	mov	r3, r0
 8000828:	4a08      	ldr	r2, [pc, #32]	; (800084c <SemInit+0x4c>)
 800082a:	60d3      	str	r3, [r2, #12]
	myBuffer.sem_w = osSemaphoreNew(producers, producers, NULL);
 800082c:	79fb      	ldrb	r3, [r7, #7]
 800082e:	79f9      	ldrb	r1, [r7, #7]
 8000830:	2200      	movs	r2, #0
 8000832:	4618      	mov	r0, r3
 8000834:	f003 f8b1 	bl	800399a <osSemaphoreNew>
 8000838:	4603      	mov	r3, r0
 800083a:	4a04      	ldr	r2, [pc, #16]	; (800084c <SemInit+0x4c>)
 800083c:	6113      	str	r3, [r2, #16]

}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	200000a0 	.word	0x200000a0
 800084c:	200000a4 	.word	0x200000a4

08000850 <EnterCriticalRbWrite>:
	} else {
		return false;
	}
}

bool EnterCriticalRbWrite() {
 8000850:	b580      	push	{r7, lr}
 8000852:	b082      	sub	sp, #8
 8000854:	af00      	add	r7, sp, #0
	osStatus_t ret = osSemaphoreAcquire(myBuffer.sem_w, osWaitForever);
 8000856:	4b09      	ldr	r3, [pc, #36]	; (800087c <EnterCriticalRbWrite+0x2c>)
 8000858:	691b      	ldr	r3, [r3, #16]
 800085a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800085e:	4618      	mov	r0, r3
 8000860:	f003 f924 	bl	8003aac <osSemaphoreAcquire>
 8000864:	6078      	str	r0, [r7, #4]
	if(ret == osOK) {
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d101      	bne.n	8000870 <EnterCriticalRbWrite+0x20>
		return true;
 800086c:	2301      	movs	r3, #1
 800086e:	e000      	b.n	8000872 <EnterCriticalRbWrite+0x22>
	} else {
		return false;
 8000870:	2300      	movs	r3, #0
	}
}
 8000872:	4618      	mov	r0, r3
 8000874:	3708      	adds	r7, #8
 8000876:	46bd      	mov	sp, r7
 8000878:	bd80      	pop	{r7, pc}
 800087a:	bf00      	nop
 800087c:	200000a4 	.word	0x200000a4

08000880 <LeaveCriticalRbWrite>:

bool LeaveCriticalRbWrite() {
 8000880:	b580      	push	{r7, lr}
 8000882:	b082      	sub	sp, #8
 8000884:	af00      	add	r7, sp, #0
	osStatus_t ret = osSemaphoreRelease(myBuffer.sem_r);
 8000886:	4b08      	ldr	r3, [pc, #32]	; (80008a8 <LeaveCriticalRbWrite+0x28>)
 8000888:	68db      	ldr	r3, [r3, #12]
 800088a:	4618      	mov	r0, r3
 800088c:	f003 f960 	bl	8003b50 <osSemaphoreRelease>
 8000890:	6078      	str	r0, [r7, #4]
	if(ret == osOK) {
 8000892:	687b      	ldr	r3, [r7, #4]
 8000894:	2b00      	cmp	r3, #0
 8000896:	d101      	bne.n	800089c <LeaveCriticalRbWrite+0x1c>
		return true;
 8000898:	2301      	movs	r3, #1
 800089a:	e000      	b.n	800089e <LeaveCriticalRbWrite+0x1e>
	} else {
		return false;
 800089c:	2300      	movs	r3, #0
	}
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3708      	adds	r7, #8
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}
 80008a6:	bf00      	nop
 80008a8:	200000a4 	.word	0x200000a4

080008ac <EnterCriticalRbRead>:

bool EnterCriticalRbRead() {
 80008ac:	b580      	push	{r7, lr}
 80008ae:	b082      	sub	sp, #8
 80008b0:	af00      	add	r7, sp, #0
	osStatus_t ret = osSemaphoreAcquire(myBuffer.sem_r, osWaitForever);
 80008b2:	4b09      	ldr	r3, [pc, #36]	; (80008d8 <EnterCriticalRbRead+0x2c>)
 80008b4:	68db      	ldr	r3, [r3, #12]
 80008b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008ba:	4618      	mov	r0, r3
 80008bc:	f003 f8f6 	bl	8003aac <osSemaphoreAcquire>
 80008c0:	6078      	str	r0, [r7, #4]
	if(ret == osOK) {
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d101      	bne.n	80008cc <EnterCriticalRbRead+0x20>
		return true;
 80008c8:	2301      	movs	r3, #1
 80008ca:	e000      	b.n	80008ce <EnterCriticalRbRead+0x22>
	} else {
		return false;
 80008cc:	2300      	movs	r3, #0
	}
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	3708      	adds	r7, #8
 80008d2:	46bd      	mov	sp, r7
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	200000a4 	.word	0x200000a4

080008dc <LeaveCriticalRbRead>:

bool LeaveCriticalRbRead() {
 80008dc:	b580      	push	{r7, lr}
 80008de:	b082      	sub	sp, #8
 80008e0:	af00      	add	r7, sp, #0
	osStatus_t ret = osSemaphoreRelease(myBuffer.sem_w);
 80008e2:	4b08      	ldr	r3, [pc, #32]	; (8000904 <LeaveCriticalRbRead+0x28>)
 80008e4:	691b      	ldr	r3, [r3, #16]
 80008e6:	4618      	mov	r0, r3
 80008e8:	f003 f932 	bl	8003b50 <osSemaphoreRelease>
 80008ec:	6078      	str	r0, [r7, #4]
	if(ret == osOK) {
 80008ee:	687b      	ldr	r3, [r7, #4]
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d101      	bne.n	80008f8 <LeaveCriticalRbRead+0x1c>
		return true;
 80008f4:	2301      	movs	r3, #1
 80008f6:	e000      	b.n	80008fa <LeaveCriticalRbRead+0x1e>
	} else {
		return false;
 80008f8:	2300      	movs	r3, #0
	}
}
 80008fa:	4618      	mov	r0, r3
 80008fc:	3708      	adds	r7, #8
 80008fe:	46bd      	mov	sp, r7
 8000900:	bd80      	pop	{r7, pc}
 8000902:	bf00      	nop
 8000904:	200000a4 	.word	0x200000a4

08000908 <taskOutput>:

void taskOutput(char *buffer, uint8_t bufferSize) {
 8000908:	b580      	push	{r7, lr}
 800090a:	b082      	sub	sp, #8
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
 8000910:	460b      	mov	r3, r1
 8000912:	70fb      	strb	r3, [r7, #3]
	HAL_UART_Transmit(&huart2,(uint8_t*)buffer, bufferSize, 10000);
 8000914:	78fb      	ldrb	r3, [r7, #3]
 8000916:	b29a      	uxth	r2, r3
 8000918:	f242 7310 	movw	r3, #10000	; 0x2710
 800091c:	6879      	ldr	r1, [r7, #4]
 800091e:	4803      	ldr	r0, [pc, #12]	; (800092c <taskOutput+0x24>)
 8000920:	f002 fa6a 	bl	8002df8 <HAL_UART_Transmit>
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}
 800092c:	20000108 	.word	0x20000108

08000930 <CriticalWrite>:
uint8_t CriticalCalculation(uint8_t myCalcValue) {
	globalVar += myCalcValue;
	return globalVar;
}

void CriticalWrite(uint8_t myCalcValue) {
 8000930:	b480      	push	{r7}
 8000932:	b083      	sub	sp, #12
 8000934:	af00      	add	r7, sp, #0
 8000936:	4603      	mov	r3, r0
 8000938:	71fb      	strb	r3, [r7, #7]
	myBuffer.element[myBuffer.w_index] += myCalcValue;
 800093a:	4b11      	ldr	r3, [pc, #68]	; (8000980 <CriticalWrite+0x50>)
 800093c:	7adb      	ldrb	r3, [r3, #11]
 800093e:	461a      	mov	r2, r3
 8000940:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <CriticalWrite+0x50>)
 8000942:	5c9a      	ldrb	r2, [r3, r2]
 8000944:	4b0e      	ldr	r3, [pc, #56]	; (8000980 <CriticalWrite+0x50>)
 8000946:	7adb      	ldrb	r3, [r3, #11]
 8000948:	4619      	mov	r1, r3
 800094a:	79fb      	ldrb	r3, [r7, #7]
 800094c:	4413      	add	r3, r2
 800094e:	b2da      	uxtb	r2, r3
 8000950:	4b0b      	ldr	r3, [pc, #44]	; (8000980 <CriticalWrite+0x50>)
 8000952:	545a      	strb	r2, [r3, r1]
	myBuffer.w_index = (myBuffer.w_index + 1) % 9;
 8000954:	4b0a      	ldr	r3, [pc, #40]	; (8000980 <CriticalWrite+0x50>)
 8000956:	7adb      	ldrb	r3, [r3, #11]
 8000958:	1c5a      	adds	r2, r3, #1
 800095a:	4b0a      	ldr	r3, [pc, #40]	; (8000984 <CriticalWrite+0x54>)
 800095c:	fb83 1302 	smull	r1, r3, r3, r2
 8000960:	1059      	asrs	r1, r3, #1
 8000962:	17d3      	asrs	r3, r2, #31
 8000964:	1ac9      	subs	r1, r1, r3
 8000966:	460b      	mov	r3, r1
 8000968:	00db      	lsls	r3, r3, #3
 800096a:	440b      	add	r3, r1
 800096c:	1ad1      	subs	r1, r2, r3
 800096e:	b2ca      	uxtb	r2, r1
 8000970:	4b03      	ldr	r3, [pc, #12]	; (8000980 <CriticalWrite+0x50>)
 8000972:	72da      	strb	r2, [r3, #11]
}
 8000974:	bf00      	nop
 8000976:	370c      	adds	r7, #12
 8000978:	46bd      	mov	sp, r7
 800097a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097e:	4770      	bx	lr
 8000980:	200000a4 	.word	0x200000a4
 8000984:	38e38e39 	.word	0x38e38e39

08000988 <CriticalRead>:

uint8_t CriticalRead() {
 8000988:	b480      	push	{r7}
 800098a:	b083      	sub	sp, #12
 800098c:	af00      	add	r7, sp, #0
	uint8_t tmpValue = myBuffer.element[myBuffer.r_index];
 800098e:	4b0e      	ldr	r3, [pc, #56]	; (80009c8 <CriticalRead+0x40>)
 8000990:	7a9b      	ldrb	r3, [r3, #10]
 8000992:	461a      	mov	r2, r3
 8000994:	4b0c      	ldr	r3, [pc, #48]	; (80009c8 <CriticalRead+0x40>)
 8000996:	5c9b      	ldrb	r3, [r3, r2]
 8000998:	71fb      	strb	r3, [r7, #7]
	myBuffer.r_index = (myBuffer.r_index + 1) % 9;
 800099a:	4b0b      	ldr	r3, [pc, #44]	; (80009c8 <CriticalRead+0x40>)
 800099c:	7a9b      	ldrb	r3, [r3, #10]
 800099e:	1c5a      	adds	r2, r3, #1
 80009a0:	4b0a      	ldr	r3, [pc, #40]	; (80009cc <CriticalRead+0x44>)
 80009a2:	fb83 1302 	smull	r1, r3, r3, r2
 80009a6:	1059      	asrs	r1, r3, #1
 80009a8:	17d3      	asrs	r3, r2, #31
 80009aa:	1ac9      	subs	r1, r1, r3
 80009ac:	460b      	mov	r3, r1
 80009ae:	00db      	lsls	r3, r3, #3
 80009b0:	440b      	add	r3, r1
 80009b2:	1ad1      	subs	r1, r2, r3
 80009b4:	b2ca      	uxtb	r2, r1
 80009b6:	4b04      	ldr	r3, [pc, #16]	; (80009c8 <CriticalRead+0x40>)
 80009b8:	729a      	strb	r2, [r3, #10]
	return tmpValue;
 80009ba:	79fb      	ldrb	r3, [r7, #7]
}
 80009bc:	4618      	mov	r0, r3
 80009be:	370c      	adds	r7, #12
 80009c0:	46bd      	mov	sp, r7
 80009c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c6:	4770      	bx	lr
 80009c8:	200000a4 	.word	0x200000a4
 80009cc:	38e38e39 	.word	0x38e38e39

080009d0 <ProducerTask>:
		}
		osDelay(1000);
	}
}

void ProducerTask(void *argument) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b094      	sub	sp, #80	; 0x50
 80009d4:	af02      	add	r7, sp, #8
 80009d6:	6078      	str	r0, [r7, #4]
	char buffer[50];
	osThreadId_t producerId = osThreadGetId();
 80009d8:	f002 ffce 	bl	8003978 <osThreadGetId>
 80009dc:	6478      	str	r0, [r7, #68]	; 0x44
	const char * producerName = osThreadGetName(producerId);
 80009de:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80009e0:	f002 ffaf 	bl	8003942 <osThreadGetName>
 80009e4:	6438      	str	r0, [r7, #64]	; 0x40
	srand(osKernelGetTickCount());
 80009e6:	f002 ff05 	bl	80037f4 <osKernelGetTickCount>
 80009ea:	4603      	mov	r3, r0
 80009ec:	4618      	mov	r0, r3
 80009ee:	f006 fbeb 	bl	80071c8 <srand>
	uint8_t producerValue = rand() % 256;
 80009f2:	f006 fc17 	bl	8007224 <rand>
 80009f6:	4603      	mov	r3, r0
 80009f8:	425a      	negs	r2, r3
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	b2d2      	uxtb	r2, r2
 80009fe:	bf58      	it	pl
 8000a00:	4253      	negpl	r3, r2
 8000a02:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(;;) {
		if(EnterCriticalRbWrite()) {
 8000a06:	f7ff ff23 	bl	8000850 <EnterCriticalRbWrite>
 8000a0a:	4603      	mov	r3, r0
 8000a0c:	2b00      	cmp	r3, #0
 8000a0e:	d0fa      	beq.n	8000a06 <ProducerTask+0x36>
			CriticalWrite(producerValue);
 8000a10:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a14:	4618      	mov	r0, r3
 8000a16:	f7ff ff8b 	bl	8000930 <CriticalWrite>
			LeaveCriticalRbWrite();
 8000a1a:	f7ff ff31 	bl	8000880 <LeaveCriticalRbWrite>
			sprintf(buffer, "%s(%p) wrote %u\r\n", producerName, producerId, producerValue);
 8000a1e:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a22:	f107 000c 	add.w	r0, r7, #12
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a2a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a2c:	4908      	ldr	r1, [pc, #32]	; (8000a50 <ProducerTask+0x80>)
 8000a2e:	f006 fcb1 	bl	8007394 <siprintf>
			taskOutput(buffer, strlen(buffer));
 8000a32:	f107 030c 	add.w	r3, r7, #12
 8000a36:	4618      	mov	r0, r3
 8000a38:	f7ff fbca 	bl	80001d0 <strlen>
 8000a3c:	4603      	mov	r3, r0
 8000a3e:	b2da      	uxtb	r2, r3
 8000a40:	f107 030c 	add.w	r3, r7, #12
 8000a44:	4611      	mov	r1, r2
 8000a46:	4618      	mov	r0, r3
 8000a48:	f7ff ff5e 	bl	8000908 <taskOutput>
		if(EnterCriticalRbWrite()) {
 8000a4c:	e7db      	b.n	8000a06 <ProducerTask+0x36>
 8000a4e:	bf00      	nop
 8000a50:	08008440 	.word	0x08008440

08000a54 <ConsumerTask>:
		}
	}
}

void ConsumerTask(void *argument) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b094      	sub	sp, #80	; 0x50
 8000a58:	af02      	add	r7, sp, #8
 8000a5a:	6078      	str	r0, [r7, #4]
	char buffer[50];
	osThreadId_t consumerId = osThreadGetId();
 8000a5c:	f002 ff8c 	bl	8003978 <osThreadGetId>
 8000a60:	6478      	str	r0, [r7, #68]	; 0x44
	const char * consumerName = osThreadGetName(consumerId);
 8000a62:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8000a64:	f002 ff6d 	bl	8003942 <osThreadGetName>
 8000a68:	6438      	str	r0, [r7, #64]	; 0x40
	uint8_t tmpValue = 0;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	for(;;) {
		if(EnterCriticalRbRead()) {
 8000a70:	f7ff ff1c 	bl	80008ac <EnterCriticalRbRead>
 8000a74:	4603      	mov	r3, r0
 8000a76:	2b00      	cmp	r3, #0
 8000a78:	d0fa      	beq.n	8000a70 <ConsumerTask+0x1c>
			tmpValue = CriticalRead();
 8000a7a:	f7ff ff85 	bl	8000988 <CriticalRead>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
			LeaveCriticalRbRead();
 8000a84:	f7ff ff2a 	bl	80008dc <LeaveCriticalRbRead>
			sprintf(buffer, "%s(%p) read %u\r\n", consumerName, consumerId, tmpValue);
 8000a88:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000a8c:	f107 000c 	add.w	r0, r7, #12
 8000a90:	9300      	str	r3, [sp, #0]
 8000a92:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000a94:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8000a96:	4908      	ldr	r1, [pc, #32]	; (8000ab8 <ConsumerTask+0x64>)
 8000a98:	f006 fc7c 	bl	8007394 <siprintf>
			taskOutput(buffer, strlen(buffer));
 8000a9c:	f107 030c 	add.w	r3, r7, #12
 8000aa0:	4618      	mov	r0, r3
 8000aa2:	f7ff fb95 	bl	80001d0 <strlen>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	b2da      	uxtb	r2, r3
 8000aaa:	f107 030c 	add.w	r3, r7, #12
 8000aae:	4611      	mov	r1, r2
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	f7ff ff29 	bl	8000908 <taskOutput>
		if(EnterCriticalRbRead()) {
 8000ab6:	e7db      	b.n	8000a70 <ConsumerTask+0x1c>
 8000ab8:	08008454 	.word	0x08008454

08000abc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ac2:	4b11      	ldr	r3, [pc, #68]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ac6:	4a10      	ldr	r2, [pc, #64]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ac8:	f043 0301 	orr.w	r3, r3, #1
 8000acc:	6613      	str	r3, [r2, #96]	; 0x60
 8000ace:	4b0e      	ldr	r3, [pc, #56]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ad0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	607b      	str	r3, [r7, #4]
 8000ad8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <HAL_MspInit+0x4c>)
 8000adc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ade:	4a0a      	ldr	r2, [pc, #40]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ae4:	6593      	str	r3, [r2, #88]	; 0x58
 8000ae6:	4b08      	ldr	r3, [pc, #32]	; (8000b08 <HAL_MspInit+0x4c>)
 8000ae8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aee:	603b      	str	r3, [r7, #0]
 8000af0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000af2:	2200      	movs	r2, #0
 8000af4:	210f      	movs	r1, #15
 8000af6:	f06f 0001 	mvn.w	r0, #1
 8000afa:	f000 fb2d 	bl	8001158 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000afe:	bf00      	nop
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	40021000 	.word	0x40021000

08000b0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b08e      	sub	sp, #56	; 0x38
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000b14:	2300      	movs	r3, #0
 8000b16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000b1a:	4b34      	ldr	r3, [pc, #208]	; (8000bec <HAL_InitTick+0xe0>)
 8000b1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b1e:	4a33      	ldr	r2, [pc, #204]	; (8000bec <HAL_InitTick+0xe0>)
 8000b20:	f043 0310 	orr.w	r3, r3, #16
 8000b24:	6593      	str	r3, [r2, #88]	; 0x58
 8000b26:	4b31      	ldr	r3, [pc, #196]	; (8000bec <HAL_InitTick+0xe0>)
 8000b28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2a:	f003 0310 	and.w	r3, r3, #16
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000b32:	f107 0210 	add.w	r2, r7, #16
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4611      	mov	r1, r2
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	f001 fb03 	bl	8002148 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000b42:	6a3b      	ldr	r3, [r7, #32]
 8000b44:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000b46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d103      	bne.n	8000b54 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000b4c:	f001 fad0 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8000b50:	6378      	str	r0, [r7, #52]	; 0x34
 8000b52:	e004      	b.n	8000b5e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000b54:	f001 facc 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 8000b58:	4603      	mov	r3, r0
 8000b5a:	005b      	lsls	r3, r3, #1
 8000b5c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000b60:	4a23      	ldr	r2, [pc, #140]	; (8000bf0 <HAL_InitTick+0xe4>)
 8000b62:	fba2 2303 	umull	r2, r3, r2, r3
 8000b66:	0c9b      	lsrs	r3, r3, #18
 8000b68:	3b01      	subs	r3, #1
 8000b6a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b6c:	4b21      	ldr	r3, [pc, #132]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b6e:	4a22      	ldr	r2, [pc, #136]	; (8000bf8 <HAL_InitTick+0xec>)
 8000b70:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b72:	4b20      	ldr	r3, [pc, #128]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b74:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b78:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b7a:	4a1e      	ldr	r2, [pc, #120]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b7e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b80:	4b1c      	ldr	r3, [pc, #112]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b86:	4b1b      	ldr	r3, [pc, #108]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b8c:	4b19      	ldr	r3, [pc, #100]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b92:	4818      	ldr	r0, [pc, #96]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000b94:	f001 fe62 	bl	800285c <HAL_TIM_Base_Init>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d11b      	bne.n	8000bde <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000ba6:	4813      	ldr	r0, [pc, #76]	; (8000bf4 <HAL_InitTick+0xe8>)
 8000ba8:	f001 feba 	bl	8002920 <HAL_TIM_Base_Start_IT>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000bb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d111      	bne.n	8000bde <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000bba:	2036      	movs	r0, #54	; 0x36
 8000bbc:	f000 fae8 	bl	8001190 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	2b0f      	cmp	r3, #15
 8000bc4:	d808      	bhi.n	8000bd8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	6879      	ldr	r1, [r7, #4]
 8000bca:	2036      	movs	r0, #54	; 0x36
 8000bcc:	f000 fac4 	bl	8001158 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bd0:	4a0a      	ldr	r2, [pc, #40]	; (8000bfc <HAL_InitTick+0xf0>)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	6013      	str	r3, [r2, #0]
 8000bd6:	e002      	b.n	8000bde <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000bd8:	2301      	movs	r3, #1
 8000bda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000bde:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	3738      	adds	r7, #56	; 0x38
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	40021000 	.word	0x40021000
 8000bf0:	431bde83 	.word	0x431bde83
 8000bf4:	200000b8 	.word	0x200000b8
 8000bf8:	40001000 	.word	0x40001000
 8000bfc:	20000004 	.word	0x20000004

08000c00 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000c04:	e7fe      	b.n	8000c04 <NMI_Handler+0x4>

08000c06 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000c06:	b480      	push	{r7}
 8000c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000c0a:	e7fe      	b.n	8000c0a <HardFault_Handler+0x4>

08000c0c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000c10:	e7fe      	b.n	8000c10 <MemManage_Handler+0x4>

08000c12 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000c12:	b480      	push	{r7}
 8000c14:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000c16:	e7fe      	b.n	8000c16 <BusFault_Handler+0x4>

08000c18 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000c1c:	e7fe      	b.n	8000c1c <UsageFault_Handler+0x4>

08000c1e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c1e:	b480      	push	{r7}
 8000c20:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c22:	bf00      	nop
 8000c24:	46bd      	mov	sp, r7
 8000c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c2a:	4770      	bx	lr

08000c2c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000c30:	4802      	ldr	r0, [pc, #8]	; (8000c3c <TIM6_DAC_IRQHandler+0x10>)
 8000c32:	f001 fec9 	bl	80029c8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000c36:	bf00      	nop
 8000c38:	bd80      	pop	{r7, pc}
 8000c3a:	bf00      	nop
 8000c3c:	200000b8 	.word	0x200000b8

08000c40 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
	return 1;
 8000c44:	2301      	movs	r3, #1
}
 8000c46:	4618      	mov	r0, r3
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr

08000c50 <_kill>:

int _kill(int pid, int sig)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b082      	sub	sp, #8
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c5a:	f006 f8e7 	bl	8006e2c <__errno>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2216      	movs	r2, #22
 8000c62:	601a      	str	r2, [r3, #0]
	return -1;
 8000c64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c68:	4618      	mov	r0, r3
 8000c6a:	3708      	adds	r7, #8
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}

08000c70 <_exit>:

void _exit (int status)
{
 8000c70:	b580      	push	{r7, lr}
 8000c72:	b082      	sub	sp, #8
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c78:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c7c:	6878      	ldr	r0, [r7, #4]
 8000c7e:	f7ff ffe7 	bl	8000c50 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c82:	e7fe      	b.n	8000c82 <_exit+0x12>

08000c84 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b086      	sub	sp, #24
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	60f8      	str	r0, [r7, #12]
 8000c8c:	60b9      	str	r1, [r7, #8]
 8000c8e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c90:	2300      	movs	r3, #0
 8000c92:	617b      	str	r3, [r7, #20]
 8000c94:	e00a      	b.n	8000cac <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c96:	f3af 8000 	nop.w
 8000c9a:	4601      	mov	r1, r0
 8000c9c:	68bb      	ldr	r3, [r7, #8]
 8000c9e:	1c5a      	adds	r2, r3, #1
 8000ca0:	60ba      	str	r2, [r7, #8]
 8000ca2:	b2ca      	uxtb	r2, r1
 8000ca4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca6:	697b      	ldr	r3, [r7, #20]
 8000ca8:	3301      	adds	r3, #1
 8000caa:	617b      	str	r3, [r7, #20]
 8000cac:	697a      	ldr	r2, [r7, #20]
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	429a      	cmp	r2, r3
 8000cb2:	dbf0      	blt.n	8000c96 <_read+0x12>
	}

return len;
 8000cb4:	687b      	ldr	r3, [r7, #4]
}
 8000cb6:	4618      	mov	r0, r3
 8000cb8:	3718      	adds	r7, #24
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}

08000cbe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cbe:	b580      	push	{r7, lr}
 8000cc0:	b086      	sub	sp, #24
 8000cc2:	af00      	add	r7, sp, #0
 8000cc4:	60f8      	str	r0, [r7, #12]
 8000cc6:	60b9      	str	r1, [r7, #8]
 8000cc8:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cca:	2300      	movs	r3, #0
 8000ccc:	617b      	str	r3, [r7, #20]
 8000cce:	e009      	b.n	8000ce4 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8000cd0:	68bb      	ldr	r3, [r7, #8]
 8000cd2:	1c5a      	adds	r2, r3, #1
 8000cd4:	60ba      	str	r2, [r7, #8]
 8000cd6:	781b      	ldrb	r3, [r3, #0]
 8000cd8:	4618      	mov	r0, r3
 8000cda:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cde:	697b      	ldr	r3, [r7, #20]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	617b      	str	r3, [r7, #20]
 8000ce4:	697a      	ldr	r2, [r7, #20]
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	429a      	cmp	r2, r3
 8000cea:	dbf1      	blt.n	8000cd0 <_write+0x12>
	}
	return len;
 8000cec:	687b      	ldr	r3, [r7, #4]
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	3718      	adds	r7, #24
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	bd80      	pop	{r7, pc}

08000cf6 <_close>:

int _close(int file)
{
 8000cf6:	b480      	push	{r7}
 8000cf8:	b083      	sub	sp, #12
 8000cfa:	af00      	add	r7, sp, #0
 8000cfc:	6078      	str	r0, [r7, #4]
	return -1;
 8000cfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000d02:	4618      	mov	r0, r3
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr

08000d0e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d0e:	b480      	push	{r7}
 8000d10:	b083      	sub	sp, #12
 8000d12:	af00      	add	r7, sp, #0
 8000d14:	6078      	str	r0, [r7, #4]
 8000d16:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d1e:	605a      	str	r2, [r3, #4]
	return 0;
 8000d20:	2300      	movs	r3, #0
}
 8000d22:	4618      	mov	r0, r3
 8000d24:	370c      	adds	r7, #12
 8000d26:	46bd      	mov	sp, r7
 8000d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2c:	4770      	bx	lr

08000d2e <_isatty>:

int _isatty(int file)
{
 8000d2e:	b480      	push	{r7}
 8000d30:	b083      	sub	sp, #12
 8000d32:	af00      	add	r7, sp, #0
 8000d34:	6078      	str	r0, [r7, #4]
	return 1;
 8000d36:	2301      	movs	r3, #1
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	370c      	adds	r7, #12
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	60f8      	str	r0, [r7, #12]
 8000d4c:	60b9      	str	r1, [r7, #8]
 8000d4e:	607a      	str	r2, [r7, #4]
	return 0;
 8000d50:	2300      	movs	r3, #0
}
 8000d52:	4618      	mov	r0, r3
 8000d54:	3714      	adds	r7, #20
 8000d56:	46bd      	mov	sp, r7
 8000d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5c:	4770      	bx	lr
	...

08000d60 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b086      	sub	sp, #24
 8000d64:	af00      	add	r7, sp, #0
 8000d66:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d68:	4a14      	ldr	r2, [pc, #80]	; (8000dbc <_sbrk+0x5c>)
 8000d6a:	4b15      	ldr	r3, [pc, #84]	; (8000dc0 <_sbrk+0x60>)
 8000d6c:	1ad3      	subs	r3, r2, r3
 8000d6e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d70:	697b      	ldr	r3, [r7, #20]
 8000d72:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d74:	4b13      	ldr	r3, [pc, #76]	; (8000dc4 <_sbrk+0x64>)
 8000d76:	681b      	ldr	r3, [r3, #0]
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d102      	bne.n	8000d82 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d7c:	4b11      	ldr	r3, [pc, #68]	; (8000dc4 <_sbrk+0x64>)
 8000d7e:	4a12      	ldr	r2, [pc, #72]	; (8000dc8 <_sbrk+0x68>)
 8000d80:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d82:	4b10      	ldr	r3, [pc, #64]	; (8000dc4 <_sbrk+0x64>)
 8000d84:	681a      	ldr	r2, [r3, #0]
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	4413      	add	r3, r2
 8000d8a:	693a      	ldr	r2, [r7, #16]
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	d207      	bcs.n	8000da0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d90:	f006 f84c 	bl	8006e2c <__errno>
 8000d94:	4603      	mov	r3, r0
 8000d96:	220c      	movs	r2, #12
 8000d98:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d9e:	e009      	b.n	8000db4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000da0:	4b08      	ldr	r3, [pc, #32]	; (8000dc4 <_sbrk+0x64>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000da6:	4b07      	ldr	r3, [pc, #28]	; (8000dc4 <_sbrk+0x64>)
 8000da8:	681a      	ldr	r2, [r3, #0]
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	4413      	add	r3, r2
 8000dae:	4a05      	ldr	r2, [pc, #20]	; (8000dc4 <_sbrk+0x64>)
 8000db0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000db2:	68fb      	ldr	r3, [r7, #12]
}
 8000db4:	4618      	mov	r0, r3
 8000db6:	3718      	adds	r7, #24
 8000db8:	46bd      	mov	sp, r7
 8000dba:	bd80      	pop	{r7, pc}
 8000dbc:	20010000 	.word	0x20010000
 8000dc0:	00000400 	.word	0x00000400
 8000dc4:	20000104 	.word	0x20000104
 8000dc8:	20001868 	.word	0x20001868

08000dcc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000df4:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000df6:	4a15      	ldr	r2, [pc, #84]	; (8000e4c <MX_USART2_UART_Init+0x5c>)
 8000df8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000dfc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e00:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000e02:	4b11      	ldr	r3, [pc, #68]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000e04:	2200      	movs	r2, #0
 8000e06:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000e08:	4b0f      	ldr	r3, [pc, #60]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000e0e:	4b0e      	ldr	r3, [pc, #56]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000e14:	4b0c      	ldr	r3, [pc, #48]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000e16:	220c      	movs	r2, #12
 8000e18:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e1a:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000e1c:	2200      	movs	r2, #0
 8000e1e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e20:	4b09      	ldr	r3, [pc, #36]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000e22:	2200      	movs	r2, #0
 8000e24:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000e26:	4b08      	ldr	r3, [pc, #32]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000e28:	2200      	movs	r2, #0
 8000e2a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000e2c:	4b06      	ldr	r3, [pc, #24]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000e32:	4805      	ldr	r0, [pc, #20]	; (8000e48 <MX_USART2_UART_Init+0x58>)
 8000e34:	f001 ff92 	bl	8002d5c <HAL_UART_Init>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d001      	beq.n	8000e42 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000e3e:	f7ff fcd9 	bl	80007f4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000108 	.word	0x20000108
 8000e4c:	40004400 	.word	0x40004400

08000e50 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000e50:	b580      	push	{r7, lr}
 8000e52:	b09e      	sub	sp, #120	; 0x78
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
 8000e62:	609a      	str	r2, [r3, #8]
 8000e64:	60da      	str	r2, [r3, #12]
 8000e66:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000e68:	f107 0310 	add.w	r3, r7, #16
 8000e6c:	2254      	movs	r2, #84	; 0x54
 8000e6e:	2100      	movs	r1, #0
 8000e70:	4618      	mov	r0, r3
 8000e72:	f006 f90c 	bl	800708e <memset>
  if(uartHandle->Instance==USART2)
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	4a28      	ldr	r2, [pc, #160]	; (8000f1c <HAL_UART_MspInit+0xcc>)
 8000e7c:	4293      	cmp	r3, r2
 8000e7e:	d148      	bne.n	8000f12 <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e80:	2302      	movs	r3, #2
 8000e82:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e84:	2300      	movs	r3, #0
 8000e86:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e88:	f107 0310 	add.w	r3, r7, #16
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	f001 f9ed 	bl	800226c <HAL_RCCEx_PeriphCLKConfig>
 8000e92:	4603      	mov	r3, r0
 8000e94:	2b00      	cmp	r3, #0
 8000e96:	d001      	beq.n	8000e9c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e98:	f7ff fcac 	bl	80007f4 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e9c:	4b20      	ldr	r3, [pc, #128]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000e9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ea0:	4a1f      	ldr	r2, [pc, #124]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000ea2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea6:	6593      	str	r3, [r2, #88]	; 0x58
 8000ea8:	4b1d      	ldr	r3, [pc, #116]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000eaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000eac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000eb0:	60fb      	str	r3, [r7, #12]
 8000eb2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000eb4:	4b1a      	ldr	r3, [pc, #104]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000eb6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb8:	4a19      	ldr	r2, [pc, #100]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000eba:	f043 0301 	orr.w	r3, r3, #1
 8000ebe:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ec0:	4b17      	ldr	r3, [pc, #92]	; (8000f20 <HAL_UART_MspInit+0xd0>)
 8000ec2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ec4:	f003 0301 	and.w	r3, r3, #1
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000ecc:	2304      	movs	r3, #4
 8000ece:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ed0:	2302      	movs	r3, #2
 8000ed2:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ed8:	2303      	movs	r3, #3
 8000eda:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000edc:	2307      	movs	r3, #7
 8000ede:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000ee0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000eea:	f000 f95f 	bl	80011ac <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000eee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ef2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ef4:	2302      	movs	r3, #2
 8000ef6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000efc:	2303      	movs	r3, #3
 8000efe:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000f00:	2303      	movs	r3, #3
 8000f02:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000f04:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000f08:	4619      	mov	r1, r3
 8000f0a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000f0e:	f000 f94d 	bl	80011ac <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000f12:	bf00      	nop
 8000f14:	3778      	adds	r7, #120	; 0x78
 8000f16:	46bd      	mov	sp, r7
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	40004400 	.word	0x40004400
 8000f20:	40021000 	.word	0x40021000

08000f24 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000f24:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f5c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f28:	f7ff ff50 	bl	8000dcc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f2c:	480c      	ldr	r0, [pc, #48]	; (8000f60 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f2e:	490d      	ldr	r1, [pc, #52]	; (8000f64 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f30:	4a0d      	ldr	r2, [pc, #52]	; (8000f68 <LoopForever+0xe>)
  movs r3, #0
 8000f32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f34:	e002      	b.n	8000f3c <LoopCopyDataInit>

08000f36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f3a:	3304      	adds	r3, #4

08000f3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f40:	d3f9      	bcc.n	8000f36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f42:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f44:	4c0a      	ldr	r4, [pc, #40]	; (8000f70 <LoopForever+0x16>)
  movs r3, #0
 8000f46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f48:	e001      	b.n	8000f4e <LoopFillZerobss>

08000f4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f4c:	3204      	adds	r2, #4

08000f4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f50:	d3fb      	bcc.n	8000f4a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f52:	f006 f867 	bl	8007024 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f56:	f7ff fbc7 	bl	80006e8 <main>

08000f5a <LoopForever>:

LoopForever:
    b LoopForever
 8000f5a:	e7fe      	b.n	8000f5a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f5c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000f60:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f64:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000f68:	08008644 	.word	0x08008644
  ldr r2, =_sbss
 8000f6c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000f70:	20001868 	.word	0x20001868

08000f74 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f74:	e7fe      	b.n	8000f74 <ADC1_IRQHandler>

08000f76 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f76:	b580      	push	{r7, lr}
 8000f78:	b082      	sub	sp, #8
 8000f7a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f80:	2003      	movs	r0, #3
 8000f82:	f000 f8de 	bl	8001142 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f86:	200f      	movs	r0, #15
 8000f88:	f7ff fdc0 	bl	8000b0c <HAL_InitTick>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d002      	beq.n	8000f98 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	71fb      	strb	r3, [r7, #7]
 8000f96:	e001      	b.n	8000f9c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f98:	f7ff fd90 	bl	8000abc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f9c:	79fb      	ldrb	r3, [r7, #7]
}
 8000f9e:	4618      	mov	r0, r3
 8000fa0:	3708      	adds	r7, #8
 8000fa2:	46bd      	mov	sp, r7
 8000fa4:	bd80      	pop	{r7, pc}
	...

08000fa8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <HAL_IncTick+0x20>)
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	461a      	mov	r2, r3
 8000fb2:	4b06      	ldr	r3, [pc, #24]	; (8000fcc <HAL_IncTick+0x24>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <HAL_IncTick+0x24>)
 8000fba:	6013      	str	r3, [r2, #0]
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	20000008 	.word	0x20000008
 8000fcc:	2000018c 	.word	0x2000018c

08000fd0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	af00      	add	r7, sp, #0
  return uwTick;
 8000fd4:	4b03      	ldr	r3, [pc, #12]	; (8000fe4 <HAL_GetTick+0x14>)
 8000fd6:	681b      	ldr	r3, [r3, #0]
}
 8000fd8:	4618      	mov	r0, r3
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe0:	4770      	bx	lr
 8000fe2:	bf00      	nop
 8000fe4:	2000018c 	.word	0x2000018c

08000fe8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fe8:	b480      	push	{r7}
 8000fea:	b085      	sub	sp, #20
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f003 0307 	and.w	r3, r3, #7
 8000ff6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ff8:	4b0c      	ldr	r3, [pc, #48]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 8000ffa:	68db      	ldr	r3, [r3, #12]
 8000ffc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ffe:	68ba      	ldr	r2, [r7, #8]
 8001000:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001004:	4013      	ands	r3, r2
 8001006:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001008:	68fb      	ldr	r3, [r7, #12]
 800100a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001010:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001014:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001018:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800101a:	4a04      	ldr	r2, [pc, #16]	; (800102c <__NVIC_SetPriorityGrouping+0x44>)
 800101c:	68bb      	ldr	r3, [r7, #8]
 800101e:	60d3      	str	r3, [r2, #12]
}
 8001020:	bf00      	nop
 8001022:	3714      	adds	r7, #20
 8001024:	46bd      	mov	sp, r7
 8001026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800102a:	4770      	bx	lr
 800102c:	e000ed00 	.word	0xe000ed00

08001030 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001030:	b480      	push	{r7}
 8001032:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001034:	4b04      	ldr	r3, [pc, #16]	; (8001048 <__NVIC_GetPriorityGrouping+0x18>)
 8001036:	68db      	ldr	r3, [r3, #12]
 8001038:	0a1b      	lsrs	r3, r3, #8
 800103a:	f003 0307 	and.w	r3, r3, #7
}
 800103e:	4618      	mov	r0, r3
 8001040:	46bd      	mov	sp, r7
 8001042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001046:	4770      	bx	lr
 8001048:	e000ed00 	.word	0xe000ed00

0800104c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800104c:	b480      	push	{r7}
 800104e:	b083      	sub	sp, #12
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001056:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800105a:	2b00      	cmp	r3, #0
 800105c:	db0b      	blt.n	8001076 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	f003 021f 	and.w	r2, r3, #31
 8001064:	4907      	ldr	r1, [pc, #28]	; (8001084 <__NVIC_EnableIRQ+0x38>)
 8001066:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800106a:	095b      	lsrs	r3, r3, #5
 800106c:	2001      	movs	r0, #1
 800106e:	fa00 f202 	lsl.w	r2, r0, r2
 8001072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001076:	bf00      	nop
 8001078:	370c      	adds	r7, #12
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	e000e100 	.word	0xe000e100

08001088 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	4603      	mov	r3, r0
 8001090:	6039      	str	r1, [r7, #0]
 8001092:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001094:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001098:	2b00      	cmp	r3, #0
 800109a:	db0a      	blt.n	80010b2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800109c:	683b      	ldr	r3, [r7, #0]
 800109e:	b2da      	uxtb	r2, r3
 80010a0:	490c      	ldr	r1, [pc, #48]	; (80010d4 <__NVIC_SetPriority+0x4c>)
 80010a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010a6:	0112      	lsls	r2, r2, #4
 80010a8:	b2d2      	uxtb	r2, r2
 80010aa:	440b      	add	r3, r1
 80010ac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80010b0:	e00a      	b.n	80010c8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010b2:	683b      	ldr	r3, [r7, #0]
 80010b4:	b2da      	uxtb	r2, r3
 80010b6:	4908      	ldr	r1, [pc, #32]	; (80010d8 <__NVIC_SetPriority+0x50>)
 80010b8:	79fb      	ldrb	r3, [r7, #7]
 80010ba:	f003 030f 	and.w	r3, r3, #15
 80010be:	3b04      	subs	r3, #4
 80010c0:	0112      	lsls	r2, r2, #4
 80010c2:	b2d2      	uxtb	r2, r2
 80010c4:	440b      	add	r3, r1
 80010c6:	761a      	strb	r2, [r3, #24]
}
 80010c8:	bf00      	nop
 80010ca:	370c      	adds	r7, #12
 80010cc:	46bd      	mov	sp, r7
 80010ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d2:	4770      	bx	lr
 80010d4:	e000e100 	.word	0xe000e100
 80010d8:	e000ed00 	.word	0xe000ed00

080010dc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010dc:	b480      	push	{r7}
 80010de:	b089      	sub	sp, #36	; 0x24
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80010e8:	68fb      	ldr	r3, [r7, #12]
 80010ea:	f003 0307 	and.w	r3, r3, #7
 80010ee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80010f0:	69fb      	ldr	r3, [r7, #28]
 80010f2:	f1c3 0307 	rsb	r3, r3, #7
 80010f6:	2b04      	cmp	r3, #4
 80010f8:	bf28      	it	cs
 80010fa:	2304      	movcs	r3, #4
 80010fc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80010fe:	69fb      	ldr	r3, [r7, #28]
 8001100:	3304      	adds	r3, #4
 8001102:	2b06      	cmp	r3, #6
 8001104:	d902      	bls.n	800110c <NVIC_EncodePriority+0x30>
 8001106:	69fb      	ldr	r3, [r7, #28]
 8001108:	3b03      	subs	r3, #3
 800110a:	e000      	b.n	800110e <NVIC_EncodePriority+0x32>
 800110c:	2300      	movs	r3, #0
 800110e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001110:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001114:	69bb      	ldr	r3, [r7, #24]
 8001116:	fa02 f303 	lsl.w	r3, r2, r3
 800111a:	43da      	mvns	r2, r3
 800111c:	68bb      	ldr	r3, [r7, #8]
 800111e:	401a      	ands	r2, r3
 8001120:	697b      	ldr	r3, [r7, #20]
 8001122:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001124:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001128:	697b      	ldr	r3, [r7, #20]
 800112a:	fa01 f303 	lsl.w	r3, r1, r3
 800112e:	43d9      	mvns	r1, r3
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001134:	4313      	orrs	r3, r2
         );
}
 8001136:	4618      	mov	r0, r3
 8001138:	3724      	adds	r7, #36	; 0x24
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ff4c 	bl	8000fe8 <__NVIC_SetPriorityGrouping>
}
 8001150:	bf00      	nop
 8001152:	3708      	adds	r7, #8
 8001154:	46bd      	mov	sp, r7
 8001156:	bd80      	pop	{r7, pc}

08001158 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b086      	sub	sp, #24
 800115c:	af00      	add	r7, sp, #0
 800115e:	4603      	mov	r3, r0
 8001160:	60b9      	str	r1, [r7, #8]
 8001162:	607a      	str	r2, [r7, #4]
 8001164:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800116a:	f7ff ff61 	bl	8001030 <__NVIC_GetPriorityGrouping>
 800116e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001170:	687a      	ldr	r2, [r7, #4]
 8001172:	68b9      	ldr	r1, [r7, #8]
 8001174:	6978      	ldr	r0, [r7, #20]
 8001176:	f7ff ffb1 	bl	80010dc <NVIC_EncodePriority>
 800117a:	4602      	mov	r2, r0
 800117c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001180:	4611      	mov	r1, r2
 8001182:	4618      	mov	r0, r3
 8001184:	f7ff ff80 	bl	8001088 <__NVIC_SetPriority>
}
 8001188:	bf00      	nop
 800118a:	3718      	adds	r7, #24
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001190:	b580      	push	{r7, lr}
 8001192:	b082      	sub	sp, #8
 8001194:	af00      	add	r7, sp, #0
 8001196:	4603      	mov	r3, r0
 8001198:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800119a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119e:	4618      	mov	r0, r3
 80011a0:	f7ff ff54 	bl	800104c <__NVIC_EnableIRQ>
}
 80011a4:	bf00      	nop
 80011a6:	3708      	adds	r7, #8
 80011a8:	46bd      	mov	sp, r7
 80011aa:	bd80      	pop	{r7, pc}

080011ac <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80011ac:	b480      	push	{r7}
 80011ae:	b087      	sub	sp, #28
 80011b0:	af00      	add	r7, sp, #0
 80011b2:	6078      	str	r0, [r7, #4]
 80011b4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80011b6:	2300      	movs	r3, #0
 80011b8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80011ba:	e148      	b.n	800144e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80011bc:	683b      	ldr	r3, [r7, #0]
 80011be:	681a      	ldr	r2, [r3, #0]
 80011c0:	2101      	movs	r1, #1
 80011c2:	697b      	ldr	r3, [r7, #20]
 80011c4:	fa01 f303 	lsl.w	r3, r1, r3
 80011c8:	4013      	ands	r3, r2
 80011ca:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80011cc:	68fb      	ldr	r3, [r7, #12]
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	f000 813a 	beq.w	8001448 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	f003 0303 	and.w	r3, r3, #3
 80011dc:	2b01      	cmp	r3, #1
 80011de:	d005      	beq.n	80011ec <HAL_GPIO_Init+0x40>
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	685b      	ldr	r3, [r3, #4]
 80011e4:	f003 0303 	and.w	r3, r3, #3
 80011e8:	2b02      	cmp	r3, #2
 80011ea:	d130      	bne.n	800124e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	689b      	ldr	r3, [r3, #8]
 80011f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80011f2:	697b      	ldr	r3, [r7, #20]
 80011f4:	005b      	lsls	r3, r3, #1
 80011f6:	2203      	movs	r2, #3
 80011f8:	fa02 f303 	lsl.w	r3, r2, r3
 80011fc:	43db      	mvns	r3, r3
 80011fe:	693a      	ldr	r2, [r7, #16]
 8001200:	4013      	ands	r3, r2
 8001202:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	68da      	ldr	r2, [r3, #12]
 8001208:	697b      	ldr	r3, [r7, #20]
 800120a:	005b      	lsls	r3, r3, #1
 800120c:	fa02 f303 	lsl.w	r3, r2, r3
 8001210:	693a      	ldr	r2, [r7, #16]
 8001212:	4313      	orrs	r3, r2
 8001214:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	693a      	ldr	r2, [r7, #16]
 800121a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001222:	2201      	movs	r2, #1
 8001224:	697b      	ldr	r3, [r7, #20]
 8001226:	fa02 f303 	lsl.w	r3, r2, r3
 800122a:	43db      	mvns	r3, r3
 800122c:	693a      	ldr	r2, [r7, #16]
 800122e:	4013      	ands	r3, r2
 8001230:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001232:	683b      	ldr	r3, [r7, #0]
 8001234:	685b      	ldr	r3, [r3, #4]
 8001236:	091b      	lsrs	r3, r3, #4
 8001238:	f003 0201 	and.w	r2, r3, #1
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	fa02 f303 	lsl.w	r3, r2, r3
 8001242:	693a      	ldr	r2, [r7, #16]
 8001244:	4313      	orrs	r3, r2
 8001246:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f003 0303 	and.w	r3, r3, #3
 8001256:	2b03      	cmp	r3, #3
 8001258:	d017      	beq.n	800128a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001260:	697b      	ldr	r3, [r7, #20]
 8001262:	005b      	lsls	r3, r3, #1
 8001264:	2203      	movs	r2, #3
 8001266:	fa02 f303 	lsl.w	r3, r2, r3
 800126a:	43db      	mvns	r3, r3
 800126c:	693a      	ldr	r2, [r7, #16]
 800126e:	4013      	ands	r3, r2
 8001270:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001272:	683b      	ldr	r3, [r7, #0]
 8001274:	689a      	ldr	r2, [r3, #8]
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	005b      	lsls	r3, r3, #1
 800127a:	fa02 f303 	lsl.w	r3, r2, r3
 800127e:	693a      	ldr	r2, [r7, #16]
 8001280:	4313      	orrs	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f003 0303 	and.w	r3, r3, #3
 8001292:	2b02      	cmp	r3, #2
 8001294:	d123      	bne.n	80012de <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	08da      	lsrs	r2, r3, #3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	3208      	adds	r2, #8
 800129e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80012a2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	f003 0307 	and.w	r3, r3, #7
 80012aa:	009b      	lsls	r3, r3, #2
 80012ac:	220f      	movs	r2, #15
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	691a      	ldr	r2, [r3, #16]
 80012be:	697b      	ldr	r3, [r7, #20]
 80012c0:	f003 0307 	and.w	r3, r3, #7
 80012c4:	009b      	lsls	r3, r3, #2
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80012d0:	697b      	ldr	r3, [r7, #20]
 80012d2:	08da      	lsrs	r2, r3, #3
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3208      	adds	r2, #8
 80012d8:	6939      	ldr	r1, [r7, #16]
 80012da:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80012e4:	697b      	ldr	r3, [r7, #20]
 80012e6:	005b      	lsls	r3, r3, #1
 80012e8:	2203      	movs	r2, #3
 80012ea:	fa02 f303 	lsl.w	r3, r2, r3
 80012ee:	43db      	mvns	r3, r3
 80012f0:	693a      	ldr	r2, [r7, #16]
 80012f2:	4013      	ands	r3, r2
 80012f4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0203 	and.w	r2, r3, #3
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800131a:	2b00      	cmp	r3, #0
 800131c:	f000 8094 	beq.w	8001448 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001320:	4b52      	ldr	r3, [pc, #328]	; (800146c <HAL_GPIO_Init+0x2c0>)
 8001322:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001324:	4a51      	ldr	r2, [pc, #324]	; (800146c <HAL_GPIO_Init+0x2c0>)
 8001326:	f043 0301 	orr.w	r3, r3, #1
 800132a:	6613      	str	r3, [r2, #96]	; 0x60
 800132c:	4b4f      	ldr	r3, [pc, #316]	; (800146c <HAL_GPIO_Init+0x2c0>)
 800132e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001330:	f003 0301 	and.w	r3, r3, #1
 8001334:	60bb      	str	r3, [r7, #8]
 8001336:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001338:	4a4d      	ldr	r2, [pc, #308]	; (8001470 <HAL_GPIO_Init+0x2c4>)
 800133a:	697b      	ldr	r3, [r7, #20]
 800133c:	089b      	lsrs	r3, r3, #2
 800133e:	3302      	adds	r3, #2
 8001340:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001344:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0303 	and.w	r3, r3, #3
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	220f      	movs	r2, #15
 8001350:	fa02 f303 	lsl.w	r3, r2, r3
 8001354:	43db      	mvns	r3, r3
 8001356:	693a      	ldr	r2, [r7, #16]
 8001358:	4013      	ands	r3, r2
 800135a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001362:	d00d      	beq.n	8001380 <HAL_GPIO_Init+0x1d4>
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	4a43      	ldr	r2, [pc, #268]	; (8001474 <HAL_GPIO_Init+0x2c8>)
 8001368:	4293      	cmp	r3, r2
 800136a:	d007      	beq.n	800137c <HAL_GPIO_Init+0x1d0>
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	4a42      	ldr	r2, [pc, #264]	; (8001478 <HAL_GPIO_Init+0x2cc>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d101      	bne.n	8001378 <HAL_GPIO_Init+0x1cc>
 8001374:	2302      	movs	r3, #2
 8001376:	e004      	b.n	8001382 <HAL_GPIO_Init+0x1d6>
 8001378:	2307      	movs	r3, #7
 800137a:	e002      	b.n	8001382 <HAL_GPIO_Init+0x1d6>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <HAL_GPIO_Init+0x1d6>
 8001380:	2300      	movs	r3, #0
 8001382:	697a      	ldr	r2, [r7, #20]
 8001384:	f002 0203 	and.w	r2, r2, #3
 8001388:	0092      	lsls	r2, r2, #2
 800138a:	4093      	lsls	r3, r2
 800138c:	693a      	ldr	r2, [r7, #16]
 800138e:	4313      	orrs	r3, r2
 8001390:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001392:	4937      	ldr	r1, [pc, #220]	; (8001470 <HAL_GPIO_Init+0x2c4>)
 8001394:	697b      	ldr	r3, [r7, #20]
 8001396:	089b      	lsrs	r3, r3, #2
 8001398:	3302      	adds	r3, #2
 800139a:	693a      	ldr	r2, [r7, #16]
 800139c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80013a0:	4b36      	ldr	r3, [pc, #216]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013a2:	689b      	ldr	r3, [r3, #8]
 80013a4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	43db      	mvns	r3, r3
 80013aa:	693a      	ldr	r2, [r7, #16]
 80013ac:	4013      	ands	r3, r2
 80013ae:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d003      	beq.n	80013c4 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80013bc:	693a      	ldr	r2, [r7, #16]
 80013be:	68fb      	ldr	r3, [r7, #12]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80013c4:	4a2d      	ldr	r2, [pc, #180]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013c6:	693b      	ldr	r3, [r7, #16]
 80013c8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80013ca:	4b2c      	ldr	r3, [pc, #176]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013cc:	68db      	ldr	r3, [r3, #12]
 80013ce:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	43db      	mvns	r3, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4013      	ands	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80013da:	683b      	ldr	r3, [r7, #0]
 80013dc:	685b      	ldr	r3, [r3, #4]
 80013de:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80013e6:	693a      	ldr	r2, [r7, #16]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	4313      	orrs	r3, r2
 80013ec:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80013ee:	4a23      	ldr	r2, [pc, #140]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013f0:	693b      	ldr	r3, [r7, #16]
 80013f2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80013f4:	4b21      	ldr	r3, [pc, #132]	; (800147c <HAL_GPIO_Init+0x2d0>)
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	43db      	mvns	r3, r3
 80013fe:	693a      	ldr	r2, [r7, #16]
 8001400:	4013      	ands	r3, r2
 8001402:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	685b      	ldr	r3, [r3, #4]
 8001408:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800140c:	2b00      	cmp	r3, #0
 800140e:	d003      	beq.n	8001418 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001410:	693a      	ldr	r2, [r7, #16]
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	4313      	orrs	r3, r2
 8001416:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001418:	4a18      	ldr	r2, [pc, #96]	; (800147c <HAL_GPIO_Init+0x2d0>)
 800141a:	693b      	ldr	r3, [r7, #16]
 800141c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800141e:	4b17      	ldr	r3, [pc, #92]	; (800147c <HAL_GPIO_Init+0x2d0>)
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001424:	68fb      	ldr	r3, [r7, #12]
 8001426:	43db      	mvns	r3, r3
 8001428:	693a      	ldr	r2, [r7, #16]
 800142a:	4013      	ands	r3, r2
 800142c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	685b      	ldr	r3, [r3, #4]
 8001432:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001436:	2b00      	cmp	r3, #0
 8001438:	d003      	beq.n	8001442 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800143a:	693a      	ldr	r2, [r7, #16]
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	4313      	orrs	r3, r2
 8001440:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001442:	4a0e      	ldr	r2, [pc, #56]	; (800147c <HAL_GPIO_Init+0x2d0>)
 8001444:	693b      	ldr	r3, [r7, #16]
 8001446:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001448:	697b      	ldr	r3, [r7, #20]
 800144a:	3301      	adds	r3, #1
 800144c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800144e:	683b      	ldr	r3, [r7, #0]
 8001450:	681a      	ldr	r2, [r3, #0]
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	fa22 f303 	lsr.w	r3, r2, r3
 8001458:	2b00      	cmp	r3, #0
 800145a:	f47f aeaf 	bne.w	80011bc <HAL_GPIO_Init+0x10>
  }
}
 800145e:	bf00      	nop
 8001460:	bf00      	nop
 8001462:	371c      	adds	r7, #28
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	40021000 	.word	0x40021000
 8001470:	40010000 	.word	0x40010000
 8001474:	48000400 	.word	0x48000400
 8001478:	48000800 	.word	0x48000800
 800147c:	40010400 	.word	0x40010400

08001480 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001480:	b480      	push	{r7}
 8001482:	b083      	sub	sp, #12
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
 8001488:	460b      	mov	r3, r1
 800148a:	807b      	strh	r3, [r7, #2]
 800148c:	4613      	mov	r3, r2
 800148e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001490:	787b      	ldrb	r3, [r7, #1]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d003      	beq.n	800149e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001496:	887a      	ldrh	r2, [r7, #2]
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800149c:	e002      	b.n	80014a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800149e:	887a      	ldrh	r2, [r7, #2]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80014a4:	bf00      	nop
 80014a6:	370c      	adds	r7, #12
 80014a8:	46bd      	mov	sp, r7
 80014aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014ae:	4770      	bx	lr

080014b0 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80014b4:	4b05      	ldr	r3, [pc, #20]	; (80014cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4a04      	ldr	r2, [pc, #16]	; (80014cc <HAL_PWR_EnableBkUpAccess+0x1c>)
 80014ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014be:	6013      	str	r3, [r2, #0]
}
 80014c0:	bf00      	nop
 80014c2:	46bd      	mov	sp, r7
 80014c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c8:	4770      	bx	lr
 80014ca:	bf00      	nop
 80014cc:	40007000 	.word	0x40007000

080014d0 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80014d0:	b480      	push	{r7}
 80014d2:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80014d4:	4b04      	ldr	r3, [pc, #16]	; (80014e8 <HAL_PWREx_GetVoltageRange+0x18>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80014dc:	4618      	mov	r0, r3
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40007000 	.word	0x40007000

080014ec <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80014ec:	b480      	push	{r7}
 80014ee:	b085      	sub	sp, #20
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80014fa:	d130      	bne.n	800155e <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80014fc:	4b23      	ldr	r3, [pc, #140]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001504:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001508:	d038      	beq.n	800157c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800150a:	4b20      	ldr	r3, [pc, #128]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001512:	4a1e      	ldr	r2, [pc, #120]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001514:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001518:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800151a:	4b1d      	ldr	r3, [pc, #116]	; (8001590 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	2232      	movs	r2, #50	; 0x32
 8001520:	fb02 f303 	mul.w	r3, r2, r3
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001526:	fba2 2303 	umull	r2, r3, r2, r3
 800152a:	0c9b      	lsrs	r3, r3, #18
 800152c:	3301      	adds	r3, #1
 800152e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001530:	e002      	b.n	8001538 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	3b01      	subs	r3, #1
 8001536:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001538:	4b14      	ldr	r3, [pc, #80]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800153a:	695b      	ldr	r3, [r3, #20]
 800153c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001540:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001544:	d102      	bne.n	800154c <HAL_PWREx_ControlVoltageScaling+0x60>
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	2b00      	cmp	r3, #0
 800154a:	d1f2      	bne.n	8001532 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800154c:	4b0f      	ldr	r3, [pc, #60]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800154e:	695b      	ldr	r3, [r3, #20]
 8001550:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001554:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001558:	d110      	bne.n	800157c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800155a:	2303      	movs	r3, #3
 800155c:	e00f      	b.n	800157e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 800155e:	4b0b      	ldr	r3, [pc, #44]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001566:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800156a:	d007      	beq.n	800157c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800156c:	4b07      	ldr	r3, [pc, #28]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001574:	4a05      	ldr	r2, [pc, #20]	; (800158c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001576:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800157a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800157c:	2300      	movs	r3, #0
}
 800157e:	4618      	mov	r0, r3
 8001580:	3714      	adds	r7, #20
 8001582:	46bd      	mov	sp, r7
 8001584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001588:	4770      	bx	lr
 800158a:	bf00      	nop
 800158c:	40007000 	.word	0x40007000
 8001590:	20000000 	.word	0x20000000
 8001594:	431bde83 	.word	0x431bde83

08001598 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b088      	sub	sp, #32
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d102      	bne.n	80015ac <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80015a6:	2301      	movs	r3, #1
 80015a8:	f000 bc02 	b.w	8001db0 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80015ac:	4b96      	ldr	r3, [pc, #600]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015ae:	689b      	ldr	r3, [r3, #8]
 80015b0:	f003 030c 	and.w	r3, r3, #12
 80015b4:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80015b6:	4b94      	ldr	r3, [pc, #592]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015b8:	68db      	ldr	r3, [r3, #12]
 80015ba:	f003 0303 	and.w	r3, r3, #3
 80015be:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	681b      	ldr	r3, [r3, #0]
 80015c4:	f003 0310 	and.w	r3, r3, #16
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80e4 	beq.w	8001796 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80015ce:	69bb      	ldr	r3, [r7, #24]
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d007      	beq.n	80015e4 <HAL_RCC_OscConfig+0x4c>
 80015d4:	69bb      	ldr	r3, [r7, #24]
 80015d6:	2b0c      	cmp	r3, #12
 80015d8:	f040 808b 	bne.w	80016f2 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80015dc:	697b      	ldr	r3, [r7, #20]
 80015de:	2b01      	cmp	r3, #1
 80015e0:	f040 8087 	bne.w	80016f2 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80015e4:	4b88      	ldr	r3, [pc, #544]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0302 	and.w	r3, r3, #2
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d005      	beq.n	80015fc <HAL_RCC_OscConfig+0x64>
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	699b      	ldr	r3, [r3, #24]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d101      	bne.n	80015fc <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80015f8:	2301      	movs	r3, #1
 80015fa:	e3d9      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	6a1a      	ldr	r2, [r3, #32]
 8001600:	4b81      	ldr	r3, [pc, #516]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f003 0308 	and.w	r3, r3, #8
 8001608:	2b00      	cmp	r3, #0
 800160a:	d004      	beq.n	8001616 <HAL_RCC_OscConfig+0x7e>
 800160c:	4b7e      	ldr	r3, [pc, #504]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001614:	e005      	b.n	8001622 <HAL_RCC_OscConfig+0x8a>
 8001616:	4b7c      	ldr	r3, [pc, #496]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001618:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800161c:	091b      	lsrs	r3, r3, #4
 800161e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001622:	4293      	cmp	r3, r2
 8001624:	d223      	bcs.n	800166e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	4618      	mov	r0, r3
 800162c:	f000 fdbe 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e3ba      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800163a:	4b73      	ldr	r3, [pc, #460]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a72      	ldr	r2, [pc, #456]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6013      	str	r3, [r2, #0]
 8001646:	4b70      	ldr	r3, [pc, #448]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6a1b      	ldr	r3, [r3, #32]
 8001652:	496d      	ldr	r1, [pc, #436]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001654:	4313      	orrs	r3, r2
 8001656:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001658:	4b6b      	ldr	r3, [pc, #428]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800165a:	685b      	ldr	r3, [r3, #4]
 800165c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	69db      	ldr	r3, [r3, #28]
 8001664:	021b      	lsls	r3, r3, #8
 8001666:	4968      	ldr	r1, [pc, #416]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001668:	4313      	orrs	r3, r2
 800166a:	604b      	str	r3, [r1, #4]
 800166c:	e025      	b.n	80016ba <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800166e:	4b66      	ldr	r3, [pc, #408]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	4a65      	ldr	r2, [pc, #404]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001674:	f043 0308 	orr.w	r3, r3, #8
 8001678:	6013      	str	r3, [r2, #0]
 800167a:	4b63      	ldr	r3, [pc, #396]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6a1b      	ldr	r3, [r3, #32]
 8001686:	4960      	ldr	r1, [pc, #384]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001688:	4313      	orrs	r3, r2
 800168a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800168c:	4b5e      	ldr	r3, [pc, #376]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800168e:	685b      	ldr	r3, [r3, #4]
 8001690:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	69db      	ldr	r3, [r3, #28]
 8001698:	021b      	lsls	r3, r3, #8
 800169a:	495b      	ldr	r1, [pc, #364]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800169c:	4313      	orrs	r3, r2
 800169e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d109      	bne.n	80016ba <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6a1b      	ldr	r3, [r3, #32]
 80016aa:	4618      	mov	r0, r3
 80016ac:	f000 fd7e 	bl	80021ac <RCC_SetFlashLatencyFromMSIRange>
 80016b0:	4603      	mov	r3, r0
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d001      	beq.n	80016ba <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80016b6:	2301      	movs	r3, #1
 80016b8:	e37a      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016ba:	f000 fc81 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 80016be:	4602      	mov	r2, r0
 80016c0:	4b51      	ldr	r3, [pc, #324]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	091b      	lsrs	r3, r3, #4
 80016c6:	f003 030f 	and.w	r3, r3, #15
 80016ca:	4950      	ldr	r1, [pc, #320]	; (800180c <HAL_RCC_OscConfig+0x274>)
 80016cc:	5ccb      	ldrb	r3, [r1, r3]
 80016ce:	f003 031f 	and.w	r3, r3, #31
 80016d2:	fa22 f303 	lsr.w	r3, r2, r3
 80016d6:	4a4e      	ldr	r2, [pc, #312]	; (8001810 <HAL_RCC_OscConfig+0x278>)
 80016d8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80016da:	4b4e      	ldr	r3, [pc, #312]	; (8001814 <HAL_RCC_OscConfig+0x27c>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4618      	mov	r0, r3
 80016e0:	f7ff fa14 	bl	8000b0c <HAL_InitTick>
 80016e4:	4603      	mov	r3, r0
 80016e6:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80016e8:	7bfb      	ldrb	r3, [r7, #15]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d052      	beq.n	8001794 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80016ee:	7bfb      	ldrb	r3, [r7, #15]
 80016f0:	e35e      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	699b      	ldr	r3, [r3, #24]
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d032      	beq.n	8001760 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80016fa:	4b43      	ldr	r3, [pc, #268]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a42      	ldr	r2, [pc, #264]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001700:	f043 0301 	orr.w	r3, r3, #1
 8001704:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001706:	f7ff fc63 	bl	8000fd0 <HAL_GetTick>
 800170a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800170c:	e008      	b.n	8001720 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800170e:	f7ff fc5f 	bl	8000fd0 <HAL_GetTick>
 8001712:	4602      	mov	r2, r0
 8001714:	693b      	ldr	r3, [r7, #16]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	2b02      	cmp	r3, #2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e347      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001720:	4b39      	ldr	r3, [pc, #228]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0f0      	beq.n	800170e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800172c:	4b36      	ldr	r3, [pc, #216]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a35      	ldr	r2, [pc, #212]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001732:	f043 0308 	orr.w	r3, r3, #8
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b33      	ldr	r3, [pc, #204]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a1b      	ldr	r3, [r3, #32]
 8001744:	4930      	ldr	r1, [pc, #192]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001746:	4313      	orrs	r3, r2
 8001748:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800174a:	4b2f      	ldr	r3, [pc, #188]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	69db      	ldr	r3, [r3, #28]
 8001756:	021b      	lsls	r3, r3, #8
 8001758:	492b      	ldr	r1, [pc, #172]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 800175a:	4313      	orrs	r3, r2
 800175c:	604b      	str	r3, [r1, #4]
 800175e:	e01a      	b.n	8001796 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001760:	4b29      	ldr	r3, [pc, #164]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a28      	ldr	r2, [pc, #160]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800176c:	f7ff fc30 	bl	8000fd0 <HAL_GetTick>
 8001770:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001772:	e008      	b.n	8001786 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001774:	f7ff fc2c 	bl	8000fd0 <HAL_GetTick>
 8001778:	4602      	mov	r2, r0
 800177a:	693b      	ldr	r3, [r7, #16]
 800177c:	1ad3      	subs	r3, r2, r3
 800177e:	2b02      	cmp	r3, #2
 8001780:	d901      	bls.n	8001786 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001782:	2303      	movs	r3, #3
 8001784:	e314      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001786:	4b20      	ldr	r3, [pc, #128]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f003 0302 	and.w	r3, r3, #2
 800178e:	2b00      	cmp	r3, #0
 8001790:	d1f0      	bne.n	8001774 <HAL_RCC_OscConfig+0x1dc>
 8001792:	e000      	b.n	8001796 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001794:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d073      	beq.n	800188a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80017a2:	69bb      	ldr	r3, [r7, #24]
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d005      	beq.n	80017b4 <HAL_RCC_OscConfig+0x21c>
 80017a8:	69bb      	ldr	r3, [r7, #24]
 80017aa:	2b0c      	cmp	r3, #12
 80017ac:	d10e      	bne.n	80017cc <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80017ae:	697b      	ldr	r3, [r7, #20]
 80017b0:	2b03      	cmp	r3, #3
 80017b2:	d10b      	bne.n	80017cc <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80017b4:	4b14      	ldr	r3, [pc, #80]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d063      	beq.n	8001888 <HAL_RCC_OscConfig+0x2f0>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	685b      	ldr	r3, [r3, #4]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d15f      	bne.n	8001888 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e2f1      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	685b      	ldr	r3, [r3, #4]
 80017d0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80017d4:	d106      	bne.n	80017e4 <HAL_RCC_OscConfig+0x24c>
 80017d6:	4b0c      	ldr	r3, [pc, #48]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	4a0b      	ldr	r2, [pc, #44]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017dc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80017e0:	6013      	str	r3, [r2, #0]
 80017e2:	e025      	b.n	8001830 <HAL_RCC_OscConfig+0x298>
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80017ec:	d114      	bne.n	8001818 <HAL_RCC_OscConfig+0x280>
 80017ee:	4b06      	ldr	r3, [pc, #24]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a05      	ldr	r2, [pc, #20]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017f4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80017f8:	6013      	str	r3, [r2, #0]
 80017fa:	4b03      	ldr	r3, [pc, #12]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	4a02      	ldr	r2, [pc, #8]	; (8001808 <HAL_RCC_OscConfig+0x270>)
 8001800:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001804:	6013      	str	r3, [r2, #0]
 8001806:	e013      	b.n	8001830 <HAL_RCC_OscConfig+0x298>
 8001808:	40021000 	.word	0x40021000
 800180c:	080084a4 	.word	0x080084a4
 8001810:	20000000 	.word	0x20000000
 8001814:	20000004 	.word	0x20000004
 8001818:	4ba0      	ldr	r3, [pc, #640]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a9f      	ldr	r2, [pc, #636]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800181e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001822:	6013      	str	r3, [r2, #0]
 8001824:	4b9d      	ldr	r3, [pc, #628]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a9c      	ldr	r2, [pc, #624]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800182a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800182e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	685b      	ldr	r3, [r3, #4]
 8001834:	2b00      	cmp	r3, #0
 8001836:	d013      	beq.n	8001860 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001838:	f7ff fbca 	bl	8000fd0 <HAL_GetTick>
 800183c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800183e:	e008      	b.n	8001852 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001840:	f7ff fbc6 	bl	8000fd0 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	693b      	ldr	r3, [r7, #16]
 8001848:	1ad3      	subs	r3, r2, r3
 800184a:	2b64      	cmp	r3, #100	; 0x64
 800184c:	d901      	bls.n	8001852 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 800184e:	2303      	movs	r3, #3
 8001850:	e2ae      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001852:	4b92      	ldr	r3, [pc, #584]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800185a:	2b00      	cmp	r3, #0
 800185c:	d0f0      	beq.n	8001840 <HAL_RCC_OscConfig+0x2a8>
 800185e:	e014      	b.n	800188a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001860:	f7ff fbb6 	bl	8000fd0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001868:	f7ff fbb2 	bl	8000fd0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b64      	cmp	r3, #100	; 0x64
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e29a      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800187a:	4b88      	ldr	r3, [pc, #544]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001882:	2b00      	cmp	r3, #0
 8001884:	d1f0      	bne.n	8001868 <HAL_RCC_OscConfig+0x2d0>
 8001886:	e000      	b.n	800188a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001888:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	f003 0302 	and.w	r3, r3, #2
 8001892:	2b00      	cmp	r3, #0
 8001894:	d060      	beq.n	8001958 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001896:	69bb      	ldr	r3, [r7, #24]
 8001898:	2b04      	cmp	r3, #4
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_OscConfig+0x310>
 800189c:	69bb      	ldr	r3, [r7, #24]
 800189e:	2b0c      	cmp	r3, #12
 80018a0:	d119      	bne.n	80018d6 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d116      	bne.n	80018d6 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018a8:	4b7c      	ldr	r3, [pc, #496]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_OscConfig+0x328>
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	68db      	ldr	r3, [r3, #12]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d101      	bne.n	80018c0 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80018bc:	2301      	movs	r3, #1
 80018be:	e277      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80018c0:	4b76      	ldr	r3, [pc, #472]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	691b      	ldr	r3, [r3, #16]
 80018cc:	061b      	lsls	r3, r3, #24
 80018ce:	4973      	ldr	r1, [pc, #460]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018d0:	4313      	orrs	r3, r2
 80018d2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80018d4:	e040      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d023      	beq.n	8001926 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80018de:	4b6f      	ldr	r3, [pc, #444]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4a6e      	ldr	r2, [pc, #440]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80018e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ea:	f7ff fb71 	bl	8000fd0 <HAL_GetTick>
 80018ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018f0:	e008      	b.n	8001904 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018f2:	f7ff fb6d 	bl	8000fd0 <HAL_GetTick>
 80018f6:	4602      	mov	r2, r0
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	1ad3      	subs	r3, r2, r3
 80018fc:	2b02      	cmp	r3, #2
 80018fe:	d901      	bls.n	8001904 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001900:	2303      	movs	r3, #3
 8001902:	e255      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001904:	4b65      	ldr	r3, [pc, #404]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800190c:	2b00      	cmp	r3, #0
 800190e:	d0f0      	beq.n	80018f2 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001910:	4b62      	ldr	r3, [pc, #392]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001912:	685b      	ldr	r3, [r3, #4]
 8001914:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	691b      	ldr	r3, [r3, #16]
 800191c:	061b      	lsls	r3, r3, #24
 800191e:	495f      	ldr	r1, [pc, #380]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001920:	4313      	orrs	r3, r2
 8001922:	604b      	str	r3, [r1, #4]
 8001924:	e018      	b.n	8001958 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001926:	4b5d      	ldr	r3, [pc, #372]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	4a5c      	ldr	r2, [pc, #368]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800192c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001930:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001932:	f7ff fb4d 	bl	8000fd0 <HAL_GetTick>
 8001936:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001938:	e008      	b.n	800194c <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800193a:	f7ff fb49 	bl	8000fd0 <HAL_GetTick>
 800193e:	4602      	mov	r2, r0
 8001940:	693b      	ldr	r3, [r7, #16]
 8001942:	1ad3      	subs	r3, r2, r3
 8001944:	2b02      	cmp	r3, #2
 8001946:	d901      	bls.n	800194c <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001948:	2303      	movs	r3, #3
 800194a:	e231      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800194c:	4b53      	ldr	r3, [pc, #332]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001954:	2b00      	cmp	r3, #0
 8001956:	d1f0      	bne.n	800193a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0308 	and.w	r3, r3, #8
 8001960:	2b00      	cmp	r3, #0
 8001962:	d03c      	beq.n	80019de <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	695b      	ldr	r3, [r3, #20]
 8001968:	2b00      	cmp	r3, #0
 800196a:	d01c      	beq.n	80019a6 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800196c:	4b4b      	ldr	r3, [pc, #300]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 800196e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001972:	4a4a      	ldr	r2, [pc, #296]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800197c:	f7ff fb28 	bl	8000fd0 <HAL_GetTick>
 8001980:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001982:	e008      	b.n	8001996 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001984:	f7ff fb24 	bl	8000fd0 <HAL_GetTick>
 8001988:	4602      	mov	r2, r0
 800198a:	693b      	ldr	r3, [r7, #16]
 800198c:	1ad3      	subs	r3, r2, r3
 800198e:	2b02      	cmp	r3, #2
 8001990:	d901      	bls.n	8001996 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001992:	2303      	movs	r3, #3
 8001994:	e20c      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001996:	4b41      	ldr	r3, [pc, #260]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001998:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800199c:	f003 0302 	and.w	r3, r3, #2
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d0ef      	beq.n	8001984 <HAL_RCC_OscConfig+0x3ec>
 80019a4:	e01b      	b.n	80019de <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019a6:	4b3d      	ldr	r3, [pc, #244]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019a8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019ac:	4a3b      	ldr	r2, [pc, #236]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019ae:	f023 0301 	bic.w	r3, r3, #1
 80019b2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019b6:	f7ff fb0b 	bl	8000fd0 <HAL_GetTick>
 80019ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019bc:	e008      	b.n	80019d0 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019be:	f7ff fb07 	bl	8000fd0 <HAL_GetTick>
 80019c2:	4602      	mov	r2, r0
 80019c4:	693b      	ldr	r3, [r7, #16]
 80019c6:	1ad3      	subs	r3, r2, r3
 80019c8:	2b02      	cmp	r3, #2
 80019ca:	d901      	bls.n	80019d0 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80019cc:	2303      	movs	r3, #3
 80019ce:	e1ef      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80019d0:	4b32      	ldr	r3, [pc, #200]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019d6:	f003 0302 	and.w	r3, r3, #2
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d1ef      	bne.n	80019be <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	f003 0304 	and.w	r3, r3, #4
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	f000 80a6 	beq.w	8001b38 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80019ec:	2300      	movs	r3, #0
 80019ee:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80019f0:	4b2a      	ldr	r3, [pc, #168]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d10d      	bne.n	8001a18 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80019fc:	4b27      	ldr	r3, [pc, #156]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 80019fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a00:	4a26      	ldr	r2, [pc, #152]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a02:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a06:	6593      	str	r3, [r2, #88]	; 0x58
 8001a08:	4b24      	ldr	r3, [pc, #144]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a10:	60bb      	str	r3, [r7, #8]
 8001a12:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a14:	2301      	movs	r3, #1
 8001a16:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a18:	4b21      	ldr	r3, [pc, #132]	; (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d118      	bne.n	8001a56 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a24:	4b1e      	ldr	r3, [pc, #120]	; (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	4a1d      	ldr	r2, [pc, #116]	; (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a2e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a30:	f7ff face 	bl	8000fd0 <HAL_GetTick>
 8001a34:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a36:	e008      	b.n	8001a4a <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a38:	f7ff faca 	bl	8000fd0 <HAL_GetTick>
 8001a3c:	4602      	mov	r2, r0
 8001a3e:	693b      	ldr	r3, [r7, #16]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d901      	bls.n	8001a4a <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001a46:	2303      	movs	r3, #3
 8001a48:	e1b2      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a4a:	4b15      	ldr	r3, [pc, #84]	; (8001aa0 <HAL_RCC_OscConfig+0x508>)
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a52:	2b00      	cmp	r3, #0
 8001a54:	d0f0      	beq.n	8001a38 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	689b      	ldr	r3, [r3, #8]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	d108      	bne.n	8001a70 <HAL_RCC_OscConfig+0x4d8>
 8001a5e:	4b0f      	ldr	r3, [pc, #60]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a64:	4a0d      	ldr	r2, [pc, #52]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a66:	f043 0301 	orr.w	r3, r3, #1
 8001a6a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a6e:	e029      	b.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	689b      	ldr	r3, [r3, #8]
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d115      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x50c>
 8001a78:	4b08      	ldr	r3, [pc, #32]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a7a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a7e:	4a07      	ldr	r2, [pc, #28]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a80:	f043 0304 	orr.w	r3, r3, #4
 8001a84:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a88:	4b04      	ldr	r3, [pc, #16]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001a8e:	4a03      	ldr	r2, [pc, #12]	; (8001a9c <HAL_RCC_OscConfig+0x504>)
 8001a90:	f043 0301 	orr.w	r3, r3, #1
 8001a94:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001a98:	e014      	b.n	8001ac4 <HAL_RCC_OscConfig+0x52c>
 8001a9a:	bf00      	nop
 8001a9c:	40021000 	.word	0x40021000
 8001aa0:	40007000 	.word	0x40007000
 8001aa4:	4b9a      	ldr	r3, [pc, #616]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001aa6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aaa:	4a99      	ldr	r2, [pc, #612]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001aac:	f023 0301 	bic.w	r3, r3, #1
 8001ab0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ab4:	4b96      	ldr	r3, [pc, #600]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001ab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001aba:	4a95      	ldr	r2, [pc, #596]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001abc:	f023 0304 	bic.w	r3, r3, #4
 8001ac0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	689b      	ldr	r3, [r3, #8]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d016      	beq.n	8001afa <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001acc:	f7ff fa80 	bl	8000fd0 <HAL_GetTick>
 8001ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ad2:	e00a      	b.n	8001aea <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ad4:	f7ff fa7c 	bl	8000fd0 <HAL_GetTick>
 8001ad8:	4602      	mov	r2, r0
 8001ada:	693b      	ldr	r3, [r7, #16]
 8001adc:	1ad3      	subs	r3, r2, r3
 8001ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d901      	bls.n	8001aea <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001ae6:	2303      	movs	r3, #3
 8001ae8:	e162      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001aea:	4b89      	ldr	r3, [pc, #548]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001aec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af0:	f003 0302 	and.w	r3, r3, #2
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d0ed      	beq.n	8001ad4 <HAL_RCC_OscConfig+0x53c>
 8001af8:	e015      	b.n	8001b26 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001afa:	f7ff fa69 	bl	8000fd0 <HAL_GetTick>
 8001afe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b00:	e00a      	b.n	8001b18 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b02:	f7ff fa65 	bl	8000fd0 <HAL_GetTick>
 8001b06:	4602      	mov	r2, r0
 8001b08:	693b      	ldr	r3, [r7, #16]
 8001b0a:	1ad3      	subs	r3, r2, r3
 8001b0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d901      	bls.n	8001b18 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b14:	2303      	movs	r3, #3
 8001b16:	e14b      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b18:	4b7d      	ldr	r3, [pc, #500]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b1e:	f003 0302 	and.w	r3, r3, #2
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1ed      	bne.n	8001b02 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b26:	7ffb      	ldrb	r3, [r7, #31]
 8001b28:	2b01      	cmp	r3, #1
 8001b2a:	d105      	bne.n	8001b38 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b2c:	4b78      	ldr	r3, [pc, #480]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b30:	4a77      	ldr	r2, [pc, #476]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b32:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b36:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	f003 0320 	and.w	r3, r3, #32
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d03c      	beq.n	8001bbe <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d01c      	beq.n	8001b86 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001b4c:	4b70      	ldr	r3, [pc, #448]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b4e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b52:	4a6f      	ldr	r2, [pc, #444]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b54:	f043 0301 	orr.w	r3, r3, #1
 8001b58:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b5c:	f7ff fa38 	bl	8000fd0 <HAL_GetTick>
 8001b60:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b62:	e008      	b.n	8001b76 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b64:	f7ff fa34 	bl	8000fd0 <HAL_GetTick>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	1ad3      	subs	r3, r2, r3
 8001b6e:	2b02      	cmp	r3, #2
 8001b70:	d901      	bls.n	8001b76 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001b72:	2303      	movs	r3, #3
 8001b74:	e11c      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001b76:	4b66      	ldr	r3, [pc, #408]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b78:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b7c:	f003 0302 	and.w	r3, r3, #2
 8001b80:	2b00      	cmp	r3, #0
 8001b82:	d0ef      	beq.n	8001b64 <HAL_RCC_OscConfig+0x5cc>
 8001b84:	e01b      	b.n	8001bbe <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b86:	4b62      	ldr	r3, [pc, #392]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b88:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001b8c:	4a60      	ldr	r2, [pc, #384]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001b8e:	f023 0301 	bic.w	r3, r3, #1
 8001b92:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b96:	f7ff fa1b 	bl	8000fd0 <HAL_GetTick>
 8001b9a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001b9c:	e008      	b.n	8001bb0 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b9e:	f7ff fa17 	bl	8000fd0 <HAL_GetTick>
 8001ba2:	4602      	mov	r2, r0
 8001ba4:	693b      	ldr	r3, [r7, #16]
 8001ba6:	1ad3      	subs	r3, r2, r3
 8001ba8:	2b02      	cmp	r3, #2
 8001baa:	d901      	bls.n	8001bb0 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001bac:	2303      	movs	r3, #3
 8001bae:	e0ff      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001bb0:	4b57      	ldr	r3, [pc, #348]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001bb2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bb6:	f003 0302 	and.w	r3, r3, #2
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d1ef      	bne.n	8001b9e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	f000 80f3 	beq.w	8001dae <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bcc:	2b02      	cmp	r3, #2
 8001bce:	f040 80c9 	bne.w	8001d64 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001bd2:	4b4f      	ldr	r3, [pc, #316]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001bd4:	68db      	ldr	r3, [r3, #12]
 8001bd6:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bd8:	697b      	ldr	r3, [r7, #20]
 8001bda:	f003 0203 	and.w	r2, r3, #3
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001be2:	429a      	cmp	r2, r3
 8001be4:	d12c      	bne.n	8001c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf0:	3b01      	subs	r3, #1
 8001bf2:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d123      	bne.n	8001c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c02:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c04:	429a      	cmp	r2, r3
 8001c06:	d11b      	bne.n	8001c40 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c12:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d113      	bne.n	8001c40 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c18:	697b      	ldr	r3, [r7, #20]
 8001c1a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c22:	085b      	lsrs	r3, r3, #1
 8001c24:	3b01      	subs	r3, #1
 8001c26:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c28:	429a      	cmp	r2, r3
 8001c2a:	d109      	bne.n	8001c40 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c36:	085b      	lsrs	r3, r3, #1
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c3c:	429a      	cmp	r2, r3
 8001c3e:	d06b      	beq.n	8001d18 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001c40:	69bb      	ldr	r3, [r7, #24]
 8001c42:	2b0c      	cmp	r3, #12
 8001c44:	d062      	beq.n	8001d0c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001c46:	4b32      	ldr	r3, [pc, #200]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d001      	beq.n	8001c56 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001c52:	2301      	movs	r3, #1
 8001c54:	e0ac      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001c56:	4b2e      	ldr	r3, [pc, #184]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a2d      	ldr	r2, [pc, #180]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001c5c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001c60:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001c62:	f7ff f9b5 	bl	8000fd0 <HAL_GetTick>
 8001c66:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c68:	e008      	b.n	8001c7c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c6a:	f7ff f9b1 	bl	8000fd0 <HAL_GetTick>
 8001c6e:	4602      	mov	r2, r0
 8001c70:	693b      	ldr	r3, [r7, #16]
 8001c72:	1ad3      	subs	r3, r2, r3
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d901      	bls.n	8001c7c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001c78:	2303      	movs	r3, #3
 8001c7a:	e099      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001c7c:	4b24      	ldr	r3, [pc, #144]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c84:	2b00      	cmp	r3, #0
 8001c86:	d1f0      	bne.n	8001c6a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c88:	4b21      	ldr	r3, [pc, #132]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001c8a:	68da      	ldr	r2, [r3, #12]
 8001c8c:	4b21      	ldr	r3, [pc, #132]	; (8001d14 <HAL_RCC_OscConfig+0x77c>)
 8001c8e:	4013      	ands	r3, r2
 8001c90:	687a      	ldr	r2, [r7, #4]
 8001c92:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001c94:	687a      	ldr	r2, [r7, #4]
 8001c96:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001c98:	3a01      	subs	r2, #1
 8001c9a:	0112      	lsls	r2, r2, #4
 8001c9c:	4311      	orrs	r1, r2
 8001c9e:	687a      	ldr	r2, [r7, #4]
 8001ca0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001ca2:	0212      	lsls	r2, r2, #8
 8001ca4:	4311      	orrs	r1, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001caa:	0852      	lsrs	r2, r2, #1
 8001cac:	3a01      	subs	r2, #1
 8001cae:	0552      	lsls	r2, r2, #21
 8001cb0:	4311      	orrs	r1, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001cb6:	0852      	lsrs	r2, r2, #1
 8001cb8:	3a01      	subs	r2, #1
 8001cba:	0652      	lsls	r2, r2, #25
 8001cbc:	4311      	orrs	r1, r2
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001cc2:	06d2      	lsls	r2, r2, #27
 8001cc4:	430a      	orrs	r2, r1
 8001cc6:	4912      	ldr	r1, [pc, #72]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001cc8:	4313      	orrs	r3, r2
 8001cca:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001ccc:	4b10      	ldr	r3, [pc, #64]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a0f      	ldr	r2, [pc, #60]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001cd2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001cd6:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001cd8:	4b0d      	ldr	r3, [pc, #52]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001cda:	68db      	ldr	r3, [r3, #12]
 8001cdc:	4a0c      	ldr	r2, [pc, #48]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001cde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ce2:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001ce4:	f7ff f974 	bl	8000fd0 <HAL_GetTick>
 8001ce8:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cea:	e008      	b.n	8001cfe <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cec:	f7ff f970 	bl	8000fd0 <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	693b      	ldr	r3, [r7, #16]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b02      	cmp	r3, #2
 8001cf8:	d901      	bls.n	8001cfe <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001cfa:	2303      	movs	r3, #3
 8001cfc:	e058      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001cfe:	4b04      	ldr	r3, [pc, #16]	; (8001d10 <HAL_RCC_OscConfig+0x778>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d0f0      	beq.n	8001cec <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d0a:	e050      	b.n	8001dae <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e04f      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
 8001d10:	40021000 	.word	0x40021000
 8001d14:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d18:	4b27      	ldr	r3, [pc, #156]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d144      	bne.n	8001dae <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d24:	4b24      	ldr	r3, [pc, #144]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	4a23      	ldr	r2, [pc, #140]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d2a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d2e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d30:	4b21      	ldr	r3, [pc, #132]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d32:	68db      	ldr	r3, [r3, #12]
 8001d34:	4a20      	ldr	r2, [pc, #128]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d36:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001d3c:	f7ff f948 	bl	8000fd0 <HAL_GetTick>
 8001d40:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d42:	e008      	b.n	8001d56 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d44:	f7ff f944 	bl	8000fd0 <HAL_GetTick>
 8001d48:	4602      	mov	r2, r0
 8001d4a:	693b      	ldr	r3, [r7, #16]
 8001d4c:	1ad3      	subs	r3, r2, r3
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d901      	bls.n	8001d56 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001d52:	2303      	movs	r3, #3
 8001d54:	e02c      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d56:	4b18      	ldr	r3, [pc, #96]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d0f0      	beq.n	8001d44 <HAL_RCC_OscConfig+0x7ac>
 8001d62:	e024      	b.n	8001dae <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d64:	69bb      	ldr	r3, [r7, #24]
 8001d66:	2b0c      	cmp	r3, #12
 8001d68:	d01f      	beq.n	8001daa <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d6a:	4b13      	ldr	r3, [pc, #76]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a12      	ldr	r2, [pc, #72]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001d74:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d76:	f7ff f92b 	bl	8000fd0 <HAL_GetTick>
 8001d7a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d7c:	e008      	b.n	8001d90 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d7e:	f7ff f927 	bl	8000fd0 <HAL_GetTick>
 8001d82:	4602      	mov	r2, r0
 8001d84:	693b      	ldr	r3, [r7, #16]
 8001d86:	1ad3      	subs	r3, r2, r3
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d901      	bls.n	8001d90 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001d8c:	2303      	movs	r3, #3
 8001d8e:	e00f      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d90:	4b09      	ldr	r3, [pc, #36]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d1f0      	bne.n	8001d7e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001d9c:	4b06      	ldr	r3, [pc, #24]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001d9e:	68da      	ldr	r2, [r3, #12]
 8001da0:	4905      	ldr	r1, [pc, #20]	; (8001db8 <HAL_RCC_OscConfig+0x820>)
 8001da2:	4b06      	ldr	r3, [pc, #24]	; (8001dbc <HAL_RCC_OscConfig+0x824>)
 8001da4:	4013      	ands	r3, r2
 8001da6:	60cb      	str	r3, [r1, #12]
 8001da8:	e001      	b.n	8001dae <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001daa:	2301      	movs	r3, #1
 8001dac:	e000      	b.n	8001db0 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001dae:	2300      	movs	r3, #0
}
 8001db0:	4618      	mov	r0, r3
 8001db2:	3720      	adds	r7, #32
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bd80      	pop	{r7, pc}
 8001db8:	40021000 	.word	0x40021000
 8001dbc:	feeefffc 	.word	0xfeeefffc

08001dc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b084      	sub	sp, #16
 8001dc4:	af00      	add	r7, sp, #0
 8001dc6:	6078      	str	r0, [r7, #4]
 8001dc8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d101      	bne.n	8001dd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001dd0:	2301      	movs	r3, #1
 8001dd2:	e0e7      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001dd4:	4b75      	ldr	r3, [pc, #468]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	f003 0307 	and.w	r3, r3, #7
 8001ddc:	683a      	ldr	r2, [r7, #0]
 8001dde:	429a      	cmp	r2, r3
 8001de0:	d910      	bls.n	8001e04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001de2:	4b72      	ldr	r3, [pc, #456]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f023 0207 	bic.w	r2, r3, #7
 8001dea:	4970      	ldr	r1, [pc, #448]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001dec:	683b      	ldr	r3, [r7, #0]
 8001dee:	4313      	orrs	r3, r2
 8001df0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001df2:	4b6e      	ldr	r3, [pc, #440]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0307 	and.w	r3, r3, #7
 8001dfa:	683a      	ldr	r2, [r7, #0]
 8001dfc:	429a      	cmp	r2, r3
 8001dfe:	d001      	beq.n	8001e04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e00:	2301      	movs	r3, #1
 8001e02:	e0cf      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	f003 0302 	and.w	r3, r3, #2
 8001e0c:	2b00      	cmp	r3, #0
 8001e0e:	d010      	beq.n	8001e32 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	689a      	ldr	r2, [r3, #8]
 8001e14:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e16:	689b      	ldr	r3, [r3, #8]
 8001e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e1c:	429a      	cmp	r2, r3
 8001e1e:	d908      	bls.n	8001e32 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e20:	4b63      	ldr	r3, [pc, #396]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	689b      	ldr	r3, [r3, #8]
 8001e2c:	4960      	ldr	r1, [pc, #384]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e2e:	4313      	orrs	r3, r2
 8001e30:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f003 0301 	and.w	r3, r3, #1
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d04c      	beq.n	8001ed8 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	2b03      	cmp	r3, #3
 8001e44:	d107      	bne.n	8001e56 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001e46:	4b5a      	ldr	r3, [pc, #360]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d121      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e0a6      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	685b      	ldr	r3, [r3, #4]
 8001e5a:	2b02      	cmp	r3, #2
 8001e5c:	d107      	bne.n	8001e6e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001e5e:	4b54      	ldr	r3, [pc, #336]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d115      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e6a:	2301      	movs	r3, #1
 8001e6c:	e09a      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	685b      	ldr	r3, [r3, #4]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d107      	bne.n	8001e86 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001e76:	4b4e      	ldr	r3, [pc, #312]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e78:	681b      	ldr	r3, [r3, #0]
 8001e7a:	f003 0302 	and.w	r3, r3, #2
 8001e7e:	2b00      	cmp	r3, #0
 8001e80:	d109      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e82:	2301      	movs	r3, #1
 8001e84:	e08e      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e86:	4b4a      	ldr	r3, [pc, #296]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d101      	bne.n	8001e96 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001e92:	2301      	movs	r3, #1
 8001e94:	e086      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e96:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	f023 0203 	bic.w	r2, r3, #3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	4943      	ldr	r1, [pc, #268]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ea8:	f7ff f892 	bl	8000fd0 <HAL_GetTick>
 8001eac:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001eae:	e00a      	b.n	8001ec6 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001eb0:	f7ff f88e 	bl	8000fd0 <HAL_GetTick>
 8001eb4:	4602      	mov	r2, r0
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	1ad3      	subs	r3, r2, r3
 8001eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d901      	bls.n	8001ec6 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001ec2:	2303      	movs	r3, #3
 8001ec4:	e06e      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ec6:	4b3a      	ldr	r3, [pc, #232]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	689b      	ldr	r3, [r3, #8]
 8001eca:	f003 020c 	and.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685b      	ldr	r3, [r3, #4]
 8001ed2:	009b      	lsls	r3, r3, #2
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d1eb      	bne.n	8001eb0 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	f003 0302 	and.w	r3, r3, #2
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d010      	beq.n	8001f06 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	689a      	ldr	r2, [r3, #8]
 8001ee8:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001eea:	689b      	ldr	r3, [r3, #8]
 8001eec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	d208      	bcs.n	8001f06 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001ef4:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	689b      	ldr	r3, [r3, #8]
 8001f00:	492b      	ldr	r1, [pc, #172]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f02:	4313      	orrs	r3, r2
 8001f04:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f06:	4b29      	ldr	r3, [pc, #164]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f003 0307 	and.w	r3, r3, #7
 8001f0e:	683a      	ldr	r2, [r7, #0]
 8001f10:	429a      	cmp	r2, r3
 8001f12:	d210      	bcs.n	8001f36 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f14:	4b25      	ldr	r3, [pc, #148]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f023 0207 	bic.w	r2, r3, #7
 8001f1c:	4923      	ldr	r1, [pc, #140]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	4313      	orrs	r3, r2
 8001f22:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f24:	4b21      	ldr	r3, [pc, #132]	; (8001fac <HAL_RCC_ClockConfig+0x1ec>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f003 0307 	and.w	r3, r3, #7
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	429a      	cmp	r2, r3
 8001f30:	d001      	beq.n	8001f36 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f32:	2301      	movs	r3, #1
 8001f34:	e036      	b.n	8001fa4 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	681b      	ldr	r3, [r3, #0]
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d008      	beq.n	8001f54 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f42:	4b1b      	ldr	r3, [pc, #108]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f44:	689b      	ldr	r3, [r3, #8]
 8001f46:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	68db      	ldr	r3, [r3, #12]
 8001f4e:	4918      	ldr	r1, [pc, #96]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f50:	4313      	orrs	r3, r2
 8001f52:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	f003 0308 	and.w	r3, r3, #8
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d009      	beq.n	8001f74 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f60:	4b13      	ldr	r3, [pc, #76]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f62:	689b      	ldr	r3, [r3, #8]
 8001f64:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	691b      	ldr	r3, [r3, #16]
 8001f6c:	00db      	lsls	r3, r3, #3
 8001f6e:	4910      	ldr	r1, [pc, #64]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f70:	4313      	orrs	r3, r2
 8001f72:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001f74:	f000 f824 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8001f78:	4602      	mov	r2, r0
 8001f7a:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_RCC_ClockConfig+0x1f0>)
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	091b      	lsrs	r3, r3, #4
 8001f80:	f003 030f 	and.w	r3, r3, #15
 8001f84:	490b      	ldr	r1, [pc, #44]	; (8001fb4 <HAL_RCC_ClockConfig+0x1f4>)
 8001f86:	5ccb      	ldrb	r3, [r1, r3]
 8001f88:	f003 031f 	and.w	r3, r3, #31
 8001f8c:	fa22 f303 	lsr.w	r3, r2, r3
 8001f90:	4a09      	ldr	r2, [pc, #36]	; (8001fb8 <HAL_RCC_ClockConfig+0x1f8>)
 8001f92:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001f94:	4b09      	ldr	r3, [pc, #36]	; (8001fbc <HAL_RCC_ClockConfig+0x1fc>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe fdb7 	bl	8000b0c <HAL_InitTick>
 8001f9e:	4603      	mov	r3, r0
 8001fa0:	72fb      	strb	r3, [r7, #11]

  return status;
 8001fa2:	7afb      	ldrb	r3, [r7, #11]
}
 8001fa4:	4618      	mov	r0, r3
 8001fa6:	3710      	adds	r7, #16
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	080084a4 	.word	0x080084a4
 8001fb8:	20000000 	.word	0x20000000
 8001fbc:	20000004 	.word	0x20000004

08001fc0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001fc0:	b480      	push	{r7}
 8001fc2:	b089      	sub	sp, #36	; 0x24
 8001fc4:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001fc6:	2300      	movs	r3, #0
 8001fc8:	61fb      	str	r3, [r7, #28]
 8001fca:	2300      	movs	r3, #0
 8001fcc:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001fce:	4b3e      	ldr	r3, [pc, #248]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fd0:	689b      	ldr	r3, [r3, #8]
 8001fd2:	f003 030c 	and.w	r3, r3, #12
 8001fd6:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001fd8:	4b3b      	ldr	r3, [pc, #236]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	f003 0303 	and.w	r3, r3, #3
 8001fe0:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001fe2:	693b      	ldr	r3, [r7, #16]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d005      	beq.n	8001ff4 <HAL_RCC_GetSysClockFreq+0x34>
 8001fe8:	693b      	ldr	r3, [r7, #16]
 8001fea:	2b0c      	cmp	r3, #12
 8001fec:	d121      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001fee:	68fb      	ldr	r3, [r7, #12]
 8001ff0:	2b01      	cmp	r3, #1
 8001ff2:	d11e      	bne.n	8002032 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001ff4:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	f003 0308 	and.w	r3, r3, #8
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d107      	bne.n	8002010 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002000:	4b31      	ldr	r3, [pc, #196]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002002:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002006:	0a1b      	lsrs	r3, r3, #8
 8002008:	f003 030f 	and.w	r3, r3, #15
 800200c:	61fb      	str	r3, [r7, #28]
 800200e:	e005      	b.n	800201c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002010:	4b2d      	ldr	r3, [pc, #180]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	091b      	lsrs	r3, r3, #4
 8002016:	f003 030f 	and.w	r3, r3, #15
 800201a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 800201c:	4a2b      	ldr	r2, [pc, #172]	; (80020cc <HAL_RCC_GetSysClockFreq+0x10c>)
 800201e:	69fb      	ldr	r3, [r7, #28]
 8002020:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002024:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	2b00      	cmp	r3, #0
 800202a:	d10d      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 800202c:	69fb      	ldr	r3, [r7, #28]
 800202e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002030:	e00a      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	2b04      	cmp	r3, #4
 8002036:	d102      	bne.n	800203e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002038:	4b25      	ldr	r3, [pc, #148]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x110>)
 800203a:	61bb      	str	r3, [r7, #24]
 800203c:	e004      	b.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800203e:	693b      	ldr	r3, [r7, #16]
 8002040:	2b08      	cmp	r3, #8
 8002042:	d101      	bne.n	8002048 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002044:	4b23      	ldr	r3, [pc, #140]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x114>)
 8002046:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	2b0c      	cmp	r3, #12
 800204c:	d134      	bne.n	80020b8 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800204e:	4b1e      	ldr	r3, [pc, #120]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002050:	68db      	ldr	r3, [r3, #12]
 8002052:	f003 0303 	and.w	r3, r3, #3
 8002056:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	2b02      	cmp	r3, #2
 800205c:	d003      	beq.n	8002066 <HAL_RCC_GetSysClockFreq+0xa6>
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	2b03      	cmp	r3, #3
 8002062:	d003      	beq.n	800206c <HAL_RCC_GetSysClockFreq+0xac>
 8002064:	e005      	b.n	8002072 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002066:	4b1a      	ldr	r3, [pc, #104]	; (80020d0 <HAL_RCC_GetSysClockFreq+0x110>)
 8002068:	617b      	str	r3, [r7, #20]
      break;
 800206a:	e005      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800206c:	4b19      	ldr	r3, [pc, #100]	; (80020d4 <HAL_RCC_GetSysClockFreq+0x114>)
 800206e:	617b      	str	r3, [r7, #20]
      break;
 8002070:	e002      	b.n	8002078 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	617b      	str	r3, [r7, #20]
      break;
 8002076:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002078:	4b13      	ldr	r3, [pc, #76]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	3301      	adds	r3, #1
 8002084:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 8002088:	68db      	ldr	r3, [r3, #12]
 800208a:	0a1b      	lsrs	r3, r3, #8
 800208c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002090:	697a      	ldr	r2, [r7, #20]
 8002092:	fb03 f202 	mul.w	r2, r3, r2
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	fbb2 f3f3 	udiv	r3, r2, r3
 800209c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800209e:	4b0a      	ldr	r3, [pc, #40]	; (80020c8 <HAL_RCC_GetSysClockFreq+0x108>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	0e5b      	lsrs	r3, r3, #25
 80020a4:	f003 0303 	and.w	r3, r3, #3
 80020a8:	3301      	adds	r3, #1
 80020aa:	005b      	lsls	r3, r3, #1
 80020ac:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80020ae:	697a      	ldr	r2, [r7, #20]
 80020b0:	683b      	ldr	r3, [r7, #0]
 80020b2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020b6:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80020b8:	69bb      	ldr	r3, [r7, #24]
}
 80020ba:	4618      	mov	r0, r3
 80020bc:	3724      	adds	r7, #36	; 0x24
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40021000 	.word	0x40021000
 80020cc:	080084bc 	.word	0x080084bc
 80020d0:	00f42400 	.word	0x00f42400
 80020d4:	007a1200 	.word	0x007a1200

080020d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80020d8:	b480      	push	{r7}
 80020da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80020dc:	4b03      	ldr	r3, [pc, #12]	; (80020ec <HAL_RCC_GetHCLKFreq+0x14>)
 80020de:	681b      	ldr	r3, [r3, #0]
}
 80020e0:	4618      	mov	r0, r3
 80020e2:	46bd      	mov	sp, r7
 80020e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020e8:	4770      	bx	lr
 80020ea:	bf00      	nop
 80020ec:	20000000 	.word	0x20000000

080020f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80020f4:	f7ff fff0 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 80020f8:	4602      	mov	r2, r0
 80020fa:	4b06      	ldr	r3, [pc, #24]	; (8002114 <HAL_RCC_GetPCLK1Freq+0x24>)
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	0a1b      	lsrs	r3, r3, #8
 8002100:	f003 0307 	and.w	r3, r3, #7
 8002104:	4904      	ldr	r1, [pc, #16]	; (8002118 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002106:	5ccb      	ldrb	r3, [r1, r3]
 8002108:	f003 031f 	and.w	r3, r3, #31
 800210c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002110:	4618      	mov	r0, r3
 8002112:	bd80      	pop	{r7, pc}
 8002114:	40021000 	.word	0x40021000
 8002118:	080084b4 	.word	0x080084b4

0800211c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002120:	f7ff ffda 	bl	80020d8 <HAL_RCC_GetHCLKFreq>
 8002124:	4602      	mov	r2, r0
 8002126:	4b06      	ldr	r3, [pc, #24]	; (8002140 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	0adb      	lsrs	r3, r3, #11
 800212c:	f003 0307 	and.w	r3, r3, #7
 8002130:	4904      	ldr	r1, [pc, #16]	; (8002144 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002132:	5ccb      	ldrb	r3, [r1, r3]
 8002134:	f003 031f 	and.w	r3, r3, #31
 8002138:	fa22 f303 	lsr.w	r3, r2, r3
}
 800213c:	4618      	mov	r0, r3
 800213e:	bd80      	pop	{r7, pc}
 8002140:	40021000 	.word	0x40021000
 8002144:	080084b4 	.word	0x080084b4

08002148 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002148:	b480      	push	{r7}
 800214a:	b083      	sub	sp, #12
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	220f      	movs	r2, #15
 8002156:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8002158:	4b12      	ldr	r3, [pc, #72]	; (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0203 	and.w	r2, r3, #3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002164:	4b0f      	ldr	r3, [pc, #60]	; (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002166:	689b      	ldr	r3, [r3, #8]
 8002168:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002170:	4b0c      	ldr	r3, [pc, #48]	; (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800217c:	4b09      	ldr	r3, [pc, #36]	; (80021a4 <HAL_RCC_GetClockConfig+0x5c>)
 800217e:	689b      	ldr	r3, [r3, #8]
 8002180:	08db      	lsrs	r3, r3, #3
 8002182:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800218a:	4b07      	ldr	r3, [pc, #28]	; (80021a8 <HAL_RCC_GetClockConfig+0x60>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f003 0207 	and.w	r2, r3, #7
 8002192:	683b      	ldr	r3, [r7, #0]
 8002194:	601a      	str	r2, [r3, #0]
}
 8002196:	bf00      	nop
 8002198:	370c      	adds	r7, #12
 800219a:	46bd      	mov	sp, r7
 800219c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021a0:	4770      	bx	lr
 80021a2:	bf00      	nop
 80021a4:	40021000 	.word	0x40021000
 80021a8:	40022000 	.word	0x40022000

080021ac <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021ac:	b580      	push	{r7, lr}
 80021ae:	b086      	sub	sp, #24
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021b4:	2300      	movs	r3, #0
 80021b6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021b8:	4b2a      	ldr	r3, [pc, #168]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d003      	beq.n	80021cc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021c4:	f7ff f984 	bl	80014d0 <HAL_PWREx_GetVoltageRange>
 80021c8:	6178      	str	r0, [r7, #20]
 80021ca:	e014      	b.n	80021f6 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021cc:	4b25      	ldr	r3, [pc, #148]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021d0:	4a24      	ldr	r2, [pc, #144]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021d6:	6593      	str	r3, [r2, #88]	; 0x58
 80021d8:	4b22      	ldr	r3, [pc, #136]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e0:	60fb      	str	r3, [r7, #12]
 80021e2:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80021e4:	f7ff f974 	bl	80014d0 <HAL_PWREx_GetVoltageRange>
 80021e8:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80021ea:	4b1e      	ldr	r3, [pc, #120]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ee:	4a1d      	ldr	r2, [pc, #116]	; (8002264 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80021fc:	d10b      	bne.n	8002216 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	2b80      	cmp	r3, #128	; 0x80
 8002202:	d919      	bls.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	2ba0      	cmp	r3, #160	; 0xa0
 8002208:	d902      	bls.n	8002210 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800220a:	2302      	movs	r3, #2
 800220c:	613b      	str	r3, [r7, #16]
 800220e:	e013      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002210:	2301      	movs	r3, #1
 8002212:	613b      	str	r3, [r7, #16]
 8002214:	e010      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	2b80      	cmp	r3, #128	; 0x80
 800221a:	d902      	bls.n	8002222 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800221c:	2303      	movs	r3, #3
 800221e:	613b      	str	r3, [r7, #16]
 8002220:	e00a      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2b80      	cmp	r3, #128	; 0x80
 8002226:	d102      	bne.n	800222e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002228:	2302      	movs	r3, #2
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	e004      	b.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2b70      	cmp	r3, #112	; 0x70
 8002232:	d101      	bne.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002234:	2301      	movs	r3, #1
 8002236:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002238:	4b0b      	ldr	r3, [pc, #44]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f023 0207 	bic.w	r2, r3, #7
 8002240:	4909      	ldr	r1, [pc, #36]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	4313      	orrs	r3, r2
 8002246:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002248:	4b07      	ldr	r3, [pc, #28]	; (8002268 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0307 	and.w	r3, r3, #7
 8002250:	693a      	ldr	r2, [r7, #16]
 8002252:	429a      	cmp	r2, r3
 8002254:	d001      	beq.n	800225a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002256:	2301      	movs	r3, #1
 8002258:	e000      	b.n	800225c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	3718      	adds	r7, #24
 8002260:	46bd      	mov	sp, r7
 8002262:	bd80      	pop	{r7, pc}
 8002264:	40021000 	.word	0x40021000
 8002268:	40022000 	.word	0x40022000

0800226c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	b086      	sub	sp, #24
 8002270:	af00      	add	r7, sp, #0
 8002272:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002274:	2300      	movs	r3, #0
 8002276:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002278:	2300      	movs	r3, #0
 800227a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002284:	2b00      	cmp	r3, #0
 8002286:	d031      	beq.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800228c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002290:	d01a      	beq.n	80022c8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002292:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002296:	d814      	bhi.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002298:	2b00      	cmp	r3, #0
 800229a:	d009      	beq.n	80022b0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800229c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022a0:	d10f      	bne.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80022a2:	4b5d      	ldr	r3, [pc, #372]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a4:	68db      	ldr	r3, [r3, #12]
 80022a6:	4a5c      	ldr	r2, [pc, #368]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022ac:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022ae:	e00c      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	3304      	adds	r3, #4
 80022b4:	2100      	movs	r1, #0
 80022b6:	4618      	mov	r0, r3
 80022b8:	f000 f9de 	bl	8002678 <RCCEx_PLLSAI1_Config>
 80022bc:	4603      	mov	r3, r0
 80022be:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022c0:	e003      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	74fb      	strb	r3, [r7, #19]
      break;
 80022c6:	e000      	b.n	80022ca <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80022c8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80022ca:	7cfb      	ldrb	r3, [r7, #19]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d10b      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80022d0:	4b51      	ldr	r3, [pc, #324]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022d6:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	494e      	ldr	r1, [pc, #312]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80022e0:	4313      	orrs	r3, r2
 80022e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80022e6:	e001      	b.n	80022ec <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80022e8:	7cfb      	ldrb	r3, [r7, #19]
 80022ea:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 809e 	beq.w	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022fa:	2300      	movs	r3, #0
 80022fc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80022fe:	4b46      	ldr	r3, [pc, #280]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002300:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002302:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800230a:	2301      	movs	r3, #1
 800230c:	e000      	b.n	8002310 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 800230e:	2300      	movs	r3, #0
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00d      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002314:	4b40      	ldr	r3, [pc, #256]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002316:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002318:	4a3f      	ldr	r2, [pc, #252]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800231a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800231e:	6593      	str	r3, [r2, #88]	; 0x58
 8002320:	4b3d      	ldr	r3, [pc, #244]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002324:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002328:	60bb      	str	r3, [r7, #8]
 800232a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800232c:	2301      	movs	r3, #1
 800232e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002330:	4b3a      	ldr	r3, [pc, #232]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	4a39      	ldr	r2, [pc, #228]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002336:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800233a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800233c:	f7fe fe48 	bl	8000fd0 <HAL_GetTick>
 8002340:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002342:	e009      	b.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002344:	f7fe fe44 	bl	8000fd0 <HAL_GetTick>
 8002348:	4602      	mov	r2, r0
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	1ad3      	subs	r3, r2, r3
 800234e:	2b02      	cmp	r3, #2
 8002350:	d902      	bls.n	8002358 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002352:	2303      	movs	r3, #3
 8002354:	74fb      	strb	r3, [r7, #19]
        break;
 8002356:	e005      	b.n	8002364 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002358:	4b30      	ldr	r3, [pc, #192]	; (800241c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002360:	2b00      	cmp	r3, #0
 8002362:	d0ef      	beq.n	8002344 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002364:	7cfb      	ldrb	r3, [r7, #19]
 8002366:	2b00      	cmp	r3, #0
 8002368:	d15a      	bne.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800236a:	4b2b      	ldr	r3, [pc, #172]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800236c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002370:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002374:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	2b00      	cmp	r3, #0
 800237a:	d01e      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002380:	697a      	ldr	r2, [r7, #20]
 8002382:	429a      	cmp	r2, r3
 8002384:	d019      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002386:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002388:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002390:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002392:	4b21      	ldr	r3, [pc, #132]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002394:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002398:	4a1f      	ldr	r2, [pc, #124]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800239a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800239e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80023a2:	4b1d      	ldr	r3, [pc, #116]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023a8:	4a1b      	ldr	r2, [pc, #108]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80023ae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80023b2:	4a19      	ldr	r2, [pc, #100]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	f003 0301 	and.w	r3, r3, #1
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d016      	beq.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c4:	f7fe fe04 	bl	8000fd0 <HAL_GetTick>
 80023c8:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023ca:	e00b      	b.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023cc:	f7fe fe00 	bl	8000fd0 <HAL_GetTick>
 80023d0:	4602      	mov	r2, r0
 80023d2:	68fb      	ldr	r3, [r7, #12]
 80023d4:	1ad3      	subs	r3, r2, r3
 80023d6:	f241 3288 	movw	r2, #5000	; 0x1388
 80023da:	4293      	cmp	r3, r2
 80023dc:	d902      	bls.n	80023e4 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80023de:	2303      	movs	r3, #3
 80023e0:	74fb      	strb	r3, [r7, #19]
            break;
 80023e2:	e006      	b.n	80023f2 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80023e4:	4b0c      	ldr	r3, [pc, #48]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ea:	f003 0302 	and.w	r3, r3, #2
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0ec      	beq.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80023f2:	7cfb      	ldrb	r3, [r7, #19]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d10b      	bne.n	8002410 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80023f8:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023fe:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002406:	4904      	ldr	r1, [pc, #16]	; (8002418 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002408:	4313      	orrs	r3, r2
 800240a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800240e:	e009      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002410:	7cfb      	ldrb	r3, [r7, #19]
 8002412:	74bb      	strb	r3, [r7, #18]
 8002414:	e006      	b.n	8002424 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8002416:	bf00      	nop
 8002418:	40021000 	.word	0x40021000
 800241c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002420:	7cfb      	ldrb	r3, [r7, #19]
 8002422:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002424:	7c7b      	ldrb	r3, [r7, #17]
 8002426:	2b01      	cmp	r3, #1
 8002428:	d105      	bne.n	8002436 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800242a:	4b8a      	ldr	r3, [pc, #552]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800242c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800242e:	4a89      	ldr	r2, [pc, #548]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002430:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002434:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	f003 0301 	and.w	r3, r3, #1
 800243e:	2b00      	cmp	r3, #0
 8002440:	d00a      	beq.n	8002458 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002442:	4b84      	ldr	r3, [pc, #528]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f023 0203 	bic.w	r2, r3, #3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6a1b      	ldr	r3, [r3, #32]
 8002450:	4980      	ldr	r1, [pc, #512]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002452:	4313      	orrs	r3, r2
 8002454:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	f003 0302 	and.w	r3, r3, #2
 8002460:	2b00      	cmp	r3, #0
 8002462:	d00a      	beq.n	800247a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002464:	4b7b      	ldr	r3, [pc, #492]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002466:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800246a:	f023 020c 	bic.w	r2, r3, #12
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002472:	4978      	ldr	r1, [pc, #480]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002474:	4313      	orrs	r3, r2
 8002476:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0320 	and.w	r3, r3, #32
 8002482:	2b00      	cmp	r3, #0
 8002484:	d00a      	beq.n	800249c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002486:	4b73      	ldr	r3, [pc, #460]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002488:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800248c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002494:	496f      	ldr	r1, [pc, #444]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002496:	4313      	orrs	r3, r2
 8002498:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d00a      	beq.n	80024be <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80024a8:	4b6a      	ldr	r3, [pc, #424]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024ae:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024b6:	4967      	ldr	r1, [pc, #412]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024b8:	4313      	orrs	r3, r2
 80024ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d00a      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80024ca:	4b62      	ldr	r3, [pc, #392]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d8:	495e      	ldr	r1, [pc, #376]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024da:	4313      	orrs	r3, r2
 80024dc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d00a      	beq.n	8002502 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ec:	4b59      	ldr	r3, [pc, #356]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024fa:	4956      	ldr	r1, [pc, #344]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024fc:	4313      	orrs	r3, r2
 80024fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00a      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800250e:	4b51      	ldr	r3, [pc, #324]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002510:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002514:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	494d      	ldr	r1, [pc, #308]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800252c:	2b00      	cmp	r3, #0
 800252e:	d028      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002530:	4b48      	ldr	r3, [pc, #288]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002532:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002536:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800253e:	4945      	ldr	r1, [pc, #276]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002540:	4313      	orrs	r3, r2
 8002542:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800254a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800254e:	d106      	bne.n	800255e <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002550:	4b40      	ldr	r3, [pc, #256]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002552:	68db      	ldr	r3, [r3, #12]
 8002554:	4a3f      	ldr	r2, [pc, #252]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002556:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800255a:	60d3      	str	r3, [r2, #12]
 800255c:	e011      	b.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002562:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002566:	d10c      	bne.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	3304      	adds	r3, #4
 800256c:	2101      	movs	r1, #1
 800256e:	4618      	mov	r0, r3
 8002570:	f000 f882 	bl	8002678 <RCCEx_PLLSAI1_Config>
 8002574:	4603      	mov	r3, r0
 8002576:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002578:	7cfb      	ldrb	r3, [r7, #19]
 800257a:	2b00      	cmp	r3, #0
 800257c:	d001      	beq.n	8002582 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800257e:	7cfb      	ldrb	r3, [r7, #19]
 8002580:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800258a:	2b00      	cmp	r3, #0
 800258c:	d028      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800258e:	4b31      	ldr	r3, [pc, #196]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002590:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002594:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800259c:	492d      	ldr	r1, [pc, #180]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259e:	4313      	orrs	r3, r2
 80025a0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025ac:	d106      	bne.n	80025bc <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025ae:	4b29      	ldr	r3, [pc, #164]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b0:	68db      	ldr	r3, [r3, #12]
 80025b2:	4a28      	ldr	r2, [pc, #160]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025b4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025b8:	60d3      	str	r3, [r2, #12]
 80025ba:	e011      	b.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025c0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025c4:	d10c      	bne.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	3304      	adds	r3, #4
 80025ca:	2101      	movs	r1, #1
 80025cc:	4618      	mov	r0, r3
 80025ce:	f000 f853 	bl	8002678 <RCCEx_PLLSAI1_Config>
 80025d2:	4603      	mov	r3, r0
 80025d4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80025d6:	7cfb      	ldrb	r3, [r7, #19]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d001      	beq.n	80025e0 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80025dc:	7cfb      	ldrb	r3, [r7, #19]
 80025de:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d01c      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025f2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025fa:	4916      	ldr	r1, [pc, #88]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025fc:	4313      	orrs	r3, r2
 80025fe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002606:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800260a:	d10c      	bne.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	3304      	adds	r3, #4
 8002610:	2102      	movs	r1, #2
 8002612:	4618      	mov	r0, r3
 8002614:	f000 f830 	bl	8002678 <RCCEx_PLLSAI1_Config>
 8002618:	4603      	mov	r3, r0
 800261a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800261c:	7cfb      	ldrb	r3, [r7, #19]
 800261e:	2b00      	cmp	r3, #0
 8002620:	d001      	beq.n	8002626 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002622:	7cfb      	ldrb	r3, [r7, #19]
 8002624:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d00a      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002632:	4b08      	ldr	r3, [pc, #32]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002634:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002638:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002640:	4904      	ldr	r1, [pc, #16]	; (8002654 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002642:	4313      	orrs	r3, r2
 8002644:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002648:	7cbb      	ldrb	r3, [r7, #18]
}
 800264a:	4618      	mov	r0, r3
 800264c:	3718      	adds	r7, #24
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
 8002652:	bf00      	nop
 8002654:	40021000 	.word	0x40021000

08002658 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002658:	b480      	push	{r7}
 800265a:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 800265c:	4b05      	ldr	r3, [pc, #20]	; (8002674 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	4a04      	ldr	r2, [pc, #16]	; (8002674 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002662:	f043 0304 	orr.w	r3, r3, #4
 8002666:	6013      	str	r3, [r2, #0]
}
 8002668:	bf00      	nop
 800266a:	46bd      	mov	sp, r7
 800266c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002670:	4770      	bx	lr
 8002672:	bf00      	nop
 8002674:	40021000 	.word	0x40021000

08002678 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
 8002680:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002686:	4b74      	ldr	r3, [pc, #464]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	f003 0303 	and.w	r3, r3, #3
 800268e:	2b00      	cmp	r3, #0
 8002690:	d018      	beq.n	80026c4 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002692:	4b71      	ldr	r3, [pc, #452]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	f003 0203 	and.w	r2, r3, #3
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	429a      	cmp	r2, r3
 80026a0:	d10d      	bne.n	80026be <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
       ||
 80026a6:	2b00      	cmp	r3, #0
 80026a8:	d009      	beq.n	80026be <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026aa:	4b6b      	ldr	r3, [pc, #428]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ac:	68db      	ldr	r3, [r3, #12]
 80026ae:	091b      	lsrs	r3, r3, #4
 80026b0:	f003 0307 	and.w	r3, r3, #7
 80026b4:	1c5a      	adds	r2, r3, #1
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	685b      	ldr	r3, [r3, #4]
       ||
 80026ba:	429a      	cmp	r2, r3
 80026bc:	d047      	beq.n	800274e <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80026be:	2301      	movs	r3, #1
 80026c0:	73fb      	strb	r3, [r7, #15]
 80026c2:	e044      	b.n	800274e <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	2b03      	cmp	r3, #3
 80026ca:	d018      	beq.n	80026fe <RCCEx_PLLSAI1_Config+0x86>
 80026cc:	2b03      	cmp	r3, #3
 80026ce:	d825      	bhi.n	800271c <RCCEx_PLLSAI1_Config+0xa4>
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d002      	beq.n	80026da <RCCEx_PLLSAI1_Config+0x62>
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d009      	beq.n	80026ec <RCCEx_PLLSAI1_Config+0x74>
 80026d8:	e020      	b.n	800271c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80026da:	4b5f      	ldr	r3, [pc, #380]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	f003 0302 	and.w	r3, r3, #2
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d11d      	bne.n	8002722 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026ea:	e01a      	b.n	8002722 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80026ec:	4b5a      	ldr	r3, [pc, #360]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d116      	bne.n	8002726 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80026f8:	2301      	movs	r3, #1
 80026fa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80026fc:	e013      	b.n	8002726 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80026fe:	4b56      	ldr	r3, [pc, #344]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800270a:	4b53      	ldr	r3, [pc, #332]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002712:	2b00      	cmp	r3, #0
 8002714:	d109      	bne.n	800272a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002716:	2301      	movs	r3, #1
 8002718:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800271a:	e006      	b.n	800272a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800271c:	2301      	movs	r3, #1
 800271e:	73fb      	strb	r3, [r7, #15]
      break;
 8002720:	e004      	b.n	800272c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002722:	bf00      	nop
 8002724:	e002      	b.n	800272c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002726:	bf00      	nop
 8002728:	e000      	b.n	800272c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800272a:	bf00      	nop
    }

    if(status == HAL_OK)
 800272c:	7bfb      	ldrb	r3, [r7, #15]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10d      	bne.n	800274e <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002732:	4b49      	ldr	r3, [pc, #292]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002734:	68db      	ldr	r3, [r3, #12]
 8002736:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	6819      	ldr	r1, [r3, #0]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685b      	ldr	r3, [r3, #4]
 8002742:	3b01      	subs	r3, #1
 8002744:	011b      	lsls	r3, r3, #4
 8002746:	430b      	orrs	r3, r1
 8002748:	4943      	ldr	r1, [pc, #268]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800274a:	4313      	orrs	r3, r2
 800274c:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800274e:	7bfb      	ldrb	r3, [r7, #15]
 8002750:	2b00      	cmp	r3, #0
 8002752:	d17c      	bne.n	800284e <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002754:	4b40      	ldr	r3, [pc, #256]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a3f      	ldr	r2, [pc, #252]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800275a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800275e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fc36 	bl	8000fd0 <HAL_GetTick>
 8002764:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002766:	e009      	b.n	800277c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002768:	f7fe fc32 	bl	8000fd0 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	68bb      	ldr	r3, [r7, #8]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b02      	cmp	r3, #2
 8002774:	d902      	bls.n	800277c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	73fb      	strb	r3, [r7, #15]
        break;
 800277a:	e005      	b.n	8002788 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800277c:	4b36      	ldr	r3, [pc, #216]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002784:	2b00      	cmp	r3, #0
 8002786:	d1ef      	bne.n	8002768 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002788:	7bfb      	ldrb	r3, [r7, #15]
 800278a:	2b00      	cmp	r3, #0
 800278c:	d15f      	bne.n	800284e <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b00      	cmp	r3, #0
 8002792:	d110      	bne.n	80027b6 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002794:	4b30      	ldr	r3, [pc, #192]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 800279c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027a0:	687a      	ldr	r2, [r7, #4]
 80027a2:	6892      	ldr	r2, [r2, #8]
 80027a4:	0211      	lsls	r1, r2, #8
 80027a6:	687a      	ldr	r2, [r7, #4]
 80027a8:	68d2      	ldr	r2, [r2, #12]
 80027aa:	06d2      	lsls	r2, r2, #27
 80027ac:	430a      	orrs	r2, r1
 80027ae:	492a      	ldr	r1, [pc, #168]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027b0:	4313      	orrs	r3, r2
 80027b2:	610b      	str	r3, [r1, #16]
 80027b4:	e027      	b.n	8002806 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b01      	cmp	r3, #1
 80027ba:	d112      	bne.n	80027e2 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027bc:	4b26      	ldr	r3, [pc, #152]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027be:	691b      	ldr	r3, [r3, #16]
 80027c0:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80027c4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027c8:	687a      	ldr	r2, [r7, #4]
 80027ca:	6892      	ldr	r2, [r2, #8]
 80027cc:	0211      	lsls	r1, r2, #8
 80027ce:	687a      	ldr	r2, [r7, #4]
 80027d0:	6912      	ldr	r2, [r2, #16]
 80027d2:	0852      	lsrs	r2, r2, #1
 80027d4:	3a01      	subs	r2, #1
 80027d6:	0552      	lsls	r2, r2, #21
 80027d8:	430a      	orrs	r2, r1
 80027da:	491f      	ldr	r1, [pc, #124]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027dc:	4313      	orrs	r3, r2
 80027de:	610b      	str	r3, [r1, #16]
 80027e0:	e011      	b.n	8002806 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027e2:	4b1d      	ldr	r3, [pc, #116]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027e4:	691b      	ldr	r3, [r3, #16]
 80027e6:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80027ea:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	6892      	ldr	r2, [r2, #8]
 80027f2:	0211      	lsls	r1, r2, #8
 80027f4:	687a      	ldr	r2, [r7, #4]
 80027f6:	6952      	ldr	r2, [r2, #20]
 80027f8:	0852      	lsrs	r2, r2, #1
 80027fa:	3a01      	subs	r2, #1
 80027fc:	0652      	lsls	r2, r2, #25
 80027fe:	430a      	orrs	r2, r1
 8002800:	4915      	ldr	r1, [pc, #84]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002802:	4313      	orrs	r3, r2
 8002804:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002806:	4b14      	ldr	r3, [pc, #80]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a13      	ldr	r2, [pc, #76]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800280c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002810:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002812:	f7fe fbdd 	bl	8000fd0 <HAL_GetTick>
 8002816:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002818:	e009      	b.n	800282e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800281a:	f7fe fbd9 	bl	8000fd0 <HAL_GetTick>
 800281e:	4602      	mov	r2, r0
 8002820:	68bb      	ldr	r3, [r7, #8]
 8002822:	1ad3      	subs	r3, r2, r3
 8002824:	2b02      	cmp	r3, #2
 8002826:	d902      	bls.n	800282e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002828:	2303      	movs	r3, #3
 800282a:	73fb      	strb	r3, [r7, #15]
          break;
 800282c:	e005      	b.n	800283a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d0ef      	beq.n	800281a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800283a:	7bfb      	ldrb	r3, [r7, #15]
 800283c:	2b00      	cmp	r3, #0
 800283e:	d106      	bne.n	800284e <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002840:	4b05      	ldr	r3, [pc, #20]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002842:	691a      	ldr	r2, [r3, #16]
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4903      	ldr	r1, [pc, #12]	; (8002858 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800284e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002850:	4618      	mov	r0, r3
 8002852:	3710      	adds	r7, #16
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40021000 	.word	0x40021000

0800285c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	b082      	sub	sp, #8
 8002860:	af00      	add	r7, sp, #0
 8002862:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2b00      	cmp	r3, #0
 8002868:	d101      	bne.n	800286e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e049      	b.n	8002902 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002874:	b2db      	uxtb	r3, r3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d106      	bne.n	8002888 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	2200      	movs	r2, #0
 800287e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002882:	6878      	ldr	r0, [r7, #4]
 8002884:	f000 f841 	bl	800290a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	2202      	movs	r2, #2
 800288c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	3304      	adds	r3, #4
 8002898:	4619      	mov	r1, r3
 800289a:	4610      	mov	r0, r2
 800289c:	f000 f9dc 	bl	8002c58 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2201      	movs	r2, #1
 80028a4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	2201      	movs	r2, #1
 80028ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2201      	movs	r2, #1
 80028b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2201      	movs	r2, #1
 80028c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2201      	movs	r2, #1
 80028cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2201      	movs	r2, #1
 80028d4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2201      	movs	r2, #1
 80028e4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002900:	2300      	movs	r3, #0
}
 8002902:	4618      	mov	r0, r3
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr
	...

08002920 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800292e:	b2db      	uxtb	r3, r3
 8002930:	2b01      	cmp	r3, #1
 8002932:	d001      	beq.n	8002938 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002934:	2301      	movs	r3, #1
 8002936:	e03b      	b.n	80029b0 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2202      	movs	r2, #2
 800293c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	68da      	ldr	r2, [r3, #12]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	4a19      	ldr	r2, [pc, #100]	; (80029bc <HAL_TIM_Base_Start_IT+0x9c>)
 8002956:	4293      	cmp	r3, r2
 8002958:	d009      	beq.n	800296e <HAL_TIM_Base_Start_IT+0x4e>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002962:	d004      	beq.n	800296e <HAL_TIM_Base_Start_IT+0x4e>
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a15      	ldr	r2, [pc, #84]	; (80029c0 <HAL_TIM_Base_Start_IT+0xa0>)
 800296a:	4293      	cmp	r3, r2
 800296c:	d115      	bne.n	800299a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	4b13      	ldr	r3, [pc, #76]	; (80029c4 <HAL_TIM_Base_Start_IT+0xa4>)
 8002976:	4013      	ands	r3, r2
 8002978:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	2b06      	cmp	r3, #6
 800297e:	d015      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x8c>
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002986:	d011      	beq.n	80029ac <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	681a      	ldr	r2, [r3, #0]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002998:	e008      	b.n	80029ac <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	681a      	ldr	r2, [r3, #0]
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f042 0201 	orr.w	r2, r2, #1
 80029a8:	601a      	str	r2, [r3, #0]
 80029aa:	e000      	b.n	80029ae <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029ae:	2300      	movs	r3, #0
}
 80029b0:	4618      	mov	r0, r3
 80029b2:	3714      	adds	r7, #20
 80029b4:	46bd      	mov	sp, r7
 80029b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ba:	4770      	bx	lr
 80029bc:	40012c00 	.word	0x40012c00
 80029c0:	40014000 	.word	0x40014000
 80029c4:	00010007 	.word	0x00010007

080029c8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80029c8:	b580      	push	{r7, lr}
 80029ca:	b082      	sub	sp, #8
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	691b      	ldr	r3, [r3, #16]
 80029d6:	f003 0302 	and.w	r3, r3, #2
 80029da:	2b02      	cmp	r3, #2
 80029dc:	d122      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	68db      	ldr	r3, [r3, #12]
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	2b02      	cmp	r3, #2
 80029ea:	d11b      	bne.n	8002a24 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f06f 0202 	mvn.w	r2, #2
 80029f4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	2201      	movs	r2, #1
 80029fa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0303 	and.w	r3, r3, #3
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d003      	beq.n	8002a12 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f000 f905 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002a10:	e005      	b.n	8002a1e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	f000 f8f7 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a18:	6878      	ldr	r0, [r7, #4]
 8002a1a:	f000 f908 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	f003 0304 	and.w	r3, r3, #4
 8002a2e:	2b04      	cmp	r3, #4
 8002a30:	d122      	bne.n	8002a78 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	681b      	ldr	r3, [r3, #0]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b04      	cmp	r3, #4
 8002a3e:	d11b      	bne.n	8002a78 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f06f 0204 	mvn.w	r2, #4
 8002a48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2202      	movs	r2, #2
 8002a4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d003      	beq.n	8002a66 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 f8db 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002a64:	e005      	b.n	8002a72 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a66:	6878      	ldr	r0, [r7, #4]
 8002a68:	f000 f8cd 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a6c:	6878      	ldr	r0, [r7, #4]
 8002a6e:	f000 f8de 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	691b      	ldr	r3, [r3, #16]
 8002a7e:	f003 0308 	and.w	r3, r3, #8
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d122      	bne.n	8002acc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	f003 0308 	and.w	r3, r3, #8
 8002a90:	2b08      	cmp	r3, #8
 8002a92:	d11b      	bne.n	8002acc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f06f 0208 	mvn.w	r2, #8
 8002a9c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	2204      	movs	r2, #4
 8002aa2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d003      	beq.n	8002aba <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8b1 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002ab8:	e005      	b.n	8002ac6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8a3 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f000 f8b4 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	2200      	movs	r2, #0
 8002aca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	691b      	ldr	r3, [r3, #16]
 8002ad2:	f003 0310 	and.w	r3, r3, #16
 8002ad6:	2b10      	cmp	r3, #16
 8002ad8:	d122      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	68db      	ldr	r3, [r3, #12]
 8002ae0:	f003 0310 	and.w	r3, r3, #16
 8002ae4:	2b10      	cmp	r3, #16
 8002ae6:	d11b      	bne.n	8002b20 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	f06f 0210 	mvn.w	r2, #16
 8002af0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	2208      	movs	r2, #8
 8002af6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	69db      	ldr	r3, [r3, #28]
 8002afe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d003      	beq.n	8002b0e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f000 f887 	bl	8002c1a <HAL_TIM_IC_CaptureCallback>
 8002b0c:	e005      	b.n	8002b1a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b0e:	6878      	ldr	r0, [r7, #4]
 8002b10:	f000 f879 	bl	8002c06 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b14:	6878      	ldr	r0, [r7, #4]
 8002b16:	f000 f88a 	bl	8002c2e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	691b      	ldr	r3, [r3, #16]
 8002b26:	f003 0301 	and.w	r3, r3, #1
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d10e      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d107      	bne.n	8002b4c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f06f 0201 	mvn.w	r2, #1
 8002b44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b46:	6878      	ldr	r0, [r7, #4]
 8002b48:	f7fd fe42 	bl	80007d0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b80      	cmp	r3, #128	; 0x80
 8002b58:	d10e      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b64:	2b80      	cmp	r3, #128	; 0x80
 8002b66:	d107      	bne.n	8002b78 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002b70:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f8de 	bl	8002d34 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	691b      	ldr	r3, [r3, #16]
 8002b7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b82:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b86:	d10e      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	68db      	ldr	r3, [r3, #12]
 8002b8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b92:	2b80      	cmp	r3, #128	; 0x80
 8002b94:	d107      	bne.n	8002ba6 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002b9e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ba0:	6878      	ldr	r0, [r7, #4]
 8002ba2:	f000 f8d1 	bl	8002d48 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	691b      	ldr	r3, [r3, #16]
 8002bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bb0:	2b40      	cmp	r3, #64	; 0x40
 8002bb2:	d10e      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bbe:	2b40      	cmp	r3, #64	; 0x40
 8002bc0:	d107      	bne.n	8002bd2 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002bca:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002bcc:	6878      	ldr	r0, [r7, #4]
 8002bce:	f000 f838 	bl	8002c42 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	f003 0320 	and.w	r3, r3, #32
 8002bdc:	2b20      	cmp	r3, #32
 8002bde:	d10e      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f003 0320 	and.w	r3, r3, #32
 8002bea:	2b20      	cmp	r3, #32
 8002bec:	d107      	bne.n	8002bfe <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f06f 0220 	mvn.w	r2, #32
 8002bf6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f891 	bl	8002d20 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002bfe:	bf00      	nop
 8002c00:	3708      	adds	r7, #8
 8002c02:	46bd      	mov	sp, r7
 8002c04:	bd80      	pop	{r7, pc}

08002c06 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c06:	b480      	push	{r7}
 8002c08:	b083      	sub	sp, #12
 8002c0a:	af00      	add	r7, sp, #0
 8002c0c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c0e:	bf00      	nop
 8002c10:	370c      	adds	r7, #12
 8002c12:	46bd      	mov	sp, r7
 8002c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2c:	4770      	bx	lr

08002c2e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c2e:	b480      	push	{r7}
 8002c30:	b083      	sub	sp, #12
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c36:	bf00      	nop
 8002c38:	370c      	adds	r7, #12
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr

08002c42 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c42:	b480      	push	{r7}
 8002c44:	b083      	sub	sp, #12
 8002c46:	af00      	add	r7, sp, #0
 8002c48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c4a:	bf00      	nop
 8002c4c:	370c      	adds	r7, #12
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c54:	4770      	bx	lr
	...

08002c58 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	b085      	sub	sp, #20
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
 8002c60:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	4a2a      	ldr	r2, [pc, #168]	; (8002d14 <TIM_Base_SetConfig+0xbc>)
 8002c6c:	4293      	cmp	r3, r2
 8002c6e:	d003      	beq.n	8002c78 <TIM_Base_SetConfig+0x20>
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c76:	d108      	bne.n	8002c8a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c7e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	685b      	ldr	r3, [r3, #4]
 8002c84:	68fa      	ldr	r2, [r7, #12]
 8002c86:	4313      	orrs	r3, r2
 8002c88:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	4a21      	ldr	r2, [pc, #132]	; (8002d14 <TIM_Base_SetConfig+0xbc>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d00b      	beq.n	8002caa <TIM_Base_SetConfig+0x52>
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c98:	d007      	beq.n	8002caa <TIM_Base_SetConfig+0x52>
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	4a1e      	ldr	r2, [pc, #120]	; (8002d18 <TIM_Base_SetConfig+0xc0>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d003      	beq.n	8002caa <TIM_Base_SetConfig+0x52>
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	4a1d      	ldr	r2, [pc, #116]	; (8002d1c <TIM_Base_SetConfig+0xc4>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d108      	bne.n	8002cbc <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cb0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	68db      	ldr	r3, [r3, #12]
 8002cb6:	68fa      	ldr	r2, [r7, #12]
 8002cb8:	4313      	orrs	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	695b      	ldr	r3, [r3, #20]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	689a      	ldr	r2, [r3, #8]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002cd8:	683b      	ldr	r3, [r7, #0]
 8002cda:	681a      	ldr	r2, [r3, #0]
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	4a0c      	ldr	r2, [pc, #48]	; (8002d14 <TIM_Base_SetConfig+0xbc>)
 8002ce4:	4293      	cmp	r3, r2
 8002ce6:	d007      	beq.n	8002cf8 <TIM_Base_SetConfig+0xa0>
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <TIM_Base_SetConfig+0xc0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d003      	beq.n	8002cf8 <TIM_Base_SetConfig+0xa0>
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	4a0a      	ldr	r2, [pc, #40]	; (8002d1c <TIM_Base_SetConfig+0xc4>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d103      	bne.n	8002d00 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002cf8:	683b      	ldr	r3, [r7, #0]
 8002cfa:	691a      	ldr	r2, [r3, #16]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	2201      	movs	r2, #1
 8002d04:	615a      	str	r2, [r3, #20]
}
 8002d06:	bf00      	nop
 8002d08:	3714      	adds	r7, #20
 8002d0a:	46bd      	mov	sp, r7
 8002d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d10:	4770      	bx	lr
 8002d12:	bf00      	nop
 8002d14:	40012c00 	.word	0x40012c00
 8002d18:	40014000 	.word	0x40014000
 8002d1c:	40014400 	.word	0x40014400

08002d20 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d20:	b480      	push	{r7}
 8002d22:	b083      	sub	sp, #12
 8002d24:	af00      	add	r7, sp, #0
 8002d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d28:	bf00      	nop
 8002d2a:	370c      	adds	r7, #12
 8002d2c:	46bd      	mov	sp, r7
 8002d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d32:	4770      	bx	lr

08002d34 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d34:	b480      	push	{r7}
 8002d36:	b083      	sub	sp, #12
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b083      	sub	sp, #12
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d50:	bf00      	nop
 8002d52:	370c      	adds	r7, #12
 8002d54:	46bd      	mov	sp, r7
 8002d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d5a:	4770      	bx	lr

08002d5c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e040      	b.n	8002df0 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d106      	bne.n	8002d84 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	2200      	movs	r2, #0
 8002d7a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002d7e:	6878      	ldr	r0, [r7, #4]
 8002d80:	f7fe f866 	bl	8000e50 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	2224      	movs	r2, #36	; 0x24
 8002d88:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	681a      	ldr	r2, [r3, #0]
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	f022 0201 	bic.w	r2, r2, #1
 8002d98:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002d9a:	6878      	ldr	r0, [r7, #4]
 8002d9c:	f000 f8c0 	bl	8002f20 <UART_SetConfig>
 8002da0:	4603      	mov	r3, r0
 8002da2:	2b01      	cmp	r3, #1
 8002da4:	d101      	bne.n	8002daa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002da6:	2301      	movs	r3, #1
 8002da8:	e022      	b.n	8002df0 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d002      	beq.n	8002db8 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002db2:	6878      	ldr	r0, [r7, #4]
 8002db4:	f000 fae0 	bl	8003378 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	685a      	ldr	r2, [r3, #4]
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002dc6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	689a      	ldr	r2, [r3, #8]
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002dd6:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	681a      	ldr	r2, [r3, #0]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f042 0201 	orr.w	r2, r2, #1
 8002de6:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fb67 	bl	80034bc <UART_CheckIdleState>
 8002dee:	4603      	mov	r3, r0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	3708      	adds	r7, #8
 8002df4:	46bd      	mov	sp, r7
 8002df6:	bd80      	pop	{r7, pc}

08002df8 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b08a      	sub	sp, #40	; 0x28
 8002dfc:	af02      	add	r7, sp, #8
 8002dfe:	60f8      	str	r0, [r7, #12]
 8002e00:	60b9      	str	r1, [r7, #8]
 8002e02:	603b      	str	r3, [r7, #0]
 8002e04:	4613      	mov	r3, r2
 8002e06:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	f040 8082 	bne.w	8002f16 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e12:	68bb      	ldr	r3, [r7, #8]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d002      	beq.n	8002e1e <HAL_UART_Transmit+0x26>
 8002e18:	88fb      	ldrh	r3, [r7, #6]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d101      	bne.n	8002e22 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	e07a      	b.n	8002f18 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d101      	bne.n	8002e30 <HAL_UART_Transmit+0x38>
 8002e2c:	2302      	movs	r3, #2
 8002e2e:	e073      	b.n	8002f18 <HAL_UART_Transmit+0x120>
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	2201      	movs	r2, #1
 8002e34:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	2221      	movs	r2, #33	; 0x21
 8002e44:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e46:	f7fe f8c3 	bl	8000fd0 <HAL_GetTick>
 8002e4a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	88fa      	ldrh	r2, [r7, #6]
 8002e50:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	88fa      	ldrh	r2, [r7, #6]
 8002e58:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002e64:	d108      	bne.n	8002e78 <HAL_UART_Transmit+0x80>
 8002e66:	68fb      	ldr	r3, [r7, #12]
 8002e68:	691b      	ldr	r3, [r3, #16]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d104      	bne.n	8002e78 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002e6e:	2300      	movs	r3, #0
 8002e70:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002e72:	68bb      	ldr	r3, [r7, #8]
 8002e74:	61bb      	str	r3, [r7, #24]
 8002e76:	e003      	b.n	8002e80 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002e78:	68bb      	ldr	r3, [r7, #8]
 8002e7a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002e88:	e02d      	b.n	8002ee6 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	9300      	str	r3, [sp, #0]
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	2200      	movs	r2, #0
 8002e92:	2180      	movs	r1, #128	; 0x80
 8002e94:	68f8      	ldr	r0, [r7, #12]
 8002e96:	f000 fb5a 	bl	800354e <UART_WaitOnFlagUntilTimeout>
 8002e9a:	4603      	mov	r3, r0
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d001      	beq.n	8002ea4 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ea0:	2303      	movs	r3, #3
 8002ea2:	e039      	b.n	8002f18 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002ea4:	69fb      	ldr	r3, [r7, #28]
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d10b      	bne.n	8002ec2 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002eaa:	69bb      	ldr	r3, [r7, #24]
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002eb6:	b292      	uxth	r2, r2
 8002eb8:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002eba:	69bb      	ldr	r3, [r7, #24]
 8002ebc:	3302      	adds	r3, #2
 8002ebe:	61bb      	str	r3, [r7, #24]
 8002ec0:	e008      	b.n	8002ed4 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	781a      	ldrb	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	b292      	uxth	r2, r2
 8002ecc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002eec:	b29b      	uxth	r3, r3
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d1cb      	bne.n	8002e8a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	9300      	str	r3, [sp, #0]
 8002ef6:	697b      	ldr	r3, [r7, #20]
 8002ef8:	2200      	movs	r2, #0
 8002efa:	2140      	movs	r1, #64	; 0x40
 8002efc:	68f8      	ldr	r0, [r7, #12]
 8002efe:	f000 fb26 	bl	800354e <UART_WaitOnFlagUntilTimeout>
 8002f02:	4603      	mov	r3, r0
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d001      	beq.n	8002f0c <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f08:	2303      	movs	r3, #3
 8002f0a:	e005      	b.n	8002f18 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2220      	movs	r2, #32
 8002f10:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f12:	2300      	movs	r3, #0
 8002f14:	e000      	b.n	8002f18 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002f16:	2302      	movs	r3, #2
  }
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3720      	adds	r7, #32
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	bd80      	pop	{r7, pc}

08002f20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002f20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002f24:	b08a      	sub	sp, #40	; 0x28
 8002f26:	af00      	add	r7, sp, #0
 8002f28:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	689a      	ldr	r2, [r3, #8]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	691b      	ldr	r3, [r3, #16]
 8002f38:	431a      	orrs	r2, r3
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	695b      	ldr	r3, [r3, #20]
 8002f3e:	431a      	orrs	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	69db      	ldr	r3, [r3, #28]
 8002f44:	4313      	orrs	r3, r2
 8002f46:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	681a      	ldr	r2, [r3, #0]
 8002f4e:	4bb4      	ldr	r3, [pc, #720]	; (8003220 <UART_SetConfig+0x300>)
 8002f50:	4013      	ands	r3, r2
 8002f52:	68fa      	ldr	r2, [r7, #12]
 8002f54:	6812      	ldr	r2, [r2, #0]
 8002f56:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f58:	430b      	orrs	r3, r1
 8002f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	68da      	ldr	r2, [r3, #12]
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	430a      	orrs	r2, r1
 8002f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	699b      	ldr	r3, [r3, #24]
 8002f76:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4aa9      	ldr	r2, [pc, #676]	; (8003224 <UART_SetConfig+0x304>)
 8002f7e:	4293      	cmp	r3, r2
 8002f80:	d004      	beq.n	8002f8c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	6a1b      	ldr	r3, [r3, #32]
 8002f86:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	689b      	ldr	r3, [r3, #8]
 8002f92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9c:	430a      	orrs	r2, r1
 8002f9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4aa0      	ldr	r2, [pc, #640]	; (8003228 <UART_SetConfig+0x308>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d126      	bne.n	8002ff8 <UART_SetConfig+0xd8>
 8002faa:	4ba0      	ldr	r3, [pc, #640]	; (800322c <UART_SetConfig+0x30c>)
 8002fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002fb0:	f003 0303 	and.w	r3, r3, #3
 8002fb4:	2b03      	cmp	r3, #3
 8002fb6:	d81b      	bhi.n	8002ff0 <UART_SetConfig+0xd0>
 8002fb8:	a201      	add	r2, pc, #4	; (adr r2, 8002fc0 <UART_SetConfig+0xa0>)
 8002fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fbe:	bf00      	nop
 8002fc0:	08002fd1 	.word	0x08002fd1
 8002fc4:	08002fe1 	.word	0x08002fe1
 8002fc8:	08002fd9 	.word	0x08002fd9
 8002fcc:	08002fe9 	.word	0x08002fe9
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fd6:	e080      	b.n	80030da <UART_SetConfig+0x1ba>
 8002fd8:	2302      	movs	r3, #2
 8002fda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fde:	e07c      	b.n	80030da <UART_SetConfig+0x1ba>
 8002fe0:	2304      	movs	r3, #4
 8002fe2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fe6:	e078      	b.n	80030da <UART_SetConfig+0x1ba>
 8002fe8:	2308      	movs	r3, #8
 8002fea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002fee:	e074      	b.n	80030da <UART_SetConfig+0x1ba>
 8002ff0:	2310      	movs	r3, #16
 8002ff2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ff6:	e070      	b.n	80030da <UART_SetConfig+0x1ba>
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	4a8c      	ldr	r2, [pc, #560]	; (8003230 <UART_SetConfig+0x310>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d138      	bne.n	8003074 <UART_SetConfig+0x154>
 8003002:	4b8a      	ldr	r3, [pc, #552]	; (800322c <UART_SetConfig+0x30c>)
 8003004:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003008:	f003 030c 	and.w	r3, r3, #12
 800300c:	2b0c      	cmp	r3, #12
 800300e:	d82d      	bhi.n	800306c <UART_SetConfig+0x14c>
 8003010:	a201      	add	r2, pc, #4	; (adr r2, 8003018 <UART_SetConfig+0xf8>)
 8003012:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003016:	bf00      	nop
 8003018:	0800304d 	.word	0x0800304d
 800301c:	0800306d 	.word	0x0800306d
 8003020:	0800306d 	.word	0x0800306d
 8003024:	0800306d 	.word	0x0800306d
 8003028:	0800305d 	.word	0x0800305d
 800302c:	0800306d 	.word	0x0800306d
 8003030:	0800306d 	.word	0x0800306d
 8003034:	0800306d 	.word	0x0800306d
 8003038:	08003055 	.word	0x08003055
 800303c:	0800306d 	.word	0x0800306d
 8003040:	0800306d 	.word	0x0800306d
 8003044:	0800306d 	.word	0x0800306d
 8003048:	08003065 	.word	0x08003065
 800304c:	2300      	movs	r3, #0
 800304e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003052:	e042      	b.n	80030da <UART_SetConfig+0x1ba>
 8003054:	2302      	movs	r3, #2
 8003056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800305a:	e03e      	b.n	80030da <UART_SetConfig+0x1ba>
 800305c:	2304      	movs	r3, #4
 800305e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003062:	e03a      	b.n	80030da <UART_SetConfig+0x1ba>
 8003064:	2308      	movs	r3, #8
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e036      	b.n	80030da <UART_SetConfig+0x1ba>
 800306c:	2310      	movs	r3, #16
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e032      	b.n	80030da <UART_SetConfig+0x1ba>
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4a6a      	ldr	r2, [pc, #424]	; (8003224 <UART_SetConfig+0x304>)
 800307a:	4293      	cmp	r3, r2
 800307c:	d12a      	bne.n	80030d4 <UART_SetConfig+0x1b4>
 800307e:	4b6b      	ldr	r3, [pc, #428]	; (800322c <UART_SetConfig+0x30c>)
 8003080:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003084:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003088:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800308c:	d01a      	beq.n	80030c4 <UART_SetConfig+0x1a4>
 800308e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003092:	d81b      	bhi.n	80030cc <UART_SetConfig+0x1ac>
 8003094:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003098:	d00c      	beq.n	80030b4 <UART_SetConfig+0x194>
 800309a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800309e:	d815      	bhi.n	80030cc <UART_SetConfig+0x1ac>
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	d003      	beq.n	80030ac <UART_SetConfig+0x18c>
 80030a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80030a8:	d008      	beq.n	80030bc <UART_SetConfig+0x19c>
 80030aa:	e00f      	b.n	80030cc <UART_SetConfig+0x1ac>
 80030ac:	2300      	movs	r3, #0
 80030ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030b2:	e012      	b.n	80030da <UART_SetConfig+0x1ba>
 80030b4:	2302      	movs	r3, #2
 80030b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ba:	e00e      	b.n	80030da <UART_SetConfig+0x1ba>
 80030bc:	2304      	movs	r3, #4
 80030be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030c2:	e00a      	b.n	80030da <UART_SetConfig+0x1ba>
 80030c4:	2308      	movs	r3, #8
 80030c6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ca:	e006      	b.n	80030da <UART_SetConfig+0x1ba>
 80030cc:	2310      	movs	r3, #16
 80030ce:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030d2:	e002      	b.n	80030da <UART_SetConfig+0x1ba>
 80030d4:	2310      	movs	r3, #16
 80030d6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	4a51      	ldr	r2, [pc, #324]	; (8003224 <UART_SetConfig+0x304>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d17a      	bne.n	80031da <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80030e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030e8:	2b08      	cmp	r3, #8
 80030ea:	d824      	bhi.n	8003136 <UART_SetConfig+0x216>
 80030ec:	a201      	add	r2, pc, #4	; (adr r2, 80030f4 <UART_SetConfig+0x1d4>)
 80030ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f2:	bf00      	nop
 80030f4:	08003119 	.word	0x08003119
 80030f8:	08003137 	.word	0x08003137
 80030fc:	08003121 	.word	0x08003121
 8003100:	08003137 	.word	0x08003137
 8003104:	08003127 	.word	0x08003127
 8003108:	08003137 	.word	0x08003137
 800310c:	08003137 	.word	0x08003137
 8003110:	08003137 	.word	0x08003137
 8003114:	0800312f 	.word	0x0800312f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003118:	f7fe ffea 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 800311c:	61f8      	str	r0, [r7, #28]
        break;
 800311e:	e010      	b.n	8003142 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003120:	4b44      	ldr	r3, [pc, #272]	; (8003234 <UART_SetConfig+0x314>)
 8003122:	61fb      	str	r3, [r7, #28]
        break;
 8003124:	e00d      	b.n	8003142 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003126:	f7fe ff4b 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800312a:	61f8      	str	r0, [r7, #28]
        break;
 800312c:	e009      	b.n	8003142 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800312e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003132:	61fb      	str	r3, [r7, #28]
        break;
 8003134:	e005      	b.n	8003142 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003136:	2300      	movs	r3, #0
 8003138:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800313a:	2301      	movs	r3, #1
 800313c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003140:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003142:	69fb      	ldr	r3, [r7, #28]
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8107 	beq.w	8003358 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	4613      	mov	r3, r2
 8003150:	005b      	lsls	r3, r3, #1
 8003152:	4413      	add	r3, r2
 8003154:	69fa      	ldr	r2, [r7, #28]
 8003156:	429a      	cmp	r2, r3
 8003158:	d305      	bcc.n	8003166 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	685b      	ldr	r3, [r3, #4]
 800315e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003160:	69fa      	ldr	r2, [r7, #28]
 8003162:	429a      	cmp	r2, r3
 8003164:	d903      	bls.n	800316e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003166:	2301      	movs	r3, #1
 8003168:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800316c:	e0f4      	b.n	8003358 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	2200      	movs	r2, #0
 8003172:	461c      	mov	r4, r3
 8003174:	4615      	mov	r5, r2
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	f04f 0300 	mov.w	r3, #0
 800317e:	022b      	lsls	r3, r5, #8
 8003180:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003184:	0222      	lsls	r2, r4, #8
 8003186:	68f9      	ldr	r1, [r7, #12]
 8003188:	6849      	ldr	r1, [r1, #4]
 800318a:	0849      	lsrs	r1, r1, #1
 800318c:	2000      	movs	r0, #0
 800318e:	4688      	mov	r8, r1
 8003190:	4681      	mov	r9, r0
 8003192:	eb12 0a08 	adds.w	sl, r2, r8
 8003196:	eb43 0b09 	adc.w	fp, r3, r9
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	685b      	ldr	r3, [r3, #4]
 800319e:	2200      	movs	r2, #0
 80031a0:	603b      	str	r3, [r7, #0]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80031a8:	4650      	mov	r0, sl
 80031aa:	4659      	mov	r1, fp
 80031ac:	f7fd f868 	bl	8000280 <__aeabi_uldivmod>
 80031b0:	4602      	mov	r2, r0
 80031b2:	460b      	mov	r3, r1
 80031b4:	4613      	mov	r3, r2
 80031b6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80031be:	d308      	bcc.n	80031d2 <UART_SetConfig+0x2b2>
 80031c0:	69bb      	ldr	r3, [r7, #24]
 80031c2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80031c6:	d204      	bcs.n	80031d2 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	60da      	str	r2, [r3, #12]
 80031d0:	e0c2      	b.n	8003358 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80031d8:	e0be      	b.n	8003358 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	69db      	ldr	r3, [r3, #28]
 80031de:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031e2:	d16a      	bne.n	80032ba <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 80031e4:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80031e8:	2b08      	cmp	r3, #8
 80031ea:	d834      	bhi.n	8003256 <UART_SetConfig+0x336>
 80031ec:	a201      	add	r2, pc, #4	; (adr r2, 80031f4 <UART_SetConfig+0x2d4>)
 80031ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80031f2:	bf00      	nop
 80031f4:	08003219 	.word	0x08003219
 80031f8:	08003239 	.word	0x08003239
 80031fc:	08003241 	.word	0x08003241
 8003200:	08003257 	.word	0x08003257
 8003204:	08003247 	.word	0x08003247
 8003208:	08003257 	.word	0x08003257
 800320c:	08003257 	.word	0x08003257
 8003210:	08003257 	.word	0x08003257
 8003214:	0800324f 	.word	0x0800324f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003218:	f7fe ff6a 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 800321c:	61f8      	str	r0, [r7, #28]
        break;
 800321e:	e020      	b.n	8003262 <UART_SetConfig+0x342>
 8003220:	efff69f3 	.word	0xefff69f3
 8003224:	40008000 	.word	0x40008000
 8003228:	40013800 	.word	0x40013800
 800322c:	40021000 	.word	0x40021000
 8003230:	40004400 	.word	0x40004400
 8003234:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003238:	f7fe ff70 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 800323c:	61f8      	str	r0, [r7, #28]
        break;
 800323e:	e010      	b.n	8003262 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003240:	4b4c      	ldr	r3, [pc, #304]	; (8003374 <UART_SetConfig+0x454>)
 8003242:	61fb      	str	r3, [r7, #28]
        break;
 8003244:	e00d      	b.n	8003262 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003246:	f7fe febb 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 800324a:	61f8      	str	r0, [r7, #28]
        break;
 800324c:	e009      	b.n	8003262 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800324e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003252:	61fb      	str	r3, [r7, #28]
        break;
 8003254:	e005      	b.n	8003262 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800325a:	2301      	movs	r3, #1
 800325c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003260:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003262:	69fb      	ldr	r3, [r7, #28]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d077      	beq.n	8003358 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003268:	69fb      	ldr	r3, [r7, #28]
 800326a:	005a      	lsls	r2, r3, #1
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	085b      	lsrs	r3, r3, #1
 8003272:	441a      	add	r2, r3
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	fbb2 f3f3 	udiv	r3, r2, r3
 800327c:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800327e:	69bb      	ldr	r3, [r7, #24]
 8003280:	2b0f      	cmp	r3, #15
 8003282:	d916      	bls.n	80032b2 <UART_SetConfig+0x392>
 8003284:	69bb      	ldr	r3, [r7, #24]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800328a:	d212      	bcs.n	80032b2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800328c:	69bb      	ldr	r3, [r7, #24]
 800328e:	b29b      	uxth	r3, r3
 8003290:	f023 030f 	bic.w	r3, r3, #15
 8003294:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003296:	69bb      	ldr	r3, [r7, #24]
 8003298:	085b      	lsrs	r3, r3, #1
 800329a:	b29b      	uxth	r3, r3
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	b29a      	uxth	r2, r3
 80032a2:	8afb      	ldrh	r3, [r7, #22]
 80032a4:	4313      	orrs	r3, r2
 80032a6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	8afa      	ldrh	r2, [r7, #22]
 80032ae:	60da      	str	r2, [r3, #12]
 80032b0:	e052      	b.n	8003358 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80032b2:	2301      	movs	r3, #1
 80032b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80032b8:	e04e      	b.n	8003358 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80032ba:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d827      	bhi.n	8003312 <UART_SetConfig+0x3f2>
 80032c2:	a201      	add	r2, pc, #4	; (adr r2, 80032c8 <UART_SetConfig+0x3a8>)
 80032c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032c8:	080032ed 	.word	0x080032ed
 80032cc:	080032f5 	.word	0x080032f5
 80032d0:	080032fd 	.word	0x080032fd
 80032d4:	08003313 	.word	0x08003313
 80032d8:	08003303 	.word	0x08003303
 80032dc:	08003313 	.word	0x08003313
 80032e0:	08003313 	.word	0x08003313
 80032e4:	08003313 	.word	0x08003313
 80032e8:	0800330b 	.word	0x0800330b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ec:	f7fe ff00 	bl	80020f0 <HAL_RCC_GetPCLK1Freq>
 80032f0:	61f8      	str	r0, [r7, #28]
        break;
 80032f2:	e014      	b.n	800331e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032f4:	f7fe ff12 	bl	800211c <HAL_RCC_GetPCLK2Freq>
 80032f8:	61f8      	str	r0, [r7, #28]
        break;
 80032fa:	e010      	b.n	800331e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032fc:	4b1d      	ldr	r3, [pc, #116]	; (8003374 <UART_SetConfig+0x454>)
 80032fe:	61fb      	str	r3, [r7, #28]
        break;
 8003300:	e00d      	b.n	800331e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003302:	f7fe fe5d 	bl	8001fc0 <HAL_RCC_GetSysClockFreq>
 8003306:	61f8      	str	r0, [r7, #28]
        break;
 8003308:	e009      	b.n	800331e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800330a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800330e:	61fb      	str	r3, [r7, #28]
        break;
 8003310:	e005      	b.n	800331e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003312:	2300      	movs	r3, #0
 8003314:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800331c:	bf00      	nop
    }

    if (pclk != 0U)
 800331e:	69fb      	ldr	r3, [r7, #28]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d019      	beq.n	8003358 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	085a      	lsrs	r2, r3, #1
 800332a:	69fb      	ldr	r3, [r7, #28]
 800332c:	441a      	add	r2, r3
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	fbb2 f3f3 	udiv	r3, r2, r3
 8003336:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	2b0f      	cmp	r3, #15
 800333c:	d909      	bls.n	8003352 <UART_SetConfig+0x432>
 800333e:	69bb      	ldr	r3, [r7, #24]
 8003340:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003344:	d205      	bcs.n	8003352 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003346:	69bb      	ldr	r3, [r7, #24]
 8003348:	b29a      	uxth	r2, r3
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60da      	str	r2, [r3, #12]
 8003350:	e002      	b.n	8003358 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003352:	2301      	movs	r3, #1
 8003354:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	2200      	movs	r2, #0
 800335c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2200      	movs	r2, #0
 8003362:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003364:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003368:	4618      	mov	r0, r3
 800336a:	3728      	adds	r7, #40	; 0x28
 800336c:	46bd      	mov	sp, r7
 800336e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003372:	bf00      	nop
 8003374:	00f42400 	.word	0x00f42400

08003378 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003378:	b480      	push	{r7}
 800337a:	b083      	sub	sp, #12
 800337c:	af00      	add	r7, sp, #0
 800337e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003384:	f003 0301 	and.w	r3, r3, #1
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033a6:	f003 0302 	and.w	r3, r3, #2
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	430a      	orrs	r2, r1
 80033c2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033c8:	f003 0304 	and.w	r3, r3, #4
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	685b      	ldr	r3, [r3, #4]
 80033d6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	430a      	orrs	r2, r1
 80033e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033ea:	f003 0308 	and.w	r3, r3, #8
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	430a      	orrs	r2, r1
 8003406:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800340c:	f003 0310 	and.w	r3, r3, #16
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00a      	beq.n	800342a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	689b      	ldr	r3, [r3, #8]
 800341a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	430a      	orrs	r2, r1
 8003428:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800342e:	f003 0320 	and.w	r3, r3, #32
 8003432:	2b00      	cmp	r3, #0
 8003434:	d00a      	beq.n	800344c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689b      	ldr	r3, [r3, #8]
 800343c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	430a      	orrs	r2, r1
 800344a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003450:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003454:	2b00      	cmp	r3, #0
 8003456:	d01a      	beq.n	800348e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	685b      	ldr	r3, [r3, #4]
 800345e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	430a      	orrs	r2, r1
 800346c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003472:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003476:	d10a      	bne.n	800348e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	430a      	orrs	r2, r1
 800348c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003496:	2b00      	cmp	r3, #0
 8003498:	d00a      	beq.n	80034b0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	605a      	str	r2, [r3, #4]
  }
}
 80034b0:	bf00      	nop
 80034b2:	370c      	adds	r7, #12
 80034b4:	46bd      	mov	sp, r7
 80034b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ba:	4770      	bx	lr

080034bc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80034bc:	b580      	push	{r7, lr}
 80034be:	b086      	sub	sp, #24
 80034c0:	af02      	add	r7, sp, #8
 80034c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80034cc:	f7fd fd80 	bl	8000fd0 <HAL_GetTick>
 80034d0:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	f003 0308 	and.w	r3, r3, #8
 80034dc:	2b08      	cmp	r3, #8
 80034de:	d10e      	bne.n	80034fe <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034e4:	9300      	str	r3, [sp, #0]
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f82d 	bl	800354e <UART_WaitOnFlagUntilTimeout>
 80034f4:	4603      	mov	r3, r0
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d001      	beq.n	80034fe <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034fa:	2303      	movs	r3, #3
 80034fc:	e023      	b.n	8003546 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f003 0304 	and.w	r3, r3, #4
 8003508:	2b04      	cmp	r3, #4
 800350a:	d10e      	bne.n	800352a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800350c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f000 f817 	bl	800354e <UART_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e00d      	b.n	8003546 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2220      	movs	r2, #32
 800352e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	2200      	movs	r2, #0
 8003540:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003544:	2300      	movs	r3, #0
}
 8003546:	4618      	mov	r0, r3
 8003548:	3710      	adds	r7, #16
 800354a:	46bd      	mov	sp, r7
 800354c:	bd80      	pop	{r7, pc}

0800354e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800354e:	b580      	push	{r7, lr}
 8003550:	b09c      	sub	sp, #112	; 0x70
 8003552:	af00      	add	r7, sp, #0
 8003554:	60f8      	str	r0, [r7, #12]
 8003556:	60b9      	str	r1, [r7, #8]
 8003558:	603b      	str	r3, [r7, #0]
 800355a:	4613      	mov	r3, r2
 800355c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800355e:	e0a5      	b.n	80036ac <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003562:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003566:	f000 80a1 	beq.w	80036ac <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800356a:	f7fd fd31 	bl	8000fd0 <HAL_GetTick>
 800356e:	4602      	mov	r2, r0
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	1ad3      	subs	r3, r2, r3
 8003574:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003576:	429a      	cmp	r2, r3
 8003578:	d302      	bcc.n	8003580 <UART_WaitOnFlagUntilTimeout+0x32>
 800357a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800357c:	2b00      	cmp	r3, #0
 800357e:	d13e      	bne.n	80035fe <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003586:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003588:	e853 3f00 	ldrex	r3, [r3]
 800358c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800358e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003590:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003594:	667b      	str	r3, [r7, #100]	; 0x64
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	461a      	mov	r2, r3
 800359c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800359e:	65fb      	str	r3, [r7, #92]	; 0x5c
 80035a0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80035a4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80035a6:	e841 2300 	strex	r3, r2, [r1]
 80035aa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80035ac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d1e6      	bne.n	8003580 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	3308      	adds	r3, #8
 80035b8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035ba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80035bc:	e853 3f00 	ldrex	r3, [r3]
 80035c0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80035c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80035c4:	f023 0301 	bic.w	r3, r3, #1
 80035c8:	663b      	str	r3, [r7, #96]	; 0x60
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	3308      	adds	r3, #8
 80035d0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80035d2:	64ba      	str	r2, [r7, #72]	; 0x48
 80035d4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035d6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80035d8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80035da:	e841 2300 	strex	r3, r2, [r1]
 80035de:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80035e0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1e5      	bne.n	80035b2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	2220      	movs	r2, #32
 80035ea:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	2220      	movs	r2, #32
 80035f0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	2200      	movs	r2, #0
 80035f6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80035fa:	2303      	movs	r3, #3
 80035fc:	e067      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	f003 0304 	and.w	r3, r3, #4
 8003608:	2b00      	cmp	r3, #0
 800360a:	d04f      	beq.n	80036ac <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	69db      	ldr	r3, [r3, #28]
 8003612:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003616:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800361a:	d147      	bne.n	80036ac <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003624:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	681b      	ldr	r3, [r3, #0]
 800362a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800362c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800362e:	e853 3f00 	ldrex	r3, [r3]
 8003632:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003636:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800363a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	461a      	mov	r2, r3
 8003642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003644:	637b      	str	r3, [r7, #52]	; 0x34
 8003646:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003648:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800364a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800364c:	e841 2300 	strex	r3, r2, [r1]
 8003650:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003652:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1e6      	bne.n	8003626 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	3308      	adds	r3, #8
 800365e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	e853 3f00 	ldrex	r3, [r3]
 8003666:	613b      	str	r3, [r7, #16]
   return(result);
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	f023 0301 	bic.w	r3, r3, #1
 800366e:	66bb      	str	r3, [r7, #104]	; 0x68
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	3308      	adds	r3, #8
 8003676:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003678:	623a      	str	r2, [r7, #32]
 800367a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	69f9      	ldr	r1, [r7, #28]
 800367e:	6a3a      	ldr	r2, [r7, #32]
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	61bb      	str	r3, [r7, #24]
   return(result);
 8003686:	69bb      	ldr	r3, [r7, #24]
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e5      	bne.n	8003658 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2220      	movs	r2, #32
 8003690:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2220      	movs	r2, #32
 8003696:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	2220      	movs	r2, #32
 800369c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	2200      	movs	r2, #0
 80036a4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e010      	b.n	80036ce <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	69da      	ldr	r2, [r3, #28]
 80036b2:	68bb      	ldr	r3, [r7, #8]
 80036b4:	4013      	ands	r3, r2
 80036b6:	68ba      	ldr	r2, [r7, #8]
 80036b8:	429a      	cmp	r2, r3
 80036ba:	bf0c      	ite	eq
 80036bc:	2301      	moveq	r3, #1
 80036be:	2300      	movne	r3, #0
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	461a      	mov	r2, r3
 80036c4:	79fb      	ldrb	r3, [r7, #7]
 80036c6:	429a      	cmp	r2, r3
 80036c8:	f43f af4a 	beq.w	8003560 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80036cc:	2300      	movs	r3, #0
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3770      	adds	r7, #112	; 0x70
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
	...

080036d8 <__NVIC_SetPriority>:
{
 80036d8:	b480      	push	{r7}
 80036da:	b083      	sub	sp, #12
 80036dc:	af00      	add	r7, sp, #0
 80036de:	4603      	mov	r3, r0
 80036e0:	6039      	str	r1, [r7, #0]
 80036e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80036e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	db0a      	blt.n	8003702 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	b2da      	uxtb	r2, r3
 80036f0:	490c      	ldr	r1, [pc, #48]	; (8003724 <__NVIC_SetPriority+0x4c>)
 80036f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80036f6:	0112      	lsls	r2, r2, #4
 80036f8:	b2d2      	uxtb	r2, r2
 80036fa:	440b      	add	r3, r1
 80036fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003700:	e00a      	b.n	8003718 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	b2da      	uxtb	r2, r3
 8003706:	4908      	ldr	r1, [pc, #32]	; (8003728 <__NVIC_SetPriority+0x50>)
 8003708:	79fb      	ldrb	r3, [r7, #7]
 800370a:	f003 030f 	and.w	r3, r3, #15
 800370e:	3b04      	subs	r3, #4
 8003710:	0112      	lsls	r2, r2, #4
 8003712:	b2d2      	uxtb	r2, r2
 8003714:	440b      	add	r3, r1
 8003716:	761a      	strb	r2, [r3, #24]
}
 8003718:	bf00      	nop
 800371a:	370c      	adds	r7, #12
 800371c:	46bd      	mov	sp, r7
 800371e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003722:	4770      	bx	lr
 8003724:	e000e100 	.word	0xe000e100
 8003728:	e000ed00 	.word	0xe000ed00

0800372c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800372c:	b580      	push	{r7, lr}
 800372e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003730:	4b05      	ldr	r3, [pc, #20]	; (8003748 <SysTick_Handler+0x1c>)
 8003732:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003734:	f002 fa12 	bl	8005b5c <xTaskGetSchedulerState>
 8003738:	4603      	mov	r3, r0
 800373a:	2b01      	cmp	r3, #1
 800373c:	d001      	beq.n	8003742 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800373e:	f003 f8fb 	bl	8006938 <xPortSysTickHandler>
  }
}
 8003742:	bf00      	nop
 8003744:	bd80      	pop	{r7, pc}
 8003746:	bf00      	nop
 8003748:	e000e010 	.word	0xe000e010

0800374c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800374c:	b580      	push	{r7, lr}
 800374e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003750:	2100      	movs	r1, #0
 8003752:	f06f 0004 	mvn.w	r0, #4
 8003756:	f7ff ffbf 	bl	80036d8 <__NVIC_SetPriority>
#endif
}
 800375a:	bf00      	nop
 800375c:	bd80      	pop	{r7, pc}
	...

08003760 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003760:	b480      	push	{r7}
 8003762:	b083      	sub	sp, #12
 8003764:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003766:	f3ef 8305 	mrs	r3, IPSR
 800376a:	603b      	str	r3, [r7, #0]
  return(result);
 800376c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800376e:	2b00      	cmp	r3, #0
 8003770:	d003      	beq.n	800377a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003772:	f06f 0305 	mvn.w	r3, #5
 8003776:	607b      	str	r3, [r7, #4]
 8003778:	e00c      	b.n	8003794 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800377a:	4b0a      	ldr	r3, [pc, #40]	; (80037a4 <osKernelInitialize+0x44>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	d105      	bne.n	800378e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003782:	4b08      	ldr	r3, [pc, #32]	; (80037a4 <osKernelInitialize+0x44>)
 8003784:	2201      	movs	r2, #1
 8003786:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003788:	2300      	movs	r3, #0
 800378a:	607b      	str	r3, [r7, #4]
 800378c:	e002      	b.n	8003794 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800378e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003792:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003794:	687b      	ldr	r3, [r7, #4]
}
 8003796:	4618      	mov	r0, r3
 8003798:	370c      	adds	r7, #12
 800379a:	46bd      	mov	sp, r7
 800379c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a0:	4770      	bx	lr
 80037a2:	bf00      	nop
 80037a4:	20000190 	.word	0x20000190

080037a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b082      	sub	sp, #8
 80037ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037ae:	f3ef 8305 	mrs	r3, IPSR
 80037b2:	603b      	str	r3, [r7, #0]
  return(result);
 80037b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d003      	beq.n	80037c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80037ba:	f06f 0305 	mvn.w	r3, #5
 80037be:	607b      	str	r3, [r7, #4]
 80037c0:	e010      	b.n	80037e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80037c2:	4b0b      	ldr	r3, [pc, #44]	; (80037f0 <osKernelStart+0x48>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	2b01      	cmp	r3, #1
 80037c8:	d109      	bne.n	80037de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80037ca:	f7ff ffbf 	bl	800374c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80037ce:	4b08      	ldr	r3, [pc, #32]	; (80037f0 <osKernelStart+0x48>)
 80037d0:	2202      	movs	r2, #2
 80037d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80037d4:	f001 fd20 	bl	8005218 <vTaskStartScheduler>
      stat = osOK;
 80037d8:	2300      	movs	r3, #0
 80037da:	607b      	str	r3, [r7, #4]
 80037dc:	e002      	b.n	80037e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80037de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80037e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80037e4:	687b      	ldr	r3, [r7, #4]
}
 80037e6:	4618      	mov	r0, r3
 80037e8:	3708      	adds	r7, #8
 80037ea:	46bd      	mov	sp, r7
 80037ec:	bd80      	pop	{r7, pc}
 80037ee:	bf00      	nop
 80037f0:	20000190 	.word	0x20000190

080037f4 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 80037f4:	b580      	push	{r7, lr}
 80037f6:	b082      	sub	sp, #8
 80037f8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80037fa:	f3ef 8305 	mrs	r3, IPSR
 80037fe:	603b      	str	r3, [r7, #0]
  return(result);
 8003800:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8003802:	2b00      	cmp	r3, #0
 8003804:	d003      	beq.n	800380e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8003806:	f001 fe33 	bl	8005470 <xTaskGetTickCountFromISR>
 800380a:	6078      	str	r0, [r7, #4]
 800380c:	e002      	b.n	8003814 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800380e:	f001 fe1f 	bl	8005450 <xTaskGetTickCount>
 8003812:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8003814:	687b      	ldr	r3, [r7, #4]
}
 8003816:	4618      	mov	r0, r3
 8003818:	3708      	adds	r7, #8
 800381a:	46bd      	mov	sp, r7
 800381c:	bd80      	pop	{r7, pc}

0800381e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800381e:	b580      	push	{r7, lr}
 8003820:	b08e      	sub	sp, #56	; 0x38
 8003822:	af04      	add	r7, sp, #16
 8003824:	60f8      	str	r0, [r7, #12]
 8003826:	60b9      	str	r1, [r7, #8]
 8003828:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800382a:	2300      	movs	r3, #0
 800382c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800382e:	f3ef 8305 	mrs	r3, IPSR
 8003832:	617b      	str	r3, [r7, #20]
  return(result);
 8003834:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003836:	2b00      	cmp	r3, #0
 8003838:	d17e      	bne.n	8003938 <osThreadNew+0x11a>
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d07b      	beq.n	8003938 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003840:	2340      	movs	r3, #64	; 0x40
 8003842:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003844:	2318      	movs	r3, #24
 8003846:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003848:	2300      	movs	r3, #0
 800384a:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800384c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003850:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	2b00      	cmp	r3, #0
 8003856:	d045      	beq.n	80038e4 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	2b00      	cmp	r3, #0
 800385e:	d002      	beq.n	8003866 <osThreadNew+0x48>
        name = attr->name;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	699b      	ldr	r3, [r3, #24]
 800386a:	2b00      	cmp	r3, #0
 800386c:	d002      	beq.n	8003874 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	699b      	ldr	r3, [r3, #24]
 8003872:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003874:	69fb      	ldr	r3, [r7, #28]
 8003876:	2b00      	cmp	r3, #0
 8003878:	d008      	beq.n	800388c <osThreadNew+0x6e>
 800387a:	69fb      	ldr	r3, [r7, #28]
 800387c:	2b38      	cmp	r3, #56	; 0x38
 800387e:	d805      	bhi.n	800388c <osThreadNew+0x6e>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	685b      	ldr	r3, [r3, #4]
 8003884:	f003 0301 	and.w	r3, r3, #1
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <osThreadNew+0x72>
        return (NULL);
 800388c:	2300      	movs	r3, #0
 800388e:	e054      	b.n	800393a <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	695b      	ldr	r3, [r3, #20]
 8003894:	2b00      	cmp	r3, #0
 8003896:	d003      	beq.n	80038a0 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	695b      	ldr	r3, [r3, #20]
 800389c:	089b      	lsrs	r3, r3, #2
 800389e:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	689b      	ldr	r3, [r3, #8]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d00e      	beq.n	80038c6 <osThreadNew+0xa8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	2bbb      	cmp	r3, #187	; 0xbb
 80038ae:	d90a      	bls.n	80038c6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d006      	beq.n	80038c6 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d002      	beq.n	80038c6 <osThreadNew+0xa8>
        mem = 1;
 80038c0:	2301      	movs	r3, #1
 80038c2:	61bb      	str	r3, [r7, #24]
 80038c4:	e010      	b.n	80038e8 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d10c      	bne.n	80038e8 <osThreadNew+0xca>
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	68db      	ldr	r3, [r3, #12]
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d108      	bne.n	80038e8 <osThreadNew+0xca>
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	2b00      	cmp	r3, #0
 80038dc:	d104      	bne.n	80038e8 <osThreadNew+0xca>
          mem = 0;
 80038de:	2300      	movs	r3, #0
 80038e0:	61bb      	str	r3, [r7, #24]
 80038e2:	e001      	b.n	80038e8 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80038e4:	2300      	movs	r3, #0
 80038e6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80038e8:	69bb      	ldr	r3, [r7, #24]
 80038ea:	2b01      	cmp	r3, #1
 80038ec:	d110      	bne.n	8003910 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80038f2:	687a      	ldr	r2, [r7, #4]
 80038f4:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80038f6:	9202      	str	r2, [sp, #8]
 80038f8:	9301      	str	r3, [sp, #4]
 80038fa:	69fb      	ldr	r3, [r7, #28]
 80038fc:	9300      	str	r3, [sp, #0]
 80038fe:	68bb      	ldr	r3, [r7, #8]
 8003900:	6a3a      	ldr	r2, [r7, #32]
 8003902:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003904:	68f8      	ldr	r0, [r7, #12]
 8003906:	f001 fa5d 	bl	8004dc4 <xTaskCreateStatic>
 800390a:	4603      	mov	r3, r0
 800390c:	613b      	str	r3, [r7, #16]
 800390e:	e013      	b.n	8003938 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003910:	69bb      	ldr	r3, [r7, #24]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d110      	bne.n	8003938 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003916:	6a3b      	ldr	r3, [r7, #32]
 8003918:	b29a      	uxth	r2, r3
 800391a:	f107 0310 	add.w	r3, r7, #16
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	69fb      	ldr	r3, [r7, #28]
 8003922:	9300      	str	r3, [sp, #0]
 8003924:	68bb      	ldr	r3, [r7, #8]
 8003926:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003928:	68f8      	ldr	r0, [r7, #12]
 800392a:	f001 faa8 	bl	8004e7e <xTaskCreate>
 800392e:	4603      	mov	r3, r0
 8003930:	2b01      	cmp	r3, #1
 8003932:	d001      	beq.n	8003938 <osThreadNew+0x11a>
            hTask = NULL;
 8003934:	2300      	movs	r3, #0
 8003936:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003938:	693b      	ldr	r3, [r7, #16]
}
 800393a:	4618      	mov	r0, r3
 800393c:	3728      	adds	r7, #40	; 0x28
 800393e:	46bd      	mov	sp, r7
 8003940:	bd80      	pop	{r7, pc}

08003942 <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 8003942:	b580      	push	{r7, lr}
 8003944:	b086      	sub	sp, #24
 8003946:	af00      	add	r7, sp, #0
 8003948:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800394e:	f3ef 8305 	mrs	r3, IPSR
 8003952:	60fb      	str	r3, [r7, #12]
  return(result);
 8003954:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 8003956:	2b00      	cmp	r3, #0
 8003958:	d102      	bne.n	8003960 <osThreadGetName+0x1e>
 800395a:	693b      	ldr	r3, [r7, #16]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d102      	bne.n	8003966 <osThreadGetName+0x24>
    name = NULL;
 8003960:	2300      	movs	r3, #0
 8003962:	617b      	str	r3, [r7, #20]
 8003964:	e003      	b.n	800396e <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 8003966:	6938      	ldr	r0, [r7, #16]
 8003968:	f001 fd94 	bl	8005494 <pcTaskGetName>
 800396c:	6178      	str	r0, [r7, #20]
  }

  return (name);
 800396e:	697b      	ldr	r3, [r7, #20]
}
 8003970:	4618      	mov	r0, r3
 8003972:	3718      	adds	r7, #24
 8003974:	46bd      	mov	sp, r7
 8003976:	bd80      	pop	{r7, pc}

08003978 <osThreadGetId>:

osThreadId_t osThreadGetId (void) {
 8003978:	b580      	push	{r7, lr}
 800397a:	b082      	sub	sp, #8
 800397c:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 800397e:	f002 f8dd 	bl	8005b3c <xTaskGetCurrentTaskHandle>
 8003982:	6078      	str	r0, [r7, #4]

  return (id);
 8003984:	687b      	ldr	r3, [r7, #4]
}
 8003986:	4618      	mov	r0, r3
 8003988:	3708      	adds	r7, #8
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}

0800398e <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 800398e:	b580      	push	{r7, lr}
 8003990:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8003992:	2000      	movs	r0, #0
 8003994:	f001 fbce 	bl	8005134 <vTaskDelete>
#endif
  for (;;);
 8003998:	e7fe      	b.n	8003998 <osThreadExit+0xa>

0800399a <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800399a:	b580      	push	{r7, lr}
 800399c:	b08a      	sub	sp, #40	; 0x28
 800399e:	af02      	add	r7, sp, #8
 80039a0:	60f8      	str	r0, [r7, #12]
 80039a2:	60b9      	str	r1, [r7, #8]
 80039a4:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 80039a6:	2300      	movs	r3, #0
 80039a8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039aa:	f3ef 8305 	mrs	r3, IPSR
 80039ae:	613b      	str	r3, [r7, #16]
  return(result);
 80039b0:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d175      	bne.n	8003aa2 <osSemaphoreNew+0x108>
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d072      	beq.n	8003aa2 <osSemaphoreNew+0x108>
 80039bc:	68ba      	ldr	r2, [r7, #8]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	429a      	cmp	r2, r3
 80039c2:	d86e      	bhi.n	8003aa2 <osSemaphoreNew+0x108>
    mem = -1;
 80039c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039c8:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d015      	beq.n	80039fc <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d006      	beq.n	80039e6 <osSemaphoreNew+0x4c>
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	68db      	ldr	r3, [r3, #12]
 80039dc:	2b4f      	cmp	r3, #79	; 0x4f
 80039de:	d902      	bls.n	80039e6 <osSemaphoreNew+0x4c>
        mem = 1;
 80039e0:	2301      	movs	r3, #1
 80039e2:	61bb      	str	r3, [r7, #24]
 80039e4:	e00c      	b.n	8003a00 <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d108      	bne.n	8003a00 <osSemaphoreNew+0x66>
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	68db      	ldr	r3, [r3, #12]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d104      	bne.n	8003a00 <osSemaphoreNew+0x66>
          mem = 0;
 80039f6:	2300      	movs	r3, #0
 80039f8:	61bb      	str	r3, [r7, #24]
 80039fa:	e001      	b.n	8003a00 <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8003a00:	69bb      	ldr	r3, [r7, #24]
 8003a02:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a06:	d04c      	beq.n	8003aa2 <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	2b01      	cmp	r3, #1
 8003a0c:	d128      	bne.n	8003a60 <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	2b01      	cmp	r3, #1
 8003a12:	d10a      	bne.n	8003a2a <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	689b      	ldr	r3, [r3, #8]
 8003a18:	2203      	movs	r2, #3
 8003a1a:	9200      	str	r2, [sp, #0]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	2100      	movs	r1, #0
 8003a20:	2001      	movs	r0, #1
 8003a22:	f000 fa29 	bl	8003e78 <xQueueGenericCreateStatic>
 8003a26:	61f8      	str	r0, [r7, #28]
 8003a28:	e005      	b.n	8003a36 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8003a2a:	2203      	movs	r2, #3
 8003a2c:	2100      	movs	r1, #0
 8003a2e:	2001      	movs	r0, #1
 8003a30:	f000 fa9a 	bl	8003f68 <xQueueGenericCreate>
 8003a34:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d022      	beq.n	8003a82 <osSemaphoreNew+0xe8>
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d01f      	beq.n	8003a82 <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003a42:	2300      	movs	r3, #0
 8003a44:	2200      	movs	r2, #0
 8003a46:	2100      	movs	r1, #0
 8003a48:	69f8      	ldr	r0, [r7, #28]
 8003a4a:	f000 fb55 	bl	80040f8 <xQueueGenericSend>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	2b01      	cmp	r3, #1
 8003a52:	d016      	beq.n	8003a82 <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8003a54:	69f8      	ldr	r0, [r7, #28]
 8003a56:	f000 ffe1 	bl	8004a1c <vQueueDelete>
            hSemaphore = NULL;
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	61fb      	str	r3, [r7, #28]
 8003a5e:	e010      	b.n	8003a82 <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8003a60:	69bb      	ldr	r3, [r7, #24]
 8003a62:	2b01      	cmp	r3, #1
 8003a64:	d108      	bne.n	8003a78 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	689b      	ldr	r3, [r3, #8]
 8003a6a:	461a      	mov	r2, r3
 8003a6c:	68b9      	ldr	r1, [r7, #8]
 8003a6e:	68f8      	ldr	r0, [r7, #12]
 8003a70:	f000 fad7 	bl	8004022 <xQueueCreateCountingSemaphoreStatic>
 8003a74:	61f8      	str	r0, [r7, #28]
 8003a76:	e004      	b.n	8003a82 <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8003a78:	68b9      	ldr	r1, [r7, #8]
 8003a7a:	68f8      	ldr	r0, [r7, #12]
 8003a7c:	f000 fb08 	bl	8004090 <xQueueCreateCountingSemaphore>
 8003a80:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8003a82:	69fb      	ldr	r3, [r7, #28]
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d00c      	beq.n	8003aa2 <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d003      	beq.n	8003a96 <osSemaphoreNew+0xfc>
          name = attr->name;
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	617b      	str	r3, [r7, #20]
 8003a94:	e001      	b.n	8003a9a <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8003a96:	2300      	movs	r3, #0
 8003a98:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8003a9a:	6979      	ldr	r1, [r7, #20]
 8003a9c:	69f8      	ldr	r0, [r7, #28]
 8003a9e:	f001 f909 	bl	8004cb4 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8003aa2:	69fb      	ldr	r3, [r7, #28]
}
 8003aa4:	4618      	mov	r0, r3
 8003aa6:	3720      	adds	r7, #32
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003abe:	693b      	ldr	r3, [r7, #16]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d103      	bne.n	8003acc <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8003ac4:	f06f 0303 	mvn.w	r3, #3
 8003ac8:	617b      	str	r3, [r7, #20]
 8003aca:	e039      	b.n	8003b40 <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003acc:	f3ef 8305 	mrs	r3, IPSR
 8003ad0:	60fb      	str	r3, [r7, #12]
  return(result);
 8003ad2:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d022      	beq.n	8003b1e <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8003ad8:	683b      	ldr	r3, [r7, #0]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8003ade:	f06f 0303 	mvn.w	r3, #3
 8003ae2:	617b      	str	r3, [r7, #20]
 8003ae4:	e02c      	b.n	8003b40 <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8003ae6:	2300      	movs	r3, #0
 8003ae8:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8003aea:	f107 0308 	add.w	r3, r7, #8
 8003aee:	461a      	mov	r2, r3
 8003af0:	2100      	movs	r1, #0
 8003af2:	6938      	ldr	r0, [r7, #16]
 8003af4:	f000 ff12 	bl	800491c <xQueueReceiveFromISR>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b01      	cmp	r3, #1
 8003afc:	d003      	beq.n	8003b06 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8003afe:	f06f 0302 	mvn.w	r3, #2
 8003b02:	617b      	str	r3, [r7, #20]
 8003b04:	e01c      	b.n	8003b40 <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8003b06:	68bb      	ldr	r3, [r7, #8]
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d019      	beq.n	8003b40 <osSemaphoreAcquire+0x94>
 8003b0c:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <osSemaphoreAcquire+0xa0>)
 8003b0e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b12:	601a      	str	r2, [r3, #0]
 8003b14:	f3bf 8f4f 	dsb	sy
 8003b18:	f3bf 8f6f 	isb	sy
 8003b1c:	e010      	b.n	8003b40 <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8003b1e:	6839      	ldr	r1, [r7, #0]
 8003b20:	6938      	ldr	r0, [r7, #16]
 8003b22:	f000 fdef 	bl	8004704 <xQueueSemaphoreTake>
 8003b26:	4603      	mov	r3, r0
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d009      	beq.n	8003b40 <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8003b2c:	683b      	ldr	r3, [r7, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d003      	beq.n	8003b3a <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8003b32:	f06f 0301 	mvn.w	r3, #1
 8003b36:	617b      	str	r3, [r7, #20]
 8003b38:	e002      	b.n	8003b40 <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8003b3a:	f06f 0302 	mvn.w	r3, #2
 8003b3e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8003b40:	697b      	ldr	r3, [r7, #20]
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3718      	adds	r7, #24
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	e000ed04 	.word	0xe000ed04

08003b50 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8003b50:	b580      	push	{r7, lr}
 8003b52:	b086      	sub	sp, #24
 8003b54:	af00      	add	r7, sp, #0
 8003b56:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d103      	bne.n	8003b6e <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8003b66:	f06f 0303 	mvn.w	r3, #3
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	e02c      	b.n	8003bc8 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b6e:	f3ef 8305 	mrs	r3, IPSR
 8003b72:	60fb      	str	r3, [r7, #12]
  return(result);
 8003b74:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d01a      	beq.n	8003bb0 <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8003b7e:	f107 0308 	add.w	r3, r7, #8
 8003b82:	4619      	mov	r1, r3
 8003b84:	6938      	ldr	r0, [r7, #16]
 8003b86:	f000 fc50 	bl	800442a <xQueueGiveFromISR>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d003      	beq.n	8003b98 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8003b90:	f06f 0302 	mvn.w	r3, #2
 8003b94:	617b      	str	r3, [r7, #20]
 8003b96:	e017      	b.n	8003bc8 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d014      	beq.n	8003bc8 <osSemaphoreRelease+0x78>
 8003b9e:	4b0d      	ldr	r3, [pc, #52]	; (8003bd4 <osSemaphoreRelease+0x84>)
 8003ba0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	f3bf 8f4f 	dsb	sy
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	e00b      	b.n	8003bc8 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	2200      	movs	r2, #0
 8003bb4:	2100      	movs	r1, #0
 8003bb6:	6938      	ldr	r0, [r7, #16]
 8003bb8:	f000 fa9e 	bl	80040f8 <xQueueGenericSend>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b01      	cmp	r3, #1
 8003bc0:	d002      	beq.n	8003bc8 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8003bc2:	f06f 0302 	mvn.w	r3, #2
 8003bc6:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8003bc8:	697b      	ldr	r3, [r7, #20]
}
 8003bca:	4618      	mov	r0, r3
 8003bcc:	3718      	adds	r7, #24
 8003bce:	46bd      	mov	sp, r7
 8003bd0:	bd80      	pop	{r7, pc}
 8003bd2:	bf00      	nop
 8003bd4:	e000ed04 	.word	0xe000ed04

08003bd8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	60f8      	str	r0, [r7, #12]
 8003be0:	60b9      	str	r1, [r7, #8]
 8003be2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	4a07      	ldr	r2, [pc, #28]	; (8003c04 <vApplicationGetIdleTaskMemory+0x2c>)
 8003be8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003bea:	68bb      	ldr	r3, [r7, #8]
 8003bec:	4a06      	ldr	r2, [pc, #24]	; (8003c08 <vApplicationGetIdleTaskMemory+0x30>)
 8003bee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2240      	movs	r2, #64	; 0x40
 8003bf4:	601a      	str	r2, [r3, #0]
}
 8003bf6:	bf00      	nop
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop
 8003c04:	20000194 	.word	0x20000194
 8003c08:	20000250 	.word	0x20000250

08003c0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003c0c:	b480      	push	{r7}
 8003c0e:	b085      	sub	sp, #20
 8003c10:	af00      	add	r7, sp, #0
 8003c12:	60f8      	str	r0, [r7, #12]
 8003c14:	60b9      	str	r1, [r7, #8]
 8003c16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	4a07      	ldr	r2, [pc, #28]	; (8003c38 <vApplicationGetTimerTaskMemory+0x2c>)
 8003c1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003c1e:	68bb      	ldr	r3, [r7, #8]
 8003c20:	4a06      	ldr	r2, [pc, #24]	; (8003c3c <vApplicationGetTimerTaskMemory+0x30>)
 8003c22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2280      	movs	r2, #128	; 0x80
 8003c28:	601a      	str	r2, [r3, #0]
}
 8003c2a:	bf00      	nop
 8003c2c:	3714      	adds	r7, #20
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c34:	4770      	bx	lr
 8003c36:	bf00      	nop
 8003c38:	20000350 	.word	0x20000350
 8003c3c:	2000040c 	.word	0x2000040c

08003c40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003c40:	b480      	push	{r7}
 8003c42:	b083      	sub	sp, #12
 8003c44:	af00      	add	r7, sp, #0
 8003c46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	f103 0208 	add.w	r2, r3, #8
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f103 0208 	add.w	r2, r3, #8
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	f103 0208 	add.w	r2, r3, #8
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	2200      	movs	r2, #0
 8003c72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003c74:	bf00      	nop
 8003c76:	370c      	adds	r7, #12
 8003c78:	46bd      	mov	sp, r7
 8003c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7e:	4770      	bx	lr

08003c80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2200      	movs	r2, #0
 8003c8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003c8e:	bf00      	nop
 8003c90:	370c      	adds	r7, #12
 8003c92:	46bd      	mov	sp, r7
 8003c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c98:	4770      	bx	lr

08003c9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b085      	sub	sp, #20
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
 8003ca2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	685b      	ldr	r3, [r3, #4]
 8003ca8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	68fa      	ldr	r2, [r7, #12]
 8003cae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	689a      	ldr	r2, [r3, #8]
 8003cb4:	683b      	ldr	r3, [r7, #0]
 8003cb6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	689b      	ldr	r3, [r3, #8]
 8003cbc:	683a      	ldr	r2, [r7, #0]
 8003cbe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	683a      	ldr	r2, [r7, #0]
 8003cc4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	687a      	ldr	r2, [r7, #4]
 8003cca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	1c5a      	adds	r2, r3, #1
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	601a      	str	r2, [r3, #0]
}
 8003cd6:	bf00      	nop
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b085      	sub	sp, #20
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003cec:	683b      	ldr	r3, [r7, #0]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cf8:	d103      	bne.n	8003d02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	691b      	ldr	r3, [r3, #16]
 8003cfe:	60fb      	str	r3, [r7, #12]
 8003d00:	e00c      	b.n	8003d1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	3308      	adds	r3, #8
 8003d06:	60fb      	str	r3, [r7, #12]
 8003d08:	e002      	b.n	8003d10 <vListInsert+0x2e>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	60fb      	str	r3, [r7, #12]
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	68ba      	ldr	r2, [r7, #8]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d2f6      	bcs.n	8003d0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	685a      	ldr	r2, [r3, #4]
 8003d20:	683b      	ldr	r3, [r7, #0]
 8003d22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	685b      	ldr	r3, [r3, #4]
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003d2c:	683b      	ldr	r3, [r7, #0]
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	683a      	ldr	r2, [r7, #0]
 8003d36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003d38:	683b      	ldr	r3, [r7, #0]
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	1c5a      	adds	r2, r3, #1
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	601a      	str	r2, [r3, #0]
}
 8003d48:	bf00      	nop
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr

08003d54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003d54:	b480      	push	{r7}
 8003d56:	b085      	sub	sp, #20
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	691b      	ldr	r3, [r3, #16]
 8003d60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	687a      	ldr	r2, [r7, #4]
 8003d68:	6892      	ldr	r2, [r2, #8]
 8003d6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	687a      	ldr	r2, [r7, #4]
 8003d72:	6852      	ldr	r2, [r2, #4]
 8003d74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	685b      	ldr	r3, [r3, #4]
 8003d7a:	687a      	ldr	r2, [r7, #4]
 8003d7c:	429a      	cmp	r2, r3
 8003d7e:	d103      	bne.n	8003d88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	689a      	ldr	r2, [r3, #8]
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	1e5a      	subs	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	681b      	ldr	r3, [r3, #0]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3714      	adds	r7, #20
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b084      	sub	sp, #16
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d10a      	bne.n	8003dd2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003dbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dc0:	f383 8811 	msr	BASEPRI, r3
 8003dc4:	f3bf 8f6f 	isb	sy
 8003dc8:	f3bf 8f4f 	dsb	sy
 8003dcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003dce:	bf00      	nop
 8003dd0:	e7fe      	b.n	8003dd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003dd2:	f002 fd1f 	bl	8006814 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681a      	ldr	r2, [r3, #0]
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dde:	68f9      	ldr	r1, [r7, #12]
 8003de0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003de2:	fb01 f303 	mul.w	r3, r1, r3
 8003de6:	441a      	add	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681a      	ldr	r2, [r3, #0]
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e02:	3b01      	subs	r3, #1
 8003e04:	68f9      	ldr	r1, [r7, #12]
 8003e06:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003e08:	fb01 f303 	mul.w	r3, r1, r3
 8003e0c:	441a      	add	r2, r3
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	22ff      	movs	r2, #255	; 0xff
 8003e16:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	22ff      	movs	r2, #255	; 0xff
 8003e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003e22:	683b      	ldr	r3, [r7, #0]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d114      	bne.n	8003e52 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	691b      	ldr	r3, [r3, #16]
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d01a      	beq.n	8003e66 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	3310      	adds	r3, #16
 8003e34:	4618      	mov	r0, r3
 8003e36:	f001 fcbf 	bl	80057b8 <xTaskRemoveFromEventList>
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d012      	beq.n	8003e66 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003e40:	4b0c      	ldr	r3, [pc, #48]	; (8003e74 <xQueueGenericReset+0xcc>)
 8003e42:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003e46:	601a      	str	r2, [r3, #0]
 8003e48:	f3bf 8f4f 	dsb	sy
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	e009      	b.n	8003e66 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	3310      	adds	r3, #16
 8003e56:	4618      	mov	r0, r3
 8003e58:	f7ff fef2 	bl	8003c40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	3324      	adds	r3, #36	; 0x24
 8003e60:	4618      	mov	r0, r3
 8003e62:	f7ff feed 	bl	8003c40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003e66:	f002 fd05 	bl	8006874 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003e6a:	2301      	movs	r3, #1
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	3710      	adds	r7, #16
 8003e70:	46bd      	mov	sp, r7
 8003e72:	bd80      	pop	{r7, pc}
 8003e74:	e000ed04 	.word	0xe000ed04

08003e78 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003e78:	b580      	push	{r7, lr}
 8003e7a:	b08e      	sub	sp, #56	; 0x38
 8003e7c:	af02      	add	r7, sp, #8
 8003e7e:	60f8      	str	r0, [r7, #12]
 8003e80:	60b9      	str	r1, [r7, #8]
 8003e82:	607a      	str	r2, [r7, #4]
 8003e84:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d10a      	bne.n	8003ea2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003e8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e90:	f383 8811 	msr	BASEPRI, r3
 8003e94:	f3bf 8f6f 	isb	sy
 8003e98:	f3bf 8f4f 	dsb	sy
 8003e9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e9e:	bf00      	nop
 8003ea0:	e7fe      	b.n	8003ea0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003ea2:	683b      	ldr	r3, [r7, #0]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d10a      	bne.n	8003ebe <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003ea8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eac:	f383 8811 	msr	BASEPRI, r3
 8003eb0:	f3bf 8f6f 	isb	sy
 8003eb4:	f3bf 8f4f 	dsb	sy
 8003eb8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003eba:	bf00      	nop
 8003ebc:	e7fe      	b.n	8003ebc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <xQueueGenericCreateStatic+0x52>
 8003ec4:	68bb      	ldr	r3, [r7, #8]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <xQueueGenericCreateStatic+0x56>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <xQueueGenericCreateStatic+0x58>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	623b      	str	r3, [r7, #32]
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d102      	bne.n	8003ef6 <xQueueGenericCreateStatic+0x7e>
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d101      	bne.n	8003efa <xQueueGenericCreateStatic+0x82>
 8003ef6:	2301      	movs	r3, #1
 8003ef8:	e000      	b.n	8003efc <xQueueGenericCreateStatic+0x84>
 8003efa:	2300      	movs	r3, #0
 8003efc:	2b00      	cmp	r3, #0
 8003efe:	d10a      	bne.n	8003f16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f04:	f383 8811 	msr	BASEPRI, r3
 8003f08:	f3bf 8f6f 	isb	sy
 8003f0c:	f3bf 8f4f 	dsb	sy
 8003f10:	61fb      	str	r3, [r7, #28]
}
 8003f12:	bf00      	nop
 8003f14:	e7fe      	b.n	8003f14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003f16:	2350      	movs	r3, #80	; 0x50
 8003f18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	2b50      	cmp	r3, #80	; 0x50
 8003f1e:	d00a      	beq.n	8003f36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f24:	f383 8811 	msr	BASEPRI, r3
 8003f28:	f3bf 8f6f 	isb	sy
 8003f2c:	f3bf 8f4f 	dsb	sy
 8003f30:	61bb      	str	r3, [r7, #24]
}
 8003f32:	bf00      	nop
 8003f34:	e7fe      	b.n	8003f34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003f36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003f38:	683b      	ldr	r3, [r7, #0]
 8003f3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003f3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00d      	beq.n	8003f5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003f42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f44:	2201      	movs	r2, #1
 8003f46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003f4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003f4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f50:	9300      	str	r3, [sp, #0]
 8003f52:	4613      	mov	r3, r2
 8003f54:	687a      	ldr	r2, [r7, #4]
 8003f56:	68b9      	ldr	r1, [r7, #8]
 8003f58:	68f8      	ldr	r0, [r7, #12]
 8003f5a:	f000 f83f 	bl	8003fdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003f5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003f60:	4618      	mov	r0, r3
 8003f62:	3730      	adds	r7, #48	; 0x30
 8003f64:	46bd      	mov	sp, r7
 8003f66:	bd80      	pop	{r7, pc}

08003f68 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8003f68:	b580      	push	{r7, lr}
 8003f6a:	b08a      	sub	sp, #40	; 0x28
 8003f6c:	af02      	add	r7, sp, #8
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	4613      	mov	r3, r2
 8003f74:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b00      	cmp	r3, #0
 8003f7a:	d10a      	bne.n	8003f92 <xQueueGenericCreate+0x2a>
	__asm volatile
 8003f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f80:	f383 8811 	msr	BASEPRI, r3
 8003f84:	f3bf 8f6f 	isb	sy
 8003f88:	f3bf 8f4f 	dsb	sy
 8003f8c:	613b      	str	r3, [r7, #16]
}
 8003f8e:	bf00      	nop
 8003f90:	e7fe      	b.n	8003f90 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	68ba      	ldr	r2, [r7, #8]
 8003f96:	fb02 f303 	mul.w	r3, r2, r3
 8003f9a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8003f9c:	69fb      	ldr	r3, [r7, #28]
 8003f9e:	3350      	adds	r3, #80	; 0x50
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	f002 fd59 	bl	8006a58 <pvPortMalloc>
 8003fa6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d011      	beq.n	8003fd2 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8003fae:	69bb      	ldr	r3, [r7, #24]
 8003fb0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	3350      	adds	r3, #80	; 0x50
 8003fb6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	2200      	movs	r2, #0
 8003fbc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003fc0:	79fa      	ldrb	r2, [r7, #7]
 8003fc2:	69bb      	ldr	r3, [r7, #24]
 8003fc4:	9300      	str	r3, [sp, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	697a      	ldr	r2, [r7, #20]
 8003fca:	68b9      	ldr	r1, [r7, #8]
 8003fcc:	68f8      	ldr	r0, [r7, #12]
 8003fce:	f000 f805 	bl	8003fdc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003fd2:	69bb      	ldr	r3, [r7, #24]
	}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	3720      	adds	r7, #32
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	bd80      	pop	{r7, pc}

08003fdc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003fdc:	b580      	push	{r7, lr}
 8003fde:	b084      	sub	sp, #16
 8003fe0:	af00      	add	r7, sp, #0
 8003fe2:	60f8      	str	r0, [r7, #12]
 8003fe4:	60b9      	str	r1, [r7, #8]
 8003fe6:	607a      	str	r2, [r7, #4]
 8003fe8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003fea:	68bb      	ldr	r3, [r7, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d103      	bne.n	8003ff8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ff0:	69bb      	ldr	r3, [r7, #24]
 8003ff2:	69ba      	ldr	r2, [r7, #24]
 8003ff4:	601a      	str	r2, [r3, #0]
 8003ff6:	e002      	b.n	8003ffe <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ff8:	69bb      	ldr	r3, [r7, #24]
 8003ffa:	687a      	ldr	r2, [r7, #4]
 8003ffc:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003ffe:	69bb      	ldr	r3, [r7, #24]
 8004000:	68fa      	ldr	r2, [r7, #12]
 8004002:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004004:	69bb      	ldr	r3, [r7, #24]
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800400a:	2101      	movs	r1, #1
 800400c:	69b8      	ldr	r0, [r7, #24]
 800400e:	f7ff fecb 	bl	8003da8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004012:	69bb      	ldr	r3, [r7, #24]
 8004014:	78fa      	ldrb	r2, [r7, #3]
 8004016:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800401a:	bf00      	nop
 800401c:	3710      	adds	r7, #16
 800401e:	46bd      	mov	sp, r7
 8004020:	bd80      	pop	{r7, pc}

08004022 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8004022:	b580      	push	{r7, lr}
 8004024:	b08a      	sub	sp, #40	; 0x28
 8004026:	af02      	add	r7, sp, #8
 8004028:	60f8      	str	r0, [r7, #12]
 800402a:	60b9      	str	r1, [r7, #8]
 800402c:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	2b00      	cmp	r3, #0
 8004032:	d10a      	bne.n	800404a <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8004034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004038:	f383 8811 	msr	BASEPRI, r3
 800403c:	f3bf 8f6f 	isb	sy
 8004040:	f3bf 8f4f 	dsb	sy
 8004044:	61bb      	str	r3, [r7, #24]
}
 8004046:	bf00      	nop
 8004048:	e7fe      	b.n	8004048 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 800404a:	68ba      	ldr	r2, [r7, #8]
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	429a      	cmp	r2, r3
 8004050:	d90a      	bls.n	8004068 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8004052:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004056:	f383 8811 	msr	BASEPRI, r3
 800405a:	f3bf 8f6f 	isb	sy
 800405e:	f3bf 8f4f 	dsb	sy
 8004062:	617b      	str	r3, [r7, #20]
}
 8004064:	bf00      	nop
 8004066:	e7fe      	b.n	8004066 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8004068:	2302      	movs	r3, #2
 800406a:	9300      	str	r3, [sp, #0]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	2200      	movs	r2, #0
 8004070:	2100      	movs	r1, #0
 8004072:	68f8      	ldr	r0, [r7, #12]
 8004074:	f7ff ff00 	bl	8003e78 <xQueueGenericCreateStatic>
 8004078:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	2b00      	cmp	r3, #0
 800407e:	d002      	beq.n	8004086 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8004080:	69fb      	ldr	r3, [r7, #28]
 8004082:	68ba      	ldr	r2, [r7, #8]
 8004084:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004086:	69fb      	ldr	r3, [r7, #28]
	}
 8004088:	4618      	mov	r0, r3
 800408a:	3720      	adds	r7, #32
 800408c:	46bd      	mov	sp, r7
 800408e:	bd80      	pop	{r7, pc}

08004090 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af00      	add	r7, sp, #0
 8004096:	6078      	str	r0, [r7, #4]
 8004098:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d10a      	bne.n	80040b6 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 80040a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040a4:	f383 8811 	msr	BASEPRI, r3
 80040a8:	f3bf 8f6f 	isb	sy
 80040ac:	f3bf 8f4f 	dsb	sy
 80040b0:	613b      	str	r3, [r7, #16]
}
 80040b2:	bf00      	nop
 80040b4:	e7fe      	b.n	80040b4 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80040b6:	683a      	ldr	r2, [r7, #0]
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	429a      	cmp	r2, r3
 80040bc:	d90a      	bls.n	80040d4 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80040be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040c2:	f383 8811 	msr	BASEPRI, r3
 80040c6:	f3bf 8f6f 	isb	sy
 80040ca:	f3bf 8f4f 	dsb	sy
 80040ce:	60fb      	str	r3, [r7, #12]
}
 80040d0:	bf00      	nop
 80040d2:	e7fe      	b.n	80040d2 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80040d4:	2202      	movs	r2, #2
 80040d6:	2100      	movs	r1, #0
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f7ff ff45 	bl	8003f68 <xQueueGenericCreate>
 80040de:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80040e0:	697b      	ldr	r3, [r7, #20]
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d002      	beq.n	80040ec <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80040e6:	697b      	ldr	r3, [r7, #20]
 80040e8:	683a      	ldr	r2, [r7, #0]
 80040ea:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80040ec:	697b      	ldr	r3, [r7, #20]
	}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3718      	adds	r7, #24
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}
	...

080040f8 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80040f8:	b580      	push	{r7, lr}
 80040fa:	b08e      	sub	sp, #56	; 0x38
 80040fc:	af00      	add	r7, sp, #0
 80040fe:	60f8      	str	r0, [r7, #12]
 8004100:	60b9      	str	r1, [r7, #8]
 8004102:	607a      	str	r2, [r7, #4]
 8004104:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004106:	2300      	movs	r3, #0
 8004108:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800410e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004110:	2b00      	cmp	r3, #0
 8004112:	d10a      	bne.n	800412a <xQueueGenericSend+0x32>
	__asm volatile
 8004114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004118:	f383 8811 	msr	BASEPRI, r3
 800411c:	f3bf 8f6f 	isb	sy
 8004120:	f3bf 8f4f 	dsb	sy
 8004124:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004126:	bf00      	nop
 8004128:	e7fe      	b.n	8004128 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800412a:	68bb      	ldr	r3, [r7, #8]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d103      	bne.n	8004138 <xQueueGenericSend+0x40>
 8004130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004134:	2b00      	cmp	r3, #0
 8004136:	d101      	bne.n	800413c <xQueueGenericSend+0x44>
 8004138:	2301      	movs	r3, #1
 800413a:	e000      	b.n	800413e <xQueueGenericSend+0x46>
 800413c:	2300      	movs	r3, #0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d10a      	bne.n	8004158 <xQueueGenericSend+0x60>
	__asm volatile
 8004142:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004146:	f383 8811 	msr	BASEPRI, r3
 800414a:	f3bf 8f6f 	isb	sy
 800414e:	f3bf 8f4f 	dsb	sy
 8004152:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004154:	bf00      	nop
 8004156:	e7fe      	b.n	8004156 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004158:	683b      	ldr	r3, [r7, #0]
 800415a:	2b02      	cmp	r3, #2
 800415c:	d103      	bne.n	8004166 <xQueueGenericSend+0x6e>
 800415e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004160:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <xQueueGenericSend+0x72>
 8004166:	2301      	movs	r3, #1
 8004168:	e000      	b.n	800416c <xQueueGenericSend+0x74>
 800416a:	2300      	movs	r3, #0
 800416c:	2b00      	cmp	r3, #0
 800416e:	d10a      	bne.n	8004186 <xQueueGenericSend+0x8e>
	__asm volatile
 8004170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004174:	f383 8811 	msr	BASEPRI, r3
 8004178:	f3bf 8f6f 	isb	sy
 800417c:	f3bf 8f4f 	dsb	sy
 8004180:	623b      	str	r3, [r7, #32]
}
 8004182:	bf00      	nop
 8004184:	e7fe      	b.n	8004184 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004186:	f001 fce9 	bl	8005b5c <xTaskGetSchedulerState>
 800418a:	4603      	mov	r3, r0
 800418c:	2b00      	cmp	r3, #0
 800418e:	d102      	bne.n	8004196 <xQueueGenericSend+0x9e>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2b00      	cmp	r3, #0
 8004194:	d101      	bne.n	800419a <xQueueGenericSend+0xa2>
 8004196:	2301      	movs	r3, #1
 8004198:	e000      	b.n	800419c <xQueueGenericSend+0xa4>
 800419a:	2300      	movs	r3, #0
 800419c:	2b00      	cmp	r3, #0
 800419e:	d10a      	bne.n	80041b6 <xQueueGenericSend+0xbe>
	__asm volatile
 80041a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a4:	f383 8811 	msr	BASEPRI, r3
 80041a8:	f3bf 8f6f 	isb	sy
 80041ac:	f3bf 8f4f 	dsb	sy
 80041b0:	61fb      	str	r3, [r7, #28]
}
 80041b2:	bf00      	nop
 80041b4:	e7fe      	b.n	80041b4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80041b6:	f002 fb2d 	bl	8006814 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d302      	bcc.n	80041cc <xQueueGenericSend+0xd4>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d129      	bne.n	8004220 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041cc:	683a      	ldr	r2, [r7, #0]
 80041ce:	68b9      	ldr	r1, [r7, #8]
 80041d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80041d2:	f000 fc5e 	bl	8004a92 <prvCopyDataToQueue>
 80041d6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d010      	beq.n	8004202 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041e2:	3324      	adds	r3, #36	; 0x24
 80041e4:	4618      	mov	r0, r3
 80041e6:	f001 fae7 	bl	80057b8 <xTaskRemoveFromEventList>
 80041ea:	4603      	mov	r3, r0
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d013      	beq.n	8004218 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80041f0:	4b3f      	ldr	r3, [pc, #252]	; (80042f0 <xQueueGenericSend+0x1f8>)
 80041f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041f6:	601a      	str	r2, [r3, #0]
 80041f8:	f3bf 8f4f 	dsb	sy
 80041fc:	f3bf 8f6f 	isb	sy
 8004200:	e00a      	b.n	8004218 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004202:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004204:	2b00      	cmp	r3, #0
 8004206:	d007      	beq.n	8004218 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004208:	4b39      	ldr	r3, [pc, #228]	; (80042f0 <xQueueGenericSend+0x1f8>)
 800420a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800420e:	601a      	str	r2, [r3, #0]
 8004210:	f3bf 8f4f 	dsb	sy
 8004214:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004218:	f002 fb2c 	bl	8006874 <vPortExitCritical>
				return pdPASS;
 800421c:	2301      	movs	r3, #1
 800421e:	e063      	b.n	80042e8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d103      	bne.n	800422e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004226:	f002 fb25 	bl	8006874 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800422a:	2300      	movs	r3, #0
 800422c:	e05c      	b.n	80042e8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800422e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004230:	2b00      	cmp	r3, #0
 8004232:	d106      	bne.n	8004242 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004234:	f107 0314 	add.w	r3, r7, #20
 8004238:	4618      	mov	r0, r3
 800423a:	f001 fb21 	bl	8005880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800423e:	2301      	movs	r3, #1
 8004240:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004242:	f002 fb17 	bl	8006874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004246:	f001 f857 	bl	80052f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800424a:	f002 fae3 	bl	8006814 <vPortEnterCritical>
 800424e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004250:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004254:	b25b      	sxtb	r3, r3
 8004256:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800425a:	d103      	bne.n	8004264 <xQueueGenericSend+0x16c>
 800425c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800425e:	2200      	movs	r2, #0
 8004260:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004264:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004266:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800426a:	b25b      	sxtb	r3, r3
 800426c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004270:	d103      	bne.n	800427a <xQueueGenericSend+0x182>
 8004272:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800427a:	f002 fafb 	bl	8006874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800427e:	1d3a      	adds	r2, r7, #4
 8004280:	f107 0314 	add.w	r3, r7, #20
 8004284:	4611      	mov	r1, r2
 8004286:	4618      	mov	r0, r3
 8004288:	f001 fb10 	bl	80058ac <xTaskCheckForTimeOut>
 800428c:	4603      	mov	r3, r0
 800428e:	2b00      	cmp	r3, #0
 8004290:	d124      	bne.n	80042dc <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004292:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004294:	f000 fcf5 	bl	8004c82 <prvIsQueueFull>
 8004298:	4603      	mov	r3, r0
 800429a:	2b00      	cmp	r3, #0
 800429c:	d018      	beq.n	80042d0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800429e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a0:	3310      	adds	r3, #16
 80042a2:	687a      	ldr	r2, [r7, #4]
 80042a4:	4611      	mov	r1, r2
 80042a6:	4618      	mov	r0, r3
 80042a8:	f001 fa36 	bl	8005718 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80042ac:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042ae:	f000 fc80 	bl	8004bb2 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80042b2:	f001 f82f 	bl	8005314 <xTaskResumeAll>
 80042b6:	4603      	mov	r3, r0
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	f47f af7c 	bne.w	80041b6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80042be:	4b0c      	ldr	r3, [pc, #48]	; (80042f0 <xQueueGenericSend+0x1f8>)
 80042c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80042c4:	601a      	str	r2, [r3, #0]
 80042c6:	f3bf 8f4f 	dsb	sy
 80042ca:	f3bf 8f6f 	isb	sy
 80042ce:	e772      	b.n	80041b6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80042d0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042d2:	f000 fc6e 	bl	8004bb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80042d6:	f001 f81d 	bl	8005314 <xTaskResumeAll>
 80042da:	e76c      	b.n	80041b6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80042dc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80042de:	f000 fc68 	bl	8004bb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80042e2:	f001 f817 	bl	8005314 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80042e6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3738      	adds	r7, #56	; 0x38
 80042ec:	46bd      	mov	sp, r7
 80042ee:	bd80      	pop	{r7, pc}
 80042f0:	e000ed04 	.word	0xe000ed04

080042f4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80042f4:	b580      	push	{r7, lr}
 80042f6:	b090      	sub	sp, #64	; 0x40
 80042f8:	af00      	add	r7, sp, #0
 80042fa:	60f8      	str	r0, [r7, #12]
 80042fc:	60b9      	str	r1, [r7, #8]
 80042fe:	607a      	str	r2, [r7, #4]
 8004300:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004306:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800430c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004310:	f383 8811 	msr	BASEPRI, r3
 8004314:	f3bf 8f6f 	isb	sy
 8004318:	f3bf 8f4f 	dsb	sy
 800431c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800431e:	bf00      	nop
 8004320:	e7fe      	b.n	8004320 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d103      	bne.n	8004330 <xQueueGenericSendFromISR+0x3c>
 8004328:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800432a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800432c:	2b00      	cmp	r3, #0
 800432e:	d101      	bne.n	8004334 <xQueueGenericSendFromISR+0x40>
 8004330:	2301      	movs	r3, #1
 8004332:	e000      	b.n	8004336 <xQueueGenericSendFromISR+0x42>
 8004334:	2300      	movs	r3, #0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d10a      	bne.n	8004350 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800433a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800433e:	f383 8811 	msr	BASEPRI, r3
 8004342:	f3bf 8f6f 	isb	sy
 8004346:	f3bf 8f4f 	dsb	sy
 800434a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800434c:	bf00      	nop
 800434e:	e7fe      	b.n	800434e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	2b02      	cmp	r3, #2
 8004354:	d103      	bne.n	800435e <xQueueGenericSendFromISR+0x6a>
 8004356:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004358:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800435a:	2b01      	cmp	r3, #1
 800435c:	d101      	bne.n	8004362 <xQueueGenericSendFromISR+0x6e>
 800435e:	2301      	movs	r3, #1
 8004360:	e000      	b.n	8004364 <xQueueGenericSendFromISR+0x70>
 8004362:	2300      	movs	r3, #0
 8004364:	2b00      	cmp	r3, #0
 8004366:	d10a      	bne.n	800437e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800436c:	f383 8811 	msr	BASEPRI, r3
 8004370:	f3bf 8f6f 	isb	sy
 8004374:	f3bf 8f4f 	dsb	sy
 8004378:	623b      	str	r3, [r7, #32]
}
 800437a:	bf00      	nop
 800437c:	e7fe      	b.n	800437c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800437e:	f002 fb2b 	bl	80069d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004382:	f3ef 8211 	mrs	r2, BASEPRI
 8004386:	f04f 0350 	mov.w	r3, #80	; 0x50
 800438a:	f383 8811 	msr	BASEPRI, r3
 800438e:	f3bf 8f6f 	isb	sy
 8004392:	f3bf 8f4f 	dsb	sy
 8004396:	61fa      	str	r2, [r7, #28]
 8004398:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800439a:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800439c:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800439e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80043a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <xQueueGenericSendFromISR+0xbc>
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	2b02      	cmp	r3, #2
 80043ae:	d12f      	bne.n	8004410 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80043b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043b2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80043b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80043ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80043be:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	68b9      	ldr	r1, [r7, #8]
 80043c4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80043c6:	f000 fb64 	bl	8004a92 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80043ca:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80043ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80043d2:	d112      	bne.n	80043fa <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80043d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d016      	beq.n	800440a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80043dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043de:	3324      	adds	r3, #36	; 0x24
 80043e0:	4618      	mov	r0, r3
 80043e2:	f001 f9e9 	bl	80057b8 <xTaskRemoveFromEventList>
 80043e6:	4603      	mov	r3, r0
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d00e      	beq.n	800440a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d00b      	beq.n	800440a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2201      	movs	r2, #1
 80043f6:	601a      	str	r2, [r3, #0]
 80043f8:	e007      	b.n	800440a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80043fa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043fe:	3301      	adds	r3, #1
 8004400:	b2db      	uxtb	r3, r3
 8004402:	b25a      	sxtb	r2, r3
 8004404:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004406:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800440a:	2301      	movs	r3, #1
 800440c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800440e:	e001      	b.n	8004414 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004410:	2300      	movs	r3, #0
 8004412:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004414:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004416:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800441e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004420:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004422:	4618      	mov	r0, r3
 8004424:	3740      	adds	r7, #64	; 0x40
 8004426:	46bd      	mov	sp, r7
 8004428:	bd80      	pop	{r7, pc}

0800442a <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800442a:	b580      	push	{r7, lr}
 800442c:	b08e      	sub	sp, #56	; 0x38
 800442e:	af00      	add	r7, sp, #0
 8004430:	6078      	str	r0, [r7, #4]
 8004432:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8004438:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10a      	bne.n	8004454 <xQueueGiveFromISR+0x2a>
	__asm volatile
 800443e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004442:	f383 8811 	msr	BASEPRI, r3
 8004446:	f3bf 8f6f 	isb	sy
 800444a:	f3bf 8f4f 	dsb	sy
 800444e:	623b      	str	r3, [r7, #32]
}
 8004450:	bf00      	nop
 8004452:	e7fe      	b.n	8004452 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004458:	2b00      	cmp	r3, #0
 800445a:	d00a      	beq.n	8004472 <xQueueGiveFromISR+0x48>
	__asm volatile
 800445c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004460:	f383 8811 	msr	BASEPRI, r3
 8004464:	f3bf 8f6f 	isb	sy
 8004468:	f3bf 8f4f 	dsb	sy
 800446c:	61fb      	str	r3, [r7, #28]
}
 800446e:	bf00      	nop
 8004470:	e7fe      	b.n	8004470 <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8004472:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	2b00      	cmp	r3, #0
 8004478:	d103      	bne.n	8004482 <xQueueGiveFromISR+0x58>
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	689b      	ldr	r3, [r3, #8]
 800447e:	2b00      	cmp	r3, #0
 8004480:	d101      	bne.n	8004486 <xQueueGiveFromISR+0x5c>
 8004482:	2301      	movs	r3, #1
 8004484:	e000      	b.n	8004488 <xQueueGiveFromISR+0x5e>
 8004486:	2300      	movs	r3, #0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d10a      	bne.n	80044a2 <xQueueGiveFromISR+0x78>
	__asm volatile
 800448c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004490:	f383 8811 	msr	BASEPRI, r3
 8004494:	f3bf 8f6f 	isb	sy
 8004498:	f3bf 8f4f 	dsb	sy
 800449c:	61bb      	str	r3, [r7, #24]
}
 800449e:	bf00      	nop
 80044a0:	e7fe      	b.n	80044a0 <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80044a2:	f002 fa99 	bl	80069d8 <vPortValidateInterruptPriority>
	__asm volatile
 80044a6:	f3ef 8211 	mrs	r2, BASEPRI
 80044aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ae:	f383 8811 	msr	BASEPRI, r3
 80044b2:	f3bf 8f6f 	isb	sy
 80044b6:	f3bf 8f4f 	dsb	sy
 80044ba:	617a      	str	r2, [r7, #20]
 80044bc:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 80044be:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80044c0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80044c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044c6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 80044c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044cc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80044ce:	429a      	cmp	r2, r3
 80044d0:	d22b      	bcs.n	800452a <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80044d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80044d8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044de:	1c5a      	adds	r2, r3, #1
 80044e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e2:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80044e4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80044e8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80044ec:	d112      	bne.n	8004514 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80044ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d016      	beq.n	8004524 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80044f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044f8:	3324      	adds	r3, #36	; 0x24
 80044fa:	4618      	mov	r0, r3
 80044fc:	f001 f95c 	bl	80057b8 <xTaskRemoveFromEventList>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d00e      	beq.n	8004524 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b00      	cmp	r3, #0
 800450a:	d00b      	beq.n	8004524 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2201      	movs	r2, #1
 8004510:	601a      	str	r2, [r3, #0]
 8004512:	e007      	b.n	8004524 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004514:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8004518:	3301      	adds	r3, #1
 800451a:	b2db      	uxtb	r3, r3
 800451c:	b25a      	sxtb	r2, r3
 800451e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004520:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004524:	2301      	movs	r3, #1
 8004526:	637b      	str	r3, [r7, #52]	; 0x34
 8004528:	e001      	b.n	800452e <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800452a:	2300      	movs	r3, #0
 800452c:	637b      	str	r3, [r7, #52]	; 0x34
 800452e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004530:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	f383 8811 	msr	BASEPRI, r3
}
 8004538:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800453a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800453c:	4618      	mov	r0, r3
 800453e:	3738      	adds	r7, #56	; 0x38
 8004540:	46bd      	mov	sp, r7
 8004542:	bd80      	pop	{r7, pc}

08004544 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004544:	b580      	push	{r7, lr}
 8004546:	b08c      	sub	sp, #48	; 0x30
 8004548:	af00      	add	r7, sp, #0
 800454a:	60f8      	str	r0, [r7, #12]
 800454c:	60b9      	str	r1, [r7, #8]
 800454e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004550:	2300      	movs	r3, #0
 8004552:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800455a:	2b00      	cmp	r3, #0
 800455c:	d10a      	bne.n	8004574 <xQueueReceive+0x30>
	__asm volatile
 800455e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004562:	f383 8811 	msr	BASEPRI, r3
 8004566:	f3bf 8f6f 	isb	sy
 800456a:	f3bf 8f4f 	dsb	sy
 800456e:	623b      	str	r3, [r7, #32]
}
 8004570:	bf00      	nop
 8004572:	e7fe      	b.n	8004572 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	2b00      	cmp	r3, #0
 8004578:	d103      	bne.n	8004582 <xQueueReceive+0x3e>
 800457a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800457c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800457e:	2b00      	cmp	r3, #0
 8004580:	d101      	bne.n	8004586 <xQueueReceive+0x42>
 8004582:	2301      	movs	r3, #1
 8004584:	e000      	b.n	8004588 <xQueueReceive+0x44>
 8004586:	2300      	movs	r3, #0
 8004588:	2b00      	cmp	r3, #0
 800458a:	d10a      	bne.n	80045a2 <xQueueReceive+0x5e>
	__asm volatile
 800458c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004590:	f383 8811 	msr	BASEPRI, r3
 8004594:	f3bf 8f6f 	isb	sy
 8004598:	f3bf 8f4f 	dsb	sy
 800459c:	61fb      	str	r3, [r7, #28]
}
 800459e:	bf00      	nop
 80045a0:	e7fe      	b.n	80045a0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045a2:	f001 fadb 	bl	8005b5c <xTaskGetSchedulerState>
 80045a6:	4603      	mov	r3, r0
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d102      	bne.n	80045b2 <xQueueReceive+0x6e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <xQueueReceive+0x72>
 80045b2:	2301      	movs	r3, #1
 80045b4:	e000      	b.n	80045b8 <xQueueReceive+0x74>
 80045b6:	2300      	movs	r3, #0
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d10a      	bne.n	80045d2 <xQueueReceive+0x8e>
	__asm volatile
 80045bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045c0:	f383 8811 	msr	BASEPRI, r3
 80045c4:	f3bf 8f6f 	isb	sy
 80045c8:	f3bf 8f4f 	dsb	sy
 80045cc:	61bb      	str	r3, [r7, #24]
}
 80045ce:	bf00      	nop
 80045d0:	e7fe      	b.n	80045d0 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80045d2:	f002 f91f 	bl	8006814 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80045d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045da:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d01f      	beq.n	8004622 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80045e2:	68b9      	ldr	r1, [r7, #8]
 80045e4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80045e6:	f000 fabe 	bl	8004b66 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80045ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ec:	1e5a      	subs	r2, r3, #1
 80045ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045f4:	691b      	ldr	r3, [r3, #16]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00f      	beq.n	800461a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80045fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045fc:	3310      	adds	r3, #16
 80045fe:	4618      	mov	r0, r3
 8004600:	f001 f8da 	bl	80057b8 <xTaskRemoveFromEventList>
 8004604:	4603      	mov	r3, r0
 8004606:	2b00      	cmp	r3, #0
 8004608:	d007      	beq.n	800461a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800460a:	4b3d      	ldr	r3, [pc, #244]	; (8004700 <xQueueReceive+0x1bc>)
 800460c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004610:	601a      	str	r2, [r3, #0]
 8004612:	f3bf 8f4f 	dsb	sy
 8004616:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800461a:	f002 f92b 	bl	8006874 <vPortExitCritical>
				return pdPASS;
 800461e:	2301      	movs	r3, #1
 8004620:	e069      	b.n	80046f6 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	2b00      	cmp	r3, #0
 8004626:	d103      	bne.n	8004630 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004628:	f002 f924 	bl	8006874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800462c:	2300      	movs	r3, #0
 800462e:	e062      	b.n	80046f6 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004630:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004632:	2b00      	cmp	r3, #0
 8004634:	d106      	bne.n	8004644 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004636:	f107 0310 	add.w	r3, r7, #16
 800463a:	4618      	mov	r0, r3
 800463c:	f001 f920 	bl	8005880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004640:	2301      	movs	r3, #1
 8004642:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004644:	f002 f916 	bl	8006874 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004648:	f000 fe56 	bl	80052f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800464c:	f002 f8e2 	bl	8006814 <vPortEnterCritical>
 8004650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004652:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004656:	b25b      	sxtb	r3, r3
 8004658:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800465c:	d103      	bne.n	8004666 <xQueueReceive+0x122>
 800465e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004660:	2200      	movs	r2, #0
 8004662:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004666:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004668:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800466c:	b25b      	sxtb	r3, r3
 800466e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004672:	d103      	bne.n	800467c <xQueueReceive+0x138>
 8004674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004676:	2200      	movs	r2, #0
 8004678:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800467c:	f002 f8fa 	bl	8006874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004680:	1d3a      	adds	r2, r7, #4
 8004682:	f107 0310 	add.w	r3, r7, #16
 8004686:	4611      	mov	r1, r2
 8004688:	4618      	mov	r0, r3
 800468a:	f001 f90f 	bl	80058ac <xTaskCheckForTimeOut>
 800468e:	4603      	mov	r3, r0
 8004690:	2b00      	cmp	r3, #0
 8004692:	d123      	bne.n	80046dc <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004694:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004696:	f000 fade 	bl	8004c56 <prvIsQueueEmpty>
 800469a:	4603      	mov	r3, r0
 800469c:	2b00      	cmp	r3, #0
 800469e:	d017      	beq.n	80046d0 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80046a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80046a2:	3324      	adds	r3, #36	; 0x24
 80046a4:	687a      	ldr	r2, [r7, #4]
 80046a6:	4611      	mov	r1, r2
 80046a8:	4618      	mov	r0, r3
 80046aa:	f001 f835 	bl	8005718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80046ae:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046b0:	f000 fa7f 	bl	8004bb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80046b4:	f000 fe2e 	bl	8005314 <xTaskResumeAll>
 80046b8:	4603      	mov	r3, r0
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d189      	bne.n	80045d2 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80046be:	4b10      	ldr	r3, [pc, #64]	; (8004700 <xQueueReceive+0x1bc>)
 80046c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046c4:	601a      	str	r2, [r3, #0]
 80046c6:	f3bf 8f4f 	dsb	sy
 80046ca:	f3bf 8f6f 	isb	sy
 80046ce:	e780      	b.n	80045d2 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80046d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046d2:	f000 fa6e 	bl	8004bb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80046d6:	f000 fe1d 	bl	8005314 <xTaskResumeAll>
 80046da:	e77a      	b.n	80045d2 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80046dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046de:	f000 fa68 	bl	8004bb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80046e2:	f000 fe17 	bl	8005314 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80046e6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80046e8:	f000 fab5 	bl	8004c56 <prvIsQueueEmpty>
 80046ec:	4603      	mov	r3, r0
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	f43f af6f 	beq.w	80045d2 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80046f4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80046f6:	4618      	mov	r0, r3
 80046f8:	3730      	adds	r7, #48	; 0x30
 80046fa:	46bd      	mov	sp, r7
 80046fc:	bd80      	pop	{r7, pc}
 80046fe:	bf00      	nop
 8004700:	e000ed04 	.word	0xe000ed04

08004704 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004704:	b580      	push	{r7, lr}
 8004706:	b08e      	sub	sp, #56	; 0x38
 8004708:	af00      	add	r7, sp, #0
 800470a:	6078      	str	r0, [r7, #4]
 800470c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800470e:	2300      	movs	r3, #0
 8004710:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004716:	2300      	movs	r3, #0
 8004718:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800471a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10a      	bne.n	8004736 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004724:	f383 8811 	msr	BASEPRI, r3
 8004728:	f3bf 8f6f 	isb	sy
 800472c:	f3bf 8f4f 	dsb	sy
 8004730:	623b      	str	r3, [r7, #32]
}
 8004732:	bf00      	nop
 8004734:	e7fe      	b.n	8004734 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004736:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800473a:	2b00      	cmp	r3, #0
 800473c:	d00a      	beq.n	8004754 <xQueueSemaphoreTake+0x50>
	__asm volatile
 800473e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004742:	f383 8811 	msr	BASEPRI, r3
 8004746:	f3bf 8f6f 	isb	sy
 800474a:	f3bf 8f4f 	dsb	sy
 800474e:	61fb      	str	r3, [r7, #28]
}
 8004750:	bf00      	nop
 8004752:	e7fe      	b.n	8004752 <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004754:	f001 fa02 	bl	8005b5c <xTaskGetSchedulerState>
 8004758:	4603      	mov	r3, r0
 800475a:	2b00      	cmp	r3, #0
 800475c:	d102      	bne.n	8004764 <xQueueSemaphoreTake+0x60>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d101      	bne.n	8004768 <xQueueSemaphoreTake+0x64>
 8004764:	2301      	movs	r3, #1
 8004766:	e000      	b.n	800476a <xQueueSemaphoreTake+0x66>
 8004768:	2300      	movs	r3, #0
 800476a:	2b00      	cmp	r3, #0
 800476c:	d10a      	bne.n	8004784 <xQueueSemaphoreTake+0x80>
	__asm volatile
 800476e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004772:	f383 8811 	msr	BASEPRI, r3
 8004776:	f3bf 8f6f 	isb	sy
 800477a:	f3bf 8f4f 	dsb	sy
 800477e:	61bb      	str	r3, [r7, #24]
}
 8004780:	bf00      	nop
 8004782:	e7fe      	b.n	8004782 <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004784:	f002 f846 	bl	8006814 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800478a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800478c:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800478e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004790:	2b00      	cmp	r3, #0
 8004792:	d024      	beq.n	80047de <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004794:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004796:	1e5a      	subs	r2, r3, #1
 8004798:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479a:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800479c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d104      	bne.n	80047ae <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 80047a4:	f001 fb50 	bl	8005e48 <pvTaskIncrementMutexHeldCount>
 80047a8:	4602      	mov	r2, r0
 80047aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047ac:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80047ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d00f      	beq.n	80047d6 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80047b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047b8:	3310      	adds	r3, #16
 80047ba:	4618      	mov	r0, r3
 80047bc:	f000 fffc 	bl	80057b8 <xTaskRemoveFromEventList>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d007      	beq.n	80047d6 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80047c6:	4b54      	ldr	r3, [pc, #336]	; (8004918 <xQueueSemaphoreTake+0x214>)
 80047c8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047cc:	601a      	str	r2, [r3, #0]
 80047ce:	f3bf 8f4f 	dsb	sy
 80047d2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80047d6:	f002 f84d 	bl	8006874 <vPortExitCritical>
				return pdPASS;
 80047da:	2301      	movs	r3, #1
 80047dc:	e097      	b.n	800490e <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80047de:	683b      	ldr	r3, [r7, #0]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d111      	bne.n	8004808 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80047e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d00a      	beq.n	8004800 <xQueueSemaphoreTake+0xfc>
	__asm volatile
 80047ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047ee:	f383 8811 	msr	BASEPRI, r3
 80047f2:	f3bf 8f6f 	isb	sy
 80047f6:	f3bf 8f4f 	dsb	sy
 80047fa:	617b      	str	r3, [r7, #20]
}
 80047fc:	bf00      	nop
 80047fe:	e7fe      	b.n	80047fe <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004800:	f002 f838 	bl	8006874 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004804:	2300      	movs	r3, #0
 8004806:	e082      	b.n	800490e <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004808:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800480a:	2b00      	cmp	r3, #0
 800480c:	d106      	bne.n	800481c <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800480e:	f107 030c 	add.w	r3, r7, #12
 8004812:	4618      	mov	r0, r3
 8004814:	f001 f834 	bl	8005880 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004818:	2301      	movs	r3, #1
 800481a:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800481c:	f002 f82a 	bl	8006874 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004820:	f000 fd6a 	bl	80052f8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004824:	f001 fff6 	bl	8006814 <vPortEnterCritical>
 8004828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800482a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800482e:	b25b      	sxtb	r3, r3
 8004830:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004834:	d103      	bne.n	800483e <xQueueSemaphoreTake+0x13a>
 8004836:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004838:	2200      	movs	r2, #0
 800483a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800483e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004840:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004844:	b25b      	sxtb	r3, r3
 8004846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800484a:	d103      	bne.n	8004854 <xQueueSemaphoreTake+0x150>
 800484c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800484e:	2200      	movs	r2, #0
 8004850:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004854:	f002 f80e 	bl	8006874 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004858:	463a      	mov	r2, r7
 800485a:	f107 030c 	add.w	r3, r7, #12
 800485e:	4611      	mov	r1, r2
 8004860:	4618      	mov	r0, r3
 8004862:	f001 f823 	bl	80058ac <xTaskCheckForTimeOut>
 8004866:	4603      	mov	r3, r0
 8004868:	2b00      	cmp	r3, #0
 800486a:	d132      	bne.n	80048d2 <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800486c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800486e:	f000 f9f2 	bl	8004c56 <prvIsQueueEmpty>
 8004872:	4603      	mov	r3, r0
 8004874:	2b00      	cmp	r3, #0
 8004876:	d026      	beq.n	80048c6 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	2b00      	cmp	r3, #0
 800487e:	d109      	bne.n	8004894 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004880:	f001 ffc8 	bl	8006814 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004886:	689b      	ldr	r3, [r3, #8]
 8004888:	4618      	mov	r0, r3
 800488a:	f001 f985 	bl	8005b98 <xTaskPriorityInherit>
 800488e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004890:	f001 fff0 	bl	8006874 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004894:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004896:	3324      	adds	r3, #36	; 0x24
 8004898:	683a      	ldr	r2, [r7, #0]
 800489a:	4611      	mov	r1, r2
 800489c:	4618      	mov	r0, r3
 800489e:	f000 ff3b 	bl	8005718 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80048a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048a4:	f000 f985 	bl	8004bb2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80048a8:	f000 fd34 	bl	8005314 <xTaskResumeAll>
 80048ac:	4603      	mov	r3, r0
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	f47f af68 	bne.w	8004784 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80048b4:	4b18      	ldr	r3, [pc, #96]	; (8004918 <xQueueSemaphoreTake+0x214>)
 80048b6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048ba:	601a      	str	r2, [r3, #0]
 80048bc:	f3bf 8f4f 	dsb	sy
 80048c0:	f3bf 8f6f 	isb	sy
 80048c4:	e75e      	b.n	8004784 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80048c6:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048c8:	f000 f973 	bl	8004bb2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80048cc:	f000 fd22 	bl	8005314 <xTaskResumeAll>
 80048d0:	e758      	b.n	8004784 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80048d2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048d4:	f000 f96d 	bl	8004bb2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80048d8:	f000 fd1c 	bl	8005314 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80048dc:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048de:	f000 f9ba 	bl	8004c56 <prvIsQueueEmpty>
 80048e2:	4603      	mov	r3, r0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	f43f af4d 	beq.w	8004784 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d00d      	beq.n	800490c <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80048f0:	f001 ff90 	bl	8006814 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80048f4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80048f6:	f000 f8b4 	bl	8004a62 <prvGetDisinheritPriorityAfterTimeout>
 80048fa:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80048fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048fe:	689b      	ldr	r3, [r3, #8]
 8004900:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004902:	4618      	mov	r0, r3
 8004904:	f001 fa1e 	bl	8005d44 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004908:	f001 ffb4 	bl	8006874 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800490c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800490e:	4618      	mov	r0, r3
 8004910:	3738      	adds	r7, #56	; 0x38
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	e000ed04 	.word	0xe000ed04

0800491c <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800491c:	b580      	push	{r7, lr}
 800491e:	b08e      	sub	sp, #56	; 0x38
 8004920:	af00      	add	r7, sp, #0
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800492c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800492e:	2b00      	cmp	r3, #0
 8004930:	d10a      	bne.n	8004948 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8004932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004936:	f383 8811 	msr	BASEPRI, r3
 800493a:	f3bf 8f6f 	isb	sy
 800493e:	f3bf 8f4f 	dsb	sy
 8004942:	623b      	str	r3, [r7, #32]
}
 8004944:	bf00      	nop
 8004946:	e7fe      	b.n	8004946 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <xQueueReceiveFromISR+0x3a>
 800494e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004952:	2b00      	cmp	r3, #0
 8004954:	d101      	bne.n	800495a <xQueueReceiveFromISR+0x3e>
 8004956:	2301      	movs	r3, #1
 8004958:	e000      	b.n	800495c <xQueueReceiveFromISR+0x40>
 800495a:	2300      	movs	r3, #0
 800495c:	2b00      	cmp	r3, #0
 800495e:	d10a      	bne.n	8004976 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8004960:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004964:	f383 8811 	msr	BASEPRI, r3
 8004968:	f3bf 8f6f 	isb	sy
 800496c:	f3bf 8f4f 	dsb	sy
 8004970:	61fb      	str	r3, [r7, #28]
}
 8004972:	bf00      	nop
 8004974:	e7fe      	b.n	8004974 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004976:	f002 f82f 	bl	80069d8 <vPortValidateInterruptPriority>
	__asm volatile
 800497a:	f3ef 8211 	mrs	r2, BASEPRI
 800497e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004982:	f383 8811 	msr	BASEPRI, r3
 8004986:	f3bf 8f6f 	isb	sy
 800498a:	f3bf 8f4f 	dsb	sy
 800498e:	61ba      	str	r2, [r7, #24]
 8004990:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8004992:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004994:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004996:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004998:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800499a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800499c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d02f      	beq.n	8004a02 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80049a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049a4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049a8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80049ac:	68b9      	ldr	r1, [r7, #8]
 80049ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80049b0:	f000 f8d9 	bl	8004b66 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80049b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049b6:	1e5a      	subs	r2, r3, #1
 80049b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049ba:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80049bc:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80049c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049c4:	d112      	bne.n	80049ec <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d016      	beq.n	80049fc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049d0:	3310      	adds	r3, #16
 80049d2:	4618      	mov	r0, r3
 80049d4:	f000 fef0 	bl	80057b8 <xTaskRemoveFromEventList>
 80049d8:	4603      	mov	r3, r0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00e      	beq.n	80049fc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d00b      	beq.n	80049fc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	601a      	str	r2, [r3, #0]
 80049ea:	e007      	b.n	80049fc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80049ec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80049f0:	3301      	adds	r3, #1
 80049f2:	b2db      	uxtb	r3, r3
 80049f4:	b25a      	sxtb	r2, r3
 80049f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80049fc:	2301      	movs	r3, #1
 80049fe:	637b      	str	r3, [r7, #52]	; 0x34
 8004a00:	e001      	b.n	8004a06 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	637b      	str	r3, [r7, #52]	; 0x34
 8004a06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a08:	613b      	str	r3, [r7, #16]
	__asm volatile
 8004a0a:	693b      	ldr	r3, [r7, #16]
 8004a0c:	f383 8811 	msr	BASEPRI, r3
}
 8004a10:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004a12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3738      	adds	r7, #56	; 0x38
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <vQueueDelete>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b084      	sub	sp, #16
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10a      	bne.n	8004a44 <vQueueDelete+0x28>
	__asm volatile
 8004a2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a32:	f383 8811 	msr	BASEPRI, r3
 8004a36:	f3bf 8f6f 	isb	sy
 8004a3a:	f3bf 8f4f 	dsb	sy
 8004a3e:	60bb      	str	r3, [r7, #8]
}
 8004a40:	bf00      	nop
 8004a42:	e7fe      	b.n	8004a42 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 8004a44:	68f8      	ldr	r0, [r7, #12]
 8004a46:	f000 f95f 	bl	8004d08 <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d102      	bne.n	8004a5a <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 8004a54:	68f8      	ldr	r0, [r7, #12]
 8004a56:	f002 f8cb 	bl	8006bf0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 8004a5a:	bf00      	nop
 8004a5c:	3710      	adds	r7, #16
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	bd80      	pop	{r7, pc}

08004a62 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004a62:	b480      	push	{r7}
 8004a64:	b085      	sub	sp, #20
 8004a66:	af00      	add	r7, sp, #0
 8004a68:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d006      	beq.n	8004a80 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004a7c:	60fb      	str	r3, [r7, #12]
 8004a7e:	e001      	b.n	8004a84 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004a80:	2300      	movs	r3, #0
 8004a82:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004a84:	68fb      	ldr	r3, [r7, #12]
	}
 8004a86:	4618      	mov	r0, r3
 8004a88:	3714      	adds	r7, #20
 8004a8a:	46bd      	mov	sp, r7
 8004a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a90:	4770      	bx	lr

08004a92 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004a92:	b580      	push	{r7, lr}
 8004a94:	b086      	sub	sp, #24
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	60f8      	str	r0, [r7, #12]
 8004a9a:	60b9      	str	r1, [r7, #8]
 8004a9c:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004a9e:	2300      	movs	r3, #0
 8004aa0:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004aa6:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	2b00      	cmp	r3, #0
 8004aae:	d10d      	bne.n	8004acc <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	d14d      	bne.n	8004b54 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	689b      	ldr	r3, [r3, #8]
 8004abc:	4618      	mov	r0, r3
 8004abe:	f001 f8d3 	bl	8005c68 <xTaskPriorityDisinherit>
 8004ac2:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	2200      	movs	r2, #0
 8004ac8:	609a      	str	r2, [r3, #8]
 8004aca:	e043      	b.n	8004b54 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d119      	bne.n	8004b06 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	6858      	ldr	r0, [r3, #4]
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ada:	461a      	mov	r2, r3
 8004adc:	68b9      	ldr	r1, [r7, #8]
 8004ade:	f002 fac8 	bl	8007072 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	685a      	ldr	r2, [r3, #4]
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aea:	441a      	add	r2, r3
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	685a      	ldr	r2, [r3, #4]
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	689b      	ldr	r3, [r3, #8]
 8004af8:	429a      	cmp	r2, r3
 8004afa:	d32b      	bcc.n	8004b54 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681a      	ldr	r2, [r3, #0]
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	605a      	str	r2, [r3, #4]
 8004b04:	e026      	b.n	8004b54 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	68d8      	ldr	r0, [r3, #12]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	461a      	mov	r2, r3
 8004b10:	68b9      	ldr	r1, [r7, #8]
 8004b12:	f002 faae 	bl	8007072 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	68da      	ldr	r2, [r3, #12]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b1e:	425b      	negs	r3, r3
 8004b20:	441a      	add	r2, r3
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d207      	bcs.n	8004b42 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	689a      	ldr	r2, [r3, #8]
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b3a:	425b      	negs	r3, r3
 8004b3c:	441a      	add	r2, r3
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d105      	bne.n	8004b54 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b48:	693b      	ldr	r3, [r7, #16]
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d002      	beq.n	8004b54 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004b4e:	693b      	ldr	r3, [r7, #16]
 8004b50:	3b01      	subs	r3, #1
 8004b52:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004b54:	693b      	ldr	r3, [r7, #16]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004b5c:	697b      	ldr	r3, [r7, #20]
}
 8004b5e:	4618      	mov	r0, r3
 8004b60:	3718      	adds	r7, #24
 8004b62:	46bd      	mov	sp, r7
 8004b64:	bd80      	pop	{r7, pc}

08004b66 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004b66:	b580      	push	{r7, lr}
 8004b68:	b082      	sub	sp, #8
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d018      	beq.n	8004baa <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	68da      	ldr	r2, [r3, #12]
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b80:	441a      	add	r2, r3
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	68da      	ldr	r2, [r3, #12]
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	689b      	ldr	r3, [r3, #8]
 8004b8e:	429a      	cmp	r2, r3
 8004b90:	d303      	bcc.n	8004b9a <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	681a      	ldr	r2, [r3, #0]
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	68d9      	ldr	r1, [r3, #12]
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ba2:	461a      	mov	r2, r3
 8004ba4:	6838      	ldr	r0, [r7, #0]
 8004ba6:	f002 fa64 	bl	8007072 <memcpy>
	}
}
 8004baa:	bf00      	nop
 8004bac:	3708      	adds	r7, #8
 8004bae:	46bd      	mov	sp, r7
 8004bb0:	bd80      	pop	{r7, pc}

08004bb2 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004bb2:	b580      	push	{r7, lr}
 8004bb4:	b084      	sub	sp, #16
 8004bb6:	af00      	add	r7, sp, #0
 8004bb8:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004bba:	f001 fe2b 	bl	8006814 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004bc4:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bc6:	e011      	b.n	8004bec <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	d012      	beq.n	8004bf6 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	3324      	adds	r3, #36	; 0x24
 8004bd4:	4618      	mov	r0, r3
 8004bd6:	f000 fdef 	bl	80057b8 <xTaskRemoveFromEventList>
 8004bda:	4603      	mov	r3, r0
 8004bdc:	2b00      	cmp	r3, #0
 8004bde:	d001      	beq.n	8004be4 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004be0:	f000 fec6 	bl	8005970 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004be4:	7bfb      	ldrb	r3, [r7, #15]
 8004be6:	3b01      	subs	r3, #1
 8004be8:	b2db      	uxtb	r3, r3
 8004bea:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004bec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	dce9      	bgt.n	8004bc8 <prvUnlockQueue+0x16>
 8004bf4:	e000      	b.n	8004bf8 <prvUnlockQueue+0x46>
					break;
 8004bf6:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	22ff      	movs	r2, #255	; 0xff
 8004bfc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004c00:	f001 fe38 	bl	8006874 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004c04:	f001 fe06 	bl	8006814 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004c0e:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c10:	e011      	b.n	8004c36 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d012      	beq.n	8004c40 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	3310      	adds	r3, #16
 8004c1e:	4618      	mov	r0, r3
 8004c20:	f000 fdca 	bl	80057b8 <xTaskRemoveFromEventList>
 8004c24:	4603      	mov	r3, r0
 8004c26:	2b00      	cmp	r3, #0
 8004c28:	d001      	beq.n	8004c2e <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004c2a:	f000 fea1 	bl	8005970 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004c2e:	7bbb      	ldrb	r3, [r7, #14]
 8004c30:	3b01      	subs	r3, #1
 8004c32:	b2db      	uxtb	r3, r3
 8004c34:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004c36:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	dce9      	bgt.n	8004c12 <prvUnlockQueue+0x60>
 8004c3e:	e000      	b.n	8004c42 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004c40:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	22ff      	movs	r2, #255	; 0xff
 8004c46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004c4a:	f001 fe13 	bl	8006874 <vPortExitCritical>
}
 8004c4e:	bf00      	nop
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b084      	sub	sp, #16
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c5e:	f001 fdd9 	bl	8006814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d102      	bne.n	8004c70 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004c6a:	2301      	movs	r3, #1
 8004c6c:	60fb      	str	r3, [r7, #12]
 8004c6e:	e001      	b.n	8004c74 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004c70:	2300      	movs	r3, #0
 8004c72:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004c74:	f001 fdfe 	bl	8006874 <vPortExitCritical>

	return xReturn;
 8004c78:	68fb      	ldr	r3, [r7, #12]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3710      	adds	r7, #16
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}

08004c82 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004c82:	b580      	push	{r7, lr}
 8004c84:	b084      	sub	sp, #16
 8004c86:	af00      	add	r7, sp, #0
 8004c88:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004c8a:	f001 fdc3 	bl	8006814 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c96:	429a      	cmp	r2, r3
 8004c98:	d102      	bne.n	8004ca0 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004c9a:	2301      	movs	r3, #1
 8004c9c:	60fb      	str	r3, [r7, #12]
 8004c9e:	e001      	b.n	8004ca4 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ca4:	f001 fde6 	bl	8006874 <vPortExitCritical>

	return xReturn;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	3710      	adds	r7, #16
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	bd80      	pop	{r7, pc}
	...

08004cb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b085      	sub	sp, #20
 8004cb8:	af00      	add	r7, sp, #0
 8004cba:	6078      	str	r0, [r7, #4]
 8004cbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60fb      	str	r3, [r7, #12]
 8004cc2:	e014      	b.n	8004cee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004cc4:	4a0f      	ldr	r2, [pc, #60]	; (8004d04 <vQueueAddToRegistry+0x50>)
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d10b      	bne.n	8004ce8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004cd0:	490c      	ldr	r1, [pc, #48]	; (8004d04 <vQueueAddToRegistry+0x50>)
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	683a      	ldr	r2, [r7, #0]
 8004cd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004cda:	4a0a      	ldr	r2, [pc, #40]	; (8004d04 <vQueueAddToRegistry+0x50>)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	00db      	lsls	r3, r3, #3
 8004ce0:	4413      	add	r3, r2
 8004ce2:	687a      	ldr	r2, [r7, #4]
 8004ce4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ce6:	e006      	b.n	8004cf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	3301      	adds	r3, #1
 8004cec:	60fb      	str	r3, [r7, #12]
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	2b07      	cmp	r3, #7
 8004cf2:	d9e7      	bls.n	8004cc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004cf4:	bf00      	nop
 8004cf6:	bf00      	nop
 8004cf8:	3714      	adds	r7, #20
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	2000060c 	.word	0x2000060c

08004d08 <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 8004d08:	b480      	push	{r7}
 8004d0a:	b085      	sub	sp, #20
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d10:	2300      	movs	r3, #0
 8004d12:	60fb      	str	r3, [r7, #12]
 8004d14:	e016      	b.n	8004d44 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 8004d16:	4a10      	ldr	r2, [pc, #64]	; (8004d58 <vQueueUnregisterQueue+0x50>)
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	00db      	lsls	r3, r3, #3
 8004d1c:	4413      	add	r3, r2
 8004d1e:	685b      	ldr	r3, [r3, #4]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d10b      	bne.n	8004d3e <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 8004d26:	4a0c      	ldr	r2, [pc, #48]	; (8004d58 <vQueueUnregisterQueue+0x50>)
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	2100      	movs	r1, #0
 8004d2c:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8004d30:	4a09      	ldr	r2, [pc, #36]	; (8004d58 <vQueueUnregisterQueue+0x50>)
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	00db      	lsls	r3, r3, #3
 8004d36:	4413      	add	r3, r2
 8004d38:	2200      	movs	r2, #0
 8004d3a:	605a      	str	r2, [r3, #4]
				break;
 8004d3c:	e006      	b.n	8004d4c <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	3301      	adds	r3, #1
 8004d42:	60fb      	str	r3, [r7, #12]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	2b07      	cmp	r3, #7
 8004d48:	d9e5      	bls.n	8004d16 <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 8004d4a:	bf00      	nop
 8004d4c:	bf00      	nop
 8004d4e:	3714      	adds	r7, #20
 8004d50:	46bd      	mov	sp, r7
 8004d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d56:	4770      	bx	lr
 8004d58:	2000060c 	.word	0x2000060c

08004d5c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b086      	sub	sp, #24
 8004d60:	af00      	add	r7, sp, #0
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004d6c:	f001 fd52 	bl	8006814 <vPortEnterCritical>
 8004d70:	697b      	ldr	r3, [r7, #20]
 8004d72:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004d76:	b25b      	sxtb	r3, r3
 8004d78:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d7c:	d103      	bne.n	8004d86 <vQueueWaitForMessageRestricted+0x2a>
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	2200      	movs	r2, #0
 8004d82:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004d8c:	b25b      	sxtb	r3, r3
 8004d8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d92:	d103      	bne.n	8004d9c <vQueueWaitForMessageRestricted+0x40>
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	2200      	movs	r2, #0
 8004d98:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004d9c:	f001 fd6a 	bl	8006874 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004da0:	697b      	ldr	r3, [r7, #20]
 8004da2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d106      	bne.n	8004db6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004da8:	697b      	ldr	r3, [r7, #20]
 8004daa:	3324      	adds	r3, #36	; 0x24
 8004dac:	687a      	ldr	r2, [r7, #4]
 8004dae:	68b9      	ldr	r1, [r7, #8]
 8004db0:	4618      	mov	r0, r3
 8004db2:	f000 fcd5 	bl	8005760 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004db6:	6978      	ldr	r0, [r7, #20]
 8004db8:	f7ff fefb 	bl	8004bb2 <prvUnlockQueue>
	}
 8004dbc:	bf00      	nop
 8004dbe:	3718      	adds	r7, #24
 8004dc0:	46bd      	mov	sp, r7
 8004dc2:	bd80      	pop	{r7, pc}

08004dc4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004dc4:	b580      	push	{r7, lr}
 8004dc6:	b08e      	sub	sp, #56	; 0x38
 8004dc8:	af04      	add	r7, sp, #16
 8004dca:	60f8      	str	r0, [r7, #12]
 8004dcc:	60b9      	str	r1, [r7, #8]
 8004dce:	607a      	str	r2, [r7, #4]
 8004dd0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004dd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d10a      	bne.n	8004dee <xTaskCreateStatic+0x2a>
	__asm volatile
 8004dd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ddc:	f383 8811 	msr	BASEPRI, r3
 8004de0:	f3bf 8f6f 	isb	sy
 8004de4:	f3bf 8f4f 	dsb	sy
 8004de8:	623b      	str	r3, [r7, #32]
}
 8004dea:	bf00      	nop
 8004dec:	e7fe      	b.n	8004dec <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004dee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d10a      	bne.n	8004e0a <xTaskCreateStatic+0x46>
	__asm volatile
 8004df4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004df8:	f383 8811 	msr	BASEPRI, r3
 8004dfc:	f3bf 8f6f 	isb	sy
 8004e00:	f3bf 8f4f 	dsb	sy
 8004e04:	61fb      	str	r3, [r7, #28]
}
 8004e06:	bf00      	nop
 8004e08:	e7fe      	b.n	8004e08 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004e0a:	23bc      	movs	r3, #188	; 0xbc
 8004e0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2bbc      	cmp	r3, #188	; 0xbc
 8004e12:	d00a      	beq.n	8004e2a <xTaskCreateStatic+0x66>
	__asm volatile
 8004e14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e18:	f383 8811 	msr	BASEPRI, r3
 8004e1c:	f3bf 8f6f 	isb	sy
 8004e20:	f3bf 8f4f 	dsb	sy
 8004e24:	61bb      	str	r3, [r7, #24]
}
 8004e26:	bf00      	nop
 8004e28:	e7fe      	b.n	8004e28 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004e2a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004e2c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d01e      	beq.n	8004e70 <xTaskCreateStatic+0xac>
 8004e32:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d01b      	beq.n	8004e70 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e3a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e3e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004e40:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004e42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e44:	2202      	movs	r2, #2
 8004e46:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004e4a:	2300      	movs	r3, #0
 8004e4c:	9303      	str	r3, [sp, #12]
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e50:	9302      	str	r3, [sp, #8]
 8004e52:	f107 0314 	add.w	r3, r7, #20
 8004e56:	9301      	str	r3, [sp, #4]
 8004e58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e5a:	9300      	str	r3, [sp, #0]
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 f850 	bl	8004f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004e68:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004e6a:	f000 f8f3 	bl	8005054 <prvAddNewTaskToReadyList>
 8004e6e:	e001      	b.n	8004e74 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004e70:	2300      	movs	r3, #0
 8004e72:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004e74:	697b      	ldr	r3, [r7, #20]
	}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3728      	adds	r7, #40	; 0x28
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b08c      	sub	sp, #48	; 0x30
 8004e82:	af04      	add	r7, sp, #16
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	603b      	str	r3, [r7, #0]
 8004e8a:	4613      	mov	r3, r2
 8004e8c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004e8e:	88fb      	ldrh	r3, [r7, #6]
 8004e90:	009b      	lsls	r3, r3, #2
 8004e92:	4618      	mov	r0, r3
 8004e94:	f001 fde0 	bl	8006a58 <pvPortMalloc>
 8004e98:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004e9a:	697b      	ldr	r3, [r7, #20]
 8004e9c:	2b00      	cmp	r3, #0
 8004e9e:	d00e      	beq.n	8004ebe <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004ea0:	20bc      	movs	r0, #188	; 0xbc
 8004ea2:	f001 fdd9 	bl	8006a58 <pvPortMalloc>
 8004ea6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004ea8:	69fb      	ldr	r3, [r7, #28]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	631a      	str	r2, [r3, #48]	; 0x30
 8004eb4:	e005      	b.n	8004ec2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004eb6:	6978      	ldr	r0, [r7, #20]
 8004eb8:	f001 fe9a 	bl	8006bf0 <vPortFree>
 8004ebc:	e001      	b.n	8004ec2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d017      	beq.n	8004ef8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	2200      	movs	r2, #0
 8004ecc:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004ed0:	88fa      	ldrh	r2, [r7, #6]
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	9303      	str	r3, [sp, #12]
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	9302      	str	r3, [sp, #8]
 8004eda:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004edc:	9301      	str	r3, [sp, #4]
 8004ede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ee0:	9300      	str	r3, [sp, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	68b9      	ldr	r1, [r7, #8]
 8004ee6:	68f8      	ldr	r0, [r7, #12]
 8004ee8:	f000 f80e 	bl	8004f08 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004eec:	69f8      	ldr	r0, [r7, #28]
 8004eee:	f000 f8b1 	bl	8005054 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004ef2:	2301      	movs	r3, #1
 8004ef4:	61bb      	str	r3, [r7, #24]
 8004ef6:	e002      	b.n	8004efe <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004ef8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004efc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004efe:	69bb      	ldr	r3, [r7, #24]
	}
 8004f00:	4618      	mov	r0, r3
 8004f02:	3720      	adds	r7, #32
 8004f04:	46bd      	mov	sp, r7
 8004f06:	bd80      	pop	{r7, pc}

08004f08 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b088      	sub	sp, #32
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004f16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f18:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	009b      	lsls	r3, r3, #2
 8004f1e:	461a      	mov	r2, r3
 8004f20:	21a5      	movs	r1, #165	; 0xa5
 8004f22:	f002 f8b4 	bl	800708e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004f26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004f30:	3b01      	subs	r3, #1
 8004f32:	009b      	lsls	r3, r3, #2
 8004f34:	4413      	add	r3, r2
 8004f36:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	f023 0307 	bic.w	r3, r3, #7
 8004f3e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004f40:	69bb      	ldr	r3, [r7, #24]
 8004f42:	f003 0307 	and.w	r3, r3, #7
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d00a      	beq.n	8004f60 <prvInitialiseNewTask+0x58>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	617b      	str	r3, [r7, #20]
}
 8004f5c:	bf00      	nop
 8004f5e:	e7fe      	b.n	8004f5e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d01f      	beq.n	8004fa6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f66:	2300      	movs	r3, #0
 8004f68:	61fb      	str	r3, [r7, #28]
 8004f6a:	e012      	b.n	8004f92 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004f6c:	68ba      	ldr	r2, [r7, #8]
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	4413      	add	r3, r2
 8004f72:	7819      	ldrb	r1, [r3, #0]
 8004f74:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004f76:	69fb      	ldr	r3, [r7, #28]
 8004f78:	4413      	add	r3, r2
 8004f7a:	3334      	adds	r3, #52	; 0x34
 8004f7c:	460a      	mov	r2, r1
 8004f7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	4413      	add	r3, r2
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d006      	beq.n	8004f9a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004f8c:	69fb      	ldr	r3, [r7, #28]
 8004f8e:	3301      	adds	r3, #1
 8004f90:	61fb      	str	r3, [r7, #28]
 8004f92:	69fb      	ldr	r3, [r7, #28]
 8004f94:	2b0f      	cmp	r3, #15
 8004f96:	d9e9      	bls.n	8004f6c <prvInitialiseNewTask+0x64>
 8004f98:	e000      	b.n	8004f9c <prvInitialiseNewTask+0x94>
			{
				break;
 8004f9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004f9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fa4:	e003      	b.n	8004fae <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004fa6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fb0:	2b37      	cmp	r3, #55	; 0x37
 8004fb2:	d901      	bls.n	8004fb8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004fb4:	2337      	movs	r3, #55	; 0x37
 8004fb6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004fb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fba:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fbc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004fbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004fc2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004fc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fc6:	2200      	movs	r2, #0
 8004fc8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f7fe fe56 	bl	8003c80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004fd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd6:	3318      	adds	r3, #24
 8004fd8:	4618      	mov	r0, r3
 8004fda:	f7fe fe51 	bl	8003c80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004fe2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004fe6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004ff2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ffe:	2200      	movs	r2, #0
 8005000:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	3354      	adds	r3, #84	; 0x54
 8005008:	2260      	movs	r2, #96	; 0x60
 800500a:	2100      	movs	r1, #0
 800500c:	4618      	mov	r0, r3
 800500e:	f002 f83e 	bl	800708e <memset>
 8005012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005014:	4a0c      	ldr	r2, [pc, #48]	; (8005048 <prvInitialiseNewTask+0x140>)
 8005016:	659a      	str	r2, [r3, #88]	; 0x58
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	4a0c      	ldr	r2, [pc, #48]	; (800504c <prvInitialiseNewTask+0x144>)
 800501c:	65da      	str	r2, [r3, #92]	; 0x5c
 800501e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005020:	4a0b      	ldr	r2, [pc, #44]	; (8005050 <prvInitialiseNewTask+0x148>)
 8005022:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005024:	683a      	ldr	r2, [r7, #0]
 8005026:	68f9      	ldr	r1, [r7, #12]
 8005028:	69b8      	ldr	r0, [r7, #24]
 800502a:	f001 fac3 	bl	80065b4 <pxPortInitialiseStack>
 800502e:	4602      	mov	r2, r0
 8005030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005032:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005034:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005036:	2b00      	cmp	r3, #0
 8005038:	d002      	beq.n	8005040 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800503a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800503c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800503e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005040:	bf00      	nop
 8005042:	3720      	adds	r7, #32
 8005044:	46bd      	mov	sp, r7
 8005046:	bd80      	pop	{r7, pc}
 8005048:	0800850c 	.word	0x0800850c
 800504c:	0800852c 	.word	0x0800852c
 8005050:	080084ec 	.word	0x080084ec

08005054 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005054:	b580      	push	{r7, lr}
 8005056:	b082      	sub	sp, #8
 8005058:	af00      	add	r7, sp, #0
 800505a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800505c:	f001 fbda 	bl	8006814 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005060:	4b2d      	ldr	r3, [pc, #180]	; (8005118 <prvAddNewTaskToReadyList+0xc4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3301      	adds	r3, #1
 8005066:	4a2c      	ldr	r2, [pc, #176]	; (8005118 <prvAddNewTaskToReadyList+0xc4>)
 8005068:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800506a:	4b2c      	ldr	r3, [pc, #176]	; (800511c <prvAddNewTaskToReadyList+0xc8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	2b00      	cmp	r3, #0
 8005070:	d109      	bne.n	8005086 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005072:	4a2a      	ldr	r2, [pc, #168]	; (800511c <prvAddNewTaskToReadyList+0xc8>)
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005078:	4b27      	ldr	r3, [pc, #156]	; (8005118 <prvAddNewTaskToReadyList+0xc4>)
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d110      	bne.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005080:	f000 fc9a 	bl	80059b8 <prvInitialiseTaskLists>
 8005084:	e00d      	b.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005086:	4b26      	ldr	r3, [pc, #152]	; (8005120 <prvAddNewTaskToReadyList+0xcc>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2b00      	cmp	r3, #0
 800508c:	d109      	bne.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800508e:	4b23      	ldr	r3, [pc, #140]	; (800511c <prvAddNewTaskToReadyList+0xc8>)
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005098:	429a      	cmp	r2, r3
 800509a:	d802      	bhi.n	80050a2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800509c:	4a1f      	ldr	r2, [pc, #124]	; (800511c <prvAddNewTaskToReadyList+0xc8>)
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80050a2:	4b20      	ldr	r3, [pc, #128]	; (8005124 <prvAddNewTaskToReadyList+0xd0>)
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	3301      	adds	r3, #1
 80050a8:	4a1e      	ldr	r2, [pc, #120]	; (8005124 <prvAddNewTaskToReadyList+0xd0>)
 80050aa:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80050ac:	4b1d      	ldr	r3, [pc, #116]	; (8005124 <prvAddNewTaskToReadyList+0xd0>)
 80050ae:	681a      	ldr	r2, [r3, #0]
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b8:	4b1b      	ldr	r3, [pc, #108]	; (8005128 <prvAddNewTaskToReadyList+0xd4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d903      	bls.n	80050c8 <prvAddNewTaskToReadyList+0x74>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a18      	ldr	r2, [pc, #96]	; (8005128 <prvAddNewTaskToReadyList+0xd4>)
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4a15      	ldr	r2, [pc, #84]	; (800512c <prvAddNewTaskToReadyList+0xd8>)
 80050d6:	441a      	add	r2, r3
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f7fe fddb 	bl	8003c9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80050e4:	f001 fbc6 	bl	8006874 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80050e8:	4b0d      	ldr	r3, [pc, #52]	; (8005120 <prvAddNewTaskToReadyList+0xcc>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d00e      	beq.n	800510e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80050f0:	4b0a      	ldr	r3, [pc, #40]	; (800511c <prvAddNewTaskToReadyList+0xc8>)
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050fa:	429a      	cmp	r2, r3
 80050fc:	d207      	bcs.n	800510e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80050fe:	4b0c      	ldr	r3, [pc, #48]	; (8005130 <prvAddNewTaskToReadyList+0xdc>)
 8005100:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005104:	601a      	str	r2, [r3, #0]
 8005106:	f3bf 8f4f 	dsb	sy
 800510a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800510e:	bf00      	nop
 8005110:	3708      	adds	r7, #8
 8005112:	46bd      	mov	sp, r7
 8005114:	bd80      	pop	{r7, pc}
 8005116:	bf00      	nop
 8005118:	20000b20 	.word	0x20000b20
 800511c:	2000064c 	.word	0x2000064c
 8005120:	20000b2c 	.word	0x20000b2c
 8005124:	20000b3c 	.word	0x20000b3c
 8005128:	20000b28 	.word	0x20000b28
 800512c:	20000650 	.word	0x20000650
 8005130:	e000ed04 	.word	0xe000ed04

08005134 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 800513c:	f001 fb6a 	bl	8006814 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d102      	bne.n	800514c <vTaskDelete+0x18>
 8005146:	4b2c      	ldr	r3, [pc, #176]	; (80051f8 <vTaskDelete+0xc4>)
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	e000      	b.n	800514e <vTaskDelete+0x1a>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	3304      	adds	r3, #4
 8005154:	4618      	mov	r0, r3
 8005156:	f7fe fdfd 	bl	8003d54 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800515e:	2b00      	cmp	r3, #0
 8005160:	d004      	beq.n	800516c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	3318      	adds	r3, #24
 8005166:	4618      	mov	r0, r3
 8005168:	f7fe fdf4 	bl	8003d54 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800516c:	4b23      	ldr	r3, [pc, #140]	; (80051fc <vTaskDelete+0xc8>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	3301      	adds	r3, #1
 8005172:	4a22      	ldr	r2, [pc, #136]	; (80051fc <vTaskDelete+0xc8>)
 8005174:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005176:	4b20      	ldr	r3, [pc, #128]	; (80051f8 <vTaskDelete+0xc4>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68fa      	ldr	r2, [r7, #12]
 800517c:	429a      	cmp	r2, r3
 800517e:	d10b      	bne.n	8005198 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005180:	68fb      	ldr	r3, [r7, #12]
 8005182:	3304      	adds	r3, #4
 8005184:	4619      	mov	r1, r3
 8005186:	481e      	ldr	r0, [pc, #120]	; (8005200 <vTaskDelete+0xcc>)
 8005188:	f7fe fd87 	bl	8003c9a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800518c:	4b1d      	ldr	r3, [pc, #116]	; (8005204 <vTaskDelete+0xd0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	3301      	adds	r3, #1
 8005192:	4a1c      	ldr	r2, [pc, #112]	; (8005204 <vTaskDelete+0xd0>)
 8005194:	6013      	str	r3, [r2, #0]
 8005196:	e009      	b.n	80051ac <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005198:	4b1b      	ldr	r3, [pc, #108]	; (8005208 <vTaskDelete+0xd4>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	3b01      	subs	r3, #1
 800519e:	4a1a      	ldr	r2, [pc, #104]	; (8005208 <vTaskDelete+0xd4>)
 80051a0:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 80051a2:	68f8      	ldr	r0, [r7, #12]
 80051a4:	f000 fc76 	bl	8005a94 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 80051a8:	f000 fca8 	bl	8005afc <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 80051ac:	f001 fb62 	bl	8006874 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 80051b0:	4b16      	ldr	r3, [pc, #88]	; (800520c <vTaskDelete+0xd8>)
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d01b      	beq.n	80051f0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 80051b8:	4b0f      	ldr	r3, [pc, #60]	; (80051f8 <vTaskDelete+0xc4>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	68fa      	ldr	r2, [r7, #12]
 80051be:	429a      	cmp	r2, r3
 80051c0:	d116      	bne.n	80051f0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 80051c2:	4b13      	ldr	r3, [pc, #76]	; (8005210 <vTaskDelete+0xdc>)
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d00a      	beq.n	80051e0 <vTaskDelete+0xac>
	__asm volatile
 80051ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051ce:	f383 8811 	msr	BASEPRI, r3
 80051d2:	f3bf 8f6f 	isb	sy
 80051d6:	f3bf 8f4f 	dsb	sy
 80051da:	60bb      	str	r3, [r7, #8]
}
 80051dc:	bf00      	nop
 80051de:	e7fe      	b.n	80051de <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80051e0:	4b0c      	ldr	r3, [pc, #48]	; (8005214 <vTaskDelete+0xe0>)
 80051e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051e6:	601a      	str	r2, [r3, #0]
 80051e8:	f3bf 8f4f 	dsb	sy
 80051ec:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80051f0:	bf00      	nop
 80051f2:	3710      	adds	r7, #16
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	2000064c 	.word	0x2000064c
 80051fc:	20000b3c 	.word	0x20000b3c
 8005200:	20000af4 	.word	0x20000af4
 8005204:	20000b08 	.word	0x20000b08
 8005208:	20000b20 	.word	0x20000b20
 800520c:	20000b2c 	.word	0x20000b2c
 8005210:	20000b48 	.word	0x20000b48
 8005214:	e000ed04 	.word	0xe000ed04

08005218 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005218:	b580      	push	{r7, lr}
 800521a:	b08a      	sub	sp, #40	; 0x28
 800521c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800521e:	2300      	movs	r3, #0
 8005220:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005222:	2300      	movs	r3, #0
 8005224:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005226:	463a      	mov	r2, r7
 8005228:	1d39      	adds	r1, r7, #4
 800522a:	f107 0308 	add.w	r3, r7, #8
 800522e:	4618      	mov	r0, r3
 8005230:	f7fe fcd2 	bl	8003bd8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005234:	6839      	ldr	r1, [r7, #0]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	68ba      	ldr	r2, [r7, #8]
 800523a:	9202      	str	r2, [sp, #8]
 800523c:	9301      	str	r3, [sp, #4]
 800523e:	2300      	movs	r3, #0
 8005240:	9300      	str	r3, [sp, #0]
 8005242:	2300      	movs	r3, #0
 8005244:	460a      	mov	r2, r1
 8005246:	4924      	ldr	r1, [pc, #144]	; (80052d8 <vTaskStartScheduler+0xc0>)
 8005248:	4824      	ldr	r0, [pc, #144]	; (80052dc <vTaskStartScheduler+0xc4>)
 800524a:	f7ff fdbb 	bl	8004dc4 <xTaskCreateStatic>
 800524e:	4603      	mov	r3, r0
 8005250:	4a23      	ldr	r2, [pc, #140]	; (80052e0 <vTaskStartScheduler+0xc8>)
 8005252:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005254:	4b22      	ldr	r3, [pc, #136]	; (80052e0 <vTaskStartScheduler+0xc8>)
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d002      	beq.n	8005262 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800525c:	2301      	movs	r3, #1
 800525e:	617b      	str	r3, [r7, #20]
 8005260:	e001      	b.n	8005266 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005262:	2300      	movs	r3, #0
 8005264:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005266:	697b      	ldr	r3, [r7, #20]
 8005268:	2b01      	cmp	r3, #1
 800526a:	d102      	bne.n	8005272 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800526c:	f000 fe54 	bl	8005f18 <xTimerCreateTimerTask>
 8005270:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005272:	697b      	ldr	r3, [r7, #20]
 8005274:	2b01      	cmp	r3, #1
 8005276:	d11b      	bne.n	80052b0 <vTaskStartScheduler+0x98>
	__asm volatile
 8005278:	f04f 0350 	mov.w	r3, #80	; 0x50
 800527c:	f383 8811 	msr	BASEPRI, r3
 8005280:	f3bf 8f6f 	isb	sy
 8005284:	f3bf 8f4f 	dsb	sy
 8005288:	613b      	str	r3, [r7, #16]
}
 800528a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800528c:	4b15      	ldr	r3, [pc, #84]	; (80052e4 <vTaskStartScheduler+0xcc>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	3354      	adds	r3, #84	; 0x54
 8005292:	4a15      	ldr	r2, [pc, #84]	; (80052e8 <vTaskStartScheduler+0xd0>)
 8005294:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005296:	4b15      	ldr	r3, [pc, #84]	; (80052ec <vTaskStartScheduler+0xd4>)
 8005298:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800529c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800529e:	4b14      	ldr	r3, [pc, #80]	; (80052f0 <vTaskStartScheduler+0xd8>)
 80052a0:	2201      	movs	r2, #1
 80052a2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80052a4:	4b13      	ldr	r3, [pc, #76]	; (80052f4 <vTaskStartScheduler+0xdc>)
 80052a6:	2200      	movs	r2, #0
 80052a8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80052aa:	f001 fa11 	bl	80066d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80052ae:	e00e      	b.n	80052ce <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80052b0:	697b      	ldr	r3, [r7, #20]
 80052b2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052b6:	d10a      	bne.n	80052ce <vTaskStartScheduler+0xb6>
	__asm volatile
 80052b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052bc:	f383 8811 	msr	BASEPRI, r3
 80052c0:	f3bf 8f6f 	isb	sy
 80052c4:	f3bf 8f4f 	dsb	sy
 80052c8:	60fb      	str	r3, [r7, #12]
}
 80052ca:	bf00      	nop
 80052cc:	e7fe      	b.n	80052cc <vTaskStartScheduler+0xb4>
}
 80052ce:	bf00      	nop
 80052d0:	3718      	adds	r7, #24
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	08008468 	.word	0x08008468
 80052dc:	08005989 	.word	0x08005989
 80052e0:	20000b44 	.word	0x20000b44
 80052e4:	2000064c 	.word	0x2000064c
 80052e8:	20000010 	.word	0x20000010
 80052ec:	20000b40 	.word	0x20000b40
 80052f0:	20000b2c 	.word	0x20000b2c
 80052f4:	20000b24 	.word	0x20000b24

080052f8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80052f8:	b480      	push	{r7}
 80052fa:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80052fc:	4b04      	ldr	r3, [pc, #16]	; (8005310 <vTaskSuspendAll+0x18>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	3301      	adds	r3, #1
 8005302:	4a03      	ldr	r2, [pc, #12]	; (8005310 <vTaskSuspendAll+0x18>)
 8005304:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005306:	bf00      	nop
 8005308:	46bd      	mov	sp, r7
 800530a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800530e:	4770      	bx	lr
 8005310:	20000b48 	.word	0x20000b48

08005314 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005314:	b580      	push	{r7, lr}
 8005316:	b084      	sub	sp, #16
 8005318:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800531a:	2300      	movs	r3, #0
 800531c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800531e:	2300      	movs	r3, #0
 8005320:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005322:	4b42      	ldr	r3, [pc, #264]	; (800542c <xTaskResumeAll+0x118>)
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d10a      	bne.n	8005340 <xTaskResumeAll+0x2c>
	__asm volatile
 800532a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800532e:	f383 8811 	msr	BASEPRI, r3
 8005332:	f3bf 8f6f 	isb	sy
 8005336:	f3bf 8f4f 	dsb	sy
 800533a:	603b      	str	r3, [r7, #0]
}
 800533c:	bf00      	nop
 800533e:	e7fe      	b.n	800533e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005340:	f001 fa68 	bl	8006814 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005344:	4b39      	ldr	r3, [pc, #228]	; (800542c <xTaskResumeAll+0x118>)
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	3b01      	subs	r3, #1
 800534a:	4a38      	ldr	r2, [pc, #224]	; (800542c <xTaskResumeAll+0x118>)
 800534c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800534e:	4b37      	ldr	r3, [pc, #220]	; (800542c <xTaskResumeAll+0x118>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d162      	bne.n	800541c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005356:	4b36      	ldr	r3, [pc, #216]	; (8005430 <xTaskResumeAll+0x11c>)
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	2b00      	cmp	r3, #0
 800535c:	d05e      	beq.n	800541c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800535e:	e02f      	b.n	80053c0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005360:	4b34      	ldr	r3, [pc, #208]	; (8005434 <xTaskResumeAll+0x120>)
 8005362:	68db      	ldr	r3, [r3, #12]
 8005364:	68db      	ldr	r3, [r3, #12]
 8005366:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	3318      	adds	r3, #24
 800536c:	4618      	mov	r0, r3
 800536e:	f7fe fcf1 	bl	8003d54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	3304      	adds	r3, #4
 8005376:	4618      	mov	r0, r3
 8005378:	f7fe fcec 	bl	8003d54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005380:	4b2d      	ldr	r3, [pc, #180]	; (8005438 <xTaskResumeAll+0x124>)
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	429a      	cmp	r2, r3
 8005386:	d903      	bls.n	8005390 <xTaskResumeAll+0x7c>
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	4a2a      	ldr	r2, [pc, #168]	; (8005438 <xTaskResumeAll+0x124>)
 800538e:	6013      	str	r3, [r2, #0]
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005394:	4613      	mov	r3, r2
 8005396:	009b      	lsls	r3, r3, #2
 8005398:	4413      	add	r3, r2
 800539a:	009b      	lsls	r3, r3, #2
 800539c:	4a27      	ldr	r2, [pc, #156]	; (800543c <xTaskResumeAll+0x128>)
 800539e:	441a      	add	r2, r3
 80053a0:	68fb      	ldr	r3, [r7, #12]
 80053a2:	3304      	adds	r3, #4
 80053a4:	4619      	mov	r1, r3
 80053a6:	4610      	mov	r0, r2
 80053a8:	f7fe fc77 	bl	8003c9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80053b0:	4b23      	ldr	r3, [pc, #140]	; (8005440 <xTaskResumeAll+0x12c>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d302      	bcc.n	80053c0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80053ba:	4b22      	ldr	r3, [pc, #136]	; (8005444 <xTaskResumeAll+0x130>)
 80053bc:	2201      	movs	r2, #1
 80053be:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80053c0:	4b1c      	ldr	r3, [pc, #112]	; (8005434 <xTaskResumeAll+0x120>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d1cb      	bne.n	8005360 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d001      	beq.n	80053d2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80053ce:	f000 fb95 	bl	8005afc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80053d2:	4b1d      	ldr	r3, [pc, #116]	; (8005448 <xTaskResumeAll+0x134>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d010      	beq.n	8005400 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80053de:	f000 f87d 	bl	80054dc <xTaskIncrementTick>
 80053e2:	4603      	mov	r3, r0
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d002      	beq.n	80053ee <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80053e8:	4b16      	ldr	r3, [pc, #88]	; (8005444 <xTaskResumeAll+0x130>)
 80053ea:	2201      	movs	r2, #1
 80053ec:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	3b01      	subs	r3, #1
 80053f2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d1f1      	bne.n	80053de <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80053fa:	4b13      	ldr	r3, [pc, #76]	; (8005448 <xTaskResumeAll+0x134>)
 80053fc:	2200      	movs	r2, #0
 80053fe:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005400:	4b10      	ldr	r3, [pc, #64]	; (8005444 <xTaskResumeAll+0x130>)
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d009      	beq.n	800541c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005408:	2301      	movs	r3, #1
 800540a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800540c:	4b0f      	ldr	r3, [pc, #60]	; (800544c <xTaskResumeAll+0x138>)
 800540e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005412:	601a      	str	r2, [r3, #0]
 8005414:	f3bf 8f4f 	dsb	sy
 8005418:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800541c:	f001 fa2a 	bl	8006874 <vPortExitCritical>

	return xAlreadyYielded;
 8005420:	68bb      	ldr	r3, [r7, #8]
}
 8005422:	4618      	mov	r0, r3
 8005424:	3710      	adds	r7, #16
 8005426:	46bd      	mov	sp, r7
 8005428:	bd80      	pop	{r7, pc}
 800542a:	bf00      	nop
 800542c:	20000b48 	.word	0x20000b48
 8005430:	20000b20 	.word	0x20000b20
 8005434:	20000ae0 	.word	0x20000ae0
 8005438:	20000b28 	.word	0x20000b28
 800543c:	20000650 	.word	0x20000650
 8005440:	2000064c 	.word	0x2000064c
 8005444:	20000b34 	.word	0x20000b34
 8005448:	20000b30 	.word	0x20000b30
 800544c:	e000ed04 	.word	0xe000ed04

08005450 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005450:	b480      	push	{r7}
 8005452:	b083      	sub	sp, #12
 8005454:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005456:	4b05      	ldr	r3, [pc, #20]	; (800546c <xTaskGetTickCount+0x1c>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800545c:	687b      	ldr	r3, [r7, #4]
}
 800545e:	4618      	mov	r0, r3
 8005460:	370c      	adds	r7, #12
 8005462:	46bd      	mov	sp, r7
 8005464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005468:	4770      	bx	lr
 800546a:	bf00      	nop
 800546c:	20000b24 	.word	0x20000b24

08005470 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8005470:	b580      	push	{r7, lr}
 8005472:	b082      	sub	sp, #8
 8005474:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005476:	f001 faaf 	bl	80069d8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 800547a:	2300      	movs	r3, #0
 800547c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 800547e:	4b04      	ldr	r3, [pc, #16]	; (8005490 <xTaskGetTickCountFromISR+0x20>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005484:	683b      	ldr	r3, [r7, #0]
}
 8005486:	4618      	mov	r0, r3
 8005488:	3708      	adds	r7, #8
 800548a:	46bd      	mov	sp, r7
 800548c:	bd80      	pop	{r7, pc}
 800548e:	bf00      	nop
 8005490:	20000b24 	.word	0x20000b24

08005494 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 8005494:	b480      	push	{r7}
 8005496:	b085      	sub	sp, #20
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d102      	bne.n	80054a8 <pcTaskGetName+0x14>
 80054a2:	4b0d      	ldr	r3, [pc, #52]	; (80054d8 <pcTaskGetName+0x44>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	e000      	b.n	80054aa <pcTaskGetName+0x16>
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d10a      	bne.n	80054c8 <pcTaskGetName+0x34>
	__asm volatile
 80054b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b6:	f383 8811 	msr	BASEPRI, r3
 80054ba:	f3bf 8f6f 	isb	sy
 80054be:	f3bf 8f4f 	dsb	sy
 80054c2:	60bb      	str	r3, [r7, #8]
}
 80054c4:	bf00      	nop
 80054c6:	e7fe      	b.n	80054c6 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	3334      	adds	r3, #52	; 0x34
}
 80054cc:	4618      	mov	r0, r3
 80054ce:	3714      	adds	r7, #20
 80054d0:	46bd      	mov	sp, r7
 80054d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d6:	4770      	bx	lr
 80054d8:	2000064c 	.word	0x2000064c

080054dc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80054dc:	b580      	push	{r7, lr}
 80054de:	b086      	sub	sp, #24
 80054e0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80054e2:	2300      	movs	r3, #0
 80054e4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80054e6:	4b4f      	ldr	r3, [pc, #316]	; (8005624 <xTaskIncrementTick+0x148>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 808f 	bne.w	800560e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80054f0:	4b4d      	ldr	r3, [pc, #308]	; (8005628 <xTaskIncrementTick+0x14c>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	3301      	adds	r3, #1
 80054f6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80054f8:	4a4b      	ldr	r2, [pc, #300]	; (8005628 <xTaskIncrementTick+0x14c>)
 80054fa:	693b      	ldr	r3, [r7, #16]
 80054fc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80054fe:	693b      	ldr	r3, [r7, #16]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d120      	bne.n	8005546 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005504:	4b49      	ldr	r3, [pc, #292]	; (800562c <xTaskIncrementTick+0x150>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d00a      	beq.n	8005524 <xTaskIncrementTick+0x48>
	__asm volatile
 800550e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005512:	f383 8811 	msr	BASEPRI, r3
 8005516:	f3bf 8f6f 	isb	sy
 800551a:	f3bf 8f4f 	dsb	sy
 800551e:	603b      	str	r3, [r7, #0]
}
 8005520:	bf00      	nop
 8005522:	e7fe      	b.n	8005522 <xTaskIncrementTick+0x46>
 8005524:	4b41      	ldr	r3, [pc, #260]	; (800562c <xTaskIncrementTick+0x150>)
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	60fb      	str	r3, [r7, #12]
 800552a:	4b41      	ldr	r3, [pc, #260]	; (8005630 <xTaskIncrementTick+0x154>)
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	4a3f      	ldr	r2, [pc, #252]	; (800562c <xTaskIncrementTick+0x150>)
 8005530:	6013      	str	r3, [r2, #0]
 8005532:	4a3f      	ldr	r2, [pc, #252]	; (8005630 <xTaskIncrementTick+0x154>)
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	6013      	str	r3, [r2, #0]
 8005538:	4b3e      	ldr	r3, [pc, #248]	; (8005634 <xTaskIncrementTick+0x158>)
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	3301      	adds	r3, #1
 800553e:	4a3d      	ldr	r2, [pc, #244]	; (8005634 <xTaskIncrementTick+0x158>)
 8005540:	6013      	str	r3, [r2, #0]
 8005542:	f000 fadb 	bl	8005afc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005546:	4b3c      	ldr	r3, [pc, #240]	; (8005638 <xTaskIncrementTick+0x15c>)
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	693a      	ldr	r2, [r7, #16]
 800554c:	429a      	cmp	r2, r3
 800554e:	d349      	bcc.n	80055e4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005550:	4b36      	ldr	r3, [pc, #216]	; (800562c <xTaskIncrementTick+0x150>)
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	d104      	bne.n	8005564 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800555a:	4b37      	ldr	r3, [pc, #220]	; (8005638 <xTaskIncrementTick+0x15c>)
 800555c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005560:	601a      	str	r2, [r3, #0]
					break;
 8005562:	e03f      	b.n	80055e4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005564:	4b31      	ldr	r3, [pc, #196]	; (800562c <xTaskIncrementTick+0x150>)
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	68db      	ldr	r3, [r3, #12]
 800556a:	68db      	ldr	r3, [r3, #12]
 800556c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	685b      	ldr	r3, [r3, #4]
 8005572:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	429a      	cmp	r2, r3
 800557a:	d203      	bcs.n	8005584 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800557c:	4a2e      	ldr	r2, [pc, #184]	; (8005638 <xTaskIncrementTick+0x15c>)
 800557e:	687b      	ldr	r3, [r7, #4]
 8005580:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005582:	e02f      	b.n	80055e4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005584:	68bb      	ldr	r3, [r7, #8]
 8005586:	3304      	adds	r3, #4
 8005588:	4618      	mov	r0, r3
 800558a:	f7fe fbe3 	bl	8003d54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800558e:	68bb      	ldr	r3, [r7, #8]
 8005590:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005592:	2b00      	cmp	r3, #0
 8005594:	d004      	beq.n	80055a0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005596:	68bb      	ldr	r3, [r7, #8]
 8005598:	3318      	adds	r3, #24
 800559a:	4618      	mov	r0, r3
 800559c:	f7fe fbda 	bl	8003d54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055a4:	4b25      	ldr	r3, [pc, #148]	; (800563c <xTaskIncrementTick+0x160>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	429a      	cmp	r2, r3
 80055aa:	d903      	bls.n	80055b4 <xTaskIncrementTick+0xd8>
 80055ac:	68bb      	ldr	r3, [r7, #8]
 80055ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055b0:	4a22      	ldr	r2, [pc, #136]	; (800563c <xTaskIncrementTick+0x160>)
 80055b2:	6013      	str	r3, [r2, #0]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055b8:	4613      	mov	r3, r2
 80055ba:	009b      	lsls	r3, r3, #2
 80055bc:	4413      	add	r3, r2
 80055be:	009b      	lsls	r3, r3, #2
 80055c0:	4a1f      	ldr	r2, [pc, #124]	; (8005640 <xTaskIncrementTick+0x164>)
 80055c2:	441a      	add	r2, r3
 80055c4:	68bb      	ldr	r3, [r7, #8]
 80055c6:	3304      	adds	r3, #4
 80055c8:	4619      	mov	r1, r3
 80055ca:	4610      	mov	r0, r2
 80055cc:	f7fe fb65 	bl	8003c9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80055d0:	68bb      	ldr	r3, [r7, #8]
 80055d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055d4:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <xTaskIncrementTick+0x168>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	429a      	cmp	r2, r3
 80055dc:	d3b8      	bcc.n	8005550 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80055de:	2301      	movs	r3, #1
 80055e0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80055e2:	e7b5      	b.n	8005550 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80055e4:	4b17      	ldr	r3, [pc, #92]	; (8005644 <xTaskIncrementTick+0x168>)
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80055ea:	4915      	ldr	r1, [pc, #84]	; (8005640 <xTaskIncrementTick+0x164>)
 80055ec:	4613      	mov	r3, r2
 80055ee:	009b      	lsls	r3, r3, #2
 80055f0:	4413      	add	r3, r2
 80055f2:	009b      	lsls	r3, r3, #2
 80055f4:	440b      	add	r3, r1
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	2b01      	cmp	r3, #1
 80055fa:	d901      	bls.n	8005600 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 80055fc:	2301      	movs	r3, #1
 80055fe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005600:	4b11      	ldr	r3, [pc, #68]	; (8005648 <xTaskIncrementTick+0x16c>)
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	2b00      	cmp	r3, #0
 8005606:	d007      	beq.n	8005618 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8005608:	2301      	movs	r3, #1
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	e004      	b.n	8005618 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800560e:	4b0f      	ldr	r3, [pc, #60]	; (800564c <xTaskIncrementTick+0x170>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	3301      	adds	r3, #1
 8005614:	4a0d      	ldr	r2, [pc, #52]	; (800564c <xTaskIncrementTick+0x170>)
 8005616:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005618:	697b      	ldr	r3, [r7, #20]
}
 800561a:	4618      	mov	r0, r3
 800561c:	3718      	adds	r7, #24
 800561e:	46bd      	mov	sp, r7
 8005620:	bd80      	pop	{r7, pc}
 8005622:	bf00      	nop
 8005624:	20000b48 	.word	0x20000b48
 8005628:	20000b24 	.word	0x20000b24
 800562c:	20000ad8 	.word	0x20000ad8
 8005630:	20000adc 	.word	0x20000adc
 8005634:	20000b38 	.word	0x20000b38
 8005638:	20000b40 	.word	0x20000b40
 800563c:	20000b28 	.word	0x20000b28
 8005640:	20000650 	.word	0x20000650
 8005644:	2000064c 	.word	0x2000064c
 8005648:	20000b34 	.word	0x20000b34
 800564c:	20000b30 	.word	0x20000b30

08005650 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005650:	b480      	push	{r7}
 8005652:	b085      	sub	sp, #20
 8005654:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005656:	4b2a      	ldr	r3, [pc, #168]	; (8005700 <vTaskSwitchContext+0xb0>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	2b00      	cmp	r3, #0
 800565c:	d003      	beq.n	8005666 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800565e:	4b29      	ldr	r3, [pc, #164]	; (8005704 <vTaskSwitchContext+0xb4>)
 8005660:	2201      	movs	r2, #1
 8005662:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005664:	e046      	b.n	80056f4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8005666:	4b27      	ldr	r3, [pc, #156]	; (8005704 <vTaskSwitchContext+0xb4>)
 8005668:	2200      	movs	r2, #0
 800566a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566c:	4b26      	ldr	r3, [pc, #152]	; (8005708 <vTaskSwitchContext+0xb8>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	60fb      	str	r3, [r7, #12]
 8005672:	e010      	b.n	8005696 <vTaskSwitchContext+0x46>
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <vTaskSwitchContext+0x40>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	607b      	str	r3, [r7, #4]
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <vTaskSwitchContext+0x3e>
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	3b01      	subs	r3, #1
 8005694:	60fb      	str	r3, [r7, #12]
 8005696:	491d      	ldr	r1, [pc, #116]	; (800570c <vTaskSwitchContext+0xbc>)
 8005698:	68fa      	ldr	r2, [r7, #12]
 800569a:	4613      	mov	r3, r2
 800569c:	009b      	lsls	r3, r3, #2
 800569e:	4413      	add	r3, r2
 80056a0:	009b      	lsls	r3, r3, #2
 80056a2:	440b      	add	r3, r1
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d0e4      	beq.n	8005674 <vTaskSwitchContext+0x24>
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	4613      	mov	r3, r2
 80056ae:	009b      	lsls	r3, r3, #2
 80056b0:	4413      	add	r3, r2
 80056b2:	009b      	lsls	r3, r3, #2
 80056b4:	4a15      	ldr	r2, [pc, #84]	; (800570c <vTaskSwitchContext+0xbc>)
 80056b6:	4413      	add	r3, r2
 80056b8:	60bb      	str	r3, [r7, #8]
 80056ba:	68bb      	ldr	r3, [r7, #8]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	685a      	ldr	r2, [r3, #4]
 80056c0:	68bb      	ldr	r3, [r7, #8]
 80056c2:	605a      	str	r2, [r3, #4]
 80056c4:	68bb      	ldr	r3, [r7, #8]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	68bb      	ldr	r3, [r7, #8]
 80056ca:	3308      	adds	r3, #8
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d104      	bne.n	80056da <vTaskSwitchContext+0x8a>
 80056d0:	68bb      	ldr	r3, [r7, #8]
 80056d2:	685b      	ldr	r3, [r3, #4]
 80056d4:	685a      	ldr	r2, [r3, #4]
 80056d6:	68bb      	ldr	r3, [r7, #8]
 80056d8:	605a      	str	r2, [r3, #4]
 80056da:	68bb      	ldr	r3, [r7, #8]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	4a0b      	ldr	r2, [pc, #44]	; (8005710 <vTaskSwitchContext+0xc0>)
 80056e2:	6013      	str	r3, [r2, #0]
 80056e4:	4a08      	ldr	r2, [pc, #32]	; (8005708 <vTaskSwitchContext+0xb8>)
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80056ea:	4b09      	ldr	r3, [pc, #36]	; (8005710 <vTaskSwitchContext+0xc0>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	3354      	adds	r3, #84	; 0x54
 80056f0:	4a08      	ldr	r2, [pc, #32]	; (8005714 <vTaskSwitchContext+0xc4>)
 80056f2:	6013      	str	r3, [r2, #0]
}
 80056f4:	bf00      	nop
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr
 8005700:	20000b48 	.word	0x20000b48
 8005704:	20000b34 	.word	0x20000b34
 8005708:	20000b28 	.word	0x20000b28
 800570c:	20000650 	.word	0x20000650
 8005710:	2000064c 	.word	0x2000064c
 8005714:	20000010 	.word	0x20000010

08005718 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005718:	b580      	push	{r7, lr}
 800571a:	b084      	sub	sp, #16
 800571c:	af00      	add	r7, sp, #0
 800571e:	6078      	str	r0, [r7, #4]
 8005720:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d10a      	bne.n	800573e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8005728:	f04f 0350 	mov.w	r3, #80	; 0x50
 800572c:	f383 8811 	msr	BASEPRI, r3
 8005730:	f3bf 8f6f 	isb	sy
 8005734:	f3bf 8f4f 	dsb	sy
 8005738:	60fb      	str	r3, [r7, #12]
}
 800573a:	bf00      	nop
 800573c:	e7fe      	b.n	800573c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800573e:	4b07      	ldr	r3, [pc, #28]	; (800575c <vTaskPlaceOnEventList+0x44>)
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	3318      	adds	r3, #24
 8005744:	4619      	mov	r1, r3
 8005746:	6878      	ldr	r0, [r7, #4]
 8005748:	f7fe facb 	bl	8003ce2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800574c:	2101      	movs	r1, #1
 800574e:	6838      	ldr	r0, [r7, #0]
 8005750:	f000 fb8e 	bl	8005e70 <prvAddCurrentTaskToDelayedList>
}
 8005754:	bf00      	nop
 8005756:	3710      	adds	r7, #16
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}
 800575c:	2000064c 	.word	0x2000064c

08005760 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005760:	b580      	push	{r7, lr}
 8005762:	b086      	sub	sp, #24
 8005764:	af00      	add	r7, sp, #0
 8005766:	60f8      	str	r0, [r7, #12]
 8005768:	60b9      	str	r1, [r7, #8]
 800576a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	2b00      	cmp	r3, #0
 8005770:	d10a      	bne.n	8005788 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8005772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005776:	f383 8811 	msr	BASEPRI, r3
 800577a:	f3bf 8f6f 	isb	sy
 800577e:	f3bf 8f4f 	dsb	sy
 8005782:	617b      	str	r3, [r7, #20]
}
 8005784:	bf00      	nop
 8005786:	e7fe      	b.n	8005786 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005788:	4b0a      	ldr	r3, [pc, #40]	; (80057b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800578a:	681b      	ldr	r3, [r3, #0]
 800578c:	3318      	adds	r3, #24
 800578e:	4619      	mov	r1, r3
 8005790:	68f8      	ldr	r0, [r7, #12]
 8005792:	f7fe fa82 	bl	8003c9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d002      	beq.n	80057a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800579c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80057a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	68b8      	ldr	r0, [r7, #8]
 80057a6:	f000 fb63 	bl	8005e70 <prvAddCurrentTaskToDelayedList>
	}
 80057aa:	bf00      	nop
 80057ac:	3718      	adds	r7, #24
 80057ae:	46bd      	mov	sp, r7
 80057b0:	bd80      	pop	{r7, pc}
 80057b2:	bf00      	nop
 80057b4:	2000064c 	.word	0x2000064c

080057b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b086      	sub	sp, #24
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	68db      	ldr	r3, [r3, #12]
 80057c4:	68db      	ldr	r3, [r3, #12]
 80057c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80057c8:	693b      	ldr	r3, [r7, #16]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	60fb      	str	r3, [r7, #12]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80057e4:	693b      	ldr	r3, [r7, #16]
 80057e6:	3318      	adds	r3, #24
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7fe fab3 	bl	8003d54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80057ee:	4b1e      	ldr	r3, [pc, #120]	; (8005868 <xTaskRemoveFromEventList+0xb0>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d11d      	bne.n	8005832 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80057f6:	693b      	ldr	r3, [r7, #16]
 80057f8:	3304      	adds	r3, #4
 80057fa:	4618      	mov	r0, r3
 80057fc:	f7fe faaa 	bl	8003d54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005800:	693b      	ldr	r3, [r7, #16]
 8005802:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005804:	4b19      	ldr	r3, [pc, #100]	; (800586c <xTaskRemoveFromEventList+0xb4>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	429a      	cmp	r2, r3
 800580a:	d903      	bls.n	8005814 <xTaskRemoveFromEventList+0x5c>
 800580c:	693b      	ldr	r3, [r7, #16]
 800580e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005810:	4a16      	ldr	r2, [pc, #88]	; (800586c <xTaskRemoveFromEventList+0xb4>)
 8005812:	6013      	str	r3, [r2, #0]
 8005814:	693b      	ldr	r3, [r7, #16]
 8005816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005818:	4613      	mov	r3, r2
 800581a:	009b      	lsls	r3, r3, #2
 800581c:	4413      	add	r3, r2
 800581e:	009b      	lsls	r3, r3, #2
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <xTaskRemoveFromEventList+0xb8>)
 8005822:	441a      	add	r2, r3
 8005824:	693b      	ldr	r3, [r7, #16]
 8005826:	3304      	adds	r3, #4
 8005828:	4619      	mov	r1, r3
 800582a:	4610      	mov	r0, r2
 800582c:	f7fe fa35 	bl	8003c9a <vListInsertEnd>
 8005830:	e005      	b.n	800583e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005832:	693b      	ldr	r3, [r7, #16]
 8005834:	3318      	adds	r3, #24
 8005836:	4619      	mov	r1, r3
 8005838:	480e      	ldr	r0, [pc, #56]	; (8005874 <xTaskRemoveFromEventList+0xbc>)
 800583a:	f7fe fa2e 	bl	8003c9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005842:	4b0d      	ldr	r3, [pc, #52]	; (8005878 <xTaskRemoveFromEventList+0xc0>)
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005848:	429a      	cmp	r2, r3
 800584a:	d905      	bls.n	8005858 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800584c:	2301      	movs	r3, #1
 800584e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005850:	4b0a      	ldr	r3, [pc, #40]	; (800587c <xTaskRemoveFromEventList+0xc4>)
 8005852:	2201      	movs	r2, #1
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	e001      	b.n	800585c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005858:	2300      	movs	r3, #0
 800585a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800585c:	697b      	ldr	r3, [r7, #20]
}
 800585e:	4618      	mov	r0, r3
 8005860:	3718      	adds	r7, #24
 8005862:	46bd      	mov	sp, r7
 8005864:	bd80      	pop	{r7, pc}
 8005866:	bf00      	nop
 8005868:	20000b48 	.word	0x20000b48
 800586c:	20000b28 	.word	0x20000b28
 8005870:	20000650 	.word	0x20000650
 8005874:	20000ae0 	.word	0x20000ae0
 8005878:	2000064c 	.word	0x2000064c
 800587c:	20000b34 	.word	0x20000b34

08005880 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005888:	4b06      	ldr	r3, [pc, #24]	; (80058a4 <vTaskInternalSetTimeOutState+0x24>)
 800588a:	681a      	ldr	r2, [r3, #0]
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005890:	4b05      	ldr	r3, [pc, #20]	; (80058a8 <vTaskInternalSetTimeOutState+0x28>)
 8005892:	681a      	ldr	r2, [r3, #0]
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	605a      	str	r2, [r3, #4]
}
 8005898:	bf00      	nop
 800589a:	370c      	adds	r7, #12
 800589c:	46bd      	mov	sp, r7
 800589e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a2:	4770      	bx	lr
 80058a4:	20000b38 	.word	0x20000b38
 80058a8:	20000b24 	.word	0x20000b24

080058ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b088      	sub	sp, #32
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d10a      	bne.n	80058d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	613b      	str	r3, [r7, #16]
}
 80058ce:	bf00      	nop
 80058d0:	e7fe      	b.n	80058d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80058d2:	683b      	ldr	r3, [r7, #0]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	60fb      	str	r3, [r7, #12]
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80058ee:	f000 ff91 	bl	8006814 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80058f2:	4b1d      	ldr	r3, [pc, #116]	; (8005968 <xTaskCheckForTimeOut+0xbc>)
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	69ba      	ldr	r2, [r7, #24]
 80058fe:	1ad3      	subs	r3, r2, r3
 8005900:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800590a:	d102      	bne.n	8005912 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800590c:	2300      	movs	r3, #0
 800590e:	61fb      	str	r3, [r7, #28]
 8005910:	e023      	b.n	800595a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	4b15      	ldr	r3, [pc, #84]	; (800596c <xTaskCheckForTimeOut+0xc0>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	429a      	cmp	r2, r3
 800591c:	d007      	beq.n	800592e <xTaskCheckForTimeOut+0x82>
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	69ba      	ldr	r2, [r7, #24]
 8005924:	429a      	cmp	r2, r3
 8005926:	d302      	bcc.n	800592e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005928:	2301      	movs	r3, #1
 800592a:	61fb      	str	r3, [r7, #28]
 800592c:	e015      	b.n	800595a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	697a      	ldr	r2, [r7, #20]
 8005934:	429a      	cmp	r2, r3
 8005936:	d20b      	bcs.n	8005950 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005938:	683b      	ldr	r3, [r7, #0]
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	1ad2      	subs	r2, r2, r3
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005944:	6878      	ldr	r0, [r7, #4]
 8005946:	f7ff ff9b 	bl	8005880 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800594a:	2300      	movs	r3, #0
 800594c:	61fb      	str	r3, [r7, #28]
 800594e:	e004      	b.n	800595a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005950:	683b      	ldr	r3, [r7, #0]
 8005952:	2200      	movs	r2, #0
 8005954:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005956:	2301      	movs	r3, #1
 8005958:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800595a:	f000 ff8b 	bl	8006874 <vPortExitCritical>

	return xReturn;
 800595e:	69fb      	ldr	r3, [r7, #28]
}
 8005960:	4618      	mov	r0, r3
 8005962:	3720      	adds	r7, #32
 8005964:	46bd      	mov	sp, r7
 8005966:	bd80      	pop	{r7, pc}
 8005968:	20000b24 	.word	0x20000b24
 800596c:	20000b38 	.word	0x20000b38

08005970 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005970:	b480      	push	{r7}
 8005972:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005974:	4b03      	ldr	r3, [pc, #12]	; (8005984 <vTaskMissedYield+0x14>)
 8005976:	2201      	movs	r2, #1
 8005978:	601a      	str	r2, [r3, #0]
}
 800597a:	bf00      	nop
 800597c:	46bd      	mov	sp, r7
 800597e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005982:	4770      	bx	lr
 8005984:	20000b34 	.word	0x20000b34

08005988 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005990:	f000 f852 	bl	8005a38 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005994:	4b06      	ldr	r3, [pc, #24]	; (80059b0 <prvIdleTask+0x28>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b01      	cmp	r3, #1
 800599a:	d9f9      	bls.n	8005990 <prvIdleTask+0x8>
			{
				taskYIELD();
 800599c:	4b05      	ldr	r3, [pc, #20]	; (80059b4 <prvIdleTask+0x2c>)
 800599e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80059a2:	601a      	str	r2, [r3, #0]
 80059a4:	f3bf 8f4f 	dsb	sy
 80059a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80059ac:	e7f0      	b.n	8005990 <prvIdleTask+0x8>
 80059ae:	bf00      	nop
 80059b0:	20000650 	.word	0x20000650
 80059b4:	e000ed04 	.word	0xe000ed04

080059b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b082      	sub	sp, #8
 80059bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059be:	2300      	movs	r3, #0
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	e00c      	b.n	80059de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80059c4:	687a      	ldr	r2, [r7, #4]
 80059c6:	4613      	mov	r3, r2
 80059c8:	009b      	lsls	r3, r3, #2
 80059ca:	4413      	add	r3, r2
 80059cc:	009b      	lsls	r3, r3, #2
 80059ce:	4a12      	ldr	r2, [pc, #72]	; (8005a18 <prvInitialiseTaskLists+0x60>)
 80059d0:	4413      	add	r3, r2
 80059d2:	4618      	mov	r0, r3
 80059d4:	f7fe f934 	bl	8003c40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3301      	adds	r3, #1
 80059dc:	607b      	str	r3, [r7, #4]
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	2b37      	cmp	r3, #55	; 0x37
 80059e2:	d9ef      	bls.n	80059c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80059e4:	480d      	ldr	r0, [pc, #52]	; (8005a1c <prvInitialiseTaskLists+0x64>)
 80059e6:	f7fe f92b 	bl	8003c40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80059ea:	480d      	ldr	r0, [pc, #52]	; (8005a20 <prvInitialiseTaskLists+0x68>)
 80059ec:	f7fe f928 	bl	8003c40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80059f0:	480c      	ldr	r0, [pc, #48]	; (8005a24 <prvInitialiseTaskLists+0x6c>)
 80059f2:	f7fe f925 	bl	8003c40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80059f6:	480c      	ldr	r0, [pc, #48]	; (8005a28 <prvInitialiseTaskLists+0x70>)
 80059f8:	f7fe f922 	bl	8003c40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80059fc:	480b      	ldr	r0, [pc, #44]	; (8005a2c <prvInitialiseTaskLists+0x74>)
 80059fe:	f7fe f91f 	bl	8003c40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005a02:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <prvInitialiseTaskLists+0x78>)
 8005a04:	4a05      	ldr	r2, [pc, #20]	; (8005a1c <prvInitialiseTaskLists+0x64>)
 8005a06:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005a08:	4b0a      	ldr	r3, [pc, #40]	; (8005a34 <prvInitialiseTaskLists+0x7c>)
 8005a0a:	4a05      	ldr	r2, [pc, #20]	; (8005a20 <prvInitialiseTaskLists+0x68>)
 8005a0c:	601a      	str	r2, [r3, #0]
}
 8005a0e:	bf00      	nop
 8005a10:	3708      	adds	r7, #8
 8005a12:	46bd      	mov	sp, r7
 8005a14:	bd80      	pop	{r7, pc}
 8005a16:	bf00      	nop
 8005a18:	20000650 	.word	0x20000650
 8005a1c:	20000ab0 	.word	0x20000ab0
 8005a20:	20000ac4 	.word	0x20000ac4
 8005a24:	20000ae0 	.word	0x20000ae0
 8005a28:	20000af4 	.word	0x20000af4
 8005a2c:	20000b0c 	.word	0x20000b0c
 8005a30:	20000ad8 	.word	0x20000ad8
 8005a34:	20000adc 	.word	0x20000adc

08005a38 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b082      	sub	sp, #8
 8005a3c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a3e:	e019      	b.n	8005a74 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005a40:	f000 fee8 	bl	8006814 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a44:	4b10      	ldr	r3, [pc, #64]	; (8005a88 <prvCheckTasksWaitingTermination+0x50>)
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	68db      	ldr	r3, [r3, #12]
 8005a4a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	3304      	adds	r3, #4
 8005a50:	4618      	mov	r0, r3
 8005a52:	f7fe f97f 	bl	8003d54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005a56:	4b0d      	ldr	r3, [pc, #52]	; (8005a8c <prvCheckTasksWaitingTermination+0x54>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	3b01      	subs	r3, #1
 8005a5c:	4a0b      	ldr	r2, [pc, #44]	; (8005a8c <prvCheckTasksWaitingTermination+0x54>)
 8005a5e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005a60:	4b0b      	ldr	r3, [pc, #44]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	3b01      	subs	r3, #1
 8005a66:	4a0a      	ldr	r2, [pc, #40]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a68:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005a6a:	f000 ff03 	bl	8006874 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005a6e:	6878      	ldr	r0, [r7, #4]
 8005a70:	f000 f810 	bl	8005a94 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005a74:	4b06      	ldr	r3, [pc, #24]	; (8005a90 <prvCheckTasksWaitingTermination+0x58>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d1e1      	bne.n	8005a40 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005a7c:	bf00      	nop
 8005a7e:	bf00      	nop
 8005a80:	3708      	adds	r7, #8
 8005a82:	46bd      	mov	sp, r7
 8005a84:	bd80      	pop	{r7, pc}
 8005a86:	bf00      	nop
 8005a88:	20000af4 	.word	0x20000af4
 8005a8c:	20000b20 	.word	0x20000b20
 8005a90:	20000b08 	.word	0x20000b08

08005a94 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	3354      	adds	r3, #84	; 0x54
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	f001 fc0b 	bl	80072bc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d108      	bne.n	8005ac2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	f001 f89b 	bl	8006bf0 <vPortFree>
				vPortFree( pxTCB );
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 f898 	bl	8006bf0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005ac0:	e018      	b.n	8005af4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ac8:	2b01      	cmp	r3, #1
 8005aca:	d103      	bne.n	8005ad4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f001 f88f 	bl	8006bf0 <vPortFree>
	}
 8005ad2:	e00f      	b.n	8005af4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005ada:	2b02      	cmp	r3, #2
 8005adc:	d00a      	beq.n	8005af4 <prvDeleteTCB+0x60>
	__asm volatile
 8005ade:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ae2:	f383 8811 	msr	BASEPRI, r3
 8005ae6:	f3bf 8f6f 	isb	sy
 8005aea:	f3bf 8f4f 	dsb	sy
 8005aee:	60fb      	str	r3, [r7, #12]
}
 8005af0:	bf00      	nop
 8005af2:	e7fe      	b.n	8005af2 <prvDeleteTCB+0x5e>
	}
 8005af4:	bf00      	nop
 8005af6:	3710      	adds	r7, #16
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bd80      	pop	{r7, pc}

08005afc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005afc:	b480      	push	{r7}
 8005afe:	b083      	sub	sp, #12
 8005b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005b02:	4b0c      	ldr	r3, [pc, #48]	; (8005b34 <prvResetNextTaskUnblockTime+0x38>)
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d104      	bne.n	8005b16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005b0c:	4b0a      	ldr	r3, [pc, #40]	; (8005b38 <prvResetNextTaskUnblockTime+0x3c>)
 8005b0e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005b12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005b14:	e008      	b.n	8005b28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b16:	4b07      	ldr	r3, [pc, #28]	; (8005b34 <prvResetNextTaskUnblockTime+0x38>)
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	68db      	ldr	r3, [r3, #12]
 8005b1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	685b      	ldr	r3, [r3, #4]
 8005b24:	4a04      	ldr	r2, [pc, #16]	; (8005b38 <prvResetNextTaskUnblockTime+0x3c>)
 8005b26:	6013      	str	r3, [r2, #0]
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr
 8005b34:	20000ad8 	.word	0x20000ad8
 8005b38:	20000b40 	.word	0x20000b40

08005b3c <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005b3c:	b480      	push	{r7}
 8005b3e:	b083      	sub	sp, #12
 8005b40:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005b42:	4b05      	ldr	r3, [pc, #20]	; (8005b58 <xTaskGetCurrentTaskHandle+0x1c>)
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005b48:	687b      	ldr	r3, [r7, #4]
	}
 8005b4a:	4618      	mov	r0, r3
 8005b4c:	370c      	adds	r7, #12
 8005b4e:	46bd      	mov	sp, r7
 8005b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop
 8005b58:	2000064c 	.word	0x2000064c

08005b5c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005b5c:	b480      	push	{r7}
 8005b5e:	b083      	sub	sp, #12
 8005b60:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005b62:	4b0b      	ldr	r3, [pc, #44]	; (8005b90 <xTaskGetSchedulerState+0x34>)
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d102      	bne.n	8005b70 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	607b      	str	r3, [r7, #4]
 8005b6e:	e008      	b.n	8005b82 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005b70:	4b08      	ldr	r3, [pc, #32]	; (8005b94 <xTaskGetSchedulerState+0x38>)
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d102      	bne.n	8005b7e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005b78:	2302      	movs	r3, #2
 8005b7a:	607b      	str	r3, [r7, #4]
 8005b7c:	e001      	b.n	8005b82 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005b7e:	2300      	movs	r3, #0
 8005b80:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005b82:	687b      	ldr	r3, [r7, #4]
	}
 8005b84:	4618      	mov	r0, r3
 8005b86:	370c      	adds	r7, #12
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8e:	4770      	bx	lr
 8005b90:	20000b2c 	.word	0x20000b2c
 8005b94:	20000b48 	.word	0x20000b48

08005b98 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005ba4:	2300      	movs	r3, #0
 8005ba6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d051      	beq.n	8005c52 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005bae:	68bb      	ldr	r3, [r7, #8]
 8005bb0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bb2:	4b2a      	ldr	r3, [pc, #168]	; (8005c5c <xTaskPriorityInherit+0xc4>)
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d241      	bcs.n	8005c40 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005bbc:	68bb      	ldr	r3, [r7, #8]
 8005bbe:	699b      	ldr	r3, [r3, #24]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	db06      	blt.n	8005bd2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005bc4:	4b25      	ldr	r3, [pc, #148]	; (8005c5c <xTaskPriorityInherit+0xc4>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bca:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005bd2:	68bb      	ldr	r3, [r7, #8]
 8005bd4:	6959      	ldr	r1, [r3, #20]
 8005bd6:	68bb      	ldr	r3, [r7, #8]
 8005bd8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bda:	4613      	mov	r3, r2
 8005bdc:	009b      	lsls	r3, r3, #2
 8005bde:	4413      	add	r3, r2
 8005be0:	009b      	lsls	r3, r3, #2
 8005be2:	4a1f      	ldr	r2, [pc, #124]	; (8005c60 <xTaskPriorityInherit+0xc8>)
 8005be4:	4413      	add	r3, r2
 8005be6:	4299      	cmp	r1, r3
 8005be8:	d122      	bne.n	8005c30 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	3304      	adds	r3, #4
 8005bee:	4618      	mov	r0, r3
 8005bf0:	f7fe f8b0 	bl	8003d54 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005bf4:	4b19      	ldr	r3, [pc, #100]	; (8005c5c <xTaskPriorityInherit+0xc4>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005bfa:	68bb      	ldr	r3, [r7, #8]
 8005bfc:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005bfe:	68bb      	ldr	r3, [r7, #8]
 8005c00:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c02:	4b18      	ldr	r3, [pc, #96]	; (8005c64 <xTaskPriorityInherit+0xcc>)
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	429a      	cmp	r2, r3
 8005c08:	d903      	bls.n	8005c12 <xTaskPriorityInherit+0x7a>
 8005c0a:	68bb      	ldr	r3, [r7, #8]
 8005c0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c0e:	4a15      	ldr	r2, [pc, #84]	; (8005c64 <xTaskPriorityInherit+0xcc>)
 8005c10:	6013      	str	r3, [r2, #0]
 8005c12:	68bb      	ldr	r3, [r7, #8]
 8005c14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c16:	4613      	mov	r3, r2
 8005c18:	009b      	lsls	r3, r3, #2
 8005c1a:	4413      	add	r3, r2
 8005c1c:	009b      	lsls	r3, r3, #2
 8005c1e:	4a10      	ldr	r2, [pc, #64]	; (8005c60 <xTaskPriorityInherit+0xc8>)
 8005c20:	441a      	add	r2, r3
 8005c22:	68bb      	ldr	r3, [r7, #8]
 8005c24:	3304      	adds	r3, #4
 8005c26:	4619      	mov	r1, r3
 8005c28:	4610      	mov	r0, r2
 8005c2a:	f7fe f836 	bl	8003c9a <vListInsertEnd>
 8005c2e:	e004      	b.n	8005c3a <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005c30:	4b0a      	ldr	r3, [pc, #40]	; (8005c5c <xTaskPriorityInherit+0xc4>)
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005c36:	68bb      	ldr	r3, [r7, #8]
 8005c38:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005c3a:	2301      	movs	r3, #1
 8005c3c:	60fb      	str	r3, [r7, #12]
 8005c3e:	e008      	b.n	8005c52 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005c40:	68bb      	ldr	r3, [r7, #8]
 8005c42:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005c44:	4b05      	ldr	r3, [pc, #20]	; (8005c5c <xTaskPriorityInherit+0xc4>)
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c4a:	429a      	cmp	r2, r3
 8005c4c:	d201      	bcs.n	8005c52 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005c52:	68fb      	ldr	r3, [r7, #12]
	}
 8005c54:	4618      	mov	r0, r3
 8005c56:	3710      	adds	r7, #16
 8005c58:	46bd      	mov	sp, r7
 8005c5a:	bd80      	pop	{r7, pc}
 8005c5c:	2000064c 	.word	0x2000064c
 8005c60:	20000650 	.word	0x20000650
 8005c64:	20000b28 	.word	0x20000b28

08005c68 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005c68:	b580      	push	{r7, lr}
 8005c6a:	b086      	sub	sp, #24
 8005c6c:	af00      	add	r7, sp, #0
 8005c6e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005c74:	2300      	movs	r3, #0
 8005c76:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d056      	beq.n	8005d2c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005c7e:	4b2e      	ldr	r3, [pc, #184]	; (8005d38 <xTaskPriorityDisinherit+0xd0>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	693a      	ldr	r2, [r7, #16]
 8005c84:	429a      	cmp	r2, r3
 8005c86:	d00a      	beq.n	8005c9e <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005c88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c8c:	f383 8811 	msr	BASEPRI, r3
 8005c90:	f3bf 8f6f 	isb	sy
 8005c94:	f3bf 8f4f 	dsb	sy
 8005c98:	60fb      	str	r3, [r7, #12]
}
 8005c9a:	bf00      	nop
 8005c9c:	e7fe      	b.n	8005c9c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005c9e:	693b      	ldr	r3, [r7, #16]
 8005ca0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d10a      	bne.n	8005cbc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005ca6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005caa:	f383 8811 	msr	BASEPRI, r3
 8005cae:	f3bf 8f6f 	isb	sy
 8005cb2:	f3bf 8f4f 	dsb	sy
 8005cb6:	60bb      	str	r3, [r7, #8]
}
 8005cb8:	bf00      	nop
 8005cba:	e7fe      	b.n	8005cba <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005cbc:	693b      	ldr	r3, [r7, #16]
 8005cbe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cc0:	1e5a      	subs	r2, r3, #1
 8005cc2:	693b      	ldr	r3, [r7, #16]
 8005cc4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cca:	693b      	ldr	r3, [r7, #16]
 8005ccc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005cce:	429a      	cmp	r2, r3
 8005cd0:	d02c      	beq.n	8005d2c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005cd2:	693b      	ldr	r3, [r7, #16]
 8005cd4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d128      	bne.n	8005d2c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005cda:	693b      	ldr	r3, [r7, #16]
 8005cdc:	3304      	adds	r3, #4
 8005cde:	4618      	mov	r0, r3
 8005ce0:	f7fe f838 	bl	8003d54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005ce4:	693b      	ldr	r3, [r7, #16]
 8005ce6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005cf0:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005cf8:	693b      	ldr	r3, [r7, #16]
 8005cfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005cfc:	4b0f      	ldr	r3, [pc, #60]	; (8005d3c <xTaskPriorityDisinherit+0xd4>)
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d903      	bls.n	8005d0c <xTaskPriorityDisinherit+0xa4>
 8005d04:	693b      	ldr	r3, [r7, #16]
 8005d06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d08:	4a0c      	ldr	r2, [pc, #48]	; (8005d3c <xTaskPriorityDisinherit+0xd4>)
 8005d0a:	6013      	str	r3, [r2, #0]
 8005d0c:	693b      	ldr	r3, [r7, #16]
 8005d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d10:	4613      	mov	r3, r2
 8005d12:	009b      	lsls	r3, r3, #2
 8005d14:	4413      	add	r3, r2
 8005d16:	009b      	lsls	r3, r3, #2
 8005d18:	4a09      	ldr	r2, [pc, #36]	; (8005d40 <xTaskPriorityDisinherit+0xd8>)
 8005d1a:	441a      	add	r2, r3
 8005d1c:	693b      	ldr	r3, [r7, #16]
 8005d1e:	3304      	adds	r3, #4
 8005d20:	4619      	mov	r1, r3
 8005d22:	4610      	mov	r0, r2
 8005d24:	f7fd ffb9 	bl	8003c9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005d28:	2301      	movs	r3, #1
 8005d2a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005d2c:	697b      	ldr	r3, [r7, #20]
	}
 8005d2e:	4618      	mov	r0, r3
 8005d30:	3718      	adds	r7, #24
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	2000064c 	.word	0x2000064c
 8005d3c:	20000b28 	.word	0x20000b28
 8005d40:	20000650 	.word	0x20000650

08005d44 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005d44:	b580      	push	{r7, lr}
 8005d46:	b088      	sub	sp, #32
 8005d48:	af00      	add	r7, sp, #0
 8005d4a:	6078      	str	r0, [r7, #4]
 8005d4c:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005d52:	2301      	movs	r3, #1
 8005d54:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d06a      	beq.n	8005e32 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d10a      	bne.n	8005d7a <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005d64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d68:	f383 8811 	msr	BASEPRI, r3
 8005d6c:	f3bf 8f6f 	isb	sy
 8005d70:	f3bf 8f4f 	dsb	sy
 8005d74:	60fb      	str	r3, [r7, #12]
}
 8005d76:	bf00      	nop
 8005d78:	e7fe      	b.n	8005d78 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005d7a:	69bb      	ldr	r3, [r7, #24]
 8005d7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d7e:	683a      	ldr	r2, [r7, #0]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d902      	bls.n	8005d8a <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	61fb      	str	r3, [r7, #28]
 8005d88:	e002      	b.n	8005d90 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005d8a:	69bb      	ldr	r3, [r7, #24]
 8005d8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005d8e:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005d90:	69bb      	ldr	r3, [r7, #24]
 8005d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d94:	69fa      	ldr	r2, [r7, #28]
 8005d96:	429a      	cmp	r2, r3
 8005d98:	d04b      	beq.n	8005e32 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005d9a:	69bb      	ldr	r3, [r7, #24]
 8005d9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d9e:	697a      	ldr	r2, [r7, #20]
 8005da0:	429a      	cmp	r2, r3
 8005da2:	d146      	bne.n	8005e32 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005da4:	4b25      	ldr	r3, [pc, #148]	; (8005e3c <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	69ba      	ldr	r2, [r7, #24]
 8005daa:	429a      	cmp	r2, r3
 8005dac:	d10a      	bne.n	8005dc4 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005dae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005db2:	f383 8811 	msr	BASEPRI, r3
 8005db6:	f3bf 8f6f 	isb	sy
 8005dba:	f3bf 8f4f 	dsb	sy
 8005dbe:	60bb      	str	r3, [r7, #8]
}
 8005dc0:	bf00      	nop
 8005dc2:	e7fe      	b.n	8005dc2 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005dc4:	69bb      	ldr	r3, [r7, #24]
 8005dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005dc8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005dca:	69bb      	ldr	r3, [r7, #24]
 8005dcc:	69fa      	ldr	r2, [r7, #28]
 8005dce:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005dd0:	69bb      	ldr	r3, [r7, #24]
 8005dd2:	699b      	ldr	r3, [r3, #24]
 8005dd4:	2b00      	cmp	r3, #0
 8005dd6:	db04      	blt.n	8005de2 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005dd8:	69fb      	ldr	r3, [r7, #28]
 8005dda:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005dde:	69bb      	ldr	r3, [r7, #24]
 8005de0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005de2:	69bb      	ldr	r3, [r7, #24]
 8005de4:	6959      	ldr	r1, [r3, #20]
 8005de6:	693a      	ldr	r2, [r7, #16]
 8005de8:	4613      	mov	r3, r2
 8005dea:	009b      	lsls	r3, r3, #2
 8005dec:	4413      	add	r3, r2
 8005dee:	009b      	lsls	r3, r3, #2
 8005df0:	4a13      	ldr	r2, [pc, #76]	; (8005e40 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005df2:	4413      	add	r3, r2
 8005df4:	4299      	cmp	r1, r3
 8005df6:	d11c      	bne.n	8005e32 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005df8:	69bb      	ldr	r3, [r7, #24]
 8005dfa:	3304      	adds	r3, #4
 8005dfc:	4618      	mov	r0, r3
 8005dfe:	f7fd ffa9 	bl	8003d54 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005e02:	69bb      	ldr	r3, [r7, #24]
 8005e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e06:	4b0f      	ldr	r3, [pc, #60]	; (8005e44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	429a      	cmp	r2, r3
 8005e0c:	d903      	bls.n	8005e16 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e12:	4a0c      	ldr	r2, [pc, #48]	; (8005e44 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005e14:	6013      	str	r3, [r2, #0]
 8005e16:	69bb      	ldr	r3, [r7, #24]
 8005e18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	009b      	lsls	r3, r3, #2
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	4a07      	ldr	r2, [pc, #28]	; (8005e40 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005e24:	441a      	add	r2, r3
 8005e26:	69bb      	ldr	r3, [r7, #24]
 8005e28:	3304      	adds	r3, #4
 8005e2a:	4619      	mov	r1, r3
 8005e2c:	4610      	mov	r0, r2
 8005e2e:	f7fd ff34 	bl	8003c9a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005e32:	bf00      	nop
 8005e34:	3720      	adds	r7, #32
 8005e36:	46bd      	mov	sp, r7
 8005e38:	bd80      	pop	{r7, pc}
 8005e3a:	bf00      	nop
 8005e3c:	2000064c 	.word	0x2000064c
 8005e40:	20000650 	.word	0x20000650
 8005e44:	20000b28 	.word	0x20000b28

08005e48 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005e48:	b480      	push	{r7}
 8005e4a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005e4c:	4b07      	ldr	r3, [pc, #28]	; (8005e6c <pvTaskIncrementMutexHeldCount+0x24>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d004      	beq.n	8005e5e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005e54:	4b05      	ldr	r3, [pc, #20]	; (8005e6c <pvTaskIncrementMutexHeldCount+0x24>)
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005e5a:	3201      	adds	r2, #1
 8005e5c:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005e5e:	4b03      	ldr	r3, [pc, #12]	; (8005e6c <pvTaskIncrementMutexHeldCount+0x24>)
 8005e60:	681b      	ldr	r3, [r3, #0]
	}
 8005e62:	4618      	mov	r0, r3
 8005e64:	46bd      	mov	sp, r7
 8005e66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e6a:	4770      	bx	lr
 8005e6c:	2000064c 	.word	0x2000064c

08005e70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
 8005e78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005e7a:	4b21      	ldr	r3, [pc, #132]	; (8005f00 <prvAddCurrentTaskToDelayedList+0x90>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e80:	4b20      	ldr	r3, [pc, #128]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	3304      	adds	r3, #4
 8005e86:	4618      	mov	r0, r3
 8005e88:	f7fd ff64 	bl	8003d54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005e92:	d10a      	bne.n	8005eaa <prvAddCurrentTaskToDelayedList+0x3a>
 8005e94:	683b      	ldr	r3, [r7, #0]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d007      	beq.n	8005eaa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005e9a:	4b1a      	ldr	r3, [pc, #104]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4619      	mov	r1, r3
 8005ea2:	4819      	ldr	r0, [pc, #100]	; (8005f08 <prvAddCurrentTaskToDelayedList+0x98>)
 8005ea4:	f7fd fef9 	bl	8003c9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ea8:	e026      	b.n	8005ef8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005eaa:	68fa      	ldr	r2, [r7, #12]
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	4413      	add	r3, r2
 8005eb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005eb2:	4b14      	ldr	r3, [pc, #80]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	68ba      	ldr	r2, [r7, #8]
 8005eb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005eba:	68ba      	ldr	r2, [r7, #8]
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	429a      	cmp	r2, r3
 8005ec0:	d209      	bcs.n	8005ed6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ec2:	4b12      	ldr	r3, [pc, #72]	; (8005f0c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005ec4:	681a      	ldr	r2, [r3, #0]
 8005ec6:	4b0f      	ldr	r3, [pc, #60]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	3304      	adds	r3, #4
 8005ecc:	4619      	mov	r1, r3
 8005ece:	4610      	mov	r0, r2
 8005ed0:	f7fd ff07 	bl	8003ce2 <vListInsert>
}
 8005ed4:	e010      	b.n	8005ef8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005ed6:	4b0e      	ldr	r3, [pc, #56]	; (8005f10 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005ed8:	681a      	ldr	r2, [r3, #0]
 8005eda:	4b0a      	ldr	r3, [pc, #40]	; (8005f04 <prvAddCurrentTaskToDelayedList+0x94>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	3304      	adds	r3, #4
 8005ee0:	4619      	mov	r1, r3
 8005ee2:	4610      	mov	r0, r2
 8005ee4:	f7fd fefd 	bl	8003ce2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005ee8:	4b0a      	ldr	r3, [pc, #40]	; (8005f14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	68ba      	ldr	r2, [r7, #8]
 8005eee:	429a      	cmp	r2, r3
 8005ef0:	d202      	bcs.n	8005ef8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005ef2:	4a08      	ldr	r2, [pc, #32]	; (8005f14 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005ef4:	68bb      	ldr	r3, [r7, #8]
 8005ef6:	6013      	str	r3, [r2, #0]
}
 8005ef8:	bf00      	nop
 8005efa:	3710      	adds	r7, #16
 8005efc:	46bd      	mov	sp, r7
 8005efe:	bd80      	pop	{r7, pc}
 8005f00:	20000b24 	.word	0x20000b24
 8005f04:	2000064c 	.word	0x2000064c
 8005f08:	20000b0c 	.word	0x20000b0c
 8005f0c:	20000adc 	.word	0x20000adc
 8005f10:	20000ad8 	.word	0x20000ad8
 8005f14:	20000b40 	.word	0x20000b40

08005f18 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005f18:	b580      	push	{r7, lr}
 8005f1a:	b08a      	sub	sp, #40	; 0x28
 8005f1c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8005f1e:	2300      	movs	r3, #0
 8005f20:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8005f22:	f000 fb07 	bl	8006534 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005f26:	4b1c      	ldr	r3, [pc, #112]	; (8005f98 <xTimerCreateTimerTask+0x80>)
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d021      	beq.n	8005f72 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8005f2e:	2300      	movs	r3, #0
 8005f30:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8005f32:	2300      	movs	r3, #0
 8005f34:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005f36:	1d3a      	adds	r2, r7, #4
 8005f38:	f107 0108 	add.w	r1, r7, #8
 8005f3c:	f107 030c 	add.w	r3, r7, #12
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fd fe63 	bl	8003c0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005f46:	6879      	ldr	r1, [r7, #4]
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	68fa      	ldr	r2, [r7, #12]
 8005f4c:	9202      	str	r2, [sp, #8]
 8005f4e:	9301      	str	r3, [sp, #4]
 8005f50:	2302      	movs	r3, #2
 8005f52:	9300      	str	r3, [sp, #0]
 8005f54:	2300      	movs	r3, #0
 8005f56:	460a      	mov	r2, r1
 8005f58:	4910      	ldr	r1, [pc, #64]	; (8005f9c <xTimerCreateTimerTask+0x84>)
 8005f5a:	4811      	ldr	r0, [pc, #68]	; (8005fa0 <xTimerCreateTimerTask+0x88>)
 8005f5c:	f7fe ff32 	bl	8004dc4 <xTaskCreateStatic>
 8005f60:	4603      	mov	r3, r0
 8005f62:	4a10      	ldr	r2, [pc, #64]	; (8005fa4 <xTimerCreateTimerTask+0x8c>)
 8005f64:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005f66:	4b0f      	ldr	r3, [pc, #60]	; (8005fa4 <xTimerCreateTimerTask+0x8c>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2b00      	cmp	r3, #0
 8005f6c:	d001      	beq.n	8005f72 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005f72:	697b      	ldr	r3, [r7, #20]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d10a      	bne.n	8005f8e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005f78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7c:	f383 8811 	msr	BASEPRI, r3
 8005f80:	f3bf 8f6f 	isb	sy
 8005f84:	f3bf 8f4f 	dsb	sy
 8005f88:	613b      	str	r3, [r7, #16]
}
 8005f8a:	bf00      	nop
 8005f8c:	e7fe      	b.n	8005f8c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8005f8e:	697b      	ldr	r3, [r7, #20]
}
 8005f90:	4618      	mov	r0, r3
 8005f92:	3718      	adds	r7, #24
 8005f94:	46bd      	mov	sp, r7
 8005f96:	bd80      	pop	{r7, pc}
 8005f98:	20000b7c 	.word	0x20000b7c
 8005f9c:	08008470 	.word	0x08008470
 8005fa0:	080060dd 	.word	0x080060dd
 8005fa4:	20000b80 	.word	0x20000b80

08005fa8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005fa8:	b580      	push	{r7, lr}
 8005faa:	b08a      	sub	sp, #40	; 0x28
 8005fac:	af00      	add	r7, sp, #0
 8005fae:	60f8      	str	r0, [r7, #12]
 8005fb0:	60b9      	str	r1, [r7, #8]
 8005fb2:	607a      	str	r2, [r7, #4]
 8005fb4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d10a      	bne.n	8005fd6 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005fc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fc4:	f383 8811 	msr	BASEPRI, r3
 8005fc8:	f3bf 8f6f 	isb	sy
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	623b      	str	r3, [r7, #32]
}
 8005fd2:	bf00      	nop
 8005fd4:	e7fe      	b.n	8005fd4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005fd6:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <xTimerGenericCommand+0x98>)
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d02a      	beq.n	8006034 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8005fde:	68bb      	ldr	r3, [r7, #8]
 8005fe0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	2b05      	cmp	r3, #5
 8005fee:	dc18      	bgt.n	8006022 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005ff0:	f7ff fdb4 	bl	8005b5c <xTaskGetSchedulerState>
 8005ff4:	4603      	mov	r3, r0
 8005ff6:	2b02      	cmp	r3, #2
 8005ff8:	d109      	bne.n	800600e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005ffa:	4b11      	ldr	r3, [pc, #68]	; (8006040 <xTimerGenericCommand+0x98>)
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	f107 0110 	add.w	r1, r7, #16
 8006002:	2300      	movs	r3, #0
 8006004:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006006:	f7fe f877 	bl	80040f8 <xQueueGenericSend>
 800600a:	6278      	str	r0, [r7, #36]	; 0x24
 800600c:	e012      	b.n	8006034 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800600e:	4b0c      	ldr	r3, [pc, #48]	; (8006040 <xTimerGenericCommand+0x98>)
 8006010:	6818      	ldr	r0, [r3, #0]
 8006012:	f107 0110 	add.w	r1, r7, #16
 8006016:	2300      	movs	r3, #0
 8006018:	2200      	movs	r2, #0
 800601a:	f7fe f86d 	bl	80040f8 <xQueueGenericSend>
 800601e:	6278      	str	r0, [r7, #36]	; 0x24
 8006020:	e008      	b.n	8006034 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006022:	4b07      	ldr	r3, [pc, #28]	; (8006040 <xTimerGenericCommand+0x98>)
 8006024:	6818      	ldr	r0, [r3, #0]
 8006026:	f107 0110 	add.w	r1, r7, #16
 800602a:	2300      	movs	r3, #0
 800602c:	683a      	ldr	r2, [r7, #0]
 800602e:	f7fe f961 	bl	80042f4 <xQueueGenericSendFromISR>
 8006032:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006036:	4618      	mov	r0, r3
 8006038:	3728      	adds	r7, #40	; 0x28
 800603a:	46bd      	mov	sp, r7
 800603c:	bd80      	pop	{r7, pc}
 800603e:	bf00      	nop
 8006040:	20000b7c 	.word	0x20000b7c

08006044 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b088      	sub	sp, #32
 8006048:	af02      	add	r7, sp, #8
 800604a:	6078      	str	r0, [r7, #4]
 800604c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800604e:	4b22      	ldr	r3, [pc, #136]	; (80060d8 <prvProcessExpiredTimer+0x94>)
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	68db      	ldr	r3, [r3, #12]
 8006054:	68db      	ldr	r3, [r3, #12]
 8006056:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006058:	697b      	ldr	r3, [r7, #20]
 800605a:	3304      	adds	r3, #4
 800605c:	4618      	mov	r0, r3
 800605e:	f7fd fe79 	bl	8003d54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006062:	697b      	ldr	r3, [r7, #20]
 8006064:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006068:	f003 0304 	and.w	r3, r3, #4
 800606c:	2b00      	cmp	r3, #0
 800606e:	d022      	beq.n	80060b6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006070:	697b      	ldr	r3, [r7, #20]
 8006072:	699a      	ldr	r2, [r3, #24]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	18d1      	adds	r1, r2, r3
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	683a      	ldr	r2, [r7, #0]
 800607c:	6978      	ldr	r0, [r7, #20]
 800607e:	f000 f8d1 	bl	8006224 <prvInsertTimerInActiveList>
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d01f      	beq.n	80060c8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006088:	2300      	movs	r3, #0
 800608a:	9300      	str	r3, [sp, #0]
 800608c:	2300      	movs	r3, #0
 800608e:	687a      	ldr	r2, [r7, #4]
 8006090:	2100      	movs	r1, #0
 8006092:	6978      	ldr	r0, [r7, #20]
 8006094:	f7ff ff88 	bl	8005fa8 <xTimerGenericCommand>
 8006098:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800609a:	693b      	ldr	r3, [r7, #16]
 800609c:	2b00      	cmp	r3, #0
 800609e:	d113      	bne.n	80060c8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80060a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a4:	f383 8811 	msr	BASEPRI, r3
 80060a8:	f3bf 8f6f 	isb	sy
 80060ac:	f3bf 8f4f 	dsb	sy
 80060b0:	60fb      	str	r3, [r7, #12]
}
 80060b2:	bf00      	nop
 80060b4:	e7fe      	b.n	80060b4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80060b6:	697b      	ldr	r3, [r7, #20]
 80060b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80060bc:	f023 0301 	bic.w	r3, r3, #1
 80060c0:	b2da      	uxtb	r2, r3
 80060c2:	697b      	ldr	r3, [r7, #20]
 80060c4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80060c8:	697b      	ldr	r3, [r7, #20]
 80060ca:	6a1b      	ldr	r3, [r3, #32]
 80060cc:	6978      	ldr	r0, [r7, #20]
 80060ce:	4798      	blx	r3
}
 80060d0:	bf00      	nop
 80060d2:	3718      	adds	r7, #24
 80060d4:	46bd      	mov	sp, r7
 80060d6:	bd80      	pop	{r7, pc}
 80060d8:	20000b74 	.word	0x20000b74

080060dc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060e4:	f107 0308 	add.w	r3, r7, #8
 80060e8:	4618      	mov	r0, r3
 80060ea:	f000 f857 	bl	800619c <prvGetNextExpireTime>
 80060ee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80060f0:	68bb      	ldr	r3, [r7, #8]
 80060f2:	4619      	mov	r1, r3
 80060f4:	68f8      	ldr	r0, [r7, #12]
 80060f6:	f000 f803 	bl	8006100 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80060fa:	f000 f8d5 	bl	80062a8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80060fe:	e7f1      	b.n	80060e4 <prvTimerTask+0x8>

08006100 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006100:	b580      	push	{r7, lr}
 8006102:	b084      	sub	sp, #16
 8006104:	af00      	add	r7, sp, #0
 8006106:	6078      	str	r0, [r7, #4]
 8006108:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800610a:	f7ff f8f5 	bl	80052f8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800610e:	f107 0308 	add.w	r3, r7, #8
 8006112:	4618      	mov	r0, r3
 8006114:	f000 f866 	bl	80061e4 <prvSampleTimeNow>
 8006118:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d130      	bne.n	8006182 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10a      	bne.n	800613c <prvProcessTimerOrBlockTask+0x3c>
 8006126:	687a      	ldr	r2, [r7, #4]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	429a      	cmp	r2, r3
 800612c:	d806      	bhi.n	800613c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800612e:	f7ff f8f1 	bl	8005314 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006132:	68f9      	ldr	r1, [r7, #12]
 8006134:	6878      	ldr	r0, [r7, #4]
 8006136:	f7ff ff85 	bl	8006044 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800613a:	e024      	b.n	8006186 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d008      	beq.n	8006154 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006142:	4b13      	ldr	r3, [pc, #76]	; (8006190 <prvProcessTimerOrBlockTask+0x90>)
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d101      	bne.n	8006150 <prvProcessTimerOrBlockTask+0x50>
 800614c:	2301      	movs	r3, #1
 800614e:	e000      	b.n	8006152 <prvProcessTimerOrBlockTask+0x52>
 8006150:	2300      	movs	r3, #0
 8006152:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006154:	4b0f      	ldr	r3, [pc, #60]	; (8006194 <prvProcessTimerOrBlockTask+0x94>)
 8006156:	6818      	ldr	r0, [r3, #0]
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	1ad3      	subs	r3, r2, r3
 800615e:	683a      	ldr	r2, [r7, #0]
 8006160:	4619      	mov	r1, r3
 8006162:	f7fe fdfb 	bl	8004d5c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006166:	f7ff f8d5 	bl	8005314 <xTaskResumeAll>
 800616a:	4603      	mov	r3, r0
 800616c:	2b00      	cmp	r3, #0
 800616e:	d10a      	bne.n	8006186 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006170:	4b09      	ldr	r3, [pc, #36]	; (8006198 <prvProcessTimerOrBlockTask+0x98>)
 8006172:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006176:	601a      	str	r2, [r3, #0]
 8006178:	f3bf 8f4f 	dsb	sy
 800617c:	f3bf 8f6f 	isb	sy
}
 8006180:	e001      	b.n	8006186 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006182:	f7ff f8c7 	bl	8005314 <xTaskResumeAll>
}
 8006186:	bf00      	nop
 8006188:	3710      	adds	r7, #16
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	20000b78 	.word	0x20000b78
 8006194:	20000b7c 	.word	0x20000b7c
 8006198:	e000ed04 	.word	0xe000ed04

0800619c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800619c:	b480      	push	{r7}
 800619e:	b085      	sub	sp, #20
 80061a0:	af00      	add	r7, sp, #0
 80061a2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80061a4:	4b0e      	ldr	r3, [pc, #56]	; (80061e0 <prvGetNextExpireTime+0x44>)
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d101      	bne.n	80061b2 <prvGetNextExpireTime+0x16>
 80061ae:	2201      	movs	r2, #1
 80061b0:	e000      	b.n	80061b4 <prvGetNextExpireTime+0x18>
 80061b2:	2200      	movs	r2, #0
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d105      	bne.n	80061cc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80061c0:	4b07      	ldr	r3, [pc, #28]	; (80061e0 <prvGetNextExpireTime+0x44>)
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60fb      	str	r3, [r7, #12]
 80061ca:	e001      	b.n	80061d0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80061cc:	2300      	movs	r3, #0
 80061ce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80061d0:	68fb      	ldr	r3, [r7, #12]
}
 80061d2:	4618      	mov	r0, r3
 80061d4:	3714      	adds	r7, #20
 80061d6:	46bd      	mov	sp, r7
 80061d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061dc:	4770      	bx	lr
 80061de:	bf00      	nop
 80061e0:	20000b74 	.word	0x20000b74

080061e4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80061ec:	f7ff f930 	bl	8005450 <xTaskGetTickCount>
 80061f0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80061f2:	4b0b      	ldr	r3, [pc, #44]	; (8006220 <prvSampleTimeNow+0x3c>)
 80061f4:	681b      	ldr	r3, [r3, #0]
 80061f6:	68fa      	ldr	r2, [r7, #12]
 80061f8:	429a      	cmp	r2, r3
 80061fa:	d205      	bcs.n	8006208 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80061fc:	f000 f936 	bl	800646c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	2201      	movs	r2, #1
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e002      	b.n	800620e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800620e:	4a04      	ldr	r2, [pc, #16]	; (8006220 <prvSampleTimeNow+0x3c>)
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006214:	68fb      	ldr	r3, [r7, #12]
}
 8006216:	4618      	mov	r0, r3
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000b84 	.word	0x20000b84

08006224 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
 8006230:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006232:	2300      	movs	r3, #0
 8006234:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	68ba      	ldr	r2, [r7, #8]
 800623a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	68fa      	ldr	r2, [r7, #12]
 8006240:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006242:	68ba      	ldr	r2, [r7, #8]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	429a      	cmp	r2, r3
 8006248:	d812      	bhi.n	8006270 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800624a:	687a      	ldr	r2, [r7, #4]
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	1ad2      	subs	r2, r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	699b      	ldr	r3, [r3, #24]
 8006254:	429a      	cmp	r2, r3
 8006256:	d302      	bcc.n	800625e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006258:	2301      	movs	r3, #1
 800625a:	617b      	str	r3, [r7, #20]
 800625c:	e01b      	b.n	8006296 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800625e:	4b10      	ldr	r3, [pc, #64]	; (80062a0 <prvInsertTimerInActiveList+0x7c>)
 8006260:	681a      	ldr	r2, [r3, #0]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	3304      	adds	r3, #4
 8006266:	4619      	mov	r1, r3
 8006268:	4610      	mov	r0, r2
 800626a:	f7fd fd3a 	bl	8003ce2 <vListInsert>
 800626e:	e012      	b.n	8006296 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006270:	687a      	ldr	r2, [r7, #4]
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	429a      	cmp	r2, r3
 8006276:	d206      	bcs.n	8006286 <prvInsertTimerInActiveList+0x62>
 8006278:	68ba      	ldr	r2, [r7, #8]
 800627a:	683b      	ldr	r3, [r7, #0]
 800627c:	429a      	cmp	r2, r3
 800627e:	d302      	bcc.n	8006286 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006280:	2301      	movs	r3, #1
 8006282:	617b      	str	r3, [r7, #20]
 8006284:	e007      	b.n	8006296 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006286:	4b07      	ldr	r3, [pc, #28]	; (80062a4 <prvInsertTimerInActiveList+0x80>)
 8006288:	681a      	ldr	r2, [r3, #0]
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	3304      	adds	r3, #4
 800628e:	4619      	mov	r1, r3
 8006290:	4610      	mov	r0, r2
 8006292:	f7fd fd26 	bl	8003ce2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006296:	697b      	ldr	r3, [r7, #20]
}
 8006298:	4618      	mov	r0, r3
 800629a:	3718      	adds	r7, #24
 800629c:	46bd      	mov	sp, r7
 800629e:	bd80      	pop	{r7, pc}
 80062a0:	20000b78 	.word	0x20000b78
 80062a4:	20000b74 	.word	0x20000b74

080062a8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80062a8:	b580      	push	{r7, lr}
 80062aa:	b08e      	sub	sp, #56	; 0x38
 80062ac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80062ae:	e0ca      	b.n	8006446 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	da18      	bge.n	80062e8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80062b6:	1d3b      	adds	r3, r7, #4
 80062b8:	3304      	adds	r3, #4
 80062ba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80062bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d10a      	bne.n	80062d8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80062c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062c6:	f383 8811 	msr	BASEPRI, r3
 80062ca:	f3bf 8f6f 	isb	sy
 80062ce:	f3bf 8f4f 	dsb	sy
 80062d2:	61fb      	str	r3, [r7, #28]
}
 80062d4:	bf00      	nop
 80062d6:	e7fe      	b.n	80062d6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80062d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80062da:	681b      	ldr	r3, [r3, #0]
 80062dc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062de:	6850      	ldr	r0, [r2, #4]
 80062e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80062e2:	6892      	ldr	r2, [r2, #8]
 80062e4:	4611      	mov	r1, r2
 80062e6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	f2c0 80aa 	blt.w	8006444 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80062f0:	68fb      	ldr	r3, [r7, #12]
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80062f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f6:	695b      	ldr	r3, [r3, #20]
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	d004      	beq.n	8006306 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80062fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062fe:	3304      	adds	r3, #4
 8006300:	4618      	mov	r0, r3
 8006302:	f7fd fd27 	bl	8003d54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006306:	463b      	mov	r3, r7
 8006308:	4618      	mov	r0, r3
 800630a:	f7ff ff6b 	bl	80061e4 <prvSampleTimeNow>
 800630e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	2b09      	cmp	r3, #9
 8006314:	f200 8097 	bhi.w	8006446 <prvProcessReceivedCommands+0x19e>
 8006318:	a201      	add	r2, pc, #4	; (adr r2, 8006320 <prvProcessReceivedCommands+0x78>)
 800631a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800631e:	bf00      	nop
 8006320:	08006349 	.word	0x08006349
 8006324:	08006349 	.word	0x08006349
 8006328:	08006349 	.word	0x08006349
 800632c:	080063bd 	.word	0x080063bd
 8006330:	080063d1 	.word	0x080063d1
 8006334:	0800641b 	.word	0x0800641b
 8006338:	08006349 	.word	0x08006349
 800633c:	08006349 	.word	0x08006349
 8006340:	080063bd 	.word	0x080063bd
 8006344:	080063d1 	.word	0x080063d1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800634a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800634e:	f043 0301 	orr.w	r3, r3, #1
 8006352:	b2da      	uxtb	r2, r3
 8006354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006356:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800635a:	68ba      	ldr	r2, [r7, #8]
 800635c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800635e:	699b      	ldr	r3, [r3, #24]
 8006360:	18d1      	adds	r1, r2, r3
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006366:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006368:	f7ff ff5c 	bl	8006224 <prvInsertTimerInActiveList>
 800636c:	4603      	mov	r3, r0
 800636e:	2b00      	cmp	r3, #0
 8006370:	d069      	beq.n	8006446 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006372:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006374:	6a1b      	ldr	r3, [r3, #32]
 8006376:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006378:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800637a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006380:	f003 0304 	and.w	r3, r3, #4
 8006384:	2b00      	cmp	r3, #0
 8006386:	d05e      	beq.n	8006446 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006388:	68ba      	ldr	r2, [r7, #8]
 800638a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800638c:	699b      	ldr	r3, [r3, #24]
 800638e:	441a      	add	r2, r3
 8006390:	2300      	movs	r3, #0
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	2300      	movs	r3, #0
 8006396:	2100      	movs	r1, #0
 8006398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800639a:	f7ff fe05 	bl	8005fa8 <xTimerGenericCommand>
 800639e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80063a0:	6a3b      	ldr	r3, [r7, #32]
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d14f      	bne.n	8006446 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80063a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063aa:	f383 8811 	msr	BASEPRI, r3
 80063ae:	f3bf 8f6f 	isb	sy
 80063b2:	f3bf 8f4f 	dsb	sy
 80063b6:	61bb      	str	r3, [r7, #24]
}
 80063b8:	bf00      	nop
 80063ba:	e7fe      	b.n	80063ba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80063bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063be:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063c2:	f023 0301 	bic.w	r3, r3, #1
 80063c6:	b2da      	uxtb	r2, r3
 80063c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80063ce:	e03a      	b.n	8006446 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80063d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80063d6:	f043 0301 	orr.w	r3, r3, #1
 80063da:	b2da      	uxtb	r2, r3
 80063dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80063e2:	68ba      	ldr	r2, [r7, #8]
 80063e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063e6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80063e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80063ea:	699b      	ldr	r3, [r3, #24]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d10a      	bne.n	8006406 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 80063f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063f4:	f383 8811 	msr	BASEPRI, r3
 80063f8:	f3bf 8f6f 	isb	sy
 80063fc:	f3bf 8f4f 	dsb	sy
 8006400:	617b      	str	r3, [r7, #20]
}
 8006402:	bf00      	nop
 8006404:	e7fe      	b.n	8006404 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006408:	699a      	ldr	r2, [r3, #24]
 800640a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800640c:	18d1      	adds	r1, r2, r3
 800640e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006410:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006412:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006414:	f7ff ff06 	bl	8006224 <prvInsertTimerInActiveList>
					break;
 8006418:	e015      	b.n	8006446 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800641a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800641c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006420:	f003 0302 	and.w	r3, r3, #2
 8006424:	2b00      	cmp	r3, #0
 8006426:	d103      	bne.n	8006430 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006428:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800642a:	f000 fbe1 	bl	8006bf0 <vPortFree>
 800642e:	e00a      	b.n	8006446 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006430:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006432:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006436:	f023 0301 	bic.w	r3, r3, #1
 800643a:	b2da      	uxtb	r2, r3
 800643c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800643e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006442:	e000      	b.n	8006446 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006444:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006446:	4b08      	ldr	r3, [pc, #32]	; (8006468 <prvProcessReceivedCommands+0x1c0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	1d39      	adds	r1, r7, #4
 800644c:	2200      	movs	r2, #0
 800644e:	4618      	mov	r0, r3
 8006450:	f7fe f878 	bl	8004544 <xQueueReceive>
 8006454:	4603      	mov	r3, r0
 8006456:	2b00      	cmp	r3, #0
 8006458:	f47f af2a 	bne.w	80062b0 <prvProcessReceivedCommands+0x8>
	}
}
 800645c:	bf00      	nop
 800645e:	bf00      	nop
 8006460:	3730      	adds	r7, #48	; 0x30
 8006462:	46bd      	mov	sp, r7
 8006464:	bd80      	pop	{r7, pc}
 8006466:	bf00      	nop
 8006468:	20000b7c 	.word	0x20000b7c

0800646c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800646c:	b580      	push	{r7, lr}
 800646e:	b088      	sub	sp, #32
 8006470:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006472:	e048      	b.n	8006506 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006474:	4b2d      	ldr	r3, [pc, #180]	; (800652c <prvSwitchTimerLists+0xc0>)
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	681b      	ldr	r3, [r3, #0]
 800647c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800647e:	4b2b      	ldr	r3, [pc, #172]	; (800652c <prvSwitchTimerLists+0xc0>)
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	68db      	ldr	r3, [r3, #12]
 8006484:	68db      	ldr	r3, [r3, #12]
 8006486:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006488:	68fb      	ldr	r3, [r7, #12]
 800648a:	3304      	adds	r3, #4
 800648c:	4618      	mov	r0, r3
 800648e:	f7fd fc61 	bl	8003d54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	6a1b      	ldr	r3, [r3, #32]
 8006496:	68f8      	ldr	r0, [r7, #12]
 8006498:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064a0:	f003 0304 	and.w	r3, r3, #4
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d02e      	beq.n	8006506 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	699b      	ldr	r3, [r3, #24]
 80064ac:	693a      	ldr	r2, [r7, #16]
 80064ae:	4413      	add	r3, r2
 80064b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80064b2:	68ba      	ldr	r2, [r7, #8]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	429a      	cmp	r2, r3
 80064b8:	d90e      	bls.n	80064d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	68ba      	ldr	r2, [r7, #8]
 80064be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	68fa      	ldr	r2, [r7, #12]
 80064c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80064c6:	4b19      	ldr	r3, [pc, #100]	; (800652c <prvSwitchTimerLists+0xc0>)
 80064c8:	681a      	ldr	r2, [r3, #0]
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	3304      	adds	r3, #4
 80064ce:	4619      	mov	r1, r3
 80064d0:	4610      	mov	r0, r2
 80064d2:	f7fd fc06 	bl	8003ce2 <vListInsert>
 80064d6:	e016      	b.n	8006506 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80064d8:	2300      	movs	r3, #0
 80064da:	9300      	str	r3, [sp, #0]
 80064dc:	2300      	movs	r3, #0
 80064de:	693a      	ldr	r2, [r7, #16]
 80064e0:	2100      	movs	r1, #0
 80064e2:	68f8      	ldr	r0, [r7, #12]
 80064e4:	f7ff fd60 	bl	8005fa8 <xTimerGenericCommand>
 80064e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d10a      	bne.n	8006506 <prvSwitchTimerLists+0x9a>
	__asm volatile
 80064f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f4:	f383 8811 	msr	BASEPRI, r3
 80064f8:	f3bf 8f6f 	isb	sy
 80064fc:	f3bf 8f4f 	dsb	sy
 8006500:	603b      	str	r3, [r7, #0]
}
 8006502:	bf00      	nop
 8006504:	e7fe      	b.n	8006504 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006506:	4b09      	ldr	r3, [pc, #36]	; (800652c <prvSwitchTimerLists+0xc0>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681b      	ldr	r3, [r3, #0]
 800650c:	2b00      	cmp	r3, #0
 800650e:	d1b1      	bne.n	8006474 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006510:	4b06      	ldr	r3, [pc, #24]	; (800652c <prvSwitchTimerLists+0xc0>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006516:	4b06      	ldr	r3, [pc, #24]	; (8006530 <prvSwitchTimerLists+0xc4>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	4a04      	ldr	r2, [pc, #16]	; (800652c <prvSwitchTimerLists+0xc0>)
 800651c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800651e:	4a04      	ldr	r2, [pc, #16]	; (8006530 <prvSwitchTimerLists+0xc4>)
 8006520:	697b      	ldr	r3, [r7, #20]
 8006522:	6013      	str	r3, [r2, #0]
}
 8006524:	bf00      	nop
 8006526:	3718      	adds	r7, #24
 8006528:	46bd      	mov	sp, r7
 800652a:	bd80      	pop	{r7, pc}
 800652c:	20000b74 	.word	0x20000b74
 8006530:	20000b78 	.word	0x20000b78

08006534 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800653a:	f000 f96b 	bl	8006814 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800653e:	4b15      	ldr	r3, [pc, #84]	; (8006594 <prvCheckForValidListAndQueue+0x60>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d120      	bne.n	8006588 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006546:	4814      	ldr	r0, [pc, #80]	; (8006598 <prvCheckForValidListAndQueue+0x64>)
 8006548:	f7fd fb7a 	bl	8003c40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800654c:	4813      	ldr	r0, [pc, #76]	; (800659c <prvCheckForValidListAndQueue+0x68>)
 800654e:	f7fd fb77 	bl	8003c40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006552:	4b13      	ldr	r3, [pc, #76]	; (80065a0 <prvCheckForValidListAndQueue+0x6c>)
 8006554:	4a10      	ldr	r2, [pc, #64]	; (8006598 <prvCheckForValidListAndQueue+0x64>)
 8006556:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006558:	4b12      	ldr	r3, [pc, #72]	; (80065a4 <prvCheckForValidListAndQueue+0x70>)
 800655a:	4a10      	ldr	r2, [pc, #64]	; (800659c <prvCheckForValidListAndQueue+0x68>)
 800655c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800655e:	2300      	movs	r3, #0
 8006560:	9300      	str	r3, [sp, #0]
 8006562:	4b11      	ldr	r3, [pc, #68]	; (80065a8 <prvCheckForValidListAndQueue+0x74>)
 8006564:	4a11      	ldr	r2, [pc, #68]	; (80065ac <prvCheckForValidListAndQueue+0x78>)
 8006566:	2110      	movs	r1, #16
 8006568:	200a      	movs	r0, #10
 800656a:	f7fd fc85 	bl	8003e78 <xQueueGenericCreateStatic>
 800656e:	4603      	mov	r3, r0
 8006570:	4a08      	ldr	r2, [pc, #32]	; (8006594 <prvCheckForValidListAndQueue+0x60>)
 8006572:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006574:	4b07      	ldr	r3, [pc, #28]	; (8006594 <prvCheckForValidListAndQueue+0x60>)
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d005      	beq.n	8006588 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800657c:	4b05      	ldr	r3, [pc, #20]	; (8006594 <prvCheckForValidListAndQueue+0x60>)
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	490b      	ldr	r1, [pc, #44]	; (80065b0 <prvCheckForValidListAndQueue+0x7c>)
 8006582:	4618      	mov	r0, r3
 8006584:	f7fe fb96 	bl	8004cb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006588:	f000 f974 	bl	8006874 <vPortExitCritical>
}
 800658c:	bf00      	nop
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}
 8006592:	bf00      	nop
 8006594:	20000b7c 	.word	0x20000b7c
 8006598:	20000b4c 	.word	0x20000b4c
 800659c:	20000b60 	.word	0x20000b60
 80065a0:	20000b74 	.word	0x20000b74
 80065a4:	20000b78 	.word	0x20000b78
 80065a8:	20000c28 	.word	0x20000c28
 80065ac:	20000b88 	.word	0x20000b88
 80065b0:	08008478 	.word	0x08008478

080065b4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80065b4:	b480      	push	{r7}
 80065b6:	b085      	sub	sp, #20
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	3b04      	subs	r3, #4
 80065c4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80065c6:	68fb      	ldr	r3, [r7, #12]
 80065c8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80065cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065ce:	68fb      	ldr	r3, [r7, #12]
 80065d0:	3b04      	subs	r3, #4
 80065d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	f023 0201 	bic.w	r2, r3, #1
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	3b04      	subs	r3, #4
 80065e2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80065e4:	4a0c      	ldr	r2, [pc, #48]	; (8006618 <pxPortInitialiseStack+0x64>)
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3b14      	subs	r3, #20
 80065ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80065f0:	687a      	ldr	r2, [r7, #4]
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	3b04      	subs	r3, #4
 80065fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	f06f 0202 	mvn.w	r2, #2
 8006602:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3b20      	subs	r3, #32
 8006608:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800660a:	68fb      	ldr	r3, [r7, #12]
}
 800660c:	4618      	mov	r0, r3
 800660e:	3714      	adds	r7, #20
 8006610:	46bd      	mov	sp, r7
 8006612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006616:	4770      	bx	lr
 8006618:	0800661d 	.word	0x0800661d

0800661c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800661c:	b480      	push	{r7}
 800661e:	b085      	sub	sp, #20
 8006620:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006622:	2300      	movs	r3, #0
 8006624:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006626:	4b12      	ldr	r3, [pc, #72]	; (8006670 <prvTaskExitError+0x54>)
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800662e:	d00a      	beq.n	8006646 <prvTaskExitError+0x2a>
	__asm volatile
 8006630:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006634:	f383 8811 	msr	BASEPRI, r3
 8006638:	f3bf 8f6f 	isb	sy
 800663c:	f3bf 8f4f 	dsb	sy
 8006640:	60fb      	str	r3, [r7, #12]
}
 8006642:	bf00      	nop
 8006644:	e7fe      	b.n	8006644 <prvTaskExitError+0x28>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	; 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	60bb      	str	r3, [r7, #8]
}
 8006658:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800665a:	bf00      	nop
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	2b00      	cmp	r3, #0
 8006660:	d0fc      	beq.n	800665c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006662:	bf00      	nop
 8006664:	bf00      	nop
 8006666:	3714      	adds	r7, #20
 8006668:	46bd      	mov	sp, r7
 800666a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800666e:	4770      	bx	lr
 8006670:	2000000c 	.word	0x2000000c
	...

08006680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006680:	4b07      	ldr	r3, [pc, #28]	; (80066a0 <pxCurrentTCBConst2>)
 8006682:	6819      	ldr	r1, [r3, #0]
 8006684:	6808      	ldr	r0, [r1, #0]
 8006686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800668a:	f380 8809 	msr	PSP, r0
 800668e:	f3bf 8f6f 	isb	sy
 8006692:	f04f 0000 	mov.w	r0, #0
 8006696:	f380 8811 	msr	BASEPRI, r0
 800669a:	4770      	bx	lr
 800669c:	f3af 8000 	nop.w

080066a0 <pxCurrentTCBConst2>:
 80066a0:	2000064c 	.word	0x2000064c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80066a4:	bf00      	nop
 80066a6:	bf00      	nop

080066a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80066a8:	4808      	ldr	r0, [pc, #32]	; (80066cc <prvPortStartFirstTask+0x24>)
 80066aa:	6800      	ldr	r0, [r0, #0]
 80066ac:	6800      	ldr	r0, [r0, #0]
 80066ae:	f380 8808 	msr	MSP, r0
 80066b2:	f04f 0000 	mov.w	r0, #0
 80066b6:	f380 8814 	msr	CONTROL, r0
 80066ba:	b662      	cpsie	i
 80066bc:	b661      	cpsie	f
 80066be:	f3bf 8f4f 	dsb	sy
 80066c2:	f3bf 8f6f 	isb	sy
 80066c6:	df00      	svc	0
 80066c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80066ca:	bf00      	nop
 80066cc:	e000ed08 	.word	0xe000ed08

080066d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80066d0:	b580      	push	{r7, lr}
 80066d2:	b086      	sub	sp, #24
 80066d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80066d6:	4b46      	ldr	r3, [pc, #280]	; (80067f0 <xPortStartScheduler+0x120>)
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	4a46      	ldr	r2, [pc, #280]	; (80067f4 <xPortStartScheduler+0x124>)
 80066dc:	4293      	cmp	r3, r2
 80066de:	d10a      	bne.n	80066f6 <xPortStartScheduler+0x26>
	__asm volatile
 80066e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80066e4:	f383 8811 	msr	BASEPRI, r3
 80066e8:	f3bf 8f6f 	isb	sy
 80066ec:	f3bf 8f4f 	dsb	sy
 80066f0:	613b      	str	r3, [r7, #16]
}
 80066f2:	bf00      	nop
 80066f4:	e7fe      	b.n	80066f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80066f6:	4b3e      	ldr	r3, [pc, #248]	; (80067f0 <xPortStartScheduler+0x120>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	4a3f      	ldr	r2, [pc, #252]	; (80067f8 <xPortStartScheduler+0x128>)
 80066fc:	4293      	cmp	r3, r2
 80066fe:	d10a      	bne.n	8006716 <xPortStartScheduler+0x46>
	__asm volatile
 8006700:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006704:	f383 8811 	msr	BASEPRI, r3
 8006708:	f3bf 8f6f 	isb	sy
 800670c:	f3bf 8f4f 	dsb	sy
 8006710:	60fb      	str	r3, [r7, #12]
}
 8006712:	bf00      	nop
 8006714:	e7fe      	b.n	8006714 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006716:	4b39      	ldr	r3, [pc, #228]	; (80067fc <xPortStartScheduler+0x12c>)
 8006718:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800671a:	697b      	ldr	r3, [r7, #20]
 800671c:	781b      	ldrb	r3, [r3, #0]
 800671e:	b2db      	uxtb	r3, r3
 8006720:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	22ff      	movs	r2, #255	; 0xff
 8006726:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	781b      	ldrb	r3, [r3, #0]
 800672c:	b2db      	uxtb	r3, r3
 800672e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006730:	78fb      	ldrb	r3, [r7, #3]
 8006732:	b2db      	uxtb	r3, r3
 8006734:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006738:	b2da      	uxtb	r2, r3
 800673a:	4b31      	ldr	r3, [pc, #196]	; (8006800 <xPortStartScheduler+0x130>)
 800673c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800673e:	4b31      	ldr	r3, [pc, #196]	; (8006804 <xPortStartScheduler+0x134>)
 8006740:	2207      	movs	r2, #7
 8006742:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006744:	e009      	b.n	800675a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006746:	4b2f      	ldr	r3, [pc, #188]	; (8006804 <xPortStartScheduler+0x134>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	3b01      	subs	r3, #1
 800674c:	4a2d      	ldr	r2, [pc, #180]	; (8006804 <xPortStartScheduler+0x134>)
 800674e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006750:	78fb      	ldrb	r3, [r7, #3]
 8006752:	b2db      	uxtb	r3, r3
 8006754:	005b      	lsls	r3, r3, #1
 8006756:	b2db      	uxtb	r3, r3
 8006758:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800675a:	78fb      	ldrb	r3, [r7, #3]
 800675c:	b2db      	uxtb	r3, r3
 800675e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006762:	2b80      	cmp	r3, #128	; 0x80
 8006764:	d0ef      	beq.n	8006746 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006766:	4b27      	ldr	r3, [pc, #156]	; (8006804 <xPortStartScheduler+0x134>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	f1c3 0307 	rsb	r3, r3, #7
 800676e:	2b04      	cmp	r3, #4
 8006770:	d00a      	beq.n	8006788 <xPortStartScheduler+0xb8>
	__asm volatile
 8006772:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006776:	f383 8811 	msr	BASEPRI, r3
 800677a:	f3bf 8f6f 	isb	sy
 800677e:	f3bf 8f4f 	dsb	sy
 8006782:	60bb      	str	r3, [r7, #8]
}
 8006784:	bf00      	nop
 8006786:	e7fe      	b.n	8006786 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006788:	4b1e      	ldr	r3, [pc, #120]	; (8006804 <xPortStartScheduler+0x134>)
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	021b      	lsls	r3, r3, #8
 800678e:	4a1d      	ldr	r2, [pc, #116]	; (8006804 <xPortStartScheduler+0x134>)
 8006790:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006792:	4b1c      	ldr	r3, [pc, #112]	; (8006804 <xPortStartScheduler+0x134>)
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800679a:	4a1a      	ldr	r2, [pc, #104]	; (8006804 <xPortStartScheduler+0x134>)
 800679c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	b2da      	uxtb	r2, r3
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80067a6:	4b18      	ldr	r3, [pc, #96]	; (8006808 <xPortStartScheduler+0x138>)
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a17      	ldr	r2, [pc, #92]	; (8006808 <xPortStartScheduler+0x138>)
 80067ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80067b0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80067b2:	4b15      	ldr	r3, [pc, #84]	; (8006808 <xPortStartScheduler+0x138>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	4a14      	ldr	r2, [pc, #80]	; (8006808 <xPortStartScheduler+0x138>)
 80067b8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80067bc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80067be:	f000 f8dd 	bl	800697c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80067c2:	4b12      	ldr	r3, [pc, #72]	; (800680c <xPortStartScheduler+0x13c>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80067c8:	f000 f8fc 	bl	80069c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80067cc:	4b10      	ldr	r3, [pc, #64]	; (8006810 <xPortStartScheduler+0x140>)
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	4a0f      	ldr	r2, [pc, #60]	; (8006810 <xPortStartScheduler+0x140>)
 80067d2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80067d6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80067d8:	f7ff ff66 	bl	80066a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80067dc:	f7fe ff38 	bl	8005650 <vTaskSwitchContext>
	prvTaskExitError();
 80067e0:	f7ff ff1c 	bl	800661c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	3718      	adds	r7, #24
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	e000ed00 	.word	0xe000ed00
 80067f4:	410fc271 	.word	0x410fc271
 80067f8:	410fc270 	.word	0x410fc270
 80067fc:	e000e400 	.word	0xe000e400
 8006800:	20000c78 	.word	0x20000c78
 8006804:	20000c7c 	.word	0x20000c7c
 8006808:	e000ed20 	.word	0xe000ed20
 800680c:	2000000c 	.word	0x2000000c
 8006810:	e000ef34 	.word	0xe000ef34

08006814 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006814:	b480      	push	{r7}
 8006816:	b083      	sub	sp, #12
 8006818:	af00      	add	r7, sp, #0
	__asm volatile
 800681a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800681e:	f383 8811 	msr	BASEPRI, r3
 8006822:	f3bf 8f6f 	isb	sy
 8006826:	f3bf 8f4f 	dsb	sy
 800682a:	607b      	str	r3, [r7, #4]
}
 800682c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800682e:	4b0f      	ldr	r3, [pc, #60]	; (800686c <vPortEnterCritical+0x58>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3301      	adds	r3, #1
 8006834:	4a0d      	ldr	r2, [pc, #52]	; (800686c <vPortEnterCritical+0x58>)
 8006836:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006838:	4b0c      	ldr	r3, [pc, #48]	; (800686c <vPortEnterCritical+0x58>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b01      	cmp	r3, #1
 800683e:	d10f      	bne.n	8006860 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006840:	4b0b      	ldr	r3, [pc, #44]	; (8006870 <vPortEnterCritical+0x5c>)
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	b2db      	uxtb	r3, r3
 8006846:	2b00      	cmp	r3, #0
 8006848:	d00a      	beq.n	8006860 <vPortEnterCritical+0x4c>
	__asm volatile
 800684a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800684e:	f383 8811 	msr	BASEPRI, r3
 8006852:	f3bf 8f6f 	isb	sy
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	603b      	str	r3, [r7, #0]
}
 800685c:	bf00      	nop
 800685e:	e7fe      	b.n	800685e <vPortEnterCritical+0x4a>
	}
}
 8006860:	bf00      	nop
 8006862:	370c      	adds	r7, #12
 8006864:	46bd      	mov	sp, r7
 8006866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686a:	4770      	bx	lr
 800686c:	2000000c 	.word	0x2000000c
 8006870:	e000ed04 	.word	0xe000ed04

08006874 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8006874:	b480      	push	{r7}
 8006876:	b083      	sub	sp, #12
 8006878:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800687a:	4b12      	ldr	r3, [pc, #72]	; (80068c4 <vPortExitCritical+0x50>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	2b00      	cmp	r3, #0
 8006880:	d10a      	bne.n	8006898 <vPortExitCritical+0x24>
	__asm volatile
 8006882:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006886:	f383 8811 	msr	BASEPRI, r3
 800688a:	f3bf 8f6f 	isb	sy
 800688e:	f3bf 8f4f 	dsb	sy
 8006892:	607b      	str	r3, [r7, #4]
}
 8006894:	bf00      	nop
 8006896:	e7fe      	b.n	8006896 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8006898:	4b0a      	ldr	r3, [pc, #40]	; (80068c4 <vPortExitCritical+0x50>)
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	3b01      	subs	r3, #1
 800689e:	4a09      	ldr	r2, [pc, #36]	; (80068c4 <vPortExitCritical+0x50>)
 80068a0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80068a2:	4b08      	ldr	r3, [pc, #32]	; (80068c4 <vPortExitCritical+0x50>)
 80068a4:	681b      	ldr	r3, [r3, #0]
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d105      	bne.n	80068b6 <vPortExitCritical+0x42>
 80068aa:	2300      	movs	r3, #0
 80068ac:	603b      	str	r3, [r7, #0]
	__asm volatile
 80068ae:	683b      	ldr	r3, [r7, #0]
 80068b0:	f383 8811 	msr	BASEPRI, r3
}
 80068b4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80068b6:	bf00      	nop
 80068b8:	370c      	adds	r7, #12
 80068ba:	46bd      	mov	sp, r7
 80068bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c0:	4770      	bx	lr
 80068c2:	bf00      	nop
 80068c4:	2000000c 	.word	0x2000000c
	...

080068d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80068d0:	f3ef 8009 	mrs	r0, PSP
 80068d4:	f3bf 8f6f 	isb	sy
 80068d8:	4b15      	ldr	r3, [pc, #84]	; (8006930 <pxCurrentTCBConst>)
 80068da:	681a      	ldr	r2, [r3, #0]
 80068dc:	f01e 0f10 	tst.w	lr, #16
 80068e0:	bf08      	it	eq
 80068e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80068e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068ea:	6010      	str	r0, [r2, #0]
 80068ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80068f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80068f4:	f380 8811 	msr	BASEPRI, r0
 80068f8:	f3bf 8f4f 	dsb	sy
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f7fe fea6 	bl	8005650 <vTaskSwitchContext>
 8006904:	f04f 0000 	mov.w	r0, #0
 8006908:	f380 8811 	msr	BASEPRI, r0
 800690c:	bc09      	pop	{r0, r3}
 800690e:	6819      	ldr	r1, [r3, #0]
 8006910:	6808      	ldr	r0, [r1, #0]
 8006912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006916:	f01e 0f10 	tst.w	lr, #16
 800691a:	bf08      	it	eq
 800691c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006920:	f380 8809 	msr	PSP, r0
 8006924:	f3bf 8f6f 	isb	sy
 8006928:	4770      	bx	lr
 800692a:	bf00      	nop
 800692c:	f3af 8000 	nop.w

08006930 <pxCurrentTCBConst>:
 8006930:	2000064c 	.word	0x2000064c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006934:	bf00      	nop
 8006936:	bf00      	nop

08006938 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b082      	sub	sp, #8
 800693c:	af00      	add	r7, sp, #0
	__asm volatile
 800693e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006942:	f383 8811 	msr	BASEPRI, r3
 8006946:	f3bf 8f6f 	isb	sy
 800694a:	f3bf 8f4f 	dsb	sy
 800694e:	607b      	str	r3, [r7, #4]
}
 8006950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006952:	f7fe fdc3 	bl	80054dc <xTaskIncrementTick>
 8006956:	4603      	mov	r3, r0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d003      	beq.n	8006964 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800695c:	4b06      	ldr	r3, [pc, #24]	; (8006978 <xPortSysTickHandler+0x40>)
 800695e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006962:	601a      	str	r2, [r3, #0]
 8006964:	2300      	movs	r3, #0
 8006966:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006968:	683b      	ldr	r3, [r7, #0]
 800696a:	f383 8811 	msr	BASEPRI, r3
}
 800696e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006970:	bf00      	nop
 8006972:	3708      	adds	r7, #8
 8006974:	46bd      	mov	sp, r7
 8006976:	bd80      	pop	{r7, pc}
 8006978:	e000ed04 	.word	0xe000ed04

0800697c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800697c:	b480      	push	{r7}
 800697e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006980:	4b0b      	ldr	r3, [pc, #44]	; (80069b0 <vPortSetupTimerInterrupt+0x34>)
 8006982:	2200      	movs	r2, #0
 8006984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006986:	4b0b      	ldr	r3, [pc, #44]	; (80069b4 <vPortSetupTimerInterrupt+0x38>)
 8006988:	2200      	movs	r2, #0
 800698a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800698c:	4b0a      	ldr	r3, [pc, #40]	; (80069b8 <vPortSetupTimerInterrupt+0x3c>)
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	4a0a      	ldr	r2, [pc, #40]	; (80069bc <vPortSetupTimerInterrupt+0x40>)
 8006992:	fba2 2303 	umull	r2, r3, r2, r3
 8006996:	099b      	lsrs	r3, r3, #6
 8006998:	4a09      	ldr	r2, [pc, #36]	; (80069c0 <vPortSetupTimerInterrupt+0x44>)
 800699a:	3b01      	subs	r3, #1
 800699c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800699e:	4b04      	ldr	r3, [pc, #16]	; (80069b0 <vPortSetupTimerInterrupt+0x34>)
 80069a0:	2207      	movs	r2, #7
 80069a2:	601a      	str	r2, [r3, #0]
}
 80069a4:	bf00      	nop
 80069a6:	46bd      	mov	sp, r7
 80069a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ac:	4770      	bx	lr
 80069ae:	bf00      	nop
 80069b0:	e000e010 	.word	0xe000e010
 80069b4:	e000e018 	.word	0xe000e018
 80069b8:	20000000 	.word	0x20000000
 80069bc:	10624dd3 	.word	0x10624dd3
 80069c0:	e000e014 	.word	0xe000e014

080069c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80069c4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80069d4 <vPortEnableVFP+0x10>
 80069c8:	6801      	ldr	r1, [r0, #0]
 80069ca:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80069ce:	6001      	str	r1, [r0, #0]
 80069d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80069d2:	bf00      	nop
 80069d4:	e000ed88 	.word	0xe000ed88

080069d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80069d8:	b480      	push	{r7}
 80069da:	b085      	sub	sp, #20
 80069dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80069de:	f3ef 8305 	mrs	r3, IPSR
 80069e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	2b0f      	cmp	r3, #15
 80069e8:	d914      	bls.n	8006a14 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80069ea:	4a17      	ldr	r2, [pc, #92]	; (8006a48 <vPortValidateInterruptPriority+0x70>)
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	4413      	add	r3, r2
 80069f0:	781b      	ldrb	r3, [r3, #0]
 80069f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80069f4:	4b15      	ldr	r3, [pc, #84]	; (8006a4c <vPortValidateInterruptPriority+0x74>)
 80069f6:	781b      	ldrb	r3, [r3, #0]
 80069f8:	7afa      	ldrb	r2, [r7, #11]
 80069fa:	429a      	cmp	r2, r3
 80069fc:	d20a      	bcs.n	8006a14 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80069fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a02:	f383 8811 	msr	BASEPRI, r3
 8006a06:	f3bf 8f6f 	isb	sy
 8006a0a:	f3bf 8f4f 	dsb	sy
 8006a0e:	607b      	str	r3, [r7, #4]
}
 8006a10:	bf00      	nop
 8006a12:	e7fe      	b.n	8006a12 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006a14:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <vPortValidateInterruptPriority+0x78>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006a1c:	4b0d      	ldr	r3, [pc, #52]	; (8006a54 <vPortValidateInterruptPriority+0x7c>)
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d90a      	bls.n	8006a3a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006a24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a28:	f383 8811 	msr	BASEPRI, r3
 8006a2c:	f3bf 8f6f 	isb	sy
 8006a30:	f3bf 8f4f 	dsb	sy
 8006a34:	603b      	str	r3, [r7, #0]
}
 8006a36:	bf00      	nop
 8006a38:	e7fe      	b.n	8006a38 <vPortValidateInterruptPriority+0x60>
	}
 8006a3a:	bf00      	nop
 8006a3c:	3714      	adds	r7, #20
 8006a3e:	46bd      	mov	sp, r7
 8006a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a44:	4770      	bx	lr
 8006a46:	bf00      	nop
 8006a48:	e000e3f0 	.word	0xe000e3f0
 8006a4c:	20000c78 	.word	0x20000c78
 8006a50:	e000ed0c 	.word	0xe000ed0c
 8006a54:	20000c7c 	.word	0x20000c7c

08006a58 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	af00      	add	r7, sp, #0
 8006a5e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006a60:	2300      	movs	r3, #0
 8006a62:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006a64:	f7fe fc48 	bl	80052f8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006a68:	4b5b      	ldr	r3, [pc, #364]	; (8006bd8 <pvPortMalloc+0x180>)
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d101      	bne.n	8006a74 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006a70:	f000 f920 	bl	8006cb4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006a74:	4b59      	ldr	r3, [pc, #356]	; (8006bdc <pvPortMalloc+0x184>)
 8006a76:	681a      	ldr	r2, [r3, #0]
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	4013      	ands	r3, r2
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	f040 8093 	bne.w	8006ba8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d01d      	beq.n	8006ac4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006a88:	2208      	movs	r2, #8
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	4413      	add	r3, r2
 8006a8e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	f003 0307 	and.w	r3, r3, #7
 8006a96:	2b00      	cmp	r3, #0
 8006a98:	d014      	beq.n	8006ac4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f023 0307 	bic.w	r3, r3, #7
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	f003 0307 	and.w	r3, r3, #7
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00a      	beq.n	8006ac4 <pvPortMalloc+0x6c>
	__asm volatile
 8006aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ab2:	f383 8811 	msr	BASEPRI, r3
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	f3bf 8f4f 	dsb	sy
 8006abe:	617b      	str	r3, [r7, #20]
}
 8006ac0:	bf00      	nop
 8006ac2:	e7fe      	b.n	8006ac2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d06e      	beq.n	8006ba8 <pvPortMalloc+0x150>
 8006aca:	4b45      	ldr	r3, [pc, #276]	; (8006be0 <pvPortMalloc+0x188>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	687a      	ldr	r2, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d869      	bhi.n	8006ba8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006ad4:	4b43      	ldr	r3, [pc, #268]	; (8006be4 <pvPortMalloc+0x18c>)
 8006ad6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006ad8:	4b42      	ldr	r3, [pc, #264]	; (8006be4 <pvPortMalloc+0x18c>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006ade:	e004      	b.n	8006aea <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ae6:	681b      	ldr	r3, [r3, #0]
 8006ae8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006aec:	685b      	ldr	r3, [r3, #4]
 8006aee:	687a      	ldr	r2, [r7, #4]
 8006af0:	429a      	cmp	r2, r3
 8006af2:	d903      	bls.n	8006afc <pvPortMalloc+0xa4>
 8006af4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d1f1      	bne.n	8006ae0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006afc:	4b36      	ldr	r3, [pc, #216]	; (8006bd8 <pvPortMalloc+0x180>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b02:	429a      	cmp	r2, r3
 8006b04:	d050      	beq.n	8006ba8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006b06:	6a3b      	ldr	r3, [r7, #32]
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2208      	movs	r2, #8
 8006b0c:	4413      	add	r3, r2
 8006b0e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b12:	681a      	ldr	r2, [r3, #0]
 8006b14:	6a3b      	ldr	r3, [r7, #32]
 8006b16:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006b18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b1a:	685a      	ldr	r2, [r3, #4]
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	1ad2      	subs	r2, r2, r3
 8006b20:	2308      	movs	r3, #8
 8006b22:	005b      	lsls	r3, r3, #1
 8006b24:	429a      	cmp	r2, r3
 8006b26:	d91f      	bls.n	8006b68 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006b28:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	4413      	add	r3, r2
 8006b2e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006b30:	69bb      	ldr	r3, [r7, #24]
 8006b32:	f003 0307 	and.w	r3, r3, #7
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d00a      	beq.n	8006b50 <pvPortMalloc+0xf8>
	__asm volatile
 8006b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b3e:	f383 8811 	msr	BASEPRI, r3
 8006b42:	f3bf 8f6f 	isb	sy
 8006b46:	f3bf 8f4f 	dsb	sy
 8006b4a:	613b      	str	r3, [r7, #16]
}
 8006b4c:	bf00      	nop
 8006b4e:	e7fe      	b.n	8006b4e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b52:	685a      	ldr	r2, [r3, #4]
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	1ad2      	subs	r2, r2, r3
 8006b58:	69bb      	ldr	r3, [r7, #24]
 8006b5a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b5e:	687a      	ldr	r2, [r7, #4]
 8006b60:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006b62:	69b8      	ldr	r0, [r7, #24]
 8006b64:	f000 f908 	bl	8006d78 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006b68:	4b1d      	ldr	r3, [pc, #116]	; (8006be0 <pvPortMalloc+0x188>)
 8006b6a:	681a      	ldr	r2, [r3, #0]
 8006b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b6e:	685b      	ldr	r3, [r3, #4]
 8006b70:	1ad3      	subs	r3, r2, r3
 8006b72:	4a1b      	ldr	r2, [pc, #108]	; (8006be0 <pvPortMalloc+0x188>)
 8006b74:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006b76:	4b1a      	ldr	r3, [pc, #104]	; (8006be0 <pvPortMalloc+0x188>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b1b      	ldr	r3, [pc, #108]	; (8006be8 <pvPortMalloc+0x190>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d203      	bcs.n	8006b8a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006b82:	4b17      	ldr	r3, [pc, #92]	; (8006be0 <pvPortMalloc+0x188>)
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	4a18      	ldr	r2, [pc, #96]	; (8006be8 <pvPortMalloc+0x190>)
 8006b88:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b8c:	685a      	ldr	r2, [r3, #4]
 8006b8e:	4b13      	ldr	r3, [pc, #76]	; (8006bdc <pvPortMalloc+0x184>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	431a      	orrs	r2, r3
 8006b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b96:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b9a:	2200      	movs	r2, #0
 8006b9c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006b9e:	4b13      	ldr	r3, [pc, #76]	; (8006bec <pvPortMalloc+0x194>)
 8006ba0:	681b      	ldr	r3, [r3, #0]
 8006ba2:	3301      	adds	r3, #1
 8006ba4:	4a11      	ldr	r2, [pc, #68]	; (8006bec <pvPortMalloc+0x194>)
 8006ba6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006ba8:	f7fe fbb4 	bl	8005314 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bac:	69fb      	ldr	r3, [r7, #28]
 8006bae:	f003 0307 	and.w	r3, r3, #7
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d00a      	beq.n	8006bcc <pvPortMalloc+0x174>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	60fb      	str	r3, [r7, #12]
}
 8006bc8:	bf00      	nop
 8006bca:	e7fe      	b.n	8006bca <pvPortMalloc+0x172>
	return pvReturn;
 8006bcc:	69fb      	ldr	r3, [r7, #28]
}
 8006bce:	4618      	mov	r0, r3
 8006bd0:	3728      	adds	r7, #40	; 0x28
 8006bd2:	46bd      	mov	sp, r7
 8006bd4:	bd80      	pop	{r7, pc}
 8006bd6:	bf00      	nop
 8006bd8:	20001840 	.word	0x20001840
 8006bdc:	20001854 	.word	0x20001854
 8006be0:	20001844 	.word	0x20001844
 8006be4:	20001838 	.word	0x20001838
 8006be8:	20001848 	.word	0x20001848
 8006bec:	2000184c 	.word	0x2000184c

08006bf0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006bf0:	b580      	push	{r7, lr}
 8006bf2:	b086      	sub	sp, #24
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d04d      	beq.n	8006c9e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006c02:	2308      	movs	r3, #8
 8006c04:	425b      	negs	r3, r3
 8006c06:	697a      	ldr	r2, [r7, #20]
 8006c08:	4413      	add	r3, r2
 8006c0a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006c0c:	697b      	ldr	r3, [r7, #20]
 8006c0e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	685a      	ldr	r2, [r3, #4]
 8006c14:	4b24      	ldr	r3, [pc, #144]	; (8006ca8 <vPortFree+0xb8>)
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	4013      	ands	r3, r2
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d10a      	bne.n	8006c34 <vPortFree+0x44>
	__asm volatile
 8006c1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c22:	f383 8811 	msr	BASEPRI, r3
 8006c26:	f3bf 8f6f 	isb	sy
 8006c2a:	f3bf 8f4f 	dsb	sy
 8006c2e:	60fb      	str	r3, [r7, #12]
}
 8006c30:	bf00      	nop
 8006c32:	e7fe      	b.n	8006c32 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006c34:	693b      	ldr	r3, [r7, #16]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	2b00      	cmp	r3, #0
 8006c3a:	d00a      	beq.n	8006c52 <vPortFree+0x62>
	__asm volatile
 8006c3c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c40:	f383 8811 	msr	BASEPRI, r3
 8006c44:	f3bf 8f6f 	isb	sy
 8006c48:	f3bf 8f4f 	dsb	sy
 8006c4c:	60bb      	str	r3, [r7, #8]
}
 8006c4e:	bf00      	nop
 8006c50:	e7fe      	b.n	8006c50 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006c52:	693b      	ldr	r3, [r7, #16]
 8006c54:	685a      	ldr	r2, [r3, #4]
 8006c56:	4b14      	ldr	r3, [pc, #80]	; (8006ca8 <vPortFree+0xb8>)
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	4013      	ands	r3, r2
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d01e      	beq.n	8006c9e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006c60:	693b      	ldr	r3, [r7, #16]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	2b00      	cmp	r3, #0
 8006c66:	d11a      	bne.n	8006c9e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006c68:	693b      	ldr	r3, [r7, #16]
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ca8 <vPortFree+0xb8>)
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	43db      	mvns	r3, r3
 8006c72:	401a      	ands	r2, r3
 8006c74:	693b      	ldr	r3, [r7, #16]
 8006c76:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006c78:	f7fe fb3e 	bl	80052f8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006c7c:	693b      	ldr	r3, [r7, #16]
 8006c7e:	685a      	ldr	r2, [r3, #4]
 8006c80:	4b0a      	ldr	r3, [pc, #40]	; (8006cac <vPortFree+0xbc>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4413      	add	r3, r2
 8006c86:	4a09      	ldr	r2, [pc, #36]	; (8006cac <vPortFree+0xbc>)
 8006c88:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006c8a:	6938      	ldr	r0, [r7, #16]
 8006c8c:	f000 f874 	bl	8006d78 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006c90:	4b07      	ldr	r3, [pc, #28]	; (8006cb0 <vPortFree+0xc0>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	3301      	adds	r3, #1
 8006c96:	4a06      	ldr	r2, [pc, #24]	; (8006cb0 <vPortFree+0xc0>)
 8006c98:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006c9a:	f7fe fb3b 	bl	8005314 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006c9e:	bf00      	nop
 8006ca0:	3718      	adds	r7, #24
 8006ca2:	46bd      	mov	sp, r7
 8006ca4:	bd80      	pop	{r7, pc}
 8006ca6:	bf00      	nop
 8006ca8:	20001854 	.word	0x20001854
 8006cac:	20001844 	.word	0x20001844
 8006cb0:	20001850 	.word	0x20001850

08006cb4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b085      	sub	sp, #20
 8006cb8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006cba:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8006cbe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006cc0:	4b27      	ldr	r3, [pc, #156]	; (8006d60 <prvHeapInit+0xac>)
 8006cc2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	f003 0307 	and.w	r3, r3, #7
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	d00c      	beq.n	8006ce8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	3307      	adds	r3, #7
 8006cd2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	f023 0307 	bic.w	r3, r3, #7
 8006cda:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006cdc:	68ba      	ldr	r2, [r7, #8]
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	1ad3      	subs	r3, r2, r3
 8006ce2:	4a1f      	ldr	r2, [pc, #124]	; (8006d60 <prvHeapInit+0xac>)
 8006ce4:	4413      	add	r3, r2
 8006ce6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006cec:	4a1d      	ldr	r2, [pc, #116]	; (8006d64 <prvHeapInit+0xb0>)
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006cf2:	4b1c      	ldr	r3, [pc, #112]	; (8006d64 <prvHeapInit+0xb0>)
 8006cf4:	2200      	movs	r2, #0
 8006cf6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	68ba      	ldr	r2, [r7, #8]
 8006cfc:	4413      	add	r3, r2
 8006cfe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006d00:	2208      	movs	r2, #8
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	1a9b      	subs	r3, r3, r2
 8006d06:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	f023 0307 	bic.w	r3, r3, #7
 8006d0e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006d10:	68fb      	ldr	r3, [r7, #12]
 8006d12:	4a15      	ldr	r2, [pc, #84]	; (8006d68 <prvHeapInit+0xb4>)
 8006d14:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006d16:	4b14      	ldr	r3, [pc, #80]	; (8006d68 <prvHeapInit+0xb4>)
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	2200      	movs	r2, #0
 8006d1c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <prvHeapInit+0xb4>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	2200      	movs	r2, #0
 8006d24:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	68fa      	ldr	r2, [r7, #12]
 8006d2e:	1ad2      	subs	r2, r2, r3
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006d34:	4b0c      	ldr	r3, [pc, #48]	; (8006d68 <prvHeapInit+0xb4>)
 8006d36:	681a      	ldr	r2, [r3, #0]
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d3c:	683b      	ldr	r3, [r7, #0]
 8006d3e:	685b      	ldr	r3, [r3, #4]
 8006d40:	4a0a      	ldr	r2, [pc, #40]	; (8006d6c <prvHeapInit+0xb8>)
 8006d42:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	685b      	ldr	r3, [r3, #4]
 8006d48:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <prvHeapInit+0xbc>)
 8006d4a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006d4c:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <prvHeapInit+0xc0>)
 8006d4e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006d52:	601a      	str	r2, [r3, #0]
}
 8006d54:	bf00      	nop
 8006d56:	3714      	adds	r7, #20
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d5e:	4770      	bx	lr
 8006d60:	20000c80 	.word	0x20000c80
 8006d64:	20001838 	.word	0x20001838
 8006d68:	20001840 	.word	0x20001840
 8006d6c:	20001848 	.word	0x20001848
 8006d70:	20001844 	.word	0x20001844
 8006d74:	20001854 	.word	0x20001854

08006d78 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006d78:	b480      	push	{r7}
 8006d7a:	b085      	sub	sp, #20
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006d80:	4b28      	ldr	r3, [pc, #160]	; (8006e24 <prvInsertBlockIntoFreeList+0xac>)
 8006d82:	60fb      	str	r3, [r7, #12]
 8006d84:	e002      	b.n	8006d8c <prvInsertBlockIntoFreeList+0x14>
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	60fb      	str	r3, [r7, #12]
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	687a      	ldr	r2, [r7, #4]
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d8f7      	bhi.n	8006d86 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	685b      	ldr	r3, [r3, #4]
 8006d9e:	68ba      	ldr	r2, [r7, #8]
 8006da0:	4413      	add	r3, r2
 8006da2:	687a      	ldr	r2, [r7, #4]
 8006da4:	429a      	cmp	r2, r3
 8006da6:	d108      	bne.n	8006dba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	685b      	ldr	r3, [r3, #4]
 8006db0:	441a      	add	r2, r3
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	685b      	ldr	r3, [r3, #4]
 8006dc2:	68ba      	ldr	r2, [r7, #8]
 8006dc4:	441a      	add	r2, r3
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	429a      	cmp	r2, r3
 8006dcc:	d118      	bne.n	8006e00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	4b15      	ldr	r3, [pc, #84]	; (8006e28 <prvInsertBlockIntoFreeList+0xb0>)
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d00d      	beq.n	8006df6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	685a      	ldr	r2, [r3, #4]
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	685b      	ldr	r3, [r3, #4]
 8006de4:	441a      	add	r2, r3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	681a      	ldr	r2, [r3, #0]
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	601a      	str	r2, [r3, #0]
 8006df4:	e008      	b.n	8006e08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006df6:	4b0c      	ldr	r3, [pc, #48]	; (8006e28 <prvInsertBlockIntoFreeList+0xb0>)
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e003      	b.n	8006e08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681a      	ldr	r2, [r3, #0]
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006e08:	68fa      	ldr	r2, [r7, #12]
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d002      	beq.n	8006e16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	687a      	ldr	r2, [r7, #4]
 8006e14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006e16:	bf00      	nop
 8006e18:	3714      	adds	r7, #20
 8006e1a:	46bd      	mov	sp, r7
 8006e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e20:	4770      	bx	lr
 8006e22:	bf00      	nop
 8006e24:	20001838 	.word	0x20001838
 8006e28:	20001840 	.word	0x20001840

08006e2c <__errno>:
 8006e2c:	4b01      	ldr	r3, [pc, #4]	; (8006e34 <__errno+0x8>)
 8006e2e:	6818      	ldr	r0, [r3, #0]
 8006e30:	4770      	bx	lr
 8006e32:	bf00      	nop
 8006e34:	20000010 	.word	0x20000010

08006e38 <std>:
 8006e38:	2300      	movs	r3, #0
 8006e3a:	b510      	push	{r4, lr}
 8006e3c:	4604      	mov	r4, r0
 8006e3e:	e9c0 3300 	strd	r3, r3, [r0]
 8006e42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006e46:	6083      	str	r3, [r0, #8]
 8006e48:	8181      	strh	r1, [r0, #12]
 8006e4a:	6643      	str	r3, [r0, #100]	; 0x64
 8006e4c:	81c2      	strh	r2, [r0, #14]
 8006e4e:	6183      	str	r3, [r0, #24]
 8006e50:	4619      	mov	r1, r3
 8006e52:	2208      	movs	r2, #8
 8006e54:	305c      	adds	r0, #92	; 0x5c
 8006e56:	f000 f91a 	bl	800708e <memset>
 8006e5a:	4b05      	ldr	r3, [pc, #20]	; (8006e70 <std+0x38>)
 8006e5c:	6263      	str	r3, [r4, #36]	; 0x24
 8006e5e:	4b05      	ldr	r3, [pc, #20]	; (8006e74 <std+0x3c>)
 8006e60:	62a3      	str	r3, [r4, #40]	; 0x28
 8006e62:	4b05      	ldr	r3, [pc, #20]	; (8006e78 <std+0x40>)
 8006e64:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006e66:	4b05      	ldr	r3, [pc, #20]	; (8006e7c <std+0x44>)
 8006e68:	6224      	str	r4, [r4, #32]
 8006e6a:	6323      	str	r3, [r4, #48]	; 0x30
 8006e6c:	bd10      	pop	{r4, pc}
 8006e6e:	bf00      	nop
 8006e70:	080073d5 	.word	0x080073d5
 8006e74:	080073f7 	.word	0x080073f7
 8006e78:	0800742f 	.word	0x0800742f
 8006e7c:	08007453 	.word	0x08007453

08006e80 <_cleanup_r>:
 8006e80:	4901      	ldr	r1, [pc, #4]	; (8006e88 <_cleanup_r+0x8>)
 8006e82:	f000 b8af 	b.w	8006fe4 <_fwalk_reent>
 8006e86:	bf00      	nop
 8006e88:	080075e9 	.word	0x080075e9

08006e8c <__sfmoreglue>:
 8006e8c:	b570      	push	{r4, r5, r6, lr}
 8006e8e:	2268      	movs	r2, #104	; 0x68
 8006e90:	1e4d      	subs	r5, r1, #1
 8006e92:	4355      	muls	r5, r2
 8006e94:	460e      	mov	r6, r1
 8006e96:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006e9a:	f000 f921 	bl	80070e0 <_malloc_r>
 8006e9e:	4604      	mov	r4, r0
 8006ea0:	b140      	cbz	r0, 8006eb4 <__sfmoreglue+0x28>
 8006ea2:	2100      	movs	r1, #0
 8006ea4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ea8:	300c      	adds	r0, #12
 8006eaa:	60a0      	str	r0, [r4, #8]
 8006eac:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006eb0:	f000 f8ed 	bl	800708e <memset>
 8006eb4:	4620      	mov	r0, r4
 8006eb6:	bd70      	pop	{r4, r5, r6, pc}

08006eb8 <__sfp_lock_acquire>:
 8006eb8:	4801      	ldr	r0, [pc, #4]	; (8006ec0 <__sfp_lock_acquire+0x8>)
 8006eba:	f000 b8d8 	b.w	800706e <__retarget_lock_acquire_recursive>
 8006ebe:	bf00      	nop
 8006ec0:	20001859 	.word	0x20001859

08006ec4 <__sfp_lock_release>:
 8006ec4:	4801      	ldr	r0, [pc, #4]	; (8006ecc <__sfp_lock_release+0x8>)
 8006ec6:	f000 b8d3 	b.w	8007070 <__retarget_lock_release_recursive>
 8006eca:	bf00      	nop
 8006ecc:	20001859 	.word	0x20001859

08006ed0 <__sinit_lock_acquire>:
 8006ed0:	4801      	ldr	r0, [pc, #4]	; (8006ed8 <__sinit_lock_acquire+0x8>)
 8006ed2:	f000 b8cc 	b.w	800706e <__retarget_lock_acquire_recursive>
 8006ed6:	bf00      	nop
 8006ed8:	2000185a 	.word	0x2000185a

08006edc <__sinit_lock_release>:
 8006edc:	4801      	ldr	r0, [pc, #4]	; (8006ee4 <__sinit_lock_release+0x8>)
 8006ede:	f000 b8c7 	b.w	8007070 <__retarget_lock_release_recursive>
 8006ee2:	bf00      	nop
 8006ee4:	2000185a 	.word	0x2000185a

08006ee8 <__sinit>:
 8006ee8:	b510      	push	{r4, lr}
 8006eea:	4604      	mov	r4, r0
 8006eec:	f7ff fff0 	bl	8006ed0 <__sinit_lock_acquire>
 8006ef0:	69a3      	ldr	r3, [r4, #24]
 8006ef2:	b11b      	cbz	r3, 8006efc <__sinit+0x14>
 8006ef4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ef8:	f7ff bff0 	b.w	8006edc <__sinit_lock_release>
 8006efc:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006f00:	6523      	str	r3, [r4, #80]	; 0x50
 8006f02:	4b13      	ldr	r3, [pc, #76]	; (8006f50 <__sinit+0x68>)
 8006f04:	4a13      	ldr	r2, [pc, #76]	; (8006f54 <__sinit+0x6c>)
 8006f06:	681b      	ldr	r3, [r3, #0]
 8006f08:	62a2      	str	r2, [r4, #40]	; 0x28
 8006f0a:	42a3      	cmp	r3, r4
 8006f0c:	bf04      	itt	eq
 8006f0e:	2301      	moveq	r3, #1
 8006f10:	61a3      	streq	r3, [r4, #24]
 8006f12:	4620      	mov	r0, r4
 8006f14:	f000 f820 	bl	8006f58 <__sfp>
 8006f18:	6060      	str	r0, [r4, #4]
 8006f1a:	4620      	mov	r0, r4
 8006f1c:	f000 f81c 	bl	8006f58 <__sfp>
 8006f20:	60a0      	str	r0, [r4, #8]
 8006f22:	4620      	mov	r0, r4
 8006f24:	f000 f818 	bl	8006f58 <__sfp>
 8006f28:	2200      	movs	r2, #0
 8006f2a:	60e0      	str	r0, [r4, #12]
 8006f2c:	2104      	movs	r1, #4
 8006f2e:	6860      	ldr	r0, [r4, #4]
 8006f30:	f7ff ff82 	bl	8006e38 <std>
 8006f34:	68a0      	ldr	r0, [r4, #8]
 8006f36:	2201      	movs	r2, #1
 8006f38:	2109      	movs	r1, #9
 8006f3a:	f7ff ff7d 	bl	8006e38 <std>
 8006f3e:	68e0      	ldr	r0, [r4, #12]
 8006f40:	2202      	movs	r2, #2
 8006f42:	2112      	movs	r1, #18
 8006f44:	f7ff ff78 	bl	8006e38 <std>
 8006f48:	2301      	movs	r3, #1
 8006f4a:	61a3      	str	r3, [r4, #24]
 8006f4c:	e7d2      	b.n	8006ef4 <__sinit+0xc>
 8006f4e:	bf00      	nop
 8006f50:	0800854c 	.word	0x0800854c
 8006f54:	08006e81 	.word	0x08006e81

08006f58 <__sfp>:
 8006f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f5a:	4607      	mov	r7, r0
 8006f5c:	f7ff ffac 	bl	8006eb8 <__sfp_lock_acquire>
 8006f60:	4b1e      	ldr	r3, [pc, #120]	; (8006fdc <__sfp+0x84>)
 8006f62:	681e      	ldr	r6, [r3, #0]
 8006f64:	69b3      	ldr	r3, [r6, #24]
 8006f66:	b913      	cbnz	r3, 8006f6e <__sfp+0x16>
 8006f68:	4630      	mov	r0, r6
 8006f6a:	f7ff ffbd 	bl	8006ee8 <__sinit>
 8006f6e:	3648      	adds	r6, #72	; 0x48
 8006f70:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006f74:	3b01      	subs	r3, #1
 8006f76:	d503      	bpl.n	8006f80 <__sfp+0x28>
 8006f78:	6833      	ldr	r3, [r6, #0]
 8006f7a:	b30b      	cbz	r3, 8006fc0 <__sfp+0x68>
 8006f7c:	6836      	ldr	r6, [r6, #0]
 8006f7e:	e7f7      	b.n	8006f70 <__sfp+0x18>
 8006f80:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006f84:	b9d5      	cbnz	r5, 8006fbc <__sfp+0x64>
 8006f86:	4b16      	ldr	r3, [pc, #88]	; (8006fe0 <__sfp+0x88>)
 8006f88:	60e3      	str	r3, [r4, #12]
 8006f8a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006f8e:	6665      	str	r5, [r4, #100]	; 0x64
 8006f90:	f000 f86c 	bl	800706c <__retarget_lock_init_recursive>
 8006f94:	f7ff ff96 	bl	8006ec4 <__sfp_lock_release>
 8006f98:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006f9c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006fa0:	6025      	str	r5, [r4, #0]
 8006fa2:	61a5      	str	r5, [r4, #24]
 8006fa4:	2208      	movs	r2, #8
 8006fa6:	4629      	mov	r1, r5
 8006fa8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006fac:	f000 f86f 	bl	800708e <memset>
 8006fb0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006fb4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006fb8:	4620      	mov	r0, r4
 8006fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006fbc:	3468      	adds	r4, #104	; 0x68
 8006fbe:	e7d9      	b.n	8006f74 <__sfp+0x1c>
 8006fc0:	2104      	movs	r1, #4
 8006fc2:	4638      	mov	r0, r7
 8006fc4:	f7ff ff62 	bl	8006e8c <__sfmoreglue>
 8006fc8:	4604      	mov	r4, r0
 8006fca:	6030      	str	r0, [r6, #0]
 8006fcc:	2800      	cmp	r0, #0
 8006fce:	d1d5      	bne.n	8006f7c <__sfp+0x24>
 8006fd0:	f7ff ff78 	bl	8006ec4 <__sfp_lock_release>
 8006fd4:	230c      	movs	r3, #12
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	e7ee      	b.n	8006fb8 <__sfp+0x60>
 8006fda:	bf00      	nop
 8006fdc:	0800854c 	.word	0x0800854c
 8006fe0:	ffff0001 	.word	0xffff0001

08006fe4 <_fwalk_reent>:
 8006fe4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006fe8:	4606      	mov	r6, r0
 8006fea:	4688      	mov	r8, r1
 8006fec:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006ff0:	2700      	movs	r7, #0
 8006ff2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006ff6:	f1b9 0901 	subs.w	r9, r9, #1
 8006ffa:	d505      	bpl.n	8007008 <_fwalk_reent+0x24>
 8006ffc:	6824      	ldr	r4, [r4, #0]
 8006ffe:	2c00      	cmp	r4, #0
 8007000:	d1f7      	bne.n	8006ff2 <_fwalk_reent+0xe>
 8007002:	4638      	mov	r0, r7
 8007004:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007008:	89ab      	ldrh	r3, [r5, #12]
 800700a:	2b01      	cmp	r3, #1
 800700c:	d907      	bls.n	800701e <_fwalk_reent+0x3a>
 800700e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007012:	3301      	adds	r3, #1
 8007014:	d003      	beq.n	800701e <_fwalk_reent+0x3a>
 8007016:	4629      	mov	r1, r5
 8007018:	4630      	mov	r0, r6
 800701a:	47c0      	blx	r8
 800701c:	4307      	orrs	r7, r0
 800701e:	3568      	adds	r5, #104	; 0x68
 8007020:	e7e9      	b.n	8006ff6 <_fwalk_reent+0x12>
	...

08007024 <__libc_init_array>:
 8007024:	b570      	push	{r4, r5, r6, lr}
 8007026:	4d0d      	ldr	r5, [pc, #52]	; (800705c <__libc_init_array+0x38>)
 8007028:	4c0d      	ldr	r4, [pc, #52]	; (8007060 <__libc_init_array+0x3c>)
 800702a:	1b64      	subs	r4, r4, r5
 800702c:	10a4      	asrs	r4, r4, #2
 800702e:	2600      	movs	r6, #0
 8007030:	42a6      	cmp	r6, r4
 8007032:	d109      	bne.n	8007048 <__libc_init_array+0x24>
 8007034:	4d0b      	ldr	r5, [pc, #44]	; (8007064 <__libc_init_array+0x40>)
 8007036:	4c0c      	ldr	r4, [pc, #48]	; (8007068 <__libc_init_array+0x44>)
 8007038:	f001 f9d6 	bl	80083e8 <_init>
 800703c:	1b64      	subs	r4, r4, r5
 800703e:	10a4      	asrs	r4, r4, #2
 8007040:	2600      	movs	r6, #0
 8007042:	42a6      	cmp	r6, r4
 8007044:	d105      	bne.n	8007052 <__libc_init_array+0x2e>
 8007046:	bd70      	pop	{r4, r5, r6, pc}
 8007048:	f855 3b04 	ldr.w	r3, [r5], #4
 800704c:	4798      	blx	r3
 800704e:	3601      	adds	r6, #1
 8007050:	e7ee      	b.n	8007030 <__libc_init_array+0xc>
 8007052:	f855 3b04 	ldr.w	r3, [r5], #4
 8007056:	4798      	blx	r3
 8007058:	3601      	adds	r6, #1
 800705a:	e7f2      	b.n	8007042 <__libc_init_array+0x1e>
 800705c:	0800863c 	.word	0x0800863c
 8007060:	0800863c 	.word	0x0800863c
 8007064:	0800863c 	.word	0x0800863c
 8007068:	08008640 	.word	0x08008640

0800706c <__retarget_lock_init_recursive>:
 800706c:	4770      	bx	lr

0800706e <__retarget_lock_acquire_recursive>:
 800706e:	4770      	bx	lr

08007070 <__retarget_lock_release_recursive>:
 8007070:	4770      	bx	lr

08007072 <memcpy>:
 8007072:	440a      	add	r2, r1
 8007074:	4291      	cmp	r1, r2
 8007076:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800707a:	d100      	bne.n	800707e <memcpy+0xc>
 800707c:	4770      	bx	lr
 800707e:	b510      	push	{r4, lr}
 8007080:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007084:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007088:	4291      	cmp	r1, r2
 800708a:	d1f9      	bne.n	8007080 <memcpy+0xe>
 800708c:	bd10      	pop	{r4, pc}

0800708e <memset>:
 800708e:	4402      	add	r2, r0
 8007090:	4603      	mov	r3, r0
 8007092:	4293      	cmp	r3, r2
 8007094:	d100      	bne.n	8007098 <memset+0xa>
 8007096:	4770      	bx	lr
 8007098:	f803 1b01 	strb.w	r1, [r3], #1
 800709c:	e7f9      	b.n	8007092 <memset+0x4>
	...

080070a0 <sbrk_aligned>:
 80070a0:	b570      	push	{r4, r5, r6, lr}
 80070a2:	4e0e      	ldr	r6, [pc, #56]	; (80070dc <sbrk_aligned+0x3c>)
 80070a4:	460c      	mov	r4, r1
 80070a6:	6831      	ldr	r1, [r6, #0]
 80070a8:	4605      	mov	r5, r0
 80070aa:	b911      	cbnz	r1, 80070b2 <sbrk_aligned+0x12>
 80070ac:	f000 f962 	bl	8007374 <_sbrk_r>
 80070b0:	6030      	str	r0, [r6, #0]
 80070b2:	4621      	mov	r1, r4
 80070b4:	4628      	mov	r0, r5
 80070b6:	f000 f95d 	bl	8007374 <_sbrk_r>
 80070ba:	1c43      	adds	r3, r0, #1
 80070bc:	d00a      	beq.n	80070d4 <sbrk_aligned+0x34>
 80070be:	1cc4      	adds	r4, r0, #3
 80070c0:	f024 0403 	bic.w	r4, r4, #3
 80070c4:	42a0      	cmp	r0, r4
 80070c6:	d007      	beq.n	80070d8 <sbrk_aligned+0x38>
 80070c8:	1a21      	subs	r1, r4, r0
 80070ca:	4628      	mov	r0, r5
 80070cc:	f000 f952 	bl	8007374 <_sbrk_r>
 80070d0:	3001      	adds	r0, #1
 80070d2:	d101      	bne.n	80070d8 <sbrk_aligned+0x38>
 80070d4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80070d8:	4620      	mov	r0, r4
 80070da:	bd70      	pop	{r4, r5, r6, pc}
 80070dc:	20001860 	.word	0x20001860

080070e0 <_malloc_r>:
 80070e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80070e4:	1ccd      	adds	r5, r1, #3
 80070e6:	f025 0503 	bic.w	r5, r5, #3
 80070ea:	3508      	adds	r5, #8
 80070ec:	2d0c      	cmp	r5, #12
 80070ee:	bf38      	it	cc
 80070f0:	250c      	movcc	r5, #12
 80070f2:	2d00      	cmp	r5, #0
 80070f4:	4607      	mov	r7, r0
 80070f6:	db01      	blt.n	80070fc <_malloc_r+0x1c>
 80070f8:	42a9      	cmp	r1, r5
 80070fa:	d905      	bls.n	8007108 <_malloc_r+0x28>
 80070fc:	230c      	movs	r3, #12
 80070fe:	603b      	str	r3, [r7, #0]
 8007100:	2600      	movs	r6, #0
 8007102:	4630      	mov	r0, r6
 8007104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007108:	4e2e      	ldr	r6, [pc, #184]	; (80071c4 <_malloc_r+0xe4>)
 800710a:	f000 fad5 	bl	80076b8 <__malloc_lock>
 800710e:	6833      	ldr	r3, [r6, #0]
 8007110:	461c      	mov	r4, r3
 8007112:	bb34      	cbnz	r4, 8007162 <_malloc_r+0x82>
 8007114:	4629      	mov	r1, r5
 8007116:	4638      	mov	r0, r7
 8007118:	f7ff ffc2 	bl	80070a0 <sbrk_aligned>
 800711c:	1c43      	adds	r3, r0, #1
 800711e:	4604      	mov	r4, r0
 8007120:	d14d      	bne.n	80071be <_malloc_r+0xde>
 8007122:	6834      	ldr	r4, [r6, #0]
 8007124:	4626      	mov	r6, r4
 8007126:	2e00      	cmp	r6, #0
 8007128:	d140      	bne.n	80071ac <_malloc_r+0xcc>
 800712a:	6823      	ldr	r3, [r4, #0]
 800712c:	4631      	mov	r1, r6
 800712e:	4638      	mov	r0, r7
 8007130:	eb04 0803 	add.w	r8, r4, r3
 8007134:	f000 f91e 	bl	8007374 <_sbrk_r>
 8007138:	4580      	cmp	r8, r0
 800713a:	d13a      	bne.n	80071b2 <_malloc_r+0xd2>
 800713c:	6821      	ldr	r1, [r4, #0]
 800713e:	3503      	adds	r5, #3
 8007140:	1a6d      	subs	r5, r5, r1
 8007142:	f025 0503 	bic.w	r5, r5, #3
 8007146:	3508      	adds	r5, #8
 8007148:	2d0c      	cmp	r5, #12
 800714a:	bf38      	it	cc
 800714c:	250c      	movcc	r5, #12
 800714e:	4629      	mov	r1, r5
 8007150:	4638      	mov	r0, r7
 8007152:	f7ff ffa5 	bl	80070a0 <sbrk_aligned>
 8007156:	3001      	adds	r0, #1
 8007158:	d02b      	beq.n	80071b2 <_malloc_r+0xd2>
 800715a:	6823      	ldr	r3, [r4, #0]
 800715c:	442b      	add	r3, r5
 800715e:	6023      	str	r3, [r4, #0]
 8007160:	e00e      	b.n	8007180 <_malloc_r+0xa0>
 8007162:	6822      	ldr	r2, [r4, #0]
 8007164:	1b52      	subs	r2, r2, r5
 8007166:	d41e      	bmi.n	80071a6 <_malloc_r+0xc6>
 8007168:	2a0b      	cmp	r2, #11
 800716a:	d916      	bls.n	800719a <_malloc_r+0xba>
 800716c:	1961      	adds	r1, r4, r5
 800716e:	42a3      	cmp	r3, r4
 8007170:	6025      	str	r5, [r4, #0]
 8007172:	bf18      	it	ne
 8007174:	6059      	strne	r1, [r3, #4]
 8007176:	6863      	ldr	r3, [r4, #4]
 8007178:	bf08      	it	eq
 800717a:	6031      	streq	r1, [r6, #0]
 800717c:	5162      	str	r2, [r4, r5]
 800717e:	604b      	str	r3, [r1, #4]
 8007180:	4638      	mov	r0, r7
 8007182:	f104 060b 	add.w	r6, r4, #11
 8007186:	f000 fa9d 	bl	80076c4 <__malloc_unlock>
 800718a:	f026 0607 	bic.w	r6, r6, #7
 800718e:	1d23      	adds	r3, r4, #4
 8007190:	1af2      	subs	r2, r6, r3
 8007192:	d0b6      	beq.n	8007102 <_malloc_r+0x22>
 8007194:	1b9b      	subs	r3, r3, r6
 8007196:	50a3      	str	r3, [r4, r2]
 8007198:	e7b3      	b.n	8007102 <_malloc_r+0x22>
 800719a:	6862      	ldr	r2, [r4, #4]
 800719c:	42a3      	cmp	r3, r4
 800719e:	bf0c      	ite	eq
 80071a0:	6032      	streq	r2, [r6, #0]
 80071a2:	605a      	strne	r2, [r3, #4]
 80071a4:	e7ec      	b.n	8007180 <_malloc_r+0xa0>
 80071a6:	4623      	mov	r3, r4
 80071a8:	6864      	ldr	r4, [r4, #4]
 80071aa:	e7b2      	b.n	8007112 <_malloc_r+0x32>
 80071ac:	4634      	mov	r4, r6
 80071ae:	6876      	ldr	r6, [r6, #4]
 80071b0:	e7b9      	b.n	8007126 <_malloc_r+0x46>
 80071b2:	230c      	movs	r3, #12
 80071b4:	603b      	str	r3, [r7, #0]
 80071b6:	4638      	mov	r0, r7
 80071b8:	f000 fa84 	bl	80076c4 <__malloc_unlock>
 80071bc:	e7a1      	b.n	8007102 <_malloc_r+0x22>
 80071be:	6025      	str	r5, [r4, #0]
 80071c0:	e7de      	b.n	8007180 <_malloc_r+0xa0>
 80071c2:	bf00      	nop
 80071c4:	2000185c 	.word	0x2000185c

080071c8 <srand>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4b10      	ldr	r3, [pc, #64]	; (800720c <srand+0x44>)
 80071cc:	681d      	ldr	r5, [r3, #0]
 80071ce:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80071d0:	4604      	mov	r4, r0
 80071d2:	b9b3      	cbnz	r3, 8007202 <srand+0x3a>
 80071d4:	2018      	movs	r0, #24
 80071d6:	f000 fa67 	bl	80076a8 <malloc>
 80071da:	4602      	mov	r2, r0
 80071dc:	63a8      	str	r0, [r5, #56]	; 0x38
 80071de:	b920      	cbnz	r0, 80071ea <srand+0x22>
 80071e0:	4b0b      	ldr	r3, [pc, #44]	; (8007210 <srand+0x48>)
 80071e2:	480c      	ldr	r0, [pc, #48]	; (8007214 <srand+0x4c>)
 80071e4:	2142      	movs	r1, #66	; 0x42
 80071e6:	f000 f94b 	bl	8007480 <__assert_func>
 80071ea:	490b      	ldr	r1, [pc, #44]	; (8007218 <srand+0x50>)
 80071ec:	4b0b      	ldr	r3, [pc, #44]	; (800721c <srand+0x54>)
 80071ee:	e9c0 1300 	strd	r1, r3, [r0]
 80071f2:	4b0b      	ldr	r3, [pc, #44]	; (8007220 <srand+0x58>)
 80071f4:	6083      	str	r3, [r0, #8]
 80071f6:	230b      	movs	r3, #11
 80071f8:	8183      	strh	r3, [r0, #12]
 80071fa:	2100      	movs	r1, #0
 80071fc:	2001      	movs	r0, #1
 80071fe:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007202:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007204:	2200      	movs	r2, #0
 8007206:	611c      	str	r4, [r3, #16]
 8007208:	615a      	str	r2, [r3, #20]
 800720a:	bd38      	pop	{r3, r4, r5, pc}
 800720c:	20000010 	.word	0x20000010
 8007210:	08008550 	.word	0x08008550
 8007214:	08008567 	.word	0x08008567
 8007218:	abcd330e 	.word	0xabcd330e
 800721c:	e66d1234 	.word	0xe66d1234
 8007220:	0005deec 	.word	0x0005deec

08007224 <rand>:
 8007224:	4b16      	ldr	r3, [pc, #88]	; (8007280 <rand+0x5c>)
 8007226:	b510      	push	{r4, lr}
 8007228:	681c      	ldr	r4, [r3, #0]
 800722a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800722c:	b9b3      	cbnz	r3, 800725c <rand+0x38>
 800722e:	2018      	movs	r0, #24
 8007230:	f000 fa3a 	bl	80076a8 <malloc>
 8007234:	63a0      	str	r0, [r4, #56]	; 0x38
 8007236:	b928      	cbnz	r0, 8007244 <rand+0x20>
 8007238:	4602      	mov	r2, r0
 800723a:	4b12      	ldr	r3, [pc, #72]	; (8007284 <rand+0x60>)
 800723c:	4812      	ldr	r0, [pc, #72]	; (8007288 <rand+0x64>)
 800723e:	214e      	movs	r1, #78	; 0x4e
 8007240:	f000 f91e 	bl	8007480 <__assert_func>
 8007244:	4a11      	ldr	r2, [pc, #68]	; (800728c <rand+0x68>)
 8007246:	4b12      	ldr	r3, [pc, #72]	; (8007290 <rand+0x6c>)
 8007248:	e9c0 2300 	strd	r2, r3, [r0]
 800724c:	4b11      	ldr	r3, [pc, #68]	; (8007294 <rand+0x70>)
 800724e:	6083      	str	r3, [r0, #8]
 8007250:	230b      	movs	r3, #11
 8007252:	8183      	strh	r3, [r0, #12]
 8007254:	2201      	movs	r2, #1
 8007256:	2300      	movs	r3, #0
 8007258:	e9c0 2304 	strd	r2, r3, [r0, #16]
 800725c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 800725e:	4a0e      	ldr	r2, [pc, #56]	; (8007298 <rand+0x74>)
 8007260:	6920      	ldr	r0, [r4, #16]
 8007262:	6963      	ldr	r3, [r4, #20]
 8007264:	490d      	ldr	r1, [pc, #52]	; (800729c <rand+0x78>)
 8007266:	4342      	muls	r2, r0
 8007268:	fb01 2203 	mla	r2, r1, r3, r2
 800726c:	fba0 0101 	umull	r0, r1, r0, r1
 8007270:	1c43      	adds	r3, r0, #1
 8007272:	eb42 0001 	adc.w	r0, r2, r1
 8007276:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800727a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 800727e:	bd10      	pop	{r4, pc}
 8007280:	20000010 	.word	0x20000010
 8007284:	08008550 	.word	0x08008550
 8007288:	08008567 	.word	0x08008567
 800728c:	abcd330e 	.word	0xabcd330e
 8007290:	e66d1234 	.word	0xe66d1234
 8007294:	0005deec 	.word	0x0005deec
 8007298:	5851f42d 	.word	0x5851f42d
 800729c:	4c957f2d 	.word	0x4c957f2d

080072a0 <cleanup_glue>:
 80072a0:	b538      	push	{r3, r4, r5, lr}
 80072a2:	460c      	mov	r4, r1
 80072a4:	6809      	ldr	r1, [r1, #0]
 80072a6:	4605      	mov	r5, r0
 80072a8:	b109      	cbz	r1, 80072ae <cleanup_glue+0xe>
 80072aa:	f7ff fff9 	bl	80072a0 <cleanup_glue>
 80072ae:	4621      	mov	r1, r4
 80072b0:	4628      	mov	r0, r5
 80072b2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072b6:	f000 ba0b 	b.w	80076d0 <_free_r>
	...

080072bc <_reclaim_reent>:
 80072bc:	4b2c      	ldr	r3, [pc, #176]	; (8007370 <_reclaim_reent+0xb4>)
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	4283      	cmp	r3, r0
 80072c2:	b570      	push	{r4, r5, r6, lr}
 80072c4:	4604      	mov	r4, r0
 80072c6:	d051      	beq.n	800736c <_reclaim_reent+0xb0>
 80072c8:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80072ca:	b143      	cbz	r3, 80072de <_reclaim_reent+0x22>
 80072cc:	68db      	ldr	r3, [r3, #12]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d14a      	bne.n	8007368 <_reclaim_reent+0xac>
 80072d2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80072d4:	6819      	ldr	r1, [r3, #0]
 80072d6:	b111      	cbz	r1, 80072de <_reclaim_reent+0x22>
 80072d8:	4620      	mov	r0, r4
 80072da:	f000 f9f9 	bl	80076d0 <_free_r>
 80072de:	6961      	ldr	r1, [r4, #20]
 80072e0:	b111      	cbz	r1, 80072e8 <_reclaim_reent+0x2c>
 80072e2:	4620      	mov	r0, r4
 80072e4:	f000 f9f4 	bl	80076d0 <_free_r>
 80072e8:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80072ea:	b111      	cbz	r1, 80072f2 <_reclaim_reent+0x36>
 80072ec:	4620      	mov	r0, r4
 80072ee:	f000 f9ef 	bl	80076d0 <_free_r>
 80072f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80072f4:	b111      	cbz	r1, 80072fc <_reclaim_reent+0x40>
 80072f6:	4620      	mov	r0, r4
 80072f8:	f000 f9ea 	bl	80076d0 <_free_r>
 80072fc:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80072fe:	b111      	cbz	r1, 8007306 <_reclaim_reent+0x4a>
 8007300:	4620      	mov	r0, r4
 8007302:	f000 f9e5 	bl	80076d0 <_free_r>
 8007306:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007308:	b111      	cbz	r1, 8007310 <_reclaim_reent+0x54>
 800730a:	4620      	mov	r0, r4
 800730c:	f000 f9e0 	bl	80076d0 <_free_r>
 8007310:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007312:	b111      	cbz	r1, 800731a <_reclaim_reent+0x5e>
 8007314:	4620      	mov	r0, r4
 8007316:	f000 f9db 	bl	80076d0 <_free_r>
 800731a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800731c:	b111      	cbz	r1, 8007324 <_reclaim_reent+0x68>
 800731e:	4620      	mov	r0, r4
 8007320:	f000 f9d6 	bl	80076d0 <_free_r>
 8007324:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007326:	b111      	cbz	r1, 800732e <_reclaim_reent+0x72>
 8007328:	4620      	mov	r0, r4
 800732a:	f000 f9d1 	bl	80076d0 <_free_r>
 800732e:	69a3      	ldr	r3, [r4, #24]
 8007330:	b1e3      	cbz	r3, 800736c <_reclaim_reent+0xb0>
 8007332:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007334:	4620      	mov	r0, r4
 8007336:	4798      	blx	r3
 8007338:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800733a:	b1b9      	cbz	r1, 800736c <_reclaim_reent+0xb0>
 800733c:	4620      	mov	r0, r4
 800733e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007342:	f7ff bfad 	b.w	80072a0 <cleanup_glue>
 8007346:	5949      	ldr	r1, [r1, r5]
 8007348:	b941      	cbnz	r1, 800735c <_reclaim_reent+0xa0>
 800734a:	3504      	adds	r5, #4
 800734c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800734e:	2d80      	cmp	r5, #128	; 0x80
 8007350:	68d9      	ldr	r1, [r3, #12]
 8007352:	d1f8      	bne.n	8007346 <_reclaim_reent+0x8a>
 8007354:	4620      	mov	r0, r4
 8007356:	f000 f9bb 	bl	80076d0 <_free_r>
 800735a:	e7ba      	b.n	80072d2 <_reclaim_reent+0x16>
 800735c:	680e      	ldr	r6, [r1, #0]
 800735e:	4620      	mov	r0, r4
 8007360:	f000 f9b6 	bl	80076d0 <_free_r>
 8007364:	4631      	mov	r1, r6
 8007366:	e7ef      	b.n	8007348 <_reclaim_reent+0x8c>
 8007368:	2500      	movs	r5, #0
 800736a:	e7ef      	b.n	800734c <_reclaim_reent+0x90>
 800736c:	bd70      	pop	{r4, r5, r6, pc}
 800736e:	bf00      	nop
 8007370:	20000010 	.word	0x20000010

08007374 <_sbrk_r>:
 8007374:	b538      	push	{r3, r4, r5, lr}
 8007376:	4d06      	ldr	r5, [pc, #24]	; (8007390 <_sbrk_r+0x1c>)
 8007378:	2300      	movs	r3, #0
 800737a:	4604      	mov	r4, r0
 800737c:	4608      	mov	r0, r1
 800737e:	602b      	str	r3, [r5, #0]
 8007380:	f7f9 fcee 	bl	8000d60 <_sbrk>
 8007384:	1c43      	adds	r3, r0, #1
 8007386:	d102      	bne.n	800738e <_sbrk_r+0x1a>
 8007388:	682b      	ldr	r3, [r5, #0]
 800738a:	b103      	cbz	r3, 800738e <_sbrk_r+0x1a>
 800738c:	6023      	str	r3, [r4, #0]
 800738e:	bd38      	pop	{r3, r4, r5, pc}
 8007390:	20001864 	.word	0x20001864

08007394 <siprintf>:
 8007394:	b40e      	push	{r1, r2, r3}
 8007396:	b500      	push	{lr}
 8007398:	b09c      	sub	sp, #112	; 0x70
 800739a:	ab1d      	add	r3, sp, #116	; 0x74
 800739c:	9002      	str	r0, [sp, #8]
 800739e:	9006      	str	r0, [sp, #24]
 80073a0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80073a4:	4809      	ldr	r0, [pc, #36]	; (80073cc <siprintf+0x38>)
 80073a6:	9107      	str	r1, [sp, #28]
 80073a8:	9104      	str	r1, [sp, #16]
 80073aa:	4909      	ldr	r1, [pc, #36]	; (80073d0 <siprintf+0x3c>)
 80073ac:	f853 2b04 	ldr.w	r2, [r3], #4
 80073b0:	9105      	str	r1, [sp, #20]
 80073b2:	6800      	ldr	r0, [r0, #0]
 80073b4:	9301      	str	r3, [sp, #4]
 80073b6:	a902      	add	r1, sp, #8
 80073b8:	f000 fa32 	bl	8007820 <_svfiprintf_r>
 80073bc:	9b02      	ldr	r3, [sp, #8]
 80073be:	2200      	movs	r2, #0
 80073c0:	701a      	strb	r2, [r3, #0]
 80073c2:	b01c      	add	sp, #112	; 0x70
 80073c4:	f85d eb04 	ldr.w	lr, [sp], #4
 80073c8:	b003      	add	sp, #12
 80073ca:	4770      	bx	lr
 80073cc:	20000010 	.word	0x20000010
 80073d0:	ffff0208 	.word	0xffff0208

080073d4 <__sread>:
 80073d4:	b510      	push	{r4, lr}
 80073d6:	460c      	mov	r4, r1
 80073d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80073dc:	f000 fe0e 	bl	8007ffc <_read_r>
 80073e0:	2800      	cmp	r0, #0
 80073e2:	bfab      	itete	ge
 80073e4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80073e6:	89a3      	ldrhlt	r3, [r4, #12]
 80073e8:	181b      	addge	r3, r3, r0
 80073ea:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80073ee:	bfac      	ite	ge
 80073f0:	6563      	strge	r3, [r4, #84]	; 0x54
 80073f2:	81a3      	strhlt	r3, [r4, #12]
 80073f4:	bd10      	pop	{r4, pc}

080073f6 <__swrite>:
 80073f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80073fa:	461f      	mov	r7, r3
 80073fc:	898b      	ldrh	r3, [r1, #12]
 80073fe:	05db      	lsls	r3, r3, #23
 8007400:	4605      	mov	r5, r0
 8007402:	460c      	mov	r4, r1
 8007404:	4616      	mov	r6, r2
 8007406:	d505      	bpl.n	8007414 <__swrite+0x1e>
 8007408:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800740c:	2302      	movs	r3, #2
 800740e:	2200      	movs	r2, #0
 8007410:	f000 f938 	bl	8007684 <_lseek_r>
 8007414:	89a3      	ldrh	r3, [r4, #12]
 8007416:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800741a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800741e:	81a3      	strh	r3, [r4, #12]
 8007420:	4632      	mov	r2, r6
 8007422:	463b      	mov	r3, r7
 8007424:	4628      	mov	r0, r5
 8007426:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800742a:	f000 b817 	b.w	800745c <_write_r>

0800742e <__sseek>:
 800742e:	b510      	push	{r4, lr}
 8007430:	460c      	mov	r4, r1
 8007432:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007436:	f000 f925 	bl	8007684 <_lseek_r>
 800743a:	1c43      	adds	r3, r0, #1
 800743c:	89a3      	ldrh	r3, [r4, #12]
 800743e:	bf15      	itete	ne
 8007440:	6560      	strne	r0, [r4, #84]	; 0x54
 8007442:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007446:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800744a:	81a3      	strheq	r3, [r4, #12]
 800744c:	bf18      	it	ne
 800744e:	81a3      	strhne	r3, [r4, #12]
 8007450:	bd10      	pop	{r4, pc}

08007452 <__sclose>:
 8007452:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007456:	f000 b831 	b.w	80074bc <_close_r>
	...

0800745c <_write_r>:
 800745c:	b538      	push	{r3, r4, r5, lr}
 800745e:	4d07      	ldr	r5, [pc, #28]	; (800747c <_write_r+0x20>)
 8007460:	4604      	mov	r4, r0
 8007462:	4608      	mov	r0, r1
 8007464:	4611      	mov	r1, r2
 8007466:	2200      	movs	r2, #0
 8007468:	602a      	str	r2, [r5, #0]
 800746a:	461a      	mov	r2, r3
 800746c:	f7f9 fc27 	bl	8000cbe <_write>
 8007470:	1c43      	adds	r3, r0, #1
 8007472:	d102      	bne.n	800747a <_write_r+0x1e>
 8007474:	682b      	ldr	r3, [r5, #0]
 8007476:	b103      	cbz	r3, 800747a <_write_r+0x1e>
 8007478:	6023      	str	r3, [r4, #0]
 800747a:	bd38      	pop	{r3, r4, r5, pc}
 800747c:	20001864 	.word	0x20001864

08007480 <__assert_func>:
 8007480:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007482:	4614      	mov	r4, r2
 8007484:	461a      	mov	r2, r3
 8007486:	4b09      	ldr	r3, [pc, #36]	; (80074ac <__assert_func+0x2c>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	4605      	mov	r5, r0
 800748c:	68d8      	ldr	r0, [r3, #12]
 800748e:	b14c      	cbz	r4, 80074a4 <__assert_func+0x24>
 8007490:	4b07      	ldr	r3, [pc, #28]	; (80074b0 <__assert_func+0x30>)
 8007492:	9100      	str	r1, [sp, #0]
 8007494:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007498:	4906      	ldr	r1, [pc, #24]	; (80074b4 <__assert_func+0x34>)
 800749a:	462b      	mov	r3, r5
 800749c:	f000 f8e0 	bl	8007660 <fiprintf>
 80074a0:	f000 fe7e 	bl	80081a0 <abort>
 80074a4:	4b04      	ldr	r3, [pc, #16]	; (80074b8 <__assert_func+0x38>)
 80074a6:	461c      	mov	r4, r3
 80074a8:	e7f3      	b.n	8007492 <__assert_func+0x12>
 80074aa:	bf00      	nop
 80074ac:	20000010 	.word	0x20000010
 80074b0:	080085c2 	.word	0x080085c2
 80074b4:	080085cf 	.word	0x080085cf
 80074b8:	080085fd 	.word	0x080085fd

080074bc <_close_r>:
 80074bc:	b538      	push	{r3, r4, r5, lr}
 80074be:	4d06      	ldr	r5, [pc, #24]	; (80074d8 <_close_r+0x1c>)
 80074c0:	2300      	movs	r3, #0
 80074c2:	4604      	mov	r4, r0
 80074c4:	4608      	mov	r0, r1
 80074c6:	602b      	str	r3, [r5, #0]
 80074c8:	f7f9 fc15 	bl	8000cf6 <_close>
 80074cc:	1c43      	adds	r3, r0, #1
 80074ce:	d102      	bne.n	80074d6 <_close_r+0x1a>
 80074d0:	682b      	ldr	r3, [r5, #0]
 80074d2:	b103      	cbz	r3, 80074d6 <_close_r+0x1a>
 80074d4:	6023      	str	r3, [r4, #0]
 80074d6:	bd38      	pop	{r3, r4, r5, pc}
 80074d8:	20001864 	.word	0x20001864

080074dc <__sflush_r>:
 80074dc:	898a      	ldrh	r2, [r1, #12]
 80074de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074e2:	4605      	mov	r5, r0
 80074e4:	0710      	lsls	r0, r2, #28
 80074e6:	460c      	mov	r4, r1
 80074e8:	d458      	bmi.n	800759c <__sflush_r+0xc0>
 80074ea:	684b      	ldr	r3, [r1, #4]
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	dc05      	bgt.n	80074fc <__sflush_r+0x20>
 80074f0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	dc02      	bgt.n	80074fc <__sflush_r+0x20>
 80074f6:	2000      	movs	r0, #0
 80074f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80074fc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80074fe:	2e00      	cmp	r6, #0
 8007500:	d0f9      	beq.n	80074f6 <__sflush_r+0x1a>
 8007502:	2300      	movs	r3, #0
 8007504:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007508:	682f      	ldr	r7, [r5, #0]
 800750a:	602b      	str	r3, [r5, #0]
 800750c:	d032      	beq.n	8007574 <__sflush_r+0x98>
 800750e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	075a      	lsls	r2, r3, #29
 8007514:	d505      	bpl.n	8007522 <__sflush_r+0x46>
 8007516:	6863      	ldr	r3, [r4, #4]
 8007518:	1ac0      	subs	r0, r0, r3
 800751a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800751c:	b10b      	cbz	r3, 8007522 <__sflush_r+0x46>
 800751e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007520:	1ac0      	subs	r0, r0, r3
 8007522:	2300      	movs	r3, #0
 8007524:	4602      	mov	r2, r0
 8007526:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007528:	6a21      	ldr	r1, [r4, #32]
 800752a:	4628      	mov	r0, r5
 800752c:	47b0      	blx	r6
 800752e:	1c43      	adds	r3, r0, #1
 8007530:	89a3      	ldrh	r3, [r4, #12]
 8007532:	d106      	bne.n	8007542 <__sflush_r+0x66>
 8007534:	6829      	ldr	r1, [r5, #0]
 8007536:	291d      	cmp	r1, #29
 8007538:	d82c      	bhi.n	8007594 <__sflush_r+0xb8>
 800753a:	4a2a      	ldr	r2, [pc, #168]	; (80075e4 <__sflush_r+0x108>)
 800753c:	40ca      	lsrs	r2, r1
 800753e:	07d6      	lsls	r6, r2, #31
 8007540:	d528      	bpl.n	8007594 <__sflush_r+0xb8>
 8007542:	2200      	movs	r2, #0
 8007544:	6062      	str	r2, [r4, #4]
 8007546:	04d9      	lsls	r1, r3, #19
 8007548:	6922      	ldr	r2, [r4, #16]
 800754a:	6022      	str	r2, [r4, #0]
 800754c:	d504      	bpl.n	8007558 <__sflush_r+0x7c>
 800754e:	1c42      	adds	r2, r0, #1
 8007550:	d101      	bne.n	8007556 <__sflush_r+0x7a>
 8007552:	682b      	ldr	r3, [r5, #0]
 8007554:	b903      	cbnz	r3, 8007558 <__sflush_r+0x7c>
 8007556:	6560      	str	r0, [r4, #84]	; 0x54
 8007558:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800755a:	602f      	str	r7, [r5, #0]
 800755c:	2900      	cmp	r1, #0
 800755e:	d0ca      	beq.n	80074f6 <__sflush_r+0x1a>
 8007560:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007564:	4299      	cmp	r1, r3
 8007566:	d002      	beq.n	800756e <__sflush_r+0x92>
 8007568:	4628      	mov	r0, r5
 800756a:	f000 f8b1 	bl	80076d0 <_free_r>
 800756e:	2000      	movs	r0, #0
 8007570:	6360      	str	r0, [r4, #52]	; 0x34
 8007572:	e7c1      	b.n	80074f8 <__sflush_r+0x1c>
 8007574:	6a21      	ldr	r1, [r4, #32]
 8007576:	2301      	movs	r3, #1
 8007578:	4628      	mov	r0, r5
 800757a:	47b0      	blx	r6
 800757c:	1c41      	adds	r1, r0, #1
 800757e:	d1c7      	bne.n	8007510 <__sflush_r+0x34>
 8007580:	682b      	ldr	r3, [r5, #0]
 8007582:	2b00      	cmp	r3, #0
 8007584:	d0c4      	beq.n	8007510 <__sflush_r+0x34>
 8007586:	2b1d      	cmp	r3, #29
 8007588:	d001      	beq.n	800758e <__sflush_r+0xb2>
 800758a:	2b16      	cmp	r3, #22
 800758c:	d101      	bne.n	8007592 <__sflush_r+0xb6>
 800758e:	602f      	str	r7, [r5, #0]
 8007590:	e7b1      	b.n	80074f6 <__sflush_r+0x1a>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007598:	81a3      	strh	r3, [r4, #12]
 800759a:	e7ad      	b.n	80074f8 <__sflush_r+0x1c>
 800759c:	690f      	ldr	r7, [r1, #16]
 800759e:	2f00      	cmp	r7, #0
 80075a0:	d0a9      	beq.n	80074f6 <__sflush_r+0x1a>
 80075a2:	0793      	lsls	r3, r2, #30
 80075a4:	680e      	ldr	r6, [r1, #0]
 80075a6:	bf08      	it	eq
 80075a8:	694b      	ldreq	r3, [r1, #20]
 80075aa:	600f      	str	r7, [r1, #0]
 80075ac:	bf18      	it	ne
 80075ae:	2300      	movne	r3, #0
 80075b0:	eba6 0807 	sub.w	r8, r6, r7
 80075b4:	608b      	str	r3, [r1, #8]
 80075b6:	f1b8 0f00 	cmp.w	r8, #0
 80075ba:	dd9c      	ble.n	80074f6 <__sflush_r+0x1a>
 80075bc:	6a21      	ldr	r1, [r4, #32]
 80075be:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80075c0:	4643      	mov	r3, r8
 80075c2:	463a      	mov	r2, r7
 80075c4:	4628      	mov	r0, r5
 80075c6:	47b0      	blx	r6
 80075c8:	2800      	cmp	r0, #0
 80075ca:	dc06      	bgt.n	80075da <__sflush_r+0xfe>
 80075cc:	89a3      	ldrh	r3, [r4, #12]
 80075ce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80075d2:	81a3      	strh	r3, [r4, #12]
 80075d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80075d8:	e78e      	b.n	80074f8 <__sflush_r+0x1c>
 80075da:	4407      	add	r7, r0
 80075dc:	eba8 0800 	sub.w	r8, r8, r0
 80075e0:	e7e9      	b.n	80075b6 <__sflush_r+0xda>
 80075e2:	bf00      	nop
 80075e4:	20400001 	.word	0x20400001

080075e8 <_fflush_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	690b      	ldr	r3, [r1, #16]
 80075ec:	4605      	mov	r5, r0
 80075ee:	460c      	mov	r4, r1
 80075f0:	b913      	cbnz	r3, 80075f8 <_fflush_r+0x10>
 80075f2:	2500      	movs	r5, #0
 80075f4:	4628      	mov	r0, r5
 80075f6:	bd38      	pop	{r3, r4, r5, pc}
 80075f8:	b118      	cbz	r0, 8007602 <_fflush_r+0x1a>
 80075fa:	6983      	ldr	r3, [r0, #24]
 80075fc:	b90b      	cbnz	r3, 8007602 <_fflush_r+0x1a>
 80075fe:	f7ff fc73 	bl	8006ee8 <__sinit>
 8007602:	4b14      	ldr	r3, [pc, #80]	; (8007654 <_fflush_r+0x6c>)
 8007604:	429c      	cmp	r4, r3
 8007606:	d11b      	bne.n	8007640 <_fflush_r+0x58>
 8007608:	686c      	ldr	r4, [r5, #4]
 800760a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800760e:	2b00      	cmp	r3, #0
 8007610:	d0ef      	beq.n	80075f2 <_fflush_r+0xa>
 8007612:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007614:	07d0      	lsls	r0, r2, #31
 8007616:	d404      	bmi.n	8007622 <_fflush_r+0x3a>
 8007618:	0599      	lsls	r1, r3, #22
 800761a:	d402      	bmi.n	8007622 <_fflush_r+0x3a>
 800761c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800761e:	f7ff fd26 	bl	800706e <__retarget_lock_acquire_recursive>
 8007622:	4628      	mov	r0, r5
 8007624:	4621      	mov	r1, r4
 8007626:	f7ff ff59 	bl	80074dc <__sflush_r>
 800762a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800762c:	07da      	lsls	r2, r3, #31
 800762e:	4605      	mov	r5, r0
 8007630:	d4e0      	bmi.n	80075f4 <_fflush_r+0xc>
 8007632:	89a3      	ldrh	r3, [r4, #12]
 8007634:	059b      	lsls	r3, r3, #22
 8007636:	d4dd      	bmi.n	80075f4 <_fflush_r+0xc>
 8007638:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800763a:	f7ff fd19 	bl	8007070 <__retarget_lock_release_recursive>
 800763e:	e7d9      	b.n	80075f4 <_fflush_r+0xc>
 8007640:	4b05      	ldr	r3, [pc, #20]	; (8007658 <_fflush_r+0x70>)
 8007642:	429c      	cmp	r4, r3
 8007644:	d101      	bne.n	800764a <_fflush_r+0x62>
 8007646:	68ac      	ldr	r4, [r5, #8]
 8007648:	e7df      	b.n	800760a <_fflush_r+0x22>
 800764a:	4b04      	ldr	r3, [pc, #16]	; (800765c <_fflush_r+0x74>)
 800764c:	429c      	cmp	r4, r3
 800764e:	bf08      	it	eq
 8007650:	68ec      	ldreq	r4, [r5, #12]
 8007652:	e7da      	b.n	800760a <_fflush_r+0x22>
 8007654:	0800850c 	.word	0x0800850c
 8007658:	0800852c 	.word	0x0800852c
 800765c:	080084ec 	.word	0x080084ec

08007660 <fiprintf>:
 8007660:	b40e      	push	{r1, r2, r3}
 8007662:	b503      	push	{r0, r1, lr}
 8007664:	4601      	mov	r1, r0
 8007666:	ab03      	add	r3, sp, #12
 8007668:	4805      	ldr	r0, [pc, #20]	; (8007680 <fiprintf+0x20>)
 800766a:	f853 2b04 	ldr.w	r2, [r3], #4
 800766e:	6800      	ldr	r0, [r0, #0]
 8007670:	9301      	str	r3, [sp, #4]
 8007672:	f000 f9ff 	bl	8007a74 <_vfiprintf_r>
 8007676:	b002      	add	sp, #8
 8007678:	f85d eb04 	ldr.w	lr, [sp], #4
 800767c:	b003      	add	sp, #12
 800767e:	4770      	bx	lr
 8007680:	20000010 	.word	0x20000010

08007684 <_lseek_r>:
 8007684:	b538      	push	{r3, r4, r5, lr}
 8007686:	4d07      	ldr	r5, [pc, #28]	; (80076a4 <_lseek_r+0x20>)
 8007688:	4604      	mov	r4, r0
 800768a:	4608      	mov	r0, r1
 800768c:	4611      	mov	r1, r2
 800768e:	2200      	movs	r2, #0
 8007690:	602a      	str	r2, [r5, #0]
 8007692:	461a      	mov	r2, r3
 8007694:	f7f9 fb56 	bl	8000d44 <_lseek>
 8007698:	1c43      	adds	r3, r0, #1
 800769a:	d102      	bne.n	80076a2 <_lseek_r+0x1e>
 800769c:	682b      	ldr	r3, [r5, #0]
 800769e:	b103      	cbz	r3, 80076a2 <_lseek_r+0x1e>
 80076a0:	6023      	str	r3, [r4, #0]
 80076a2:	bd38      	pop	{r3, r4, r5, pc}
 80076a4:	20001864 	.word	0x20001864

080076a8 <malloc>:
 80076a8:	4b02      	ldr	r3, [pc, #8]	; (80076b4 <malloc+0xc>)
 80076aa:	4601      	mov	r1, r0
 80076ac:	6818      	ldr	r0, [r3, #0]
 80076ae:	f7ff bd17 	b.w	80070e0 <_malloc_r>
 80076b2:	bf00      	nop
 80076b4:	20000010 	.word	0x20000010

080076b8 <__malloc_lock>:
 80076b8:	4801      	ldr	r0, [pc, #4]	; (80076c0 <__malloc_lock+0x8>)
 80076ba:	f7ff bcd8 	b.w	800706e <__retarget_lock_acquire_recursive>
 80076be:	bf00      	nop
 80076c0:	20001858 	.word	0x20001858

080076c4 <__malloc_unlock>:
 80076c4:	4801      	ldr	r0, [pc, #4]	; (80076cc <__malloc_unlock+0x8>)
 80076c6:	f7ff bcd3 	b.w	8007070 <__retarget_lock_release_recursive>
 80076ca:	bf00      	nop
 80076cc:	20001858 	.word	0x20001858

080076d0 <_free_r>:
 80076d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80076d2:	2900      	cmp	r1, #0
 80076d4:	d044      	beq.n	8007760 <_free_r+0x90>
 80076d6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80076da:	9001      	str	r0, [sp, #4]
 80076dc:	2b00      	cmp	r3, #0
 80076de:	f1a1 0404 	sub.w	r4, r1, #4
 80076e2:	bfb8      	it	lt
 80076e4:	18e4      	addlt	r4, r4, r3
 80076e6:	f7ff ffe7 	bl	80076b8 <__malloc_lock>
 80076ea:	4a1e      	ldr	r2, [pc, #120]	; (8007764 <_free_r+0x94>)
 80076ec:	9801      	ldr	r0, [sp, #4]
 80076ee:	6813      	ldr	r3, [r2, #0]
 80076f0:	b933      	cbnz	r3, 8007700 <_free_r+0x30>
 80076f2:	6063      	str	r3, [r4, #4]
 80076f4:	6014      	str	r4, [r2, #0]
 80076f6:	b003      	add	sp, #12
 80076f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80076fc:	f7ff bfe2 	b.w	80076c4 <__malloc_unlock>
 8007700:	42a3      	cmp	r3, r4
 8007702:	d908      	bls.n	8007716 <_free_r+0x46>
 8007704:	6825      	ldr	r5, [r4, #0]
 8007706:	1961      	adds	r1, r4, r5
 8007708:	428b      	cmp	r3, r1
 800770a:	bf01      	itttt	eq
 800770c:	6819      	ldreq	r1, [r3, #0]
 800770e:	685b      	ldreq	r3, [r3, #4]
 8007710:	1949      	addeq	r1, r1, r5
 8007712:	6021      	streq	r1, [r4, #0]
 8007714:	e7ed      	b.n	80076f2 <_free_r+0x22>
 8007716:	461a      	mov	r2, r3
 8007718:	685b      	ldr	r3, [r3, #4]
 800771a:	b10b      	cbz	r3, 8007720 <_free_r+0x50>
 800771c:	42a3      	cmp	r3, r4
 800771e:	d9fa      	bls.n	8007716 <_free_r+0x46>
 8007720:	6811      	ldr	r1, [r2, #0]
 8007722:	1855      	adds	r5, r2, r1
 8007724:	42a5      	cmp	r5, r4
 8007726:	d10b      	bne.n	8007740 <_free_r+0x70>
 8007728:	6824      	ldr	r4, [r4, #0]
 800772a:	4421      	add	r1, r4
 800772c:	1854      	adds	r4, r2, r1
 800772e:	42a3      	cmp	r3, r4
 8007730:	6011      	str	r1, [r2, #0]
 8007732:	d1e0      	bne.n	80076f6 <_free_r+0x26>
 8007734:	681c      	ldr	r4, [r3, #0]
 8007736:	685b      	ldr	r3, [r3, #4]
 8007738:	6053      	str	r3, [r2, #4]
 800773a:	4421      	add	r1, r4
 800773c:	6011      	str	r1, [r2, #0]
 800773e:	e7da      	b.n	80076f6 <_free_r+0x26>
 8007740:	d902      	bls.n	8007748 <_free_r+0x78>
 8007742:	230c      	movs	r3, #12
 8007744:	6003      	str	r3, [r0, #0]
 8007746:	e7d6      	b.n	80076f6 <_free_r+0x26>
 8007748:	6825      	ldr	r5, [r4, #0]
 800774a:	1961      	adds	r1, r4, r5
 800774c:	428b      	cmp	r3, r1
 800774e:	bf04      	itt	eq
 8007750:	6819      	ldreq	r1, [r3, #0]
 8007752:	685b      	ldreq	r3, [r3, #4]
 8007754:	6063      	str	r3, [r4, #4]
 8007756:	bf04      	itt	eq
 8007758:	1949      	addeq	r1, r1, r5
 800775a:	6021      	streq	r1, [r4, #0]
 800775c:	6054      	str	r4, [r2, #4]
 800775e:	e7ca      	b.n	80076f6 <_free_r+0x26>
 8007760:	b003      	add	sp, #12
 8007762:	bd30      	pop	{r4, r5, pc}
 8007764:	2000185c 	.word	0x2000185c

08007768 <__ssputs_r>:
 8007768:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800776c:	688e      	ldr	r6, [r1, #8]
 800776e:	429e      	cmp	r6, r3
 8007770:	4682      	mov	sl, r0
 8007772:	460c      	mov	r4, r1
 8007774:	4690      	mov	r8, r2
 8007776:	461f      	mov	r7, r3
 8007778:	d838      	bhi.n	80077ec <__ssputs_r+0x84>
 800777a:	898a      	ldrh	r2, [r1, #12]
 800777c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007780:	d032      	beq.n	80077e8 <__ssputs_r+0x80>
 8007782:	6825      	ldr	r5, [r4, #0]
 8007784:	6909      	ldr	r1, [r1, #16]
 8007786:	eba5 0901 	sub.w	r9, r5, r1
 800778a:	6965      	ldr	r5, [r4, #20]
 800778c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007790:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007794:	3301      	adds	r3, #1
 8007796:	444b      	add	r3, r9
 8007798:	106d      	asrs	r5, r5, #1
 800779a:	429d      	cmp	r5, r3
 800779c:	bf38      	it	cc
 800779e:	461d      	movcc	r5, r3
 80077a0:	0553      	lsls	r3, r2, #21
 80077a2:	d531      	bpl.n	8007808 <__ssputs_r+0xa0>
 80077a4:	4629      	mov	r1, r5
 80077a6:	f7ff fc9b 	bl	80070e0 <_malloc_r>
 80077aa:	4606      	mov	r6, r0
 80077ac:	b950      	cbnz	r0, 80077c4 <__ssputs_r+0x5c>
 80077ae:	230c      	movs	r3, #12
 80077b0:	f8ca 3000 	str.w	r3, [sl]
 80077b4:	89a3      	ldrh	r3, [r4, #12]
 80077b6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077ba:	81a3      	strh	r3, [r4, #12]
 80077bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80077c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80077c4:	6921      	ldr	r1, [r4, #16]
 80077c6:	464a      	mov	r2, r9
 80077c8:	f7ff fc53 	bl	8007072 <memcpy>
 80077cc:	89a3      	ldrh	r3, [r4, #12]
 80077ce:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80077d2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077d6:	81a3      	strh	r3, [r4, #12]
 80077d8:	6126      	str	r6, [r4, #16]
 80077da:	6165      	str	r5, [r4, #20]
 80077dc:	444e      	add	r6, r9
 80077de:	eba5 0509 	sub.w	r5, r5, r9
 80077e2:	6026      	str	r6, [r4, #0]
 80077e4:	60a5      	str	r5, [r4, #8]
 80077e6:	463e      	mov	r6, r7
 80077e8:	42be      	cmp	r6, r7
 80077ea:	d900      	bls.n	80077ee <__ssputs_r+0x86>
 80077ec:	463e      	mov	r6, r7
 80077ee:	6820      	ldr	r0, [r4, #0]
 80077f0:	4632      	mov	r2, r6
 80077f2:	4641      	mov	r1, r8
 80077f4:	f000 fd40 	bl	8008278 <memmove>
 80077f8:	68a3      	ldr	r3, [r4, #8]
 80077fa:	1b9b      	subs	r3, r3, r6
 80077fc:	60a3      	str	r3, [r4, #8]
 80077fe:	6823      	ldr	r3, [r4, #0]
 8007800:	4433      	add	r3, r6
 8007802:	6023      	str	r3, [r4, #0]
 8007804:	2000      	movs	r0, #0
 8007806:	e7db      	b.n	80077c0 <__ssputs_r+0x58>
 8007808:	462a      	mov	r2, r5
 800780a:	f000 fd4f 	bl	80082ac <_realloc_r>
 800780e:	4606      	mov	r6, r0
 8007810:	2800      	cmp	r0, #0
 8007812:	d1e1      	bne.n	80077d8 <__ssputs_r+0x70>
 8007814:	6921      	ldr	r1, [r4, #16]
 8007816:	4650      	mov	r0, sl
 8007818:	f7ff ff5a 	bl	80076d0 <_free_r>
 800781c:	e7c7      	b.n	80077ae <__ssputs_r+0x46>
	...

08007820 <_svfiprintf_r>:
 8007820:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007824:	4698      	mov	r8, r3
 8007826:	898b      	ldrh	r3, [r1, #12]
 8007828:	061b      	lsls	r3, r3, #24
 800782a:	b09d      	sub	sp, #116	; 0x74
 800782c:	4607      	mov	r7, r0
 800782e:	460d      	mov	r5, r1
 8007830:	4614      	mov	r4, r2
 8007832:	d50e      	bpl.n	8007852 <_svfiprintf_r+0x32>
 8007834:	690b      	ldr	r3, [r1, #16]
 8007836:	b963      	cbnz	r3, 8007852 <_svfiprintf_r+0x32>
 8007838:	2140      	movs	r1, #64	; 0x40
 800783a:	f7ff fc51 	bl	80070e0 <_malloc_r>
 800783e:	6028      	str	r0, [r5, #0]
 8007840:	6128      	str	r0, [r5, #16]
 8007842:	b920      	cbnz	r0, 800784e <_svfiprintf_r+0x2e>
 8007844:	230c      	movs	r3, #12
 8007846:	603b      	str	r3, [r7, #0]
 8007848:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800784c:	e0d1      	b.n	80079f2 <_svfiprintf_r+0x1d2>
 800784e:	2340      	movs	r3, #64	; 0x40
 8007850:	616b      	str	r3, [r5, #20]
 8007852:	2300      	movs	r3, #0
 8007854:	9309      	str	r3, [sp, #36]	; 0x24
 8007856:	2320      	movs	r3, #32
 8007858:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800785c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007860:	2330      	movs	r3, #48	; 0x30
 8007862:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007a0c <_svfiprintf_r+0x1ec>
 8007866:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800786a:	f04f 0901 	mov.w	r9, #1
 800786e:	4623      	mov	r3, r4
 8007870:	469a      	mov	sl, r3
 8007872:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007876:	b10a      	cbz	r2, 800787c <_svfiprintf_r+0x5c>
 8007878:	2a25      	cmp	r2, #37	; 0x25
 800787a:	d1f9      	bne.n	8007870 <_svfiprintf_r+0x50>
 800787c:	ebba 0b04 	subs.w	fp, sl, r4
 8007880:	d00b      	beq.n	800789a <_svfiprintf_r+0x7a>
 8007882:	465b      	mov	r3, fp
 8007884:	4622      	mov	r2, r4
 8007886:	4629      	mov	r1, r5
 8007888:	4638      	mov	r0, r7
 800788a:	f7ff ff6d 	bl	8007768 <__ssputs_r>
 800788e:	3001      	adds	r0, #1
 8007890:	f000 80aa 	beq.w	80079e8 <_svfiprintf_r+0x1c8>
 8007894:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007896:	445a      	add	r2, fp
 8007898:	9209      	str	r2, [sp, #36]	; 0x24
 800789a:	f89a 3000 	ldrb.w	r3, [sl]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	f000 80a2 	beq.w	80079e8 <_svfiprintf_r+0x1c8>
 80078a4:	2300      	movs	r3, #0
 80078a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80078aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80078ae:	f10a 0a01 	add.w	sl, sl, #1
 80078b2:	9304      	str	r3, [sp, #16]
 80078b4:	9307      	str	r3, [sp, #28]
 80078b6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80078ba:	931a      	str	r3, [sp, #104]	; 0x68
 80078bc:	4654      	mov	r4, sl
 80078be:	2205      	movs	r2, #5
 80078c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80078c4:	4851      	ldr	r0, [pc, #324]	; (8007a0c <_svfiprintf_r+0x1ec>)
 80078c6:	f7f8 fc8b 	bl	80001e0 <memchr>
 80078ca:	9a04      	ldr	r2, [sp, #16]
 80078cc:	b9d8      	cbnz	r0, 8007906 <_svfiprintf_r+0xe6>
 80078ce:	06d0      	lsls	r0, r2, #27
 80078d0:	bf44      	itt	mi
 80078d2:	2320      	movmi	r3, #32
 80078d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078d8:	0711      	lsls	r1, r2, #28
 80078da:	bf44      	itt	mi
 80078dc:	232b      	movmi	r3, #43	; 0x2b
 80078de:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80078e2:	f89a 3000 	ldrb.w	r3, [sl]
 80078e6:	2b2a      	cmp	r3, #42	; 0x2a
 80078e8:	d015      	beq.n	8007916 <_svfiprintf_r+0xf6>
 80078ea:	9a07      	ldr	r2, [sp, #28]
 80078ec:	4654      	mov	r4, sl
 80078ee:	2000      	movs	r0, #0
 80078f0:	f04f 0c0a 	mov.w	ip, #10
 80078f4:	4621      	mov	r1, r4
 80078f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80078fa:	3b30      	subs	r3, #48	; 0x30
 80078fc:	2b09      	cmp	r3, #9
 80078fe:	d94e      	bls.n	800799e <_svfiprintf_r+0x17e>
 8007900:	b1b0      	cbz	r0, 8007930 <_svfiprintf_r+0x110>
 8007902:	9207      	str	r2, [sp, #28]
 8007904:	e014      	b.n	8007930 <_svfiprintf_r+0x110>
 8007906:	eba0 0308 	sub.w	r3, r0, r8
 800790a:	fa09 f303 	lsl.w	r3, r9, r3
 800790e:	4313      	orrs	r3, r2
 8007910:	9304      	str	r3, [sp, #16]
 8007912:	46a2      	mov	sl, r4
 8007914:	e7d2      	b.n	80078bc <_svfiprintf_r+0x9c>
 8007916:	9b03      	ldr	r3, [sp, #12]
 8007918:	1d19      	adds	r1, r3, #4
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	9103      	str	r1, [sp, #12]
 800791e:	2b00      	cmp	r3, #0
 8007920:	bfbb      	ittet	lt
 8007922:	425b      	neglt	r3, r3
 8007924:	f042 0202 	orrlt.w	r2, r2, #2
 8007928:	9307      	strge	r3, [sp, #28]
 800792a:	9307      	strlt	r3, [sp, #28]
 800792c:	bfb8      	it	lt
 800792e:	9204      	strlt	r2, [sp, #16]
 8007930:	7823      	ldrb	r3, [r4, #0]
 8007932:	2b2e      	cmp	r3, #46	; 0x2e
 8007934:	d10c      	bne.n	8007950 <_svfiprintf_r+0x130>
 8007936:	7863      	ldrb	r3, [r4, #1]
 8007938:	2b2a      	cmp	r3, #42	; 0x2a
 800793a:	d135      	bne.n	80079a8 <_svfiprintf_r+0x188>
 800793c:	9b03      	ldr	r3, [sp, #12]
 800793e:	1d1a      	adds	r2, r3, #4
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	9203      	str	r2, [sp, #12]
 8007944:	2b00      	cmp	r3, #0
 8007946:	bfb8      	it	lt
 8007948:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 800794c:	3402      	adds	r4, #2
 800794e:	9305      	str	r3, [sp, #20]
 8007950:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007a1c <_svfiprintf_r+0x1fc>
 8007954:	7821      	ldrb	r1, [r4, #0]
 8007956:	2203      	movs	r2, #3
 8007958:	4650      	mov	r0, sl
 800795a:	f7f8 fc41 	bl	80001e0 <memchr>
 800795e:	b140      	cbz	r0, 8007972 <_svfiprintf_r+0x152>
 8007960:	2340      	movs	r3, #64	; 0x40
 8007962:	eba0 000a 	sub.w	r0, r0, sl
 8007966:	fa03 f000 	lsl.w	r0, r3, r0
 800796a:	9b04      	ldr	r3, [sp, #16]
 800796c:	4303      	orrs	r3, r0
 800796e:	3401      	adds	r4, #1
 8007970:	9304      	str	r3, [sp, #16]
 8007972:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007976:	4826      	ldr	r0, [pc, #152]	; (8007a10 <_svfiprintf_r+0x1f0>)
 8007978:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800797c:	2206      	movs	r2, #6
 800797e:	f7f8 fc2f 	bl	80001e0 <memchr>
 8007982:	2800      	cmp	r0, #0
 8007984:	d038      	beq.n	80079f8 <_svfiprintf_r+0x1d8>
 8007986:	4b23      	ldr	r3, [pc, #140]	; (8007a14 <_svfiprintf_r+0x1f4>)
 8007988:	bb1b      	cbnz	r3, 80079d2 <_svfiprintf_r+0x1b2>
 800798a:	9b03      	ldr	r3, [sp, #12]
 800798c:	3307      	adds	r3, #7
 800798e:	f023 0307 	bic.w	r3, r3, #7
 8007992:	3308      	adds	r3, #8
 8007994:	9303      	str	r3, [sp, #12]
 8007996:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007998:	4433      	add	r3, r6
 800799a:	9309      	str	r3, [sp, #36]	; 0x24
 800799c:	e767      	b.n	800786e <_svfiprintf_r+0x4e>
 800799e:	fb0c 3202 	mla	r2, ip, r2, r3
 80079a2:	460c      	mov	r4, r1
 80079a4:	2001      	movs	r0, #1
 80079a6:	e7a5      	b.n	80078f4 <_svfiprintf_r+0xd4>
 80079a8:	2300      	movs	r3, #0
 80079aa:	3401      	adds	r4, #1
 80079ac:	9305      	str	r3, [sp, #20]
 80079ae:	4619      	mov	r1, r3
 80079b0:	f04f 0c0a 	mov.w	ip, #10
 80079b4:	4620      	mov	r0, r4
 80079b6:	f810 2b01 	ldrb.w	r2, [r0], #1
 80079ba:	3a30      	subs	r2, #48	; 0x30
 80079bc:	2a09      	cmp	r2, #9
 80079be:	d903      	bls.n	80079c8 <_svfiprintf_r+0x1a8>
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d0c5      	beq.n	8007950 <_svfiprintf_r+0x130>
 80079c4:	9105      	str	r1, [sp, #20]
 80079c6:	e7c3      	b.n	8007950 <_svfiprintf_r+0x130>
 80079c8:	fb0c 2101 	mla	r1, ip, r1, r2
 80079cc:	4604      	mov	r4, r0
 80079ce:	2301      	movs	r3, #1
 80079d0:	e7f0      	b.n	80079b4 <_svfiprintf_r+0x194>
 80079d2:	ab03      	add	r3, sp, #12
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	462a      	mov	r2, r5
 80079d8:	4b0f      	ldr	r3, [pc, #60]	; (8007a18 <_svfiprintf_r+0x1f8>)
 80079da:	a904      	add	r1, sp, #16
 80079dc:	4638      	mov	r0, r7
 80079de:	f3af 8000 	nop.w
 80079e2:	1c42      	adds	r2, r0, #1
 80079e4:	4606      	mov	r6, r0
 80079e6:	d1d6      	bne.n	8007996 <_svfiprintf_r+0x176>
 80079e8:	89ab      	ldrh	r3, [r5, #12]
 80079ea:	065b      	lsls	r3, r3, #25
 80079ec:	f53f af2c 	bmi.w	8007848 <_svfiprintf_r+0x28>
 80079f0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80079f2:	b01d      	add	sp, #116	; 0x74
 80079f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079f8:	ab03      	add	r3, sp, #12
 80079fa:	9300      	str	r3, [sp, #0]
 80079fc:	462a      	mov	r2, r5
 80079fe:	4b06      	ldr	r3, [pc, #24]	; (8007a18 <_svfiprintf_r+0x1f8>)
 8007a00:	a904      	add	r1, sp, #16
 8007a02:	4638      	mov	r0, r7
 8007a04:	f000 f9d4 	bl	8007db0 <_printf_i>
 8007a08:	e7eb      	b.n	80079e2 <_svfiprintf_r+0x1c2>
 8007a0a:	bf00      	nop
 8007a0c:	080085fe 	.word	0x080085fe
 8007a10:	08008608 	.word	0x08008608
 8007a14:	00000000 	.word	0x00000000
 8007a18:	08007769 	.word	0x08007769
 8007a1c:	08008604 	.word	0x08008604

08007a20 <__sfputc_r>:
 8007a20:	6893      	ldr	r3, [r2, #8]
 8007a22:	3b01      	subs	r3, #1
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	b410      	push	{r4}
 8007a28:	6093      	str	r3, [r2, #8]
 8007a2a:	da08      	bge.n	8007a3e <__sfputc_r+0x1e>
 8007a2c:	6994      	ldr	r4, [r2, #24]
 8007a2e:	42a3      	cmp	r3, r4
 8007a30:	db01      	blt.n	8007a36 <__sfputc_r+0x16>
 8007a32:	290a      	cmp	r1, #10
 8007a34:	d103      	bne.n	8007a3e <__sfputc_r+0x1e>
 8007a36:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a3a:	f000 baf1 	b.w	8008020 <__swbuf_r>
 8007a3e:	6813      	ldr	r3, [r2, #0]
 8007a40:	1c58      	adds	r0, r3, #1
 8007a42:	6010      	str	r0, [r2, #0]
 8007a44:	7019      	strb	r1, [r3, #0]
 8007a46:	4608      	mov	r0, r1
 8007a48:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a4c:	4770      	bx	lr

08007a4e <__sfputs_r>:
 8007a4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007a50:	4606      	mov	r6, r0
 8007a52:	460f      	mov	r7, r1
 8007a54:	4614      	mov	r4, r2
 8007a56:	18d5      	adds	r5, r2, r3
 8007a58:	42ac      	cmp	r4, r5
 8007a5a:	d101      	bne.n	8007a60 <__sfputs_r+0x12>
 8007a5c:	2000      	movs	r0, #0
 8007a5e:	e007      	b.n	8007a70 <__sfputs_r+0x22>
 8007a60:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a64:	463a      	mov	r2, r7
 8007a66:	4630      	mov	r0, r6
 8007a68:	f7ff ffda 	bl	8007a20 <__sfputc_r>
 8007a6c:	1c43      	adds	r3, r0, #1
 8007a6e:	d1f3      	bne.n	8007a58 <__sfputs_r+0xa>
 8007a70:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007a74 <_vfiprintf_r>:
 8007a74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a78:	460d      	mov	r5, r1
 8007a7a:	b09d      	sub	sp, #116	; 0x74
 8007a7c:	4614      	mov	r4, r2
 8007a7e:	4698      	mov	r8, r3
 8007a80:	4606      	mov	r6, r0
 8007a82:	b118      	cbz	r0, 8007a8c <_vfiprintf_r+0x18>
 8007a84:	6983      	ldr	r3, [r0, #24]
 8007a86:	b90b      	cbnz	r3, 8007a8c <_vfiprintf_r+0x18>
 8007a88:	f7ff fa2e 	bl	8006ee8 <__sinit>
 8007a8c:	4b89      	ldr	r3, [pc, #548]	; (8007cb4 <_vfiprintf_r+0x240>)
 8007a8e:	429d      	cmp	r5, r3
 8007a90:	d11b      	bne.n	8007aca <_vfiprintf_r+0x56>
 8007a92:	6875      	ldr	r5, [r6, #4]
 8007a94:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007a96:	07d9      	lsls	r1, r3, #31
 8007a98:	d405      	bmi.n	8007aa6 <_vfiprintf_r+0x32>
 8007a9a:	89ab      	ldrh	r3, [r5, #12]
 8007a9c:	059a      	lsls	r2, r3, #22
 8007a9e:	d402      	bmi.n	8007aa6 <_vfiprintf_r+0x32>
 8007aa0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007aa2:	f7ff fae4 	bl	800706e <__retarget_lock_acquire_recursive>
 8007aa6:	89ab      	ldrh	r3, [r5, #12]
 8007aa8:	071b      	lsls	r3, r3, #28
 8007aaa:	d501      	bpl.n	8007ab0 <_vfiprintf_r+0x3c>
 8007aac:	692b      	ldr	r3, [r5, #16]
 8007aae:	b9eb      	cbnz	r3, 8007aec <_vfiprintf_r+0x78>
 8007ab0:	4629      	mov	r1, r5
 8007ab2:	4630      	mov	r0, r6
 8007ab4:	f000 fb06 	bl	80080c4 <__swsetup_r>
 8007ab8:	b1c0      	cbz	r0, 8007aec <_vfiprintf_r+0x78>
 8007aba:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007abc:	07dc      	lsls	r4, r3, #31
 8007abe:	d50e      	bpl.n	8007ade <_vfiprintf_r+0x6a>
 8007ac0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ac4:	b01d      	add	sp, #116	; 0x74
 8007ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007aca:	4b7b      	ldr	r3, [pc, #492]	; (8007cb8 <_vfiprintf_r+0x244>)
 8007acc:	429d      	cmp	r5, r3
 8007ace:	d101      	bne.n	8007ad4 <_vfiprintf_r+0x60>
 8007ad0:	68b5      	ldr	r5, [r6, #8]
 8007ad2:	e7df      	b.n	8007a94 <_vfiprintf_r+0x20>
 8007ad4:	4b79      	ldr	r3, [pc, #484]	; (8007cbc <_vfiprintf_r+0x248>)
 8007ad6:	429d      	cmp	r5, r3
 8007ad8:	bf08      	it	eq
 8007ada:	68f5      	ldreq	r5, [r6, #12]
 8007adc:	e7da      	b.n	8007a94 <_vfiprintf_r+0x20>
 8007ade:	89ab      	ldrh	r3, [r5, #12]
 8007ae0:	0598      	lsls	r0, r3, #22
 8007ae2:	d4ed      	bmi.n	8007ac0 <_vfiprintf_r+0x4c>
 8007ae4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007ae6:	f7ff fac3 	bl	8007070 <__retarget_lock_release_recursive>
 8007aea:	e7e9      	b.n	8007ac0 <_vfiprintf_r+0x4c>
 8007aec:	2300      	movs	r3, #0
 8007aee:	9309      	str	r3, [sp, #36]	; 0x24
 8007af0:	2320      	movs	r3, #32
 8007af2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007af6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007afa:	2330      	movs	r3, #48	; 0x30
 8007afc:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007cc0 <_vfiprintf_r+0x24c>
 8007b00:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007b04:	f04f 0901 	mov.w	r9, #1
 8007b08:	4623      	mov	r3, r4
 8007b0a:	469a      	mov	sl, r3
 8007b0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007b10:	b10a      	cbz	r2, 8007b16 <_vfiprintf_r+0xa2>
 8007b12:	2a25      	cmp	r2, #37	; 0x25
 8007b14:	d1f9      	bne.n	8007b0a <_vfiprintf_r+0x96>
 8007b16:	ebba 0b04 	subs.w	fp, sl, r4
 8007b1a:	d00b      	beq.n	8007b34 <_vfiprintf_r+0xc0>
 8007b1c:	465b      	mov	r3, fp
 8007b1e:	4622      	mov	r2, r4
 8007b20:	4629      	mov	r1, r5
 8007b22:	4630      	mov	r0, r6
 8007b24:	f7ff ff93 	bl	8007a4e <__sfputs_r>
 8007b28:	3001      	adds	r0, #1
 8007b2a:	f000 80aa 	beq.w	8007c82 <_vfiprintf_r+0x20e>
 8007b2e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007b30:	445a      	add	r2, fp
 8007b32:	9209      	str	r2, [sp, #36]	; 0x24
 8007b34:	f89a 3000 	ldrb.w	r3, [sl]
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	f000 80a2 	beq.w	8007c82 <_vfiprintf_r+0x20e>
 8007b3e:	2300      	movs	r3, #0
 8007b40:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007b44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007b48:	f10a 0a01 	add.w	sl, sl, #1
 8007b4c:	9304      	str	r3, [sp, #16]
 8007b4e:	9307      	str	r3, [sp, #28]
 8007b50:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007b54:	931a      	str	r3, [sp, #104]	; 0x68
 8007b56:	4654      	mov	r4, sl
 8007b58:	2205      	movs	r2, #5
 8007b5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007b5e:	4858      	ldr	r0, [pc, #352]	; (8007cc0 <_vfiprintf_r+0x24c>)
 8007b60:	f7f8 fb3e 	bl	80001e0 <memchr>
 8007b64:	9a04      	ldr	r2, [sp, #16]
 8007b66:	b9d8      	cbnz	r0, 8007ba0 <_vfiprintf_r+0x12c>
 8007b68:	06d1      	lsls	r1, r2, #27
 8007b6a:	bf44      	itt	mi
 8007b6c:	2320      	movmi	r3, #32
 8007b6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b72:	0713      	lsls	r3, r2, #28
 8007b74:	bf44      	itt	mi
 8007b76:	232b      	movmi	r3, #43	; 0x2b
 8007b78:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007b7c:	f89a 3000 	ldrb.w	r3, [sl]
 8007b80:	2b2a      	cmp	r3, #42	; 0x2a
 8007b82:	d015      	beq.n	8007bb0 <_vfiprintf_r+0x13c>
 8007b84:	9a07      	ldr	r2, [sp, #28]
 8007b86:	4654      	mov	r4, sl
 8007b88:	2000      	movs	r0, #0
 8007b8a:	f04f 0c0a 	mov.w	ip, #10
 8007b8e:	4621      	mov	r1, r4
 8007b90:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007b94:	3b30      	subs	r3, #48	; 0x30
 8007b96:	2b09      	cmp	r3, #9
 8007b98:	d94e      	bls.n	8007c38 <_vfiprintf_r+0x1c4>
 8007b9a:	b1b0      	cbz	r0, 8007bca <_vfiprintf_r+0x156>
 8007b9c:	9207      	str	r2, [sp, #28]
 8007b9e:	e014      	b.n	8007bca <_vfiprintf_r+0x156>
 8007ba0:	eba0 0308 	sub.w	r3, r0, r8
 8007ba4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ba8:	4313      	orrs	r3, r2
 8007baa:	9304      	str	r3, [sp, #16]
 8007bac:	46a2      	mov	sl, r4
 8007bae:	e7d2      	b.n	8007b56 <_vfiprintf_r+0xe2>
 8007bb0:	9b03      	ldr	r3, [sp, #12]
 8007bb2:	1d19      	adds	r1, r3, #4
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	9103      	str	r1, [sp, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	bfbb      	ittet	lt
 8007bbc:	425b      	neglt	r3, r3
 8007bbe:	f042 0202 	orrlt.w	r2, r2, #2
 8007bc2:	9307      	strge	r3, [sp, #28]
 8007bc4:	9307      	strlt	r3, [sp, #28]
 8007bc6:	bfb8      	it	lt
 8007bc8:	9204      	strlt	r2, [sp, #16]
 8007bca:	7823      	ldrb	r3, [r4, #0]
 8007bcc:	2b2e      	cmp	r3, #46	; 0x2e
 8007bce:	d10c      	bne.n	8007bea <_vfiprintf_r+0x176>
 8007bd0:	7863      	ldrb	r3, [r4, #1]
 8007bd2:	2b2a      	cmp	r3, #42	; 0x2a
 8007bd4:	d135      	bne.n	8007c42 <_vfiprintf_r+0x1ce>
 8007bd6:	9b03      	ldr	r3, [sp, #12]
 8007bd8:	1d1a      	adds	r2, r3, #4
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	9203      	str	r2, [sp, #12]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	bfb8      	it	lt
 8007be2:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007be6:	3402      	adds	r4, #2
 8007be8:	9305      	str	r3, [sp, #20]
 8007bea:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007cd0 <_vfiprintf_r+0x25c>
 8007bee:	7821      	ldrb	r1, [r4, #0]
 8007bf0:	2203      	movs	r2, #3
 8007bf2:	4650      	mov	r0, sl
 8007bf4:	f7f8 faf4 	bl	80001e0 <memchr>
 8007bf8:	b140      	cbz	r0, 8007c0c <_vfiprintf_r+0x198>
 8007bfa:	2340      	movs	r3, #64	; 0x40
 8007bfc:	eba0 000a 	sub.w	r0, r0, sl
 8007c00:	fa03 f000 	lsl.w	r0, r3, r0
 8007c04:	9b04      	ldr	r3, [sp, #16]
 8007c06:	4303      	orrs	r3, r0
 8007c08:	3401      	adds	r4, #1
 8007c0a:	9304      	str	r3, [sp, #16]
 8007c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c10:	482c      	ldr	r0, [pc, #176]	; (8007cc4 <_vfiprintf_r+0x250>)
 8007c12:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007c16:	2206      	movs	r2, #6
 8007c18:	f7f8 fae2 	bl	80001e0 <memchr>
 8007c1c:	2800      	cmp	r0, #0
 8007c1e:	d03f      	beq.n	8007ca0 <_vfiprintf_r+0x22c>
 8007c20:	4b29      	ldr	r3, [pc, #164]	; (8007cc8 <_vfiprintf_r+0x254>)
 8007c22:	bb1b      	cbnz	r3, 8007c6c <_vfiprintf_r+0x1f8>
 8007c24:	9b03      	ldr	r3, [sp, #12]
 8007c26:	3307      	adds	r3, #7
 8007c28:	f023 0307 	bic.w	r3, r3, #7
 8007c2c:	3308      	adds	r3, #8
 8007c2e:	9303      	str	r3, [sp, #12]
 8007c30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007c32:	443b      	add	r3, r7
 8007c34:	9309      	str	r3, [sp, #36]	; 0x24
 8007c36:	e767      	b.n	8007b08 <_vfiprintf_r+0x94>
 8007c38:	fb0c 3202 	mla	r2, ip, r2, r3
 8007c3c:	460c      	mov	r4, r1
 8007c3e:	2001      	movs	r0, #1
 8007c40:	e7a5      	b.n	8007b8e <_vfiprintf_r+0x11a>
 8007c42:	2300      	movs	r3, #0
 8007c44:	3401      	adds	r4, #1
 8007c46:	9305      	str	r3, [sp, #20]
 8007c48:	4619      	mov	r1, r3
 8007c4a:	f04f 0c0a 	mov.w	ip, #10
 8007c4e:	4620      	mov	r0, r4
 8007c50:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007c54:	3a30      	subs	r2, #48	; 0x30
 8007c56:	2a09      	cmp	r2, #9
 8007c58:	d903      	bls.n	8007c62 <_vfiprintf_r+0x1ee>
 8007c5a:	2b00      	cmp	r3, #0
 8007c5c:	d0c5      	beq.n	8007bea <_vfiprintf_r+0x176>
 8007c5e:	9105      	str	r1, [sp, #20]
 8007c60:	e7c3      	b.n	8007bea <_vfiprintf_r+0x176>
 8007c62:	fb0c 2101 	mla	r1, ip, r1, r2
 8007c66:	4604      	mov	r4, r0
 8007c68:	2301      	movs	r3, #1
 8007c6a:	e7f0      	b.n	8007c4e <_vfiprintf_r+0x1da>
 8007c6c:	ab03      	add	r3, sp, #12
 8007c6e:	9300      	str	r3, [sp, #0]
 8007c70:	462a      	mov	r2, r5
 8007c72:	4b16      	ldr	r3, [pc, #88]	; (8007ccc <_vfiprintf_r+0x258>)
 8007c74:	a904      	add	r1, sp, #16
 8007c76:	4630      	mov	r0, r6
 8007c78:	f3af 8000 	nop.w
 8007c7c:	4607      	mov	r7, r0
 8007c7e:	1c78      	adds	r0, r7, #1
 8007c80:	d1d6      	bne.n	8007c30 <_vfiprintf_r+0x1bc>
 8007c82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c84:	07d9      	lsls	r1, r3, #31
 8007c86:	d405      	bmi.n	8007c94 <_vfiprintf_r+0x220>
 8007c88:	89ab      	ldrh	r3, [r5, #12]
 8007c8a:	059a      	lsls	r2, r3, #22
 8007c8c:	d402      	bmi.n	8007c94 <_vfiprintf_r+0x220>
 8007c8e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c90:	f7ff f9ee 	bl	8007070 <__retarget_lock_release_recursive>
 8007c94:	89ab      	ldrh	r3, [r5, #12]
 8007c96:	065b      	lsls	r3, r3, #25
 8007c98:	f53f af12 	bmi.w	8007ac0 <_vfiprintf_r+0x4c>
 8007c9c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007c9e:	e711      	b.n	8007ac4 <_vfiprintf_r+0x50>
 8007ca0:	ab03      	add	r3, sp, #12
 8007ca2:	9300      	str	r3, [sp, #0]
 8007ca4:	462a      	mov	r2, r5
 8007ca6:	4b09      	ldr	r3, [pc, #36]	; (8007ccc <_vfiprintf_r+0x258>)
 8007ca8:	a904      	add	r1, sp, #16
 8007caa:	4630      	mov	r0, r6
 8007cac:	f000 f880 	bl	8007db0 <_printf_i>
 8007cb0:	e7e4      	b.n	8007c7c <_vfiprintf_r+0x208>
 8007cb2:	bf00      	nop
 8007cb4:	0800850c 	.word	0x0800850c
 8007cb8:	0800852c 	.word	0x0800852c
 8007cbc:	080084ec 	.word	0x080084ec
 8007cc0:	080085fe 	.word	0x080085fe
 8007cc4:	08008608 	.word	0x08008608
 8007cc8:	00000000 	.word	0x00000000
 8007ccc:	08007a4f 	.word	0x08007a4f
 8007cd0:	08008604 	.word	0x08008604

08007cd4 <_printf_common>:
 8007cd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cd8:	4616      	mov	r6, r2
 8007cda:	4699      	mov	r9, r3
 8007cdc:	688a      	ldr	r2, [r1, #8]
 8007cde:	690b      	ldr	r3, [r1, #16]
 8007ce0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	bfb8      	it	lt
 8007ce8:	4613      	movlt	r3, r2
 8007cea:	6033      	str	r3, [r6, #0]
 8007cec:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007cf0:	4607      	mov	r7, r0
 8007cf2:	460c      	mov	r4, r1
 8007cf4:	b10a      	cbz	r2, 8007cfa <_printf_common+0x26>
 8007cf6:	3301      	adds	r3, #1
 8007cf8:	6033      	str	r3, [r6, #0]
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	0699      	lsls	r1, r3, #26
 8007cfe:	bf42      	ittt	mi
 8007d00:	6833      	ldrmi	r3, [r6, #0]
 8007d02:	3302      	addmi	r3, #2
 8007d04:	6033      	strmi	r3, [r6, #0]
 8007d06:	6825      	ldr	r5, [r4, #0]
 8007d08:	f015 0506 	ands.w	r5, r5, #6
 8007d0c:	d106      	bne.n	8007d1c <_printf_common+0x48>
 8007d0e:	f104 0a19 	add.w	sl, r4, #25
 8007d12:	68e3      	ldr	r3, [r4, #12]
 8007d14:	6832      	ldr	r2, [r6, #0]
 8007d16:	1a9b      	subs	r3, r3, r2
 8007d18:	42ab      	cmp	r3, r5
 8007d1a:	dc26      	bgt.n	8007d6a <_printf_common+0x96>
 8007d1c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007d20:	1e13      	subs	r3, r2, #0
 8007d22:	6822      	ldr	r2, [r4, #0]
 8007d24:	bf18      	it	ne
 8007d26:	2301      	movne	r3, #1
 8007d28:	0692      	lsls	r2, r2, #26
 8007d2a:	d42b      	bmi.n	8007d84 <_printf_common+0xb0>
 8007d2c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007d30:	4649      	mov	r1, r9
 8007d32:	4638      	mov	r0, r7
 8007d34:	47c0      	blx	r8
 8007d36:	3001      	adds	r0, #1
 8007d38:	d01e      	beq.n	8007d78 <_printf_common+0xa4>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	68e5      	ldr	r5, [r4, #12]
 8007d3e:	6832      	ldr	r2, [r6, #0]
 8007d40:	f003 0306 	and.w	r3, r3, #6
 8007d44:	2b04      	cmp	r3, #4
 8007d46:	bf08      	it	eq
 8007d48:	1aad      	subeq	r5, r5, r2
 8007d4a:	68a3      	ldr	r3, [r4, #8]
 8007d4c:	6922      	ldr	r2, [r4, #16]
 8007d4e:	bf0c      	ite	eq
 8007d50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d54:	2500      	movne	r5, #0
 8007d56:	4293      	cmp	r3, r2
 8007d58:	bfc4      	itt	gt
 8007d5a:	1a9b      	subgt	r3, r3, r2
 8007d5c:	18ed      	addgt	r5, r5, r3
 8007d5e:	2600      	movs	r6, #0
 8007d60:	341a      	adds	r4, #26
 8007d62:	42b5      	cmp	r5, r6
 8007d64:	d11a      	bne.n	8007d9c <_printf_common+0xc8>
 8007d66:	2000      	movs	r0, #0
 8007d68:	e008      	b.n	8007d7c <_printf_common+0xa8>
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	4652      	mov	r2, sl
 8007d6e:	4649      	mov	r1, r9
 8007d70:	4638      	mov	r0, r7
 8007d72:	47c0      	blx	r8
 8007d74:	3001      	adds	r0, #1
 8007d76:	d103      	bne.n	8007d80 <_printf_common+0xac>
 8007d78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d80:	3501      	adds	r5, #1
 8007d82:	e7c6      	b.n	8007d12 <_printf_common+0x3e>
 8007d84:	18e1      	adds	r1, r4, r3
 8007d86:	1c5a      	adds	r2, r3, #1
 8007d88:	2030      	movs	r0, #48	; 0x30
 8007d8a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007d8e:	4422      	add	r2, r4
 8007d90:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007d94:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007d98:	3302      	adds	r3, #2
 8007d9a:	e7c7      	b.n	8007d2c <_printf_common+0x58>
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	4622      	mov	r2, r4
 8007da0:	4649      	mov	r1, r9
 8007da2:	4638      	mov	r0, r7
 8007da4:	47c0      	blx	r8
 8007da6:	3001      	adds	r0, #1
 8007da8:	d0e6      	beq.n	8007d78 <_printf_common+0xa4>
 8007daa:	3601      	adds	r6, #1
 8007dac:	e7d9      	b.n	8007d62 <_printf_common+0x8e>
	...

08007db0 <_printf_i>:
 8007db0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007db4:	7e0f      	ldrb	r7, [r1, #24]
 8007db6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007db8:	2f78      	cmp	r7, #120	; 0x78
 8007dba:	4691      	mov	r9, r2
 8007dbc:	4680      	mov	r8, r0
 8007dbe:	460c      	mov	r4, r1
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007dc6:	d807      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dc8:	2f62      	cmp	r7, #98	; 0x62
 8007dca:	d80a      	bhi.n	8007de2 <_printf_i+0x32>
 8007dcc:	2f00      	cmp	r7, #0
 8007dce:	f000 80d8 	beq.w	8007f82 <_printf_i+0x1d2>
 8007dd2:	2f58      	cmp	r7, #88	; 0x58
 8007dd4:	f000 80a3 	beq.w	8007f1e <_printf_i+0x16e>
 8007dd8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007ddc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007de0:	e03a      	b.n	8007e58 <_printf_i+0xa8>
 8007de2:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007de6:	2b15      	cmp	r3, #21
 8007de8:	d8f6      	bhi.n	8007dd8 <_printf_i+0x28>
 8007dea:	a101      	add	r1, pc, #4	; (adr r1, 8007df0 <_printf_i+0x40>)
 8007dec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007df0:	08007e49 	.word	0x08007e49
 8007df4:	08007e5d 	.word	0x08007e5d
 8007df8:	08007dd9 	.word	0x08007dd9
 8007dfc:	08007dd9 	.word	0x08007dd9
 8007e00:	08007dd9 	.word	0x08007dd9
 8007e04:	08007dd9 	.word	0x08007dd9
 8007e08:	08007e5d 	.word	0x08007e5d
 8007e0c:	08007dd9 	.word	0x08007dd9
 8007e10:	08007dd9 	.word	0x08007dd9
 8007e14:	08007dd9 	.word	0x08007dd9
 8007e18:	08007dd9 	.word	0x08007dd9
 8007e1c:	08007f69 	.word	0x08007f69
 8007e20:	08007e8d 	.word	0x08007e8d
 8007e24:	08007f4b 	.word	0x08007f4b
 8007e28:	08007dd9 	.word	0x08007dd9
 8007e2c:	08007dd9 	.word	0x08007dd9
 8007e30:	08007f8b 	.word	0x08007f8b
 8007e34:	08007dd9 	.word	0x08007dd9
 8007e38:	08007e8d 	.word	0x08007e8d
 8007e3c:	08007dd9 	.word	0x08007dd9
 8007e40:	08007dd9 	.word	0x08007dd9
 8007e44:	08007f53 	.word	0x08007f53
 8007e48:	682b      	ldr	r3, [r5, #0]
 8007e4a:	1d1a      	adds	r2, r3, #4
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	602a      	str	r2, [r5, #0]
 8007e50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007e54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007e58:	2301      	movs	r3, #1
 8007e5a:	e0a3      	b.n	8007fa4 <_printf_i+0x1f4>
 8007e5c:	6820      	ldr	r0, [r4, #0]
 8007e5e:	6829      	ldr	r1, [r5, #0]
 8007e60:	0606      	lsls	r6, r0, #24
 8007e62:	f101 0304 	add.w	r3, r1, #4
 8007e66:	d50a      	bpl.n	8007e7e <_printf_i+0xce>
 8007e68:	680e      	ldr	r6, [r1, #0]
 8007e6a:	602b      	str	r3, [r5, #0]
 8007e6c:	2e00      	cmp	r6, #0
 8007e6e:	da03      	bge.n	8007e78 <_printf_i+0xc8>
 8007e70:	232d      	movs	r3, #45	; 0x2d
 8007e72:	4276      	negs	r6, r6
 8007e74:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007e78:	485e      	ldr	r0, [pc, #376]	; (8007ff4 <_printf_i+0x244>)
 8007e7a:	230a      	movs	r3, #10
 8007e7c:	e019      	b.n	8007eb2 <_printf_i+0x102>
 8007e7e:	680e      	ldr	r6, [r1, #0]
 8007e80:	602b      	str	r3, [r5, #0]
 8007e82:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007e86:	bf18      	it	ne
 8007e88:	b236      	sxthne	r6, r6
 8007e8a:	e7ef      	b.n	8007e6c <_printf_i+0xbc>
 8007e8c:	682b      	ldr	r3, [r5, #0]
 8007e8e:	6820      	ldr	r0, [r4, #0]
 8007e90:	1d19      	adds	r1, r3, #4
 8007e92:	6029      	str	r1, [r5, #0]
 8007e94:	0601      	lsls	r1, r0, #24
 8007e96:	d501      	bpl.n	8007e9c <_printf_i+0xec>
 8007e98:	681e      	ldr	r6, [r3, #0]
 8007e9a:	e002      	b.n	8007ea2 <_printf_i+0xf2>
 8007e9c:	0646      	lsls	r6, r0, #25
 8007e9e:	d5fb      	bpl.n	8007e98 <_printf_i+0xe8>
 8007ea0:	881e      	ldrh	r6, [r3, #0]
 8007ea2:	4854      	ldr	r0, [pc, #336]	; (8007ff4 <_printf_i+0x244>)
 8007ea4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ea6:	bf0c      	ite	eq
 8007ea8:	2308      	moveq	r3, #8
 8007eaa:	230a      	movne	r3, #10
 8007eac:	2100      	movs	r1, #0
 8007eae:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007eb2:	6865      	ldr	r5, [r4, #4]
 8007eb4:	60a5      	str	r5, [r4, #8]
 8007eb6:	2d00      	cmp	r5, #0
 8007eb8:	bfa2      	ittt	ge
 8007eba:	6821      	ldrge	r1, [r4, #0]
 8007ebc:	f021 0104 	bicge.w	r1, r1, #4
 8007ec0:	6021      	strge	r1, [r4, #0]
 8007ec2:	b90e      	cbnz	r6, 8007ec8 <_printf_i+0x118>
 8007ec4:	2d00      	cmp	r5, #0
 8007ec6:	d04d      	beq.n	8007f64 <_printf_i+0x1b4>
 8007ec8:	4615      	mov	r5, r2
 8007eca:	fbb6 f1f3 	udiv	r1, r6, r3
 8007ece:	fb03 6711 	mls	r7, r3, r1, r6
 8007ed2:	5dc7      	ldrb	r7, [r0, r7]
 8007ed4:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007ed8:	4637      	mov	r7, r6
 8007eda:	42bb      	cmp	r3, r7
 8007edc:	460e      	mov	r6, r1
 8007ede:	d9f4      	bls.n	8007eca <_printf_i+0x11a>
 8007ee0:	2b08      	cmp	r3, #8
 8007ee2:	d10b      	bne.n	8007efc <_printf_i+0x14c>
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	07de      	lsls	r6, r3, #31
 8007ee8:	d508      	bpl.n	8007efc <_printf_i+0x14c>
 8007eea:	6923      	ldr	r3, [r4, #16]
 8007eec:	6861      	ldr	r1, [r4, #4]
 8007eee:	4299      	cmp	r1, r3
 8007ef0:	bfde      	ittt	le
 8007ef2:	2330      	movle	r3, #48	; 0x30
 8007ef4:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007ef8:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8007efc:	1b52      	subs	r2, r2, r5
 8007efe:	6122      	str	r2, [r4, #16]
 8007f00:	f8cd a000 	str.w	sl, [sp]
 8007f04:	464b      	mov	r3, r9
 8007f06:	aa03      	add	r2, sp, #12
 8007f08:	4621      	mov	r1, r4
 8007f0a:	4640      	mov	r0, r8
 8007f0c:	f7ff fee2 	bl	8007cd4 <_printf_common>
 8007f10:	3001      	adds	r0, #1
 8007f12:	d14c      	bne.n	8007fae <_printf_i+0x1fe>
 8007f14:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f18:	b004      	add	sp, #16
 8007f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007f1e:	4835      	ldr	r0, [pc, #212]	; (8007ff4 <_printf_i+0x244>)
 8007f20:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007f24:	6829      	ldr	r1, [r5, #0]
 8007f26:	6823      	ldr	r3, [r4, #0]
 8007f28:	f851 6b04 	ldr.w	r6, [r1], #4
 8007f2c:	6029      	str	r1, [r5, #0]
 8007f2e:	061d      	lsls	r5, r3, #24
 8007f30:	d514      	bpl.n	8007f5c <_printf_i+0x1ac>
 8007f32:	07df      	lsls	r7, r3, #31
 8007f34:	bf44      	itt	mi
 8007f36:	f043 0320 	orrmi.w	r3, r3, #32
 8007f3a:	6023      	strmi	r3, [r4, #0]
 8007f3c:	b91e      	cbnz	r6, 8007f46 <_printf_i+0x196>
 8007f3e:	6823      	ldr	r3, [r4, #0]
 8007f40:	f023 0320 	bic.w	r3, r3, #32
 8007f44:	6023      	str	r3, [r4, #0]
 8007f46:	2310      	movs	r3, #16
 8007f48:	e7b0      	b.n	8007eac <_printf_i+0xfc>
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	f043 0320 	orr.w	r3, r3, #32
 8007f50:	6023      	str	r3, [r4, #0]
 8007f52:	2378      	movs	r3, #120	; 0x78
 8007f54:	4828      	ldr	r0, [pc, #160]	; (8007ff8 <_printf_i+0x248>)
 8007f56:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007f5a:	e7e3      	b.n	8007f24 <_printf_i+0x174>
 8007f5c:	0659      	lsls	r1, r3, #25
 8007f5e:	bf48      	it	mi
 8007f60:	b2b6      	uxthmi	r6, r6
 8007f62:	e7e6      	b.n	8007f32 <_printf_i+0x182>
 8007f64:	4615      	mov	r5, r2
 8007f66:	e7bb      	b.n	8007ee0 <_printf_i+0x130>
 8007f68:	682b      	ldr	r3, [r5, #0]
 8007f6a:	6826      	ldr	r6, [r4, #0]
 8007f6c:	6961      	ldr	r1, [r4, #20]
 8007f6e:	1d18      	adds	r0, r3, #4
 8007f70:	6028      	str	r0, [r5, #0]
 8007f72:	0635      	lsls	r5, r6, #24
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	d501      	bpl.n	8007f7c <_printf_i+0x1cc>
 8007f78:	6019      	str	r1, [r3, #0]
 8007f7a:	e002      	b.n	8007f82 <_printf_i+0x1d2>
 8007f7c:	0670      	lsls	r0, r6, #25
 8007f7e:	d5fb      	bpl.n	8007f78 <_printf_i+0x1c8>
 8007f80:	8019      	strh	r1, [r3, #0]
 8007f82:	2300      	movs	r3, #0
 8007f84:	6123      	str	r3, [r4, #16]
 8007f86:	4615      	mov	r5, r2
 8007f88:	e7ba      	b.n	8007f00 <_printf_i+0x150>
 8007f8a:	682b      	ldr	r3, [r5, #0]
 8007f8c:	1d1a      	adds	r2, r3, #4
 8007f8e:	602a      	str	r2, [r5, #0]
 8007f90:	681d      	ldr	r5, [r3, #0]
 8007f92:	6862      	ldr	r2, [r4, #4]
 8007f94:	2100      	movs	r1, #0
 8007f96:	4628      	mov	r0, r5
 8007f98:	f7f8 f922 	bl	80001e0 <memchr>
 8007f9c:	b108      	cbz	r0, 8007fa2 <_printf_i+0x1f2>
 8007f9e:	1b40      	subs	r0, r0, r5
 8007fa0:	6060      	str	r0, [r4, #4]
 8007fa2:	6863      	ldr	r3, [r4, #4]
 8007fa4:	6123      	str	r3, [r4, #16]
 8007fa6:	2300      	movs	r3, #0
 8007fa8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fac:	e7a8      	b.n	8007f00 <_printf_i+0x150>
 8007fae:	6923      	ldr	r3, [r4, #16]
 8007fb0:	462a      	mov	r2, r5
 8007fb2:	4649      	mov	r1, r9
 8007fb4:	4640      	mov	r0, r8
 8007fb6:	47d0      	blx	sl
 8007fb8:	3001      	adds	r0, #1
 8007fba:	d0ab      	beq.n	8007f14 <_printf_i+0x164>
 8007fbc:	6823      	ldr	r3, [r4, #0]
 8007fbe:	079b      	lsls	r3, r3, #30
 8007fc0:	d413      	bmi.n	8007fea <_printf_i+0x23a>
 8007fc2:	68e0      	ldr	r0, [r4, #12]
 8007fc4:	9b03      	ldr	r3, [sp, #12]
 8007fc6:	4298      	cmp	r0, r3
 8007fc8:	bfb8      	it	lt
 8007fca:	4618      	movlt	r0, r3
 8007fcc:	e7a4      	b.n	8007f18 <_printf_i+0x168>
 8007fce:	2301      	movs	r3, #1
 8007fd0:	4632      	mov	r2, r6
 8007fd2:	4649      	mov	r1, r9
 8007fd4:	4640      	mov	r0, r8
 8007fd6:	47d0      	blx	sl
 8007fd8:	3001      	adds	r0, #1
 8007fda:	d09b      	beq.n	8007f14 <_printf_i+0x164>
 8007fdc:	3501      	adds	r5, #1
 8007fde:	68e3      	ldr	r3, [r4, #12]
 8007fe0:	9903      	ldr	r1, [sp, #12]
 8007fe2:	1a5b      	subs	r3, r3, r1
 8007fe4:	42ab      	cmp	r3, r5
 8007fe6:	dcf2      	bgt.n	8007fce <_printf_i+0x21e>
 8007fe8:	e7eb      	b.n	8007fc2 <_printf_i+0x212>
 8007fea:	2500      	movs	r5, #0
 8007fec:	f104 0619 	add.w	r6, r4, #25
 8007ff0:	e7f5      	b.n	8007fde <_printf_i+0x22e>
 8007ff2:	bf00      	nop
 8007ff4:	0800860f 	.word	0x0800860f
 8007ff8:	08008620 	.word	0x08008620

08007ffc <_read_r>:
 8007ffc:	b538      	push	{r3, r4, r5, lr}
 8007ffe:	4d07      	ldr	r5, [pc, #28]	; (800801c <_read_r+0x20>)
 8008000:	4604      	mov	r4, r0
 8008002:	4608      	mov	r0, r1
 8008004:	4611      	mov	r1, r2
 8008006:	2200      	movs	r2, #0
 8008008:	602a      	str	r2, [r5, #0]
 800800a:	461a      	mov	r2, r3
 800800c:	f7f8 fe3a 	bl	8000c84 <_read>
 8008010:	1c43      	adds	r3, r0, #1
 8008012:	d102      	bne.n	800801a <_read_r+0x1e>
 8008014:	682b      	ldr	r3, [r5, #0]
 8008016:	b103      	cbz	r3, 800801a <_read_r+0x1e>
 8008018:	6023      	str	r3, [r4, #0]
 800801a:	bd38      	pop	{r3, r4, r5, pc}
 800801c:	20001864 	.word	0x20001864

08008020 <__swbuf_r>:
 8008020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008022:	460e      	mov	r6, r1
 8008024:	4614      	mov	r4, r2
 8008026:	4605      	mov	r5, r0
 8008028:	b118      	cbz	r0, 8008032 <__swbuf_r+0x12>
 800802a:	6983      	ldr	r3, [r0, #24]
 800802c:	b90b      	cbnz	r3, 8008032 <__swbuf_r+0x12>
 800802e:	f7fe ff5b 	bl	8006ee8 <__sinit>
 8008032:	4b21      	ldr	r3, [pc, #132]	; (80080b8 <__swbuf_r+0x98>)
 8008034:	429c      	cmp	r4, r3
 8008036:	d12b      	bne.n	8008090 <__swbuf_r+0x70>
 8008038:	686c      	ldr	r4, [r5, #4]
 800803a:	69a3      	ldr	r3, [r4, #24]
 800803c:	60a3      	str	r3, [r4, #8]
 800803e:	89a3      	ldrh	r3, [r4, #12]
 8008040:	071a      	lsls	r2, r3, #28
 8008042:	d52f      	bpl.n	80080a4 <__swbuf_r+0x84>
 8008044:	6923      	ldr	r3, [r4, #16]
 8008046:	b36b      	cbz	r3, 80080a4 <__swbuf_r+0x84>
 8008048:	6923      	ldr	r3, [r4, #16]
 800804a:	6820      	ldr	r0, [r4, #0]
 800804c:	1ac0      	subs	r0, r0, r3
 800804e:	6963      	ldr	r3, [r4, #20]
 8008050:	b2f6      	uxtb	r6, r6
 8008052:	4283      	cmp	r3, r0
 8008054:	4637      	mov	r7, r6
 8008056:	dc04      	bgt.n	8008062 <__swbuf_r+0x42>
 8008058:	4621      	mov	r1, r4
 800805a:	4628      	mov	r0, r5
 800805c:	f7ff fac4 	bl	80075e8 <_fflush_r>
 8008060:	bb30      	cbnz	r0, 80080b0 <__swbuf_r+0x90>
 8008062:	68a3      	ldr	r3, [r4, #8]
 8008064:	3b01      	subs	r3, #1
 8008066:	60a3      	str	r3, [r4, #8]
 8008068:	6823      	ldr	r3, [r4, #0]
 800806a:	1c5a      	adds	r2, r3, #1
 800806c:	6022      	str	r2, [r4, #0]
 800806e:	701e      	strb	r6, [r3, #0]
 8008070:	6963      	ldr	r3, [r4, #20]
 8008072:	3001      	adds	r0, #1
 8008074:	4283      	cmp	r3, r0
 8008076:	d004      	beq.n	8008082 <__swbuf_r+0x62>
 8008078:	89a3      	ldrh	r3, [r4, #12]
 800807a:	07db      	lsls	r3, r3, #31
 800807c:	d506      	bpl.n	800808c <__swbuf_r+0x6c>
 800807e:	2e0a      	cmp	r6, #10
 8008080:	d104      	bne.n	800808c <__swbuf_r+0x6c>
 8008082:	4621      	mov	r1, r4
 8008084:	4628      	mov	r0, r5
 8008086:	f7ff faaf 	bl	80075e8 <_fflush_r>
 800808a:	b988      	cbnz	r0, 80080b0 <__swbuf_r+0x90>
 800808c:	4638      	mov	r0, r7
 800808e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008090:	4b0a      	ldr	r3, [pc, #40]	; (80080bc <__swbuf_r+0x9c>)
 8008092:	429c      	cmp	r4, r3
 8008094:	d101      	bne.n	800809a <__swbuf_r+0x7a>
 8008096:	68ac      	ldr	r4, [r5, #8]
 8008098:	e7cf      	b.n	800803a <__swbuf_r+0x1a>
 800809a:	4b09      	ldr	r3, [pc, #36]	; (80080c0 <__swbuf_r+0xa0>)
 800809c:	429c      	cmp	r4, r3
 800809e:	bf08      	it	eq
 80080a0:	68ec      	ldreq	r4, [r5, #12]
 80080a2:	e7ca      	b.n	800803a <__swbuf_r+0x1a>
 80080a4:	4621      	mov	r1, r4
 80080a6:	4628      	mov	r0, r5
 80080a8:	f000 f80c 	bl	80080c4 <__swsetup_r>
 80080ac:	2800      	cmp	r0, #0
 80080ae:	d0cb      	beq.n	8008048 <__swbuf_r+0x28>
 80080b0:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 80080b4:	e7ea      	b.n	800808c <__swbuf_r+0x6c>
 80080b6:	bf00      	nop
 80080b8:	0800850c 	.word	0x0800850c
 80080bc:	0800852c 	.word	0x0800852c
 80080c0:	080084ec 	.word	0x080084ec

080080c4 <__swsetup_r>:
 80080c4:	4b32      	ldr	r3, [pc, #200]	; (8008190 <__swsetup_r+0xcc>)
 80080c6:	b570      	push	{r4, r5, r6, lr}
 80080c8:	681d      	ldr	r5, [r3, #0]
 80080ca:	4606      	mov	r6, r0
 80080cc:	460c      	mov	r4, r1
 80080ce:	b125      	cbz	r5, 80080da <__swsetup_r+0x16>
 80080d0:	69ab      	ldr	r3, [r5, #24]
 80080d2:	b913      	cbnz	r3, 80080da <__swsetup_r+0x16>
 80080d4:	4628      	mov	r0, r5
 80080d6:	f7fe ff07 	bl	8006ee8 <__sinit>
 80080da:	4b2e      	ldr	r3, [pc, #184]	; (8008194 <__swsetup_r+0xd0>)
 80080dc:	429c      	cmp	r4, r3
 80080de:	d10f      	bne.n	8008100 <__swsetup_r+0x3c>
 80080e0:	686c      	ldr	r4, [r5, #4]
 80080e2:	89a3      	ldrh	r3, [r4, #12]
 80080e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80080e8:	0719      	lsls	r1, r3, #28
 80080ea:	d42c      	bmi.n	8008146 <__swsetup_r+0x82>
 80080ec:	06dd      	lsls	r5, r3, #27
 80080ee:	d411      	bmi.n	8008114 <__swsetup_r+0x50>
 80080f0:	2309      	movs	r3, #9
 80080f2:	6033      	str	r3, [r6, #0]
 80080f4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80080f8:	81a3      	strh	r3, [r4, #12]
 80080fa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80080fe:	e03e      	b.n	800817e <__swsetup_r+0xba>
 8008100:	4b25      	ldr	r3, [pc, #148]	; (8008198 <__swsetup_r+0xd4>)
 8008102:	429c      	cmp	r4, r3
 8008104:	d101      	bne.n	800810a <__swsetup_r+0x46>
 8008106:	68ac      	ldr	r4, [r5, #8]
 8008108:	e7eb      	b.n	80080e2 <__swsetup_r+0x1e>
 800810a:	4b24      	ldr	r3, [pc, #144]	; (800819c <__swsetup_r+0xd8>)
 800810c:	429c      	cmp	r4, r3
 800810e:	bf08      	it	eq
 8008110:	68ec      	ldreq	r4, [r5, #12]
 8008112:	e7e6      	b.n	80080e2 <__swsetup_r+0x1e>
 8008114:	0758      	lsls	r0, r3, #29
 8008116:	d512      	bpl.n	800813e <__swsetup_r+0x7a>
 8008118:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800811a:	b141      	cbz	r1, 800812e <__swsetup_r+0x6a>
 800811c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008120:	4299      	cmp	r1, r3
 8008122:	d002      	beq.n	800812a <__swsetup_r+0x66>
 8008124:	4630      	mov	r0, r6
 8008126:	f7ff fad3 	bl	80076d0 <_free_r>
 800812a:	2300      	movs	r3, #0
 800812c:	6363      	str	r3, [r4, #52]	; 0x34
 800812e:	89a3      	ldrh	r3, [r4, #12]
 8008130:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008134:	81a3      	strh	r3, [r4, #12]
 8008136:	2300      	movs	r3, #0
 8008138:	6063      	str	r3, [r4, #4]
 800813a:	6923      	ldr	r3, [r4, #16]
 800813c:	6023      	str	r3, [r4, #0]
 800813e:	89a3      	ldrh	r3, [r4, #12]
 8008140:	f043 0308 	orr.w	r3, r3, #8
 8008144:	81a3      	strh	r3, [r4, #12]
 8008146:	6923      	ldr	r3, [r4, #16]
 8008148:	b94b      	cbnz	r3, 800815e <__swsetup_r+0x9a>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008150:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008154:	d003      	beq.n	800815e <__swsetup_r+0x9a>
 8008156:	4621      	mov	r1, r4
 8008158:	4630      	mov	r0, r6
 800815a:	f000 f84d 	bl	80081f8 <__smakebuf_r>
 800815e:	89a0      	ldrh	r0, [r4, #12]
 8008160:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008164:	f010 0301 	ands.w	r3, r0, #1
 8008168:	d00a      	beq.n	8008180 <__swsetup_r+0xbc>
 800816a:	2300      	movs	r3, #0
 800816c:	60a3      	str	r3, [r4, #8]
 800816e:	6963      	ldr	r3, [r4, #20]
 8008170:	425b      	negs	r3, r3
 8008172:	61a3      	str	r3, [r4, #24]
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	b943      	cbnz	r3, 800818a <__swsetup_r+0xc6>
 8008178:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800817c:	d1ba      	bne.n	80080f4 <__swsetup_r+0x30>
 800817e:	bd70      	pop	{r4, r5, r6, pc}
 8008180:	0781      	lsls	r1, r0, #30
 8008182:	bf58      	it	pl
 8008184:	6963      	ldrpl	r3, [r4, #20]
 8008186:	60a3      	str	r3, [r4, #8]
 8008188:	e7f4      	b.n	8008174 <__swsetup_r+0xb0>
 800818a:	2000      	movs	r0, #0
 800818c:	e7f7      	b.n	800817e <__swsetup_r+0xba>
 800818e:	bf00      	nop
 8008190:	20000010 	.word	0x20000010
 8008194:	0800850c 	.word	0x0800850c
 8008198:	0800852c 	.word	0x0800852c
 800819c:	080084ec 	.word	0x080084ec

080081a0 <abort>:
 80081a0:	b508      	push	{r3, lr}
 80081a2:	2006      	movs	r0, #6
 80081a4:	f000 f8da 	bl	800835c <raise>
 80081a8:	2001      	movs	r0, #1
 80081aa:	f7f8 fd61 	bl	8000c70 <_exit>

080081ae <__swhatbuf_r>:
 80081ae:	b570      	push	{r4, r5, r6, lr}
 80081b0:	460e      	mov	r6, r1
 80081b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081b6:	2900      	cmp	r1, #0
 80081b8:	b096      	sub	sp, #88	; 0x58
 80081ba:	4614      	mov	r4, r2
 80081bc:	461d      	mov	r5, r3
 80081be:	da08      	bge.n	80081d2 <__swhatbuf_r+0x24>
 80081c0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80081c4:	2200      	movs	r2, #0
 80081c6:	602a      	str	r2, [r5, #0]
 80081c8:	061a      	lsls	r2, r3, #24
 80081ca:	d410      	bmi.n	80081ee <__swhatbuf_r+0x40>
 80081cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80081d0:	e00e      	b.n	80081f0 <__swhatbuf_r+0x42>
 80081d2:	466a      	mov	r2, sp
 80081d4:	f000 f8de 	bl	8008394 <_fstat_r>
 80081d8:	2800      	cmp	r0, #0
 80081da:	dbf1      	blt.n	80081c0 <__swhatbuf_r+0x12>
 80081dc:	9a01      	ldr	r2, [sp, #4]
 80081de:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80081e2:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80081e6:	425a      	negs	r2, r3
 80081e8:	415a      	adcs	r2, r3
 80081ea:	602a      	str	r2, [r5, #0]
 80081ec:	e7ee      	b.n	80081cc <__swhatbuf_r+0x1e>
 80081ee:	2340      	movs	r3, #64	; 0x40
 80081f0:	2000      	movs	r0, #0
 80081f2:	6023      	str	r3, [r4, #0]
 80081f4:	b016      	add	sp, #88	; 0x58
 80081f6:	bd70      	pop	{r4, r5, r6, pc}

080081f8 <__smakebuf_r>:
 80081f8:	898b      	ldrh	r3, [r1, #12]
 80081fa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80081fc:	079d      	lsls	r5, r3, #30
 80081fe:	4606      	mov	r6, r0
 8008200:	460c      	mov	r4, r1
 8008202:	d507      	bpl.n	8008214 <__smakebuf_r+0x1c>
 8008204:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	6123      	str	r3, [r4, #16]
 800820c:	2301      	movs	r3, #1
 800820e:	6163      	str	r3, [r4, #20]
 8008210:	b002      	add	sp, #8
 8008212:	bd70      	pop	{r4, r5, r6, pc}
 8008214:	ab01      	add	r3, sp, #4
 8008216:	466a      	mov	r2, sp
 8008218:	f7ff ffc9 	bl	80081ae <__swhatbuf_r>
 800821c:	9900      	ldr	r1, [sp, #0]
 800821e:	4605      	mov	r5, r0
 8008220:	4630      	mov	r0, r6
 8008222:	f7fe ff5d 	bl	80070e0 <_malloc_r>
 8008226:	b948      	cbnz	r0, 800823c <__smakebuf_r+0x44>
 8008228:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800822c:	059a      	lsls	r2, r3, #22
 800822e:	d4ef      	bmi.n	8008210 <__smakebuf_r+0x18>
 8008230:	f023 0303 	bic.w	r3, r3, #3
 8008234:	f043 0302 	orr.w	r3, r3, #2
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	e7e3      	b.n	8008204 <__smakebuf_r+0xc>
 800823c:	4b0d      	ldr	r3, [pc, #52]	; (8008274 <__smakebuf_r+0x7c>)
 800823e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008240:	89a3      	ldrh	r3, [r4, #12]
 8008242:	6020      	str	r0, [r4, #0]
 8008244:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008248:	81a3      	strh	r3, [r4, #12]
 800824a:	9b00      	ldr	r3, [sp, #0]
 800824c:	6163      	str	r3, [r4, #20]
 800824e:	9b01      	ldr	r3, [sp, #4]
 8008250:	6120      	str	r0, [r4, #16]
 8008252:	b15b      	cbz	r3, 800826c <__smakebuf_r+0x74>
 8008254:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008258:	4630      	mov	r0, r6
 800825a:	f000 f8ad 	bl	80083b8 <_isatty_r>
 800825e:	b128      	cbz	r0, 800826c <__smakebuf_r+0x74>
 8008260:	89a3      	ldrh	r3, [r4, #12]
 8008262:	f023 0303 	bic.w	r3, r3, #3
 8008266:	f043 0301 	orr.w	r3, r3, #1
 800826a:	81a3      	strh	r3, [r4, #12]
 800826c:	89a0      	ldrh	r0, [r4, #12]
 800826e:	4305      	orrs	r5, r0
 8008270:	81a5      	strh	r5, [r4, #12]
 8008272:	e7cd      	b.n	8008210 <__smakebuf_r+0x18>
 8008274:	08006e81 	.word	0x08006e81

08008278 <memmove>:
 8008278:	4288      	cmp	r0, r1
 800827a:	b510      	push	{r4, lr}
 800827c:	eb01 0402 	add.w	r4, r1, r2
 8008280:	d902      	bls.n	8008288 <memmove+0x10>
 8008282:	4284      	cmp	r4, r0
 8008284:	4623      	mov	r3, r4
 8008286:	d807      	bhi.n	8008298 <memmove+0x20>
 8008288:	1e43      	subs	r3, r0, #1
 800828a:	42a1      	cmp	r1, r4
 800828c:	d008      	beq.n	80082a0 <memmove+0x28>
 800828e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008292:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008296:	e7f8      	b.n	800828a <memmove+0x12>
 8008298:	4402      	add	r2, r0
 800829a:	4601      	mov	r1, r0
 800829c:	428a      	cmp	r2, r1
 800829e:	d100      	bne.n	80082a2 <memmove+0x2a>
 80082a0:	bd10      	pop	{r4, pc}
 80082a2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082a6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082aa:	e7f7      	b.n	800829c <memmove+0x24>

080082ac <_realloc_r>:
 80082ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082b0:	4680      	mov	r8, r0
 80082b2:	4614      	mov	r4, r2
 80082b4:	460e      	mov	r6, r1
 80082b6:	b921      	cbnz	r1, 80082c2 <_realloc_r+0x16>
 80082b8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082bc:	4611      	mov	r1, r2
 80082be:	f7fe bf0f 	b.w	80070e0 <_malloc_r>
 80082c2:	b92a      	cbnz	r2, 80082d0 <_realloc_r+0x24>
 80082c4:	f7ff fa04 	bl	80076d0 <_free_r>
 80082c8:	4625      	mov	r5, r4
 80082ca:	4628      	mov	r0, r5
 80082cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80082d0:	f000 f882 	bl	80083d8 <_malloc_usable_size_r>
 80082d4:	4284      	cmp	r4, r0
 80082d6:	4607      	mov	r7, r0
 80082d8:	d802      	bhi.n	80082e0 <_realloc_r+0x34>
 80082da:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80082de:	d812      	bhi.n	8008306 <_realloc_r+0x5a>
 80082e0:	4621      	mov	r1, r4
 80082e2:	4640      	mov	r0, r8
 80082e4:	f7fe fefc 	bl	80070e0 <_malloc_r>
 80082e8:	4605      	mov	r5, r0
 80082ea:	2800      	cmp	r0, #0
 80082ec:	d0ed      	beq.n	80082ca <_realloc_r+0x1e>
 80082ee:	42bc      	cmp	r4, r7
 80082f0:	4622      	mov	r2, r4
 80082f2:	4631      	mov	r1, r6
 80082f4:	bf28      	it	cs
 80082f6:	463a      	movcs	r2, r7
 80082f8:	f7fe febb 	bl	8007072 <memcpy>
 80082fc:	4631      	mov	r1, r6
 80082fe:	4640      	mov	r0, r8
 8008300:	f7ff f9e6 	bl	80076d0 <_free_r>
 8008304:	e7e1      	b.n	80082ca <_realloc_r+0x1e>
 8008306:	4635      	mov	r5, r6
 8008308:	e7df      	b.n	80082ca <_realloc_r+0x1e>

0800830a <_raise_r>:
 800830a:	291f      	cmp	r1, #31
 800830c:	b538      	push	{r3, r4, r5, lr}
 800830e:	4604      	mov	r4, r0
 8008310:	460d      	mov	r5, r1
 8008312:	d904      	bls.n	800831e <_raise_r+0x14>
 8008314:	2316      	movs	r3, #22
 8008316:	6003      	str	r3, [r0, #0]
 8008318:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800831c:	bd38      	pop	{r3, r4, r5, pc}
 800831e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008320:	b112      	cbz	r2, 8008328 <_raise_r+0x1e>
 8008322:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008326:	b94b      	cbnz	r3, 800833c <_raise_r+0x32>
 8008328:	4620      	mov	r0, r4
 800832a:	f000 f831 	bl	8008390 <_getpid_r>
 800832e:	462a      	mov	r2, r5
 8008330:	4601      	mov	r1, r0
 8008332:	4620      	mov	r0, r4
 8008334:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008338:	f000 b818 	b.w	800836c <_kill_r>
 800833c:	2b01      	cmp	r3, #1
 800833e:	d00a      	beq.n	8008356 <_raise_r+0x4c>
 8008340:	1c59      	adds	r1, r3, #1
 8008342:	d103      	bne.n	800834c <_raise_r+0x42>
 8008344:	2316      	movs	r3, #22
 8008346:	6003      	str	r3, [r0, #0]
 8008348:	2001      	movs	r0, #1
 800834a:	e7e7      	b.n	800831c <_raise_r+0x12>
 800834c:	2400      	movs	r4, #0
 800834e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008352:	4628      	mov	r0, r5
 8008354:	4798      	blx	r3
 8008356:	2000      	movs	r0, #0
 8008358:	e7e0      	b.n	800831c <_raise_r+0x12>
	...

0800835c <raise>:
 800835c:	4b02      	ldr	r3, [pc, #8]	; (8008368 <raise+0xc>)
 800835e:	4601      	mov	r1, r0
 8008360:	6818      	ldr	r0, [r3, #0]
 8008362:	f7ff bfd2 	b.w	800830a <_raise_r>
 8008366:	bf00      	nop
 8008368:	20000010 	.word	0x20000010

0800836c <_kill_r>:
 800836c:	b538      	push	{r3, r4, r5, lr}
 800836e:	4d07      	ldr	r5, [pc, #28]	; (800838c <_kill_r+0x20>)
 8008370:	2300      	movs	r3, #0
 8008372:	4604      	mov	r4, r0
 8008374:	4608      	mov	r0, r1
 8008376:	4611      	mov	r1, r2
 8008378:	602b      	str	r3, [r5, #0]
 800837a:	f7f8 fc69 	bl	8000c50 <_kill>
 800837e:	1c43      	adds	r3, r0, #1
 8008380:	d102      	bne.n	8008388 <_kill_r+0x1c>
 8008382:	682b      	ldr	r3, [r5, #0]
 8008384:	b103      	cbz	r3, 8008388 <_kill_r+0x1c>
 8008386:	6023      	str	r3, [r4, #0]
 8008388:	bd38      	pop	{r3, r4, r5, pc}
 800838a:	bf00      	nop
 800838c:	20001864 	.word	0x20001864

08008390 <_getpid_r>:
 8008390:	f7f8 bc56 	b.w	8000c40 <_getpid>

08008394 <_fstat_r>:
 8008394:	b538      	push	{r3, r4, r5, lr}
 8008396:	4d07      	ldr	r5, [pc, #28]	; (80083b4 <_fstat_r+0x20>)
 8008398:	2300      	movs	r3, #0
 800839a:	4604      	mov	r4, r0
 800839c:	4608      	mov	r0, r1
 800839e:	4611      	mov	r1, r2
 80083a0:	602b      	str	r3, [r5, #0]
 80083a2:	f7f8 fcb4 	bl	8000d0e <_fstat>
 80083a6:	1c43      	adds	r3, r0, #1
 80083a8:	d102      	bne.n	80083b0 <_fstat_r+0x1c>
 80083aa:	682b      	ldr	r3, [r5, #0]
 80083ac:	b103      	cbz	r3, 80083b0 <_fstat_r+0x1c>
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	bd38      	pop	{r3, r4, r5, pc}
 80083b2:	bf00      	nop
 80083b4:	20001864 	.word	0x20001864

080083b8 <_isatty_r>:
 80083b8:	b538      	push	{r3, r4, r5, lr}
 80083ba:	4d06      	ldr	r5, [pc, #24]	; (80083d4 <_isatty_r+0x1c>)
 80083bc:	2300      	movs	r3, #0
 80083be:	4604      	mov	r4, r0
 80083c0:	4608      	mov	r0, r1
 80083c2:	602b      	str	r3, [r5, #0]
 80083c4:	f7f8 fcb3 	bl	8000d2e <_isatty>
 80083c8:	1c43      	adds	r3, r0, #1
 80083ca:	d102      	bne.n	80083d2 <_isatty_r+0x1a>
 80083cc:	682b      	ldr	r3, [r5, #0]
 80083ce:	b103      	cbz	r3, 80083d2 <_isatty_r+0x1a>
 80083d0:	6023      	str	r3, [r4, #0]
 80083d2:	bd38      	pop	{r3, r4, r5, pc}
 80083d4:	20001864 	.word	0x20001864

080083d8 <_malloc_usable_size_r>:
 80083d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80083dc:	1f18      	subs	r0, r3, #4
 80083de:	2b00      	cmp	r3, #0
 80083e0:	bfbc      	itt	lt
 80083e2:	580b      	ldrlt	r3, [r1, r0]
 80083e4:	18c0      	addlt	r0, r0, r3
 80083e6:	4770      	bx	lr

080083e8 <_init>:
 80083e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ea:	bf00      	nop
 80083ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083ee:	bc08      	pop	{r3}
 80083f0:	469e      	mov	lr, r3
 80083f2:	4770      	bx	lr

080083f4 <_fini>:
 80083f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083f6:	bf00      	nop
 80083f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083fa:	bc08      	pop	{r3}
 80083fc:	469e      	mov	lr, r3
 80083fe:	4770      	bx	lr
