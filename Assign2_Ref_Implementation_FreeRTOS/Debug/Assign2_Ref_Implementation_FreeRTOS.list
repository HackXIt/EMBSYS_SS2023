
Assign2_Ref_Implementation_FreeRTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000230  08008550  08008550  00018550  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008780  08008780  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08008780  08008780  00018780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008788  08008788  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008788  08008788  00018788  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800878c  0800878c  0001878c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08008790  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00008978  20000074  08008804  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200089ec  08008804  000289ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f039  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004337  00000000  00000000  0003f0dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000018b8  00000000  00000000  00043418  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016f0  00000000  00000000  00044cd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025548  00000000  00000000  000463c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001d288  00000000  00000000  0006b908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7a96  00000000  00000000  00088b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00160626  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007110  00000000  00000000  00160678  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008538 	.word	0x08008538

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08008538 	.word	0x08008538

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of consumerTask */
  consumerTaskHandle = osThreadNew(ConsumerTask, NULL, &consumerTask_attributes);
 8000588:	4a08      	ldr	r2, [pc, #32]	; (80005ac <MX_FREERTOS_Init+0x28>)
 800058a:	2100      	movs	r1, #0
 800058c:	4808      	ldr	r0, [pc, #32]	; (80005b0 <MX_FREERTOS_Init+0x2c>)
 800058e:	f003 fd03 	bl	8003f98 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a07      	ldr	r2, [pc, #28]	; (80005b4 <MX_FREERTOS_Init+0x30>)
 8000596:	6013      	str	r3, [r2, #0]

  /* creation of InitTask */
  InitTaskHandle = osThreadNew(StartTasks, NULL, &InitTask_attributes);
 8000598:	4a07      	ldr	r2, [pc, #28]	; (80005b8 <MX_FREERTOS_Init+0x34>)
 800059a:	2100      	movs	r1, #0
 800059c:	4807      	ldr	r0, [pc, #28]	; (80005bc <MX_FREERTOS_Init+0x38>)
 800059e:	f003 fcfb 	bl	8003f98 <osThreadNew>
 80005a2:	4603      	mov	r3, r0
 80005a4:	4a06      	ldr	r2, [pc, #24]	; (80005c0 <MX_FREERTOS_Init+0x3c>)
 80005a6:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 80005a8:	bf00      	nop
 80005aa:	bd80      	pop	{r7, pc}
 80005ac:	080085a8 	.word	0x080085a8
 80005b0:	08000799 	.word	0x08000799
 80005b4:	20000090 	.word	0x20000090
 80005b8:	080085cc 	.word	0x080085cc
 80005bc:	08000751 	.word	0x08000751
 80005c0:	20000094 	.word	0x20000094

080005c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005c4:	b580      	push	{r7, lr}
 80005c6:	b088      	sub	sp, #32
 80005c8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ca:	f107 030c 	add.w	r3, r7, #12
 80005ce:	2200      	movs	r2, #0
 80005d0:	601a      	str	r2, [r3, #0]
 80005d2:	605a      	str	r2, [r3, #4]
 80005d4:	609a      	str	r2, [r3, #8]
 80005d6:	60da      	str	r2, [r3, #12]
 80005d8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005da:	4b1d      	ldr	r3, [pc, #116]	; (8000650 <MX_GPIO_Init+0x8c>)
 80005dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005de:	4a1c      	ldr	r2, [pc, #112]	; (8000650 <MX_GPIO_Init+0x8c>)
 80005e0:	f043 0304 	orr.w	r3, r3, #4
 80005e4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e6:	4b1a      	ldr	r3, [pc, #104]	; (8000650 <MX_GPIO_Init+0x8c>)
 80005e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ea:	f003 0304 	and.w	r3, r3, #4
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005f2:	4b17      	ldr	r3, [pc, #92]	; (8000650 <MX_GPIO_Init+0x8c>)
 80005f4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f6:	4a16      	ldr	r2, [pc, #88]	; (8000650 <MX_GPIO_Init+0x8c>)
 80005f8:	f043 0301 	orr.w	r3, r3, #1
 80005fc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fe:	4b14      	ldr	r3, [pc, #80]	; (8000650 <MX_GPIO_Init+0x8c>)
 8000600:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000602:	f003 0301 	and.w	r3, r3, #1
 8000606:	607b      	str	r3, [r7, #4]
 8000608:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800060a:	4b11      	ldr	r3, [pc, #68]	; (8000650 <MX_GPIO_Init+0x8c>)
 800060c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800060e:	4a10      	ldr	r2, [pc, #64]	; (8000650 <MX_GPIO_Init+0x8c>)
 8000610:	f043 0302 	orr.w	r3, r3, #2
 8000614:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000616:	4b0e      	ldr	r3, [pc, #56]	; (8000650 <MX_GPIO_Init+0x8c>)
 8000618:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800061a:	f003 0302 	and.w	r3, r3, #2
 800061e:	603b      	str	r3, [r7, #0]
 8000620:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000622:	2200      	movs	r2, #0
 8000624:	2108      	movs	r1, #8
 8000626:	480b      	ldr	r0, [pc, #44]	; (8000654 <MX_GPIO_Init+0x90>)
 8000628:	f000 ff6e 	bl	8001508 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 800062c:	2308      	movs	r3, #8
 800062e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000630:	2301      	movs	r3, #1
 8000632:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000634:	2300      	movs	r3, #0
 8000636:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000638:	2300      	movs	r3, #0
 800063a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 800063c:	f107 030c 	add.w	r3, r7, #12
 8000640:	4619      	mov	r1, r3
 8000642:	4804      	ldr	r0, [pc, #16]	; (8000654 <MX_GPIO_Init+0x90>)
 8000644:	f000 fdf6 	bl	8001234 <HAL_GPIO_Init>

}
 8000648:	bf00      	nop
 800064a:	3720      	adds	r7, #32
 800064c:	46bd      	mov	sp, r7
 800064e:	bd80      	pop	{r7, pc}
 8000650:	40021000 	.word	0x40021000
 8000654:	48000400 	.word	0x48000400

08000658 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000658:	b580      	push	{r7, lr}
 800065a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800065c:	f000 fc4f 	bl	8000efe <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000660:	f000 f80b 	bl	800067a <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000664:	f7ff ffae 	bl	80005c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000668:	f000 fb7e 	bl	8000d68 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 800066c:	f003 fc4a 	bl	8003f04 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000670:	f7ff ff88 	bl	8000584 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000674:	f003 fc6a 	bl	8003f4c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000678:	e7fe      	b.n	8000678 <main+0x20>

0800067a <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067a:	b580      	push	{r7, lr}
 800067c:	b096      	sub	sp, #88	; 0x58
 800067e:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000680:	f107 0314 	add.w	r3, r7, #20
 8000684:	2244      	movs	r2, #68	; 0x44
 8000686:	2100      	movs	r1, #0
 8000688:	4618      	mov	r0, r3
 800068a:	f006 fda8 	bl	80071de <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800068e:	463b      	mov	r3, r7
 8000690:	2200      	movs	r2, #0
 8000692:	601a      	str	r2, [r3, #0]
 8000694:	605a      	str	r2, [r3, #4]
 8000696:	609a      	str	r2, [r3, #8]
 8000698:	60da      	str	r2, [r3, #12]
 800069a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800069c:	f44f 7000 	mov.w	r0, #512	; 0x200
 80006a0:	f000 ff58 	bl	8001554 <HAL_PWREx_ControlVoltageScaling>
 80006a4:	4603      	mov	r3, r0
 80006a6:	2b00      	cmp	r3, #0
 80006a8:	d001      	beq.n	80006ae <SystemClock_Config+0x34>
  {
    Error_Handler();
 80006aa:	f000 f84b 	bl	8000744 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80006ae:	2310      	movs	r3, #16
 80006b0:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b2:	2301      	movs	r3, #1
 80006b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b6:	2300      	movs	r3, #0
 80006b8:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006ba:	2360      	movs	r3, #96	; 0x60
 80006bc:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006be:	2302      	movs	r3, #2
 80006c0:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c2:	2301      	movs	r3, #1
 80006c4:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006ca:	2310      	movs	r3, #16
 80006cc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006ce:	2307      	movs	r3, #7
 80006d0:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d2:	2302      	movs	r3, #2
 80006d4:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d6:	2302      	movs	r3, #2
 80006d8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006da:	f107 0314 	add.w	r3, r7, #20
 80006de:	4618      	mov	r0, r3
 80006e0:	f000 ff8e 	bl	8001600 <HAL_RCC_OscConfig>
 80006e4:	4603      	mov	r3, r0
 80006e6:	2b00      	cmp	r3, #0
 80006e8:	d001      	beq.n	80006ee <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006ea:	f000 f82b 	bl	8000744 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ee:	230f      	movs	r3, #15
 80006f0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f2:	2303      	movs	r3, #3
 80006f4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f6:	2300      	movs	r3, #0
 80006f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006fa:	2300      	movs	r3, #0
 80006fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fe:	2300      	movs	r3, #0
 8000700:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000702:	463b      	mov	r3, r7
 8000704:	2101      	movs	r1, #1
 8000706:	4618      	mov	r0, r3
 8000708:	f001 fb8e 	bl	8001e28 <HAL_RCC_ClockConfig>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d001      	beq.n	8000716 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 8000712:	f000 f817 	bl	8000744 <Error_Handler>
  }
}
 8000716:	bf00      	nop
 8000718:	3758      	adds	r7, #88	; 0x58
 800071a:	46bd      	mov	sp, r7
 800071c:	bd80      	pop	{r7, pc}
	...

08000720 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000720:	b580      	push	{r7, lr}
 8000722:	b082      	sub	sp, #8
 8000724:	af00      	add	r7, sp, #0
 8000726:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	681b      	ldr	r3, [r3, #0]
 800072c:	4a04      	ldr	r2, [pc, #16]	; (8000740 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800072e:	4293      	cmp	r3, r2
 8000730:	d101      	bne.n	8000736 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000732:	f000 fbfd 	bl	8000f30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	40001000 	.word	0x40001000

08000744 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000744:	b480      	push	{r7}
 8000746:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000748:	b672      	cpsid	i
}
 800074a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800074c:	e7fe      	b.n	800074c <Error_Handler+0x8>
	...

08000750 <StartTasks>:
 *      Author: rini
 */

#include "myTasks.h"

void StartTasks(void *argument) {
 8000750:	b580      	push	{r7, lr}
 8000752:	b086      	sub	sp, #24
 8000754:	af02      	add	r7, sp, #8
 8000756:	6078      	str	r0, [r7, #4]
	Ringbuffer_Init();
 8000758:	f000 f94a 	bl	80009f0 <Ringbuffer_Init>
	for(uint8_t i = 0; i < NUM_PRODS; i++) {
 800075c:	2300      	movs	r3, #0
 800075e:	73fb      	strb	r3, [r7, #15]
 8000760:	e00c      	b.n	800077c <StartTasks+0x2c>
		//osDelay(2000);
		xTaskCreate(ProducerTask, "producerTask", 64, NULL, 1, NULL);
 8000762:	2300      	movs	r3, #0
 8000764:	9301      	str	r3, [sp, #4]
 8000766:	2301      	movs	r3, #1
 8000768:	9300      	str	r3, [sp, #0]
 800076a:	2300      	movs	r3, #0
 800076c:	2240      	movs	r2, #64	; 0x40
 800076e:	4908      	ldr	r1, [pc, #32]	; (8000790 <StartTasks+0x40>)
 8000770:	4808      	ldr	r0, [pc, #32]	; (8000794 <StartTasks+0x44>)
 8000772:	f004 fc64 	bl	800503e <xTaskCreate>
	for(uint8_t i = 0; i < NUM_PRODS; i++) {
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	3301      	adds	r3, #1
 800077a:	73fb      	strb	r3, [r7, #15]
 800077c:	7bfb      	ldrb	r3, [r7, #15]
 800077e:	2b01      	cmp	r3, #1
 8000780:	d9ef      	bls.n	8000762 <StartTasks+0x12>
	}
	vTaskDelete(NULL);
 8000782:	2000      	movs	r0, #0
 8000784:	f004 fdb6 	bl	80052f4 <vTaskDelete>
}
 8000788:	bf00      	nop
 800078a:	3710      	adds	r7, #16
 800078c:	46bd      	mov	sp, r7
 800078e:	bd80      	pop	{r7, pc}
 8000790:	0800856c 	.word	0x0800856c
 8000794:	08000805 	.word	0x08000805

08000798 <ConsumerTask>:

#define NO_RETARGET

void ConsumerTask(void *argument) {
 8000798:	b580      	push	{r7, lr}
 800079a:	b092      	sub	sp, #72	; 0x48
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]
	rb_elem_t tmpElement = {
 80007a0:	2300      	movs	r3, #0
 80007a2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80007a4:	2300      	movs	r3, #0
 80007a6:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
			.prod_id = NULL,
			.prod_value = 0
	};
	for(;;) {
		if(Ringbuffer_Get(&tmpElement)) {
 80007aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80007ae:	4618      	mov	r0, r3
 80007b0:	f000 f8d2 	bl	8000958 <Ringbuffer_Get>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d015      	beq.n	80007e6 <ConsumerTask+0x4e>
#ifndef NO_RETARGET
			printf("Producer %p => %u\r\n", tmpElement.prod_id, tmpElement.prod_value);
#endif
#ifdef NO_RETARGET
			char buffer[50];
			sprintf(buffer, "Producer %p => %u\r\n", tmpElement.prod_id, tmpElement.prod_value);
 80007ba:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80007bc:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80007c0:	f107 0008 	add.w	r0, r7, #8
 80007c4:	490d      	ldr	r1, [pc, #52]	; (80007fc <ConsumerTask+0x64>)
 80007c6:	f006 fe8d 	bl	80074e4 <siprintf>
			HAL_UART_Transmit(&huart2, (uint8_t*)buffer, strlen(buffer), 10000);
 80007ca:	f107 0308 	add.w	r3, r7, #8
 80007ce:	4618      	mov	r0, r3
 80007d0:	f7ff fcfe 	bl	80001d0 <strlen>
 80007d4:	4603      	mov	r3, r0
 80007d6:	b29a      	uxth	r2, r3
 80007d8:	f107 0108 	add.w	r1, r7, #8
 80007dc:	f242 7310 	movw	r3, #10000	; 0x2710
 80007e0:	4807      	ldr	r0, [pc, #28]	; (8000800 <ConsumerTask+0x68>)
 80007e2:	f002 fb2d 	bl	8002e40 <HAL_UART_Transmit>
#endif
		}
		//vTaskDelay(2000);
		//osDelay(2000);
		for(uint32_t i = 0; i < 2000; i++) {
 80007e6:	2300      	movs	r3, #0
 80007e8:	647b      	str	r3, [r7, #68]	; 0x44
 80007ea:	e002      	b.n	80007f2 <ConsumerTask+0x5a>
 80007ec:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007ee:	3301      	adds	r3, #1
 80007f0:	647b      	str	r3, [r7, #68]	; 0x44
 80007f2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80007f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80007f8:	d3f8      	bcc.n	80007ec <ConsumerTask+0x54>
		if(Ringbuffer_Get(&tmpElement)) {
 80007fa:	e7d6      	b.n	80007aa <ConsumerTask+0x12>
 80007fc:	0800857c 	.word	0x0800857c
 8000800:	20000144 	.word	0x20000144

08000804 <ProducerTask>:

		}
	}
}

void ProducerTask(void *argument) {
 8000804:	b580      	push	{r7, lr}
 8000806:	b084      	sub	sp, #16
 8000808:	af00      	add	r7, sp, #0
 800080a:	6078      	str	r0, [r7, #4]
	srand(xTaskGetTickCount());
 800080c:	f004 ff00 	bl	8005610 <xTaskGetTickCount>
 8000810:	4603      	mov	r3, r0
 8000812:	4618      	mov	r0, r3
 8000814:	f006 fd80 	bl	8007318 <srand>
	rb_elem_t tmpElement = {
			.prod_id = xTaskGetCurrentTaskHandle(),
 8000818:	f005 fa3a 	bl	8005c90 <xTaskGetCurrentTaskHandle>
 800081c:	4603      	mov	r3, r0
	rb_elem_t tmpElement = {
 800081e:	60bb      	str	r3, [r7, #8]
			.prod_value = rand() % 0xFF
 8000820:	f006 fda8 	bl	8007374 <rand>
 8000824:	4602      	mov	r2, r0
 8000826:	4b0d      	ldr	r3, [pc, #52]	; (800085c <ProducerTask+0x58>)
 8000828:	fb83 1302 	smull	r1, r3, r3, r2
 800082c:	4413      	add	r3, r2
 800082e:	11d9      	asrs	r1, r3, #7
 8000830:	17d3      	asrs	r3, r2, #31
 8000832:	1ac9      	subs	r1, r1, r3
 8000834:	460b      	mov	r3, r1
 8000836:	021b      	lsls	r3, r3, #8
 8000838:	1a5b      	subs	r3, r3, r1
 800083a:	1ad1      	subs	r1, r2, r3
	rb_elem_t tmpElement = {
 800083c:	b2cb      	uxtb	r3, r1
 800083e:	733b      	strb	r3, [r7, #12]
	};
	for(;;) {
		if(Ringbuffer_Put(tmpElement)) {
 8000840:	f107 0308 	add.w	r3, r7, #8
 8000844:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000848:	f000 f838 	bl	80008bc <Ringbuffer_Put>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f6      	beq.n	8000840 <ProducerTask+0x3c>
			vTaskDelete(NULL);
 8000852:	2000      	movs	r0, #0
 8000854:	f004 fd4e 	bl	80052f4 <vTaskDelete>
		if(Ringbuffer_Put(tmpElement)) {
 8000858:	e7f2      	b.n	8000840 <ProducerTask+0x3c>
 800085a:	bf00      	nop
 800085c:	80808081 	.word	0x80808081

08000860 <_write>:
  * @param 	file 	...	file descriptor
  * @param	ptr		... pointer to the data buffer.
  * @param	len 	...	length of the buffer in bytes.
  * @retval (int)	... Successfully transmitted bytes.
  */
int _write(int file, char *ptr, int len){
 8000860:	b580      	push	{r7, lr}
 8000862:	b084      	sub	sp, #16
 8000864:	af00      	add	r7, sp, #0
 8000866:	60f8      	str	r0, [r7, #12]
 8000868:	60b9      	str	r1, [r7, #8]
 800086a:	607a      	str	r2, [r7, #4]
	while(len--){
 800086c:	e006      	b.n	800087c <_write+0x1c>
		putchar(*ptr++);
 800086e:	68bb      	ldr	r3, [r7, #8]
 8000870:	1c5a      	adds	r2, r3, #1
 8000872:	60ba      	str	r2, [r7, #8]
 8000874:	781b      	ldrb	r3, [r3, #0]
 8000876:	4618      	mov	r0, r3
 8000878:	f000 f80a 	bl	8000890 <putchar>
	while(len--){
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	1e5a      	subs	r2, r3, #1
 8000880:	607a      	str	r2, [r7, #4]
 8000882:	2b00      	cmp	r3, #0
 8000884:	d1f3      	bne.n	800086e <_write+0xe>
	}
	return len;
 8000886:	687b      	ldr	r3, [r7, #4]
}
 8000888:	4618      	mov	r0, r3
 800088a:	3710      	adds	r7, #16
 800088c:	46bd      	mov	sp, r7
 800088e:	bd80      	pop	{r7, pc}

08000890 <putchar>:
/**
 *
 * @param ch		... Character to be transmitted.
 * @return	(int) 	... Returns the character.
 */
int	putchar (int ch){
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0
 8000896:	6078      	str	r0, [r7, #4]
	char charTemp = (char) ch;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	b2db      	uxtb	r3, r3
 800089c:	73fb      	strb	r3, [r7, #15]
	 * Either that, or both '\r' and '\n' need to be provided.
	 */
//	if (charTemp == '\n'){
//		putchar('\r');
//	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&charTemp, 1, -1);
 800089e:	f107 010f 	add.w	r1, r7, #15
 80008a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008a6:	2201      	movs	r2, #1
 80008a8:	4803      	ldr	r0, [pc, #12]	; (80008b8 <putchar+0x28>)
 80008aa:	f002 fac9 	bl	8002e40 <HAL_UART_Transmit>
	return ch;
 80008ae:	687b      	ldr	r3, [r7, #4]
}
 80008b0:	4618      	mov	r0, r3
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000144 	.word	0x20000144

080008bc <Ringbuffer_Put>:

#include "ringbuffer.h"

static ringbuffer_t ringbuffer;

bool Ringbuffer_Put(rb_elem_t elem) {
 80008bc:	b580      	push	{r7, lr}
 80008be:	b084      	sub	sp, #16
 80008c0:	af00      	add	r7, sp, #0
 80008c2:	463b      	mov	r3, r7
 80008c4:	e883 0003 	stmia.w	r3, {r0, r1}
	BaseType_t ret;
	ret = xSemaphoreTake(ringbuffer.sem_write, portMAX_DELAY);
 80008c8:	4b21      	ldr	r3, [pc, #132]	; (8000950 <Ringbuffer_Put+0x94>)
 80008ca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80008cc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80008d0:	4618      	mov	r0, r3
 80008d2:	f004 f8c5 	bl	8004a60 <xQueueSemaphoreTake>
 80008d6:	60f8      	str	r0, [r7, #12]
	if(ret != pdTRUE) {
 80008d8:	68fb      	ldr	r3, [r7, #12]
 80008da:	2b01      	cmp	r3, #1
 80008dc:	d001      	beq.n	80008e2 <Ringbuffer_Put+0x26>
		return false;
 80008de:	2300      	movs	r3, #0
 80008e0:	e031      	b.n	8000946 <Ringbuffer_Put+0x8a>
	}
	// taskENTER_CRITICAL();
	ringbuffer.elements[ringbuffer.w_index].prod_id = elem.prod_id;
 80008e2:	4b1b      	ldr	r3, [pc, #108]	; (8000950 <Ringbuffer_Put+0x94>)
 80008e4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80008e8:	4619      	mov	r1, r3
 80008ea:	683b      	ldr	r3, [r7, #0]
 80008ec:	4a18      	ldr	r2, [pc, #96]	; (8000950 <Ringbuffer_Put+0x94>)
 80008ee:	f842 3031 	str.w	r3, [r2, r1, lsl #3]
	ringbuffer.elements[ringbuffer.w_index].prod_value = elem.prod_value;
 80008f2:	4b17      	ldr	r3, [pc, #92]	; (8000950 <Ringbuffer_Put+0x94>)
 80008f4:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 80008f8:	7939      	ldrb	r1, [r7, #4]
 80008fa:	4a15      	ldr	r2, [pc, #84]	; (8000950 <Ringbuffer_Put+0x94>)
 80008fc:	00db      	lsls	r3, r3, #3
 80008fe:	4413      	add	r3, r2
 8000900:	460a      	mov	r2, r1
 8000902:	711a      	strb	r2, [r3, #4]
	ringbuffer.w_index = (ringbuffer.w_index + 1) % RINGBUFFER_SIZE;
 8000904:	4b12      	ldr	r3, [pc, #72]	; (8000950 <Ringbuffer_Put+0x94>)
 8000906:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800090a:	1c5a      	adds	r2, r3, #1
 800090c:	4b11      	ldr	r3, [pc, #68]	; (8000954 <Ringbuffer_Put+0x98>)
 800090e:	fb83 1302 	smull	r1, r3, r3, r2
 8000912:	1099      	asrs	r1, r3, #2
 8000914:	17d3      	asrs	r3, r2, #31
 8000916:	1ac9      	subs	r1, r1, r3
 8000918:	460b      	mov	r3, r1
 800091a:	009b      	lsls	r3, r3, #2
 800091c:	440b      	add	r3, r1
 800091e:	005b      	lsls	r3, r3, #1
 8000920:	1ad1      	subs	r1, r2, r3
 8000922:	b2ca      	uxtb	r2, r1
 8000924:	4b0a      	ldr	r3, [pc, #40]	; (8000950 <Ringbuffer_Put+0x94>)
 8000926:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	// taskEXIT_CRITICAL();
	ret = xSemaphoreGive(ringbuffer.sem_read);
 800092a:	4b09      	ldr	r3, [pc, #36]	; (8000950 <Ringbuffer_Put+0x94>)
 800092c:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800092e:	2300      	movs	r3, #0
 8000930:	2200      	movs	r2, #0
 8000932:	2100      	movs	r1, #0
 8000934:	f003 fe1a 	bl	800456c <xQueueGenericSend>
 8000938:	60f8      	str	r0, [r7, #12]
	if(ret != pdTRUE) {
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	2b01      	cmp	r3, #1
 800093e:	d001      	beq.n	8000944 <Ringbuffer_Put+0x88>
		return false;
 8000940:	2300      	movs	r3, #0
 8000942:	e000      	b.n	8000946 <Ringbuffer_Put+0x8a>
	}
	return true;
 8000944:	2301      	movs	r3, #1
}
 8000946:	4618      	mov	r0, r3
 8000948:	3710      	adds	r7, #16
 800094a:	46bd      	mov	sp, r7
 800094c:	bd80      	pop	{r7, pc}
 800094e:	bf00      	nop
 8000950:	20000098 	.word	0x20000098
 8000954:	66666667 	.word	0x66666667

08000958 <Ringbuffer_Get>:

bool Ringbuffer_Get(rb_elem_t *elem) {
 8000958:	b580      	push	{r7, lr}
 800095a:	b084      	sub	sp, #16
 800095c:	af00      	add	r7, sp, #0
 800095e:	6078      	str	r0, [r7, #4]
	BaseType_t ret;
	ret = xSemaphoreTake(ringbuffer.sem_read, portMAX_DELAY);
 8000960:	4b21      	ldr	r3, [pc, #132]	; (80009e8 <Ringbuffer_Get+0x90>)
 8000962:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000964:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000968:	4618      	mov	r0, r3
 800096a:	f004 f879 	bl	8004a60 <xQueueSemaphoreTake>
 800096e:	60f8      	str	r0, [r7, #12]
	if(ret != pdTRUE) {
 8000970:	68fb      	ldr	r3, [r7, #12]
 8000972:	2b01      	cmp	r3, #1
 8000974:	d001      	beq.n	800097a <Ringbuffer_Get+0x22>
		return false;
 8000976:	2300      	movs	r3, #0
 8000978:	e032      	b.n	80009e0 <Ringbuffer_Get+0x88>
	}
	// taskENTER_CRITICAL();
	elem->prod_id = ringbuffer.elements[ringbuffer.r_index].prod_id;
 800097a:	4b1b      	ldr	r3, [pc, #108]	; (80009e8 <Ringbuffer_Get+0x90>)
 800097c:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000980:	461a      	mov	r2, r3
 8000982:	4b19      	ldr	r3, [pc, #100]	; (80009e8 <Ringbuffer_Get+0x90>)
 8000984:	f853 2032 	ldr.w	r2, [r3, r2, lsl #3]
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	601a      	str	r2, [r3, #0]
	elem->prod_value = ringbuffer.elements[ringbuffer.r_index].prod_value;
 800098c:	4b16      	ldr	r3, [pc, #88]	; (80009e8 <Ringbuffer_Get+0x90>)
 800098e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8000992:	4a15      	ldr	r2, [pc, #84]	; (80009e8 <Ringbuffer_Get+0x90>)
 8000994:	00db      	lsls	r3, r3, #3
 8000996:	4413      	add	r3, r2
 8000998:	791a      	ldrb	r2, [r3, #4]
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	711a      	strb	r2, [r3, #4]
	ringbuffer.r_index = (ringbuffer.r_index + 1) % RINGBUFFER_SIZE;
 800099e:	4b12      	ldr	r3, [pc, #72]	; (80009e8 <Ringbuffer_Get+0x90>)
 80009a0:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 80009a4:	1c5a      	adds	r2, r3, #1
 80009a6:	4b11      	ldr	r3, [pc, #68]	; (80009ec <Ringbuffer_Get+0x94>)
 80009a8:	fb83 1302 	smull	r1, r3, r3, r2
 80009ac:	1099      	asrs	r1, r3, #2
 80009ae:	17d3      	asrs	r3, r2, #31
 80009b0:	1ac9      	subs	r1, r1, r3
 80009b2:	460b      	mov	r3, r1
 80009b4:	009b      	lsls	r3, r3, #2
 80009b6:	440b      	add	r3, r1
 80009b8:	005b      	lsls	r3, r3, #1
 80009ba:	1ad1      	subs	r1, r2, r3
 80009bc:	b2ca      	uxtb	r2, r1
 80009be:	4b0a      	ldr	r3, [pc, #40]	; (80009e8 <Ringbuffer_Get+0x90>)
 80009c0:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	// taskEXIT_CRITICAL();
	ret = xSemaphoreGive(ringbuffer.sem_write);
 80009c4:	4b08      	ldr	r3, [pc, #32]	; (80009e8 <Ringbuffer_Get+0x90>)
 80009c6:	6d58      	ldr	r0, [r3, #84]	; 0x54
 80009c8:	2300      	movs	r3, #0
 80009ca:	2200      	movs	r2, #0
 80009cc:	2100      	movs	r1, #0
 80009ce:	f003 fdcd 	bl	800456c <xQueueGenericSend>
 80009d2:	60f8      	str	r0, [r7, #12]
	if(ret != pdTRUE) {
 80009d4:	68fb      	ldr	r3, [r7, #12]
 80009d6:	2b01      	cmp	r3, #1
 80009d8:	d001      	beq.n	80009de <Ringbuffer_Get+0x86>
		return false;
 80009da:	2300      	movs	r3, #0
 80009dc:	e000      	b.n	80009e0 <Ringbuffer_Get+0x88>
	}
	return true;
 80009de:	2301      	movs	r3, #1
}
 80009e0:	4618      	mov	r0, r3
 80009e2:	3710      	adds	r7, #16
 80009e4:	46bd      	mov	sp, r7
 80009e6:	bd80      	pop	{r7, pc}
 80009e8:	20000098 	.word	0x20000098
 80009ec:	66666667 	.word	0x66666667

080009f0 <Ringbuffer_Init>:

void Ringbuffer_Init() {
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
	// Annahme das alles funktioniert / Keine Fehlerbehandlung
	ringbuffer.sem_read = xSemaphoreCreateCounting(RINGBUFFER_SIZE, 0);
 80009f6:	2100      	movs	r1, #0
 80009f8:	200a      	movs	r0, #10
 80009fa:	f003 fd84 	bl	8004506 <xQueueCreateCountingSemaphore>
 80009fe:	4603      	mov	r3, r0
 8000a00:	4a14      	ldr	r2, [pc, #80]	; (8000a54 <Ringbuffer_Init+0x64>)
 8000a02:	6513      	str	r3, [r2, #80]	; 0x50
			//osSemaphoreNew(RINGBUFFER_SIZE, 0, NULL);
	ringbuffer.sem_write = xSemaphoreCreateCounting(RINGBUFFER_SIZE, RINGBUFFER_SIZE);
 8000a04:	210a      	movs	r1, #10
 8000a06:	200a      	movs	r0, #10
 8000a08:	f003 fd7d 	bl	8004506 <xQueueCreateCountingSemaphore>
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	4a11      	ldr	r2, [pc, #68]	; (8000a54 <Ringbuffer_Init+0x64>)
 8000a10:	6553      	str	r3, [r2, #84]	; 0x54
	ringbuffer.r_index = 0;
 8000a12:	4b10      	ldr	r3, [pc, #64]	; (8000a54 <Ringbuffer_Init+0x64>)
 8000a14:	2200      	movs	r2, #0
 8000a16:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
	ringbuffer.w_index = 0;
 8000a1a:	4b0e      	ldr	r3, [pc, #56]	; (8000a54 <Ringbuffer_Init+0x64>)
 8000a1c:	2200      	movs	r2, #0
 8000a1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
	for(uint8_t i = 0; i < RINGBUFFER_SIZE; i++) {
 8000a22:	2300      	movs	r3, #0
 8000a24:	71fb      	strb	r3, [r7, #7]
 8000a26:	e00d      	b.n	8000a44 <Ringbuffer_Init+0x54>
		ringbuffer.elements[i].prod_id = NULL;
 8000a28:	79fb      	ldrb	r3, [r7, #7]
 8000a2a:	4a0a      	ldr	r2, [pc, #40]	; (8000a54 <Ringbuffer_Init+0x64>)
 8000a2c:	2100      	movs	r1, #0
 8000a2e:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
		ringbuffer.elements[i].prod_value = 0;
 8000a32:	79fb      	ldrb	r3, [r7, #7]
 8000a34:	4a07      	ldr	r2, [pc, #28]	; (8000a54 <Ringbuffer_Init+0x64>)
 8000a36:	00db      	lsls	r3, r3, #3
 8000a38:	4413      	add	r3, r2
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	711a      	strb	r2, [r3, #4]
	for(uint8_t i = 0; i < RINGBUFFER_SIZE; i++) {
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	3301      	adds	r3, #1
 8000a42:	71fb      	strb	r3, [r7, #7]
 8000a44:	79fb      	ldrb	r3, [r7, #7]
 8000a46:	2b09      	cmp	r3, #9
 8000a48:	d9ee      	bls.n	8000a28 <Ringbuffer_Init+0x38>
	}
}
 8000a4a:	bf00      	nop
 8000a4c:	bf00      	nop
 8000a4e:	3708      	adds	r7, #8
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	20000098 	.word	0x20000098

08000a58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a58:	b580      	push	{r7, lr}
 8000a5a:	b082      	sub	sp, #8
 8000a5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a5e:	4b11      	ldr	r3, [pc, #68]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a62:	4a10      	ldr	r2, [pc, #64]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a64:	f043 0301 	orr.w	r3, r3, #1
 8000a68:	6613      	str	r3, [r2, #96]	; 0x60
 8000a6a:	4b0e      	ldr	r3, [pc, #56]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000a6e:	f003 0301 	and.w	r3, r3, #1
 8000a72:	607b      	str	r3, [r7, #4]
 8000a74:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a76:	4b0b      	ldr	r3, [pc, #44]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a7a:	4a0a      	ldr	r2, [pc, #40]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a80:	6593      	str	r3, [r2, #88]	; 0x58
 8000a82:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <HAL_MspInit+0x4c>)
 8000a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a8a:	603b      	str	r3, [r7, #0]
 8000a8c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000a8e:	2200      	movs	r2, #0
 8000a90:	210f      	movs	r1, #15
 8000a92:	f06f 0001 	mvn.w	r0, #1
 8000a96:	f000 fb23 	bl	80010e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a9a:	bf00      	nop
 8000a9c:	3708      	adds	r7, #8
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40021000 	.word	0x40021000

08000aa8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b08e      	sub	sp, #56	; 0x38
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000ab0:	2300      	movs	r3, #0
 8000ab2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000ab6:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <HAL_InitTick+0xe0>)
 8000ab8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000aba:	4a33      	ldr	r2, [pc, #204]	; (8000b88 <HAL_InitTick+0xe0>)
 8000abc:	f043 0310 	orr.w	r3, r3, #16
 8000ac0:	6593      	str	r3, [r2, #88]	; 0x58
 8000ac2:	4b31      	ldr	r3, [pc, #196]	; (8000b88 <HAL_InitTick+0xe0>)
 8000ac4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ac6:	f003 0310 	and.w	r3, r3, #16
 8000aca:	60fb      	str	r3, [r7, #12]
 8000acc:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ace:	f107 0210 	add.w	r2, r7, #16
 8000ad2:	f107 0314 	add.w	r3, r7, #20
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4618      	mov	r0, r3
 8000ada:	f001 fb69 	bl	80021b0 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000ade:	6a3b      	ldr	r3, [r7, #32]
 8000ae0:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000ae2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d103      	bne.n	8000af0 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ae8:	f001 fb36 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8000aec:	6378      	str	r0, [r7, #52]	; 0x34
 8000aee:	e004      	b.n	8000afa <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000af0:	f001 fb32 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8000af4:	4603      	mov	r3, r0
 8000af6:	005b      	lsls	r3, r3, #1
 8000af8:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000afc:	4a23      	ldr	r2, [pc, #140]	; (8000b8c <HAL_InitTick+0xe4>)
 8000afe:	fba2 2303 	umull	r2, r3, r2, r3
 8000b02:	0c9b      	lsrs	r3, r3, #18
 8000b04:	3b01      	subs	r3, #1
 8000b06:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000b08:	4b21      	ldr	r3, [pc, #132]	; (8000b90 <HAL_InitTick+0xe8>)
 8000b0a:	4a22      	ldr	r2, [pc, #136]	; (8000b94 <HAL_InitTick+0xec>)
 8000b0c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <HAL_InitTick+0xe8>)
 8000b10:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000b14:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000b16:	4a1e      	ldr	r2, [pc, #120]	; (8000b90 <HAL_InitTick+0xe8>)
 8000b18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b1a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000b1c:	4b1c      	ldr	r3, [pc, #112]	; (8000b90 <HAL_InitTick+0xe8>)
 8000b1e:	2200      	movs	r2, #0
 8000b20:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b22:	4b1b      	ldr	r3, [pc, #108]	; (8000b90 <HAL_InitTick+0xe8>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_InitTick+0xe8>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000b2e:	4818      	ldr	r0, [pc, #96]	; (8000b90 <HAL_InitTick+0xe8>)
 8000b30:	f001 feb8 	bl	80028a4 <HAL_TIM_Base_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000b3a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d11b      	bne.n	8000b7a <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000b42:	4813      	ldr	r0, [pc, #76]	; (8000b90 <HAL_InitTick+0xe8>)
 8000b44:	f001 ff10 	bl	8002968 <HAL_TIM_Base_Start_IT>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000b4e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	d111      	bne.n	8000b7a <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000b56:	2036      	movs	r0, #54	; 0x36
 8000b58:	f000 fade 	bl	8001118 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b0f      	cmp	r3, #15
 8000b60:	d808      	bhi.n	8000b74 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000b62:	2200      	movs	r2, #0
 8000b64:	6879      	ldr	r1, [r7, #4]
 8000b66:	2036      	movs	r0, #54	; 0x36
 8000b68:	f000 faba 	bl	80010e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b6c:	4a0a      	ldr	r2, [pc, #40]	; (8000b98 <HAL_InitTick+0xf0>)
 8000b6e:	687b      	ldr	r3, [r7, #4]
 8000b70:	6013      	str	r3, [r2, #0]
 8000b72:	e002      	b.n	8000b7a <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000b74:	2301      	movs	r3, #1
 8000b76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000b7a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000b7e:	4618      	mov	r0, r3
 8000b80:	3738      	adds	r7, #56	; 0x38
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	bf00      	nop
 8000b88:	40021000 	.word	0x40021000
 8000b8c:	431bde83 	.word	0x431bde83
 8000b90:	200000f4 	.word	0x200000f4
 8000b94:	40001000 	.word	0x40001000
 8000b98:	20000004 	.word	0x20000004

08000b9c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b9c:	b480      	push	{r7}
 8000b9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ba0:	e7fe      	b.n	8000ba0 <NMI_Handler+0x4>

08000ba2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ba2:	b480      	push	{r7}
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ba6:	e7fe      	b.n	8000ba6 <HardFault_Handler+0x4>

08000ba8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ba8:	b480      	push	{r7}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bac:	e7fe      	b.n	8000bac <MemManage_Handler+0x4>

08000bae <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bae:	b480      	push	{r7}
 8000bb0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bb2:	e7fe      	b.n	8000bb2 <BusFault_Handler+0x4>

08000bb4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bb4:	b480      	push	{r7}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <UsageFault_Handler+0x4>

08000bba <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bba:	b480      	push	{r7}
 8000bbc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	46bd      	mov	sp, r7
 8000bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc6:	4770      	bx	lr

08000bc8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000bcc:	4802      	ldr	r0, [pc, #8]	; (8000bd8 <USART2_IRQHandler+0x10>)
 8000bce:	f002 f9cb 	bl	8002f68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000bd2:	bf00      	nop
 8000bd4:	bd80      	pop	{r7, pc}
 8000bd6:	bf00      	nop
 8000bd8:	20000144 	.word	0x20000144

08000bdc <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000be0:	4802      	ldr	r0, [pc, #8]	; (8000bec <TIM6_DAC_IRQHandler+0x10>)
 8000be2:	f001 ff15 	bl	8002a10 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000be6:	bf00      	nop
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	200000f4 	.word	0x200000f4

08000bf0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
	return 1;
 8000bf4:	2301      	movs	r3, #1
}
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	46bd      	mov	sp, r7
 8000bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bfe:	4770      	bx	lr

08000c00 <_kill>:

int _kill(int pid, int sig)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	b082      	sub	sp, #8
 8000c04:	af00      	add	r7, sp, #0
 8000c06:	6078      	str	r0, [r7, #4]
 8000c08:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8000c0a:	f006 f9b7 	bl	8006f7c <__errno>
 8000c0e:	4603      	mov	r3, r0
 8000c10:	2216      	movs	r2, #22
 8000c12:	601a      	str	r2, [r3, #0]
	return -1;
 8000c14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <_exit>:

void _exit (int status)
{
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8000c28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c2c:	6878      	ldr	r0, [r7, #4]
 8000c2e:	f7ff ffe7 	bl	8000c00 <_kill>
	while (1) {}		/* Make sure we hang here */
 8000c32:	e7fe      	b.n	8000c32 <_exit+0x12>

08000c34 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b086      	sub	sp, #24
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	60f8      	str	r0, [r7, #12]
 8000c3c:	60b9      	str	r1, [r7, #8]
 8000c3e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c40:	2300      	movs	r3, #0
 8000c42:	617b      	str	r3, [r7, #20]
 8000c44:	e00a      	b.n	8000c5c <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000c46:	f3af 8000 	nop.w
 8000c4a:	4601      	mov	r1, r0
 8000c4c:	68bb      	ldr	r3, [r7, #8]
 8000c4e:	1c5a      	adds	r2, r3, #1
 8000c50:	60ba      	str	r2, [r7, #8]
 8000c52:	b2ca      	uxtb	r2, r1
 8000c54:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000c56:	697b      	ldr	r3, [r7, #20]
 8000c58:	3301      	adds	r3, #1
 8000c5a:	617b      	str	r3, [r7, #20]
 8000c5c:	697a      	ldr	r2, [r7, #20]
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	429a      	cmp	r2, r3
 8000c62:	dbf0      	blt.n	8000c46 <_read+0x12>
	}

return len;
 8000c64:	687b      	ldr	r3, [r7, #4]
}
 8000c66:	4618      	mov	r0, r3
 8000c68:	3718      	adds	r7, #24
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	bd80      	pop	{r7, pc}

08000c6e <_close>:
	}
	return len;
}

int _close(int file)
{
 8000c6e:	b480      	push	{r7}
 8000c70:	b083      	sub	sp, #12
 8000c72:	af00      	add	r7, sp, #0
 8000c74:	6078      	str	r0, [r7, #4]
	return -1;
 8000c76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	370c      	adds	r7, #12
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr

08000c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000c86:	b480      	push	{r7}
 8000c88:	b083      	sub	sp, #12
 8000c8a:	af00      	add	r7, sp, #0
 8000c8c:	6078      	str	r0, [r7, #4]
 8000c8e:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000c96:	605a      	str	r2, [r3, #4]
	return 0;
 8000c98:	2300      	movs	r3, #0
}
 8000c9a:	4618      	mov	r0, r3
 8000c9c:	370c      	adds	r7, #12
 8000c9e:	46bd      	mov	sp, r7
 8000ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca4:	4770      	bx	lr

08000ca6 <_isatty>:

int _isatty(int file)
{
 8000ca6:	b480      	push	{r7}
 8000ca8:	b083      	sub	sp, #12
 8000caa:	af00      	add	r7, sp, #0
 8000cac:	6078      	str	r0, [r7, #4]
	return 1;
 8000cae:	2301      	movs	r3, #1
}
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	60f8      	str	r0, [r7, #12]
 8000cc4:	60b9      	str	r1, [r7, #8]
 8000cc6:	607a      	str	r2, [r7, #4]
	return 0;
 8000cc8:	2300      	movs	r3, #0
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	3714      	adds	r7, #20
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr
	...

08000cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b086      	sub	sp, #24
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ce0:	4a14      	ldr	r2, [pc, #80]	; (8000d34 <_sbrk+0x5c>)
 8000ce2:	4b15      	ldr	r3, [pc, #84]	; (8000d38 <_sbrk+0x60>)
 8000ce4:	1ad3      	subs	r3, r2, r3
 8000ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ce8:	697b      	ldr	r3, [r7, #20]
 8000cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000cec:	4b13      	ldr	r3, [pc, #76]	; (8000d3c <_sbrk+0x64>)
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000cf4:	4b11      	ldr	r3, [pc, #68]	; (8000d3c <_sbrk+0x64>)
 8000cf6:	4a12      	ldr	r2, [pc, #72]	; (8000d40 <_sbrk+0x68>)
 8000cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000cfa:	4b10      	ldr	r3, [pc, #64]	; (8000d3c <_sbrk+0x64>)
 8000cfc:	681a      	ldr	r2, [r3, #0]
 8000cfe:	687b      	ldr	r3, [r7, #4]
 8000d00:	4413      	add	r3, r2
 8000d02:	693a      	ldr	r2, [r7, #16]
 8000d04:	429a      	cmp	r2, r3
 8000d06:	d207      	bcs.n	8000d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000d08:	f006 f938 	bl	8006f7c <__errno>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	220c      	movs	r2, #12
 8000d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000d12:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000d16:	e009      	b.n	8000d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000d18:	4b08      	ldr	r3, [pc, #32]	; (8000d3c <_sbrk+0x64>)
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000d1e:	4b07      	ldr	r3, [pc, #28]	; (8000d3c <_sbrk+0x64>)
 8000d20:	681a      	ldr	r2, [r3, #0]
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	4413      	add	r3, r2
 8000d26:	4a05      	ldr	r2, [pc, #20]	; (8000d3c <_sbrk+0x64>)
 8000d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000d2a:	68fb      	ldr	r3, [r7, #12]
}
 8000d2c:	4618      	mov	r0, r3
 8000d2e:	3718      	adds	r7, #24
 8000d30:	46bd      	mov	sp, r7
 8000d32:	bd80      	pop	{r7, pc}
 8000d34:	20010000 	.word	0x20010000
 8000d38:	00000400 	.word	0x00000400
 8000d3c:	20000140 	.word	0x20000140
 8000d40:	200089f0 	.word	0x200089f0

08000d44 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000d48:	4b06      	ldr	r3, [pc, #24]	; (8000d64 <SystemInit+0x20>)
 8000d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d4e:	4a05      	ldr	r2, [pc, #20]	; (8000d64 <SystemInit+0x20>)
 8000d50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000d58:	bf00      	nop
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d60:	4770      	bx	lr
 8000d62:	bf00      	nop
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000d6c:	4b14      	ldr	r3, [pc, #80]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d6e:	4a15      	ldr	r2, [pc, #84]	; (8000dc4 <MX_USART2_UART_Init+0x5c>)
 8000d70:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000d72:	4b13      	ldr	r3, [pc, #76]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d74:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000d78:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000d7a:	4b11      	ldr	r3, [pc, #68]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000d80:	4b0f      	ldr	r3, [pc, #60]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d82:	2200      	movs	r2, #0
 8000d84:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000d86:	4b0e      	ldr	r3, [pc, #56]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d88:	2200      	movs	r2, #0
 8000d8a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000d8c:	4b0c      	ldr	r3, [pc, #48]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d8e:	220c      	movs	r2, #12
 8000d90:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000d92:	4b0b      	ldr	r3, [pc, #44]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d94:	2200      	movs	r2, #0
 8000d96:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000d98:	4b09      	ldr	r3, [pc, #36]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000d9e:	4b08      	ldr	r3, [pc, #32]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000da0:	2200      	movs	r2, #0
 8000da2:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000da4:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000da6:	2200      	movs	r2, #0
 8000da8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000daa:	4805      	ldr	r0, [pc, #20]	; (8000dc0 <MX_USART2_UART_Init+0x58>)
 8000dac:	f001 fffa 	bl	8002da4 <HAL_UART_Init>
 8000db0:	4603      	mov	r3, r0
 8000db2:	2b00      	cmp	r3, #0
 8000db4:	d001      	beq.n	8000dba <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000db6:	f7ff fcc5 	bl	8000744 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	20000144 	.word	0x20000144
 8000dc4:	40004400 	.word	0x40004400

08000dc8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b09e      	sub	sp, #120	; 0x78
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dd0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	f107 0310 	add.w	r3, r7, #16
 8000de4:	2254      	movs	r2, #84	; 0x54
 8000de6:	2100      	movs	r1, #0
 8000de8:	4618      	mov	r0, r3
 8000dea:	f006 f9f8 	bl	80071de <memset>
  if(uartHandle->Instance==USART2)
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	4a2c      	ldr	r2, [pc, #176]	; (8000ea4 <HAL_UART_MspInit+0xdc>)
 8000df4:	4293      	cmp	r3, r2
 8000df6:	d150      	bne.n	8000e9a <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000df8:	2302      	movs	r3, #2
 8000dfa:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000dfc:	2300      	movs	r3, #0
 8000dfe:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e00:	f107 0310 	add.w	r3, r7, #16
 8000e04:	4618      	mov	r0, r3
 8000e06:	f001 fa65 	bl	80022d4 <HAL_RCCEx_PeriphCLKConfig>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000e10:	f7ff fc98 	bl	8000744 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000e14:	4b24      	ldr	r3, [pc, #144]	; (8000ea8 <HAL_UART_MspInit+0xe0>)
 8000e16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e18:	4a23      	ldr	r2, [pc, #140]	; (8000ea8 <HAL_UART_MspInit+0xe0>)
 8000e1a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e1e:	6593      	str	r3, [r2, #88]	; 0x58
 8000e20:	4b21      	ldr	r3, [pc, #132]	; (8000ea8 <HAL_UART_MspInit+0xe0>)
 8000e22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e24:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e28:	60fb      	str	r3, [r7, #12]
 8000e2a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e2c:	4b1e      	ldr	r3, [pc, #120]	; (8000ea8 <HAL_UART_MspInit+0xe0>)
 8000e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e30:	4a1d      	ldr	r2, [pc, #116]	; (8000ea8 <HAL_UART_MspInit+0xe0>)
 8000e32:	f043 0301 	orr.w	r3, r3, #1
 8000e36:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e38:	4b1b      	ldr	r3, [pc, #108]	; (8000ea8 <HAL_UART_MspInit+0xe0>)
 8000e3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e3c:	f003 0301 	and.w	r3, r3, #1
 8000e40:	60bb      	str	r3, [r7, #8]
 8000e42:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000e44:	2304      	movs	r3, #4
 8000e46:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e48:	2302      	movs	r3, #2
 8000e4a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e50:	2303      	movs	r3, #3
 8000e52:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000e54:	2307      	movs	r3, #7
 8000e56:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000e58:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e5c:	4619      	mov	r1, r3
 8000e5e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e62:	f000 f9e7 	bl	8001234 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000e66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000e6a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e74:	2303      	movs	r3, #3
 8000e76:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000e78:	2303      	movs	r3, #3
 8000e7a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000e7c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000e80:	4619      	mov	r1, r3
 8000e82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000e86:	f000 f9d5 	bl	8001234 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	2105      	movs	r1, #5
 8000e8e:	2026      	movs	r0, #38	; 0x26
 8000e90:	f000 f926 	bl	80010e0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000e94:	2026      	movs	r0, #38	; 0x26
 8000e96:	f000 f93f 	bl	8001118 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000e9a:	bf00      	nop
 8000e9c:	3778      	adds	r7, #120	; 0x78
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40004400 	.word	0x40004400
 8000ea8:	40021000 	.word	0x40021000

08000eac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000eac:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000ee4 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000eb0:	f7ff ff48 	bl	8000d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000eb4:	480c      	ldr	r0, [pc, #48]	; (8000ee8 <LoopForever+0x6>)
  ldr r1, =_edata
 8000eb6:	490d      	ldr	r1, [pc, #52]	; (8000eec <LoopForever+0xa>)
  ldr r2, =_sidata
 8000eb8:	4a0d      	ldr	r2, [pc, #52]	; (8000ef0 <LoopForever+0xe>)
  movs r3, #0
 8000eba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ebc:	e002      	b.n	8000ec4 <LoopCopyDataInit>

08000ebe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ebe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ec0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ec2:	3304      	adds	r3, #4

08000ec4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ec4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000ec6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000ec8:	d3f9      	bcc.n	8000ebe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eca:	4a0a      	ldr	r2, [pc, #40]	; (8000ef4 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000ecc:	4c0a      	ldr	r4, [pc, #40]	; (8000ef8 <LoopForever+0x16>)
  movs r3, #0
 8000ece:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ed0:	e001      	b.n	8000ed6 <LoopFillZerobss>

08000ed2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ed2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ed4:	3204      	adds	r2, #4

08000ed6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ed6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ed8:	d3fb      	bcc.n	8000ed2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000eda:	f006 f94b 	bl	8007174 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000ede:	f7ff fbbb 	bl	8000658 <main>

08000ee2 <LoopForever>:

LoopForever:
    b LoopForever
 8000ee2:	e7fe      	b.n	8000ee2 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000ee4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000ee8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000eec:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000ef0:	08008790 	.word	0x08008790
  ldr r2, =_sbss
 8000ef4:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000ef8:	200089ec 	.word	0x200089ec

08000efc <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000efc:	e7fe      	b.n	8000efc <ADC1_IRQHandler>

08000efe <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f08:	2003      	movs	r0, #3
 8000f0a:	f000 f8de 	bl	80010ca <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f0e:	200f      	movs	r0, #15
 8000f10:	f7ff fdca 	bl	8000aa8 <HAL_InitTick>
 8000f14:	4603      	mov	r3, r0
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d002      	beq.n	8000f20 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	71fb      	strb	r3, [r7, #7]
 8000f1e:	e001      	b.n	8000f24 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f20:	f7ff fd9a 	bl	8000a58 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f24:	79fb      	ldrb	r3, [r7, #7]
}
 8000f26:	4618      	mov	r0, r3
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}
	...

08000f30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000f34:	4b06      	ldr	r3, [pc, #24]	; (8000f50 <HAL_IncTick+0x20>)
 8000f36:	781b      	ldrb	r3, [r3, #0]
 8000f38:	461a      	mov	r2, r3
 8000f3a:	4b06      	ldr	r3, [pc, #24]	; (8000f54 <HAL_IncTick+0x24>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4413      	add	r3, r2
 8000f40:	4a04      	ldr	r2, [pc, #16]	; (8000f54 <HAL_IncTick+0x24>)
 8000f42:	6013      	str	r3, [r2, #0]
}
 8000f44:	bf00      	nop
 8000f46:	46bd      	mov	sp, r7
 8000f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4c:	4770      	bx	lr
 8000f4e:	bf00      	nop
 8000f50:	20000008 	.word	0x20000008
 8000f54:	200001c8 	.word	0x200001c8

08000f58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000f5c:	4b03      	ldr	r3, [pc, #12]	; (8000f6c <HAL_GetTick+0x14>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	200001c8 	.word	0x200001c8

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	db0b      	blt.n	8000ffe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fe6:	79fb      	ldrb	r3, [r7, #7]
 8000fe8:	f003 021f 	and.w	r2, r3, #31
 8000fec:	4907      	ldr	r1, [pc, #28]	; (800100c <__NVIC_EnableIRQ+0x38>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	095b      	lsrs	r3, r3, #5
 8000ff4:	2001      	movs	r0, #1
 8000ff6:	fa00 f202 	lsl.w	r2, r0, r2
 8000ffa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ffe:	bf00      	nop
 8001000:	370c      	adds	r7, #12
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr
 800100a:	bf00      	nop
 800100c:	e000e100 	.word	0xe000e100

08001010 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001010:	b480      	push	{r7}
 8001012:	b083      	sub	sp, #12
 8001014:	af00      	add	r7, sp, #0
 8001016:	4603      	mov	r3, r0
 8001018:	6039      	str	r1, [r7, #0]
 800101a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800101c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001020:	2b00      	cmp	r3, #0
 8001022:	db0a      	blt.n	800103a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001024:	683b      	ldr	r3, [r7, #0]
 8001026:	b2da      	uxtb	r2, r3
 8001028:	490c      	ldr	r1, [pc, #48]	; (800105c <__NVIC_SetPriority+0x4c>)
 800102a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800102e:	0112      	lsls	r2, r2, #4
 8001030:	b2d2      	uxtb	r2, r2
 8001032:	440b      	add	r3, r1
 8001034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001038:	e00a      	b.n	8001050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	b2da      	uxtb	r2, r3
 800103e:	4908      	ldr	r1, [pc, #32]	; (8001060 <__NVIC_SetPriority+0x50>)
 8001040:	79fb      	ldrb	r3, [r7, #7]
 8001042:	f003 030f 	and.w	r3, r3, #15
 8001046:	3b04      	subs	r3, #4
 8001048:	0112      	lsls	r2, r2, #4
 800104a:	b2d2      	uxtb	r2, r2
 800104c:	440b      	add	r3, r1
 800104e:	761a      	strb	r2, [r3, #24]
}
 8001050:	bf00      	nop
 8001052:	370c      	adds	r7, #12
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr
 800105c:	e000e100 	.word	0xe000e100
 8001060:	e000ed00 	.word	0xe000ed00

08001064 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001064:	b480      	push	{r7}
 8001066:	b089      	sub	sp, #36	; 0x24
 8001068:	af00      	add	r7, sp, #0
 800106a:	60f8      	str	r0, [r7, #12]
 800106c:	60b9      	str	r1, [r7, #8]
 800106e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001070:	68fb      	ldr	r3, [r7, #12]
 8001072:	f003 0307 	and.w	r3, r3, #7
 8001076:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001078:	69fb      	ldr	r3, [r7, #28]
 800107a:	f1c3 0307 	rsb	r3, r3, #7
 800107e:	2b04      	cmp	r3, #4
 8001080:	bf28      	it	cs
 8001082:	2304      	movcs	r3, #4
 8001084:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001086:	69fb      	ldr	r3, [r7, #28]
 8001088:	3304      	adds	r3, #4
 800108a:	2b06      	cmp	r3, #6
 800108c:	d902      	bls.n	8001094 <NVIC_EncodePriority+0x30>
 800108e:	69fb      	ldr	r3, [r7, #28]
 8001090:	3b03      	subs	r3, #3
 8001092:	e000      	b.n	8001096 <NVIC_EncodePriority+0x32>
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001098:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800109c:	69bb      	ldr	r3, [r7, #24]
 800109e:	fa02 f303 	lsl.w	r3, r2, r3
 80010a2:	43da      	mvns	r2, r3
 80010a4:	68bb      	ldr	r3, [r7, #8]
 80010a6:	401a      	ands	r2, r3
 80010a8:	697b      	ldr	r3, [r7, #20]
 80010aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80010ac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80010b0:	697b      	ldr	r3, [r7, #20]
 80010b2:	fa01 f303 	lsl.w	r3, r1, r3
 80010b6:	43d9      	mvns	r1, r3
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80010bc:	4313      	orrs	r3, r2
         );
}
 80010be:	4618      	mov	r0, r3
 80010c0:	3724      	adds	r7, #36	; 0x24
 80010c2:	46bd      	mov	sp, r7
 80010c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c8:	4770      	bx	lr

080010ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010ca:	b580      	push	{r7, lr}
 80010cc:	b082      	sub	sp, #8
 80010ce:	af00      	add	r7, sp, #0
 80010d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010d2:	6878      	ldr	r0, [r7, #4]
 80010d4:	f7ff ff4c 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010d8:	bf00      	nop
 80010da:	3708      	adds	r7, #8
 80010dc:	46bd      	mov	sp, r7
 80010de:	bd80      	pop	{r7, pc}

080010e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b086      	sub	sp, #24
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	4603      	mov	r3, r0
 80010e8:	60b9      	str	r1, [r7, #8]
 80010ea:	607a      	str	r2, [r7, #4]
 80010ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80010ee:	2300      	movs	r3, #0
 80010f0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80010f2:	f7ff ff61 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 80010f6:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80010f8:	687a      	ldr	r2, [r7, #4]
 80010fa:	68b9      	ldr	r1, [r7, #8]
 80010fc:	6978      	ldr	r0, [r7, #20]
 80010fe:	f7ff ffb1 	bl	8001064 <NVIC_EncodePriority>
 8001102:	4602      	mov	r2, r0
 8001104:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001108:	4611      	mov	r1, r2
 800110a:	4618      	mov	r0, r3
 800110c:	f7ff ff80 	bl	8001010 <__NVIC_SetPriority>
}
 8001110:	bf00      	nop
 8001112:	3718      	adds	r7, #24
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}

08001118 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	4603      	mov	r3, r0
 8001120:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001122:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001126:	4618      	mov	r0, r3
 8001128:	f7ff ff54 	bl	8000fd4 <__NVIC_EnableIRQ>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}

08001134 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001134:	b480      	push	{r7}
 8001136:	b085      	sub	sp, #20
 8001138:	af00      	add	r7, sp, #0
 800113a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800113c:	2300      	movs	r3, #0
 800113e:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001146:	b2db      	uxtb	r3, r3
 8001148:	2b02      	cmp	r3, #2
 800114a:	d008      	beq.n	800115e <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2204      	movs	r2, #4
 8001150:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	2200      	movs	r2, #0
 8001156:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800115a:	2301      	movs	r3, #1
 800115c:	e022      	b.n	80011a4 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	681a      	ldr	r2, [r3, #0]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f022 020e 	bic.w	r2, r2, #14
 800116c:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	681a      	ldr	r2, [r3, #0]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f022 0201 	bic.w	r2, r2, #1
 800117c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800117e:	687b      	ldr	r3, [r7, #4]
 8001180:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001182:	f003 021c 	and.w	r2, r3, #28
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118a:	2101      	movs	r1, #1
 800118c:	fa01 f202 	lsl.w	r2, r1, r2
 8001190:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	2201      	movs	r2, #1
 8001196:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	2200      	movs	r2, #0
 800119e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80011a2:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80011a4:	4618      	mov	r0, r3
 80011a6:	3714      	adds	r7, #20
 80011a8:	46bd      	mov	sp, r7
 80011aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ae:	4770      	bx	lr

080011b0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b084      	sub	sp, #16
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80011b8:	2300      	movs	r3, #0
 80011ba:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80011c2:	b2db      	uxtb	r3, r3
 80011c4:	2b02      	cmp	r3, #2
 80011c6:	d005      	beq.n	80011d4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2204      	movs	r2, #4
 80011cc:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80011ce:	2301      	movs	r3, #1
 80011d0:	73fb      	strb	r3, [r7, #15]
 80011d2:	e029      	b.n	8001228 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	681b      	ldr	r3, [r3, #0]
 80011d8:	681a      	ldr	r2, [r3, #0]
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	f022 020e 	bic.w	r2, r2, #14
 80011e2:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	681a      	ldr	r2, [r3, #0]
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f022 0201 	bic.w	r2, r2, #1
 80011f2:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011f8:	f003 021c 	and.w	r2, r3, #28
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001200:	2101      	movs	r1, #1
 8001202:	fa01 f202 	lsl.w	r2, r1, r2
 8001206:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2201      	movs	r2, #1
 800120c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	2200      	movs	r2, #0
 8001214:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800121c:	2b00      	cmp	r3, #0
 800121e:	d003      	beq.n	8001228 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001224:	6878      	ldr	r0, [r7, #4]
 8001226:	4798      	blx	r3
    }
  }
  return status;
 8001228:	7bfb      	ldrb	r3, [r7, #15]
}
 800122a:	4618      	mov	r0, r3
 800122c:	3710      	adds	r7, #16
 800122e:	46bd      	mov	sp, r7
 8001230:	bd80      	pop	{r7, pc}
	...

08001234 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001234:	b480      	push	{r7}
 8001236:	b087      	sub	sp, #28
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
 800123c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001242:	e148      	b.n	80014d6 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	2101      	movs	r1, #1
 800124a:	697b      	ldr	r3, [r7, #20]
 800124c:	fa01 f303 	lsl.w	r3, r1, r3
 8001250:	4013      	ands	r3, r2
 8001252:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2b00      	cmp	r3, #0
 8001258:	f000 813a 	beq.w	80014d0 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	685b      	ldr	r3, [r3, #4]
 8001260:	f003 0303 	and.w	r3, r3, #3
 8001264:	2b01      	cmp	r3, #1
 8001266:	d005      	beq.n	8001274 <HAL_GPIO_Init+0x40>
 8001268:	683b      	ldr	r3, [r7, #0]
 800126a:	685b      	ldr	r3, [r3, #4]
 800126c:	f003 0303 	and.w	r3, r3, #3
 8001270:	2b02      	cmp	r3, #2
 8001272:	d130      	bne.n	80012d6 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	689b      	ldr	r3, [r3, #8]
 8001278:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800127a:	697b      	ldr	r3, [r7, #20]
 800127c:	005b      	lsls	r3, r3, #1
 800127e:	2203      	movs	r2, #3
 8001280:	fa02 f303 	lsl.w	r3, r2, r3
 8001284:	43db      	mvns	r3, r3
 8001286:	693a      	ldr	r2, [r7, #16]
 8001288:	4013      	ands	r3, r2
 800128a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800128c:	683b      	ldr	r3, [r7, #0]
 800128e:	68da      	ldr	r2, [r3, #12]
 8001290:	697b      	ldr	r3, [r7, #20]
 8001292:	005b      	lsls	r3, r3, #1
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	693a      	ldr	r2, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	693a      	ldr	r2, [r7, #16]
 80012a2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012aa:	2201      	movs	r2, #1
 80012ac:	697b      	ldr	r3, [r7, #20]
 80012ae:	fa02 f303 	lsl.w	r3, r2, r3
 80012b2:	43db      	mvns	r3, r3
 80012b4:	693a      	ldr	r2, [r7, #16]
 80012b6:	4013      	ands	r3, r2
 80012b8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012ba:	683b      	ldr	r3, [r7, #0]
 80012bc:	685b      	ldr	r3, [r3, #4]
 80012be:	091b      	lsrs	r3, r3, #4
 80012c0:	f003 0201 	and.w	r2, r3, #1
 80012c4:	697b      	ldr	r3, [r7, #20]
 80012c6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ca:	693a      	ldr	r2, [r7, #16]
 80012cc:	4313      	orrs	r3, r2
 80012ce:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	693a      	ldr	r2, [r7, #16]
 80012d4:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012d6:	683b      	ldr	r3, [r7, #0]
 80012d8:	685b      	ldr	r3, [r3, #4]
 80012da:	f003 0303 	and.w	r3, r3, #3
 80012de:	2b03      	cmp	r3, #3
 80012e0:	d017      	beq.n	8001312 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	68db      	ldr	r3, [r3, #12]
 80012e6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80012e8:	697b      	ldr	r3, [r7, #20]
 80012ea:	005b      	lsls	r3, r3, #1
 80012ec:	2203      	movs	r2, #3
 80012ee:	fa02 f303 	lsl.w	r3, r2, r3
 80012f2:	43db      	mvns	r3, r3
 80012f4:	693a      	ldr	r2, [r7, #16]
 80012f6:	4013      	ands	r3, r2
 80012f8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	689a      	ldr	r2, [r3, #8]
 80012fe:	697b      	ldr	r3, [r7, #20]
 8001300:	005b      	lsls	r3, r3, #1
 8001302:	fa02 f303 	lsl.w	r3, r2, r3
 8001306:	693a      	ldr	r2, [r7, #16]
 8001308:	4313      	orrs	r3, r2
 800130a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	693a      	ldr	r2, [r7, #16]
 8001310:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001312:	683b      	ldr	r3, [r7, #0]
 8001314:	685b      	ldr	r3, [r3, #4]
 8001316:	f003 0303 	and.w	r3, r3, #3
 800131a:	2b02      	cmp	r3, #2
 800131c:	d123      	bne.n	8001366 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800131e:	697b      	ldr	r3, [r7, #20]
 8001320:	08da      	lsrs	r2, r3, #3
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	3208      	adds	r2, #8
 8001326:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800132a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800132c:	697b      	ldr	r3, [r7, #20]
 800132e:	f003 0307 	and.w	r3, r3, #7
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	220f      	movs	r2, #15
 8001336:	fa02 f303 	lsl.w	r3, r2, r3
 800133a:	43db      	mvns	r3, r3
 800133c:	693a      	ldr	r2, [r7, #16]
 800133e:	4013      	ands	r3, r2
 8001340:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001342:	683b      	ldr	r3, [r7, #0]
 8001344:	691a      	ldr	r2, [r3, #16]
 8001346:	697b      	ldr	r3, [r7, #20]
 8001348:	f003 0307 	and.w	r3, r3, #7
 800134c:	009b      	lsls	r3, r3, #2
 800134e:	fa02 f303 	lsl.w	r3, r2, r3
 8001352:	693a      	ldr	r2, [r7, #16]
 8001354:	4313      	orrs	r3, r2
 8001356:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	08da      	lsrs	r2, r3, #3
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	3208      	adds	r2, #8
 8001360:	6939      	ldr	r1, [r7, #16]
 8001362:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001366:	687b      	ldr	r3, [r7, #4]
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 800136c:	697b      	ldr	r3, [r7, #20]
 800136e:	005b      	lsls	r3, r3, #1
 8001370:	2203      	movs	r2, #3
 8001372:	fa02 f303 	lsl.w	r3, r2, r3
 8001376:	43db      	mvns	r3, r3
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	4013      	ands	r3, r2
 800137c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800137e:	683b      	ldr	r3, [r7, #0]
 8001380:	685b      	ldr	r3, [r3, #4]
 8001382:	f003 0203 	and.w	r2, r3, #3
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	005b      	lsls	r3, r3, #1
 800138a:	fa02 f303 	lsl.w	r3, r2, r3
 800138e:	693a      	ldr	r2, [r7, #16]
 8001390:	4313      	orrs	r3, r2
 8001392:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	693a      	ldr	r2, [r7, #16]
 8001398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 8094 	beq.w	80014d0 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a8:	4b52      	ldr	r3, [pc, #328]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 80013aa:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013ac:	4a51      	ldr	r2, [pc, #324]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6613      	str	r3, [r2, #96]	; 0x60
 80013b4:	4b4f      	ldr	r3, [pc, #316]	; (80014f4 <HAL_GPIO_Init+0x2c0>)
 80013b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80013c0:	4a4d      	ldr	r2, [pc, #308]	; (80014f8 <HAL_GPIO_Init+0x2c4>)
 80013c2:	697b      	ldr	r3, [r7, #20]
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80013ce:	697b      	ldr	r3, [r7, #20]
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	693a      	ldr	r2, [r7, #16]
 80013e0:	4013      	ands	r3, r2
 80013e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80013ea:	d00d      	beq.n	8001408 <HAL_GPIO_Init+0x1d4>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a43      	ldr	r2, [pc, #268]	; (80014fc <HAL_GPIO_Init+0x2c8>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d007      	beq.n	8001404 <HAL_GPIO_Init+0x1d0>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a42      	ldr	r2, [pc, #264]	; (8001500 <HAL_GPIO_Init+0x2cc>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d101      	bne.n	8001400 <HAL_GPIO_Init+0x1cc>
 80013fc:	2302      	movs	r3, #2
 80013fe:	e004      	b.n	800140a <HAL_GPIO_Init+0x1d6>
 8001400:	2307      	movs	r3, #7
 8001402:	e002      	b.n	800140a <HAL_GPIO_Init+0x1d6>
 8001404:	2301      	movs	r3, #1
 8001406:	e000      	b.n	800140a <HAL_GPIO_Init+0x1d6>
 8001408:	2300      	movs	r3, #0
 800140a:	697a      	ldr	r2, [r7, #20]
 800140c:	f002 0203 	and.w	r2, r2, #3
 8001410:	0092      	lsls	r2, r2, #2
 8001412:	4093      	lsls	r3, r2
 8001414:	693a      	ldr	r2, [r7, #16]
 8001416:	4313      	orrs	r3, r2
 8001418:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800141a:	4937      	ldr	r1, [pc, #220]	; (80014f8 <HAL_GPIO_Init+0x2c4>)
 800141c:	697b      	ldr	r3, [r7, #20]
 800141e:	089b      	lsrs	r3, r3, #2
 8001420:	3302      	adds	r3, #2
 8001422:	693a      	ldr	r2, [r7, #16]
 8001424:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001428:	4b36      	ldr	r3, [pc, #216]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800142a:	689b      	ldr	r3, [r3, #8]
 800142c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800142e:	68fb      	ldr	r3, [r7, #12]
 8001430:	43db      	mvns	r3, r3
 8001432:	693a      	ldr	r2, [r7, #16]
 8001434:	4013      	ands	r3, r2
 8001436:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001440:	2b00      	cmp	r3, #0
 8001442:	d003      	beq.n	800144c <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001444:	693a      	ldr	r2, [r7, #16]
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	4313      	orrs	r3, r2
 800144a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800144c:	4a2d      	ldr	r2, [pc, #180]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001452:	4b2c      	ldr	r3, [pc, #176]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001454:	68db      	ldr	r3, [r3, #12]
 8001456:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001458:	68fb      	ldr	r3, [r7, #12]
 800145a:	43db      	mvns	r3, r3
 800145c:	693a      	ldr	r2, [r7, #16]
 800145e:	4013      	ands	r3, r2
 8001460:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001462:	683b      	ldr	r3, [r7, #0]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800146a:	2b00      	cmp	r3, #0
 800146c:	d003      	beq.n	8001476 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	4313      	orrs	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001476:	4a23      	ldr	r2, [pc, #140]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800147c:	4b21      	ldr	r3, [pc, #132]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 800147e:	685b      	ldr	r3, [r3, #4]
 8001480:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001482:	68fb      	ldr	r3, [r7, #12]
 8001484:	43db      	mvns	r3, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4013      	ands	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	685b      	ldr	r3, [r3, #4]
 8001490:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001494:	2b00      	cmp	r3, #0
 8001496:	d003      	beq.n	80014a0 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001498:	693a      	ldr	r2, [r7, #16]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	4313      	orrs	r3, r2
 800149e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80014a0:	4a18      	ldr	r2, [pc, #96]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80014a2:	693b      	ldr	r3, [r7, #16]
 80014a4:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80014a6:	4b17      	ldr	r3, [pc, #92]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80014a8:	681b      	ldr	r3, [r3, #0]
 80014aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	43db      	mvns	r3, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4013      	ands	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685b      	ldr	r3, [r3, #4]
 80014ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d003      	beq.n	80014ca <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	68fb      	ldr	r3, [r7, #12]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80014ca:	4a0e      	ldr	r2, [pc, #56]	; (8001504 <HAL_GPIO_Init+0x2d0>)
 80014cc:	693b      	ldr	r3, [r7, #16]
 80014ce:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80014d0:	697b      	ldr	r3, [r7, #20]
 80014d2:	3301      	adds	r3, #1
 80014d4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	681a      	ldr	r2, [r3, #0]
 80014da:	697b      	ldr	r3, [r7, #20]
 80014dc:	fa22 f303 	lsr.w	r3, r2, r3
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	f47f aeaf 	bne.w	8001244 <HAL_GPIO_Init+0x10>
  }
}
 80014e6:	bf00      	nop
 80014e8:	bf00      	nop
 80014ea:	371c      	adds	r7, #28
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	40021000 	.word	0x40021000
 80014f8:	40010000 	.word	0x40010000
 80014fc:	48000400 	.word	0x48000400
 8001500:	48000800 	.word	0x48000800
 8001504:	40010400 	.word	0x40010400

08001508 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001508:	b480      	push	{r7}
 800150a:	b083      	sub	sp, #12
 800150c:	af00      	add	r7, sp, #0
 800150e:	6078      	str	r0, [r7, #4]
 8001510:	460b      	mov	r3, r1
 8001512:	807b      	strh	r3, [r7, #2]
 8001514:	4613      	mov	r3, r2
 8001516:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001518:	787b      	ldrb	r3, [r7, #1]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d003      	beq.n	8001526 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800151e:	887a      	ldrh	r2, [r7, #2]
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001524:	e002      	b.n	800152c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001526:	887a      	ldrh	r2, [r7, #2]
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800152c:	bf00      	nop
 800152e:	370c      	adds	r7, #12
 8001530:	46bd      	mov	sp, r7
 8001532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001536:	4770      	bx	lr

08001538 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001538:	b480      	push	{r7}
 800153a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 800153c:	4b04      	ldr	r3, [pc, #16]	; (8001550 <HAL_PWREx_GetVoltageRange+0x18>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001544:	4618      	mov	r0, r3
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr
 800154e:	bf00      	nop
 8001550:	40007000 	.word	0x40007000

08001554 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001554:	b480      	push	{r7}
 8001556:	b085      	sub	sp, #20
 8001558:	af00      	add	r7, sp, #0
 800155a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001562:	d130      	bne.n	80015c6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001564:	4b23      	ldr	r3, [pc, #140]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800156c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001570:	d038      	beq.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001572:	4b20      	ldr	r3, [pc, #128]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800157a:	4a1e      	ldr	r2, [pc, #120]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800157c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001580:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001582:	4b1d      	ldr	r3, [pc, #116]	; (80015f8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	2232      	movs	r2, #50	; 0x32
 8001588:	fb02 f303 	mul.w	r3, r2, r3
 800158c:	4a1b      	ldr	r2, [pc, #108]	; (80015fc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800158e:	fba2 2303 	umull	r2, r3, r2, r3
 8001592:	0c9b      	lsrs	r3, r3, #18
 8001594:	3301      	adds	r3, #1
 8001596:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001598:	e002      	b.n	80015a0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	3b01      	subs	r3, #1
 800159e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80015a0:	4b14      	ldr	r3, [pc, #80]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015a2:	695b      	ldr	r3, [r3, #20]
 80015a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015ac:	d102      	bne.n	80015b4 <HAL_PWREx_ControlVoltageScaling+0x60>
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d1f2      	bne.n	800159a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80015b4:	4b0f      	ldr	r3, [pc, #60]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015b6:	695b      	ldr	r3, [r3, #20]
 80015b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015c0:	d110      	bne.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80015c2:	2303      	movs	r3, #3
 80015c4:	e00f      	b.n	80015e6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80015c6:	4b0b      	ldr	r3, [pc, #44]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80015ce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80015d2:	d007      	beq.n	80015e4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80015d4:	4b07      	ldr	r3, [pc, #28]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80015dc:	4a05      	ldr	r2, [pc, #20]	; (80015f4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80015de:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80015e2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80015e4:	2300      	movs	r3, #0
}
 80015e6:	4618      	mov	r0, r3
 80015e8:	3714      	adds	r7, #20
 80015ea:	46bd      	mov	sp, r7
 80015ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015f0:	4770      	bx	lr
 80015f2:	bf00      	nop
 80015f4:	40007000 	.word	0x40007000
 80015f8:	20000000 	.word	0x20000000
 80015fc:	431bde83 	.word	0x431bde83

08001600 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001600:	b580      	push	{r7, lr}
 8001602:	b088      	sub	sp, #32
 8001604:	af00      	add	r7, sp, #0
 8001606:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	2b00      	cmp	r3, #0
 800160c:	d102      	bne.n	8001614 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800160e:	2301      	movs	r3, #1
 8001610:	f000 bc02 	b.w	8001e18 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001614:	4b96      	ldr	r3, [pc, #600]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001616:	689b      	ldr	r3, [r3, #8]
 8001618:	f003 030c 	and.w	r3, r3, #12
 800161c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800161e:	4b94      	ldr	r3, [pc, #592]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001620:	68db      	ldr	r3, [r3, #12]
 8001622:	f003 0303 	and.w	r3, r3, #3
 8001626:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	f003 0310 	and.w	r3, r3, #16
 8001630:	2b00      	cmp	r3, #0
 8001632:	f000 80e4 	beq.w	80017fe <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001636:	69bb      	ldr	r3, [r7, #24]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d007      	beq.n	800164c <HAL_RCC_OscConfig+0x4c>
 800163c:	69bb      	ldr	r3, [r7, #24]
 800163e:	2b0c      	cmp	r3, #12
 8001640:	f040 808b 	bne.w	800175a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001644:	697b      	ldr	r3, [r7, #20]
 8001646:	2b01      	cmp	r3, #1
 8001648:	f040 8087 	bne.w	800175a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800164c:	4b88      	ldr	r3, [pc, #544]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	f003 0302 	and.w	r3, r3, #2
 8001654:	2b00      	cmp	r3, #0
 8001656:	d005      	beq.n	8001664 <HAL_RCC_OscConfig+0x64>
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	699b      	ldr	r3, [r3, #24]
 800165c:	2b00      	cmp	r3, #0
 800165e:	d101      	bne.n	8001664 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001660:	2301      	movs	r3, #1
 8001662:	e3d9      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	6a1a      	ldr	r2, [r3, #32]
 8001668:	4b81      	ldr	r3, [pc, #516]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0308 	and.w	r3, r3, #8
 8001670:	2b00      	cmp	r3, #0
 8001672:	d004      	beq.n	800167e <HAL_RCC_OscConfig+0x7e>
 8001674:	4b7e      	ldr	r3, [pc, #504]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800167c:	e005      	b.n	800168a <HAL_RCC_OscConfig+0x8a>
 800167e:	4b7c      	ldr	r3, [pc, #496]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001680:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001684:	091b      	lsrs	r3, r3, #4
 8001686:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800168a:	4293      	cmp	r3, r2
 800168c:	d223      	bcs.n	80016d6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	6a1b      	ldr	r3, [r3, #32]
 8001692:	4618      	mov	r0, r3
 8001694:	f000 fdbe 	bl	8002214 <RCC_SetFlashLatencyFromMSIRange>
 8001698:	4603      	mov	r3, r0
 800169a:	2b00      	cmp	r3, #0
 800169c:	d001      	beq.n	80016a2 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800169e:	2301      	movs	r3, #1
 80016a0:	e3ba      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016a2:	4b73      	ldr	r3, [pc, #460]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a72      	ldr	r2, [pc, #456]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016a8:	f043 0308 	orr.w	r3, r3, #8
 80016ac:	6013      	str	r3, [r2, #0]
 80016ae:	4b70      	ldr	r3, [pc, #448]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	6a1b      	ldr	r3, [r3, #32]
 80016ba:	496d      	ldr	r1, [pc, #436]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016bc:	4313      	orrs	r3, r2
 80016be:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016c0:	4b6b      	ldr	r3, [pc, #428]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	69db      	ldr	r3, [r3, #28]
 80016cc:	021b      	lsls	r3, r3, #8
 80016ce:	4968      	ldr	r1, [pc, #416]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016d0:	4313      	orrs	r3, r2
 80016d2:	604b      	str	r3, [r1, #4]
 80016d4:	e025      	b.n	8001722 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80016d6:	4b66      	ldr	r3, [pc, #408]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	4a65      	ldr	r2, [pc, #404]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016dc:	f043 0308 	orr.w	r3, r3, #8
 80016e0:	6013      	str	r3, [r2, #0]
 80016e2:	4b63      	ldr	r3, [pc, #396]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6a1b      	ldr	r3, [r3, #32]
 80016ee:	4960      	ldr	r1, [pc, #384]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016f0:	4313      	orrs	r3, r2
 80016f2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80016f4:	4b5e      	ldr	r3, [pc, #376]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	69db      	ldr	r3, [r3, #28]
 8001700:	021b      	lsls	r3, r3, #8
 8001702:	495b      	ldr	r1, [pc, #364]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001704:	4313      	orrs	r3, r2
 8001706:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001708:	69bb      	ldr	r3, [r7, #24]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d109      	bne.n	8001722 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6a1b      	ldr	r3, [r3, #32]
 8001712:	4618      	mov	r0, r3
 8001714:	f000 fd7e 	bl	8002214 <RCC_SetFlashLatencyFromMSIRange>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e37a      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001722:	f000 fc81 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8001726:	4602      	mov	r2, r0
 8001728:	4b51      	ldr	r3, [pc, #324]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 800172a:	689b      	ldr	r3, [r3, #8]
 800172c:	091b      	lsrs	r3, r3, #4
 800172e:	f003 030f 	and.w	r3, r3, #15
 8001732:	4950      	ldr	r1, [pc, #320]	; (8001874 <HAL_RCC_OscConfig+0x274>)
 8001734:	5ccb      	ldrb	r3, [r1, r3]
 8001736:	f003 031f 	and.w	r3, r3, #31
 800173a:	fa22 f303 	lsr.w	r3, r2, r3
 800173e:	4a4e      	ldr	r2, [pc, #312]	; (8001878 <HAL_RCC_OscConfig+0x278>)
 8001740:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001742:	4b4e      	ldr	r3, [pc, #312]	; (800187c <HAL_RCC_OscConfig+0x27c>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4618      	mov	r0, r3
 8001748:	f7ff f9ae 	bl	8000aa8 <HAL_InitTick>
 800174c:	4603      	mov	r3, r0
 800174e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001750:	7bfb      	ldrb	r3, [r7, #15]
 8001752:	2b00      	cmp	r3, #0
 8001754:	d052      	beq.n	80017fc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	e35e      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	699b      	ldr	r3, [r3, #24]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d032      	beq.n	80017c8 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001762:	4b43      	ldr	r3, [pc, #268]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4a42      	ldr	r2, [pc, #264]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001768:	f043 0301 	orr.w	r3, r3, #1
 800176c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800176e:	f7ff fbf3 	bl	8000f58 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001776:	f7ff fbef 	bl	8000f58 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e347      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001788:	4b39      	ldr	r3, [pc, #228]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001794:	4b36      	ldr	r3, [pc, #216]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a35      	ldr	r2, [pc, #212]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 800179a:	f043 0308 	orr.w	r3, r3, #8
 800179e:	6013      	str	r3, [r2, #0]
 80017a0:	4b33      	ldr	r3, [pc, #204]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	6a1b      	ldr	r3, [r3, #32]
 80017ac:	4930      	ldr	r1, [pc, #192]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80017ae:	4313      	orrs	r3, r2
 80017b0:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017b2:	4b2f      	ldr	r3, [pc, #188]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	69db      	ldr	r3, [r3, #28]
 80017be:	021b      	lsls	r3, r3, #8
 80017c0:	492b      	ldr	r1, [pc, #172]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80017c2:	4313      	orrs	r3, r2
 80017c4:	604b      	str	r3, [r1, #4]
 80017c6:	e01a      	b.n	80017fe <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80017c8:	4b29      	ldr	r3, [pc, #164]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a28      	ldr	r2, [pc, #160]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80017ce:	f023 0301 	bic.w	r3, r3, #1
 80017d2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80017d4:	f7ff fbc0 	bl	8000f58 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017da:	e008      	b.n	80017ee <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80017dc:	f7ff fbbc 	bl	8000f58 <HAL_GetTick>
 80017e0:	4602      	mov	r2, r0
 80017e2:	693b      	ldr	r3, [r7, #16]
 80017e4:	1ad3      	subs	r3, r2, r3
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e314      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80017ee:	4b20      	ldr	r3, [pc, #128]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f003 0302 	and.w	r3, r3, #2
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d1f0      	bne.n	80017dc <HAL_RCC_OscConfig+0x1dc>
 80017fa:	e000      	b.n	80017fe <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80017fc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 0301 	and.w	r3, r3, #1
 8001806:	2b00      	cmp	r3, #0
 8001808:	d073      	beq.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800180a:	69bb      	ldr	r3, [r7, #24]
 800180c:	2b08      	cmp	r3, #8
 800180e:	d005      	beq.n	800181c <HAL_RCC_OscConfig+0x21c>
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	2b0c      	cmp	r3, #12
 8001814:	d10e      	bne.n	8001834 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001816:	697b      	ldr	r3, [r7, #20]
 8001818:	2b03      	cmp	r3, #3
 800181a:	d10b      	bne.n	8001834 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	4b14      	ldr	r3, [pc, #80]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d063      	beq.n	80018f0 <HAL_RCC_OscConfig+0x2f0>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d15f      	bne.n	80018f0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e2f1      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800183c:	d106      	bne.n	800184c <HAL_RCC_OscConfig+0x24c>
 800183e:	4b0c      	ldr	r3, [pc, #48]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a0b      	ldr	r2, [pc, #44]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e025      	b.n	8001898 <HAL_RCC_OscConfig+0x298>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001854:	d114      	bne.n	8001880 <HAL_RCC_OscConfig+0x280>
 8001856:	4b06      	ldr	r3, [pc, #24]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a05      	ldr	r2, [pc, #20]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b03      	ldr	r3, [pc, #12]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a02      	ldr	r2, [pc, #8]	; (8001870 <HAL_RCC_OscConfig+0x270>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e013      	b.n	8001898 <HAL_RCC_OscConfig+0x298>
 8001870:	40021000 	.word	0x40021000
 8001874:	080085f0 	.word	0x080085f0
 8001878:	20000000 	.word	0x20000000
 800187c:	20000004 	.word	0x20000004
 8001880:	4ba0      	ldr	r3, [pc, #640]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	4a9f      	ldr	r2, [pc, #636]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001886:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800188a:	6013      	str	r3, [r2, #0]
 800188c:	4b9d      	ldr	r3, [pc, #628]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a9c      	ldr	r2, [pc, #624]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001892:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001896:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d013      	beq.n	80018c8 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018a0:	f7ff fb5a 	bl	8000f58 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018a8:	f7ff fb56 	bl	8000f58 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b64      	cmp	r3, #100	; 0x64
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e2ae      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018ba:	4b92      	ldr	r3, [pc, #584]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d0f0      	beq.n	80018a8 <HAL_RCC_OscConfig+0x2a8>
 80018c6:	e014      	b.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018c8:	f7ff fb46 	bl	8000f58 <HAL_GetTick>
 80018cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018ce:	e008      	b.n	80018e2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018d0:	f7ff fb42 	bl	8000f58 <HAL_GetTick>
 80018d4:	4602      	mov	r2, r0
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	1ad3      	subs	r3, r2, r3
 80018da:	2b64      	cmp	r3, #100	; 0x64
 80018dc:	d901      	bls.n	80018e2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80018de:	2303      	movs	r3, #3
 80018e0:	e29a      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80018e2:	4b88      	ldr	r3, [pc, #544]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d1f0      	bne.n	80018d0 <HAL_RCC_OscConfig+0x2d0>
 80018ee:	e000      	b.n	80018f2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f003 0302 	and.w	r3, r3, #2
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d060      	beq.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b04      	cmp	r3, #4
 8001902:	d005      	beq.n	8001910 <HAL_RCC_OscConfig+0x310>
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b0c      	cmp	r3, #12
 8001908:	d119      	bne.n	800193e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	2b02      	cmp	r3, #2
 800190e:	d116      	bne.n	800193e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001910:	4b7c      	ldr	r3, [pc, #496]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_OscConfig+0x328>
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e277      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001928:	4b76      	ldr	r3, [pc, #472]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	691b      	ldr	r3, [r3, #16]
 8001934:	061b      	lsls	r3, r3, #24
 8001936:	4973      	ldr	r1, [pc, #460]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001938:	4313      	orrs	r3, r2
 800193a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800193c:	e040      	b.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	68db      	ldr	r3, [r3, #12]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d023      	beq.n	800198e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001946:	4b6f      	ldr	r3, [pc, #444]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	4a6e      	ldr	r2, [pc, #440]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 800194c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001950:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001952:	f7ff fb01 	bl	8000f58 <HAL_GetTick>
 8001956:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001958:	e008      	b.n	800196c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800195a:	f7ff fafd 	bl	8000f58 <HAL_GetTick>
 800195e:	4602      	mov	r2, r0
 8001960:	693b      	ldr	r3, [r7, #16]
 8001962:	1ad3      	subs	r3, r2, r3
 8001964:	2b02      	cmp	r3, #2
 8001966:	d901      	bls.n	800196c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001968:	2303      	movs	r3, #3
 800196a:	e255      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800196c:	4b65      	ldr	r3, [pc, #404]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 800196e:	681b      	ldr	r3, [r3, #0]
 8001970:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001974:	2b00      	cmp	r3, #0
 8001976:	d0f0      	beq.n	800195a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001978:	4b62      	ldr	r3, [pc, #392]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 800197a:	685b      	ldr	r3, [r3, #4]
 800197c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	691b      	ldr	r3, [r3, #16]
 8001984:	061b      	lsls	r3, r3, #24
 8001986:	495f      	ldr	r1, [pc, #380]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001988:	4313      	orrs	r3, r2
 800198a:	604b      	str	r3, [r1, #4]
 800198c:	e018      	b.n	80019c0 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198e:	4b5d      	ldr	r3, [pc, #372]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	4a5c      	ldr	r2, [pc, #368]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001994:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001998:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800199a:	f7ff fadd 	bl	8000f58 <HAL_GetTick>
 800199e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019a0:	e008      	b.n	80019b4 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80019a2:	f7ff fad9 	bl	8000f58 <HAL_GetTick>
 80019a6:	4602      	mov	r2, r0
 80019a8:	693b      	ldr	r3, [r7, #16]
 80019aa:	1ad3      	subs	r3, r2, r3
 80019ac:	2b02      	cmp	r3, #2
 80019ae:	d901      	bls.n	80019b4 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80019b0:	2303      	movs	r3, #3
 80019b2:	e231      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80019b4:	4b53      	ldr	r3, [pc, #332]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d1f0      	bne.n	80019a2 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0308 	and.w	r3, r3, #8
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d03c      	beq.n	8001a46 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	695b      	ldr	r3, [r3, #20]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01c      	beq.n	8001a0e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019d4:	4b4b      	ldr	r3, [pc, #300]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 80019d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80019da:	4a4a      	ldr	r2, [pc, #296]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 80019dc:	f043 0301 	orr.w	r3, r3, #1
 80019e0:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019e4:	f7ff fab8 	bl	8000f58 <HAL_GetTick>
 80019e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019ea:	e008      	b.n	80019fe <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019ec:	f7ff fab4 	bl	8000f58 <HAL_GetTick>
 80019f0:	4602      	mov	r2, r0
 80019f2:	693b      	ldr	r3, [r7, #16]
 80019f4:	1ad3      	subs	r3, r2, r3
 80019f6:	2b02      	cmp	r3, #2
 80019f8:	d901      	bls.n	80019fe <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80019fa:	2303      	movs	r3, #3
 80019fc:	e20c      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80019fe:	4b41      	ldr	r3, [pc, #260]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001a00:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a04:	f003 0302 	and.w	r3, r3, #2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d0ef      	beq.n	80019ec <HAL_RCC_OscConfig+0x3ec>
 8001a0c:	e01b      	b.n	8001a46 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001a10:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a14:	4a3b      	ldr	r2, [pc, #236]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001a16:	f023 0301 	bic.w	r3, r3, #1
 8001a1a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a1e:	f7ff fa9b 	bl	8000f58 <HAL_GetTick>
 8001a22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a24:	e008      	b.n	8001a38 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a26:	f7ff fa97 	bl	8000f58 <HAL_GetTick>
 8001a2a:	4602      	mov	r2, r0
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	1ad3      	subs	r3, r2, r3
 8001a30:	2b02      	cmp	r3, #2
 8001a32:	d901      	bls.n	8001a38 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001a34:	2303      	movs	r3, #3
 8001a36:	e1ef      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001a38:	4b32      	ldr	r3, [pc, #200]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001a3a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a3e:	f003 0302 	and.w	r3, r3, #2
 8001a42:	2b00      	cmp	r3, #0
 8001a44:	d1ef      	bne.n	8001a26 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	f003 0304 	and.w	r3, r3, #4
 8001a4e:	2b00      	cmp	r3, #0
 8001a50:	f000 80a6 	beq.w	8001ba0 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a54:	2300      	movs	r3, #0
 8001a56:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001a58:	4b2a      	ldr	r3, [pc, #168]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001a5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a5c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d10d      	bne.n	8001a80 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a64:	4b27      	ldr	r3, [pc, #156]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001a66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a68:	4a26      	ldr	r2, [pc, #152]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001a6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001a6e:	6593      	str	r3, [r2, #88]	; 0x58
 8001a70:	4b24      	ldr	r3, [pc, #144]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001a72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001a78:	60bb      	str	r3, [r7, #8]
 8001a7a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a7c:	2301      	movs	r3, #1
 8001a7e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a80:	4b21      	ldr	r3, [pc, #132]	; (8001b08 <HAL_RCC_OscConfig+0x508>)
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d118      	bne.n	8001abe <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001a8c:	4b1e      	ldr	r3, [pc, #120]	; (8001b08 <HAL_RCC_OscConfig+0x508>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a1d      	ldr	r2, [pc, #116]	; (8001b08 <HAL_RCC_OscConfig+0x508>)
 8001a92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a96:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a98:	f7ff fa5e 	bl	8000f58 <HAL_GetTick>
 8001a9c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001a9e:	e008      	b.n	8001ab2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001aa0:	f7ff fa5a 	bl	8000f58 <HAL_GetTick>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	693b      	ldr	r3, [r7, #16]
 8001aa8:	1ad3      	subs	r3, r2, r3
 8001aaa:	2b02      	cmp	r3, #2
 8001aac:	d901      	bls.n	8001ab2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001aae:	2303      	movs	r3, #3
 8001ab0:	e1b2      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ab2:	4b15      	ldr	r3, [pc, #84]	; (8001b08 <HAL_RCC_OscConfig+0x508>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d0f0      	beq.n	8001aa0 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	689b      	ldr	r3, [r3, #8]
 8001ac2:	2b01      	cmp	r3, #1
 8001ac4:	d108      	bne.n	8001ad8 <HAL_RCC_OscConfig+0x4d8>
 8001ac6:	4b0f      	ldr	r3, [pc, #60]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001ac8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001acc:	4a0d      	ldr	r2, [pc, #52]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001ad6:	e029      	b.n	8001b2c <HAL_RCC_OscConfig+0x52c>
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	689b      	ldr	r3, [r3, #8]
 8001adc:	2b05      	cmp	r3, #5
 8001ade:	d115      	bne.n	8001b0c <HAL_RCC_OscConfig+0x50c>
 8001ae0:	4b08      	ldr	r3, [pc, #32]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001ae2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ae6:	4a07      	ldr	r2, [pc, #28]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001ae8:	f043 0304 	orr.w	r3, r3, #4
 8001aec:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001af0:	4b04      	ldr	r3, [pc, #16]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001af2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001af6:	4a03      	ldr	r2, [pc, #12]	; (8001b04 <HAL_RCC_OscConfig+0x504>)
 8001af8:	f043 0301 	orr.w	r3, r3, #1
 8001afc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b00:	e014      	b.n	8001b2c <HAL_RCC_OscConfig+0x52c>
 8001b02:	bf00      	nop
 8001b04:	40021000 	.word	0x40021000
 8001b08:	40007000 	.word	0x40007000
 8001b0c:	4b9a      	ldr	r3, [pc, #616]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001b0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b12:	4a99      	ldr	r2, [pc, #612]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001b14:	f023 0301 	bic.w	r3, r3, #1
 8001b18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001b1c:	4b96      	ldr	r3, [pc, #600]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001b1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b22:	4a95      	ldr	r2, [pc, #596]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001b24:	f023 0304 	bic.w	r3, r3, #4
 8001b28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d016      	beq.n	8001b62 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b34:	f7ff fa10 	bl	8000f58 <HAL_GetTick>
 8001b38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b3c:	f7ff fa0c 	bl	8000f58 <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	693b      	ldr	r3, [r7, #16]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e162      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b52:	4b89      	ldr	r3, [pc, #548]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001b54:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b58:	f003 0302 	and.w	r3, r3, #2
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d0ed      	beq.n	8001b3c <HAL_RCC_OscConfig+0x53c>
 8001b60:	e015      	b.n	8001b8e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b62:	f7ff f9f9 	bl	8000f58 <HAL_GetTick>
 8001b66:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b68:	e00a      	b.n	8001b80 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b6a:	f7ff f9f5 	bl	8000f58 <HAL_GetTick>
 8001b6e:	4602      	mov	r2, r0
 8001b70:	693b      	ldr	r3, [r7, #16]
 8001b72:	1ad3      	subs	r3, r2, r3
 8001b74:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d901      	bls.n	8001b80 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e14b      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001b80:	4b7d      	ldr	r3, [pc, #500]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001b82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b86:	f003 0302 	and.w	r3, r3, #2
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d1ed      	bne.n	8001b6a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001b8e:	7ffb      	ldrb	r3, [r7, #31]
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	d105      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b94:	4b78      	ldr	r3, [pc, #480]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001b96:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b98:	4a77      	ldr	r2, [pc, #476]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001b9a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f003 0320 	and.w	r3, r3, #32
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d03c      	beq.n	8001c26 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d01c      	beq.n	8001bee <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001bb4:	4b70      	ldr	r3, [pc, #448]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001bb6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bba:	4a6f      	ldr	r2, [pc, #444]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001bbc:	f043 0301 	orr.w	r3, r3, #1
 8001bc0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bc4:	f7ff f9c8 	bl	8000f58 <HAL_GetTick>
 8001bc8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bca:	e008      	b.n	8001bde <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001bcc:	f7ff f9c4 	bl	8000f58 <HAL_GetTick>
 8001bd0:	4602      	mov	r2, r0
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	1ad3      	subs	r3, r2, r3
 8001bd6:	2b02      	cmp	r3, #2
 8001bd8:	d901      	bls.n	8001bde <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001bda:	2303      	movs	r3, #3
 8001bdc:	e11c      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001bde:	4b66      	ldr	r3, [pc, #408]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001be0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001be4:	f003 0302 	and.w	r3, r3, #2
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d0ef      	beq.n	8001bcc <HAL_RCC_OscConfig+0x5cc>
 8001bec:	e01b      	b.n	8001c26 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001bee:	4b62      	ldr	r3, [pc, #392]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001bf0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001bf4:	4a60      	ldr	r2, [pc, #384]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001bf6:	f023 0301 	bic.w	r3, r3, #1
 8001bfa:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bfe:	f7ff f9ab 	bl	8000f58 <HAL_GetTick>
 8001c02:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c04:	e008      	b.n	8001c18 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001c06:	f7ff f9a7 	bl	8000f58 <HAL_GetTick>
 8001c0a:	4602      	mov	r2, r0
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	1ad3      	subs	r3, r2, r3
 8001c10:	2b02      	cmp	r3, #2
 8001c12:	d901      	bls.n	8001c18 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001c14:	2303      	movs	r3, #3
 8001c16:	e0ff      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001c18:	4b57      	ldr	r3, [pc, #348]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001c1a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001c1e:	f003 0302 	and.w	r3, r3, #2
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d1ef      	bne.n	8001c06 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	f000 80f3 	beq.w	8001e16 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	2b02      	cmp	r3, #2
 8001c36:	f040 80c9 	bne.w	8001dcc <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001c3a:	4b4f      	ldr	r3, [pc, #316]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c40:	697b      	ldr	r3, [r7, #20]
 8001c42:	f003 0203 	and.w	r2, r3, #3
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c4a:	429a      	cmp	r2, r3
 8001c4c:	d12c      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c4e:	697b      	ldr	r3, [r7, #20]
 8001c50:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c5c:	429a      	cmp	r2, r3
 8001c5e:	d123      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c60:	697b      	ldr	r3, [r7, #20]
 8001c62:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001c6a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d11b      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001c7a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001c7c:	429a      	cmp	r2, r3
 8001c7e:	d113      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c8a:	085b      	lsrs	r3, r3, #1
 8001c8c:	3b01      	subs	r3, #1
 8001c8e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001c90:	429a      	cmp	r2, r3
 8001c92:	d109      	bne.n	8001ca8 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001c94:	697b      	ldr	r3, [r7, #20]
 8001c96:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c9e:	085b      	lsrs	r3, r3, #1
 8001ca0:	3b01      	subs	r3, #1
 8001ca2:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001ca4:	429a      	cmp	r2, r3
 8001ca6:	d06b      	beq.n	8001d80 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ca8:	69bb      	ldr	r3, [r7, #24]
 8001caa:	2b0c      	cmp	r3, #12
 8001cac:	d062      	beq.n	8001d74 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001cae:	4b32      	ldr	r3, [pc, #200]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d001      	beq.n	8001cbe <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001cba:	2301      	movs	r3, #1
 8001cbc:	e0ac      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001cbe:	4b2e      	ldr	r3, [pc, #184]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a2d      	ldr	r2, [pc, #180]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001cc4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001cc8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001cca:	f7ff f945 	bl	8000f58 <HAL_GetTick>
 8001cce:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cd0:	e008      	b.n	8001ce4 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cd2:	f7ff f941 	bl	8000f58 <HAL_GetTick>
 8001cd6:	4602      	mov	r2, r0
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	1ad3      	subs	r3, r2, r3
 8001cdc:	2b02      	cmp	r3, #2
 8001cde:	d901      	bls.n	8001ce4 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001ce0:	2303      	movs	r3, #3
 8001ce2:	e099      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d1f0      	bne.n	8001cd2 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001cf0:	4b21      	ldr	r3, [pc, #132]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001cf2:	68da      	ldr	r2, [r3, #12]
 8001cf4:	4b21      	ldr	r3, [pc, #132]	; (8001d7c <HAL_RCC_OscConfig+0x77c>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	687a      	ldr	r2, [r7, #4]
 8001cfa:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001cfc:	687a      	ldr	r2, [r7, #4]
 8001cfe:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d00:	3a01      	subs	r2, #1
 8001d02:	0112      	lsls	r2, r2, #4
 8001d04:	4311      	orrs	r1, r2
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d0a:	0212      	lsls	r2, r2, #8
 8001d0c:	4311      	orrs	r1, r2
 8001d0e:	687a      	ldr	r2, [r7, #4]
 8001d10:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d12:	0852      	lsrs	r2, r2, #1
 8001d14:	3a01      	subs	r2, #1
 8001d16:	0552      	lsls	r2, r2, #21
 8001d18:	4311      	orrs	r1, r2
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d1e:	0852      	lsrs	r2, r2, #1
 8001d20:	3a01      	subs	r2, #1
 8001d22:	0652      	lsls	r2, r2, #25
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d2a:	06d2      	lsls	r2, r2, #27
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	4912      	ldr	r1, [pc, #72]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001d30:	4313      	orrs	r3, r2
 8001d32:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001d34:	4b10      	ldr	r3, [pc, #64]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	4a0f      	ldr	r2, [pc, #60]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001d3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d3e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d40:	4b0d      	ldr	r3, [pc, #52]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	4a0c      	ldr	r2, [pc, #48]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001d46:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d4a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001d4c:	f7ff f904 	bl	8000f58 <HAL_GetTick>
 8001d50:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d52:	e008      	b.n	8001d66 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d54:	f7ff f900 	bl	8000f58 <HAL_GetTick>
 8001d58:	4602      	mov	r2, r0
 8001d5a:	693b      	ldr	r3, [r7, #16]
 8001d5c:	1ad3      	subs	r3, r2, r3
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d901      	bls.n	8001d66 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001d62:	2303      	movs	r3, #3
 8001d64:	e058      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d66:	4b04      	ldr	r3, [pc, #16]	; (8001d78 <HAL_RCC_OscConfig+0x778>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d0f0      	beq.n	8001d54 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001d72:	e050      	b.n	8001e16 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001d74:	2301      	movs	r3, #1
 8001d76:	e04f      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
 8001d78:	40021000 	.word	0x40021000
 8001d7c:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d80:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d144      	bne.n	8001e16 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001d8c:	4b24      	ldr	r3, [pc, #144]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a23      	ldr	r2, [pc, #140]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001d92:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d96:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d98:	4b21      	ldr	r3, [pc, #132]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001d9a:	68db      	ldr	r3, [r3, #12]
 8001d9c:	4a20      	ldr	r2, [pc, #128]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001d9e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001da2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001da4:	f7ff f8d8 	bl	8000f58 <HAL_GetTick>
 8001da8:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001daa:	e008      	b.n	8001dbe <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dac:	f7ff f8d4 	bl	8000f58 <HAL_GetTick>
 8001db0:	4602      	mov	r2, r0
 8001db2:	693b      	ldr	r3, [r7, #16]
 8001db4:	1ad3      	subs	r3, r2, r3
 8001db6:	2b02      	cmp	r3, #2
 8001db8:	d901      	bls.n	8001dbe <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001dba:	2303      	movs	r3, #3
 8001dbc:	e02c      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001dbe:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d0f0      	beq.n	8001dac <HAL_RCC_OscConfig+0x7ac>
 8001dca:	e024      	b.n	8001e16 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	2b0c      	cmp	r3, #12
 8001dd0:	d01f      	beq.n	8001e12 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001dd2:	4b13      	ldr	r3, [pc, #76]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a12      	ldr	r2, [pc, #72]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001dd8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ddc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dde:	f7ff f8bb 	bl	8000f58 <HAL_GetTick>
 8001de2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de4:	e008      	b.n	8001df8 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001de6:	f7ff f8b7 	bl	8000f58 <HAL_GetTick>
 8001dea:	4602      	mov	r2, r0
 8001dec:	693b      	ldr	r3, [r7, #16]
 8001dee:	1ad3      	subs	r3, r2, r3
 8001df0:	2b02      	cmp	r3, #2
 8001df2:	d901      	bls.n	8001df8 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001df4:	2303      	movs	r3, #3
 8001df6:	e00f      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001df8:	4b09      	ldr	r3, [pc, #36]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d1f0      	bne.n	8001de6 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001e04:	4b06      	ldr	r3, [pc, #24]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001e06:	68da      	ldr	r2, [r3, #12]
 8001e08:	4905      	ldr	r1, [pc, #20]	; (8001e20 <HAL_RCC_OscConfig+0x820>)
 8001e0a:	4b06      	ldr	r3, [pc, #24]	; (8001e24 <HAL_RCC_OscConfig+0x824>)
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	60cb      	str	r3, [r1, #12]
 8001e10:	e001      	b.n	8001e16 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001e12:	2301      	movs	r3, #1
 8001e14:	e000      	b.n	8001e18 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001e16:	2300      	movs	r3, #0
}
 8001e18:	4618      	mov	r0, r3
 8001e1a:	3720      	adds	r7, #32
 8001e1c:	46bd      	mov	sp, r7
 8001e1e:	bd80      	pop	{r7, pc}
 8001e20:	40021000 	.word	0x40021000
 8001e24:	feeefffc 	.word	0xfeeefffc

08001e28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	b084      	sub	sp, #16
 8001e2c:	af00      	add	r7, sp, #0
 8001e2e:	6078      	str	r0, [r7, #4]
 8001e30:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	d101      	bne.n	8001e3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	e0e7      	b.n	800200c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e3c:	4b75      	ldr	r3, [pc, #468]	; (8002014 <HAL_RCC_ClockConfig+0x1ec>)
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f003 0307 	and.w	r3, r3, #7
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	429a      	cmp	r2, r3
 8001e48:	d910      	bls.n	8001e6c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e4a:	4b72      	ldr	r3, [pc, #456]	; (8002014 <HAL_RCC_ClockConfig+0x1ec>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f023 0207 	bic.w	r2, r3, #7
 8001e52:	4970      	ldr	r1, [pc, #448]	; (8002014 <HAL_RCC_ClockConfig+0x1ec>)
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e5a:	4b6e      	ldr	r3, [pc, #440]	; (8002014 <HAL_RCC_ClockConfig+0x1ec>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f003 0307 	and.w	r3, r3, #7
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d001      	beq.n	8001e6c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	e0cf      	b.n	800200c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f003 0302 	and.w	r3, r3, #2
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d010      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	689a      	ldr	r2, [r3, #8]
 8001e7c:	4b66      	ldr	r3, [pc, #408]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001e84:	429a      	cmp	r2, r3
 8001e86:	d908      	bls.n	8001e9a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b63      	ldr	r3, [pc, #396]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	4960      	ldr	r1, [pc, #384]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d04c      	beq.n	8001f40 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b03      	cmp	r3, #3
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001eae:	4b5a      	ldr	r3, [pc, #360]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d121      	bne.n	8001efe <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e0a6      	b.n	800200c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d107      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ec6:	4b54      	ldr	r3, [pc, #336]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001ec8:	681b      	ldr	r3, [r3, #0]
 8001eca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	d115      	bne.n	8001efe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001ed2:	2301      	movs	r3, #1
 8001ed4:	e09a      	b.n	800200c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	685b      	ldr	r3, [r3, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d107      	bne.n	8001eee <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001ede:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d109      	bne.n	8001efe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e08e      	b.n	800200c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001eee:	4b4a      	ldr	r3, [pc, #296]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d101      	bne.n	8001efe <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001efa:	2301      	movs	r3, #1
 8001efc:	e086      	b.n	800200c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001efe:	4b46      	ldr	r3, [pc, #280]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001f00:	689b      	ldr	r3, [r3, #8]
 8001f02:	f023 0203 	bic.w	r2, r3, #3
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	4943      	ldr	r1, [pc, #268]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001f0c:	4313      	orrs	r3, r2
 8001f0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f10:	f7ff f822 	bl	8000f58 <HAL_GetTick>
 8001f14:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f16:	e00a      	b.n	8001f2e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f18:	f7ff f81e 	bl	8000f58 <HAL_GetTick>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d901      	bls.n	8001f2e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	e06e      	b.n	800200c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f2e:	4b3a      	ldr	r3, [pc, #232]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	f003 020c 	and.w	r2, r3, #12
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	685b      	ldr	r3, [r3, #4]
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d1eb      	bne.n	8001f18 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0302 	and.w	r3, r3, #2
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d010      	beq.n	8001f6e <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	689a      	ldr	r2, [r3, #8]
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d208      	bcs.n	8001f6e <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f5c:	4b2e      	ldr	r3, [pc, #184]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001f5e:	689b      	ldr	r3, [r3, #8]
 8001f60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	492b      	ldr	r1, [pc, #172]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001f6a:	4313      	orrs	r3, r2
 8001f6c:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f6e:	4b29      	ldr	r3, [pc, #164]	; (8002014 <HAL_RCC_ClockConfig+0x1ec>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	683a      	ldr	r2, [r7, #0]
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d210      	bcs.n	8001f9e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f7c:	4b25      	ldr	r3, [pc, #148]	; (8002014 <HAL_RCC_ClockConfig+0x1ec>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 0207 	bic.w	r2, r3, #7
 8001f84:	4923      	ldr	r1, [pc, #140]	; (8002014 <HAL_RCC_ClockConfig+0x1ec>)
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	4313      	orrs	r3, r2
 8001f8a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f8c:	4b21      	ldr	r3, [pc, #132]	; (8002014 <HAL_RCC_ClockConfig+0x1ec>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f003 0307 	and.w	r3, r3, #7
 8001f94:	683a      	ldr	r2, [r7, #0]
 8001f96:	429a      	cmp	r2, r3
 8001f98:	d001      	beq.n	8001f9e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e036      	b.n	800200c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 0304 	and.w	r3, r3, #4
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d008      	beq.n	8001fbc <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001faa:	4b1b      	ldr	r3, [pc, #108]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001fac:	689b      	ldr	r3, [r3, #8]
 8001fae:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	68db      	ldr	r3, [r3, #12]
 8001fb6:	4918      	ldr	r1, [pc, #96]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0308 	and.w	r3, r3, #8
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d009      	beq.n	8001fdc <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001fca:	689b      	ldr	r3, [r3, #8]
 8001fcc:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	691b      	ldr	r3, [r3, #16]
 8001fd4:	00db      	lsls	r3, r3, #3
 8001fd6:	4910      	ldr	r1, [pc, #64]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001fd8:	4313      	orrs	r3, r2
 8001fda:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001fdc:	f000 f824 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <HAL_RCC_ClockConfig+0x1f0>)
 8001fe4:	689b      	ldr	r3, [r3, #8]
 8001fe6:	091b      	lsrs	r3, r3, #4
 8001fe8:	f003 030f 	and.w	r3, r3, #15
 8001fec:	490b      	ldr	r1, [pc, #44]	; (800201c <HAL_RCC_ClockConfig+0x1f4>)
 8001fee:	5ccb      	ldrb	r3, [r1, r3]
 8001ff0:	f003 031f 	and.w	r3, r3, #31
 8001ff4:	fa22 f303 	lsr.w	r3, r2, r3
 8001ff8:	4a09      	ldr	r2, [pc, #36]	; (8002020 <HAL_RCC_ClockConfig+0x1f8>)
 8001ffa:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001ffc:	4b09      	ldr	r3, [pc, #36]	; (8002024 <HAL_RCC_ClockConfig+0x1fc>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4618      	mov	r0, r3
 8002002:	f7fe fd51 	bl	8000aa8 <HAL_InitTick>
 8002006:	4603      	mov	r3, r0
 8002008:	72fb      	strb	r3, [r7, #11]

  return status;
 800200a:	7afb      	ldrb	r3, [r7, #11]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3710      	adds	r7, #16
 8002010:	46bd      	mov	sp, r7
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40022000 	.word	0x40022000
 8002018:	40021000 	.word	0x40021000
 800201c:	080085f0 	.word	0x080085f0
 8002020:	20000000 	.word	0x20000000
 8002024:	20000004 	.word	0x20000004

08002028 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002028:	b480      	push	{r7}
 800202a:	b089      	sub	sp, #36	; 0x24
 800202c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800202e:	2300      	movs	r3, #0
 8002030:	61fb      	str	r3, [r7, #28]
 8002032:	2300      	movs	r3, #0
 8002034:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002036:	4b3e      	ldr	r3, [pc, #248]	; (8002130 <HAL_RCC_GetSysClockFreq+0x108>)
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	f003 030c 	and.w	r3, r3, #12
 800203e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002040:	4b3b      	ldr	r3, [pc, #236]	; (8002130 <HAL_RCC_GetSysClockFreq+0x108>)
 8002042:	68db      	ldr	r3, [r3, #12]
 8002044:	f003 0303 	and.w	r3, r3, #3
 8002048:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <HAL_RCC_GetSysClockFreq+0x34>
 8002050:	693b      	ldr	r3, [r7, #16]
 8002052:	2b0c      	cmp	r3, #12
 8002054:	d121      	bne.n	800209a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	2b01      	cmp	r3, #1
 800205a:	d11e      	bne.n	800209a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800205c:	4b34      	ldr	r3, [pc, #208]	; (8002130 <HAL_RCC_GetSysClockFreq+0x108>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0308 	and.w	r3, r3, #8
 8002064:	2b00      	cmp	r3, #0
 8002066:	d107      	bne.n	8002078 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002068:	4b31      	ldr	r3, [pc, #196]	; (8002130 <HAL_RCC_GetSysClockFreq+0x108>)
 800206a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800206e:	0a1b      	lsrs	r3, r3, #8
 8002070:	f003 030f 	and.w	r3, r3, #15
 8002074:	61fb      	str	r3, [r7, #28]
 8002076:	e005      	b.n	8002084 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002078:	4b2d      	ldr	r3, [pc, #180]	; (8002130 <HAL_RCC_GetSysClockFreq+0x108>)
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	091b      	lsrs	r3, r3, #4
 800207e:	f003 030f 	and.w	r3, r3, #15
 8002082:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002084:	4a2b      	ldr	r2, [pc, #172]	; (8002134 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800208c:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d10d      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002098:	e00a      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	2b04      	cmp	r3, #4
 800209e:	d102      	bne.n	80020a6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020a0:	4b25      	ldr	r3, [pc, #148]	; (8002138 <HAL_RCC_GetSysClockFreq+0x110>)
 80020a2:	61bb      	str	r3, [r7, #24]
 80020a4:	e004      	b.n	80020b0 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020a6:	693b      	ldr	r3, [r7, #16]
 80020a8:	2b08      	cmp	r3, #8
 80020aa:	d101      	bne.n	80020b0 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020ac:	4b23      	ldr	r3, [pc, #140]	; (800213c <HAL_RCC_GetSysClockFreq+0x114>)
 80020ae:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	2b0c      	cmp	r3, #12
 80020b4:	d134      	bne.n	8002120 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020b6:	4b1e      	ldr	r3, [pc, #120]	; (8002130 <HAL_RCC_GetSysClockFreq+0x108>)
 80020b8:	68db      	ldr	r3, [r3, #12]
 80020ba:	f003 0303 	and.w	r3, r3, #3
 80020be:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020c0:	68bb      	ldr	r3, [r7, #8]
 80020c2:	2b02      	cmp	r3, #2
 80020c4:	d003      	beq.n	80020ce <HAL_RCC_GetSysClockFreq+0xa6>
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	2b03      	cmp	r3, #3
 80020ca:	d003      	beq.n	80020d4 <HAL_RCC_GetSysClockFreq+0xac>
 80020cc:	e005      	b.n	80020da <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_RCC_GetSysClockFreq+0x110>)
 80020d0:	617b      	str	r3, [r7, #20]
      break;
 80020d2:	e005      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020d4:	4b19      	ldr	r3, [pc, #100]	; (800213c <HAL_RCC_GetSysClockFreq+0x114>)
 80020d6:	617b      	str	r3, [r7, #20]
      break;
 80020d8:	e002      	b.n	80020e0 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80020da:	69fb      	ldr	r3, [r7, #28]
 80020dc:	617b      	str	r3, [r7, #20]
      break;
 80020de:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80020e0:	4b13      	ldr	r3, [pc, #76]	; (8002130 <HAL_RCC_GetSysClockFreq+0x108>)
 80020e2:	68db      	ldr	r3, [r3, #12]
 80020e4:	091b      	lsrs	r3, r3, #4
 80020e6:	f003 0307 	and.w	r3, r3, #7
 80020ea:	3301      	adds	r3, #1
 80020ec:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80020ee:	4b10      	ldr	r3, [pc, #64]	; (8002130 <HAL_RCC_GetSysClockFreq+0x108>)
 80020f0:	68db      	ldr	r3, [r3, #12]
 80020f2:	0a1b      	lsrs	r3, r3, #8
 80020f4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80020f8:	697a      	ldr	r2, [r7, #20]
 80020fa:	fb03 f202 	mul.w	r2, r3, r2
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	fbb2 f3f3 	udiv	r3, r2, r3
 8002104:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002106:	4b0a      	ldr	r3, [pc, #40]	; (8002130 <HAL_RCC_GetSysClockFreq+0x108>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	0e5b      	lsrs	r3, r3, #25
 800210c:	f003 0303 	and.w	r3, r3, #3
 8002110:	3301      	adds	r3, #1
 8002112:	005b      	lsls	r3, r3, #1
 8002114:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	fbb2 f3f3 	udiv	r3, r2, r3
 800211e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002120:	69bb      	ldr	r3, [r7, #24]
}
 8002122:	4618      	mov	r0, r3
 8002124:	3724      	adds	r7, #36	; 0x24
 8002126:	46bd      	mov	sp, r7
 8002128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212c:	4770      	bx	lr
 800212e:	bf00      	nop
 8002130:	40021000 	.word	0x40021000
 8002134:	08008608 	.word	0x08008608
 8002138:	00f42400 	.word	0x00f42400
 800213c:	007a1200 	.word	0x007a1200

08002140 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002140:	b480      	push	{r7}
 8002142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002144:	4b03      	ldr	r3, [pc, #12]	; (8002154 <HAL_RCC_GetHCLKFreq+0x14>)
 8002146:	681b      	ldr	r3, [r3, #0]
}
 8002148:	4618      	mov	r0, r3
 800214a:	46bd      	mov	sp, r7
 800214c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002150:	4770      	bx	lr
 8002152:	bf00      	nop
 8002154:	20000000 	.word	0x20000000

08002158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800215c:	f7ff fff0 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 8002160:	4602      	mov	r2, r0
 8002162:	4b06      	ldr	r3, [pc, #24]	; (800217c <HAL_RCC_GetPCLK1Freq+0x24>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	0a1b      	lsrs	r3, r3, #8
 8002168:	f003 0307 	and.w	r3, r3, #7
 800216c:	4904      	ldr	r1, [pc, #16]	; (8002180 <HAL_RCC_GetPCLK1Freq+0x28>)
 800216e:	5ccb      	ldrb	r3, [r1, r3]
 8002170:	f003 031f 	and.w	r3, r3, #31
 8002174:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002178:	4618      	mov	r0, r3
 800217a:	bd80      	pop	{r7, pc}
 800217c:	40021000 	.word	0x40021000
 8002180:	08008600 	.word	0x08008600

08002184 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002188:	f7ff ffda 	bl	8002140 <HAL_RCC_GetHCLKFreq>
 800218c:	4602      	mov	r2, r0
 800218e:	4b06      	ldr	r3, [pc, #24]	; (80021a8 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002190:	689b      	ldr	r3, [r3, #8]
 8002192:	0adb      	lsrs	r3, r3, #11
 8002194:	f003 0307 	and.w	r3, r3, #7
 8002198:	4904      	ldr	r1, [pc, #16]	; (80021ac <HAL_RCC_GetPCLK2Freq+0x28>)
 800219a:	5ccb      	ldrb	r3, [r1, r3]
 800219c:	f003 031f 	and.w	r3, r3, #31
 80021a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80021a4:	4618      	mov	r0, r3
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	40021000 	.word	0x40021000
 80021ac:	08008600 	.word	0x08008600

080021b0 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80021b0:	b480      	push	{r7}
 80021b2:	b083      	sub	sp, #12
 80021b4:	af00      	add	r7, sp, #0
 80021b6:	6078      	str	r0, [r7, #4]
 80021b8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	220f      	movs	r2, #15
 80021be:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80021c0:	4b12      	ldr	r3, [pc, #72]	; (800220c <HAL_RCC_GetClockConfig+0x5c>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	f003 0203 	and.w	r2, r3, #3
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <HAL_RCC_GetClockConfig+0x5c>)
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80021d8:	4b0c      	ldr	r3, [pc, #48]	; (800220c <HAL_RCC_GetClockConfig+0x5c>)
 80021da:	689b      	ldr	r3, [r3, #8]
 80021dc:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80021e4:	4b09      	ldr	r3, [pc, #36]	; (800220c <HAL_RCC_GetClockConfig+0x5c>)
 80021e6:	689b      	ldr	r3, [r3, #8]
 80021e8:	08db      	lsrs	r3, r3, #3
 80021ea:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80021f2:	4b07      	ldr	r3, [pc, #28]	; (8002210 <HAL_RCC_GetClockConfig+0x60>)
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f003 0207 	and.w	r2, r3, #7
 80021fa:	683b      	ldr	r3, [r7, #0]
 80021fc:	601a      	str	r2, [r3, #0]
}
 80021fe:	bf00      	nop
 8002200:	370c      	adds	r7, #12
 8002202:	46bd      	mov	sp, r7
 8002204:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002208:	4770      	bx	lr
 800220a:	bf00      	nop
 800220c:	40021000 	.word	0x40021000
 8002210:	40022000 	.word	0x40022000

08002214 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b086      	sub	sp, #24
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800221c:	2300      	movs	r3, #0
 800221e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002220:	4b2a      	ldr	r3, [pc, #168]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002222:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002224:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 800222c:	f7ff f984 	bl	8001538 <HAL_PWREx_GetVoltageRange>
 8002230:	6178      	str	r0, [r7, #20]
 8002232:	e014      	b.n	800225e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002234:	4b25      	ldr	r3, [pc, #148]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002238:	4a24      	ldr	r2, [pc, #144]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800223a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800223e:	6593      	str	r3, [r2, #88]	; 0x58
 8002240:	4b22      	ldr	r3, [pc, #136]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002242:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002244:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002248:	60fb      	str	r3, [r7, #12]
 800224a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800224c:	f7ff f974 	bl	8001538 <HAL_PWREx_GetVoltageRange>
 8002250:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002252:	4b1e      	ldr	r3, [pc, #120]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002256:	4a1d      	ldr	r2, [pc, #116]	; (80022cc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002258:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800225c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800225e:	697b      	ldr	r3, [r7, #20]
 8002260:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002264:	d10b      	bne.n	800227e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	2b80      	cmp	r3, #128	; 0x80
 800226a:	d919      	bls.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2ba0      	cmp	r3, #160	; 0xa0
 8002270:	d902      	bls.n	8002278 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002272:	2302      	movs	r3, #2
 8002274:	613b      	str	r3, [r7, #16]
 8002276:	e013      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002278:	2301      	movs	r3, #1
 800227a:	613b      	str	r3, [r7, #16]
 800227c:	e010      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2b80      	cmp	r3, #128	; 0x80
 8002282:	d902      	bls.n	800228a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002284:	2303      	movs	r3, #3
 8002286:	613b      	str	r3, [r7, #16]
 8002288:	e00a      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	2b80      	cmp	r3, #128	; 0x80
 800228e:	d102      	bne.n	8002296 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002290:	2302      	movs	r3, #2
 8002292:	613b      	str	r3, [r7, #16]
 8002294:	e004      	b.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	2b70      	cmp	r3, #112	; 0x70
 800229a:	d101      	bne.n	80022a0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800229c:	2301      	movs	r3, #1
 800229e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80022a0:	4b0b      	ldr	r3, [pc, #44]	; (80022d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f023 0207 	bic.w	r2, r3, #7
 80022a8:	4909      	ldr	r1, [pc, #36]	; (80022d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	4313      	orrs	r3, r2
 80022ae:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80022b0:	4b07      	ldr	r3, [pc, #28]	; (80022d0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0307 	and.w	r3, r3, #7
 80022b8:	693a      	ldr	r2, [r7, #16]
 80022ba:	429a      	cmp	r2, r3
 80022bc:	d001      	beq.n	80022c2 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80022be:	2301      	movs	r3, #1
 80022c0:	e000      	b.n	80022c4 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	4618      	mov	r0, r3
 80022c6:	3718      	adds	r7, #24
 80022c8:	46bd      	mov	sp, r7
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	40022000 	.word	0x40022000

080022d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80022d4:	b580      	push	{r7, lr}
 80022d6:	b086      	sub	sp, #24
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80022dc:	2300      	movs	r3, #0
 80022de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022e0:	2300      	movs	r3, #0
 80022e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d031      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022f4:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022f8:	d01a      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80022fa:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022fe:	d814      	bhi.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002300:	2b00      	cmp	r3, #0
 8002302:	d009      	beq.n	8002318 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8002304:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002308:	d10f      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 800230a:	4b5d      	ldr	r3, [pc, #372]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800230c:	68db      	ldr	r3, [r3, #12]
 800230e:	4a5c      	ldr	r2, [pc, #368]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002310:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002314:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002316:	e00c      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	3304      	adds	r3, #4
 800231c:	2100      	movs	r1, #0
 800231e:	4618      	mov	r0, r3
 8002320:	f000 f9ce 	bl	80026c0 <RCCEx_PLLSAI1_Config>
 8002324:	4603      	mov	r3, r0
 8002326:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002328:	e003      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	74fb      	strb	r3, [r7, #19]
      break;
 800232e:	e000      	b.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002330:	bf00      	nop
    }

    if(ret == HAL_OK)
 8002332:	7cfb      	ldrb	r3, [r7, #19]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10b      	bne.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002338:	4b51      	ldr	r3, [pc, #324]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800233a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002346:	494e      	ldr	r1, [pc, #312]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002348:	4313      	orrs	r3, r2
 800234a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800234e:	e001      	b.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002350:	7cfb      	ldrb	r3, [r7, #19]
 8002352:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 809e 	beq.w	800249e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002362:	2300      	movs	r3, #0
 8002364:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002366:	4b46      	ldr	r3, [pc, #280]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002368:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800236a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d101      	bne.n	8002376 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002372:	2301      	movs	r3, #1
 8002374:	e000      	b.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002376:	2300      	movs	r3, #0
 8002378:	2b00      	cmp	r3, #0
 800237a:	d00d      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800237c:	4b40      	ldr	r3, [pc, #256]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800237e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002380:	4a3f      	ldr	r2, [pc, #252]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002382:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002386:	6593      	str	r3, [r2, #88]	; 0x58
 8002388:	4b3d      	ldr	r3, [pc, #244]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800238a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800238c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002390:	60bb      	str	r3, [r7, #8]
 8002392:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002394:	2301      	movs	r3, #1
 8002396:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002398:	4b3a      	ldr	r3, [pc, #232]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4a39      	ldr	r2, [pc, #228]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800239e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80023a4:	f7fe fdd8 	bl	8000f58 <HAL_GetTick>
 80023a8:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023aa:	e009      	b.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80023ac:	f7fe fdd4 	bl	8000f58 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b02      	cmp	r3, #2
 80023b8:	d902      	bls.n	80023c0 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	74fb      	strb	r3, [r7, #19]
        break;
 80023be:	e005      	b.n	80023cc <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80023c0:	4b30      	ldr	r3, [pc, #192]	; (8002484 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d0ef      	beq.n	80023ac <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 80023cc:	7cfb      	ldrb	r3, [r7, #19]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d15a      	bne.n	8002488 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80023d2:	4b2b      	ldr	r3, [pc, #172]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80023dc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d01e      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023e8:	697a      	ldr	r2, [r7, #20]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d019      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80023ee:	4b24      	ldr	r3, [pc, #144]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023f4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80023f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80023fa:	4b21      	ldr	r3, [pc, #132]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80023fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002400:	4a1f      	ldr	r2, [pc, #124]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002402:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002406:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800240a:	4b1d      	ldr	r3, [pc, #116]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800240c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002410:	4a1b      	ldr	r2, [pc, #108]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002412:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002416:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800241a:	4a19      	ldr	r2, [pc, #100]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002422:	697b      	ldr	r3, [r7, #20]
 8002424:	f003 0301 	and.w	r3, r3, #1
 8002428:	2b00      	cmp	r3, #0
 800242a:	d016      	beq.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800242c:	f7fe fd94 	bl	8000f58 <HAL_GetTick>
 8002430:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002432:	e00b      	b.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002434:	f7fe fd90 	bl	8000f58 <HAL_GetTick>
 8002438:	4602      	mov	r2, r0
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002442:	4293      	cmp	r3, r2
 8002444:	d902      	bls.n	800244c <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002446:	2303      	movs	r3, #3
 8002448:	74fb      	strb	r3, [r7, #19]
            break;
 800244a:	e006      	b.n	800245a <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800244c:	4b0c      	ldr	r3, [pc, #48]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800244e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002452:	f003 0302 	and.w	r3, r3, #2
 8002456:	2b00      	cmp	r3, #0
 8002458:	d0ec      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800245a:	7cfb      	ldrb	r3, [r7, #19]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d10b      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002460:	4b07      	ldr	r3, [pc, #28]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002462:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002466:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800246e:	4904      	ldr	r1, [pc, #16]	; (8002480 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002470:	4313      	orrs	r3, r2
 8002472:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002476:	e009      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002478:	7cfb      	ldrb	r3, [r7, #19]
 800247a:	74bb      	strb	r3, [r7, #18]
 800247c:	e006      	b.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800247e:	bf00      	nop
 8002480:	40021000 	.word	0x40021000
 8002484:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002488:	7cfb      	ldrb	r3, [r7, #19]
 800248a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800248c:	7c7b      	ldrb	r3, [r7, #17]
 800248e:	2b01      	cmp	r3, #1
 8002490:	d105      	bne.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002492:	4b8a      	ldr	r3, [pc, #552]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002494:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002496:	4a89      	ldr	r2, [pc, #548]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002498:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800249c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f003 0301 	and.w	r3, r3, #1
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d00a      	beq.n	80024c0 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80024aa:	4b84      	ldr	r3, [pc, #528]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024b0:	f023 0203 	bic.w	r2, r3, #3
 80024b4:	687b      	ldr	r3, [r7, #4]
 80024b6:	6a1b      	ldr	r3, [r3, #32]
 80024b8:	4980      	ldr	r1, [pc, #512]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ba:	4313      	orrs	r3, r2
 80024bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f003 0302 	and.w	r3, r3, #2
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d00a      	beq.n	80024e2 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80024cc:	4b7b      	ldr	r3, [pc, #492]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024d2:	f023 020c 	bic.w	r2, r3, #12
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024da:	4978      	ldr	r1, [pc, #480]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f003 0320 	and.w	r3, r3, #32
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d00a      	beq.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80024ee:	4b73      	ldr	r3, [pc, #460]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024f4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	496f      	ldr	r1, [pc, #444]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80024fe:	4313      	orrs	r3, r2
 8002500:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800250c:	2b00      	cmp	r3, #0
 800250e:	d00a      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002510:	4b6a      	ldr	r3, [pc, #424]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002512:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002516:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800251e:	4967      	ldr	r1, [pc, #412]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00a      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002532:	4b62      	ldr	r3, [pc, #392]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002534:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002538:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002540:	495e      	ldr	r1, [pc, #376]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002542:	4313      	orrs	r3, r2
 8002544:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002550:	2b00      	cmp	r3, #0
 8002552:	d00a      	beq.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002554:	4b59      	ldr	r3, [pc, #356]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002556:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800255a:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002562:	4956      	ldr	r1, [pc, #344]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002564:	4313      	orrs	r3, r2
 8002566:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002572:	2b00      	cmp	r3, #0
 8002574:	d00a      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002576:	4b51      	ldr	r3, [pc, #324]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002578:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800257c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002584:	494d      	ldr	r1, [pc, #308]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002586:	4313      	orrs	r3, r2
 8002588:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002594:	2b00      	cmp	r3, #0
 8002596:	d028      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002598:	4b48      	ldr	r3, [pc, #288]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800259a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800259e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a6:	4945      	ldr	r1, [pc, #276]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80025b6:	d106      	bne.n	80025c6 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80025b8:	4b40      	ldr	r3, [pc, #256]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025ba:	68db      	ldr	r3, [r3, #12]
 80025bc:	4a3f      	ldr	r2, [pc, #252]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025be:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80025c2:	60d3      	str	r3, [r2, #12]
 80025c4:	e011      	b.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80025ce:	d10c      	bne.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	3304      	adds	r3, #4
 80025d4:	2101      	movs	r1, #1
 80025d6:	4618      	mov	r0, r3
 80025d8:	f000 f872 	bl	80026c0 <RCCEx_PLLSAI1_Config>
 80025dc:	4603      	mov	r3, r0
 80025de:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80025e0:	7cfb      	ldrb	r3, [r7, #19]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d001      	beq.n	80025ea <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 80025e6:	7cfb      	ldrb	r3, [r7, #19]
 80025e8:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d028      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80025f6:	4b31      	ldr	r3, [pc, #196]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80025f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025fc:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002604:	492d      	ldr	r1, [pc, #180]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002606:	4313      	orrs	r3, r2
 8002608:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002610:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002614:	d106      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002616:	4b29      	ldr	r3, [pc, #164]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	4a28      	ldr	r2, [pc, #160]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800261c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002620:	60d3      	str	r3, [r2, #12]
 8002622:	e011      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002628:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800262c:	d10c      	bne.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	3304      	adds	r3, #4
 8002632:	2101      	movs	r1, #1
 8002634:	4618      	mov	r0, r3
 8002636:	f000 f843 	bl	80026c0 <RCCEx_PLLSAI1_Config>
 800263a:	4603      	mov	r3, r0
 800263c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800263e:	7cfb      	ldrb	r3, [r7, #19]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d001      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002644:	7cfb      	ldrb	r3, [r7, #19]
 8002646:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d01c      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002654:	4b19      	ldr	r3, [pc, #100]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002656:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800265a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002662:	4916      	ldr	r1, [pc, #88]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002664:	4313      	orrs	r3, r2
 8002666:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800266e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002672:	d10c      	bne.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	3304      	adds	r3, #4
 8002678:	2102      	movs	r1, #2
 800267a:	4618      	mov	r0, r3
 800267c:	f000 f820 	bl	80026c0 <RCCEx_PLLSAI1_Config>
 8002680:	4603      	mov	r3, r0
 8002682:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002684:	7cfb      	ldrb	r3, [r7, #19]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d001      	beq.n	800268e <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 800268a:	7cfb      	ldrb	r3, [r7, #19]
 800268c:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00a      	beq.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800269a:	4b08      	ldr	r3, [pc, #32]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800269c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026a0:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a8:	4904      	ldr	r1, [pc, #16]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80026b0:	7cbb      	ldrb	r3, [r7, #18]
}
 80026b2:	4618      	mov	r0, r3
 80026b4:	3718      	adds	r7, #24
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bd80      	pop	{r7, pc}
 80026ba:	bf00      	nop
 80026bc:	40021000 	.word	0x40021000

080026c0 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	6078      	str	r0, [r7, #4]
 80026c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80026ca:	2300      	movs	r3, #0
 80026cc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80026ce:	4b74      	ldr	r3, [pc, #464]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026d0:	68db      	ldr	r3, [r3, #12]
 80026d2:	f003 0303 	and.w	r3, r3, #3
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d018      	beq.n	800270c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80026da:	4b71      	ldr	r3, [pc, #452]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026dc:	68db      	ldr	r3, [r3, #12]
 80026de:	f003 0203 	and.w	r2, r3, #3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d10d      	bne.n	8002706 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
       ||
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d009      	beq.n	8002706 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80026f2:	4b6b      	ldr	r3, [pc, #428]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	091b      	lsrs	r3, r3, #4
 80026f8:	f003 0307 	and.w	r3, r3, #7
 80026fc:	1c5a      	adds	r2, r3, #1
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	685b      	ldr	r3, [r3, #4]
       ||
 8002702:	429a      	cmp	r2, r3
 8002704:	d047      	beq.n	8002796 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002706:	2301      	movs	r3, #1
 8002708:	73fb      	strb	r3, [r7, #15]
 800270a:	e044      	b.n	8002796 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b03      	cmp	r3, #3
 8002712:	d018      	beq.n	8002746 <RCCEx_PLLSAI1_Config+0x86>
 8002714:	2b03      	cmp	r3, #3
 8002716:	d825      	bhi.n	8002764 <RCCEx_PLLSAI1_Config+0xa4>
 8002718:	2b01      	cmp	r3, #1
 800271a:	d002      	beq.n	8002722 <RCCEx_PLLSAI1_Config+0x62>
 800271c:	2b02      	cmp	r3, #2
 800271e:	d009      	beq.n	8002734 <RCCEx_PLLSAI1_Config+0x74>
 8002720:	e020      	b.n	8002764 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002722:	4b5f      	ldr	r3, [pc, #380]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f003 0302 	and.w	r3, r3, #2
 800272a:	2b00      	cmp	r3, #0
 800272c:	d11d      	bne.n	800276a <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002732:	e01a      	b.n	800276a <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002734:	4b5a      	ldr	r3, [pc, #360]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800273c:	2b00      	cmp	r3, #0
 800273e:	d116      	bne.n	800276e <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002740:	2301      	movs	r3, #1
 8002742:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002744:	e013      	b.n	800276e <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002746:	4b56      	ldr	r3, [pc, #344]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10f      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002752:	4b53      	ldr	r3, [pc, #332]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800275a:	2b00      	cmp	r3, #0
 800275c:	d109      	bne.n	8002772 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800275e:	2301      	movs	r3, #1
 8002760:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002762:	e006      	b.n	8002772 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	73fb      	strb	r3, [r7, #15]
      break;
 8002768:	e004      	b.n	8002774 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800276a:	bf00      	nop
 800276c:	e002      	b.n	8002774 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800276e:	bf00      	nop
 8002770:	e000      	b.n	8002774 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002772:	bf00      	nop
    }

    if(status == HAL_OK)
 8002774:	7bfb      	ldrb	r3, [r7, #15]
 8002776:	2b00      	cmp	r3, #0
 8002778:	d10d      	bne.n	8002796 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800277a:	4b49      	ldr	r3, [pc, #292]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800277c:	68db      	ldr	r3, [r3, #12]
 800277e:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	6819      	ldr	r1, [r3, #0]
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	3b01      	subs	r3, #1
 800278c:	011b      	lsls	r3, r3, #4
 800278e:	430b      	orrs	r3, r1
 8002790:	4943      	ldr	r1, [pc, #268]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002792:	4313      	orrs	r3, r2
 8002794:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002796:	7bfb      	ldrb	r3, [r7, #15]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d17c      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800279c:	4b40      	ldr	r3, [pc, #256]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a3f      	ldr	r2, [pc, #252]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027a2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80027a6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027a8:	f7fe fbd6 	bl	8000f58 <HAL_GetTick>
 80027ac:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027ae:	e009      	b.n	80027c4 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80027b0:	f7fe fbd2 	bl	8000f58 <HAL_GetTick>
 80027b4:	4602      	mov	r2, r0
 80027b6:	68bb      	ldr	r3, [r7, #8]
 80027b8:	1ad3      	subs	r3, r2, r3
 80027ba:	2b02      	cmp	r3, #2
 80027bc:	d902      	bls.n	80027c4 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80027be:	2303      	movs	r3, #3
 80027c0:	73fb      	strb	r3, [r7, #15]
        break;
 80027c2:	e005      	b.n	80027d0 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80027c4:	4b36      	ldr	r3, [pc, #216]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d1ef      	bne.n	80027b0 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80027d0:	7bfb      	ldrb	r3, [r7, #15]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d15f      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80027d6:	683b      	ldr	r3, [r7, #0]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d110      	bne.n	80027fe <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80027dc:	4b30      	ldr	r3, [pc, #192]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027de:	691b      	ldr	r3, [r3, #16]
 80027e0:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80027e4:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80027e8:	687a      	ldr	r2, [r7, #4]
 80027ea:	6892      	ldr	r2, [r2, #8]
 80027ec:	0211      	lsls	r1, r2, #8
 80027ee:	687a      	ldr	r2, [r7, #4]
 80027f0:	68d2      	ldr	r2, [r2, #12]
 80027f2:	06d2      	lsls	r2, r2, #27
 80027f4:	430a      	orrs	r2, r1
 80027f6:	492a      	ldr	r1, [pc, #168]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 80027f8:	4313      	orrs	r3, r2
 80027fa:	610b      	str	r3, [r1, #16]
 80027fc:	e027      	b.n	800284e <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80027fe:	683b      	ldr	r3, [r7, #0]
 8002800:	2b01      	cmp	r3, #1
 8002802:	d112      	bne.n	800282a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002804:	4b26      	ldr	r3, [pc, #152]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002806:	691b      	ldr	r3, [r3, #16]
 8002808:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800280c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002810:	687a      	ldr	r2, [r7, #4]
 8002812:	6892      	ldr	r2, [r2, #8]
 8002814:	0211      	lsls	r1, r2, #8
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	6912      	ldr	r2, [r2, #16]
 800281a:	0852      	lsrs	r2, r2, #1
 800281c:	3a01      	subs	r2, #1
 800281e:	0552      	lsls	r2, r2, #21
 8002820:	430a      	orrs	r2, r1
 8002822:	491f      	ldr	r1, [pc, #124]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002824:	4313      	orrs	r3, r2
 8002826:	610b      	str	r3, [r1, #16]
 8002828:	e011      	b.n	800284e <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800282a:	4b1d      	ldr	r3, [pc, #116]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002832:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002836:	687a      	ldr	r2, [r7, #4]
 8002838:	6892      	ldr	r2, [r2, #8]
 800283a:	0211      	lsls	r1, r2, #8
 800283c:	687a      	ldr	r2, [r7, #4]
 800283e:	6952      	ldr	r2, [r2, #20]
 8002840:	0852      	lsrs	r2, r2, #1
 8002842:	3a01      	subs	r2, #1
 8002844:	0652      	lsls	r2, r2, #25
 8002846:	430a      	orrs	r2, r1
 8002848:	4915      	ldr	r1, [pc, #84]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800284a:	4313      	orrs	r3, r2
 800284c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a13      	ldr	r2, [pc, #76]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002854:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002858:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800285a:	f7fe fb7d 	bl	8000f58 <HAL_GetTick>
 800285e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002860:	e009      	b.n	8002876 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002862:	f7fe fb79 	bl	8000f58 <HAL_GetTick>
 8002866:	4602      	mov	r2, r0
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	1ad3      	subs	r3, r2, r3
 800286c:	2b02      	cmp	r3, #2
 800286e:	d902      	bls.n	8002876 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002870:	2303      	movs	r3, #3
 8002872:	73fb      	strb	r3, [r7, #15]
          break;
 8002874:	e005      	b.n	8002882 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002876:	4b0a      	ldr	r3, [pc, #40]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800287e:	2b00      	cmp	r3, #0
 8002880:	d0ef      	beq.n	8002862 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002882:	7bfb      	ldrb	r3, [r7, #15]
 8002884:	2b00      	cmp	r3, #0
 8002886:	d106      	bne.n	8002896 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002888:	4b05      	ldr	r3, [pc, #20]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 800288a:	691a      	ldr	r2, [r3, #16]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	4903      	ldr	r1, [pc, #12]	; (80028a0 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002892:	4313      	orrs	r3, r2
 8002894:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002896:	7bfb      	ldrb	r3, [r7, #15]
}
 8002898:	4618      	mov	r0, r3
 800289a:	3710      	adds	r7, #16
 800289c:	46bd      	mov	sp, r7
 800289e:	bd80      	pop	{r7, pc}
 80028a0:	40021000 	.word	0x40021000

080028a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b082      	sub	sp, #8
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d101      	bne.n	80028b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e049      	b.n	800294a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028bc:	b2db      	uxtb	r3, r3
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d106      	bne.n	80028d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	2200      	movs	r2, #0
 80028c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f841 	bl	8002952 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	2202      	movs	r2, #2
 80028d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681a      	ldr	r2, [r3, #0]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	3304      	adds	r3, #4
 80028e0:	4619      	mov	r1, r3
 80028e2:	4610      	mov	r0, r2
 80028e4:	f000 f9dc 	bl	8002ca0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2201      	movs	r2, #1
 80028ec:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	2201      	movs	r2, #1
 80028f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2201      	movs	r2, #1
 80028fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2201      	movs	r2, #1
 8002904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	2201      	movs	r2, #1
 800290c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002948:	2300      	movs	r3, #0
}
 800294a:	4618      	mov	r0, r3
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002952:	b480      	push	{r7}
 8002954:	b083      	sub	sp, #12
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800295a:	bf00      	nop
 800295c:	370c      	adds	r7, #12
 800295e:	46bd      	mov	sp, r7
 8002960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002964:	4770      	bx	lr
	...

08002968 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002968:	b480      	push	{r7}
 800296a:	b085      	sub	sp, #20
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	d001      	beq.n	8002980 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800297c:	2301      	movs	r3, #1
 800297e:	e03b      	b.n	80029f8 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	2202      	movs	r2, #2
 8002984:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68da      	ldr	r2, [r3, #12]
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	f042 0201 	orr.w	r2, r2, #1
 8002996:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	681b      	ldr	r3, [r3, #0]
 800299c:	4a19      	ldr	r2, [pc, #100]	; (8002a04 <HAL_TIM_Base_Start_IT+0x9c>)
 800299e:	4293      	cmp	r3, r2
 80029a0:	d009      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x4e>
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029aa:	d004      	beq.n	80029b6 <HAL_TIM_Base_Start_IT+0x4e>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a15      	ldr	r2, [pc, #84]	; (8002a08 <HAL_TIM_Base_Start_IT+0xa0>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d115      	bne.n	80029e2 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	689a      	ldr	r2, [r3, #8]
 80029bc:	4b13      	ldr	r3, [pc, #76]	; (8002a0c <HAL_TIM_Base_Start_IT+0xa4>)
 80029be:	4013      	ands	r3, r2
 80029c0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029c2:	68fb      	ldr	r3, [r7, #12]
 80029c4:	2b06      	cmp	r3, #6
 80029c6:	d015      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x8c>
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029ce:	d011      	beq.n	80029f4 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	681a      	ldr	r2, [r3, #0]
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f042 0201 	orr.w	r2, r2, #1
 80029de:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e0:	e008      	b.n	80029f4 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	681a      	ldr	r2, [r3, #0]
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	f042 0201 	orr.w	r2, r2, #1
 80029f0:	601a      	str	r2, [r3, #0]
 80029f2:	e000      	b.n	80029f6 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029f4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80029f6:	2300      	movs	r3, #0
}
 80029f8:	4618      	mov	r0, r3
 80029fa:	3714      	adds	r7, #20
 80029fc:	46bd      	mov	sp, r7
 80029fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a02:	4770      	bx	lr
 8002a04:	40012c00 	.word	0x40012c00
 8002a08:	40014000 	.word	0x40014000
 8002a0c:	00010007 	.word	0x00010007

08002a10 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002a10:	b580      	push	{r7, lr}
 8002a12:	b082      	sub	sp, #8
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	691b      	ldr	r3, [r3, #16]
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	2b02      	cmp	r3, #2
 8002a24:	d122      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68db      	ldr	r3, [r3, #12]
 8002a2c:	f003 0302 	and.w	r3, r3, #2
 8002a30:	2b02      	cmp	r3, #2
 8002a32:	d11b      	bne.n	8002a6c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f06f 0202 	mvn.w	r2, #2
 8002a3c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	2201      	movs	r2, #1
 8002a42:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0303 	and.w	r3, r3, #3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d003      	beq.n	8002a5a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002a52:	6878      	ldr	r0, [r7, #4]
 8002a54:	f000 f905 	bl	8002c62 <HAL_TIM_IC_CaptureCallback>
 8002a58:	e005      	b.n	8002a66 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f000 f8f7 	bl	8002c4e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a60:	6878      	ldr	r0, [r7, #4]
 8002a62:	f000 f908 	bl	8002c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	691b      	ldr	r3, [r3, #16]
 8002a72:	f003 0304 	and.w	r3, r3, #4
 8002a76:	2b04      	cmp	r3, #4
 8002a78:	d122      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	f003 0304 	and.w	r3, r3, #4
 8002a84:	2b04      	cmp	r3, #4
 8002a86:	d11b      	bne.n	8002ac0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	f06f 0204 	mvn.w	r2, #4
 8002a90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	2202      	movs	r2, #2
 8002a96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	699b      	ldr	r3, [r3, #24]
 8002a9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d003      	beq.n	8002aae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002aa6:	6878      	ldr	r0, [r7, #4]
 8002aa8:	f000 f8db 	bl	8002c62 <HAL_TIM_IC_CaptureCallback>
 8002aac:	e005      	b.n	8002aba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f000 f8cd 	bl	8002c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ab4:	6878      	ldr	r0, [r7, #4]
 8002ab6:	f000 f8de 	bl	8002c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	f003 0308 	and.w	r3, r3, #8
 8002aca:	2b08      	cmp	r3, #8
 8002acc:	d122      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	68db      	ldr	r3, [r3, #12]
 8002ad4:	f003 0308 	and.w	r3, r3, #8
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d11b      	bne.n	8002b14 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f06f 0208 	mvn.w	r2, #8
 8002ae4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2204      	movs	r2, #4
 8002aea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	69db      	ldr	r3, [r3, #28]
 8002af2:	f003 0303 	and.w	r3, r3, #3
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d003      	beq.n	8002b02 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002afa:	6878      	ldr	r0, [r7, #4]
 8002afc:	f000 f8b1 	bl	8002c62 <HAL_TIM_IC_CaptureCallback>
 8002b00:	e005      	b.n	8002b0e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	f000 f8a3 	bl	8002c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b08:	6878      	ldr	r0, [r7, #4]
 8002b0a:	f000 f8b4 	bl	8002c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2200      	movs	r2, #0
 8002b12:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	691b      	ldr	r3, [r3, #16]
 8002b1a:	f003 0310 	and.w	r3, r3, #16
 8002b1e:	2b10      	cmp	r3, #16
 8002b20:	d122      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	68db      	ldr	r3, [r3, #12]
 8002b28:	f003 0310 	and.w	r3, r3, #16
 8002b2c:	2b10      	cmp	r3, #16
 8002b2e:	d11b      	bne.n	8002b68 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f06f 0210 	mvn.w	r2, #16
 8002b38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	2208      	movs	r2, #8
 8002b3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	69db      	ldr	r3, [r3, #28]
 8002b46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d003      	beq.n	8002b56 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b4e:	6878      	ldr	r0, [r7, #4]
 8002b50:	f000 f887 	bl	8002c62 <HAL_TIM_IC_CaptureCallback>
 8002b54:	e005      	b.n	8002b62 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b56:	6878      	ldr	r0, [r7, #4]
 8002b58:	f000 f879 	bl	8002c4e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f000 f88a 	bl	8002c76 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	2200      	movs	r2, #0
 8002b66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d10e      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	68db      	ldr	r3, [r3, #12]
 8002b7c:	f003 0301 	and.w	r3, r3, #1
 8002b80:	2b01      	cmp	r3, #1
 8002b82:	d107      	bne.n	8002b94 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f06f 0201 	mvn.w	r2, #1
 8002b8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f7fd fdc6 	bl	8000720 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b9e:	2b80      	cmp	r3, #128	; 0x80
 8002ba0:	d10e      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	68db      	ldr	r3, [r3, #12]
 8002ba8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bac:	2b80      	cmp	r3, #128	; 0x80
 8002bae:	d107      	bne.n	8002bc0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002bb8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002bba:	6878      	ldr	r0, [r7, #4]
 8002bbc:	f000 f8de 	bl	8002d7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	691b      	ldr	r3, [r3, #16]
 8002bc6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002bca:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002bce:	d10e      	bne.n	8002bee <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	68db      	ldr	r3, [r3, #12]
 8002bd6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002bda:	2b80      	cmp	r3, #128	; 0x80
 8002bdc:	d107      	bne.n	8002bee <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002be6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 f8d1 	bl	8002d90 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	691b      	ldr	r3, [r3, #16]
 8002bf4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bf8:	2b40      	cmp	r3, #64	; 0x40
 8002bfa:	d10e      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	68db      	ldr	r3, [r3, #12]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b40      	cmp	r3, #64	; 0x40
 8002c08:	d107      	bne.n	8002c1a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002c12:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 f838 	bl	8002c8a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	691b      	ldr	r3, [r3, #16]
 8002c20:	f003 0320 	and.w	r3, r3, #32
 8002c24:	2b20      	cmp	r3, #32
 8002c26:	d10e      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	68db      	ldr	r3, [r3, #12]
 8002c2e:	f003 0320 	and.w	r3, r3, #32
 8002c32:	2b20      	cmp	r3, #32
 8002c34:	d107      	bne.n	8002c46 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	f06f 0220 	mvn.w	r2, #32
 8002c3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002c40:	6878      	ldr	r0, [r7, #4]
 8002c42:	f000 f891 	bl	8002d68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002c46:	bf00      	nop
 8002c48:	3708      	adds	r7, #8
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}

08002c4e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002c56:	bf00      	nop
 8002c58:	370c      	adds	r7, #12
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c60:	4770      	bx	lr

08002c62 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002c62:	b480      	push	{r7}
 8002c64:	b083      	sub	sp, #12
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002c6a:	bf00      	nop
 8002c6c:	370c      	adds	r7, #12
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr

08002c76 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002c76:	b480      	push	{r7}
 8002c78:	b083      	sub	sp, #12
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr

08002c8a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002c8a:	b480      	push	{r7}
 8002c8c:	b083      	sub	sp, #12
 8002c8e:	af00      	add	r7, sp, #0
 8002c90:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002c92:	bf00      	nop
 8002c94:	370c      	adds	r7, #12
 8002c96:	46bd      	mov	sp, r7
 8002c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9c:	4770      	bx	lr
	...

08002ca0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ca0:	b480      	push	{r7}
 8002ca2:	b085      	sub	sp, #20
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	6078      	str	r0, [r7, #4]
 8002ca8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4a2a      	ldr	r2, [pc, #168]	; (8002d5c <TIM_Base_SetConfig+0xbc>)
 8002cb4:	4293      	cmp	r3, r2
 8002cb6:	d003      	beq.n	8002cc0 <TIM_Base_SetConfig+0x20>
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002cbe:	d108      	bne.n	8002cd2 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002cc6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	68fa      	ldr	r2, [r7, #12]
 8002cce:	4313      	orrs	r3, r2
 8002cd0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	4a21      	ldr	r2, [pc, #132]	; (8002d5c <TIM_Base_SetConfig+0xbc>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d00b      	beq.n	8002cf2 <TIM_Base_SetConfig+0x52>
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ce0:	d007      	beq.n	8002cf2 <TIM_Base_SetConfig+0x52>
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	4a1e      	ldr	r2, [pc, #120]	; (8002d60 <TIM_Base_SetConfig+0xc0>)
 8002ce6:	4293      	cmp	r3, r2
 8002ce8:	d003      	beq.n	8002cf2 <TIM_Base_SetConfig+0x52>
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	4a1d      	ldr	r2, [pc, #116]	; (8002d64 <TIM_Base_SetConfig+0xc4>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d108      	bne.n	8002d04 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002cf8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	68db      	ldr	r3, [r3, #12]
 8002cfe:	68fa      	ldr	r2, [r7, #12]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	695b      	ldr	r3, [r3, #20]
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	68fa      	ldr	r2, [r7, #12]
 8002d16:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002d18:	683b      	ldr	r3, [r7, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002d20:	683b      	ldr	r3, [r7, #0]
 8002d22:	681a      	ldr	r2, [r3, #0]
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a0c      	ldr	r2, [pc, #48]	; (8002d5c <TIM_Base_SetConfig+0xbc>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d007      	beq.n	8002d40 <TIM_Base_SetConfig+0xa0>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	4a0b      	ldr	r2, [pc, #44]	; (8002d60 <TIM_Base_SetConfig+0xc0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	d003      	beq.n	8002d40 <TIM_Base_SetConfig+0xa0>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <TIM_Base_SetConfig+0xc4>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d103      	bne.n	8002d48 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	691a      	ldr	r2, [r3, #16]
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	615a      	str	r2, [r3, #20]
}
 8002d4e:	bf00      	nop
 8002d50:	3714      	adds	r7, #20
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
 8002d5a:	bf00      	nop
 8002d5c:	40012c00 	.word	0x40012c00
 8002d60:	40014000 	.word	0x40014000
 8002d64:	40014400 	.word	0x40014400

08002d68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	b083      	sub	sp, #12
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002d70:	bf00      	nop
 8002d72:	370c      	adds	r7, #12
 8002d74:	46bd      	mov	sp, r7
 8002d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7a:	4770      	bx	lr

08002d7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002d84:	bf00      	nop
 8002d86:	370c      	adds	r7, #12
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8e:	4770      	bx	lr

08002d90 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b083      	sub	sp, #12
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002d98:	bf00      	nop
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002da4:	b580      	push	{r7, lr}
 8002da6:	b082      	sub	sp, #8
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d101      	bne.n	8002db6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
 8002db4:	e040      	b.n	8002e38 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d106      	bne.n	8002dcc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002dc6:	6878      	ldr	r0, [r7, #4]
 8002dc8:	f7fd fffe 	bl	8000dc8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2224      	movs	r2, #36	; 0x24
 8002dd0:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	681a      	ldr	r2, [r3, #0]
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f022 0201 	bic.w	r2, r2, #1
 8002de0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002de2:	6878      	ldr	r0, [r7, #4]
 8002de4:	f000 fbc2 	bl	800356c <UART_SetConfig>
 8002de8:	4603      	mov	r3, r0
 8002dea:	2b01      	cmp	r3, #1
 8002dec:	d101      	bne.n	8002df2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002dee:	2301      	movs	r3, #1
 8002df0:	e022      	b.n	8002e38 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d002      	beq.n	8002e00 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	f000 fde2 	bl	80039c4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	685a      	ldr	r2, [r3, #4]
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002e0e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	689a      	ldr	r2, [r3, #8]
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002e1e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002e30:	6878      	ldr	r0, [r7, #4]
 8002e32:	f000 fe69 	bl	8003b08 <UART_CheckIdleState>
 8002e36:	4603      	mov	r3, r0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b08a      	sub	sp, #40	; 0x28
 8002e44:	af02      	add	r7, sp, #8
 8002e46:	60f8      	str	r0, [r7, #12]
 8002e48:	60b9      	str	r1, [r7, #8]
 8002e4a:	603b      	str	r3, [r7, #0]
 8002e4c:	4613      	mov	r3, r2
 8002e4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002e54:	2b20      	cmp	r3, #32
 8002e56:	f040 8082 	bne.w	8002f5e <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002e5a:	68bb      	ldr	r3, [r7, #8]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d002      	beq.n	8002e66 <HAL_UART_Transmit+0x26>
 8002e60:	88fb      	ldrh	r3, [r7, #6]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d101      	bne.n	8002e6a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e07a      	b.n	8002f60 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002e70:	2b01      	cmp	r3, #1
 8002e72:	d101      	bne.n	8002e78 <HAL_UART_Transmit+0x38>
 8002e74:	2302      	movs	r3, #2
 8002e76:	e073      	b.n	8002f60 <HAL_UART_Transmit+0x120>
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2201      	movs	r2, #1
 8002e7c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	2200      	movs	r2, #0
 8002e84:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2221      	movs	r2, #33	; 0x21
 8002e8c:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e8e:	f7fe f863 	bl	8000f58 <HAL_GetTick>
 8002e92:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002e94:	68fb      	ldr	r3, [r7, #12]
 8002e96:	88fa      	ldrh	r2, [r7, #6]
 8002e98:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	88fa      	ldrh	r2, [r7, #6]
 8002ea0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	689b      	ldr	r3, [r3, #8]
 8002ea8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002eac:	d108      	bne.n	8002ec0 <HAL_UART_Transmit+0x80>
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d104      	bne.n	8002ec0 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002eb6:	2300      	movs	r3, #0
 8002eb8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002eba:	68bb      	ldr	r3, [r7, #8]
 8002ebc:	61bb      	str	r3, [r7, #24]
 8002ebe:	e003      	b.n	8002ec8 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002ed0:	e02d      	b.n	8002f2e <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002ed2:	683b      	ldr	r3, [r7, #0]
 8002ed4:	9300      	str	r3, [sp, #0]
 8002ed6:	697b      	ldr	r3, [r7, #20]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	2180      	movs	r1, #128	; 0x80
 8002edc:	68f8      	ldr	r0, [r7, #12]
 8002ede:	f000 fe5c 	bl	8003b9a <UART_WaitOnFlagUntilTimeout>
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d001      	beq.n	8002eec <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e039      	b.n	8002f60 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d10b      	bne.n	8002f0a <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002ef2:	69bb      	ldr	r3, [r7, #24]
 8002ef4:	881a      	ldrh	r2, [r3, #0]
 8002ef6:	68fb      	ldr	r3, [r7, #12]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002efe:	b292      	uxth	r2, r2
 8002f00:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	3302      	adds	r3, #2
 8002f06:	61bb      	str	r3, [r7, #24]
 8002f08:	e008      	b.n	8002f1c <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	781a      	ldrb	r2, [r3, #0]
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	b292      	uxth	r2, r2
 8002f14:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002f16:	69fb      	ldr	r3, [r7, #28]
 8002f18:	3301      	adds	r3, #1
 8002f1a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f22:	b29b      	uxth	r3, r3
 8002f24:	3b01      	subs	r3, #1
 8002f26:	b29a      	uxth	r2, r3
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002f34:	b29b      	uxth	r3, r3
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1cb      	bne.n	8002ed2 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	9300      	str	r3, [sp, #0]
 8002f3e:	697b      	ldr	r3, [r7, #20]
 8002f40:	2200      	movs	r2, #0
 8002f42:	2140      	movs	r1, #64	; 0x40
 8002f44:	68f8      	ldr	r0, [r7, #12]
 8002f46:	f000 fe28 	bl	8003b9a <UART_WaitOnFlagUntilTimeout>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	2b00      	cmp	r3, #0
 8002f4e:	d001      	beq.n	8002f54 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002f50:	2303      	movs	r3, #3
 8002f52:	e005      	b.n	8002f60 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2220      	movs	r2, #32
 8002f58:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	e000      	b.n	8002f60 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002f5e:	2302      	movs	r3, #2
  }
}
 8002f60:	4618      	mov	r0, r3
 8002f62:	3720      	adds	r7, #32
 8002f64:	46bd      	mov	sp, r7
 8002f66:	bd80      	pop	{r7, pc}

08002f68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002f68:	b580      	push	{r7, lr}
 8002f6a:	b0ba      	sub	sp, #232	; 0xe8
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	69db      	ldr	r3, [r3, #28]
 8002f76:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8002f8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8002f92:	f640 030f 	movw	r3, #2063	; 0x80f
 8002f96:	4013      	ands	r3, r2
 8002f98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8002f9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fa0:	2b00      	cmp	r3, #0
 8002fa2:	d115      	bne.n	8002fd0 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8002fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002fa8:	f003 0320 	and.w	r3, r3, #32
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d00f      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002fb4:	f003 0320 	and.w	r3, r3, #32
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d009      	beq.n	8002fd0 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	f000 82a6 	beq.w	8003512 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	4798      	blx	r3
      }
      return;
 8002fce:	e2a0      	b.n	8003512 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002fd0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002fd4:	2b00      	cmp	r3, #0
 8002fd6:	f000 8117 	beq.w	8003208 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002fda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002fde:	f003 0301 	and.w	r3, r3, #1
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d106      	bne.n	8002ff4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002fe6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002fea:	4b85      	ldr	r3, [pc, #532]	; (8003200 <HAL_UART_IRQHandler+0x298>)
 8002fec:	4013      	ands	r3, r2
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	f000 810a 	beq.w	8003208 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ff8:	f003 0301 	and.w	r3, r3, #1
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d011      	beq.n	8003024 <HAL_UART_IRQHandler+0xbc>
 8003000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003004:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003008:	2b00      	cmp	r3, #0
 800300a:	d00b      	beq.n	8003024 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	2201      	movs	r2, #1
 8003012:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800301a:	f043 0201 	orr.w	r2, r3, #1
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003024:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003028:	f003 0302 	and.w	r3, r3, #2
 800302c:	2b00      	cmp	r3, #0
 800302e:	d011      	beq.n	8003054 <HAL_UART_IRQHandler+0xec>
 8003030:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003034:	f003 0301 	and.w	r3, r3, #1
 8003038:	2b00      	cmp	r3, #0
 800303a:	d00b      	beq.n	8003054 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	2202      	movs	r2, #2
 8003042:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800304a:	f043 0204 	orr.w	r2, r3, #4
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003054:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003058:	f003 0304 	and.w	r3, r3, #4
 800305c:	2b00      	cmp	r3, #0
 800305e:	d011      	beq.n	8003084 <HAL_UART_IRQHandler+0x11c>
 8003060:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003064:	f003 0301 	and.w	r3, r3, #1
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00b      	beq.n	8003084 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	2204      	movs	r2, #4
 8003072:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800307a:	f043 0202 	orr.w	r2, r3, #2
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003084:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003088:	f003 0308 	and.w	r3, r3, #8
 800308c:	2b00      	cmp	r3, #0
 800308e:	d017      	beq.n	80030c0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003090:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003094:	f003 0320 	and.w	r3, r3, #32
 8003098:	2b00      	cmp	r3, #0
 800309a:	d105      	bne.n	80030a8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800309c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80030a0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d00b      	beq.n	80030c0 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	2208      	movs	r2, #8
 80030ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030b6:	f043 0208 	orr.w	r2, r3, #8
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80030c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80030c4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d012      	beq.n	80030f2 <HAL_UART_IRQHandler+0x18a>
 80030cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80030d0:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d00c      	beq.n	80030f2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80030e0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030e8:	f043 0220 	orr.w	r2, r3, #32
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	f000 820c 	beq.w	8003516 <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 80030fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003102:	f003 0320 	and.w	r3, r3, #32
 8003106:	2b00      	cmp	r3, #0
 8003108:	d00d      	beq.n	8003126 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800310a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800310e:	f003 0320 	and.w	r3, r3, #32
 8003112:	2b00      	cmp	r3, #0
 8003114:	d007      	beq.n	8003126 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800311a:	2b00      	cmp	r3, #0
 800311c:	d003      	beq.n	8003126 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800312c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	689b      	ldr	r3, [r3, #8]
 8003136:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800313a:	2b40      	cmp	r3, #64	; 0x40
 800313c:	d005      	beq.n	800314a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800313e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003142:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003146:	2b00      	cmp	r3, #0
 8003148:	d04f      	beq.n	80031ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800314a:	6878      	ldr	r0, [r7, #4]
 800314c:	f000 fde9 	bl	8003d22 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	689b      	ldr	r3, [r3, #8]
 8003156:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800315a:	2b40      	cmp	r3, #64	; 0x40
 800315c:	d141      	bne.n	80031e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	3308      	adds	r3, #8
 8003164:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003168:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800316c:	e853 3f00 	ldrex	r3, [r3]
 8003170:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003174:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003178:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800317c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	3308      	adds	r3, #8
 8003186:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800318a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800318e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003192:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8003196:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800319a:	e841 2300 	strex	r3, r2, [r1]
 800319e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80031a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d1d9      	bne.n	800315e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d013      	beq.n	80031da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031b6:	4a13      	ldr	r2, [pc, #76]	; (8003204 <HAL_UART_IRQHandler+0x29c>)
 80031b8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd fff6 	bl	80011b0 <HAL_DMA_Abort_IT>
 80031c4:	4603      	mov	r3, r0
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d017      	beq.n	80031fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80031ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80031d0:	687a      	ldr	r2, [r7, #4]
 80031d2:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80031d4:	4610      	mov	r0, r2
 80031d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031d8:	e00f      	b.n	80031fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80031da:	6878      	ldr	r0, [r7, #4]
 80031dc:	f000 f9b0 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e0:	e00b      	b.n	80031fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80031e2:	6878      	ldr	r0, [r7, #4]
 80031e4:	f000 f9ac 	bl	8003540 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031e8:	e007      	b.n	80031fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80031ea:	6878      	ldr	r0, [r7, #4]
 80031ec:	f000 f9a8 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	2200      	movs	r2, #0
 80031f4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80031f8:	e18d      	b.n	8003516 <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80031fa:	bf00      	nop
    return;
 80031fc:	e18b      	b.n	8003516 <HAL_UART_IRQHandler+0x5ae>
 80031fe:	bf00      	nop
 8003200:	04000120 	.word	0x04000120
 8003204:	08003de9 	.word	0x08003de9

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320c:	2b01      	cmp	r3, #1
 800320e:	f040 8146 	bne.w	800349e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003212:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003216:	f003 0310 	and.w	r3, r3, #16
 800321a:	2b00      	cmp	r3, #0
 800321c:	f000 813f 	beq.w	800349e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003220:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003224:	f003 0310 	and.w	r3, r3, #16
 8003228:	2b00      	cmp	r3, #0
 800322a:	f000 8138 	beq.w	800349e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2210      	movs	r2, #16
 8003234:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	689b      	ldr	r3, [r3, #8]
 800323c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003240:	2b40      	cmp	r3, #64	; 0x40
 8003242:	f040 80b4 	bne.w	80033ae <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	685b      	ldr	r3, [r3, #4]
 800324e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003252:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8003256:	2b00      	cmp	r3, #0
 8003258:	f000 815f 	beq.w	800351a <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003262:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003266:	429a      	cmp	r2, r3
 8003268:	f080 8157 	bcs.w	800351a <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003272:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f003 0320 	and.w	r3, r3, #32
 8003282:	2b00      	cmp	r3, #0
 8003284:	f040 8085 	bne.w	8003392 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003290:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003294:	e853 3f00 	ldrex	r3, [r3]
 8003298:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800329c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80032a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	461a      	mov	r2, r3
 80032ae:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80032b2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80032b6:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032ba:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80032be:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80032c2:	e841 2300 	strex	r3, r2, [r1]
 80032c6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80032ca:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d1da      	bne.n	8003288 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	3308      	adds	r3, #8
 80032d8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032da:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80032dc:	e853 3f00 	ldrex	r3, [r3]
 80032e0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80032e2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80032e4:	f023 0301 	bic.w	r3, r3, #1
 80032e8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	3308      	adds	r3, #8
 80032f2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80032f6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80032fa:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80032fe:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003302:	e841 2300 	strex	r3, r2, [r1]
 8003306:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003308:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800330a:	2b00      	cmp	r3, #0
 800330c:	d1e1      	bne.n	80032d2 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	3308      	adds	r3, #8
 8003314:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003316:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003318:	e853 3f00 	ldrex	r3, [r3]
 800331c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800331e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003320:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003324:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	3308      	adds	r3, #8
 800332e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003332:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003334:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003336:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8003338:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800333a:	e841 2300 	strex	r3, r2, [r1]
 800333e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003340:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1e3      	bne.n	800330e <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	2220      	movs	r2, #32
 800334a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2200      	movs	r2, #0
 8003350:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003358:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800335a:	e853 3f00 	ldrex	r3, [r3]
 800335e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003360:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003362:	f023 0310 	bic.w	r3, r3, #16
 8003366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	461a      	mov	r2, r3
 8003370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003374:	65bb      	str	r3, [r7, #88]	; 0x58
 8003376:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003378:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800337a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800337c:	e841 2300 	strex	r3, r2, [r1]
 8003380:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003384:	2b00      	cmp	r3, #0
 8003386:	d1e4      	bne.n	8003352 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800338c:	4618      	mov	r0, r3
 800338e:	f7fd fed1 	bl	8001134 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800339e:	b29b      	uxth	r3, r3
 80033a0:	1ad3      	subs	r3, r2, r3
 80033a2:	b29b      	uxth	r3, r3
 80033a4:	4619      	mov	r1, r3
 80033a6:	6878      	ldr	r0, [r7, #4]
 80033a8:	f000 f8d4 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80033ac:	e0b5      	b.n	800351a <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80033c8:	b29b      	uxth	r3, r3
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 80a7 	beq.w	800351e <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80033d0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	f000 80a2 	beq.w	800351e <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033e2:	e853 3f00 	ldrex	r3, [r3]
 80033e6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80033e8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033ea:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80033ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	461a      	mov	r2, r3
 80033f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033fc:	647b      	str	r3, [r7, #68]	; 0x44
 80033fe:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003400:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003402:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003404:	e841 2300 	strex	r3, r2, [r1]
 8003408:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800340a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800340c:	2b00      	cmp	r3, #0
 800340e:	d1e4      	bne.n	80033da <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	3308      	adds	r3, #8
 8003416:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003418:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800341a:	e853 3f00 	ldrex	r3, [r3]
 800341e:	623b      	str	r3, [r7, #32]
   return(result);
 8003420:	6a3b      	ldr	r3, [r7, #32]
 8003422:	f023 0301 	bic.w	r3, r3, #1
 8003426:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	3308      	adds	r3, #8
 8003430:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003434:	633a      	str	r2, [r7, #48]	; 0x30
 8003436:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003438:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800343a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800343c:	e841 2300 	strex	r3, r2, [r1]
 8003440:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003444:	2b00      	cmp	r3, #0
 8003446:	d1e3      	bne.n	8003410 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2220      	movs	r2, #32
 800344c:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2200      	movs	r2, #0
 8003452:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2200      	movs	r2, #0
 8003458:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003460:	693b      	ldr	r3, [r7, #16]
 8003462:	e853 3f00 	ldrex	r3, [r3]
 8003466:	60fb      	str	r3, [r7, #12]
   return(result);
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	f023 0310 	bic.w	r3, r3, #16
 800346e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	461a      	mov	r2, r3
 8003478:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800347c:	61fb      	str	r3, [r7, #28]
 800347e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003480:	69b9      	ldr	r1, [r7, #24]
 8003482:	69fa      	ldr	r2, [r7, #28]
 8003484:	e841 2300 	strex	r3, r2, [r1]
 8003488:	617b      	str	r3, [r7, #20]
   return(result);
 800348a:	697b      	ldr	r3, [r7, #20]
 800348c:	2b00      	cmp	r3, #0
 800348e:	d1e4      	bne.n	800345a <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003490:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003494:	4619      	mov	r1, r3
 8003496:	6878      	ldr	r0, [r7, #4]
 8003498:	f000 f85c 	bl	8003554 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800349c:	e03f      	b.n	800351e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800349e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d00e      	beq.n	80034c8 <HAL_UART_IRQHandler+0x560>
 80034aa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80034ae:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d008      	beq.n	80034c8 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80034be:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 fcd1 	bl	8003e68 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80034c6:	e02d      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80034c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d00e      	beq.n	80034f2 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80034d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80034d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d008      	beq.n	80034f2 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d01c      	beq.n	8003522 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	4798      	blx	r3
    }
    return;
 80034f0:	e017      	b.n	8003522 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80034f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d012      	beq.n	8003524 <HAL_UART_IRQHandler+0x5bc>
 80034fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003506:	2b00      	cmp	r3, #0
 8003508:	d00c      	beq.n	8003524 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800350a:	6878      	ldr	r0, [r7, #4]
 800350c:	f000 fc82 	bl	8003e14 <UART_EndTransmit_IT>
    return;
 8003510:	e008      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003512:	bf00      	nop
 8003514:	e006      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003516:	bf00      	nop
 8003518:	e004      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
      return;
 800351a:	bf00      	nop
 800351c:	e002      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
      return;
 800351e:	bf00      	nop
 8003520:	e000      	b.n	8003524 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003522:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003524:	37e8      	adds	r7, #232	; 0xe8
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop

0800352c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800352c:	b480      	push	{r7}
 800352e:	b083      	sub	sp, #12
 8003530:	af00      	add	r7, sp, #0
 8003532:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003534:	bf00      	nop
 8003536:	370c      	adds	r7, #12
 8003538:	46bd      	mov	sp, r7
 800353a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800353e:	4770      	bx	lr

08003540 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr

08003554 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003554:	b480      	push	{r7}
 8003556:	b083      	sub	sp, #12
 8003558:	af00      	add	r7, sp, #0
 800355a:	6078      	str	r0, [r7, #4]
 800355c:	460b      	mov	r3, r1
 800355e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003560:	bf00      	nop
 8003562:	370c      	adds	r7, #12
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr

0800356c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800356c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003570:	b08a      	sub	sp, #40	; 0x28
 8003572:	af00      	add	r7, sp, #0
 8003574:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003576:	2300      	movs	r3, #0
 8003578:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	691b      	ldr	r3, [r3, #16]
 8003584:	431a      	orrs	r2, r3
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	695b      	ldr	r3, [r3, #20]
 800358a:	431a      	orrs	r2, r3
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	69db      	ldr	r3, [r3, #28]
 8003590:	4313      	orrs	r3, r2
 8003592:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	681a      	ldr	r2, [r3, #0]
 800359a:	4bb4      	ldr	r3, [pc, #720]	; (800386c <UART_SetConfig+0x300>)
 800359c:	4013      	ands	r3, r2
 800359e:	68fa      	ldr	r2, [r7, #12]
 80035a0:	6812      	ldr	r2, [r2, #0]
 80035a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035a4:	430b      	orrs	r3, r1
 80035a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	685b      	ldr	r3, [r3, #4]
 80035ae:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	68da      	ldr	r2, [r3, #12]
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	699b      	ldr	r3, [r3, #24]
 80035c2:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4aa9      	ldr	r2, [pc, #676]	; (8003870 <UART_SetConfig+0x304>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d004      	beq.n	80035d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a1b      	ldr	r3, [r3, #32]
 80035d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035d4:	4313      	orrs	r3, r2
 80035d6:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80035e8:	430a      	orrs	r2, r1
 80035ea:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4aa0      	ldr	r2, [pc, #640]	; (8003874 <UART_SetConfig+0x308>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d126      	bne.n	8003644 <UART_SetConfig+0xd8>
 80035f6:	4ba0      	ldr	r3, [pc, #640]	; (8003878 <UART_SetConfig+0x30c>)
 80035f8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035fc:	f003 0303 	and.w	r3, r3, #3
 8003600:	2b03      	cmp	r3, #3
 8003602:	d81b      	bhi.n	800363c <UART_SetConfig+0xd0>
 8003604:	a201      	add	r2, pc, #4	; (adr r2, 800360c <UART_SetConfig+0xa0>)
 8003606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800360a:	bf00      	nop
 800360c:	0800361d 	.word	0x0800361d
 8003610:	0800362d 	.word	0x0800362d
 8003614:	08003625 	.word	0x08003625
 8003618:	08003635 	.word	0x08003635
 800361c:	2301      	movs	r3, #1
 800361e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003622:	e080      	b.n	8003726 <UART_SetConfig+0x1ba>
 8003624:	2302      	movs	r3, #2
 8003626:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800362a:	e07c      	b.n	8003726 <UART_SetConfig+0x1ba>
 800362c:	2304      	movs	r3, #4
 800362e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003632:	e078      	b.n	8003726 <UART_SetConfig+0x1ba>
 8003634:	2308      	movs	r3, #8
 8003636:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800363a:	e074      	b.n	8003726 <UART_SetConfig+0x1ba>
 800363c:	2310      	movs	r3, #16
 800363e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003642:	e070      	b.n	8003726 <UART_SetConfig+0x1ba>
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a8c      	ldr	r2, [pc, #560]	; (800387c <UART_SetConfig+0x310>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d138      	bne.n	80036c0 <UART_SetConfig+0x154>
 800364e:	4b8a      	ldr	r3, [pc, #552]	; (8003878 <UART_SetConfig+0x30c>)
 8003650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003654:	f003 030c 	and.w	r3, r3, #12
 8003658:	2b0c      	cmp	r3, #12
 800365a:	d82d      	bhi.n	80036b8 <UART_SetConfig+0x14c>
 800365c:	a201      	add	r2, pc, #4	; (adr r2, 8003664 <UART_SetConfig+0xf8>)
 800365e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003662:	bf00      	nop
 8003664:	08003699 	.word	0x08003699
 8003668:	080036b9 	.word	0x080036b9
 800366c:	080036b9 	.word	0x080036b9
 8003670:	080036b9 	.word	0x080036b9
 8003674:	080036a9 	.word	0x080036a9
 8003678:	080036b9 	.word	0x080036b9
 800367c:	080036b9 	.word	0x080036b9
 8003680:	080036b9 	.word	0x080036b9
 8003684:	080036a1 	.word	0x080036a1
 8003688:	080036b9 	.word	0x080036b9
 800368c:	080036b9 	.word	0x080036b9
 8003690:	080036b9 	.word	0x080036b9
 8003694:	080036b1 	.word	0x080036b1
 8003698:	2300      	movs	r3, #0
 800369a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800369e:	e042      	b.n	8003726 <UART_SetConfig+0x1ba>
 80036a0:	2302      	movs	r3, #2
 80036a2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036a6:	e03e      	b.n	8003726 <UART_SetConfig+0x1ba>
 80036a8:	2304      	movs	r3, #4
 80036aa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036ae:	e03a      	b.n	8003726 <UART_SetConfig+0x1ba>
 80036b0:	2308      	movs	r3, #8
 80036b2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036b6:	e036      	b.n	8003726 <UART_SetConfig+0x1ba>
 80036b8:	2310      	movs	r3, #16
 80036ba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036be:	e032      	b.n	8003726 <UART_SetConfig+0x1ba>
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4a6a      	ldr	r2, [pc, #424]	; (8003870 <UART_SetConfig+0x304>)
 80036c6:	4293      	cmp	r3, r2
 80036c8:	d12a      	bne.n	8003720 <UART_SetConfig+0x1b4>
 80036ca:	4b6b      	ldr	r3, [pc, #428]	; (8003878 <UART_SetConfig+0x30c>)
 80036cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036d0:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80036d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036d8:	d01a      	beq.n	8003710 <UART_SetConfig+0x1a4>
 80036da:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80036de:	d81b      	bhi.n	8003718 <UART_SetConfig+0x1ac>
 80036e0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036e4:	d00c      	beq.n	8003700 <UART_SetConfig+0x194>
 80036e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ea:	d815      	bhi.n	8003718 <UART_SetConfig+0x1ac>
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d003      	beq.n	80036f8 <UART_SetConfig+0x18c>
 80036f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80036f4:	d008      	beq.n	8003708 <UART_SetConfig+0x19c>
 80036f6:	e00f      	b.n	8003718 <UART_SetConfig+0x1ac>
 80036f8:	2300      	movs	r3, #0
 80036fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80036fe:	e012      	b.n	8003726 <UART_SetConfig+0x1ba>
 8003700:	2302      	movs	r3, #2
 8003702:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003706:	e00e      	b.n	8003726 <UART_SetConfig+0x1ba>
 8003708:	2304      	movs	r3, #4
 800370a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800370e:	e00a      	b.n	8003726 <UART_SetConfig+0x1ba>
 8003710:	2308      	movs	r3, #8
 8003712:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003716:	e006      	b.n	8003726 <UART_SetConfig+0x1ba>
 8003718:	2310      	movs	r3, #16
 800371a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800371e:	e002      	b.n	8003726 <UART_SetConfig+0x1ba>
 8003720:	2310      	movs	r3, #16
 8003722:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	4a51      	ldr	r2, [pc, #324]	; (8003870 <UART_SetConfig+0x304>)
 800372c:	4293      	cmp	r3, r2
 800372e:	d17a      	bne.n	8003826 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003730:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003734:	2b08      	cmp	r3, #8
 8003736:	d824      	bhi.n	8003782 <UART_SetConfig+0x216>
 8003738:	a201      	add	r2, pc, #4	; (adr r2, 8003740 <UART_SetConfig+0x1d4>)
 800373a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800373e:	bf00      	nop
 8003740:	08003765 	.word	0x08003765
 8003744:	08003783 	.word	0x08003783
 8003748:	0800376d 	.word	0x0800376d
 800374c:	08003783 	.word	0x08003783
 8003750:	08003773 	.word	0x08003773
 8003754:	08003783 	.word	0x08003783
 8003758:	08003783 	.word	0x08003783
 800375c:	08003783 	.word	0x08003783
 8003760:	0800377b 	.word	0x0800377b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003764:	f7fe fcf8 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8003768:	61f8      	str	r0, [r7, #28]
        break;
 800376a:	e010      	b.n	800378e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800376c:	4b44      	ldr	r3, [pc, #272]	; (8003880 <UART_SetConfig+0x314>)
 800376e:	61fb      	str	r3, [r7, #28]
        break;
 8003770:	e00d      	b.n	800378e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003772:	f7fe fc59 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8003776:	61f8      	str	r0, [r7, #28]
        break;
 8003778:	e009      	b.n	800378e <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800377a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800377e:	61fb      	str	r3, [r7, #28]
        break;
 8003780:	e005      	b.n	800378e <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003782:	2300      	movs	r3, #0
 8003784:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800378c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800378e:	69fb      	ldr	r3, [r7, #28]
 8003790:	2b00      	cmp	r3, #0
 8003792:	f000 8107 	beq.w	80039a4 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	685a      	ldr	r2, [r3, #4]
 800379a:	4613      	mov	r3, r2
 800379c:	005b      	lsls	r3, r3, #1
 800379e:	4413      	add	r3, r2
 80037a0:	69fa      	ldr	r2, [r7, #28]
 80037a2:	429a      	cmp	r2, r3
 80037a4:	d305      	bcc.n	80037b2 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80037ac:	69fa      	ldr	r2, [r7, #28]
 80037ae:	429a      	cmp	r2, r3
 80037b0:	d903      	bls.n	80037ba <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80037b8:	e0f4      	b.n	80039a4 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	2200      	movs	r2, #0
 80037be:	461c      	mov	r4, r3
 80037c0:	4615      	mov	r5, r2
 80037c2:	f04f 0200 	mov.w	r2, #0
 80037c6:	f04f 0300 	mov.w	r3, #0
 80037ca:	022b      	lsls	r3, r5, #8
 80037cc:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80037d0:	0222      	lsls	r2, r4, #8
 80037d2:	68f9      	ldr	r1, [r7, #12]
 80037d4:	6849      	ldr	r1, [r1, #4]
 80037d6:	0849      	lsrs	r1, r1, #1
 80037d8:	2000      	movs	r0, #0
 80037da:	4688      	mov	r8, r1
 80037dc:	4681      	mov	r9, r0
 80037de:	eb12 0a08 	adds.w	sl, r2, r8
 80037e2:	eb43 0b09 	adc.w	fp, r3, r9
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	603b      	str	r3, [r7, #0]
 80037ee:	607a      	str	r2, [r7, #4]
 80037f0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80037f4:	4650      	mov	r0, sl
 80037f6:	4659      	mov	r1, fp
 80037f8:	f7fc fd42 	bl	8000280 <__aeabi_uldivmod>
 80037fc:	4602      	mov	r2, r0
 80037fe:	460b      	mov	r3, r1
 8003800:	4613      	mov	r3, r2
 8003802:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003804:	69bb      	ldr	r3, [r7, #24]
 8003806:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800380a:	d308      	bcc.n	800381e <UART_SetConfig+0x2b2>
 800380c:	69bb      	ldr	r3, [r7, #24]
 800380e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003812:	d204      	bcs.n	800381e <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	69ba      	ldr	r2, [r7, #24]
 800381a:	60da      	str	r2, [r3, #12]
 800381c:	e0c2      	b.n	80039a4 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 800381e:	2301      	movs	r3, #1
 8003820:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003824:	e0be      	b.n	80039a4 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	69db      	ldr	r3, [r3, #28]
 800382a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800382e:	d16a      	bne.n	8003906 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003830:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003834:	2b08      	cmp	r3, #8
 8003836:	d834      	bhi.n	80038a2 <UART_SetConfig+0x336>
 8003838:	a201      	add	r2, pc, #4	; (adr r2, 8003840 <UART_SetConfig+0x2d4>)
 800383a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800383e:	bf00      	nop
 8003840:	08003865 	.word	0x08003865
 8003844:	08003885 	.word	0x08003885
 8003848:	0800388d 	.word	0x0800388d
 800384c:	080038a3 	.word	0x080038a3
 8003850:	08003893 	.word	0x08003893
 8003854:	080038a3 	.word	0x080038a3
 8003858:	080038a3 	.word	0x080038a3
 800385c:	080038a3 	.word	0x080038a3
 8003860:	0800389b 	.word	0x0800389b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003864:	f7fe fc78 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 8003868:	61f8      	str	r0, [r7, #28]
        break;
 800386a:	e020      	b.n	80038ae <UART_SetConfig+0x342>
 800386c:	efff69f3 	.word	0xefff69f3
 8003870:	40008000 	.word	0x40008000
 8003874:	40013800 	.word	0x40013800
 8003878:	40021000 	.word	0x40021000
 800387c:	40004400 	.word	0x40004400
 8003880:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003884:	f7fe fc7e 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 8003888:	61f8      	str	r0, [r7, #28]
        break;
 800388a:	e010      	b.n	80038ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800388c:	4b4c      	ldr	r3, [pc, #304]	; (80039c0 <UART_SetConfig+0x454>)
 800388e:	61fb      	str	r3, [r7, #28]
        break;
 8003890:	e00d      	b.n	80038ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003892:	f7fe fbc9 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8003896:	61f8      	str	r0, [r7, #28]
        break;
 8003898:	e009      	b.n	80038ae <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800389a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800389e:	61fb      	str	r3, [r7, #28]
        break;
 80038a0:	e005      	b.n	80038ae <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80038a2:	2300      	movs	r3, #0
 80038a4:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80038a6:	2301      	movs	r3, #1
 80038a8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80038ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80038ae:	69fb      	ldr	r3, [r7, #28]
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d077      	beq.n	80039a4 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80038b4:	69fb      	ldr	r3, [r7, #28]
 80038b6:	005a      	lsls	r2, r3, #1
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	085b      	lsrs	r3, r3, #1
 80038be:	441a      	add	r2, r3
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80038c8:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80038ca:	69bb      	ldr	r3, [r7, #24]
 80038cc:	2b0f      	cmp	r3, #15
 80038ce:	d916      	bls.n	80038fe <UART_SetConfig+0x392>
 80038d0:	69bb      	ldr	r3, [r7, #24]
 80038d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80038d6:	d212      	bcs.n	80038fe <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80038d8:	69bb      	ldr	r3, [r7, #24]
 80038da:	b29b      	uxth	r3, r3
 80038dc:	f023 030f 	bic.w	r3, r3, #15
 80038e0:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80038e2:	69bb      	ldr	r3, [r7, #24]
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	b29b      	uxth	r3, r3
 80038e8:	f003 0307 	and.w	r3, r3, #7
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	8afb      	ldrh	r3, [r7, #22]
 80038f0:	4313      	orrs	r3, r2
 80038f2:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	8afa      	ldrh	r2, [r7, #22]
 80038fa:	60da      	str	r2, [r3, #12]
 80038fc:	e052      	b.n	80039a4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003904:	e04e      	b.n	80039a4 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003906:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800390a:	2b08      	cmp	r3, #8
 800390c:	d827      	bhi.n	800395e <UART_SetConfig+0x3f2>
 800390e:	a201      	add	r2, pc, #4	; (adr r2, 8003914 <UART_SetConfig+0x3a8>)
 8003910:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003914:	08003939 	.word	0x08003939
 8003918:	08003941 	.word	0x08003941
 800391c:	08003949 	.word	0x08003949
 8003920:	0800395f 	.word	0x0800395f
 8003924:	0800394f 	.word	0x0800394f
 8003928:	0800395f 	.word	0x0800395f
 800392c:	0800395f 	.word	0x0800395f
 8003930:	0800395f 	.word	0x0800395f
 8003934:	08003957 	.word	0x08003957
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003938:	f7fe fc0e 	bl	8002158 <HAL_RCC_GetPCLK1Freq>
 800393c:	61f8      	str	r0, [r7, #28]
        break;
 800393e:	e014      	b.n	800396a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003940:	f7fe fc20 	bl	8002184 <HAL_RCC_GetPCLK2Freq>
 8003944:	61f8      	str	r0, [r7, #28]
        break;
 8003946:	e010      	b.n	800396a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003948:	4b1d      	ldr	r3, [pc, #116]	; (80039c0 <UART_SetConfig+0x454>)
 800394a:	61fb      	str	r3, [r7, #28]
        break;
 800394c:	e00d      	b.n	800396a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800394e:	f7fe fb6b 	bl	8002028 <HAL_RCC_GetSysClockFreq>
 8003952:	61f8      	str	r0, [r7, #28]
        break;
 8003954:	e009      	b.n	800396a <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800395a:	61fb      	str	r3, [r7, #28]
        break;
 800395c:	e005      	b.n	800396a <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003962:	2301      	movs	r3, #1
 8003964:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003968:	bf00      	nop
    }

    if (pclk != 0U)
 800396a:	69fb      	ldr	r3, [r7, #28]
 800396c:	2b00      	cmp	r3, #0
 800396e:	d019      	beq.n	80039a4 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	685b      	ldr	r3, [r3, #4]
 8003974:	085a      	lsrs	r2, r3, #1
 8003976:	69fb      	ldr	r3, [r7, #28]
 8003978:	441a      	add	r2, r3
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003982:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	2b0f      	cmp	r3, #15
 8003988:	d909      	bls.n	800399e <UART_SetConfig+0x432>
 800398a:	69bb      	ldr	r3, [r7, #24]
 800398c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003990:	d205      	bcs.n	800399e <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003992:	69bb      	ldr	r3, [r7, #24]
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	60da      	str	r2, [r3, #12]
 800399c:	e002      	b.n	80039a4 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 800399e:	2301      	movs	r3, #1
 80039a0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	2200      	movs	r2, #0
 80039a8:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	2200      	movs	r2, #0
 80039ae:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80039b0:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3728      	adds	r7, #40	; 0x28
 80039b8:	46bd      	mov	sp, r7
 80039ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039be:	bf00      	nop
 80039c0:	00f42400 	.word	0x00f42400

080039c4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80039c4:	b480      	push	{r7}
 80039c6:	b083      	sub	sp, #12
 80039c8:	af00      	add	r7, sp, #0
 80039ca:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039d0:	f003 0301 	and.w	r3, r3, #1
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d00a      	beq.n	80039ee <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	685b      	ldr	r3, [r3, #4]
 80039de:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	430a      	orrs	r2, r1
 80039ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d00a      	beq.n	8003a10 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	685b      	ldr	r3, [r3, #4]
 8003a00:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	430a      	orrs	r2, r1
 8003a0e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a14:	f003 0304 	and.w	r3, r3, #4
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d00a      	beq.n	8003a32 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	685b      	ldr	r3, [r3, #4]
 8003a22:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	430a      	orrs	r2, r1
 8003a30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	f003 0308 	and.w	r3, r3, #8
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d00a      	beq.n	8003a54 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	685b      	ldr	r3, [r3, #4]
 8003a44:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	430a      	orrs	r2, r1
 8003a52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a58:	f003 0310 	and.w	r3, r3, #16
 8003a5c:	2b00      	cmp	r3, #0
 8003a5e:	d00a      	beq.n	8003a76 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	430a      	orrs	r2, r1
 8003a74:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a7a:	f003 0320 	and.w	r3, r3, #32
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d00a      	beq.n	8003a98 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	430a      	orrs	r2, r1
 8003a96:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003aa0:	2b00      	cmp	r3, #0
 8003aa2:	d01a      	beq.n	8003ada <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	430a      	orrs	r2, r1
 8003ab8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003abe:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ac2:	d10a      	bne.n	8003ada <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	430a      	orrs	r2, r1
 8003ad8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ade:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d00a      	beq.n	8003afc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	685b      	ldr	r3, [r3, #4]
 8003aec:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	430a      	orrs	r2, r1
 8003afa:	605a      	str	r2, [r3, #4]
  }
}
 8003afc:	bf00      	nop
 8003afe:	370c      	adds	r7, #12
 8003b00:	46bd      	mov	sp, r7
 8003b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b06:	4770      	bx	lr

08003b08 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b086      	sub	sp, #24
 8003b0c:	af02      	add	r7, sp, #8
 8003b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003b18:	f7fd fa1e 	bl	8000f58 <HAL_GetTick>
 8003b1c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b08      	cmp	r3, #8
 8003b2a:	d10e      	bne.n	8003b4a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b2c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b30:	9300      	str	r3, [sp, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2200      	movs	r2, #0
 8003b36:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003b3a:	6878      	ldr	r0, [r7, #4]
 8003b3c:	f000 f82d 	bl	8003b9a <UART_WaitOnFlagUntilTimeout>
 8003b40:	4603      	mov	r3, r0
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d001      	beq.n	8003b4a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b46:	2303      	movs	r3, #3
 8003b48:	e023      	b.n	8003b92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 0304 	and.w	r3, r3, #4
 8003b54:	2b04      	cmp	r3, #4
 8003b56:	d10e      	bne.n	8003b76 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003b58:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003b5c:	9300      	str	r3, [sp, #0]
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f000 f817 	bl	8003b9a <UART_WaitOnFlagUntilTimeout>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d001      	beq.n	8003b76 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003b72:	2303      	movs	r3, #3
 8003b74:	e00d      	b.n	8003b92 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2220      	movs	r2, #32
 8003b7a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2220      	movs	r2, #32
 8003b80:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003b90:	2300      	movs	r3, #0
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3710      	adds	r7, #16
 8003b96:	46bd      	mov	sp, r7
 8003b98:	bd80      	pop	{r7, pc}

08003b9a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003b9a:	b580      	push	{r7, lr}
 8003b9c:	b09c      	sub	sp, #112	; 0x70
 8003b9e:	af00      	add	r7, sp, #0
 8003ba0:	60f8      	str	r0, [r7, #12]
 8003ba2:	60b9      	str	r1, [r7, #8]
 8003ba4:	603b      	str	r3, [r7, #0]
 8003ba6:	4613      	mov	r3, r2
 8003ba8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003baa:	e0a5      	b.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003bac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003bb2:	f000 80a1 	beq.w	8003cf8 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003bb6:	f7fd f9cf 	bl	8000f58 <HAL_GetTick>
 8003bba:	4602      	mov	r2, r0
 8003bbc:	683b      	ldr	r3, [r7, #0]
 8003bbe:	1ad3      	subs	r3, r2, r3
 8003bc0:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d302      	bcc.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x32>
 8003bc6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003bc8:	2b00      	cmp	r3, #0
 8003bca:	d13e      	bne.n	8003c4a <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bd2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003bd4:	e853 3f00 	ldrex	r3, [r3]
 8003bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003bda:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003bdc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003be0:	667b      	str	r3, [r7, #100]	; 0x64
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	461a      	mov	r2, r3
 8003be8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003bea:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003bec:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003bee:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003bf0:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003bf2:	e841 2300 	strex	r3, r2, [r1]
 8003bf6:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003bf8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d1e6      	bne.n	8003bcc <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	3308      	adds	r3, #8
 8003c04:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c06:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003c08:	e853 3f00 	ldrex	r3, [r3]
 8003c0c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003c0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003c10:	f023 0301 	bic.w	r3, r3, #1
 8003c14:	663b      	str	r3, [r7, #96]	; 0x60
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	681b      	ldr	r3, [r3, #0]
 8003c1a:	3308      	adds	r3, #8
 8003c1c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003c1e:	64ba      	str	r2, [r7, #72]	; 0x48
 8003c20:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c22:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003c24:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003c2c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d1e5      	bne.n	8003bfe <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	2220      	movs	r2, #32
 8003c36:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2220      	movs	r2, #32
 8003c3c:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	2200      	movs	r2, #0
 8003c42:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003c46:	2303      	movs	r3, #3
 8003c48:	e067      	b.n	8003d1a <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	f003 0304 	and.w	r3, r3, #4
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d04f      	beq.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	69db      	ldr	r3, [r3, #28]
 8003c5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c62:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c66:	d147      	bne.n	8003cf8 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003c70:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c7a:	e853 3f00 	ldrex	r3, [r3]
 8003c7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003c86:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	461a      	mov	r2, r3
 8003c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c90:	637b      	str	r3, [r7, #52]	; 0x34
 8003c92:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003c96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003c98:	e841 2300 	strex	r3, r2, [r1]
 8003c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	2b00      	cmp	r3, #0
 8003ca2:	d1e6      	bne.n	8003c72 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	3308      	adds	r3, #8
 8003caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003cac:	697b      	ldr	r3, [r7, #20]
 8003cae:	e853 3f00 	ldrex	r3, [r3]
 8003cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8003cb4:	693b      	ldr	r3, [r7, #16]
 8003cb6:	f023 0301 	bic.w	r3, r3, #1
 8003cba:	66bb      	str	r3, [r7, #104]	; 0x68
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	3308      	adds	r3, #8
 8003cc2:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003cc4:	623a      	str	r2, [r7, #32]
 8003cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003cc8:	69f9      	ldr	r1, [r7, #28]
 8003cca:	6a3a      	ldr	r2, [r7, #32]
 8003ccc:	e841 2300 	strex	r3, r2, [r1]
 8003cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8003cd2:	69bb      	ldr	r3, [r7, #24]
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d1e5      	bne.n	8003ca4 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2220      	movs	r2, #32
 8003cdc:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2220      	movs	r2, #32
 8003ce8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003cf4:	2303      	movs	r3, #3
 8003cf6:	e010      	b.n	8003d1a <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	69da      	ldr	r2, [r3, #28]
 8003cfe:	68bb      	ldr	r3, [r7, #8]
 8003d00:	4013      	ands	r3, r2
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	bf0c      	ite	eq
 8003d08:	2301      	moveq	r3, #1
 8003d0a:	2300      	movne	r3, #0
 8003d0c:	b2db      	uxtb	r3, r3
 8003d0e:	461a      	mov	r2, r3
 8003d10:	79fb      	ldrb	r3, [r7, #7]
 8003d12:	429a      	cmp	r2, r3
 8003d14:	f43f af4a 	beq.w	8003bac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003d18:	2300      	movs	r3, #0
}
 8003d1a:	4618      	mov	r0, r3
 8003d1c:	3770      	adds	r7, #112	; 0x70
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	bd80      	pop	{r7, pc}

08003d22 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d22:	b480      	push	{r7}
 8003d24:	b095      	sub	sp, #84	; 0x54
 8003d26:	af00      	add	r7, sp, #0
 8003d28:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d32:	e853 3f00 	ldrex	r3, [r3]
 8003d36:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003d38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d3a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003d3e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	461a      	mov	r2, r3
 8003d46:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d48:	643b      	str	r3, [r7, #64]	; 0x40
 8003d4a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d4c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003d4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003d50:	e841 2300 	strex	r3, r2, [r1]
 8003d54:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d1e6      	bne.n	8003d2a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	3308      	adds	r3, #8
 8003d62:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d64:	6a3b      	ldr	r3, [r7, #32]
 8003d66:	e853 3f00 	ldrex	r3, [r3]
 8003d6a:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d6c:	69fb      	ldr	r3, [r7, #28]
 8003d6e:	f023 0301 	bic.w	r3, r3, #1
 8003d72:	64bb      	str	r3, [r7, #72]	; 0x48
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	3308      	adds	r3, #8
 8003d7a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003d7c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d80:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003d82:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d84:	e841 2300 	strex	r3, r2, [r1]
 8003d88:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003d8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d1e5      	bne.n	8003d5c <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d118      	bne.n	8003dca <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	e853 3f00 	ldrex	r3, [r3]
 8003da4:	60bb      	str	r3, [r7, #8]
   return(result);
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	f023 0310 	bic.w	r3, r3, #16
 8003dac:	647b      	str	r3, [r7, #68]	; 0x44
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	461a      	mov	r2, r3
 8003db4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003db6:	61bb      	str	r3, [r7, #24]
 8003db8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dba:	6979      	ldr	r1, [r7, #20]
 8003dbc:	69ba      	ldr	r2, [r7, #24]
 8003dbe:	e841 2300 	strex	r3, r2, [r1]
 8003dc2:	613b      	str	r3, [r7, #16]
   return(result);
 8003dc4:	693b      	ldr	r3, [r7, #16]
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1e6      	bne.n	8003d98 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2220      	movs	r2, #32
 8003dce:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2200      	movs	r2, #0
 8003dd4:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003ddc:	bf00      	nop
 8003dde:	3754      	adds	r7, #84	; 0x54
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr

08003de8 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003df4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	2200      	movs	r2, #0
 8003e02:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e06:	68f8      	ldr	r0, [r7, #12]
 8003e08:	f7ff fb9a 	bl	8003540 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e0c:	bf00      	nop
 8003e0e:	3710      	adds	r7, #16
 8003e10:	46bd      	mov	sp, r7
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b088      	sub	sp, #32
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	e853 3f00 	ldrex	r3, [r3]
 8003e28:	60bb      	str	r3, [r7, #8]
   return(result);
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e30:	61fb      	str	r3, [r7, #28]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	461a      	mov	r2, r3
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	61bb      	str	r3, [r7, #24]
 8003e3c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e3e:	6979      	ldr	r1, [r7, #20]
 8003e40:	69ba      	ldr	r2, [r7, #24]
 8003e42:	e841 2300 	strex	r3, r2, [r1]
 8003e46:	613b      	str	r3, [r7, #16]
   return(result);
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d1e6      	bne.n	8003e1c <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2220      	movs	r2, #32
 8003e52:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003e5a:	6878      	ldr	r0, [r7, #4]
 8003e5c:	f7ff fb66 	bl	800352c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e60:	bf00      	nop
 8003e62:	3720      	adds	r7, #32
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	b083      	sub	sp, #12
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8003e70:	bf00      	nop
 8003e72:	370c      	adds	r7, #12
 8003e74:	46bd      	mov	sp, r7
 8003e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e7a:	4770      	bx	lr

08003e7c <__NVIC_SetPriority>:
{
 8003e7c:	b480      	push	{r7}
 8003e7e:	b083      	sub	sp, #12
 8003e80:	af00      	add	r7, sp, #0
 8003e82:	4603      	mov	r3, r0
 8003e84:	6039      	str	r1, [r7, #0]
 8003e86:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e8c:	2b00      	cmp	r3, #0
 8003e8e:	db0a      	blt.n	8003ea6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	b2da      	uxtb	r2, r3
 8003e94:	490c      	ldr	r1, [pc, #48]	; (8003ec8 <__NVIC_SetPriority+0x4c>)
 8003e96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e9a:	0112      	lsls	r2, r2, #4
 8003e9c:	b2d2      	uxtb	r2, r2
 8003e9e:	440b      	add	r3, r1
 8003ea0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003ea4:	e00a      	b.n	8003ebc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ea6:	683b      	ldr	r3, [r7, #0]
 8003ea8:	b2da      	uxtb	r2, r3
 8003eaa:	4908      	ldr	r1, [pc, #32]	; (8003ecc <__NVIC_SetPriority+0x50>)
 8003eac:	79fb      	ldrb	r3, [r7, #7]
 8003eae:	f003 030f 	and.w	r3, r3, #15
 8003eb2:	3b04      	subs	r3, #4
 8003eb4:	0112      	lsls	r2, r2, #4
 8003eb6:	b2d2      	uxtb	r2, r2
 8003eb8:	440b      	add	r3, r1
 8003eba:	761a      	strb	r2, [r3, #24]
}
 8003ebc:	bf00      	nop
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr
 8003ec8:	e000e100 	.word	0xe000e100
 8003ecc:	e000ed00 	.word	0xe000ed00

08003ed0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003ed4:	4b05      	ldr	r3, [pc, #20]	; (8003eec <SysTick_Handler+0x1c>)
 8003ed6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003ed8:	f001 feea 	bl	8005cb0 <xTaskGetSchedulerState>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d001      	beq.n	8003ee6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003ee2:	f002 fdd1 	bl	8006a88 <xPortSysTickHandler>
  }
}
 8003ee6:	bf00      	nop
 8003ee8:	bd80      	pop	{r7, pc}
 8003eea:	bf00      	nop
 8003eec:	e000e010 	.word	0xe000e010

08003ef0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003ef0:	b580      	push	{r7, lr}
 8003ef2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003ef4:	2100      	movs	r1, #0
 8003ef6:	f06f 0004 	mvn.w	r0, #4
 8003efa:	f7ff ffbf 	bl	8003e7c <__NVIC_SetPriority>
#endif
}
 8003efe:	bf00      	nop
 8003f00:	bd80      	pop	{r7, pc}
	...

08003f04 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003f04:	b480      	push	{r7}
 8003f06:	b083      	sub	sp, #12
 8003f08:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f0a:	f3ef 8305 	mrs	r3, IPSR
 8003f0e:	603b      	str	r3, [r7, #0]
  return(result);
 8003f10:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f12:	2b00      	cmp	r3, #0
 8003f14:	d003      	beq.n	8003f1e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003f16:	f06f 0305 	mvn.w	r3, #5
 8003f1a:	607b      	str	r3, [r7, #4]
 8003f1c:	e00c      	b.n	8003f38 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003f1e:	4b0a      	ldr	r3, [pc, #40]	; (8003f48 <osKernelInitialize+0x44>)
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d105      	bne.n	8003f32 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003f26:	4b08      	ldr	r3, [pc, #32]	; (8003f48 <osKernelInitialize+0x44>)
 8003f28:	2201      	movs	r2, #1
 8003f2a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	e002      	b.n	8003f38 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003f32:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f36:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f38:	687b      	ldr	r3, [r7, #4]
}
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	370c      	adds	r7, #12
 8003f3e:	46bd      	mov	sp, r7
 8003f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f44:	4770      	bx	lr
 8003f46:	bf00      	nop
 8003f48:	200001cc 	.word	0x200001cc

08003f4c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003f52:	f3ef 8305 	mrs	r3, IPSR
 8003f56:	603b      	str	r3, [r7, #0]
  return(result);
 8003f58:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d003      	beq.n	8003f66 <osKernelStart+0x1a>
    stat = osErrorISR;
 8003f5e:	f06f 0305 	mvn.w	r3, #5
 8003f62:	607b      	str	r3, [r7, #4]
 8003f64:	e010      	b.n	8003f88 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8003f66:	4b0b      	ldr	r3, [pc, #44]	; (8003f94 <osKernelStart+0x48>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d109      	bne.n	8003f82 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003f6e:	f7ff ffbf 	bl	8003ef0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003f72:	4b08      	ldr	r3, [pc, #32]	; (8003f94 <osKernelStart+0x48>)
 8003f74:	2202      	movs	r2, #2
 8003f76:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003f78:	f001 fa2e 	bl	80053d8 <vTaskStartScheduler>
      stat = osOK;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	607b      	str	r3, [r7, #4]
 8003f80:	e002      	b.n	8003f88 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003f82:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f86:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003f88:	687b      	ldr	r3, [r7, #4]
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}
 8003f92:	bf00      	nop
 8003f94:	200001cc 	.word	0x200001cc

08003f98 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003f98:	b580      	push	{r7, lr}
 8003f9a:	b08e      	sub	sp, #56	; 0x38
 8003f9c:	af04      	add	r7, sp, #16
 8003f9e:	60f8      	str	r0, [r7, #12]
 8003fa0:	60b9      	str	r1, [r7, #8]
 8003fa2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003fa4:	2300      	movs	r3, #0
 8003fa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003fa8:	f3ef 8305 	mrs	r3, IPSR
 8003fac:	617b      	str	r3, [r7, #20]
  return(result);
 8003fae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003fb0:	2b00      	cmp	r3, #0
 8003fb2:	d17e      	bne.n	80040b2 <osThreadNew+0x11a>
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d07b      	beq.n	80040b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003fba:	2340      	movs	r3, #64	; 0x40
 8003fbc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003fbe:	2318      	movs	r3, #24
 8003fc0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003fc2:	2300      	movs	r3, #0
 8003fc4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003fc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003fca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d045      	beq.n	800405e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d002      	beq.n	8003fe0 <osThreadNew+0x48>
        name = attr->name;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d002      	beq.n	8003fee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	699b      	ldr	r3, [r3, #24]
 8003fec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d008      	beq.n	8004006 <osThreadNew+0x6e>
 8003ff4:	69fb      	ldr	r3, [r7, #28]
 8003ff6:	2b38      	cmp	r3, #56	; 0x38
 8003ff8:	d805      	bhi.n	8004006 <osThreadNew+0x6e>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	685b      	ldr	r3, [r3, #4]
 8003ffe:	f003 0301 	and.w	r3, r3, #1
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <osThreadNew+0x72>
        return (NULL);
 8004006:	2300      	movs	r3, #0
 8004008:	e054      	b.n	80040b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	695b      	ldr	r3, [r3, #20]
 8004016:	089b      	lsrs	r3, r3, #2
 8004018:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d00e      	beq.n	8004040 <osThreadNew+0xa8>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	68db      	ldr	r3, [r3, #12]
 8004026:	2bbb      	cmp	r3, #187	; 0xbb
 8004028:	d90a      	bls.n	8004040 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800402e:	2b00      	cmp	r3, #0
 8004030:	d006      	beq.n	8004040 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	695b      	ldr	r3, [r3, #20]
 8004036:	2b00      	cmp	r3, #0
 8004038:	d002      	beq.n	8004040 <osThreadNew+0xa8>
        mem = 1;
 800403a:	2301      	movs	r3, #1
 800403c:	61bb      	str	r3, [r7, #24]
 800403e:	e010      	b.n	8004062 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10c      	bne.n	8004062 <osThreadNew+0xca>
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	68db      	ldr	r3, [r3, #12]
 800404c:	2b00      	cmp	r3, #0
 800404e:	d108      	bne.n	8004062 <osThreadNew+0xca>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	691b      	ldr	r3, [r3, #16]
 8004054:	2b00      	cmp	r3, #0
 8004056:	d104      	bne.n	8004062 <osThreadNew+0xca>
          mem = 0;
 8004058:	2300      	movs	r3, #0
 800405a:	61bb      	str	r3, [r7, #24]
 800405c:	e001      	b.n	8004062 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800405e:	2300      	movs	r3, #0
 8004060:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004062:	69bb      	ldr	r3, [r7, #24]
 8004064:	2b01      	cmp	r3, #1
 8004066:	d110      	bne.n	800408a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004070:	9202      	str	r2, [sp, #8]
 8004072:	9301      	str	r3, [sp, #4]
 8004074:	69fb      	ldr	r3, [r7, #28]
 8004076:	9300      	str	r3, [sp, #0]
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	6a3a      	ldr	r2, [r7, #32]
 800407c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800407e:	68f8      	ldr	r0, [r7, #12]
 8004080:	f000 ff80 	bl	8004f84 <xTaskCreateStatic>
 8004084:	4603      	mov	r3, r0
 8004086:	613b      	str	r3, [r7, #16]
 8004088:	e013      	b.n	80040b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800408a:	69bb      	ldr	r3, [r7, #24]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d110      	bne.n	80040b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004090:	6a3b      	ldr	r3, [r7, #32]
 8004092:	b29a      	uxth	r2, r3
 8004094:	f107 0310 	add.w	r3, r7, #16
 8004098:	9301      	str	r3, [sp, #4]
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	9300      	str	r3, [sp, #0]
 800409e:	68bb      	ldr	r3, [r7, #8]
 80040a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80040a2:	68f8      	ldr	r0, [r7, #12]
 80040a4:	f000 ffcb 	bl	800503e <xTaskCreate>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d001      	beq.n	80040b2 <osThreadNew+0x11a>
            hTask = NULL;
 80040ae:	2300      	movs	r3, #0
 80040b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80040b2:	693b      	ldr	r3, [r7, #16]
}
 80040b4:	4618      	mov	r0, r3
 80040b6:	3728      	adds	r7, #40	; 0x28
 80040b8:	46bd      	mov	sp, r7
 80040ba:	bd80      	pop	{r7, pc}

080040bc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80040bc:	b480      	push	{r7}
 80040be:	b085      	sub	sp, #20
 80040c0:	af00      	add	r7, sp, #0
 80040c2:	60f8      	str	r0, [r7, #12]
 80040c4:	60b9      	str	r1, [r7, #8]
 80040c6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	4a07      	ldr	r2, [pc, #28]	; (80040e8 <vApplicationGetIdleTaskMemory+0x2c>)
 80040cc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80040ce:	68bb      	ldr	r3, [r7, #8]
 80040d0:	4a06      	ldr	r2, [pc, #24]	; (80040ec <vApplicationGetIdleTaskMemory+0x30>)
 80040d2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2240      	movs	r2, #64	; 0x40
 80040d8:	601a      	str	r2, [r3, #0]
}
 80040da:	bf00      	nop
 80040dc:	3714      	adds	r7, #20
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
 80040e6:	bf00      	nop
 80040e8:	200001d0 	.word	0x200001d0
 80040ec:	2000028c 	.word	0x2000028c

080040f0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	60f8      	str	r0, [r7, #12]
 80040f8:	60b9      	str	r1, [r7, #8]
 80040fa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	4a07      	ldr	r2, [pc, #28]	; (800411c <vApplicationGetTimerTaskMemory+0x2c>)
 8004100:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4a06      	ldr	r2, [pc, #24]	; (8004120 <vApplicationGetTimerTaskMemory+0x30>)
 8004106:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	2280      	movs	r2, #128	; 0x80
 800410c:	601a      	str	r2, [r3, #0]
}
 800410e:	bf00      	nop
 8004110:	3714      	adds	r7, #20
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr
 800411a:	bf00      	nop
 800411c:	2000038c 	.word	0x2000038c
 8004120:	20000448 	.word	0x20000448

08004124 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004124:	b480      	push	{r7}
 8004126:	b083      	sub	sp, #12
 8004128:	af00      	add	r7, sp, #0
 800412a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	f103 0208 	add.w	r2, r3, #8
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800413c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	f103 0208 	add.w	r2, r3, #8
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	f103 0208 	add.w	r2, r3, #8
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004158:	bf00      	nop
 800415a:	370c      	adds	r7, #12
 800415c:	46bd      	mov	sp, r7
 800415e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004162:	4770      	bx	lr

08004164 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004164:	b480      	push	{r7}
 8004166:	b083      	sub	sp, #12
 8004168:	af00      	add	r7, sp, #0
 800416a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2200      	movs	r2, #0
 8004170:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004172:	bf00      	nop
 8004174:	370c      	adds	r7, #12
 8004176:	46bd      	mov	sp, r7
 8004178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417c:	4770      	bx	lr

0800417e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800417e:	b480      	push	{r7}
 8004180:	b085      	sub	sp, #20
 8004182:	af00      	add	r7, sp, #0
 8004184:	6078      	str	r0, [r7, #4]
 8004186:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	685b      	ldr	r3, [r3, #4]
 800418c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	68fa      	ldr	r2, [r7, #12]
 8004192:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	689a      	ldr	r2, [r3, #8]
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	683a      	ldr	r2, [r7, #0]
 80041a2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	683a      	ldr	r2, [r7, #0]
 80041a8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	687a      	ldr	r2, [r7, #4]
 80041ae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	1c5a      	adds	r2, r3, #1
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	601a      	str	r2, [r3, #0]
}
 80041ba:	bf00      	nop
 80041bc:	3714      	adds	r7, #20
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr

080041c6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80041c6:	b480      	push	{r7}
 80041c8:	b085      	sub	sp, #20
 80041ca:	af00      	add	r7, sp, #0
 80041cc:	6078      	str	r0, [r7, #4]
 80041ce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041dc:	d103      	bne.n	80041e6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	691b      	ldr	r3, [r3, #16]
 80041e2:	60fb      	str	r3, [r7, #12]
 80041e4:	e00c      	b.n	8004200 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	3308      	adds	r3, #8
 80041ea:	60fb      	str	r3, [r7, #12]
 80041ec:	e002      	b.n	80041f4 <vListInsert+0x2e>
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	60fb      	str	r3, [r7, #12]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	68ba      	ldr	r2, [r7, #8]
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d2f6      	bcs.n	80041ee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	685a      	ldr	r2, [r3, #4]
 8004204:	683b      	ldr	r3, [r7, #0]
 8004206:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	683a      	ldr	r2, [r7, #0]
 800420e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004210:	683b      	ldr	r3, [r7, #0]
 8004212:	68fa      	ldr	r2, [r7, #12]
 8004214:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	683a      	ldr	r2, [r7, #0]
 800421a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	1c5a      	adds	r2, r3, #1
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	601a      	str	r2, [r3, #0]
}
 800422c:	bf00      	nop
 800422e:	3714      	adds	r7, #20
 8004230:	46bd      	mov	sp, r7
 8004232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004236:	4770      	bx	lr

08004238 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004238:	b480      	push	{r7}
 800423a:	b085      	sub	sp, #20
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	691b      	ldr	r3, [r3, #16]
 8004244:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	6892      	ldr	r2, [r2, #8]
 800424e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	689b      	ldr	r3, [r3, #8]
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6852      	ldr	r2, [r2, #4]
 8004258:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	429a      	cmp	r2, r3
 8004262:	d103      	bne.n	800426c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	689a      	ldr	r2, [r3, #8]
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	1e5a      	subs	r2, r3, #1
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	681b      	ldr	r3, [r3, #0]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3714      	adds	r7, #20
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	2b00      	cmp	r3, #0
 800429e:	d10a      	bne.n	80042b6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80042a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042a4:	f383 8811 	msr	BASEPRI, r3
 80042a8:	f3bf 8f6f 	isb	sy
 80042ac:	f3bf 8f4f 	dsb	sy
 80042b0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80042b2:	bf00      	nop
 80042b4:	e7fe      	b.n	80042b4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80042b6:	f002 fb55 	bl	8006964 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681a      	ldr	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c2:	68f9      	ldr	r1, [r7, #12]
 80042c4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042c6:	fb01 f303 	mul.w	r3, r1, r3
 80042ca:	441a      	add	r2, r3
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681a      	ldr	r2, [r3, #0]
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681a      	ldr	r2, [r3, #0]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	3b01      	subs	r3, #1
 80042e8:	68f9      	ldr	r1, [r7, #12]
 80042ea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80042ec:	fb01 f303 	mul.w	r3, r1, r3
 80042f0:	441a      	add	r2, r3
 80042f2:	68fb      	ldr	r3, [r7, #12]
 80042f4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	22ff      	movs	r2, #255	; 0xff
 80042fa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	22ff      	movs	r2, #255	; 0xff
 8004302:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d114      	bne.n	8004336 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	691b      	ldr	r3, [r3, #16]
 8004310:	2b00      	cmp	r3, #0
 8004312:	d01a      	beq.n	800434a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	3310      	adds	r3, #16
 8004318:	4618      	mov	r0, r3
 800431a:	f001 faf7 	bl	800590c <xTaskRemoveFromEventList>
 800431e:	4603      	mov	r3, r0
 8004320:	2b00      	cmp	r3, #0
 8004322:	d012      	beq.n	800434a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004324:	4b0c      	ldr	r3, [pc, #48]	; (8004358 <xQueueGenericReset+0xcc>)
 8004326:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800432a:	601a      	str	r2, [r3, #0]
 800432c:	f3bf 8f4f 	dsb	sy
 8004330:	f3bf 8f6f 	isb	sy
 8004334:	e009      	b.n	800434a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	3310      	adds	r3, #16
 800433a:	4618      	mov	r0, r3
 800433c:	f7ff fef2 	bl	8004124 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	3324      	adds	r3, #36	; 0x24
 8004344:	4618      	mov	r0, r3
 8004346:	f7ff feed 	bl	8004124 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800434a:	f002 fb3b 	bl	80069c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800434e:	2301      	movs	r3, #1
}
 8004350:	4618      	mov	r0, r3
 8004352:	3710      	adds	r7, #16
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	e000ed04 	.word	0xe000ed04

0800435c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	; 0x38
 8004360:	af02      	add	r7, sp, #8
 8004362:	60f8      	str	r0, [r7, #12]
 8004364:	60b9      	str	r1, [r7, #8]
 8004366:	607a      	str	r2, [r7, #4]
 8004368:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d10a      	bne.n	8004386 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004374:	f383 8811 	msr	BASEPRI, r3
 8004378:	f3bf 8f6f 	isb	sy
 800437c:	f3bf 8f4f 	dsb	sy
 8004380:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004382:	bf00      	nop
 8004384:	e7fe      	b.n	8004384 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004386:	683b      	ldr	r3, [r7, #0]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d10a      	bne.n	80043a2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 800438c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004390:	f383 8811 	msr	BASEPRI, r3
 8004394:	f3bf 8f6f 	isb	sy
 8004398:	f3bf 8f4f 	dsb	sy
 800439c:	627b      	str	r3, [r7, #36]	; 0x24
}
 800439e:	bf00      	nop
 80043a0:	e7fe      	b.n	80043a0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	2b00      	cmp	r3, #0
 80043a6:	d002      	beq.n	80043ae <xQueueGenericCreateStatic+0x52>
 80043a8:	68bb      	ldr	r3, [r7, #8]
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d001      	beq.n	80043b2 <xQueueGenericCreateStatic+0x56>
 80043ae:	2301      	movs	r3, #1
 80043b0:	e000      	b.n	80043b4 <xQueueGenericCreateStatic+0x58>
 80043b2:	2300      	movs	r3, #0
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d10a      	bne.n	80043ce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80043b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043bc:	f383 8811 	msr	BASEPRI, r3
 80043c0:	f3bf 8f6f 	isb	sy
 80043c4:	f3bf 8f4f 	dsb	sy
 80043c8:	623b      	str	r3, [r7, #32]
}
 80043ca:	bf00      	nop
 80043cc:	e7fe      	b.n	80043cc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d102      	bne.n	80043da <xQueueGenericCreateStatic+0x7e>
 80043d4:	68bb      	ldr	r3, [r7, #8]
 80043d6:	2b00      	cmp	r3, #0
 80043d8:	d101      	bne.n	80043de <xQueueGenericCreateStatic+0x82>
 80043da:	2301      	movs	r3, #1
 80043dc:	e000      	b.n	80043e0 <xQueueGenericCreateStatic+0x84>
 80043de:	2300      	movs	r3, #0
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d10a      	bne.n	80043fa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80043e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80043e8:	f383 8811 	msr	BASEPRI, r3
 80043ec:	f3bf 8f6f 	isb	sy
 80043f0:	f3bf 8f4f 	dsb	sy
 80043f4:	61fb      	str	r3, [r7, #28]
}
 80043f6:	bf00      	nop
 80043f8:	e7fe      	b.n	80043f8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80043fa:	2350      	movs	r3, #80	; 0x50
 80043fc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b50      	cmp	r3, #80	; 0x50
 8004402:	d00a      	beq.n	800441a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004404:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004408:	f383 8811 	msr	BASEPRI, r3
 800440c:	f3bf 8f6f 	isb	sy
 8004410:	f3bf 8f4f 	dsb	sy
 8004414:	61bb      	str	r3, [r7, #24]
}
 8004416:	bf00      	nop
 8004418:	e7fe      	b.n	8004418 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800441a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800441c:	683b      	ldr	r3, [r7, #0]
 800441e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004422:	2b00      	cmp	r3, #0
 8004424:	d00d      	beq.n	8004442 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004426:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004428:	2201      	movs	r2, #1
 800442a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800442e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004432:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004434:	9300      	str	r3, [sp, #0]
 8004436:	4613      	mov	r3, r2
 8004438:	687a      	ldr	r2, [r7, #4]
 800443a:	68b9      	ldr	r1, [r7, #8]
 800443c:	68f8      	ldr	r0, [r7, #12]
 800443e:	f000 f83f 	bl	80044c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004444:	4618      	mov	r0, r3
 8004446:	3730      	adds	r7, #48	; 0x30
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800444c:	b580      	push	{r7, lr}
 800444e:	b08a      	sub	sp, #40	; 0x28
 8004450:	af02      	add	r7, sp, #8
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	4613      	mov	r3, r2
 8004458:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800445a:	68fb      	ldr	r3, [r7, #12]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d10a      	bne.n	8004476 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004464:	f383 8811 	msr	BASEPRI, r3
 8004468:	f3bf 8f6f 	isb	sy
 800446c:	f3bf 8f4f 	dsb	sy
 8004470:	613b      	str	r3, [r7, #16]
}
 8004472:	bf00      	nop
 8004474:	e7fe      	b.n	8004474 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	68ba      	ldr	r2, [r7, #8]
 800447a:	fb02 f303 	mul.w	r3, r2, r3
 800447e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3350      	adds	r3, #80	; 0x50
 8004484:	4618      	mov	r0, r3
 8004486:	f002 fb8f 	bl	8006ba8 <pvPortMalloc>
 800448a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d011      	beq.n	80044b6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	3350      	adds	r3, #80	; 0x50
 800449a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	2200      	movs	r2, #0
 80044a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80044a4:	79fa      	ldrb	r2, [r7, #7]
 80044a6:	69bb      	ldr	r3, [r7, #24]
 80044a8:	9300      	str	r3, [sp, #0]
 80044aa:	4613      	mov	r3, r2
 80044ac:	697a      	ldr	r2, [r7, #20]
 80044ae:	68b9      	ldr	r1, [r7, #8]
 80044b0:	68f8      	ldr	r0, [r7, #12]
 80044b2:	f000 f805 	bl	80044c0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80044b6:	69bb      	ldr	r3, [r7, #24]
	}
 80044b8:	4618      	mov	r0, r3
 80044ba:	3720      	adds	r7, #32
 80044bc:	46bd      	mov	sp, r7
 80044be:	bd80      	pop	{r7, pc}

080044c0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b084      	sub	sp, #16
 80044c4:	af00      	add	r7, sp, #0
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
 80044cc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80044ce:	68bb      	ldr	r3, [r7, #8]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d103      	bne.n	80044dc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 80044d4:	69bb      	ldr	r3, [r7, #24]
 80044d6:	69ba      	ldr	r2, [r7, #24]
 80044d8:	601a      	str	r2, [r3, #0]
 80044da:	e002      	b.n	80044e2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 80044dc:	69bb      	ldr	r3, [r7, #24]
 80044de:	687a      	ldr	r2, [r7, #4]
 80044e0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80044e8:	69bb      	ldr	r3, [r7, #24]
 80044ea:	68ba      	ldr	r2, [r7, #8]
 80044ec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80044ee:	2101      	movs	r1, #1
 80044f0:	69b8      	ldr	r0, [r7, #24]
 80044f2:	f7ff fecb 	bl	800428c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80044f6:	69bb      	ldr	r3, [r7, #24]
 80044f8:	78fa      	ldrb	r2, [r7, #3]
 80044fa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80044fe:	bf00      	nop
 8004500:	3710      	adds	r7, #16
 8004502:	46bd      	mov	sp, r7
 8004504:	bd80      	pop	{r7, pc}

08004506 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8004506:	b580      	push	{r7, lr}
 8004508:	b086      	sub	sp, #24
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
 800450e:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d10a      	bne.n	800452c <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 8004516:	f04f 0350 	mov.w	r3, #80	; 0x50
 800451a:	f383 8811 	msr	BASEPRI, r3
 800451e:	f3bf 8f6f 	isb	sy
 8004522:	f3bf 8f4f 	dsb	sy
 8004526:	613b      	str	r3, [r7, #16]
}
 8004528:	bf00      	nop
 800452a:	e7fe      	b.n	800452a <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 800452c:	683a      	ldr	r2, [r7, #0]
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	429a      	cmp	r2, r3
 8004532:	d90a      	bls.n	800454a <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 8004534:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004538:	f383 8811 	msr	BASEPRI, r3
 800453c:	f3bf 8f6f 	isb	sy
 8004540:	f3bf 8f4f 	dsb	sy
 8004544:	60fb      	str	r3, [r7, #12]
}
 8004546:	bf00      	nop
 8004548:	e7fe      	b.n	8004548 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800454a:	2202      	movs	r2, #2
 800454c:	2100      	movs	r1, #0
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f7ff ff7c 	bl	800444c <xQueueGenericCreate>
 8004554:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d002      	beq.n	8004562 <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800455c:	697b      	ldr	r3, [r7, #20]
 800455e:	683a      	ldr	r2, [r7, #0]
 8004560:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8004562:	697b      	ldr	r3, [r7, #20]
	}
 8004564:	4618      	mov	r0, r3
 8004566:	3718      	adds	r7, #24
 8004568:	46bd      	mov	sp, r7
 800456a:	bd80      	pop	{r7, pc}

0800456c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800456c:	b580      	push	{r7, lr}
 800456e:	b08e      	sub	sp, #56	; 0x38
 8004570:	af00      	add	r7, sp, #0
 8004572:	60f8      	str	r0, [r7, #12]
 8004574:	60b9      	str	r1, [r7, #8]
 8004576:	607a      	str	r2, [r7, #4]
 8004578:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800457a:	2300      	movs	r3, #0
 800457c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	2b00      	cmp	r3, #0
 8004586:	d10a      	bne.n	800459e <xQueueGenericSend+0x32>
	__asm volatile
 8004588:	f04f 0350 	mov.w	r3, #80	; 0x50
 800458c:	f383 8811 	msr	BASEPRI, r3
 8004590:	f3bf 8f6f 	isb	sy
 8004594:	f3bf 8f4f 	dsb	sy
 8004598:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800459a:	bf00      	nop
 800459c:	e7fe      	b.n	800459c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d103      	bne.n	80045ac <xQueueGenericSend+0x40>
 80045a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d101      	bne.n	80045b0 <xQueueGenericSend+0x44>
 80045ac:	2301      	movs	r3, #1
 80045ae:	e000      	b.n	80045b2 <xQueueGenericSend+0x46>
 80045b0:	2300      	movs	r3, #0
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d10a      	bne.n	80045cc <xQueueGenericSend+0x60>
	__asm volatile
 80045b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045ba:	f383 8811 	msr	BASEPRI, r3
 80045be:	f3bf 8f6f 	isb	sy
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	627b      	str	r3, [r7, #36]	; 0x24
}
 80045c8:	bf00      	nop
 80045ca:	e7fe      	b.n	80045ca <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	2b02      	cmp	r3, #2
 80045d0:	d103      	bne.n	80045da <xQueueGenericSend+0x6e>
 80045d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045d6:	2b01      	cmp	r3, #1
 80045d8:	d101      	bne.n	80045de <xQueueGenericSend+0x72>
 80045da:	2301      	movs	r3, #1
 80045dc:	e000      	b.n	80045e0 <xQueueGenericSend+0x74>
 80045de:	2300      	movs	r3, #0
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d10a      	bne.n	80045fa <xQueueGenericSend+0x8e>
	__asm volatile
 80045e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80045e8:	f383 8811 	msr	BASEPRI, r3
 80045ec:	f3bf 8f6f 	isb	sy
 80045f0:	f3bf 8f4f 	dsb	sy
 80045f4:	623b      	str	r3, [r7, #32]
}
 80045f6:	bf00      	nop
 80045f8:	e7fe      	b.n	80045f8 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80045fa:	f001 fb59 	bl	8005cb0 <xTaskGetSchedulerState>
 80045fe:	4603      	mov	r3, r0
 8004600:	2b00      	cmp	r3, #0
 8004602:	d102      	bne.n	800460a <xQueueGenericSend+0x9e>
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d101      	bne.n	800460e <xQueueGenericSend+0xa2>
 800460a:	2301      	movs	r3, #1
 800460c:	e000      	b.n	8004610 <xQueueGenericSend+0xa4>
 800460e:	2300      	movs	r3, #0
 8004610:	2b00      	cmp	r3, #0
 8004612:	d10a      	bne.n	800462a <xQueueGenericSend+0xbe>
	__asm volatile
 8004614:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004618:	f383 8811 	msr	BASEPRI, r3
 800461c:	f3bf 8f6f 	isb	sy
 8004620:	f3bf 8f4f 	dsb	sy
 8004624:	61fb      	str	r3, [r7, #28]
}
 8004626:	bf00      	nop
 8004628:	e7fe      	b.n	8004628 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800462a:	f002 f99b 	bl	8006964 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800462e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004630:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004632:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004636:	429a      	cmp	r2, r3
 8004638:	d302      	bcc.n	8004640 <xQueueGenericSend+0xd4>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b02      	cmp	r3, #2
 800463e:	d129      	bne.n	8004694 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004640:	683a      	ldr	r2, [r7, #0]
 8004642:	68b9      	ldr	r1, [r7, #8]
 8004644:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004646:	f000 fb2f 	bl	8004ca8 <prvCopyDataToQueue>
 800464a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800464c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800464e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004650:	2b00      	cmp	r3, #0
 8004652:	d010      	beq.n	8004676 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004654:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004656:	3324      	adds	r3, #36	; 0x24
 8004658:	4618      	mov	r0, r3
 800465a:	f001 f957 	bl	800590c <xTaskRemoveFromEventList>
 800465e:	4603      	mov	r3, r0
 8004660:	2b00      	cmp	r3, #0
 8004662:	d013      	beq.n	800468c <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004664:	4b3f      	ldr	r3, [pc, #252]	; (8004764 <xQueueGenericSend+0x1f8>)
 8004666:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800466a:	601a      	str	r2, [r3, #0]
 800466c:	f3bf 8f4f 	dsb	sy
 8004670:	f3bf 8f6f 	isb	sy
 8004674:	e00a      	b.n	800468c <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004678:	2b00      	cmp	r3, #0
 800467a:	d007      	beq.n	800468c <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800467c:	4b39      	ldr	r3, [pc, #228]	; (8004764 <xQueueGenericSend+0x1f8>)
 800467e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004682:	601a      	str	r2, [r3, #0]
 8004684:	f3bf 8f4f 	dsb	sy
 8004688:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800468c:	f002 f99a 	bl	80069c4 <vPortExitCritical>
				return pdPASS;
 8004690:	2301      	movs	r3, #1
 8004692:	e063      	b.n	800475c <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b00      	cmp	r3, #0
 8004698:	d103      	bne.n	80046a2 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800469a:	f002 f993 	bl	80069c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800469e:	2300      	movs	r3, #0
 80046a0:	e05c      	b.n	800475c <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 80046a2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d106      	bne.n	80046b6 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80046a8:	f107 0314 	add.w	r3, r7, #20
 80046ac:	4618      	mov	r0, r3
 80046ae:	f001 f991 	bl	80059d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80046b2:	2301      	movs	r3, #1
 80046b4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80046b6:	f002 f985 	bl	80069c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80046ba:	f000 fefd 	bl	80054b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80046be:	f002 f951 	bl	8006964 <vPortEnterCritical>
 80046c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80046c8:	b25b      	sxtb	r3, r3
 80046ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046ce:	d103      	bne.n	80046d8 <xQueueGenericSend+0x16c>
 80046d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046d2:	2200      	movs	r2, #0
 80046d4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046da:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046de:	b25b      	sxtb	r3, r3
 80046e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046e4:	d103      	bne.n	80046ee <xQueueGenericSend+0x182>
 80046e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80046e8:	2200      	movs	r2, #0
 80046ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046ee:	f002 f969 	bl	80069c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80046f2:	1d3a      	adds	r2, r7, #4
 80046f4:	f107 0314 	add.w	r3, r7, #20
 80046f8:	4611      	mov	r1, r2
 80046fa:	4618      	mov	r0, r3
 80046fc:	f001 f980 	bl	8005a00 <xTaskCheckForTimeOut>
 8004700:	4603      	mov	r3, r0
 8004702:	2b00      	cmp	r3, #0
 8004704:	d124      	bne.n	8004750 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004706:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004708:	f000 fbc6 	bl	8004e98 <prvIsQueueFull>
 800470c:	4603      	mov	r3, r0
 800470e:	2b00      	cmp	r3, #0
 8004710:	d018      	beq.n	8004744 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004712:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004714:	3310      	adds	r3, #16
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4611      	mov	r1, r2
 800471a:	4618      	mov	r0, r3
 800471c:	f001 f8a6 	bl	800586c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004720:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004722:	f000 fb51 	bl	8004dc8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004726:	f000 fed5 	bl	80054d4 <xTaskResumeAll>
 800472a:	4603      	mov	r3, r0
 800472c:	2b00      	cmp	r3, #0
 800472e:	f47f af7c 	bne.w	800462a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8004732:	4b0c      	ldr	r3, [pc, #48]	; (8004764 <xQueueGenericSend+0x1f8>)
 8004734:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	f3bf 8f4f 	dsb	sy
 800473e:	f3bf 8f6f 	isb	sy
 8004742:	e772      	b.n	800462a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004744:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004746:	f000 fb3f 	bl	8004dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800474a:	f000 fec3 	bl	80054d4 <xTaskResumeAll>
 800474e:	e76c      	b.n	800462a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004750:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004752:	f000 fb39 	bl	8004dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004756:	f000 febd 	bl	80054d4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800475a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800475c:	4618      	mov	r0, r3
 800475e:	3738      	adds	r7, #56	; 0x38
 8004760:	46bd      	mov	sp, r7
 8004762:	bd80      	pop	{r7, pc}
 8004764:	e000ed04 	.word	0xe000ed04

08004768 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b090      	sub	sp, #64	; 0x40
 800476c:	af00      	add	r7, sp, #0
 800476e:	60f8      	str	r0, [r7, #12]
 8004770:	60b9      	str	r1, [r7, #8]
 8004772:	607a      	str	r2, [r7, #4]
 8004774:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800477a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800477c:	2b00      	cmp	r3, #0
 800477e:	d10a      	bne.n	8004796 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004784:	f383 8811 	msr	BASEPRI, r3
 8004788:	f3bf 8f6f 	isb	sy
 800478c:	f3bf 8f4f 	dsb	sy
 8004790:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004792:	bf00      	nop
 8004794:	e7fe      	b.n	8004794 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004796:	68bb      	ldr	r3, [r7, #8]
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <xQueueGenericSendFromISR+0x3c>
 800479c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800479e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d101      	bne.n	80047a8 <xQueueGenericSendFromISR+0x40>
 80047a4:	2301      	movs	r3, #1
 80047a6:	e000      	b.n	80047aa <xQueueGenericSendFromISR+0x42>
 80047a8:	2300      	movs	r3, #0
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d10a      	bne.n	80047c4 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80047ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047b2:	f383 8811 	msr	BASEPRI, r3
 80047b6:	f3bf 8f6f 	isb	sy
 80047ba:	f3bf 8f4f 	dsb	sy
 80047be:	627b      	str	r3, [r7, #36]	; 0x24
}
 80047c0:	bf00      	nop
 80047c2:	e7fe      	b.n	80047c2 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d103      	bne.n	80047d2 <xQueueGenericSendFromISR+0x6a>
 80047ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80047cc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80047ce:	2b01      	cmp	r3, #1
 80047d0:	d101      	bne.n	80047d6 <xQueueGenericSendFromISR+0x6e>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <xQueueGenericSendFromISR+0x70>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10a      	bne.n	80047f2 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	623b      	str	r3, [r7, #32]
}
 80047ee:	bf00      	nop
 80047f0:	e7fe      	b.n	80047f0 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80047f2:	f002 f999 	bl	8006b28 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80047f6:	f3ef 8211 	mrs	r2, BASEPRI
 80047fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80047fe:	f383 8811 	msr	BASEPRI, r3
 8004802:	f3bf 8f6f 	isb	sy
 8004806:	f3bf 8f4f 	dsb	sy
 800480a:	61fa      	str	r2, [r7, #28]
 800480c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800480e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004810:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004814:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004818:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800481a:	429a      	cmp	r2, r3
 800481c:	d302      	bcc.n	8004824 <xQueueGenericSendFromISR+0xbc>
 800481e:	683b      	ldr	r3, [r7, #0]
 8004820:	2b02      	cmp	r3, #2
 8004822:	d12f      	bne.n	8004884 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004824:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004826:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800482a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800482e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004830:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004832:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004834:	683a      	ldr	r2, [r7, #0]
 8004836:	68b9      	ldr	r1, [r7, #8]
 8004838:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800483a:	f000 fa35 	bl	8004ca8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800483e:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8004842:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004846:	d112      	bne.n	800486e <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004848:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800484a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800484c:	2b00      	cmp	r3, #0
 800484e:	d016      	beq.n	800487e <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004850:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004852:	3324      	adds	r3, #36	; 0x24
 8004854:	4618      	mov	r0, r3
 8004856:	f001 f859 	bl	800590c <xTaskRemoveFromEventList>
 800485a:	4603      	mov	r3, r0
 800485c:	2b00      	cmp	r3, #0
 800485e:	d00e      	beq.n	800487e <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2b00      	cmp	r3, #0
 8004864:	d00b      	beq.n	800487e <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	2201      	movs	r2, #1
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e007      	b.n	800487e <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800486e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004872:	3301      	adds	r3, #1
 8004874:	b2db      	uxtb	r3, r3
 8004876:	b25a      	sxtb	r2, r3
 8004878:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800487e:	2301      	movs	r3, #1
 8004880:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8004882:	e001      	b.n	8004888 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004884:	2300      	movs	r3, #0
 8004886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004888:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800488a:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800488c:	697b      	ldr	r3, [r7, #20]
 800488e:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004892:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004894:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8004896:	4618      	mov	r0, r3
 8004898:	3740      	adds	r7, #64	; 0x40
 800489a:	46bd      	mov	sp, r7
 800489c:	bd80      	pop	{r7, pc}
	...

080048a0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80048a0:	b580      	push	{r7, lr}
 80048a2:	b08c      	sub	sp, #48	; 0x30
 80048a4:	af00      	add	r7, sp, #0
 80048a6:	60f8      	str	r0, [r7, #12]
 80048a8:	60b9      	str	r1, [r7, #8]
 80048aa:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80048ac:	2300      	movs	r3, #0
 80048ae:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80048b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10a      	bne.n	80048d0 <xQueueReceive+0x30>
	__asm volatile
 80048ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048be:	f383 8811 	msr	BASEPRI, r3
 80048c2:	f3bf 8f6f 	isb	sy
 80048c6:	f3bf 8f4f 	dsb	sy
 80048ca:	623b      	str	r3, [r7, #32]
}
 80048cc:	bf00      	nop
 80048ce:	e7fe      	b.n	80048ce <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80048d0:	68bb      	ldr	r3, [r7, #8]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d103      	bne.n	80048de <xQueueReceive+0x3e>
 80048d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d101      	bne.n	80048e2 <xQueueReceive+0x42>
 80048de:	2301      	movs	r3, #1
 80048e0:	e000      	b.n	80048e4 <xQueueReceive+0x44>
 80048e2:	2300      	movs	r3, #0
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <xQueueReceive+0x5e>
	__asm volatile
 80048e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ec:	f383 8811 	msr	BASEPRI, r3
 80048f0:	f3bf 8f6f 	isb	sy
 80048f4:	f3bf 8f4f 	dsb	sy
 80048f8:	61fb      	str	r3, [r7, #28]
}
 80048fa:	bf00      	nop
 80048fc:	e7fe      	b.n	80048fc <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80048fe:	f001 f9d7 	bl	8005cb0 <xTaskGetSchedulerState>
 8004902:	4603      	mov	r3, r0
 8004904:	2b00      	cmp	r3, #0
 8004906:	d102      	bne.n	800490e <xQueueReceive+0x6e>
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <xQueueReceive+0x72>
 800490e:	2301      	movs	r3, #1
 8004910:	e000      	b.n	8004914 <xQueueReceive+0x74>
 8004912:	2300      	movs	r3, #0
 8004914:	2b00      	cmp	r3, #0
 8004916:	d10a      	bne.n	800492e <xQueueReceive+0x8e>
	__asm volatile
 8004918:	f04f 0350 	mov.w	r3, #80	; 0x50
 800491c:	f383 8811 	msr	BASEPRI, r3
 8004920:	f3bf 8f6f 	isb	sy
 8004924:	f3bf 8f4f 	dsb	sy
 8004928:	61bb      	str	r3, [r7, #24]
}
 800492a:	bf00      	nop
 800492c:	e7fe      	b.n	800492c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800492e:	f002 f819 	bl	8006964 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004932:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004934:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004936:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800493a:	2b00      	cmp	r3, #0
 800493c:	d01f      	beq.n	800497e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800493e:	68b9      	ldr	r1, [r7, #8]
 8004940:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004942:	f000 fa1b 	bl	8004d7c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004946:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004948:	1e5a      	subs	r2, r3, #1
 800494a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494c:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800494e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004950:	691b      	ldr	r3, [r3, #16]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00f      	beq.n	8004976 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004956:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004958:	3310      	adds	r3, #16
 800495a:	4618      	mov	r0, r3
 800495c:	f000 ffd6 	bl	800590c <xTaskRemoveFromEventList>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d007      	beq.n	8004976 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004966:	4b3d      	ldr	r3, [pc, #244]	; (8004a5c <xQueueReceive+0x1bc>)
 8004968:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800496c:	601a      	str	r2, [r3, #0]
 800496e:	f3bf 8f4f 	dsb	sy
 8004972:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004976:	f002 f825 	bl	80069c4 <vPortExitCritical>
				return pdPASS;
 800497a:	2301      	movs	r3, #1
 800497c:	e069      	b.n	8004a52 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2b00      	cmp	r3, #0
 8004982:	d103      	bne.n	800498c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004984:	f002 f81e 	bl	80069c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004988:	2300      	movs	r3, #0
 800498a:	e062      	b.n	8004a52 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 800498c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800498e:	2b00      	cmp	r3, #0
 8004990:	d106      	bne.n	80049a0 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004992:	f107 0310 	add.w	r3, r7, #16
 8004996:	4618      	mov	r0, r3
 8004998:	f001 f81c 	bl	80059d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800499c:	2301      	movs	r3, #1
 800499e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80049a0:	f002 f810 	bl	80069c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80049a4:	f000 fd88 	bl	80054b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80049a8:	f001 ffdc 	bl	8006964 <vPortEnterCritical>
 80049ac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80049b2:	b25b      	sxtb	r3, r3
 80049b4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049b8:	d103      	bne.n	80049c2 <xQueueReceive+0x122>
 80049ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049bc:	2200      	movs	r2, #0
 80049be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049c4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80049c8:	b25b      	sxtb	r3, r3
 80049ca:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049ce:	d103      	bne.n	80049d8 <xQueueReceive+0x138>
 80049d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049d2:	2200      	movs	r2, #0
 80049d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80049d8:	f001 fff4 	bl	80069c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80049dc:	1d3a      	adds	r2, r7, #4
 80049de:	f107 0310 	add.w	r3, r7, #16
 80049e2:	4611      	mov	r1, r2
 80049e4:	4618      	mov	r0, r3
 80049e6:	f001 f80b 	bl	8005a00 <xTaskCheckForTimeOut>
 80049ea:	4603      	mov	r3, r0
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d123      	bne.n	8004a38 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80049f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80049f2:	f000 fa3b 	bl	8004e6c <prvIsQueueEmpty>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d017      	beq.n	8004a2c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80049fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80049fe:	3324      	adds	r3, #36	; 0x24
 8004a00:	687a      	ldr	r2, [r7, #4]
 8004a02:	4611      	mov	r1, r2
 8004a04:	4618      	mov	r0, r3
 8004a06:	f000 ff31 	bl	800586c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004a0a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a0c:	f000 f9dc 	bl	8004dc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004a10:	f000 fd60 	bl	80054d4 <xTaskResumeAll>
 8004a14:	4603      	mov	r3, r0
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d189      	bne.n	800492e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004a1a:	4b10      	ldr	r3, [pc, #64]	; (8004a5c <xQueueReceive+0x1bc>)
 8004a1c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a20:	601a      	str	r2, [r3, #0]
 8004a22:	f3bf 8f4f 	dsb	sy
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	e780      	b.n	800492e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004a2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a2e:	f000 f9cb 	bl	8004dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004a32:	f000 fd4f 	bl	80054d4 <xTaskResumeAll>
 8004a36:	e77a      	b.n	800492e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004a38:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a3a:	f000 f9c5 	bl	8004dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004a3e:	f000 fd49 	bl	80054d4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004a42:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004a44:	f000 fa12 	bl	8004e6c <prvIsQueueEmpty>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	f43f af6f 	beq.w	800492e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004a50:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004a52:	4618      	mov	r0, r3
 8004a54:	3730      	adds	r7, #48	; 0x30
 8004a56:	46bd      	mov	sp, r7
 8004a58:	bd80      	pop	{r7, pc}
 8004a5a:	bf00      	nop
 8004a5c:	e000ed04 	.word	0xe000ed04

08004a60 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8004a60:	b580      	push	{r7, lr}
 8004a62:	b08e      	sub	sp, #56	; 0x38
 8004a64:	af00      	add	r7, sp, #0
 8004a66:	6078      	str	r0, [r7, #4]
 8004a68:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8004a6a:	2300      	movs	r3, #0
 8004a6c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8004a72:	2300      	movs	r3, #0
 8004a74:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004a76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d10a      	bne.n	8004a92 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8004a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a80:	f383 8811 	msr	BASEPRI, r3
 8004a84:	f3bf 8f6f 	isb	sy
 8004a88:	f3bf 8f4f 	dsb	sy
 8004a8c:	623b      	str	r3, [r7, #32]
}
 8004a8e:	bf00      	nop
 8004a90:	e7fe      	b.n	8004a90 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8004a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8004a9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9e:	f383 8811 	msr	BASEPRI, r3
 8004aa2:	f3bf 8f6f 	isb	sy
 8004aa6:	f3bf 8f4f 	dsb	sy
 8004aaa:	61fb      	str	r3, [r7, #28]
}
 8004aac:	bf00      	nop
 8004aae:	e7fe      	b.n	8004aae <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ab0:	f001 f8fe 	bl	8005cb0 <xTaskGetSchedulerState>
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <xQueueSemaphoreTake+0x60>
 8004aba:	683b      	ldr	r3, [r7, #0]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d101      	bne.n	8004ac4 <xQueueSemaphoreTake+0x64>
 8004ac0:	2301      	movs	r3, #1
 8004ac2:	e000      	b.n	8004ac6 <xQueueSemaphoreTake+0x66>
 8004ac4:	2300      	movs	r3, #0
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d10a      	bne.n	8004ae0 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8004aca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ace:	f383 8811 	msr	BASEPRI, r3
 8004ad2:	f3bf 8f6f 	isb	sy
 8004ad6:	f3bf 8f4f 	dsb	sy
 8004ada:	61bb      	str	r3, [r7, #24]
}
 8004adc:	bf00      	nop
 8004ade:	e7fe      	b.n	8004ade <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004ae0:	f001 ff40 	bl	8006964 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8004ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004ae6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ae8:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8004aea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d024      	beq.n	8004b3a <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8004af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004af2:	1e5a      	subs	r2, r3, #1
 8004af4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004af6:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004af8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d104      	bne.n	8004b0a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8004b00:	f001 fa4c 	bl	8005f9c <pvTaskIncrementMutexHeldCount>
 8004b04:	4602      	mov	r2, r0
 8004b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b08:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b0c:	691b      	ldr	r3, [r3, #16]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d00f      	beq.n	8004b32 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b14:	3310      	adds	r3, #16
 8004b16:	4618      	mov	r0, r3
 8004b18:	f000 fef8 	bl	800590c <xTaskRemoveFromEventList>
 8004b1c:	4603      	mov	r3, r0
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d007      	beq.n	8004b32 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b22:	4b54      	ldr	r3, [pc, #336]	; (8004c74 <xQueueSemaphoreTake+0x214>)
 8004b24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b28:	601a      	str	r2, [r3, #0]
 8004b2a:	f3bf 8f4f 	dsb	sy
 8004b2e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004b32:	f001 ff47 	bl	80069c4 <vPortExitCritical>
				return pdPASS;
 8004b36:	2301      	movs	r3, #1
 8004b38:	e097      	b.n	8004c6a <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004b3a:	683b      	ldr	r3, [r7, #0]
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d111      	bne.n	8004b64 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8004b40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d00a      	beq.n	8004b5c <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8004b46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b4a:	f383 8811 	msr	BASEPRI, r3
 8004b4e:	f3bf 8f6f 	isb	sy
 8004b52:	f3bf 8f4f 	dsb	sy
 8004b56:	617b      	str	r3, [r7, #20]
}
 8004b58:	bf00      	nop
 8004b5a:	e7fe      	b.n	8004b5a <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8004b5c:	f001 ff32 	bl	80069c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004b60:	2300      	movs	r3, #0
 8004b62:	e082      	b.n	8004c6a <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004b64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004b6a:	f107 030c 	add.w	r3, r7, #12
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f000 ff30 	bl	80059d4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004b74:	2301      	movs	r3, #1
 8004b76:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004b78:	f001 ff24 	bl	80069c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004b7c:	f000 fc9c 	bl	80054b8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004b80:	f001 fef0 	bl	8006964 <vPortEnterCritical>
 8004b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b86:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004b8a:	b25b      	sxtb	r3, r3
 8004b8c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b90:	d103      	bne.n	8004b9a <xQueueSemaphoreTake+0x13a>
 8004b92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b94:	2200      	movs	r2, #0
 8004b96:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ba0:	b25b      	sxtb	r3, r3
 8004ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004ba6:	d103      	bne.n	8004bb0 <xQueueSemaphoreTake+0x150>
 8004ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004baa:	2200      	movs	r2, #0
 8004bac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004bb0:	f001 ff08 	bl	80069c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004bb4:	463a      	mov	r2, r7
 8004bb6:	f107 030c 	add.w	r3, r7, #12
 8004bba:	4611      	mov	r1, r2
 8004bbc:	4618      	mov	r0, r3
 8004bbe:	f000 ff1f 	bl	8005a00 <xTaskCheckForTimeOut>
 8004bc2:	4603      	mov	r3, r0
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d132      	bne.n	8004c2e <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004bc8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004bca:	f000 f94f 	bl	8004e6c <prvIsQueueEmpty>
 8004bce:	4603      	mov	r3, r0
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d026      	beq.n	8004c22 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004bd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d109      	bne.n	8004bf0 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 8004bdc:	f001 fec2 	bl	8006964 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004be0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004be2:	689b      	ldr	r3, [r3, #8]
 8004be4:	4618      	mov	r0, r3
 8004be6:	f001 f881 	bl	8005cec <xTaskPriorityInherit>
 8004bea:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8004bec:	f001 feea 	bl	80069c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004bf0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bf2:	3324      	adds	r3, #36	; 0x24
 8004bf4:	683a      	ldr	r2, [r7, #0]
 8004bf6:	4611      	mov	r1, r2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fe37 	bl	800586c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004bfe:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c00:	f000 f8e2 	bl	8004dc8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c04:	f000 fc66 	bl	80054d4 <xTaskResumeAll>
 8004c08:	4603      	mov	r3, r0
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	f47f af68 	bne.w	8004ae0 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 8004c10:	4b18      	ldr	r3, [pc, #96]	; (8004c74 <xQueueSemaphoreTake+0x214>)
 8004c12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004c16:	601a      	str	r2, [r3, #0]
 8004c18:	f3bf 8f4f 	dsb	sy
 8004c1c:	f3bf 8f6f 	isb	sy
 8004c20:	e75e      	b.n	8004ae0 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8004c22:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c24:	f000 f8d0 	bl	8004dc8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c28:	f000 fc54 	bl	80054d4 <xTaskResumeAll>
 8004c2c:	e758      	b.n	8004ae0 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8004c2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c30:	f000 f8ca 	bl	8004dc8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c34:	f000 fc4e 	bl	80054d4 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c38:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c3a:	f000 f917 	bl	8004e6c <prvIsQueueEmpty>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	f43f af4d 	beq.w	8004ae0 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8004c46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	d00d      	beq.n	8004c68 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 8004c4c:	f001 fe8a 	bl	8006964 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8004c50:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8004c52:	f000 f811 	bl	8004c78 <prvGetDisinheritPriorityAfterTimeout>
 8004c56:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8004c58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c5a:	689b      	ldr	r3, [r3, #8]
 8004c5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f001 f91a 	bl	8005e98 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8004c64:	f001 feae 	bl	80069c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c68:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c6a:	4618      	mov	r0, r3
 8004c6c:	3738      	adds	r7, #56	; 0x38
 8004c6e:	46bd      	mov	sp, r7
 8004c70:	bd80      	pop	{r7, pc}
 8004c72:	bf00      	nop
 8004c74:	e000ed04 	.word	0xe000ed04

08004c78 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8004c78:	b480      	push	{r7}
 8004c7a:	b085      	sub	sp, #20
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d006      	beq.n	8004c96 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 8004c92:	60fb      	str	r3, [r7, #12]
 8004c94:	e001      	b.n	8004c9a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8004c9a:	68fb      	ldr	r3, [r7, #12]
	}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004ca8:	b580      	push	{r7, lr}
 8004caa:	b086      	sub	sp, #24
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	60f8      	str	r0, [r7, #12]
 8004cb0:	60b9      	str	r1, [r7, #8]
 8004cb2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cbc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d10d      	bne.n	8004ce2 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d14d      	bne.n	8004d6a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	689b      	ldr	r3, [r3, #8]
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	f001 f872 	bl	8005dbc <xTaskPriorityDisinherit>
 8004cd8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	2200      	movs	r2, #0
 8004cde:	609a      	str	r2, [r3, #8]
 8004ce0:	e043      	b.n	8004d6a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d119      	bne.n	8004d1c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6858      	ldr	r0, [r3, #4]
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004cf0:	461a      	mov	r2, r3
 8004cf2:	68b9      	ldr	r1, [r7, #8]
 8004cf4:	f002 fa65 	bl	80071c2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	685a      	ldr	r2, [r3, #4]
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d00:	441a      	add	r2, r3
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d06:	68fb      	ldr	r3, [r7, #12]
 8004d08:	685a      	ldr	r2, [r3, #4]
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	689b      	ldr	r3, [r3, #8]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d32b      	bcc.n	8004d6a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	605a      	str	r2, [r3, #4]
 8004d1a:	e026      	b.n	8004d6a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	68d8      	ldr	r0, [r3, #12]
 8004d20:	68fb      	ldr	r3, [r7, #12]
 8004d22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d24:	461a      	mov	r2, r3
 8004d26:	68b9      	ldr	r1, [r7, #8]
 8004d28:	f002 fa4b 	bl	80071c2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	68da      	ldr	r2, [r3, #12]
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d34:	425b      	negs	r3, r3
 8004d36:	441a      	add	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	68da      	ldr	r2, [r3, #12]
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	429a      	cmp	r2, r3
 8004d46:	d207      	bcs.n	8004d58 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	689a      	ldr	r2, [r3, #8]
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d50:	425b      	negs	r3, r3
 8004d52:	441a      	add	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d105      	bne.n	8004d6a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d5e:	693b      	ldr	r3, [r7, #16]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d002      	beq.n	8004d6a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d64:	693b      	ldr	r3, [r7, #16]
 8004d66:	3b01      	subs	r3, #1
 8004d68:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1c5a      	adds	r2, r3, #1
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004d72:	697b      	ldr	r3, [r7, #20]
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3718      	adds	r7, #24
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	bd80      	pop	{r7, pc}

08004d7c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d7c:	b580      	push	{r7, lr}
 8004d7e:	b082      	sub	sp, #8
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d018      	beq.n	8004dc0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	68da      	ldr	r2, [r3, #12]
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d96:	441a      	add	r2, r3
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68da      	ldr	r2, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	429a      	cmp	r2, r3
 8004da6:	d303      	bcc.n	8004db0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	68d9      	ldr	r1, [r3, #12]
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004db8:	461a      	mov	r2, r3
 8004dba:	6838      	ldr	r0, [r7, #0]
 8004dbc:	f002 fa01 	bl	80071c2 <memcpy>
	}
}
 8004dc0:	bf00      	nop
 8004dc2:	3708      	adds	r7, #8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dd0:	f001 fdc8 	bl	8006964 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004dda:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004ddc:	e011      	b.n	8004e02 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d012      	beq.n	8004e0c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	3324      	adds	r3, #36	; 0x24
 8004dea:	4618      	mov	r0, r3
 8004dec:	f000 fd8e 	bl	800590c <xTaskRemoveFromEventList>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d001      	beq.n	8004dfa <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004df6:	f000 fe65 	bl	8005ac4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004dfa:	7bfb      	ldrb	r3, [r7, #15]
 8004dfc:	3b01      	subs	r3, #1
 8004dfe:	b2db      	uxtb	r3, r3
 8004e00:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004e02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	dce9      	bgt.n	8004dde <prvUnlockQueue+0x16>
 8004e0a:	e000      	b.n	8004e0e <prvUnlockQueue+0x46>
					break;
 8004e0c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	22ff      	movs	r2, #255	; 0xff
 8004e12:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004e16:	f001 fdd5 	bl	80069c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e1a:	f001 fda3 	bl	8006964 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004e24:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e26:	e011      	b.n	8004e4c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d012      	beq.n	8004e56 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	3310      	adds	r3, #16
 8004e34:	4618      	mov	r0, r3
 8004e36:	f000 fd69 	bl	800590c <xTaskRemoveFromEventList>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d001      	beq.n	8004e44 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e40:	f000 fe40 	bl	8005ac4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e44:	7bbb      	ldrb	r3, [r7, #14]
 8004e46:	3b01      	subs	r3, #1
 8004e48:	b2db      	uxtb	r3, r3
 8004e4a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e4c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	dce9      	bgt.n	8004e28 <prvUnlockQueue+0x60>
 8004e54:	e000      	b.n	8004e58 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e56:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	22ff      	movs	r2, #255	; 0xff
 8004e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004e60:	f001 fdb0 	bl	80069c4 <vPortExitCritical>
}
 8004e64:	bf00      	nop
 8004e66:	3710      	adds	r7, #16
 8004e68:	46bd      	mov	sp, r7
 8004e6a:	bd80      	pop	{r7, pc}

08004e6c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e6c:	b580      	push	{r7, lr}
 8004e6e:	b084      	sub	sp, #16
 8004e70:	af00      	add	r7, sp, #0
 8004e72:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e74:	f001 fd76 	bl	8006964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d102      	bne.n	8004e86 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e80:	2301      	movs	r3, #1
 8004e82:	60fb      	str	r3, [r7, #12]
 8004e84:	e001      	b.n	8004e8a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e86:	2300      	movs	r3, #0
 8004e88:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e8a:	f001 fd9b 	bl	80069c4 <vPortExitCritical>

	return xReturn;
 8004e8e:	68fb      	ldr	r3, [r7, #12]
}
 8004e90:	4618      	mov	r0, r3
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e98:	b580      	push	{r7, lr}
 8004e9a:	b084      	sub	sp, #16
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004ea0:	f001 fd60 	bl	8006964 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004eac:	429a      	cmp	r2, r3
 8004eae:	d102      	bne.n	8004eb6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e001      	b.n	8004eba <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004eb6:	2300      	movs	r3, #0
 8004eb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004eba:	f001 fd83 	bl	80069c4 <vPortExitCritical>

	return xReturn;
 8004ebe:	68fb      	ldr	r3, [r7, #12]
}
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	3710      	adds	r7, #16
 8004ec4:	46bd      	mov	sp, r7
 8004ec6:	bd80      	pop	{r7, pc}

08004ec8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004ec8:	b480      	push	{r7}
 8004eca:	b085      	sub	sp, #20
 8004ecc:	af00      	add	r7, sp, #0
 8004ece:	6078      	str	r0, [r7, #4]
 8004ed0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ed2:	2300      	movs	r3, #0
 8004ed4:	60fb      	str	r3, [r7, #12]
 8004ed6:	e014      	b.n	8004f02 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ed8:	4a0f      	ldr	r2, [pc, #60]	; (8004f18 <vQueueAddToRegistry+0x50>)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d10b      	bne.n	8004efc <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ee4:	490c      	ldr	r1, [pc, #48]	; (8004f18 <vQueueAddToRegistry+0x50>)
 8004ee6:	68fb      	ldr	r3, [r7, #12]
 8004ee8:	683a      	ldr	r2, [r7, #0]
 8004eea:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004eee:	4a0a      	ldr	r2, [pc, #40]	; (8004f18 <vQueueAddToRegistry+0x50>)
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	00db      	lsls	r3, r3, #3
 8004ef4:	4413      	add	r3, r2
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004efa:	e006      	b.n	8004f0a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	3301      	adds	r3, #1
 8004f00:	60fb      	str	r3, [r7, #12]
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b07      	cmp	r3, #7
 8004f06:	d9e7      	bls.n	8004ed8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004f08:	bf00      	nop
 8004f0a:	bf00      	nop
 8004f0c:	3714      	adds	r7, #20
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f14:	4770      	bx	lr
 8004f16:	bf00      	nop
 8004f18:	20000648 	.word	0x20000648

08004f1c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b086      	sub	sp, #24
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f2c:	f001 fd1a 	bl	8006964 <vPortEnterCritical>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004f36:	b25b      	sxtb	r3, r3
 8004f38:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f3c:	d103      	bne.n	8004f46 <vQueueWaitForMessageRestricted+0x2a>
 8004f3e:	697b      	ldr	r3, [r7, #20]
 8004f40:	2200      	movs	r2, #0
 8004f42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004f4c:	b25b      	sxtb	r3, r3
 8004f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f52:	d103      	bne.n	8004f5c <vQueueWaitForMessageRestricted+0x40>
 8004f54:	697b      	ldr	r3, [r7, #20]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004f5c:	f001 fd32 	bl	80069c4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f60:	697b      	ldr	r3, [r7, #20]
 8004f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d106      	bne.n	8004f76 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f68:	697b      	ldr	r3, [r7, #20]
 8004f6a:	3324      	adds	r3, #36	; 0x24
 8004f6c:	687a      	ldr	r2, [r7, #4]
 8004f6e:	68b9      	ldr	r1, [r7, #8]
 8004f70:	4618      	mov	r0, r3
 8004f72:	f000 fc9f 	bl	80058b4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f76:	6978      	ldr	r0, [r7, #20]
 8004f78:	f7ff ff26 	bl	8004dc8 <prvUnlockQueue>
	}
 8004f7c:	bf00      	nop
 8004f7e:	3718      	adds	r7, #24
 8004f80:	46bd      	mov	sp, r7
 8004f82:	bd80      	pop	{r7, pc}

08004f84 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004f84:	b580      	push	{r7, lr}
 8004f86:	b08e      	sub	sp, #56	; 0x38
 8004f88:	af04      	add	r7, sp, #16
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
 8004f90:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004f92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d10a      	bne.n	8004fae <xTaskCreateStatic+0x2a>
	__asm volatile
 8004f98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f9c:	f383 8811 	msr	BASEPRI, r3
 8004fa0:	f3bf 8f6f 	isb	sy
 8004fa4:	f3bf 8f4f 	dsb	sy
 8004fa8:	623b      	str	r3, [r7, #32]
}
 8004faa:	bf00      	nop
 8004fac:	e7fe      	b.n	8004fac <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004fae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10a      	bne.n	8004fca <xTaskCreateStatic+0x46>
	__asm volatile
 8004fb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb8:	f383 8811 	msr	BASEPRI, r3
 8004fbc:	f3bf 8f6f 	isb	sy
 8004fc0:	f3bf 8f4f 	dsb	sy
 8004fc4:	61fb      	str	r3, [r7, #28]
}
 8004fc6:	bf00      	nop
 8004fc8:	e7fe      	b.n	8004fc8 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004fca:	23bc      	movs	r3, #188	; 0xbc
 8004fcc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2bbc      	cmp	r3, #188	; 0xbc
 8004fd2:	d00a      	beq.n	8004fea <xTaskCreateStatic+0x66>
	__asm volatile
 8004fd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fd8:	f383 8811 	msr	BASEPRI, r3
 8004fdc:	f3bf 8f6f 	isb	sy
 8004fe0:	f3bf 8f4f 	dsb	sy
 8004fe4:	61bb      	str	r3, [r7, #24]
}
 8004fe6:	bf00      	nop
 8004fe8:	e7fe      	b.n	8004fe8 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8004fea:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004fec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d01e      	beq.n	8005030 <xTaskCreateStatic+0xac>
 8004ff2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d01b      	beq.n	8005030 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ff8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ffa:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ffe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005000:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005002:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005004:	2202      	movs	r2, #2
 8005006:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800500a:	2300      	movs	r3, #0
 800500c:	9303      	str	r3, [sp, #12]
 800500e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	f107 0314 	add.w	r3, r7, #20
 8005016:	9301      	str	r3, [sp, #4]
 8005018:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800501a:	9300      	str	r3, [sp, #0]
 800501c:	683b      	ldr	r3, [r7, #0]
 800501e:	687a      	ldr	r2, [r7, #4]
 8005020:	68b9      	ldr	r1, [r7, #8]
 8005022:	68f8      	ldr	r0, [r7, #12]
 8005024:	f000 f850 	bl	80050c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005028:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800502a:	f000 f8f3 	bl	8005214 <prvAddNewTaskToReadyList>
 800502e:	e001      	b.n	8005034 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005034:	697b      	ldr	r3, [r7, #20]
	}
 8005036:	4618      	mov	r0, r3
 8005038:	3728      	adds	r7, #40	; 0x28
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}

0800503e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800503e:	b580      	push	{r7, lr}
 8005040:	b08c      	sub	sp, #48	; 0x30
 8005042:	af04      	add	r7, sp, #16
 8005044:	60f8      	str	r0, [r7, #12]
 8005046:	60b9      	str	r1, [r7, #8]
 8005048:	603b      	str	r3, [r7, #0]
 800504a:	4613      	mov	r3, r2
 800504c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800504e:	88fb      	ldrh	r3, [r7, #6]
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4618      	mov	r0, r3
 8005054:	f001 fda8 	bl	8006ba8 <pvPortMalloc>
 8005058:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800505a:	697b      	ldr	r3, [r7, #20]
 800505c:	2b00      	cmp	r3, #0
 800505e:	d00e      	beq.n	800507e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005060:	20bc      	movs	r0, #188	; 0xbc
 8005062:	f001 fda1 	bl	8006ba8 <pvPortMalloc>
 8005066:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d003      	beq.n	8005076 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800506e:	69fb      	ldr	r3, [r7, #28]
 8005070:	697a      	ldr	r2, [r7, #20]
 8005072:	631a      	str	r2, [r3, #48]	; 0x30
 8005074:	e005      	b.n	8005082 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005076:	6978      	ldr	r0, [r7, #20]
 8005078:	f001 fe62 	bl	8006d40 <vPortFree>
 800507c:	e001      	b.n	8005082 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800507e:	2300      	movs	r3, #0
 8005080:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005082:	69fb      	ldr	r3, [r7, #28]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d017      	beq.n	80050b8 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005088:	69fb      	ldr	r3, [r7, #28]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	2300      	movs	r3, #0
 8005094:	9303      	str	r3, [sp, #12]
 8005096:	69fb      	ldr	r3, [r7, #28]
 8005098:	9302      	str	r3, [sp, #8]
 800509a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800509c:	9301      	str	r3, [sp, #4]
 800509e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050a0:	9300      	str	r3, [sp, #0]
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	68b9      	ldr	r1, [r7, #8]
 80050a6:	68f8      	ldr	r0, [r7, #12]
 80050a8:	f000 f80e 	bl	80050c8 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80050ac:	69f8      	ldr	r0, [r7, #28]
 80050ae:	f000 f8b1 	bl	8005214 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80050b2:	2301      	movs	r3, #1
 80050b4:	61bb      	str	r3, [r7, #24]
 80050b6:	e002      	b.n	80050be <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80050b8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80050bc:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80050be:	69bb      	ldr	r3, [r7, #24]
	}
 80050c0:	4618      	mov	r0, r3
 80050c2:	3720      	adds	r7, #32
 80050c4:	46bd      	mov	sp, r7
 80050c6:	bd80      	pop	{r7, pc}

080050c8 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80050c8:	b580      	push	{r7, lr}
 80050ca:	b088      	sub	sp, #32
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	607a      	str	r2, [r7, #4]
 80050d4:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80050d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050d8:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	009b      	lsls	r3, r3, #2
 80050de:	461a      	mov	r2, r3
 80050e0:	21a5      	movs	r1, #165	; 0xa5
 80050e2:	f002 f87c 	bl	80071de <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80050e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80050f0:	3b01      	subs	r3, #1
 80050f2:	009b      	lsls	r3, r3, #2
 80050f4:	4413      	add	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80050f8:	69bb      	ldr	r3, [r7, #24]
 80050fa:	f023 0307 	bic.w	r3, r3, #7
 80050fe:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005100:	69bb      	ldr	r3, [r7, #24]
 8005102:	f003 0307 	and.w	r3, r3, #7
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <prvInitialiseNewTask+0x58>
	__asm volatile
 800510a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800510e:	f383 8811 	msr	BASEPRI, r3
 8005112:	f3bf 8f6f 	isb	sy
 8005116:	f3bf 8f4f 	dsb	sy
 800511a:	617b      	str	r3, [r7, #20]
}
 800511c:	bf00      	nop
 800511e:	e7fe      	b.n	800511e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005120:	68bb      	ldr	r3, [r7, #8]
 8005122:	2b00      	cmp	r3, #0
 8005124:	d01f      	beq.n	8005166 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005126:	2300      	movs	r3, #0
 8005128:	61fb      	str	r3, [r7, #28]
 800512a:	e012      	b.n	8005152 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800512c:	68ba      	ldr	r2, [r7, #8]
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	7819      	ldrb	r1, [r3, #0]
 8005134:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005136:	69fb      	ldr	r3, [r7, #28]
 8005138:	4413      	add	r3, r2
 800513a:	3334      	adds	r3, #52	; 0x34
 800513c:	460a      	mov	r2, r1
 800513e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005140:	68ba      	ldr	r2, [r7, #8]
 8005142:	69fb      	ldr	r3, [r7, #28]
 8005144:	4413      	add	r3, r2
 8005146:	781b      	ldrb	r3, [r3, #0]
 8005148:	2b00      	cmp	r3, #0
 800514a:	d006      	beq.n	800515a <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800514c:	69fb      	ldr	r3, [r7, #28]
 800514e:	3301      	adds	r3, #1
 8005150:	61fb      	str	r3, [r7, #28]
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	2b0f      	cmp	r3, #15
 8005156:	d9e9      	bls.n	800512c <prvInitialiseNewTask+0x64>
 8005158:	e000      	b.n	800515c <prvInitialiseNewTask+0x94>
			{
				break;
 800515a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800515c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800515e:	2200      	movs	r2, #0
 8005160:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005164:	e003      	b.n	800516e <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005166:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	2b37      	cmp	r3, #55	; 0x37
 8005172:	d901      	bls.n	8005178 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005174:	2337      	movs	r3, #55	; 0x37
 8005176:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800517a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800517c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800517e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005180:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005182:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005184:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005186:	2200      	movs	r2, #0
 8005188:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800518a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800518c:	3304      	adds	r3, #4
 800518e:	4618      	mov	r0, r3
 8005190:	f7fe ffe8 	bl	8004164 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005194:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005196:	3318      	adds	r3, #24
 8005198:	4618      	mov	r0, r3
 800519a:	f7fe ffe3 	bl	8004164 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800519e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051a2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80051aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051ac:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80051ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051b2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80051b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051b6:	2200      	movs	r2, #0
 80051b8:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80051bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051be:	2200      	movs	r2, #0
 80051c0:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80051c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051c6:	3354      	adds	r3, #84	; 0x54
 80051c8:	2260      	movs	r2, #96	; 0x60
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f002 f806 	bl	80071de <memset>
 80051d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051d4:	4a0c      	ldr	r2, [pc, #48]	; (8005208 <prvInitialiseNewTask+0x140>)
 80051d6:	659a      	str	r2, [r3, #88]	; 0x58
 80051d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051da:	4a0c      	ldr	r2, [pc, #48]	; (800520c <prvInitialiseNewTask+0x144>)
 80051dc:	65da      	str	r2, [r3, #92]	; 0x5c
 80051de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051e0:	4a0b      	ldr	r2, [pc, #44]	; (8005210 <prvInitialiseNewTask+0x148>)
 80051e2:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80051e4:	683a      	ldr	r2, [r7, #0]
 80051e6:	68f9      	ldr	r1, [r7, #12]
 80051e8:	69b8      	ldr	r0, [r7, #24]
 80051ea:	f001 fa8d 	bl	8006708 <pxPortInitialiseStack>
 80051ee:	4602      	mov	r2, r0
 80051f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80051f2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80051f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d002      	beq.n	8005200 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80051fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80051fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80051fe:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005200:	bf00      	nop
 8005202:	3720      	adds	r7, #32
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}
 8005208:	08008658 	.word	0x08008658
 800520c:	08008678 	.word	0x08008678
 8005210:	08008638 	.word	0x08008638

08005214 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b082      	sub	sp, #8
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800521c:	f001 fba2 	bl	8006964 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005220:	4b2d      	ldr	r3, [pc, #180]	; (80052d8 <prvAddNewTaskToReadyList+0xc4>)
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3301      	adds	r3, #1
 8005226:	4a2c      	ldr	r2, [pc, #176]	; (80052d8 <prvAddNewTaskToReadyList+0xc4>)
 8005228:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800522a:	4b2c      	ldr	r3, [pc, #176]	; (80052dc <prvAddNewTaskToReadyList+0xc8>)
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	2b00      	cmp	r3, #0
 8005230:	d109      	bne.n	8005246 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005232:	4a2a      	ldr	r2, [pc, #168]	; (80052dc <prvAddNewTaskToReadyList+0xc8>)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005238:	4b27      	ldr	r3, [pc, #156]	; (80052d8 <prvAddNewTaskToReadyList+0xc4>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	2b01      	cmp	r3, #1
 800523e:	d110      	bne.n	8005262 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005240:	f000 fc64 	bl	8005b0c <prvInitialiseTaskLists>
 8005244:	e00d      	b.n	8005262 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005246:	4b26      	ldr	r3, [pc, #152]	; (80052e0 <prvAddNewTaskToReadyList+0xcc>)
 8005248:	681b      	ldr	r3, [r3, #0]
 800524a:	2b00      	cmp	r3, #0
 800524c:	d109      	bne.n	8005262 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800524e:	4b23      	ldr	r3, [pc, #140]	; (80052dc <prvAddNewTaskToReadyList+0xc8>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005258:	429a      	cmp	r2, r3
 800525a:	d802      	bhi.n	8005262 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800525c:	4a1f      	ldr	r2, [pc, #124]	; (80052dc <prvAddNewTaskToReadyList+0xc8>)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005262:	4b20      	ldr	r3, [pc, #128]	; (80052e4 <prvAddNewTaskToReadyList+0xd0>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	3301      	adds	r3, #1
 8005268:	4a1e      	ldr	r2, [pc, #120]	; (80052e4 <prvAddNewTaskToReadyList+0xd0>)
 800526a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800526c:	4b1d      	ldr	r3, [pc, #116]	; (80052e4 <prvAddNewTaskToReadyList+0xd0>)
 800526e:	681a      	ldr	r2, [r3, #0]
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005278:	4b1b      	ldr	r3, [pc, #108]	; (80052e8 <prvAddNewTaskToReadyList+0xd4>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	429a      	cmp	r2, r3
 800527e:	d903      	bls.n	8005288 <prvAddNewTaskToReadyList+0x74>
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005284:	4a18      	ldr	r2, [pc, #96]	; (80052e8 <prvAddNewTaskToReadyList+0xd4>)
 8005286:	6013      	str	r3, [r2, #0]
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800528c:	4613      	mov	r3, r2
 800528e:	009b      	lsls	r3, r3, #2
 8005290:	4413      	add	r3, r2
 8005292:	009b      	lsls	r3, r3, #2
 8005294:	4a15      	ldr	r2, [pc, #84]	; (80052ec <prvAddNewTaskToReadyList+0xd8>)
 8005296:	441a      	add	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	3304      	adds	r3, #4
 800529c:	4619      	mov	r1, r3
 800529e:	4610      	mov	r0, r2
 80052a0:	f7fe ff6d 	bl	800417e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80052a4:	f001 fb8e 	bl	80069c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80052a8:	4b0d      	ldr	r3, [pc, #52]	; (80052e0 <prvAddNewTaskToReadyList+0xcc>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d00e      	beq.n	80052ce <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80052b0:	4b0a      	ldr	r3, [pc, #40]	; (80052dc <prvAddNewTaskToReadyList+0xc8>)
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d207      	bcs.n	80052ce <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80052be:	4b0c      	ldr	r3, [pc, #48]	; (80052f0 <prvAddNewTaskToReadyList+0xdc>)
 80052c0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052c4:	601a      	str	r2, [r3, #0]
 80052c6:	f3bf 8f4f 	dsb	sy
 80052ca:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80052ce:	bf00      	nop
 80052d0:	3708      	adds	r7, #8
 80052d2:	46bd      	mov	sp, r7
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000b5c 	.word	0x20000b5c
 80052dc:	20000688 	.word	0x20000688
 80052e0:	20000b68 	.word	0x20000b68
 80052e4:	20000b78 	.word	0x20000b78
 80052e8:	20000b64 	.word	0x20000b64
 80052ec:	2000068c 	.word	0x2000068c
 80052f0:	e000ed04 	.word	0xe000ed04

080052f4 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b084      	sub	sp, #16
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80052fc:	f001 fb32 	bl	8006964 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d102      	bne.n	800530c <vTaskDelete+0x18>
 8005306:	4b2c      	ldr	r3, [pc, #176]	; (80053b8 <vTaskDelete+0xc4>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	e000      	b.n	800530e <vTaskDelete+0x1a>
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	3304      	adds	r3, #4
 8005314:	4618      	mov	r0, r3
 8005316:	f7fe ff8f 	bl	8004238 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531e:	2b00      	cmp	r3, #0
 8005320:	d004      	beq.n	800532c <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	3318      	adds	r3, #24
 8005326:	4618      	mov	r0, r3
 8005328:	f7fe ff86 	bl	8004238 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 800532c:	4b23      	ldr	r3, [pc, #140]	; (80053bc <vTaskDelete+0xc8>)
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	3301      	adds	r3, #1
 8005332:	4a22      	ldr	r2, [pc, #136]	; (80053bc <vTaskDelete+0xc8>)
 8005334:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005336:	4b20      	ldr	r3, [pc, #128]	; (80053b8 <vTaskDelete+0xc4>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68fa      	ldr	r2, [r7, #12]
 800533c:	429a      	cmp	r2, r3
 800533e:	d10b      	bne.n	8005358 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	3304      	adds	r3, #4
 8005344:	4619      	mov	r1, r3
 8005346:	481e      	ldr	r0, [pc, #120]	; (80053c0 <vTaskDelete+0xcc>)
 8005348:	f7fe ff19 	bl	800417e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 800534c:	4b1d      	ldr	r3, [pc, #116]	; (80053c4 <vTaskDelete+0xd0>)
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	3301      	adds	r3, #1
 8005352:	4a1c      	ldr	r2, [pc, #112]	; (80053c4 <vTaskDelete+0xd0>)
 8005354:	6013      	str	r3, [r2, #0]
 8005356:	e009      	b.n	800536c <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005358:	4b1b      	ldr	r3, [pc, #108]	; (80053c8 <vTaskDelete+0xd4>)
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	3b01      	subs	r3, #1
 800535e:	4a1a      	ldr	r2, [pc, #104]	; (80053c8 <vTaskDelete+0xd4>)
 8005360:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005362:	68f8      	ldr	r0, [r7, #12]
 8005364:	f000 fc40 	bl	8005be8 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005368:	f000 fc72 	bl	8005c50 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 800536c:	f001 fb2a 	bl	80069c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005370:	4b16      	ldr	r3, [pc, #88]	; (80053cc <vTaskDelete+0xd8>)
 8005372:	681b      	ldr	r3, [r3, #0]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d01b      	beq.n	80053b0 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8005378:	4b0f      	ldr	r3, [pc, #60]	; (80053b8 <vTaskDelete+0xc4>)
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	68fa      	ldr	r2, [r7, #12]
 800537e:	429a      	cmp	r2, r3
 8005380:	d116      	bne.n	80053b0 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005382:	4b13      	ldr	r3, [pc, #76]	; (80053d0 <vTaskDelete+0xdc>)
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d00a      	beq.n	80053a0 <vTaskDelete+0xac>
	__asm volatile
 800538a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538e:	f383 8811 	msr	BASEPRI, r3
 8005392:	f3bf 8f6f 	isb	sy
 8005396:	f3bf 8f4f 	dsb	sy
 800539a:	60bb      	str	r3, [r7, #8]
}
 800539c:	bf00      	nop
 800539e:	e7fe      	b.n	800539e <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 80053a0:	4b0c      	ldr	r3, [pc, #48]	; (80053d4 <vTaskDelete+0xe0>)
 80053a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053a6:	601a      	str	r2, [r3, #0]
 80053a8:	f3bf 8f4f 	dsb	sy
 80053ac:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80053b0:	bf00      	nop
 80053b2:	3710      	adds	r7, #16
 80053b4:	46bd      	mov	sp, r7
 80053b6:	bd80      	pop	{r7, pc}
 80053b8:	20000688 	.word	0x20000688
 80053bc:	20000b78 	.word	0x20000b78
 80053c0:	20000b30 	.word	0x20000b30
 80053c4:	20000b44 	.word	0x20000b44
 80053c8:	20000b5c 	.word	0x20000b5c
 80053cc:	20000b68 	.word	0x20000b68
 80053d0:	20000b84 	.word	0x20000b84
 80053d4:	e000ed04 	.word	0xe000ed04

080053d8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b08a      	sub	sp, #40	; 0x28
 80053dc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80053de:	2300      	movs	r3, #0
 80053e0:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 80053e2:	2300      	movs	r3, #0
 80053e4:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80053e6:	463a      	mov	r2, r7
 80053e8:	1d39      	adds	r1, r7, #4
 80053ea:	f107 0308 	add.w	r3, r7, #8
 80053ee:	4618      	mov	r0, r3
 80053f0:	f7fe fe64 	bl	80040bc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80053f4:	6839      	ldr	r1, [r7, #0]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	68ba      	ldr	r2, [r7, #8]
 80053fa:	9202      	str	r2, [sp, #8]
 80053fc:	9301      	str	r3, [sp, #4]
 80053fe:	2300      	movs	r3, #0
 8005400:	9300      	str	r3, [sp, #0]
 8005402:	2300      	movs	r3, #0
 8005404:	460a      	mov	r2, r1
 8005406:	4924      	ldr	r1, [pc, #144]	; (8005498 <vTaskStartScheduler+0xc0>)
 8005408:	4824      	ldr	r0, [pc, #144]	; (800549c <vTaskStartScheduler+0xc4>)
 800540a:	f7ff fdbb 	bl	8004f84 <xTaskCreateStatic>
 800540e:	4603      	mov	r3, r0
 8005410:	4a23      	ldr	r2, [pc, #140]	; (80054a0 <vTaskStartScheduler+0xc8>)
 8005412:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005414:	4b22      	ldr	r3, [pc, #136]	; (80054a0 <vTaskStartScheduler+0xc8>)
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d002      	beq.n	8005422 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800541c:	2301      	movs	r3, #1
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	e001      	b.n	8005426 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005422:	2300      	movs	r3, #0
 8005424:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005426:	697b      	ldr	r3, [r7, #20]
 8005428:	2b01      	cmp	r3, #1
 800542a:	d102      	bne.n	8005432 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800542c:	f000 fe1e 	bl	800606c <xTimerCreateTimerTask>
 8005430:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005432:	697b      	ldr	r3, [r7, #20]
 8005434:	2b01      	cmp	r3, #1
 8005436:	d11b      	bne.n	8005470 <vTaskStartScheduler+0x98>
	__asm volatile
 8005438:	f04f 0350 	mov.w	r3, #80	; 0x50
 800543c:	f383 8811 	msr	BASEPRI, r3
 8005440:	f3bf 8f6f 	isb	sy
 8005444:	f3bf 8f4f 	dsb	sy
 8005448:	613b      	str	r3, [r7, #16]
}
 800544a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800544c:	4b15      	ldr	r3, [pc, #84]	; (80054a4 <vTaskStartScheduler+0xcc>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	3354      	adds	r3, #84	; 0x54
 8005452:	4a15      	ldr	r2, [pc, #84]	; (80054a8 <vTaskStartScheduler+0xd0>)
 8005454:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005456:	4b15      	ldr	r3, [pc, #84]	; (80054ac <vTaskStartScheduler+0xd4>)
 8005458:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800545c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800545e:	4b14      	ldr	r3, [pc, #80]	; (80054b0 <vTaskStartScheduler+0xd8>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005464:	4b13      	ldr	r3, [pc, #76]	; (80054b4 <vTaskStartScheduler+0xdc>)
 8005466:	2200      	movs	r2, #0
 8005468:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800546a:	f001 f9d9 	bl	8006820 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800546e:	e00e      	b.n	800548e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005470:	697b      	ldr	r3, [r7, #20]
 8005472:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005476:	d10a      	bne.n	800548e <vTaskStartScheduler+0xb6>
	__asm volatile
 8005478:	f04f 0350 	mov.w	r3, #80	; 0x50
 800547c:	f383 8811 	msr	BASEPRI, r3
 8005480:	f3bf 8f6f 	isb	sy
 8005484:	f3bf 8f4f 	dsb	sy
 8005488:	60fb      	str	r3, [r7, #12]
}
 800548a:	bf00      	nop
 800548c:	e7fe      	b.n	800548c <vTaskStartScheduler+0xb4>
}
 800548e:	bf00      	nop
 8005490:	3718      	adds	r7, #24
 8005492:	46bd      	mov	sp, r7
 8005494:	bd80      	pop	{r7, pc}
 8005496:	bf00      	nop
 8005498:	08008590 	.word	0x08008590
 800549c:	08005add 	.word	0x08005add
 80054a0:	20000b80 	.word	0x20000b80
 80054a4:	20000688 	.word	0x20000688
 80054a8:	20000010 	.word	0x20000010
 80054ac:	20000b7c 	.word	0x20000b7c
 80054b0:	20000b68 	.word	0x20000b68
 80054b4:	20000b60 	.word	0x20000b60

080054b8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80054b8:	b480      	push	{r7}
 80054ba:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80054bc:	4b04      	ldr	r3, [pc, #16]	; (80054d0 <vTaskSuspendAll+0x18>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	3301      	adds	r3, #1
 80054c2:	4a03      	ldr	r2, [pc, #12]	; (80054d0 <vTaskSuspendAll+0x18>)
 80054c4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80054c6:	bf00      	nop
 80054c8:	46bd      	mov	sp, r7
 80054ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054ce:	4770      	bx	lr
 80054d0:	20000b84 	.word	0x20000b84

080054d4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b084      	sub	sp, #16
 80054d8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80054de:	2300      	movs	r3, #0
 80054e0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80054e2:	4b42      	ldr	r3, [pc, #264]	; (80055ec <xTaskResumeAll+0x118>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	2b00      	cmp	r3, #0
 80054e8:	d10a      	bne.n	8005500 <xTaskResumeAll+0x2c>
	__asm volatile
 80054ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ee:	f383 8811 	msr	BASEPRI, r3
 80054f2:	f3bf 8f6f 	isb	sy
 80054f6:	f3bf 8f4f 	dsb	sy
 80054fa:	603b      	str	r3, [r7, #0]
}
 80054fc:	bf00      	nop
 80054fe:	e7fe      	b.n	80054fe <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005500:	f001 fa30 	bl	8006964 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005504:	4b39      	ldr	r3, [pc, #228]	; (80055ec <xTaskResumeAll+0x118>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	3b01      	subs	r3, #1
 800550a:	4a38      	ldr	r2, [pc, #224]	; (80055ec <xTaskResumeAll+0x118>)
 800550c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800550e:	4b37      	ldr	r3, [pc, #220]	; (80055ec <xTaskResumeAll+0x118>)
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	2b00      	cmp	r3, #0
 8005514:	d162      	bne.n	80055dc <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005516:	4b36      	ldr	r3, [pc, #216]	; (80055f0 <xTaskResumeAll+0x11c>)
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d05e      	beq.n	80055dc <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800551e:	e02f      	b.n	8005580 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005520:	4b34      	ldr	r3, [pc, #208]	; (80055f4 <xTaskResumeAll+0x120>)
 8005522:	68db      	ldr	r3, [r3, #12]
 8005524:	68db      	ldr	r3, [r3, #12]
 8005526:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	3318      	adds	r3, #24
 800552c:	4618      	mov	r0, r3
 800552e:	f7fe fe83 	bl	8004238 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	3304      	adds	r3, #4
 8005536:	4618      	mov	r0, r3
 8005538:	f7fe fe7e 	bl	8004238 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005540:	4b2d      	ldr	r3, [pc, #180]	; (80055f8 <xTaskResumeAll+0x124>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	429a      	cmp	r2, r3
 8005546:	d903      	bls.n	8005550 <xTaskResumeAll+0x7c>
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800554c:	4a2a      	ldr	r2, [pc, #168]	; (80055f8 <xTaskResumeAll+0x124>)
 800554e:	6013      	str	r3, [r2, #0]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005554:	4613      	mov	r3, r2
 8005556:	009b      	lsls	r3, r3, #2
 8005558:	4413      	add	r3, r2
 800555a:	009b      	lsls	r3, r3, #2
 800555c:	4a27      	ldr	r2, [pc, #156]	; (80055fc <xTaskResumeAll+0x128>)
 800555e:	441a      	add	r2, r3
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	3304      	adds	r3, #4
 8005564:	4619      	mov	r1, r3
 8005566:	4610      	mov	r0, r2
 8005568:	f7fe fe09 	bl	800417e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005570:	4b23      	ldr	r3, [pc, #140]	; (8005600 <xTaskResumeAll+0x12c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005576:	429a      	cmp	r2, r3
 8005578:	d302      	bcc.n	8005580 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800557a:	4b22      	ldr	r3, [pc, #136]	; (8005604 <xTaskResumeAll+0x130>)
 800557c:	2201      	movs	r2, #1
 800557e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005580:	4b1c      	ldr	r3, [pc, #112]	; (80055f4 <xTaskResumeAll+0x120>)
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d1cb      	bne.n	8005520 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005588:	68fb      	ldr	r3, [r7, #12]
 800558a:	2b00      	cmp	r3, #0
 800558c:	d001      	beq.n	8005592 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800558e:	f000 fb5f 	bl	8005c50 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005592:	4b1d      	ldr	r3, [pc, #116]	; (8005608 <xTaskResumeAll+0x134>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d010      	beq.n	80055c0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800559e:	f000 f847 	bl	8005630 <xTaskIncrementTick>
 80055a2:	4603      	mov	r3, r0
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d002      	beq.n	80055ae <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80055a8:	4b16      	ldr	r3, [pc, #88]	; (8005604 <xTaskResumeAll+0x130>)
 80055aa:	2201      	movs	r2, #1
 80055ac:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3b01      	subs	r3, #1
 80055b2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d1f1      	bne.n	800559e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80055ba:	4b13      	ldr	r3, [pc, #76]	; (8005608 <xTaskResumeAll+0x134>)
 80055bc:	2200      	movs	r2, #0
 80055be:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80055c0:	4b10      	ldr	r3, [pc, #64]	; (8005604 <xTaskResumeAll+0x130>)
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d009      	beq.n	80055dc <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80055c8:	2301      	movs	r3, #1
 80055ca:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80055cc:	4b0f      	ldr	r3, [pc, #60]	; (800560c <xTaskResumeAll+0x138>)
 80055ce:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055d2:	601a      	str	r2, [r3, #0]
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80055dc:	f001 f9f2 	bl	80069c4 <vPortExitCritical>

	return xAlreadyYielded;
 80055e0:	68bb      	ldr	r3, [r7, #8]
}
 80055e2:	4618      	mov	r0, r3
 80055e4:	3710      	adds	r7, #16
 80055e6:	46bd      	mov	sp, r7
 80055e8:	bd80      	pop	{r7, pc}
 80055ea:	bf00      	nop
 80055ec:	20000b84 	.word	0x20000b84
 80055f0:	20000b5c 	.word	0x20000b5c
 80055f4:	20000b1c 	.word	0x20000b1c
 80055f8:	20000b64 	.word	0x20000b64
 80055fc:	2000068c 	.word	0x2000068c
 8005600:	20000688 	.word	0x20000688
 8005604:	20000b70 	.word	0x20000b70
 8005608:	20000b6c 	.word	0x20000b6c
 800560c:	e000ed04 	.word	0xe000ed04

08005610 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005616:	4b05      	ldr	r3, [pc, #20]	; (800562c <xTaskGetTickCount+0x1c>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800561c:	687b      	ldr	r3, [r7, #4]
}
 800561e:	4618      	mov	r0, r3
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr
 800562a:	bf00      	nop
 800562c:	20000b60 	.word	0x20000b60

08005630 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b086      	sub	sp, #24
 8005634:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005636:	2300      	movs	r3, #0
 8005638:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800563a:	4b4f      	ldr	r3, [pc, #316]	; (8005778 <xTaskIncrementTick+0x148>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	2b00      	cmp	r3, #0
 8005640:	f040 808f 	bne.w	8005762 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005644:	4b4d      	ldr	r3, [pc, #308]	; (800577c <xTaskIncrementTick+0x14c>)
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	3301      	adds	r3, #1
 800564a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800564c:	4a4b      	ldr	r2, [pc, #300]	; (800577c <xTaskIncrementTick+0x14c>)
 800564e:	693b      	ldr	r3, [r7, #16]
 8005650:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005652:	693b      	ldr	r3, [r7, #16]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d120      	bne.n	800569a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005658:	4b49      	ldr	r3, [pc, #292]	; (8005780 <xTaskIncrementTick+0x150>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	681b      	ldr	r3, [r3, #0]
 800565e:	2b00      	cmp	r3, #0
 8005660:	d00a      	beq.n	8005678 <xTaskIncrementTick+0x48>
	__asm volatile
 8005662:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005666:	f383 8811 	msr	BASEPRI, r3
 800566a:	f3bf 8f6f 	isb	sy
 800566e:	f3bf 8f4f 	dsb	sy
 8005672:	603b      	str	r3, [r7, #0]
}
 8005674:	bf00      	nop
 8005676:	e7fe      	b.n	8005676 <xTaskIncrementTick+0x46>
 8005678:	4b41      	ldr	r3, [pc, #260]	; (8005780 <xTaskIncrementTick+0x150>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	60fb      	str	r3, [r7, #12]
 800567e:	4b41      	ldr	r3, [pc, #260]	; (8005784 <xTaskIncrementTick+0x154>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	4a3f      	ldr	r2, [pc, #252]	; (8005780 <xTaskIncrementTick+0x150>)
 8005684:	6013      	str	r3, [r2, #0]
 8005686:	4a3f      	ldr	r2, [pc, #252]	; (8005784 <xTaskIncrementTick+0x154>)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6013      	str	r3, [r2, #0]
 800568c:	4b3e      	ldr	r3, [pc, #248]	; (8005788 <xTaskIncrementTick+0x158>)
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	3301      	adds	r3, #1
 8005692:	4a3d      	ldr	r2, [pc, #244]	; (8005788 <xTaskIncrementTick+0x158>)
 8005694:	6013      	str	r3, [r2, #0]
 8005696:	f000 fadb 	bl	8005c50 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800569a:	4b3c      	ldr	r3, [pc, #240]	; (800578c <xTaskIncrementTick+0x15c>)
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	693a      	ldr	r2, [r7, #16]
 80056a0:	429a      	cmp	r2, r3
 80056a2:	d349      	bcc.n	8005738 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80056a4:	4b36      	ldr	r3, [pc, #216]	; (8005780 <xTaskIncrementTick+0x150>)
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d104      	bne.n	80056b8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056ae:	4b37      	ldr	r3, [pc, #220]	; (800578c <xTaskIncrementTick+0x15c>)
 80056b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056b4:	601a      	str	r2, [r3, #0]
					break;
 80056b6:	e03f      	b.n	8005738 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80056b8:	4b31      	ldr	r3, [pc, #196]	; (8005780 <xTaskIncrementTick+0x150>)
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	68db      	ldr	r3, [r3, #12]
 80056be:	68db      	ldr	r3, [r3, #12]
 80056c0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80056c2:	68bb      	ldr	r3, [r7, #8]
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80056c8:	693a      	ldr	r2, [r7, #16]
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	429a      	cmp	r2, r3
 80056ce:	d203      	bcs.n	80056d8 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80056d0:	4a2e      	ldr	r2, [pc, #184]	; (800578c <xTaskIncrementTick+0x15c>)
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80056d6:	e02f      	b.n	8005738 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	3304      	adds	r3, #4
 80056dc:	4618      	mov	r0, r3
 80056de:	f7fe fdab 	bl	8004238 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d004      	beq.n	80056f4 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	3318      	adds	r3, #24
 80056ee:	4618      	mov	r0, r3
 80056f0:	f7fe fda2 	bl	8004238 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80056f4:	68bb      	ldr	r3, [r7, #8]
 80056f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80056f8:	4b25      	ldr	r3, [pc, #148]	; (8005790 <xTaskIncrementTick+0x160>)
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d903      	bls.n	8005708 <xTaskIncrementTick+0xd8>
 8005700:	68bb      	ldr	r3, [r7, #8]
 8005702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005704:	4a22      	ldr	r2, [pc, #136]	; (8005790 <xTaskIncrementTick+0x160>)
 8005706:	6013      	str	r3, [r2, #0]
 8005708:	68bb      	ldr	r3, [r7, #8]
 800570a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800570c:	4613      	mov	r3, r2
 800570e:	009b      	lsls	r3, r3, #2
 8005710:	4413      	add	r3, r2
 8005712:	009b      	lsls	r3, r3, #2
 8005714:	4a1f      	ldr	r2, [pc, #124]	; (8005794 <xTaskIncrementTick+0x164>)
 8005716:	441a      	add	r2, r3
 8005718:	68bb      	ldr	r3, [r7, #8]
 800571a:	3304      	adds	r3, #4
 800571c:	4619      	mov	r1, r3
 800571e:	4610      	mov	r0, r2
 8005720:	f7fe fd2d 	bl	800417e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005724:	68bb      	ldr	r3, [r7, #8]
 8005726:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005728:	4b1b      	ldr	r3, [pc, #108]	; (8005798 <xTaskIncrementTick+0x168>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800572e:	429a      	cmp	r2, r3
 8005730:	d3b8      	bcc.n	80056a4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005732:	2301      	movs	r3, #1
 8005734:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005736:	e7b5      	b.n	80056a4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005738:	4b17      	ldr	r3, [pc, #92]	; (8005798 <xTaskIncrementTick+0x168>)
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800573e:	4915      	ldr	r1, [pc, #84]	; (8005794 <xTaskIncrementTick+0x164>)
 8005740:	4613      	mov	r3, r2
 8005742:	009b      	lsls	r3, r3, #2
 8005744:	4413      	add	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	440b      	add	r3, r1
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	2b01      	cmp	r3, #1
 800574e:	d901      	bls.n	8005754 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8005750:	2301      	movs	r3, #1
 8005752:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005754:	4b11      	ldr	r3, [pc, #68]	; (800579c <xTaskIncrementTick+0x16c>)
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	2b00      	cmp	r3, #0
 800575a:	d007      	beq.n	800576c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800575c:	2301      	movs	r3, #1
 800575e:	617b      	str	r3, [r7, #20]
 8005760:	e004      	b.n	800576c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005762:	4b0f      	ldr	r3, [pc, #60]	; (80057a0 <xTaskIncrementTick+0x170>)
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	3301      	adds	r3, #1
 8005768:	4a0d      	ldr	r2, [pc, #52]	; (80057a0 <xTaskIncrementTick+0x170>)
 800576a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800576c:	697b      	ldr	r3, [r7, #20]
}
 800576e:	4618      	mov	r0, r3
 8005770:	3718      	adds	r7, #24
 8005772:	46bd      	mov	sp, r7
 8005774:	bd80      	pop	{r7, pc}
 8005776:	bf00      	nop
 8005778:	20000b84 	.word	0x20000b84
 800577c:	20000b60 	.word	0x20000b60
 8005780:	20000b14 	.word	0x20000b14
 8005784:	20000b18 	.word	0x20000b18
 8005788:	20000b74 	.word	0x20000b74
 800578c:	20000b7c 	.word	0x20000b7c
 8005790:	20000b64 	.word	0x20000b64
 8005794:	2000068c 	.word	0x2000068c
 8005798:	20000688 	.word	0x20000688
 800579c:	20000b70 	.word	0x20000b70
 80057a0:	20000b6c 	.word	0x20000b6c

080057a4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80057a4:	b480      	push	{r7}
 80057a6:	b085      	sub	sp, #20
 80057a8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80057aa:	4b2a      	ldr	r3, [pc, #168]	; (8005854 <vTaskSwitchContext+0xb0>)
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d003      	beq.n	80057ba <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80057b2:	4b29      	ldr	r3, [pc, #164]	; (8005858 <vTaskSwitchContext+0xb4>)
 80057b4:	2201      	movs	r2, #1
 80057b6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80057b8:	e046      	b.n	8005848 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80057ba:	4b27      	ldr	r3, [pc, #156]	; (8005858 <vTaskSwitchContext+0xb4>)
 80057bc:	2200      	movs	r2, #0
 80057be:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80057c0:	4b26      	ldr	r3, [pc, #152]	; (800585c <vTaskSwitchContext+0xb8>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	60fb      	str	r3, [r7, #12]
 80057c6:	e010      	b.n	80057ea <vTaskSwitchContext+0x46>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d10a      	bne.n	80057e4 <vTaskSwitchContext+0x40>
	__asm volatile
 80057ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057d2:	f383 8811 	msr	BASEPRI, r3
 80057d6:	f3bf 8f6f 	isb	sy
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	607b      	str	r3, [r7, #4]
}
 80057e0:	bf00      	nop
 80057e2:	e7fe      	b.n	80057e2 <vTaskSwitchContext+0x3e>
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3b01      	subs	r3, #1
 80057e8:	60fb      	str	r3, [r7, #12]
 80057ea:	491d      	ldr	r1, [pc, #116]	; (8005860 <vTaskSwitchContext+0xbc>)
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4613      	mov	r3, r2
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	4413      	add	r3, r2
 80057f4:	009b      	lsls	r3, r3, #2
 80057f6:	440b      	add	r3, r1
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d0e4      	beq.n	80057c8 <vTaskSwitchContext+0x24>
 80057fe:	68fa      	ldr	r2, [r7, #12]
 8005800:	4613      	mov	r3, r2
 8005802:	009b      	lsls	r3, r3, #2
 8005804:	4413      	add	r3, r2
 8005806:	009b      	lsls	r3, r3, #2
 8005808:	4a15      	ldr	r2, [pc, #84]	; (8005860 <vTaskSwitchContext+0xbc>)
 800580a:	4413      	add	r3, r2
 800580c:	60bb      	str	r3, [r7, #8]
 800580e:	68bb      	ldr	r3, [r7, #8]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	685a      	ldr	r2, [r3, #4]
 8005814:	68bb      	ldr	r3, [r7, #8]
 8005816:	605a      	str	r2, [r3, #4]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	685a      	ldr	r2, [r3, #4]
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	3308      	adds	r3, #8
 8005820:	429a      	cmp	r2, r3
 8005822:	d104      	bne.n	800582e <vTaskSwitchContext+0x8a>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	685b      	ldr	r3, [r3, #4]
 8005828:	685a      	ldr	r2, [r3, #4]
 800582a:	68bb      	ldr	r3, [r7, #8]
 800582c:	605a      	str	r2, [r3, #4]
 800582e:	68bb      	ldr	r3, [r7, #8]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	68db      	ldr	r3, [r3, #12]
 8005834:	4a0b      	ldr	r2, [pc, #44]	; (8005864 <vTaskSwitchContext+0xc0>)
 8005836:	6013      	str	r3, [r2, #0]
 8005838:	4a08      	ldr	r2, [pc, #32]	; (800585c <vTaskSwitchContext+0xb8>)
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800583e:	4b09      	ldr	r3, [pc, #36]	; (8005864 <vTaskSwitchContext+0xc0>)
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3354      	adds	r3, #84	; 0x54
 8005844:	4a08      	ldr	r2, [pc, #32]	; (8005868 <vTaskSwitchContext+0xc4>)
 8005846:	6013      	str	r3, [r2, #0]
}
 8005848:	bf00      	nop
 800584a:	3714      	adds	r7, #20
 800584c:	46bd      	mov	sp, r7
 800584e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005852:	4770      	bx	lr
 8005854:	20000b84 	.word	0x20000b84
 8005858:	20000b70 	.word	0x20000b70
 800585c:	20000b64 	.word	0x20000b64
 8005860:	2000068c 	.word	0x2000068c
 8005864:	20000688 	.word	0x20000688
 8005868:	20000010 	.word	0x20000010

0800586c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
 8005874:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d10a      	bne.n	8005892 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800587c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005880:	f383 8811 	msr	BASEPRI, r3
 8005884:	f3bf 8f6f 	isb	sy
 8005888:	f3bf 8f4f 	dsb	sy
 800588c:	60fb      	str	r3, [r7, #12]
}
 800588e:	bf00      	nop
 8005890:	e7fe      	b.n	8005890 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005892:	4b07      	ldr	r3, [pc, #28]	; (80058b0 <vTaskPlaceOnEventList+0x44>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	3318      	adds	r3, #24
 8005898:	4619      	mov	r1, r3
 800589a:	6878      	ldr	r0, [r7, #4]
 800589c:	f7fe fc93 	bl	80041c6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80058a0:	2101      	movs	r1, #1
 80058a2:	6838      	ldr	r0, [r7, #0]
 80058a4:	f000 fb8e 	bl	8005fc4 <prvAddCurrentTaskToDelayedList>
}
 80058a8:	bf00      	nop
 80058aa:	3710      	adds	r7, #16
 80058ac:	46bd      	mov	sp, r7
 80058ae:	bd80      	pop	{r7, pc}
 80058b0:	20000688 	.word	0x20000688

080058b4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058b4:	b580      	push	{r7, lr}
 80058b6:	b086      	sub	sp, #24
 80058b8:	af00      	add	r7, sp, #0
 80058ba:	60f8      	str	r0, [r7, #12]
 80058bc:	60b9      	str	r1, [r7, #8]
 80058be:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10a      	bne.n	80058dc <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	617b      	str	r3, [r7, #20]
}
 80058d8:	bf00      	nop
 80058da:	e7fe      	b.n	80058da <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80058dc:	4b0a      	ldr	r3, [pc, #40]	; (8005908 <vTaskPlaceOnEventListRestricted+0x54>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	3318      	adds	r3, #24
 80058e2:	4619      	mov	r1, r3
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f7fe fc4a 	bl	800417e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80058ea:	687b      	ldr	r3, [r7, #4]
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80058f0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80058f4:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80058f6:	6879      	ldr	r1, [r7, #4]
 80058f8:	68b8      	ldr	r0, [r7, #8]
 80058fa:	f000 fb63 	bl	8005fc4 <prvAddCurrentTaskToDelayedList>
	}
 80058fe:	bf00      	nop
 8005900:	3718      	adds	r7, #24
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}
 8005906:	bf00      	nop
 8005908:	20000688 	.word	0x20000688

0800590c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800590c:	b580      	push	{r7, lr}
 800590e:	b086      	sub	sp, #24
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	68db      	ldr	r3, [r3, #12]
 8005918:	68db      	ldr	r3, [r3, #12]
 800591a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800591c:	693b      	ldr	r3, [r7, #16]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d10a      	bne.n	8005938 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005922:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005926:	f383 8811 	msr	BASEPRI, r3
 800592a:	f3bf 8f6f 	isb	sy
 800592e:	f3bf 8f4f 	dsb	sy
 8005932:	60fb      	str	r3, [r7, #12]
}
 8005934:	bf00      	nop
 8005936:	e7fe      	b.n	8005936 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005938:	693b      	ldr	r3, [r7, #16]
 800593a:	3318      	adds	r3, #24
 800593c:	4618      	mov	r0, r3
 800593e:	f7fe fc7b 	bl	8004238 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005942:	4b1e      	ldr	r3, [pc, #120]	; (80059bc <xTaskRemoveFromEventList+0xb0>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	2b00      	cmp	r3, #0
 8005948:	d11d      	bne.n	8005986 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800594a:	693b      	ldr	r3, [r7, #16]
 800594c:	3304      	adds	r3, #4
 800594e:	4618      	mov	r0, r3
 8005950:	f7fe fc72 	bl	8004238 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005954:	693b      	ldr	r3, [r7, #16]
 8005956:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005958:	4b19      	ldr	r3, [pc, #100]	; (80059c0 <xTaskRemoveFromEventList+0xb4>)
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	429a      	cmp	r2, r3
 800595e:	d903      	bls.n	8005968 <xTaskRemoveFromEventList+0x5c>
 8005960:	693b      	ldr	r3, [r7, #16]
 8005962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005964:	4a16      	ldr	r2, [pc, #88]	; (80059c0 <xTaskRemoveFromEventList+0xb4>)
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	693b      	ldr	r3, [r7, #16]
 800596a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800596c:	4613      	mov	r3, r2
 800596e:	009b      	lsls	r3, r3, #2
 8005970:	4413      	add	r3, r2
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	4a13      	ldr	r2, [pc, #76]	; (80059c4 <xTaskRemoveFromEventList+0xb8>)
 8005976:	441a      	add	r2, r3
 8005978:	693b      	ldr	r3, [r7, #16]
 800597a:	3304      	adds	r3, #4
 800597c:	4619      	mov	r1, r3
 800597e:	4610      	mov	r0, r2
 8005980:	f7fe fbfd 	bl	800417e <vListInsertEnd>
 8005984:	e005      	b.n	8005992 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	3318      	adds	r3, #24
 800598a:	4619      	mov	r1, r3
 800598c:	480e      	ldr	r0, [pc, #56]	; (80059c8 <xTaskRemoveFromEventList+0xbc>)
 800598e:	f7fe fbf6 	bl	800417e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005992:	693b      	ldr	r3, [r7, #16]
 8005994:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005996:	4b0d      	ldr	r3, [pc, #52]	; (80059cc <xTaskRemoveFromEventList+0xc0>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800599c:	429a      	cmp	r2, r3
 800599e:	d905      	bls.n	80059ac <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80059a0:	2301      	movs	r3, #1
 80059a2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80059a4:	4b0a      	ldr	r3, [pc, #40]	; (80059d0 <xTaskRemoveFromEventList+0xc4>)
 80059a6:	2201      	movs	r2, #1
 80059a8:	601a      	str	r2, [r3, #0]
 80059aa:	e001      	b.n	80059b0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80059ac:	2300      	movs	r3, #0
 80059ae:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80059b0:	697b      	ldr	r3, [r7, #20]
}
 80059b2:	4618      	mov	r0, r3
 80059b4:	3718      	adds	r7, #24
 80059b6:	46bd      	mov	sp, r7
 80059b8:	bd80      	pop	{r7, pc}
 80059ba:	bf00      	nop
 80059bc:	20000b84 	.word	0x20000b84
 80059c0:	20000b64 	.word	0x20000b64
 80059c4:	2000068c 	.word	0x2000068c
 80059c8:	20000b1c 	.word	0x20000b1c
 80059cc:	20000688 	.word	0x20000688
 80059d0:	20000b70 	.word	0x20000b70

080059d4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80059dc:	4b06      	ldr	r3, [pc, #24]	; (80059f8 <vTaskInternalSetTimeOutState+0x24>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80059e4:	4b05      	ldr	r3, [pc, #20]	; (80059fc <vTaskInternalSetTimeOutState+0x28>)
 80059e6:	681a      	ldr	r2, [r3, #0]
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	605a      	str	r2, [r3, #4]
}
 80059ec:	bf00      	nop
 80059ee:	370c      	adds	r7, #12
 80059f0:	46bd      	mov	sp, r7
 80059f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059f6:	4770      	bx	lr
 80059f8:	20000b74 	.word	0x20000b74
 80059fc:	20000b60 	.word	0x20000b60

08005a00 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b088      	sub	sp, #32
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10a      	bne.n	8005a26 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	613b      	str	r3, [r7, #16]
}
 8005a22:	bf00      	nop
 8005a24:	e7fe      	b.n	8005a24 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d10a      	bne.n	8005a42 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005a2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a30:	f383 8811 	msr	BASEPRI, r3
 8005a34:	f3bf 8f6f 	isb	sy
 8005a38:	f3bf 8f4f 	dsb	sy
 8005a3c:	60fb      	str	r3, [r7, #12]
}
 8005a3e:	bf00      	nop
 8005a40:	e7fe      	b.n	8005a40 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005a42:	f000 ff8f 	bl	8006964 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005a46:	4b1d      	ldr	r3, [pc, #116]	; (8005abc <xTaskCheckForTimeOut+0xbc>)
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	685b      	ldr	r3, [r3, #4]
 8005a50:	69ba      	ldr	r2, [r7, #24]
 8005a52:	1ad3      	subs	r3, r2, r3
 8005a54:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a5e:	d102      	bne.n	8005a66 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005a60:	2300      	movs	r3, #0
 8005a62:	61fb      	str	r3, [r7, #28]
 8005a64:	e023      	b.n	8005aae <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681a      	ldr	r2, [r3, #0]
 8005a6a:	4b15      	ldr	r3, [pc, #84]	; (8005ac0 <xTaskCheckForTimeOut+0xc0>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	429a      	cmp	r2, r3
 8005a70:	d007      	beq.n	8005a82 <xTaskCheckForTimeOut+0x82>
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	685b      	ldr	r3, [r3, #4]
 8005a76:	69ba      	ldr	r2, [r7, #24]
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d302      	bcc.n	8005a82 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005a7c:	2301      	movs	r3, #1
 8005a7e:	61fb      	str	r3, [r7, #28]
 8005a80:	e015      	b.n	8005aae <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005a82:	683b      	ldr	r3, [r7, #0]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	697a      	ldr	r2, [r7, #20]
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	d20b      	bcs.n	8005aa4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	681a      	ldr	r2, [r3, #0]
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	1ad2      	subs	r2, r2, r3
 8005a94:	683b      	ldr	r3, [r7, #0]
 8005a96:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8005a98:	6878      	ldr	r0, [r7, #4]
 8005a9a:	f7ff ff9b 	bl	80059d4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	61fb      	str	r3, [r7, #28]
 8005aa2:	e004      	b.n	8005aae <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8005aaa:	2301      	movs	r3, #1
 8005aac:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005aae:	f000 ff89 	bl	80069c4 <vPortExitCritical>

	return xReturn;
 8005ab2:	69fb      	ldr	r3, [r7, #28]
}
 8005ab4:	4618      	mov	r0, r3
 8005ab6:	3720      	adds	r7, #32
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	20000b60 	.word	0x20000b60
 8005ac0:	20000b74 	.word	0x20000b74

08005ac4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8005ac4:	b480      	push	{r7}
 8005ac6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8005ac8:	4b03      	ldr	r3, [pc, #12]	; (8005ad8 <vTaskMissedYield+0x14>)
 8005aca:	2201      	movs	r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
}
 8005ace:	bf00      	nop
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad6:	4770      	bx	lr
 8005ad8:	20000b70 	.word	0x20000b70

08005adc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b082      	sub	sp, #8
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005ae4:	f000 f852 	bl	8005b8c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8005ae8:	4b06      	ldr	r3, [pc, #24]	; (8005b04 <prvIdleTask+0x28>)
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	2b01      	cmp	r3, #1
 8005aee:	d9f9      	bls.n	8005ae4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005af0:	4b05      	ldr	r3, [pc, #20]	; (8005b08 <prvIdleTask+0x2c>)
 8005af2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005af6:	601a      	str	r2, [r3, #0]
 8005af8:	f3bf 8f4f 	dsb	sy
 8005afc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005b00:	e7f0      	b.n	8005ae4 <prvIdleTask+0x8>
 8005b02:	bf00      	nop
 8005b04:	2000068c 	.word	0x2000068c
 8005b08:	e000ed04 	.word	0xe000ed04

08005b0c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b082      	sub	sp, #8
 8005b10:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b12:	2300      	movs	r3, #0
 8005b14:	607b      	str	r3, [r7, #4]
 8005b16:	e00c      	b.n	8005b32 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8005b18:	687a      	ldr	r2, [r7, #4]
 8005b1a:	4613      	mov	r3, r2
 8005b1c:	009b      	lsls	r3, r3, #2
 8005b1e:	4413      	add	r3, r2
 8005b20:	009b      	lsls	r3, r3, #2
 8005b22:	4a12      	ldr	r2, [pc, #72]	; (8005b6c <prvInitialiseTaskLists+0x60>)
 8005b24:	4413      	add	r3, r2
 8005b26:	4618      	mov	r0, r3
 8005b28:	f7fe fafc 	bl	8004124 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	3301      	adds	r3, #1
 8005b30:	607b      	str	r3, [r7, #4]
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	2b37      	cmp	r3, #55	; 0x37
 8005b36:	d9ef      	bls.n	8005b18 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8005b38:	480d      	ldr	r0, [pc, #52]	; (8005b70 <prvInitialiseTaskLists+0x64>)
 8005b3a:	f7fe faf3 	bl	8004124 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005b3e:	480d      	ldr	r0, [pc, #52]	; (8005b74 <prvInitialiseTaskLists+0x68>)
 8005b40:	f7fe faf0 	bl	8004124 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005b44:	480c      	ldr	r0, [pc, #48]	; (8005b78 <prvInitialiseTaskLists+0x6c>)
 8005b46:	f7fe faed 	bl	8004124 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8005b4a:	480c      	ldr	r0, [pc, #48]	; (8005b7c <prvInitialiseTaskLists+0x70>)
 8005b4c:	f7fe faea 	bl	8004124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005b50:	480b      	ldr	r0, [pc, #44]	; (8005b80 <prvInitialiseTaskLists+0x74>)
 8005b52:	f7fe fae7 	bl	8004124 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8005b56:	4b0b      	ldr	r3, [pc, #44]	; (8005b84 <prvInitialiseTaskLists+0x78>)
 8005b58:	4a05      	ldr	r2, [pc, #20]	; (8005b70 <prvInitialiseTaskLists+0x64>)
 8005b5a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005b5c:	4b0a      	ldr	r3, [pc, #40]	; (8005b88 <prvInitialiseTaskLists+0x7c>)
 8005b5e:	4a05      	ldr	r2, [pc, #20]	; (8005b74 <prvInitialiseTaskLists+0x68>)
 8005b60:	601a      	str	r2, [r3, #0]
}
 8005b62:	bf00      	nop
 8005b64:	3708      	adds	r7, #8
 8005b66:	46bd      	mov	sp, r7
 8005b68:	bd80      	pop	{r7, pc}
 8005b6a:	bf00      	nop
 8005b6c:	2000068c 	.word	0x2000068c
 8005b70:	20000aec 	.word	0x20000aec
 8005b74:	20000b00 	.word	0x20000b00
 8005b78:	20000b1c 	.word	0x20000b1c
 8005b7c:	20000b30 	.word	0x20000b30
 8005b80:	20000b48 	.word	0x20000b48
 8005b84:	20000b14 	.word	0x20000b14
 8005b88:	20000b18 	.word	0x20000b18

08005b8c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005b8c:	b580      	push	{r7, lr}
 8005b8e:	b082      	sub	sp, #8
 8005b90:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005b92:	e019      	b.n	8005bc8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005b94:	f000 fee6 	bl	8006964 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005b98:	4b10      	ldr	r3, [pc, #64]	; (8005bdc <prvCheckTasksWaitingTermination+0x50>)
 8005b9a:	68db      	ldr	r3, [r3, #12]
 8005b9c:	68db      	ldr	r3, [r3, #12]
 8005b9e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	3304      	adds	r3, #4
 8005ba4:	4618      	mov	r0, r3
 8005ba6:	f7fe fb47 	bl	8004238 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8005baa:	4b0d      	ldr	r3, [pc, #52]	; (8005be0 <prvCheckTasksWaitingTermination+0x54>)
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	3b01      	subs	r3, #1
 8005bb0:	4a0b      	ldr	r2, [pc, #44]	; (8005be0 <prvCheckTasksWaitingTermination+0x54>)
 8005bb2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005bb4:	4b0b      	ldr	r3, [pc, #44]	; (8005be4 <prvCheckTasksWaitingTermination+0x58>)
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	3b01      	subs	r3, #1
 8005bba:	4a0a      	ldr	r2, [pc, #40]	; (8005be4 <prvCheckTasksWaitingTermination+0x58>)
 8005bbc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8005bbe:	f000 ff01 	bl	80069c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8005bc2:	6878      	ldr	r0, [r7, #4]
 8005bc4:	f000 f810 	bl	8005be8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005bc8:	4b06      	ldr	r3, [pc, #24]	; (8005be4 <prvCheckTasksWaitingTermination+0x58>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d1e1      	bne.n	8005b94 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005bd0:	bf00      	nop
 8005bd2:	bf00      	nop
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}
 8005bda:	bf00      	nop
 8005bdc:	20000b30 	.word	0x20000b30
 8005be0:	20000b5c 	.word	0x20000b5c
 8005be4:	20000b44 	.word	0x20000b44

08005be8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8005be8:	b580      	push	{r7, lr}
 8005bea:	b084      	sub	sp, #16
 8005bec:	af00      	add	r7, sp, #0
 8005bee:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	3354      	adds	r3, #84	; 0x54
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f001 fc09 	bl	800740c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d108      	bne.n	8005c16 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f001 f899 	bl	8006d40 <vPortFree>
				vPortFree( pxTCB );
 8005c0e:	6878      	ldr	r0, [r7, #4]
 8005c10:	f001 f896 	bl	8006d40 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005c14:	e018      	b.n	8005c48 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d103      	bne.n	8005c28 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005c20:	6878      	ldr	r0, [r7, #4]
 8005c22:	f001 f88d 	bl	8006d40 <vPortFree>
	}
 8005c26:	e00f      	b.n	8005c48 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005c2e:	2b02      	cmp	r3, #2
 8005c30:	d00a      	beq.n	8005c48 <prvDeleteTCB+0x60>
	__asm volatile
 8005c32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c36:	f383 8811 	msr	BASEPRI, r3
 8005c3a:	f3bf 8f6f 	isb	sy
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	60fb      	str	r3, [r7, #12]
}
 8005c44:	bf00      	nop
 8005c46:	e7fe      	b.n	8005c46 <prvDeleteTCB+0x5e>
	}
 8005c48:	bf00      	nop
 8005c4a:	3710      	adds	r7, #16
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	bd80      	pop	{r7, pc}

08005c50 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c56:	4b0c      	ldr	r3, [pc, #48]	; (8005c88 <prvResetNextTaskUnblockTime+0x38>)
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d104      	bne.n	8005c6a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005c60:	4b0a      	ldr	r3, [pc, #40]	; (8005c8c <prvResetNextTaskUnblockTime+0x3c>)
 8005c62:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005c66:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8005c68:	e008      	b.n	8005c7c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c6a:	4b07      	ldr	r3, [pc, #28]	; (8005c88 <prvResetNextTaskUnblockTime+0x38>)
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68db      	ldr	r3, [r3, #12]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	685b      	ldr	r3, [r3, #4]
 8005c78:	4a04      	ldr	r2, [pc, #16]	; (8005c8c <prvResetNextTaskUnblockTime+0x3c>)
 8005c7a:	6013      	str	r3, [r2, #0]
}
 8005c7c:	bf00      	nop
 8005c7e:	370c      	adds	r7, #12
 8005c80:	46bd      	mov	sp, r7
 8005c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c86:	4770      	bx	lr
 8005c88:	20000b14 	.word	0x20000b14
 8005c8c:	20000b7c 	.word	0x20000b7c

08005c90 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8005c90:	b480      	push	{r7}
 8005c92:	b083      	sub	sp, #12
 8005c94:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8005c96:	4b05      	ldr	r3, [pc, #20]	; (8005cac <xTaskGetCurrentTaskHandle+0x1c>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	607b      	str	r3, [r7, #4]

		return xReturn;
 8005c9c:	687b      	ldr	r3, [r7, #4]
	}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	370c      	adds	r7, #12
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ca8:	4770      	bx	lr
 8005caa:	bf00      	nop
 8005cac:	20000688 	.word	0x20000688

08005cb0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005cb0:	b480      	push	{r7}
 8005cb2:	b083      	sub	sp, #12
 8005cb4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8005cb6:	4b0b      	ldr	r3, [pc, #44]	; (8005ce4 <xTaskGetSchedulerState+0x34>)
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d102      	bne.n	8005cc4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	607b      	str	r3, [r7, #4]
 8005cc2:	e008      	b.n	8005cd6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005cc4:	4b08      	ldr	r3, [pc, #32]	; (8005ce8 <xTaskGetSchedulerState+0x38>)
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d102      	bne.n	8005cd2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005ccc:	2302      	movs	r3, #2
 8005cce:	607b      	str	r3, [r7, #4]
 8005cd0:	e001      	b.n	8005cd6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8005cd6:	687b      	ldr	r3, [r7, #4]
	}
 8005cd8:	4618      	mov	r0, r3
 8005cda:	370c      	adds	r7, #12
 8005cdc:	46bd      	mov	sp, r7
 8005cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce2:	4770      	bx	lr
 8005ce4:	20000b68 	.word	0x20000b68
 8005ce8:	20000b84 	.word	0x20000b84

08005cec <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8005cec:	b580      	push	{r7, lr}
 8005cee:	b084      	sub	sp, #16
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8005cf8:	2300      	movs	r3, #0
 8005cfa:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d051      	beq.n	8005da6 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8005d02:	68bb      	ldr	r3, [r7, #8]
 8005d04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d06:	4b2a      	ldr	r3, [pc, #168]	; (8005db0 <xTaskPriorityInherit+0xc4>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d241      	bcs.n	8005d94 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005d10:	68bb      	ldr	r3, [r7, #8]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	db06      	blt.n	8005d26 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005d18:	4b25      	ldr	r3, [pc, #148]	; (8005db0 <xTaskPriorityInherit+0xc4>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d1e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005d22:	68bb      	ldr	r3, [r7, #8]
 8005d24:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8005d26:	68bb      	ldr	r3, [r7, #8]
 8005d28:	6959      	ldr	r1, [r3, #20]
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d2e:	4613      	mov	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	4413      	add	r3, r2
 8005d34:	009b      	lsls	r3, r3, #2
 8005d36:	4a1f      	ldr	r2, [pc, #124]	; (8005db4 <xTaskPriorityInherit+0xc8>)
 8005d38:	4413      	add	r3, r2
 8005d3a:	4299      	cmp	r1, r3
 8005d3c:	d122      	bne.n	8005d84 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005d3e:	68bb      	ldr	r3, [r7, #8]
 8005d40:	3304      	adds	r3, #4
 8005d42:	4618      	mov	r0, r3
 8005d44:	f7fe fa78 	bl	8004238 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d48:	4b19      	ldr	r3, [pc, #100]	; (8005db0 <xTaskPriorityInherit+0xc4>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d4e:	68bb      	ldr	r3, [r7, #8]
 8005d50:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8005d52:	68bb      	ldr	r3, [r7, #8]
 8005d54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d56:	4b18      	ldr	r3, [pc, #96]	; (8005db8 <xTaskPriorityInherit+0xcc>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	429a      	cmp	r2, r3
 8005d5c:	d903      	bls.n	8005d66 <xTaskPriorityInherit+0x7a>
 8005d5e:	68bb      	ldr	r3, [r7, #8]
 8005d60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d62:	4a15      	ldr	r2, [pc, #84]	; (8005db8 <xTaskPriorityInherit+0xcc>)
 8005d64:	6013      	str	r3, [r2, #0]
 8005d66:	68bb      	ldr	r3, [r7, #8]
 8005d68:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d6a:	4613      	mov	r3, r2
 8005d6c:	009b      	lsls	r3, r3, #2
 8005d6e:	4413      	add	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4a10      	ldr	r2, [pc, #64]	; (8005db4 <xTaskPriorityInherit+0xc8>)
 8005d74:	441a      	add	r2, r3
 8005d76:	68bb      	ldr	r3, [r7, #8]
 8005d78:	3304      	adds	r3, #4
 8005d7a:	4619      	mov	r1, r3
 8005d7c:	4610      	mov	r0, r2
 8005d7e:	f7fe f9fe 	bl	800417e <vListInsertEnd>
 8005d82:	e004      	b.n	8005d8e <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8005d84:	4b0a      	ldr	r3, [pc, #40]	; (8005db0 <xTaskPriorityInherit+0xc4>)
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8005d8e:	2301      	movs	r3, #1
 8005d90:	60fb      	str	r3, [r7, #12]
 8005d92:	e008      	b.n	8005da6 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8005d94:	68bb      	ldr	r3, [r7, #8]
 8005d96:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005d98:	4b05      	ldr	r3, [pc, #20]	; (8005db0 <xTaskPriorityInherit+0xc4>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005d9e:	429a      	cmp	r2, r3
 8005da0:	d201      	bcs.n	8005da6 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8005da2:	2301      	movs	r3, #1
 8005da4:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005da6:	68fb      	ldr	r3, [r7, #12]
	}
 8005da8:	4618      	mov	r0, r3
 8005daa:	3710      	adds	r7, #16
 8005dac:	46bd      	mov	sp, r7
 8005dae:	bd80      	pop	{r7, pc}
 8005db0:	20000688 	.word	0x20000688
 8005db4:	2000068c 	.word	0x2000068c
 8005db8:	20000b64 	.word	0x20000b64

08005dbc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005dbc:	b580      	push	{r7, lr}
 8005dbe:	b086      	sub	sp, #24
 8005dc0:	af00      	add	r7, sp, #0
 8005dc2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d056      	beq.n	8005e80 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005dd2:	4b2e      	ldr	r3, [pc, #184]	; (8005e8c <xTaskPriorityDisinherit+0xd0>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	693a      	ldr	r2, [r7, #16]
 8005dd8:	429a      	cmp	r2, r3
 8005dda:	d00a      	beq.n	8005df2 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60fb      	str	r3, [r7, #12]
}
 8005dee:	bf00      	nop
 8005df0:	e7fe      	b.n	8005df0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005df2:	693b      	ldr	r3, [r7, #16]
 8005df4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d10a      	bne.n	8005e10 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dfe:	f383 8811 	msr	BASEPRI, r3
 8005e02:	f3bf 8f6f 	isb	sy
 8005e06:	f3bf 8f4f 	dsb	sy
 8005e0a:	60bb      	str	r3, [r7, #8]
}
 8005e0c:	bf00      	nop
 8005e0e:	e7fe      	b.n	8005e0e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005e10:	693b      	ldr	r3, [r7, #16]
 8005e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e14:	1e5a      	subs	r2, r3, #1
 8005e16:	693b      	ldr	r3, [r7, #16]
 8005e18:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e22:	429a      	cmp	r2, r3
 8005e24:	d02c      	beq.n	8005e80 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8005e26:	693b      	ldr	r3, [r7, #16]
 8005e28:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d128      	bne.n	8005e80 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005e2e:	693b      	ldr	r3, [r7, #16]
 8005e30:	3304      	adds	r3, #4
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fe fa00 	bl	8004238 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8005e38:	693b      	ldr	r3, [r7, #16]
 8005e3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005e3c:	693b      	ldr	r3, [r7, #16]
 8005e3e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e40:	693b      	ldr	r3, [r7, #16]
 8005e42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e44:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e48:	693b      	ldr	r3, [r7, #16]
 8005e4a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005e4c:	693b      	ldr	r3, [r7, #16]
 8005e4e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e50:	4b0f      	ldr	r3, [pc, #60]	; (8005e90 <xTaskPriorityDisinherit+0xd4>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	429a      	cmp	r2, r3
 8005e56:	d903      	bls.n	8005e60 <xTaskPriorityDisinherit+0xa4>
 8005e58:	693b      	ldr	r3, [r7, #16]
 8005e5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e5c:	4a0c      	ldr	r2, [pc, #48]	; (8005e90 <xTaskPriorityDisinherit+0xd4>)
 8005e5e:	6013      	str	r3, [r2, #0]
 8005e60:	693b      	ldr	r3, [r7, #16]
 8005e62:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e64:	4613      	mov	r3, r2
 8005e66:	009b      	lsls	r3, r3, #2
 8005e68:	4413      	add	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4a09      	ldr	r2, [pc, #36]	; (8005e94 <xTaskPriorityDisinherit+0xd8>)
 8005e6e:	441a      	add	r2, r3
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	3304      	adds	r3, #4
 8005e74:	4619      	mov	r1, r3
 8005e76:	4610      	mov	r0, r2
 8005e78:	f7fe f981 	bl	800417e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005e7c:	2301      	movs	r3, #1
 8005e7e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005e80:	697b      	ldr	r3, [r7, #20]
	}
 8005e82:	4618      	mov	r0, r3
 8005e84:	3718      	adds	r7, #24
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
 8005e8a:	bf00      	nop
 8005e8c:	20000688 	.word	0x20000688
 8005e90:	20000b64 	.word	0x20000b64
 8005e94:	2000068c 	.word	0x2000068c

08005e98 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b088      	sub	sp, #32
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
 8005ea0:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d06a      	beq.n	8005f86 <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8005eb0:	69bb      	ldr	r3, [r7, #24]
 8005eb2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d10a      	bne.n	8005ece <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8005eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ebc:	f383 8811 	msr	BASEPRI, r3
 8005ec0:	f3bf 8f6f 	isb	sy
 8005ec4:	f3bf 8f4f 	dsb	sy
 8005ec8:	60fb      	str	r3, [r7, #12]
}
 8005eca:	bf00      	nop
 8005ecc:	e7fe      	b.n	8005ecc <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8005ece:	69bb      	ldr	r3, [r7, #24]
 8005ed0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ed2:	683a      	ldr	r2, [r7, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d902      	bls.n	8005ede <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	61fb      	str	r3, [r7, #28]
 8005edc:	e002      	b.n	8005ee4 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8005ede:	69bb      	ldr	r3, [r7, #24]
 8005ee0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ee2:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8005ee4:	69bb      	ldr	r3, [r7, #24]
 8005ee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ee8:	69fa      	ldr	r2, [r7, #28]
 8005eea:	429a      	cmp	r2, r3
 8005eec:	d04b      	beq.n	8005f86 <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8005eee:	69bb      	ldr	r3, [r7, #24]
 8005ef0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ef2:	697a      	ldr	r2, [r7, #20]
 8005ef4:	429a      	cmp	r2, r3
 8005ef6:	d146      	bne.n	8005f86 <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8005ef8:	4b25      	ldr	r3, [pc, #148]	; (8005f90 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	69ba      	ldr	r2, [r7, #24]
 8005efe:	429a      	cmp	r2, r3
 8005f00:	d10a      	bne.n	8005f18 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 8005f02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f06:	f383 8811 	msr	BASEPRI, r3
 8005f0a:	f3bf 8f6f 	isb	sy
 8005f0e:	f3bf 8f4f 	dsb	sy
 8005f12:	60bb      	str	r3, [r7, #8]
}
 8005f14:	bf00      	nop
 8005f16:	e7fe      	b.n	8005f16 <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f1c:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8005f1e:	69bb      	ldr	r3, [r7, #24]
 8005f20:	69fa      	ldr	r2, [r7, #28]
 8005f22:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8005f24:	69bb      	ldr	r3, [r7, #24]
 8005f26:	699b      	ldr	r3, [r3, #24]
 8005f28:	2b00      	cmp	r3, #0
 8005f2a:	db04      	blt.n	8005f36 <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f2c:	69fb      	ldr	r3, [r7, #28]
 8005f2e:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005f32:	69bb      	ldr	r3, [r7, #24]
 8005f34:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	6959      	ldr	r1, [r3, #20]
 8005f3a:	693a      	ldr	r2, [r7, #16]
 8005f3c:	4613      	mov	r3, r2
 8005f3e:	009b      	lsls	r3, r3, #2
 8005f40:	4413      	add	r3, r2
 8005f42:	009b      	lsls	r3, r3, #2
 8005f44:	4a13      	ldr	r2, [pc, #76]	; (8005f94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005f46:	4413      	add	r3, r2
 8005f48:	4299      	cmp	r1, r3
 8005f4a:	d11c      	bne.n	8005f86 <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005f4c:	69bb      	ldr	r3, [r7, #24]
 8005f4e:	3304      	adds	r3, #4
 8005f50:	4618      	mov	r0, r3
 8005f52:	f7fe f971 	bl	8004238 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8005f56:	69bb      	ldr	r3, [r7, #24]
 8005f58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f5a:	4b0f      	ldr	r3, [pc, #60]	; (8005f98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	429a      	cmp	r2, r3
 8005f60:	d903      	bls.n	8005f6a <vTaskPriorityDisinheritAfterTimeout+0xd2>
 8005f62:	69bb      	ldr	r3, [r7, #24]
 8005f64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f66:	4a0c      	ldr	r2, [pc, #48]	; (8005f98 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8005f68:	6013      	str	r3, [r2, #0]
 8005f6a:	69bb      	ldr	r3, [r7, #24]
 8005f6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f6e:	4613      	mov	r3, r2
 8005f70:	009b      	lsls	r3, r3, #2
 8005f72:	4413      	add	r3, r2
 8005f74:	009b      	lsls	r3, r3, #2
 8005f76:	4a07      	ldr	r2, [pc, #28]	; (8005f94 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8005f78:	441a      	add	r2, r3
 8005f7a:	69bb      	ldr	r3, [r7, #24]
 8005f7c:	3304      	adds	r3, #4
 8005f7e:	4619      	mov	r1, r3
 8005f80:	4610      	mov	r0, r2
 8005f82:	f7fe f8fc 	bl	800417e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005f86:	bf00      	nop
 8005f88:	3720      	adds	r7, #32
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	bd80      	pop	{r7, pc}
 8005f8e:	bf00      	nop
 8005f90:	20000688 	.word	0x20000688
 8005f94:	2000068c 	.word	0x2000068c
 8005f98:	20000b64 	.word	0x20000b64

08005f9c <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8005f9c:	b480      	push	{r7}
 8005f9e:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8005fa0:	4b07      	ldr	r3, [pc, #28]	; (8005fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d004      	beq.n	8005fb2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8005fa8:	4b05      	ldr	r3, [pc, #20]	; (8005fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8005fae:	3201      	adds	r2, #1
 8005fb0:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 8005fb2:	4b03      	ldr	r3, [pc, #12]	; (8005fc0 <pvTaskIncrementMutexHeldCount+0x24>)
 8005fb4:	681b      	ldr	r3, [r3, #0]
	}
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	46bd      	mov	sp, r7
 8005fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbe:	4770      	bx	lr
 8005fc0:	20000688 	.word	0x20000688

08005fc4 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005fc4:	b580      	push	{r7, lr}
 8005fc6:	b084      	sub	sp, #16
 8005fc8:	af00      	add	r7, sp, #0
 8005fca:	6078      	str	r0, [r7, #4]
 8005fcc:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005fce:	4b21      	ldr	r3, [pc, #132]	; (8006054 <prvAddCurrentTaskToDelayedList+0x90>)
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005fd4:	4b20      	ldr	r3, [pc, #128]	; (8006058 <prvAddCurrentTaskToDelayedList+0x94>)
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	3304      	adds	r3, #4
 8005fda:	4618      	mov	r0, r3
 8005fdc:	f7fe f92c 	bl	8004238 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fe6:	d10a      	bne.n	8005ffe <prvAddCurrentTaskToDelayedList+0x3a>
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d007      	beq.n	8005ffe <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005fee:	4b1a      	ldr	r3, [pc, #104]	; (8006058 <prvAddCurrentTaskToDelayedList+0x94>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	3304      	adds	r3, #4
 8005ff4:	4619      	mov	r1, r3
 8005ff6:	4819      	ldr	r0, [pc, #100]	; (800605c <prvAddCurrentTaskToDelayedList+0x98>)
 8005ff8:	f7fe f8c1 	bl	800417e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005ffc:	e026      	b.n	800604c <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005ffe:	68fa      	ldr	r2, [r7, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4413      	add	r3, r2
 8006004:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006006:	4b14      	ldr	r3, [pc, #80]	; (8006058 <prvAddCurrentTaskToDelayedList+0x94>)
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	68ba      	ldr	r2, [r7, #8]
 800600c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800600e:	68ba      	ldr	r2, [r7, #8]
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	429a      	cmp	r2, r3
 8006014:	d209      	bcs.n	800602a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006016:	4b12      	ldr	r3, [pc, #72]	; (8006060 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006018:	681a      	ldr	r2, [r3, #0]
 800601a:	4b0f      	ldr	r3, [pc, #60]	; (8006058 <prvAddCurrentTaskToDelayedList+0x94>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	3304      	adds	r3, #4
 8006020:	4619      	mov	r1, r3
 8006022:	4610      	mov	r0, r2
 8006024:	f7fe f8cf 	bl	80041c6 <vListInsert>
}
 8006028:	e010      	b.n	800604c <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800602a:	4b0e      	ldr	r3, [pc, #56]	; (8006064 <prvAddCurrentTaskToDelayedList+0xa0>)
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	4b0a      	ldr	r3, [pc, #40]	; (8006058 <prvAddCurrentTaskToDelayedList+0x94>)
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	3304      	adds	r3, #4
 8006034:	4619      	mov	r1, r3
 8006036:	4610      	mov	r0, r2
 8006038:	f7fe f8c5 	bl	80041c6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800603c:	4b0a      	ldr	r3, [pc, #40]	; (8006068 <prvAddCurrentTaskToDelayedList+0xa4>)
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	68ba      	ldr	r2, [r7, #8]
 8006042:	429a      	cmp	r2, r3
 8006044:	d202      	bcs.n	800604c <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006046:	4a08      	ldr	r2, [pc, #32]	; (8006068 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006048:	68bb      	ldr	r3, [r7, #8]
 800604a:	6013      	str	r3, [r2, #0]
}
 800604c:	bf00      	nop
 800604e:	3710      	adds	r7, #16
 8006050:	46bd      	mov	sp, r7
 8006052:	bd80      	pop	{r7, pc}
 8006054:	20000b60 	.word	0x20000b60
 8006058:	20000688 	.word	0x20000688
 800605c:	20000b48 	.word	0x20000b48
 8006060:	20000b18 	.word	0x20000b18
 8006064:	20000b14 	.word	0x20000b14
 8006068:	20000b7c 	.word	0x20000b7c

0800606c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800606c:	b580      	push	{r7, lr}
 800606e:	b08a      	sub	sp, #40	; 0x28
 8006070:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006072:	2300      	movs	r3, #0
 8006074:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006076:	f000 fb07 	bl	8006688 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800607a:	4b1c      	ldr	r3, [pc, #112]	; (80060ec <xTimerCreateTimerTask+0x80>)
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	2b00      	cmp	r3, #0
 8006080:	d021      	beq.n	80060c6 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006082:	2300      	movs	r3, #0
 8006084:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006086:	2300      	movs	r3, #0
 8006088:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800608a:	1d3a      	adds	r2, r7, #4
 800608c:	f107 0108 	add.w	r1, r7, #8
 8006090:	f107 030c 	add.w	r3, r7, #12
 8006094:	4618      	mov	r0, r3
 8006096:	f7fe f82b 	bl	80040f0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800609a:	6879      	ldr	r1, [r7, #4]
 800609c:	68bb      	ldr	r3, [r7, #8]
 800609e:	68fa      	ldr	r2, [r7, #12]
 80060a0:	9202      	str	r2, [sp, #8]
 80060a2:	9301      	str	r3, [sp, #4]
 80060a4:	2302      	movs	r3, #2
 80060a6:	9300      	str	r3, [sp, #0]
 80060a8:	2300      	movs	r3, #0
 80060aa:	460a      	mov	r2, r1
 80060ac:	4910      	ldr	r1, [pc, #64]	; (80060f0 <xTimerCreateTimerTask+0x84>)
 80060ae:	4811      	ldr	r0, [pc, #68]	; (80060f4 <xTimerCreateTimerTask+0x88>)
 80060b0:	f7fe ff68 	bl	8004f84 <xTaskCreateStatic>
 80060b4:	4603      	mov	r3, r0
 80060b6:	4a10      	ldr	r2, [pc, #64]	; (80060f8 <xTimerCreateTimerTask+0x8c>)
 80060b8:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80060ba:	4b0f      	ldr	r3, [pc, #60]	; (80060f8 <xTimerCreateTimerTask+0x8c>)
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d001      	beq.n	80060c6 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80060c2:	2301      	movs	r3, #1
 80060c4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b00      	cmp	r3, #0
 80060ca:	d10a      	bne.n	80060e2 <xTimerCreateTimerTask+0x76>
	__asm volatile
 80060cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060d0:	f383 8811 	msr	BASEPRI, r3
 80060d4:	f3bf 8f6f 	isb	sy
 80060d8:	f3bf 8f4f 	dsb	sy
 80060dc:	613b      	str	r3, [r7, #16]
}
 80060de:	bf00      	nop
 80060e0:	e7fe      	b.n	80060e0 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80060e2:	697b      	ldr	r3, [r7, #20]
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3718      	adds	r7, #24
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	20000bb8 	.word	0x20000bb8
 80060f0:	08008598 	.word	0x08008598
 80060f4:	08006231 	.word	0x08006231
 80060f8:	20000bbc 	.word	0x20000bbc

080060fc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80060fc:	b580      	push	{r7, lr}
 80060fe:	b08a      	sub	sp, #40	; 0x28
 8006100:	af00      	add	r7, sp, #0
 8006102:	60f8      	str	r0, [r7, #12]
 8006104:	60b9      	str	r1, [r7, #8]
 8006106:	607a      	str	r2, [r7, #4]
 8006108:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800610a:	2300      	movs	r3, #0
 800610c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800610e:	68fb      	ldr	r3, [r7, #12]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d10a      	bne.n	800612a <xTimerGenericCommand+0x2e>
	__asm volatile
 8006114:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006118:	f383 8811 	msr	BASEPRI, r3
 800611c:	f3bf 8f6f 	isb	sy
 8006120:	f3bf 8f4f 	dsb	sy
 8006124:	623b      	str	r3, [r7, #32]
}
 8006126:	bf00      	nop
 8006128:	e7fe      	b.n	8006128 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800612a:	4b1a      	ldr	r3, [pc, #104]	; (8006194 <xTimerGenericCommand+0x98>)
 800612c:	681b      	ldr	r3, [r3, #0]
 800612e:	2b00      	cmp	r3, #0
 8006130:	d02a      	beq.n	8006188 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006132:	68bb      	ldr	r3, [r7, #8]
 8006134:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	2b05      	cmp	r3, #5
 8006142:	dc18      	bgt.n	8006176 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006144:	f7ff fdb4 	bl	8005cb0 <xTaskGetSchedulerState>
 8006148:	4603      	mov	r3, r0
 800614a:	2b02      	cmp	r3, #2
 800614c:	d109      	bne.n	8006162 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800614e:	4b11      	ldr	r3, [pc, #68]	; (8006194 <xTimerGenericCommand+0x98>)
 8006150:	6818      	ldr	r0, [r3, #0]
 8006152:	f107 0110 	add.w	r1, r7, #16
 8006156:	2300      	movs	r3, #0
 8006158:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800615a:	f7fe fa07 	bl	800456c <xQueueGenericSend>
 800615e:	6278      	str	r0, [r7, #36]	; 0x24
 8006160:	e012      	b.n	8006188 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006162:	4b0c      	ldr	r3, [pc, #48]	; (8006194 <xTimerGenericCommand+0x98>)
 8006164:	6818      	ldr	r0, [r3, #0]
 8006166:	f107 0110 	add.w	r1, r7, #16
 800616a:	2300      	movs	r3, #0
 800616c:	2200      	movs	r2, #0
 800616e:	f7fe f9fd 	bl	800456c <xQueueGenericSend>
 8006172:	6278      	str	r0, [r7, #36]	; 0x24
 8006174:	e008      	b.n	8006188 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006176:	4b07      	ldr	r3, [pc, #28]	; (8006194 <xTimerGenericCommand+0x98>)
 8006178:	6818      	ldr	r0, [r3, #0]
 800617a:	f107 0110 	add.w	r1, r7, #16
 800617e:	2300      	movs	r3, #0
 8006180:	683a      	ldr	r2, [r7, #0]
 8006182:	f7fe faf1 	bl	8004768 <xQueueGenericSendFromISR>
 8006186:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800618a:	4618      	mov	r0, r3
 800618c:	3728      	adds	r7, #40	; 0x28
 800618e:	46bd      	mov	sp, r7
 8006190:	bd80      	pop	{r7, pc}
 8006192:	bf00      	nop
 8006194:	20000bb8 	.word	0x20000bb8

08006198 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006198:	b580      	push	{r7, lr}
 800619a:	b088      	sub	sp, #32
 800619c:	af02      	add	r7, sp, #8
 800619e:	6078      	str	r0, [r7, #4]
 80061a0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061a2:	4b22      	ldr	r3, [pc, #136]	; (800622c <prvProcessExpiredTimer+0x94>)
 80061a4:	681b      	ldr	r3, [r3, #0]
 80061a6:	68db      	ldr	r3, [r3, #12]
 80061a8:	68db      	ldr	r3, [r3, #12]
 80061aa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80061ac:	697b      	ldr	r3, [r7, #20]
 80061ae:	3304      	adds	r3, #4
 80061b0:	4618      	mov	r0, r3
 80061b2:	f7fe f841 	bl	8004238 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80061b6:	697b      	ldr	r3, [r7, #20]
 80061b8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80061bc:	f003 0304 	and.w	r3, r3, #4
 80061c0:	2b00      	cmp	r3, #0
 80061c2:	d022      	beq.n	800620a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80061c4:	697b      	ldr	r3, [r7, #20]
 80061c6:	699a      	ldr	r2, [r3, #24]
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	18d1      	adds	r1, r2, r3
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	683a      	ldr	r2, [r7, #0]
 80061d0:	6978      	ldr	r0, [r7, #20]
 80061d2:	f000 f8d1 	bl	8006378 <prvInsertTimerInActiveList>
 80061d6:	4603      	mov	r3, r0
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d01f      	beq.n	800621c <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80061dc:	2300      	movs	r3, #0
 80061de:	9300      	str	r3, [sp, #0]
 80061e0:	2300      	movs	r3, #0
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	2100      	movs	r1, #0
 80061e6:	6978      	ldr	r0, [r7, #20]
 80061e8:	f7ff ff88 	bl	80060fc <xTimerGenericCommand>
 80061ec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80061ee:	693b      	ldr	r3, [r7, #16]
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d113      	bne.n	800621c <prvProcessExpiredTimer+0x84>
	__asm volatile
 80061f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061f8:	f383 8811 	msr	BASEPRI, r3
 80061fc:	f3bf 8f6f 	isb	sy
 8006200:	f3bf 8f4f 	dsb	sy
 8006204:	60fb      	str	r3, [r7, #12]
}
 8006206:	bf00      	nop
 8006208:	e7fe      	b.n	8006208 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006210:	f023 0301 	bic.w	r3, r3, #1
 8006214:	b2da      	uxtb	r2, r3
 8006216:	697b      	ldr	r3, [r7, #20]
 8006218:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	6978      	ldr	r0, [r7, #20]
 8006222:	4798      	blx	r3
}
 8006224:	bf00      	nop
 8006226:	3718      	adds	r7, #24
 8006228:	46bd      	mov	sp, r7
 800622a:	bd80      	pop	{r7, pc}
 800622c:	20000bb0 	.word	0x20000bb0

08006230 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006230:	b580      	push	{r7, lr}
 8006232:	b084      	sub	sp, #16
 8006234:	af00      	add	r7, sp, #0
 8006236:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006238:	f107 0308 	add.w	r3, r7, #8
 800623c:	4618      	mov	r0, r3
 800623e:	f000 f857 	bl	80062f0 <prvGetNextExpireTime>
 8006242:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006244:	68bb      	ldr	r3, [r7, #8]
 8006246:	4619      	mov	r1, r3
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f803 	bl	8006254 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800624e:	f000 f8d5 	bl	80063fc <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006252:	e7f1      	b.n	8006238 <prvTimerTask+0x8>

08006254 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
 800625c:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800625e:	f7ff f92b 	bl	80054b8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006262:	f107 0308 	add.w	r3, r7, #8
 8006266:	4618      	mov	r0, r3
 8006268:	f000 f866 	bl	8006338 <prvSampleTimeNow>
 800626c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800626e:	68bb      	ldr	r3, [r7, #8]
 8006270:	2b00      	cmp	r3, #0
 8006272:	d130      	bne.n	80062d6 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006274:	683b      	ldr	r3, [r7, #0]
 8006276:	2b00      	cmp	r3, #0
 8006278:	d10a      	bne.n	8006290 <prvProcessTimerOrBlockTask+0x3c>
 800627a:	687a      	ldr	r2, [r7, #4]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	429a      	cmp	r2, r3
 8006280:	d806      	bhi.n	8006290 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006282:	f7ff f927 	bl	80054d4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006286:	68f9      	ldr	r1, [r7, #12]
 8006288:	6878      	ldr	r0, [r7, #4]
 800628a:	f7ff ff85 	bl	8006198 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800628e:	e024      	b.n	80062da <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006290:	683b      	ldr	r3, [r7, #0]
 8006292:	2b00      	cmp	r3, #0
 8006294:	d008      	beq.n	80062a8 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006296:	4b13      	ldr	r3, [pc, #76]	; (80062e4 <prvProcessTimerOrBlockTask+0x90>)
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d101      	bne.n	80062a4 <prvProcessTimerOrBlockTask+0x50>
 80062a0:	2301      	movs	r3, #1
 80062a2:	e000      	b.n	80062a6 <prvProcessTimerOrBlockTask+0x52>
 80062a4:	2300      	movs	r3, #0
 80062a6:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80062a8:	4b0f      	ldr	r3, [pc, #60]	; (80062e8 <prvProcessTimerOrBlockTask+0x94>)
 80062aa:	6818      	ldr	r0, [r3, #0]
 80062ac:	687a      	ldr	r2, [r7, #4]
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	1ad3      	subs	r3, r2, r3
 80062b2:	683a      	ldr	r2, [r7, #0]
 80062b4:	4619      	mov	r1, r3
 80062b6:	f7fe fe31 	bl	8004f1c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80062ba:	f7ff f90b 	bl	80054d4 <xTaskResumeAll>
 80062be:	4603      	mov	r3, r0
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d10a      	bne.n	80062da <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80062c4:	4b09      	ldr	r3, [pc, #36]	; (80062ec <prvProcessTimerOrBlockTask+0x98>)
 80062c6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80062ca:	601a      	str	r2, [r3, #0]
 80062cc:	f3bf 8f4f 	dsb	sy
 80062d0:	f3bf 8f6f 	isb	sy
}
 80062d4:	e001      	b.n	80062da <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80062d6:	f7ff f8fd 	bl	80054d4 <xTaskResumeAll>
}
 80062da:	bf00      	nop
 80062dc:	3710      	adds	r7, #16
 80062de:	46bd      	mov	sp, r7
 80062e0:	bd80      	pop	{r7, pc}
 80062e2:	bf00      	nop
 80062e4:	20000bb4 	.word	0x20000bb4
 80062e8:	20000bb8 	.word	0x20000bb8
 80062ec:	e000ed04 	.word	0xe000ed04

080062f0 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80062f0:	b480      	push	{r7}
 80062f2:	b085      	sub	sp, #20
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80062f8:	4b0e      	ldr	r3, [pc, #56]	; (8006334 <prvGetNextExpireTime+0x44>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d101      	bne.n	8006306 <prvGetNextExpireTime+0x16>
 8006302:	2201      	movs	r2, #1
 8006304:	e000      	b.n	8006308 <prvGetNextExpireTime+0x18>
 8006306:	2200      	movs	r2, #0
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	d105      	bne.n	8006320 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006314:	4b07      	ldr	r3, [pc, #28]	; (8006334 <prvGetNextExpireTime+0x44>)
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	68db      	ldr	r3, [r3, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	60fb      	str	r3, [r7, #12]
 800631e:	e001      	b.n	8006324 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006320:	2300      	movs	r3, #0
 8006322:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006324:	68fb      	ldr	r3, [r7, #12]
}
 8006326:	4618      	mov	r0, r3
 8006328:	3714      	adds	r7, #20
 800632a:	46bd      	mov	sp, r7
 800632c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006330:	4770      	bx	lr
 8006332:	bf00      	nop
 8006334:	20000bb0 	.word	0x20000bb0

08006338 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b084      	sub	sp, #16
 800633c:	af00      	add	r7, sp, #0
 800633e:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006340:	f7ff f966 	bl	8005610 <xTaskGetTickCount>
 8006344:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006346:	4b0b      	ldr	r3, [pc, #44]	; (8006374 <prvSampleTimeNow+0x3c>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	68fa      	ldr	r2, [r7, #12]
 800634c:	429a      	cmp	r2, r3
 800634e:	d205      	bcs.n	800635c <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006350:	f000 f936 	bl	80065c0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	601a      	str	r2, [r3, #0]
 800635a:	e002      	b.n	8006362 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2200      	movs	r2, #0
 8006360:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006362:	4a04      	ldr	r2, [pc, #16]	; (8006374 <prvSampleTimeNow+0x3c>)
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006368:	68fb      	ldr	r3, [r7, #12]
}
 800636a:	4618      	mov	r0, r3
 800636c:	3710      	adds	r7, #16
 800636e:	46bd      	mov	sp, r7
 8006370:	bd80      	pop	{r7, pc}
 8006372:	bf00      	nop
 8006374:	20000bc0 	.word	0x20000bc0

08006378 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006378:	b580      	push	{r7, lr}
 800637a:	b086      	sub	sp, #24
 800637c:	af00      	add	r7, sp, #0
 800637e:	60f8      	str	r0, [r7, #12]
 8006380:	60b9      	str	r1, [r7, #8]
 8006382:	607a      	str	r2, [r7, #4]
 8006384:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006386:	2300      	movs	r3, #0
 8006388:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	68ba      	ldr	r2, [r7, #8]
 800638e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	68fa      	ldr	r2, [r7, #12]
 8006394:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	429a      	cmp	r2, r3
 800639c:	d812      	bhi.n	80063c4 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800639e:	687a      	ldr	r2, [r7, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	1ad2      	subs	r2, r2, r3
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	699b      	ldr	r3, [r3, #24]
 80063a8:	429a      	cmp	r2, r3
 80063aa:	d302      	bcc.n	80063b2 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80063ac:	2301      	movs	r3, #1
 80063ae:	617b      	str	r3, [r7, #20]
 80063b0:	e01b      	b.n	80063ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80063b2:	4b10      	ldr	r3, [pc, #64]	; (80063f4 <prvInsertTimerInActiveList+0x7c>)
 80063b4:	681a      	ldr	r2, [r3, #0]
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	3304      	adds	r3, #4
 80063ba:	4619      	mov	r1, r3
 80063bc:	4610      	mov	r0, r2
 80063be:	f7fd ff02 	bl	80041c6 <vListInsert>
 80063c2:	e012      	b.n	80063ea <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80063c4:	687a      	ldr	r2, [r7, #4]
 80063c6:	683b      	ldr	r3, [r7, #0]
 80063c8:	429a      	cmp	r2, r3
 80063ca:	d206      	bcs.n	80063da <prvInsertTimerInActiveList+0x62>
 80063cc:	68ba      	ldr	r2, [r7, #8]
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d302      	bcc.n	80063da <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	617b      	str	r3, [r7, #20]
 80063d8:	e007      	b.n	80063ea <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80063da:	4b07      	ldr	r3, [pc, #28]	; (80063f8 <prvInsertTimerInActiveList+0x80>)
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	3304      	adds	r3, #4
 80063e2:	4619      	mov	r1, r3
 80063e4:	4610      	mov	r0, r2
 80063e6:	f7fd feee 	bl	80041c6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80063ea:	697b      	ldr	r3, [r7, #20]
}
 80063ec:	4618      	mov	r0, r3
 80063ee:	3718      	adds	r7, #24
 80063f0:	46bd      	mov	sp, r7
 80063f2:	bd80      	pop	{r7, pc}
 80063f4:	20000bb4 	.word	0x20000bb4
 80063f8:	20000bb0 	.word	0x20000bb0

080063fc <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80063fc:	b580      	push	{r7, lr}
 80063fe:	b08e      	sub	sp, #56	; 0x38
 8006400:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006402:	e0ca      	b.n	800659a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	2b00      	cmp	r3, #0
 8006408:	da18      	bge.n	800643c <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800640a:	1d3b      	adds	r3, r7, #4
 800640c:	3304      	adds	r3, #4
 800640e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006412:	2b00      	cmp	r3, #0
 8006414:	d10a      	bne.n	800642c <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006416:	f04f 0350 	mov.w	r3, #80	; 0x50
 800641a:	f383 8811 	msr	BASEPRI, r3
 800641e:	f3bf 8f6f 	isb	sy
 8006422:	f3bf 8f4f 	dsb	sy
 8006426:	61fb      	str	r3, [r7, #28]
}
 8006428:	bf00      	nop
 800642a:	e7fe      	b.n	800642a <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800642c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800642e:	681b      	ldr	r3, [r3, #0]
 8006430:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006432:	6850      	ldr	r0, [r2, #4]
 8006434:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006436:	6892      	ldr	r2, [r2, #8]
 8006438:	4611      	mov	r1, r2
 800643a:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	2b00      	cmp	r3, #0
 8006440:	f2c0 80aa 	blt.w	8006598 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006444:	68fb      	ldr	r3, [r7, #12]
 8006446:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006448:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800644a:	695b      	ldr	r3, [r3, #20]
 800644c:	2b00      	cmp	r3, #0
 800644e:	d004      	beq.n	800645a <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006450:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006452:	3304      	adds	r3, #4
 8006454:	4618      	mov	r0, r3
 8006456:	f7fd feef 	bl	8004238 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800645a:	463b      	mov	r3, r7
 800645c:	4618      	mov	r0, r3
 800645e:	f7ff ff6b 	bl	8006338 <prvSampleTimeNow>
 8006462:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2b09      	cmp	r3, #9
 8006468:	f200 8097 	bhi.w	800659a <prvProcessReceivedCommands+0x19e>
 800646c:	a201      	add	r2, pc, #4	; (adr r2, 8006474 <prvProcessReceivedCommands+0x78>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	0800649d 	.word	0x0800649d
 8006478:	0800649d 	.word	0x0800649d
 800647c:	0800649d 	.word	0x0800649d
 8006480:	08006511 	.word	0x08006511
 8006484:	08006525 	.word	0x08006525
 8006488:	0800656f 	.word	0x0800656f
 800648c:	0800649d 	.word	0x0800649d
 8006490:	0800649d 	.word	0x0800649d
 8006494:	08006511 	.word	0x08006511
 8006498:	08006525 	.word	0x08006525
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800649c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800649e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064a2:	f043 0301 	orr.w	r3, r3, #1
 80064a6:	b2da      	uxtb	r2, r3
 80064a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80064ae:	68ba      	ldr	r2, [r7, #8]
 80064b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064b2:	699b      	ldr	r3, [r3, #24]
 80064b4:	18d1      	adds	r1, r2, r3
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80064ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064bc:	f7ff ff5c 	bl	8006378 <prvInsertTimerInActiveList>
 80064c0:	4603      	mov	r3, r0
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d069      	beq.n	800659a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80064c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064c8:	6a1b      	ldr	r3, [r3, #32]
 80064ca:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064cc:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80064ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80064d4:	f003 0304 	and.w	r3, r3, #4
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d05e      	beq.n	800659a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80064dc:	68ba      	ldr	r2, [r7, #8]
 80064de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80064e0:	699b      	ldr	r3, [r3, #24]
 80064e2:	441a      	add	r2, r3
 80064e4:	2300      	movs	r3, #0
 80064e6:	9300      	str	r3, [sp, #0]
 80064e8:	2300      	movs	r3, #0
 80064ea:	2100      	movs	r1, #0
 80064ec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80064ee:	f7ff fe05 	bl	80060fc <xTimerGenericCommand>
 80064f2:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80064f4:	6a3b      	ldr	r3, [r7, #32]
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d14f      	bne.n	800659a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	61bb      	str	r3, [r7, #24]
}
 800650c:	bf00      	nop
 800650e:	e7fe      	b.n	800650e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006512:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006516:	f023 0301 	bic.w	r3, r3, #1
 800651a:	b2da      	uxtb	r2, r3
 800651c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800651e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006522:	e03a      	b.n	800659a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006524:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006526:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800652a:	f043 0301 	orr.w	r3, r3, #1
 800652e:	b2da      	uxtb	r2, r3
 8006530:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006532:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006536:	68ba      	ldr	r2, [r7, #8]
 8006538:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653a:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800653c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800653e:	699b      	ldr	r3, [r3, #24]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d10a      	bne.n	800655a <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	617b      	str	r3, [r7, #20]
}
 8006556:	bf00      	nop
 8006558:	e7fe      	b.n	8006558 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800655a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800655c:	699a      	ldr	r2, [r3, #24]
 800655e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006560:	18d1      	adds	r1, r2, r3
 8006562:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006564:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006566:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006568:	f7ff ff06 	bl	8006378 <prvInsertTimerInActiveList>
					break;
 800656c:	e015      	b.n	800659a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800656e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006570:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006574:	f003 0302 	and.w	r3, r3, #2
 8006578:	2b00      	cmp	r3, #0
 800657a:	d103      	bne.n	8006584 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800657c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800657e:	f000 fbdf 	bl	8006d40 <vPortFree>
 8006582:	e00a      	b.n	800659a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006586:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800658a:	f023 0301 	bic.w	r3, r3, #1
 800658e:	b2da      	uxtb	r2, r3
 8006590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006592:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006596:	e000      	b.n	800659a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006598:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800659a:	4b08      	ldr	r3, [pc, #32]	; (80065bc <prvProcessReceivedCommands+0x1c0>)
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	1d39      	adds	r1, r7, #4
 80065a0:	2200      	movs	r2, #0
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe f97c 	bl	80048a0 <xQueueReceive>
 80065a8:	4603      	mov	r3, r0
 80065aa:	2b00      	cmp	r3, #0
 80065ac:	f47f af2a 	bne.w	8006404 <prvProcessReceivedCommands+0x8>
	}
}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
 80065b4:	3730      	adds	r7, #48	; 0x30
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bd80      	pop	{r7, pc}
 80065ba:	bf00      	nop
 80065bc:	20000bb8 	.word	0x20000bb8

080065c0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80065c0:	b580      	push	{r7, lr}
 80065c2:	b088      	sub	sp, #32
 80065c4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80065c6:	e048      	b.n	800665a <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80065c8:	4b2d      	ldr	r3, [pc, #180]	; (8006680 <prvSwitchTimerLists+0xc0>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065d2:	4b2b      	ldr	r3, [pc, #172]	; (8006680 <prvSwitchTimerLists+0xc0>)
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	68db      	ldr	r3, [r3, #12]
 80065d8:	68db      	ldr	r3, [r3, #12]
 80065da:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3304      	adds	r3, #4
 80065e0:	4618      	mov	r0, r3
 80065e2:	f7fd fe29 	bl	8004238 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	6a1b      	ldr	r3, [r3, #32]
 80065ea:	68f8      	ldr	r0, [r7, #12]
 80065ec:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80065f4:	f003 0304 	and.w	r3, r3, #4
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d02e      	beq.n	800665a <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	693a      	ldr	r2, [r7, #16]
 8006602:	4413      	add	r3, r2
 8006604:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006606:	68ba      	ldr	r2, [r7, #8]
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	429a      	cmp	r2, r3
 800660c:	d90e      	bls.n	800662c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	68ba      	ldr	r2, [r7, #8]
 8006612:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	68fa      	ldr	r2, [r7, #12]
 8006618:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800661a:	4b19      	ldr	r3, [pc, #100]	; (8006680 <prvSwitchTimerLists+0xc0>)
 800661c:	681a      	ldr	r2, [r3, #0]
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3304      	adds	r3, #4
 8006622:	4619      	mov	r1, r3
 8006624:	4610      	mov	r0, r2
 8006626:	f7fd fdce 	bl	80041c6 <vListInsert>
 800662a:	e016      	b.n	800665a <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800662c:	2300      	movs	r3, #0
 800662e:	9300      	str	r3, [sp, #0]
 8006630:	2300      	movs	r3, #0
 8006632:	693a      	ldr	r2, [r7, #16]
 8006634:	2100      	movs	r1, #0
 8006636:	68f8      	ldr	r0, [r7, #12]
 8006638:	f7ff fd60 	bl	80060fc <xTimerGenericCommand>
 800663c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2b00      	cmp	r3, #0
 8006642:	d10a      	bne.n	800665a <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006644:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006648:	f383 8811 	msr	BASEPRI, r3
 800664c:	f3bf 8f6f 	isb	sy
 8006650:	f3bf 8f4f 	dsb	sy
 8006654:	603b      	str	r3, [r7, #0]
}
 8006656:	bf00      	nop
 8006658:	e7fe      	b.n	8006658 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800665a:	4b09      	ldr	r3, [pc, #36]	; (8006680 <prvSwitchTimerLists+0xc0>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d1b1      	bne.n	80065c8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006664:	4b06      	ldr	r3, [pc, #24]	; (8006680 <prvSwitchTimerLists+0xc0>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800666a:	4b06      	ldr	r3, [pc, #24]	; (8006684 <prvSwitchTimerLists+0xc4>)
 800666c:	681b      	ldr	r3, [r3, #0]
 800666e:	4a04      	ldr	r2, [pc, #16]	; (8006680 <prvSwitchTimerLists+0xc0>)
 8006670:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006672:	4a04      	ldr	r2, [pc, #16]	; (8006684 <prvSwitchTimerLists+0xc4>)
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	6013      	str	r3, [r2, #0]
}
 8006678:	bf00      	nop
 800667a:	3718      	adds	r7, #24
 800667c:	46bd      	mov	sp, r7
 800667e:	bd80      	pop	{r7, pc}
 8006680:	20000bb0 	.word	0x20000bb0
 8006684:	20000bb4 	.word	0x20000bb4

08006688 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b082      	sub	sp, #8
 800668c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800668e:	f000 f969 	bl	8006964 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006692:	4b15      	ldr	r3, [pc, #84]	; (80066e8 <prvCheckForValidListAndQueue+0x60>)
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	2b00      	cmp	r3, #0
 8006698:	d120      	bne.n	80066dc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800669a:	4814      	ldr	r0, [pc, #80]	; (80066ec <prvCheckForValidListAndQueue+0x64>)
 800669c:	f7fd fd42 	bl	8004124 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80066a0:	4813      	ldr	r0, [pc, #76]	; (80066f0 <prvCheckForValidListAndQueue+0x68>)
 80066a2:	f7fd fd3f 	bl	8004124 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80066a6:	4b13      	ldr	r3, [pc, #76]	; (80066f4 <prvCheckForValidListAndQueue+0x6c>)
 80066a8:	4a10      	ldr	r2, [pc, #64]	; (80066ec <prvCheckForValidListAndQueue+0x64>)
 80066aa:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80066ac:	4b12      	ldr	r3, [pc, #72]	; (80066f8 <prvCheckForValidListAndQueue+0x70>)
 80066ae:	4a10      	ldr	r2, [pc, #64]	; (80066f0 <prvCheckForValidListAndQueue+0x68>)
 80066b0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80066b2:	2300      	movs	r3, #0
 80066b4:	9300      	str	r3, [sp, #0]
 80066b6:	4b11      	ldr	r3, [pc, #68]	; (80066fc <prvCheckForValidListAndQueue+0x74>)
 80066b8:	4a11      	ldr	r2, [pc, #68]	; (8006700 <prvCheckForValidListAndQueue+0x78>)
 80066ba:	2110      	movs	r1, #16
 80066bc:	200a      	movs	r0, #10
 80066be:	f7fd fe4d 	bl	800435c <xQueueGenericCreateStatic>
 80066c2:	4603      	mov	r3, r0
 80066c4:	4a08      	ldr	r2, [pc, #32]	; (80066e8 <prvCheckForValidListAndQueue+0x60>)
 80066c6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80066c8:	4b07      	ldr	r3, [pc, #28]	; (80066e8 <prvCheckForValidListAndQueue+0x60>)
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	2b00      	cmp	r3, #0
 80066ce:	d005      	beq.n	80066dc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80066d0:	4b05      	ldr	r3, [pc, #20]	; (80066e8 <prvCheckForValidListAndQueue+0x60>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	490b      	ldr	r1, [pc, #44]	; (8006704 <prvCheckForValidListAndQueue+0x7c>)
 80066d6:	4618      	mov	r0, r3
 80066d8:	f7fe fbf6 	bl	8004ec8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80066dc:	f000 f972 	bl	80069c4 <vPortExitCritical>
}
 80066e0:	bf00      	nop
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	20000bb8 	.word	0x20000bb8
 80066ec:	20000b88 	.word	0x20000b88
 80066f0:	20000b9c 	.word	0x20000b9c
 80066f4:	20000bb0 	.word	0x20000bb0
 80066f8:	20000bb4 	.word	0x20000bb4
 80066fc:	20000c64 	.word	0x20000c64
 8006700:	20000bc4 	.word	0x20000bc4
 8006704:	080085a0 	.word	0x080085a0

08006708 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006708:	b480      	push	{r7}
 800670a:	b085      	sub	sp, #20
 800670c:	af00      	add	r7, sp, #0
 800670e:	60f8      	str	r0, [r7, #12]
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	3b04      	subs	r3, #4
 8006718:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800671a:	68fb      	ldr	r3, [r7, #12]
 800671c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006720:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	3b04      	subs	r3, #4
 8006726:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006728:	68bb      	ldr	r3, [r7, #8]
 800672a:	f023 0201 	bic.w	r2, r3, #1
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	3b04      	subs	r3, #4
 8006736:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006738:	4a0c      	ldr	r2, [pc, #48]	; (800676c <pxPortInitialiseStack+0x64>)
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	3b14      	subs	r3, #20
 8006742:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006744:	687a      	ldr	r2, [r7, #4]
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	3b04      	subs	r3, #4
 800674e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006750:	68fb      	ldr	r3, [r7, #12]
 8006752:	f06f 0202 	mvn.w	r2, #2
 8006756:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	3b20      	subs	r3, #32
 800675c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800675e:	68fb      	ldr	r3, [r7, #12]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3714      	adds	r7, #20
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	08006771 	.word	0x08006771

08006770 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006770:	b480      	push	{r7}
 8006772:	b085      	sub	sp, #20
 8006774:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006776:	2300      	movs	r3, #0
 8006778:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800677a:	4b12      	ldr	r3, [pc, #72]	; (80067c4 <prvTaskExitError+0x54>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006782:	d00a      	beq.n	800679a <prvTaskExitError+0x2a>
	__asm volatile
 8006784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006788:	f383 8811 	msr	BASEPRI, r3
 800678c:	f3bf 8f6f 	isb	sy
 8006790:	f3bf 8f4f 	dsb	sy
 8006794:	60fb      	str	r3, [r7, #12]
}
 8006796:	bf00      	nop
 8006798:	e7fe      	b.n	8006798 <prvTaskExitError+0x28>
	__asm volatile
 800679a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800679e:	f383 8811 	msr	BASEPRI, r3
 80067a2:	f3bf 8f6f 	isb	sy
 80067a6:	f3bf 8f4f 	dsb	sy
 80067aa:	60bb      	str	r3, [r7, #8]
}
 80067ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80067ae:	bf00      	nop
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	d0fc      	beq.n	80067b0 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80067b6:	bf00      	nop
 80067b8:	bf00      	nop
 80067ba:	3714      	adds	r7, #20
 80067bc:	46bd      	mov	sp, r7
 80067be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c2:	4770      	bx	lr
 80067c4:	2000000c 	.word	0x2000000c
	...

080067d0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <pxCurrentTCBConst2>)
 80067d2:	6819      	ldr	r1, [r3, #0]
 80067d4:	6808      	ldr	r0, [r1, #0]
 80067d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067da:	f380 8809 	msr	PSP, r0
 80067de:	f3bf 8f6f 	isb	sy
 80067e2:	f04f 0000 	mov.w	r0, #0
 80067e6:	f380 8811 	msr	BASEPRI, r0
 80067ea:	4770      	bx	lr
 80067ec:	f3af 8000 	nop.w

080067f0 <pxCurrentTCBConst2>:
 80067f0:	20000688 	.word	0x20000688
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80067f4:	bf00      	nop
 80067f6:	bf00      	nop

080067f8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80067f8:	4808      	ldr	r0, [pc, #32]	; (800681c <prvPortStartFirstTask+0x24>)
 80067fa:	6800      	ldr	r0, [r0, #0]
 80067fc:	6800      	ldr	r0, [r0, #0]
 80067fe:	f380 8808 	msr	MSP, r0
 8006802:	f04f 0000 	mov.w	r0, #0
 8006806:	f380 8814 	msr	CONTROL, r0
 800680a:	b662      	cpsie	i
 800680c:	b661      	cpsie	f
 800680e:	f3bf 8f4f 	dsb	sy
 8006812:	f3bf 8f6f 	isb	sy
 8006816:	df00      	svc	0
 8006818:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800681a:	bf00      	nop
 800681c:	e000ed08 	.word	0xe000ed08

08006820 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006820:	b580      	push	{r7, lr}
 8006822:	b086      	sub	sp, #24
 8006824:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006826:	4b46      	ldr	r3, [pc, #280]	; (8006940 <xPortStartScheduler+0x120>)
 8006828:	681b      	ldr	r3, [r3, #0]
 800682a:	4a46      	ldr	r2, [pc, #280]	; (8006944 <xPortStartScheduler+0x124>)
 800682c:	4293      	cmp	r3, r2
 800682e:	d10a      	bne.n	8006846 <xPortStartScheduler+0x26>
	__asm volatile
 8006830:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006834:	f383 8811 	msr	BASEPRI, r3
 8006838:	f3bf 8f6f 	isb	sy
 800683c:	f3bf 8f4f 	dsb	sy
 8006840:	613b      	str	r3, [r7, #16]
}
 8006842:	bf00      	nop
 8006844:	e7fe      	b.n	8006844 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006846:	4b3e      	ldr	r3, [pc, #248]	; (8006940 <xPortStartScheduler+0x120>)
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	4a3f      	ldr	r2, [pc, #252]	; (8006948 <xPortStartScheduler+0x128>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d10a      	bne.n	8006866 <xPortStartScheduler+0x46>
	__asm volatile
 8006850:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006854:	f383 8811 	msr	BASEPRI, r3
 8006858:	f3bf 8f6f 	isb	sy
 800685c:	f3bf 8f4f 	dsb	sy
 8006860:	60fb      	str	r3, [r7, #12]
}
 8006862:	bf00      	nop
 8006864:	e7fe      	b.n	8006864 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006866:	4b39      	ldr	r3, [pc, #228]	; (800694c <xPortStartScheduler+0x12c>)
 8006868:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800686a:	697b      	ldr	r3, [r7, #20]
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	b2db      	uxtb	r3, r3
 8006870:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	22ff      	movs	r2, #255	; 0xff
 8006876:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006878:	697b      	ldr	r3, [r7, #20]
 800687a:	781b      	ldrb	r3, [r3, #0]
 800687c:	b2db      	uxtb	r3, r3
 800687e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	b2db      	uxtb	r3, r3
 8006884:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006888:	b2da      	uxtb	r2, r3
 800688a:	4b31      	ldr	r3, [pc, #196]	; (8006950 <xPortStartScheduler+0x130>)
 800688c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800688e:	4b31      	ldr	r3, [pc, #196]	; (8006954 <xPortStartScheduler+0x134>)
 8006890:	2207      	movs	r2, #7
 8006892:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006894:	e009      	b.n	80068aa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006896:	4b2f      	ldr	r3, [pc, #188]	; (8006954 <xPortStartScheduler+0x134>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	3b01      	subs	r3, #1
 800689c:	4a2d      	ldr	r2, [pc, #180]	; (8006954 <xPortStartScheduler+0x134>)
 800689e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80068a0:	78fb      	ldrb	r3, [r7, #3]
 80068a2:	b2db      	uxtb	r3, r3
 80068a4:	005b      	lsls	r3, r3, #1
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80068aa:	78fb      	ldrb	r3, [r7, #3]
 80068ac:	b2db      	uxtb	r3, r3
 80068ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80068b2:	2b80      	cmp	r3, #128	; 0x80
 80068b4:	d0ef      	beq.n	8006896 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80068b6:	4b27      	ldr	r3, [pc, #156]	; (8006954 <xPortStartScheduler+0x134>)
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	f1c3 0307 	rsb	r3, r3, #7
 80068be:	2b04      	cmp	r3, #4
 80068c0:	d00a      	beq.n	80068d8 <xPortStartScheduler+0xb8>
	__asm volatile
 80068c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068c6:	f383 8811 	msr	BASEPRI, r3
 80068ca:	f3bf 8f6f 	isb	sy
 80068ce:	f3bf 8f4f 	dsb	sy
 80068d2:	60bb      	str	r3, [r7, #8]
}
 80068d4:	bf00      	nop
 80068d6:	e7fe      	b.n	80068d6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80068d8:	4b1e      	ldr	r3, [pc, #120]	; (8006954 <xPortStartScheduler+0x134>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	021b      	lsls	r3, r3, #8
 80068de:	4a1d      	ldr	r2, [pc, #116]	; (8006954 <xPortStartScheduler+0x134>)
 80068e0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80068e2:	4b1c      	ldr	r3, [pc, #112]	; (8006954 <xPortStartScheduler+0x134>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80068ea:	4a1a      	ldr	r2, [pc, #104]	; (8006954 <xPortStartScheduler+0x134>)
 80068ec:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	b2da      	uxtb	r2, r3
 80068f2:	697b      	ldr	r3, [r7, #20]
 80068f4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80068f6:	4b18      	ldr	r3, [pc, #96]	; (8006958 <xPortStartScheduler+0x138>)
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	4a17      	ldr	r2, [pc, #92]	; (8006958 <xPortStartScheduler+0x138>)
 80068fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006900:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006902:	4b15      	ldr	r3, [pc, #84]	; (8006958 <xPortStartScheduler+0x138>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	4a14      	ldr	r2, [pc, #80]	; (8006958 <xPortStartScheduler+0x138>)
 8006908:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800690c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800690e:	f000 f8dd 	bl	8006acc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006912:	4b12      	ldr	r3, [pc, #72]	; (800695c <xPortStartScheduler+0x13c>)
 8006914:	2200      	movs	r2, #0
 8006916:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006918:	f000 f8fc 	bl	8006b14 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800691c:	4b10      	ldr	r3, [pc, #64]	; (8006960 <xPortStartScheduler+0x140>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a0f      	ldr	r2, [pc, #60]	; (8006960 <xPortStartScheduler+0x140>)
 8006922:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006926:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006928:	f7ff ff66 	bl	80067f8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800692c:	f7fe ff3a 	bl	80057a4 <vTaskSwitchContext>
	prvTaskExitError();
 8006930:	f7ff ff1e 	bl	8006770 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006934:	2300      	movs	r3, #0
}
 8006936:	4618      	mov	r0, r3
 8006938:	3718      	adds	r7, #24
 800693a:	46bd      	mov	sp, r7
 800693c:	bd80      	pop	{r7, pc}
 800693e:	bf00      	nop
 8006940:	e000ed00 	.word	0xe000ed00
 8006944:	410fc271 	.word	0x410fc271
 8006948:	410fc270 	.word	0x410fc270
 800694c:	e000e400 	.word	0xe000e400
 8006950:	20000cb4 	.word	0x20000cb4
 8006954:	20000cb8 	.word	0x20000cb8
 8006958:	e000ed20 	.word	0xe000ed20
 800695c:	2000000c 	.word	0x2000000c
 8006960:	e000ef34 	.word	0xe000ef34

08006964 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8006964:	b480      	push	{r7}
 8006966:	b083      	sub	sp, #12
 8006968:	af00      	add	r7, sp, #0
	__asm volatile
 800696a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800696e:	f383 8811 	msr	BASEPRI, r3
 8006972:	f3bf 8f6f 	isb	sy
 8006976:	f3bf 8f4f 	dsb	sy
 800697a:	607b      	str	r3, [r7, #4]
}
 800697c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800697e:	4b0f      	ldr	r3, [pc, #60]	; (80069bc <vPortEnterCritical+0x58>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	3301      	adds	r3, #1
 8006984:	4a0d      	ldr	r2, [pc, #52]	; (80069bc <vPortEnterCritical+0x58>)
 8006986:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8006988:	4b0c      	ldr	r3, [pc, #48]	; (80069bc <vPortEnterCritical+0x58>)
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2b01      	cmp	r3, #1
 800698e:	d10f      	bne.n	80069b0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8006990:	4b0b      	ldr	r3, [pc, #44]	; (80069c0 <vPortEnterCritical+0x5c>)
 8006992:	681b      	ldr	r3, [r3, #0]
 8006994:	b2db      	uxtb	r3, r3
 8006996:	2b00      	cmp	r3, #0
 8006998:	d00a      	beq.n	80069b0 <vPortEnterCritical+0x4c>
	__asm volatile
 800699a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800699e:	f383 8811 	msr	BASEPRI, r3
 80069a2:	f3bf 8f6f 	isb	sy
 80069a6:	f3bf 8f4f 	dsb	sy
 80069aa:	603b      	str	r3, [r7, #0]
}
 80069ac:	bf00      	nop
 80069ae:	e7fe      	b.n	80069ae <vPortEnterCritical+0x4a>
	}
}
 80069b0:	bf00      	nop
 80069b2:	370c      	adds	r7, #12
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr
 80069bc:	2000000c 	.word	0x2000000c
 80069c0:	e000ed04 	.word	0xe000ed04

080069c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80069c4:	b480      	push	{r7}
 80069c6:	b083      	sub	sp, #12
 80069c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80069ca:	4b12      	ldr	r3, [pc, #72]	; (8006a14 <vPortExitCritical+0x50>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b00      	cmp	r3, #0
 80069d0:	d10a      	bne.n	80069e8 <vPortExitCritical+0x24>
	__asm volatile
 80069d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80069d6:	f383 8811 	msr	BASEPRI, r3
 80069da:	f3bf 8f6f 	isb	sy
 80069de:	f3bf 8f4f 	dsb	sy
 80069e2:	607b      	str	r3, [r7, #4]
}
 80069e4:	bf00      	nop
 80069e6:	e7fe      	b.n	80069e6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80069e8:	4b0a      	ldr	r3, [pc, #40]	; (8006a14 <vPortExitCritical+0x50>)
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	3b01      	subs	r3, #1
 80069ee:	4a09      	ldr	r2, [pc, #36]	; (8006a14 <vPortExitCritical+0x50>)
 80069f0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80069f2:	4b08      	ldr	r3, [pc, #32]	; (8006a14 <vPortExitCritical+0x50>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d105      	bne.n	8006a06 <vPortExitCritical+0x42>
 80069fa:	2300      	movs	r3, #0
 80069fc:	603b      	str	r3, [r7, #0]
	__asm volatile
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	f383 8811 	msr	BASEPRI, r3
}
 8006a04:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8006a06:	bf00      	nop
 8006a08:	370c      	adds	r7, #12
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a10:	4770      	bx	lr
 8006a12:	bf00      	nop
 8006a14:	2000000c 	.word	0x2000000c
	...

08006a20 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8006a20:	f3ef 8009 	mrs	r0, PSP
 8006a24:	f3bf 8f6f 	isb	sy
 8006a28:	4b15      	ldr	r3, [pc, #84]	; (8006a80 <pxCurrentTCBConst>)
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	f01e 0f10 	tst.w	lr, #16
 8006a30:	bf08      	it	eq
 8006a32:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8006a36:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a3a:	6010      	str	r0, [r2, #0]
 8006a3c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8006a40:	f04f 0050 	mov.w	r0, #80	; 0x50
 8006a44:	f380 8811 	msr	BASEPRI, r0
 8006a48:	f3bf 8f4f 	dsb	sy
 8006a4c:	f3bf 8f6f 	isb	sy
 8006a50:	f7fe fea8 	bl	80057a4 <vTaskSwitchContext>
 8006a54:	f04f 0000 	mov.w	r0, #0
 8006a58:	f380 8811 	msr	BASEPRI, r0
 8006a5c:	bc09      	pop	{r0, r3}
 8006a5e:	6819      	ldr	r1, [r3, #0]
 8006a60:	6808      	ldr	r0, [r1, #0]
 8006a62:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a66:	f01e 0f10 	tst.w	lr, #16
 8006a6a:	bf08      	it	eq
 8006a6c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8006a70:	f380 8809 	msr	PSP, r0
 8006a74:	f3bf 8f6f 	isb	sy
 8006a78:	4770      	bx	lr
 8006a7a:	bf00      	nop
 8006a7c:	f3af 8000 	nop.w

08006a80 <pxCurrentTCBConst>:
 8006a80:	20000688 	.word	0x20000688
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8006a84:	bf00      	nop
 8006a86:	bf00      	nop

08006a88 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8006a88:	b580      	push	{r7, lr}
 8006a8a:	b082      	sub	sp, #8
 8006a8c:	af00      	add	r7, sp, #0
	__asm volatile
 8006a8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a92:	f383 8811 	msr	BASEPRI, r3
 8006a96:	f3bf 8f6f 	isb	sy
 8006a9a:	f3bf 8f4f 	dsb	sy
 8006a9e:	607b      	str	r3, [r7, #4]
}
 8006aa0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8006aa2:	f7fe fdc5 	bl	8005630 <xTaskIncrementTick>
 8006aa6:	4603      	mov	r3, r0
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d003      	beq.n	8006ab4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8006aac:	4b06      	ldr	r3, [pc, #24]	; (8006ac8 <xPortSysTickHandler+0x40>)
 8006aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab2:	601a      	str	r2, [r3, #0]
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	f383 8811 	msr	BASEPRI, r3
}
 8006abe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8006ac0:	bf00      	nop
 8006ac2:	3708      	adds	r7, #8
 8006ac4:	46bd      	mov	sp, r7
 8006ac6:	bd80      	pop	{r7, pc}
 8006ac8:	e000ed04 	.word	0xe000ed04

08006acc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8006acc:	b480      	push	{r7}
 8006ace:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8006ad0:	4b0b      	ldr	r3, [pc, #44]	; (8006b00 <vPortSetupTimerInterrupt+0x34>)
 8006ad2:	2200      	movs	r2, #0
 8006ad4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8006ad6:	4b0b      	ldr	r3, [pc, #44]	; (8006b04 <vPortSetupTimerInterrupt+0x38>)
 8006ad8:	2200      	movs	r2, #0
 8006ada:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8006adc:	4b0a      	ldr	r3, [pc, #40]	; (8006b08 <vPortSetupTimerInterrupt+0x3c>)
 8006ade:	681b      	ldr	r3, [r3, #0]
 8006ae0:	4a0a      	ldr	r2, [pc, #40]	; (8006b0c <vPortSetupTimerInterrupt+0x40>)
 8006ae2:	fba2 2303 	umull	r2, r3, r2, r3
 8006ae6:	099b      	lsrs	r3, r3, #6
 8006ae8:	4a09      	ldr	r2, [pc, #36]	; (8006b10 <vPortSetupTimerInterrupt+0x44>)
 8006aea:	3b01      	subs	r3, #1
 8006aec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8006aee:	4b04      	ldr	r3, [pc, #16]	; (8006b00 <vPortSetupTimerInterrupt+0x34>)
 8006af0:	2207      	movs	r2, #7
 8006af2:	601a      	str	r2, [r3, #0]
}
 8006af4:	bf00      	nop
 8006af6:	46bd      	mov	sp, r7
 8006af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop
 8006b00:	e000e010 	.word	0xe000e010
 8006b04:	e000e018 	.word	0xe000e018
 8006b08:	20000000 	.word	0x20000000
 8006b0c:	10624dd3 	.word	0x10624dd3
 8006b10:	e000e014 	.word	0xe000e014

08006b14 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8006b14:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8006b24 <vPortEnableVFP+0x10>
 8006b18:	6801      	ldr	r1, [r0, #0]
 8006b1a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006b1e:	6001      	str	r1, [r0, #0]
 8006b20:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8006b22:	bf00      	nop
 8006b24:	e000ed88 	.word	0xe000ed88

08006b28 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8006b28:	b480      	push	{r7}
 8006b2a:	b085      	sub	sp, #20
 8006b2c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8006b2e:	f3ef 8305 	mrs	r3, IPSR
 8006b32:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2b0f      	cmp	r3, #15
 8006b38:	d914      	bls.n	8006b64 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8006b3a:	4a17      	ldr	r2, [pc, #92]	; (8006b98 <vPortValidateInterruptPriority+0x70>)
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	4413      	add	r3, r2
 8006b40:	781b      	ldrb	r3, [r3, #0]
 8006b42:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006b44:	4b15      	ldr	r3, [pc, #84]	; (8006b9c <vPortValidateInterruptPriority+0x74>)
 8006b46:	781b      	ldrb	r3, [r3, #0]
 8006b48:	7afa      	ldrb	r2, [r7, #11]
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d20a      	bcs.n	8006b64 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	607b      	str	r3, [r7, #4]
}
 8006b60:	bf00      	nop
 8006b62:	e7fe      	b.n	8006b62 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006b64:	4b0e      	ldr	r3, [pc, #56]	; (8006ba0 <vPortValidateInterruptPriority+0x78>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8006b6c:	4b0d      	ldr	r3, [pc, #52]	; (8006ba4 <vPortValidateInterruptPriority+0x7c>)
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d90a      	bls.n	8006b8a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b78:	f383 8811 	msr	BASEPRI, r3
 8006b7c:	f3bf 8f6f 	isb	sy
 8006b80:	f3bf 8f4f 	dsb	sy
 8006b84:	603b      	str	r3, [r7, #0]
}
 8006b86:	bf00      	nop
 8006b88:	e7fe      	b.n	8006b88 <vPortValidateInterruptPriority+0x60>
	}
 8006b8a:	bf00      	nop
 8006b8c:	3714      	adds	r7, #20
 8006b8e:	46bd      	mov	sp, r7
 8006b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b94:	4770      	bx	lr
 8006b96:	bf00      	nop
 8006b98:	e000e3f0 	.word	0xe000e3f0
 8006b9c:	20000cb4 	.word	0x20000cb4
 8006ba0:	e000ed0c 	.word	0xe000ed0c
 8006ba4:	20000cb8 	.word	0x20000cb8

08006ba8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006ba8:	b580      	push	{r7, lr}
 8006baa:	b08a      	sub	sp, #40	; 0x28
 8006bac:	af00      	add	r7, sp, #0
 8006bae:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006bb0:	2300      	movs	r3, #0
 8006bb2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006bb4:	f7fe fc80 	bl	80054b8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006bb8:	4b5b      	ldr	r3, [pc, #364]	; (8006d28 <pvPortMalloc+0x180>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d101      	bne.n	8006bc4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006bc0:	f000 f920 	bl	8006e04 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006bc4:	4b59      	ldr	r3, [pc, #356]	; (8006d2c <pvPortMalloc+0x184>)
 8006bc6:	681a      	ldr	r2, [r3, #0]
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	4013      	ands	r3, r2
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	f040 8093 	bne.w	8006cf8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d01d      	beq.n	8006c14 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006bd8:	2208      	movs	r2, #8
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4413      	add	r3, r2
 8006bde:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	f003 0307 	and.w	r3, r3, #7
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d014      	beq.n	8006c14 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	f023 0307 	bic.w	r3, r3, #7
 8006bf0:	3308      	adds	r3, #8
 8006bf2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f003 0307 	and.w	r3, r3, #7
 8006bfa:	2b00      	cmp	r3, #0
 8006bfc:	d00a      	beq.n	8006c14 <pvPortMalloc+0x6c>
	__asm volatile
 8006bfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c02:	f383 8811 	msr	BASEPRI, r3
 8006c06:	f3bf 8f6f 	isb	sy
 8006c0a:	f3bf 8f4f 	dsb	sy
 8006c0e:	617b      	str	r3, [r7, #20]
}
 8006c10:	bf00      	nop
 8006c12:	e7fe      	b.n	8006c12 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d06e      	beq.n	8006cf8 <pvPortMalloc+0x150>
 8006c1a:	4b45      	ldr	r3, [pc, #276]	; (8006d30 <pvPortMalloc+0x188>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	687a      	ldr	r2, [r7, #4]
 8006c20:	429a      	cmp	r2, r3
 8006c22:	d869      	bhi.n	8006cf8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8006c24:	4b43      	ldr	r3, [pc, #268]	; (8006d34 <pvPortMalloc+0x18c>)
 8006c26:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8006c28:	4b42      	ldr	r3, [pc, #264]	; (8006d34 <pvPortMalloc+0x18c>)
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c2e:	e004      	b.n	8006c3a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8006c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c32:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8006c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8006c3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c3c:	685b      	ldr	r3, [r3, #4]
 8006c3e:	687a      	ldr	r2, [r7, #4]
 8006c40:	429a      	cmp	r2, r3
 8006c42:	d903      	bls.n	8006c4c <pvPortMalloc+0xa4>
 8006c44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d1f1      	bne.n	8006c30 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8006c4c:	4b36      	ldr	r3, [pc, #216]	; (8006d28 <pvPortMalloc+0x180>)
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c52:	429a      	cmp	r2, r3
 8006c54:	d050      	beq.n	8006cf8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006c56:	6a3b      	ldr	r3, [r7, #32]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	2208      	movs	r2, #8
 8006c5c:	4413      	add	r3, r2
 8006c5e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006c60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c62:	681a      	ldr	r2, [r3, #0]
 8006c64:	6a3b      	ldr	r3, [r7, #32]
 8006c66:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006c68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c6a:	685a      	ldr	r2, [r3, #4]
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	1ad2      	subs	r2, r2, r3
 8006c70:	2308      	movs	r3, #8
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	429a      	cmp	r2, r3
 8006c76:	d91f      	bls.n	8006cb8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006c78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	4413      	add	r3, r2
 8006c7e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006c80:	69bb      	ldr	r3, [r7, #24]
 8006c82:	f003 0307 	and.w	r3, r3, #7
 8006c86:	2b00      	cmp	r3, #0
 8006c88:	d00a      	beq.n	8006ca0 <pvPortMalloc+0xf8>
	__asm volatile
 8006c8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c8e:	f383 8811 	msr	BASEPRI, r3
 8006c92:	f3bf 8f6f 	isb	sy
 8006c96:	f3bf 8f4f 	dsb	sy
 8006c9a:	613b      	str	r3, [r7, #16]
}
 8006c9c:	bf00      	nop
 8006c9e:	e7fe      	b.n	8006c9e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006ca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ca2:	685a      	ldr	r2, [r3, #4]
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	1ad2      	subs	r2, r2, r3
 8006ca8:	69bb      	ldr	r3, [r7, #24]
 8006caa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8006cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cae:	687a      	ldr	r2, [r7, #4]
 8006cb0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006cb2:	69b8      	ldr	r0, [r7, #24]
 8006cb4:	f000 f908 	bl	8006ec8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006cb8:	4b1d      	ldr	r3, [pc, #116]	; (8006d30 <pvPortMalloc+0x188>)
 8006cba:	681a      	ldr	r2, [r3, #0]
 8006cbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cbe:	685b      	ldr	r3, [r3, #4]
 8006cc0:	1ad3      	subs	r3, r2, r3
 8006cc2:	4a1b      	ldr	r2, [pc, #108]	; (8006d30 <pvPortMalloc+0x188>)
 8006cc4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006cc6:	4b1a      	ldr	r3, [pc, #104]	; (8006d30 <pvPortMalloc+0x188>)
 8006cc8:	681a      	ldr	r2, [r3, #0]
 8006cca:	4b1b      	ldr	r3, [pc, #108]	; (8006d38 <pvPortMalloc+0x190>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	429a      	cmp	r2, r3
 8006cd0:	d203      	bcs.n	8006cda <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006cd2:	4b17      	ldr	r3, [pc, #92]	; (8006d30 <pvPortMalloc+0x188>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	4a18      	ldr	r2, [pc, #96]	; (8006d38 <pvPortMalloc+0x190>)
 8006cd8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cdc:	685a      	ldr	r2, [r3, #4]
 8006cde:	4b13      	ldr	r3, [pc, #76]	; (8006d2c <pvPortMalloc+0x184>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	431a      	orrs	r2, r3
 8006ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ce6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8006ce8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cea:	2200      	movs	r2, #0
 8006cec:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8006cee:	4b13      	ldr	r3, [pc, #76]	; (8006d3c <pvPortMalloc+0x194>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	3301      	adds	r3, #1
 8006cf4:	4a11      	ldr	r2, [pc, #68]	; (8006d3c <pvPortMalloc+0x194>)
 8006cf6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006cf8:	f7fe fbec 	bl	80054d4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8006cfc:	69fb      	ldr	r3, [r7, #28]
 8006cfe:	f003 0307 	and.w	r3, r3, #7
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d00a      	beq.n	8006d1c <pvPortMalloc+0x174>
	__asm volatile
 8006d06:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d0a:	f383 8811 	msr	BASEPRI, r3
 8006d0e:	f3bf 8f6f 	isb	sy
 8006d12:	f3bf 8f4f 	dsb	sy
 8006d16:	60fb      	str	r3, [r7, #12]
}
 8006d18:	bf00      	nop
 8006d1a:	e7fe      	b.n	8006d1a <pvPortMalloc+0x172>
	return pvReturn;
 8006d1c:	69fb      	ldr	r3, [r7, #28]
}
 8006d1e:	4618      	mov	r0, r3
 8006d20:	3728      	adds	r7, #40	; 0x28
 8006d22:	46bd      	mov	sp, r7
 8006d24:	bd80      	pop	{r7, pc}
 8006d26:	bf00      	nop
 8006d28:	200089c4 	.word	0x200089c4
 8006d2c:	200089d8 	.word	0x200089d8
 8006d30:	200089c8 	.word	0x200089c8
 8006d34:	200089bc 	.word	0x200089bc
 8006d38:	200089cc 	.word	0x200089cc
 8006d3c:	200089d0 	.word	0x200089d0

08006d40 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b086      	sub	sp, #24
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	2b00      	cmp	r3, #0
 8006d50:	d04d      	beq.n	8006dee <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006d52:	2308      	movs	r3, #8
 8006d54:	425b      	negs	r3, r3
 8006d56:	697a      	ldr	r2, [r7, #20]
 8006d58:	4413      	add	r3, r2
 8006d5a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006d60:	693b      	ldr	r3, [r7, #16]
 8006d62:	685a      	ldr	r2, [r3, #4]
 8006d64:	4b24      	ldr	r3, [pc, #144]	; (8006df8 <vPortFree+0xb8>)
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4013      	ands	r3, r2
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d10a      	bne.n	8006d84 <vPortFree+0x44>
	__asm volatile
 8006d6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d72:	f383 8811 	msr	BASEPRI, r3
 8006d76:	f3bf 8f6f 	isb	sy
 8006d7a:	f3bf 8f4f 	dsb	sy
 8006d7e:	60fb      	str	r3, [r7, #12]
}
 8006d80:	bf00      	nop
 8006d82:	e7fe      	b.n	8006d82 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006d84:	693b      	ldr	r3, [r7, #16]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d00a      	beq.n	8006da2 <vPortFree+0x62>
	__asm volatile
 8006d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d90:	f383 8811 	msr	BASEPRI, r3
 8006d94:	f3bf 8f6f 	isb	sy
 8006d98:	f3bf 8f4f 	dsb	sy
 8006d9c:	60bb      	str	r3, [r7, #8]
}
 8006d9e:	bf00      	nop
 8006da0:	e7fe      	b.n	8006da0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	685a      	ldr	r2, [r3, #4]
 8006da6:	4b14      	ldr	r3, [pc, #80]	; (8006df8 <vPortFree+0xb8>)
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	4013      	ands	r3, r2
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d01e      	beq.n	8006dee <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d11a      	bne.n	8006dee <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006db8:	693b      	ldr	r3, [r7, #16]
 8006dba:	685a      	ldr	r2, [r3, #4]
 8006dbc:	4b0e      	ldr	r3, [pc, #56]	; (8006df8 <vPortFree+0xb8>)
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	43db      	mvns	r3, r3
 8006dc2:	401a      	ands	r2, r3
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006dc8:	f7fe fb76 	bl	80054b8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8006dcc:	693b      	ldr	r3, [r7, #16]
 8006dce:	685a      	ldr	r2, [r3, #4]
 8006dd0:	4b0a      	ldr	r3, [pc, #40]	; (8006dfc <vPortFree+0xbc>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	4413      	add	r3, r2
 8006dd6:	4a09      	ldr	r2, [pc, #36]	; (8006dfc <vPortFree+0xbc>)
 8006dd8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8006dda:	6938      	ldr	r0, [r7, #16]
 8006ddc:	f000 f874 	bl	8006ec8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8006de0:	4b07      	ldr	r3, [pc, #28]	; (8006e00 <vPortFree+0xc0>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	3301      	adds	r3, #1
 8006de6:	4a06      	ldr	r2, [pc, #24]	; (8006e00 <vPortFree+0xc0>)
 8006de8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8006dea:	f7fe fb73 	bl	80054d4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8006dee:	bf00      	nop
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	200089d8 	.word	0x200089d8
 8006dfc:	200089c8 	.word	0x200089c8
 8006e00:	200089d4 	.word	0x200089d4

08006e04 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006e04:	b480      	push	{r7}
 8006e06:	b085      	sub	sp, #20
 8006e08:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8006e0a:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8006e0e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006e10:	4b27      	ldr	r3, [pc, #156]	; (8006eb0 <prvHeapInit+0xac>)
 8006e12:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	f003 0307 	and.w	r3, r3, #7
 8006e1a:	2b00      	cmp	r3, #0
 8006e1c:	d00c      	beq.n	8006e38 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	3307      	adds	r3, #7
 8006e22:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	f023 0307 	bic.w	r3, r3, #7
 8006e2a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	1ad3      	subs	r3, r2, r3
 8006e32:	4a1f      	ldr	r2, [pc, #124]	; (8006eb0 <prvHeapInit+0xac>)
 8006e34:	4413      	add	r3, r2
 8006e36:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8006e3c:	4a1d      	ldr	r2, [pc, #116]	; (8006eb4 <prvHeapInit+0xb0>)
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006e42:	4b1c      	ldr	r3, [pc, #112]	; (8006eb4 <prvHeapInit+0xb0>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	68ba      	ldr	r2, [r7, #8]
 8006e4c:	4413      	add	r3, r2
 8006e4e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006e50:	2208      	movs	r2, #8
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	1a9b      	subs	r3, r3, r2
 8006e56:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	f023 0307 	bic.w	r3, r3, #7
 8006e5e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	4a15      	ldr	r2, [pc, #84]	; (8006eb8 <prvHeapInit+0xb4>)
 8006e64:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006e66:	4b14      	ldr	r3, [pc, #80]	; (8006eb8 <prvHeapInit+0xb4>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8006e6e:	4b12      	ldr	r3, [pc, #72]	; (8006eb8 <prvHeapInit+0xb4>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	2200      	movs	r2, #0
 8006e74:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8006e7a:	683b      	ldr	r3, [r7, #0]
 8006e7c:	68fa      	ldr	r2, [r7, #12]
 8006e7e:	1ad2      	subs	r2, r2, r3
 8006e80:	683b      	ldr	r3, [r7, #0]
 8006e82:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006e84:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <prvHeapInit+0xb4>)
 8006e86:	681a      	ldr	r2, [r3, #0]
 8006e88:	683b      	ldr	r3, [r7, #0]
 8006e8a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e8c:	683b      	ldr	r3, [r7, #0]
 8006e8e:	685b      	ldr	r3, [r3, #4]
 8006e90:	4a0a      	ldr	r2, [pc, #40]	; (8006ebc <prvHeapInit+0xb8>)
 8006e92:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	685b      	ldr	r3, [r3, #4]
 8006e98:	4a09      	ldr	r2, [pc, #36]	; (8006ec0 <prvHeapInit+0xbc>)
 8006e9a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8006e9c:	4b09      	ldr	r3, [pc, #36]	; (8006ec4 <prvHeapInit+0xc0>)
 8006e9e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006ea2:	601a      	str	r2, [r3, #0]
}
 8006ea4:	bf00      	nop
 8006ea6:	3714      	adds	r7, #20
 8006ea8:	46bd      	mov	sp, r7
 8006eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eae:	4770      	bx	lr
 8006eb0:	20000cbc 	.word	0x20000cbc
 8006eb4:	200089bc 	.word	0x200089bc
 8006eb8:	200089c4 	.word	0x200089c4
 8006ebc:	200089cc 	.word	0x200089cc
 8006ec0:	200089c8 	.word	0x200089c8
 8006ec4:	200089d8 	.word	0x200089d8

08006ec8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006ec8:	b480      	push	{r7}
 8006eca:	b085      	sub	sp, #20
 8006ecc:	af00      	add	r7, sp, #0
 8006ece:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006ed0:	4b28      	ldr	r3, [pc, #160]	; (8006f74 <prvInsertBlockIntoFreeList+0xac>)
 8006ed2:	60fb      	str	r3, [r7, #12]
 8006ed4:	e002      	b.n	8006edc <prvInsertBlockIntoFreeList+0x14>
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	60fb      	str	r3, [r7, #12]
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	681b      	ldr	r3, [r3, #0]
 8006ee0:	687a      	ldr	r2, [r7, #4]
 8006ee2:	429a      	cmp	r2, r3
 8006ee4:	d8f7      	bhi.n	8006ed6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	68ba      	ldr	r2, [r7, #8]
 8006ef0:	4413      	add	r3, r2
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	429a      	cmp	r2, r3
 8006ef6:	d108      	bne.n	8006f0a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	685a      	ldr	r2, [r3, #4]
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	685b      	ldr	r3, [r3, #4]
 8006f00:	441a      	add	r2, r3
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	685b      	ldr	r3, [r3, #4]
 8006f12:	68ba      	ldr	r2, [r7, #8]
 8006f14:	441a      	add	r2, r3
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	d118      	bne.n	8006f50 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8006f1e:	68fb      	ldr	r3, [r7, #12]
 8006f20:	681a      	ldr	r2, [r3, #0]
 8006f22:	4b15      	ldr	r3, [pc, #84]	; (8006f78 <prvInsertBlockIntoFreeList+0xb0>)
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	429a      	cmp	r2, r3
 8006f28:	d00d      	beq.n	8006f46 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	685a      	ldr	r2, [r3, #4]
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	441a      	add	r2, r3
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	681a      	ldr	r2, [r3, #0]
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	601a      	str	r2, [r3, #0]
 8006f44:	e008      	b.n	8006f58 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006f46:	4b0c      	ldr	r3, [pc, #48]	; (8006f78 <prvInsertBlockIntoFreeList+0xb0>)
 8006f48:	681a      	ldr	r2, [r3, #0]
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	601a      	str	r2, [r3, #0]
 8006f4e:	e003      	b.n	8006f58 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006f58:	68fa      	ldr	r2, [r7, #12]
 8006f5a:	687b      	ldr	r3, [r7, #4]
 8006f5c:	429a      	cmp	r2, r3
 8006f5e:	d002      	beq.n	8006f66 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	687a      	ldr	r2, [r7, #4]
 8006f64:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006f66:	bf00      	nop
 8006f68:	3714      	adds	r7, #20
 8006f6a:	46bd      	mov	sp, r7
 8006f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f70:	4770      	bx	lr
 8006f72:	bf00      	nop
 8006f74:	200089bc 	.word	0x200089bc
 8006f78:	200089c4 	.word	0x200089c4

08006f7c <__errno>:
 8006f7c:	4b01      	ldr	r3, [pc, #4]	; (8006f84 <__errno+0x8>)
 8006f7e:	6818      	ldr	r0, [r3, #0]
 8006f80:	4770      	bx	lr
 8006f82:	bf00      	nop
 8006f84:	20000010 	.word	0x20000010

08006f88 <std>:
 8006f88:	2300      	movs	r3, #0
 8006f8a:	b510      	push	{r4, lr}
 8006f8c:	4604      	mov	r4, r0
 8006f8e:	e9c0 3300 	strd	r3, r3, [r0]
 8006f92:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006f96:	6083      	str	r3, [r0, #8]
 8006f98:	8181      	strh	r1, [r0, #12]
 8006f9a:	6643      	str	r3, [r0, #100]	; 0x64
 8006f9c:	81c2      	strh	r2, [r0, #14]
 8006f9e:	6183      	str	r3, [r0, #24]
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	2208      	movs	r2, #8
 8006fa4:	305c      	adds	r0, #92	; 0x5c
 8006fa6:	f000 f91a 	bl	80071de <memset>
 8006faa:	4b05      	ldr	r3, [pc, #20]	; (8006fc0 <std+0x38>)
 8006fac:	6263      	str	r3, [r4, #36]	; 0x24
 8006fae:	4b05      	ldr	r3, [pc, #20]	; (8006fc4 <std+0x3c>)
 8006fb0:	62a3      	str	r3, [r4, #40]	; 0x28
 8006fb2:	4b05      	ldr	r3, [pc, #20]	; (8006fc8 <std+0x40>)
 8006fb4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006fb6:	4b05      	ldr	r3, [pc, #20]	; (8006fcc <std+0x44>)
 8006fb8:	6224      	str	r4, [r4, #32]
 8006fba:	6323      	str	r3, [r4, #48]	; 0x30
 8006fbc:	bd10      	pop	{r4, pc}
 8006fbe:	bf00      	nop
 8006fc0:	08007525 	.word	0x08007525
 8006fc4:	08007547 	.word	0x08007547
 8006fc8:	0800757f 	.word	0x0800757f
 8006fcc:	080075a3 	.word	0x080075a3

08006fd0 <_cleanup_r>:
 8006fd0:	4901      	ldr	r1, [pc, #4]	; (8006fd8 <_cleanup_r+0x8>)
 8006fd2:	f000 b8af 	b.w	8007134 <_fwalk_reent>
 8006fd6:	bf00      	nop
 8006fd8:	08007739 	.word	0x08007739

08006fdc <__sfmoreglue>:
 8006fdc:	b570      	push	{r4, r5, r6, lr}
 8006fde:	2268      	movs	r2, #104	; 0x68
 8006fe0:	1e4d      	subs	r5, r1, #1
 8006fe2:	4355      	muls	r5, r2
 8006fe4:	460e      	mov	r6, r1
 8006fe6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006fea:	f000 f921 	bl	8007230 <_malloc_r>
 8006fee:	4604      	mov	r4, r0
 8006ff0:	b140      	cbz	r0, 8007004 <__sfmoreglue+0x28>
 8006ff2:	2100      	movs	r1, #0
 8006ff4:	e9c0 1600 	strd	r1, r6, [r0]
 8006ff8:	300c      	adds	r0, #12
 8006ffa:	60a0      	str	r0, [r4, #8]
 8006ffc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007000:	f000 f8ed 	bl	80071de <memset>
 8007004:	4620      	mov	r0, r4
 8007006:	bd70      	pop	{r4, r5, r6, pc}

08007008 <__sfp_lock_acquire>:
 8007008:	4801      	ldr	r0, [pc, #4]	; (8007010 <__sfp_lock_acquire+0x8>)
 800700a:	f000 b8d8 	b.w	80071be <__retarget_lock_acquire_recursive>
 800700e:	bf00      	nop
 8007010:	200089dd 	.word	0x200089dd

08007014 <__sfp_lock_release>:
 8007014:	4801      	ldr	r0, [pc, #4]	; (800701c <__sfp_lock_release+0x8>)
 8007016:	f000 b8d3 	b.w	80071c0 <__retarget_lock_release_recursive>
 800701a:	bf00      	nop
 800701c:	200089dd 	.word	0x200089dd

08007020 <__sinit_lock_acquire>:
 8007020:	4801      	ldr	r0, [pc, #4]	; (8007028 <__sinit_lock_acquire+0x8>)
 8007022:	f000 b8cc 	b.w	80071be <__retarget_lock_acquire_recursive>
 8007026:	bf00      	nop
 8007028:	200089de 	.word	0x200089de

0800702c <__sinit_lock_release>:
 800702c:	4801      	ldr	r0, [pc, #4]	; (8007034 <__sinit_lock_release+0x8>)
 800702e:	f000 b8c7 	b.w	80071c0 <__retarget_lock_release_recursive>
 8007032:	bf00      	nop
 8007034:	200089de 	.word	0x200089de

08007038 <__sinit>:
 8007038:	b510      	push	{r4, lr}
 800703a:	4604      	mov	r4, r0
 800703c:	f7ff fff0 	bl	8007020 <__sinit_lock_acquire>
 8007040:	69a3      	ldr	r3, [r4, #24]
 8007042:	b11b      	cbz	r3, 800704c <__sinit+0x14>
 8007044:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007048:	f7ff bff0 	b.w	800702c <__sinit_lock_release>
 800704c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007050:	6523      	str	r3, [r4, #80]	; 0x50
 8007052:	4b13      	ldr	r3, [pc, #76]	; (80070a0 <__sinit+0x68>)
 8007054:	4a13      	ldr	r2, [pc, #76]	; (80070a4 <__sinit+0x6c>)
 8007056:	681b      	ldr	r3, [r3, #0]
 8007058:	62a2      	str	r2, [r4, #40]	; 0x28
 800705a:	42a3      	cmp	r3, r4
 800705c:	bf04      	itt	eq
 800705e:	2301      	moveq	r3, #1
 8007060:	61a3      	streq	r3, [r4, #24]
 8007062:	4620      	mov	r0, r4
 8007064:	f000 f820 	bl	80070a8 <__sfp>
 8007068:	6060      	str	r0, [r4, #4]
 800706a:	4620      	mov	r0, r4
 800706c:	f000 f81c 	bl	80070a8 <__sfp>
 8007070:	60a0      	str	r0, [r4, #8]
 8007072:	4620      	mov	r0, r4
 8007074:	f000 f818 	bl	80070a8 <__sfp>
 8007078:	2200      	movs	r2, #0
 800707a:	60e0      	str	r0, [r4, #12]
 800707c:	2104      	movs	r1, #4
 800707e:	6860      	ldr	r0, [r4, #4]
 8007080:	f7ff ff82 	bl	8006f88 <std>
 8007084:	68a0      	ldr	r0, [r4, #8]
 8007086:	2201      	movs	r2, #1
 8007088:	2109      	movs	r1, #9
 800708a:	f7ff ff7d 	bl	8006f88 <std>
 800708e:	68e0      	ldr	r0, [r4, #12]
 8007090:	2202      	movs	r2, #2
 8007092:	2112      	movs	r1, #18
 8007094:	f7ff ff78 	bl	8006f88 <std>
 8007098:	2301      	movs	r3, #1
 800709a:	61a3      	str	r3, [r4, #24]
 800709c:	e7d2      	b.n	8007044 <__sinit+0xc>
 800709e:	bf00      	nop
 80070a0:	08008698 	.word	0x08008698
 80070a4:	08006fd1 	.word	0x08006fd1

080070a8 <__sfp>:
 80070a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070aa:	4607      	mov	r7, r0
 80070ac:	f7ff ffac 	bl	8007008 <__sfp_lock_acquire>
 80070b0:	4b1e      	ldr	r3, [pc, #120]	; (800712c <__sfp+0x84>)
 80070b2:	681e      	ldr	r6, [r3, #0]
 80070b4:	69b3      	ldr	r3, [r6, #24]
 80070b6:	b913      	cbnz	r3, 80070be <__sfp+0x16>
 80070b8:	4630      	mov	r0, r6
 80070ba:	f7ff ffbd 	bl	8007038 <__sinit>
 80070be:	3648      	adds	r6, #72	; 0x48
 80070c0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80070c4:	3b01      	subs	r3, #1
 80070c6:	d503      	bpl.n	80070d0 <__sfp+0x28>
 80070c8:	6833      	ldr	r3, [r6, #0]
 80070ca:	b30b      	cbz	r3, 8007110 <__sfp+0x68>
 80070cc:	6836      	ldr	r6, [r6, #0]
 80070ce:	e7f7      	b.n	80070c0 <__sfp+0x18>
 80070d0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80070d4:	b9d5      	cbnz	r5, 800710c <__sfp+0x64>
 80070d6:	4b16      	ldr	r3, [pc, #88]	; (8007130 <__sfp+0x88>)
 80070d8:	60e3      	str	r3, [r4, #12]
 80070da:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80070de:	6665      	str	r5, [r4, #100]	; 0x64
 80070e0:	f000 f86c 	bl	80071bc <__retarget_lock_init_recursive>
 80070e4:	f7ff ff96 	bl	8007014 <__sfp_lock_release>
 80070e8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80070ec:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80070f0:	6025      	str	r5, [r4, #0]
 80070f2:	61a5      	str	r5, [r4, #24]
 80070f4:	2208      	movs	r2, #8
 80070f6:	4629      	mov	r1, r5
 80070f8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80070fc:	f000 f86f 	bl	80071de <memset>
 8007100:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007104:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8007108:	4620      	mov	r0, r4
 800710a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800710c:	3468      	adds	r4, #104	; 0x68
 800710e:	e7d9      	b.n	80070c4 <__sfp+0x1c>
 8007110:	2104      	movs	r1, #4
 8007112:	4638      	mov	r0, r7
 8007114:	f7ff ff62 	bl	8006fdc <__sfmoreglue>
 8007118:	4604      	mov	r4, r0
 800711a:	6030      	str	r0, [r6, #0]
 800711c:	2800      	cmp	r0, #0
 800711e:	d1d5      	bne.n	80070cc <__sfp+0x24>
 8007120:	f7ff ff78 	bl	8007014 <__sfp_lock_release>
 8007124:	230c      	movs	r3, #12
 8007126:	603b      	str	r3, [r7, #0]
 8007128:	e7ee      	b.n	8007108 <__sfp+0x60>
 800712a:	bf00      	nop
 800712c:	08008698 	.word	0x08008698
 8007130:	ffff0001 	.word	0xffff0001

08007134 <_fwalk_reent>:
 8007134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007138:	4606      	mov	r6, r0
 800713a:	4688      	mov	r8, r1
 800713c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007140:	2700      	movs	r7, #0
 8007142:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007146:	f1b9 0901 	subs.w	r9, r9, #1
 800714a:	d505      	bpl.n	8007158 <_fwalk_reent+0x24>
 800714c:	6824      	ldr	r4, [r4, #0]
 800714e:	2c00      	cmp	r4, #0
 8007150:	d1f7      	bne.n	8007142 <_fwalk_reent+0xe>
 8007152:	4638      	mov	r0, r7
 8007154:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007158:	89ab      	ldrh	r3, [r5, #12]
 800715a:	2b01      	cmp	r3, #1
 800715c:	d907      	bls.n	800716e <_fwalk_reent+0x3a>
 800715e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007162:	3301      	adds	r3, #1
 8007164:	d003      	beq.n	800716e <_fwalk_reent+0x3a>
 8007166:	4629      	mov	r1, r5
 8007168:	4630      	mov	r0, r6
 800716a:	47c0      	blx	r8
 800716c:	4307      	orrs	r7, r0
 800716e:	3568      	adds	r5, #104	; 0x68
 8007170:	e7e9      	b.n	8007146 <_fwalk_reent+0x12>
	...

08007174 <__libc_init_array>:
 8007174:	b570      	push	{r4, r5, r6, lr}
 8007176:	4d0d      	ldr	r5, [pc, #52]	; (80071ac <__libc_init_array+0x38>)
 8007178:	4c0d      	ldr	r4, [pc, #52]	; (80071b0 <__libc_init_array+0x3c>)
 800717a:	1b64      	subs	r4, r4, r5
 800717c:	10a4      	asrs	r4, r4, #2
 800717e:	2600      	movs	r6, #0
 8007180:	42a6      	cmp	r6, r4
 8007182:	d109      	bne.n	8007198 <__libc_init_array+0x24>
 8007184:	4d0b      	ldr	r5, [pc, #44]	; (80071b4 <__libc_init_array+0x40>)
 8007186:	4c0c      	ldr	r4, [pc, #48]	; (80071b8 <__libc_init_array+0x44>)
 8007188:	f001 f9d6 	bl	8008538 <_init>
 800718c:	1b64      	subs	r4, r4, r5
 800718e:	10a4      	asrs	r4, r4, #2
 8007190:	2600      	movs	r6, #0
 8007192:	42a6      	cmp	r6, r4
 8007194:	d105      	bne.n	80071a2 <__libc_init_array+0x2e>
 8007196:	bd70      	pop	{r4, r5, r6, pc}
 8007198:	f855 3b04 	ldr.w	r3, [r5], #4
 800719c:	4798      	blx	r3
 800719e:	3601      	adds	r6, #1
 80071a0:	e7ee      	b.n	8007180 <__libc_init_array+0xc>
 80071a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80071a6:	4798      	blx	r3
 80071a8:	3601      	adds	r6, #1
 80071aa:	e7f2      	b.n	8007192 <__libc_init_array+0x1e>
 80071ac:	08008788 	.word	0x08008788
 80071b0:	08008788 	.word	0x08008788
 80071b4:	08008788 	.word	0x08008788
 80071b8:	0800878c 	.word	0x0800878c

080071bc <__retarget_lock_init_recursive>:
 80071bc:	4770      	bx	lr

080071be <__retarget_lock_acquire_recursive>:
 80071be:	4770      	bx	lr

080071c0 <__retarget_lock_release_recursive>:
 80071c0:	4770      	bx	lr

080071c2 <memcpy>:
 80071c2:	440a      	add	r2, r1
 80071c4:	4291      	cmp	r1, r2
 80071c6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80071ca:	d100      	bne.n	80071ce <memcpy+0xc>
 80071cc:	4770      	bx	lr
 80071ce:	b510      	push	{r4, lr}
 80071d0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80071d4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80071d8:	4291      	cmp	r1, r2
 80071da:	d1f9      	bne.n	80071d0 <memcpy+0xe>
 80071dc:	bd10      	pop	{r4, pc}

080071de <memset>:
 80071de:	4402      	add	r2, r0
 80071e0:	4603      	mov	r3, r0
 80071e2:	4293      	cmp	r3, r2
 80071e4:	d100      	bne.n	80071e8 <memset+0xa>
 80071e6:	4770      	bx	lr
 80071e8:	f803 1b01 	strb.w	r1, [r3], #1
 80071ec:	e7f9      	b.n	80071e2 <memset+0x4>
	...

080071f0 <sbrk_aligned>:
 80071f0:	b570      	push	{r4, r5, r6, lr}
 80071f2:	4e0e      	ldr	r6, [pc, #56]	; (800722c <sbrk_aligned+0x3c>)
 80071f4:	460c      	mov	r4, r1
 80071f6:	6831      	ldr	r1, [r6, #0]
 80071f8:	4605      	mov	r5, r0
 80071fa:	b911      	cbnz	r1, 8007202 <sbrk_aligned+0x12>
 80071fc:	f000 f962 	bl	80074c4 <_sbrk_r>
 8007200:	6030      	str	r0, [r6, #0]
 8007202:	4621      	mov	r1, r4
 8007204:	4628      	mov	r0, r5
 8007206:	f000 f95d 	bl	80074c4 <_sbrk_r>
 800720a:	1c43      	adds	r3, r0, #1
 800720c:	d00a      	beq.n	8007224 <sbrk_aligned+0x34>
 800720e:	1cc4      	adds	r4, r0, #3
 8007210:	f024 0403 	bic.w	r4, r4, #3
 8007214:	42a0      	cmp	r0, r4
 8007216:	d007      	beq.n	8007228 <sbrk_aligned+0x38>
 8007218:	1a21      	subs	r1, r4, r0
 800721a:	4628      	mov	r0, r5
 800721c:	f000 f952 	bl	80074c4 <_sbrk_r>
 8007220:	3001      	adds	r0, #1
 8007222:	d101      	bne.n	8007228 <sbrk_aligned+0x38>
 8007224:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8007228:	4620      	mov	r0, r4
 800722a:	bd70      	pop	{r4, r5, r6, pc}
 800722c:	200089e4 	.word	0x200089e4

08007230 <_malloc_r>:
 8007230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007234:	1ccd      	adds	r5, r1, #3
 8007236:	f025 0503 	bic.w	r5, r5, #3
 800723a:	3508      	adds	r5, #8
 800723c:	2d0c      	cmp	r5, #12
 800723e:	bf38      	it	cc
 8007240:	250c      	movcc	r5, #12
 8007242:	2d00      	cmp	r5, #0
 8007244:	4607      	mov	r7, r0
 8007246:	db01      	blt.n	800724c <_malloc_r+0x1c>
 8007248:	42a9      	cmp	r1, r5
 800724a:	d905      	bls.n	8007258 <_malloc_r+0x28>
 800724c:	230c      	movs	r3, #12
 800724e:	603b      	str	r3, [r7, #0]
 8007250:	2600      	movs	r6, #0
 8007252:	4630      	mov	r0, r6
 8007254:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007258:	4e2e      	ldr	r6, [pc, #184]	; (8007314 <_malloc_r+0xe4>)
 800725a:	f000 fad5 	bl	8007808 <__malloc_lock>
 800725e:	6833      	ldr	r3, [r6, #0]
 8007260:	461c      	mov	r4, r3
 8007262:	bb34      	cbnz	r4, 80072b2 <_malloc_r+0x82>
 8007264:	4629      	mov	r1, r5
 8007266:	4638      	mov	r0, r7
 8007268:	f7ff ffc2 	bl	80071f0 <sbrk_aligned>
 800726c:	1c43      	adds	r3, r0, #1
 800726e:	4604      	mov	r4, r0
 8007270:	d14d      	bne.n	800730e <_malloc_r+0xde>
 8007272:	6834      	ldr	r4, [r6, #0]
 8007274:	4626      	mov	r6, r4
 8007276:	2e00      	cmp	r6, #0
 8007278:	d140      	bne.n	80072fc <_malloc_r+0xcc>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	4631      	mov	r1, r6
 800727e:	4638      	mov	r0, r7
 8007280:	eb04 0803 	add.w	r8, r4, r3
 8007284:	f000 f91e 	bl	80074c4 <_sbrk_r>
 8007288:	4580      	cmp	r8, r0
 800728a:	d13a      	bne.n	8007302 <_malloc_r+0xd2>
 800728c:	6821      	ldr	r1, [r4, #0]
 800728e:	3503      	adds	r5, #3
 8007290:	1a6d      	subs	r5, r5, r1
 8007292:	f025 0503 	bic.w	r5, r5, #3
 8007296:	3508      	adds	r5, #8
 8007298:	2d0c      	cmp	r5, #12
 800729a:	bf38      	it	cc
 800729c:	250c      	movcc	r5, #12
 800729e:	4629      	mov	r1, r5
 80072a0:	4638      	mov	r0, r7
 80072a2:	f7ff ffa5 	bl	80071f0 <sbrk_aligned>
 80072a6:	3001      	adds	r0, #1
 80072a8:	d02b      	beq.n	8007302 <_malloc_r+0xd2>
 80072aa:	6823      	ldr	r3, [r4, #0]
 80072ac:	442b      	add	r3, r5
 80072ae:	6023      	str	r3, [r4, #0]
 80072b0:	e00e      	b.n	80072d0 <_malloc_r+0xa0>
 80072b2:	6822      	ldr	r2, [r4, #0]
 80072b4:	1b52      	subs	r2, r2, r5
 80072b6:	d41e      	bmi.n	80072f6 <_malloc_r+0xc6>
 80072b8:	2a0b      	cmp	r2, #11
 80072ba:	d916      	bls.n	80072ea <_malloc_r+0xba>
 80072bc:	1961      	adds	r1, r4, r5
 80072be:	42a3      	cmp	r3, r4
 80072c0:	6025      	str	r5, [r4, #0]
 80072c2:	bf18      	it	ne
 80072c4:	6059      	strne	r1, [r3, #4]
 80072c6:	6863      	ldr	r3, [r4, #4]
 80072c8:	bf08      	it	eq
 80072ca:	6031      	streq	r1, [r6, #0]
 80072cc:	5162      	str	r2, [r4, r5]
 80072ce:	604b      	str	r3, [r1, #4]
 80072d0:	4638      	mov	r0, r7
 80072d2:	f104 060b 	add.w	r6, r4, #11
 80072d6:	f000 fa9d 	bl	8007814 <__malloc_unlock>
 80072da:	f026 0607 	bic.w	r6, r6, #7
 80072de:	1d23      	adds	r3, r4, #4
 80072e0:	1af2      	subs	r2, r6, r3
 80072e2:	d0b6      	beq.n	8007252 <_malloc_r+0x22>
 80072e4:	1b9b      	subs	r3, r3, r6
 80072e6:	50a3      	str	r3, [r4, r2]
 80072e8:	e7b3      	b.n	8007252 <_malloc_r+0x22>
 80072ea:	6862      	ldr	r2, [r4, #4]
 80072ec:	42a3      	cmp	r3, r4
 80072ee:	bf0c      	ite	eq
 80072f0:	6032      	streq	r2, [r6, #0]
 80072f2:	605a      	strne	r2, [r3, #4]
 80072f4:	e7ec      	b.n	80072d0 <_malloc_r+0xa0>
 80072f6:	4623      	mov	r3, r4
 80072f8:	6864      	ldr	r4, [r4, #4]
 80072fa:	e7b2      	b.n	8007262 <_malloc_r+0x32>
 80072fc:	4634      	mov	r4, r6
 80072fe:	6876      	ldr	r6, [r6, #4]
 8007300:	e7b9      	b.n	8007276 <_malloc_r+0x46>
 8007302:	230c      	movs	r3, #12
 8007304:	603b      	str	r3, [r7, #0]
 8007306:	4638      	mov	r0, r7
 8007308:	f000 fa84 	bl	8007814 <__malloc_unlock>
 800730c:	e7a1      	b.n	8007252 <_malloc_r+0x22>
 800730e:	6025      	str	r5, [r4, #0]
 8007310:	e7de      	b.n	80072d0 <_malloc_r+0xa0>
 8007312:	bf00      	nop
 8007314:	200089e0 	.word	0x200089e0

08007318 <srand>:
 8007318:	b538      	push	{r3, r4, r5, lr}
 800731a:	4b10      	ldr	r3, [pc, #64]	; (800735c <srand+0x44>)
 800731c:	681d      	ldr	r5, [r3, #0]
 800731e:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007320:	4604      	mov	r4, r0
 8007322:	b9b3      	cbnz	r3, 8007352 <srand+0x3a>
 8007324:	2018      	movs	r0, #24
 8007326:	f000 fa67 	bl	80077f8 <malloc>
 800732a:	4602      	mov	r2, r0
 800732c:	63a8      	str	r0, [r5, #56]	; 0x38
 800732e:	b920      	cbnz	r0, 800733a <srand+0x22>
 8007330:	4b0b      	ldr	r3, [pc, #44]	; (8007360 <srand+0x48>)
 8007332:	480c      	ldr	r0, [pc, #48]	; (8007364 <srand+0x4c>)
 8007334:	2142      	movs	r1, #66	; 0x42
 8007336:	f000 f94b 	bl	80075d0 <__assert_func>
 800733a:	490b      	ldr	r1, [pc, #44]	; (8007368 <srand+0x50>)
 800733c:	4b0b      	ldr	r3, [pc, #44]	; (800736c <srand+0x54>)
 800733e:	e9c0 1300 	strd	r1, r3, [r0]
 8007342:	4b0b      	ldr	r3, [pc, #44]	; (8007370 <srand+0x58>)
 8007344:	6083      	str	r3, [r0, #8]
 8007346:	230b      	movs	r3, #11
 8007348:	8183      	strh	r3, [r0, #12]
 800734a:	2100      	movs	r1, #0
 800734c:	2001      	movs	r0, #1
 800734e:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8007352:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8007354:	2200      	movs	r2, #0
 8007356:	611c      	str	r4, [r3, #16]
 8007358:	615a      	str	r2, [r3, #20]
 800735a:	bd38      	pop	{r3, r4, r5, pc}
 800735c:	20000010 	.word	0x20000010
 8007360:	0800869c 	.word	0x0800869c
 8007364:	080086b3 	.word	0x080086b3
 8007368:	abcd330e 	.word	0xabcd330e
 800736c:	e66d1234 	.word	0xe66d1234
 8007370:	0005deec 	.word	0x0005deec

08007374 <rand>:
 8007374:	4b16      	ldr	r3, [pc, #88]	; (80073d0 <rand+0x5c>)
 8007376:	b510      	push	{r4, lr}
 8007378:	681c      	ldr	r4, [r3, #0]
 800737a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800737c:	b9b3      	cbnz	r3, 80073ac <rand+0x38>
 800737e:	2018      	movs	r0, #24
 8007380:	f000 fa3a 	bl	80077f8 <malloc>
 8007384:	63a0      	str	r0, [r4, #56]	; 0x38
 8007386:	b928      	cbnz	r0, 8007394 <rand+0x20>
 8007388:	4602      	mov	r2, r0
 800738a:	4b12      	ldr	r3, [pc, #72]	; (80073d4 <rand+0x60>)
 800738c:	4812      	ldr	r0, [pc, #72]	; (80073d8 <rand+0x64>)
 800738e:	214e      	movs	r1, #78	; 0x4e
 8007390:	f000 f91e 	bl	80075d0 <__assert_func>
 8007394:	4a11      	ldr	r2, [pc, #68]	; (80073dc <rand+0x68>)
 8007396:	4b12      	ldr	r3, [pc, #72]	; (80073e0 <rand+0x6c>)
 8007398:	e9c0 2300 	strd	r2, r3, [r0]
 800739c:	4b11      	ldr	r3, [pc, #68]	; (80073e4 <rand+0x70>)
 800739e:	6083      	str	r3, [r0, #8]
 80073a0:	230b      	movs	r3, #11
 80073a2:	8183      	strh	r3, [r0, #12]
 80073a4:	2201      	movs	r2, #1
 80073a6:	2300      	movs	r3, #0
 80073a8:	e9c0 2304 	strd	r2, r3, [r0, #16]
 80073ac:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 80073ae:	4a0e      	ldr	r2, [pc, #56]	; (80073e8 <rand+0x74>)
 80073b0:	6920      	ldr	r0, [r4, #16]
 80073b2:	6963      	ldr	r3, [r4, #20]
 80073b4:	490d      	ldr	r1, [pc, #52]	; (80073ec <rand+0x78>)
 80073b6:	4342      	muls	r2, r0
 80073b8:	fb01 2203 	mla	r2, r1, r3, r2
 80073bc:	fba0 0101 	umull	r0, r1, r0, r1
 80073c0:	1c43      	adds	r3, r0, #1
 80073c2:	eb42 0001 	adc.w	r0, r2, r1
 80073c6:	e9c4 3004 	strd	r3, r0, [r4, #16]
 80073ca:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80073ce:	bd10      	pop	{r4, pc}
 80073d0:	20000010 	.word	0x20000010
 80073d4:	0800869c 	.word	0x0800869c
 80073d8:	080086b3 	.word	0x080086b3
 80073dc:	abcd330e 	.word	0xabcd330e
 80073e0:	e66d1234 	.word	0xe66d1234
 80073e4:	0005deec 	.word	0x0005deec
 80073e8:	5851f42d 	.word	0x5851f42d
 80073ec:	4c957f2d 	.word	0x4c957f2d

080073f0 <cleanup_glue>:
 80073f0:	b538      	push	{r3, r4, r5, lr}
 80073f2:	460c      	mov	r4, r1
 80073f4:	6809      	ldr	r1, [r1, #0]
 80073f6:	4605      	mov	r5, r0
 80073f8:	b109      	cbz	r1, 80073fe <cleanup_glue+0xe>
 80073fa:	f7ff fff9 	bl	80073f0 <cleanup_glue>
 80073fe:	4621      	mov	r1, r4
 8007400:	4628      	mov	r0, r5
 8007402:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007406:	f000 ba0b 	b.w	8007820 <_free_r>
	...

0800740c <_reclaim_reent>:
 800740c:	4b2c      	ldr	r3, [pc, #176]	; (80074c0 <_reclaim_reent+0xb4>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4283      	cmp	r3, r0
 8007412:	b570      	push	{r4, r5, r6, lr}
 8007414:	4604      	mov	r4, r0
 8007416:	d051      	beq.n	80074bc <_reclaim_reent+0xb0>
 8007418:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800741a:	b143      	cbz	r3, 800742e <_reclaim_reent+0x22>
 800741c:	68db      	ldr	r3, [r3, #12]
 800741e:	2b00      	cmp	r3, #0
 8007420:	d14a      	bne.n	80074b8 <_reclaim_reent+0xac>
 8007422:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007424:	6819      	ldr	r1, [r3, #0]
 8007426:	b111      	cbz	r1, 800742e <_reclaim_reent+0x22>
 8007428:	4620      	mov	r0, r4
 800742a:	f000 f9f9 	bl	8007820 <_free_r>
 800742e:	6961      	ldr	r1, [r4, #20]
 8007430:	b111      	cbz	r1, 8007438 <_reclaim_reent+0x2c>
 8007432:	4620      	mov	r0, r4
 8007434:	f000 f9f4 	bl	8007820 <_free_r>
 8007438:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800743a:	b111      	cbz	r1, 8007442 <_reclaim_reent+0x36>
 800743c:	4620      	mov	r0, r4
 800743e:	f000 f9ef 	bl	8007820 <_free_r>
 8007442:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007444:	b111      	cbz	r1, 800744c <_reclaim_reent+0x40>
 8007446:	4620      	mov	r0, r4
 8007448:	f000 f9ea 	bl	8007820 <_free_r>
 800744c:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800744e:	b111      	cbz	r1, 8007456 <_reclaim_reent+0x4a>
 8007450:	4620      	mov	r0, r4
 8007452:	f000 f9e5 	bl	8007820 <_free_r>
 8007456:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007458:	b111      	cbz	r1, 8007460 <_reclaim_reent+0x54>
 800745a:	4620      	mov	r0, r4
 800745c:	f000 f9e0 	bl	8007820 <_free_r>
 8007460:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007462:	b111      	cbz	r1, 800746a <_reclaim_reent+0x5e>
 8007464:	4620      	mov	r0, r4
 8007466:	f000 f9db 	bl	8007820 <_free_r>
 800746a:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800746c:	b111      	cbz	r1, 8007474 <_reclaim_reent+0x68>
 800746e:	4620      	mov	r0, r4
 8007470:	f000 f9d6 	bl	8007820 <_free_r>
 8007474:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007476:	b111      	cbz	r1, 800747e <_reclaim_reent+0x72>
 8007478:	4620      	mov	r0, r4
 800747a:	f000 f9d1 	bl	8007820 <_free_r>
 800747e:	69a3      	ldr	r3, [r4, #24]
 8007480:	b1e3      	cbz	r3, 80074bc <_reclaim_reent+0xb0>
 8007482:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007484:	4620      	mov	r0, r4
 8007486:	4798      	blx	r3
 8007488:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800748a:	b1b9      	cbz	r1, 80074bc <_reclaim_reent+0xb0>
 800748c:	4620      	mov	r0, r4
 800748e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007492:	f7ff bfad 	b.w	80073f0 <cleanup_glue>
 8007496:	5949      	ldr	r1, [r1, r5]
 8007498:	b941      	cbnz	r1, 80074ac <_reclaim_reent+0xa0>
 800749a:	3504      	adds	r5, #4
 800749c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800749e:	2d80      	cmp	r5, #128	; 0x80
 80074a0:	68d9      	ldr	r1, [r3, #12]
 80074a2:	d1f8      	bne.n	8007496 <_reclaim_reent+0x8a>
 80074a4:	4620      	mov	r0, r4
 80074a6:	f000 f9bb 	bl	8007820 <_free_r>
 80074aa:	e7ba      	b.n	8007422 <_reclaim_reent+0x16>
 80074ac:	680e      	ldr	r6, [r1, #0]
 80074ae:	4620      	mov	r0, r4
 80074b0:	f000 f9b6 	bl	8007820 <_free_r>
 80074b4:	4631      	mov	r1, r6
 80074b6:	e7ef      	b.n	8007498 <_reclaim_reent+0x8c>
 80074b8:	2500      	movs	r5, #0
 80074ba:	e7ef      	b.n	800749c <_reclaim_reent+0x90>
 80074bc:	bd70      	pop	{r4, r5, r6, pc}
 80074be:	bf00      	nop
 80074c0:	20000010 	.word	0x20000010

080074c4 <_sbrk_r>:
 80074c4:	b538      	push	{r3, r4, r5, lr}
 80074c6:	4d06      	ldr	r5, [pc, #24]	; (80074e0 <_sbrk_r+0x1c>)
 80074c8:	2300      	movs	r3, #0
 80074ca:	4604      	mov	r4, r0
 80074cc:	4608      	mov	r0, r1
 80074ce:	602b      	str	r3, [r5, #0]
 80074d0:	f7f9 fc02 	bl	8000cd8 <_sbrk>
 80074d4:	1c43      	adds	r3, r0, #1
 80074d6:	d102      	bne.n	80074de <_sbrk_r+0x1a>
 80074d8:	682b      	ldr	r3, [r5, #0]
 80074da:	b103      	cbz	r3, 80074de <_sbrk_r+0x1a>
 80074dc:	6023      	str	r3, [r4, #0]
 80074de:	bd38      	pop	{r3, r4, r5, pc}
 80074e0:	200089e8 	.word	0x200089e8

080074e4 <siprintf>:
 80074e4:	b40e      	push	{r1, r2, r3}
 80074e6:	b500      	push	{lr}
 80074e8:	b09c      	sub	sp, #112	; 0x70
 80074ea:	ab1d      	add	r3, sp, #116	; 0x74
 80074ec:	9002      	str	r0, [sp, #8]
 80074ee:	9006      	str	r0, [sp, #24]
 80074f0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80074f4:	4809      	ldr	r0, [pc, #36]	; (800751c <siprintf+0x38>)
 80074f6:	9107      	str	r1, [sp, #28]
 80074f8:	9104      	str	r1, [sp, #16]
 80074fa:	4909      	ldr	r1, [pc, #36]	; (8007520 <siprintf+0x3c>)
 80074fc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007500:	9105      	str	r1, [sp, #20]
 8007502:	6800      	ldr	r0, [r0, #0]
 8007504:	9301      	str	r3, [sp, #4]
 8007506:	a902      	add	r1, sp, #8
 8007508:	f000 fa32 	bl	8007970 <_svfiprintf_r>
 800750c:	9b02      	ldr	r3, [sp, #8]
 800750e:	2200      	movs	r2, #0
 8007510:	701a      	strb	r2, [r3, #0]
 8007512:	b01c      	add	sp, #112	; 0x70
 8007514:	f85d eb04 	ldr.w	lr, [sp], #4
 8007518:	b003      	add	sp, #12
 800751a:	4770      	bx	lr
 800751c:	20000010 	.word	0x20000010
 8007520:	ffff0208 	.word	0xffff0208

08007524 <__sread>:
 8007524:	b510      	push	{r4, lr}
 8007526:	460c      	mov	r4, r1
 8007528:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752c:	f000 fe0e 	bl	800814c <_read_r>
 8007530:	2800      	cmp	r0, #0
 8007532:	bfab      	itete	ge
 8007534:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007536:	89a3      	ldrhlt	r3, [r4, #12]
 8007538:	181b      	addge	r3, r3, r0
 800753a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800753e:	bfac      	ite	ge
 8007540:	6563      	strge	r3, [r4, #84]	; 0x54
 8007542:	81a3      	strhlt	r3, [r4, #12]
 8007544:	bd10      	pop	{r4, pc}

08007546 <__swrite>:
 8007546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800754a:	461f      	mov	r7, r3
 800754c:	898b      	ldrh	r3, [r1, #12]
 800754e:	05db      	lsls	r3, r3, #23
 8007550:	4605      	mov	r5, r0
 8007552:	460c      	mov	r4, r1
 8007554:	4616      	mov	r6, r2
 8007556:	d505      	bpl.n	8007564 <__swrite+0x1e>
 8007558:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755c:	2302      	movs	r3, #2
 800755e:	2200      	movs	r2, #0
 8007560:	f000 f938 	bl	80077d4 <_lseek_r>
 8007564:	89a3      	ldrh	r3, [r4, #12]
 8007566:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800756a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800756e:	81a3      	strh	r3, [r4, #12]
 8007570:	4632      	mov	r2, r6
 8007572:	463b      	mov	r3, r7
 8007574:	4628      	mov	r0, r5
 8007576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800757a:	f000 b817 	b.w	80075ac <_write_r>

0800757e <__sseek>:
 800757e:	b510      	push	{r4, lr}
 8007580:	460c      	mov	r4, r1
 8007582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007586:	f000 f925 	bl	80077d4 <_lseek_r>
 800758a:	1c43      	adds	r3, r0, #1
 800758c:	89a3      	ldrh	r3, [r4, #12]
 800758e:	bf15      	itete	ne
 8007590:	6560      	strne	r0, [r4, #84]	; 0x54
 8007592:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007596:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800759a:	81a3      	strheq	r3, [r4, #12]
 800759c:	bf18      	it	ne
 800759e:	81a3      	strhne	r3, [r4, #12]
 80075a0:	bd10      	pop	{r4, pc}

080075a2 <__sclose>:
 80075a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80075a6:	f000 b831 	b.w	800760c <_close_r>
	...

080075ac <_write_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4d07      	ldr	r5, [pc, #28]	; (80075cc <_write_r+0x20>)
 80075b0:	4604      	mov	r4, r0
 80075b2:	4608      	mov	r0, r1
 80075b4:	4611      	mov	r1, r2
 80075b6:	2200      	movs	r2, #0
 80075b8:	602a      	str	r2, [r5, #0]
 80075ba:	461a      	mov	r2, r3
 80075bc:	f7f9 f950 	bl	8000860 <_write>
 80075c0:	1c43      	adds	r3, r0, #1
 80075c2:	d102      	bne.n	80075ca <_write_r+0x1e>
 80075c4:	682b      	ldr	r3, [r5, #0]
 80075c6:	b103      	cbz	r3, 80075ca <_write_r+0x1e>
 80075c8:	6023      	str	r3, [r4, #0]
 80075ca:	bd38      	pop	{r3, r4, r5, pc}
 80075cc:	200089e8 	.word	0x200089e8

080075d0 <__assert_func>:
 80075d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80075d2:	4614      	mov	r4, r2
 80075d4:	461a      	mov	r2, r3
 80075d6:	4b09      	ldr	r3, [pc, #36]	; (80075fc <__assert_func+0x2c>)
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	4605      	mov	r5, r0
 80075dc:	68d8      	ldr	r0, [r3, #12]
 80075de:	b14c      	cbz	r4, 80075f4 <__assert_func+0x24>
 80075e0:	4b07      	ldr	r3, [pc, #28]	; (8007600 <__assert_func+0x30>)
 80075e2:	9100      	str	r1, [sp, #0]
 80075e4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80075e8:	4906      	ldr	r1, [pc, #24]	; (8007604 <__assert_func+0x34>)
 80075ea:	462b      	mov	r3, r5
 80075ec:	f000 f8e0 	bl	80077b0 <fiprintf>
 80075f0:	f000 fe7e 	bl	80082f0 <abort>
 80075f4:	4b04      	ldr	r3, [pc, #16]	; (8007608 <__assert_func+0x38>)
 80075f6:	461c      	mov	r4, r3
 80075f8:	e7f3      	b.n	80075e2 <__assert_func+0x12>
 80075fa:	bf00      	nop
 80075fc:	20000010 	.word	0x20000010
 8007600:	0800870e 	.word	0x0800870e
 8007604:	0800871b 	.word	0x0800871b
 8007608:	08008749 	.word	0x08008749

0800760c <_close_r>:
 800760c:	b538      	push	{r3, r4, r5, lr}
 800760e:	4d06      	ldr	r5, [pc, #24]	; (8007628 <_close_r+0x1c>)
 8007610:	2300      	movs	r3, #0
 8007612:	4604      	mov	r4, r0
 8007614:	4608      	mov	r0, r1
 8007616:	602b      	str	r3, [r5, #0]
 8007618:	f7f9 fb29 	bl	8000c6e <_close>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_close_r+0x1a>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_close_r+0x1a>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	200089e8 	.word	0x200089e8

0800762c <__sflush_r>:
 800762c:	898a      	ldrh	r2, [r1, #12]
 800762e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007632:	4605      	mov	r5, r0
 8007634:	0710      	lsls	r0, r2, #28
 8007636:	460c      	mov	r4, r1
 8007638:	d458      	bmi.n	80076ec <__sflush_r+0xc0>
 800763a:	684b      	ldr	r3, [r1, #4]
 800763c:	2b00      	cmp	r3, #0
 800763e:	dc05      	bgt.n	800764c <__sflush_r+0x20>
 8007640:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007642:	2b00      	cmp	r3, #0
 8007644:	dc02      	bgt.n	800764c <__sflush_r+0x20>
 8007646:	2000      	movs	r0, #0
 8007648:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800764c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800764e:	2e00      	cmp	r6, #0
 8007650:	d0f9      	beq.n	8007646 <__sflush_r+0x1a>
 8007652:	2300      	movs	r3, #0
 8007654:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007658:	682f      	ldr	r7, [r5, #0]
 800765a:	602b      	str	r3, [r5, #0]
 800765c:	d032      	beq.n	80076c4 <__sflush_r+0x98>
 800765e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007660:	89a3      	ldrh	r3, [r4, #12]
 8007662:	075a      	lsls	r2, r3, #29
 8007664:	d505      	bpl.n	8007672 <__sflush_r+0x46>
 8007666:	6863      	ldr	r3, [r4, #4]
 8007668:	1ac0      	subs	r0, r0, r3
 800766a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800766c:	b10b      	cbz	r3, 8007672 <__sflush_r+0x46>
 800766e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007670:	1ac0      	subs	r0, r0, r3
 8007672:	2300      	movs	r3, #0
 8007674:	4602      	mov	r2, r0
 8007676:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007678:	6a21      	ldr	r1, [r4, #32]
 800767a:	4628      	mov	r0, r5
 800767c:	47b0      	blx	r6
 800767e:	1c43      	adds	r3, r0, #1
 8007680:	89a3      	ldrh	r3, [r4, #12]
 8007682:	d106      	bne.n	8007692 <__sflush_r+0x66>
 8007684:	6829      	ldr	r1, [r5, #0]
 8007686:	291d      	cmp	r1, #29
 8007688:	d82c      	bhi.n	80076e4 <__sflush_r+0xb8>
 800768a:	4a2a      	ldr	r2, [pc, #168]	; (8007734 <__sflush_r+0x108>)
 800768c:	40ca      	lsrs	r2, r1
 800768e:	07d6      	lsls	r6, r2, #31
 8007690:	d528      	bpl.n	80076e4 <__sflush_r+0xb8>
 8007692:	2200      	movs	r2, #0
 8007694:	6062      	str	r2, [r4, #4]
 8007696:	04d9      	lsls	r1, r3, #19
 8007698:	6922      	ldr	r2, [r4, #16]
 800769a:	6022      	str	r2, [r4, #0]
 800769c:	d504      	bpl.n	80076a8 <__sflush_r+0x7c>
 800769e:	1c42      	adds	r2, r0, #1
 80076a0:	d101      	bne.n	80076a6 <__sflush_r+0x7a>
 80076a2:	682b      	ldr	r3, [r5, #0]
 80076a4:	b903      	cbnz	r3, 80076a8 <__sflush_r+0x7c>
 80076a6:	6560      	str	r0, [r4, #84]	; 0x54
 80076a8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80076aa:	602f      	str	r7, [r5, #0]
 80076ac:	2900      	cmp	r1, #0
 80076ae:	d0ca      	beq.n	8007646 <__sflush_r+0x1a>
 80076b0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80076b4:	4299      	cmp	r1, r3
 80076b6:	d002      	beq.n	80076be <__sflush_r+0x92>
 80076b8:	4628      	mov	r0, r5
 80076ba:	f000 f8b1 	bl	8007820 <_free_r>
 80076be:	2000      	movs	r0, #0
 80076c0:	6360      	str	r0, [r4, #52]	; 0x34
 80076c2:	e7c1      	b.n	8007648 <__sflush_r+0x1c>
 80076c4:	6a21      	ldr	r1, [r4, #32]
 80076c6:	2301      	movs	r3, #1
 80076c8:	4628      	mov	r0, r5
 80076ca:	47b0      	blx	r6
 80076cc:	1c41      	adds	r1, r0, #1
 80076ce:	d1c7      	bne.n	8007660 <__sflush_r+0x34>
 80076d0:	682b      	ldr	r3, [r5, #0]
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d0c4      	beq.n	8007660 <__sflush_r+0x34>
 80076d6:	2b1d      	cmp	r3, #29
 80076d8:	d001      	beq.n	80076de <__sflush_r+0xb2>
 80076da:	2b16      	cmp	r3, #22
 80076dc:	d101      	bne.n	80076e2 <__sflush_r+0xb6>
 80076de:	602f      	str	r7, [r5, #0]
 80076e0:	e7b1      	b.n	8007646 <__sflush_r+0x1a>
 80076e2:	89a3      	ldrh	r3, [r4, #12]
 80076e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80076e8:	81a3      	strh	r3, [r4, #12]
 80076ea:	e7ad      	b.n	8007648 <__sflush_r+0x1c>
 80076ec:	690f      	ldr	r7, [r1, #16]
 80076ee:	2f00      	cmp	r7, #0
 80076f0:	d0a9      	beq.n	8007646 <__sflush_r+0x1a>
 80076f2:	0793      	lsls	r3, r2, #30
 80076f4:	680e      	ldr	r6, [r1, #0]
 80076f6:	bf08      	it	eq
 80076f8:	694b      	ldreq	r3, [r1, #20]
 80076fa:	600f      	str	r7, [r1, #0]
 80076fc:	bf18      	it	ne
 80076fe:	2300      	movne	r3, #0
 8007700:	eba6 0807 	sub.w	r8, r6, r7
 8007704:	608b      	str	r3, [r1, #8]
 8007706:	f1b8 0f00 	cmp.w	r8, #0
 800770a:	dd9c      	ble.n	8007646 <__sflush_r+0x1a>
 800770c:	6a21      	ldr	r1, [r4, #32]
 800770e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007710:	4643      	mov	r3, r8
 8007712:	463a      	mov	r2, r7
 8007714:	4628      	mov	r0, r5
 8007716:	47b0      	blx	r6
 8007718:	2800      	cmp	r0, #0
 800771a:	dc06      	bgt.n	800772a <__sflush_r+0xfe>
 800771c:	89a3      	ldrh	r3, [r4, #12]
 800771e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007722:	81a3      	strh	r3, [r4, #12]
 8007724:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007728:	e78e      	b.n	8007648 <__sflush_r+0x1c>
 800772a:	4407      	add	r7, r0
 800772c:	eba8 0800 	sub.w	r8, r8, r0
 8007730:	e7e9      	b.n	8007706 <__sflush_r+0xda>
 8007732:	bf00      	nop
 8007734:	20400001 	.word	0x20400001

08007738 <_fflush_r>:
 8007738:	b538      	push	{r3, r4, r5, lr}
 800773a:	690b      	ldr	r3, [r1, #16]
 800773c:	4605      	mov	r5, r0
 800773e:	460c      	mov	r4, r1
 8007740:	b913      	cbnz	r3, 8007748 <_fflush_r+0x10>
 8007742:	2500      	movs	r5, #0
 8007744:	4628      	mov	r0, r5
 8007746:	bd38      	pop	{r3, r4, r5, pc}
 8007748:	b118      	cbz	r0, 8007752 <_fflush_r+0x1a>
 800774a:	6983      	ldr	r3, [r0, #24]
 800774c:	b90b      	cbnz	r3, 8007752 <_fflush_r+0x1a>
 800774e:	f7ff fc73 	bl	8007038 <__sinit>
 8007752:	4b14      	ldr	r3, [pc, #80]	; (80077a4 <_fflush_r+0x6c>)
 8007754:	429c      	cmp	r4, r3
 8007756:	d11b      	bne.n	8007790 <_fflush_r+0x58>
 8007758:	686c      	ldr	r4, [r5, #4]
 800775a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800775e:	2b00      	cmp	r3, #0
 8007760:	d0ef      	beq.n	8007742 <_fflush_r+0xa>
 8007762:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007764:	07d0      	lsls	r0, r2, #31
 8007766:	d404      	bmi.n	8007772 <_fflush_r+0x3a>
 8007768:	0599      	lsls	r1, r3, #22
 800776a:	d402      	bmi.n	8007772 <_fflush_r+0x3a>
 800776c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800776e:	f7ff fd26 	bl	80071be <__retarget_lock_acquire_recursive>
 8007772:	4628      	mov	r0, r5
 8007774:	4621      	mov	r1, r4
 8007776:	f7ff ff59 	bl	800762c <__sflush_r>
 800777a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800777c:	07da      	lsls	r2, r3, #31
 800777e:	4605      	mov	r5, r0
 8007780:	d4e0      	bmi.n	8007744 <_fflush_r+0xc>
 8007782:	89a3      	ldrh	r3, [r4, #12]
 8007784:	059b      	lsls	r3, r3, #22
 8007786:	d4dd      	bmi.n	8007744 <_fflush_r+0xc>
 8007788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800778a:	f7ff fd19 	bl	80071c0 <__retarget_lock_release_recursive>
 800778e:	e7d9      	b.n	8007744 <_fflush_r+0xc>
 8007790:	4b05      	ldr	r3, [pc, #20]	; (80077a8 <_fflush_r+0x70>)
 8007792:	429c      	cmp	r4, r3
 8007794:	d101      	bne.n	800779a <_fflush_r+0x62>
 8007796:	68ac      	ldr	r4, [r5, #8]
 8007798:	e7df      	b.n	800775a <_fflush_r+0x22>
 800779a:	4b04      	ldr	r3, [pc, #16]	; (80077ac <_fflush_r+0x74>)
 800779c:	429c      	cmp	r4, r3
 800779e:	bf08      	it	eq
 80077a0:	68ec      	ldreq	r4, [r5, #12]
 80077a2:	e7da      	b.n	800775a <_fflush_r+0x22>
 80077a4:	08008658 	.word	0x08008658
 80077a8:	08008678 	.word	0x08008678
 80077ac:	08008638 	.word	0x08008638

080077b0 <fiprintf>:
 80077b0:	b40e      	push	{r1, r2, r3}
 80077b2:	b503      	push	{r0, r1, lr}
 80077b4:	4601      	mov	r1, r0
 80077b6:	ab03      	add	r3, sp, #12
 80077b8:	4805      	ldr	r0, [pc, #20]	; (80077d0 <fiprintf+0x20>)
 80077ba:	f853 2b04 	ldr.w	r2, [r3], #4
 80077be:	6800      	ldr	r0, [r0, #0]
 80077c0:	9301      	str	r3, [sp, #4]
 80077c2:	f000 f9ff 	bl	8007bc4 <_vfiprintf_r>
 80077c6:	b002      	add	sp, #8
 80077c8:	f85d eb04 	ldr.w	lr, [sp], #4
 80077cc:	b003      	add	sp, #12
 80077ce:	4770      	bx	lr
 80077d0:	20000010 	.word	0x20000010

080077d4 <_lseek_r>:
 80077d4:	b538      	push	{r3, r4, r5, lr}
 80077d6:	4d07      	ldr	r5, [pc, #28]	; (80077f4 <_lseek_r+0x20>)
 80077d8:	4604      	mov	r4, r0
 80077da:	4608      	mov	r0, r1
 80077dc:	4611      	mov	r1, r2
 80077de:	2200      	movs	r2, #0
 80077e0:	602a      	str	r2, [r5, #0]
 80077e2:	461a      	mov	r2, r3
 80077e4:	f7f9 fa6a 	bl	8000cbc <_lseek>
 80077e8:	1c43      	adds	r3, r0, #1
 80077ea:	d102      	bne.n	80077f2 <_lseek_r+0x1e>
 80077ec:	682b      	ldr	r3, [r5, #0]
 80077ee:	b103      	cbz	r3, 80077f2 <_lseek_r+0x1e>
 80077f0:	6023      	str	r3, [r4, #0]
 80077f2:	bd38      	pop	{r3, r4, r5, pc}
 80077f4:	200089e8 	.word	0x200089e8

080077f8 <malloc>:
 80077f8:	4b02      	ldr	r3, [pc, #8]	; (8007804 <malloc+0xc>)
 80077fa:	4601      	mov	r1, r0
 80077fc:	6818      	ldr	r0, [r3, #0]
 80077fe:	f7ff bd17 	b.w	8007230 <_malloc_r>
 8007802:	bf00      	nop
 8007804:	20000010 	.word	0x20000010

08007808 <__malloc_lock>:
 8007808:	4801      	ldr	r0, [pc, #4]	; (8007810 <__malloc_lock+0x8>)
 800780a:	f7ff bcd8 	b.w	80071be <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	200089dc 	.word	0x200089dc

08007814 <__malloc_unlock>:
 8007814:	4801      	ldr	r0, [pc, #4]	; (800781c <__malloc_unlock+0x8>)
 8007816:	f7ff bcd3 	b.w	80071c0 <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	200089dc 	.word	0x200089dc

08007820 <_free_r>:
 8007820:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007822:	2900      	cmp	r1, #0
 8007824:	d044      	beq.n	80078b0 <_free_r+0x90>
 8007826:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800782a:	9001      	str	r0, [sp, #4]
 800782c:	2b00      	cmp	r3, #0
 800782e:	f1a1 0404 	sub.w	r4, r1, #4
 8007832:	bfb8      	it	lt
 8007834:	18e4      	addlt	r4, r4, r3
 8007836:	f7ff ffe7 	bl	8007808 <__malloc_lock>
 800783a:	4a1e      	ldr	r2, [pc, #120]	; (80078b4 <_free_r+0x94>)
 800783c:	9801      	ldr	r0, [sp, #4]
 800783e:	6813      	ldr	r3, [r2, #0]
 8007840:	b933      	cbnz	r3, 8007850 <_free_r+0x30>
 8007842:	6063      	str	r3, [r4, #4]
 8007844:	6014      	str	r4, [r2, #0]
 8007846:	b003      	add	sp, #12
 8007848:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800784c:	f7ff bfe2 	b.w	8007814 <__malloc_unlock>
 8007850:	42a3      	cmp	r3, r4
 8007852:	d908      	bls.n	8007866 <_free_r+0x46>
 8007854:	6825      	ldr	r5, [r4, #0]
 8007856:	1961      	adds	r1, r4, r5
 8007858:	428b      	cmp	r3, r1
 800785a:	bf01      	itttt	eq
 800785c:	6819      	ldreq	r1, [r3, #0]
 800785e:	685b      	ldreq	r3, [r3, #4]
 8007860:	1949      	addeq	r1, r1, r5
 8007862:	6021      	streq	r1, [r4, #0]
 8007864:	e7ed      	b.n	8007842 <_free_r+0x22>
 8007866:	461a      	mov	r2, r3
 8007868:	685b      	ldr	r3, [r3, #4]
 800786a:	b10b      	cbz	r3, 8007870 <_free_r+0x50>
 800786c:	42a3      	cmp	r3, r4
 800786e:	d9fa      	bls.n	8007866 <_free_r+0x46>
 8007870:	6811      	ldr	r1, [r2, #0]
 8007872:	1855      	adds	r5, r2, r1
 8007874:	42a5      	cmp	r5, r4
 8007876:	d10b      	bne.n	8007890 <_free_r+0x70>
 8007878:	6824      	ldr	r4, [r4, #0]
 800787a:	4421      	add	r1, r4
 800787c:	1854      	adds	r4, r2, r1
 800787e:	42a3      	cmp	r3, r4
 8007880:	6011      	str	r1, [r2, #0]
 8007882:	d1e0      	bne.n	8007846 <_free_r+0x26>
 8007884:	681c      	ldr	r4, [r3, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	6053      	str	r3, [r2, #4]
 800788a:	4421      	add	r1, r4
 800788c:	6011      	str	r1, [r2, #0]
 800788e:	e7da      	b.n	8007846 <_free_r+0x26>
 8007890:	d902      	bls.n	8007898 <_free_r+0x78>
 8007892:	230c      	movs	r3, #12
 8007894:	6003      	str	r3, [r0, #0]
 8007896:	e7d6      	b.n	8007846 <_free_r+0x26>
 8007898:	6825      	ldr	r5, [r4, #0]
 800789a:	1961      	adds	r1, r4, r5
 800789c:	428b      	cmp	r3, r1
 800789e:	bf04      	itt	eq
 80078a0:	6819      	ldreq	r1, [r3, #0]
 80078a2:	685b      	ldreq	r3, [r3, #4]
 80078a4:	6063      	str	r3, [r4, #4]
 80078a6:	bf04      	itt	eq
 80078a8:	1949      	addeq	r1, r1, r5
 80078aa:	6021      	streq	r1, [r4, #0]
 80078ac:	6054      	str	r4, [r2, #4]
 80078ae:	e7ca      	b.n	8007846 <_free_r+0x26>
 80078b0:	b003      	add	sp, #12
 80078b2:	bd30      	pop	{r4, r5, pc}
 80078b4:	200089e0 	.word	0x200089e0

080078b8 <__ssputs_r>:
 80078b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80078bc:	688e      	ldr	r6, [r1, #8]
 80078be:	429e      	cmp	r6, r3
 80078c0:	4682      	mov	sl, r0
 80078c2:	460c      	mov	r4, r1
 80078c4:	4690      	mov	r8, r2
 80078c6:	461f      	mov	r7, r3
 80078c8:	d838      	bhi.n	800793c <__ssputs_r+0x84>
 80078ca:	898a      	ldrh	r2, [r1, #12]
 80078cc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80078d0:	d032      	beq.n	8007938 <__ssputs_r+0x80>
 80078d2:	6825      	ldr	r5, [r4, #0]
 80078d4:	6909      	ldr	r1, [r1, #16]
 80078d6:	eba5 0901 	sub.w	r9, r5, r1
 80078da:	6965      	ldr	r5, [r4, #20]
 80078dc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80078e0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80078e4:	3301      	adds	r3, #1
 80078e6:	444b      	add	r3, r9
 80078e8:	106d      	asrs	r5, r5, #1
 80078ea:	429d      	cmp	r5, r3
 80078ec:	bf38      	it	cc
 80078ee:	461d      	movcc	r5, r3
 80078f0:	0553      	lsls	r3, r2, #21
 80078f2:	d531      	bpl.n	8007958 <__ssputs_r+0xa0>
 80078f4:	4629      	mov	r1, r5
 80078f6:	f7ff fc9b 	bl	8007230 <_malloc_r>
 80078fa:	4606      	mov	r6, r0
 80078fc:	b950      	cbnz	r0, 8007914 <__ssputs_r+0x5c>
 80078fe:	230c      	movs	r3, #12
 8007900:	f8ca 3000 	str.w	r3, [sl]
 8007904:	89a3      	ldrh	r3, [r4, #12]
 8007906:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800790a:	81a3      	strh	r3, [r4, #12]
 800790c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007914:	6921      	ldr	r1, [r4, #16]
 8007916:	464a      	mov	r2, r9
 8007918:	f7ff fc53 	bl	80071c2 <memcpy>
 800791c:	89a3      	ldrh	r3, [r4, #12]
 800791e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007922:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007926:	81a3      	strh	r3, [r4, #12]
 8007928:	6126      	str	r6, [r4, #16]
 800792a:	6165      	str	r5, [r4, #20]
 800792c:	444e      	add	r6, r9
 800792e:	eba5 0509 	sub.w	r5, r5, r9
 8007932:	6026      	str	r6, [r4, #0]
 8007934:	60a5      	str	r5, [r4, #8]
 8007936:	463e      	mov	r6, r7
 8007938:	42be      	cmp	r6, r7
 800793a:	d900      	bls.n	800793e <__ssputs_r+0x86>
 800793c:	463e      	mov	r6, r7
 800793e:	6820      	ldr	r0, [r4, #0]
 8007940:	4632      	mov	r2, r6
 8007942:	4641      	mov	r1, r8
 8007944:	f000 fd40 	bl	80083c8 <memmove>
 8007948:	68a3      	ldr	r3, [r4, #8]
 800794a:	1b9b      	subs	r3, r3, r6
 800794c:	60a3      	str	r3, [r4, #8]
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	4433      	add	r3, r6
 8007952:	6023      	str	r3, [r4, #0]
 8007954:	2000      	movs	r0, #0
 8007956:	e7db      	b.n	8007910 <__ssputs_r+0x58>
 8007958:	462a      	mov	r2, r5
 800795a:	f000 fd4f 	bl	80083fc <_realloc_r>
 800795e:	4606      	mov	r6, r0
 8007960:	2800      	cmp	r0, #0
 8007962:	d1e1      	bne.n	8007928 <__ssputs_r+0x70>
 8007964:	6921      	ldr	r1, [r4, #16]
 8007966:	4650      	mov	r0, sl
 8007968:	f7ff ff5a 	bl	8007820 <_free_r>
 800796c:	e7c7      	b.n	80078fe <__ssputs_r+0x46>
	...

08007970 <_svfiprintf_r>:
 8007970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007974:	4698      	mov	r8, r3
 8007976:	898b      	ldrh	r3, [r1, #12]
 8007978:	061b      	lsls	r3, r3, #24
 800797a:	b09d      	sub	sp, #116	; 0x74
 800797c:	4607      	mov	r7, r0
 800797e:	460d      	mov	r5, r1
 8007980:	4614      	mov	r4, r2
 8007982:	d50e      	bpl.n	80079a2 <_svfiprintf_r+0x32>
 8007984:	690b      	ldr	r3, [r1, #16]
 8007986:	b963      	cbnz	r3, 80079a2 <_svfiprintf_r+0x32>
 8007988:	2140      	movs	r1, #64	; 0x40
 800798a:	f7ff fc51 	bl	8007230 <_malloc_r>
 800798e:	6028      	str	r0, [r5, #0]
 8007990:	6128      	str	r0, [r5, #16]
 8007992:	b920      	cbnz	r0, 800799e <_svfiprintf_r+0x2e>
 8007994:	230c      	movs	r3, #12
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800799c:	e0d1      	b.n	8007b42 <_svfiprintf_r+0x1d2>
 800799e:	2340      	movs	r3, #64	; 0x40
 80079a0:	616b      	str	r3, [r5, #20]
 80079a2:	2300      	movs	r3, #0
 80079a4:	9309      	str	r3, [sp, #36]	; 0x24
 80079a6:	2320      	movs	r3, #32
 80079a8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80079ac:	f8cd 800c 	str.w	r8, [sp, #12]
 80079b0:	2330      	movs	r3, #48	; 0x30
 80079b2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007b5c <_svfiprintf_r+0x1ec>
 80079b6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80079ba:	f04f 0901 	mov.w	r9, #1
 80079be:	4623      	mov	r3, r4
 80079c0:	469a      	mov	sl, r3
 80079c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80079c6:	b10a      	cbz	r2, 80079cc <_svfiprintf_r+0x5c>
 80079c8:	2a25      	cmp	r2, #37	; 0x25
 80079ca:	d1f9      	bne.n	80079c0 <_svfiprintf_r+0x50>
 80079cc:	ebba 0b04 	subs.w	fp, sl, r4
 80079d0:	d00b      	beq.n	80079ea <_svfiprintf_r+0x7a>
 80079d2:	465b      	mov	r3, fp
 80079d4:	4622      	mov	r2, r4
 80079d6:	4629      	mov	r1, r5
 80079d8:	4638      	mov	r0, r7
 80079da:	f7ff ff6d 	bl	80078b8 <__ssputs_r>
 80079de:	3001      	adds	r0, #1
 80079e0:	f000 80aa 	beq.w	8007b38 <_svfiprintf_r+0x1c8>
 80079e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80079e6:	445a      	add	r2, fp
 80079e8:	9209      	str	r2, [sp, #36]	; 0x24
 80079ea:	f89a 3000 	ldrb.w	r3, [sl]
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	f000 80a2 	beq.w	8007b38 <_svfiprintf_r+0x1c8>
 80079f4:	2300      	movs	r3, #0
 80079f6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80079fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80079fe:	f10a 0a01 	add.w	sl, sl, #1
 8007a02:	9304      	str	r3, [sp, #16]
 8007a04:	9307      	str	r3, [sp, #28]
 8007a06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007a0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007a0c:	4654      	mov	r4, sl
 8007a0e:	2205      	movs	r2, #5
 8007a10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007a14:	4851      	ldr	r0, [pc, #324]	; (8007b5c <_svfiprintf_r+0x1ec>)
 8007a16:	f7f8 fbe3 	bl	80001e0 <memchr>
 8007a1a:	9a04      	ldr	r2, [sp, #16]
 8007a1c:	b9d8      	cbnz	r0, 8007a56 <_svfiprintf_r+0xe6>
 8007a1e:	06d0      	lsls	r0, r2, #27
 8007a20:	bf44      	itt	mi
 8007a22:	2320      	movmi	r3, #32
 8007a24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a28:	0711      	lsls	r1, r2, #28
 8007a2a:	bf44      	itt	mi
 8007a2c:	232b      	movmi	r3, #43	; 0x2b
 8007a2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007a32:	f89a 3000 	ldrb.w	r3, [sl]
 8007a36:	2b2a      	cmp	r3, #42	; 0x2a
 8007a38:	d015      	beq.n	8007a66 <_svfiprintf_r+0xf6>
 8007a3a:	9a07      	ldr	r2, [sp, #28]
 8007a3c:	4654      	mov	r4, sl
 8007a3e:	2000      	movs	r0, #0
 8007a40:	f04f 0c0a 	mov.w	ip, #10
 8007a44:	4621      	mov	r1, r4
 8007a46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007a4a:	3b30      	subs	r3, #48	; 0x30
 8007a4c:	2b09      	cmp	r3, #9
 8007a4e:	d94e      	bls.n	8007aee <_svfiprintf_r+0x17e>
 8007a50:	b1b0      	cbz	r0, 8007a80 <_svfiprintf_r+0x110>
 8007a52:	9207      	str	r2, [sp, #28]
 8007a54:	e014      	b.n	8007a80 <_svfiprintf_r+0x110>
 8007a56:	eba0 0308 	sub.w	r3, r0, r8
 8007a5a:	fa09 f303 	lsl.w	r3, r9, r3
 8007a5e:	4313      	orrs	r3, r2
 8007a60:	9304      	str	r3, [sp, #16]
 8007a62:	46a2      	mov	sl, r4
 8007a64:	e7d2      	b.n	8007a0c <_svfiprintf_r+0x9c>
 8007a66:	9b03      	ldr	r3, [sp, #12]
 8007a68:	1d19      	adds	r1, r3, #4
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	9103      	str	r1, [sp, #12]
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	bfbb      	ittet	lt
 8007a72:	425b      	neglt	r3, r3
 8007a74:	f042 0202 	orrlt.w	r2, r2, #2
 8007a78:	9307      	strge	r3, [sp, #28]
 8007a7a:	9307      	strlt	r3, [sp, #28]
 8007a7c:	bfb8      	it	lt
 8007a7e:	9204      	strlt	r2, [sp, #16]
 8007a80:	7823      	ldrb	r3, [r4, #0]
 8007a82:	2b2e      	cmp	r3, #46	; 0x2e
 8007a84:	d10c      	bne.n	8007aa0 <_svfiprintf_r+0x130>
 8007a86:	7863      	ldrb	r3, [r4, #1]
 8007a88:	2b2a      	cmp	r3, #42	; 0x2a
 8007a8a:	d135      	bne.n	8007af8 <_svfiprintf_r+0x188>
 8007a8c:	9b03      	ldr	r3, [sp, #12]
 8007a8e:	1d1a      	adds	r2, r3, #4
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	9203      	str	r2, [sp, #12]
 8007a94:	2b00      	cmp	r3, #0
 8007a96:	bfb8      	it	lt
 8007a98:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007a9c:	3402      	adds	r4, #2
 8007a9e:	9305      	str	r3, [sp, #20]
 8007aa0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007b6c <_svfiprintf_r+0x1fc>
 8007aa4:	7821      	ldrb	r1, [r4, #0]
 8007aa6:	2203      	movs	r2, #3
 8007aa8:	4650      	mov	r0, sl
 8007aaa:	f7f8 fb99 	bl	80001e0 <memchr>
 8007aae:	b140      	cbz	r0, 8007ac2 <_svfiprintf_r+0x152>
 8007ab0:	2340      	movs	r3, #64	; 0x40
 8007ab2:	eba0 000a 	sub.w	r0, r0, sl
 8007ab6:	fa03 f000 	lsl.w	r0, r3, r0
 8007aba:	9b04      	ldr	r3, [sp, #16]
 8007abc:	4303      	orrs	r3, r0
 8007abe:	3401      	adds	r4, #1
 8007ac0:	9304      	str	r3, [sp, #16]
 8007ac2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ac6:	4826      	ldr	r0, [pc, #152]	; (8007b60 <_svfiprintf_r+0x1f0>)
 8007ac8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007acc:	2206      	movs	r2, #6
 8007ace:	f7f8 fb87 	bl	80001e0 <memchr>
 8007ad2:	2800      	cmp	r0, #0
 8007ad4:	d038      	beq.n	8007b48 <_svfiprintf_r+0x1d8>
 8007ad6:	4b23      	ldr	r3, [pc, #140]	; (8007b64 <_svfiprintf_r+0x1f4>)
 8007ad8:	bb1b      	cbnz	r3, 8007b22 <_svfiprintf_r+0x1b2>
 8007ada:	9b03      	ldr	r3, [sp, #12]
 8007adc:	3307      	adds	r3, #7
 8007ade:	f023 0307 	bic.w	r3, r3, #7
 8007ae2:	3308      	adds	r3, #8
 8007ae4:	9303      	str	r3, [sp, #12]
 8007ae6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ae8:	4433      	add	r3, r6
 8007aea:	9309      	str	r3, [sp, #36]	; 0x24
 8007aec:	e767      	b.n	80079be <_svfiprintf_r+0x4e>
 8007aee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007af2:	460c      	mov	r4, r1
 8007af4:	2001      	movs	r0, #1
 8007af6:	e7a5      	b.n	8007a44 <_svfiprintf_r+0xd4>
 8007af8:	2300      	movs	r3, #0
 8007afa:	3401      	adds	r4, #1
 8007afc:	9305      	str	r3, [sp, #20]
 8007afe:	4619      	mov	r1, r3
 8007b00:	f04f 0c0a 	mov.w	ip, #10
 8007b04:	4620      	mov	r0, r4
 8007b06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007b0a:	3a30      	subs	r2, #48	; 0x30
 8007b0c:	2a09      	cmp	r2, #9
 8007b0e:	d903      	bls.n	8007b18 <_svfiprintf_r+0x1a8>
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d0c5      	beq.n	8007aa0 <_svfiprintf_r+0x130>
 8007b14:	9105      	str	r1, [sp, #20]
 8007b16:	e7c3      	b.n	8007aa0 <_svfiprintf_r+0x130>
 8007b18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007b1c:	4604      	mov	r4, r0
 8007b1e:	2301      	movs	r3, #1
 8007b20:	e7f0      	b.n	8007b04 <_svfiprintf_r+0x194>
 8007b22:	ab03      	add	r3, sp, #12
 8007b24:	9300      	str	r3, [sp, #0]
 8007b26:	462a      	mov	r2, r5
 8007b28:	4b0f      	ldr	r3, [pc, #60]	; (8007b68 <_svfiprintf_r+0x1f8>)
 8007b2a:	a904      	add	r1, sp, #16
 8007b2c:	4638      	mov	r0, r7
 8007b2e:	f3af 8000 	nop.w
 8007b32:	1c42      	adds	r2, r0, #1
 8007b34:	4606      	mov	r6, r0
 8007b36:	d1d6      	bne.n	8007ae6 <_svfiprintf_r+0x176>
 8007b38:	89ab      	ldrh	r3, [r5, #12]
 8007b3a:	065b      	lsls	r3, r3, #25
 8007b3c:	f53f af2c 	bmi.w	8007998 <_svfiprintf_r+0x28>
 8007b40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007b42:	b01d      	add	sp, #116	; 0x74
 8007b44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007b48:	ab03      	add	r3, sp, #12
 8007b4a:	9300      	str	r3, [sp, #0]
 8007b4c:	462a      	mov	r2, r5
 8007b4e:	4b06      	ldr	r3, [pc, #24]	; (8007b68 <_svfiprintf_r+0x1f8>)
 8007b50:	a904      	add	r1, sp, #16
 8007b52:	4638      	mov	r0, r7
 8007b54:	f000 f9d4 	bl	8007f00 <_printf_i>
 8007b58:	e7eb      	b.n	8007b32 <_svfiprintf_r+0x1c2>
 8007b5a:	bf00      	nop
 8007b5c:	0800874a 	.word	0x0800874a
 8007b60:	08008754 	.word	0x08008754
 8007b64:	00000000 	.word	0x00000000
 8007b68:	080078b9 	.word	0x080078b9
 8007b6c:	08008750 	.word	0x08008750

08007b70 <__sfputc_r>:
 8007b70:	6893      	ldr	r3, [r2, #8]
 8007b72:	3b01      	subs	r3, #1
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	b410      	push	{r4}
 8007b78:	6093      	str	r3, [r2, #8]
 8007b7a:	da08      	bge.n	8007b8e <__sfputc_r+0x1e>
 8007b7c:	6994      	ldr	r4, [r2, #24]
 8007b7e:	42a3      	cmp	r3, r4
 8007b80:	db01      	blt.n	8007b86 <__sfputc_r+0x16>
 8007b82:	290a      	cmp	r1, #10
 8007b84:	d103      	bne.n	8007b8e <__sfputc_r+0x1e>
 8007b86:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b8a:	f000 baf1 	b.w	8008170 <__swbuf_r>
 8007b8e:	6813      	ldr	r3, [r2, #0]
 8007b90:	1c58      	adds	r0, r3, #1
 8007b92:	6010      	str	r0, [r2, #0]
 8007b94:	7019      	strb	r1, [r3, #0]
 8007b96:	4608      	mov	r0, r1
 8007b98:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007b9c:	4770      	bx	lr

08007b9e <__sfputs_r>:
 8007b9e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba0:	4606      	mov	r6, r0
 8007ba2:	460f      	mov	r7, r1
 8007ba4:	4614      	mov	r4, r2
 8007ba6:	18d5      	adds	r5, r2, r3
 8007ba8:	42ac      	cmp	r4, r5
 8007baa:	d101      	bne.n	8007bb0 <__sfputs_r+0x12>
 8007bac:	2000      	movs	r0, #0
 8007bae:	e007      	b.n	8007bc0 <__sfputs_r+0x22>
 8007bb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007bb4:	463a      	mov	r2, r7
 8007bb6:	4630      	mov	r0, r6
 8007bb8:	f7ff ffda 	bl	8007b70 <__sfputc_r>
 8007bbc:	1c43      	adds	r3, r0, #1
 8007bbe:	d1f3      	bne.n	8007ba8 <__sfputs_r+0xa>
 8007bc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007bc4 <_vfiprintf_r>:
 8007bc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007bc8:	460d      	mov	r5, r1
 8007bca:	b09d      	sub	sp, #116	; 0x74
 8007bcc:	4614      	mov	r4, r2
 8007bce:	4698      	mov	r8, r3
 8007bd0:	4606      	mov	r6, r0
 8007bd2:	b118      	cbz	r0, 8007bdc <_vfiprintf_r+0x18>
 8007bd4:	6983      	ldr	r3, [r0, #24]
 8007bd6:	b90b      	cbnz	r3, 8007bdc <_vfiprintf_r+0x18>
 8007bd8:	f7ff fa2e 	bl	8007038 <__sinit>
 8007bdc:	4b89      	ldr	r3, [pc, #548]	; (8007e04 <_vfiprintf_r+0x240>)
 8007bde:	429d      	cmp	r5, r3
 8007be0:	d11b      	bne.n	8007c1a <_vfiprintf_r+0x56>
 8007be2:	6875      	ldr	r5, [r6, #4]
 8007be4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007be6:	07d9      	lsls	r1, r3, #31
 8007be8:	d405      	bmi.n	8007bf6 <_vfiprintf_r+0x32>
 8007bea:	89ab      	ldrh	r3, [r5, #12]
 8007bec:	059a      	lsls	r2, r3, #22
 8007bee:	d402      	bmi.n	8007bf6 <_vfiprintf_r+0x32>
 8007bf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007bf2:	f7ff fae4 	bl	80071be <__retarget_lock_acquire_recursive>
 8007bf6:	89ab      	ldrh	r3, [r5, #12]
 8007bf8:	071b      	lsls	r3, r3, #28
 8007bfa:	d501      	bpl.n	8007c00 <_vfiprintf_r+0x3c>
 8007bfc:	692b      	ldr	r3, [r5, #16]
 8007bfe:	b9eb      	cbnz	r3, 8007c3c <_vfiprintf_r+0x78>
 8007c00:	4629      	mov	r1, r5
 8007c02:	4630      	mov	r0, r6
 8007c04:	f000 fb06 	bl	8008214 <__swsetup_r>
 8007c08:	b1c0      	cbz	r0, 8007c3c <_vfiprintf_r+0x78>
 8007c0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007c0c:	07dc      	lsls	r4, r3, #31
 8007c0e:	d50e      	bpl.n	8007c2e <_vfiprintf_r+0x6a>
 8007c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007c14:	b01d      	add	sp, #116	; 0x74
 8007c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c1a:	4b7b      	ldr	r3, [pc, #492]	; (8007e08 <_vfiprintf_r+0x244>)
 8007c1c:	429d      	cmp	r5, r3
 8007c1e:	d101      	bne.n	8007c24 <_vfiprintf_r+0x60>
 8007c20:	68b5      	ldr	r5, [r6, #8]
 8007c22:	e7df      	b.n	8007be4 <_vfiprintf_r+0x20>
 8007c24:	4b79      	ldr	r3, [pc, #484]	; (8007e0c <_vfiprintf_r+0x248>)
 8007c26:	429d      	cmp	r5, r3
 8007c28:	bf08      	it	eq
 8007c2a:	68f5      	ldreq	r5, [r6, #12]
 8007c2c:	e7da      	b.n	8007be4 <_vfiprintf_r+0x20>
 8007c2e:	89ab      	ldrh	r3, [r5, #12]
 8007c30:	0598      	lsls	r0, r3, #22
 8007c32:	d4ed      	bmi.n	8007c10 <_vfiprintf_r+0x4c>
 8007c34:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007c36:	f7ff fac3 	bl	80071c0 <__retarget_lock_release_recursive>
 8007c3a:	e7e9      	b.n	8007c10 <_vfiprintf_r+0x4c>
 8007c3c:	2300      	movs	r3, #0
 8007c3e:	9309      	str	r3, [sp, #36]	; 0x24
 8007c40:	2320      	movs	r3, #32
 8007c42:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007c46:	f8cd 800c 	str.w	r8, [sp, #12]
 8007c4a:	2330      	movs	r3, #48	; 0x30
 8007c4c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8007e10 <_vfiprintf_r+0x24c>
 8007c50:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007c54:	f04f 0901 	mov.w	r9, #1
 8007c58:	4623      	mov	r3, r4
 8007c5a:	469a      	mov	sl, r3
 8007c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007c60:	b10a      	cbz	r2, 8007c66 <_vfiprintf_r+0xa2>
 8007c62:	2a25      	cmp	r2, #37	; 0x25
 8007c64:	d1f9      	bne.n	8007c5a <_vfiprintf_r+0x96>
 8007c66:	ebba 0b04 	subs.w	fp, sl, r4
 8007c6a:	d00b      	beq.n	8007c84 <_vfiprintf_r+0xc0>
 8007c6c:	465b      	mov	r3, fp
 8007c6e:	4622      	mov	r2, r4
 8007c70:	4629      	mov	r1, r5
 8007c72:	4630      	mov	r0, r6
 8007c74:	f7ff ff93 	bl	8007b9e <__sfputs_r>
 8007c78:	3001      	adds	r0, #1
 8007c7a:	f000 80aa 	beq.w	8007dd2 <_vfiprintf_r+0x20e>
 8007c7e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007c80:	445a      	add	r2, fp
 8007c82:	9209      	str	r2, [sp, #36]	; 0x24
 8007c84:	f89a 3000 	ldrb.w	r3, [sl]
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	f000 80a2 	beq.w	8007dd2 <_vfiprintf_r+0x20e>
 8007c8e:	2300      	movs	r3, #0
 8007c90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c98:	f10a 0a01 	add.w	sl, sl, #1
 8007c9c:	9304      	str	r3, [sp, #16]
 8007c9e:	9307      	str	r3, [sp, #28]
 8007ca0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007ca4:	931a      	str	r3, [sp, #104]	; 0x68
 8007ca6:	4654      	mov	r4, sl
 8007ca8:	2205      	movs	r2, #5
 8007caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cae:	4858      	ldr	r0, [pc, #352]	; (8007e10 <_vfiprintf_r+0x24c>)
 8007cb0:	f7f8 fa96 	bl	80001e0 <memchr>
 8007cb4:	9a04      	ldr	r2, [sp, #16]
 8007cb6:	b9d8      	cbnz	r0, 8007cf0 <_vfiprintf_r+0x12c>
 8007cb8:	06d1      	lsls	r1, r2, #27
 8007cba:	bf44      	itt	mi
 8007cbc:	2320      	movmi	r3, #32
 8007cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007cc2:	0713      	lsls	r3, r2, #28
 8007cc4:	bf44      	itt	mi
 8007cc6:	232b      	movmi	r3, #43	; 0x2b
 8007cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8007cd0:	2b2a      	cmp	r3, #42	; 0x2a
 8007cd2:	d015      	beq.n	8007d00 <_vfiprintf_r+0x13c>
 8007cd4:	9a07      	ldr	r2, [sp, #28]
 8007cd6:	4654      	mov	r4, sl
 8007cd8:	2000      	movs	r0, #0
 8007cda:	f04f 0c0a 	mov.w	ip, #10
 8007cde:	4621      	mov	r1, r4
 8007ce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ce4:	3b30      	subs	r3, #48	; 0x30
 8007ce6:	2b09      	cmp	r3, #9
 8007ce8:	d94e      	bls.n	8007d88 <_vfiprintf_r+0x1c4>
 8007cea:	b1b0      	cbz	r0, 8007d1a <_vfiprintf_r+0x156>
 8007cec:	9207      	str	r2, [sp, #28]
 8007cee:	e014      	b.n	8007d1a <_vfiprintf_r+0x156>
 8007cf0:	eba0 0308 	sub.w	r3, r0, r8
 8007cf4:	fa09 f303 	lsl.w	r3, r9, r3
 8007cf8:	4313      	orrs	r3, r2
 8007cfa:	9304      	str	r3, [sp, #16]
 8007cfc:	46a2      	mov	sl, r4
 8007cfe:	e7d2      	b.n	8007ca6 <_vfiprintf_r+0xe2>
 8007d00:	9b03      	ldr	r3, [sp, #12]
 8007d02:	1d19      	adds	r1, r3, #4
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	9103      	str	r1, [sp, #12]
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	bfbb      	ittet	lt
 8007d0c:	425b      	neglt	r3, r3
 8007d0e:	f042 0202 	orrlt.w	r2, r2, #2
 8007d12:	9307      	strge	r3, [sp, #28]
 8007d14:	9307      	strlt	r3, [sp, #28]
 8007d16:	bfb8      	it	lt
 8007d18:	9204      	strlt	r2, [sp, #16]
 8007d1a:	7823      	ldrb	r3, [r4, #0]
 8007d1c:	2b2e      	cmp	r3, #46	; 0x2e
 8007d1e:	d10c      	bne.n	8007d3a <_vfiprintf_r+0x176>
 8007d20:	7863      	ldrb	r3, [r4, #1]
 8007d22:	2b2a      	cmp	r3, #42	; 0x2a
 8007d24:	d135      	bne.n	8007d92 <_vfiprintf_r+0x1ce>
 8007d26:	9b03      	ldr	r3, [sp, #12]
 8007d28:	1d1a      	adds	r2, r3, #4
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	9203      	str	r2, [sp, #12]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	bfb8      	it	lt
 8007d32:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8007d36:	3402      	adds	r4, #2
 8007d38:	9305      	str	r3, [sp, #20]
 8007d3a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8007e20 <_vfiprintf_r+0x25c>
 8007d3e:	7821      	ldrb	r1, [r4, #0]
 8007d40:	2203      	movs	r2, #3
 8007d42:	4650      	mov	r0, sl
 8007d44:	f7f8 fa4c 	bl	80001e0 <memchr>
 8007d48:	b140      	cbz	r0, 8007d5c <_vfiprintf_r+0x198>
 8007d4a:	2340      	movs	r3, #64	; 0x40
 8007d4c:	eba0 000a 	sub.w	r0, r0, sl
 8007d50:	fa03 f000 	lsl.w	r0, r3, r0
 8007d54:	9b04      	ldr	r3, [sp, #16]
 8007d56:	4303      	orrs	r3, r0
 8007d58:	3401      	adds	r4, #1
 8007d5a:	9304      	str	r3, [sp, #16]
 8007d5c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007d60:	482c      	ldr	r0, [pc, #176]	; (8007e14 <_vfiprintf_r+0x250>)
 8007d62:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007d66:	2206      	movs	r2, #6
 8007d68:	f7f8 fa3a 	bl	80001e0 <memchr>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d03f      	beq.n	8007df0 <_vfiprintf_r+0x22c>
 8007d70:	4b29      	ldr	r3, [pc, #164]	; (8007e18 <_vfiprintf_r+0x254>)
 8007d72:	bb1b      	cbnz	r3, 8007dbc <_vfiprintf_r+0x1f8>
 8007d74:	9b03      	ldr	r3, [sp, #12]
 8007d76:	3307      	adds	r3, #7
 8007d78:	f023 0307 	bic.w	r3, r3, #7
 8007d7c:	3308      	adds	r3, #8
 8007d7e:	9303      	str	r3, [sp, #12]
 8007d80:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d82:	443b      	add	r3, r7
 8007d84:	9309      	str	r3, [sp, #36]	; 0x24
 8007d86:	e767      	b.n	8007c58 <_vfiprintf_r+0x94>
 8007d88:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d8c:	460c      	mov	r4, r1
 8007d8e:	2001      	movs	r0, #1
 8007d90:	e7a5      	b.n	8007cde <_vfiprintf_r+0x11a>
 8007d92:	2300      	movs	r3, #0
 8007d94:	3401      	adds	r4, #1
 8007d96:	9305      	str	r3, [sp, #20]
 8007d98:	4619      	mov	r1, r3
 8007d9a:	f04f 0c0a 	mov.w	ip, #10
 8007d9e:	4620      	mov	r0, r4
 8007da0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007da4:	3a30      	subs	r2, #48	; 0x30
 8007da6:	2a09      	cmp	r2, #9
 8007da8:	d903      	bls.n	8007db2 <_vfiprintf_r+0x1ee>
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d0c5      	beq.n	8007d3a <_vfiprintf_r+0x176>
 8007dae:	9105      	str	r1, [sp, #20]
 8007db0:	e7c3      	b.n	8007d3a <_vfiprintf_r+0x176>
 8007db2:	fb0c 2101 	mla	r1, ip, r1, r2
 8007db6:	4604      	mov	r4, r0
 8007db8:	2301      	movs	r3, #1
 8007dba:	e7f0      	b.n	8007d9e <_vfiprintf_r+0x1da>
 8007dbc:	ab03      	add	r3, sp, #12
 8007dbe:	9300      	str	r3, [sp, #0]
 8007dc0:	462a      	mov	r2, r5
 8007dc2:	4b16      	ldr	r3, [pc, #88]	; (8007e1c <_vfiprintf_r+0x258>)
 8007dc4:	a904      	add	r1, sp, #16
 8007dc6:	4630      	mov	r0, r6
 8007dc8:	f3af 8000 	nop.w
 8007dcc:	4607      	mov	r7, r0
 8007dce:	1c78      	adds	r0, r7, #1
 8007dd0:	d1d6      	bne.n	8007d80 <_vfiprintf_r+0x1bc>
 8007dd2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007dd4:	07d9      	lsls	r1, r3, #31
 8007dd6:	d405      	bmi.n	8007de4 <_vfiprintf_r+0x220>
 8007dd8:	89ab      	ldrh	r3, [r5, #12]
 8007dda:	059a      	lsls	r2, r3, #22
 8007ddc:	d402      	bmi.n	8007de4 <_vfiprintf_r+0x220>
 8007dde:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007de0:	f7ff f9ee 	bl	80071c0 <__retarget_lock_release_recursive>
 8007de4:	89ab      	ldrh	r3, [r5, #12]
 8007de6:	065b      	lsls	r3, r3, #25
 8007de8:	f53f af12 	bmi.w	8007c10 <_vfiprintf_r+0x4c>
 8007dec:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007dee:	e711      	b.n	8007c14 <_vfiprintf_r+0x50>
 8007df0:	ab03      	add	r3, sp, #12
 8007df2:	9300      	str	r3, [sp, #0]
 8007df4:	462a      	mov	r2, r5
 8007df6:	4b09      	ldr	r3, [pc, #36]	; (8007e1c <_vfiprintf_r+0x258>)
 8007df8:	a904      	add	r1, sp, #16
 8007dfa:	4630      	mov	r0, r6
 8007dfc:	f000 f880 	bl	8007f00 <_printf_i>
 8007e00:	e7e4      	b.n	8007dcc <_vfiprintf_r+0x208>
 8007e02:	bf00      	nop
 8007e04:	08008658 	.word	0x08008658
 8007e08:	08008678 	.word	0x08008678
 8007e0c:	08008638 	.word	0x08008638
 8007e10:	0800874a 	.word	0x0800874a
 8007e14:	08008754 	.word	0x08008754
 8007e18:	00000000 	.word	0x00000000
 8007e1c:	08007b9f 	.word	0x08007b9f
 8007e20:	08008750 	.word	0x08008750

08007e24 <_printf_common>:
 8007e24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007e28:	4616      	mov	r6, r2
 8007e2a:	4699      	mov	r9, r3
 8007e2c:	688a      	ldr	r2, [r1, #8]
 8007e2e:	690b      	ldr	r3, [r1, #16]
 8007e30:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007e34:	4293      	cmp	r3, r2
 8007e36:	bfb8      	it	lt
 8007e38:	4613      	movlt	r3, r2
 8007e3a:	6033      	str	r3, [r6, #0]
 8007e3c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007e40:	4607      	mov	r7, r0
 8007e42:	460c      	mov	r4, r1
 8007e44:	b10a      	cbz	r2, 8007e4a <_printf_common+0x26>
 8007e46:	3301      	adds	r3, #1
 8007e48:	6033      	str	r3, [r6, #0]
 8007e4a:	6823      	ldr	r3, [r4, #0]
 8007e4c:	0699      	lsls	r1, r3, #26
 8007e4e:	bf42      	ittt	mi
 8007e50:	6833      	ldrmi	r3, [r6, #0]
 8007e52:	3302      	addmi	r3, #2
 8007e54:	6033      	strmi	r3, [r6, #0]
 8007e56:	6825      	ldr	r5, [r4, #0]
 8007e58:	f015 0506 	ands.w	r5, r5, #6
 8007e5c:	d106      	bne.n	8007e6c <_printf_common+0x48>
 8007e5e:	f104 0a19 	add.w	sl, r4, #25
 8007e62:	68e3      	ldr	r3, [r4, #12]
 8007e64:	6832      	ldr	r2, [r6, #0]
 8007e66:	1a9b      	subs	r3, r3, r2
 8007e68:	42ab      	cmp	r3, r5
 8007e6a:	dc26      	bgt.n	8007eba <_printf_common+0x96>
 8007e6c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007e70:	1e13      	subs	r3, r2, #0
 8007e72:	6822      	ldr	r2, [r4, #0]
 8007e74:	bf18      	it	ne
 8007e76:	2301      	movne	r3, #1
 8007e78:	0692      	lsls	r2, r2, #26
 8007e7a:	d42b      	bmi.n	8007ed4 <_printf_common+0xb0>
 8007e7c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007e80:	4649      	mov	r1, r9
 8007e82:	4638      	mov	r0, r7
 8007e84:	47c0      	blx	r8
 8007e86:	3001      	adds	r0, #1
 8007e88:	d01e      	beq.n	8007ec8 <_printf_common+0xa4>
 8007e8a:	6823      	ldr	r3, [r4, #0]
 8007e8c:	68e5      	ldr	r5, [r4, #12]
 8007e8e:	6832      	ldr	r2, [r6, #0]
 8007e90:	f003 0306 	and.w	r3, r3, #6
 8007e94:	2b04      	cmp	r3, #4
 8007e96:	bf08      	it	eq
 8007e98:	1aad      	subeq	r5, r5, r2
 8007e9a:	68a3      	ldr	r3, [r4, #8]
 8007e9c:	6922      	ldr	r2, [r4, #16]
 8007e9e:	bf0c      	ite	eq
 8007ea0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ea4:	2500      	movne	r5, #0
 8007ea6:	4293      	cmp	r3, r2
 8007ea8:	bfc4      	itt	gt
 8007eaa:	1a9b      	subgt	r3, r3, r2
 8007eac:	18ed      	addgt	r5, r5, r3
 8007eae:	2600      	movs	r6, #0
 8007eb0:	341a      	adds	r4, #26
 8007eb2:	42b5      	cmp	r5, r6
 8007eb4:	d11a      	bne.n	8007eec <_printf_common+0xc8>
 8007eb6:	2000      	movs	r0, #0
 8007eb8:	e008      	b.n	8007ecc <_printf_common+0xa8>
 8007eba:	2301      	movs	r3, #1
 8007ebc:	4652      	mov	r2, sl
 8007ebe:	4649      	mov	r1, r9
 8007ec0:	4638      	mov	r0, r7
 8007ec2:	47c0      	blx	r8
 8007ec4:	3001      	adds	r0, #1
 8007ec6:	d103      	bne.n	8007ed0 <_printf_common+0xac>
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed0:	3501      	adds	r5, #1
 8007ed2:	e7c6      	b.n	8007e62 <_printf_common+0x3e>
 8007ed4:	18e1      	adds	r1, r4, r3
 8007ed6:	1c5a      	adds	r2, r3, #1
 8007ed8:	2030      	movs	r0, #48	; 0x30
 8007eda:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007ede:	4422      	add	r2, r4
 8007ee0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007ee4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007ee8:	3302      	adds	r3, #2
 8007eea:	e7c7      	b.n	8007e7c <_printf_common+0x58>
 8007eec:	2301      	movs	r3, #1
 8007eee:	4622      	mov	r2, r4
 8007ef0:	4649      	mov	r1, r9
 8007ef2:	4638      	mov	r0, r7
 8007ef4:	47c0      	blx	r8
 8007ef6:	3001      	adds	r0, #1
 8007ef8:	d0e6      	beq.n	8007ec8 <_printf_common+0xa4>
 8007efa:	3601      	adds	r6, #1
 8007efc:	e7d9      	b.n	8007eb2 <_printf_common+0x8e>
	...

08007f00 <_printf_i>:
 8007f00:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007f04:	7e0f      	ldrb	r7, [r1, #24]
 8007f06:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007f08:	2f78      	cmp	r7, #120	; 0x78
 8007f0a:	4691      	mov	r9, r2
 8007f0c:	4680      	mov	r8, r0
 8007f0e:	460c      	mov	r4, r1
 8007f10:	469a      	mov	sl, r3
 8007f12:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007f16:	d807      	bhi.n	8007f28 <_printf_i+0x28>
 8007f18:	2f62      	cmp	r7, #98	; 0x62
 8007f1a:	d80a      	bhi.n	8007f32 <_printf_i+0x32>
 8007f1c:	2f00      	cmp	r7, #0
 8007f1e:	f000 80d8 	beq.w	80080d2 <_printf_i+0x1d2>
 8007f22:	2f58      	cmp	r7, #88	; 0x58
 8007f24:	f000 80a3 	beq.w	800806e <_printf_i+0x16e>
 8007f28:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007f2c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007f30:	e03a      	b.n	8007fa8 <_printf_i+0xa8>
 8007f32:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007f36:	2b15      	cmp	r3, #21
 8007f38:	d8f6      	bhi.n	8007f28 <_printf_i+0x28>
 8007f3a:	a101      	add	r1, pc, #4	; (adr r1, 8007f40 <_printf_i+0x40>)
 8007f3c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007f40:	08007f99 	.word	0x08007f99
 8007f44:	08007fad 	.word	0x08007fad
 8007f48:	08007f29 	.word	0x08007f29
 8007f4c:	08007f29 	.word	0x08007f29
 8007f50:	08007f29 	.word	0x08007f29
 8007f54:	08007f29 	.word	0x08007f29
 8007f58:	08007fad 	.word	0x08007fad
 8007f5c:	08007f29 	.word	0x08007f29
 8007f60:	08007f29 	.word	0x08007f29
 8007f64:	08007f29 	.word	0x08007f29
 8007f68:	08007f29 	.word	0x08007f29
 8007f6c:	080080b9 	.word	0x080080b9
 8007f70:	08007fdd 	.word	0x08007fdd
 8007f74:	0800809b 	.word	0x0800809b
 8007f78:	08007f29 	.word	0x08007f29
 8007f7c:	08007f29 	.word	0x08007f29
 8007f80:	080080db 	.word	0x080080db
 8007f84:	08007f29 	.word	0x08007f29
 8007f88:	08007fdd 	.word	0x08007fdd
 8007f8c:	08007f29 	.word	0x08007f29
 8007f90:	08007f29 	.word	0x08007f29
 8007f94:	080080a3 	.word	0x080080a3
 8007f98:	682b      	ldr	r3, [r5, #0]
 8007f9a:	1d1a      	adds	r2, r3, #4
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	602a      	str	r2, [r5, #0]
 8007fa0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007fa4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007fa8:	2301      	movs	r3, #1
 8007faa:	e0a3      	b.n	80080f4 <_printf_i+0x1f4>
 8007fac:	6820      	ldr	r0, [r4, #0]
 8007fae:	6829      	ldr	r1, [r5, #0]
 8007fb0:	0606      	lsls	r6, r0, #24
 8007fb2:	f101 0304 	add.w	r3, r1, #4
 8007fb6:	d50a      	bpl.n	8007fce <_printf_i+0xce>
 8007fb8:	680e      	ldr	r6, [r1, #0]
 8007fba:	602b      	str	r3, [r5, #0]
 8007fbc:	2e00      	cmp	r6, #0
 8007fbe:	da03      	bge.n	8007fc8 <_printf_i+0xc8>
 8007fc0:	232d      	movs	r3, #45	; 0x2d
 8007fc2:	4276      	negs	r6, r6
 8007fc4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007fc8:	485e      	ldr	r0, [pc, #376]	; (8008144 <_printf_i+0x244>)
 8007fca:	230a      	movs	r3, #10
 8007fcc:	e019      	b.n	8008002 <_printf_i+0x102>
 8007fce:	680e      	ldr	r6, [r1, #0]
 8007fd0:	602b      	str	r3, [r5, #0]
 8007fd2:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007fd6:	bf18      	it	ne
 8007fd8:	b236      	sxthne	r6, r6
 8007fda:	e7ef      	b.n	8007fbc <_printf_i+0xbc>
 8007fdc:	682b      	ldr	r3, [r5, #0]
 8007fde:	6820      	ldr	r0, [r4, #0]
 8007fe0:	1d19      	adds	r1, r3, #4
 8007fe2:	6029      	str	r1, [r5, #0]
 8007fe4:	0601      	lsls	r1, r0, #24
 8007fe6:	d501      	bpl.n	8007fec <_printf_i+0xec>
 8007fe8:	681e      	ldr	r6, [r3, #0]
 8007fea:	e002      	b.n	8007ff2 <_printf_i+0xf2>
 8007fec:	0646      	lsls	r6, r0, #25
 8007fee:	d5fb      	bpl.n	8007fe8 <_printf_i+0xe8>
 8007ff0:	881e      	ldrh	r6, [r3, #0]
 8007ff2:	4854      	ldr	r0, [pc, #336]	; (8008144 <_printf_i+0x244>)
 8007ff4:	2f6f      	cmp	r7, #111	; 0x6f
 8007ff6:	bf0c      	ite	eq
 8007ff8:	2308      	moveq	r3, #8
 8007ffa:	230a      	movne	r3, #10
 8007ffc:	2100      	movs	r1, #0
 8007ffe:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008002:	6865      	ldr	r5, [r4, #4]
 8008004:	60a5      	str	r5, [r4, #8]
 8008006:	2d00      	cmp	r5, #0
 8008008:	bfa2      	ittt	ge
 800800a:	6821      	ldrge	r1, [r4, #0]
 800800c:	f021 0104 	bicge.w	r1, r1, #4
 8008010:	6021      	strge	r1, [r4, #0]
 8008012:	b90e      	cbnz	r6, 8008018 <_printf_i+0x118>
 8008014:	2d00      	cmp	r5, #0
 8008016:	d04d      	beq.n	80080b4 <_printf_i+0x1b4>
 8008018:	4615      	mov	r5, r2
 800801a:	fbb6 f1f3 	udiv	r1, r6, r3
 800801e:	fb03 6711 	mls	r7, r3, r1, r6
 8008022:	5dc7      	ldrb	r7, [r0, r7]
 8008024:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8008028:	4637      	mov	r7, r6
 800802a:	42bb      	cmp	r3, r7
 800802c:	460e      	mov	r6, r1
 800802e:	d9f4      	bls.n	800801a <_printf_i+0x11a>
 8008030:	2b08      	cmp	r3, #8
 8008032:	d10b      	bne.n	800804c <_printf_i+0x14c>
 8008034:	6823      	ldr	r3, [r4, #0]
 8008036:	07de      	lsls	r6, r3, #31
 8008038:	d508      	bpl.n	800804c <_printf_i+0x14c>
 800803a:	6923      	ldr	r3, [r4, #16]
 800803c:	6861      	ldr	r1, [r4, #4]
 800803e:	4299      	cmp	r1, r3
 8008040:	bfde      	ittt	le
 8008042:	2330      	movle	r3, #48	; 0x30
 8008044:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008048:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 800804c:	1b52      	subs	r2, r2, r5
 800804e:	6122      	str	r2, [r4, #16]
 8008050:	f8cd a000 	str.w	sl, [sp]
 8008054:	464b      	mov	r3, r9
 8008056:	aa03      	add	r2, sp, #12
 8008058:	4621      	mov	r1, r4
 800805a:	4640      	mov	r0, r8
 800805c:	f7ff fee2 	bl	8007e24 <_printf_common>
 8008060:	3001      	adds	r0, #1
 8008062:	d14c      	bne.n	80080fe <_printf_i+0x1fe>
 8008064:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008068:	b004      	add	sp, #16
 800806a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800806e:	4835      	ldr	r0, [pc, #212]	; (8008144 <_printf_i+0x244>)
 8008070:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008074:	6829      	ldr	r1, [r5, #0]
 8008076:	6823      	ldr	r3, [r4, #0]
 8008078:	f851 6b04 	ldr.w	r6, [r1], #4
 800807c:	6029      	str	r1, [r5, #0]
 800807e:	061d      	lsls	r5, r3, #24
 8008080:	d514      	bpl.n	80080ac <_printf_i+0x1ac>
 8008082:	07df      	lsls	r7, r3, #31
 8008084:	bf44      	itt	mi
 8008086:	f043 0320 	orrmi.w	r3, r3, #32
 800808a:	6023      	strmi	r3, [r4, #0]
 800808c:	b91e      	cbnz	r6, 8008096 <_printf_i+0x196>
 800808e:	6823      	ldr	r3, [r4, #0]
 8008090:	f023 0320 	bic.w	r3, r3, #32
 8008094:	6023      	str	r3, [r4, #0]
 8008096:	2310      	movs	r3, #16
 8008098:	e7b0      	b.n	8007ffc <_printf_i+0xfc>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	f043 0320 	orr.w	r3, r3, #32
 80080a0:	6023      	str	r3, [r4, #0]
 80080a2:	2378      	movs	r3, #120	; 0x78
 80080a4:	4828      	ldr	r0, [pc, #160]	; (8008148 <_printf_i+0x248>)
 80080a6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80080aa:	e7e3      	b.n	8008074 <_printf_i+0x174>
 80080ac:	0659      	lsls	r1, r3, #25
 80080ae:	bf48      	it	mi
 80080b0:	b2b6      	uxthmi	r6, r6
 80080b2:	e7e6      	b.n	8008082 <_printf_i+0x182>
 80080b4:	4615      	mov	r5, r2
 80080b6:	e7bb      	b.n	8008030 <_printf_i+0x130>
 80080b8:	682b      	ldr	r3, [r5, #0]
 80080ba:	6826      	ldr	r6, [r4, #0]
 80080bc:	6961      	ldr	r1, [r4, #20]
 80080be:	1d18      	adds	r0, r3, #4
 80080c0:	6028      	str	r0, [r5, #0]
 80080c2:	0635      	lsls	r5, r6, #24
 80080c4:	681b      	ldr	r3, [r3, #0]
 80080c6:	d501      	bpl.n	80080cc <_printf_i+0x1cc>
 80080c8:	6019      	str	r1, [r3, #0]
 80080ca:	e002      	b.n	80080d2 <_printf_i+0x1d2>
 80080cc:	0670      	lsls	r0, r6, #25
 80080ce:	d5fb      	bpl.n	80080c8 <_printf_i+0x1c8>
 80080d0:	8019      	strh	r1, [r3, #0]
 80080d2:	2300      	movs	r3, #0
 80080d4:	6123      	str	r3, [r4, #16]
 80080d6:	4615      	mov	r5, r2
 80080d8:	e7ba      	b.n	8008050 <_printf_i+0x150>
 80080da:	682b      	ldr	r3, [r5, #0]
 80080dc:	1d1a      	adds	r2, r3, #4
 80080de:	602a      	str	r2, [r5, #0]
 80080e0:	681d      	ldr	r5, [r3, #0]
 80080e2:	6862      	ldr	r2, [r4, #4]
 80080e4:	2100      	movs	r1, #0
 80080e6:	4628      	mov	r0, r5
 80080e8:	f7f8 f87a 	bl	80001e0 <memchr>
 80080ec:	b108      	cbz	r0, 80080f2 <_printf_i+0x1f2>
 80080ee:	1b40      	subs	r0, r0, r5
 80080f0:	6060      	str	r0, [r4, #4]
 80080f2:	6863      	ldr	r3, [r4, #4]
 80080f4:	6123      	str	r3, [r4, #16]
 80080f6:	2300      	movs	r3, #0
 80080f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080fc:	e7a8      	b.n	8008050 <_printf_i+0x150>
 80080fe:	6923      	ldr	r3, [r4, #16]
 8008100:	462a      	mov	r2, r5
 8008102:	4649      	mov	r1, r9
 8008104:	4640      	mov	r0, r8
 8008106:	47d0      	blx	sl
 8008108:	3001      	adds	r0, #1
 800810a:	d0ab      	beq.n	8008064 <_printf_i+0x164>
 800810c:	6823      	ldr	r3, [r4, #0]
 800810e:	079b      	lsls	r3, r3, #30
 8008110:	d413      	bmi.n	800813a <_printf_i+0x23a>
 8008112:	68e0      	ldr	r0, [r4, #12]
 8008114:	9b03      	ldr	r3, [sp, #12]
 8008116:	4298      	cmp	r0, r3
 8008118:	bfb8      	it	lt
 800811a:	4618      	movlt	r0, r3
 800811c:	e7a4      	b.n	8008068 <_printf_i+0x168>
 800811e:	2301      	movs	r3, #1
 8008120:	4632      	mov	r2, r6
 8008122:	4649      	mov	r1, r9
 8008124:	4640      	mov	r0, r8
 8008126:	47d0      	blx	sl
 8008128:	3001      	adds	r0, #1
 800812a:	d09b      	beq.n	8008064 <_printf_i+0x164>
 800812c:	3501      	adds	r5, #1
 800812e:	68e3      	ldr	r3, [r4, #12]
 8008130:	9903      	ldr	r1, [sp, #12]
 8008132:	1a5b      	subs	r3, r3, r1
 8008134:	42ab      	cmp	r3, r5
 8008136:	dcf2      	bgt.n	800811e <_printf_i+0x21e>
 8008138:	e7eb      	b.n	8008112 <_printf_i+0x212>
 800813a:	2500      	movs	r5, #0
 800813c:	f104 0619 	add.w	r6, r4, #25
 8008140:	e7f5      	b.n	800812e <_printf_i+0x22e>
 8008142:	bf00      	nop
 8008144:	0800875b 	.word	0x0800875b
 8008148:	0800876c 	.word	0x0800876c

0800814c <_read_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d07      	ldr	r5, [pc, #28]	; (800816c <_read_r+0x20>)
 8008150:	4604      	mov	r4, r0
 8008152:	4608      	mov	r0, r1
 8008154:	4611      	mov	r1, r2
 8008156:	2200      	movs	r2, #0
 8008158:	602a      	str	r2, [r5, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	f7f8 fd6a 	bl	8000c34 <_read>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_read_r+0x1e>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_read_r+0x1e>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	200089e8 	.word	0x200089e8

08008170 <__swbuf_r>:
 8008170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008172:	460e      	mov	r6, r1
 8008174:	4614      	mov	r4, r2
 8008176:	4605      	mov	r5, r0
 8008178:	b118      	cbz	r0, 8008182 <__swbuf_r+0x12>
 800817a:	6983      	ldr	r3, [r0, #24]
 800817c:	b90b      	cbnz	r3, 8008182 <__swbuf_r+0x12>
 800817e:	f7fe ff5b 	bl	8007038 <__sinit>
 8008182:	4b21      	ldr	r3, [pc, #132]	; (8008208 <__swbuf_r+0x98>)
 8008184:	429c      	cmp	r4, r3
 8008186:	d12b      	bne.n	80081e0 <__swbuf_r+0x70>
 8008188:	686c      	ldr	r4, [r5, #4]
 800818a:	69a3      	ldr	r3, [r4, #24]
 800818c:	60a3      	str	r3, [r4, #8]
 800818e:	89a3      	ldrh	r3, [r4, #12]
 8008190:	071a      	lsls	r2, r3, #28
 8008192:	d52f      	bpl.n	80081f4 <__swbuf_r+0x84>
 8008194:	6923      	ldr	r3, [r4, #16]
 8008196:	b36b      	cbz	r3, 80081f4 <__swbuf_r+0x84>
 8008198:	6923      	ldr	r3, [r4, #16]
 800819a:	6820      	ldr	r0, [r4, #0]
 800819c:	1ac0      	subs	r0, r0, r3
 800819e:	6963      	ldr	r3, [r4, #20]
 80081a0:	b2f6      	uxtb	r6, r6
 80081a2:	4283      	cmp	r3, r0
 80081a4:	4637      	mov	r7, r6
 80081a6:	dc04      	bgt.n	80081b2 <__swbuf_r+0x42>
 80081a8:	4621      	mov	r1, r4
 80081aa:	4628      	mov	r0, r5
 80081ac:	f7ff fac4 	bl	8007738 <_fflush_r>
 80081b0:	bb30      	cbnz	r0, 8008200 <__swbuf_r+0x90>
 80081b2:	68a3      	ldr	r3, [r4, #8]
 80081b4:	3b01      	subs	r3, #1
 80081b6:	60a3      	str	r3, [r4, #8]
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	1c5a      	adds	r2, r3, #1
 80081bc:	6022      	str	r2, [r4, #0]
 80081be:	701e      	strb	r6, [r3, #0]
 80081c0:	6963      	ldr	r3, [r4, #20]
 80081c2:	3001      	adds	r0, #1
 80081c4:	4283      	cmp	r3, r0
 80081c6:	d004      	beq.n	80081d2 <__swbuf_r+0x62>
 80081c8:	89a3      	ldrh	r3, [r4, #12]
 80081ca:	07db      	lsls	r3, r3, #31
 80081cc:	d506      	bpl.n	80081dc <__swbuf_r+0x6c>
 80081ce:	2e0a      	cmp	r6, #10
 80081d0:	d104      	bne.n	80081dc <__swbuf_r+0x6c>
 80081d2:	4621      	mov	r1, r4
 80081d4:	4628      	mov	r0, r5
 80081d6:	f7ff faaf 	bl	8007738 <_fflush_r>
 80081da:	b988      	cbnz	r0, 8008200 <__swbuf_r+0x90>
 80081dc:	4638      	mov	r0, r7
 80081de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80081e0:	4b0a      	ldr	r3, [pc, #40]	; (800820c <__swbuf_r+0x9c>)
 80081e2:	429c      	cmp	r4, r3
 80081e4:	d101      	bne.n	80081ea <__swbuf_r+0x7a>
 80081e6:	68ac      	ldr	r4, [r5, #8]
 80081e8:	e7cf      	b.n	800818a <__swbuf_r+0x1a>
 80081ea:	4b09      	ldr	r3, [pc, #36]	; (8008210 <__swbuf_r+0xa0>)
 80081ec:	429c      	cmp	r4, r3
 80081ee:	bf08      	it	eq
 80081f0:	68ec      	ldreq	r4, [r5, #12]
 80081f2:	e7ca      	b.n	800818a <__swbuf_r+0x1a>
 80081f4:	4621      	mov	r1, r4
 80081f6:	4628      	mov	r0, r5
 80081f8:	f000 f80c 	bl	8008214 <__swsetup_r>
 80081fc:	2800      	cmp	r0, #0
 80081fe:	d0cb      	beq.n	8008198 <__swbuf_r+0x28>
 8008200:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008204:	e7ea      	b.n	80081dc <__swbuf_r+0x6c>
 8008206:	bf00      	nop
 8008208:	08008658 	.word	0x08008658
 800820c:	08008678 	.word	0x08008678
 8008210:	08008638 	.word	0x08008638

08008214 <__swsetup_r>:
 8008214:	4b32      	ldr	r3, [pc, #200]	; (80082e0 <__swsetup_r+0xcc>)
 8008216:	b570      	push	{r4, r5, r6, lr}
 8008218:	681d      	ldr	r5, [r3, #0]
 800821a:	4606      	mov	r6, r0
 800821c:	460c      	mov	r4, r1
 800821e:	b125      	cbz	r5, 800822a <__swsetup_r+0x16>
 8008220:	69ab      	ldr	r3, [r5, #24]
 8008222:	b913      	cbnz	r3, 800822a <__swsetup_r+0x16>
 8008224:	4628      	mov	r0, r5
 8008226:	f7fe ff07 	bl	8007038 <__sinit>
 800822a:	4b2e      	ldr	r3, [pc, #184]	; (80082e4 <__swsetup_r+0xd0>)
 800822c:	429c      	cmp	r4, r3
 800822e:	d10f      	bne.n	8008250 <__swsetup_r+0x3c>
 8008230:	686c      	ldr	r4, [r5, #4]
 8008232:	89a3      	ldrh	r3, [r4, #12]
 8008234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008238:	0719      	lsls	r1, r3, #28
 800823a:	d42c      	bmi.n	8008296 <__swsetup_r+0x82>
 800823c:	06dd      	lsls	r5, r3, #27
 800823e:	d411      	bmi.n	8008264 <__swsetup_r+0x50>
 8008240:	2309      	movs	r3, #9
 8008242:	6033      	str	r3, [r6, #0]
 8008244:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008248:	81a3      	strh	r3, [r4, #12]
 800824a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800824e:	e03e      	b.n	80082ce <__swsetup_r+0xba>
 8008250:	4b25      	ldr	r3, [pc, #148]	; (80082e8 <__swsetup_r+0xd4>)
 8008252:	429c      	cmp	r4, r3
 8008254:	d101      	bne.n	800825a <__swsetup_r+0x46>
 8008256:	68ac      	ldr	r4, [r5, #8]
 8008258:	e7eb      	b.n	8008232 <__swsetup_r+0x1e>
 800825a:	4b24      	ldr	r3, [pc, #144]	; (80082ec <__swsetup_r+0xd8>)
 800825c:	429c      	cmp	r4, r3
 800825e:	bf08      	it	eq
 8008260:	68ec      	ldreq	r4, [r5, #12]
 8008262:	e7e6      	b.n	8008232 <__swsetup_r+0x1e>
 8008264:	0758      	lsls	r0, r3, #29
 8008266:	d512      	bpl.n	800828e <__swsetup_r+0x7a>
 8008268:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800826a:	b141      	cbz	r1, 800827e <__swsetup_r+0x6a>
 800826c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008270:	4299      	cmp	r1, r3
 8008272:	d002      	beq.n	800827a <__swsetup_r+0x66>
 8008274:	4630      	mov	r0, r6
 8008276:	f7ff fad3 	bl	8007820 <_free_r>
 800827a:	2300      	movs	r3, #0
 800827c:	6363      	str	r3, [r4, #52]	; 0x34
 800827e:	89a3      	ldrh	r3, [r4, #12]
 8008280:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008284:	81a3      	strh	r3, [r4, #12]
 8008286:	2300      	movs	r3, #0
 8008288:	6063      	str	r3, [r4, #4]
 800828a:	6923      	ldr	r3, [r4, #16]
 800828c:	6023      	str	r3, [r4, #0]
 800828e:	89a3      	ldrh	r3, [r4, #12]
 8008290:	f043 0308 	orr.w	r3, r3, #8
 8008294:	81a3      	strh	r3, [r4, #12]
 8008296:	6923      	ldr	r3, [r4, #16]
 8008298:	b94b      	cbnz	r3, 80082ae <__swsetup_r+0x9a>
 800829a:	89a3      	ldrh	r3, [r4, #12]
 800829c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80082a0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80082a4:	d003      	beq.n	80082ae <__swsetup_r+0x9a>
 80082a6:	4621      	mov	r1, r4
 80082a8:	4630      	mov	r0, r6
 80082aa:	f000 f84d 	bl	8008348 <__smakebuf_r>
 80082ae:	89a0      	ldrh	r0, [r4, #12]
 80082b0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80082b4:	f010 0301 	ands.w	r3, r0, #1
 80082b8:	d00a      	beq.n	80082d0 <__swsetup_r+0xbc>
 80082ba:	2300      	movs	r3, #0
 80082bc:	60a3      	str	r3, [r4, #8]
 80082be:	6963      	ldr	r3, [r4, #20]
 80082c0:	425b      	negs	r3, r3
 80082c2:	61a3      	str	r3, [r4, #24]
 80082c4:	6923      	ldr	r3, [r4, #16]
 80082c6:	b943      	cbnz	r3, 80082da <__swsetup_r+0xc6>
 80082c8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80082cc:	d1ba      	bne.n	8008244 <__swsetup_r+0x30>
 80082ce:	bd70      	pop	{r4, r5, r6, pc}
 80082d0:	0781      	lsls	r1, r0, #30
 80082d2:	bf58      	it	pl
 80082d4:	6963      	ldrpl	r3, [r4, #20]
 80082d6:	60a3      	str	r3, [r4, #8]
 80082d8:	e7f4      	b.n	80082c4 <__swsetup_r+0xb0>
 80082da:	2000      	movs	r0, #0
 80082dc:	e7f7      	b.n	80082ce <__swsetup_r+0xba>
 80082de:	bf00      	nop
 80082e0:	20000010 	.word	0x20000010
 80082e4:	08008658 	.word	0x08008658
 80082e8:	08008678 	.word	0x08008678
 80082ec:	08008638 	.word	0x08008638

080082f0 <abort>:
 80082f0:	b508      	push	{r3, lr}
 80082f2:	2006      	movs	r0, #6
 80082f4:	f000 f8da 	bl	80084ac <raise>
 80082f8:	2001      	movs	r0, #1
 80082fa:	f7f8 fc91 	bl	8000c20 <_exit>

080082fe <__swhatbuf_r>:
 80082fe:	b570      	push	{r4, r5, r6, lr}
 8008300:	460e      	mov	r6, r1
 8008302:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008306:	2900      	cmp	r1, #0
 8008308:	b096      	sub	sp, #88	; 0x58
 800830a:	4614      	mov	r4, r2
 800830c:	461d      	mov	r5, r3
 800830e:	da08      	bge.n	8008322 <__swhatbuf_r+0x24>
 8008310:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8008314:	2200      	movs	r2, #0
 8008316:	602a      	str	r2, [r5, #0]
 8008318:	061a      	lsls	r2, r3, #24
 800831a:	d410      	bmi.n	800833e <__swhatbuf_r+0x40>
 800831c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008320:	e00e      	b.n	8008340 <__swhatbuf_r+0x42>
 8008322:	466a      	mov	r2, sp
 8008324:	f000 f8de 	bl	80084e4 <_fstat_r>
 8008328:	2800      	cmp	r0, #0
 800832a:	dbf1      	blt.n	8008310 <__swhatbuf_r+0x12>
 800832c:	9a01      	ldr	r2, [sp, #4]
 800832e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008332:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008336:	425a      	negs	r2, r3
 8008338:	415a      	adcs	r2, r3
 800833a:	602a      	str	r2, [r5, #0]
 800833c:	e7ee      	b.n	800831c <__swhatbuf_r+0x1e>
 800833e:	2340      	movs	r3, #64	; 0x40
 8008340:	2000      	movs	r0, #0
 8008342:	6023      	str	r3, [r4, #0]
 8008344:	b016      	add	sp, #88	; 0x58
 8008346:	bd70      	pop	{r4, r5, r6, pc}

08008348 <__smakebuf_r>:
 8008348:	898b      	ldrh	r3, [r1, #12]
 800834a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800834c:	079d      	lsls	r5, r3, #30
 800834e:	4606      	mov	r6, r0
 8008350:	460c      	mov	r4, r1
 8008352:	d507      	bpl.n	8008364 <__smakebuf_r+0x1c>
 8008354:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	6123      	str	r3, [r4, #16]
 800835c:	2301      	movs	r3, #1
 800835e:	6163      	str	r3, [r4, #20]
 8008360:	b002      	add	sp, #8
 8008362:	bd70      	pop	{r4, r5, r6, pc}
 8008364:	ab01      	add	r3, sp, #4
 8008366:	466a      	mov	r2, sp
 8008368:	f7ff ffc9 	bl	80082fe <__swhatbuf_r>
 800836c:	9900      	ldr	r1, [sp, #0]
 800836e:	4605      	mov	r5, r0
 8008370:	4630      	mov	r0, r6
 8008372:	f7fe ff5d 	bl	8007230 <_malloc_r>
 8008376:	b948      	cbnz	r0, 800838c <__smakebuf_r+0x44>
 8008378:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800837c:	059a      	lsls	r2, r3, #22
 800837e:	d4ef      	bmi.n	8008360 <__smakebuf_r+0x18>
 8008380:	f023 0303 	bic.w	r3, r3, #3
 8008384:	f043 0302 	orr.w	r3, r3, #2
 8008388:	81a3      	strh	r3, [r4, #12]
 800838a:	e7e3      	b.n	8008354 <__smakebuf_r+0xc>
 800838c:	4b0d      	ldr	r3, [pc, #52]	; (80083c4 <__smakebuf_r+0x7c>)
 800838e:	62b3      	str	r3, [r6, #40]	; 0x28
 8008390:	89a3      	ldrh	r3, [r4, #12]
 8008392:	6020      	str	r0, [r4, #0]
 8008394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008398:	81a3      	strh	r3, [r4, #12]
 800839a:	9b00      	ldr	r3, [sp, #0]
 800839c:	6163      	str	r3, [r4, #20]
 800839e:	9b01      	ldr	r3, [sp, #4]
 80083a0:	6120      	str	r0, [r4, #16]
 80083a2:	b15b      	cbz	r3, 80083bc <__smakebuf_r+0x74>
 80083a4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80083a8:	4630      	mov	r0, r6
 80083aa:	f000 f8ad 	bl	8008508 <_isatty_r>
 80083ae:	b128      	cbz	r0, 80083bc <__smakebuf_r+0x74>
 80083b0:	89a3      	ldrh	r3, [r4, #12]
 80083b2:	f023 0303 	bic.w	r3, r3, #3
 80083b6:	f043 0301 	orr.w	r3, r3, #1
 80083ba:	81a3      	strh	r3, [r4, #12]
 80083bc:	89a0      	ldrh	r0, [r4, #12]
 80083be:	4305      	orrs	r5, r0
 80083c0:	81a5      	strh	r5, [r4, #12]
 80083c2:	e7cd      	b.n	8008360 <__smakebuf_r+0x18>
 80083c4:	08006fd1 	.word	0x08006fd1

080083c8 <memmove>:
 80083c8:	4288      	cmp	r0, r1
 80083ca:	b510      	push	{r4, lr}
 80083cc:	eb01 0402 	add.w	r4, r1, r2
 80083d0:	d902      	bls.n	80083d8 <memmove+0x10>
 80083d2:	4284      	cmp	r4, r0
 80083d4:	4623      	mov	r3, r4
 80083d6:	d807      	bhi.n	80083e8 <memmove+0x20>
 80083d8:	1e43      	subs	r3, r0, #1
 80083da:	42a1      	cmp	r1, r4
 80083dc:	d008      	beq.n	80083f0 <memmove+0x28>
 80083de:	f811 2b01 	ldrb.w	r2, [r1], #1
 80083e2:	f803 2f01 	strb.w	r2, [r3, #1]!
 80083e6:	e7f8      	b.n	80083da <memmove+0x12>
 80083e8:	4402      	add	r2, r0
 80083ea:	4601      	mov	r1, r0
 80083ec:	428a      	cmp	r2, r1
 80083ee:	d100      	bne.n	80083f2 <memmove+0x2a>
 80083f0:	bd10      	pop	{r4, pc}
 80083f2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80083f6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80083fa:	e7f7      	b.n	80083ec <memmove+0x24>

080083fc <_realloc_r>:
 80083fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008400:	4680      	mov	r8, r0
 8008402:	4614      	mov	r4, r2
 8008404:	460e      	mov	r6, r1
 8008406:	b921      	cbnz	r1, 8008412 <_realloc_r+0x16>
 8008408:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800840c:	4611      	mov	r1, r2
 800840e:	f7fe bf0f 	b.w	8007230 <_malloc_r>
 8008412:	b92a      	cbnz	r2, 8008420 <_realloc_r+0x24>
 8008414:	f7ff fa04 	bl	8007820 <_free_r>
 8008418:	4625      	mov	r5, r4
 800841a:	4628      	mov	r0, r5
 800841c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008420:	f000 f882 	bl	8008528 <_malloc_usable_size_r>
 8008424:	4284      	cmp	r4, r0
 8008426:	4607      	mov	r7, r0
 8008428:	d802      	bhi.n	8008430 <_realloc_r+0x34>
 800842a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800842e:	d812      	bhi.n	8008456 <_realloc_r+0x5a>
 8008430:	4621      	mov	r1, r4
 8008432:	4640      	mov	r0, r8
 8008434:	f7fe fefc 	bl	8007230 <_malloc_r>
 8008438:	4605      	mov	r5, r0
 800843a:	2800      	cmp	r0, #0
 800843c:	d0ed      	beq.n	800841a <_realloc_r+0x1e>
 800843e:	42bc      	cmp	r4, r7
 8008440:	4622      	mov	r2, r4
 8008442:	4631      	mov	r1, r6
 8008444:	bf28      	it	cs
 8008446:	463a      	movcs	r2, r7
 8008448:	f7fe febb 	bl	80071c2 <memcpy>
 800844c:	4631      	mov	r1, r6
 800844e:	4640      	mov	r0, r8
 8008450:	f7ff f9e6 	bl	8007820 <_free_r>
 8008454:	e7e1      	b.n	800841a <_realloc_r+0x1e>
 8008456:	4635      	mov	r5, r6
 8008458:	e7df      	b.n	800841a <_realloc_r+0x1e>

0800845a <_raise_r>:
 800845a:	291f      	cmp	r1, #31
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4604      	mov	r4, r0
 8008460:	460d      	mov	r5, r1
 8008462:	d904      	bls.n	800846e <_raise_r+0x14>
 8008464:	2316      	movs	r3, #22
 8008466:	6003      	str	r3, [r0, #0]
 8008468:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800846c:	bd38      	pop	{r3, r4, r5, pc}
 800846e:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008470:	b112      	cbz	r2, 8008478 <_raise_r+0x1e>
 8008472:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008476:	b94b      	cbnz	r3, 800848c <_raise_r+0x32>
 8008478:	4620      	mov	r0, r4
 800847a:	f000 f831 	bl	80084e0 <_getpid_r>
 800847e:	462a      	mov	r2, r5
 8008480:	4601      	mov	r1, r0
 8008482:	4620      	mov	r0, r4
 8008484:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008488:	f000 b818 	b.w	80084bc <_kill_r>
 800848c:	2b01      	cmp	r3, #1
 800848e:	d00a      	beq.n	80084a6 <_raise_r+0x4c>
 8008490:	1c59      	adds	r1, r3, #1
 8008492:	d103      	bne.n	800849c <_raise_r+0x42>
 8008494:	2316      	movs	r3, #22
 8008496:	6003      	str	r3, [r0, #0]
 8008498:	2001      	movs	r0, #1
 800849a:	e7e7      	b.n	800846c <_raise_r+0x12>
 800849c:	2400      	movs	r4, #0
 800849e:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80084a2:	4628      	mov	r0, r5
 80084a4:	4798      	blx	r3
 80084a6:	2000      	movs	r0, #0
 80084a8:	e7e0      	b.n	800846c <_raise_r+0x12>
	...

080084ac <raise>:
 80084ac:	4b02      	ldr	r3, [pc, #8]	; (80084b8 <raise+0xc>)
 80084ae:	4601      	mov	r1, r0
 80084b0:	6818      	ldr	r0, [r3, #0]
 80084b2:	f7ff bfd2 	b.w	800845a <_raise_r>
 80084b6:	bf00      	nop
 80084b8:	20000010 	.word	0x20000010

080084bc <_kill_r>:
 80084bc:	b538      	push	{r3, r4, r5, lr}
 80084be:	4d07      	ldr	r5, [pc, #28]	; (80084dc <_kill_r+0x20>)
 80084c0:	2300      	movs	r3, #0
 80084c2:	4604      	mov	r4, r0
 80084c4:	4608      	mov	r0, r1
 80084c6:	4611      	mov	r1, r2
 80084c8:	602b      	str	r3, [r5, #0]
 80084ca:	f7f8 fb99 	bl	8000c00 <_kill>
 80084ce:	1c43      	adds	r3, r0, #1
 80084d0:	d102      	bne.n	80084d8 <_kill_r+0x1c>
 80084d2:	682b      	ldr	r3, [r5, #0]
 80084d4:	b103      	cbz	r3, 80084d8 <_kill_r+0x1c>
 80084d6:	6023      	str	r3, [r4, #0]
 80084d8:	bd38      	pop	{r3, r4, r5, pc}
 80084da:	bf00      	nop
 80084dc:	200089e8 	.word	0x200089e8

080084e0 <_getpid_r>:
 80084e0:	f7f8 bb86 	b.w	8000bf0 <_getpid>

080084e4 <_fstat_r>:
 80084e4:	b538      	push	{r3, r4, r5, lr}
 80084e6:	4d07      	ldr	r5, [pc, #28]	; (8008504 <_fstat_r+0x20>)
 80084e8:	2300      	movs	r3, #0
 80084ea:	4604      	mov	r4, r0
 80084ec:	4608      	mov	r0, r1
 80084ee:	4611      	mov	r1, r2
 80084f0:	602b      	str	r3, [r5, #0]
 80084f2:	f7f8 fbc8 	bl	8000c86 <_fstat>
 80084f6:	1c43      	adds	r3, r0, #1
 80084f8:	d102      	bne.n	8008500 <_fstat_r+0x1c>
 80084fa:	682b      	ldr	r3, [r5, #0]
 80084fc:	b103      	cbz	r3, 8008500 <_fstat_r+0x1c>
 80084fe:	6023      	str	r3, [r4, #0]
 8008500:	bd38      	pop	{r3, r4, r5, pc}
 8008502:	bf00      	nop
 8008504:	200089e8 	.word	0x200089e8

08008508 <_isatty_r>:
 8008508:	b538      	push	{r3, r4, r5, lr}
 800850a:	4d06      	ldr	r5, [pc, #24]	; (8008524 <_isatty_r+0x1c>)
 800850c:	2300      	movs	r3, #0
 800850e:	4604      	mov	r4, r0
 8008510:	4608      	mov	r0, r1
 8008512:	602b      	str	r3, [r5, #0]
 8008514:	f7f8 fbc7 	bl	8000ca6 <_isatty>
 8008518:	1c43      	adds	r3, r0, #1
 800851a:	d102      	bne.n	8008522 <_isatty_r+0x1a>
 800851c:	682b      	ldr	r3, [r5, #0]
 800851e:	b103      	cbz	r3, 8008522 <_isatty_r+0x1a>
 8008520:	6023      	str	r3, [r4, #0]
 8008522:	bd38      	pop	{r3, r4, r5, pc}
 8008524:	200089e8 	.word	0x200089e8

08008528 <_malloc_usable_size_r>:
 8008528:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852c:	1f18      	subs	r0, r3, #4
 800852e:	2b00      	cmp	r3, #0
 8008530:	bfbc      	itt	lt
 8008532:	580b      	ldrlt	r3, [r1, r0]
 8008534:	18c0      	addlt	r0, r0, r3
 8008536:	4770      	bx	lr

08008538 <_init>:
 8008538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800853a:	bf00      	nop
 800853c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800853e:	bc08      	pop	{r3}
 8008540:	469e      	mov	lr, r3
 8008542:	4770      	bx	lr

08008544 <_fini>:
 8008544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008546:	bf00      	nop
 8008548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800854a:	bc08      	pop	{r3}
 800854c:	469e      	mov	lr, r3
 800854e:	4770      	bx	lr
