
Assign3_Ref_Implementation.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008fec  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003d0  0800917c  0800917c  0001917c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800954c  0800954c  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  0800954c  0800954c  0001954c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009554  08009554  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009554  08009554  00019554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009558  08009558  00019558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  0800955c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004a9c  20000074  080095d0  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004b10  080095d0  00024b10  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001ff73  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004476  00000000  00000000  00040017  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001940  00000000  00000000  00044490  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001768  00000000  00000000  00045dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025556  00000000  00000000  00047538  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001dad1  00000000  00000000  0006ca8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7db1  00000000  00000000  0008a55f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00162310  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000072e4  00000000  00000000  00162360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009164 	.word	0x08009164

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08009164 	.word	0x08009164

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of initTask */
  initTaskHandle = osThreadNew(StartInitializeTask, NULL, &initTask_attributes);
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <MX_FREERTOS_Init+0x18>)
 800058a:	2100      	movs	r1, #0
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_FREERTOS_Init+0x1c>)
 800058e:	f004 f8b1 	bl	80046f4 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <MX_FREERTOS_Init+0x20>)
 8000596:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	0800932c 	.word	0x0800932c
 80005a0:	08000755 	.word	0x08000755
 80005a4:	20000090 	.word	0x20000090

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a10      	ldr	r2, [pc, #64]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2108      	movs	r1, #8
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <MX_GPIO_Init+0x90>)
 800060c:	f001 f888 	bl	8001720 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000610:	2308      	movs	r3, #8
 8000612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_GPIO_Init+0x90>)
 8000628:	f000 ff10 	bl	800144c <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 fd69 	bl	8001116 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f80c 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ffae 	bl	80005a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064c:	f000 fc98 	bl	8000f80 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000650:	f004 f806 	bl	8004660 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000654:	f7ff ff96 	bl	8000584 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000658:	f004 f826 	bl	80046a8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x20>
	...

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	; 0x58
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f007 f905 	bl	800787e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000682:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000686:	f001 f881 	bl	800178c <HAL_PWREx_ControlVoltageScaling>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000690:	f000 f85a 	bl	8000748 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000694:	f001 f85c 	bl	8001750 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <SystemClock_Config+0xc0>)
 800069a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069e:	4a20      	ldr	r2, [pc, #128]	; (8000720 <SystemClock_Config+0xc0>)
 80006a0:	f023 0318 	bic.w	r3, r3, #24
 80006a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a8:	2314      	movs	r3, #20
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c0:	2301      	movs	r3, #1
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 f8ab 	bl	8001838 <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006e8:	f000 f82e 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	2101      	movs	r1, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fcab 	bl	8002060 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000710:	f000 f81a 	bl	8000748 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000714:	f002 f8f0 	bl	80028f8 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000718:	bf00      	nop
 800071a:	3758      	adds	r7, #88	; 0x58
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d101      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000736:	f000 fd07 	bl	8001148 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40001000 	.word	0x40001000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <StartInitializeTask>:

static bool received_byte = false;

#ifdef USE_CMSIS

void StartInitializeTask(void *argument) {
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b0bb      	sub	sp, #236	; 0xec
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	printf("Started task initialization...\r\n");
 800075c:	486b      	ldr	r0, [pc, #428]	; (800090c <StartInitializeTask+0x1b8>)
 800075e:	f007 f9b1 	bl	8007ac4 <puts>
	osThreadAttr_t producer1_attr = {
 8000762:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8000766:	2224      	movs	r2, #36	; 0x24
 8000768:	2100      	movs	r1, #0
 800076a:	4618      	mov	r0, r3
 800076c:	f007 f887 	bl	800787e <memset>
 8000770:	4b67      	ldr	r3, [pc, #412]	; (8000910 <StartInitializeTask+0x1bc>)
 8000772:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8000776:	2308      	movs	r3, #8
 8000778:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
			.name = "Producer1",
			.priority = osPriorityLow
	};
	osThreadAttr_t producer2_attr = {
 800077c:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000780:	2224      	movs	r2, #36	; 0x24
 8000782:	2100      	movs	r1, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f007 f87a 	bl	800787e <memset>
 800078a:	4b62      	ldr	r3, [pc, #392]	; (8000914 <StartInitializeTask+0x1c0>)
 800078c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8000790:	2308      	movs	r3, #8
 8000792:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
			.name = "Producer2",
			.priority = osPriorityLow
	};
	osThreadAttr_t producer3_attr = {
 8000796:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800079a:	2224      	movs	r2, #36	; 0x24
 800079c:	2100      	movs	r1, #0
 800079e:	4618      	mov	r0, r3
 80007a0:	f007 f86d 	bl	800787e <memset>
 80007a4:	4b5c      	ldr	r3, [pc, #368]	; (8000918 <StartInitializeTask+0x1c4>)
 80007a6:	677b      	str	r3, [r7, #116]	; 0x74
 80007a8:	2308      	movs	r3, #8
 80007aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
			.name = "Producer3",
			.priority = osPriorityLow
	};
	osThreadAttr_t *producer_attributes[3];
	producer_attributes[0] = &producer1_attr;
 80007ae:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 80007b2:	66bb      	str	r3, [r7, #104]	; 0x68
	producer_attributes[1] = &producer2_attr;
 80007b4:	f107 0398 	add.w	r3, r7, #152	; 0x98
 80007b8:	66fb      	str	r3, [r7, #108]	; 0x6c
	producer_attributes[2] = &producer3_attr;
 80007ba:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80007be:	673b      	str	r3, [r7, #112]	; 0x70
	//osThreadId_t producerHandles[3];
	monArg_t monitorArgument = {
 80007c0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80007c4:	2200      	movs	r2, #0
 80007c6:	601a      	str	r2, [r3, #0]
 80007c8:	605a      	str	r2, [r3, #4]
 80007ca:	609a      	str	r2, [r3, #8]
 80007cc:	60da      	str	r2, [r3, #12]
 80007ce:	611a      	str	r2, [r3, #16]
		.producerQueue = NULL
	};
	prodArg_t producerArguments[3];

	// Queue for the monitor to receive data
	monitorArgument.monitorQueue = osMessageQueueNew(3, sizeof(queueItem_t), NULL);
 80007d0:	2200      	movs	r2, #0
 80007d2:	2108      	movs	r1, #8
 80007d4:	2003      	movs	r0, #3
 80007d6:	f004 f840 	bl	800485a <osMessageQueueNew>
 80007da:	4603      	mov	r3, r0
 80007dc:	663b      	str	r3, [r7, #96]	; 0x60
	// Queue for the producers to receive data
	monitorArgument.producerQueue = osMessageQueueNew(1, sizeof(parsedObj_t), NULL);
 80007de:	2200      	movs	r2, #0
 80007e0:	2108      	movs	r1, #8
 80007e2:	2001      	movs	r0, #1
 80007e4:	f004 f839 	bl	800485a <osMessageQueueNew>
 80007e8:	4603      	mov	r3, r0
 80007ea:	667b      	str	r3, [r7, #100]	; 0x64
	if(monitorArgument.monitorQueue == NULL || monitorArgument.producerQueue == NULL) {
 80007ec:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d002      	beq.n	80007f8 <StartInitializeTask+0xa4>
 80007f2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80007f4:	2b00      	cmp	r3, #0
 80007f6:	d102      	bne.n	80007fe <StartInitializeTask+0xaa>
			printf("Failed to create queues.\r\n");
 80007f8:	4848      	ldr	r0, [pc, #288]	; (800091c <StartInitializeTask+0x1c8>)
 80007fa:	f007 f963 	bl	8007ac4 <puts>
	}

	for(uint8_t i = 0; i < 3; i++) {
 80007fe:	2300      	movs	r3, #0
 8000800:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 8000804:	e058      	b.n	80008b8 <StartInitializeTask+0x164>
		producerArguments[i].number = i;
 8000806:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	33e8      	adds	r3, #232	; 0xe8
 8000814:	443b      	add	r3, r7
 8000816:	3bb8      	subs	r3, #184	; 0xb8
 8000818:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800081c:	701a      	strb	r2, [r3, #0]
		producerArguments[i].monitorQueue = monitorArgument.monitorQueue;
 800081e:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8000822:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8000824:	4613      	mov	r3, r2
 8000826:	005b      	lsls	r3, r3, #1
 8000828:	4413      	add	r3, r2
 800082a:	009b      	lsls	r3, r3, #2
 800082c:	33e8      	adds	r3, #232	; 0xe8
 800082e:	443b      	add	r3, r7
 8000830:	3bb4      	subs	r3, #180	; 0xb4
 8000832:	6019      	str	r1, [r3, #0]
		producerArguments[i].producerQueue = monitorArgument.producerQueue;
 8000834:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 8000838:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800083a:	4613      	mov	r3, r2
 800083c:	005b      	lsls	r3, r3, #1
 800083e:	4413      	add	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	33e8      	adds	r3, #232	; 0xe8
 8000844:	443b      	add	r3, r7
 8000846:	3bb0      	subs	r3, #176	; 0xb0
 8000848:	6019      	str	r1, [r3, #0]
		monitorArgument.producerHandles[i] = osThreadNew(ProducerTask, (void*)&producerArguments[i], producer_attributes[i]);
 800084a:	f897 20e7 	ldrb.w	r2, [r7, #231]	; 0xe7
 800084e:	f107 0130 	add.w	r1, r7, #48	; 0x30
 8000852:	4613      	mov	r3, r2
 8000854:	005b      	lsls	r3, r3, #1
 8000856:	4413      	add	r3, r2
 8000858:	009b      	lsls	r3, r3, #2
 800085a:	4419      	add	r1, r3
 800085c:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8000860:	009b      	lsls	r3, r3, #2
 8000862:	33e8      	adds	r3, #232	; 0xe8
 8000864:	443b      	add	r3, r7
 8000866:	f853 3c80 	ldr.w	r3, [r3, #-128]
 800086a:	f897 40e7 	ldrb.w	r4, [r7, #231]	; 0xe7
 800086e:	461a      	mov	r2, r3
 8000870:	482b      	ldr	r0, [pc, #172]	; (8000920 <StartInitializeTask+0x1cc>)
 8000872:	f003 ff3f 	bl	80046f4 <osThreadNew>
 8000876:	4602      	mov	r2, r0
 8000878:	00a3      	lsls	r3, r4, #2
 800087a:	33e8      	adds	r3, #232	; 0xe8
 800087c:	443b      	add	r3, r7
 800087e:	f843 2c94 	str.w	r2, [r3, #-148]
		if(monitorArgument.producerHandles[i] == NULL) {
 8000882:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8000886:	009b      	lsls	r3, r3, #2
 8000888:	33e8      	adds	r3, #232	; 0xe8
 800088a:	443b      	add	r3, r7
 800088c:	f853 3c94 	ldr.w	r3, [r3, #-148]
 8000890:	2b00      	cmp	r3, #0
 8000892:	d106      	bne.n	80008a2 <StartInitializeTask+0x14e>
			printf("Failed to create producer task #%d.\r\n", i);
 8000894:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 8000898:	4619      	mov	r1, r3
 800089a:	4822      	ldr	r0, [pc, #136]	; (8000924 <StartInitializeTask+0x1d0>)
 800089c:	f007 f88c 	bl	80079b8 <iprintf>
 80008a0:	e005      	b.n	80008ae <StartInitializeTask+0x15a>
		} else {
			printf("Created producer task #%d.\r\n", i);
 80008a2:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80008a6:	4619      	mov	r1, r3
 80008a8:	481f      	ldr	r0, [pc, #124]	; (8000928 <StartInitializeTask+0x1d4>)
 80008aa:	f007 f885 	bl	80079b8 <iprintf>
	for(uint8_t i = 0; i < 3; i++) {
 80008ae:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80008b2:	3301      	adds	r3, #1
 80008b4:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
 80008b8:	f897 30e7 	ldrb.w	r3, [r7, #231]	; 0xe7
 80008bc:	2b02      	cmp	r3, #2
 80008be:	d9a2      	bls.n	8000806 <StartInitializeTask+0xb2>
		}
	}

	osThreadAttr_t monitor_attributes = {
 80008c0:	f107 030c 	add.w	r3, r7, #12
 80008c4:	2224      	movs	r2, #36	; 0x24
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f006 ffd8 	bl	800787e <memset>
 80008ce:	4b17      	ldr	r3, [pc, #92]	; (800092c <StartInitializeTask+0x1d8>)
 80008d0:	60fb      	str	r3, [r7, #12]
 80008d2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008d6:	623b      	str	r3, [r7, #32]
 80008d8:	2318      	movs	r3, #24
 80008da:	627b      	str	r3, [r7, #36]	; 0x24
			.name = "MonitorTask",
			.stack_size = 512 * 4,
			.priority = osPriorityNormal
	};
	osThreadId_t monitorHandle = osThreadNew(MonitorTask, (void*)&monitorArgument, &monitor_attributes);
 80008dc:	f107 020c 	add.w	r2, r7, #12
 80008e0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 80008e4:	4619      	mov	r1, r3
 80008e6:	4812      	ldr	r0, [pc, #72]	; (8000930 <StartInitializeTask+0x1dc>)
 80008e8:	f003 ff04 	bl	80046f4 <osThreadNew>
 80008ec:	f8c7 00e0 	str.w	r0, [r7, #224]	; 0xe0
	if(monitorHandle == NULL) {
 80008f0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d103      	bne.n	8000900 <StartInitializeTask+0x1ac>
		printf("Failed to create monitor task.\r\n");
 80008f8:	480e      	ldr	r0, [pc, #56]	; (8000934 <StartInitializeTask+0x1e0>)
 80008fa:	f007 f8e3 	bl	8007ac4 <puts>
 80008fe:	e002      	b.n	8000906 <StartInitializeTask+0x1b2>
	} else {
		printf("Created monitor task.\r\n");
 8000900:	480d      	ldr	r0, [pc, #52]	; (8000938 <StartInitializeTask+0x1e4>)
 8000902:	f007 f8df 	bl	8007ac4 <puts>
	}
	osThreadExit(); // Exit initialization task
 8000906:	f003 ff87 	bl	8004818 <osThreadExit>
 800090a:	bf00      	nop
 800090c:	08009188 	.word	0x08009188
 8000910:	080091a8 	.word	0x080091a8
 8000914:	080091b4 	.word	0x080091b4
 8000918:	080091c0 	.word	0x080091c0
 800091c:	080091cc 	.word	0x080091cc
 8000920:	0800093d 	.word	0x0800093d
 8000924:	080091e8 	.word	0x080091e8
 8000928:	08009210 	.word	0x08009210
 800092c:	08009230 	.word	0x08009230
 8000930:	08000a25 	.word	0x08000a25
 8000934:	0800923c 	.word	0x0800923c
 8000938:	0800925c 	.word	0x0800925c

0800093c <ProducerTask>:
}

void ProducerTask(void *argument) {
 800093c:	b580      	push	{r7, lr}
 800093e:	b08c      	sub	sp, #48	; 0x30
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
	prodArg_t producer = *((prodArg_t*)argument);
 8000944:	687a      	ldr	r2, [r7, #4]
 8000946:	f107 031c 	add.w	r3, r7, #28
 800094a:	ca07      	ldmia	r2, {r0, r1, r2}
 800094c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	// producer.monitorQueue => SENDET DATENOBJEKTE AN MONITOR
	// producer.producerQueue => EMPFÄNGT DATENOBJEKTE VON MONITOR
	uint32_t counterInterval = 1000;
 8000950:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000954:	62fb      	str	r3, [r7, #44]	; 0x2c
	osStatus_t ret;
	parsedObj_t rx_parsed_obj;
	queueItem_t tx_queue_obj = {
			.taskNum = producer.number,
 8000956:	7f3b      	ldrb	r3, [r7, #28]
	queueItem_t tx_queue_obj = {
 8000958:	733b      	strb	r3, [r7, #12]
 800095a:	2300      	movs	r3, #0
 800095c:	613b      	str	r3, [r7, #16]
			.value = 0
	};
	for(;;) {
		ret = osMessageQueueGet(producer.producerQueue, &rx_parsed_obj, 0, 0);
 800095e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000960:	f107 0114 	add.w	r1, r7, #20
 8000964:	2300      	movs	r3, #0
 8000966:	2200      	movs	r2, #0
 8000968:	f004 f84a 	bl	8004a00 <osMessageQueueGet>
 800096c:	62b8      	str	r0, [r7, #40]	; 0x28
		switch(ret) {
 800096e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000970:	3304      	adds	r3, #4
 8000972:	2b04      	cmp	r3, #4
 8000974:	d81b      	bhi.n	80009ae <ProducerTask+0x72>
 8000976:	a201      	add	r2, pc, #4	; (adr r2, 800097c <ProducerTask+0x40>)
 8000978:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800097c:	080009af 	.word	0x080009af
 8000980:	080009af 	.word	0x080009af
 8000984:	080009af 	.word	0x080009af
 8000988:	080009af 	.word	0x080009af
 800098c:	08000991 	.word	0x08000991
		case osOK:
			if(rx_parsed_obj.taskNumber == producer.number) {
 8000990:	7d3a      	ldrb	r2, [r7, #20]
 8000992:	7f3b      	ldrb	r3, [r7, #28]
 8000994:	429a      	cmp	r2, r3
 8000996:	d102      	bne.n	800099e <ProducerTask+0x62>
				counterInterval = rx_parsed_obj.targetInterval;
 8000998:	69bb      	ldr	r3, [r7, #24]
 800099a:	62fb      	str	r3, [r7, #44]	; 0x2c
			} else {
				osMessageQueuePut(producer.producerQueue, &rx_parsed_obj, 0, 0);
				// BEWARE OF MISSING ERROR HANDLING
			}
			break;
 800099c:	e008      	b.n	80009b0 <ProducerTask+0x74>
				osMessageQueuePut(producer.producerQueue, &rx_parsed_obj, 0, 0);
 800099e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80009a0:	f107 0114 	add.w	r1, r7, #20
 80009a4:	2300      	movs	r3, #0
 80009a6:	2200      	movs	r2, #0
 80009a8:	f003 ffca 	bl	8004940 <osMessageQueuePut>
			break;
 80009ac:	e000      	b.n	80009b0 <ProducerTask+0x74>
		case osErrorParameter:
			// Actual problematic ERROR occurred => panic!
			break;
		default:
			// Unhandled error occoured => panic!
			break;
 80009ae:	bf00      	nop
		}
		ret = osMessageQueuePut(producer.monitorQueue, &tx_queue_obj, 0, 0);
 80009b0:	6a38      	ldr	r0, [r7, #32]
 80009b2:	f107 010c 	add.w	r1, r7, #12
 80009b6:	2300      	movs	r3, #0
 80009b8:	2200      	movs	r2, #0
 80009ba:	f003 ffc1 	bl	8004940 <osMessageQueuePut>
 80009be:	62b8      	str	r0, [r7, #40]	; 0x28
		switch(ret) {
 80009c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009c2:	3304      	adds	r3, #4
 80009c4:	2b04      	cmp	r3, #4
 80009c6:	d811      	bhi.n	80009ec <ProducerTask+0xb0>
 80009c8:	a201      	add	r2, pc, #4	; (adr r2, 80009d0 <ProducerTask+0x94>)
 80009ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80009ce:	bf00      	nop
 80009d0:	080009ed 	.word	0x080009ed
 80009d4:	080009ed 	.word	0x080009ed
 80009d8:	080009ed 	.word	0x080009ed
 80009dc:	080009ed 	.word	0x080009ed
 80009e0:	080009e5 	.word	0x080009e5
		case osOK:
			// IT WORKED => increment counter value
			tx_queue_obj.value++;
 80009e4:	693b      	ldr	r3, [r7, #16]
 80009e6:	3301      	adds	r3, #1
 80009e8:	613b      	str	r3, [r7, #16]
			break;
 80009ea:	e000      	b.n	80009ee <ProducerTask+0xb2>
		case osErrorParameter:
			// Actual problematic ERROR occurred => panic!
			break;
		default:
			// Unhandled error occoured => panic!
			break;
 80009ec:	bf00      	nop
		}
		osDelay(counterInterval);
 80009ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80009f0:	f003 ff18 	bl	8004824 <osDelay>
		ret = osMessageQueueGet(producer.producerQueue, &rx_parsed_obj, 0, 0);
 80009f4:	e7b3      	b.n	800095e <ProducerTask+0x22>
 80009f6:	bf00      	nop

080009f8 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80009f8:	b480      	push	{r7}
 80009fa:	b083      	sub	sp, #12
 80009fc:	af00      	add	r7, sp, #0
 80009fe:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) {
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	4a06      	ldr	r2, [pc, #24]	; (8000a1c <HAL_UART_RxCpltCallback+0x24>)
 8000a04:	4293      	cmp	r3, r2
 8000a06:	d102      	bne.n	8000a0e <HAL_UART_RxCpltCallback+0x16>
		received_byte = true;
 8000a08:	4b05      	ldr	r3, [pc, #20]	; (8000a20 <HAL_UART_RxCpltCallback+0x28>)
 8000a0a:	2201      	movs	r2, #1
 8000a0c:	701a      	strb	r2, [r3, #0]
	}
}
 8000a0e:	bf00      	nop
 8000a10:	370c      	adds	r7, #12
 8000a12:	46bd      	mov	sp, r7
 8000a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a18:	4770      	bx	lr
 8000a1a:	bf00      	nop
 8000a1c:	200000e8 	.word	0x200000e8
 8000a20:	20000094 	.word	0x20000094

08000a24 <MonitorTask>:

void MonitorTask(void *argument) {
 8000a24:	b5b0      	push	{r4, r5, r7, lr}
 8000a26:	b0b0      	sub	sp, #192	; 0xc0
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
	monArg_t monitor = *((monArg_t*)argument);
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	f107 04a0 	add.w	r4, r7, #160	; 0xa0
 8000a32:	461d      	mov	r5, r3
 8000a34:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a36:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000a38:	682b      	ldr	r3, [r5, #0]
 8000a3a:	6023      	str	r3, [r4, #0]
	// monitor.monitorQueue => EMPFÄNGT DATENOBJEKTE VON PRODUCERN
	// monitor.producerQueue => SENDET DATENOBJEKTE AN PRODUCER
	char rx_uart_buffer[128];
	char *input = NULL;
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
	uint8_t write_index = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
	char tmp = '\0';
 8000a48:	2300      	movs	r3, #0
 8000a4a:	77fb      	strb	r3, [r7, #31]
	bool input_ready = false;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
	bool output_ready = false;
 8000a52:	2300      	movs	r3, #0
 8000a54:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
	bool receiving = false;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
	parsedObj_t tx_parsed_obj;
	queueItem_t rx_queue_obj;
	osStatus_t ret;
	HAL_UART_Receive_IT(&huart2, (uint8_t*)&tmp, 1);
 8000a5e:	f107 031f 	add.w	r3, r7, #31
 8000a62:	2201      	movs	r2, #1
 8000a64:	4619      	mov	r1, r3
 8000a66:	485e      	ldr	r0, [pc, #376]	; (8000be0 <MonitorTask+0x1bc>)
 8000a68:	f002 fbaa 	bl	80031c0 <HAL_UART_Receive_IT>
	for(;;) {
		ret = osMessageQueueGet(monitor.monitorQueue, &rx_queue_obj, 0, 100); // Poll queue roughly every ~100 ticks
 8000a6c:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000a70:	f107 010c 	add.w	r1, r7, #12
 8000a74:	2364      	movs	r3, #100	; 0x64
 8000a76:	2200      	movs	r2, #0
 8000a78:	f003 ffc2 	bl	8004a00 <osMessageQueueGet>
 8000a7c:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
		if(ret == osOK) {
 8000a80:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000a84:	2b00      	cmp	r3, #0
 8000a86:	d103      	bne.n	8000a90 <MonitorTask+0x6c>
			output_ready = true;
 8000a88:	2301      	movs	r3, #1
 8000a8a:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
 8000a8e:	e00d      	b.n	8000aac <MonitorTask+0x88>
		} else if(ret != osErrorTimeout) {
 8000a90:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000a94:	f113 0f02 	cmn.w	r3, #2
 8000a98:	d008      	beq.n	8000aac <MonitorTask+0x88>
			// If the error is anything other than a failure to get from the queue, report it
			printf("Error handling monitor queue: %d\r\n", ret);
 8000a9a:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000a9e:	4851      	ldr	r0, [pc, #324]	; (8000be4 <MonitorTask+0x1c0>)
 8000aa0:	f006 ff8a 	bl	80079b8 <iprintf>
			osDelay(5000);
 8000aa4:	f241 3088 	movw	r0, #5000	; 0x1388
 8000aa8:	f003 febc 	bl	8004824 <osDelay>
		}
		if(output_ready) {
 8000aac:	f897 30bd 	ldrb.w	r3, [r7, #189]	; 0xbd
 8000ab0:	2b00      	cmp	r3, #0
 8000ab2:	d010      	beq.n	8000ad6 <MonitorTask+0xb2>
			// Do not output to UART when receiving cmd input for usability
			if(!receiving) {
 8000ab4:	f897 30bc 	ldrb.w	r3, [r7, #188]	; 0xbc
 8000ab8:	f083 0301 	eor.w	r3, r3, #1
 8000abc:	b2db      	uxtb	r3, r3
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d006      	beq.n	8000ad0 <MonitorTask+0xac>
				printf("Task %d: %lu\r\n", rx_queue_obj.taskNum, rx_queue_obj.value);
 8000ac2:	7b3b      	ldrb	r3, [r7, #12]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	693b      	ldr	r3, [r7, #16]
 8000ac8:	461a      	mov	r2, r3
 8000aca:	4847      	ldr	r0, [pc, #284]	; (8000be8 <MonitorTask+0x1c4>)
 8000acc:	f006 ff74 	bl	80079b8 <iprintf>
			}
			output_ready = false;
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	f887 30bd 	strb.w	r3, [r7, #189]	; 0xbd
		}
		if(received_byte) {
 8000ad6:	4b45      	ldr	r3, [pc, #276]	; (8000bec <MonitorTask+0x1c8>)
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	2b00      	cmp	r3, #0
 8000adc:	d064      	beq.n	8000ba8 <MonitorTask+0x184>
			receiving = true;
 8000ade:	2301      	movs	r3, #1
 8000ae0:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
			HAL_UART_Transmit(&huart2, (uint8_t*)&tmp, 1, 1000);
 8000ae4:	f107 011f 	add.w	r1, r7, #31
 8000ae8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aec:	2201      	movs	r2, #1
 8000aee:	483c      	ldr	r0, [pc, #240]	; (8000be0 <MonitorTask+0x1bc>)
 8000af0:	f002 fad2 	bl	8003098 <HAL_UART_Transmit>
			if(tmp == '\r') {
 8000af4:	7ffb      	ldrb	r3, [r7, #31]
 8000af6:	2b0d      	cmp	r3, #13
 8000af8:	d136      	bne.n	8000b68 <MonitorTask+0x144>
				rx_uart_buffer[write_index] = '\0';
 8000afa:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000afe:	33c0      	adds	r3, #192	; 0xc0
 8000b00:	443b      	add	r3, r7
 8000b02:	2200      	movs	r2, #0
 8000b04:	f803 2ca0 	strb.w	r2, [r3, #-160]
				// DYNAMIC_INPUT_ALLOCATION START
				input = pvPortMalloc(sizeof(char) * (write_index+1));
 8000b08:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000b0c:	3301      	adds	r3, #1
 8000b0e:	4618      	mov	r0, r3
 8000b10:	f006 fb9a 	bl	8007248 <pvPortMalloc>
 8000b14:	f8c7 00b8 	str.w	r0, [r7, #184]	; 0xb8
				if(input == NULL) {
 8000b18:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8000b1c:	2b00      	cmp	r3, #0
 8000b1e:	d103      	bne.n	8000b28 <MonitorTask+0x104>
					printf("Memory error!\r\n");
 8000b20:	4833      	ldr	r0, [pc, #204]	; (8000bf0 <MonitorTask+0x1cc>)
 8000b22:	f006 ffcf 	bl	8007ac4 <puts>
 8000b26:	e014      	b.n	8000b52 <MonitorTask+0x12e>
				} else {
					memcpy(input, rx_uart_buffer, (write_index+1));
 8000b28:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	461a      	mov	r2, r3
 8000b30:	f107 0320 	add.w	r3, r7, #32
 8000b34:	4619      	mov	r1, r3
 8000b36:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000b3a:	f006 fe92 	bl	8007862 <memcpy>
					input_ready = parseInput(input, &tx_parsed_obj);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000b48:	f000 f858 	bl	8000bfc <parseInput>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
				}
				vPortFree(input);
 8000b52:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8000b56:	f006 fc43 	bl	80073e0 <vPortFree>
				// DYNAMIC_INPUT_ALLOCATION END
				/* alternative to DYNAMIC_INPUT_ALLOCATION:
				 * input_ready = parseInput(rx_uart_buffer, &tx_parsed_obj);
				 */
				write_index = 0;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
				receiving = false;
 8000b60:	2300      	movs	r3, #0
 8000b62:	f887 30bc 	strb.w	r3, [r7, #188]	; 0xbc
 8000b66:	e015      	b.n	8000b94 <MonitorTask+0x170>
			} else {
				rx_uart_buffer[write_index] = tmp;
 8000b68:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000b6c:	7ffa      	ldrb	r2, [r7, #31]
 8000b6e:	33c0      	adds	r3, #192	; 0xc0
 8000b70:	443b      	add	r3, r7
 8000b72:	f803 2ca0 	strb.w	r2, [r3, #-160]
				write_index++;
 8000b76:	f897 30bf 	ldrb.w	r3, [r7, #191]	; 0xbf
 8000b7a:	3301      	adds	r3, #1
 8000b7c:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
				if(write_index >= 128) {
 8000b80:	f997 30bf 	ldrsb.w	r3, [r7, #191]	; 0xbf
 8000b84:	2b00      	cmp	r3, #0
 8000b86:	da05      	bge.n	8000b94 <MonitorTask+0x170>
					printf("Input limit reached!\r\n");
 8000b88:	481a      	ldr	r0, [pc, #104]	; (8000bf4 <MonitorTask+0x1d0>)
 8000b8a:	f006 ff9b 	bl	8007ac4 <puts>
					write_index = 0;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	f887 30bf 	strb.w	r3, [r7, #191]	; 0xbf
				}
			}
			received_byte = false;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MonitorTask+0x1c8>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	701a      	strb	r2, [r3, #0]
			HAL_UART_Receive_IT(&huart2, (uint8_t*)&tmp, 1);
 8000b9a:	f107 031f 	add.w	r3, r7, #31
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	480f      	ldr	r0, [pc, #60]	; (8000be0 <MonitorTask+0x1bc>)
 8000ba4:	f002 fb0c 	bl	80031c0 <HAL_UART_Receive_IT>
		}
		if(input_ready) {
 8000ba8:	f897 30be 	ldrb.w	r3, [r7, #190]	; 0xbe
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	f43f af5d 	beq.w	8000a6c <MonitorTask+0x48>
			ret = osMessageQueuePut(monitor.producerQueue, &tx_parsed_obj, 0, 0);
 8000bb2:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000bb6:	f107 0114 	add.w	r1, r7, #20
 8000bba:	2300      	movs	r3, #0
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	f003 febf 	bl	8004940 <osMessageQueuePut>
 8000bc2:	f8c7 00b4 	str.w	r0, [r7, #180]	; 0xb4
			if(ret != osOK) {
 8000bc6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d004      	beq.n	8000bd8 <MonitorTask+0x1b4>
				printf("Failed to put data in producerQueue: %d\r\n", ret);
 8000bce:	f8d7 10b4 	ldr.w	r1, [r7, #180]	; 0xb4
 8000bd2:	4809      	ldr	r0, [pc, #36]	; (8000bf8 <MonitorTask+0x1d4>)
 8000bd4:	f006 fef0 	bl	80079b8 <iprintf>
			}
			input_ready = false;
 8000bd8:	2300      	movs	r3, #0
 8000bda:	f887 30be 	strb.w	r3, [r7, #190]	; 0xbe
		ret = osMessageQueueGet(monitor.monitorQueue, &rx_queue_obj, 0, 100); // Poll queue roughly every ~100 ticks
 8000bde:	e745      	b.n	8000a6c <MonitorTask+0x48>
 8000be0:	200000e8 	.word	0x200000e8
 8000be4:	08009274 	.word	0x08009274
 8000be8:	08009298 	.word	0x08009298
 8000bec:	20000094 	.word	0x20000094
 8000bf0:	080092a8 	.word	0x080092a8
 8000bf4:	080092b8 	.word	0x080092b8
 8000bf8:	080092d0 	.word	0x080092d0

08000bfc <parseInput>:
 *      Author: rini
 */

#include "protocol.h"

bool parseInput(char *input, parsedObj_t *parsedObj) {
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b086      	sub	sp, #24
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
 8000c04:	6039      	str	r1, [r7, #0]
	unsigned int parsedNum;
	uint32_t parsedInterval;
	uint8_t ret = sscanf(input, "T%u %lums", &parsedNum, &parsedInterval);
 8000c06:	f107 030c 	add.w	r3, r7, #12
 8000c0a:	f107 0210 	add.w	r2, r7, #16
 8000c0e:	4911      	ldr	r1, [pc, #68]	; (8000c54 <parseInput+0x58>)
 8000c10:	6878      	ldr	r0, [r7, #4]
 8000c12:	f006 ffd9 	bl	8007bc8 <siscanf>
 8000c16:	4603      	mov	r3, r0
 8000c18:	75fb      	strb	r3, [r7, #23]
	switch(ret) {
 8000c1a:	7dfb      	ldrb	r3, [r7, #23]
 8000c1c:	2b02      	cmp	r3, #2
 8000c1e:	d00a      	beq.n	8000c36 <parseInput+0x3a>
 8000c20:	2b02      	cmp	r3, #2
 8000c22:	dc11      	bgt.n	8000c48 <parseInput+0x4c>
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d002      	beq.n	8000c2e <parseInput+0x32>
 8000c28:	2b01      	cmp	r3, #1
 8000c2a:	d002      	beq.n	8000c32 <parseInput+0x36>
 8000c2c:	e00c      	b.n	8000c48 <parseInput+0x4c>
	case 0:
		// 0 arguments were filled => wrong input
		return false;
 8000c2e:	2300      	movs	r3, #0
 8000c30:	e00b      	b.n	8000c4a <parseInput+0x4e>
	case 1:
		// 1 argument was filled => wrong input
		return false;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e009      	b.n	8000c4a <parseInput+0x4e>
	case 2:
		// 2 arguments were filled => assume correct input
		parsedObj->taskNumber = parsedNum;
 8000c36:	693b      	ldr	r3, [r7, #16]
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	701a      	strb	r2, [r3, #0]
		parsedObj->targetInterval = parsedInterval;
 8000c3e:	68fa      	ldr	r2, [r7, #12]
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	605a      	str	r2, [r3, #4]
		return true;
 8000c44:	2301      	movs	r3, #1
 8000c46:	e000      	b.n	8000c4a <parseInput+0x4e>
	default:
		// Any other case result => wrong input
		return false;
 8000c48:	2300      	movs	r3, #0
	}
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	3718      	adds	r7, #24
 8000c4e:	46bd      	mov	sp, r7
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	080092fc 	.word	0x080092fc

08000c58 <_write>:
  * @param 	file 	...	file descriptor
  * @param	ptr		... pointer to the data buffer.
  * @param	len 	...	length of the buffer in bytes.
  * @retval (int)	... Successfully transmitted bytes.
  */
int _write(int file, char *ptr, int len){
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b084      	sub	sp, #16
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	60f8      	str	r0, [r7, #12]
 8000c60:	60b9      	str	r1, [r7, #8]
 8000c62:	607a      	str	r2, [r7, #4]
	while(len--){
 8000c64:	e006      	b.n	8000c74 <_write+0x1c>
		putchar(*ptr++);
 8000c66:	68bb      	ldr	r3, [r7, #8]
 8000c68:	1c5a      	adds	r2, r3, #1
 8000c6a:	60ba      	str	r2, [r7, #8]
 8000c6c:	781b      	ldrb	r3, [r3, #0]
 8000c6e:	4618      	mov	r0, r3
 8000c70:	f000 f80a 	bl	8000c88 <putchar>
	while(len--){
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	1e5a      	subs	r2, r3, #1
 8000c78:	607a      	str	r2, [r7, #4]
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d1f3      	bne.n	8000c66 <_write+0xe>
	}
	return len;
 8000c7e:	687b      	ldr	r3, [r7, #4]
}
 8000c80:	4618      	mov	r0, r3
 8000c82:	3710      	adds	r7, #16
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <putchar>:
/**
 *
 * @param ch		... Character to be transmitted.
 * @return	(int) 	... Returns the character.
 */
int	putchar (int ch){
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b084      	sub	sp, #16
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
	char charTemp = (char) ch;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	b2db      	uxtb	r3, r3
 8000c94:	73fb      	strb	r3, [r7, #15]
	 * Either that, or both '\r' and '\n' need to be provided.
	 */
//	if (charTemp == '\n'){
//		putchar('\r');
//	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&charTemp, 1, -1);
 8000c96:	f107 010f 	add.w	r1, r7, #15
 8000c9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c9e:	2201      	movs	r2, #1
 8000ca0:	4803      	ldr	r0, [pc, #12]	; (8000cb0 <putchar+0x28>)
 8000ca2:	f002 f9f9 	bl	8003098 <HAL_UART_Transmit>
	return ch;
 8000ca6:	687b      	ldr	r3, [r7, #4]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3710      	adds	r7, #16
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}
 8000cb0:	200000e8 	.word	0x200000e8

08000cb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cba:	4b11      	ldr	r3, [pc, #68]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cbc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cbe:	4a10      	ldr	r2, [pc, #64]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc0:	f043 0301 	orr.w	r3, r3, #1
 8000cc4:	6613      	str	r3, [r2, #96]	; 0x60
 8000cc6:	4b0e      	ldr	r3, [pc, #56]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000cca:	f003 0301 	and.w	r3, r3, #1
 8000cce:	607b      	str	r3, [r7, #4]
 8000cd0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000cd2:	4b0b      	ldr	r3, [pc, #44]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000cd6:	4a0a      	ldr	r2, [pc, #40]	; (8000d00 <HAL_MspInit+0x4c>)
 8000cd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000cdc:	6593      	str	r3, [r2, #88]	; 0x58
 8000cde:	4b08      	ldr	r3, [pc, #32]	; (8000d00 <HAL_MspInit+0x4c>)
 8000ce0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ce2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000cea:	2200      	movs	r2, #0
 8000cec:	210f      	movs	r1, #15
 8000cee:	f06f 0001 	mvn.w	r0, #1
 8000cf2:	f000 fb01 	bl	80012f8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000cf6:	bf00      	nop
 8000cf8:	3708      	adds	r7, #8
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	bd80      	pop	{r7, pc}
 8000cfe:	bf00      	nop
 8000d00:	40021000 	.word	0x40021000

08000d04 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b08e      	sub	sp, #56	; 0x38
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000d12:	4b34      	ldr	r3, [pc, #208]	; (8000de4 <HAL_InitTick+0xe0>)
 8000d14:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d16:	4a33      	ldr	r2, [pc, #204]	; (8000de4 <HAL_InitTick+0xe0>)
 8000d18:	f043 0310 	orr.w	r3, r3, #16
 8000d1c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d1e:	4b31      	ldr	r3, [pc, #196]	; (8000de4 <HAL_InitTick+0xe0>)
 8000d20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d22:	f003 0310 	and.w	r3, r3, #16
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000d2a:	f107 0210 	add.w	r2, r7, #16
 8000d2e:	f107 0314 	add.w	r3, r7, #20
 8000d32:	4611      	mov	r1, r2
 8000d34:	4618      	mov	r0, r3
 8000d36:	f001 fb57 	bl	80023e8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000d3a:	6a3b      	ldr	r3, [r7, #32]
 8000d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000d3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d103      	bne.n	8000d4c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000d44:	f001 fb24 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8000d48:	6378      	str	r0, [r7, #52]	; 0x34
 8000d4a:	e004      	b.n	8000d56 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000d4c:	f001 fb20 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8000d50:	4603      	mov	r3, r0
 8000d52:	005b      	lsls	r3, r3, #1
 8000d54:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000d56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000d58:	4a23      	ldr	r2, [pc, #140]	; (8000de8 <HAL_InitTick+0xe4>)
 8000d5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000d5e:	0c9b      	lsrs	r3, r3, #18
 8000d60:	3b01      	subs	r3, #1
 8000d62:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000d64:	4b21      	ldr	r3, [pc, #132]	; (8000dec <HAL_InitTick+0xe8>)
 8000d66:	4a22      	ldr	r2, [pc, #136]	; (8000df0 <HAL_InitTick+0xec>)
 8000d68:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000d6a:	4b20      	ldr	r3, [pc, #128]	; (8000dec <HAL_InitTick+0xe8>)
 8000d6c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d70:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000d72:	4a1e      	ldr	r2, [pc, #120]	; (8000dec <HAL_InitTick+0xe8>)
 8000d74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000d76:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000d78:	4b1c      	ldr	r3, [pc, #112]	; (8000dec <HAL_InitTick+0xe8>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d7e:	4b1b      	ldr	r3, [pc, #108]	; (8000dec <HAL_InitTick+0xe8>)
 8000d80:	2200      	movs	r2, #0
 8000d82:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d84:	4b19      	ldr	r3, [pc, #100]	; (8000dec <HAL_InitTick+0xe8>)
 8000d86:	2200      	movs	r2, #0
 8000d88:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d8a:	4818      	ldr	r0, [pc, #96]	; (8000dec <HAL_InitTick+0xe8>)
 8000d8c:	f001 feb6 	bl	8002afc <HAL_TIM_Base_Init>
 8000d90:	4603      	mov	r3, r0
 8000d92:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d96:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d9a:	2b00      	cmp	r3, #0
 8000d9c:	d11b      	bne.n	8000dd6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d9e:	4813      	ldr	r0, [pc, #76]	; (8000dec <HAL_InitTick+0xe8>)
 8000da0:	f001 ff0e 	bl	8002bc0 <HAL_TIM_Base_Start_IT>
 8000da4:	4603      	mov	r3, r0
 8000da6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000daa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000dae:	2b00      	cmp	r3, #0
 8000db0:	d111      	bne.n	8000dd6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000db2:	2036      	movs	r0, #54	; 0x36
 8000db4:	f000 fabc 	bl	8001330 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	2b0f      	cmp	r3, #15
 8000dbc:	d808      	bhi.n	8000dd0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	6879      	ldr	r1, [r7, #4]
 8000dc2:	2036      	movs	r0, #54	; 0x36
 8000dc4:	f000 fa98 	bl	80012f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000dc8:	4a0a      	ldr	r2, [pc, #40]	; (8000df4 <HAL_InitTick+0xf0>)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6013      	str	r3, [r2, #0]
 8000dce:	e002      	b.n	8000dd6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000dd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000dda:	4618      	mov	r0, r3
 8000ddc:	3738      	adds	r7, #56	; 0x38
 8000dde:	46bd      	mov	sp, r7
 8000de0:	bd80      	pop	{r7, pc}
 8000de2:	bf00      	nop
 8000de4:	40021000 	.word	0x40021000
 8000de8:	431bde83 	.word	0x431bde83
 8000dec:	20000098 	.word	0x20000098
 8000df0:	40001000 	.word	0x40001000
 8000df4:	20000004 	.word	0x20000004

08000df8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000df8:	b480      	push	{r7}
 8000dfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <NMI_Handler+0x4>

08000dfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e02:	e7fe      	b.n	8000e02 <HardFault_Handler+0x4>

08000e04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e08:	e7fe      	b.n	8000e08 <MemManage_Handler+0x4>

08000e0a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e0a:	b480      	push	{r7}
 8000e0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e0e:	e7fe      	b.n	8000e0e <BusFault_Handler+0x4>

08000e10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e10:	b480      	push	{r7}
 8000e12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <UsageFault_Handler+0x4>

08000e16 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e16:	b480      	push	{r7}
 8000e18:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e1a:	bf00      	nop
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000e28:	4802      	ldr	r0, [pc, #8]	; (8000e34 <USART2_IRQHandler+0x10>)
 8000e2a:	f002 fa1f 	bl	800326c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000e2e:	bf00      	nop
 8000e30:	bd80      	pop	{r7, pc}
 8000e32:	bf00      	nop
 8000e34:	200000e8 	.word	0x200000e8

08000e38 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000e3c:	4802      	ldr	r0, [pc, #8]	; (8000e48 <TIM6_DAC_IRQHandler+0x10>)
 8000e3e:	f001 ff13 	bl	8002c68 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000e42:	bf00      	nop
 8000e44:	bd80      	pop	{r7, pc}
 8000e46:	bf00      	nop
 8000e48:	20000098 	.word	0x20000098

08000e4c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b086      	sub	sp, #24
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	60f8      	str	r0, [r7, #12]
 8000e54:	60b9      	str	r1, [r7, #8]
 8000e56:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e58:	2300      	movs	r3, #0
 8000e5a:	617b      	str	r3, [r7, #20]
 8000e5c:	e00a      	b.n	8000e74 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000e5e:	f3af 8000 	nop.w
 8000e62:	4601      	mov	r1, r0
 8000e64:	68bb      	ldr	r3, [r7, #8]
 8000e66:	1c5a      	adds	r2, r3, #1
 8000e68:	60ba      	str	r2, [r7, #8]
 8000e6a:	b2ca      	uxtb	r2, r1
 8000e6c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	3301      	adds	r3, #1
 8000e72:	617b      	str	r3, [r7, #20]
 8000e74:	697a      	ldr	r2, [r7, #20]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	dbf0      	blt.n	8000e5e <_read+0x12>
	}

return len;
 8000e7c:	687b      	ldr	r3, [r7, #4]
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	3718      	adds	r7, #24
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}

08000e86 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000e86:	b480      	push	{r7}
 8000e88:	b083      	sub	sp, #12
 8000e8a:	af00      	add	r7, sp, #0
 8000e8c:	6078      	str	r0, [r7, #4]
	return -1;
 8000e8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000e92:	4618      	mov	r0, r3
 8000e94:	370c      	adds	r7, #12
 8000e96:	46bd      	mov	sp, r7
 8000e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9c:	4770      	bx	lr

08000e9e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000e9e:	b480      	push	{r7}
 8000ea0:	b083      	sub	sp, #12
 8000ea2:	af00      	add	r7, sp, #0
 8000ea4:	6078      	str	r0, [r7, #4]
 8000ea6:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000eae:	605a      	str	r2, [r3, #4]
	return 0;
 8000eb0:	2300      	movs	r3, #0
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	370c      	adds	r7, #12
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebc:	4770      	bx	lr

08000ebe <_isatty>:

int _isatty(int file)
{
 8000ebe:	b480      	push	{r7}
 8000ec0:	b083      	sub	sp, #12
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
	return 1;
 8000ec6:	2301      	movs	r3, #1
}
 8000ec8:	4618      	mov	r0, r3
 8000eca:	370c      	adds	r7, #12
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed2:	4770      	bx	lr

08000ed4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b085      	sub	sp, #20
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
	return 0;
 8000ee0:	2300      	movs	r3, #0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3714      	adds	r7, #20
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eec:	4770      	bx	lr
	...

08000ef0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b086      	sub	sp, #24
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000ef8:	4a14      	ldr	r2, [pc, #80]	; (8000f4c <_sbrk+0x5c>)
 8000efa:	4b15      	ldr	r3, [pc, #84]	; (8000f50 <_sbrk+0x60>)
 8000efc:	1ad3      	subs	r3, r2, r3
 8000efe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f00:	697b      	ldr	r3, [r7, #20]
 8000f02:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f04:	4b13      	ldr	r3, [pc, #76]	; (8000f54 <_sbrk+0x64>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	2b00      	cmp	r3, #0
 8000f0a:	d102      	bne.n	8000f12 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f0c:	4b11      	ldr	r3, [pc, #68]	; (8000f54 <_sbrk+0x64>)
 8000f0e:	4a12      	ldr	r2, [pc, #72]	; (8000f58 <_sbrk+0x68>)
 8000f10:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f12:	4b10      	ldr	r3, [pc, #64]	; (8000f54 <_sbrk+0x64>)
 8000f14:	681a      	ldr	r2, [r3, #0]
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	4413      	add	r3, r2
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d207      	bcs.n	8000f30 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f20:	f006 fb7c 	bl	800761c <__errno>
 8000f24:	4603      	mov	r3, r0
 8000f26:	220c      	movs	r2, #12
 8000f28:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f2e:	e009      	b.n	8000f44 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f30:	4b08      	ldr	r3, [pc, #32]	; (8000f54 <_sbrk+0x64>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f36:	4b07      	ldr	r3, [pc, #28]	; (8000f54 <_sbrk+0x64>)
 8000f38:	681a      	ldr	r2, [r3, #0]
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	4413      	add	r3, r2
 8000f3e:	4a05      	ldr	r2, [pc, #20]	; (8000f54 <_sbrk+0x64>)
 8000f40:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f42:	68fb      	ldr	r3, [r7, #12]
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3718      	adds	r7, #24
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	20010000 	.word	0x20010000
 8000f50:	00000400 	.word	0x00000400
 8000f54:	200000e4 	.word	0x200000e4
 8000f58:	20004b10 	.word	0x20004b10

08000f5c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <SystemInit+0x20>)
 8000f62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f66:	4a05      	ldr	r2, [pc, #20]	; (8000f7c <SystemInit+0x20>)
 8000f68:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f6c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000f70:	bf00      	nop
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000f84:	4b14      	ldr	r3, [pc, #80]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000f86:	4a15      	ldr	r2, [pc, #84]	; (8000fdc <MX_USART2_UART_Init+0x5c>)
 8000f88:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000f8a:	4b13      	ldr	r3, [pc, #76]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000f90:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000f92:	4b11      	ldr	r3, [pc, #68]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f98:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f9e:	4b0e      	ldr	r3, [pc, #56]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fa4:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fa6:	220c      	movs	r2, #12
 8000fa8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000faa:	4b0b      	ldr	r3, [pc, #44]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fb0:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000fb6:	4b08      	ldr	r3, [pc, #32]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fb8:	2200      	movs	r2, #0
 8000fba:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000fbc:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fc2:	4805      	ldr	r0, [pc, #20]	; (8000fd8 <MX_USART2_UART_Init+0x58>)
 8000fc4:	f002 f81a 	bl	8002ffc <HAL_UART_Init>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000fce:	f7ff fbbb 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000fd2:	bf00      	nop
 8000fd4:	bd80      	pop	{r7, pc}
 8000fd6:	bf00      	nop
 8000fd8:	200000e8 	.word	0x200000e8
 8000fdc:	40004400 	.word	0x40004400

08000fe0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b09e      	sub	sp, #120	; 0x78
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000fec:	2200      	movs	r2, #0
 8000fee:	601a      	str	r2, [r3, #0]
 8000ff0:	605a      	str	r2, [r3, #4]
 8000ff2:	609a      	str	r2, [r3, #8]
 8000ff4:	60da      	str	r2, [r3, #12]
 8000ff6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff8:	f107 0310 	add.w	r3, r7, #16
 8000ffc:	2254      	movs	r2, #84	; 0x54
 8000ffe:	2100      	movs	r1, #0
 8001000:	4618      	mov	r0, r3
 8001002:	f006 fc3c 	bl	800787e <memset>
  if(uartHandle->Instance==USART2)
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	681b      	ldr	r3, [r3, #0]
 800100a:	4a2c      	ldr	r2, [pc, #176]	; (80010bc <HAL_UART_MspInit+0xdc>)
 800100c:	4293      	cmp	r3, r2
 800100e:	d150      	bne.n	80010b2 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001010:	2302      	movs	r3, #2
 8001012:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001014:	2300      	movs	r3, #0
 8001016:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001018:	f107 0310 	add.w	r3, r7, #16
 800101c:	4618      	mov	r0, r3
 800101e:	f001 fa75 	bl	800250c <HAL_RCCEx_PeriphCLKConfig>
 8001022:	4603      	mov	r3, r0
 8001024:	2b00      	cmp	r3, #0
 8001026:	d001      	beq.n	800102c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001028:	f7ff fb8e 	bl	8000748 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800102c:	4b24      	ldr	r3, [pc, #144]	; (80010c0 <HAL_UART_MspInit+0xe0>)
 800102e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001030:	4a23      	ldr	r2, [pc, #140]	; (80010c0 <HAL_UART_MspInit+0xe0>)
 8001032:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001036:	6593      	str	r3, [r2, #88]	; 0x58
 8001038:	4b21      	ldr	r3, [pc, #132]	; (80010c0 <HAL_UART_MspInit+0xe0>)
 800103a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800103c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001040:	60fb      	str	r3, [r7, #12]
 8001042:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001044:	4b1e      	ldr	r3, [pc, #120]	; (80010c0 <HAL_UART_MspInit+0xe0>)
 8001046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001048:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <HAL_UART_MspInit+0xe0>)
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_UART_MspInit+0xe0>)
 8001052:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001054:	f003 0301 	and.w	r3, r3, #1
 8001058:	60bb      	str	r3, [r7, #8]
 800105a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 800105c:	2304      	movs	r3, #4
 800105e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	2302      	movs	r3, #2
 8001062:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001064:	2300      	movs	r3, #0
 8001066:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001068:	2303      	movs	r3, #3
 800106a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800106c:	2307      	movs	r3, #7
 800106e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8001070:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001074:	4619      	mov	r1, r3
 8001076:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800107a:	f000 f9e7 	bl	800144c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 800107e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001082:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001084:	2302      	movs	r3, #2
 8001086:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001088:	2300      	movs	r3, #0
 800108a:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800108c:	2303      	movs	r3, #3
 800108e:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001090:	2303      	movs	r3, #3
 8001092:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001094:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001098:	4619      	mov	r1, r3
 800109a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800109e:	f000 f9d5 	bl	800144c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80010a2:	2200      	movs	r2, #0
 80010a4:	2105      	movs	r1, #5
 80010a6:	2026      	movs	r0, #38	; 0x26
 80010a8:	f000 f926 	bl	80012f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80010ac:	2026      	movs	r0, #38	; 0x26
 80010ae:	f000 f93f 	bl	8001330 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80010b2:	bf00      	nop
 80010b4:	3778      	adds	r7, #120	; 0x78
 80010b6:	46bd      	mov	sp, r7
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	40004400 	.word	0x40004400
 80010c0:	40021000 	.word	0x40021000

080010c4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80010c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80010fc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80010c8:	f7ff ff48 	bl	8000f5c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80010cc:	480c      	ldr	r0, [pc, #48]	; (8001100 <LoopForever+0x6>)
  ldr r1, =_edata
 80010ce:	490d      	ldr	r1, [pc, #52]	; (8001104 <LoopForever+0xa>)
  ldr r2, =_sidata
 80010d0:	4a0d      	ldr	r2, [pc, #52]	; (8001108 <LoopForever+0xe>)
  movs r3, #0
 80010d2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80010d4:	e002      	b.n	80010dc <LoopCopyDataInit>

080010d6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80010d6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80010d8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80010da:	3304      	adds	r3, #4

080010dc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80010dc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80010de:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80010e0:	d3f9      	bcc.n	80010d6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80010e2:	4a0a      	ldr	r2, [pc, #40]	; (800110c <LoopForever+0x12>)
  ldr r4, =_ebss
 80010e4:	4c0a      	ldr	r4, [pc, #40]	; (8001110 <LoopForever+0x16>)
  movs r3, #0
 80010e6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80010e8:	e001      	b.n	80010ee <LoopFillZerobss>

080010ea <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80010ea:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80010ec:	3204      	adds	r2, #4

080010ee <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80010ee:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80010f0:	d3fb      	bcc.n	80010ea <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80010f2:	f006 fb8f 	bl	8007814 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80010f6:	f7ff faa1 	bl	800063c <main>

080010fa <LoopForever>:

LoopForever:
    b LoopForever
 80010fa:	e7fe      	b.n	80010fa <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80010fc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001100:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001104:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001108:	0800955c 	.word	0x0800955c
  ldr r2, =_sbss
 800110c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8001110:	20004b10 	.word	0x20004b10

08001114 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001114:	e7fe      	b.n	8001114 <ADC1_IRQHandler>

08001116 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001116:	b580      	push	{r7, lr}
 8001118:	b082      	sub	sp, #8
 800111a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800111c:	2300      	movs	r3, #0
 800111e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001120:	2003      	movs	r0, #3
 8001122:	f000 f8de 	bl	80012e2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001126:	200f      	movs	r0, #15
 8001128:	f7ff fdec 	bl	8000d04 <HAL_InitTick>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d002      	beq.n	8001138 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001132:	2301      	movs	r3, #1
 8001134:	71fb      	strb	r3, [r7, #7]
 8001136:	e001      	b.n	800113c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001138:	f7ff fdbc 	bl	8000cb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800113c:	79fb      	ldrb	r3, [r7, #7]
}
 800113e:	4618      	mov	r0, r3
 8001140:	3708      	adds	r7, #8
 8001142:	46bd      	mov	sp, r7
 8001144:	bd80      	pop	{r7, pc}
	...

08001148 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001148:	b480      	push	{r7}
 800114a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 800114c:	4b06      	ldr	r3, [pc, #24]	; (8001168 <HAL_IncTick+0x20>)
 800114e:	781b      	ldrb	r3, [r3, #0]
 8001150:	461a      	mov	r2, r3
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <HAL_IncTick+0x24>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	4413      	add	r3, r2
 8001158:	4a04      	ldr	r2, [pc, #16]	; (800116c <HAL_IncTick+0x24>)
 800115a:	6013      	str	r3, [r2, #0]
}
 800115c:	bf00      	nop
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
 8001166:	bf00      	nop
 8001168:	20000008 	.word	0x20000008
 800116c:	2000016c 	.word	0x2000016c

08001170 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001170:	b480      	push	{r7}
 8001172:	af00      	add	r7, sp, #0
  return uwTick;
 8001174:	4b03      	ldr	r3, [pc, #12]	; (8001184 <HAL_GetTick+0x14>)
 8001176:	681b      	ldr	r3, [r3, #0]
}
 8001178:	4618      	mov	r0, r3
 800117a:	46bd      	mov	sp, r7
 800117c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001180:	4770      	bx	lr
 8001182:	bf00      	nop
 8001184:	2000016c 	.word	0x2000016c

08001188 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001188:	b480      	push	{r7}
 800118a:	b085      	sub	sp, #20
 800118c:	af00      	add	r7, sp, #0
 800118e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	f003 0307 	and.w	r3, r3, #7
 8001196:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001198:	4b0c      	ldr	r3, [pc, #48]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 800119a:	68db      	ldr	r3, [r3, #12]
 800119c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800119e:	68ba      	ldr	r2, [r7, #8]
 80011a0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011a4:	4013      	ands	r3, r2
 80011a6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011ac:	68bb      	ldr	r3, [r7, #8]
 80011ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011b0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011b4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ba:	4a04      	ldr	r2, [pc, #16]	; (80011cc <__NVIC_SetPriorityGrouping+0x44>)
 80011bc:	68bb      	ldr	r3, [r7, #8]
 80011be:	60d3      	str	r3, [r2, #12]
}
 80011c0:	bf00      	nop
 80011c2:	3714      	adds	r7, #20
 80011c4:	46bd      	mov	sp, r7
 80011c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ca:	4770      	bx	lr
 80011cc:	e000ed00 	.word	0xe000ed00

080011d0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011d4:	4b04      	ldr	r3, [pc, #16]	; (80011e8 <__NVIC_GetPriorityGrouping+0x18>)
 80011d6:	68db      	ldr	r3, [r3, #12]
 80011d8:	0a1b      	lsrs	r3, r3, #8
 80011da:	f003 0307 	and.w	r3, r3, #7
}
 80011de:	4618      	mov	r0, r3
 80011e0:	46bd      	mov	sp, r7
 80011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e6:	4770      	bx	lr
 80011e8:	e000ed00 	.word	0xe000ed00

080011ec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80011ec:	b480      	push	{r7}
 80011ee:	b083      	sub	sp, #12
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	4603      	mov	r3, r0
 80011f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	db0b      	blt.n	8001216 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80011fe:	79fb      	ldrb	r3, [r7, #7]
 8001200:	f003 021f 	and.w	r2, r3, #31
 8001204:	4907      	ldr	r1, [pc, #28]	; (8001224 <__NVIC_EnableIRQ+0x38>)
 8001206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800120a:	095b      	lsrs	r3, r3, #5
 800120c:	2001      	movs	r0, #1
 800120e:	fa00 f202 	lsl.w	r2, r0, r2
 8001212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001216:	bf00      	nop
 8001218:	370c      	adds	r7, #12
 800121a:	46bd      	mov	sp, r7
 800121c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop
 8001224:	e000e100 	.word	0xe000e100

08001228 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	6039      	str	r1, [r7, #0]
 8001232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db0a      	blt.n	8001252 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	b2da      	uxtb	r2, r3
 8001240:	490c      	ldr	r1, [pc, #48]	; (8001274 <__NVIC_SetPriority+0x4c>)
 8001242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001246:	0112      	lsls	r2, r2, #4
 8001248:	b2d2      	uxtb	r2, r2
 800124a:	440b      	add	r3, r1
 800124c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001250:	e00a      	b.n	8001268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001252:	683b      	ldr	r3, [r7, #0]
 8001254:	b2da      	uxtb	r2, r3
 8001256:	4908      	ldr	r1, [pc, #32]	; (8001278 <__NVIC_SetPriority+0x50>)
 8001258:	79fb      	ldrb	r3, [r7, #7]
 800125a:	f003 030f 	and.w	r3, r3, #15
 800125e:	3b04      	subs	r3, #4
 8001260:	0112      	lsls	r2, r2, #4
 8001262:	b2d2      	uxtb	r2, r2
 8001264:	440b      	add	r3, r1
 8001266:	761a      	strb	r2, [r3, #24]
}
 8001268:	bf00      	nop
 800126a:	370c      	adds	r7, #12
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000e100 	.word	0xe000e100
 8001278:	e000ed00 	.word	0xe000ed00

0800127c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800127c:	b480      	push	{r7}
 800127e:	b089      	sub	sp, #36	; 0x24
 8001280:	af00      	add	r7, sp, #0
 8001282:	60f8      	str	r0, [r7, #12]
 8001284:	60b9      	str	r1, [r7, #8]
 8001286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	f003 0307 	and.w	r3, r3, #7
 800128e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001290:	69fb      	ldr	r3, [r7, #28]
 8001292:	f1c3 0307 	rsb	r3, r3, #7
 8001296:	2b04      	cmp	r3, #4
 8001298:	bf28      	it	cs
 800129a:	2304      	movcs	r3, #4
 800129c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800129e:	69fb      	ldr	r3, [r7, #28]
 80012a0:	3304      	adds	r3, #4
 80012a2:	2b06      	cmp	r3, #6
 80012a4:	d902      	bls.n	80012ac <NVIC_EncodePriority+0x30>
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	3b03      	subs	r3, #3
 80012aa:	e000      	b.n	80012ae <NVIC_EncodePriority+0x32>
 80012ac:	2300      	movs	r3, #0
 80012ae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012b0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ba:	43da      	mvns	r2, r3
 80012bc:	68bb      	ldr	r3, [r7, #8]
 80012be:	401a      	ands	r2, r3
 80012c0:	697b      	ldr	r3, [r7, #20]
 80012c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80012c4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	fa01 f303 	lsl.w	r3, r1, r3
 80012ce:	43d9      	mvns	r1, r3
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012d4:	4313      	orrs	r3, r2
         );
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3724      	adds	r7, #36	; 0x24
 80012da:	46bd      	mov	sp, r7
 80012dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e0:	4770      	bx	lr

080012e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012e2:	b580      	push	{r7, lr}
 80012e4:	b082      	sub	sp, #8
 80012e6:	af00      	add	r7, sp, #0
 80012e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012ea:	6878      	ldr	r0, [r7, #4]
 80012ec:	f7ff ff4c 	bl	8001188 <__NVIC_SetPriorityGrouping>
}
 80012f0:	bf00      	nop
 80012f2:	3708      	adds	r7, #8
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}

080012f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b086      	sub	sp, #24
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	4603      	mov	r3, r0
 8001300:	60b9      	str	r1, [r7, #8]
 8001302:	607a      	str	r2, [r7, #4]
 8001304:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001306:	2300      	movs	r3, #0
 8001308:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800130a:	f7ff ff61 	bl	80011d0 <__NVIC_GetPriorityGrouping>
 800130e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001310:	687a      	ldr	r2, [r7, #4]
 8001312:	68b9      	ldr	r1, [r7, #8]
 8001314:	6978      	ldr	r0, [r7, #20]
 8001316:	f7ff ffb1 	bl	800127c <NVIC_EncodePriority>
 800131a:	4602      	mov	r2, r0
 800131c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001320:	4611      	mov	r1, r2
 8001322:	4618      	mov	r0, r3
 8001324:	f7ff ff80 	bl	8001228 <__NVIC_SetPriority>
}
 8001328:	bf00      	nop
 800132a:	3718      	adds	r7, #24
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}

08001330 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b082      	sub	sp, #8
 8001334:	af00      	add	r7, sp, #0
 8001336:	4603      	mov	r3, r0
 8001338:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800133a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800133e:	4618      	mov	r0, r3
 8001340:	f7ff ff54 	bl	80011ec <__NVIC_EnableIRQ>
}
 8001344:	bf00      	nop
 8001346:	3708      	adds	r7, #8
 8001348:	46bd      	mov	sp, r7
 800134a:	bd80      	pop	{r7, pc}

0800134c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800134c:	b480      	push	{r7}
 800134e:	b085      	sub	sp, #20
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001354:	2300      	movs	r3, #0
 8001356:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800135e:	b2db      	uxtb	r3, r3
 8001360:	2b02      	cmp	r3, #2
 8001362:	d008      	beq.n	8001376 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	2204      	movs	r2, #4
 8001368:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	2200      	movs	r2, #0
 800136e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e022      	b.n	80013bc <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	f022 020e 	bic.w	r2, r2, #14
 8001384:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	681a      	ldr	r2, [r3, #0]
 800138c:	687b      	ldr	r3, [r7, #4]
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f022 0201 	bic.w	r2, r2, #1
 8001394:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800139a:	f003 021c 	and.w	r2, r3, #28
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a2:	2101      	movs	r1, #1
 80013a4:	fa01 f202 	lsl.w	r2, r1, r2
 80013a8:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	2201      	movs	r2, #1
 80013ae:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	2200      	movs	r2, #0
 80013b6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 80013ba:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3714      	adds	r7, #20
 80013c0:	46bd      	mov	sp, r7
 80013c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c6:	4770      	bx	lr

080013c8 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b084      	sub	sp, #16
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80013d0:	2300      	movs	r3, #0
 80013d2:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	2b02      	cmp	r3, #2
 80013de:	d005      	beq.n	80013ec <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	2204      	movs	r2, #4
 80013e4:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80013e6:	2301      	movs	r3, #1
 80013e8:	73fb      	strb	r3, [r7, #15]
 80013ea:	e029      	b.n	8001440 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	681a      	ldr	r2, [r3, #0]
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	f022 020e 	bic.w	r2, r2, #14
 80013fa:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	681a      	ldr	r2, [r3, #0]
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	681b      	ldr	r3, [r3, #0]
 8001406:	f022 0201 	bic.w	r2, r2, #1
 800140a:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001410:	f003 021c 	and.w	r2, r3, #28
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001418:	2101      	movs	r1, #1
 800141a:	fa01 f202 	lsl.w	r2, r1, r2
 800141e:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	2201      	movs	r2, #1
 8001424:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	2200      	movs	r2, #0
 800142c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001434:	2b00      	cmp	r3, #0
 8001436:	d003      	beq.n	8001440 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800143c:	6878      	ldr	r0, [r7, #4]
 800143e:	4798      	blx	r3
    }
  }
  return status;
 8001440:	7bfb      	ldrb	r3, [r7, #15]
}
 8001442:	4618      	mov	r0, r3
 8001444:	3710      	adds	r7, #16
 8001446:	46bd      	mov	sp, r7
 8001448:	bd80      	pop	{r7, pc}
	...

0800144c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800144c:	b480      	push	{r7}
 800144e:	b087      	sub	sp, #28
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001456:	2300      	movs	r3, #0
 8001458:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800145a:	e148      	b.n	80016ee <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	681a      	ldr	r2, [r3, #0]
 8001460:	2101      	movs	r1, #1
 8001462:	697b      	ldr	r3, [r7, #20]
 8001464:	fa01 f303 	lsl.w	r3, r1, r3
 8001468:	4013      	ands	r3, r2
 800146a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800146c:	68fb      	ldr	r3, [r7, #12]
 800146e:	2b00      	cmp	r3, #0
 8001470:	f000 813a 	beq.w	80016e8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	f003 0303 	and.w	r3, r3, #3
 800147c:	2b01      	cmp	r3, #1
 800147e:	d005      	beq.n	800148c <HAL_GPIO_Init+0x40>
 8001480:	683b      	ldr	r3, [r7, #0]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	f003 0303 	and.w	r3, r3, #3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d130      	bne.n	80014ee <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	689b      	ldr	r3, [r3, #8]
 8001490:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	693a      	ldr	r2, [r7, #16]
 80014a0:	4013      	ands	r3, r2
 80014a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	68da      	ldr	r2, [r3, #12]
 80014a8:	697b      	ldr	r3, [r7, #20]
 80014aa:	005b      	lsls	r3, r3, #1
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	693a      	ldr	r2, [r7, #16]
 80014b2:	4313      	orrs	r3, r2
 80014b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	693a      	ldr	r2, [r7, #16]
 80014ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80014c2:	2201      	movs	r2, #1
 80014c4:	697b      	ldr	r3, [r7, #20]
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	43db      	mvns	r3, r3
 80014cc:	693a      	ldr	r2, [r7, #16]
 80014ce:	4013      	ands	r3, r2
 80014d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	091b      	lsrs	r3, r3, #4
 80014d8:	f003 0201 	and.w	r2, r3, #1
 80014dc:	697b      	ldr	r3, [r7, #20]
 80014de:	fa02 f303 	lsl.w	r3, r2, r3
 80014e2:	693a      	ldr	r2, [r7, #16]
 80014e4:	4313      	orrs	r3, r2
 80014e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	693a      	ldr	r2, [r7, #16]
 80014ec:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80014ee:	683b      	ldr	r3, [r7, #0]
 80014f0:	685b      	ldr	r3, [r3, #4]
 80014f2:	f003 0303 	and.w	r3, r3, #3
 80014f6:	2b03      	cmp	r3, #3
 80014f8:	d017      	beq.n	800152a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	68db      	ldr	r3, [r3, #12]
 80014fe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001500:	697b      	ldr	r3, [r7, #20]
 8001502:	005b      	lsls	r3, r3, #1
 8001504:	2203      	movs	r2, #3
 8001506:	fa02 f303 	lsl.w	r3, r2, r3
 800150a:	43db      	mvns	r3, r3
 800150c:	693a      	ldr	r2, [r7, #16]
 800150e:	4013      	ands	r3, r2
 8001510:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	689a      	ldr	r2, [r3, #8]
 8001516:	697b      	ldr	r3, [r7, #20]
 8001518:	005b      	lsls	r3, r3, #1
 800151a:	fa02 f303 	lsl.w	r3, r2, r3
 800151e:	693a      	ldr	r2, [r7, #16]
 8001520:	4313      	orrs	r3, r2
 8001522:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	693a      	ldr	r2, [r7, #16]
 8001528:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685b      	ldr	r3, [r3, #4]
 800152e:	f003 0303 	and.w	r3, r3, #3
 8001532:	2b02      	cmp	r3, #2
 8001534:	d123      	bne.n	800157e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001536:	697b      	ldr	r3, [r7, #20]
 8001538:	08da      	lsrs	r2, r3, #3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	3208      	adds	r2, #8
 800153e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001542:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	f003 0307 	and.w	r3, r3, #7
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	220f      	movs	r2, #15
 800154e:	fa02 f303 	lsl.w	r3, r2, r3
 8001552:	43db      	mvns	r3, r3
 8001554:	693a      	ldr	r2, [r7, #16]
 8001556:	4013      	ands	r3, r2
 8001558:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800155a:	683b      	ldr	r3, [r7, #0]
 800155c:	691a      	ldr	r2, [r3, #16]
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	fa02 f303 	lsl.w	r3, r2, r3
 800156a:	693a      	ldr	r2, [r7, #16]
 800156c:	4313      	orrs	r3, r2
 800156e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001570:	697b      	ldr	r3, [r7, #20]
 8001572:	08da      	lsrs	r2, r3, #3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	3208      	adds	r2, #8
 8001578:	6939      	ldr	r1, [r7, #16]
 800157a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001584:	697b      	ldr	r3, [r7, #20]
 8001586:	005b      	lsls	r3, r3, #1
 8001588:	2203      	movs	r2, #3
 800158a:	fa02 f303 	lsl.w	r3, r2, r3
 800158e:	43db      	mvns	r3, r3
 8001590:	693a      	ldr	r2, [r7, #16]
 8001592:	4013      	ands	r3, r2
 8001594:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001596:	683b      	ldr	r3, [r7, #0]
 8001598:	685b      	ldr	r3, [r3, #4]
 800159a:	f003 0203 	and.w	r2, r3, #3
 800159e:	697b      	ldr	r3, [r7, #20]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	693a      	ldr	r2, [r7, #16]
 80015a8:	4313      	orrs	r3, r2
 80015aa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	693a      	ldr	r2, [r7, #16]
 80015b0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	685b      	ldr	r3, [r3, #4]
 80015b6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	f000 8094 	beq.w	80016e8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c0:	4b52      	ldr	r3, [pc, #328]	; (800170c <HAL_GPIO_Init+0x2c0>)
 80015c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015c4:	4a51      	ldr	r2, [pc, #324]	; (800170c <HAL_GPIO_Init+0x2c0>)
 80015c6:	f043 0301 	orr.w	r3, r3, #1
 80015ca:	6613      	str	r3, [r2, #96]	; 0x60
 80015cc:	4b4f      	ldr	r3, [pc, #316]	; (800170c <HAL_GPIO_Init+0x2c0>)
 80015ce:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80015d0:	f003 0301 	and.w	r3, r3, #1
 80015d4:	60bb      	str	r3, [r7, #8]
 80015d6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80015d8:	4a4d      	ldr	r2, [pc, #308]	; (8001710 <HAL_GPIO_Init+0x2c4>)
 80015da:	697b      	ldr	r3, [r7, #20]
 80015dc:	089b      	lsrs	r3, r3, #2
 80015de:	3302      	adds	r3, #2
 80015e0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015e4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80015e6:	697b      	ldr	r3, [r7, #20]
 80015e8:	f003 0303 	and.w	r3, r3, #3
 80015ec:	009b      	lsls	r3, r3, #2
 80015ee:	220f      	movs	r2, #15
 80015f0:	fa02 f303 	lsl.w	r3, r2, r3
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001602:	d00d      	beq.n	8001620 <HAL_GPIO_Init+0x1d4>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	4a43      	ldr	r2, [pc, #268]	; (8001714 <HAL_GPIO_Init+0x2c8>)
 8001608:	4293      	cmp	r3, r2
 800160a:	d007      	beq.n	800161c <HAL_GPIO_Init+0x1d0>
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	4a42      	ldr	r2, [pc, #264]	; (8001718 <HAL_GPIO_Init+0x2cc>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d101      	bne.n	8001618 <HAL_GPIO_Init+0x1cc>
 8001614:	2302      	movs	r3, #2
 8001616:	e004      	b.n	8001622 <HAL_GPIO_Init+0x1d6>
 8001618:	2307      	movs	r3, #7
 800161a:	e002      	b.n	8001622 <HAL_GPIO_Init+0x1d6>
 800161c:	2301      	movs	r3, #1
 800161e:	e000      	b.n	8001622 <HAL_GPIO_Init+0x1d6>
 8001620:	2300      	movs	r3, #0
 8001622:	697a      	ldr	r2, [r7, #20]
 8001624:	f002 0203 	and.w	r2, r2, #3
 8001628:	0092      	lsls	r2, r2, #2
 800162a:	4093      	lsls	r3, r2
 800162c:	693a      	ldr	r2, [r7, #16]
 800162e:	4313      	orrs	r3, r2
 8001630:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001632:	4937      	ldr	r1, [pc, #220]	; (8001710 <HAL_GPIO_Init+0x2c4>)
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	089b      	lsrs	r3, r3, #2
 8001638:	3302      	adds	r3, #2
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001640:	4b36      	ldr	r3, [pc, #216]	; (800171c <HAL_GPIO_Init+0x2d0>)
 8001642:	689b      	ldr	r3, [r3, #8]
 8001644:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	43db      	mvns	r3, r3
 800164a:	693a      	ldr	r2, [r7, #16]
 800164c:	4013      	ands	r3, r2
 800164e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001650:	683b      	ldr	r3, [r7, #0]
 8001652:	685b      	ldr	r3, [r3, #4]
 8001654:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001658:	2b00      	cmp	r3, #0
 800165a:	d003      	beq.n	8001664 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800165c:	693a      	ldr	r2, [r7, #16]
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	4313      	orrs	r3, r2
 8001662:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001664:	4a2d      	ldr	r2, [pc, #180]	; (800171c <HAL_GPIO_Init+0x2d0>)
 8001666:	693b      	ldr	r3, [r7, #16]
 8001668:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800166a:	4b2c      	ldr	r3, [pc, #176]	; (800171c <HAL_GPIO_Init+0x2d0>)
 800166c:	68db      	ldr	r3, [r3, #12]
 800166e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	43db      	mvns	r3, r3
 8001674:	693a      	ldr	r2, [r7, #16]
 8001676:	4013      	ands	r3, r2
 8001678:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	685b      	ldr	r3, [r3, #4]
 800167e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001682:	2b00      	cmp	r3, #0
 8001684:	d003      	beq.n	800168e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001686:	693a      	ldr	r2, [r7, #16]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	4313      	orrs	r3, r2
 800168c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800168e:	4a23      	ldr	r2, [pc, #140]	; (800171c <HAL_GPIO_Init+0x2d0>)
 8001690:	693b      	ldr	r3, [r7, #16]
 8001692:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <HAL_GPIO_Init+0x2d0>)
 8001696:	685b      	ldr	r3, [r3, #4]
 8001698:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	43db      	mvns	r3, r3
 800169e:	693a      	ldr	r2, [r7, #16]
 80016a0:	4013      	ands	r3, r2
 80016a2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	685b      	ldr	r3, [r3, #4]
 80016a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d003      	beq.n	80016b8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80016b0:	693a      	ldr	r2, [r7, #16]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	4313      	orrs	r3, r2
 80016b6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80016b8:	4a18      	ldr	r2, [pc, #96]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016ba:	693b      	ldr	r3, [r7, #16]
 80016bc:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80016be:	4b17      	ldr	r3, [pc, #92]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80016c4:	68fb      	ldr	r3, [r7, #12]
 80016c6:	43db      	mvns	r3, r3
 80016c8:	693a      	ldr	r2, [r7, #16]
 80016ca:	4013      	ands	r3, r2
 80016cc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d003      	beq.n	80016e2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80016da:	693a      	ldr	r2, [r7, #16]
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	4313      	orrs	r3, r2
 80016e0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80016e2:	4a0e      	ldr	r2, [pc, #56]	; (800171c <HAL_GPIO_Init+0x2d0>)
 80016e4:	693b      	ldr	r3, [r7, #16]
 80016e6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	3301      	adds	r3, #1
 80016ec:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016ee:	683b      	ldr	r3, [r7, #0]
 80016f0:	681a      	ldr	r2, [r3, #0]
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	fa22 f303 	lsr.w	r3, r2, r3
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	f47f aeaf 	bne.w	800145c <HAL_GPIO_Init+0x10>
  }
}
 80016fe:	bf00      	nop
 8001700:	bf00      	nop
 8001702:	371c      	adds	r7, #28
 8001704:	46bd      	mov	sp, r7
 8001706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800170a:	4770      	bx	lr
 800170c:	40021000 	.word	0x40021000
 8001710:	40010000 	.word	0x40010000
 8001714:	48000400 	.word	0x48000400
 8001718:	48000800 	.word	0x48000800
 800171c:	40010400 	.word	0x40010400

08001720 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001720:	b480      	push	{r7}
 8001722:	b083      	sub	sp, #12
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
 8001728:	460b      	mov	r3, r1
 800172a:	807b      	strh	r3, [r7, #2]
 800172c:	4613      	mov	r3, r2
 800172e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001730:	787b      	ldrb	r3, [r7, #1]
 8001732:	2b00      	cmp	r3, #0
 8001734:	d003      	beq.n	800173e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001736:	887a      	ldrh	r2, [r7, #2]
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800173c:	e002      	b.n	8001744 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800173e:	887a      	ldrh	r2, [r7, #2]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001744:	bf00      	nop
 8001746:	370c      	adds	r7, #12
 8001748:	46bd      	mov	sp, r7
 800174a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800174e:	4770      	bx	lr

08001750 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001750:	b480      	push	{r7}
 8001752:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001754:	4b05      	ldr	r3, [pc, #20]	; (800176c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4a04      	ldr	r2, [pc, #16]	; (800176c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800175a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800175e:	6013      	str	r3, [r2, #0]
}
 8001760:	bf00      	nop
 8001762:	46bd      	mov	sp, r7
 8001764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001768:	4770      	bx	lr
 800176a:	bf00      	nop
 800176c:	40007000 	.word	0x40007000

08001770 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001770:	b480      	push	{r7}
 8001772:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001774:	4b04      	ldr	r3, [pc, #16]	; (8001788 <HAL_PWREx_GetVoltageRange+0x18>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800177c:	4618      	mov	r0, r3
 800177e:	46bd      	mov	sp, r7
 8001780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001784:	4770      	bx	lr
 8001786:	bf00      	nop
 8001788:	40007000 	.word	0x40007000

0800178c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800178c:	b480      	push	{r7}
 800178e:	b085      	sub	sp, #20
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800179a:	d130      	bne.n	80017fe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800179c:	4b23      	ldr	r3, [pc, #140]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80017a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80017a8:	d038      	beq.n	800181c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80017aa:	4b20      	ldr	r3, [pc, #128]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80017b2:	4a1e      	ldr	r2, [pc, #120]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017b4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80017b8:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80017ba:	4b1d      	ldr	r3, [pc, #116]	; (8001830 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80017bc:	681b      	ldr	r3, [r3, #0]
 80017be:	2232      	movs	r2, #50	; 0x32
 80017c0:	fb02 f303 	mul.w	r3, r2, r3
 80017c4:	4a1b      	ldr	r2, [pc, #108]	; (8001834 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80017c6:	fba2 2303 	umull	r2, r3, r2, r3
 80017ca:	0c9b      	lsrs	r3, r3, #18
 80017cc:	3301      	adds	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d0:	e002      	b.n	80017d8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	3b01      	subs	r3, #1
 80017d6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017da:	695b      	ldr	r3, [r3, #20]
 80017dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017e4:	d102      	bne.n	80017ec <HAL_PWREx_ControlVoltageScaling+0x60>
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	2b00      	cmp	r3, #0
 80017ea:	d1f2      	bne.n	80017d2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80017ec:	4b0f      	ldr	r3, [pc, #60]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80017ee:	695b      	ldr	r3, [r3, #20]
 80017f0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80017f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80017f8:	d110      	bne.n	800181c <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e00f      	b.n	800181e <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80017fe:	4b0b      	ldr	r3, [pc, #44]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001806:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800180a:	d007      	beq.n	800181c <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 800180c:	4b07      	ldr	r3, [pc, #28]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001814:	4a05      	ldr	r2, [pc, #20]	; (800182c <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001816:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800181a:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800181c:	2300      	movs	r3, #0
}
 800181e:	4618      	mov	r0, r3
 8001820:	3714      	adds	r7, #20
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	40007000 	.word	0x40007000
 8001830:	20000000 	.word	0x20000000
 8001834:	431bde83 	.word	0x431bde83

08001838 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	2b00      	cmp	r3, #0
 8001844:	d102      	bne.n	800184c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001846:	2301      	movs	r3, #1
 8001848:	f000 bc02 	b.w	8002050 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800184c:	4b96      	ldr	r3, [pc, #600]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	f003 030c 	and.w	r3, r3, #12
 8001854:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001856:	4b94      	ldr	r3, [pc, #592]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001858:	68db      	ldr	r3, [r3, #12]
 800185a:	f003 0303 	and.w	r3, r3, #3
 800185e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	f003 0310 	and.w	r3, r3, #16
 8001868:	2b00      	cmp	r3, #0
 800186a:	f000 80e4 	beq.w	8001a36 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800186e:	69bb      	ldr	r3, [r7, #24]
 8001870:	2b00      	cmp	r3, #0
 8001872:	d007      	beq.n	8001884 <HAL_RCC_OscConfig+0x4c>
 8001874:	69bb      	ldr	r3, [r7, #24]
 8001876:	2b0c      	cmp	r3, #12
 8001878:	f040 808b 	bne.w	8001992 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800187c:	697b      	ldr	r3, [r7, #20]
 800187e:	2b01      	cmp	r3, #1
 8001880:	f040 8087 	bne.w	8001992 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001884:	4b88      	ldr	r3, [pc, #544]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d005      	beq.n	800189c <HAL_RCC_OscConfig+0x64>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	699b      	ldr	r3, [r3, #24]
 8001894:	2b00      	cmp	r3, #0
 8001896:	d101      	bne.n	800189c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	e3d9      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	6a1a      	ldr	r2, [r3, #32]
 80018a0:	4b81      	ldr	r3, [pc, #516]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	f003 0308 	and.w	r3, r3, #8
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d004      	beq.n	80018b6 <HAL_RCC_OscConfig+0x7e>
 80018ac:	4b7e      	ldr	r3, [pc, #504]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018b4:	e005      	b.n	80018c2 <HAL_RCC_OscConfig+0x8a>
 80018b6:	4b7c      	ldr	r3, [pc, #496]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80018b8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80018bc:	091b      	lsrs	r3, r3, #4
 80018be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d223      	bcs.n	800190e <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	6a1b      	ldr	r3, [r3, #32]
 80018ca:	4618      	mov	r0, r3
 80018cc:	f000 fdbe 	bl	800244c <RCC_SetFlashLatencyFromMSIRange>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80018d6:	2301      	movs	r3, #1
 80018d8:	e3ba      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018da:	4b73      	ldr	r3, [pc, #460]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	4a72      	ldr	r2, [pc, #456]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80018e0:	f043 0308 	orr.w	r3, r3, #8
 80018e4:	6013      	str	r3, [r2, #0]
 80018e6:	4b70      	ldr	r3, [pc, #448]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	496d      	ldr	r1, [pc, #436]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80018f4:	4313      	orrs	r3, r2
 80018f6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018f8:	4b6b      	ldr	r3, [pc, #428]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	69db      	ldr	r3, [r3, #28]
 8001904:	021b      	lsls	r3, r3, #8
 8001906:	4968      	ldr	r1, [pc, #416]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001908:	4313      	orrs	r3, r2
 800190a:	604b      	str	r3, [r1, #4]
 800190c:	e025      	b.n	800195a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800190e:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001914:	f043 0308 	orr.w	r3, r3, #8
 8001918:	6013      	str	r3, [r2, #0]
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6a1b      	ldr	r3, [r3, #32]
 8001926:	4960      	ldr	r1, [pc, #384]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001928:	4313      	orrs	r3, r2
 800192a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800192c:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	69db      	ldr	r3, [r3, #28]
 8001938:	021b      	lsls	r3, r3, #8
 800193a:	495b      	ldr	r1, [pc, #364]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 800193c:	4313      	orrs	r3, r2
 800193e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001940:	69bb      	ldr	r3, [r7, #24]
 8001942:	2b00      	cmp	r3, #0
 8001944:	d109      	bne.n	800195a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6a1b      	ldr	r3, [r3, #32]
 800194a:	4618      	mov	r0, r3
 800194c:	f000 fd7e 	bl	800244c <RCC_SetFlashLatencyFromMSIRange>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e37a      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800195a:	f000 fc81 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 800195e:	4602      	mov	r2, r0
 8001960:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001962:	689b      	ldr	r3, [r3, #8]
 8001964:	091b      	lsrs	r3, r3, #4
 8001966:	f003 030f 	and.w	r3, r3, #15
 800196a:	4950      	ldr	r1, [pc, #320]	; (8001aac <HAL_RCC_OscConfig+0x274>)
 800196c:	5ccb      	ldrb	r3, [r1, r3]
 800196e:	f003 031f 	and.w	r3, r3, #31
 8001972:	fa22 f303 	lsr.w	r3, r2, r3
 8001976:	4a4e      	ldr	r2, [pc, #312]	; (8001ab0 <HAL_RCC_OscConfig+0x278>)
 8001978:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800197a:	4b4e      	ldr	r3, [pc, #312]	; (8001ab4 <HAL_RCC_OscConfig+0x27c>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4618      	mov	r0, r3
 8001980:	f7ff f9c0 	bl	8000d04 <HAL_InitTick>
 8001984:	4603      	mov	r3, r0
 8001986:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001988:	7bfb      	ldrb	r3, [r7, #15]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d052      	beq.n	8001a34 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800198e:	7bfb      	ldrb	r3, [r7, #15]
 8001990:	e35e      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	699b      	ldr	r3, [r3, #24]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d032      	beq.n	8001a00 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800199a:	4b43      	ldr	r3, [pc, #268]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4a42      	ldr	r2, [pc, #264]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80019a0:	f043 0301 	orr.w	r3, r3, #1
 80019a4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80019a6:	f7ff fbe3 	bl	8001170 <HAL_GetTick>
 80019aa:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019ac:	e008      	b.n	80019c0 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80019ae:	f7ff fbdf 	bl	8001170 <HAL_GetTick>
 80019b2:	4602      	mov	r2, r0
 80019b4:	693b      	ldr	r3, [r7, #16]
 80019b6:	1ad3      	subs	r3, r2, r3
 80019b8:	2b02      	cmp	r3, #2
 80019ba:	d901      	bls.n	80019c0 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80019bc:	2303      	movs	r3, #3
 80019be:	e347      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80019c0:	4b39      	ldr	r3, [pc, #228]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	f003 0302 	and.w	r3, r3, #2
 80019c8:	2b00      	cmp	r3, #0
 80019ca:	d0f0      	beq.n	80019ae <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80019cc:	4b36      	ldr	r3, [pc, #216]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	4a35      	ldr	r2, [pc, #212]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6013      	str	r3, [r2, #0]
 80019d8:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	6a1b      	ldr	r3, [r3, #32]
 80019e4:	4930      	ldr	r1, [pc, #192]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80019e6:	4313      	orrs	r3, r2
 80019e8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80019ea:	4b2f      	ldr	r3, [pc, #188]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80019ec:	685b      	ldr	r3, [r3, #4]
 80019ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	69db      	ldr	r3, [r3, #28]
 80019f6:	021b      	lsls	r3, r3, #8
 80019f8:	492b      	ldr	r1, [pc, #172]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 80019fa:	4313      	orrs	r3, r2
 80019fc:	604b      	str	r3, [r1, #4]
 80019fe:	e01a      	b.n	8001a36 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001a00:	4b29      	ldr	r3, [pc, #164]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	4a28      	ldr	r2, [pc, #160]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001a06:	f023 0301 	bic.w	r3, r3, #1
 8001a0a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001a0c:	f7ff fbb0 	bl	8001170 <HAL_GetTick>
 8001a10:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a12:	e008      	b.n	8001a26 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001a14:	f7ff fbac 	bl	8001170 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	693b      	ldr	r3, [r7, #16]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	2b02      	cmp	r3, #2
 8001a20:	d901      	bls.n	8001a26 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001a22:	2303      	movs	r3, #3
 8001a24:	e314      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001a26:	4b20      	ldr	r3, [pc, #128]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	f003 0302 	and.w	r3, r3, #2
 8001a2e:	2b00      	cmp	r3, #0
 8001a30:	d1f0      	bne.n	8001a14 <HAL_RCC_OscConfig+0x1dc>
 8001a32:	e000      	b.n	8001a36 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001a34:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f003 0301 	and.w	r3, r3, #1
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d073      	beq.n	8001b2a <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001a42:	69bb      	ldr	r3, [r7, #24]
 8001a44:	2b08      	cmp	r3, #8
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_OscConfig+0x21c>
 8001a48:	69bb      	ldr	r3, [r7, #24]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d10e      	bne.n	8001a6c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001a4e:	697b      	ldr	r3, [r7, #20]
 8001a50:	2b03      	cmp	r3, #3
 8001a52:	d10b      	bne.n	8001a6c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a54:	4b14      	ldr	r3, [pc, #80]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d063      	beq.n	8001b28 <HAL_RCC_OscConfig+0x2f0>
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d15f      	bne.n	8001b28 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	e2f1      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001a6c:	687b      	ldr	r3, [r7, #4]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001a74:	d106      	bne.n	8001a84 <HAL_RCC_OscConfig+0x24c>
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a0b      	ldr	r2, [pc, #44]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001a7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a80:	6013      	str	r3, [r2, #0]
 8001a82:	e025      	b.n	8001ad0 <HAL_RCC_OscConfig+0x298>
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	685b      	ldr	r3, [r3, #4]
 8001a88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001a8c:	d114      	bne.n	8001ab8 <HAL_RCC_OscConfig+0x280>
 8001a8e:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	4a05      	ldr	r2, [pc, #20]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001a94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001a98:	6013      	str	r3, [r2, #0]
 8001a9a:	4b03      	ldr	r3, [pc, #12]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a02      	ldr	r2, [pc, #8]	; (8001aa8 <HAL_RCC_OscConfig+0x270>)
 8001aa0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001aa4:	6013      	str	r3, [r2, #0]
 8001aa6:	e013      	b.n	8001ad0 <HAL_RCC_OscConfig+0x298>
 8001aa8:	40021000 	.word	0x40021000
 8001aac:	08009350 	.word	0x08009350
 8001ab0:	20000000 	.word	0x20000000
 8001ab4:	20000004 	.word	0x20000004
 8001ab8:	4ba0      	ldr	r3, [pc, #640]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	4a9f      	ldr	r2, [pc, #636]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001abe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001ac2:	6013      	str	r3, [r2, #0]
 8001ac4:	4b9d      	ldr	r3, [pc, #628]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4a9c      	ldr	r2, [pc, #624]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001aca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001ace:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d013      	beq.n	8001b00 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ad8:	f7ff fb4a 	bl	8001170 <HAL_GetTick>
 8001adc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001ade:	e008      	b.n	8001af2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ae0:	f7ff fb46 	bl	8001170 <HAL_GetTick>
 8001ae4:	4602      	mov	r2, r0
 8001ae6:	693b      	ldr	r3, [r7, #16]
 8001ae8:	1ad3      	subs	r3, r2, r3
 8001aea:	2b64      	cmp	r3, #100	; 0x64
 8001aec:	d901      	bls.n	8001af2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001aee:	2303      	movs	r3, #3
 8001af0:	e2ae      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001af2:	4b92      	ldr	r3, [pc, #584]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001af4:	681b      	ldr	r3, [r3, #0]
 8001af6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d0f0      	beq.n	8001ae0 <HAL_RCC_OscConfig+0x2a8>
 8001afe:	e014      	b.n	8001b2a <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b00:	f7ff fb36 	bl	8001170 <HAL_GetTick>
 8001b04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b06:	e008      	b.n	8001b1a <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001b08:	f7ff fb32 	bl	8001170 <HAL_GetTick>
 8001b0c:	4602      	mov	r2, r0
 8001b0e:	693b      	ldr	r3, [r7, #16]
 8001b10:	1ad3      	subs	r3, r2, r3
 8001b12:	2b64      	cmp	r3, #100	; 0x64
 8001b14:	d901      	bls.n	8001b1a <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001b16:	2303      	movs	r3, #3
 8001b18:	e29a      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001b1a:	4b88      	ldr	r3, [pc, #544]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d1f0      	bne.n	8001b08 <HAL_RCC_OscConfig+0x2d0>
 8001b26:	e000      	b.n	8001b2a <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001b28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 0302 	and.w	r3, r3, #2
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d060      	beq.n	8001bf8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001b36:	69bb      	ldr	r3, [r7, #24]
 8001b38:	2b04      	cmp	r3, #4
 8001b3a:	d005      	beq.n	8001b48 <HAL_RCC_OscConfig+0x310>
 8001b3c:	69bb      	ldr	r3, [r7, #24]
 8001b3e:	2b0c      	cmp	r3, #12
 8001b40:	d119      	bne.n	8001b76 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001b42:	697b      	ldr	r3, [r7, #20]
 8001b44:	2b02      	cmp	r3, #2
 8001b46:	d116      	bne.n	8001b76 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b48:	4b7c      	ldr	r3, [pc, #496]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d005      	beq.n	8001b60 <HAL_RCC_OscConfig+0x328>
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	68db      	ldr	r3, [r3, #12]
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d101      	bne.n	8001b60 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001b5c:	2301      	movs	r3, #1
 8001b5e:	e277      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001b60:	4b76      	ldr	r3, [pc, #472]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	691b      	ldr	r3, [r3, #16]
 8001b6c:	061b      	lsls	r3, r3, #24
 8001b6e:	4973      	ldr	r1, [pc, #460]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001b70:	4313      	orrs	r3, r2
 8001b72:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001b74:	e040      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d023      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001b7e:	4b6f      	ldr	r3, [pc, #444]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4a6e      	ldr	r2, [pc, #440]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001b84:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b88:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b8a:	f7ff faf1 	bl	8001170 <HAL_GetTick>
 8001b8e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b90:	e008      	b.n	8001ba4 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001b92:	f7ff faed 	bl	8001170 <HAL_GetTick>
 8001b96:	4602      	mov	r2, r0
 8001b98:	693b      	ldr	r3, [r7, #16]
 8001b9a:	1ad3      	subs	r3, r2, r3
 8001b9c:	2b02      	cmp	r3, #2
 8001b9e:	d901      	bls.n	8001ba4 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001ba0:	2303      	movs	r3, #3
 8001ba2:	e255      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ba4:	4b65      	ldr	r3, [pc, #404]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d0f0      	beq.n	8001b92 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001bb0:	4b62      	ldr	r3, [pc, #392]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	691b      	ldr	r3, [r3, #16]
 8001bbc:	061b      	lsls	r3, r3, #24
 8001bbe:	495f      	ldr	r1, [pc, #380]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]
 8001bc4:	e018      	b.n	8001bf8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a5c      	ldr	r2, [pc, #368]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001bcc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001bd0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001bd2:	f7ff facd 	bl	8001170 <HAL_GetTick>
 8001bd6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bd8:	e008      	b.n	8001bec <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001bda:	f7ff fac9 	bl	8001170 <HAL_GetTick>
 8001bde:	4602      	mov	r2, r0
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	1ad3      	subs	r3, r2, r3
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d901      	bls.n	8001bec <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001be8:	2303      	movs	r3, #3
 8001bea:	e231      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001bec:	4b53      	ldr	r3, [pc, #332]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d1f0      	bne.n	8001bda <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0308 	and.w	r3, r3, #8
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d03c      	beq.n	8001c7e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	695b      	ldr	r3, [r3, #20]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d01c      	beq.n	8001c46 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001c0c:	4b4b      	ldr	r3, [pc, #300]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001c0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c12:	4a4a      	ldr	r2, [pc, #296]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001c14:	f043 0301 	orr.w	r3, r3, #1
 8001c18:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c1c:	f7ff faa8 	bl	8001170 <HAL_GetTick>
 8001c20:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c22:	e008      	b.n	8001c36 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c24:	f7ff faa4 	bl	8001170 <HAL_GetTick>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	1ad3      	subs	r3, r2, r3
 8001c2e:	2b02      	cmp	r3, #2
 8001c30:	d901      	bls.n	8001c36 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001c32:	2303      	movs	r3, #3
 8001c34:	e20c      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001c36:	4b41      	ldr	r3, [pc, #260]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001c38:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c3c:	f003 0302 	and.w	r3, r3, #2
 8001c40:	2b00      	cmp	r3, #0
 8001c42:	d0ef      	beq.n	8001c24 <HAL_RCC_OscConfig+0x3ec>
 8001c44:	e01b      	b.n	8001c7e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001c46:	4b3d      	ldr	r3, [pc, #244]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001c48:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c4c:	4a3b      	ldr	r2, [pc, #236]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001c4e:	f023 0301 	bic.w	r3, r3, #1
 8001c52:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c56:	f7ff fa8b 	bl	8001170 <HAL_GetTick>
 8001c5a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c5c:	e008      	b.n	8001c70 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001c5e:	f7ff fa87 	bl	8001170 <HAL_GetTick>
 8001c62:	4602      	mov	r2, r0
 8001c64:	693b      	ldr	r3, [r7, #16]
 8001c66:	1ad3      	subs	r3, r2, r3
 8001c68:	2b02      	cmp	r3, #2
 8001c6a:	d901      	bls.n	8001c70 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001c6c:	2303      	movs	r3, #3
 8001c6e:	e1ef      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001c70:	4b32      	ldr	r3, [pc, #200]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001c72:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c76:	f003 0302 	and.w	r3, r3, #2
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d1ef      	bne.n	8001c5e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	f003 0304 	and.w	r3, r3, #4
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	f000 80a6 	beq.w	8001dd8 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001c90:	4b2a      	ldr	r3, [pc, #168]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001c92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c98:	2b00      	cmp	r3, #0
 8001c9a:	d10d      	bne.n	8001cb8 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c9c:	4b27      	ldr	r3, [pc, #156]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001c9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ca0:	4a26      	ldr	r2, [pc, #152]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001ca2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ca6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ca8:	4b24      	ldr	r3, [pc, #144]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001caa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cb0:	60bb      	str	r3, [r7, #8]
 8001cb2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cb8:	4b21      	ldr	r3, [pc, #132]	; (8001d40 <HAL_RCC_OscConfig+0x508>)
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d118      	bne.n	8001cf6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001cc4:	4b1e      	ldr	r3, [pc, #120]	; (8001d40 <HAL_RCC_OscConfig+0x508>)
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a1d      	ldr	r2, [pc, #116]	; (8001d40 <HAL_RCC_OscConfig+0x508>)
 8001cca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001cce:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001cd0:	f7ff fa4e 	bl	8001170 <HAL_GetTick>
 8001cd4:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cd6:	e008      	b.n	8001cea <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001cd8:	f7ff fa4a 	bl	8001170 <HAL_GetTick>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	693b      	ldr	r3, [r7, #16]
 8001ce0:	1ad3      	subs	r3, r2, r3
 8001ce2:	2b02      	cmp	r3, #2
 8001ce4:	d901      	bls.n	8001cea <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001ce6:	2303      	movs	r3, #3
 8001ce8:	e1b2      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001cea:	4b15      	ldr	r3, [pc, #84]	; (8001d40 <HAL_RCC_OscConfig+0x508>)
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d0f0      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	2b01      	cmp	r3, #1
 8001cfc:	d108      	bne.n	8001d10 <HAL_RCC_OscConfig+0x4d8>
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001d00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d04:	4a0d      	ldr	r2, [pc, #52]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001d06:	f043 0301 	orr.w	r3, r3, #1
 8001d0a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d0e:	e029      	b.n	8001d64 <HAL_RCC_OscConfig+0x52c>
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	689b      	ldr	r3, [r3, #8]
 8001d14:	2b05      	cmp	r3, #5
 8001d16:	d115      	bne.n	8001d44 <HAL_RCC_OscConfig+0x50c>
 8001d18:	4b08      	ldr	r3, [pc, #32]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001d1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d1e:	4a07      	ldr	r2, [pc, #28]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001d20:	f043 0304 	orr.w	r3, r3, #4
 8001d24:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d28:	4b04      	ldr	r3, [pc, #16]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001d2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d2e:	4a03      	ldr	r2, [pc, #12]	; (8001d3c <HAL_RCC_OscConfig+0x504>)
 8001d30:	f043 0301 	orr.w	r3, r3, #1
 8001d34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d38:	e014      	b.n	8001d64 <HAL_RCC_OscConfig+0x52c>
 8001d3a:	bf00      	nop
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40007000 	.word	0x40007000
 8001d44:	4b9a      	ldr	r3, [pc, #616]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d4a:	4a99      	ldr	r2, [pc, #612]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001d4c:	f023 0301 	bic.w	r3, r3, #1
 8001d50:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001d54:	4b96      	ldr	r3, [pc, #600]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001d56:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d5a:	4a95      	ldr	r2, [pc, #596]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001d5c:	f023 0304 	bic.w	r3, r3, #4
 8001d60:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	689b      	ldr	r3, [r3, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d016      	beq.n	8001d9a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d6c:	f7ff fa00 	bl	8001170 <HAL_GetTick>
 8001d70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d72:	e00a      	b.n	8001d8a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001d74:	f7ff f9fc 	bl	8001170 <HAL_GetTick>
 8001d78:	4602      	mov	r2, r0
 8001d7a:	693b      	ldr	r3, [r7, #16]
 8001d7c:	1ad3      	subs	r3, r2, r3
 8001d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d901      	bls.n	8001d8a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001d86:	2303      	movs	r3, #3
 8001d88:	e162      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001d8a:	4b89      	ldr	r3, [pc, #548]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001d8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001d90:	f003 0302 	and.w	r3, r3, #2
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d0ed      	beq.n	8001d74 <HAL_RCC_OscConfig+0x53c>
 8001d98:	e015      	b.n	8001dc6 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001d9a:	f7ff f9e9 	bl	8001170 <HAL_GetTick>
 8001d9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001da0:	e00a      	b.n	8001db8 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001da2:	f7ff f9e5 	bl	8001170 <HAL_GetTick>
 8001da6:	4602      	mov	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d901      	bls.n	8001db8 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001db4:	2303      	movs	r3, #3
 8001db6:	e14b      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001db8:	4b7d      	ldr	r3, [pc, #500]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001dba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dbe:	f003 0302 	and.w	r3, r3, #2
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d1ed      	bne.n	8001da2 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001dc6:	7ffb      	ldrb	r3, [r7, #31]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d105      	bne.n	8001dd8 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001dcc:	4b78      	ldr	r3, [pc, #480]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dd0:	4a77      	ldr	r2, [pc, #476]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001dd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dd6:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	f003 0320 	and.w	r3, r3, #32
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d03c      	beq.n	8001e5e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d01c      	beq.n	8001e26 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001dec:	4b70      	ldr	r3, [pc, #448]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001dee:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001df2:	4a6f      	ldr	r2, [pc, #444]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001df4:	f043 0301 	orr.w	r3, r3, #1
 8001df8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001dfc:	f7ff f9b8 	bl	8001170 <HAL_GetTick>
 8001e00:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e02:	e008      	b.n	8001e16 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e04:	f7ff f9b4 	bl	8001170 <HAL_GetTick>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	693b      	ldr	r3, [r7, #16]
 8001e0c:	1ad3      	subs	r3, r2, r3
 8001e0e:	2b02      	cmp	r3, #2
 8001e10:	d901      	bls.n	8001e16 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001e12:	2303      	movs	r3, #3
 8001e14:	e11c      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001e16:	4b66      	ldr	r3, [pc, #408]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001e18:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e1c:	f003 0302 	and.w	r3, r3, #2
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d0ef      	beq.n	8001e04 <HAL_RCC_OscConfig+0x5cc>
 8001e24:	e01b      	b.n	8001e5e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001e26:	4b62      	ldr	r3, [pc, #392]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001e28:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e2c:	4a60      	ldr	r2, [pc, #384]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001e2e:	f023 0301 	bic.w	r3, r3, #1
 8001e32:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001e36:	f7ff f99b 	bl	8001170 <HAL_GetTick>
 8001e3a:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e3c:	e008      	b.n	8001e50 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001e3e:	f7ff f997 	bl	8001170 <HAL_GetTick>
 8001e42:	4602      	mov	r2, r0
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	1ad3      	subs	r3, r2, r3
 8001e48:	2b02      	cmp	r3, #2
 8001e4a:	d901      	bls.n	8001e50 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001e4c:	2303      	movs	r3, #3
 8001e4e:	e0ff      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001e50:	4b57      	ldr	r3, [pc, #348]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001e52:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d1ef      	bne.n	8001e3e <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	f000 80f3 	beq.w	800204e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e6c:	2b02      	cmp	r3, #2
 8001e6e:	f040 80c9 	bne.w	8002004 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001e72:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001e74:	68db      	ldr	r3, [r3, #12]
 8001e76:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	f003 0203 	and.w	r2, r3, #3
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e82:	429a      	cmp	r2, r3
 8001e84:	d12c      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e90:	3b01      	subs	r3, #1
 8001e92:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d123      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e98:	697b      	ldr	r3, [r7, #20]
 8001e9a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ea2:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d11b      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ea8:	697b      	ldr	r3, [r7, #20]
 8001eaa:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eb2:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d113      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001ec2:	085b      	lsrs	r3, r3, #1
 8001ec4:	3b01      	subs	r3, #1
 8001ec6:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d109      	bne.n	8001ee0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001ecc:	697b      	ldr	r3, [r7, #20]
 8001ece:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	085b      	lsrs	r3, r3, #1
 8001ed8:	3b01      	subs	r3, #1
 8001eda:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001edc:	429a      	cmp	r2, r3
 8001ede:	d06b      	beq.n	8001fb8 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001ee0:	69bb      	ldr	r3, [r7, #24]
 8001ee2:	2b0c      	cmp	r3, #12
 8001ee4:	d062      	beq.n	8001fac <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8001ee6:	4b32      	ldr	r3, [pc, #200]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d001      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001ef2:	2301      	movs	r3, #1
 8001ef4:	e0ac      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8001ef6:	4b2e      	ldr	r3, [pc, #184]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	4a2d      	ldr	r2, [pc, #180]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001efc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001f00:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f02:	f7ff f935 	bl	8001170 <HAL_GetTick>
 8001f06:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f08:	e008      	b.n	8001f1c <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f0a:	f7ff f931 	bl	8001170 <HAL_GetTick>
 8001f0e:	4602      	mov	r2, r0
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	1ad3      	subs	r3, r2, r3
 8001f14:	2b02      	cmp	r3, #2
 8001f16:	d901      	bls.n	8001f1c <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001f18:	2303      	movs	r3, #3
 8001f1a:	e099      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001f1c:	4b24      	ldr	r3, [pc, #144]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d1f0      	bne.n	8001f0a <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001f28:	4b21      	ldr	r3, [pc, #132]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001f2a:	68da      	ldr	r2, [r3, #12]
 8001f2c:	4b21      	ldr	r3, [pc, #132]	; (8001fb4 <HAL_RCC_OscConfig+0x77c>)
 8001f2e:	4013      	ands	r3, r2
 8001f30:	687a      	ldr	r2, [r7, #4]
 8001f32:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001f34:	687a      	ldr	r2, [r7, #4]
 8001f36:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001f38:	3a01      	subs	r2, #1
 8001f3a:	0112      	lsls	r2, r2, #4
 8001f3c:	4311      	orrs	r1, r2
 8001f3e:	687a      	ldr	r2, [r7, #4]
 8001f40:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001f42:	0212      	lsls	r2, r2, #8
 8001f44:	4311      	orrs	r1, r2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001f4a:	0852      	lsrs	r2, r2, #1
 8001f4c:	3a01      	subs	r2, #1
 8001f4e:	0552      	lsls	r2, r2, #21
 8001f50:	4311      	orrs	r1, r2
 8001f52:	687a      	ldr	r2, [r7, #4]
 8001f54:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001f56:	0852      	lsrs	r2, r2, #1
 8001f58:	3a01      	subs	r2, #1
 8001f5a:	0652      	lsls	r2, r2, #25
 8001f5c:	4311      	orrs	r1, r2
 8001f5e:	687a      	ldr	r2, [r7, #4]
 8001f60:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001f62:	06d2      	lsls	r2, r2, #27
 8001f64:	430a      	orrs	r2, r1
 8001f66:	4912      	ldr	r1, [pc, #72]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001f68:	4313      	orrs	r3, r2
 8001f6a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001f6c:	4b10      	ldr	r3, [pc, #64]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a0f      	ldr	r2, [pc, #60]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001f72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001f78:	4b0d      	ldr	r3, [pc, #52]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	4a0c      	ldr	r2, [pc, #48]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001f82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001f84:	f7ff f8f4 	bl	8001170 <HAL_GetTick>
 8001f88:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f8a:	e008      	b.n	8001f9e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001f8c:	f7ff f8f0 	bl	8001170 <HAL_GetTick>
 8001f90:	4602      	mov	r2, r0
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	1ad3      	subs	r3, r2, r3
 8001f96:	2b02      	cmp	r3, #2
 8001f98:	d901      	bls.n	8001f9e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001f9a:	2303      	movs	r3, #3
 8001f9c:	e058      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001f9e:	4b04      	ldr	r3, [pc, #16]	; (8001fb0 <HAL_RCC_OscConfig+0x778>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	d0f0      	beq.n	8001f8c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001faa:	e050      	b.n	800204e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001fac:	2301      	movs	r3, #1
 8001fae:	e04f      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
 8001fb0:	40021000 	.word	0x40021000
 8001fb4:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fb8:	4b27      	ldr	r3, [pc, #156]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d144      	bne.n	800204e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001fc4:	4b24      	ldr	r3, [pc, #144]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	4a23      	ldr	r2, [pc, #140]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 8001fca:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fce:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001fd0:	4b21      	ldr	r3, [pc, #132]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 8001fd2:	68db      	ldr	r3, [r3, #12]
 8001fd4:	4a20      	ldr	r2, [pc, #128]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 8001fd6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001fda:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001fdc:	f7ff f8c8 	bl	8001170 <HAL_GetTick>
 8001fe0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001fe4:	f7ff f8c4 	bl	8001170 <HAL_GetTick>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b02      	cmp	r3, #2
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e02c      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ff6:	4b18      	ldr	r3, [pc, #96]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 8001ff8:	681b      	ldr	r3, [r3, #0]
 8001ffa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d0f0      	beq.n	8001fe4 <HAL_RCC_OscConfig+0x7ac>
 8002002:	e024      	b.n	800204e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002004:	69bb      	ldr	r3, [r7, #24]
 8002006:	2b0c      	cmp	r3, #12
 8002008:	d01f      	beq.n	800204a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800200a:	4b13      	ldr	r3, [pc, #76]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a12      	ldr	r2, [pc, #72]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 8002010:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002014:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002016:	f7ff f8ab 	bl	8001170 <HAL_GetTick>
 800201a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800201c:	e008      	b.n	8002030 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800201e:	f7ff f8a7 	bl	8001170 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	693b      	ldr	r3, [r7, #16]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d901      	bls.n	8002030 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	e00f      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002038:	2b00      	cmp	r3, #0
 800203a:	d1f0      	bne.n	800201e <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 800203c:	4b06      	ldr	r3, [pc, #24]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 800203e:	68da      	ldr	r2, [r3, #12]
 8002040:	4905      	ldr	r1, [pc, #20]	; (8002058 <HAL_RCC_OscConfig+0x820>)
 8002042:	4b06      	ldr	r3, [pc, #24]	; (800205c <HAL_RCC_OscConfig+0x824>)
 8002044:	4013      	ands	r3, r2
 8002046:	60cb      	str	r3, [r1, #12]
 8002048:	e001      	b.n	800204e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e000      	b.n	8002050 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800204e:	2300      	movs	r3, #0
}
 8002050:	4618      	mov	r0, r3
 8002052:	3720      	adds	r7, #32
 8002054:	46bd      	mov	sp, r7
 8002056:	bd80      	pop	{r7, pc}
 8002058:	40021000 	.word	0x40021000
 800205c:	feeefffc 	.word	0xfeeefffc

08002060 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002060:	b580      	push	{r7, lr}
 8002062:	b084      	sub	sp, #16
 8002064:	af00      	add	r7, sp, #0
 8002066:	6078      	str	r0, [r7, #4]
 8002068:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2b00      	cmp	r3, #0
 800206e:	d101      	bne.n	8002074 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	e0e7      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002074:	4b75      	ldr	r3, [pc, #468]	; (800224c <HAL_RCC_ClockConfig+0x1ec>)
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f003 0307 	and.w	r3, r3, #7
 800207c:	683a      	ldr	r2, [r7, #0]
 800207e:	429a      	cmp	r2, r3
 8002080:	d910      	bls.n	80020a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002082:	4b72      	ldr	r3, [pc, #456]	; (800224c <HAL_RCC_ClockConfig+0x1ec>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f023 0207 	bic.w	r2, r3, #7
 800208a:	4970      	ldr	r1, [pc, #448]	; (800224c <HAL_RCC_ClockConfig+0x1ec>)
 800208c:	683b      	ldr	r3, [r7, #0]
 800208e:	4313      	orrs	r3, r2
 8002090:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002092:	4b6e      	ldr	r3, [pc, #440]	; (800224c <HAL_RCC_ClockConfig+0x1ec>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	f003 0307 	and.w	r3, r3, #7
 800209a:	683a      	ldr	r2, [r7, #0]
 800209c:	429a      	cmp	r2, r3
 800209e:	d001      	beq.n	80020a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80020a0:	2301      	movs	r3, #1
 80020a2:	e0cf      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f003 0302 	and.w	r3, r3, #2
 80020ac:	2b00      	cmp	r3, #0
 80020ae:	d010      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	689a      	ldr	r2, [r3, #8]
 80020b4:	4b66      	ldr	r3, [pc, #408]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80020b6:	689b      	ldr	r3, [r3, #8]
 80020b8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020bc:	429a      	cmp	r2, r3
 80020be:	d908      	bls.n	80020d2 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020c0:	4b63      	ldr	r3, [pc, #396]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80020c2:	689b      	ldr	r3, [r3, #8]
 80020c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	689b      	ldr	r3, [r3, #8]
 80020cc:	4960      	ldr	r1, [pc, #384]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f003 0301 	and.w	r3, r3, #1
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d04c      	beq.n	8002178 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	2b03      	cmp	r3, #3
 80020e4:	d107      	bne.n	80020f6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80020e6:	4b5a      	ldr	r3, [pc, #360]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d121      	bne.n	8002136 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80020f2:	2301      	movs	r3, #1
 80020f4:	e0a6      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	685b      	ldr	r3, [r3, #4]
 80020fa:	2b02      	cmp	r3, #2
 80020fc:	d107      	bne.n	800210e <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80020fe:	4b54      	ldr	r3, [pc, #336]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d115      	bne.n	8002136 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800210a:	2301      	movs	r3, #1
 800210c:	e09a      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d107      	bne.n	8002126 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002116:	4b4e      	ldr	r3, [pc, #312]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0302 	and.w	r3, r3, #2
 800211e:	2b00      	cmp	r3, #0
 8002120:	d109      	bne.n	8002136 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002122:	2301      	movs	r3, #1
 8002124:	e08e      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002126:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800212e:	2b00      	cmp	r3, #0
 8002130:	d101      	bne.n	8002136 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002132:	2301      	movs	r3, #1
 8002134:	e086      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002136:	4b46      	ldr	r3, [pc, #280]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002138:	689b      	ldr	r3, [r3, #8]
 800213a:	f023 0203 	bic.w	r2, r3, #3
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	685b      	ldr	r3, [r3, #4]
 8002142:	4943      	ldr	r1, [pc, #268]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002144:	4313      	orrs	r3, r2
 8002146:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002148:	f7ff f812 	bl	8001170 <HAL_GetTick>
 800214c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800214e:	e00a      	b.n	8002166 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002150:	f7ff f80e 	bl	8001170 <HAL_GetTick>
 8002154:	4602      	mov	r2, r0
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	f241 3288 	movw	r2, #5000	; 0x1388
 800215e:	4293      	cmp	r3, r2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e06e      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002166:	4b3a      	ldr	r3, [pc, #232]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002168:	689b      	ldr	r3, [r3, #8]
 800216a:	f003 020c 	and.w	r2, r3, #12
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	009b      	lsls	r3, r3, #2
 8002174:	429a      	cmp	r2, r3
 8002176:	d1eb      	bne.n	8002150 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f003 0302 	and.w	r3, r3, #2
 8002180:	2b00      	cmp	r3, #0
 8002182:	d010      	beq.n	80021a6 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	689a      	ldr	r2, [r3, #8]
 8002188:	4b31      	ldr	r3, [pc, #196]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 800218a:	689b      	ldr	r3, [r3, #8]
 800218c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002190:	429a      	cmp	r2, r3
 8002192:	d208      	bcs.n	80021a6 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002194:	4b2e      	ldr	r3, [pc, #184]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	689b      	ldr	r3, [r3, #8]
 80021a0:	492b      	ldr	r1, [pc, #172]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80021a6:	4b29      	ldr	r3, [pc, #164]	; (800224c <HAL_RCC_ClockConfig+0x1ec>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	f003 0307 	and.w	r3, r3, #7
 80021ae:	683a      	ldr	r2, [r7, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d210      	bcs.n	80021d6 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80021b4:	4b25      	ldr	r3, [pc, #148]	; (800224c <HAL_RCC_ClockConfig+0x1ec>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f023 0207 	bic.w	r2, r3, #7
 80021bc:	4923      	ldr	r1, [pc, #140]	; (800224c <HAL_RCC_ClockConfig+0x1ec>)
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	4313      	orrs	r3, r2
 80021c2:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80021c4:	4b21      	ldr	r3, [pc, #132]	; (800224c <HAL_RCC_ClockConfig+0x1ec>)
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	f003 0307 	and.w	r3, r3, #7
 80021cc:	683a      	ldr	r2, [r7, #0]
 80021ce:	429a      	cmp	r2, r3
 80021d0:	d001      	beq.n	80021d6 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80021d2:	2301      	movs	r3, #1
 80021d4:	e036      	b.n	8002244 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	f003 0304 	and.w	r3, r3, #4
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d008      	beq.n	80021f4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80021e4:	689b      	ldr	r3, [r3, #8]
 80021e6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	68db      	ldr	r3, [r3, #12]
 80021ee:	4918      	ldr	r1, [pc, #96]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 80021f0:	4313      	orrs	r3, r2
 80021f2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f003 0308 	and.w	r3, r3, #8
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d009      	beq.n	8002214 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002200:	4b13      	ldr	r3, [pc, #76]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002202:	689b      	ldr	r3, [r3, #8]
 8002204:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	691b      	ldr	r3, [r3, #16]
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4910      	ldr	r1, [pc, #64]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 8002210:	4313      	orrs	r3, r2
 8002212:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002214:	f000 f824 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 8002218:	4602      	mov	r2, r0
 800221a:	4b0d      	ldr	r3, [pc, #52]	; (8002250 <HAL_RCC_ClockConfig+0x1f0>)
 800221c:	689b      	ldr	r3, [r3, #8]
 800221e:	091b      	lsrs	r3, r3, #4
 8002220:	f003 030f 	and.w	r3, r3, #15
 8002224:	490b      	ldr	r1, [pc, #44]	; (8002254 <HAL_RCC_ClockConfig+0x1f4>)
 8002226:	5ccb      	ldrb	r3, [r1, r3]
 8002228:	f003 031f 	and.w	r3, r3, #31
 800222c:	fa22 f303 	lsr.w	r3, r2, r3
 8002230:	4a09      	ldr	r2, [pc, #36]	; (8002258 <HAL_RCC_ClockConfig+0x1f8>)
 8002232:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002234:	4b09      	ldr	r3, [pc, #36]	; (800225c <HAL_RCC_ClockConfig+0x1fc>)
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	4618      	mov	r0, r3
 800223a:	f7fe fd63 	bl	8000d04 <HAL_InitTick>
 800223e:	4603      	mov	r3, r0
 8002240:	72fb      	strb	r3, [r7, #11]

  return status;
 8002242:	7afb      	ldrb	r3, [r7, #11]
}
 8002244:	4618      	mov	r0, r3
 8002246:	3710      	adds	r7, #16
 8002248:	46bd      	mov	sp, r7
 800224a:	bd80      	pop	{r7, pc}
 800224c:	40022000 	.word	0x40022000
 8002250:	40021000 	.word	0x40021000
 8002254:	08009350 	.word	0x08009350
 8002258:	20000000 	.word	0x20000000
 800225c:	20000004 	.word	0x20000004

08002260 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002260:	b480      	push	{r7}
 8002262:	b089      	sub	sp, #36	; 0x24
 8002264:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002266:	2300      	movs	r3, #0
 8002268:	61fb      	str	r3, [r7, #28]
 800226a:	2300      	movs	r3, #0
 800226c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800226e:	4b3e      	ldr	r3, [pc, #248]	; (8002368 <HAL_RCC_GetSysClockFreq+0x108>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002278:	4b3b      	ldr	r3, [pc, #236]	; (8002368 <HAL_RCC_GetSysClockFreq+0x108>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	f003 0303 	and.w	r3, r3, #3
 8002280:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002282:	693b      	ldr	r3, [r7, #16]
 8002284:	2b00      	cmp	r3, #0
 8002286:	d005      	beq.n	8002294 <HAL_RCC_GetSysClockFreq+0x34>
 8002288:	693b      	ldr	r3, [r7, #16]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d121      	bne.n	80022d2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	2b01      	cmp	r3, #1
 8002292:	d11e      	bne.n	80022d2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002294:	4b34      	ldr	r3, [pc, #208]	; (8002368 <HAL_RCC_GetSysClockFreq+0x108>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f003 0308 	and.w	r3, r3, #8
 800229c:	2b00      	cmp	r3, #0
 800229e:	d107      	bne.n	80022b0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80022a0:	4b31      	ldr	r3, [pc, #196]	; (8002368 <HAL_RCC_GetSysClockFreq+0x108>)
 80022a2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80022a6:	0a1b      	lsrs	r3, r3, #8
 80022a8:	f003 030f 	and.w	r3, r3, #15
 80022ac:	61fb      	str	r3, [r7, #28]
 80022ae:	e005      	b.n	80022bc <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80022b0:	4b2d      	ldr	r3, [pc, #180]	; (8002368 <HAL_RCC_GetSysClockFreq+0x108>)
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	091b      	lsrs	r3, r3, #4
 80022b6:	f003 030f 	and.w	r3, r3, #15
 80022ba:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80022bc:	4a2b      	ldr	r2, [pc, #172]	; (800236c <HAL_RCC_GetSysClockFreq+0x10c>)
 80022be:	69fb      	ldr	r3, [r7, #28]
 80022c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80022c4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022c6:	693b      	ldr	r3, [r7, #16]
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10d      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80022d0:	e00a      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	2b04      	cmp	r3, #4
 80022d6:	d102      	bne.n	80022de <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80022d8:	4b25      	ldr	r3, [pc, #148]	; (8002370 <HAL_RCC_GetSysClockFreq+0x110>)
 80022da:	61bb      	str	r3, [r7, #24]
 80022dc:	e004      	b.n	80022e8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80022de:	693b      	ldr	r3, [r7, #16]
 80022e0:	2b08      	cmp	r3, #8
 80022e2:	d101      	bne.n	80022e8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80022e4:	4b23      	ldr	r3, [pc, #140]	; (8002374 <HAL_RCC_GetSysClockFreq+0x114>)
 80022e6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80022e8:	693b      	ldr	r3, [r7, #16]
 80022ea:	2b0c      	cmp	r3, #12
 80022ec:	d134      	bne.n	8002358 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80022ee:	4b1e      	ldr	r3, [pc, #120]	; (8002368 <HAL_RCC_GetSysClockFreq+0x108>)
 80022f0:	68db      	ldr	r3, [r3, #12]
 80022f2:	f003 0303 	and.w	r3, r3, #3
 80022f6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80022f8:	68bb      	ldr	r3, [r7, #8]
 80022fa:	2b02      	cmp	r3, #2
 80022fc:	d003      	beq.n	8002306 <HAL_RCC_GetSysClockFreq+0xa6>
 80022fe:	68bb      	ldr	r3, [r7, #8]
 8002300:	2b03      	cmp	r3, #3
 8002302:	d003      	beq.n	800230c <HAL_RCC_GetSysClockFreq+0xac>
 8002304:	e005      	b.n	8002312 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002306:	4b1a      	ldr	r3, [pc, #104]	; (8002370 <HAL_RCC_GetSysClockFreq+0x110>)
 8002308:	617b      	str	r3, [r7, #20]
      break;
 800230a:	e005      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 800230c:	4b19      	ldr	r3, [pc, #100]	; (8002374 <HAL_RCC_GetSysClockFreq+0x114>)
 800230e:	617b      	str	r3, [r7, #20]
      break;
 8002310:	e002      	b.n	8002318 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	617b      	str	r3, [r7, #20]
      break;
 8002316:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002318:	4b13      	ldr	r3, [pc, #76]	; (8002368 <HAL_RCC_GetSysClockFreq+0x108>)
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	f003 0307 	and.w	r3, r3, #7
 8002322:	3301      	adds	r3, #1
 8002324:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002326:	4b10      	ldr	r3, [pc, #64]	; (8002368 <HAL_RCC_GetSysClockFreq+0x108>)
 8002328:	68db      	ldr	r3, [r3, #12]
 800232a:	0a1b      	lsrs	r3, r3, #8
 800232c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002330:	697a      	ldr	r2, [r7, #20]
 8002332:	fb03 f202 	mul.w	r2, r3, r2
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	fbb2 f3f3 	udiv	r3, r2, r3
 800233c:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800233e:	4b0a      	ldr	r3, [pc, #40]	; (8002368 <HAL_RCC_GetSysClockFreq+0x108>)
 8002340:	68db      	ldr	r3, [r3, #12]
 8002342:	0e5b      	lsrs	r3, r3, #25
 8002344:	f003 0303 	and.w	r3, r3, #3
 8002348:	3301      	adds	r3, #1
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800234e:	697a      	ldr	r2, [r7, #20]
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	fbb2 f3f3 	udiv	r3, r2, r3
 8002356:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002358:	69bb      	ldr	r3, [r7, #24]
}
 800235a:	4618      	mov	r0, r3
 800235c:	3724      	adds	r7, #36	; 0x24
 800235e:	46bd      	mov	sp, r7
 8002360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002364:	4770      	bx	lr
 8002366:	bf00      	nop
 8002368:	40021000 	.word	0x40021000
 800236c:	08009368 	.word	0x08009368
 8002370:	00f42400 	.word	0x00f42400
 8002374:	007a1200 	.word	0x007a1200

08002378 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002378:	b480      	push	{r7}
 800237a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800237c:	4b03      	ldr	r3, [pc, #12]	; (800238c <HAL_RCC_GetHCLKFreq+0x14>)
 800237e:	681b      	ldr	r3, [r3, #0]
}
 8002380:	4618      	mov	r0, r3
 8002382:	46bd      	mov	sp, r7
 8002384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002388:	4770      	bx	lr
 800238a:	bf00      	nop
 800238c:	20000000 	.word	0x20000000

08002390 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002394:	f7ff fff0 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 8002398:	4602      	mov	r2, r0
 800239a:	4b06      	ldr	r3, [pc, #24]	; (80023b4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800239c:	689b      	ldr	r3, [r3, #8]
 800239e:	0a1b      	lsrs	r3, r3, #8
 80023a0:	f003 0307 	and.w	r3, r3, #7
 80023a4:	4904      	ldr	r1, [pc, #16]	; (80023b8 <HAL_RCC_GetPCLK1Freq+0x28>)
 80023a6:	5ccb      	ldrb	r3, [r1, r3]
 80023a8:	f003 031f 	and.w	r3, r3, #31
 80023ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023b0:	4618      	mov	r0, r3
 80023b2:	bd80      	pop	{r7, pc}
 80023b4:	40021000 	.word	0x40021000
 80023b8:	08009360 	.word	0x08009360

080023bc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023bc:	b580      	push	{r7, lr}
 80023be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80023c0:	f7ff ffda 	bl	8002378 <HAL_RCC_GetHCLKFreq>
 80023c4:	4602      	mov	r2, r0
 80023c6:	4b06      	ldr	r3, [pc, #24]	; (80023e0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80023c8:	689b      	ldr	r3, [r3, #8]
 80023ca:	0adb      	lsrs	r3, r3, #11
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	4904      	ldr	r1, [pc, #16]	; (80023e4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80023d2:	5ccb      	ldrb	r3, [r1, r3]
 80023d4:	f003 031f 	and.w	r3, r3, #31
 80023d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023dc:	4618      	mov	r0, r3
 80023de:	bd80      	pop	{r7, pc}
 80023e0:	40021000 	.word	0x40021000
 80023e4:	08009360 	.word	0x08009360

080023e8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80023e8:	b480      	push	{r7}
 80023ea:	b083      	sub	sp, #12
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
 80023f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	220f      	movs	r2, #15
 80023f6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80023f8:	4b12      	ldr	r3, [pc, #72]	; (8002444 <HAL_RCC_GetClockConfig+0x5c>)
 80023fa:	689b      	ldr	r3, [r3, #8]
 80023fc:	f003 0203 	and.w	r2, r3, #3
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002404:	4b0f      	ldr	r3, [pc, #60]	; (8002444 <HAL_RCC_GetClockConfig+0x5c>)
 8002406:	689b      	ldr	r3, [r3, #8]
 8002408:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002410:	4b0c      	ldr	r3, [pc, #48]	; (8002444 <HAL_RCC_GetClockConfig+0x5c>)
 8002412:	689b      	ldr	r3, [r3, #8]
 8002414:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 800241c:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_RCC_GetClockConfig+0x5c>)
 800241e:	689b      	ldr	r3, [r3, #8]
 8002420:	08db      	lsrs	r3, r3, #3
 8002422:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 800242a:	4b07      	ldr	r3, [pc, #28]	; (8002448 <HAL_RCC_GetClockConfig+0x60>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0207 	and.w	r2, r3, #7
 8002432:	683b      	ldr	r3, [r7, #0]
 8002434:	601a      	str	r2, [r3, #0]
}
 8002436:	bf00      	nop
 8002438:	370c      	adds	r7, #12
 800243a:	46bd      	mov	sp, r7
 800243c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002440:	4770      	bx	lr
 8002442:	bf00      	nop
 8002444:	40021000 	.word	0x40021000
 8002448:	40022000 	.word	0x40022000

0800244c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b086      	sub	sp, #24
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002454:	2300      	movs	r3, #0
 8002456:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002458:	4b2a      	ldr	r3, [pc, #168]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800245a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800245c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d003      	beq.n	800246c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002464:	f7ff f984 	bl	8001770 <HAL_PWREx_GetVoltageRange>
 8002468:	6178      	str	r0, [r7, #20]
 800246a:	e014      	b.n	8002496 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 800246c:	4b25      	ldr	r3, [pc, #148]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800246e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002470:	4a24      	ldr	r2, [pc, #144]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002472:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002476:	6593      	str	r3, [r2, #88]	; 0x58
 8002478:	4b22      	ldr	r3, [pc, #136]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800247a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800247c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002480:	60fb      	str	r3, [r7, #12]
 8002482:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002484:	f7ff f974 	bl	8001770 <HAL_PWREx_GetVoltageRange>
 8002488:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800248a:	4b1e      	ldr	r3, [pc, #120]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800248c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800248e:	4a1d      	ldr	r2, [pc, #116]	; (8002504 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002490:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002494:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800249c:	d10b      	bne.n	80024b6 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b80      	cmp	r3, #128	; 0x80
 80024a2:	d919      	bls.n	80024d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2ba0      	cmp	r3, #160	; 0xa0
 80024a8:	d902      	bls.n	80024b0 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024aa:	2302      	movs	r3, #2
 80024ac:	613b      	str	r3, [r7, #16]
 80024ae:	e013      	b.n	80024d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024b0:	2301      	movs	r3, #1
 80024b2:	613b      	str	r3, [r7, #16]
 80024b4:	e010      	b.n	80024d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	2b80      	cmp	r3, #128	; 0x80
 80024ba:	d902      	bls.n	80024c2 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 80024bc:	2303      	movs	r3, #3
 80024be:	613b      	str	r3, [r7, #16]
 80024c0:	e00a      	b.n	80024d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	2b80      	cmp	r3, #128	; 0x80
 80024c6:	d102      	bne.n	80024ce <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80024c8:	2302      	movs	r3, #2
 80024ca:	613b      	str	r3, [r7, #16]
 80024cc:	e004      	b.n	80024d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	2b70      	cmp	r3, #112	; 0x70
 80024d2:	d101      	bne.n	80024d8 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80024d4:	2301      	movs	r3, #1
 80024d6:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80024d8:	4b0b      	ldr	r3, [pc, #44]	; (8002508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f023 0207 	bic.w	r2, r3, #7
 80024e0:	4909      	ldr	r1, [pc, #36]	; (8002508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024e2:	693b      	ldr	r3, [r7, #16]
 80024e4:	4313      	orrs	r3, r2
 80024e6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80024e8:	4b07      	ldr	r3, [pc, #28]	; (8002508 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0307 	and.w	r3, r3, #7
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d001      	beq.n	80024fa <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e000      	b.n	80024fc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3718      	adds	r7, #24
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40021000 	.word	0x40021000
 8002508:	40022000 	.word	0x40022000

0800250c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b086      	sub	sp, #24
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002514:	2300      	movs	r3, #0
 8002516:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002518:	2300      	movs	r3, #0
 800251a:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002524:	2b00      	cmp	r3, #0
 8002526:	d031      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800252c:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002530:	d01a      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8002532:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8002536:	d814      	bhi.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002538:	2b00      	cmp	r3, #0
 800253a:	d009      	beq.n	8002550 <HAL_RCCEx_PeriphCLKConfig+0x44>
 800253c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8002540:	d10f      	bne.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8002542:	4b5d      	ldr	r3, [pc, #372]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	4a5c      	ldr	r2, [pc, #368]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002548:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800254c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800254e:	e00c      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	3304      	adds	r3, #4
 8002554:	2100      	movs	r1, #0
 8002556:	4618      	mov	r0, r3
 8002558:	f000 f9de 	bl	8002918 <RCCEx_PLLSAI1_Config>
 800255c:	4603      	mov	r3, r0
 800255e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002560:	e003      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002562:	2301      	movs	r3, #1
 8002564:	74fb      	strb	r3, [r7, #19]
      break;
 8002566:	e000      	b.n	800256a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8002568:	bf00      	nop
    }

    if(ret == HAL_OK)
 800256a:	7cfb      	ldrb	r3, [r7, #19]
 800256c:	2b00      	cmp	r3, #0
 800256e:	d10b      	bne.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002570:	4b51      	ldr	r3, [pc, #324]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002572:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002576:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800257e:	494e      	ldr	r1, [pc, #312]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002580:	4313      	orrs	r3, r2
 8002582:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8002586:	e001      	b.n	800258c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002588:	7cfb      	ldrb	r3, [r7, #19]
 800258a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 809e 	beq.w	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800259a:	2300      	movs	r3, #0
 800259c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800259e:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80025aa:	2301      	movs	r3, #1
 80025ac:	e000      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 80025ae:	2300      	movs	r3, #0
 80025b0:	2b00      	cmp	r3, #0
 80025b2:	d00d      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025b4:	4b40      	ldr	r3, [pc, #256]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025b8:	4a3f      	ldr	r2, [pc, #252]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80025be:	6593      	str	r3, [r2, #88]	; 0x58
 80025c0:	4b3d      	ldr	r3, [pc, #244]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80025c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025c8:	60bb      	str	r3, [r7, #8]
 80025ca:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025cc:	2301      	movs	r3, #1
 80025ce:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80025d0:	4b3a      	ldr	r3, [pc, #232]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	4a39      	ldr	r2, [pc, #228]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80025da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80025dc:	f7fe fdc8 	bl	8001170 <HAL_GetTick>
 80025e0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025e2:	e009      	b.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025e4:	f7fe fdc4 	bl	8001170 <HAL_GetTick>
 80025e8:	4602      	mov	r2, r0
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	1ad3      	subs	r3, r2, r3
 80025ee:	2b02      	cmp	r3, #2
 80025f0:	d902      	bls.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 80025f2:	2303      	movs	r3, #3
 80025f4:	74fb      	strb	r3, [r7, #19]
        break;
 80025f6:	e005      	b.n	8002604 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80025f8:	4b30      	ldr	r3, [pc, #192]	; (80026bc <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002600:	2b00      	cmp	r3, #0
 8002602:	d0ef      	beq.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002604:	7cfb      	ldrb	r3, [r7, #19]
 8002606:	2b00      	cmp	r3, #0
 8002608:	d15a      	bne.n	80026c0 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800260a:	4b2b      	ldr	r3, [pc, #172]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800260c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002610:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002614:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002616:	697b      	ldr	r3, [r7, #20]
 8002618:	2b00      	cmp	r3, #0
 800261a:	d01e      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002620:	697a      	ldr	r2, [r7, #20]
 8002622:	429a      	cmp	r2, r3
 8002624:	d019      	beq.n	800265a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002626:	4b24      	ldr	r3, [pc, #144]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800262c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002630:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002632:	4b21      	ldr	r3, [pc, #132]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002634:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002638:	4a1f      	ldr	r2, [pc, #124]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800263a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800263e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002642:	4b1d      	ldr	r3, [pc, #116]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002644:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002648:	4a1b      	ldr	r2, [pc, #108]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800264a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800264e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002652:	4a19      	ldr	r2, [pc, #100]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002654:	697b      	ldr	r3, [r7, #20]
 8002656:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800265a:	697b      	ldr	r3, [r7, #20]
 800265c:	f003 0301 	and.w	r3, r3, #1
 8002660:	2b00      	cmp	r3, #0
 8002662:	d016      	beq.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002664:	f7fe fd84 	bl	8001170 <HAL_GetTick>
 8002668:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800266a:	e00b      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800266c:	f7fe fd80 	bl	8001170 <HAL_GetTick>
 8002670:	4602      	mov	r2, r0
 8002672:	68fb      	ldr	r3, [r7, #12]
 8002674:	1ad3      	subs	r3, r2, r3
 8002676:	f241 3288 	movw	r2, #5000	; 0x1388
 800267a:	4293      	cmp	r3, r2
 800267c:	d902      	bls.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800267e:	2303      	movs	r3, #3
 8002680:	74fb      	strb	r3, [r7, #19]
            break;
 8002682:	e006      	b.n	8002692 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002684:	4b0c      	ldr	r3, [pc, #48]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002686:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800268a:	f003 0302 	and.w	r3, r3, #2
 800268e:	2b00      	cmp	r3, #0
 8002690:	d0ec      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002692:	7cfb      	ldrb	r3, [r7, #19]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002698:	4b07      	ldr	r3, [pc, #28]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800269a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800269e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026a6:	4904      	ldr	r1, [pc, #16]	; (80026b8 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80026a8:	4313      	orrs	r3, r2
 80026aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80026ae:	e009      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80026b0:	7cfb      	ldrb	r3, [r7, #19]
 80026b2:	74bb      	strb	r3, [r7, #18]
 80026b4:	e006      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80026b6:	bf00      	nop
 80026b8:	40021000 	.word	0x40021000
 80026bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80026c0:	7cfb      	ldrb	r3, [r7, #19]
 80026c2:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80026c4:	7c7b      	ldrb	r3, [r7, #17]
 80026c6:	2b01      	cmp	r3, #1
 80026c8:	d105      	bne.n	80026d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026ca:	4b8a      	ldr	r3, [pc, #552]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026ce:	4a89      	ldr	r2, [pc, #548]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026d0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80026d4:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00a      	beq.n	80026f8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80026e2:	4b84      	ldr	r3, [pc, #528]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026e8:	f023 0203 	bic.w	r2, r3, #3
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	6a1b      	ldr	r3, [r3, #32]
 80026f0:	4980      	ldr	r1, [pc, #512]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80026f2:	4313      	orrs	r3, r2
 80026f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00a      	beq.n	800271a <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002704:	4b7b      	ldr	r3, [pc, #492]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002706:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800270a:	f023 020c 	bic.w	r2, r3, #12
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002712:	4978      	ldr	r1, [pc, #480]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002714:	4313      	orrs	r3, r2
 8002716:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f003 0320 	and.w	r3, r3, #32
 8002722:	2b00      	cmp	r3, #0
 8002724:	d00a      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002726:	4b73      	ldr	r3, [pc, #460]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002728:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800272c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002734:	496f      	ldr	r1, [pc, #444]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002736:	4313      	orrs	r3, r2
 8002738:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002744:	2b00      	cmp	r3, #0
 8002746:	d00a      	beq.n	800275e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002748:	4b6a      	ldr	r3, [pc, #424]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002756:	4967      	ldr	r1, [pc, #412]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002766:	2b00      	cmp	r3, #0
 8002768:	d00a      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800276a:	4b62      	ldr	r3, [pc, #392]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800276c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002770:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002778:	495e      	ldr	r1, [pc, #376]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800277a:	4313      	orrs	r3, r2
 800277c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002788:	2b00      	cmp	r3, #0
 800278a:	d00a      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800278c:	4b59      	ldr	r3, [pc, #356]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800278e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002792:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800279a:	4956      	ldr	r1, [pc, #344]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800279c:	4313      	orrs	r3, r2
 800279e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d00a      	beq.n	80027c4 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80027ae:	4b51      	ldr	r3, [pc, #324]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027bc:	494d      	ldr	r1, [pc, #308]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027be:	4313      	orrs	r3, r2
 80027c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d028      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80027d0:	4b48      	ldr	r3, [pc, #288]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027d6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027de:	4945      	ldr	r1, [pc, #276]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027e0:	4313      	orrs	r3, r2
 80027e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027ea:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80027ee:	d106      	bne.n	80027fe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80027f0:	4b40      	ldr	r3, [pc, #256]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f2:	68db      	ldr	r3, [r3, #12]
 80027f4:	4a3f      	ldr	r2, [pc, #252]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80027f6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80027fa:	60d3      	str	r3, [r2, #12]
 80027fc:	e011      	b.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002802:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002806:	d10c      	bne.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	3304      	adds	r3, #4
 800280c:	2101      	movs	r1, #1
 800280e:	4618      	mov	r0, r3
 8002810:	f000 f882 	bl	8002918 <RCCEx_PLLSAI1_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002818:	7cfb      	ldrb	r3, [r7, #19]
 800281a:	2b00      	cmp	r3, #0
 800281c:	d001      	beq.n	8002822 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800281e:	7cfb      	ldrb	r3, [r7, #19]
 8002820:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d028      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800282e:	4b31      	ldr	r3, [pc, #196]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002830:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002834:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800283c:	492d      	ldr	r1, [pc, #180]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800283e:	4313      	orrs	r3, r2
 8002840:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002848:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800284c:	d106      	bne.n	800285c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002850:	68db      	ldr	r3, [r3, #12]
 8002852:	4a28      	ldr	r2, [pc, #160]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002854:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002858:	60d3      	str	r3, [r2, #12]
 800285a:	e011      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002860:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002864:	d10c      	bne.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	3304      	adds	r3, #4
 800286a:	2101      	movs	r1, #1
 800286c:	4618      	mov	r0, r3
 800286e:	f000 f853 	bl	8002918 <RCCEx_PLLSAI1_Config>
 8002872:	4603      	mov	r3, r0
 8002874:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002876:	7cfb      	ldrb	r3, [r7, #19]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d001      	beq.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800287c:	7cfb      	ldrb	r3, [r7, #19]
 800287e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d01c      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800288c:	4b19      	ldr	r3, [pc, #100]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800288e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002892:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800289a:	4916      	ldr	r1, [pc, #88]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800289c:	4313      	orrs	r3, r2
 800289e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80028a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80028aa:	d10c      	bne.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	3304      	adds	r3, #4
 80028b0:	2102      	movs	r1, #2
 80028b2:	4618      	mov	r0, r3
 80028b4:	f000 f830 	bl	8002918 <RCCEx_PLLSAI1_Config>
 80028b8:	4603      	mov	r3, r0
 80028ba:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80028bc:	7cfb      	ldrb	r3, [r7, #19]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80028c2:	7cfb      	ldrb	r3, [r7, #19]
 80028c4:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d00a      	beq.n	80028e8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80028d2:	4b08      	ldr	r3, [pc, #32]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028d8:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80028e0:	4904      	ldr	r1, [pc, #16]	; (80028f4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80028e2:	4313      	orrs	r3, r2
 80028e4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80028e8:	7cbb      	ldrb	r3, [r7, #18]
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	3718      	adds	r7, #24
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	40021000 	.word	0x40021000

080028f8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80028fc:	4b05      	ldr	r3, [pc, #20]	; (8002914 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4a04      	ldr	r2, [pc, #16]	; (8002914 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002902:	f043 0304 	orr.w	r3, r3, #4
 8002906:	6013      	str	r3, [r2, #0]
}
 8002908:	bf00      	nop
 800290a:	46bd      	mov	sp, r7
 800290c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002910:	4770      	bx	lr
 8002912:	bf00      	nop
 8002914:	40021000 	.word	0x40021000

08002918 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002918:	b580      	push	{r7, lr}
 800291a:	b084      	sub	sp, #16
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002926:	4b74      	ldr	r3, [pc, #464]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	f003 0303 	and.w	r3, r3, #3
 800292e:	2b00      	cmp	r3, #0
 8002930:	d018      	beq.n	8002964 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002932:	4b71      	ldr	r3, [pc, #452]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002934:	68db      	ldr	r3, [r3, #12]
 8002936:	f003 0203 	and.w	r2, r3, #3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	429a      	cmp	r2, r3
 8002940:	d10d      	bne.n	800295e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
       ||
 8002946:	2b00      	cmp	r3, #0
 8002948:	d009      	beq.n	800295e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800294a:	4b6b      	ldr	r3, [pc, #428]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800294c:	68db      	ldr	r3, [r3, #12]
 800294e:	091b      	lsrs	r3, r3, #4
 8002950:	f003 0307 	and.w	r3, r3, #7
 8002954:	1c5a      	adds	r2, r3, #1
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
       ||
 800295a:	429a      	cmp	r2, r3
 800295c:	d047      	beq.n	80029ee <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	73fb      	strb	r3, [r7, #15]
 8002962:	e044      	b.n	80029ee <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	2b03      	cmp	r3, #3
 800296a:	d018      	beq.n	800299e <RCCEx_PLLSAI1_Config+0x86>
 800296c:	2b03      	cmp	r3, #3
 800296e:	d825      	bhi.n	80029bc <RCCEx_PLLSAI1_Config+0xa4>
 8002970:	2b01      	cmp	r3, #1
 8002972:	d002      	beq.n	800297a <RCCEx_PLLSAI1_Config+0x62>
 8002974:	2b02      	cmp	r3, #2
 8002976:	d009      	beq.n	800298c <RCCEx_PLLSAI1_Config+0x74>
 8002978:	e020      	b.n	80029bc <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800297a:	4b5f      	ldr	r3, [pc, #380]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f003 0302 	and.w	r3, r3, #2
 8002982:	2b00      	cmp	r3, #0
 8002984:	d11d      	bne.n	80029c2 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002986:	2301      	movs	r3, #1
 8002988:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800298a:	e01a      	b.n	80029c2 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800298c:	4b5a      	ldr	r3, [pc, #360]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002994:	2b00      	cmp	r3, #0
 8002996:	d116      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002998:	2301      	movs	r3, #1
 800299a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800299c:	e013      	b.n	80029c6 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800299e:	4b56      	ldr	r3, [pc, #344]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d10f      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80029aa:	4b53      	ldr	r3, [pc, #332]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80029ba:	e006      	b.n	80029ca <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80029bc:	2301      	movs	r3, #1
 80029be:	73fb      	strb	r3, [r7, #15]
      break;
 80029c0:	e004      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c2:	bf00      	nop
 80029c4:	e002      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029c6:	bf00      	nop
 80029c8:	e000      	b.n	80029cc <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80029ca:	bf00      	nop
    }

    if(status == HAL_OK)
 80029cc:	7bfb      	ldrb	r3, [r7, #15]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d10d      	bne.n	80029ee <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80029d2:	4b49      	ldr	r3, [pc, #292]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029d4:	68db      	ldr	r3, [r3, #12]
 80029d6:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6819      	ldr	r1, [r3, #0]
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	3b01      	subs	r3, #1
 80029e4:	011b      	lsls	r3, r3, #4
 80029e6:	430b      	orrs	r3, r1
 80029e8:	4943      	ldr	r1, [pc, #268]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80029ee:	7bfb      	ldrb	r3, [r7, #15]
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d17c      	bne.n	8002aee <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80029f4:	4b40      	ldr	r3, [pc, #256]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	4a3f      	ldr	r2, [pc, #252]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80029fa:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80029fe:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002a00:	f7fe fbb6 	bl	8001170 <HAL_GetTick>
 8002a04:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a06:	e009      	b.n	8002a1c <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002a08:	f7fe fbb2 	bl	8001170 <HAL_GetTick>
 8002a0c:	4602      	mov	r2, r0
 8002a0e:	68bb      	ldr	r3, [r7, #8]
 8002a10:	1ad3      	subs	r3, r2, r3
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d902      	bls.n	8002a1c <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002a16:	2303      	movs	r3, #3
 8002a18:	73fb      	strb	r3, [r7, #15]
        break;
 8002a1a:	e005      	b.n	8002a28 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002a1c:	4b36      	ldr	r3, [pc, #216]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d1ef      	bne.n	8002a08 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002a28:	7bfb      	ldrb	r3, [r7, #15]
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d15f      	bne.n	8002aee <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d110      	bne.n	8002a56 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a34:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002a3c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a40:	687a      	ldr	r2, [r7, #4]
 8002a42:	6892      	ldr	r2, [r2, #8]
 8002a44:	0211      	lsls	r1, r2, #8
 8002a46:	687a      	ldr	r2, [r7, #4]
 8002a48:	68d2      	ldr	r2, [r2, #12]
 8002a4a:	06d2      	lsls	r2, r2, #27
 8002a4c:	430a      	orrs	r2, r1
 8002a4e:	492a      	ldr	r1, [pc, #168]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a50:	4313      	orrs	r3, r2
 8002a52:	610b      	str	r3, [r1, #16]
 8002a54:	e027      	b.n	8002aa6 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002a56:	683b      	ldr	r3, [r7, #0]
 8002a58:	2b01      	cmp	r3, #1
 8002a5a:	d112      	bne.n	8002a82 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a5c:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a5e:	691b      	ldr	r3, [r3, #16]
 8002a60:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002a64:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a68:	687a      	ldr	r2, [r7, #4]
 8002a6a:	6892      	ldr	r2, [r2, #8]
 8002a6c:	0211      	lsls	r1, r2, #8
 8002a6e:	687a      	ldr	r2, [r7, #4]
 8002a70:	6912      	ldr	r2, [r2, #16]
 8002a72:	0852      	lsrs	r2, r2, #1
 8002a74:	3a01      	subs	r2, #1
 8002a76:	0552      	lsls	r2, r2, #21
 8002a78:	430a      	orrs	r2, r1
 8002a7a:	491f      	ldr	r1, [pc, #124]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a7c:	4313      	orrs	r3, r2
 8002a7e:	610b      	str	r3, [r1, #16]
 8002a80:	e011      	b.n	8002aa6 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002a84:	691b      	ldr	r3, [r3, #16]
 8002a86:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002a8a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002a8e:	687a      	ldr	r2, [r7, #4]
 8002a90:	6892      	ldr	r2, [r2, #8]
 8002a92:	0211      	lsls	r1, r2, #8
 8002a94:	687a      	ldr	r2, [r7, #4]
 8002a96:	6952      	ldr	r2, [r2, #20]
 8002a98:	0852      	lsrs	r2, r2, #1
 8002a9a:	3a01      	subs	r2, #1
 8002a9c:	0652      	lsls	r2, r2, #25
 8002a9e:	430a      	orrs	r2, r1
 8002aa0:	4915      	ldr	r1, [pc, #84]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa2:	4313      	orrs	r3, r2
 8002aa4:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	4a13      	ldr	r2, [pc, #76]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aac:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002ab0:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ab2:	f7fe fb5d 	bl	8001170 <HAL_GetTick>
 8002ab6:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ab8:	e009      	b.n	8002ace <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002aba:	f7fe fb59 	bl	8001170 <HAL_GetTick>
 8002abe:	4602      	mov	r2, r0
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	1ad3      	subs	r3, r2, r3
 8002ac4:	2b02      	cmp	r3, #2
 8002ac6:	d902      	bls.n	8002ace <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002ac8:	2303      	movs	r3, #3
 8002aca:	73fb      	strb	r3, [r7, #15]
          break;
 8002acc:	e005      	b.n	8002ada <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002ace:	4b0a      	ldr	r3, [pc, #40]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d0ef      	beq.n	8002aba <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d106      	bne.n	8002aee <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ae2:	691a      	ldr	r2, [r3, #16]
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	699b      	ldr	r3, [r3, #24]
 8002ae8:	4903      	ldr	r1, [pc, #12]	; (8002af8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002aea:	4313      	orrs	r3, r2
 8002aec:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af0:	4618      	mov	r0, r3
 8002af2:	3710      	adds	r7, #16
 8002af4:	46bd      	mov	sp, r7
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000

08002afc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b082      	sub	sp, #8
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d101      	bne.n	8002b0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e049      	b.n	8002ba2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d106      	bne.n	8002b28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b22:	6878      	ldr	r0, [r7, #4]
 8002b24:	f000 f841 	bl	8002baa <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2202      	movs	r2, #2
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	3304      	adds	r3, #4
 8002b38:	4619      	mov	r1, r3
 8002b3a:	4610      	mov	r0, r2
 8002b3c:	f000 f9dc 	bl	8002ef8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	2201      	movs	r2, #1
 8002b84:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2201      	movs	r2, #1
 8002b94:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2201      	movs	r2, #1
 8002b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002ba0:	2300      	movs	r3, #0
}
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	3708      	adds	r7, #8
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bd80      	pop	{r7, pc}

08002baa <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002baa:	b480      	push	{r7}
 8002bac:	b083      	sub	sp, #12
 8002bae:	af00      	add	r7, sp, #0
 8002bb0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002bb2:	bf00      	nop
 8002bb4:	370c      	adds	r7, #12
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bbc:	4770      	bx	lr
	...

08002bc0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	d001      	beq.n	8002bd8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002bd4:	2301      	movs	r3, #1
 8002bd6:	e03b      	b.n	8002c50 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68da      	ldr	r2, [r3, #12]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	4a19      	ldr	r2, [pc, #100]	; (8002c5c <HAL_TIM_Base_Start_IT+0x9c>)
 8002bf6:	4293      	cmp	r3, r2
 8002bf8:	d009      	beq.n	8002c0e <HAL_TIM_Base_Start_IT+0x4e>
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c02:	d004      	beq.n	8002c0e <HAL_TIM_Base_Start_IT+0x4e>
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a15      	ldr	r2, [pc, #84]	; (8002c60 <HAL_TIM_Base_Start_IT+0xa0>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d115      	bne.n	8002c3a <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	689a      	ldr	r2, [r3, #8]
 8002c14:	4b13      	ldr	r3, [pc, #76]	; (8002c64 <HAL_TIM_Base_Start_IT+0xa4>)
 8002c16:	4013      	ands	r3, r2
 8002c18:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d015      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x8c>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c26:	d011      	beq.n	8002c4c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	681a      	ldr	r2, [r3, #0]
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f042 0201 	orr.w	r2, r2, #1
 8002c36:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c38:	e008      	b.n	8002c4c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	681a      	ldr	r2, [r3, #0]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f042 0201 	orr.w	r2, r2, #1
 8002c48:	601a      	str	r2, [r3, #0]
 8002c4a:	e000      	b.n	8002c4e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c4c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002c4e:	2300      	movs	r3, #0
}
 8002c50:	4618      	mov	r0, r3
 8002c52:	3714      	adds	r7, #20
 8002c54:	46bd      	mov	sp, r7
 8002c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5a:	4770      	bx	lr
 8002c5c:	40012c00 	.word	0x40012c00
 8002c60:	40014000 	.word	0x40014000
 8002c64:	00010007 	.word	0x00010007

08002c68 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c68:	b580      	push	{r7, lr}
 8002c6a:	b082      	sub	sp, #8
 8002c6c:	af00      	add	r7, sp, #0
 8002c6e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	691b      	ldr	r3, [r3, #16]
 8002c76:	f003 0302 	and.w	r3, r3, #2
 8002c7a:	2b02      	cmp	r3, #2
 8002c7c:	d122      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f003 0302 	and.w	r3, r3, #2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d11b      	bne.n	8002cc4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f06f 0202 	mvn.w	r2, #2
 8002c94:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2201      	movs	r2, #1
 8002c9a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	699b      	ldr	r3, [r3, #24]
 8002ca2:	f003 0303 	and.w	r3, r3, #3
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d003      	beq.n	8002cb2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002caa:	6878      	ldr	r0, [r7, #4]
 8002cac:	f000 f905 	bl	8002eba <HAL_TIM_IC_CaptureCallback>
 8002cb0:	e005      	b.n	8002cbe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb2:	6878      	ldr	r0, [r7, #4]
 8002cb4:	f000 f8f7 	bl	8002ea6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cb8:	6878      	ldr	r0, [r7, #4]
 8002cba:	f000 f908 	bl	8002ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	691b      	ldr	r3, [r3, #16]
 8002cca:	f003 0304 	and.w	r3, r3, #4
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	d122      	bne.n	8002d18 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	68db      	ldr	r3, [r3, #12]
 8002cd8:	f003 0304 	and.w	r3, r3, #4
 8002cdc:	2b04      	cmp	r3, #4
 8002cde:	d11b      	bne.n	8002d18 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f06f 0204 	mvn.w	r2, #4
 8002ce8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2202      	movs	r2, #2
 8002cee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	699b      	ldr	r3, [r3, #24]
 8002cf6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d003      	beq.n	8002d06 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cfe:	6878      	ldr	r0, [r7, #4]
 8002d00:	f000 f8db 	bl	8002eba <HAL_TIM_IC_CaptureCallback>
 8002d04:	e005      	b.n	8002d12 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d06:	6878      	ldr	r0, [r7, #4]
 8002d08:	f000 f8cd 	bl	8002ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d0c:	6878      	ldr	r0, [r7, #4]
 8002d0e:	f000 f8de 	bl	8002ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2200      	movs	r2, #0
 8002d16:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	691b      	ldr	r3, [r3, #16]
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d122      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	68db      	ldr	r3, [r3, #12]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b08      	cmp	r3, #8
 8002d32:	d11b      	bne.n	8002d6c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f06f 0208 	mvn.w	r2, #8
 8002d3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2204      	movs	r2, #4
 8002d42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	69db      	ldr	r3, [r3, #28]
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d003      	beq.n	8002d5a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d52:	6878      	ldr	r0, [r7, #4]
 8002d54:	f000 f8b1 	bl	8002eba <HAL_TIM_IC_CaptureCallback>
 8002d58:	e005      	b.n	8002d66 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5a:	6878      	ldr	r0, [r7, #4]
 8002d5c:	f000 f8a3 	bl	8002ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f000 f8b4 	bl	8002ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	2200      	movs	r2, #0
 8002d6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	691b      	ldr	r3, [r3, #16]
 8002d72:	f003 0310 	and.w	r3, r3, #16
 8002d76:	2b10      	cmp	r3, #16
 8002d78:	d122      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	f003 0310 	and.w	r3, r3, #16
 8002d84:	2b10      	cmp	r3, #16
 8002d86:	d11b      	bne.n	8002dc0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	f06f 0210 	mvn.w	r2, #16
 8002d90:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	2208      	movs	r2, #8
 8002d96:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	69db      	ldr	r3, [r3, #28]
 8002d9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d003      	beq.n	8002dae <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f887 	bl	8002eba <HAL_TIM_IC_CaptureCallback>
 8002dac:	e005      	b.n	8002dba <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002dae:	6878      	ldr	r0, [r7, #4]
 8002db0:	f000 f879 	bl	8002ea6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002db4:	6878      	ldr	r0, [r7, #4]
 8002db6:	f000 f88a 	bl	8002ece <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	691b      	ldr	r3, [r3, #16]
 8002dc6:	f003 0301 	and.w	r3, r3, #1
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d10e      	bne.n	8002dec <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	68db      	ldr	r3, [r3, #12]
 8002dd4:	f003 0301 	and.w	r3, r3, #1
 8002dd8:	2b01      	cmp	r3, #1
 8002dda:	d107      	bne.n	8002dec <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	f06f 0201 	mvn.w	r2, #1
 8002de4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	f7fd fc9c 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	691b      	ldr	r3, [r3, #16]
 8002df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002df6:	2b80      	cmp	r3, #128	; 0x80
 8002df8:	d10e      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	68db      	ldr	r3, [r3, #12]
 8002e00:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e04:	2b80      	cmp	r3, #128	; 0x80
 8002e06:	d107      	bne.n	8002e18 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002e10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002e12:	6878      	ldr	r0, [r7, #4]
 8002e14:	f000 f8de 	bl	8002fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e22:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e26:	d10e      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	68db      	ldr	r3, [r3, #12]
 8002e2e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e32:	2b80      	cmp	r3, #128	; 0x80
 8002e34:	d107      	bne.n	8002e46 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002e3e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f000 f8d1 	bl	8002fe8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	691b      	ldr	r3, [r3, #16]
 8002e4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e50:	2b40      	cmp	r3, #64	; 0x40
 8002e52:	d10e      	bne.n	8002e72 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	68db      	ldr	r3, [r3, #12]
 8002e5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e5e:	2b40      	cmp	r3, #64	; 0x40
 8002e60:	d107      	bne.n	8002e72 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002e6a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002e6c:	6878      	ldr	r0, [r7, #4]
 8002e6e:	f000 f838 	bl	8002ee2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	691b      	ldr	r3, [r3, #16]
 8002e78:	f003 0320 	and.w	r3, r3, #32
 8002e7c:	2b20      	cmp	r3, #32
 8002e7e:	d10e      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	68db      	ldr	r3, [r3, #12]
 8002e86:	f003 0320 	and.w	r3, r3, #32
 8002e8a:	2b20      	cmp	r3, #32
 8002e8c:	d107      	bne.n	8002e9e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f06f 0220 	mvn.w	r2, #32
 8002e96:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f000 f891 	bl	8002fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ea6:	b480      	push	{r7}
 8002ea8:	b083      	sub	sp, #12
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002eae:	bf00      	nop
 8002eb0:	370c      	adds	r7, #12
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eb8:	4770      	bx	lr

08002eba <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002eba:	b480      	push	{r7}
 8002ebc:	b083      	sub	sp, #12
 8002ebe:	af00      	add	r7, sp, #0
 8002ec0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ec2:	bf00      	nop
 8002ec4:	370c      	adds	r7, #12
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr

08002ece <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002ece:	b480      	push	{r7}
 8002ed0:	b083      	sub	sp, #12
 8002ed2:	af00      	add	r7, sp, #0
 8002ed4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002ed6:	bf00      	nop
 8002ed8:	370c      	adds	r7, #12
 8002eda:	46bd      	mov	sp, r7
 8002edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee0:	4770      	bx	lr

08002ee2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002ee2:	b480      	push	{r7}
 8002ee4:	b083      	sub	sp, #12
 8002ee6:	af00      	add	r7, sp, #0
 8002ee8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002eea:	bf00      	nop
 8002eec:	370c      	adds	r7, #12
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
	...

08002ef8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002ef8:	b480      	push	{r7}
 8002efa:	b085      	sub	sp, #20
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	4a2a      	ldr	r2, [pc, #168]	; (8002fb4 <TIM_Base_SetConfig+0xbc>)
 8002f0c:	4293      	cmp	r3, r2
 8002f0e:	d003      	beq.n	8002f18 <TIM_Base_SetConfig+0x20>
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f16:	d108      	bne.n	8002f2a <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	685b      	ldr	r3, [r3, #4]
 8002f24:	68fa      	ldr	r2, [r7, #12]
 8002f26:	4313      	orrs	r3, r2
 8002f28:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a21      	ldr	r2, [pc, #132]	; (8002fb4 <TIM_Base_SetConfig+0xbc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d00b      	beq.n	8002f4a <TIM_Base_SetConfig+0x52>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f38:	d007      	beq.n	8002f4a <TIM_Base_SetConfig+0x52>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <TIM_Base_SetConfig+0xc0>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d003      	beq.n	8002f4a <TIM_Base_SetConfig+0x52>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a1d      	ldr	r2, [pc, #116]	; (8002fbc <TIM_Base_SetConfig+0xc4>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d108      	bne.n	8002f5c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f50:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	68fa      	ldr	r2, [r7, #12]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	695b      	ldr	r3, [r3, #20]
 8002f66:	4313      	orrs	r3, r2
 8002f68:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	68fa      	ldr	r2, [r7, #12]
 8002f6e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002f70:	683b      	ldr	r3, [r7, #0]
 8002f72:	689a      	ldr	r2, [r3, #8]
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	681a      	ldr	r2, [r3, #0]
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	4a0c      	ldr	r2, [pc, #48]	; (8002fb4 <TIM_Base_SetConfig+0xbc>)
 8002f84:	4293      	cmp	r3, r2
 8002f86:	d007      	beq.n	8002f98 <TIM_Base_SetConfig+0xa0>
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	4a0b      	ldr	r2, [pc, #44]	; (8002fb8 <TIM_Base_SetConfig+0xc0>)
 8002f8c:	4293      	cmp	r3, r2
 8002f8e:	d003      	beq.n	8002f98 <TIM_Base_SetConfig+0xa0>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	4a0a      	ldr	r2, [pc, #40]	; (8002fbc <TIM_Base_SetConfig+0xc4>)
 8002f94:	4293      	cmp	r3, r2
 8002f96:	d103      	bne.n	8002fa0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002f98:	683b      	ldr	r3, [r7, #0]
 8002f9a:	691a      	ldr	r2, [r3, #16]
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	2201      	movs	r2, #1
 8002fa4:	615a      	str	r2, [r3, #20]
}
 8002fa6:	bf00      	nop
 8002fa8:	3714      	adds	r7, #20
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr
 8002fb2:	bf00      	nop
 8002fb4:	40012c00 	.word	0x40012c00
 8002fb8:	40014000 	.word	0x40014000
 8002fbc:	40014400 	.word	0x40014400

08002fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b083      	sub	sp, #12
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002fdc:	bf00      	nop
 8002fde:	370c      	adds	r7, #12
 8002fe0:	46bd      	mov	sp, r7
 8002fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe6:	4770      	bx	lr

08002fe8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002fe8:	b480      	push	{r7}
 8002fea:	b083      	sub	sp, #12
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002ff0:	bf00      	nop
 8002ff2:	370c      	adds	r7, #12
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002ffc:	b580      	push	{r7, lr}
 8002ffe:	b082      	sub	sp, #8
 8003000:	af00      	add	r7, sp, #0
 8003002:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d101      	bne.n	800300e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800300a:	2301      	movs	r3, #1
 800300c:	e040      	b.n	8003090 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003012:	2b00      	cmp	r3, #0
 8003014:	d106      	bne.n	8003024 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800301e:	6878      	ldr	r0, [r7, #4]
 8003020:	f7fd ffde 	bl	8000fe0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2224      	movs	r2, #36	; 0x24
 8003028:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681a      	ldr	r2, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f022 0201 	bic.w	r2, r2, #1
 8003038:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f000 fc18 	bl	8003870 <UART_SetConfig>
 8003040:	4603      	mov	r3, r0
 8003042:	2b01      	cmp	r3, #1
 8003044:	d101      	bne.n	800304a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003046:	2301      	movs	r3, #1
 8003048:	e022      	b.n	8003090 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800304e:	2b00      	cmp	r3, #0
 8003050:	d002      	beq.n	8003058 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 fe38 	bl	8003cc8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003066:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003076:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	681a      	ldr	r2, [r3, #0]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	f042 0201 	orr.w	r2, r2, #1
 8003086:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003088:	6878      	ldr	r0, [r7, #4]
 800308a:	f000 febf 	bl	8003e0c <UART_CheckIdleState>
 800308e:	4603      	mov	r3, r0
}
 8003090:	4618      	mov	r0, r3
 8003092:	3708      	adds	r7, #8
 8003094:	46bd      	mov	sp, r7
 8003096:	bd80      	pop	{r7, pc}

08003098 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b08a      	sub	sp, #40	; 0x28
 800309c:	af02      	add	r7, sp, #8
 800309e:	60f8      	str	r0, [r7, #12]
 80030a0:	60b9      	str	r1, [r7, #8]
 80030a2:	603b      	str	r3, [r7, #0]
 80030a4:	4613      	mov	r3, r2
 80030a6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80030ac:	2b20      	cmp	r3, #32
 80030ae:	f040 8082 	bne.w	80031b6 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <HAL_UART_Transmit+0x26>
 80030b8:	88fb      	ldrh	r3, [r7, #6]
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d101      	bne.n	80030c2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80030be:	2301      	movs	r3, #1
 80030c0:	e07a      	b.n	80031b8 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80030c8:	2b01      	cmp	r3, #1
 80030ca:	d101      	bne.n	80030d0 <HAL_UART_Transmit+0x38>
 80030cc:	2302      	movs	r3, #2
 80030ce:	e073      	b.n	80031b8 <HAL_UART_Transmit+0x120>
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	2201      	movs	r2, #1
 80030d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	2200      	movs	r2, #0
 80030dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	2221      	movs	r2, #33	; 0x21
 80030e4:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80030e6:	f7fe f843 	bl	8001170 <HAL_GetTick>
 80030ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	88fa      	ldrh	r2, [r7, #6]
 80030f0:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	88fa      	ldrh	r2, [r7, #6]
 80030f8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	689b      	ldr	r3, [r3, #8]
 8003100:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003104:	d108      	bne.n	8003118 <HAL_UART_Transmit+0x80>
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	691b      	ldr	r3, [r3, #16]
 800310a:	2b00      	cmp	r3, #0
 800310c:	d104      	bne.n	8003118 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	61bb      	str	r3, [r7, #24]
 8003116:	e003      	b.n	8003120 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8003118:	68bb      	ldr	r3, [r7, #8]
 800311a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800311c:	2300      	movs	r3, #0
 800311e:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	2200      	movs	r2, #0
 8003124:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8003128:	e02d      	b.n	8003186 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	9300      	str	r3, [sp, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	2200      	movs	r2, #0
 8003132:	2180      	movs	r1, #128	; 0x80
 8003134:	68f8      	ldr	r0, [r7, #12]
 8003136:	f000 feb2 	bl	8003e9e <UART_WaitOnFlagUntilTimeout>
 800313a:	4603      	mov	r3, r0
 800313c:	2b00      	cmp	r3, #0
 800313e:	d001      	beq.n	8003144 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8003140:	2303      	movs	r3, #3
 8003142:	e039      	b.n	80031b8 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8003144:	69fb      	ldr	r3, [r7, #28]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10b      	bne.n	8003162 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800314a:	69bb      	ldr	r3, [r7, #24]
 800314c:	881a      	ldrh	r2, [r3, #0]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003156:	b292      	uxth	r2, r2
 8003158:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 800315a:	69bb      	ldr	r3, [r7, #24]
 800315c:	3302      	adds	r3, #2
 800315e:	61bb      	str	r3, [r7, #24]
 8003160:	e008      	b.n	8003174 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	781a      	ldrb	r2, [r3, #0]
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	b292      	uxth	r2, r2
 800316c:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 800316e:	69fb      	ldr	r3, [r7, #28]
 8003170:	3301      	adds	r3, #1
 8003172:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800317a:	b29b      	uxth	r3, r3
 800317c:	3b01      	subs	r3, #1
 800317e:	b29a      	uxth	r2, r3
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800318c:	b29b      	uxth	r3, r3
 800318e:	2b00      	cmp	r3, #0
 8003190:	d1cb      	bne.n	800312a <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003192:	683b      	ldr	r3, [r7, #0]
 8003194:	9300      	str	r3, [sp, #0]
 8003196:	697b      	ldr	r3, [r7, #20]
 8003198:	2200      	movs	r2, #0
 800319a:	2140      	movs	r1, #64	; 0x40
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f000 fe7e 	bl	8003e9e <UART_WaitOnFlagUntilTimeout>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d001      	beq.n	80031ac <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 80031a8:	2303      	movs	r3, #3
 80031aa:	e005      	b.n	80031b8 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	2220      	movs	r2, #32
 80031b0:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 80031b2:	2300      	movs	r3, #0
 80031b4:	e000      	b.n	80031b8 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 80031b6:	2302      	movs	r3, #2
  }
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3720      	adds	r7, #32
 80031bc:	46bd      	mov	sp, r7
 80031be:	bd80      	pop	{r7, pc}

080031c0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b08a      	sub	sp, #40	; 0x28
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	60f8      	str	r0, [r7, #12]
 80031c8:	60b9      	str	r1, [r7, #8]
 80031ca:	4613      	mov	r3, r2
 80031cc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80031d2:	2b20      	cmp	r3, #32
 80031d4:	d142      	bne.n	800325c <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d002      	beq.n	80031e2 <HAL_UART_Receive_IT+0x22>
 80031dc:	88fb      	ldrh	r3, [r7, #6]
 80031de:	2b00      	cmp	r3, #0
 80031e0:	d101      	bne.n	80031e6 <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 80031e2:	2301      	movs	r3, #1
 80031e4:	e03b      	b.n	800325e <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 80031ec:	2b01      	cmp	r3, #1
 80031ee:	d101      	bne.n	80031f4 <HAL_UART_Receive_IT+0x34>
 80031f0:	2302      	movs	r3, #2
 80031f2:	e034      	b.n	800325e <HAL_UART_Receive_IT+0x9e>
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2201      	movs	r2, #1
 80031f8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2200      	movs	r2, #0
 8003200:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	4a18      	ldr	r2, [pc, #96]	; (8003268 <HAL_UART_Receive_IT+0xa8>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d01f      	beq.n	800324c <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003216:	2b00      	cmp	r3, #0
 8003218:	d018      	beq.n	800324c <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003220:	697b      	ldr	r3, [r7, #20]
 8003222:	e853 3f00 	ldrex	r3, [r3]
 8003226:	613b      	str	r3, [r7, #16]
   return(result);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800322e:	627b      	str	r3, [r7, #36]	; 0x24
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	461a      	mov	r2, r3
 8003236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003238:	623b      	str	r3, [r7, #32]
 800323a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800323c:	69f9      	ldr	r1, [r7, #28]
 800323e:	6a3a      	ldr	r2, [r7, #32]
 8003240:	e841 2300 	strex	r3, r2, [r1]
 8003244:	61bb      	str	r3, [r7, #24]
   return(result);
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	2b00      	cmp	r3, #0
 800324a:	d1e6      	bne.n	800321a <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800324c:	88fb      	ldrh	r3, [r7, #6]
 800324e:	461a      	mov	r2, r3
 8003250:	68b9      	ldr	r1, [r7, #8]
 8003252:	68f8      	ldr	r0, [r7, #12]
 8003254:	f000 fee8 	bl	8004028 <UART_Start_Receive_IT>
 8003258:	4603      	mov	r3, r0
 800325a:	e000      	b.n	800325e <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 800325c:	2302      	movs	r3, #2
  }
}
 800325e:	4618      	mov	r0, r3
 8003260:	3728      	adds	r7, #40	; 0x28
 8003262:	46bd      	mov	sp, r7
 8003264:	bd80      	pop	{r7, pc}
 8003266:	bf00      	nop
 8003268:	40008000 	.word	0x40008000

0800326c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b0ba      	sub	sp, #232	; 0xe8
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	689b      	ldr	r3, [r3, #8]
 800328e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003292:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003296:	f640 030f 	movw	r3, #2063	; 0x80f
 800329a:	4013      	ands	r3, r2
 800329c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80032a0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d115      	bne.n	80032d4 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80032a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032ac:	f003 0320 	and.w	r3, r3, #32
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d00f      	beq.n	80032d4 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80032b4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80032b8:	f003 0320 	and.w	r3, r3, #32
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d009      	beq.n	80032d4 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032c4:	2b00      	cmp	r3, #0
 80032c6:	f000 82a6 	beq.w	8003816 <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	4798      	blx	r3
      }
      return;
 80032d2:	e2a0      	b.n	8003816 <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 80032d4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80032d8:	2b00      	cmp	r3, #0
 80032da:	f000 8117 	beq.w	800350c <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 80032de:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80032e2:	f003 0301 	and.w	r3, r3, #1
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d106      	bne.n	80032f8 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 80032ea:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 80032ee:	4b85      	ldr	r3, [pc, #532]	; (8003504 <HAL_UART_IRQHandler+0x298>)
 80032f0:	4013      	ands	r3, r2
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 810a 	beq.w	800350c <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80032f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032fc:	f003 0301 	and.w	r3, r3, #1
 8003300:	2b00      	cmp	r3, #0
 8003302:	d011      	beq.n	8003328 <HAL_UART_IRQHandler+0xbc>
 8003304:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003308:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800330c:	2b00      	cmp	r3, #0
 800330e:	d00b      	beq.n	8003328 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	2201      	movs	r2, #1
 8003316:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800331e:	f043 0201 	orr.w	r2, r3, #1
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003328:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800332c:	f003 0302 	and.w	r3, r3, #2
 8003330:	2b00      	cmp	r3, #0
 8003332:	d011      	beq.n	8003358 <HAL_UART_IRQHandler+0xec>
 8003334:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003338:	f003 0301 	and.w	r3, r3, #1
 800333c:	2b00      	cmp	r3, #0
 800333e:	d00b      	beq.n	8003358 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	2202      	movs	r2, #2
 8003346:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800334e:	f043 0204 	orr.w	r2, r3, #4
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003358:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d011      	beq.n	8003388 <HAL_UART_IRQHandler+0x11c>
 8003364:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003368:	f003 0301 	and.w	r3, r3, #1
 800336c:	2b00      	cmp	r3, #0
 800336e:	d00b      	beq.n	8003388 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	2204      	movs	r2, #4
 8003376:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800337e:	f043 0202 	orr.w	r2, r3, #2
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003388:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800338c:	f003 0308 	and.w	r3, r3, #8
 8003390:	2b00      	cmp	r3, #0
 8003392:	d017      	beq.n	80033c4 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003394:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003398:	f003 0320 	and.w	r3, r3, #32
 800339c:	2b00      	cmp	r3, #0
 800339e:	d105      	bne.n	80033ac <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80033a0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80033a4:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d00b      	beq.n	80033c4 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2208      	movs	r2, #8
 80033b2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ba:	f043 0208 	orr.w	r2, r3, #8
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80033c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d012      	beq.n	80033f6 <HAL_UART_IRQHandler+0x18a>
 80033d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80033d4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d00c      	beq.n	80033f6 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033e4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033ec:	f043 0220 	orr.w	r2, r3, #32
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	f000 820c 	beq.w	800381a <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003402:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003406:	f003 0320 	and.w	r3, r3, #32
 800340a:	2b00      	cmp	r3, #0
 800340c:	d00d      	beq.n	800342a <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800340e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003412:	f003 0320 	and.w	r3, r3, #32
 8003416:	2b00      	cmp	r3, #0
 8003418:	d007      	beq.n	800342a <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800341e:	2b00      	cmp	r3, #0
 8003420:	d003      	beq.n	800342a <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003426:	6878      	ldr	r0, [r7, #4]
 8003428:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003430:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	689b      	ldr	r3, [r3, #8]
 800343a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800343e:	2b40      	cmp	r3, #64	; 0x40
 8003440:	d005      	beq.n	800344e <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003442:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8003446:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800344a:	2b00      	cmp	r3, #0
 800344c:	d04f      	beq.n	80034ee <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 feb4 	bl	80041bc <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	689b      	ldr	r3, [r3, #8]
 800345a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800345e:	2b40      	cmp	r3, #64	; 0x40
 8003460:	d141      	bne.n	80034e6 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	3308      	adds	r3, #8
 8003468:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800346c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003470:	e853 3f00 	ldrex	r3, [r3]
 8003474:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8003478:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800347c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003480:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	3308      	adds	r3, #8
 800348a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800348e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003492:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003496:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800349a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800349e:	e841 2300 	strex	r3, r2, [r1]
 80034a2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80034a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d1d9      	bne.n	8003462 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d013      	beq.n	80034de <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ba:	4a13      	ldr	r2, [pc, #76]	; (8003508 <HAL_UART_IRQHandler+0x29c>)
 80034bc:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd ff80 	bl	80013c8 <HAL_DMA_Abort_IT>
 80034c8:	4603      	mov	r3, r0
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d017      	beq.n	80034fe <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80034d4:	687a      	ldr	r2, [r7, #4]
 80034d6:	6f12      	ldr	r2, [r2, #112]	; 0x70
 80034d8:	4610      	mov	r0, r2
 80034da:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034dc:	e00f      	b.n	80034fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80034de:	6878      	ldr	r0, [r7, #4]
 80034e0:	f000 f9b0 	bl	8003844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034e4:	e00b      	b.n	80034fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 f9ac 	bl	8003844 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034ec:	e007      	b.n	80034fe <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80034ee:	6878      	ldr	r0, [r7, #4]
 80034f0:	f000 f9a8 	bl	8003844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2200      	movs	r2, #0
 80034f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 80034fc:	e18d      	b.n	800381a <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80034fe:	bf00      	nop
    return;
 8003500:	e18b      	b.n	800381a <HAL_UART_IRQHandler+0x5ae>
 8003502:	bf00      	nop
 8003504:	04000120 	.word	0x04000120
 8003508:	08004283 	.word	0x08004283

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003510:	2b01      	cmp	r3, #1
 8003512:	f040 8146 	bne.w	80037a2 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003516:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800351a:	f003 0310 	and.w	r3, r3, #16
 800351e:	2b00      	cmp	r3, #0
 8003520:	f000 813f 	beq.w	80037a2 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003524:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003528:	f003 0310 	and.w	r3, r3, #16
 800352c:	2b00      	cmp	r3, #0
 800352e:	f000 8138 	beq.w	80037a2 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2210      	movs	r2, #16
 8003538:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	689b      	ldr	r3, [r3, #8]
 8003540:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003544:	2b40      	cmp	r3, #64	; 0x40
 8003546:	f040 80b4 	bne.w	80036b2 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003556:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800355a:	2b00      	cmp	r3, #0
 800355c:	f000 815f 	beq.w	800381e <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003566:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800356a:	429a      	cmp	r2, r3
 800356c:	f080 8157 	bcs.w	800381e <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8003576:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0320 	and.w	r3, r3, #32
 8003586:	2b00      	cmp	r3, #0
 8003588:	f040 8085 	bne.w	8003696 <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003594:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003598:	e853 3f00 	ldrex	r3, [r3]
 800359c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80035a0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80035a4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80035a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	461a      	mov	r2, r3
 80035b2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80035b6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80035ba:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035be:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80035c2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80035c6:	e841 2300 	strex	r3, r2, [r1]
 80035ca:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80035ce:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d1da      	bne.n	800358c <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	3308      	adds	r3, #8
 80035dc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035de:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80035e0:	e853 3f00 	ldrex	r3, [r3]
 80035e4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80035e6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80035e8:	f023 0301 	bic.w	r3, r3, #1
 80035ec:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	3308      	adds	r3, #8
 80035f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80035fa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80035fe:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003600:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003602:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8003606:	e841 2300 	strex	r3, r2, [r1]
 800360a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800360c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1e1      	bne.n	80035d6 <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	3308      	adds	r3, #8
 8003618:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8003622:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003624:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003628:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	3308      	adds	r3, #8
 8003632:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8003636:	66fa      	str	r2, [r7, #108]	; 0x6c
 8003638:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800363a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800363c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800363e:	e841 2300 	strex	r3, r2, [r1]
 8003642:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8003644:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003646:	2b00      	cmp	r3, #0
 8003648:	d1e3      	bne.n	8003612 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	2220      	movs	r2, #32
 800364e:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800365c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800365e:	e853 3f00 	ldrex	r3, [r3]
 8003662:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8003664:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003666:	f023 0310 	bic.w	r3, r3, #16
 800366a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	461a      	mov	r2, r3
 8003674:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8003678:	65bb      	str	r3, [r7, #88]	; 0x58
 800367a:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800367c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800367e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003680:	e841 2300 	strex	r3, r2, [r1]
 8003684:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8003686:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003688:	2b00      	cmp	r3, #0
 800368a:	d1e4      	bne.n	8003656 <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003690:	4618      	mov	r0, r3
 8003692:	f7fd fe5b 	bl	800134c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036a2:	b29b      	uxth	r3, r3
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	b29b      	uxth	r3, r3
 80036a8:	4619      	mov	r1, r3
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f000 f8d4 	bl	8003858 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80036b0:	e0b5      	b.n	800381e <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036be:	b29b      	uxth	r3, r3
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80036cc:	b29b      	uxth	r3, r3
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	f000 80a7 	beq.w	8003822 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 80036d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80036d8:	2b00      	cmp	r3, #0
 80036da:	f000 80a2 	beq.w	8003822 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80036e6:	e853 3f00 	ldrex	r3, [r3]
 80036ea:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80036ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80036f2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	461a      	mov	r2, r3
 80036fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003700:	647b      	str	r3, [r7, #68]	; 0x44
 8003702:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003704:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8003706:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8003708:	e841 2300 	strex	r3, r2, [r1]
 800370c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800370e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003710:	2b00      	cmp	r3, #0
 8003712:	d1e4      	bne.n	80036de <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	3308      	adds	r3, #8
 800371a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800371c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800371e:	e853 3f00 	ldrex	r3, [r3]
 8003722:	623b      	str	r3, [r7, #32]
   return(result);
 8003724:	6a3b      	ldr	r3, [r7, #32]
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	3308      	adds	r3, #8
 8003734:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8003738:	633a      	str	r2, [r7, #48]	; 0x30
 800373a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800373c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800373e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003740:	e841 2300 	strex	r3, r2, [r1]
 8003744:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8003746:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003748:	2b00      	cmp	r3, #0
 800374a:	d1e3      	bne.n	8003714 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	2220      	movs	r2, #32
 8003750:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2200      	movs	r2, #0
 8003756:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2200      	movs	r2, #0
 800375c:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	e853 3f00 	ldrex	r3, [r3]
 800376a:	60fb      	str	r3, [r7, #12]
   return(result);
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	f023 0310 	bic.w	r3, r3, #16
 8003772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	461a      	mov	r2, r3
 800377c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003780:	61fb      	str	r3, [r7, #28]
 8003782:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003784:	69b9      	ldr	r1, [r7, #24]
 8003786:	69fa      	ldr	r2, [r7, #28]
 8003788:	e841 2300 	strex	r3, r2, [r1]
 800378c:	617b      	str	r3, [r7, #20]
   return(result);
 800378e:	697b      	ldr	r3, [r7, #20]
 8003790:	2b00      	cmp	r3, #0
 8003792:	d1e4      	bne.n	800375e <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003794:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003798:	4619      	mov	r1, r3
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f85c 	bl	8003858 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80037a0:	e03f      	b.n	8003822 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80037a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037a6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d00e      	beq.n	80037cc <HAL_UART_IRQHandler+0x560>
 80037ae:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80037b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d008      	beq.n	80037cc <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80037c2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80037c4:	6878      	ldr	r0, [r7, #4]
 80037c6:	f000 fefc 	bl	80045c2 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80037ca:	e02d      	b.n	8003828 <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 80037cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d00e      	beq.n	80037f6 <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80037d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037dc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d01c      	beq.n	8003826 <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	4798      	blx	r3
    }
    return;
 80037f4:	e017      	b.n	8003826 <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80037f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d012      	beq.n	8003828 <HAL_UART_IRQHandler+0x5bc>
 8003802:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003806:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00c      	beq.n	8003828 <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f000 fd4d 	bl	80042ae <UART_EndTransmit_IT>
    return;
 8003814:	e008      	b.n	8003828 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003816:	bf00      	nop
 8003818:	e006      	b.n	8003828 <HAL_UART_IRQHandler+0x5bc>
    return;
 800381a:	bf00      	nop
 800381c:	e004      	b.n	8003828 <HAL_UART_IRQHandler+0x5bc>
      return;
 800381e:	bf00      	nop
 8003820:	e002      	b.n	8003828 <HAL_UART_IRQHandler+0x5bc>
      return;
 8003822:	bf00      	nop
 8003824:	e000      	b.n	8003828 <HAL_UART_IRQHandler+0x5bc>
    return;
 8003826:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003828:	37e8      	adds	r7, #232	; 0xe8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop

08003830 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003830:	b480      	push	{r7}
 8003832:	b083      	sub	sp, #12
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003838:	bf00      	nop
 800383a:	370c      	adds	r7, #12
 800383c:	46bd      	mov	sp, r7
 800383e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003842:	4770      	bx	lr

08003844 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003844:	b480      	push	{r7}
 8003846:	b083      	sub	sp, #12
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 800384c:	bf00      	nop
 800384e:	370c      	adds	r7, #12
 8003850:	46bd      	mov	sp, r7
 8003852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003856:	4770      	bx	lr

08003858 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003858:	b480      	push	{r7}
 800385a:	b083      	sub	sp, #12
 800385c:	af00      	add	r7, sp, #0
 800385e:	6078      	str	r0, [r7, #4]
 8003860:	460b      	mov	r3, r1
 8003862:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003864:	bf00      	nop
 8003866:	370c      	adds	r7, #12
 8003868:	46bd      	mov	sp, r7
 800386a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800386e:	4770      	bx	lr

08003870 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003870:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003874:	b08a      	sub	sp, #40	; 0x28
 8003876:	af00      	add	r7, sp, #0
 8003878:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800387a:	2300      	movs	r3, #0
 800387c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	691b      	ldr	r3, [r3, #16]
 8003888:	431a      	orrs	r2, r3
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	695b      	ldr	r3, [r3, #20]
 800388e:	431a      	orrs	r2, r3
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	69db      	ldr	r3, [r3, #28]
 8003894:	4313      	orrs	r3, r2
 8003896:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681a      	ldr	r2, [r3, #0]
 800389e:	4bb4      	ldr	r3, [pc, #720]	; (8003b70 <UART_SetConfig+0x300>)
 80038a0:	4013      	ands	r3, r2
 80038a2:	68fa      	ldr	r2, [r7, #12]
 80038a4:	6812      	ldr	r2, [r2, #0]
 80038a6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80038a8:	430b      	orrs	r3, r1
 80038aa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	685b      	ldr	r3, [r3, #4]
 80038b2:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68da      	ldr	r2, [r3, #12]
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	430a      	orrs	r2, r1
 80038c0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	699b      	ldr	r3, [r3, #24]
 80038c6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4aa9      	ldr	r2, [pc, #676]	; (8003b74 <UART_SetConfig+0x304>)
 80038ce:	4293      	cmp	r3, r2
 80038d0:	d004      	beq.n	80038dc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038d8:	4313      	orrs	r3, r2
 80038da:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	689b      	ldr	r3, [r3, #8]
 80038e2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80038ec:	430a      	orrs	r2, r1
 80038ee:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80038f0:	68fb      	ldr	r3, [r7, #12]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	4aa0      	ldr	r2, [pc, #640]	; (8003b78 <UART_SetConfig+0x308>)
 80038f6:	4293      	cmp	r3, r2
 80038f8:	d126      	bne.n	8003948 <UART_SetConfig+0xd8>
 80038fa:	4ba0      	ldr	r3, [pc, #640]	; (8003b7c <UART_SetConfig+0x30c>)
 80038fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003900:	f003 0303 	and.w	r3, r3, #3
 8003904:	2b03      	cmp	r3, #3
 8003906:	d81b      	bhi.n	8003940 <UART_SetConfig+0xd0>
 8003908:	a201      	add	r2, pc, #4	; (adr r2, 8003910 <UART_SetConfig+0xa0>)
 800390a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800390e:	bf00      	nop
 8003910:	08003921 	.word	0x08003921
 8003914:	08003931 	.word	0x08003931
 8003918:	08003929 	.word	0x08003929
 800391c:	08003939 	.word	0x08003939
 8003920:	2301      	movs	r3, #1
 8003922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003926:	e080      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003928:	2302      	movs	r3, #2
 800392a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800392e:	e07c      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003930:	2304      	movs	r3, #4
 8003932:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003936:	e078      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003938:	2308      	movs	r3, #8
 800393a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800393e:	e074      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003940:	2310      	movs	r3, #16
 8003942:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003946:	e070      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	4a8c      	ldr	r2, [pc, #560]	; (8003b80 <UART_SetConfig+0x310>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d138      	bne.n	80039c4 <UART_SetConfig+0x154>
 8003952:	4b8a      	ldr	r3, [pc, #552]	; (8003b7c <UART_SetConfig+0x30c>)
 8003954:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003958:	f003 030c 	and.w	r3, r3, #12
 800395c:	2b0c      	cmp	r3, #12
 800395e:	d82d      	bhi.n	80039bc <UART_SetConfig+0x14c>
 8003960:	a201      	add	r2, pc, #4	; (adr r2, 8003968 <UART_SetConfig+0xf8>)
 8003962:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003966:	bf00      	nop
 8003968:	0800399d 	.word	0x0800399d
 800396c:	080039bd 	.word	0x080039bd
 8003970:	080039bd 	.word	0x080039bd
 8003974:	080039bd 	.word	0x080039bd
 8003978:	080039ad 	.word	0x080039ad
 800397c:	080039bd 	.word	0x080039bd
 8003980:	080039bd 	.word	0x080039bd
 8003984:	080039bd 	.word	0x080039bd
 8003988:	080039a5 	.word	0x080039a5
 800398c:	080039bd 	.word	0x080039bd
 8003990:	080039bd 	.word	0x080039bd
 8003994:	080039bd 	.word	0x080039bd
 8003998:	080039b5 	.word	0x080039b5
 800399c:	2300      	movs	r3, #0
 800399e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039a2:	e042      	b.n	8003a2a <UART_SetConfig+0x1ba>
 80039a4:	2302      	movs	r3, #2
 80039a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039aa:	e03e      	b.n	8003a2a <UART_SetConfig+0x1ba>
 80039ac:	2304      	movs	r3, #4
 80039ae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039b2:	e03a      	b.n	8003a2a <UART_SetConfig+0x1ba>
 80039b4:	2308      	movs	r3, #8
 80039b6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039ba:	e036      	b.n	8003a2a <UART_SetConfig+0x1ba>
 80039bc:	2310      	movs	r3, #16
 80039be:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80039c2:	e032      	b.n	8003a2a <UART_SetConfig+0x1ba>
 80039c4:	68fb      	ldr	r3, [r7, #12]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a6a      	ldr	r2, [pc, #424]	; (8003b74 <UART_SetConfig+0x304>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d12a      	bne.n	8003a24 <UART_SetConfig+0x1b4>
 80039ce:	4b6b      	ldr	r3, [pc, #428]	; (8003b7c <UART_SetConfig+0x30c>)
 80039d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80039d4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80039d8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039dc:	d01a      	beq.n	8003a14 <UART_SetConfig+0x1a4>
 80039de:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80039e2:	d81b      	bhi.n	8003a1c <UART_SetConfig+0x1ac>
 80039e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039e8:	d00c      	beq.n	8003a04 <UART_SetConfig+0x194>
 80039ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80039ee:	d815      	bhi.n	8003a1c <UART_SetConfig+0x1ac>
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <UART_SetConfig+0x18c>
 80039f4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80039f8:	d008      	beq.n	8003a0c <UART_SetConfig+0x19c>
 80039fa:	e00f      	b.n	8003a1c <UART_SetConfig+0x1ac>
 80039fc:	2300      	movs	r3, #0
 80039fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a02:	e012      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003a04:	2302      	movs	r3, #2
 8003a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a0a:	e00e      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003a0c:	2304      	movs	r3, #4
 8003a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a12:	e00a      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003a14:	2308      	movs	r3, #8
 8003a16:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a1a:	e006      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003a1c:	2310      	movs	r3, #16
 8003a1e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003a22:	e002      	b.n	8003a2a <UART_SetConfig+0x1ba>
 8003a24:	2310      	movs	r3, #16
 8003a26:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	4a51      	ldr	r2, [pc, #324]	; (8003b74 <UART_SetConfig+0x304>)
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d17a      	bne.n	8003b2a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003a34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003a38:	2b08      	cmp	r3, #8
 8003a3a:	d824      	bhi.n	8003a86 <UART_SetConfig+0x216>
 8003a3c:	a201      	add	r2, pc, #4	; (adr r2, 8003a44 <UART_SetConfig+0x1d4>)
 8003a3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a42:	bf00      	nop
 8003a44:	08003a69 	.word	0x08003a69
 8003a48:	08003a87 	.word	0x08003a87
 8003a4c:	08003a71 	.word	0x08003a71
 8003a50:	08003a87 	.word	0x08003a87
 8003a54:	08003a77 	.word	0x08003a77
 8003a58:	08003a87 	.word	0x08003a87
 8003a5c:	08003a87 	.word	0x08003a87
 8003a60:	08003a87 	.word	0x08003a87
 8003a64:	08003a7f 	.word	0x08003a7f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003a68:	f7fe fc92 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003a6c:	61f8      	str	r0, [r7, #28]
        break;
 8003a6e:	e010      	b.n	8003a92 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003a70:	4b44      	ldr	r3, [pc, #272]	; (8003b84 <UART_SetConfig+0x314>)
 8003a72:	61fb      	str	r3, [r7, #28]
        break;
 8003a74:	e00d      	b.n	8003a92 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003a76:	f7fe fbf3 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 8003a7a:	61f8      	str	r0, [r7, #28]
        break;
 8003a7c:	e009      	b.n	8003a92 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003a7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a82:	61fb      	str	r3, [r7, #28]
        break;
 8003a84:	e005      	b.n	8003a92 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003a90:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003a92:	69fb      	ldr	r3, [r7, #28]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	f000 8107 	beq.w	8003ca8 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	685a      	ldr	r2, [r3, #4]
 8003a9e:	4613      	mov	r3, r2
 8003aa0:	005b      	lsls	r3, r3, #1
 8003aa2:	4413      	add	r3, r2
 8003aa4:	69fa      	ldr	r2, [r7, #28]
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d305      	bcc.n	8003ab6 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	685b      	ldr	r3, [r3, #4]
 8003aae:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003ab0:	69fa      	ldr	r2, [r7, #28]
 8003ab2:	429a      	cmp	r2, r3
 8003ab4:	d903      	bls.n	8003abe <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003abc:	e0f4      	b.n	8003ca8 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003abe:	69fb      	ldr	r3, [r7, #28]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	461c      	mov	r4, r3
 8003ac4:	4615      	mov	r5, r2
 8003ac6:	f04f 0200 	mov.w	r2, #0
 8003aca:	f04f 0300 	mov.w	r3, #0
 8003ace:	022b      	lsls	r3, r5, #8
 8003ad0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003ad4:	0222      	lsls	r2, r4, #8
 8003ad6:	68f9      	ldr	r1, [r7, #12]
 8003ad8:	6849      	ldr	r1, [r1, #4]
 8003ada:	0849      	lsrs	r1, r1, #1
 8003adc:	2000      	movs	r0, #0
 8003ade:	4688      	mov	r8, r1
 8003ae0:	4681      	mov	r9, r0
 8003ae2:	eb12 0a08 	adds.w	sl, r2, r8
 8003ae6:	eb43 0b09 	adc.w	fp, r3, r9
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	2200      	movs	r2, #0
 8003af0:	603b      	str	r3, [r7, #0]
 8003af2:	607a      	str	r2, [r7, #4]
 8003af4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003af8:	4650      	mov	r0, sl
 8003afa:	4659      	mov	r1, fp
 8003afc:	f7fc fbc0 	bl	8000280 <__aeabi_uldivmod>
 8003b00:	4602      	mov	r2, r0
 8003b02:	460b      	mov	r3, r1
 8003b04:	4613      	mov	r3, r2
 8003b06:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003b08:	69bb      	ldr	r3, [r7, #24]
 8003b0a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003b0e:	d308      	bcc.n	8003b22 <UART_SetConfig+0x2b2>
 8003b10:	69bb      	ldr	r3, [r7, #24]
 8003b12:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003b16:	d204      	bcs.n	8003b22 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	69ba      	ldr	r2, [r7, #24]
 8003b1e:	60da      	str	r2, [r3, #12]
 8003b20:	e0c2      	b.n	8003ca8 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003b28:	e0be      	b.n	8003ca8 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	69db      	ldr	r3, [r3, #28]
 8003b2e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b32:	d16a      	bne.n	8003c0a <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003b34:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003b38:	2b08      	cmp	r3, #8
 8003b3a:	d834      	bhi.n	8003ba6 <UART_SetConfig+0x336>
 8003b3c:	a201      	add	r2, pc, #4	; (adr r2, 8003b44 <UART_SetConfig+0x2d4>)
 8003b3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b42:	bf00      	nop
 8003b44:	08003b69 	.word	0x08003b69
 8003b48:	08003b89 	.word	0x08003b89
 8003b4c:	08003b91 	.word	0x08003b91
 8003b50:	08003ba7 	.word	0x08003ba7
 8003b54:	08003b97 	.word	0x08003b97
 8003b58:	08003ba7 	.word	0x08003ba7
 8003b5c:	08003ba7 	.word	0x08003ba7
 8003b60:	08003ba7 	.word	0x08003ba7
 8003b64:	08003b9f 	.word	0x08003b9f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003b68:	f7fe fc12 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003b6c:	61f8      	str	r0, [r7, #28]
        break;
 8003b6e:	e020      	b.n	8003bb2 <UART_SetConfig+0x342>
 8003b70:	efff69f3 	.word	0xefff69f3
 8003b74:	40008000 	.word	0x40008000
 8003b78:	40013800 	.word	0x40013800
 8003b7c:	40021000 	.word	0x40021000
 8003b80:	40004400 	.word	0x40004400
 8003b84:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003b88:	f7fe fc18 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 8003b8c:	61f8      	str	r0, [r7, #28]
        break;
 8003b8e:	e010      	b.n	8003bb2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003b90:	4b4c      	ldr	r3, [pc, #304]	; (8003cc4 <UART_SetConfig+0x454>)
 8003b92:	61fb      	str	r3, [r7, #28]
        break;
 8003b94:	e00d      	b.n	8003bb2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003b96:	f7fe fb63 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 8003b9a:	61f8      	str	r0, [r7, #28]
        break;
 8003b9c:	e009      	b.n	8003bb2 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003b9e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ba2:	61fb      	str	r3, [r7, #28]
        break;
 8003ba4:	e005      	b.n	8003bb2 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003baa:	2301      	movs	r3, #1
 8003bac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003bb0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003bb2:	69fb      	ldr	r3, [r7, #28]
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d077      	beq.n	8003ca8 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003bb8:	69fb      	ldr	r3, [r7, #28]
 8003bba:	005a      	lsls	r2, r3, #1
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	685b      	ldr	r3, [r3, #4]
 8003bc0:	085b      	lsrs	r3, r3, #1
 8003bc2:	441a      	add	r2, r3
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bcc:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003bce:	69bb      	ldr	r3, [r7, #24]
 8003bd0:	2b0f      	cmp	r3, #15
 8003bd2:	d916      	bls.n	8003c02 <UART_SetConfig+0x392>
 8003bd4:	69bb      	ldr	r3, [r7, #24]
 8003bd6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003bda:	d212      	bcs.n	8003c02 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003bdc:	69bb      	ldr	r3, [r7, #24]
 8003bde:	b29b      	uxth	r3, r3
 8003be0:	f023 030f 	bic.w	r3, r3, #15
 8003be4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003be6:	69bb      	ldr	r3, [r7, #24]
 8003be8:	085b      	lsrs	r3, r3, #1
 8003bea:	b29b      	uxth	r3, r3
 8003bec:	f003 0307 	and.w	r3, r3, #7
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	8afb      	ldrh	r3, [r7, #22]
 8003bf4:	4313      	orrs	r3, r2
 8003bf6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	8afa      	ldrh	r2, [r7, #22]
 8003bfe:	60da      	str	r2, [r3, #12]
 8003c00:	e052      	b.n	8003ca8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003c08:	e04e      	b.n	8003ca8 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003c0a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003c0e:	2b08      	cmp	r3, #8
 8003c10:	d827      	bhi.n	8003c62 <UART_SetConfig+0x3f2>
 8003c12:	a201      	add	r2, pc, #4	; (adr r2, 8003c18 <UART_SetConfig+0x3a8>)
 8003c14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003c18:	08003c3d 	.word	0x08003c3d
 8003c1c:	08003c45 	.word	0x08003c45
 8003c20:	08003c4d 	.word	0x08003c4d
 8003c24:	08003c63 	.word	0x08003c63
 8003c28:	08003c53 	.word	0x08003c53
 8003c2c:	08003c63 	.word	0x08003c63
 8003c30:	08003c63 	.word	0x08003c63
 8003c34:	08003c63 	.word	0x08003c63
 8003c38:	08003c5b 	.word	0x08003c5b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003c3c:	f7fe fba8 	bl	8002390 <HAL_RCC_GetPCLK1Freq>
 8003c40:	61f8      	str	r0, [r7, #28]
        break;
 8003c42:	e014      	b.n	8003c6e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003c44:	f7fe fbba 	bl	80023bc <HAL_RCC_GetPCLK2Freq>
 8003c48:	61f8      	str	r0, [r7, #28]
        break;
 8003c4a:	e010      	b.n	8003c6e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003c4c:	4b1d      	ldr	r3, [pc, #116]	; (8003cc4 <UART_SetConfig+0x454>)
 8003c4e:	61fb      	str	r3, [r7, #28]
        break;
 8003c50:	e00d      	b.n	8003c6e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003c52:	f7fe fb05 	bl	8002260 <HAL_RCC_GetSysClockFreq>
 8003c56:	61f8      	str	r0, [r7, #28]
        break;
 8003c58:	e009      	b.n	8003c6e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003c5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c5e:	61fb      	str	r3, [r7, #28]
        break;
 8003c60:	e005      	b.n	8003c6e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003c62:	2300      	movs	r3, #0
 8003c64:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003c66:	2301      	movs	r3, #1
 8003c68:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003c6c:	bf00      	nop
    }

    if (pclk != 0U)
 8003c6e:	69fb      	ldr	r3, [r7, #28]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d019      	beq.n	8003ca8 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	085a      	lsrs	r2, r3, #1
 8003c7a:	69fb      	ldr	r3, [r7, #28]
 8003c7c:	441a      	add	r2, r3
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	685b      	ldr	r3, [r3, #4]
 8003c82:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c86:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003c88:	69bb      	ldr	r3, [r7, #24]
 8003c8a:	2b0f      	cmp	r3, #15
 8003c8c:	d909      	bls.n	8003ca2 <UART_SetConfig+0x432>
 8003c8e:	69bb      	ldr	r3, [r7, #24]
 8003c90:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003c94:	d205      	bcs.n	8003ca2 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003c96:	69bb      	ldr	r3, [r7, #24]
 8003c98:	b29a      	uxth	r2, r3
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	60da      	str	r2, [r3, #12]
 8003ca0:	e002      	b.n	8003ca8 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	2200      	movs	r2, #0
 8003cac:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003cb4:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003cb8:	4618      	mov	r0, r3
 8003cba:	3728      	adds	r7, #40	; 0x28
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cc2:	bf00      	nop
 8003cc4:	00f42400 	.word	0x00f42400

08003cc8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	b083      	sub	sp, #12
 8003ccc:	af00      	add	r7, sp, #0
 8003cce:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cd4:	f003 0301 	and.w	r3, r3, #1
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d00a      	beq.n	8003cf2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	685b      	ldr	r3, [r3, #4]
 8003ce2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	430a      	orrs	r2, r1
 8003cf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d00a      	beq.n	8003d14 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	685b      	ldr	r3, [r3, #4]
 8003d04:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	430a      	orrs	r2, r1
 8003d12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d18:	f003 0304 	and.w	r3, r3, #4
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d00a      	beq.n	8003d36 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	430a      	orrs	r2, r1
 8003d34:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	f003 0308 	and.w	r3, r3, #8
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d00a      	beq.n	8003d58 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	430a      	orrs	r2, r1
 8003d56:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d5c:	f003 0310 	and.w	r3, r3, #16
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d00a      	beq.n	8003d7a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	430a      	orrs	r2, r1
 8003d78:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d7e:	f003 0320 	and.w	r3, r3, #32
 8003d82:	2b00      	cmp	r3, #0
 8003d84:	d00a      	beq.n	8003d9c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	430a      	orrs	r2, r1
 8003d9a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003da0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d01a      	beq.n	8003dde <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	685b      	ldr	r3, [r3, #4]
 8003dae:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	430a      	orrs	r2, r1
 8003dbc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003dc6:	d10a      	bne.n	8003dde <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	685b      	ldr	r3, [r3, #4]
 8003dce:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	430a      	orrs	r2, r1
 8003ddc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d00a      	beq.n	8003e00 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	685b      	ldr	r3, [r3, #4]
 8003df0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	605a      	str	r2, [r3, #4]
  }
}
 8003e00:	bf00      	nop
 8003e02:	370c      	adds	r7, #12
 8003e04:	46bd      	mov	sp, r7
 8003e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e0a:	4770      	bx	lr

08003e0c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af02      	add	r7, sp, #8
 8003e12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003e1c:	f7fd f9a8 	bl	8001170 <HAL_GetTick>
 8003e20:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f003 0308 	and.w	r3, r3, #8
 8003e2c:	2b08      	cmp	r3, #8
 8003e2e:	d10e      	bne.n	8003e4e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e30:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e34:	9300      	str	r3, [sp, #0]
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003e3e:	6878      	ldr	r0, [r7, #4]
 8003e40:	f000 f82d 	bl	8003e9e <UART_WaitOnFlagUntilTimeout>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d001      	beq.n	8003e4e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e4a:	2303      	movs	r3, #3
 8003e4c:	e023      	b.n	8003e96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f003 0304 	and.w	r3, r3, #4
 8003e58:	2b04      	cmp	r3, #4
 8003e5a:	d10e      	bne.n	8003e7a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003e5c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003e60:	9300      	str	r3, [sp, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	2200      	movs	r2, #0
 8003e66:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f000 f817 	bl	8003e9e <UART_WaitOnFlagUntilTimeout>
 8003e70:	4603      	mov	r3, r0
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d001      	beq.n	8003e7a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e00d      	b.n	8003e96 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2220      	movs	r2, #32
 8003e7e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2220      	movs	r2, #32
 8003e84:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2200      	movs	r2, #0
 8003e90:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b09c      	sub	sp, #112	; 0x70
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	603b      	str	r3, [r7, #0]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eae:	e0a5      	b.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003eb0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003eb2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003eb6:	f000 80a1 	beq.w	8003ffc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003eba:	f7fd f959 	bl	8001170 <HAL_GetTick>
 8003ebe:	4602      	mov	r2, r0
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	1ad3      	subs	r3, r2, r3
 8003ec4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d302      	bcc.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x32>
 8003eca:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d13e      	bne.n	8003f4e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ed6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003ed8:	e853 3f00 	ldrex	r3, [r3]
 8003edc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003ede:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003ee0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003ee4:	667b      	str	r3, [r7, #100]	; 0x64
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	461a      	mov	r2, r3
 8003eec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003eee:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ef0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ef2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003ef4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8003ef6:	e841 2300 	strex	r3, r2, [r1]
 8003efa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003efc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d1e6      	bne.n	8003ed0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	3308      	adds	r3, #8
 8003f08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f0a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003f0c:	e853 3f00 	ldrex	r3, [r3]
 8003f10:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003f12:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003f14:	f023 0301 	bic.w	r3, r3, #1
 8003f18:	663b      	str	r3, [r7, #96]	; 0x60
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	3308      	adds	r3, #8
 8003f20:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003f22:	64ba      	str	r2, [r7, #72]	; 0x48
 8003f24:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003f28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003f2a:	e841 2300 	strex	r3, r2, [r1]
 8003f2e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003f30:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d1e5      	bne.n	8003f02 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	2220      	movs	r2, #32
 8003f3a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	2220      	movs	r2, #32
 8003f40:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8003f4a:	2303      	movs	r3, #3
 8003f4c:	e067      	b.n	800401e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f003 0304 	and.w	r3, r3, #4
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d04f      	beq.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	69db      	ldr	r3, [r3, #28]
 8003f62:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f66:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f6a:	d147      	bne.n	8003ffc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003f74:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f7e:	e853 3f00 	ldrex	r3, [r3]
 8003f82:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003f8a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	461a      	mov	r2, r3
 8003f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003f94:	637b      	str	r3, [r7, #52]	; 0x34
 8003f96:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003f9a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003f9c:	e841 2300 	strex	r3, r2, [r1]
 8003fa0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e6      	bne.n	8003f76 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	3308      	adds	r3, #8
 8003fae:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fb0:	697b      	ldr	r3, [r7, #20]
 8003fb2:	e853 3f00 	ldrex	r3, [r3]
 8003fb6:	613b      	str	r3, [r7, #16]
   return(result);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	66bb      	str	r3, [r7, #104]	; 0x68
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	3308      	adds	r3, #8
 8003fc6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8003fc8:	623a      	str	r2, [r7, #32]
 8003fca:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fcc:	69f9      	ldr	r1, [r7, #28]
 8003fce:	6a3a      	ldr	r2, [r7, #32]
 8003fd0:	e841 2300 	strex	r3, r2, [r1]
 8003fd4:	61bb      	str	r3, [r7, #24]
   return(result);
 8003fd6:	69bb      	ldr	r3, [r7, #24]
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d1e5      	bne.n	8003fa8 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2220      	movs	r2, #32
 8003fe6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2220      	movs	r2, #32
 8003fec:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003ff8:	2303      	movs	r3, #3
 8003ffa:	e010      	b.n	800401e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69da      	ldr	r2, [r3, #28]
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	4013      	ands	r3, r2
 8004006:	68ba      	ldr	r2, [r7, #8]
 8004008:	429a      	cmp	r2, r3
 800400a:	bf0c      	ite	eq
 800400c:	2301      	moveq	r3, #1
 800400e:	2300      	movne	r3, #0
 8004010:	b2db      	uxtb	r3, r3
 8004012:	461a      	mov	r2, r3
 8004014:	79fb      	ldrb	r3, [r7, #7]
 8004016:	429a      	cmp	r2, r3
 8004018:	f43f af4a 	beq.w	8003eb0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3770      	adds	r7, #112	; 0x70
 8004022:	46bd      	mov	sp, r7
 8004024:	bd80      	pop	{r7, pc}
	...

08004028 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004028:	b480      	push	{r7}
 800402a:	b097      	sub	sp, #92	; 0x5c
 800402c:	af00      	add	r7, sp, #0
 800402e:	60f8      	str	r0, [r7, #12]
 8004030:	60b9      	str	r1, [r7, #8]
 8004032:	4613      	mov	r3, r2
 8004034:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	68ba      	ldr	r2, [r7, #8]
 800403a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	88fa      	ldrh	r2, [r7, #6]
 8004040:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	88fa      	ldrh	r2, [r7, #6]
 8004048:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	2200      	movs	r2, #0
 8004050:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	689b      	ldr	r3, [r3, #8]
 8004056:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800405a:	d10e      	bne.n	800407a <UART_Start_Receive_IT+0x52>
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	691b      	ldr	r3, [r3, #16]
 8004060:	2b00      	cmp	r3, #0
 8004062:	d105      	bne.n	8004070 <UART_Start_Receive_IT+0x48>
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	f240 12ff 	movw	r2, #511	; 0x1ff
 800406a:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800406e:	e02d      	b.n	80040cc <UART_Start_Receive_IT+0xa4>
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	22ff      	movs	r2, #255	; 0xff
 8004074:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004078:	e028      	b.n	80040cc <UART_Start_Receive_IT+0xa4>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	689b      	ldr	r3, [r3, #8]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d10d      	bne.n	800409e <UART_Start_Receive_IT+0x76>
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	2b00      	cmp	r3, #0
 8004088:	d104      	bne.n	8004094 <UART_Start_Receive_IT+0x6c>
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	22ff      	movs	r2, #255	; 0xff
 800408e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004092:	e01b      	b.n	80040cc <UART_Start_Receive_IT+0xa4>
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	227f      	movs	r2, #127	; 0x7f
 8004098:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800409c:	e016      	b.n	80040cc <UART_Start_Receive_IT+0xa4>
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	689b      	ldr	r3, [r3, #8]
 80040a2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80040a6:	d10d      	bne.n	80040c4 <UART_Start_Receive_IT+0x9c>
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	691b      	ldr	r3, [r3, #16]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d104      	bne.n	80040ba <UART_Start_Receive_IT+0x92>
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	227f      	movs	r2, #127	; 0x7f
 80040b4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040b8:	e008      	b.n	80040cc <UART_Start_Receive_IT+0xa4>
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	223f      	movs	r2, #63	; 0x3f
 80040be:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80040c2:	e003      	b.n	80040cc <UART_Start_Receive_IT+0xa4>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2200      	movs	r2, #0
 80040c8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	2200      	movs	r2, #0
 80040d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2222      	movs	r2, #34	; 0x22
 80040d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	3308      	adds	r3, #8
 80040e0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80040e4:	e853 3f00 	ldrex	r3, [r3]
 80040e8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80040ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040ec:	f043 0301 	orr.w	r3, r3, #1
 80040f0:	657b      	str	r3, [r7, #84]	; 0x54
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	3308      	adds	r3, #8
 80040f8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80040fa:	64ba      	str	r2, [r7, #72]	; 0x48
 80040fc:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040fe:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004100:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004102:	e841 2300 	strex	r3, r2, [r1]
 8004106:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004108:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800410a:	2b00      	cmp	r3, #0
 800410c:	d1e5      	bne.n	80040da <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004116:	d107      	bne.n	8004128 <UART_Start_Receive_IT+0x100>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	691b      	ldr	r3, [r3, #16]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d103      	bne.n	8004128 <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	4a24      	ldr	r2, [pc, #144]	; (80041b4 <UART_Start_Receive_IT+0x18c>)
 8004124:	665a      	str	r2, [r3, #100]	; 0x64
 8004126:	e002      	b.n	800412e <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	4a23      	ldr	r2, [pc, #140]	; (80041b8 <UART_Start_Receive_IT+0x190>)
 800412c:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	691b      	ldr	r3, [r3, #16]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d019      	beq.n	8004172 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	681b      	ldr	r3, [r3, #0]
 8004142:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004146:	e853 3f00 	ldrex	r3, [r3]
 800414a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800414c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800414e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8004152:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	461a      	mov	r2, r3
 800415a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800415c:	637b      	str	r3, [r7, #52]	; 0x34
 800415e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004160:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004162:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004164:	e841 2300 	strex	r3, r2, [r1]
 8004168:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800416a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800416c:	2b00      	cmp	r3, #0
 800416e:	d1e6      	bne.n	800413e <UART_Start_Receive_IT+0x116>
 8004170:	e018      	b.n	80041a4 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	613b      	str	r3, [r7, #16]
   return(result);
 8004180:	693b      	ldr	r3, [r7, #16]
 8004182:	f043 0320 	orr.w	r3, r3, #32
 8004186:	653b      	str	r3, [r7, #80]	; 0x50
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	69f9      	ldr	r1, [r7, #28]
 8004196:	6a3a      	ldr	r2, [r7, #32]
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	61bb      	str	r3, [r7, #24]
   return(result);
 800419e:	69bb      	ldr	r3, [r7, #24]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e6      	bne.n	8004172 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	375c      	adds	r7, #92	; 0x5c
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	08004463 	.word	0x08004463
 80041b8:	08004303 	.word	0x08004303

080041bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80041bc:	b480      	push	{r7}
 80041be:	b095      	sub	sp, #84	; 0x54
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041cc:	e853 3f00 	ldrex	r3, [r3]
 80041d0:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80041d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041d4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	461a      	mov	r2, r3
 80041e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041e2:	643b      	str	r3, [r7, #64]	; 0x40
 80041e4:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041e6:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80041e8:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80041ea:	e841 2300 	strex	r3, r2, [r1]
 80041ee:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d1e6      	bne.n	80041c4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	3308      	adds	r3, #8
 80041fc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041fe:	6a3b      	ldr	r3, [r7, #32]
 8004200:	e853 3f00 	ldrex	r3, [r3]
 8004204:	61fb      	str	r3, [r7, #28]
   return(result);
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	f023 0301 	bic.w	r3, r3, #1
 800420c:	64bb      	str	r3, [r7, #72]	; 0x48
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	3308      	adds	r3, #8
 8004214:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004216:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004218:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800421c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800421e:	e841 2300 	strex	r3, r2, [r1]
 8004222:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004224:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004226:	2b00      	cmp	r3, #0
 8004228:	d1e5      	bne.n	80041f6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800422e:	2b01      	cmp	r3, #1
 8004230:	d118      	bne.n	8004264 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	e853 3f00 	ldrex	r3, [r3]
 800423e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	f023 0310 	bic.w	r3, r3, #16
 8004246:	647b      	str	r3, [r7, #68]	; 0x44
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	461a      	mov	r2, r3
 800424e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004250:	61bb      	str	r3, [r7, #24]
 8004252:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004254:	6979      	ldr	r1, [r7, #20]
 8004256:	69ba      	ldr	r2, [r7, #24]
 8004258:	e841 2300 	strex	r3, r2, [r1]
 800425c:	613b      	str	r3, [r7, #16]
   return(result);
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	2b00      	cmp	r3, #0
 8004262:	d1e6      	bne.n	8004232 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	2220      	movs	r2, #32
 8004268:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	2200      	movs	r2, #0
 800426e:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2200      	movs	r2, #0
 8004274:	665a      	str	r2, [r3, #100]	; 0x64
}
 8004276:	bf00      	nop
 8004278:	3754      	adds	r7, #84	; 0x54
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr

08004282 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004282:	b580      	push	{r7, lr}
 8004284:	b084      	sub	sp, #16
 8004286:	af00      	add	r7, sp, #0
 8004288:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800428e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004290:	68fb      	ldr	r3, [r7, #12]
 8004292:	2200      	movs	r2, #0
 8004294:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	2200      	movs	r2, #0
 800429c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80042a0:	68f8      	ldr	r0, [r7, #12]
 80042a2:	f7ff facf 	bl	8003844 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042a6:	bf00      	nop
 80042a8:	3710      	adds	r7, #16
 80042aa:	46bd      	mov	sp, r7
 80042ac:	bd80      	pop	{r7, pc}

080042ae <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80042ae:	b580      	push	{r7, lr}
 80042b0:	b088      	sub	sp, #32
 80042b2:	af00      	add	r7, sp, #0
 80042b4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	e853 3f00 	ldrex	r3, [r3]
 80042c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80042c4:	68bb      	ldr	r3, [r7, #8]
 80042c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80042ca:	61fb      	str	r3, [r7, #28]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	461a      	mov	r2, r3
 80042d2:	69fb      	ldr	r3, [r7, #28]
 80042d4:	61bb      	str	r3, [r7, #24]
 80042d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d8:	6979      	ldr	r1, [r7, #20]
 80042da:	69ba      	ldr	r2, [r7, #24]
 80042dc:	e841 2300 	strex	r3, r2, [r1]
 80042e0:	613b      	str	r3, [r7, #16]
   return(result);
 80042e2:	693b      	ldr	r3, [r7, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d1e6      	bne.n	80042b6 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	2220      	movs	r2, #32
 80042ec:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	2200      	movs	r2, #0
 80042f2:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fa9b 	bl	8003830 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80042fa:	bf00      	nop
 80042fc:	3720      	adds	r7, #32
 80042fe:	46bd      	mov	sp, r7
 8004300:	bd80      	pop	{r7, pc}

08004302 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004302:	b580      	push	{r7, lr}
 8004304:	b096      	sub	sp, #88	; 0x58
 8004306:	af00      	add	r7, sp, #0
 8004308:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004310:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004318:	2b22      	cmp	r3, #34	; 0x22
 800431a:	f040 8094 	bne.w	8004446 <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004324:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004328:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 800432c:	b2d9      	uxtb	r1, r3
 800432e:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004332:	b2da      	uxtb	r2, r3
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004338:	400a      	ands	r2, r1
 800433a:	b2d2      	uxtb	r2, r2
 800433c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004342:	1c5a      	adds	r2, r3, #1
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800434e:	b29b      	uxth	r3, r3
 8004350:	3b01      	subs	r3, #1
 8004352:	b29a      	uxth	r2, r3
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004360:	b29b      	uxth	r3, r3
 8004362:	2b00      	cmp	r3, #0
 8004364:	d179      	bne.n	800445a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800436c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800436e:	e853 3f00 	ldrex	r3, [r3]
 8004372:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004374:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004376:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800437a:	653b      	str	r3, [r7, #80]	; 0x50
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	461a      	mov	r2, r3
 8004382:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004384:	647b      	str	r3, [r7, #68]	; 0x44
 8004386:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004388:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800438a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800438c:	e841 2300 	strex	r3, r2, [r1]
 8004390:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004392:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004394:	2b00      	cmp	r3, #0
 8004396:	d1e6      	bne.n	8004366 <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	3308      	adds	r3, #8
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	e853 3f00 	ldrex	r3, [r3]
 80043a6:	623b      	str	r3, [r7, #32]
   return(result);
 80043a8:	6a3b      	ldr	r3, [r7, #32]
 80043aa:	f023 0301 	bic.w	r3, r3, #1
 80043ae:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	3308      	adds	r3, #8
 80043b6:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043b8:	633a      	str	r2, [r7, #48]	; 0x30
 80043ba:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043bc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80043be:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80043c0:	e841 2300 	strex	r3, r2, [r1]
 80043c4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80043c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d1e5      	bne.n	8004398 <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	2220      	movs	r2, #32
 80043d0:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	2200      	movs	r2, #0
 80043d6:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d12e      	bne.n	800443e <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	2200      	movs	r2, #0
 80043e4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	e853 3f00 	ldrex	r3, [r3]
 80043f2:	60fb      	str	r3, [r7, #12]
   return(result);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	f023 0310 	bic.w	r3, r3, #16
 80043fa:	64bb      	str	r3, [r7, #72]	; 0x48
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	461a      	mov	r2, r3
 8004402:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004404:	61fb      	str	r3, [r7, #28]
 8004406:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004408:	69b9      	ldr	r1, [r7, #24]
 800440a:	69fa      	ldr	r2, [r7, #28]
 800440c:	e841 2300 	strex	r3, r2, [r1]
 8004410:	617b      	str	r3, [r7, #20]
   return(result);
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d1e6      	bne.n	80043e6 <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	69db      	ldr	r3, [r3, #28]
 800441e:	f003 0310 	and.w	r3, r3, #16
 8004422:	2b10      	cmp	r3, #16
 8004424:	d103      	bne.n	800442e <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2210      	movs	r2, #16
 800442c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004434:	4619      	mov	r1, r3
 8004436:	6878      	ldr	r0, [r7, #4]
 8004438:	f7ff fa0e 	bl	8003858 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800443c:	e00d      	b.n	800445a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800443e:	6878      	ldr	r0, [r7, #4]
 8004440:	f7fc fada 	bl	80009f8 <HAL_UART_RxCpltCallback>
}
 8004444:	e009      	b.n	800445a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	8b1b      	ldrh	r3, [r3, #24]
 800444c:	b29a      	uxth	r2, r3
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f042 0208 	orr.w	r2, r2, #8
 8004456:	b292      	uxth	r2, r2
 8004458:	831a      	strh	r2, [r3, #24]
}
 800445a:	bf00      	nop
 800445c:	3758      	adds	r7, #88	; 0x58
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}

08004462 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004462:	b580      	push	{r7, lr}
 8004464:	b096      	sub	sp, #88	; 0x58
 8004466:	af00      	add	r7, sp, #0
 8004468:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004470:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004478:	2b22      	cmp	r3, #34	; 0x22
 800447a:	f040 8094 	bne.w	80045a6 <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004484:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800448c:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 800448e:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004492:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8004496:	4013      	ands	r3, r2
 8004498:	b29a      	uxth	r2, r3
 800449a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800449c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044a2:	1c9a      	adds	r2, r3, #2
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044ae:	b29b      	uxth	r3, r3
 80044b0:	3b01      	subs	r3, #1
 80044b2:	b29a      	uxth	r2, r3
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80044c0:	b29b      	uxth	r3, r3
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d179      	bne.n	80045ba <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ce:	e853 3f00 	ldrex	r3, [r3]
 80044d2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80044da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	461a      	mov	r2, r3
 80044e2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044e4:	643b      	str	r3, [r7, #64]	; 0x40
 80044e6:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044e8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80044ea:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80044ec:	e841 2300 	strex	r3, r2, [r1]
 80044f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d1e6      	bne.n	80044c6 <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	681b      	ldr	r3, [r3, #0]
 80044fc:	3308      	adds	r3, #8
 80044fe:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	e853 3f00 	ldrex	r3, [r3]
 8004506:	61fb      	str	r3, [r7, #28]
   return(result);
 8004508:	69fb      	ldr	r3, [r7, #28]
 800450a:	f023 0301 	bic.w	r3, r3, #1
 800450e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	3308      	adds	r3, #8
 8004516:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004518:	62fa      	str	r2, [r7, #44]	; 0x2c
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800451c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800451e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004520:	e841 2300 	strex	r3, r2, [r1]
 8004524:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004526:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004528:	2b00      	cmp	r3, #0
 800452a:	d1e5      	bne.n	80044f8 <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	2220      	movs	r2, #32
 8004530:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800453c:	2b01      	cmp	r3, #1
 800453e:	d12e      	bne.n	800459e <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2200      	movs	r2, #0
 8004544:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	e853 3f00 	ldrex	r3, [r3]
 8004552:	60bb      	str	r3, [r7, #8]
   return(result);
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	f023 0310 	bic.w	r3, r3, #16
 800455a:	647b      	str	r3, [r7, #68]	; 0x44
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	461a      	mov	r2, r3
 8004562:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004568:	6979      	ldr	r1, [r7, #20]
 800456a:	69ba      	ldr	r2, [r7, #24]
 800456c:	e841 2300 	strex	r3, r2, [r1]
 8004570:	613b      	str	r3, [r7, #16]
   return(result);
 8004572:	693b      	ldr	r3, [r7, #16]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d1e6      	bne.n	8004546 <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	69db      	ldr	r3, [r3, #28]
 800457e:	f003 0310 	and.w	r3, r3, #16
 8004582:	2b10      	cmp	r3, #16
 8004584:	d103      	bne.n	800458e <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	2210      	movs	r2, #16
 800458c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004594:	4619      	mov	r1, r3
 8004596:	6878      	ldr	r0, [r7, #4]
 8004598:	f7ff f95e 	bl	8003858 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800459c:	e00d      	b.n	80045ba <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 800459e:	6878      	ldr	r0, [r7, #4]
 80045a0:	f7fc fa2a 	bl	80009f8 <HAL_UART_RxCpltCallback>
}
 80045a4:	e009      	b.n	80045ba <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	8b1b      	ldrh	r3, [r3, #24]
 80045ac:	b29a      	uxth	r2, r3
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f042 0208 	orr.w	r2, r2, #8
 80045b6:	b292      	uxth	r2, r2
 80045b8:	831a      	strh	r2, [r3, #24]
}
 80045ba:	bf00      	nop
 80045bc:	3758      	adds	r7, #88	; 0x58
 80045be:	46bd      	mov	sp, r7
 80045c0:	bd80      	pop	{r7, pc}

080045c2 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80045c2:	b480      	push	{r7}
 80045c4:	b083      	sub	sp, #12
 80045c6:	af00      	add	r7, sp, #0
 80045c8:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80045ca:	bf00      	nop
 80045cc:	370c      	adds	r7, #12
 80045ce:	46bd      	mov	sp, r7
 80045d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d4:	4770      	bx	lr
	...

080045d8 <__NVIC_SetPriority>:
{
 80045d8:	b480      	push	{r7}
 80045da:	b083      	sub	sp, #12
 80045dc:	af00      	add	r7, sp, #0
 80045de:	4603      	mov	r3, r0
 80045e0:	6039      	str	r1, [r7, #0]
 80045e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	db0a      	blt.n	8004602 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	b2da      	uxtb	r2, r3
 80045f0:	490c      	ldr	r1, [pc, #48]	; (8004624 <__NVIC_SetPriority+0x4c>)
 80045f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045f6:	0112      	lsls	r2, r2, #4
 80045f8:	b2d2      	uxtb	r2, r2
 80045fa:	440b      	add	r3, r1
 80045fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004600:	e00a      	b.n	8004618 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	b2da      	uxtb	r2, r3
 8004606:	4908      	ldr	r1, [pc, #32]	; (8004628 <__NVIC_SetPriority+0x50>)
 8004608:	79fb      	ldrb	r3, [r7, #7]
 800460a:	f003 030f 	and.w	r3, r3, #15
 800460e:	3b04      	subs	r3, #4
 8004610:	0112      	lsls	r2, r2, #4
 8004612:	b2d2      	uxtb	r2, r2
 8004614:	440b      	add	r3, r1
 8004616:	761a      	strb	r2, [r3, #24]
}
 8004618:	bf00      	nop
 800461a:	370c      	adds	r7, #12
 800461c:	46bd      	mov	sp, r7
 800461e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004622:	4770      	bx	lr
 8004624:	e000e100 	.word	0xe000e100
 8004628:	e000ed00 	.word	0xe000ed00

0800462c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800462c:	b580      	push	{r7, lr}
 800462e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004630:	4b05      	ldr	r3, [pc, #20]	; (8004648 <SysTick_Handler+0x1c>)
 8004632:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004634:	f001 ff8a 	bl	800654c <xTaskGetSchedulerState>
 8004638:	4603      	mov	r3, r0
 800463a:	2b01      	cmp	r3, #1
 800463c:	d001      	beq.n	8004642 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800463e:	f002 fd73 	bl	8007128 <xPortSysTickHandler>
  }
}
 8004642:	bf00      	nop
 8004644:	bd80      	pop	{r7, pc}
 8004646:	bf00      	nop
 8004648:	e000e010 	.word	0xe000e010

0800464c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800464c:	b580      	push	{r7, lr}
 800464e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004650:	2100      	movs	r1, #0
 8004652:	f06f 0004 	mvn.w	r0, #4
 8004656:	f7ff ffbf 	bl	80045d8 <__NVIC_SetPriority>
#endif
}
 800465a:	bf00      	nop
 800465c:	bd80      	pop	{r7, pc}
	...

08004660 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004660:	b480      	push	{r7}
 8004662:	b083      	sub	sp, #12
 8004664:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004666:	f3ef 8305 	mrs	r3, IPSR
 800466a:	603b      	str	r3, [r7, #0]
  return(result);
 800466c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800466e:	2b00      	cmp	r3, #0
 8004670:	d003      	beq.n	800467a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004672:	f06f 0305 	mvn.w	r3, #5
 8004676:	607b      	str	r3, [r7, #4]
 8004678:	e00c      	b.n	8004694 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800467a:	4b0a      	ldr	r3, [pc, #40]	; (80046a4 <osKernelInitialize+0x44>)
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d105      	bne.n	800468e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004682:	4b08      	ldr	r3, [pc, #32]	; (80046a4 <osKernelInitialize+0x44>)
 8004684:	2201      	movs	r2, #1
 8004686:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004688:	2300      	movs	r3, #0
 800468a:	607b      	str	r3, [r7, #4]
 800468c:	e002      	b.n	8004694 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800468e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004692:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004694:	687b      	ldr	r3, [r7, #4]
}
 8004696:	4618      	mov	r0, r3
 8004698:	370c      	adds	r7, #12
 800469a:	46bd      	mov	sp, r7
 800469c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a0:	4770      	bx	lr
 80046a2:	bf00      	nop
 80046a4:	20000170 	.word	0x20000170

080046a8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80046a8:	b580      	push	{r7, lr}
 80046aa:	b082      	sub	sp, #8
 80046ac:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80046ae:	f3ef 8305 	mrs	r3, IPSR
 80046b2:	603b      	str	r3, [r7, #0]
  return(result);
 80046b4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d003      	beq.n	80046c2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80046ba:	f06f 0305 	mvn.w	r3, #5
 80046be:	607b      	str	r3, [r7, #4]
 80046c0:	e010      	b.n	80046e4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80046c2:	4b0b      	ldr	r3, [pc, #44]	; (80046f0 <osKernelStart+0x48>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2b01      	cmp	r3, #1
 80046c8:	d109      	bne.n	80046de <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80046ca:	f7ff ffbf 	bl	800464c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80046ce:	4b08      	ldr	r3, [pc, #32]	; (80046f0 <osKernelStart+0x48>)
 80046d0:	2202      	movs	r2, #2
 80046d2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80046d4:	f001 fade 	bl	8005c94 <vTaskStartScheduler>
      stat = osOK;
 80046d8:	2300      	movs	r3, #0
 80046da:	607b      	str	r3, [r7, #4]
 80046dc:	e002      	b.n	80046e4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80046de:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80046e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80046e4:	687b      	ldr	r3, [r7, #4]
}
 80046e6:	4618      	mov	r0, r3
 80046e8:	3708      	adds	r7, #8
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bd80      	pop	{r7, pc}
 80046ee:	bf00      	nop
 80046f0:	20000170 	.word	0x20000170

080046f4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b08e      	sub	sp, #56	; 0x38
 80046f8:	af04      	add	r7, sp, #16
 80046fa:	60f8      	str	r0, [r7, #12]
 80046fc:	60b9      	str	r1, [r7, #8]
 80046fe:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004700:	2300      	movs	r3, #0
 8004702:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004704:	f3ef 8305 	mrs	r3, IPSR
 8004708:	617b      	str	r3, [r7, #20]
  return(result);
 800470a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800470c:	2b00      	cmp	r3, #0
 800470e:	d17e      	bne.n	800480e <osThreadNew+0x11a>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	2b00      	cmp	r3, #0
 8004714:	d07b      	beq.n	800480e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004716:	2340      	movs	r3, #64	; 0x40
 8004718:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800471a:	2318      	movs	r3, #24
 800471c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800471e:	2300      	movs	r3, #0
 8004720:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004722:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004726:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	2b00      	cmp	r3, #0
 800472c:	d045      	beq.n	80047ba <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d002      	beq.n	800473c <osThreadNew+0x48>
        name = attr->name;
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	699b      	ldr	r3, [r3, #24]
 8004740:	2b00      	cmp	r3, #0
 8004742:	d002      	beq.n	800474a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	699b      	ldr	r3, [r3, #24]
 8004748:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	2b00      	cmp	r3, #0
 800474e:	d008      	beq.n	8004762 <osThreadNew+0x6e>
 8004750:	69fb      	ldr	r3, [r7, #28]
 8004752:	2b38      	cmp	r3, #56	; 0x38
 8004754:	d805      	bhi.n	8004762 <osThreadNew+0x6e>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d001      	beq.n	8004766 <osThreadNew+0x72>
        return (NULL);
 8004762:	2300      	movs	r3, #0
 8004764:	e054      	b.n	8004810 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	695b      	ldr	r3, [r3, #20]
 800476a:	2b00      	cmp	r3, #0
 800476c:	d003      	beq.n	8004776 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	695b      	ldr	r3, [r3, #20]
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	689b      	ldr	r3, [r3, #8]
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00e      	beq.n	800479c <osThreadNew+0xa8>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	68db      	ldr	r3, [r3, #12]
 8004782:	2bbb      	cmp	r3, #187	; 0xbb
 8004784:	d90a      	bls.n	800479c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800478a:	2b00      	cmp	r3, #0
 800478c:	d006      	beq.n	800479c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	695b      	ldr	r3, [r3, #20]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d002      	beq.n	800479c <osThreadNew+0xa8>
        mem = 1;
 8004796:	2301      	movs	r3, #1
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	e010      	b.n	80047be <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d10c      	bne.n	80047be <osThreadNew+0xca>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68db      	ldr	r3, [r3, #12]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d108      	bne.n	80047be <osThreadNew+0xca>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	691b      	ldr	r3, [r3, #16]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d104      	bne.n	80047be <osThreadNew+0xca>
          mem = 0;
 80047b4:	2300      	movs	r3, #0
 80047b6:	61bb      	str	r3, [r7, #24]
 80047b8:	e001      	b.n	80047be <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80047ba:	2300      	movs	r3, #0
 80047bc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80047be:	69bb      	ldr	r3, [r7, #24]
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d110      	bne.n	80047e6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80047cc:	9202      	str	r2, [sp, #8]
 80047ce:	9301      	str	r3, [sp, #4]
 80047d0:	69fb      	ldr	r3, [r7, #28]
 80047d2:	9300      	str	r3, [sp, #0]
 80047d4:	68bb      	ldr	r3, [r7, #8]
 80047d6:	6a3a      	ldr	r2, [r7, #32]
 80047d8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047da:	68f8      	ldr	r0, [r7, #12]
 80047dc:	f000 fffc 	bl	80057d8 <xTaskCreateStatic>
 80047e0:	4603      	mov	r3, r0
 80047e2:	613b      	str	r3, [r7, #16]
 80047e4:	e013      	b.n	800480e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80047e6:	69bb      	ldr	r3, [r7, #24]
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d110      	bne.n	800480e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80047ec:	6a3b      	ldr	r3, [r7, #32]
 80047ee:	b29a      	uxth	r2, r3
 80047f0:	f107 0310 	add.w	r3, r7, #16
 80047f4:	9301      	str	r3, [sp, #4]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	9300      	str	r3, [sp, #0]
 80047fa:	68bb      	ldr	r3, [r7, #8]
 80047fc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80047fe:	68f8      	ldr	r0, [r7, #12]
 8004800:	f001 f847 	bl	8005892 <xTaskCreate>
 8004804:	4603      	mov	r3, r0
 8004806:	2b01      	cmp	r3, #1
 8004808:	d001      	beq.n	800480e <osThreadNew+0x11a>
            hTask = NULL;
 800480a:	2300      	movs	r3, #0
 800480c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800480e:	693b      	ldr	r3, [r7, #16]
}
 8004810:	4618      	mov	r0, r3
 8004812:	3728      	adds	r7, #40	; 0x28
 8004814:	46bd      	mov	sp, r7
 8004816:	bd80      	pop	{r7, pc}

08004818 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8004818:	b580      	push	{r7, lr}
 800481a:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 800481c:	2000      	movs	r0, #0
 800481e:	f001 f993 	bl	8005b48 <vTaskDelete>
#endif
  for (;;);
 8004822:	e7fe      	b.n	8004822 <osThreadExit+0xa>

08004824 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004824:	b580      	push	{r7, lr}
 8004826:	b084      	sub	sp, #16
 8004828:	af00      	add	r7, sp, #0
 800482a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800482c:	f3ef 8305 	mrs	r3, IPSR
 8004830:	60bb      	str	r3, [r7, #8]
  return(result);
 8004832:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004834:	2b00      	cmp	r3, #0
 8004836:	d003      	beq.n	8004840 <osDelay+0x1c>
    stat = osErrorISR;
 8004838:	f06f 0305 	mvn.w	r3, #5
 800483c:	60fb      	str	r3, [r7, #12]
 800483e:	e007      	b.n	8004850 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004840:	2300      	movs	r3, #0
 8004842:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	2b00      	cmp	r3, #0
 8004848:	d002      	beq.n	8004850 <osDelay+0x2c>
      vTaskDelay(ticks);
 800484a:	6878      	ldr	r0, [r7, #4]
 800484c:	f001 f9ee 	bl	8005c2c <vTaskDelay>
    }
  }

  return (stat);
 8004850:	68fb      	ldr	r3, [r7, #12]
}
 8004852:	4618      	mov	r0, r3
 8004854:	3710      	adds	r7, #16
 8004856:	46bd      	mov	sp, r7
 8004858:	bd80      	pop	{r7, pc}

0800485a <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800485a:	b580      	push	{r7, lr}
 800485c:	b08a      	sub	sp, #40	; 0x28
 800485e:	af02      	add	r7, sp, #8
 8004860:	60f8      	str	r0, [r7, #12]
 8004862:	60b9      	str	r1, [r7, #8]
 8004864:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004866:	2300      	movs	r3, #0
 8004868:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800486a:	f3ef 8305 	mrs	r3, IPSR
 800486e:	613b      	str	r3, [r7, #16]
  return(result);
 8004870:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004872:	2b00      	cmp	r3, #0
 8004874:	d15f      	bne.n	8004936 <osMessageQueueNew+0xdc>
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	2b00      	cmp	r3, #0
 800487a:	d05c      	beq.n	8004936 <osMessageQueueNew+0xdc>
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	2b00      	cmp	r3, #0
 8004880:	d059      	beq.n	8004936 <osMessageQueueNew+0xdc>
    mem = -1;
 8004882:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004886:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d029      	beq.n	80048e2 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	689b      	ldr	r3, [r3, #8]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d012      	beq.n	80048bc <osMessageQueueNew+0x62>
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	2b4f      	cmp	r3, #79	; 0x4f
 800489c:	d90e      	bls.n	80048bc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d00a      	beq.n	80048bc <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	695a      	ldr	r2, [r3, #20]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	68b9      	ldr	r1, [r7, #8]
 80048ae:	fb01 f303 	mul.w	r3, r1, r3
 80048b2:	429a      	cmp	r2, r3
 80048b4:	d302      	bcc.n	80048bc <osMessageQueueNew+0x62>
        mem = 1;
 80048b6:	2301      	movs	r3, #1
 80048b8:	61bb      	str	r3, [r7, #24]
 80048ba:	e014      	b.n	80048e6 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	689b      	ldr	r3, [r3, #8]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d110      	bne.n	80048e6 <osMessageQueueNew+0x8c>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d10c      	bne.n	80048e6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d108      	bne.n	80048e6 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	695b      	ldr	r3, [r3, #20]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <osMessageQueueNew+0x8c>
          mem = 0;
 80048dc:	2300      	movs	r3, #0
 80048de:	61bb      	str	r3, [r7, #24]
 80048e0:	e001      	b.n	80048e6 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80048e2:	2300      	movs	r3, #0
 80048e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80048e6:	69bb      	ldr	r3, [r7, #24]
 80048e8:	2b01      	cmp	r3, #1
 80048ea:	d10b      	bne.n	8004904 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	2100      	movs	r1, #0
 80048f6:	9100      	str	r1, [sp, #0]
 80048f8:	68b9      	ldr	r1, [r7, #8]
 80048fa:	68f8      	ldr	r0, [r7, #12]
 80048fc:	f000 fa2e 	bl	8004d5c <xQueueGenericCreateStatic>
 8004900:	61f8      	str	r0, [r7, #28]
 8004902:	e008      	b.n	8004916 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004904:	69bb      	ldr	r3, [r7, #24]
 8004906:	2b00      	cmp	r3, #0
 8004908:	d105      	bne.n	8004916 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800490a:	2200      	movs	r2, #0
 800490c:	68b9      	ldr	r1, [r7, #8]
 800490e:	68f8      	ldr	r0, [r7, #12]
 8004910:	f000 fa9c 	bl	8004e4c <xQueueGenericCreate>
 8004914:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00c      	beq.n	8004936 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2b00      	cmp	r3, #0
 8004920:	d003      	beq.n	800492a <osMessageQueueNew+0xd0>
        name = attr->name;
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	e001      	b.n	800492e <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800492a:	2300      	movs	r3, #0
 800492c:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 800492e:	6979      	ldr	r1, [r7, #20]
 8004930:	69f8      	ldr	r0, [r7, #28]
 8004932:	f000 fef3 	bl	800571c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004936:	69fb      	ldr	r3, [r7, #28]
}
 8004938:	4618      	mov	r0, r3
 800493a:	3720      	adds	r7, #32
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8004940:	b580      	push	{r7, lr}
 8004942:	b088      	sub	sp, #32
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	4613      	mov	r3, r2
 800494e:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004954:	2300      	movs	r3, #0
 8004956:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004958:	f3ef 8305 	mrs	r3, IPSR
 800495c:	617b      	str	r3, [r7, #20]
  return(result);
 800495e:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004960:	2b00      	cmp	r3, #0
 8004962:	d028      	beq.n	80049b6 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	2b00      	cmp	r3, #0
 8004968:	d005      	beq.n	8004976 <osMessageQueuePut+0x36>
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	2b00      	cmp	r3, #0
 800496e:	d002      	beq.n	8004976 <osMessageQueuePut+0x36>
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d003      	beq.n	800497e <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8004976:	f06f 0303 	mvn.w	r3, #3
 800497a:	61fb      	str	r3, [r7, #28]
 800497c:	e038      	b.n	80049f0 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800497e:	2300      	movs	r3, #0
 8004980:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8004982:	f107 0210 	add.w	r2, r7, #16
 8004986:	2300      	movs	r3, #0
 8004988:	68b9      	ldr	r1, [r7, #8]
 800498a:	69b8      	ldr	r0, [r7, #24]
 800498c:	f000 fbba 	bl	8005104 <xQueueGenericSendFromISR>
 8004990:	4603      	mov	r3, r0
 8004992:	2b01      	cmp	r3, #1
 8004994:	d003      	beq.n	800499e <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8004996:	f06f 0302 	mvn.w	r3, #2
 800499a:	61fb      	str	r3, [r7, #28]
 800499c:	e028      	b.n	80049f0 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d025      	beq.n	80049f0 <osMessageQueuePut+0xb0>
 80049a4:	4b15      	ldr	r3, [pc, #84]	; (80049fc <osMessageQueuePut+0xbc>)
 80049a6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80049aa:	601a      	str	r2, [r3, #0]
 80049ac:	f3bf 8f4f 	dsb	sy
 80049b0:	f3bf 8f6f 	isb	sy
 80049b4:	e01c      	b.n	80049f0 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80049b6:	69bb      	ldr	r3, [r7, #24]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d002      	beq.n	80049c2 <osMessageQueuePut+0x82>
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	d103      	bne.n	80049ca <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80049c2:	f06f 0303 	mvn.w	r3, #3
 80049c6:	61fb      	str	r3, [r7, #28]
 80049c8:	e012      	b.n	80049f0 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80049ca:	2300      	movs	r3, #0
 80049cc:	683a      	ldr	r2, [r7, #0]
 80049ce:	68b9      	ldr	r1, [r7, #8]
 80049d0:	69b8      	ldr	r0, [r7, #24]
 80049d2:	f000 fa99 	bl	8004f08 <xQueueGenericSend>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b01      	cmp	r3, #1
 80049da:	d009      	beq.n	80049f0 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80049dc:	683b      	ldr	r3, [r7, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d003      	beq.n	80049ea <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80049e2:	f06f 0301 	mvn.w	r3, #1
 80049e6:	61fb      	str	r3, [r7, #28]
 80049e8:	e002      	b.n	80049f0 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80049ea:	f06f 0302 	mvn.w	r3, #2
 80049ee:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80049f0:	69fb      	ldr	r3, [r7, #28]
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3720      	adds	r7, #32
 80049f6:	46bd      	mov	sp, r7
 80049f8:	bd80      	pop	{r7, pc}
 80049fa:	bf00      	nop
 80049fc:	e000ed04 	.word	0xe000ed04

08004a00 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b088      	sub	sp, #32
 8004a04:	af00      	add	r7, sp, #0
 8004a06:	60f8      	str	r0, [r7, #12]
 8004a08:	60b9      	str	r1, [r7, #8]
 8004a0a:	607a      	str	r2, [r7, #4]
 8004a0c:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004a12:	2300      	movs	r3, #0
 8004a14:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a16:	f3ef 8305 	mrs	r3, IPSR
 8004a1a:	617b      	str	r3, [r7, #20]
  return(result);
 8004a1c:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d028      	beq.n	8004a74 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d005      	beq.n	8004a34 <osMessageQueueGet+0x34>
 8004a28:	68bb      	ldr	r3, [r7, #8]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d002      	beq.n	8004a34 <osMessageQueueGet+0x34>
 8004a2e:	683b      	ldr	r3, [r7, #0]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d003      	beq.n	8004a3c <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004a34:	f06f 0303 	mvn.w	r3, #3
 8004a38:	61fb      	str	r3, [r7, #28]
 8004a3a:	e037      	b.n	8004aac <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004a40:	f107 0310 	add.w	r3, r7, #16
 8004a44:	461a      	mov	r2, r3
 8004a46:	68b9      	ldr	r1, [r7, #8]
 8004a48:	69b8      	ldr	r0, [r7, #24]
 8004a4a:	f000 fcd7 	bl	80053fc <xQueueReceiveFromISR>
 8004a4e:	4603      	mov	r3, r0
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d003      	beq.n	8004a5c <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004a54:	f06f 0302 	mvn.w	r3, #2
 8004a58:	61fb      	str	r3, [r7, #28]
 8004a5a:	e027      	b.n	8004aac <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004a5c:	693b      	ldr	r3, [r7, #16]
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d024      	beq.n	8004aac <osMessageQueueGet+0xac>
 8004a62:	4b15      	ldr	r3, [pc, #84]	; (8004ab8 <osMessageQueueGet+0xb8>)
 8004a64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a68:	601a      	str	r2, [r3, #0]
 8004a6a:	f3bf 8f4f 	dsb	sy
 8004a6e:	f3bf 8f6f 	isb	sy
 8004a72:	e01b      	b.n	8004aac <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004a74:	69bb      	ldr	r3, [r7, #24]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d002      	beq.n	8004a80 <osMessageQueueGet+0x80>
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d103      	bne.n	8004a88 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004a80:	f06f 0303 	mvn.w	r3, #3
 8004a84:	61fb      	str	r3, [r7, #28]
 8004a86:	e011      	b.n	8004aac <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004a88:	683a      	ldr	r2, [r7, #0]
 8004a8a:	68b9      	ldr	r1, [r7, #8]
 8004a8c:	69b8      	ldr	r0, [r7, #24]
 8004a8e:	f000 fbd5 	bl	800523c <xQueueReceive>
 8004a92:	4603      	mov	r3, r0
 8004a94:	2b01      	cmp	r3, #1
 8004a96:	d009      	beq.n	8004aac <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004a98:	683b      	ldr	r3, [r7, #0]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d003      	beq.n	8004aa6 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004a9e:	f06f 0301 	mvn.w	r3, #1
 8004aa2:	61fb      	str	r3, [r7, #28]
 8004aa4:	e002      	b.n	8004aac <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004aa6:	f06f 0302 	mvn.w	r3, #2
 8004aaa:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004aac:	69fb      	ldr	r3, [r7, #28]
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004abc:	b480      	push	{r7}
 8004abe:	b085      	sub	sp, #20
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	60f8      	str	r0, [r7, #12]
 8004ac4:	60b9      	str	r1, [r7, #8]
 8004ac6:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4a07      	ldr	r2, [pc, #28]	; (8004ae8 <vApplicationGetIdleTaskMemory+0x2c>)
 8004acc:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004ace:	68bb      	ldr	r3, [r7, #8]
 8004ad0:	4a06      	ldr	r2, [pc, #24]	; (8004aec <vApplicationGetIdleTaskMemory+0x30>)
 8004ad2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	2240      	movs	r2, #64	; 0x40
 8004ad8:	601a      	str	r2, [r3, #0]
}
 8004ada:	bf00      	nop
 8004adc:	3714      	adds	r7, #20
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
 8004ae6:	bf00      	nop
 8004ae8:	20000174 	.word	0x20000174
 8004aec:	20000230 	.word	0x20000230

08004af0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004af0:	b480      	push	{r7}
 8004af2:	b085      	sub	sp, #20
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	60f8      	str	r0, [r7, #12]
 8004af8:	60b9      	str	r1, [r7, #8]
 8004afa:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4a07      	ldr	r2, [pc, #28]	; (8004b1c <vApplicationGetTimerTaskMemory+0x2c>)
 8004b00:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	4a06      	ldr	r2, [pc, #24]	; (8004b20 <vApplicationGetTimerTaskMemory+0x30>)
 8004b06:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2280      	movs	r2, #128	; 0x80
 8004b0c:	601a      	str	r2, [r3, #0]
}
 8004b0e:	bf00      	nop
 8004b10:	3714      	adds	r7, #20
 8004b12:	46bd      	mov	sp, r7
 8004b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b18:	4770      	bx	lr
 8004b1a:	bf00      	nop
 8004b1c:	20000330 	.word	0x20000330
 8004b20:	200003ec 	.word	0x200003ec

08004b24 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004b24:	b480      	push	{r7}
 8004b26:	b083      	sub	sp, #12
 8004b28:	af00      	add	r7, sp, #0
 8004b2a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f103 0208 	add.w	r2, r3, #8
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b3c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f103 0208 	add.w	r2, r3, #8
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f103 0208 	add.w	r2, r3, #8
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	2200      	movs	r2, #0
 8004b56:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004b58:	bf00      	nop
 8004b5a:	370c      	adds	r7, #12
 8004b5c:	46bd      	mov	sp, r7
 8004b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b62:	4770      	bx	lr

08004b64 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004b64:	b480      	push	{r7}
 8004b66:	b083      	sub	sp, #12
 8004b68:	af00      	add	r7, sp, #0
 8004b6a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	2200      	movs	r2, #0
 8004b70:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr

08004b7e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004b7e:	b480      	push	{r7}
 8004b80:	b085      	sub	sp, #20
 8004b82:	af00      	add	r7, sp, #0
 8004b84:	6078      	str	r0, [r7, #4]
 8004b86:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	68fa      	ldr	r2, [r7, #12]
 8004b92:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	689a      	ldr	r2, [r3, #8]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	689b      	ldr	r3, [r3, #8]
 8004ba0:	683a      	ldr	r2, [r7, #0]
 8004ba2:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	683a      	ldr	r2, [r7, #0]
 8004ba8:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004baa:	683b      	ldr	r3, [r7, #0]
 8004bac:	687a      	ldr	r2, [r7, #4]
 8004bae:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	1c5a      	adds	r2, r3, #1
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	601a      	str	r2, [r3, #0]
}
 8004bba:	bf00      	nop
 8004bbc:	3714      	adds	r7, #20
 8004bbe:	46bd      	mov	sp, r7
 8004bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc4:	4770      	bx	lr

08004bc6 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004bc6:	b480      	push	{r7}
 8004bc8:	b085      	sub	sp, #20
 8004bca:	af00      	add	r7, sp, #0
 8004bcc:	6078      	str	r0, [r7, #4]
 8004bce:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004bd0:	683b      	ldr	r3, [r7, #0]
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bdc:	d103      	bne.n	8004be6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	691b      	ldr	r3, [r3, #16]
 8004be2:	60fb      	str	r3, [r7, #12]
 8004be4:	e00c      	b.n	8004c00 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	3308      	adds	r3, #8
 8004bea:	60fb      	str	r3, [r7, #12]
 8004bec:	e002      	b.n	8004bf4 <vListInsert+0x2e>
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	60fb      	str	r3, [r7, #12]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	685b      	ldr	r3, [r3, #4]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	68ba      	ldr	r2, [r7, #8]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d2f6      	bcs.n	8004bee <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	685a      	ldr	r2, [r3, #4]
 8004c04:	683b      	ldr	r3, [r7, #0]
 8004c06:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004c08:	683b      	ldr	r3, [r7, #0]
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	683a      	ldr	r2, [r7, #0]
 8004c0e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004c10:	683b      	ldr	r3, [r7, #0]
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	683a      	ldr	r2, [r7, #0]
 8004c1a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004c1c:	683b      	ldr	r3, [r7, #0]
 8004c1e:	687a      	ldr	r2, [r7, #4]
 8004c20:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	1c5a      	adds	r2, r3, #1
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	601a      	str	r2, [r3, #0]
}
 8004c2c:	bf00      	nop
 8004c2e:	3714      	adds	r7, #20
 8004c30:	46bd      	mov	sp, r7
 8004c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c36:	4770      	bx	lr

08004c38 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004c38:	b480      	push	{r7}
 8004c3a:	b085      	sub	sp, #20
 8004c3c:	af00      	add	r7, sp, #0
 8004c3e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	685b      	ldr	r3, [r3, #4]
 8004c4a:	687a      	ldr	r2, [r7, #4]
 8004c4c:	6892      	ldr	r2, [r2, #8]
 8004c4e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	689b      	ldr	r3, [r3, #8]
 8004c54:	687a      	ldr	r2, [r7, #4]
 8004c56:	6852      	ldr	r2, [r2, #4]
 8004c58:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	687a      	ldr	r2, [r7, #4]
 8004c60:	429a      	cmp	r2, r3
 8004c62:	d103      	bne.n	8004c6c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	689a      	ldr	r2, [r3, #8]
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2200      	movs	r2, #0
 8004c70:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	1e5a      	subs	r2, r3, #1
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
}
 8004c80:	4618      	mov	r0, r3
 8004c82:	3714      	adds	r7, #20
 8004c84:	46bd      	mov	sp, r7
 8004c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c8a:	4770      	bx	lr

08004c8c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004c8c:	b580      	push	{r7, lr}
 8004c8e:	b084      	sub	sp, #16
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
 8004c94:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d10a      	bne.n	8004cb6 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004ca0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ca4:	f383 8811 	msr	BASEPRI, r3
 8004ca8:	f3bf 8f6f 	isb	sy
 8004cac:	f3bf 8f4f 	dsb	sy
 8004cb0:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004cb2:	bf00      	nop
 8004cb4:	e7fe      	b.n	8004cb4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004cb6:	f002 f9a5 	bl	8007004 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004cc2:	68f9      	ldr	r1, [r7, #12]
 8004cc4:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cc6:	fb01 f303 	mul.w	r3, r1, r3
 8004cca:	441a      	add	r2, r3
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	681a      	ldr	r2, [r3, #0]
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ce6:	3b01      	subs	r3, #1
 8004ce8:	68f9      	ldr	r1, [r7, #12]
 8004cea:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8004cec:	fb01 f303 	mul.w	r3, r1, r3
 8004cf0:	441a      	add	r2, r3
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	22ff      	movs	r2, #255	; 0xff
 8004cfa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	22ff      	movs	r2, #255	; 0xff
 8004d02:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d114      	bne.n	8004d36 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d01a      	beq.n	8004d4a <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	3310      	adds	r3, #16
 8004d18:	4618      	mov	r0, r3
 8004d1a:	f001 fa55 	bl	80061c8 <xTaskRemoveFromEventList>
 8004d1e:	4603      	mov	r3, r0
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d012      	beq.n	8004d4a <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004d24:	4b0c      	ldr	r3, [pc, #48]	; (8004d58 <xQueueGenericReset+0xcc>)
 8004d26:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004d2a:	601a      	str	r2, [r3, #0]
 8004d2c:	f3bf 8f4f 	dsb	sy
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	e009      	b.n	8004d4a <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	3310      	adds	r3, #16
 8004d3a:	4618      	mov	r0, r3
 8004d3c:	f7ff fef2 	bl	8004b24 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	3324      	adds	r3, #36	; 0x24
 8004d44:	4618      	mov	r0, r3
 8004d46:	f7ff feed 	bl	8004b24 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004d4a:	f002 f98b 	bl	8007064 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004d4e:	2301      	movs	r3, #1
}
 8004d50:	4618      	mov	r0, r3
 8004d52:	3710      	adds	r7, #16
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}
 8004d58:	e000ed04 	.word	0xe000ed04

08004d5c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004d5c:	b580      	push	{r7, lr}
 8004d5e:	b08e      	sub	sp, #56	; 0x38
 8004d60:	af02      	add	r7, sp, #8
 8004d62:	60f8      	str	r0, [r7, #12]
 8004d64:	60b9      	str	r1, [r7, #8]
 8004d66:	607a      	str	r2, [r7, #4]
 8004d68:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	d10a      	bne.n	8004d86 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8004d70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d74:	f383 8811 	msr	BASEPRI, r3
 8004d78:	f3bf 8f6f 	isb	sy
 8004d7c:	f3bf 8f4f 	dsb	sy
 8004d80:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004d82:	bf00      	nop
 8004d84:	e7fe      	b.n	8004d84 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d10a      	bne.n	8004da2 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8004d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d90:	f383 8811 	msr	BASEPRI, r3
 8004d94:	f3bf 8f6f 	isb	sy
 8004d98:	f3bf 8f4f 	dsb	sy
 8004d9c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004d9e:	bf00      	nop
 8004da0:	e7fe      	b.n	8004da0 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d002      	beq.n	8004dae <xQueueGenericCreateStatic+0x52>
 8004da8:	68bb      	ldr	r3, [r7, #8]
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d001      	beq.n	8004db2 <xQueueGenericCreateStatic+0x56>
 8004dae:	2301      	movs	r3, #1
 8004db0:	e000      	b.n	8004db4 <xQueueGenericCreateStatic+0x58>
 8004db2:	2300      	movs	r3, #0
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d10a      	bne.n	8004dce <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8004db8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dbc:	f383 8811 	msr	BASEPRI, r3
 8004dc0:	f3bf 8f6f 	isb	sy
 8004dc4:	f3bf 8f4f 	dsb	sy
 8004dc8:	623b      	str	r3, [r7, #32]
}
 8004dca:	bf00      	nop
 8004dcc:	e7fe      	b.n	8004dcc <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d102      	bne.n	8004dda <xQueueGenericCreateStatic+0x7e>
 8004dd4:	68bb      	ldr	r3, [r7, #8]
 8004dd6:	2b00      	cmp	r3, #0
 8004dd8:	d101      	bne.n	8004dde <xQueueGenericCreateStatic+0x82>
 8004dda:	2301      	movs	r3, #1
 8004ddc:	e000      	b.n	8004de0 <xQueueGenericCreateStatic+0x84>
 8004dde:	2300      	movs	r3, #0
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d10a      	bne.n	8004dfa <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8004de4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004de8:	f383 8811 	msr	BASEPRI, r3
 8004dec:	f3bf 8f6f 	isb	sy
 8004df0:	f3bf 8f4f 	dsb	sy
 8004df4:	61fb      	str	r3, [r7, #28]
}
 8004df6:	bf00      	nop
 8004df8:	e7fe      	b.n	8004df8 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004dfa:	2350      	movs	r3, #80	; 0x50
 8004dfc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	2b50      	cmp	r3, #80	; 0x50
 8004e02:	d00a      	beq.n	8004e1a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8004e04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e08:	f383 8811 	msr	BASEPRI, r3
 8004e0c:	f3bf 8f6f 	isb	sy
 8004e10:	f3bf 8f4f 	dsb	sy
 8004e14:	61bb      	str	r3, [r7, #24]
}
 8004e16:	bf00      	nop
 8004e18:	e7fe      	b.n	8004e18 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004e1a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8004e20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d00d      	beq.n	8004e42 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004e26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e28:	2201      	movs	r2, #1
 8004e2a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004e2e:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8004e32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e34:	9300      	str	r3, [sp, #0]
 8004e36:	4613      	mov	r3, r2
 8004e38:	687a      	ldr	r2, [r7, #4]
 8004e3a:	68b9      	ldr	r1, [r7, #8]
 8004e3c:	68f8      	ldr	r0, [r7, #12]
 8004e3e:	f000 f83f 	bl	8004ec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004e42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3730      	adds	r7, #48	; 0x30
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}

08004e4c <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004e4c:	b580      	push	{r7, lr}
 8004e4e:	b08a      	sub	sp, #40	; 0x28
 8004e50:	af02      	add	r7, sp, #8
 8004e52:	60f8      	str	r0, [r7, #12]
 8004e54:	60b9      	str	r1, [r7, #8]
 8004e56:	4613      	mov	r3, r2
 8004e58:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d10a      	bne.n	8004e76 <xQueueGenericCreate+0x2a>
	__asm volatile
 8004e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e64:	f383 8811 	msr	BASEPRI, r3
 8004e68:	f3bf 8f6f 	isb	sy
 8004e6c:	f3bf 8f4f 	dsb	sy
 8004e70:	613b      	str	r3, [r7, #16]
}
 8004e72:	bf00      	nop
 8004e74:	e7fe      	b.n	8004e74 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	68ba      	ldr	r2, [r7, #8]
 8004e7a:	fb02 f303 	mul.w	r3, r2, r3
 8004e7e:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004e80:	69fb      	ldr	r3, [r7, #28]
 8004e82:	3350      	adds	r3, #80	; 0x50
 8004e84:	4618      	mov	r0, r3
 8004e86:	f002 f9df 	bl	8007248 <pvPortMalloc>
 8004e8a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004e8c:	69bb      	ldr	r3, [r7, #24]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d011      	beq.n	8004eb6 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004e92:	69bb      	ldr	r3, [r7, #24]
 8004e94:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	3350      	adds	r3, #80	; 0x50
 8004e9a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8004e9c:	69bb      	ldr	r3, [r7, #24]
 8004e9e:	2200      	movs	r2, #0
 8004ea0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ea4:	79fa      	ldrb	r2, [r7, #7]
 8004ea6:	69bb      	ldr	r3, [r7, #24]
 8004ea8:	9300      	str	r3, [sp, #0]
 8004eaa:	4613      	mov	r3, r2
 8004eac:	697a      	ldr	r2, [r7, #20]
 8004eae:	68b9      	ldr	r1, [r7, #8]
 8004eb0:	68f8      	ldr	r0, [r7, #12]
 8004eb2:	f000 f805 	bl	8004ec0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004eb6:	69bb      	ldr	r3, [r7, #24]
	}
 8004eb8:	4618      	mov	r0, r3
 8004eba:	3720      	adds	r7, #32
 8004ebc:	46bd      	mov	sp, r7
 8004ebe:	bd80      	pop	{r7, pc}

08004ec0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b084      	sub	sp, #16
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	60f8      	str	r0, [r7, #12]
 8004ec8:	60b9      	str	r1, [r7, #8]
 8004eca:	607a      	str	r2, [r7, #4]
 8004ecc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004ece:	68bb      	ldr	r3, [r7, #8]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004ed4:	69bb      	ldr	r3, [r7, #24]
 8004ed6:	69ba      	ldr	r2, [r7, #24]
 8004ed8:	601a      	str	r2, [r3, #0]
 8004eda:	e002      	b.n	8004ee2 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004edc:	69bb      	ldr	r3, [r7, #24]
 8004ede:	687a      	ldr	r2, [r7, #4]
 8004ee0:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	68fa      	ldr	r2, [r7, #12]
 8004ee6:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004ee8:	69bb      	ldr	r3, [r7, #24]
 8004eea:	68ba      	ldr	r2, [r7, #8]
 8004eec:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004eee:	2101      	movs	r1, #1
 8004ef0:	69b8      	ldr	r0, [r7, #24]
 8004ef2:	f7ff fecb 	bl	8004c8c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004ef6:	69bb      	ldr	r3, [r7, #24]
 8004ef8:	78fa      	ldrb	r2, [r7, #3]
 8004efa:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004efe:	bf00      	nop
 8004f00:	3710      	adds	r7, #16
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004f08:	b580      	push	{r7, lr}
 8004f0a:	b08e      	sub	sp, #56	; 0x38
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	60f8      	str	r0, [r7, #12]
 8004f10:	60b9      	str	r1, [r7, #8]
 8004f12:	607a      	str	r2, [r7, #4]
 8004f14:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004f16:	2300      	movs	r3, #0
 8004f18:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8004f1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d10a      	bne.n	8004f3a <xQueueGenericSend+0x32>
	__asm volatile
 8004f24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f28:	f383 8811 	msr	BASEPRI, r3
 8004f2c:	f3bf 8f6f 	isb	sy
 8004f30:	f3bf 8f4f 	dsb	sy
 8004f34:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8004f36:	bf00      	nop
 8004f38:	e7fe      	b.n	8004f38 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d103      	bne.n	8004f48 <xQueueGenericSend+0x40>
 8004f40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	d101      	bne.n	8004f4c <xQueueGenericSend+0x44>
 8004f48:	2301      	movs	r3, #1
 8004f4a:	e000      	b.n	8004f4e <xQueueGenericSend+0x46>
 8004f4c:	2300      	movs	r3, #0
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d10a      	bne.n	8004f68 <xQueueGenericSend+0x60>
	__asm volatile
 8004f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f56:	f383 8811 	msr	BASEPRI, r3
 8004f5a:	f3bf 8f6f 	isb	sy
 8004f5e:	f3bf 8f4f 	dsb	sy
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004f64:	bf00      	nop
 8004f66:	e7fe      	b.n	8004f66 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	2b02      	cmp	r3, #2
 8004f6c:	d103      	bne.n	8004f76 <xQueueGenericSend+0x6e>
 8004f6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004f70:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f72:	2b01      	cmp	r3, #1
 8004f74:	d101      	bne.n	8004f7a <xQueueGenericSend+0x72>
 8004f76:	2301      	movs	r3, #1
 8004f78:	e000      	b.n	8004f7c <xQueueGenericSend+0x74>
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d10a      	bne.n	8004f96 <xQueueGenericSend+0x8e>
	__asm volatile
 8004f80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f84:	f383 8811 	msr	BASEPRI, r3
 8004f88:	f3bf 8f6f 	isb	sy
 8004f8c:	f3bf 8f4f 	dsb	sy
 8004f90:	623b      	str	r3, [r7, #32]
}
 8004f92:	bf00      	nop
 8004f94:	e7fe      	b.n	8004f94 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004f96:	f001 fad9 	bl	800654c <xTaskGetSchedulerState>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d102      	bne.n	8004fa6 <xQueueGenericSend+0x9e>
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d101      	bne.n	8004faa <xQueueGenericSend+0xa2>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <xQueueGenericSend+0xa4>
 8004faa:	2300      	movs	r3, #0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d10a      	bne.n	8004fc6 <xQueueGenericSend+0xbe>
	__asm volatile
 8004fb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fb4:	f383 8811 	msr	BASEPRI, r3
 8004fb8:	f3bf 8f6f 	isb	sy
 8004fbc:	f3bf 8f4f 	dsb	sy
 8004fc0:	61fb      	str	r3, [r7, #28]
}
 8004fc2:	bf00      	nop
 8004fc4:	e7fe      	b.n	8004fc4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004fc6:	f002 f81d 	bl	8007004 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004fca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fcc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004fce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd2:	429a      	cmp	r2, r3
 8004fd4:	d302      	bcc.n	8004fdc <xQueueGenericSend+0xd4>
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	2b02      	cmp	r3, #2
 8004fda:	d129      	bne.n	8005030 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004fdc:	683a      	ldr	r2, [r7, #0]
 8004fde:	68b9      	ldr	r1, [r7, #8]
 8004fe0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8004fe2:	f000 fa8b 	bl	80054fc <prvCopyDataToQueue>
 8004fe6:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004fe8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d010      	beq.n	8005012 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004ff0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ff2:	3324      	adds	r3, #36	; 0x24
 8004ff4:	4618      	mov	r0, r3
 8004ff6:	f001 f8e7 	bl	80061c8 <xTaskRemoveFromEventList>
 8004ffa:	4603      	mov	r3, r0
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d013      	beq.n	8005028 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005000:	4b3f      	ldr	r3, [pc, #252]	; (8005100 <xQueueGenericSend+0x1f8>)
 8005002:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005006:	601a      	str	r2, [r3, #0]
 8005008:	f3bf 8f4f 	dsb	sy
 800500c:	f3bf 8f6f 	isb	sy
 8005010:	e00a      	b.n	8005028 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005012:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005014:	2b00      	cmp	r3, #0
 8005016:	d007      	beq.n	8005028 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005018:	4b39      	ldr	r3, [pc, #228]	; (8005100 <xQueueGenericSend+0x1f8>)
 800501a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800501e:	601a      	str	r2, [r3, #0]
 8005020:	f3bf 8f4f 	dsb	sy
 8005024:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005028:	f002 f81c 	bl	8007064 <vPortExitCritical>
				return pdPASS;
 800502c:	2301      	movs	r3, #1
 800502e:	e063      	b.n	80050f8 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	2b00      	cmp	r3, #0
 8005034:	d103      	bne.n	800503e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005036:	f002 f815 	bl	8007064 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800503a:	2300      	movs	r3, #0
 800503c:	e05c      	b.n	80050f8 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800503e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005040:	2b00      	cmp	r3, #0
 8005042:	d106      	bne.n	8005052 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005044:	f107 0314 	add.w	r3, r7, #20
 8005048:	4618      	mov	r0, r3
 800504a:	f001 f921 	bl	8006290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800504e:	2301      	movs	r3, #1
 8005050:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005052:	f002 f807 	bl	8007064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005056:	f000 fe8d 	bl	8005d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800505a:	f001 ffd3 	bl	8007004 <vPortEnterCritical>
 800505e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005060:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005064:	b25b      	sxtb	r3, r3
 8005066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800506a:	d103      	bne.n	8005074 <xQueueGenericSend+0x16c>
 800506c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800506e:	2200      	movs	r2, #0
 8005070:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005074:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005076:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800507a:	b25b      	sxtb	r3, r3
 800507c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005080:	d103      	bne.n	800508a <xQueueGenericSend+0x182>
 8005082:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005084:	2200      	movs	r2, #0
 8005086:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800508a:	f001 ffeb 	bl	8007064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800508e:	1d3a      	adds	r2, r7, #4
 8005090:	f107 0314 	add.w	r3, r7, #20
 8005094:	4611      	mov	r1, r2
 8005096:	4618      	mov	r0, r3
 8005098:	f001 f910 	bl	80062bc <xTaskCheckForTimeOut>
 800509c:	4603      	mov	r3, r0
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d124      	bne.n	80050ec <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80050a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050a4:	f000 fb22 	bl	80056ec <prvIsQueueFull>
 80050a8:	4603      	mov	r3, r0
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d018      	beq.n	80050e0 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80050ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80050b0:	3310      	adds	r3, #16
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	4611      	mov	r1, r2
 80050b6:	4618      	mov	r0, r3
 80050b8:	f001 f836 	bl	8006128 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80050bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050be:	f000 faad 	bl	800561c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80050c2:	f000 fe65 	bl	8005d90 <xTaskResumeAll>
 80050c6:	4603      	mov	r3, r0
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	f47f af7c 	bne.w	8004fc6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80050ce:	4b0c      	ldr	r3, [pc, #48]	; (8005100 <xQueueGenericSend+0x1f8>)
 80050d0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80050d4:	601a      	str	r2, [r3, #0]
 80050d6:	f3bf 8f4f 	dsb	sy
 80050da:	f3bf 8f6f 	isb	sy
 80050de:	e772      	b.n	8004fc6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80050e0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050e2:	f000 fa9b 	bl	800561c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80050e6:	f000 fe53 	bl	8005d90 <xTaskResumeAll>
 80050ea:	e76c      	b.n	8004fc6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80050ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80050ee:	f000 fa95 	bl	800561c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80050f2:	f000 fe4d 	bl	8005d90 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80050f6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3738      	adds	r7, #56	; 0x38
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}
 8005100:	e000ed04 	.word	0xe000ed04

08005104 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b090      	sub	sp, #64	; 0x40
 8005108:	af00      	add	r7, sp, #0
 800510a:	60f8      	str	r0, [r7, #12]
 800510c:	60b9      	str	r1, [r7, #8]
 800510e:	607a      	str	r2, [r7, #4]
 8005110:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005116:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005118:	2b00      	cmp	r3, #0
 800511a:	d10a      	bne.n	8005132 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800511c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005120:	f383 8811 	msr	BASEPRI, r3
 8005124:	f3bf 8f6f 	isb	sy
 8005128:	f3bf 8f4f 	dsb	sy
 800512c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800512e:	bf00      	nop
 8005130:	e7fe      	b.n	8005130 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	2b00      	cmp	r3, #0
 8005136:	d103      	bne.n	8005140 <xQueueGenericSendFromISR+0x3c>
 8005138:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	2b00      	cmp	r3, #0
 800513e:	d101      	bne.n	8005144 <xQueueGenericSendFromISR+0x40>
 8005140:	2301      	movs	r3, #1
 8005142:	e000      	b.n	8005146 <xQueueGenericSendFromISR+0x42>
 8005144:	2300      	movs	r3, #0
 8005146:	2b00      	cmp	r3, #0
 8005148:	d10a      	bne.n	8005160 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800514a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800514e:	f383 8811 	msr	BASEPRI, r3
 8005152:	f3bf 8f6f 	isb	sy
 8005156:	f3bf 8f4f 	dsb	sy
 800515a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800515c:	bf00      	nop
 800515e:	e7fe      	b.n	800515e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005160:	683b      	ldr	r3, [r7, #0]
 8005162:	2b02      	cmp	r3, #2
 8005164:	d103      	bne.n	800516e <xQueueGenericSendFromISR+0x6a>
 8005166:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005168:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800516a:	2b01      	cmp	r3, #1
 800516c:	d101      	bne.n	8005172 <xQueueGenericSendFromISR+0x6e>
 800516e:	2301      	movs	r3, #1
 8005170:	e000      	b.n	8005174 <xQueueGenericSendFromISR+0x70>
 8005172:	2300      	movs	r3, #0
 8005174:	2b00      	cmp	r3, #0
 8005176:	d10a      	bne.n	800518e <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005178:	f04f 0350 	mov.w	r3, #80	; 0x50
 800517c:	f383 8811 	msr	BASEPRI, r3
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	f3bf 8f4f 	dsb	sy
 8005188:	623b      	str	r3, [r7, #32]
}
 800518a:	bf00      	nop
 800518c:	e7fe      	b.n	800518c <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800518e:	f002 f81b 	bl	80071c8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005192:	f3ef 8211 	mrs	r2, BASEPRI
 8005196:	f04f 0350 	mov.w	r3, #80	; 0x50
 800519a:	f383 8811 	msr	BASEPRI, r3
 800519e:	f3bf 8f6f 	isb	sy
 80051a2:	f3bf 8f4f 	dsb	sy
 80051a6:	61fa      	str	r2, [r7, #28]
 80051a8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80051aa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80051ac:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80051ae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80051b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80051b6:	429a      	cmp	r2, r3
 80051b8:	d302      	bcc.n	80051c0 <xQueueGenericSendFromISR+0xbc>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b02      	cmp	r3, #2
 80051be:	d12f      	bne.n	8005220 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80051c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80051c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ce:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80051d0:	683a      	ldr	r2, [r7, #0]
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80051d6:	f000 f991 	bl	80054fc <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80051da:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80051de:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80051e2:	d112      	bne.n	800520a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80051e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d016      	beq.n	800521a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	3324      	adds	r3, #36	; 0x24
 80051f0:	4618      	mov	r0, r3
 80051f2:	f000 ffe9 	bl	80061c8 <xTaskRemoveFromEventList>
 80051f6:	4603      	mov	r3, r0
 80051f8:	2b00      	cmp	r3, #0
 80051fa:	d00e      	beq.n	800521a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80051fc:	687b      	ldr	r3, [r7, #4]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d00b      	beq.n	800521a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	2201      	movs	r2, #1
 8005206:	601a      	str	r2, [r3, #0]
 8005208:	e007      	b.n	800521a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800520a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800520e:	3301      	adds	r3, #1
 8005210:	b2db      	uxtb	r3, r3
 8005212:	b25a      	sxtb	r2, r3
 8005214:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005216:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800521a:	2301      	movs	r3, #1
 800521c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800521e:	e001      	b.n	8005224 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005220:	2300      	movs	r3, #0
 8005222:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005224:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005226:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005228:	697b      	ldr	r3, [r7, #20]
 800522a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800522e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005230:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005232:	4618      	mov	r0, r3
 8005234:	3740      	adds	r7, #64	; 0x40
 8005236:	46bd      	mov	sp, r7
 8005238:	bd80      	pop	{r7, pc}
	...

0800523c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800523c:	b580      	push	{r7, lr}
 800523e:	b08c      	sub	sp, #48	; 0x30
 8005240:	af00      	add	r7, sp, #0
 8005242:	60f8      	str	r0, [r7, #12]
 8005244:	60b9      	str	r1, [r7, #8]
 8005246:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005248:	2300      	movs	r3, #0
 800524a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005250:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005252:	2b00      	cmp	r3, #0
 8005254:	d10a      	bne.n	800526c <xQueueReceive+0x30>
	__asm volatile
 8005256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525a:	f383 8811 	msr	BASEPRI, r3
 800525e:	f3bf 8f6f 	isb	sy
 8005262:	f3bf 8f4f 	dsb	sy
 8005266:	623b      	str	r3, [r7, #32]
}
 8005268:	bf00      	nop
 800526a:	e7fe      	b.n	800526a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800526c:	68bb      	ldr	r3, [r7, #8]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d103      	bne.n	800527a <xQueueReceive+0x3e>
 8005272:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <xQueueReceive+0x42>
 800527a:	2301      	movs	r3, #1
 800527c:	e000      	b.n	8005280 <xQueueReceive+0x44>
 800527e:	2300      	movs	r3, #0
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10a      	bne.n	800529a <xQueueReceive+0x5e>
	__asm volatile
 8005284:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005288:	f383 8811 	msr	BASEPRI, r3
 800528c:	f3bf 8f6f 	isb	sy
 8005290:	f3bf 8f4f 	dsb	sy
 8005294:	61fb      	str	r3, [r7, #28]
}
 8005296:	bf00      	nop
 8005298:	e7fe      	b.n	8005298 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800529a:	f001 f957 	bl	800654c <xTaskGetSchedulerState>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d102      	bne.n	80052aa <xQueueReceive+0x6e>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	2b00      	cmp	r3, #0
 80052a8:	d101      	bne.n	80052ae <xQueueReceive+0x72>
 80052aa:	2301      	movs	r3, #1
 80052ac:	e000      	b.n	80052b0 <xQueueReceive+0x74>
 80052ae:	2300      	movs	r3, #0
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d10a      	bne.n	80052ca <xQueueReceive+0x8e>
	__asm volatile
 80052b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052b8:	f383 8811 	msr	BASEPRI, r3
 80052bc:	f3bf 8f6f 	isb	sy
 80052c0:	f3bf 8f4f 	dsb	sy
 80052c4:	61bb      	str	r3, [r7, #24]
}
 80052c6:	bf00      	nop
 80052c8:	e7fe      	b.n	80052c8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80052ca:	f001 fe9b 	bl	8007004 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80052ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80052d2:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80052d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d01f      	beq.n	800531a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80052da:	68b9      	ldr	r1, [r7, #8]
 80052dc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80052de:	f000 f977 	bl	80055d0 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80052e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052e4:	1e5a      	subs	r2, r3, #1
 80052e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052e8:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	2b00      	cmp	r3, #0
 80052f0:	d00f      	beq.n	8005312 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80052f4:	3310      	adds	r3, #16
 80052f6:	4618      	mov	r0, r3
 80052f8:	f000 ff66 	bl	80061c8 <xTaskRemoveFromEventList>
 80052fc:	4603      	mov	r3, r0
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d007      	beq.n	8005312 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005302:	4b3d      	ldr	r3, [pc, #244]	; (80053f8 <xQueueReceive+0x1bc>)
 8005304:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005308:	601a      	str	r2, [r3, #0]
 800530a:	f3bf 8f4f 	dsb	sy
 800530e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005312:	f001 fea7 	bl	8007064 <vPortExitCritical>
				return pdPASS;
 8005316:	2301      	movs	r3, #1
 8005318:	e069      	b.n	80053ee <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d103      	bne.n	8005328 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005320:	f001 fea0 	bl	8007064 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005324:	2300      	movs	r3, #0
 8005326:	e062      	b.n	80053ee <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800532a:	2b00      	cmp	r3, #0
 800532c:	d106      	bne.n	800533c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800532e:	f107 0310 	add.w	r3, r7, #16
 8005332:	4618      	mov	r0, r3
 8005334:	f000 ffac 	bl	8006290 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005338:	2301      	movs	r3, #1
 800533a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800533c:	f001 fe92 	bl	8007064 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005340:	f000 fd18 	bl	8005d74 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005344:	f001 fe5e 	bl	8007004 <vPortEnterCritical>
 8005348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800534a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800534e:	b25b      	sxtb	r3, r3
 8005350:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005354:	d103      	bne.n	800535e <xQueueReceive+0x122>
 8005356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005358:	2200      	movs	r2, #0
 800535a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800535e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005360:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005364:	b25b      	sxtb	r3, r3
 8005366:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800536a:	d103      	bne.n	8005374 <xQueueReceive+0x138>
 800536c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800536e:	2200      	movs	r2, #0
 8005370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005374:	f001 fe76 	bl	8007064 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005378:	1d3a      	adds	r2, r7, #4
 800537a:	f107 0310 	add.w	r3, r7, #16
 800537e:	4611      	mov	r1, r2
 8005380:	4618      	mov	r0, r3
 8005382:	f000 ff9b 	bl	80062bc <xTaskCheckForTimeOut>
 8005386:	4603      	mov	r3, r0
 8005388:	2b00      	cmp	r3, #0
 800538a:	d123      	bne.n	80053d4 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800538c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800538e:	f000 f997 	bl	80056c0 <prvIsQueueEmpty>
 8005392:	4603      	mov	r3, r0
 8005394:	2b00      	cmp	r3, #0
 8005396:	d017      	beq.n	80053c8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005398:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800539a:	3324      	adds	r3, #36	; 0x24
 800539c:	687a      	ldr	r2, [r7, #4]
 800539e:	4611      	mov	r1, r2
 80053a0:	4618      	mov	r0, r3
 80053a2:	f000 fec1 	bl	8006128 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80053a6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053a8:	f000 f938 	bl	800561c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80053ac:	f000 fcf0 	bl	8005d90 <xTaskResumeAll>
 80053b0:	4603      	mov	r3, r0
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d189      	bne.n	80052ca <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80053b6:	4b10      	ldr	r3, [pc, #64]	; (80053f8 <xQueueReceive+0x1bc>)
 80053b8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80053bc:	601a      	str	r2, [r3, #0]
 80053be:	f3bf 8f4f 	dsb	sy
 80053c2:	f3bf 8f6f 	isb	sy
 80053c6:	e780      	b.n	80052ca <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80053c8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053ca:	f000 f927 	bl	800561c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80053ce:	f000 fcdf 	bl	8005d90 <xTaskResumeAll>
 80053d2:	e77a      	b.n	80052ca <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80053d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053d6:	f000 f921 	bl	800561c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80053da:	f000 fcd9 	bl	8005d90 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80053de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80053e0:	f000 f96e 	bl	80056c0 <prvIsQueueEmpty>
 80053e4:	4603      	mov	r3, r0
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f43f af6f 	beq.w	80052ca <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80053ec:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80053ee:	4618      	mov	r0, r3
 80053f0:	3730      	adds	r7, #48	; 0x30
 80053f2:	46bd      	mov	sp, r7
 80053f4:	bd80      	pop	{r7, pc}
 80053f6:	bf00      	nop
 80053f8:	e000ed04 	.word	0xe000ed04

080053fc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b08e      	sub	sp, #56	; 0x38
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800540c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800540e:	2b00      	cmp	r3, #0
 8005410:	d10a      	bne.n	8005428 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	623b      	str	r3, [r7, #32]
}
 8005424:	bf00      	nop
 8005426:	e7fe      	b.n	8005426 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d103      	bne.n	8005436 <xQueueReceiveFromISR+0x3a>
 800542e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005432:	2b00      	cmp	r3, #0
 8005434:	d101      	bne.n	800543a <xQueueReceiveFromISR+0x3e>
 8005436:	2301      	movs	r3, #1
 8005438:	e000      	b.n	800543c <xQueueReceiveFromISR+0x40>
 800543a:	2300      	movs	r3, #0
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10a      	bne.n	8005456 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	61fb      	str	r3, [r7, #28]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005456:	f001 feb7 	bl	80071c8 <vPortValidateInterruptPriority>
	__asm volatile
 800545a:	f3ef 8211 	mrs	r2, BASEPRI
 800545e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	61ba      	str	r2, [r7, #24]
 8005470:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005472:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005474:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005476:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005478:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800547a:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800547c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800547e:	2b00      	cmp	r3, #0
 8005480:	d02f      	beq.n	80054e2 <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005482:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005484:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005488:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800548c:	68b9      	ldr	r1, [r7, #8]
 800548e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005490:	f000 f89e 	bl	80055d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005496:	1e5a      	subs	r2, r3, #1
 8005498:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800549a:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800549c:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80054a0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054a4:	d112      	bne.n	80054cc <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80054a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a8:	691b      	ldr	r3, [r3, #16]
 80054aa:	2b00      	cmp	r3, #0
 80054ac:	d016      	beq.n	80054dc <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80054ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054b0:	3310      	adds	r3, #16
 80054b2:	4618      	mov	r0, r3
 80054b4:	f000 fe88 	bl	80061c8 <xTaskRemoveFromEventList>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d00e      	beq.n	80054dc <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d00b      	beq.n	80054dc <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2201      	movs	r2, #1
 80054c8:	601a      	str	r2, [r3, #0]
 80054ca:	e007      	b.n	80054dc <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80054cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80054d0:	3301      	adds	r3, #1
 80054d2:	b2db      	uxtb	r3, r3
 80054d4:	b25a      	sxtb	r2, r3
 80054d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80054dc:	2301      	movs	r3, #1
 80054de:	637b      	str	r3, [r7, #52]	; 0x34
 80054e0:	e001      	b.n	80054e6 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80054e2:	2300      	movs	r3, #0
 80054e4:	637b      	str	r3, [r7, #52]	; 0x34
 80054e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80054e8:	613b      	str	r3, [r7, #16]
	__asm volatile
 80054ea:	693b      	ldr	r3, [r7, #16]
 80054ec:	f383 8811 	msr	BASEPRI, r3
}
 80054f0:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80054f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80054f4:	4618      	mov	r0, r3
 80054f6:	3738      	adds	r7, #56	; 0x38
 80054f8:	46bd      	mov	sp, r7
 80054fa:	bd80      	pop	{r7, pc}

080054fc <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80054fc:	b580      	push	{r7, lr}
 80054fe:	b086      	sub	sp, #24
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005508:	2300      	movs	r3, #0
 800550a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005510:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005516:	2b00      	cmp	r3, #0
 8005518:	d10d      	bne.n	8005536 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	681b      	ldr	r3, [r3, #0]
 800551e:	2b00      	cmp	r3, #0
 8005520:	d14d      	bne.n	80055be <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	689b      	ldr	r3, [r3, #8]
 8005526:	4618      	mov	r0, r3
 8005528:	f001 f82e 	bl	8006588 <xTaskPriorityDisinherit>
 800552c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800552e:	68fb      	ldr	r3, [r7, #12]
 8005530:	2200      	movs	r2, #0
 8005532:	609a      	str	r2, [r3, #8]
 8005534:	e043      	b.n	80055be <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d119      	bne.n	8005570 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	6858      	ldr	r0, [r3, #4]
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005544:	461a      	mov	r2, r3
 8005546:	68b9      	ldr	r1, [r7, #8]
 8005548:	f002 f98b 	bl	8007862 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	685a      	ldr	r2, [r3, #4]
 8005550:	68fb      	ldr	r3, [r7, #12]
 8005552:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005554:	441a      	add	r2, r3
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	685a      	ldr	r2, [r3, #4]
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	429a      	cmp	r2, r3
 8005564:	d32b      	bcc.n	80055be <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005566:	68fb      	ldr	r3, [r7, #12]
 8005568:	681a      	ldr	r2, [r3, #0]
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	605a      	str	r2, [r3, #4]
 800556e:	e026      	b.n	80055be <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	68d8      	ldr	r0, [r3, #12]
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005578:	461a      	mov	r2, r3
 800557a:	68b9      	ldr	r1, [r7, #8]
 800557c:	f002 f971 	bl	8007862 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	68da      	ldr	r2, [r3, #12]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005588:	425b      	negs	r3, r3
 800558a:	441a      	add	r2, r3
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	68da      	ldr	r2, [r3, #12]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	429a      	cmp	r2, r3
 800559a:	d207      	bcs.n	80055ac <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	689a      	ldr	r2, [r3, #8]
 80055a0:	68fb      	ldr	r3, [r7, #12]
 80055a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a4:	425b      	negs	r3, r3
 80055a6:	441a      	add	r2, r3
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d105      	bne.n	80055be <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d002      	beq.n	80055be <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80055b8:	693b      	ldr	r3, [r7, #16]
 80055ba:	3b01      	subs	r3, #1
 80055bc:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80055be:	693b      	ldr	r3, [r7, #16]
 80055c0:	1c5a      	adds	r2, r3, #1
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80055c6:	697b      	ldr	r3, [r7, #20]
}
 80055c8:	4618      	mov	r0, r3
 80055ca:	3718      	adds	r7, #24
 80055cc:	46bd      	mov	sp, r7
 80055ce:	bd80      	pop	{r7, pc}

080055d0 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b082      	sub	sp, #8
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
 80055d8:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d018      	beq.n	8005614 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	68da      	ldr	r2, [r3, #12]
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ea:	441a      	add	r2, r3
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	68da      	ldr	r2, [r3, #12]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	689b      	ldr	r3, [r3, #8]
 80055f8:	429a      	cmp	r2, r3
 80055fa:	d303      	bcc.n	8005604 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681a      	ldr	r2, [r3, #0]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	68d9      	ldr	r1, [r3, #12]
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560c:	461a      	mov	r2, r3
 800560e:	6838      	ldr	r0, [r7, #0]
 8005610:	f002 f927 	bl	8007862 <memcpy>
	}
}
 8005614:	bf00      	nop
 8005616:	3708      	adds	r7, #8
 8005618:	46bd      	mov	sp, r7
 800561a:	bd80      	pop	{r7, pc}

0800561c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800561c:	b580      	push	{r7, lr}
 800561e:	b084      	sub	sp, #16
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005624:	f001 fcee 	bl	8007004 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800562e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005630:	e011      	b.n	8005656 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005636:	2b00      	cmp	r3, #0
 8005638:	d012      	beq.n	8005660 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	3324      	adds	r3, #36	; 0x24
 800563e:	4618      	mov	r0, r3
 8005640:	f000 fdc2 	bl	80061c8 <xTaskRemoveFromEventList>
 8005644:	4603      	mov	r3, r0
 8005646:	2b00      	cmp	r3, #0
 8005648:	d001      	beq.n	800564e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800564a:	f000 fe99 	bl	8006380 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800564e:	7bfb      	ldrb	r3, [r7, #15]
 8005650:	3b01      	subs	r3, #1
 8005652:	b2db      	uxtb	r3, r3
 8005654:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005656:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800565a:	2b00      	cmp	r3, #0
 800565c:	dce9      	bgt.n	8005632 <prvUnlockQueue+0x16>
 800565e:	e000      	b.n	8005662 <prvUnlockQueue+0x46>
					break;
 8005660:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	22ff      	movs	r2, #255	; 0xff
 8005666:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800566a:	f001 fcfb 	bl	8007064 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800566e:	f001 fcc9 	bl	8007004 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005678:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800567a:	e011      	b.n	80056a0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	2b00      	cmp	r3, #0
 8005682:	d012      	beq.n	80056aa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	3310      	adds	r3, #16
 8005688:	4618      	mov	r0, r3
 800568a:	f000 fd9d 	bl	80061c8 <xTaskRemoveFromEventList>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d001      	beq.n	8005698 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005694:	f000 fe74 	bl	8006380 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005698:	7bbb      	ldrb	r3, [r7, #14]
 800569a:	3b01      	subs	r3, #1
 800569c:	b2db      	uxtb	r3, r3
 800569e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80056a0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	dce9      	bgt.n	800567c <prvUnlockQueue+0x60>
 80056a8:	e000      	b.n	80056ac <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80056aa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	22ff      	movs	r2, #255	; 0xff
 80056b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80056b4:	f001 fcd6 	bl	8007064 <vPortExitCritical>
}
 80056b8:	bf00      	nop
 80056ba:	3710      	adds	r7, #16
 80056bc:	46bd      	mov	sp, r7
 80056be:	bd80      	pop	{r7, pc}

080056c0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80056c0:	b580      	push	{r7, lr}
 80056c2:	b084      	sub	sp, #16
 80056c4:	af00      	add	r7, sp, #0
 80056c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056c8:	f001 fc9c 	bl	8007004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056d0:	2b00      	cmp	r3, #0
 80056d2:	d102      	bne.n	80056da <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80056d4:	2301      	movs	r3, #1
 80056d6:	60fb      	str	r3, [r7, #12]
 80056d8:	e001      	b.n	80056de <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80056da:	2300      	movs	r3, #0
 80056dc:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80056de:	f001 fcc1 	bl	8007064 <vPortExitCritical>

	return xReturn;
 80056e2:	68fb      	ldr	r3, [r7, #12]
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3710      	adds	r7, #16
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b084      	sub	sp, #16
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80056f4:	f001 fc86 	bl	8007004 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005700:	429a      	cmp	r2, r3
 8005702:	d102      	bne.n	800570a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005704:	2301      	movs	r3, #1
 8005706:	60fb      	str	r3, [r7, #12]
 8005708:	e001      	b.n	800570e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800570a:	2300      	movs	r3, #0
 800570c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800570e:	f001 fca9 	bl	8007064 <vPortExitCritical>

	return xReturn;
 8005712:	68fb      	ldr	r3, [r7, #12]
}
 8005714:	4618      	mov	r0, r3
 8005716:	3710      	adds	r7, #16
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800571c:	b480      	push	{r7}
 800571e:	b085      	sub	sp, #20
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005726:	2300      	movs	r3, #0
 8005728:	60fb      	str	r3, [r7, #12]
 800572a:	e014      	b.n	8005756 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800572c:	4a0f      	ldr	r2, [pc, #60]	; (800576c <vQueueAddToRegistry+0x50>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d10b      	bne.n	8005750 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005738:	490c      	ldr	r1, [pc, #48]	; (800576c <vQueueAddToRegistry+0x50>)
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	683a      	ldr	r2, [r7, #0]
 800573e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005742:	4a0a      	ldr	r2, [pc, #40]	; (800576c <vQueueAddToRegistry+0x50>)
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	00db      	lsls	r3, r3, #3
 8005748:	4413      	add	r3, r2
 800574a:	687a      	ldr	r2, [r7, #4]
 800574c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800574e:	e006      	b.n	800575e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	3301      	adds	r3, #1
 8005754:	60fb      	str	r3, [r7, #12]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	2b07      	cmp	r3, #7
 800575a:	d9e7      	bls.n	800572c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800575c:	bf00      	nop
 800575e:	bf00      	nop
 8005760:	3714      	adds	r7, #20
 8005762:	46bd      	mov	sp, r7
 8005764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005768:	4770      	bx	lr
 800576a:	bf00      	nop
 800576c:	200005ec 	.word	0x200005ec

08005770 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005780:	f001 fc40 	bl	8007004 <vPortEnterCritical>
 8005784:	697b      	ldr	r3, [r7, #20]
 8005786:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800578a:	b25b      	sxtb	r3, r3
 800578c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005790:	d103      	bne.n	800579a <vQueueWaitForMessageRestricted+0x2a>
 8005792:	697b      	ldr	r3, [r7, #20]
 8005794:	2200      	movs	r2, #0
 8005796:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579a:	697b      	ldr	r3, [r7, #20]
 800579c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80057a0:	b25b      	sxtb	r3, r3
 80057a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80057a6:	d103      	bne.n	80057b0 <vQueueWaitForMessageRestricted+0x40>
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	2200      	movs	r2, #0
 80057ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057b0:	f001 fc58 	bl	8007064 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d106      	bne.n	80057ca <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80057bc:	697b      	ldr	r3, [r7, #20]
 80057be:	3324      	adds	r3, #36	; 0x24
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	68b9      	ldr	r1, [r7, #8]
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fcd3 	bl	8006170 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80057ca:	6978      	ldr	r0, [r7, #20]
 80057cc:	f7ff ff26 	bl	800561c <prvUnlockQueue>
	}
 80057d0:	bf00      	nop
 80057d2:	3718      	adds	r7, #24
 80057d4:	46bd      	mov	sp, r7
 80057d6:	bd80      	pop	{r7, pc}

080057d8 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80057d8:	b580      	push	{r7, lr}
 80057da:	b08e      	sub	sp, #56	; 0x38
 80057dc:	af04      	add	r7, sp, #16
 80057de:	60f8      	str	r0, [r7, #12]
 80057e0:	60b9      	str	r1, [r7, #8]
 80057e2:	607a      	str	r2, [r7, #4]
 80057e4:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80057e6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057e8:	2b00      	cmp	r3, #0
 80057ea:	d10a      	bne.n	8005802 <xTaskCreateStatic+0x2a>
	__asm volatile
 80057ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057f0:	f383 8811 	msr	BASEPRI, r3
 80057f4:	f3bf 8f6f 	isb	sy
 80057f8:	f3bf 8f4f 	dsb	sy
 80057fc:	623b      	str	r3, [r7, #32]
}
 80057fe:	bf00      	nop
 8005800:	e7fe      	b.n	8005800 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005802:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <xTaskCreateStatic+0x46>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	61fb      	str	r3, [r7, #28]
}
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800581e:	23bc      	movs	r3, #188	; 0xbc
 8005820:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005822:	693b      	ldr	r3, [r7, #16]
 8005824:	2bbc      	cmp	r3, #188	; 0xbc
 8005826:	d00a      	beq.n	800583e <xTaskCreateStatic+0x66>
	__asm volatile
 8005828:	f04f 0350 	mov.w	r3, #80	; 0x50
 800582c:	f383 8811 	msr	BASEPRI, r3
 8005830:	f3bf 8f6f 	isb	sy
 8005834:	f3bf 8f4f 	dsb	sy
 8005838:	61bb      	str	r3, [r7, #24]
}
 800583a:	bf00      	nop
 800583c:	e7fe      	b.n	800583c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800583e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005840:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005842:	2b00      	cmp	r3, #0
 8005844:	d01e      	beq.n	8005884 <xTaskCreateStatic+0xac>
 8005846:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005848:	2b00      	cmp	r3, #0
 800584a:	d01b      	beq.n	8005884 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800584c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800584e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005850:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005852:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005854:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005858:	2202      	movs	r2, #2
 800585a:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800585e:	2300      	movs	r3, #0
 8005860:	9303      	str	r3, [sp, #12]
 8005862:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005864:	9302      	str	r3, [sp, #8]
 8005866:	f107 0314 	add.w	r3, r7, #20
 800586a:	9301      	str	r3, [sp, #4]
 800586c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586e:	9300      	str	r3, [sp, #0]
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	68b9      	ldr	r1, [r7, #8]
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 f850 	bl	800591c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800587c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800587e:	f000 f8f3 	bl	8005a68 <prvAddNewTaskToReadyList>
 8005882:	e001      	b.n	8005888 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005884:	2300      	movs	r3, #0
 8005886:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005888:	697b      	ldr	r3, [r7, #20]
	}
 800588a:	4618      	mov	r0, r3
 800588c:	3728      	adds	r7, #40	; 0x28
 800588e:	46bd      	mov	sp, r7
 8005890:	bd80      	pop	{r7, pc}

08005892 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005892:	b580      	push	{r7, lr}
 8005894:	b08c      	sub	sp, #48	; 0x30
 8005896:	af04      	add	r7, sp, #16
 8005898:	60f8      	str	r0, [r7, #12]
 800589a:	60b9      	str	r1, [r7, #8]
 800589c:	603b      	str	r3, [r7, #0]
 800589e:	4613      	mov	r3, r2
 80058a0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80058a2:	88fb      	ldrh	r3, [r7, #6]
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4618      	mov	r0, r3
 80058a8:	f001 fcce 	bl	8007248 <pvPortMalloc>
 80058ac:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80058ae:	697b      	ldr	r3, [r7, #20]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00e      	beq.n	80058d2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80058b4:	20bc      	movs	r0, #188	; 0xbc
 80058b6:	f001 fcc7 	bl	8007248 <pvPortMalloc>
 80058ba:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80058bc:	69fb      	ldr	r3, [r7, #28]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80058c2:	69fb      	ldr	r3, [r7, #28]
 80058c4:	697a      	ldr	r2, [r7, #20]
 80058c6:	631a      	str	r2, [r3, #48]	; 0x30
 80058c8:	e005      	b.n	80058d6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80058ca:	6978      	ldr	r0, [r7, #20]
 80058cc:	f001 fd88 	bl	80073e0 <vPortFree>
 80058d0:	e001      	b.n	80058d6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80058d2:	2300      	movs	r3, #0
 80058d4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80058d6:	69fb      	ldr	r3, [r7, #28]
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d017      	beq.n	800590c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80058dc:	69fb      	ldr	r3, [r7, #28]
 80058de:	2200      	movs	r2, #0
 80058e0:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80058e4:	88fa      	ldrh	r2, [r7, #6]
 80058e6:	2300      	movs	r3, #0
 80058e8:	9303      	str	r3, [sp, #12]
 80058ea:	69fb      	ldr	r3, [r7, #28]
 80058ec:	9302      	str	r3, [sp, #8]
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	9301      	str	r3, [sp, #4]
 80058f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058f4:	9300      	str	r3, [sp, #0]
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	68b9      	ldr	r1, [r7, #8]
 80058fa:	68f8      	ldr	r0, [r7, #12]
 80058fc:	f000 f80e 	bl	800591c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005900:	69f8      	ldr	r0, [r7, #28]
 8005902:	f000 f8b1 	bl	8005a68 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005906:	2301      	movs	r3, #1
 8005908:	61bb      	str	r3, [r7, #24]
 800590a:	e002      	b.n	8005912 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800590c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005910:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005912:	69bb      	ldr	r3, [r7, #24]
	}
 8005914:	4618      	mov	r0, r3
 8005916:	3720      	adds	r7, #32
 8005918:	46bd      	mov	sp, r7
 800591a:	bd80      	pop	{r7, pc}

0800591c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af00      	add	r7, sp, #0
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
 8005928:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800592a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800592c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	009b      	lsls	r3, r3, #2
 8005932:	461a      	mov	r2, r3
 8005934:	21a5      	movs	r1, #165	; 0xa5
 8005936:	f001 ffa2 	bl	800787e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800593a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005944:	3b01      	subs	r3, #1
 8005946:	009b      	lsls	r3, r3, #2
 8005948:	4413      	add	r3, r2
 800594a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800594c:	69bb      	ldr	r3, [r7, #24]
 800594e:	f023 0307 	bic.w	r3, r3, #7
 8005952:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005954:	69bb      	ldr	r3, [r7, #24]
 8005956:	f003 0307 	and.w	r3, r3, #7
 800595a:	2b00      	cmp	r3, #0
 800595c:	d00a      	beq.n	8005974 <prvInitialiseNewTask+0x58>
	__asm volatile
 800595e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005962:	f383 8811 	msr	BASEPRI, r3
 8005966:	f3bf 8f6f 	isb	sy
 800596a:	f3bf 8f4f 	dsb	sy
 800596e:	617b      	str	r3, [r7, #20]
}
 8005970:	bf00      	nop
 8005972:	e7fe      	b.n	8005972 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005974:	68bb      	ldr	r3, [r7, #8]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01f      	beq.n	80059ba <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800597a:	2300      	movs	r3, #0
 800597c:	61fb      	str	r3, [r7, #28]
 800597e:	e012      	b.n	80059a6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005980:	68ba      	ldr	r2, [r7, #8]
 8005982:	69fb      	ldr	r3, [r7, #28]
 8005984:	4413      	add	r3, r2
 8005986:	7819      	ldrb	r1, [r3, #0]
 8005988:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800598a:	69fb      	ldr	r3, [r7, #28]
 800598c:	4413      	add	r3, r2
 800598e:	3334      	adds	r3, #52	; 0x34
 8005990:	460a      	mov	r2, r1
 8005992:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005994:	68ba      	ldr	r2, [r7, #8]
 8005996:	69fb      	ldr	r3, [r7, #28]
 8005998:	4413      	add	r3, r2
 800599a:	781b      	ldrb	r3, [r3, #0]
 800599c:	2b00      	cmp	r3, #0
 800599e:	d006      	beq.n	80059ae <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80059a0:	69fb      	ldr	r3, [r7, #28]
 80059a2:	3301      	adds	r3, #1
 80059a4:	61fb      	str	r3, [r7, #28]
 80059a6:	69fb      	ldr	r3, [r7, #28]
 80059a8:	2b0f      	cmp	r3, #15
 80059aa:	d9e9      	bls.n	8005980 <prvInitialiseNewTask+0x64>
 80059ac:	e000      	b.n	80059b0 <prvInitialiseNewTask+0x94>
			{
				break;
 80059ae:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80059b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b2:	2200      	movs	r2, #0
 80059b4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b8:	e003      	b.n	80059c2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80059ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059bc:	2200      	movs	r2, #0
 80059be:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80059c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059c4:	2b37      	cmp	r3, #55	; 0x37
 80059c6:	d901      	bls.n	80059cc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80059c8:	2337      	movs	r3, #55	; 0x37
 80059ca:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80059cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ce:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d0:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80059d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059d4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80059d6:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80059d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059da:	2200      	movs	r2, #0
 80059dc:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80059de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059e0:	3304      	adds	r3, #4
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7ff f8be 	bl	8004b64 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80059e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ea:	3318      	adds	r3, #24
 80059ec:	4618      	mov	r0, r3
 80059ee:	f7ff f8b9 	bl	8004b64 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80059f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80059f6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80059fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a00:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a06:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005a08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0a:	2200      	movs	r2, #0
 8005a0c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005a10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a12:	2200      	movs	r2, #0
 8005a14:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a1a:	3354      	adds	r3, #84	; 0x54
 8005a1c:	2260      	movs	r2, #96	; 0x60
 8005a1e:	2100      	movs	r1, #0
 8005a20:	4618      	mov	r0, r3
 8005a22:	f001 ff2c 	bl	800787e <memset>
 8005a26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a28:	4a0c      	ldr	r2, [pc, #48]	; (8005a5c <prvInitialiseNewTask+0x140>)
 8005a2a:	659a      	str	r2, [r3, #88]	; 0x58
 8005a2c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2e:	4a0c      	ldr	r2, [pc, #48]	; (8005a60 <prvInitialiseNewTask+0x144>)
 8005a30:	65da      	str	r2, [r3, #92]	; 0x5c
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	4a0b      	ldr	r2, [pc, #44]	; (8005a64 <prvInitialiseNewTask+0x148>)
 8005a36:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005a38:	683a      	ldr	r2, [r7, #0]
 8005a3a:	68f9      	ldr	r1, [r7, #12]
 8005a3c:	69b8      	ldr	r0, [r7, #24]
 8005a3e:	f001 f9b3 	bl	8006da8 <pxPortInitialiseStack>
 8005a42:	4602      	mov	r2, r0
 8005a44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a46:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005a48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d002      	beq.n	8005a54 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005a50:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a52:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005a54:	bf00      	nop
 8005a56:	3720      	adds	r7, #32
 8005a58:	46bd      	mov	sp, r7
 8005a5a:	bd80      	pop	{r7, pc}
 8005a5c:	080093b8 	.word	0x080093b8
 8005a60:	080093d8 	.word	0x080093d8
 8005a64:	08009398 	.word	0x08009398

08005a68 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b082      	sub	sp, #8
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005a70:	f001 fac8 	bl	8007004 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005a74:	4b2d      	ldr	r3, [pc, #180]	; (8005b2c <prvAddNewTaskToReadyList+0xc4>)
 8005a76:	681b      	ldr	r3, [r3, #0]
 8005a78:	3301      	adds	r3, #1
 8005a7a:	4a2c      	ldr	r2, [pc, #176]	; (8005b2c <prvAddNewTaskToReadyList+0xc4>)
 8005a7c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005a7e:	4b2c      	ldr	r3, [pc, #176]	; (8005b30 <prvAddNewTaskToReadyList+0xc8>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d109      	bne.n	8005a9a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005a86:	4a2a      	ldr	r2, [pc, #168]	; (8005b30 <prvAddNewTaskToReadyList+0xc8>)
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005a8c:	4b27      	ldr	r3, [pc, #156]	; (8005b2c <prvAddNewTaskToReadyList+0xc4>)
 8005a8e:	681b      	ldr	r3, [r3, #0]
 8005a90:	2b01      	cmp	r3, #1
 8005a92:	d110      	bne.n	8005ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005a94:	f000 fc98 	bl	80063c8 <prvInitialiseTaskLists>
 8005a98:	e00d      	b.n	8005ab6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005a9a:	4b26      	ldr	r3, [pc, #152]	; (8005b34 <prvAddNewTaskToReadyList+0xcc>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d109      	bne.n	8005ab6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005aa2:	4b23      	ldr	r3, [pc, #140]	; (8005b30 <prvAddNewTaskToReadyList+0xc8>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aac:	429a      	cmp	r2, r3
 8005aae:	d802      	bhi.n	8005ab6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ab0:	4a1f      	ldr	r2, [pc, #124]	; (8005b30 <prvAddNewTaskToReadyList+0xc8>)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ab6:	4b20      	ldr	r3, [pc, #128]	; (8005b38 <prvAddNewTaskToReadyList+0xd0>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	3301      	adds	r3, #1
 8005abc:	4a1e      	ldr	r2, [pc, #120]	; (8005b38 <prvAddNewTaskToReadyList+0xd0>)
 8005abe:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ac0:	4b1d      	ldr	r3, [pc, #116]	; (8005b38 <prvAddNewTaskToReadyList+0xd0>)
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005acc:	4b1b      	ldr	r3, [pc, #108]	; (8005b3c <prvAddNewTaskToReadyList+0xd4>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	429a      	cmp	r2, r3
 8005ad2:	d903      	bls.n	8005adc <prvAddNewTaskToReadyList+0x74>
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005ad8:	4a18      	ldr	r2, [pc, #96]	; (8005b3c <prvAddNewTaskToReadyList+0xd4>)
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ae0:	4613      	mov	r3, r2
 8005ae2:	009b      	lsls	r3, r3, #2
 8005ae4:	4413      	add	r3, r2
 8005ae6:	009b      	lsls	r3, r3, #2
 8005ae8:	4a15      	ldr	r2, [pc, #84]	; (8005b40 <prvAddNewTaskToReadyList+0xd8>)
 8005aea:	441a      	add	r2, r3
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	3304      	adds	r3, #4
 8005af0:	4619      	mov	r1, r3
 8005af2:	4610      	mov	r0, r2
 8005af4:	f7ff f843 	bl	8004b7e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005af8:	f001 fab4 	bl	8007064 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005afc:	4b0d      	ldr	r3, [pc, #52]	; (8005b34 <prvAddNewTaskToReadyList+0xcc>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d00e      	beq.n	8005b22 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005b04:	4b0a      	ldr	r3, [pc, #40]	; (8005b30 <prvAddNewTaskToReadyList+0xc8>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b0e:	429a      	cmp	r2, r3
 8005b10:	d207      	bcs.n	8005b22 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005b12:	4b0c      	ldr	r3, [pc, #48]	; (8005b44 <prvAddNewTaskToReadyList+0xdc>)
 8005b14:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b18:	601a      	str	r2, [r3, #0]
 8005b1a:	f3bf 8f4f 	dsb	sy
 8005b1e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b22:	bf00      	nop
 8005b24:	3708      	adds	r7, #8
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
 8005b2a:	bf00      	nop
 8005b2c:	20000b00 	.word	0x20000b00
 8005b30:	2000062c 	.word	0x2000062c
 8005b34:	20000b0c 	.word	0x20000b0c
 8005b38:	20000b1c 	.word	0x20000b1c
 8005b3c:	20000b08 	.word	0x20000b08
 8005b40:	20000630 	.word	0x20000630
 8005b44:	e000ed04 	.word	0xe000ed04

08005b48 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8005b50:	f001 fa58 	bl	8007004 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d102      	bne.n	8005b60 <vTaskDelete+0x18>
 8005b5a:	4b2c      	ldr	r3, [pc, #176]	; (8005c0c <vTaskDelete+0xc4>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	e000      	b.n	8005b62 <vTaskDelete+0x1a>
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	3304      	adds	r3, #4
 8005b68:	4618      	mov	r0, r3
 8005b6a:	f7ff f865 	bl	8004c38 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d004      	beq.n	8005b80 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	3318      	adds	r3, #24
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f7ff f85c 	bl	8004c38 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8005b80:	4b23      	ldr	r3, [pc, #140]	; (8005c10 <vTaskDelete+0xc8>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	4a22      	ldr	r2, [pc, #136]	; (8005c10 <vTaskDelete+0xc8>)
 8005b88:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8005b8a:	4b20      	ldr	r3, [pc, #128]	; (8005c0c <vTaskDelete+0xc4>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	68fa      	ldr	r2, [r7, #12]
 8005b90:	429a      	cmp	r2, r3
 8005b92:	d10b      	bne.n	8005bac <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	3304      	adds	r3, #4
 8005b98:	4619      	mov	r1, r3
 8005b9a:	481e      	ldr	r0, [pc, #120]	; (8005c14 <vTaskDelete+0xcc>)
 8005b9c:	f7fe ffef 	bl	8004b7e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8005ba0:	4b1d      	ldr	r3, [pc, #116]	; (8005c18 <vTaskDelete+0xd0>)
 8005ba2:	681b      	ldr	r3, [r3, #0]
 8005ba4:	3301      	adds	r3, #1
 8005ba6:	4a1c      	ldr	r2, [pc, #112]	; (8005c18 <vTaskDelete+0xd0>)
 8005ba8:	6013      	str	r3, [r2, #0]
 8005baa:	e009      	b.n	8005bc0 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8005bac:	4b1b      	ldr	r3, [pc, #108]	; (8005c1c <vTaskDelete+0xd4>)
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	3b01      	subs	r3, #1
 8005bb2:	4a1a      	ldr	r2, [pc, #104]	; (8005c1c <vTaskDelete+0xd4>)
 8005bb4:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 8005bb6:	68f8      	ldr	r0, [r7, #12]
 8005bb8:	f000 fc74 	bl	80064a4 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8005bbc:	f000 fca6 	bl	800650c <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8005bc0:	f001 fa50 	bl	8007064 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8005bc4:	4b16      	ldr	r3, [pc, #88]	; (8005c20 <vTaskDelete+0xd8>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	2b00      	cmp	r3, #0
 8005bca:	d01b      	beq.n	8005c04 <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8005bcc:	4b0f      	ldr	r3, [pc, #60]	; (8005c0c <vTaskDelete+0xc4>)
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	429a      	cmp	r2, r3
 8005bd4:	d116      	bne.n	8005c04 <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8005bd6:	4b13      	ldr	r3, [pc, #76]	; (8005c24 <vTaskDelete+0xdc>)
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d00a      	beq.n	8005bf4 <vTaskDelete+0xac>
	__asm volatile
 8005bde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005be2:	f383 8811 	msr	BASEPRI, r3
 8005be6:	f3bf 8f6f 	isb	sy
 8005bea:	f3bf 8f4f 	dsb	sy
 8005bee:	60bb      	str	r3, [r7, #8]
}
 8005bf0:	bf00      	nop
 8005bf2:	e7fe      	b.n	8005bf2 <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 8005bf4:	4b0c      	ldr	r3, [pc, #48]	; (8005c28 <vTaskDelete+0xe0>)
 8005bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bfa:	601a      	str	r2, [r3, #0]
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c04:	bf00      	nop
 8005c06:	3710      	adds	r7, #16
 8005c08:	46bd      	mov	sp, r7
 8005c0a:	bd80      	pop	{r7, pc}
 8005c0c:	2000062c 	.word	0x2000062c
 8005c10:	20000b1c 	.word	0x20000b1c
 8005c14:	20000ad4 	.word	0x20000ad4
 8005c18:	20000ae8 	.word	0x20000ae8
 8005c1c:	20000b00 	.word	0x20000b00
 8005c20:	20000b0c 	.word	0x20000b0c
 8005c24:	20000b28 	.word	0x20000b28
 8005c28:	e000ed04 	.word	0xe000ed04

08005c2c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b084      	sub	sp, #16
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005c34:	2300      	movs	r3, #0
 8005c36:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d017      	beq.n	8005c6e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005c3e:	4b13      	ldr	r3, [pc, #76]	; (8005c8c <vTaskDelay+0x60>)
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d00a      	beq.n	8005c5c <vTaskDelay+0x30>
	__asm volatile
 8005c46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c4a:	f383 8811 	msr	BASEPRI, r3
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	f3bf 8f4f 	dsb	sy
 8005c56:	60bb      	str	r3, [r7, #8]
}
 8005c58:	bf00      	nop
 8005c5a:	e7fe      	b.n	8005c5a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005c5c:	f000 f88a 	bl	8005d74 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005c60:	2100      	movs	r1, #0
 8005c62:	6878      	ldr	r0, [r7, #4]
 8005c64:	f000 fcfe 	bl	8006664 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005c68:	f000 f892 	bl	8005d90 <xTaskResumeAll>
 8005c6c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d107      	bne.n	8005c84 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005c74:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <vTaskDelay+0x64>)
 8005c76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c7a:	601a      	str	r2, [r3, #0]
 8005c7c:	f3bf 8f4f 	dsb	sy
 8005c80:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005c84:	bf00      	nop
 8005c86:	3710      	adds	r7, #16
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	bd80      	pop	{r7, pc}
 8005c8c:	20000b28 	.word	0x20000b28
 8005c90:	e000ed04 	.word	0xe000ed04

08005c94 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005c94:	b580      	push	{r7, lr}
 8005c96:	b08a      	sub	sp, #40	; 0x28
 8005c98:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005c9a:	2300      	movs	r3, #0
 8005c9c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005ca2:	463a      	mov	r2, r7
 8005ca4:	1d39      	adds	r1, r7, #4
 8005ca6:	f107 0308 	add.w	r3, r7, #8
 8005caa:	4618      	mov	r0, r3
 8005cac:	f7fe ff06 	bl	8004abc <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005cb0:	6839      	ldr	r1, [r7, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	68ba      	ldr	r2, [r7, #8]
 8005cb6:	9202      	str	r2, [sp, #8]
 8005cb8:	9301      	str	r3, [sp, #4]
 8005cba:	2300      	movs	r3, #0
 8005cbc:	9300      	str	r3, [sp, #0]
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	460a      	mov	r2, r1
 8005cc2:	4924      	ldr	r1, [pc, #144]	; (8005d54 <vTaskStartScheduler+0xc0>)
 8005cc4:	4824      	ldr	r0, [pc, #144]	; (8005d58 <vTaskStartScheduler+0xc4>)
 8005cc6:	f7ff fd87 	bl	80057d8 <xTaskCreateStatic>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	4a23      	ldr	r2, [pc, #140]	; (8005d5c <vTaskStartScheduler+0xc8>)
 8005cce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005cd0:	4b22      	ldr	r3, [pc, #136]	; (8005d5c <vTaskStartScheduler+0xc8>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d002      	beq.n	8005cde <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	617b      	str	r3, [r7, #20]
 8005cdc:	e001      	b.n	8005ce2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005cde:	2300      	movs	r3, #0
 8005ce0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	2b01      	cmp	r3, #1
 8005ce6:	d102      	bne.n	8005cee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005ce8:	f000 fd10 	bl	800670c <xTimerCreateTimerTask>
 8005cec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005cee:	697b      	ldr	r3, [r7, #20]
 8005cf0:	2b01      	cmp	r3, #1
 8005cf2:	d11b      	bne.n	8005d2c <vTaskStartScheduler+0x98>
	__asm volatile
 8005cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf8:	f383 8811 	msr	BASEPRI, r3
 8005cfc:	f3bf 8f6f 	isb	sy
 8005d00:	f3bf 8f4f 	dsb	sy
 8005d04:	613b      	str	r3, [r7, #16]
}
 8005d06:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005d08:	4b15      	ldr	r3, [pc, #84]	; (8005d60 <vTaskStartScheduler+0xcc>)
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	3354      	adds	r3, #84	; 0x54
 8005d0e:	4a15      	ldr	r2, [pc, #84]	; (8005d64 <vTaskStartScheduler+0xd0>)
 8005d10:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d12:	4b15      	ldr	r3, [pc, #84]	; (8005d68 <vTaskStartScheduler+0xd4>)
 8005d14:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005d18:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d1a:	4b14      	ldr	r3, [pc, #80]	; (8005d6c <vTaskStartScheduler+0xd8>)
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d20:	4b13      	ldr	r3, [pc, #76]	; (8005d70 <vTaskStartScheduler+0xdc>)
 8005d22:	2200      	movs	r2, #0
 8005d24:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d26:	f001 f8cb 	bl	8006ec0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d2a:	e00e      	b.n	8005d4a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d2c:	697b      	ldr	r3, [r7, #20]
 8005d2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d32:	d10a      	bne.n	8005d4a <vTaskStartScheduler+0xb6>
	__asm volatile
 8005d34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d38:	f383 8811 	msr	BASEPRI, r3
 8005d3c:	f3bf 8f6f 	isb	sy
 8005d40:	f3bf 8f4f 	dsb	sy
 8005d44:	60fb      	str	r3, [r7, #12]
}
 8005d46:	bf00      	nop
 8005d48:	e7fe      	b.n	8005d48 <vTaskStartScheduler+0xb4>
}
 8005d4a:	bf00      	nop
 8005d4c:	3718      	adds	r7, #24
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	bd80      	pop	{r7, pc}
 8005d52:	bf00      	nop
 8005d54:	08009308 	.word	0x08009308
 8005d58:	08006399 	.word	0x08006399
 8005d5c:	20000b24 	.word	0x20000b24
 8005d60:	2000062c 	.word	0x2000062c
 8005d64:	20000010 	.word	0x20000010
 8005d68:	20000b20 	.word	0x20000b20
 8005d6c:	20000b0c 	.word	0x20000b0c
 8005d70:	20000b04 	.word	0x20000b04

08005d74 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005d74:	b480      	push	{r7}
 8005d76:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005d78:	4b04      	ldr	r3, [pc, #16]	; (8005d8c <vTaskSuspendAll+0x18>)
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	3301      	adds	r3, #1
 8005d7e:	4a03      	ldr	r2, [pc, #12]	; (8005d8c <vTaskSuspendAll+0x18>)
 8005d80:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005d82:	bf00      	nop
 8005d84:	46bd      	mov	sp, r7
 8005d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d8a:	4770      	bx	lr
 8005d8c:	20000b28 	.word	0x20000b28

08005d90 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005d90:	b580      	push	{r7, lr}
 8005d92:	b084      	sub	sp, #16
 8005d94:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005d96:	2300      	movs	r3, #0
 8005d98:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005d9e:	4b42      	ldr	r3, [pc, #264]	; (8005ea8 <xTaskResumeAll+0x118>)
 8005da0:	681b      	ldr	r3, [r3, #0]
 8005da2:	2b00      	cmp	r3, #0
 8005da4:	d10a      	bne.n	8005dbc <xTaskResumeAll+0x2c>
	__asm volatile
 8005da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005daa:	f383 8811 	msr	BASEPRI, r3
 8005dae:	f3bf 8f6f 	isb	sy
 8005db2:	f3bf 8f4f 	dsb	sy
 8005db6:	603b      	str	r3, [r7, #0]
}
 8005db8:	bf00      	nop
 8005dba:	e7fe      	b.n	8005dba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005dbc:	f001 f922 	bl	8007004 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005dc0:	4b39      	ldr	r3, [pc, #228]	; (8005ea8 <xTaskResumeAll+0x118>)
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	3b01      	subs	r3, #1
 8005dc6:	4a38      	ldr	r2, [pc, #224]	; (8005ea8 <xTaskResumeAll+0x118>)
 8005dc8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005dca:	4b37      	ldr	r3, [pc, #220]	; (8005ea8 <xTaskResumeAll+0x118>)
 8005dcc:	681b      	ldr	r3, [r3, #0]
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d162      	bne.n	8005e98 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005dd2:	4b36      	ldr	r3, [pc, #216]	; (8005eac <xTaskResumeAll+0x11c>)
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d05e      	beq.n	8005e98 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005dda:	e02f      	b.n	8005e3c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005ddc:	4b34      	ldr	r3, [pc, #208]	; (8005eb0 <xTaskResumeAll+0x120>)
 8005dde:	68db      	ldr	r3, [r3, #12]
 8005de0:	68db      	ldr	r3, [r3, #12]
 8005de2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	3318      	adds	r3, #24
 8005de8:	4618      	mov	r0, r3
 8005dea:	f7fe ff25 	bl	8004c38 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005dee:	68fb      	ldr	r3, [r7, #12]
 8005df0:	3304      	adds	r3, #4
 8005df2:	4618      	mov	r0, r3
 8005df4:	f7fe ff20 	bl	8004c38 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005dfc:	4b2d      	ldr	r3, [pc, #180]	; (8005eb4 <xTaskResumeAll+0x124>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	429a      	cmp	r2, r3
 8005e02:	d903      	bls.n	8005e0c <xTaskResumeAll+0x7c>
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e08:	4a2a      	ldr	r2, [pc, #168]	; (8005eb4 <xTaskResumeAll+0x124>)
 8005e0a:	6013      	str	r3, [r2, #0]
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e10:	4613      	mov	r3, r2
 8005e12:	009b      	lsls	r3, r3, #2
 8005e14:	4413      	add	r3, r2
 8005e16:	009b      	lsls	r3, r3, #2
 8005e18:	4a27      	ldr	r2, [pc, #156]	; (8005eb8 <xTaskResumeAll+0x128>)
 8005e1a:	441a      	add	r2, r3
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f7fe feab 	bl	8004b7e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005e2c:	4b23      	ldr	r3, [pc, #140]	; (8005ebc <xTaskResumeAll+0x12c>)
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e32:	429a      	cmp	r2, r3
 8005e34:	d302      	bcc.n	8005e3c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8005e36:	4b22      	ldr	r3, [pc, #136]	; (8005ec0 <xTaskResumeAll+0x130>)
 8005e38:	2201      	movs	r2, #1
 8005e3a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e3c:	4b1c      	ldr	r3, [pc, #112]	; (8005eb0 <xTaskResumeAll+0x120>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d1cb      	bne.n	8005ddc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d001      	beq.n	8005e4e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005e4a:	f000 fb5f 	bl	800650c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005e4e:	4b1d      	ldr	r3, [pc, #116]	; (8005ec4 <xTaskResumeAll+0x134>)
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d010      	beq.n	8005e7c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005e5a:	f000 f847 	bl	8005eec <xTaskIncrementTick>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d002      	beq.n	8005e6a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8005e64:	4b16      	ldr	r3, [pc, #88]	; (8005ec0 <xTaskResumeAll+0x130>)
 8005e66:	2201      	movs	r2, #1
 8005e68:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	3b01      	subs	r3, #1
 8005e6e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d1f1      	bne.n	8005e5a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8005e76:	4b13      	ldr	r3, [pc, #76]	; (8005ec4 <xTaskResumeAll+0x134>)
 8005e78:	2200      	movs	r2, #0
 8005e7a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005e7c:	4b10      	ldr	r3, [pc, #64]	; (8005ec0 <xTaskResumeAll+0x130>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d009      	beq.n	8005e98 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005e84:	2301      	movs	r3, #1
 8005e86:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005e88:	4b0f      	ldr	r3, [pc, #60]	; (8005ec8 <xTaskResumeAll+0x138>)
 8005e8a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e8e:	601a      	str	r2, [r3, #0]
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005e98:	f001 f8e4 	bl	8007064 <vPortExitCritical>

	return xAlreadyYielded;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
}
 8005e9e:	4618      	mov	r0, r3
 8005ea0:	3710      	adds	r7, #16
 8005ea2:	46bd      	mov	sp, r7
 8005ea4:	bd80      	pop	{r7, pc}
 8005ea6:	bf00      	nop
 8005ea8:	20000b28 	.word	0x20000b28
 8005eac:	20000b00 	.word	0x20000b00
 8005eb0:	20000ac0 	.word	0x20000ac0
 8005eb4:	20000b08 	.word	0x20000b08
 8005eb8:	20000630 	.word	0x20000630
 8005ebc:	2000062c 	.word	0x2000062c
 8005ec0:	20000b14 	.word	0x20000b14
 8005ec4:	20000b10 	.word	0x20000b10
 8005ec8:	e000ed04 	.word	0xe000ed04

08005ecc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005ecc:	b480      	push	{r7}
 8005ece:	b083      	sub	sp, #12
 8005ed0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005ed2:	4b05      	ldr	r3, [pc, #20]	; (8005ee8 <xTaskGetTickCount+0x1c>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005ed8:	687b      	ldr	r3, [r7, #4]
}
 8005eda:	4618      	mov	r0, r3
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr
 8005ee6:	bf00      	nop
 8005ee8:	20000b04 	.word	0x20000b04

08005eec <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b086      	sub	sp, #24
 8005ef0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ef2:	2300      	movs	r3, #0
 8005ef4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ef6:	4b4f      	ldr	r3, [pc, #316]	; (8006034 <xTaskIncrementTick+0x148>)
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	f040 808f 	bne.w	800601e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f00:	4b4d      	ldr	r3, [pc, #308]	; (8006038 <xTaskIncrementTick+0x14c>)
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	3301      	adds	r3, #1
 8005f06:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f08:	4a4b      	ldr	r2, [pc, #300]	; (8006038 <xTaskIncrementTick+0x14c>)
 8005f0a:	693b      	ldr	r3, [r7, #16]
 8005f0c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f0e:	693b      	ldr	r3, [r7, #16]
 8005f10:	2b00      	cmp	r3, #0
 8005f12:	d120      	bne.n	8005f56 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f14:	4b49      	ldr	r3, [pc, #292]	; (800603c <xTaskIncrementTick+0x150>)
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d00a      	beq.n	8005f34 <xTaskIncrementTick+0x48>
	__asm volatile
 8005f1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f22:	f383 8811 	msr	BASEPRI, r3
 8005f26:	f3bf 8f6f 	isb	sy
 8005f2a:	f3bf 8f4f 	dsb	sy
 8005f2e:	603b      	str	r3, [r7, #0]
}
 8005f30:	bf00      	nop
 8005f32:	e7fe      	b.n	8005f32 <xTaskIncrementTick+0x46>
 8005f34:	4b41      	ldr	r3, [pc, #260]	; (800603c <xTaskIncrementTick+0x150>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	60fb      	str	r3, [r7, #12]
 8005f3a:	4b41      	ldr	r3, [pc, #260]	; (8006040 <xTaskIncrementTick+0x154>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	4a3f      	ldr	r2, [pc, #252]	; (800603c <xTaskIncrementTick+0x150>)
 8005f40:	6013      	str	r3, [r2, #0]
 8005f42:	4a3f      	ldr	r2, [pc, #252]	; (8006040 <xTaskIncrementTick+0x154>)
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6013      	str	r3, [r2, #0]
 8005f48:	4b3e      	ldr	r3, [pc, #248]	; (8006044 <xTaskIncrementTick+0x158>)
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	3301      	adds	r3, #1
 8005f4e:	4a3d      	ldr	r2, [pc, #244]	; (8006044 <xTaskIncrementTick+0x158>)
 8005f50:	6013      	str	r3, [r2, #0]
 8005f52:	f000 fadb 	bl	800650c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005f56:	4b3c      	ldr	r3, [pc, #240]	; (8006048 <xTaskIncrementTick+0x15c>)
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	693a      	ldr	r2, [r7, #16]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d349      	bcc.n	8005ff4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005f60:	4b36      	ldr	r3, [pc, #216]	; (800603c <xTaskIncrementTick+0x150>)
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d104      	bne.n	8005f74 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005f6a:	4b37      	ldr	r3, [pc, #220]	; (8006048 <xTaskIncrementTick+0x15c>)
 8005f6c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005f70:	601a      	str	r2, [r3, #0]
					break;
 8005f72:	e03f      	b.n	8005ff4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005f74:	4b31      	ldr	r3, [pc, #196]	; (800603c <xTaskIncrementTick+0x150>)
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	68db      	ldr	r3, [r3, #12]
 8005f7c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	685b      	ldr	r3, [r3, #4]
 8005f82:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005f84:	693a      	ldr	r2, [r7, #16]
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	429a      	cmp	r2, r3
 8005f8a:	d203      	bcs.n	8005f94 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005f8c:	4a2e      	ldr	r2, [pc, #184]	; (8006048 <xTaskIncrementTick+0x15c>)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005f92:	e02f      	b.n	8005ff4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005f94:	68bb      	ldr	r3, [r7, #8]
 8005f96:	3304      	adds	r3, #4
 8005f98:	4618      	mov	r0, r3
 8005f9a:	f7fe fe4d 	bl	8004c38 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005f9e:	68bb      	ldr	r3, [r7, #8]
 8005fa0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d004      	beq.n	8005fb0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	3318      	adds	r3, #24
 8005faa:	4618      	mov	r0, r3
 8005fac:	f7fe fe44 	bl	8004c38 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fb4:	4b25      	ldr	r3, [pc, #148]	; (800604c <xTaskIncrementTick+0x160>)
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	429a      	cmp	r2, r3
 8005fba:	d903      	bls.n	8005fc4 <xTaskIncrementTick+0xd8>
 8005fbc:	68bb      	ldr	r3, [r7, #8]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	4a22      	ldr	r2, [pc, #136]	; (800604c <xTaskIncrementTick+0x160>)
 8005fc2:	6013      	str	r3, [r2, #0]
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fc8:	4613      	mov	r3, r2
 8005fca:	009b      	lsls	r3, r3, #2
 8005fcc:	4413      	add	r3, r2
 8005fce:	009b      	lsls	r3, r3, #2
 8005fd0:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <xTaskIncrementTick+0x164>)
 8005fd2:	441a      	add	r2, r3
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	3304      	adds	r3, #4
 8005fd8:	4619      	mov	r1, r3
 8005fda:	4610      	mov	r0, r2
 8005fdc:	f7fe fdcf 	bl	8004b7e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005fe4:	4b1b      	ldr	r3, [pc, #108]	; (8006054 <xTaskIncrementTick+0x168>)
 8005fe6:	681b      	ldr	r3, [r3, #0]
 8005fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fea:	429a      	cmp	r2, r3
 8005fec:	d3b8      	bcc.n	8005f60 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8005fee:	2301      	movs	r3, #1
 8005ff0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ff2:	e7b5      	b.n	8005f60 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ff4:	4b17      	ldr	r3, [pc, #92]	; (8006054 <xTaskIncrementTick+0x168>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ffa:	4915      	ldr	r1, [pc, #84]	; (8006050 <xTaskIncrementTick+0x164>)
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	009b      	lsls	r3, r3, #2
 8006000:	4413      	add	r3, r2
 8006002:	009b      	lsls	r3, r3, #2
 8006004:	440b      	add	r3, r1
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	2b01      	cmp	r3, #1
 800600a:	d901      	bls.n	8006010 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800600c:	2301      	movs	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006010:	4b11      	ldr	r3, [pc, #68]	; (8006058 <xTaskIncrementTick+0x16c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d007      	beq.n	8006028 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006018:	2301      	movs	r3, #1
 800601a:	617b      	str	r3, [r7, #20]
 800601c:	e004      	b.n	8006028 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800601e:	4b0f      	ldr	r3, [pc, #60]	; (800605c <xTaskIncrementTick+0x170>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	3301      	adds	r3, #1
 8006024:	4a0d      	ldr	r2, [pc, #52]	; (800605c <xTaskIncrementTick+0x170>)
 8006026:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006028:	697b      	ldr	r3, [r7, #20]
}
 800602a:	4618      	mov	r0, r3
 800602c:	3718      	adds	r7, #24
 800602e:	46bd      	mov	sp, r7
 8006030:	bd80      	pop	{r7, pc}
 8006032:	bf00      	nop
 8006034:	20000b28 	.word	0x20000b28
 8006038:	20000b04 	.word	0x20000b04
 800603c:	20000ab8 	.word	0x20000ab8
 8006040:	20000abc 	.word	0x20000abc
 8006044:	20000b18 	.word	0x20000b18
 8006048:	20000b20 	.word	0x20000b20
 800604c:	20000b08 	.word	0x20000b08
 8006050:	20000630 	.word	0x20000630
 8006054:	2000062c 	.word	0x2000062c
 8006058:	20000b14 	.word	0x20000b14
 800605c:	20000b10 	.word	0x20000b10

08006060 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006066:	4b2a      	ldr	r3, [pc, #168]	; (8006110 <vTaskSwitchContext+0xb0>)
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d003      	beq.n	8006076 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800606e:	4b29      	ldr	r3, [pc, #164]	; (8006114 <vTaskSwitchContext+0xb4>)
 8006070:	2201      	movs	r2, #1
 8006072:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006074:	e046      	b.n	8006104 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006076:	4b27      	ldr	r3, [pc, #156]	; (8006114 <vTaskSwitchContext+0xb4>)
 8006078:	2200      	movs	r2, #0
 800607a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800607c:	4b26      	ldr	r3, [pc, #152]	; (8006118 <vTaskSwitchContext+0xb8>)
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	e010      	b.n	80060a6 <vTaskSwitchContext+0x46>
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d10a      	bne.n	80060a0 <vTaskSwitchContext+0x40>
	__asm volatile
 800608a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800608e:	f383 8811 	msr	BASEPRI, r3
 8006092:	f3bf 8f6f 	isb	sy
 8006096:	f3bf 8f4f 	dsb	sy
 800609a:	607b      	str	r3, [r7, #4]
}
 800609c:	bf00      	nop
 800609e:	e7fe      	b.n	800609e <vTaskSwitchContext+0x3e>
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	3b01      	subs	r3, #1
 80060a4:	60fb      	str	r3, [r7, #12]
 80060a6:	491d      	ldr	r1, [pc, #116]	; (800611c <vTaskSwitchContext+0xbc>)
 80060a8:	68fa      	ldr	r2, [r7, #12]
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d0e4      	beq.n	8006084 <vTaskSwitchContext+0x24>
 80060ba:	68fa      	ldr	r2, [r7, #12]
 80060bc:	4613      	mov	r3, r2
 80060be:	009b      	lsls	r3, r3, #2
 80060c0:	4413      	add	r3, r2
 80060c2:	009b      	lsls	r3, r3, #2
 80060c4:	4a15      	ldr	r2, [pc, #84]	; (800611c <vTaskSwitchContext+0xbc>)
 80060c6:	4413      	add	r3, r2
 80060c8:	60bb      	str	r3, [r7, #8]
 80060ca:	68bb      	ldr	r3, [r7, #8]
 80060cc:	685b      	ldr	r3, [r3, #4]
 80060ce:	685a      	ldr	r2, [r3, #4]
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	605a      	str	r2, [r3, #4]
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	685a      	ldr	r2, [r3, #4]
 80060d8:	68bb      	ldr	r3, [r7, #8]
 80060da:	3308      	adds	r3, #8
 80060dc:	429a      	cmp	r2, r3
 80060de:	d104      	bne.n	80060ea <vTaskSwitchContext+0x8a>
 80060e0:	68bb      	ldr	r3, [r7, #8]
 80060e2:	685b      	ldr	r3, [r3, #4]
 80060e4:	685a      	ldr	r2, [r3, #4]
 80060e6:	68bb      	ldr	r3, [r7, #8]
 80060e8:	605a      	str	r2, [r3, #4]
 80060ea:	68bb      	ldr	r3, [r7, #8]
 80060ec:	685b      	ldr	r3, [r3, #4]
 80060ee:	68db      	ldr	r3, [r3, #12]
 80060f0:	4a0b      	ldr	r2, [pc, #44]	; (8006120 <vTaskSwitchContext+0xc0>)
 80060f2:	6013      	str	r3, [r2, #0]
 80060f4:	4a08      	ldr	r2, [pc, #32]	; (8006118 <vTaskSwitchContext+0xb8>)
 80060f6:	68fb      	ldr	r3, [r7, #12]
 80060f8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060fa:	4b09      	ldr	r3, [pc, #36]	; (8006120 <vTaskSwitchContext+0xc0>)
 80060fc:	681b      	ldr	r3, [r3, #0]
 80060fe:	3354      	adds	r3, #84	; 0x54
 8006100:	4a08      	ldr	r2, [pc, #32]	; (8006124 <vTaskSwitchContext+0xc4>)
 8006102:	6013      	str	r3, [r2, #0]
}
 8006104:	bf00      	nop
 8006106:	3714      	adds	r7, #20
 8006108:	46bd      	mov	sp, r7
 800610a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610e:	4770      	bx	lr
 8006110:	20000b28 	.word	0x20000b28
 8006114:	20000b14 	.word	0x20000b14
 8006118:	20000b08 	.word	0x20000b08
 800611c:	20000630 	.word	0x20000630
 8006120:	2000062c 	.word	0x2000062c
 8006124:	20000010 	.word	0x20000010

08006128 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d10a      	bne.n	800614e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006138:	f04f 0350 	mov.w	r3, #80	; 0x50
 800613c:	f383 8811 	msr	BASEPRI, r3
 8006140:	f3bf 8f6f 	isb	sy
 8006144:	f3bf 8f4f 	dsb	sy
 8006148:	60fb      	str	r3, [r7, #12]
}
 800614a:	bf00      	nop
 800614c:	e7fe      	b.n	800614c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800614e:	4b07      	ldr	r3, [pc, #28]	; (800616c <vTaskPlaceOnEventList+0x44>)
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	3318      	adds	r3, #24
 8006154:	4619      	mov	r1, r3
 8006156:	6878      	ldr	r0, [r7, #4]
 8006158:	f7fe fd35 	bl	8004bc6 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800615c:	2101      	movs	r1, #1
 800615e:	6838      	ldr	r0, [r7, #0]
 8006160:	f000 fa80 	bl	8006664 <prvAddCurrentTaskToDelayedList>
}
 8006164:	bf00      	nop
 8006166:	3710      	adds	r7, #16
 8006168:	46bd      	mov	sp, r7
 800616a:	bd80      	pop	{r7, pc}
 800616c:	2000062c 	.word	0x2000062c

08006170 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006170:	b580      	push	{r7, lr}
 8006172:	b086      	sub	sp, #24
 8006174:	af00      	add	r7, sp, #0
 8006176:	60f8      	str	r0, [r7, #12]
 8006178:	60b9      	str	r1, [r7, #8]
 800617a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	2b00      	cmp	r3, #0
 8006180:	d10a      	bne.n	8006198 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006182:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006186:	f383 8811 	msr	BASEPRI, r3
 800618a:	f3bf 8f6f 	isb	sy
 800618e:	f3bf 8f4f 	dsb	sy
 8006192:	617b      	str	r3, [r7, #20]
}
 8006194:	bf00      	nop
 8006196:	e7fe      	b.n	8006196 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006198:	4b0a      	ldr	r3, [pc, #40]	; (80061c4 <vTaskPlaceOnEventListRestricted+0x54>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	3318      	adds	r3, #24
 800619e:	4619      	mov	r1, r3
 80061a0:	68f8      	ldr	r0, [r7, #12]
 80061a2:	f7fe fcec 	bl	8004b7e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d002      	beq.n	80061b2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80061ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80061b0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80061b2:	6879      	ldr	r1, [r7, #4]
 80061b4:	68b8      	ldr	r0, [r7, #8]
 80061b6:	f000 fa55 	bl	8006664 <prvAddCurrentTaskToDelayedList>
	}
 80061ba:	bf00      	nop
 80061bc:	3718      	adds	r7, #24
 80061be:	46bd      	mov	sp, r7
 80061c0:	bd80      	pop	{r7, pc}
 80061c2:	bf00      	nop
 80061c4:	2000062c 	.word	0x2000062c

080061c8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80061c8:	b580      	push	{r7, lr}
 80061ca:	b086      	sub	sp, #24
 80061cc:	af00      	add	r7, sp, #0
 80061ce:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	68db      	ldr	r3, [r3, #12]
 80061d4:	68db      	ldr	r3, [r3, #12]
 80061d6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80061d8:	693b      	ldr	r3, [r7, #16]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10a      	bne.n	80061f4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	60fb      	str	r3, [r7, #12]
}
 80061f0:	bf00      	nop
 80061f2:	e7fe      	b.n	80061f2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80061f4:	693b      	ldr	r3, [r7, #16]
 80061f6:	3318      	adds	r3, #24
 80061f8:	4618      	mov	r0, r3
 80061fa:	f7fe fd1d 	bl	8004c38 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061fe:	4b1e      	ldr	r3, [pc, #120]	; (8006278 <xTaskRemoveFromEventList+0xb0>)
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	2b00      	cmp	r3, #0
 8006204:	d11d      	bne.n	8006242 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006206:	693b      	ldr	r3, [r7, #16]
 8006208:	3304      	adds	r3, #4
 800620a:	4618      	mov	r0, r3
 800620c:	f7fe fd14 	bl	8004c38 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006210:	693b      	ldr	r3, [r7, #16]
 8006212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006214:	4b19      	ldr	r3, [pc, #100]	; (800627c <xTaskRemoveFromEventList+0xb4>)
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	429a      	cmp	r2, r3
 800621a:	d903      	bls.n	8006224 <xTaskRemoveFromEventList+0x5c>
 800621c:	693b      	ldr	r3, [r7, #16]
 800621e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006220:	4a16      	ldr	r2, [pc, #88]	; (800627c <xTaskRemoveFromEventList+0xb4>)
 8006222:	6013      	str	r3, [r2, #0]
 8006224:	693b      	ldr	r3, [r7, #16]
 8006226:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006228:	4613      	mov	r3, r2
 800622a:	009b      	lsls	r3, r3, #2
 800622c:	4413      	add	r3, r2
 800622e:	009b      	lsls	r3, r3, #2
 8006230:	4a13      	ldr	r2, [pc, #76]	; (8006280 <xTaskRemoveFromEventList+0xb8>)
 8006232:	441a      	add	r2, r3
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	3304      	adds	r3, #4
 8006238:	4619      	mov	r1, r3
 800623a:	4610      	mov	r0, r2
 800623c:	f7fe fc9f 	bl	8004b7e <vListInsertEnd>
 8006240:	e005      	b.n	800624e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006242:	693b      	ldr	r3, [r7, #16]
 8006244:	3318      	adds	r3, #24
 8006246:	4619      	mov	r1, r3
 8006248:	480e      	ldr	r0, [pc, #56]	; (8006284 <xTaskRemoveFromEventList+0xbc>)
 800624a:	f7fe fc98 	bl	8004b7e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800624e:	693b      	ldr	r3, [r7, #16]
 8006250:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006252:	4b0d      	ldr	r3, [pc, #52]	; (8006288 <xTaskRemoveFromEventList+0xc0>)
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006258:	429a      	cmp	r2, r3
 800625a:	d905      	bls.n	8006268 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800625c:	2301      	movs	r3, #1
 800625e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006260:	4b0a      	ldr	r3, [pc, #40]	; (800628c <xTaskRemoveFromEventList+0xc4>)
 8006262:	2201      	movs	r2, #1
 8006264:	601a      	str	r2, [r3, #0]
 8006266:	e001      	b.n	800626c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800626c:	697b      	ldr	r3, [r7, #20]
}
 800626e:	4618      	mov	r0, r3
 8006270:	3718      	adds	r7, #24
 8006272:	46bd      	mov	sp, r7
 8006274:	bd80      	pop	{r7, pc}
 8006276:	bf00      	nop
 8006278:	20000b28 	.word	0x20000b28
 800627c:	20000b08 	.word	0x20000b08
 8006280:	20000630 	.word	0x20000630
 8006284:	20000ac0 	.word	0x20000ac0
 8006288:	2000062c 	.word	0x2000062c
 800628c:	20000b14 	.word	0x20000b14

08006290 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006290:	b480      	push	{r7}
 8006292:	b083      	sub	sp, #12
 8006294:	af00      	add	r7, sp, #0
 8006296:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006298:	4b06      	ldr	r3, [pc, #24]	; (80062b4 <vTaskInternalSetTimeOutState+0x24>)
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062a0:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <vTaskInternalSetTimeOutState+0x28>)
 80062a2:	681a      	ldr	r2, [r3, #0]
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	605a      	str	r2, [r3, #4]
}
 80062a8:	bf00      	nop
 80062aa:	370c      	adds	r7, #12
 80062ac:	46bd      	mov	sp, r7
 80062ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b2:	4770      	bx	lr
 80062b4:	20000b18 	.word	0x20000b18
 80062b8:	20000b04 	.word	0x20000b04

080062bc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80062bc:	b580      	push	{r7, lr}
 80062be:	b088      	sub	sp, #32
 80062c0:	af00      	add	r7, sp, #0
 80062c2:	6078      	str	r0, [r7, #4]
 80062c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d10a      	bne.n	80062e2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80062cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062d0:	f383 8811 	msr	BASEPRI, r3
 80062d4:	f3bf 8f6f 	isb	sy
 80062d8:	f3bf 8f4f 	dsb	sy
 80062dc:	613b      	str	r3, [r7, #16]
}
 80062de:	bf00      	nop
 80062e0:	e7fe      	b.n	80062e0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d10a      	bne.n	80062fe <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80062e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80062ec:	f383 8811 	msr	BASEPRI, r3
 80062f0:	f3bf 8f6f 	isb	sy
 80062f4:	f3bf 8f4f 	dsb	sy
 80062f8:	60fb      	str	r3, [r7, #12]
}
 80062fa:	bf00      	nop
 80062fc:	e7fe      	b.n	80062fc <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80062fe:	f000 fe81 	bl	8007004 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006302:	4b1d      	ldr	r3, [pc, #116]	; (8006378 <xTaskCheckForTimeOut+0xbc>)
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	685b      	ldr	r3, [r3, #4]
 800630c:	69ba      	ldr	r2, [r7, #24]
 800630e:	1ad3      	subs	r3, r2, r3
 8006310:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006312:	683b      	ldr	r3, [r7, #0]
 8006314:	681b      	ldr	r3, [r3, #0]
 8006316:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800631a:	d102      	bne.n	8006322 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800631c:	2300      	movs	r3, #0
 800631e:	61fb      	str	r3, [r7, #28]
 8006320:	e023      	b.n	800636a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681a      	ldr	r2, [r3, #0]
 8006326:	4b15      	ldr	r3, [pc, #84]	; (800637c <xTaskCheckForTimeOut+0xc0>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	429a      	cmp	r2, r3
 800632c:	d007      	beq.n	800633e <xTaskCheckForTimeOut+0x82>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	685b      	ldr	r3, [r3, #4]
 8006332:	69ba      	ldr	r2, [r7, #24]
 8006334:	429a      	cmp	r2, r3
 8006336:	d302      	bcc.n	800633e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006338:	2301      	movs	r3, #1
 800633a:	61fb      	str	r3, [r7, #28]
 800633c:	e015      	b.n	800636a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	429a      	cmp	r2, r3
 8006346:	d20b      	bcs.n	8006360 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	1ad2      	subs	r2, r2, r3
 8006350:	683b      	ldr	r3, [r7, #0]
 8006352:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f7ff ff9b 	bl	8006290 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800635a:	2300      	movs	r3, #0
 800635c:	61fb      	str	r3, [r7, #28]
 800635e:	e004      	b.n	800636a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2200      	movs	r2, #0
 8006364:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006366:	2301      	movs	r3, #1
 8006368:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800636a:	f000 fe7b 	bl	8007064 <vPortExitCritical>

	return xReturn;
 800636e:	69fb      	ldr	r3, [r7, #28]
}
 8006370:	4618      	mov	r0, r3
 8006372:	3720      	adds	r7, #32
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}
 8006378:	20000b04 	.word	0x20000b04
 800637c:	20000b18 	.word	0x20000b18

08006380 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006380:	b480      	push	{r7}
 8006382:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006384:	4b03      	ldr	r3, [pc, #12]	; (8006394 <vTaskMissedYield+0x14>)
 8006386:	2201      	movs	r2, #1
 8006388:	601a      	str	r2, [r3, #0]
}
 800638a:	bf00      	nop
 800638c:	46bd      	mov	sp, r7
 800638e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006392:	4770      	bx	lr
 8006394:	20000b14 	.word	0x20000b14

08006398 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80063a0:	f000 f852 	bl	8006448 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80063a4:	4b06      	ldr	r3, [pc, #24]	; (80063c0 <prvIdleTask+0x28>)
 80063a6:	681b      	ldr	r3, [r3, #0]
 80063a8:	2b01      	cmp	r3, #1
 80063aa:	d9f9      	bls.n	80063a0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80063ac:	4b05      	ldr	r3, [pc, #20]	; (80063c4 <prvIdleTask+0x2c>)
 80063ae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80063b2:	601a      	str	r2, [r3, #0]
 80063b4:	f3bf 8f4f 	dsb	sy
 80063b8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80063bc:	e7f0      	b.n	80063a0 <prvIdleTask+0x8>
 80063be:	bf00      	nop
 80063c0:	20000630 	.word	0x20000630
 80063c4:	e000ed04 	.word	0xe000ed04

080063c8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063ce:	2300      	movs	r3, #0
 80063d0:	607b      	str	r3, [r7, #4]
 80063d2:	e00c      	b.n	80063ee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80063d4:	687a      	ldr	r2, [r7, #4]
 80063d6:	4613      	mov	r3, r2
 80063d8:	009b      	lsls	r3, r3, #2
 80063da:	4413      	add	r3, r2
 80063dc:	009b      	lsls	r3, r3, #2
 80063de:	4a12      	ldr	r2, [pc, #72]	; (8006428 <prvInitialiseTaskLists+0x60>)
 80063e0:	4413      	add	r3, r2
 80063e2:	4618      	mov	r0, r3
 80063e4:	f7fe fb9e 	bl	8004b24 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	3301      	adds	r3, #1
 80063ec:	607b      	str	r3, [r7, #4]
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2b37      	cmp	r3, #55	; 0x37
 80063f2:	d9ef      	bls.n	80063d4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80063f4:	480d      	ldr	r0, [pc, #52]	; (800642c <prvInitialiseTaskLists+0x64>)
 80063f6:	f7fe fb95 	bl	8004b24 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80063fa:	480d      	ldr	r0, [pc, #52]	; (8006430 <prvInitialiseTaskLists+0x68>)
 80063fc:	f7fe fb92 	bl	8004b24 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006400:	480c      	ldr	r0, [pc, #48]	; (8006434 <prvInitialiseTaskLists+0x6c>)
 8006402:	f7fe fb8f 	bl	8004b24 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006406:	480c      	ldr	r0, [pc, #48]	; (8006438 <prvInitialiseTaskLists+0x70>)
 8006408:	f7fe fb8c 	bl	8004b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800640c:	480b      	ldr	r0, [pc, #44]	; (800643c <prvInitialiseTaskLists+0x74>)
 800640e:	f7fe fb89 	bl	8004b24 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006412:	4b0b      	ldr	r3, [pc, #44]	; (8006440 <prvInitialiseTaskLists+0x78>)
 8006414:	4a05      	ldr	r2, [pc, #20]	; (800642c <prvInitialiseTaskLists+0x64>)
 8006416:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006418:	4b0a      	ldr	r3, [pc, #40]	; (8006444 <prvInitialiseTaskLists+0x7c>)
 800641a:	4a05      	ldr	r2, [pc, #20]	; (8006430 <prvInitialiseTaskLists+0x68>)
 800641c:	601a      	str	r2, [r3, #0]
}
 800641e:	bf00      	nop
 8006420:	3708      	adds	r7, #8
 8006422:	46bd      	mov	sp, r7
 8006424:	bd80      	pop	{r7, pc}
 8006426:	bf00      	nop
 8006428:	20000630 	.word	0x20000630
 800642c:	20000a90 	.word	0x20000a90
 8006430:	20000aa4 	.word	0x20000aa4
 8006434:	20000ac0 	.word	0x20000ac0
 8006438:	20000ad4 	.word	0x20000ad4
 800643c:	20000aec 	.word	0x20000aec
 8006440:	20000ab8 	.word	0x20000ab8
 8006444:	20000abc 	.word	0x20000abc

08006448 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006448:	b580      	push	{r7, lr}
 800644a:	b082      	sub	sp, #8
 800644c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800644e:	e019      	b.n	8006484 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006450:	f000 fdd8 	bl	8007004 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006454:	4b10      	ldr	r3, [pc, #64]	; (8006498 <prvCheckTasksWaitingTermination+0x50>)
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	3304      	adds	r3, #4
 8006460:	4618      	mov	r0, r3
 8006462:	f7fe fbe9 	bl	8004c38 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006466:	4b0d      	ldr	r3, [pc, #52]	; (800649c <prvCheckTasksWaitingTermination+0x54>)
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	3b01      	subs	r3, #1
 800646c:	4a0b      	ldr	r2, [pc, #44]	; (800649c <prvCheckTasksWaitingTermination+0x54>)
 800646e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006470:	4b0b      	ldr	r3, [pc, #44]	; (80064a0 <prvCheckTasksWaitingTermination+0x58>)
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	3b01      	subs	r3, #1
 8006476:	4a0a      	ldr	r2, [pc, #40]	; (80064a0 <prvCheckTasksWaitingTermination+0x58>)
 8006478:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800647a:	f000 fdf3 	bl	8007064 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800647e:	6878      	ldr	r0, [r7, #4]
 8006480:	f000 f810 	bl	80064a4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006484:	4b06      	ldr	r3, [pc, #24]	; (80064a0 <prvCheckTasksWaitingTermination+0x58>)
 8006486:	681b      	ldr	r3, [r3, #0]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1e1      	bne.n	8006450 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800648c:	bf00      	nop
 800648e:	bf00      	nop
 8006490:	3708      	adds	r7, #8
 8006492:	46bd      	mov	sp, r7
 8006494:	bd80      	pop	{r7, pc}
 8006496:	bf00      	nop
 8006498:	20000ad4 	.word	0x20000ad4
 800649c:	20000b00 	.word	0x20000b00
 80064a0:	20000ae8 	.word	0x20000ae8

080064a4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80064a4:	b580      	push	{r7, lr}
 80064a6:	b084      	sub	sp, #16
 80064a8:	af00      	add	r7, sp, #0
 80064aa:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	3354      	adds	r3, #84	; 0x54
 80064b0:	4618      	mov	r0, r3
 80064b2:	f001 fb1d 	bl	8007af0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d108      	bne.n	80064d2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 ff8b 	bl	80073e0 <vPortFree>
				vPortFree( pxTCB );
 80064ca:	6878      	ldr	r0, [r7, #4]
 80064cc:	f000 ff88 	bl	80073e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80064d0:	e018      	b.n	8006504 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d103      	bne.n	80064e4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80064dc:	6878      	ldr	r0, [r7, #4]
 80064de:	f000 ff7f 	bl	80073e0 <vPortFree>
	}
 80064e2:	e00f      	b.n	8006504 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80064ea:	2b02      	cmp	r3, #2
 80064ec:	d00a      	beq.n	8006504 <prvDeleteTCB+0x60>
	__asm volatile
 80064ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064f2:	f383 8811 	msr	BASEPRI, r3
 80064f6:	f3bf 8f6f 	isb	sy
 80064fa:	f3bf 8f4f 	dsb	sy
 80064fe:	60fb      	str	r3, [r7, #12]
}
 8006500:	bf00      	nop
 8006502:	e7fe      	b.n	8006502 <prvDeleteTCB+0x5e>
	}
 8006504:	bf00      	nop
 8006506:	3710      	adds	r7, #16
 8006508:	46bd      	mov	sp, r7
 800650a:	bd80      	pop	{r7, pc}

0800650c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800650c:	b480      	push	{r7}
 800650e:	b083      	sub	sp, #12
 8006510:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006512:	4b0c      	ldr	r3, [pc, #48]	; (8006544 <prvResetNextTaskUnblockTime+0x38>)
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d104      	bne.n	8006526 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800651c:	4b0a      	ldr	r3, [pc, #40]	; (8006548 <prvResetNextTaskUnblockTime+0x3c>)
 800651e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006522:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006524:	e008      	b.n	8006538 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006526:	4b07      	ldr	r3, [pc, #28]	; (8006544 <prvResetNextTaskUnblockTime+0x38>)
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68db      	ldr	r3, [r3, #12]
 800652c:	68db      	ldr	r3, [r3, #12]
 800652e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	685b      	ldr	r3, [r3, #4]
 8006534:	4a04      	ldr	r2, [pc, #16]	; (8006548 <prvResetNextTaskUnblockTime+0x3c>)
 8006536:	6013      	str	r3, [r2, #0]
}
 8006538:	bf00      	nop
 800653a:	370c      	adds	r7, #12
 800653c:	46bd      	mov	sp, r7
 800653e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006542:	4770      	bx	lr
 8006544:	20000ab8 	.word	0x20000ab8
 8006548:	20000b20 	.word	0x20000b20

0800654c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800654c:	b480      	push	{r7}
 800654e:	b083      	sub	sp, #12
 8006550:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006552:	4b0b      	ldr	r3, [pc, #44]	; (8006580 <xTaskGetSchedulerState+0x34>)
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d102      	bne.n	8006560 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800655a:	2301      	movs	r3, #1
 800655c:	607b      	str	r3, [r7, #4]
 800655e:	e008      	b.n	8006572 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006560:	4b08      	ldr	r3, [pc, #32]	; (8006584 <xTaskGetSchedulerState+0x38>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	2b00      	cmp	r3, #0
 8006566:	d102      	bne.n	800656e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006568:	2302      	movs	r3, #2
 800656a:	607b      	str	r3, [r7, #4]
 800656c:	e001      	b.n	8006572 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800656e:	2300      	movs	r3, #0
 8006570:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006572:	687b      	ldr	r3, [r7, #4]
	}
 8006574:	4618      	mov	r0, r3
 8006576:	370c      	adds	r7, #12
 8006578:	46bd      	mov	sp, r7
 800657a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657e:	4770      	bx	lr
 8006580:	20000b0c 	.word	0x20000b0c
 8006584:	20000b28 	.word	0x20000b28

08006588 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006588:	b580      	push	{r7, lr}
 800658a:	b086      	sub	sp, #24
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006594:	2300      	movs	r3, #0
 8006596:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	2b00      	cmp	r3, #0
 800659c:	d056      	beq.n	800664c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800659e:	4b2e      	ldr	r3, [pc, #184]	; (8006658 <xTaskPriorityDisinherit+0xd0>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	693a      	ldr	r2, [r7, #16]
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d00a      	beq.n	80065be <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80065a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ac:	f383 8811 	msr	BASEPRI, r3
 80065b0:	f3bf 8f6f 	isb	sy
 80065b4:	f3bf 8f4f 	dsb	sy
 80065b8:	60fb      	str	r3, [r7, #12]
}
 80065ba:	bf00      	nop
 80065bc:	e7fe      	b.n	80065bc <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80065be:	693b      	ldr	r3, [r7, #16]
 80065c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065c2:	2b00      	cmp	r3, #0
 80065c4:	d10a      	bne.n	80065dc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80065c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065ca:	f383 8811 	msr	BASEPRI, r3
 80065ce:	f3bf 8f6f 	isb	sy
 80065d2:	f3bf 8f4f 	dsb	sy
 80065d6:	60bb      	str	r3, [r7, #8]
}
 80065d8:	bf00      	nop
 80065da:	e7fe      	b.n	80065da <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80065dc:	693b      	ldr	r3, [r7, #16]
 80065de:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065e0:	1e5a      	subs	r2, r3, #1
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80065e6:	693b      	ldr	r3, [r7, #16]
 80065e8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80065ea:	693b      	ldr	r3, [r7, #16]
 80065ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80065ee:	429a      	cmp	r2, r3
 80065f0:	d02c      	beq.n	800664c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80065f2:	693b      	ldr	r3, [r7, #16]
 80065f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065f6:	2b00      	cmp	r3, #0
 80065f8:	d128      	bne.n	800664c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80065fa:	693b      	ldr	r3, [r7, #16]
 80065fc:	3304      	adds	r3, #4
 80065fe:	4618      	mov	r0, r3
 8006600:	f7fe fb1a 	bl	8004c38 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006604:	693b      	ldr	r3, [r7, #16]
 8006606:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006608:	693b      	ldr	r3, [r7, #16]
 800660a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800660c:	693b      	ldr	r3, [r7, #16]
 800660e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006610:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006614:	693b      	ldr	r3, [r7, #16]
 8006616:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006618:	693b      	ldr	r3, [r7, #16]
 800661a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800661c:	4b0f      	ldr	r3, [pc, #60]	; (800665c <xTaskPriorityDisinherit+0xd4>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	429a      	cmp	r2, r3
 8006622:	d903      	bls.n	800662c <xTaskPriorityDisinherit+0xa4>
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006628:	4a0c      	ldr	r2, [pc, #48]	; (800665c <xTaskPriorityDisinherit+0xd4>)
 800662a:	6013      	str	r3, [r2, #0]
 800662c:	693b      	ldr	r3, [r7, #16]
 800662e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006630:	4613      	mov	r3, r2
 8006632:	009b      	lsls	r3, r3, #2
 8006634:	4413      	add	r3, r2
 8006636:	009b      	lsls	r3, r3, #2
 8006638:	4a09      	ldr	r2, [pc, #36]	; (8006660 <xTaskPriorityDisinherit+0xd8>)
 800663a:	441a      	add	r2, r3
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	3304      	adds	r3, #4
 8006640:	4619      	mov	r1, r3
 8006642:	4610      	mov	r0, r2
 8006644:	f7fe fa9b 	bl	8004b7e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006648:	2301      	movs	r3, #1
 800664a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800664c:	697b      	ldr	r3, [r7, #20]
	}
 800664e:	4618      	mov	r0, r3
 8006650:	3718      	adds	r7, #24
 8006652:	46bd      	mov	sp, r7
 8006654:	bd80      	pop	{r7, pc}
 8006656:	bf00      	nop
 8006658:	2000062c 	.word	0x2000062c
 800665c:	20000b08 	.word	0x20000b08
 8006660:	20000630 	.word	0x20000630

08006664 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006664:	b580      	push	{r7, lr}
 8006666:	b084      	sub	sp, #16
 8006668:	af00      	add	r7, sp, #0
 800666a:	6078      	str	r0, [r7, #4]
 800666c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800666e:	4b21      	ldr	r3, [pc, #132]	; (80066f4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006674:	4b20      	ldr	r3, [pc, #128]	; (80066f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006676:	681b      	ldr	r3, [r3, #0]
 8006678:	3304      	adds	r3, #4
 800667a:	4618      	mov	r0, r3
 800667c:	f7fe fadc 	bl	8004c38 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006686:	d10a      	bne.n	800669e <prvAddCurrentTaskToDelayedList+0x3a>
 8006688:	683b      	ldr	r3, [r7, #0]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d007      	beq.n	800669e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800668e:	4b1a      	ldr	r3, [pc, #104]	; (80066f8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	3304      	adds	r3, #4
 8006694:	4619      	mov	r1, r3
 8006696:	4819      	ldr	r0, [pc, #100]	; (80066fc <prvAddCurrentTaskToDelayedList+0x98>)
 8006698:	f7fe fa71 	bl	8004b7e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800669c:	e026      	b.n	80066ec <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800669e:	68fa      	ldr	r2, [r7, #12]
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	4413      	add	r3, r2
 80066a4:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80066a6:	4b14      	ldr	r3, [pc, #80]	; (80066f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	68ba      	ldr	r2, [r7, #8]
 80066ac:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80066ae:	68ba      	ldr	r2, [r7, #8]
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	429a      	cmp	r2, r3
 80066b4:	d209      	bcs.n	80066ca <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066b6:	4b12      	ldr	r3, [pc, #72]	; (8006700 <prvAddCurrentTaskToDelayedList+0x9c>)
 80066b8:	681a      	ldr	r2, [r3, #0]
 80066ba:	4b0f      	ldr	r3, [pc, #60]	; (80066f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3304      	adds	r3, #4
 80066c0:	4619      	mov	r1, r3
 80066c2:	4610      	mov	r0, r2
 80066c4:	f7fe fa7f 	bl	8004bc6 <vListInsert>
}
 80066c8:	e010      	b.n	80066ec <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80066ca:	4b0e      	ldr	r3, [pc, #56]	; (8006704 <prvAddCurrentTaskToDelayedList+0xa0>)
 80066cc:	681a      	ldr	r2, [r3, #0]
 80066ce:	4b0a      	ldr	r3, [pc, #40]	; (80066f8 <prvAddCurrentTaskToDelayedList+0x94>)
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	3304      	adds	r3, #4
 80066d4:	4619      	mov	r1, r3
 80066d6:	4610      	mov	r0, r2
 80066d8:	f7fe fa75 	bl	8004bc6 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80066dc:	4b0a      	ldr	r3, [pc, #40]	; (8006708 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	68ba      	ldr	r2, [r7, #8]
 80066e2:	429a      	cmp	r2, r3
 80066e4:	d202      	bcs.n	80066ec <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80066e6:	4a08      	ldr	r2, [pc, #32]	; (8006708 <prvAddCurrentTaskToDelayedList+0xa4>)
 80066e8:	68bb      	ldr	r3, [r7, #8]
 80066ea:	6013      	str	r3, [r2, #0]
}
 80066ec:	bf00      	nop
 80066ee:	3710      	adds	r7, #16
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20000b04 	.word	0x20000b04
 80066f8:	2000062c 	.word	0x2000062c
 80066fc:	20000aec 	.word	0x20000aec
 8006700:	20000abc 	.word	0x20000abc
 8006704:	20000ab8 	.word	0x20000ab8
 8006708:	20000b20 	.word	0x20000b20

0800670c <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800670c:	b580      	push	{r7, lr}
 800670e:	b08a      	sub	sp, #40	; 0x28
 8006710:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006712:	2300      	movs	r3, #0
 8006714:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006716:	f000 fb07 	bl	8006d28 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800671a:	4b1c      	ldr	r3, [pc, #112]	; (800678c <xTimerCreateTimerTask+0x80>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	2b00      	cmp	r3, #0
 8006720:	d021      	beq.n	8006766 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006722:	2300      	movs	r3, #0
 8006724:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006726:	2300      	movs	r3, #0
 8006728:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800672a:	1d3a      	adds	r2, r7, #4
 800672c:	f107 0108 	add.w	r1, r7, #8
 8006730:	f107 030c 	add.w	r3, r7, #12
 8006734:	4618      	mov	r0, r3
 8006736:	f7fe f9db 	bl	8004af0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800673a:	6879      	ldr	r1, [r7, #4]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	68fa      	ldr	r2, [r7, #12]
 8006740:	9202      	str	r2, [sp, #8]
 8006742:	9301      	str	r3, [sp, #4]
 8006744:	2302      	movs	r3, #2
 8006746:	9300      	str	r3, [sp, #0]
 8006748:	2300      	movs	r3, #0
 800674a:	460a      	mov	r2, r1
 800674c:	4910      	ldr	r1, [pc, #64]	; (8006790 <xTimerCreateTimerTask+0x84>)
 800674e:	4811      	ldr	r0, [pc, #68]	; (8006794 <xTimerCreateTimerTask+0x88>)
 8006750:	f7ff f842 	bl	80057d8 <xTaskCreateStatic>
 8006754:	4603      	mov	r3, r0
 8006756:	4a10      	ldr	r2, [pc, #64]	; (8006798 <xTimerCreateTimerTask+0x8c>)
 8006758:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800675a:	4b0f      	ldr	r3, [pc, #60]	; (8006798 <xTimerCreateTimerTask+0x8c>)
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	2b00      	cmp	r3, #0
 8006760:	d001      	beq.n	8006766 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006762:	2301      	movs	r3, #1
 8006764:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006766:	697b      	ldr	r3, [r7, #20]
 8006768:	2b00      	cmp	r3, #0
 800676a:	d10a      	bne.n	8006782 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800676c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006770:	f383 8811 	msr	BASEPRI, r3
 8006774:	f3bf 8f6f 	isb	sy
 8006778:	f3bf 8f4f 	dsb	sy
 800677c:	613b      	str	r3, [r7, #16]
}
 800677e:	bf00      	nop
 8006780:	e7fe      	b.n	8006780 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006782:	697b      	ldr	r3, [r7, #20]
}
 8006784:	4618      	mov	r0, r3
 8006786:	3718      	adds	r7, #24
 8006788:	46bd      	mov	sp, r7
 800678a:	bd80      	pop	{r7, pc}
 800678c:	20000b5c 	.word	0x20000b5c
 8006790:	08009310 	.word	0x08009310
 8006794:	080068d1 	.word	0x080068d1
 8006798:	20000b60 	.word	0x20000b60

0800679c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b08a      	sub	sp, #40	; 0x28
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	60f8      	str	r0, [r7, #12]
 80067a4:	60b9      	str	r1, [r7, #8]
 80067a6:	607a      	str	r2, [r7, #4]
 80067a8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80067aa:	2300      	movs	r3, #0
 80067ac:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80067ae:	68fb      	ldr	r3, [r7, #12]
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	d10a      	bne.n	80067ca <xTimerGenericCommand+0x2e>
	__asm volatile
 80067b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067b8:	f383 8811 	msr	BASEPRI, r3
 80067bc:	f3bf 8f6f 	isb	sy
 80067c0:	f3bf 8f4f 	dsb	sy
 80067c4:	623b      	str	r3, [r7, #32]
}
 80067c6:	bf00      	nop
 80067c8:	e7fe      	b.n	80067c8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80067ca:	4b1a      	ldr	r3, [pc, #104]	; (8006834 <xTimerGenericCommand+0x98>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d02a      	beq.n	8006828 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	2b05      	cmp	r3, #5
 80067e2:	dc18      	bgt.n	8006816 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80067e4:	f7ff feb2 	bl	800654c <xTaskGetSchedulerState>
 80067e8:	4603      	mov	r3, r0
 80067ea:	2b02      	cmp	r3, #2
 80067ec:	d109      	bne.n	8006802 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80067ee:	4b11      	ldr	r3, [pc, #68]	; (8006834 <xTimerGenericCommand+0x98>)
 80067f0:	6818      	ldr	r0, [r3, #0]
 80067f2:	f107 0110 	add.w	r1, r7, #16
 80067f6:	2300      	movs	r3, #0
 80067f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80067fa:	f7fe fb85 	bl	8004f08 <xQueueGenericSend>
 80067fe:	6278      	str	r0, [r7, #36]	; 0x24
 8006800:	e012      	b.n	8006828 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006802:	4b0c      	ldr	r3, [pc, #48]	; (8006834 <xTimerGenericCommand+0x98>)
 8006804:	6818      	ldr	r0, [r3, #0]
 8006806:	f107 0110 	add.w	r1, r7, #16
 800680a:	2300      	movs	r3, #0
 800680c:	2200      	movs	r2, #0
 800680e:	f7fe fb7b 	bl	8004f08 <xQueueGenericSend>
 8006812:	6278      	str	r0, [r7, #36]	; 0x24
 8006814:	e008      	b.n	8006828 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006816:	4b07      	ldr	r3, [pc, #28]	; (8006834 <xTimerGenericCommand+0x98>)
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	f107 0110 	add.w	r1, r7, #16
 800681e:	2300      	movs	r3, #0
 8006820:	683a      	ldr	r2, [r7, #0]
 8006822:	f7fe fc6f 	bl	8005104 <xQueueGenericSendFromISR>
 8006826:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800682a:	4618      	mov	r0, r3
 800682c:	3728      	adds	r7, #40	; 0x28
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	20000b5c 	.word	0x20000b5c

08006838 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b088      	sub	sp, #32
 800683c:	af02      	add	r7, sp, #8
 800683e:	6078      	str	r0, [r7, #4]
 8006840:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006842:	4b22      	ldr	r3, [pc, #136]	; (80068cc <prvProcessExpiredTimer+0x94>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800684c:	697b      	ldr	r3, [r7, #20]
 800684e:	3304      	adds	r3, #4
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe f9f1 	bl	8004c38 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006856:	697b      	ldr	r3, [r7, #20]
 8006858:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800685c:	f003 0304 	and.w	r3, r3, #4
 8006860:	2b00      	cmp	r3, #0
 8006862:	d022      	beq.n	80068aa <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006864:	697b      	ldr	r3, [r7, #20]
 8006866:	699a      	ldr	r2, [r3, #24]
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	18d1      	adds	r1, r2, r3
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	683a      	ldr	r2, [r7, #0]
 8006870:	6978      	ldr	r0, [r7, #20]
 8006872:	f000 f8d1 	bl	8006a18 <prvInsertTimerInActiveList>
 8006876:	4603      	mov	r3, r0
 8006878:	2b00      	cmp	r3, #0
 800687a:	d01f      	beq.n	80068bc <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800687c:	2300      	movs	r3, #0
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	2300      	movs	r3, #0
 8006882:	687a      	ldr	r2, [r7, #4]
 8006884:	2100      	movs	r1, #0
 8006886:	6978      	ldr	r0, [r7, #20]
 8006888:	f7ff ff88 	bl	800679c <xTimerGenericCommand>
 800688c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800688e:	693b      	ldr	r3, [r7, #16]
 8006890:	2b00      	cmp	r3, #0
 8006892:	d113      	bne.n	80068bc <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006894:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006898:	f383 8811 	msr	BASEPRI, r3
 800689c:	f3bf 8f6f 	isb	sy
 80068a0:	f3bf 8f4f 	dsb	sy
 80068a4:	60fb      	str	r3, [r7, #12]
}
 80068a6:	bf00      	nop
 80068a8:	e7fe      	b.n	80068a8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80068aa:	697b      	ldr	r3, [r7, #20]
 80068ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80068b0:	f023 0301 	bic.w	r3, r3, #1
 80068b4:	b2da      	uxtb	r2, r3
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	6a1b      	ldr	r3, [r3, #32]
 80068c0:	6978      	ldr	r0, [r7, #20]
 80068c2:	4798      	blx	r3
}
 80068c4:	bf00      	nop
 80068c6:	3718      	adds	r7, #24
 80068c8:	46bd      	mov	sp, r7
 80068ca:	bd80      	pop	{r7, pc}
 80068cc:	20000b54 	.word	0x20000b54

080068d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80068d0:	b580      	push	{r7, lr}
 80068d2:	b084      	sub	sp, #16
 80068d4:	af00      	add	r7, sp, #0
 80068d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068d8:	f107 0308 	add.w	r3, r7, #8
 80068dc:	4618      	mov	r0, r3
 80068de:	f000 f857 	bl	8006990 <prvGetNextExpireTime>
 80068e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80068e4:	68bb      	ldr	r3, [r7, #8]
 80068e6:	4619      	mov	r1, r3
 80068e8:	68f8      	ldr	r0, [r7, #12]
 80068ea:	f000 f803 	bl	80068f4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80068ee:	f000 f8d5 	bl	8006a9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80068f2:	e7f1      	b.n	80068d8 <prvTimerTask+0x8>

080068f4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80068fe:	f7ff fa39 	bl	8005d74 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006902:	f107 0308 	add.w	r3, r7, #8
 8006906:	4618      	mov	r0, r3
 8006908:	f000 f866 	bl	80069d8 <prvSampleTimeNow>
 800690c:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800690e:	68bb      	ldr	r3, [r7, #8]
 8006910:	2b00      	cmp	r3, #0
 8006912:	d130      	bne.n	8006976 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	2b00      	cmp	r3, #0
 8006918:	d10a      	bne.n	8006930 <prvProcessTimerOrBlockTask+0x3c>
 800691a:	687a      	ldr	r2, [r7, #4]
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	429a      	cmp	r2, r3
 8006920:	d806      	bhi.n	8006930 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006922:	f7ff fa35 	bl	8005d90 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006926:	68f9      	ldr	r1, [r7, #12]
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f7ff ff85 	bl	8006838 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800692e:	e024      	b.n	800697a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	2b00      	cmp	r3, #0
 8006934:	d008      	beq.n	8006948 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006936:	4b13      	ldr	r3, [pc, #76]	; (8006984 <prvProcessTimerOrBlockTask+0x90>)
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d101      	bne.n	8006944 <prvProcessTimerOrBlockTask+0x50>
 8006940:	2301      	movs	r3, #1
 8006942:	e000      	b.n	8006946 <prvProcessTimerOrBlockTask+0x52>
 8006944:	2300      	movs	r3, #0
 8006946:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006948:	4b0f      	ldr	r3, [pc, #60]	; (8006988 <prvProcessTimerOrBlockTask+0x94>)
 800694a:	6818      	ldr	r0, [r3, #0]
 800694c:	687a      	ldr	r2, [r7, #4]
 800694e:	68fb      	ldr	r3, [r7, #12]
 8006950:	1ad3      	subs	r3, r2, r3
 8006952:	683a      	ldr	r2, [r7, #0]
 8006954:	4619      	mov	r1, r3
 8006956:	f7fe ff0b 	bl	8005770 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800695a:	f7ff fa19 	bl	8005d90 <xTaskResumeAll>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d10a      	bne.n	800697a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006964:	4b09      	ldr	r3, [pc, #36]	; (800698c <prvProcessTimerOrBlockTask+0x98>)
 8006966:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800696a:	601a      	str	r2, [r3, #0]
 800696c:	f3bf 8f4f 	dsb	sy
 8006970:	f3bf 8f6f 	isb	sy
}
 8006974:	e001      	b.n	800697a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006976:	f7ff fa0b 	bl	8005d90 <xTaskResumeAll>
}
 800697a:	bf00      	nop
 800697c:	3710      	adds	r7, #16
 800697e:	46bd      	mov	sp, r7
 8006980:	bd80      	pop	{r7, pc}
 8006982:	bf00      	nop
 8006984:	20000b58 	.word	0x20000b58
 8006988:	20000b5c 	.word	0x20000b5c
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006990:	b480      	push	{r7}
 8006992:	b085      	sub	sp, #20
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006998:	4b0e      	ldr	r3, [pc, #56]	; (80069d4 <prvGetNextExpireTime+0x44>)
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d101      	bne.n	80069a6 <prvGetNextExpireTime+0x16>
 80069a2:	2201      	movs	r2, #1
 80069a4:	e000      	b.n	80069a8 <prvGetNextExpireTime+0x18>
 80069a6:	2200      	movs	r2, #0
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d105      	bne.n	80069c0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80069b4:	4b07      	ldr	r3, [pc, #28]	; (80069d4 <prvGetNextExpireTime+0x44>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	68db      	ldr	r3, [r3, #12]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	60fb      	str	r3, [r7, #12]
 80069be:	e001      	b.n	80069c4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80069c0:	2300      	movs	r3, #0
 80069c2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80069c4:	68fb      	ldr	r3, [r7, #12]
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3714      	adds	r7, #20
 80069ca:	46bd      	mov	sp, r7
 80069cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d0:	4770      	bx	lr
 80069d2:	bf00      	nop
 80069d4:	20000b54 	.word	0x20000b54

080069d8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80069d8:	b580      	push	{r7, lr}
 80069da:	b084      	sub	sp, #16
 80069dc:	af00      	add	r7, sp, #0
 80069de:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80069e0:	f7ff fa74 	bl	8005ecc <xTaskGetTickCount>
 80069e4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80069e6:	4b0b      	ldr	r3, [pc, #44]	; (8006a14 <prvSampleTimeNow+0x3c>)
 80069e8:	681b      	ldr	r3, [r3, #0]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	429a      	cmp	r2, r3
 80069ee:	d205      	bcs.n	80069fc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80069f0:	f000 f936 	bl	8006c60 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2201      	movs	r2, #1
 80069f8:	601a      	str	r2, [r3, #0]
 80069fa:	e002      	b.n	8006a02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	2200      	movs	r2, #0
 8006a00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006a02:	4a04      	ldr	r2, [pc, #16]	; (8006a14 <prvSampleTimeNow+0x3c>)
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006a08:	68fb      	ldr	r3, [r7, #12]
}
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	3710      	adds	r7, #16
 8006a0e:	46bd      	mov	sp, r7
 8006a10:	bd80      	pop	{r7, pc}
 8006a12:	bf00      	nop
 8006a14:	20000b64 	.word	0x20000b64

08006a18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006a18:	b580      	push	{r7, lr}
 8006a1a:	b086      	sub	sp, #24
 8006a1c:	af00      	add	r7, sp, #0
 8006a1e:	60f8      	str	r0, [r7, #12]
 8006a20:	60b9      	str	r1, [r7, #8]
 8006a22:	607a      	str	r2, [r7, #4]
 8006a24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006a26:	2300      	movs	r3, #0
 8006a28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006a30:	68fb      	ldr	r3, [r7, #12]
 8006a32:	68fa      	ldr	r2, [r7, #12]
 8006a34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006a36:	68ba      	ldr	r2, [r7, #8]
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	429a      	cmp	r2, r3
 8006a3c:	d812      	bhi.n	8006a64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a3e:	687a      	ldr	r2, [r7, #4]
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	1ad2      	subs	r2, r2, r3
 8006a44:	68fb      	ldr	r3, [r7, #12]
 8006a46:	699b      	ldr	r3, [r3, #24]
 8006a48:	429a      	cmp	r2, r3
 8006a4a:	d302      	bcc.n	8006a52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006a4c:	2301      	movs	r3, #1
 8006a4e:	617b      	str	r3, [r7, #20]
 8006a50:	e01b      	b.n	8006a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006a52:	4b10      	ldr	r3, [pc, #64]	; (8006a94 <prvInsertTimerInActiveList+0x7c>)
 8006a54:	681a      	ldr	r2, [r3, #0]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	3304      	adds	r3, #4
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4610      	mov	r0, r2
 8006a5e:	f7fe f8b2 	bl	8004bc6 <vListInsert>
 8006a62:	e012      	b.n	8006a8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006a64:	687a      	ldr	r2, [r7, #4]
 8006a66:	683b      	ldr	r3, [r7, #0]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d206      	bcs.n	8006a7a <prvInsertTimerInActiveList+0x62>
 8006a6c:	68ba      	ldr	r2, [r7, #8]
 8006a6e:	683b      	ldr	r3, [r7, #0]
 8006a70:	429a      	cmp	r2, r3
 8006a72:	d302      	bcc.n	8006a7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006a74:	2301      	movs	r3, #1
 8006a76:	617b      	str	r3, [r7, #20]
 8006a78:	e007      	b.n	8006a8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006a7a:	4b07      	ldr	r3, [pc, #28]	; (8006a98 <prvInsertTimerInActiveList+0x80>)
 8006a7c:	681a      	ldr	r2, [r3, #0]
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	3304      	adds	r3, #4
 8006a82:	4619      	mov	r1, r3
 8006a84:	4610      	mov	r0, r2
 8006a86:	f7fe f89e 	bl	8004bc6 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006a8a:	697b      	ldr	r3, [r7, #20]
}
 8006a8c:	4618      	mov	r0, r3
 8006a8e:	3718      	adds	r7, #24
 8006a90:	46bd      	mov	sp, r7
 8006a92:	bd80      	pop	{r7, pc}
 8006a94:	20000b58 	.word	0x20000b58
 8006a98:	20000b54 	.word	0x20000b54

08006a9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006a9c:	b580      	push	{r7, lr}
 8006a9e:	b08e      	sub	sp, #56	; 0x38
 8006aa0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006aa2:	e0ca      	b.n	8006c3a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	da18      	bge.n	8006adc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006aaa:	1d3b      	adds	r3, r7, #4
 8006aac:	3304      	adds	r3, #4
 8006aae:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006ab0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10a      	bne.n	8006acc <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006ab6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006aba:	f383 8811 	msr	BASEPRI, r3
 8006abe:	f3bf 8f6f 	isb	sy
 8006ac2:	f3bf 8f4f 	dsb	sy
 8006ac6:	61fb      	str	r3, [r7, #28]
}
 8006ac8:	bf00      	nop
 8006aca:	e7fe      	b.n	8006aca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006ace:	681b      	ldr	r3, [r3, #0]
 8006ad0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad2:	6850      	ldr	r0, [r2, #4]
 8006ad4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006ad6:	6892      	ldr	r2, [r2, #8]
 8006ad8:	4611      	mov	r1, r2
 8006ada:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	f2c0 80aa 	blt.w	8006c38 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006aea:	695b      	ldr	r3, [r3, #20]
 8006aec:	2b00      	cmp	r3, #0
 8006aee:	d004      	beq.n	8006afa <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006af2:	3304      	adds	r3, #4
 8006af4:	4618      	mov	r0, r3
 8006af6:	f7fe f89f 	bl	8004c38 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006afa:	463b      	mov	r3, r7
 8006afc:	4618      	mov	r0, r3
 8006afe:	f7ff ff6b 	bl	80069d8 <prvSampleTimeNow>
 8006b02:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	2b09      	cmp	r3, #9
 8006b08:	f200 8097 	bhi.w	8006c3a <prvProcessReceivedCommands+0x19e>
 8006b0c:	a201      	add	r2, pc, #4	; (adr r2, 8006b14 <prvProcessReceivedCommands+0x78>)
 8006b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b12:	bf00      	nop
 8006b14:	08006b3d 	.word	0x08006b3d
 8006b18:	08006b3d 	.word	0x08006b3d
 8006b1c:	08006b3d 	.word	0x08006b3d
 8006b20:	08006bb1 	.word	0x08006bb1
 8006b24:	08006bc5 	.word	0x08006bc5
 8006b28:	08006c0f 	.word	0x08006c0f
 8006b2c:	08006b3d 	.word	0x08006b3d
 8006b30:	08006b3d 	.word	0x08006b3d
 8006b34:	08006bb1 	.word	0x08006bb1
 8006b38:	08006bc5 	.word	0x08006bc5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b3e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b42:	f043 0301 	orr.w	r3, r3, #1
 8006b46:	b2da      	uxtb	r2, r3
 8006b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b4a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006b4e:	68ba      	ldr	r2, [r7, #8]
 8006b50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b52:	699b      	ldr	r3, [r3, #24]
 8006b54:	18d1      	adds	r1, r2, r3
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006b5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b5c:	f7ff ff5c 	bl	8006a18 <prvInsertTimerInActiveList>
 8006b60:	4603      	mov	r3, r0
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d069      	beq.n	8006c3a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b68:	6a1b      	ldr	r3, [r3, #32]
 8006b6a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006b6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b70:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006b74:	f003 0304 	and.w	r3, r3, #4
 8006b78:	2b00      	cmp	r3, #0
 8006b7a:	d05e      	beq.n	8006c3a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006b7c:	68ba      	ldr	r2, [r7, #8]
 8006b7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b80:	699b      	ldr	r3, [r3, #24]
 8006b82:	441a      	add	r2, r3
 8006b84:	2300      	movs	r3, #0
 8006b86:	9300      	str	r3, [sp, #0]
 8006b88:	2300      	movs	r3, #0
 8006b8a:	2100      	movs	r1, #0
 8006b8c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006b8e:	f7ff fe05 	bl	800679c <xTimerGenericCommand>
 8006b92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006b94:	6a3b      	ldr	r3, [r7, #32]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d14f      	bne.n	8006c3a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006b9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b9e:	f383 8811 	msr	BASEPRI, r3
 8006ba2:	f3bf 8f6f 	isb	sy
 8006ba6:	f3bf 8f4f 	dsb	sy
 8006baa:	61bb      	str	r3, [r7, #24]
}
 8006bac:	bf00      	nop
 8006bae:	e7fe      	b.n	8006bae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bb2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bb6:	f023 0301 	bic.w	r3, r3, #1
 8006bba:	b2da      	uxtb	r2, r3
 8006bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bbe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006bc2:	e03a      	b.n	8006c3a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006bc4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bc6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	b2da      	uxtb	r2, r3
 8006bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006bd6:	68ba      	ldr	r2, [r7, #8]
 8006bd8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bda:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006bdc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bde:	699b      	ldr	r3, [r3, #24]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d10a      	bne.n	8006bfa <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be8:	f383 8811 	msr	BASEPRI, r3
 8006bec:	f3bf 8f6f 	isb	sy
 8006bf0:	f3bf 8f4f 	dsb	sy
 8006bf4:	617b      	str	r3, [r7, #20]
}
 8006bf6:	bf00      	nop
 8006bf8:	e7fe      	b.n	8006bf8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006bfc:	699a      	ldr	r2, [r3, #24]
 8006bfe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c00:	18d1      	adds	r1, r2, r3
 8006c02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006c06:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c08:	f7ff ff06 	bl	8006a18 <prvInsertTimerInActiveList>
					break;
 8006c0c:	e015      	b.n	8006c3a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006c0e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d103      	bne.n	8006c24 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006c1c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006c1e:	f000 fbdf 	bl	80073e0 <vPortFree>
 8006c22:	e00a      	b.n	8006c3a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c26:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c2a:	f023 0301 	bic.w	r3, r3, #1
 8006c2e:	b2da      	uxtb	r2, r3
 8006c30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c32:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006c36:	e000      	b.n	8006c3a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8006c38:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006c3a:	4b08      	ldr	r3, [pc, #32]	; (8006c5c <prvProcessReceivedCommands+0x1c0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	1d39      	adds	r1, r7, #4
 8006c40:	2200      	movs	r2, #0
 8006c42:	4618      	mov	r0, r3
 8006c44:	f7fe fafa 	bl	800523c <xQueueReceive>
 8006c48:	4603      	mov	r3, r0
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	f47f af2a 	bne.w	8006aa4 <prvProcessReceivedCommands+0x8>
	}
}
 8006c50:	bf00      	nop
 8006c52:	bf00      	nop
 8006c54:	3730      	adds	r7, #48	; 0x30
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	20000b5c 	.word	0x20000b5c

08006c60 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006c60:	b580      	push	{r7, lr}
 8006c62:	b088      	sub	sp, #32
 8006c64:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006c66:	e048      	b.n	8006cfa <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006c68:	4b2d      	ldr	r3, [pc, #180]	; (8006d20 <prvSwitchTimerLists+0xc0>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	68db      	ldr	r3, [r3, #12]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c72:	4b2b      	ldr	r3, [pc, #172]	; (8006d20 <prvSwitchTimerLists+0xc0>)
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	68db      	ldr	r3, [r3, #12]
 8006c78:	68db      	ldr	r3, [r3, #12]
 8006c7a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	3304      	adds	r3, #4
 8006c80:	4618      	mov	r0, r3
 8006c82:	f7fd ffd9 	bl	8004c38 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	6a1b      	ldr	r3, [r3, #32]
 8006c8a:	68f8      	ldr	r0, [r7, #12]
 8006c8c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c8e:	68fb      	ldr	r3, [r7, #12]
 8006c90:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006c94:	f003 0304 	and.w	r3, r3, #4
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d02e      	beq.n	8006cfa <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006c9c:	68fb      	ldr	r3, [r7, #12]
 8006c9e:	699b      	ldr	r3, [r3, #24]
 8006ca0:	693a      	ldr	r2, [r7, #16]
 8006ca2:	4413      	add	r3, r2
 8006ca4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ca6:	68ba      	ldr	r2, [r7, #8]
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	429a      	cmp	r2, r3
 8006cac:	d90e      	bls.n	8006ccc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	68ba      	ldr	r2, [r7, #8]
 8006cb2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006cba:	4b19      	ldr	r3, [pc, #100]	; (8006d20 <prvSwitchTimerLists+0xc0>)
 8006cbc:	681a      	ldr	r2, [r3, #0]
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	3304      	adds	r3, #4
 8006cc2:	4619      	mov	r1, r3
 8006cc4:	4610      	mov	r0, r2
 8006cc6:	f7fd ff7e 	bl	8004bc6 <vListInsert>
 8006cca:	e016      	b.n	8006cfa <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006ccc:	2300      	movs	r3, #0
 8006cce:	9300      	str	r3, [sp, #0]
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	693a      	ldr	r2, [r7, #16]
 8006cd4:	2100      	movs	r1, #0
 8006cd6:	68f8      	ldr	r0, [r7, #12]
 8006cd8:	f7ff fd60 	bl	800679c <xTimerGenericCommand>
 8006cdc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006cde:	687b      	ldr	r3, [r7, #4]
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d10a      	bne.n	8006cfa <prvSwitchTimerLists+0x9a>
	__asm volatile
 8006ce4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ce8:	f383 8811 	msr	BASEPRI, r3
 8006cec:	f3bf 8f6f 	isb	sy
 8006cf0:	f3bf 8f4f 	dsb	sy
 8006cf4:	603b      	str	r3, [r7, #0]
}
 8006cf6:	bf00      	nop
 8006cf8:	e7fe      	b.n	8006cf8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006cfa:	4b09      	ldr	r3, [pc, #36]	; (8006d20 <prvSwitchTimerLists+0xc0>)
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	2b00      	cmp	r3, #0
 8006d02:	d1b1      	bne.n	8006c68 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006d04:	4b06      	ldr	r3, [pc, #24]	; (8006d20 <prvSwitchTimerLists+0xc0>)
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006d0a:	4b06      	ldr	r3, [pc, #24]	; (8006d24 <prvSwitchTimerLists+0xc4>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	4a04      	ldr	r2, [pc, #16]	; (8006d20 <prvSwitchTimerLists+0xc0>)
 8006d10:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006d12:	4a04      	ldr	r2, [pc, #16]	; (8006d24 <prvSwitchTimerLists+0xc4>)
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	6013      	str	r3, [r2, #0]
}
 8006d18:	bf00      	nop
 8006d1a:	3718      	adds	r7, #24
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000b54 	.word	0x20000b54
 8006d24:	20000b58 	.word	0x20000b58

08006d28 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006d28:	b580      	push	{r7, lr}
 8006d2a:	b082      	sub	sp, #8
 8006d2c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006d2e:	f000 f969 	bl	8007004 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006d32:	4b15      	ldr	r3, [pc, #84]	; (8006d88 <prvCheckForValidListAndQueue+0x60>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d120      	bne.n	8006d7c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006d3a:	4814      	ldr	r0, [pc, #80]	; (8006d8c <prvCheckForValidListAndQueue+0x64>)
 8006d3c:	f7fd fef2 	bl	8004b24 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006d40:	4813      	ldr	r0, [pc, #76]	; (8006d90 <prvCheckForValidListAndQueue+0x68>)
 8006d42:	f7fd feef 	bl	8004b24 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006d46:	4b13      	ldr	r3, [pc, #76]	; (8006d94 <prvCheckForValidListAndQueue+0x6c>)
 8006d48:	4a10      	ldr	r2, [pc, #64]	; (8006d8c <prvCheckForValidListAndQueue+0x64>)
 8006d4a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006d4c:	4b12      	ldr	r3, [pc, #72]	; (8006d98 <prvCheckForValidListAndQueue+0x70>)
 8006d4e:	4a10      	ldr	r2, [pc, #64]	; (8006d90 <prvCheckForValidListAndQueue+0x68>)
 8006d50:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006d52:	2300      	movs	r3, #0
 8006d54:	9300      	str	r3, [sp, #0]
 8006d56:	4b11      	ldr	r3, [pc, #68]	; (8006d9c <prvCheckForValidListAndQueue+0x74>)
 8006d58:	4a11      	ldr	r2, [pc, #68]	; (8006da0 <prvCheckForValidListAndQueue+0x78>)
 8006d5a:	2110      	movs	r1, #16
 8006d5c:	200a      	movs	r0, #10
 8006d5e:	f7fd fffd 	bl	8004d5c <xQueueGenericCreateStatic>
 8006d62:	4603      	mov	r3, r0
 8006d64:	4a08      	ldr	r2, [pc, #32]	; (8006d88 <prvCheckForValidListAndQueue+0x60>)
 8006d66:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006d68:	4b07      	ldr	r3, [pc, #28]	; (8006d88 <prvCheckForValidListAndQueue+0x60>)
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d005      	beq.n	8006d7c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006d70:	4b05      	ldr	r3, [pc, #20]	; (8006d88 <prvCheckForValidListAndQueue+0x60>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	490b      	ldr	r1, [pc, #44]	; (8006da4 <prvCheckForValidListAndQueue+0x7c>)
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fe fcd0 	bl	800571c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006d7c:	f000 f972 	bl	8007064 <vPortExitCritical>
}
 8006d80:	bf00      	nop
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000b5c 	.word	0x20000b5c
 8006d8c:	20000b2c 	.word	0x20000b2c
 8006d90:	20000b40 	.word	0x20000b40
 8006d94:	20000b54 	.word	0x20000b54
 8006d98:	20000b58 	.word	0x20000b58
 8006d9c:	20000c08 	.word	0x20000c08
 8006da0:	20000b68 	.word	0x20000b68
 8006da4:	08009318 	.word	0x08009318

08006da8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006da8:	b480      	push	{r7}
 8006daa:	b085      	sub	sp, #20
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	60f8      	str	r0, [r7, #12]
 8006db0:	60b9      	str	r1, [r7, #8]
 8006db2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	3b04      	subs	r3, #4
 8006db8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8006dc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	3b04      	subs	r3, #4
 8006dc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006dc8:	68bb      	ldr	r3, [r7, #8]
 8006dca:	f023 0201 	bic.w	r2, r3, #1
 8006dce:	68fb      	ldr	r3, [r7, #12]
 8006dd0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006dd2:	68fb      	ldr	r3, [r7, #12]
 8006dd4:	3b04      	subs	r3, #4
 8006dd6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006dd8:	4a0c      	ldr	r2, [pc, #48]	; (8006e0c <pxPortInitialiseStack+0x64>)
 8006dda:	68fb      	ldr	r3, [r7, #12]
 8006ddc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	3b14      	subs	r3, #20
 8006de2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006de4:	687a      	ldr	r2, [r7, #4]
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	3b04      	subs	r3, #4
 8006dee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	f06f 0202 	mvn.w	r2, #2
 8006df6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	3b20      	subs	r3, #32
 8006dfc:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006dfe:	68fb      	ldr	r3, [r7, #12]
}
 8006e00:	4618      	mov	r0, r3
 8006e02:	3714      	adds	r7, #20
 8006e04:	46bd      	mov	sp, r7
 8006e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e0a:	4770      	bx	lr
 8006e0c:	08006e11 	.word	0x08006e11

08006e10 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006e16:	2300      	movs	r3, #0
 8006e18:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006e1a:	4b12      	ldr	r3, [pc, #72]	; (8006e64 <prvTaskExitError+0x54>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006e22:	d00a      	beq.n	8006e3a <prvTaskExitError+0x2a>
	__asm volatile
 8006e24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e28:	f383 8811 	msr	BASEPRI, r3
 8006e2c:	f3bf 8f6f 	isb	sy
 8006e30:	f3bf 8f4f 	dsb	sy
 8006e34:	60fb      	str	r3, [r7, #12]
}
 8006e36:	bf00      	nop
 8006e38:	e7fe      	b.n	8006e38 <prvTaskExitError+0x28>
	__asm volatile
 8006e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e3e:	f383 8811 	msr	BASEPRI, r3
 8006e42:	f3bf 8f6f 	isb	sy
 8006e46:	f3bf 8f4f 	dsb	sy
 8006e4a:	60bb      	str	r3, [r7, #8]
}
 8006e4c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006e4e:	bf00      	nop
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d0fc      	beq.n	8006e50 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006e56:	bf00      	nop
 8006e58:	bf00      	nop
 8006e5a:	3714      	adds	r7, #20
 8006e5c:	46bd      	mov	sp, r7
 8006e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e62:	4770      	bx	lr
 8006e64:	2000000c 	.word	0x2000000c
	...

08006e70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006e70:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <pxCurrentTCBConst2>)
 8006e72:	6819      	ldr	r1, [r3, #0]
 8006e74:	6808      	ldr	r0, [r1, #0]
 8006e76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006e7a:	f380 8809 	msr	PSP, r0
 8006e7e:	f3bf 8f6f 	isb	sy
 8006e82:	f04f 0000 	mov.w	r0, #0
 8006e86:	f380 8811 	msr	BASEPRI, r0
 8006e8a:	4770      	bx	lr
 8006e8c:	f3af 8000 	nop.w

08006e90 <pxCurrentTCBConst2>:
 8006e90:	2000062c 	.word	0x2000062c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006e94:	bf00      	nop
 8006e96:	bf00      	nop

08006e98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006e98:	4808      	ldr	r0, [pc, #32]	; (8006ebc <prvPortStartFirstTask+0x24>)
 8006e9a:	6800      	ldr	r0, [r0, #0]
 8006e9c:	6800      	ldr	r0, [r0, #0]
 8006e9e:	f380 8808 	msr	MSP, r0
 8006ea2:	f04f 0000 	mov.w	r0, #0
 8006ea6:	f380 8814 	msr	CONTROL, r0
 8006eaa:	b662      	cpsie	i
 8006eac:	b661      	cpsie	f
 8006eae:	f3bf 8f4f 	dsb	sy
 8006eb2:	f3bf 8f6f 	isb	sy
 8006eb6:	df00      	svc	0
 8006eb8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006eba:	bf00      	nop
 8006ebc:	e000ed08 	.word	0xe000ed08

08006ec0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b086      	sub	sp, #24
 8006ec4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006ec6:	4b46      	ldr	r3, [pc, #280]	; (8006fe0 <xPortStartScheduler+0x120>)
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	4a46      	ldr	r2, [pc, #280]	; (8006fe4 <xPortStartScheduler+0x124>)
 8006ecc:	4293      	cmp	r3, r2
 8006ece:	d10a      	bne.n	8006ee6 <xPortStartScheduler+0x26>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	613b      	str	r3, [r7, #16]
}
 8006ee2:	bf00      	nop
 8006ee4:	e7fe      	b.n	8006ee4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006ee6:	4b3e      	ldr	r3, [pc, #248]	; (8006fe0 <xPortStartScheduler+0x120>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	4a3f      	ldr	r2, [pc, #252]	; (8006fe8 <xPortStartScheduler+0x128>)
 8006eec:	4293      	cmp	r3, r2
 8006eee:	d10a      	bne.n	8006f06 <xPortStartScheduler+0x46>
	__asm volatile
 8006ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ef4:	f383 8811 	msr	BASEPRI, r3
 8006ef8:	f3bf 8f6f 	isb	sy
 8006efc:	f3bf 8f4f 	dsb	sy
 8006f00:	60fb      	str	r3, [r7, #12]
}
 8006f02:	bf00      	nop
 8006f04:	e7fe      	b.n	8006f04 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006f06:	4b39      	ldr	r3, [pc, #228]	; (8006fec <xPortStartScheduler+0x12c>)
 8006f08:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006f0a:	697b      	ldr	r3, [r7, #20]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	b2db      	uxtb	r3, r3
 8006f10:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	22ff      	movs	r2, #255	; 0xff
 8006f16:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	781b      	ldrb	r3, [r3, #0]
 8006f1c:	b2db      	uxtb	r3, r3
 8006f1e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006f20:	78fb      	ldrb	r3, [r7, #3]
 8006f22:	b2db      	uxtb	r3, r3
 8006f24:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8006f28:	b2da      	uxtb	r2, r3
 8006f2a:	4b31      	ldr	r3, [pc, #196]	; (8006ff0 <xPortStartScheduler+0x130>)
 8006f2c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006f2e:	4b31      	ldr	r3, [pc, #196]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f30:	2207      	movs	r2, #7
 8006f32:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f34:	e009      	b.n	8006f4a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8006f36:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f38:	681b      	ldr	r3, [r3, #0]
 8006f3a:	3b01      	subs	r3, #1
 8006f3c:	4a2d      	ldr	r2, [pc, #180]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f3e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006f40:	78fb      	ldrb	r3, [r7, #3]
 8006f42:	b2db      	uxtb	r3, r3
 8006f44:	005b      	lsls	r3, r3, #1
 8006f46:	b2db      	uxtb	r3, r3
 8006f48:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006f4a:	78fb      	ldrb	r3, [r7, #3]
 8006f4c:	b2db      	uxtb	r3, r3
 8006f4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f52:	2b80      	cmp	r3, #128	; 0x80
 8006f54:	d0ef      	beq.n	8006f36 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8006f56:	4b27      	ldr	r3, [pc, #156]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	f1c3 0307 	rsb	r3, r3, #7
 8006f5e:	2b04      	cmp	r3, #4
 8006f60:	d00a      	beq.n	8006f78 <xPortStartScheduler+0xb8>
	__asm volatile
 8006f62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f66:	f383 8811 	msr	BASEPRI, r3
 8006f6a:	f3bf 8f6f 	isb	sy
 8006f6e:	f3bf 8f4f 	dsb	sy
 8006f72:	60bb      	str	r3, [r7, #8]
}
 8006f74:	bf00      	nop
 8006f76:	e7fe      	b.n	8006f76 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8006f78:	4b1e      	ldr	r3, [pc, #120]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f7a:	681b      	ldr	r3, [r3, #0]
 8006f7c:	021b      	lsls	r3, r3, #8
 8006f7e:	4a1d      	ldr	r2, [pc, #116]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f80:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8006f82:	4b1c      	ldr	r3, [pc, #112]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8006f8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ff4 <xPortStartScheduler+0x134>)
 8006f8c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	b2da      	uxtb	r2, r3
 8006f92:	697b      	ldr	r3, [r7, #20]
 8006f94:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8006f96:	4b18      	ldr	r3, [pc, #96]	; (8006ff8 <xPortStartScheduler+0x138>)
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	4a17      	ldr	r2, [pc, #92]	; (8006ff8 <xPortStartScheduler+0x138>)
 8006f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006fa0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8006fa2:	4b15      	ldr	r3, [pc, #84]	; (8006ff8 <xPortStartScheduler+0x138>)
 8006fa4:	681b      	ldr	r3, [r3, #0]
 8006fa6:	4a14      	ldr	r2, [pc, #80]	; (8006ff8 <xPortStartScheduler+0x138>)
 8006fa8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8006fac:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8006fae:	f000 f8dd 	bl	800716c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8006fb2:	4b12      	ldr	r3, [pc, #72]	; (8006ffc <xPortStartScheduler+0x13c>)
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8006fb8:	f000 f8fc 	bl	80071b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8006fbc:	4b10      	ldr	r3, [pc, #64]	; (8007000 <xPortStartScheduler+0x140>)
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	4a0f      	ldr	r2, [pc, #60]	; (8007000 <xPortStartScheduler+0x140>)
 8006fc2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8006fc6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8006fc8:	f7ff ff66 	bl	8006e98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8006fcc:	f7ff f848 	bl	8006060 <vTaskSwitchContext>
	prvTaskExitError();
 8006fd0:	f7ff ff1e 	bl	8006e10 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3718      	adds	r7, #24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}
 8006fde:	bf00      	nop
 8006fe0:	e000ed00 	.word	0xe000ed00
 8006fe4:	410fc271 	.word	0x410fc271
 8006fe8:	410fc270 	.word	0x410fc270
 8006fec:	e000e400 	.word	0xe000e400
 8006ff0:	20000c58 	.word	0x20000c58
 8006ff4:	20000c5c 	.word	0x20000c5c
 8006ff8:	e000ed20 	.word	0xe000ed20
 8006ffc:	2000000c 	.word	0x2000000c
 8007000:	e000ef34 	.word	0xe000ef34

08007004 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007004:	b480      	push	{r7}
 8007006:	b083      	sub	sp, #12
 8007008:	af00      	add	r7, sp, #0
	__asm volatile
 800700a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800700e:	f383 8811 	msr	BASEPRI, r3
 8007012:	f3bf 8f6f 	isb	sy
 8007016:	f3bf 8f4f 	dsb	sy
 800701a:	607b      	str	r3, [r7, #4]
}
 800701c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800701e:	4b0f      	ldr	r3, [pc, #60]	; (800705c <vPortEnterCritical+0x58>)
 8007020:	681b      	ldr	r3, [r3, #0]
 8007022:	3301      	adds	r3, #1
 8007024:	4a0d      	ldr	r2, [pc, #52]	; (800705c <vPortEnterCritical+0x58>)
 8007026:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007028:	4b0c      	ldr	r3, [pc, #48]	; (800705c <vPortEnterCritical+0x58>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d10f      	bne.n	8007050 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007030:	4b0b      	ldr	r3, [pc, #44]	; (8007060 <vPortEnterCritical+0x5c>)
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	b2db      	uxtb	r3, r3
 8007036:	2b00      	cmp	r3, #0
 8007038:	d00a      	beq.n	8007050 <vPortEnterCritical+0x4c>
	__asm volatile
 800703a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800703e:	f383 8811 	msr	BASEPRI, r3
 8007042:	f3bf 8f6f 	isb	sy
 8007046:	f3bf 8f4f 	dsb	sy
 800704a:	603b      	str	r3, [r7, #0]
}
 800704c:	bf00      	nop
 800704e:	e7fe      	b.n	800704e <vPortEnterCritical+0x4a>
	}
}
 8007050:	bf00      	nop
 8007052:	370c      	adds	r7, #12
 8007054:	46bd      	mov	sp, r7
 8007056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800705a:	4770      	bx	lr
 800705c:	2000000c 	.word	0x2000000c
 8007060:	e000ed04 	.word	0xe000ed04

08007064 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007064:	b480      	push	{r7}
 8007066:	b083      	sub	sp, #12
 8007068:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800706a:	4b12      	ldr	r3, [pc, #72]	; (80070b4 <vPortExitCritical+0x50>)
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	2b00      	cmp	r3, #0
 8007070:	d10a      	bne.n	8007088 <vPortExitCritical+0x24>
	__asm volatile
 8007072:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007076:	f383 8811 	msr	BASEPRI, r3
 800707a:	f3bf 8f6f 	isb	sy
 800707e:	f3bf 8f4f 	dsb	sy
 8007082:	607b      	str	r3, [r7, #4]
}
 8007084:	bf00      	nop
 8007086:	e7fe      	b.n	8007086 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007088:	4b0a      	ldr	r3, [pc, #40]	; (80070b4 <vPortExitCritical+0x50>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	3b01      	subs	r3, #1
 800708e:	4a09      	ldr	r2, [pc, #36]	; (80070b4 <vPortExitCritical+0x50>)
 8007090:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007092:	4b08      	ldr	r3, [pc, #32]	; (80070b4 <vPortExitCritical+0x50>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d105      	bne.n	80070a6 <vPortExitCritical+0x42>
 800709a:	2300      	movs	r3, #0
 800709c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800709e:	683b      	ldr	r3, [r7, #0]
 80070a0:	f383 8811 	msr	BASEPRI, r3
}
 80070a4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80070a6:	bf00      	nop
 80070a8:	370c      	adds	r7, #12
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	2000000c 	.word	0x2000000c
	...

080070c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80070c0:	f3ef 8009 	mrs	r0, PSP
 80070c4:	f3bf 8f6f 	isb	sy
 80070c8:	4b15      	ldr	r3, [pc, #84]	; (8007120 <pxCurrentTCBConst>)
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	f01e 0f10 	tst.w	lr, #16
 80070d0:	bf08      	it	eq
 80070d2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80070d6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070da:	6010      	str	r0, [r2, #0]
 80070dc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80070e0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80070e4:	f380 8811 	msr	BASEPRI, r0
 80070e8:	f3bf 8f4f 	dsb	sy
 80070ec:	f3bf 8f6f 	isb	sy
 80070f0:	f7fe ffb6 	bl	8006060 <vTaskSwitchContext>
 80070f4:	f04f 0000 	mov.w	r0, #0
 80070f8:	f380 8811 	msr	BASEPRI, r0
 80070fc:	bc09      	pop	{r0, r3}
 80070fe:	6819      	ldr	r1, [r3, #0]
 8007100:	6808      	ldr	r0, [r1, #0]
 8007102:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007106:	f01e 0f10 	tst.w	lr, #16
 800710a:	bf08      	it	eq
 800710c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007110:	f380 8809 	msr	PSP, r0
 8007114:	f3bf 8f6f 	isb	sy
 8007118:	4770      	bx	lr
 800711a:	bf00      	nop
 800711c:	f3af 8000 	nop.w

08007120 <pxCurrentTCBConst>:
 8007120:	2000062c 	.word	0x2000062c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007124:	bf00      	nop
 8007126:	bf00      	nop

08007128 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007128:	b580      	push	{r7, lr}
 800712a:	b082      	sub	sp, #8
 800712c:	af00      	add	r7, sp, #0
	__asm volatile
 800712e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007132:	f383 8811 	msr	BASEPRI, r3
 8007136:	f3bf 8f6f 	isb	sy
 800713a:	f3bf 8f4f 	dsb	sy
 800713e:	607b      	str	r3, [r7, #4]
}
 8007140:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007142:	f7fe fed3 	bl	8005eec <xTaskIncrementTick>
 8007146:	4603      	mov	r3, r0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d003      	beq.n	8007154 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800714c:	4b06      	ldr	r3, [pc, #24]	; (8007168 <xPortSysTickHandler+0x40>)
 800714e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007152:	601a      	str	r2, [r3, #0]
 8007154:	2300      	movs	r3, #0
 8007156:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007158:	683b      	ldr	r3, [r7, #0]
 800715a:	f383 8811 	msr	BASEPRI, r3
}
 800715e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007160:	bf00      	nop
 8007162:	3708      	adds	r7, #8
 8007164:	46bd      	mov	sp, r7
 8007166:	bd80      	pop	{r7, pc}
 8007168:	e000ed04 	.word	0xe000ed04

0800716c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800716c:	b480      	push	{r7}
 800716e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007170:	4b0b      	ldr	r3, [pc, #44]	; (80071a0 <vPortSetupTimerInterrupt+0x34>)
 8007172:	2200      	movs	r2, #0
 8007174:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007176:	4b0b      	ldr	r3, [pc, #44]	; (80071a4 <vPortSetupTimerInterrupt+0x38>)
 8007178:	2200      	movs	r2, #0
 800717a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800717c:	4b0a      	ldr	r3, [pc, #40]	; (80071a8 <vPortSetupTimerInterrupt+0x3c>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	4a0a      	ldr	r2, [pc, #40]	; (80071ac <vPortSetupTimerInterrupt+0x40>)
 8007182:	fba2 2303 	umull	r2, r3, r2, r3
 8007186:	099b      	lsrs	r3, r3, #6
 8007188:	4a09      	ldr	r2, [pc, #36]	; (80071b0 <vPortSetupTimerInterrupt+0x44>)
 800718a:	3b01      	subs	r3, #1
 800718c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800718e:	4b04      	ldr	r3, [pc, #16]	; (80071a0 <vPortSetupTimerInterrupt+0x34>)
 8007190:	2207      	movs	r2, #7
 8007192:	601a      	str	r2, [r3, #0]
}
 8007194:	bf00      	nop
 8007196:	46bd      	mov	sp, r7
 8007198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719c:	4770      	bx	lr
 800719e:	bf00      	nop
 80071a0:	e000e010 	.word	0xe000e010
 80071a4:	e000e018 	.word	0xe000e018
 80071a8:	20000000 	.word	0x20000000
 80071ac:	10624dd3 	.word	0x10624dd3
 80071b0:	e000e014 	.word	0xe000e014

080071b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80071b4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80071c4 <vPortEnableVFP+0x10>
 80071b8:	6801      	ldr	r1, [r0, #0]
 80071ba:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80071be:	6001      	str	r1, [r0, #0]
 80071c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80071c2:	bf00      	nop
 80071c4:	e000ed88 	.word	0xe000ed88

080071c8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80071ce:	f3ef 8305 	mrs	r3, IPSR
 80071d2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	2b0f      	cmp	r3, #15
 80071d8:	d914      	bls.n	8007204 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80071da:	4a17      	ldr	r2, [pc, #92]	; (8007238 <vPortValidateInterruptPriority+0x70>)
 80071dc:	68fb      	ldr	r3, [r7, #12]
 80071de:	4413      	add	r3, r2
 80071e0:	781b      	ldrb	r3, [r3, #0]
 80071e2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80071e4:	4b15      	ldr	r3, [pc, #84]	; (800723c <vPortValidateInterruptPriority+0x74>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	7afa      	ldrb	r2, [r7, #11]
 80071ea:	429a      	cmp	r2, r3
 80071ec:	d20a      	bcs.n	8007204 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80071ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80071f2:	f383 8811 	msr	BASEPRI, r3
 80071f6:	f3bf 8f6f 	isb	sy
 80071fa:	f3bf 8f4f 	dsb	sy
 80071fe:	607b      	str	r3, [r7, #4]
}
 8007200:	bf00      	nop
 8007202:	e7fe      	b.n	8007202 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007204:	4b0e      	ldr	r3, [pc, #56]	; (8007240 <vPortValidateInterruptPriority+0x78>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800720c:	4b0d      	ldr	r3, [pc, #52]	; (8007244 <vPortValidateInterruptPriority+0x7c>)
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	429a      	cmp	r2, r3
 8007212:	d90a      	bls.n	800722a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007214:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007218:	f383 8811 	msr	BASEPRI, r3
 800721c:	f3bf 8f6f 	isb	sy
 8007220:	f3bf 8f4f 	dsb	sy
 8007224:	603b      	str	r3, [r7, #0]
}
 8007226:	bf00      	nop
 8007228:	e7fe      	b.n	8007228 <vPortValidateInterruptPriority+0x60>
	}
 800722a:	bf00      	nop
 800722c:	3714      	adds	r7, #20
 800722e:	46bd      	mov	sp, r7
 8007230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007234:	4770      	bx	lr
 8007236:	bf00      	nop
 8007238:	e000e3f0 	.word	0xe000e3f0
 800723c:	20000c58 	.word	0x20000c58
 8007240:	e000ed0c 	.word	0xe000ed0c
 8007244:	20000c5c 	.word	0x20000c5c

08007248 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007248:	b580      	push	{r7, lr}
 800724a:	b08a      	sub	sp, #40	; 0x28
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007250:	2300      	movs	r3, #0
 8007252:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007254:	f7fe fd8e 	bl	8005d74 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007258:	4b5b      	ldr	r3, [pc, #364]	; (80073c8 <pvPortMalloc+0x180>)
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	2b00      	cmp	r3, #0
 800725e:	d101      	bne.n	8007264 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007260:	f000 f920 	bl	80074a4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007264:	4b59      	ldr	r3, [pc, #356]	; (80073cc <pvPortMalloc+0x184>)
 8007266:	681a      	ldr	r2, [r3, #0]
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4013      	ands	r3, r2
 800726c:	2b00      	cmp	r3, #0
 800726e:	f040 8093 	bne.w	8007398 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	2b00      	cmp	r3, #0
 8007276:	d01d      	beq.n	80072b4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007278:	2208      	movs	r2, #8
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	4413      	add	r3, r2
 800727e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f003 0307 	and.w	r3, r3, #7
 8007286:	2b00      	cmp	r3, #0
 8007288:	d014      	beq.n	80072b4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f023 0307 	bic.w	r3, r3, #7
 8007290:	3308      	adds	r3, #8
 8007292:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	f003 0307 	and.w	r3, r3, #7
 800729a:	2b00      	cmp	r3, #0
 800729c:	d00a      	beq.n	80072b4 <pvPortMalloc+0x6c>
	__asm volatile
 800729e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072a2:	f383 8811 	msr	BASEPRI, r3
 80072a6:	f3bf 8f6f 	isb	sy
 80072aa:	f3bf 8f4f 	dsb	sy
 80072ae:	617b      	str	r3, [r7, #20]
}
 80072b0:	bf00      	nop
 80072b2:	e7fe      	b.n	80072b2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d06e      	beq.n	8007398 <pvPortMalloc+0x150>
 80072ba:	4b45      	ldr	r3, [pc, #276]	; (80073d0 <pvPortMalloc+0x188>)
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	687a      	ldr	r2, [r7, #4]
 80072c0:	429a      	cmp	r2, r3
 80072c2:	d869      	bhi.n	8007398 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80072c4:	4b43      	ldr	r3, [pc, #268]	; (80073d4 <pvPortMalloc+0x18c>)
 80072c6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80072c8:	4b42      	ldr	r3, [pc, #264]	; (80073d4 <pvPortMalloc+0x18c>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072ce:	e004      	b.n	80072da <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80072d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80072d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80072da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072dc:	685b      	ldr	r3, [r3, #4]
 80072de:	687a      	ldr	r2, [r7, #4]
 80072e0:	429a      	cmp	r2, r3
 80072e2:	d903      	bls.n	80072ec <pvPortMalloc+0xa4>
 80072e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d1f1      	bne.n	80072d0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80072ec:	4b36      	ldr	r3, [pc, #216]	; (80073c8 <pvPortMalloc+0x180>)
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d050      	beq.n	8007398 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80072f6:	6a3b      	ldr	r3, [r7, #32]
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	2208      	movs	r2, #8
 80072fc:	4413      	add	r3, r2
 80072fe:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007300:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	6a3b      	ldr	r3, [r7, #32]
 8007306:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007308:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800730a:	685a      	ldr	r2, [r3, #4]
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	1ad2      	subs	r2, r2, r3
 8007310:	2308      	movs	r3, #8
 8007312:	005b      	lsls	r3, r3, #1
 8007314:	429a      	cmp	r2, r3
 8007316:	d91f      	bls.n	8007358 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007318:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	4413      	add	r3, r2
 800731e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007320:	69bb      	ldr	r3, [r7, #24]
 8007322:	f003 0307 	and.w	r3, r3, #7
 8007326:	2b00      	cmp	r3, #0
 8007328:	d00a      	beq.n	8007340 <pvPortMalloc+0xf8>
	__asm volatile
 800732a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800732e:	f383 8811 	msr	BASEPRI, r3
 8007332:	f3bf 8f6f 	isb	sy
 8007336:	f3bf 8f4f 	dsb	sy
 800733a:	613b      	str	r3, [r7, #16]
}
 800733c:	bf00      	nop
 800733e:	e7fe      	b.n	800733e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007340:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007342:	685a      	ldr	r2, [r3, #4]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	1ad2      	subs	r2, r2, r3
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800734c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800734e:	687a      	ldr	r2, [r7, #4]
 8007350:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007352:	69b8      	ldr	r0, [r7, #24]
 8007354:	f000 f908 	bl	8007568 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007358:	4b1d      	ldr	r3, [pc, #116]	; (80073d0 <pvPortMalloc+0x188>)
 800735a:	681a      	ldr	r2, [r3, #0]
 800735c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800735e:	685b      	ldr	r3, [r3, #4]
 8007360:	1ad3      	subs	r3, r2, r3
 8007362:	4a1b      	ldr	r2, [pc, #108]	; (80073d0 <pvPortMalloc+0x188>)
 8007364:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007366:	4b1a      	ldr	r3, [pc, #104]	; (80073d0 <pvPortMalloc+0x188>)
 8007368:	681a      	ldr	r2, [r3, #0]
 800736a:	4b1b      	ldr	r3, [pc, #108]	; (80073d8 <pvPortMalloc+0x190>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	429a      	cmp	r2, r3
 8007370:	d203      	bcs.n	800737a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007372:	4b17      	ldr	r3, [pc, #92]	; (80073d0 <pvPortMalloc+0x188>)
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	4a18      	ldr	r2, [pc, #96]	; (80073d8 <pvPortMalloc+0x190>)
 8007378:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800737a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800737c:	685a      	ldr	r2, [r3, #4]
 800737e:	4b13      	ldr	r3, [pc, #76]	; (80073cc <pvPortMalloc+0x184>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	431a      	orrs	r2, r3
 8007384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007386:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007388:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800738a:	2200      	movs	r2, #0
 800738c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800738e:	4b13      	ldr	r3, [pc, #76]	; (80073dc <pvPortMalloc+0x194>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	3301      	adds	r3, #1
 8007394:	4a11      	ldr	r2, [pc, #68]	; (80073dc <pvPortMalloc+0x194>)
 8007396:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007398:	f7fe fcfa 	bl	8005d90 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800739c:	69fb      	ldr	r3, [r7, #28]
 800739e:	f003 0307 	and.w	r3, r3, #7
 80073a2:	2b00      	cmp	r3, #0
 80073a4:	d00a      	beq.n	80073bc <pvPortMalloc+0x174>
	__asm volatile
 80073a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073aa:	f383 8811 	msr	BASEPRI, r3
 80073ae:	f3bf 8f6f 	isb	sy
 80073b2:	f3bf 8f4f 	dsb	sy
 80073b6:	60fb      	str	r3, [r7, #12]
}
 80073b8:	bf00      	nop
 80073ba:	e7fe      	b.n	80073ba <pvPortMalloc+0x172>
	return pvReturn;
 80073bc:	69fb      	ldr	r3, [r7, #28]
}
 80073be:	4618      	mov	r0, r3
 80073c0:	3728      	adds	r7, #40	; 0x28
 80073c2:	46bd      	mov	sp, r7
 80073c4:	bd80      	pop	{r7, pc}
 80073c6:	bf00      	nop
 80073c8:	20004ae8 	.word	0x20004ae8
 80073cc:	20004afc 	.word	0x20004afc
 80073d0:	20004aec 	.word	0x20004aec
 80073d4:	20004ae0 	.word	0x20004ae0
 80073d8:	20004af0 	.word	0x20004af0
 80073dc:	20004af4 	.word	0x20004af4

080073e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2b00      	cmp	r3, #0
 80073f0:	d04d      	beq.n	800748e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80073f2:	2308      	movs	r3, #8
 80073f4:	425b      	negs	r3, r3
 80073f6:	697a      	ldr	r2, [r7, #20]
 80073f8:	4413      	add	r3, r2
 80073fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007400:	693b      	ldr	r3, [r7, #16]
 8007402:	685a      	ldr	r2, [r3, #4]
 8007404:	4b24      	ldr	r3, [pc, #144]	; (8007498 <vPortFree+0xb8>)
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	4013      	ands	r3, r2
 800740a:	2b00      	cmp	r3, #0
 800740c:	d10a      	bne.n	8007424 <vPortFree+0x44>
	__asm volatile
 800740e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007412:	f383 8811 	msr	BASEPRI, r3
 8007416:	f3bf 8f6f 	isb	sy
 800741a:	f3bf 8f4f 	dsb	sy
 800741e:	60fb      	str	r3, [r7, #12]
}
 8007420:	bf00      	nop
 8007422:	e7fe      	b.n	8007422 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d00a      	beq.n	8007442 <vPortFree+0x62>
	__asm volatile
 800742c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007430:	f383 8811 	msr	BASEPRI, r3
 8007434:	f3bf 8f6f 	isb	sy
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	60bb      	str	r3, [r7, #8]
}
 800743e:	bf00      	nop
 8007440:	e7fe      	b.n	8007440 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	685a      	ldr	r2, [r3, #4]
 8007446:	4b14      	ldr	r3, [pc, #80]	; (8007498 <vPortFree+0xb8>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4013      	ands	r3, r2
 800744c:	2b00      	cmp	r3, #0
 800744e:	d01e      	beq.n	800748e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007450:	693b      	ldr	r3, [r7, #16]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	2b00      	cmp	r3, #0
 8007456:	d11a      	bne.n	800748e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007458:	693b      	ldr	r3, [r7, #16]
 800745a:	685a      	ldr	r2, [r3, #4]
 800745c:	4b0e      	ldr	r3, [pc, #56]	; (8007498 <vPortFree+0xb8>)
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	43db      	mvns	r3, r3
 8007462:	401a      	ands	r2, r3
 8007464:	693b      	ldr	r3, [r7, #16]
 8007466:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007468:	f7fe fc84 	bl	8005d74 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800746c:	693b      	ldr	r3, [r7, #16]
 800746e:	685a      	ldr	r2, [r3, #4]
 8007470:	4b0a      	ldr	r3, [pc, #40]	; (800749c <vPortFree+0xbc>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	4413      	add	r3, r2
 8007476:	4a09      	ldr	r2, [pc, #36]	; (800749c <vPortFree+0xbc>)
 8007478:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800747a:	6938      	ldr	r0, [r7, #16]
 800747c:	f000 f874 	bl	8007568 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007480:	4b07      	ldr	r3, [pc, #28]	; (80074a0 <vPortFree+0xc0>)
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	3301      	adds	r3, #1
 8007486:	4a06      	ldr	r2, [pc, #24]	; (80074a0 <vPortFree+0xc0>)
 8007488:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800748a:	f7fe fc81 	bl	8005d90 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800748e:	bf00      	nop
 8007490:	3718      	adds	r7, #24
 8007492:	46bd      	mov	sp, r7
 8007494:	bd80      	pop	{r7, pc}
 8007496:	bf00      	nop
 8007498:	20004afc 	.word	0x20004afc
 800749c:	20004aec 	.word	0x20004aec
 80074a0:	20004af8 	.word	0x20004af8

080074a4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80074a4:	b480      	push	{r7}
 80074a6:	b085      	sub	sp, #20
 80074a8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80074aa:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 80074ae:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80074b0:	4b27      	ldr	r3, [pc, #156]	; (8007550 <prvHeapInit+0xac>)
 80074b2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f003 0307 	and.w	r3, r3, #7
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d00c      	beq.n	80074d8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80074be:	68fb      	ldr	r3, [r7, #12]
 80074c0:	3307      	adds	r3, #7
 80074c2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074c4:	68fb      	ldr	r3, [r7, #12]
 80074c6:	f023 0307 	bic.w	r3, r3, #7
 80074ca:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80074cc:	68ba      	ldr	r2, [r7, #8]
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	4a1f      	ldr	r2, [pc, #124]	; (8007550 <prvHeapInit+0xac>)
 80074d4:	4413      	add	r3, r2
 80074d6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80074dc:	4a1d      	ldr	r2, [pc, #116]	; (8007554 <prvHeapInit+0xb0>)
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80074e2:	4b1c      	ldr	r3, [pc, #112]	; (8007554 <prvHeapInit+0xb0>)
 80074e4:	2200      	movs	r2, #0
 80074e6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	68ba      	ldr	r2, [r7, #8]
 80074ec:	4413      	add	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80074f0:	2208      	movs	r2, #8
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	1a9b      	subs	r3, r3, r2
 80074f6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	f023 0307 	bic.w	r3, r3, #7
 80074fe:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007500:	68fb      	ldr	r3, [r7, #12]
 8007502:	4a15      	ldr	r2, [pc, #84]	; (8007558 <prvHeapInit+0xb4>)
 8007504:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007506:	4b14      	ldr	r3, [pc, #80]	; (8007558 <prvHeapInit+0xb4>)
 8007508:	681b      	ldr	r3, [r3, #0]
 800750a:	2200      	movs	r2, #0
 800750c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800750e:	4b12      	ldr	r3, [pc, #72]	; (8007558 <prvHeapInit+0xb4>)
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2200      	movs	r2, #0
 8007514:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800751a:	683b      	ldr	r3, [r7, #0]
 800751c:	68fa      	ldr	r2, [r7, #12]
 800751e:	1ad2      	subs	r2, r2, r3
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007524:	4b0c      	ldr	r3, [pc, #48]	; (8007558 <prvHeapInit+0xb4>)
 8007526:	681a      	ldr	r2, [r3, #0]
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	4a0a      	ldr	r2, [pc, #40]	; (800755c <prvHeapInit+0xb8>)
 8007532:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685b      	ldr	r3, [r3, #4]
 8007538:	4a09      	ldr	r2, [pc, #36]	; (8007560 <prvHeapInit+0xbc>)
 800753a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800753c:	4b09      	ldr	r3, [pc, #36]	; (8007564 <prvHeapInit+0xc0>)
 800753e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007542:	601a      	str	r2, [r3, #0]
}
 8007544:	bf00      	nop
 8007546:	3714      	adds	r7, #20
 8007548:	46bd      	mov	sp, r7
 800754a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754e:	4770      	bx	lr
 8007550:	20000c60 	.word	0x20000c60
 8007554:	20004ae0 	.word	0x20004ae0
 8007558:	20004ae8 	.word	0x20004ae8
 800755c:	20004af0 	.word	0x20004af0
 8007560:	20004aec 	.word	0x20004aec
 8007564:	20004afc 	.word	0x20004afc

08007568 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007568:	b480      	push	{r7}
 800756a:	b085      	sub	sp, #20
 800756c:	af00      	add	r7, sp, #0
 800756e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007570:	4b28      	ldr	r3, [pc, #160]	; (8007614 <prvInsertBlockIntoFreeList+0xac>)
 8007572:	60fb      	str	r3, [r7, #12]
 8007574:	e002      	b.n	800757c <prvInsertBlockIntoFreeList+0x14>
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	60fb      	str	r3, [r7, #12]
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	687a      	ldr	r2, [r7, #4]
 8007582:	429a      	cmp	r2, r3
 8007584:	d8f7      	bhi.n	8007576 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	685b      	ldr	r3, [r3, #4]
 800758e:	68ba      	ldr	r2, [r7, #8]
 8007590:	4413      	add	r3, r2
 8007592:	687a      	ldr	r2, [r7, #4]
 8007594:	429a      	cmp	r2, r3
 8007596:	d108      	bne.n	80075aa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007598:	68fb      	ldr	r3, [r7, #12]
 800759a:	685a      	ldr	r2, [r3, #4]
 800759c:	687b      	ldr	r3, [r7, #4]
 800759e:	685b      	ldr	r3, [r3, #4]
 80075a0:	441a      	add	r2, r3
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80075ae:	687b      	ldr	r3, [r7, #4]
 80075b0:	685b      	ldr	r3, [r3, #4]
 80075b2:	68ba      	ldr	r2, [r7, #8]
 80075b4:	441a      	add	r2, r3
 80075b6:	68fb      	ldr	r3, [r7, #12]
 80075b8:	681b      	ldr	r3, [r3, #0]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d118      	bne.n	80075f0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80075be:	68fb      	ldr	r3, [r7, #12]
 80075c0:	681a      	ldr	r2, [r3, #0]
 80075c2:	4b15      	ldr	r3, [pc, #84]	; (8007618 <prvInsertBlockIntoFreeList+0xb0>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	429a      	cmp	r2, r3
 80075c8:	d00d      	beq.n	80075e6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	685a      	ldr	r2, [r3, #4]
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	685b      	ldr	r3, [r3, #4]
 80075d4:	441a      	add	r2, r3
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	681a      	ldr	r2, [r3, #0]
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	601a      	str	r2, [r3, #0]
 80075e4:	e008      	b.n	80075f8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80075e6:	4b0c      	ldr	r3, [pc, #48]	; (8007618 <prvInsertBlockIntoFreeList+0xb0>)
 80075e8:	681a      	ldr	r2, [r3, #0]
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	601a      	str	r2, [r3, #0]
 80075ee:	e003      	b.n	80075f8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	681a      	ldr	r2, [r3, #0]
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80075f8:	68fa      	ldr	r2, [r7, #12]
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d002      	beq.n	8007606 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007606:	bf00      	nop
 8007608:	3714      	adds	r7, #20
 800760a:	46bd      	mov	sp, r7
 800760c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007610:	4770      	bx	lr
 8007612:	bf00      	nop
 8007614:	20004ae0 	.word	0x20004ae0
 8007618:	20004ae8 	.word	0x20004ae8

0800761c <__errno>:
 800761c:	4b01      	ldr	r3, [pc, #4]	; (8007624 <__errno+0x8>)
 800761e:	6818      	ldr	r0, [r3, #0]
 8007620:	4770      	bx	lr
 8007622:	bf00      	nop
 8007624:	20000010 	.word	0x20000010

08007628 <std>:
 8007628:	2300      	movs	r3, #0
 800762a:	b510      	push	{r4, lr}
 800762c:	4604      	mov	r4, r0
 800762e:	e9c0 3300 	strd	r3, r3, [r0]
 8007632:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007636:	6083      	str	r3, [r0, #8]
 8007638:	8181      	strh	r1, [r0, #12]
 800763a:	6643      	str	r3, [r0, #100]	; 0x64
 800763c:	81c2      	strh	r2, [r0, #14]
 800763e:	6183      	str	r3, [r0, #24]
 8007640:	4619      	mov	r1, r3
 8007642:	2208      	movs	r2, #8
 8007644:	305c      	adds	r0, #92	; 0x5c
 8007646:	f000 f91a 	bl	800787e <memset>
 800764a:	4b05      	ldr	r3, [pc, #20]	; (8007660 <std+0x38>)
 800764c:	6263      	str	r3, [r4, #36]	; 0x24
 800764e:	4b05      	ldr	r3, [pc, #20]	; (8007664 <std+0x3c>)
 8007650:	62a3      	str	r3, [r4, #40]	; 0x28
 8007652:	4b05      	ldr	r3, [pc, #20]	; (8007668 <std+0x40>)
 8007654:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007656:	4b05      	ldr	r3, [pc, #20]	; (800766c <std+0x44>)
 8007658:	6224      	str	r4, [r4, #32]
 800765a:	6323      	str	r3, [r4, #48]	; 0x30
 800765c:	bd10      	pop	{r4, pc}
 800765e:	bf00      	nop
 8007660:	08007c21 	.word	0x08007c21
 8007664:	08007c47 	.word	0x08007c47
 8007668:	08007c7f 	.word	0x08007c7f
 800766c:	08007ca3 	.word	0x08007ca3

08007670 <_cleanup_r>:
 8007670:	4901      	ldr	r1, [pc, #4]	; (8007678 <_cleanup_r+0x8>)
 8007672:	f000 b8af 	b.w	80077d4 <_fwalk_reent>
 8007676:	bf00      	nop
 8007678:	08007f7d 	.word	0x08007f7d

0800767c <__sfmoreglue>:
 800767c:	b570      	push	{r4, r5, r6, lr}
 800767e:	2268      	movs	r2, #104	; 0x68
 8007680:	1e4d      	subs	r5, r1, #1
 8007682:	4355      	muls	r5, r2
 8007684:	460e      	mov	r6, r1
 8007686:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800768a:	f000 f921 	bl	80078d0 <_malloc_r>
 800768e:	4604      	mov	r4, r0
 8007690:	b140      	cbz	r0, 80076a4 <__sfmoreglue+0x28>
 8007692:	2100      	movs	r1, #0
 8007694:	e9c0 1600 	strd	r1, r6, [r0]
 8007698:	300c      	adds	r0, #12
 800769a:	60a0      	str	r0, [r4, #8]
 800769c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80076a0:	f000 f8ed 	bl	800787e <memset>
 80076a4:	4620      	mov	r0, r4
 80076a6:	bd70      	pop	{r4, r5, r6, pc}

080076a8 <__sfp_lock_acquire>:
 80076a8:	4801      	ldr	r0, [pc, #4]	; (80076b0 <__sfp_lock_acquire+0x8>)
 80076aa:	f000 b8d8 	b.w	800785e <__retarget_lock_acquire_recursive>
 80076ae:	bf00      	nop
 80076b0:	20004b01 	.word	0x20004b01

080076b4 <__sfp_lock_release>:
 80076b4:	4801      	ldr	r0, [pc, #4]	; (80076bc <__sfp_lock_release+0x8>)
 80076b6:	f000 b8d3 	b.w	8007860 <__retarget_lock_release_recursive>
 80076ba:	bf00      	nop
 80076bc:	20004b01 	.word	0x20004b01

080076c0 <__sinit_lock_acquire>:
 80076c0:	4801      	ldr	r0, [pc, #4]	; (80076c8 <__sinit_lock_acquire+0x8>)
 80076c2:	f000 b8cc 	b.w	800785e <__retarget_lock_acquire_recursive>
 80076c6:	bf00      	nop
 80076c8:	20004b02 	.word	0x20004b02

080076cc <__sinit_lock_release>:
 80076cc:	4801      	ldr	r0, [pc, #4]	; (80076d4 <__sinit_lock_release+0x8>)
 80076ce:	f000 b8c7 	b.w	8007860 <__retarget_lock_release_recursive>
 80076d2:	bf00      	nop
 80076d4:	20004b02 	.word	0x20004b02

080076d8 <__sinit>:
 80076d8:	b510      	push	{r4, lr}
 80076da:	4604      	mov	r4, r0
 80076dc:	f7ff fff0 	bl	80076c0 <__sinit_lock_acquire>
 80076e0:	69a3      	ldr	r3, [r4, #24]
 80076e2:	b11b      	cbz	r3, 80076ec <__sinit+0x14>
 80076e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80076e8:	f7ff bff0 	b.w	80076cc <__sinit_lock_release>
 80076ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80076f0:	6523      	str	r3, [r4, #80]	; 0x50
 80076f2:	4b13      	ldr	r3, [pc, #76]	; (8007740 <__sinit+0x68>)
 80076f4:	4a13      	ldr	r2, [pc, #76]	; (8007744 <__sinit+0x6c>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	62a2      	str	r2, [r4, #40]	; 0x28
 80076fa:	42a3      	cmp	r3, r4
 80076fc:	bf04      	itt	eq
 80076fe:	2301      	moveq	r3, #1
 8007700:	61a3      	streq	r3, [r4, #24]
 8007702:	4620      	mov	r0, r4
 8007704:	f000 f820 	bl	8007748 <__sfp>
 8007708:	6060      	str	r0, [r4, #4]
 800770a:	4620      	mov	r0, r4
 800770c:	f000 f81c 	bl	8007748 <__sfp>
 8007710:	60a0      	str	r0, [r4, #8]
 8007712:	4620      	mov	r0, r4
 8007714:	f000 f818 	bl	8007748 <__sfp>
 8007718:	2200      	movs	r2, #0
 800771a:	60e0      	str	r0, [r4, #12]
 800771c:	2104      	movs	r1, #4
 800771e:	6860      	ldr	r0, [r4, #4]
 8007720:	f7ff ff82 	bl	8007628 <std>
 8007724:	68a0      	ldr	r0, [r4, #8]
 8007726:	2201      	movs	r2, #1
 8007728:	2109      	movs	r1, #9
 800772a:	f7ff ff7d 	bl	8007628 <std>
 800772e:	68e0      	ldr	r0, [r4, #12]
 8007730:	2202      	movs	r2, #2
 8007732:	2112      	movs	r1, #18
 8007734:	f7ff ff78 	bl	8007628 <std>
 8007738:	2301      	movs	r3, #1
 800773a:	61a3      	str	r3, [r4, #24]
 800773c:	e7d2      	b.n	80076e4 <__sinit+0xc>
 800773e:	bf00      	nop
 8007740:	080093f8 	.word	0x080093f8
 8007744:	08007671 	.word	0x08007671

08007748 <__sfp>:
 8007748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800774a:	4607      	mov	r7, r0
 800774c:	f7ff ffac 	bl	80076a8 <__sfp_lock_acquire>
 8007750:	4b1e      	ldr	r3, [pc, #120]	; (80077cc <__sfp+0x84>)
 8007752:	681e      	ldr	r6, [r3, #0]
 8007754:	69b3      	ldr	r3, [r6, #24]
 8007756:	b913      	cbnz	r3, 800775e <__sfp+0x16>
 8007758:	4630      	mov	r0, r6
 800775a:	f7ff ffbd 	bl	80076d8 <__sinit>
 800775e:	3648      	adds	r6, #72	; 0x48
 8007760:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007764:	3b01      	subs	r3, #1
 8007766:	d503      	bpl.n	8007770 <__sfp+0x28>
 8007768:	6833      	ldr	r3, [r6, #0]
 800776a:	b30b      	cbz	r3, 80077b0 <__sfp+0x68>
 800776c:	6836      	ldr	r6, [r6, #0]
 800776e:	e7f7      	b.n	8007760 <__sfp+0x18>
 8007770:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007774:	b9d5      	cbnz	r5, 80077ac <__sfp+0x64>
 8007776:	4b16      	ldr	r3, [pc, #88]	; (80077d0 <__sfp+0x88>)
 8007778:	60e3      	str	r3, [r4, #12]
 800777a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800777e:	6665      	str	r5, [r4, #100]	; 0x64
 8007780:	f000 f86c 	bl	800785c <__retarget_lock_init_recursive>
 8007784:	f7ff ff96 	bl	80076b4 <__sfp_lock_release>
 8007788:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800778c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007790:	6025      	str	r5, [r4, #0]
 8007792:	61a5      	str	r5, [r4, #24]
 8007794:	2208      	movs	r2, #8
 8007796:	4629      	mov	r1, r5
 8007798:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800779c:	f000 f86f 	bl	800787e <memset>
 80077a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80077a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80077a8:	4620      	mov	r0, r4
 80077aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ac:	3468      	adds	r4, #104	; 0x68
 80077ae:	e7d9      	b.n	8007764 <__sfp+0x1c>
 80077b0:	2104      	movs	r1, #4
 80077b2:	4638      	mov	r0, r7
 80077b4:	f7ff ff62 	bl	800767c <__sfmoreglue>
 80077b8:	4604      	mov	r4, r0
 80077ba:	6030      	str	r0, [r6, #0]
 80077bc:	2800      	cmp	r0, #0
 80077be:	d1d5      	bne.n	800776c <__sfp+0x24>
 80077c0:	f7ff ff78 	bl	80076b4 <__sfp_lock_release>
 80077c4:	230c      	movs	r3, #12
 80077c6:	603b      	str	r3, [r7, #0]
 80077c8:	e7ee      	b.n	80077a8 <__sfp+0x60>
 80077ca:	bf00      	nop
 80077cc:	080093f8 	.word	0x080093f8
 80077d0:	ffff0001 	.word	0xffff0001

080077d4 <_fwalk_reent>:
 80077d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80077d8:	4606      	mov	r6, r0
 80077da:	4688      	mov	r8, r1
 80077dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80077e0:	2700      	movs	r7, #0
 80077e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80077e6:	f1b9 0901 	subs.w	r9, r9, #1
 80077ea:	d505      	bpl.n	80077f8 <_fwalk_reent+0x24>
 80077ec:	6824      	ldr	r4, [r4, #0]
 80077ee:	2c00      	cmp	r4, #0
 80077f0:	d1f7      	bne.n	80077e2 <_fwalk_reent+0xe>
 80077f2:	4638      	mov	r0, r7
 80077f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077f8:	89ab      	ldrh	r3, [r5, #12]
 80077fa:	2b01      	cmp	r3, #1
 80077fc:	d907      	bls.n	800780e <_fwalk_reent+0x3a>
 80077fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007802:	3301      	adds	r3, #1
 8007804:	d003      	beq.n	800780e <_fwalk_reent+0x3a>
 8007806:	4629      	mov	r1, r5
 8007808:	4630      	mov	r0, r6
 800780a:	47c0      	blx	r8
 800780c:	4307      	orrs	r7, r0
 800780e:	3568      	adds	r5, #104	; 0x68
 8007810:	e7e9      	b.n	80077e6 <_fwalk_reent+0x12>
	...

08007814 <__libc_init_array>:
 8007814:	b570      	push	{r4, r5, r6, lr}
 8007816:	4d0d      	ldr	r5, [pc, #52]	; (800784c <__libc_init_array+0x38>)
 8007818:	4c0d      	ldr	r4, [pc, #52]	; (8007850 <__libc_init_array+0x3c>)
 800781a:	1b64      	subs	r4, r4, r5
 800781c:	10a4      	asrs	r4, r4, #2
 800781e:	2600      	movs	r6, #0
 8007820:	42a6      	cmp	r6, r4
 8007822:	d109      	bne.n	8007838 <__libc_init_array+0x24>
 8007824:	4d0b      	ldr	r5, [pc, #44]	; (8007854 <__libc_init_array+0x40>)
 8007826:	4c0c      	ldr	r4, [pc, #48]	; (8007858 <__libc_init_array+0x44>)
 8007828:	f001 fc9c 	bl	8009164 <_init>
 800782c:	1b64      	subs	r4, r4, r5
 800782e:	10a4      	asrs	r4, r4, #2
 8007830:	2600      	movs	r6, #0
 8007832:	42a6      	cmp	r6, r4
 8007834:	d105      	bne.n	8007842 <__libc_init_array+0x2e>
 8007836:	bd70      	pop	{r4, r5, r6, pc}
 8007838:	f855 3b04 	ldr.w	r3, [r5], #4
 800783c:	4798      	blx	r3
 800783e:	3601      	adds	r6, #1
 8007840:	e7ee      	b.n	8007820 <__libc_init_array+0xc>
 8007842:	f855 3b04 	ldr.w	r3, [r5], #4
 8007846:	4798      	blx	r3
 8007848:	3601      	adds	r6, #1
 800784a:	e7f2      	b.n	8007832 <__libc_init_array+0x1e>
 800784c:	08009554 	.word	0x08009554
 8007850:	08009554 	.word	0x08009554
 8007854:	08009554 	.word	0x08009554
 8007858:	08009558 	.word	0x08009558

0800785c <__retarget_lock_init_recursive>:
 800785c:	4770      	bx	lr

0800785e <__retarget_lock_acquire_recursive>:
 800785e:	4770      	bx	lr

08007860 <__retarget_lock_release_recursive>:
 8007860:	4770      	bx	lr

08007862 <memcpy>:
 8007862:	440a      	add	r2, r1
 8007864:	4291      	cmp	r1, r2
 8007866:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800786a:	d100      	bne.n	800786e <memcpy+0xc>
 800786c:	4770      	bx	lr
 800786e:	b510      	push	{r4, lr}
 8007870:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007874:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007878:	4291      	cmp	r1, r2
 800787a:	d1f9      	bne.n	8007870 <memcpy+0xe>
 800787c:	bd10      	pop	{r4, pc}

0800787e <memset>:
 800787e:	4402      	add	r2, r0
 8007880:	4603      	mov	r3, r0
 8007882:	4293      	cmp	r3, r2
 8007884:	d100      	bne.n	8007888 <memset+0xa>
 8007886:	4770      	bx	lr
 8007888:	f803 1b01 	strb.w	r1, [r3], #1
 800788c:	e7f9      	b.n	8007882 <memset+0x4>
	...

08007890 <sbrk_aligned>:
 8007890:	b570      	push	{r4, r5, r6, lr}
 8007892:	4e0e      	ldr	r6, [pc, #56]	; (80078cc <sbrk_aligned+0x3c>)
 8007894:	460c      	mov	r4, r1
 8007896:	6831      	ldr	r1, [r6, #0]
 8007898:	4605      	mov	r5, r0
 800789a:	b911      	cbnz	r1, 80078a2 <sbrk_aligned+0x12>
 800789c:	f000 f984 	bl	8007ba8 <_sbrk_r>
 80078a0:	6030      	str	r0, [r6, #0]
 80078a2:	4621      	mov	r1, r4
 80078a4:	4628      	mov	r0, r5
 80078a6:	f000 f97f 	bl	8007ba8 <_sbrk_r>
 80078aa:	1c43      	adds	r3, r0, #1
 80078ac:	d00a      	beq.n	80078c4 <sbrk_aligned+0x34>
 80078ae:	1cc4      	adds	r4, r0, #3
 80078b0:	f024 0403 	bic.w	r4, r4, #3
 80078b4:	42a0      	cmp	r0, r4
 80078b6:	d007      	beq.n	80078c8 <sbrk_aligned+0x38>
 80078b8:	1a21      	subs	r1, r4, r0
 80078ba:	4628      	mov	r0, r5
 80078bc:	f000 f974 	bl	8007ba8 <_sbrk_r>
 80078c0:	3001      	adds	r0, #1
 80078c2:	d101      	bne.n	80078c8 <sbrk_aligned+0x38>
 80078c4:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 80078c8:	4620      	mov	r0, r4
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	20004b08 	.word	0x20004b08

080078d0 <_malloc_r>:
 80078d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80078d4:	1ccd      	adds	r5, r1, #3
 80078d6:	f025 0503 	bic.w	r5, r5, #3
 80078da:	3508      	adds	r5, #8
 80078dc:	2d0c      	cmp	r5, #12
 80078de:	bf38      	it	cc
 80078e0:	250c      	movcc	r5, #12
 80078e2:	2d00      	cmp	r5, #0
 80078e4:	4607      	mov	r7, r0
 80078e6:	db01      	blt.n	80078ec <_malloc_r+0x1c>
 80078e8:	42a9      	cmp	r1, r5
 80078ea:	d905      	bls.n	80078f8 <_malloc_r+0x28>
 80078ec:	230c      	movs	r3, #12
 80078ee:	603b      	str	r3, [r7, #0]
 80078f0:	2600      	movs	r6, #0
 80078f2:	4630      	mov	r0, r6
 80078f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80078f8:	4e2e      	ldr	r6, [pc, #184]	; (80079b4 <_malloc_r+0xe4>)
 80078fa:	f000 fbf3 	bl	80080e4 <__malloc_lock>
 80078fe:	6833      	ldr	r3, [r6, #0]
 8007900:	461c      	mov	r4, r3
 8007902:	bb34      	cbnz	r4, 8007952 <_malloc_r+0x82>
 8007904:	4629      	mov	r1, r5
 8007906:	4638      	mov	r0, r7
 8007908:	f7ff ffc2 	bl	8007890 <sbrk_aligned>
 800790c:	1c43      	adds	r3, r0, #1
 800790e:	4604      	mov	r4, r0
 8007910:	d14d      	bne.n	80079ae <_malloc_r+0xde>
 8007912:	6834      	ldr	r4, [r6, #0]
 8007914:	4626      	mov	r6, r4
 8007916:	2e00      	cmp	r6, #0
 8007918:	d140      	bne.n	800799c <_malloc_r+0xcc>
 800791a:	6823      	ldr	r3, [r4, #0]
 800791c:	4631      	mov	r1, r6
 800791e:	4638      	mov	r0, r7
 8007920:	eb04 0803 	add.w	r8, r4, r3
 8007924:	f000 f940 	bl	8007ba8 <_sbrk_r>
 8007928:	4580      	cmp	r8, r0
 800792a:	d13a      	bne.n	80079a2 <_malloc_r+0xd2>
 800792c:	6821      	ldr	r1, [r4, #0]
 800792e:	3503      	adds	r5, #3
 8007930:	1a6d      	subs	r5, r5, r1
 8007932:	f025 0503 	bic.w	r5, r5, #3
 8007936:	3508      	adds	r5, #8
 8007938:	2d0c      	cmp	r5, #12
 800793a:	bf38      	it	cc
 800793c:	250c      	movcc	r5, #12
 800793e:	4629      	mov	r1, r5
 8007940:	4638      	mov	r0, r7
 8007942:	f7ff ffa5 	bl	8007890 <sbrk_aligned>
 8007946:	3001      	adds	r0, #1
 8007948:	d02b      	beq.n	80079a2 <_malloc_r+0xd2>
 800794a:	6823      	ldr	r3, [r4, #0]
 800794c:	442b      	add	r3, r5
 800794e:	6023      	str	r3, [r4, #0]
 8007950:	e00e      	b.n	8007970 <_malloc_r+0xa0>
 8007952:	6822      	ldr	r2, [r4, #0]
 8007954:	1b52      	subs	r2, r2, r5
 8007956:	d41e      	bmi.n	8007996 <_malloc_r+0xc6>
 8007958:	2a0b      	cmp	r2, #11
 800795a:	d916      	bls.n	800798a <_malloc_r+0xba>
 800795c:	1961      	adds	r1, r4, r5
 800795e:	42a3      	cmp	r3, r4
 8007960:	6025      	str	r5, [r4, #0]
 8007962:	bf18      	it	ne
 8007964:	6059      	strne	r1, [r3, #4]
 8007966:	6863      	ldr	r3, [r4, #4]
 8007968:	bf08      	it	eq
 800796a:	6031      	streq	r1, [r6, #0]
 800796c:	5162      	str	r2, [r4, r5]
 800796e:	604b      	str	r3, [r1, #4]
 8007970:	4638      	mov	r0, r7
 8007972:	f104 060b 	add.w	r6, r4, #11
 8007976:	f000 fbbb 	bl	80080f0 <__malloc_unlock>
 800797a:	f026 0607 	bic.w	r6, r6, #7
 800797e:	1d23      	adds	r3, r4, #4
 8007980:	1af2      	subs	r2, r6, r3
 8007982:	d0b6      	beq.n	80078f2 <_malloc_r+0x22>
 8007984:	1b9b      	subs	r3, r3, r6
 8007986:	50a3      	str	r3, [r4, r2]
 8007988:	e7b3      	b.n	80078f2 <_malloc_r+0x22>
 800798a:	6862      	ldr	r2, [r4, #4]
 800798c:	42a3      	cmp	r3, r4
 800798e:	bf0c      	ite	eq
 8007990:	6032      	streq	r2, [r6, #0]
 8007992:	605a      	strne	r2, [r3, #4]
 8007994:	e7ec      	b.n	8007970 <_malloc_r+0xa0>
 8007996:	4623      	mov	r3, r4
 8007998:	6864      	ldr	r4, [r4, #4]
 800799a:	e7b2      	b.n	8007902 <_malloc_r+0x32>
 800799c:	4634      	mov	r4, r6
 800799e:	6876      	ldr	r6, [r6, #4]
 80079a0:	e7b9      	b.n	8007916 <_malloc_r+0x46>
 80079a2:	230c      	movs	r3, #12
 80079a4:	603b      	str	r3, [r7, #0]
 80079a6:	4638      	mov	r0, r7
 80079a8:	f000 fba2 	bl	80080f0 <__malloc_unlock>
 80079ac:	e7a1      	b.n	80078f2 <_malloc_r+0x22>
 80079ae:	6025      	str	r5, [r4, #0]
 80079b0:	e7de      	b.n	8007970 <_malloc_r+0xa0>
 80079b2:	bf00      	nop
 80079b4:	20004b04 	.word	0x20004b04

080079b8 <iprintf>:
 80079b8:	b40f      	push	{r0, r1, r2, r3}
 80079ba:	4b0a      	ldr	r3, [pc, #40]	; (80079e4 <iprintf+0x2c>)
 80079bc:	b513      	push	{r0, r1, r4, lr}
 80079be:	681c      	ldr	r4, [r3, #0]
 80079c0:	b124      	cbz	r4, 80079cc <iprintf+0x14>
 80079c2:	69a3      	ldr	r3, [r4, #24]
 80079c4:	b913      	cbnz	r3, 80079cc <iprintf+0x14>
 80079c6:	4620      	mov	r0, r4
 80079c8:	f7ff fe86 	bl	80076d8 <__sinit>
 80079cc:	ab05      	add	r3, sp, #20
 80079ce:	9a04      	ldr	r2, [sp, #16]
 80079d0:	68a1      	ldr	r1, [r4, #8]
 80079d2:	9301      	str	r3, [sp, #4]
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 fdd9 	bl	800858c <_vfiprintf_r>
 80079da:	b002      	add	sp, #8
 80079dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80079e0:	b004      	add	sp, #16
 80079e2:	4770      	bx	lr
 80079e4:	20000010 	.word	0x20000010

080079e8 <_puts_r>:
 80079e8:	b570      	push	{r4, r5, r6, lr}
 80079ea:	460e      	mov	r6, r1
 80079ec:	4605      	mov	r5, r0
 80079ee:	b118      	cbz	r0, 80079f8 <_puts_r+0x10>
 80079f0:	6983      	ldr	r3, [r0, #24]
 80079f2:	b90b      	cbnz	r3, 80079f8 <_puts_r+0x10>
 80079f4:	f7ff fe70 	bl	80076d8 <__sinit>
 80079f8:	69ab      	ldr	r3, [r5, #24]
 80079fa:	68ac      	ldr	r4, [r5, #8]
 80079fc:	b913      	cbnz	r3, 8007a04 <_puts_r+0x1c>
 80079fe:	4628      	mov	r0, r5
 8007a00:	f7ff fe6a 	bl	80076d8 <__sinit>
 8007a04:	4b2c      	ldr	r3, [pc, #176]	; (8007ab8 <_puts_r+0xd0>)
 8007a06:	429c      	cmp	r4, r3
 8007a08:	d120      	bne.n	8007a4c <_puts_r+0x64>
 8007a0a:	686c      	ldr	r4, [r5, #4]
 8007a0c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a0e:	07db      	lsls	r3, r3, #31
 8007a10:	d405      	bmi.n	8007a1e <_puts_r+0x36>
 8007a12:	89a3      	ldrh	r3, [r4, #12]
 8007a14:	0598      	lsls	r0, r3, #22
 8007a16:	d402      	bmi.n	8007a1e <_puts_r+0x36>
 8007a18:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a1a:	f7ff ff20 	bl	800785e <__retarget_lock_acquire_recursive>
 8007a1e:	89a3      	ldrh	r3, [r4, #12]
 8007a20:	0719      	lsls	r1, r3, #28
 8007a22:	d51d      	bpl.n	8007a60 <_puts_r+0x78>
 8007a24:	6923      	ldr	r3, [r4, #16]
 8007a26:	b1db      	cbz	r3, 8007a60 <_puts_r+0x78>
 8007a28:	3e01      	subs	r6, #1
 8007a2a:	68a3      	ldr	r3, [r4, #8]
 8007a2c:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007a30:	3b01      	subs	r3, #1
 8007a32:	60a3      	str	r3, [r4, #8]
 8007a34:	bb39      	cbnz	r1, 8007a86 <_puts_r+0x9e>
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	da38      	bge.n	8007aac <_puts_r+0xc4>
 8007a3a:	4622      	mov	r2, r4
 8007a3c:	210a      	movs	r1, #10
 8007a3e:	4628      	mov	r0, r5
 8007a40:	f000 f934 	bl	8007cac <__swbuf_r>
 8007a44:	3001      	adds	r0, #1
 8007a46:	d011      	beq.n	8007a6c <_puts_r+0x84>
 8007a48:	250a      	movs	r5, #10
 8007a4a:	e011      	b.n	8007a70 <_puts_r+0x88>
 8007a4c:	4b1b      	ldr	r3, [pc, #108]	; (8007abc <_puts_r+0xd4>)
 8007a4e:	429c      	cmp	r4, r3
 8007a50:	d101      	bne.n	8007a56 <_puts_r+0x6e>
 8007a52:	68ac      	ldr	r4, [r5, #8]
 8007a54:	e7da      	b.n	8007a0c <_puts_r+0x24>
 8007a56:	4b1a      	ldr	r3, [pc, #104]	; (8007ac0 <_puts_r+0xd8>)
 8007a58:	429c      	cmp	r4, r3
 8007a5a:	bf08      	it	eq
 8007a5c:	68ec      	ldreq	r4, [r5, #12]
 8007a5e:	e7d5      	b.n	8007a0c <_puts_r+0x24>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 f986 	bl	8007d74 <__swsetup_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d0dd      	beq.n	8007a28 <_puts_r+0x40>
 8007a6c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8007a70:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007a72:	07da      	lsls	r2, r3, #31
 8007a74:	d405      	bmi.n	8007a82 <_puts_r+0x9a>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	059b      	lsls	r3, r3, #22
 8007a7a:	d402      	bmi.n	8007a82 <_puts_r+0x9a>
 8007a7c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007a7e:	f7ff feef 	bl	8007860 <__retarget_lock_release_recursive>
 8007a82:	4628      	mov	r0, r5
 8007a84:	bd70      	pop	{r4, r5, r6, pc}
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	da04      	bge.n	8007a94 <_puts_r+0xac>
 8007a8a:	69a2      	ldr	r2, [r4, #24]
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	dc06      	bgt.n	8007a9e <_puts_r+0xb6>
 8007a90:	290a      	cmp	r1, #10
 8007a92:	d004      	beq.n	8007a9e <_puts_r+0xb6>
 8007a94:	6823      	ldr	r3, [r4, #0]
 8007a96:	1c5a      	adds	r2, r3, #1
 8007a98:	6022      	str	r2, [r4, #0]
 8007a9a:	7019      	strb	r1, [r3, #0]
 8007a9c:	e7c5      	b.n	8007a2a <_puts_r+0x42>
 8007a9e:	4622      	mov	r2, r4
 8007aa0:	4628      	mov	r0, r5
 8007aa2:	f000 f903 	bl	8007cac <__swbuf_r>
 8007aa6:	3001      	adds	r0, #1
 8007aa8:	d1bf      	bne.n	8007a2a <_puts_r+0x42>
 8007aaa:	e7df      	b.n	8007a6c <_puts_r+0x84>
 8007aac:	6823      	ldr	r3, [r4, #0]
 8007aae:	250a      	movs	r5, #10
 8007ab0:	1c5a      	adds	r2, r3, #1
 8007ab2:	6022      	str	r2, [r4, #0]
 8007ab4:	701d      	strb	r5, [r3, #0]
 8007ab6:	e7db      	b.n	8007a70 <_puts_r+0x88>
 8007ab8:	080093b8 	.word	0x080093b8
 8007abc:	080093d8 	.word	0x080093d8
 8007ac0:	08009398 	.word	0x08009398

08007ac4 <puts>:
 8007ac4:	4b02      	ldr	r3, [pc, #8]	; (8007ad0 <puts+0xc>)
 8007ac6:	4601      	mov	r1, r0
 8007ac8:	6818      	ldr	r0, [r3, #0]
 8007aca:	f7ff bf8d 	b.w	80079e8 <_puts_r>
 8007ace:	bf00      	nop
 8007ad0:	20000010 	.word	0x20000010

08007ad4 <cleanup_glue>:
 8007ad4:	b538      	push	{r3, r4, r5, lr}
 8007ad6:	460c      	mov	r4, r1
 8007ad8:	6809      	ldr	r1, [r1, #0]
 8007ada:	4605      	mov	r5, r0
 8007adc:	b109      	cbz	r1, 8007ae2 <cleanup_glue+0xe>
 8007ade:	f7ff fff9 	bl	8007ad4 <cleanup_glue>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007aea:	f000 bb07 	b.w	80080fc <_free_r>
	...

08007af0 <_reclaim_reent>:
 8007af0:	4b2c      	ldr	r3, [pc, #176]	; (8007ba4 <_reclaim_reent+0xb4>)
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4283      	cmp	r3, r0
 8007af6:	b570      	push	{r4, r5, r6, lr}
 8007af8:	4604      	mov	r4, r0
 8007afa:	d051      	beq.n	8007ba0 <_reclaim_reent+0xb0>
 8007afc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8007afe:	b143      	cbz	r3, 8007b12 <_reclaim_reent+0x22>
 8007b00:	68db      	ldr	r3, [r3, #12]
 8007b02:	2b00      	cmp	r3, #0
 8007b04:	d14a      	bne.n	8007b9c <_reclaim_reent+0xac>
 8007b06:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b08:	6819      	ldr	r1, [r3, #0]
 8007b0a:	b111      	cbz	r1, 8007b12 <_reclaim_reent+0x22>
 8007b0c:	4620      	mov	r0, r4
 8007b0e:	f000 faf5 	bl	80080fc <_free_r>
 8007b12:	6961      	ldr	r1, [r4, #20]
 8007b14:	b111      	cbz	r1, 8007b1c <_reclaim_reent+0x2c>
 8007b16:	4620      	mov	r0, r4
 8007b18:	f000 faf0 	bl	80080fc <_free_r>
 8007b1c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8007b1e:	b111      	cbz	r1, 8007b26 <_reclaim_reent+0x36>
 8007b20:	4620      	mov	r0, r4
 8007b22:	f000 faeb 	bl	80080fc <_free_r>
 8007b26:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8007b28:	b111      	cbz	r1, 8007b30 <_reclaim_reent+0x40>
 8007b2a:	4620      	mov	r0, r4
 8007b2c:	f000 fae6 	bl	80080fc <_free_r>
 8007b30:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8007b32:	b111      	cbz	r1, 8007b3a <_reclaim_reent+0x4a>
 8007b34:	4620      	mov	r0, r4
 8007b36:	f000 fae1 	bl	80080fc <_free_r>
 8007b3a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8007b3c:	b111      	cbz	r1, 8007b44 <_reclaim_reent+0x54>
 8007b3e:	4620      	mov	r0, r4
 8007b40:	f000 fadc 	bl	80080fc <_free_r>
 8007b44:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8007b46:	b111      	cbz	r1, 8007b4e <_reclaim_reent+0x5e>
 8007b48:	4620      	mov	r0, r4
 8007b4a:	f000 fad7 	bl	80080fc <_free_r>
 8007b4e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8007b50:	b111      	cbz	r1, 8007b58 <_reclaim_reent+0x68>
 8007b52:	4620      	mov	r0, r4
 8007b54:	f000 fad2 	bl	80080fc <_free_r>
 8007b58:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007b5a:	b111      	cbz	r1, 8007b62 <_reclaim_reent+0x72>
 8007b5c:	4620      	mov	r0, r4
 8007b5e:	f000 facd 	bl	80080fc <_free_r>
 8007b62:	69a3      	ldr	r3, [r4, #24]
 8007b64:	b1e3      	cbz	r3, 8007ba0 <_reclaim_reent+0xb0>
 8007b66:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8007b68:	4620      	mov	r0, r4
 8007b6a:	4798      	blx	r3
 8007b6c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8007b6e:	b1b9      	cbz	r1, 8007ba0 <_reclaim_reent+0xb0>
 8007b70:	4620      	mov	r0, r4
 8007b72:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007b76:	f7ff bfad 	b.w	8007ad4 <cleanup_glue>
 8007b7a:	5949      	ldr	r1, [r1, r5]
 8007b7c:	b941      	cbnz	r1, 8007b90 <_reclaim_reent+0xa0>
 8007b7e:	3504      	adds	r5, #4
 8007b80:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8007b82:	2d80      	cmp	r5, #128	; 0x80
 8007b84:	68d9      	ldr	r1, [r3, #12]
 8007b86:	d1f8      	bne.n	8007b7a <_reclaim_reent+0x8a>
 8007b88:	4620      	mov	r0, r4
 8007b8a:	f000 fab7 	bl	80080fc <_free_r>
 8007b8e:	e7ba      	b.n	8007b06 <_reclaim_reent+0x16>
 8007b90:	680e      	ldr	r6, [r1, #0]
 8007b92:	4620      	mov	r0, r4
 8007b94:	f000 fab2 	bl	80080fc <_free_r>
 8007b98:	4631      	mov	r1, r6
 8007b9a:	e7ef      	b.n	8007b7c <_reclaim_reent+0x8c>
 8007b9c:	2500      	movs	r5, #0
 8007b9e:	e7ef      	b.n	8007b80 <_reclaim_reent+0x90>
 8007ba0:	bd70      	pop	{r4, r5, r6, pc}
 8007ba2:	bf00      	nop
 8007ba4:	20000010 	.word	0x20000010

08007ba8 <_sbrk_r>:
 8007ba8:	b538      	push	{r3, r4, r5, lr}
 8007baa:	4d06      	ldr	r5, [pc, #24]	; (8007bc4 <_sbrk_r+0x1c>)
 8007bac:	2300      	movs	r3, #0
 8007bae:	4604      	mov	r4, r0
 8007bb0:	4608      	mov	r0, r1
 8007bb2:	602b      	str	r3, [r5, #0]
 8007bb4:	f7f9 f99c 	bl	8000ef0 <_sbrk>
 8007bb8:	1c43      	adds	r3, r0, #1
 8007bba:	d102      	bne.n	8007bc2 <_sbrk_r+0x1a>
 8007bbc:	682b      	ldr	r3, [r5, #0]
 8007bbe:	b103      	cbz	r3, 8007bc2 <_sbrk_r+0x1a>
 8007bc0:	6023      	str	r3, [r4, #0]
 8007bc2:	bd38      	pop	{r3, r4, r5, pc}
 8007bc4:	20004b0c 	.word	0x20004b0c

08007bc8 <siscanf>:
 8007bc8:	b40e      	push	{r1, r2, r3}
 8007bca:	b510      	push	{r4, lr}
 8007bcc:	b09f      	sub	sp, #124	; 0x7c
 8007bce:	ac21      	add	r4, sp, #132	; 0x84
 8007bd0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8007bd4:	f854 2b04 	ldr.w	r2, [r4], #4
 8007bd8:	9201      	str	r2, [sp, #4]
 8007bda:	f8ad 101c 	strh.w	r1, [sp, #28]
 8007bde:	9004      	str	r0, [sp, #16]
 8007be0:	9008      	str	r0, [sp, #32]
 8007be2:	f7f8 faf5 	bl	80001d0 <strlen>
 8007be6:	4b0c      	ldr	r3, [pc, #48]	; (8007c18 <siscanf+0x50>)
 8007be8:	9005      	str	r0, [sp, #20]
 8007bea:	9009      	str	r0, [sp, #36]	; 0x24
 8007bec:	930d      	str	r3, [sp, #52]	; 0x34
 8007bee:	480b      	ldr	r0, [pc, #44]	; (8007c1c <siscanf+0x54>)
 8007bf0:	9a01      	ldr	r2, [sp, #4]
 8007bf2:	6800      	ldr	r0, [r0, #0]
 8007bf4:	9403      	str	r4, [sp, #12]
 8007bf6:	2300      	movs	r3, #0
 8007bf8:	9311      	str	r3, [sp, #68]	; 0x44
 8007bfa:	9316      	str	r3, [sp, #88]	; 0x58
 8007bfc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007c00:	f8ad 301e 	strh.w	r3, [sp, #30]
 8007c04:	a904      	add	r1, sp, #16
 8007c06:	4623      	mov	r3, r4
 8007c08:	f000 fb1e 	bl	8008248 <__ssvfiscanf_r>
 8007c0c:	b01f      	add	sp, #124	; 0x7c
 8007c0e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c12:	b003      	add	sp, #12
 8007c14:	4770      	bx	lr
 8007c16:	bf00      	nop
 8007c18:	08007c43 	.word	0x08007c43
 8007c1c:	20000010 	.word	0x20000010

08007c20 <__sread>:
 8007c20:	b510      	push	{r4, lr}
 8007c22:	460c      	mov	r4, r1
 8007c24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c28:	f001 f8c6 	bl	8008db8 <_read_r>
 8007c2c:	2800      	cmp	r0, #0
 8007c2e:	bfab      	itete	ge
 8007c30:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007c32:	89a3      	ldrhlt	r3, [r4, #12]
 8007c34:	181b      	addge	r3, r3, r0
 8007c36:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007c3a:	bfac      	ite	ge
 8007c3c:	6563      	strge	r3, [r4, #84]	; 0x54
 8007c3e:	81a3      	strhlt	r3, [r4, #12]
 8007c40:	bd10      	pop	{r4, pc}

08007c42 <__seofread>:
 8007c42:	2000      	movs	r0, #0
 8007c44:	4770      	bx	lr

08007c46 <__swrite>:
 8007c46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c4a:	461f      	mov	r7, r3
 8007c4c:	898b      	ldrh	r3, [r1, #12]
 8007c4e:	05db      	lsls	r3, r3, #23
 8007c50:	4605      	mov	r5, r0
 8007c52:	460c      	mov	r4, r1
 8007c54:	4616      	mov	r6, r2
 8007c56:	d505      	bpl.n	8007c64 <__swrite+0x1e>
 8007c58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c5c:	2302      	movs	r3, #2
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f000 f9c8 	bl	8007ff4 <_lseek_r>
 8007c64:	89a3      	ldrh	r3, [r4, #12]
 8007c66:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c6a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007c6e:	81a3      	strh	r3, [r4, #12]
 8007c70:	4632      	mov	r2, r6
 8007c72:	463b      	mov	r3, r7
 8007c74:	4628      	mov	r0, r5
 8007c76:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c7a:	f000 b869 	b.w	8007d50 <_write_r>

08007c7e <__sseek>:
 8007c7e:	b510      	push	{r4, lr}
 8007c80:	460c      	mov	r4, r1
 8007c82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c86:	f000 f9b5 	bl	8007ff4 <_lseek_r>
 8007c8a:	1c43      	adds	r3, r0, #1
 8007c8c:	89a3      	ldrh	r3, [r4, #12]
 8007c8e:	bf15      	itete	ne
 8007c90:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c92:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c96:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c9a:	81a3      	strheq	r3, [r4, #12]
 8007c9c:	bf18      	it	ne
 8007c9e:	81a3      	strhne	r3, [r4, #12]
 8007ca0:	bd10      	pop	{r4, pc}

08007ca2 <__sclose>:
 8007ca2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca6:	f000 b8d3 	b.w	8007e50 <_close_r>
	...

08007cac <__swbuf_r>:
 8007cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007cae:	460e      	mov	r6, r1
 8007cb0:	4614      	mov	r4, r2
 8007cb2:	4605      	mov	r5, r0
 8007cb4:	b118      	cbz	r0, 8007cbe <__swbuf_r+0x12>
 8007cb6:	6983      	ldr	r3, [r0, #24]
 8007cb8:	b90b      	cbnz	r3, 8007cbe <__swbuf_r+0x12>
 8007cba:	f7ff fd0d 	bl	80076d8 <__sinit>
 8007cbe:	4b21      	ldr	r3, [pc, #132]	; (8007d44 <__swbuf_r+0x98>)
 8007cc0:	429c      	cmp	r4, r3
 8007cc2:	d12b      	bne.n	8007d1c <__swbuf_r+0x70>
 8007cc4:	686c      	ldr	r4, [r5, #4]
 8007cc6:	69a3      	ldr	r3, [r4, #24]
 8007cc8:	60a3      	str	r3, [r4, #8]
 8007cca:	89a3      	ldrh	r3, [r4, #12]
 8007ccc:	071a      	lsls	r2, r3, #28
 8007cce:	d52f      	bpl.n	8007d30 <__swbuf_r+0x84>
 8007cd0:	6923      	ldr	r3, [r4, #16]
 8007cd2:	b36b      	cbz	r3, 8007d30 <__swbuf_r+0x84>
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	6820      	ldr	r0, [r4, #0]
 8007cd8:	1ac0      	subs	r0, r0, r3
 8007cda:	6963      	ldr	r3, [r4, #20]
 8007cdc:	b2f6      	uxtb	r6, r6
 8007cde:	4283      	cmp	r3, r0
 8007ce0:	4637      	mov	r7, r6
 8007ce2:	dc04      	bgt.n	8007cee <__swbuf_r+0x42>
 8007ce4:	4621      	mov	r1, r4
 8007ce6:	4628      	mov	r0, r5
 8007ce8:	f000 f948 	bl	8007f7c <_fflush_r>
 8007cec:	bb30      	cbnz	r0, 8007d3c <__swbuf_r+0x90>
 8007cee:	68a3      	ldr	r3, [r4, #8]
 8007cf0:	3b01      	subs	r3, #1
 8007cf2:	60a3      	str	r3, [r4, #8]
 8007cf4:	6823      	ldr	r3, [r4, #0]
 8007cf6:	1c5a      	adds	r2, r3, #1
 8007cf8:	6022      	str	r2, [r4, #0]
 8007cfa:	701e      	strb	r6, [r3, #0]
 8007cfc:	6963      	ldr	r3, [r4, #20]
 8007cfe:	3001      	adds	r0, #1
 8007d00:	4283      	cmp	r3, r0
 8007d02:	d004      	beq.n	8007d0e <__swbuf_r+0x62>
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	07db      	lsls	r3, r3, #31
 8007d08:	d506      	bpl.n	8007d18 <__swbuf_r+0x6c>
 8007d0a:	2e0a      	cmp	r6, #10
 8007d0c:	d104      	bne.n	8007d18 <__swbuf_r+0x6c>
 8007d0e:	4621      	mov	r1, r4
 8007d10:	4628      	mov	r0, r5
 8007d12:	f000 f933 	bl	8007f7c <_fflush_r>
 8007d16:	b988      	cbnz	r0, 8007d3c <__swbuf_r+0x90>
 8007d18:	4638      	mov	r0, r7
 8007d1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d1c:	4b0a      	ldr	r3, [pc, #40]	; (8007d48 <__swbuf_r+0x9c>)
 8007d1e:	429c      	cmp	r4, r3
 8007d20:	d101      	bne.n	8007d26 <__swbuf_r+0x7a>
 8007d22:	68ac      	ldr	r4, [r5, #8]
 8007d24:	e7cf      	b.n	8007cc6 <__swbuf_r+0x1a>
 8007d26:	4b09      	ldr	r3, [pc, #36]	; (8007d4c <__swbuf_r+0xa0>)
 8007d28:	429c      	cmp	r4, r3
 8007d2a:	bf08      	it	eq
 8007d2c:	68ec      	ldreq	r4, [r5, #12]
 8007d2e:	e7ca      	b.n	8007cc6 <__swbuf_r+0x1a>
 8007d30:	4621      	mov	r1, r4
 8007d32:	4628      	mov	r0, r5
 8007d34:	f000 f81e 	bl	8007d74 <__swsetup_r>
 8007d38:	2800      	cmp	r0, #0
 8007d3a:	d0cb      	beq.n	8007cd4 <__swbuf_r+0x28>
 8007d3c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8007d40:	e7ea      	b.n	8007d18 <__swbuf_r+0x6c>
 8007d42:	bf00      	nop
 8007d44:	080093b8 	.word	0x080093b8
 8007d48:	080093d8 	.word	0x080093d8
 8007d4c:	08009398 	.word	0x08009398

08007d50 <_write_r>:
 8007d50:	b538      	push	{r3, r4, r5, lr}
 8007d52:	4d07      	ldr	r5, [pc, #28]	; (8007d70 <_write_r+0x20>)
 8007d54:	4604      	mov	r4, r0
 8007d56:	4608      	mov	r0, r1
 8007d58:	4611      	mov	r1, r2
 8007d5a:	2200      	movs	r2, #0
 8007d5c:	602a      	str	r2, [r5, #0]
 8007d5e:	461a      	mov	r2, r3
 8007d60:	f7f8 ff7a 	bl	8000c58 <_write>
 8007d64:	1c43      	adds	r3, r0, #1
 8007d66:	d102      	bne.n	8007d6e <_write_r+0x1e>
 8007d68:	682b      	ldr	r3, [r5, #0]
 8007d6a:	b103      	cbz	r3, 8007d6e <_write_r+0x1e>
 8007d6c:	6023      	str	r3, [r4, #0]
 8007d6e:	bd38      	pop	{r3, r4, r5, pc}
 8007d70:	20004b0c 	.word	0x20004b0c

08007d74 <__swsetup_r>:
 8007d74:	4b32      	ldr	r3, [pc, #200]	; (8007e40 <__swsetup_r+0xcc>)
 8007d76:	b570      	push	{r4, r5, r6, lr}
 8007d78:	681d      	ldr	r5, [r3, #0]
 8007d7a:	4606      	mov	r6, r0
 8007d7c:	460c      	mov	r4, r1
 8007d7e:	b125      	cbz	r5, 8007d8a <__swsetup_r+0x16>
 8007d80:	69ab      	ldr	r3, [r5, #24]
 8007d82:	b913      	cbnz	r3, 8007d8a <__swsetup_r+0x16>
 8007d84:	4628      	mov	r0, r5
 8007d86:	f7ff fca7 	bl	80076d8 <__sinit>
 8007d8a:	4b2e      	ldr	r3, [pc, #184]	; (8007e44 <__swsetup_r+0xd0>)
 8007d8c:	429c      	cmp	r4, r3
 8007d8e:	d10f      	bne.n	8007db0 <__swsetup_r+0x3c>
 8007d90:	686c      	ldr	r4, [r5, #4]
 8007d92:	89a3      	ldrh	r3, [r4, #12]
 8007d94:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007d98:	0719      	lsls	r1, r3, #28
 8007d9a:	d42c      	bmi.n	8007df6 <__swsetup_r+0x82>
 8007d9c:	06dd      	lsls	r5, r3, #27
 8007d9e:	d411      	bmi.n	8007dc4 <__swsetup_r+0x50>
 8007da0:	2309      	movs	r3, #9
 8007da2:	6033      	str	r3, [r6, #0]
 8007da4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007da8:	81a3      	strh	r3, [r4, #12]
 8007daa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007dae:	e03e      	b.n	8007e2e <__swsetup_r+0xba>
 8007db0:	4b25      	ldr	r3, [pc, #148]	; (8007e48 <__swsetup_r+0xd4>)
 8007db2:	429c      	cmp	r4, r3
 8007db4:	d101      	bne.n	8007dba <__swsetup_r+0x46>
 8007db6:	68ac      	ldr	r4, [r5, #8]
 8007db8:	e7eb      	b.n	8007d92 <__swsetup_r+0x1e>
 8007dba:	4b24      	ldr	r3, [pc, #144]	; (8007e4c <__swsetup_r+0xd8>)
 8007dbc:	429c      	cmp	r4, r3
 8007dbe:	bf08      	it	eq
 8007dc0:	68ec      	ldreq	r4, [r5, #12]
 8007dc2:	e7e6      	b.n	8007d92 <__swsetup_r+0x1e>
 8007dc4:	0758      	lsls	r0, r3, #29
 8007dc6:	d512      	bpl.n	8007dee <__swsetup_r+0x7a>
 8007dc8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007dca:	b141      	cbz	r1, 8007dde <__swsetup_r+0x6a>
 8007dcc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007dd0:	4299      	cmp	r1, r3
 8007dd2:	d002      	beq.n	8007dda <__swsetup_r+0x66>
 8007dd4:	4630      	mov	r0, r6
 8007dd6:	f000 f991 	bl	80080fc <_free_r>
 8007dda:	2300      	movs	r3, #0
 8007ddc:	6363      	str	r3, [r4, #52]	; 0x34
 8007dde:	89a3      	ldrh	r3, [r4, #12]
 8007de0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007de4:	81a3      	strh	r3, [r4, #12]
 8007de6:	2300      	movs	r3, #0
 8007de8:	6063      	str	r3, [r4, #4]
 8007dea:	6923      	ldr	r3, [r4, #16]
 8007dec:	6023      	str	r3, [r4, #0]
 8007dee:	89a3      	ldrh	r3, [r4, #12]
 8007df0:	f043 0308 	orr.w	r3, r3, #8
 8007df4:	81a3      	strh	r3, [r4, #12]
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	b94b      	cbnz	r3, 8007e0e <__swsetup_r+0x9a>
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007e00:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007e04:	d003      	beq.n	8007e0e <__swsetup_r+0x9a>
 8007e06:	4621      	mov	r1, r4
 8007e08:	4630      	mov	r0, r6
 8007e0a:	f000 f92b 	bl	8008064 <__smakebuf_r>
 8007e0e:	89a0      	ldrh	r0, [r4, #12]
 8007e10:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007e14:	f010 0301 	ands.w	r3, r0, #1
 8007e18:	d00a      	beq.n	8007e30 <__swsetup_r+0xbc>
 8007e1a:	2300      	movs	r3, #0
 8007e1c:	60a3      	str	r3, [r4, #8]
 8007e1e:	6963      	ldr	r3, [r4, #20]
 8007e20:	425b      	negs	r3, r3
 8007e22:	61a3      	str	r3, [r4, #24]
 8007e24:	6923      	ldr	r3, [r4, #16]
 8007e26:	b943      	cbnz	r3, 8007e3a <__swsetup_r+0xc6>
 8007e28:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007e2c:	d1ba      	bne.n	8007da4 <__swsetup_r+0x30>
 8007e2e:	bd70      	pop	{r4, r5, r6, pc}
 8007e30:	0781      	lsls	r1, r0, #30
 8007e32:	bf58      	it	pl
 8007e34:	6963      	ldrpl	r3, [r4, #20]
 8007e36:	60a3      	str	r3, [r4, #8]
 8007e38:	e7f4      	b.n	8007e24 <__swsetup_r+0xb0>
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	e7f7      	b.n	8007e2e <__swsetup_r+0xba>
 8007e3e:	bf00      	nop
 8007e40:	20000010 	.word	0x20000010
 8007e44:	080093b8 	.word	0x080093b8
 8007e48:	080093d8 	.word	0x080093d8
 8007e4c:	08009398 	.word	0x08009398

08007e50 <_close_r>:
 8007e50:	b538      	push	{r3, r4, r5, lr}
 8007e52:	4d06      	ldr	r5, [pc, #24]	; (8007e6c <_close_r+0x1c>)
 8007e54:	2300      	movs	r3, #0
 8007e56:	4604      	mov	r4, r0
 8007e58:	4608      	mov	r0, r1
 8007e5a:	602b      	str	r3, [r5, #0]
 8007e5c:	f7f9 f813 	bl	8000e86 <_close>
 8007e60:	1c43      	adds	r3, r0, #1
 8007e62:	d102      	bne.n	8007e6a <_close_r+0x1a>
 8007e64:	682b      	ldr	r3, [r5, #0]
 8007e66:	b103      	cbz	r3, 8007e6a <_close_r+0x1a>
 8007e68:	6023      	str	r3, [r4, #0]
 8007e6a:	bd38      	pop	{r3, r4, r5, pc}
 8007e6c:	20004b0c 	.word	0x20004b0c

08007e70 <__sflush_r>:
 8007e70:	898a      	ldrh	r2, [r1, #12]
 8007e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e76:	4605      	mov	r5, r0
 8007e78:	0710      	lsls	r0, r2, #28
 8007e7a:	460c      	mov	r4, r1
 8007e7c:	d458      	bmi.n	8007f30 <__sflush_r+0xc0>
 8007e7e:	684b      	ldr	r3, [r1, #4]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	dc05      	bgt.n	8007e90 <__sflush_r+0x20>
 8007e84:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007e86:	2b00      	cmp	r3, #0
 8007e88:	dc02      	bgt.n	8007e90 <__sflush_r+0x20>
 8007e8a:	2000      	movs	r0, #0
 8007e8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007e90:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007e92:	2e00      	cmp	r6, #0
 8007e94:	d0f9      	beq.n	8007e8a <__sflush_r+0x1a>
 8007e96:	2300      	movs	r3, #0
 8007e98:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8007e9c:	682f      	ldr	r7, [r5, #0]
 8007e9e:	602b      	str	r3, [r5, #0]
 8007ea0:	d032      	beq.n	8007f08 <__sflush_r+0x98>
 8007ea2:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007ea4:	89a3      	ldrh	r3, [r4, #12]
 8007ea6:	075a      	lsls	r2, r3, #29
 8007ea8:	d505      	bpl.n	8007eb6 <__sflush_r+0x46>
 8007eaa:	6863      	ldr	r3, [r4, #4]
 8007eac:	1ac0      	subs	r0, r0, r3
 8007eae:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007eb0:	b10b      	cbz	r3, 8007eb6 <__sflush_r+0x46>
 8007eb2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007eb4:	1ac0      	subs	r0, r0, r3
 8007eb6:	2300      	movs	r3, #0
 8007eb8:	4602      	mov	r2, r0
 8007eba:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007ebc:	6a21      	ldr	r1, [r4, #32]
 8007ebe:	4628      	mov	r0, r5
 8007ec0:	47b0      	blx	r6
 8007ec2:	1c43      	adds	r3, r0, #1
 8007ec4:	89a3      	ldrh	r3, [r4, #12]
 8007ec6:	d106      	bne.n	8007ed6 <__sflush_r+0x66>
 8007ec8:	6829      	ldr	r1, [r5, #0]
 8007eca:	291d      	cmp	r1, #29
 8007ecc:	d82c      	bhi.n	8007f28 <__sflush_r+0xb8>
 8007ece:	4a2a      	ldr	r2, [pc, #168]	; (8007f78 <__sflush_r+0x108>)
 8007ed0:	40ca      	lsrs	r2, r1
 8007ed2:	07d6      	lsls	r6, r2, #31
 8007ed4:	d528      	bpl.n	8007f28 <__sflush_r+0xb8>
 8007ed6:	2200      	movs	r2, #0
 8007ed8:	6062      	str	r2, [r4, #4]
 8007eda:	04d9      	lsls	r1, r3, #19
 8007edc:	6922      	ldr	r2, [r4, #16]
 8007ede:	6022      	str	r2, [r4, #0]
 8007ee0:	d504      	bpl.n	8007eec <__sflush_r+0x7c>
 8007ee2:	1c42      	adds	r2, r0, #1
 8007ee4:	d101      	bne.n	8007eea <__sflush_r+0x7a>
 8007ee6:	682b      	ldr	r3, [r5, #0]
 8007ee8:	b903      	cbnz	r3, 8007eec <__sflush_r+0x7c>
 8007eea:	6560      	str	r0, [r4, #84]	; 0x54
 8007eec:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007eee:	602f      	str	r7, [r5, #0]
 8007ef0:	2900      	cmp	r1, #0
 8007ef2:	d0ca      	beq.n	8007e8a <__sflush_r+0x1a>
 8007ef4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007ef8:	4299      	cmp	r1, r3
 8007efa:	d002      	beq.n	8007f02 <__sflush_r+0x92>
 8007efc:	4628      	mov	r0, r5
 8007efe:	f000 f8fd 	bl	80080fc <_free_r>
 8007f02:	2000      	movs	r0, #0
 8007f04:	6360      	str	r0, [r4, #52]	; 0x34
 8007f06:	e7c1      	b.n	8007e8c <__sflush_r+0x1c>
 8007f08:	6a21      	ldr	r1, [r4, #32]
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	4628      	mov	r0, r5
 8007f0e:	47b0      	blx	r6
 8007f10:	1c41      	adds	r1, r0, #1
 8007f12:	d1c7      	bne.n	8007ea4 <__sflush_r+0x34>
 8007f14:	682b      	ldr	r3, [r5, #0]
 8007f16:	2b00      	cmp	r3, #0
 8007f18:	d0c4      	beq.n	8007ea4 <__sflush_r+0x34>
 8007f1a:	2b1d      	cmp	r3, #29
 8007f1c:	d001      	beq.n	8007f22 <__sflush_r+0xb2>
 8007f1e:	2b16      	cmp	r3, #22
 8007f20:	d101      	bne.n	8007f26 <__sflush_r+0xb6>
 8007f22:	602f      	str	r7, [r5, #0]
 8007f24:	e7b1      	b.n	8007e8a <__sflush_r+0x1a>
 8007f26:	89a3      	ldrh	r3, [r4, #12]
 8007f28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f2c:	81a3      	strh	r3, [r4, #12]
 8007f2e:	e7ad      	b.n	8007e8c <__sflush_r+0x1c>
 8007f30:	690f      	ldr	r7, [r1, #16]
 8007f32:	2f00      	cmp	r7, #0
 8007f34:	d0a9      	beq.n	8007e8a <__sflush_r+0x1a>
 8007f36:	0793      	lsls	r3, r2, #30
 8007f38:	680e      	ldr	r6, [r1, #0]
 8007f3a:	bf08      	it	eq
 8007f3c:	694b      	ldreq	r3, [r1, #20]
 8007f3e:	600f      	str	r7, [r1, #0]
 8007f40:	bf18      	it	ne
 8007f42:	2300      	movne	r3, #0
 8007f44:	eba6 0807 	sub.w	r8, r6, r7
 8007f48:	608b      	str	r3, [r1, #8]
 8007f4a:	f1b8 0f00 	cmp.w	r8, #0
 8007f4e:	dd9c      	ble.n	8007e8a <__sflush_r+0x1a>
 8007f50:	6a21      	ldr	r1, [r4, #32]
 8007f52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007f54:	4643      	mov	r3, r8
 8007f56:	463a      	mov	r2, r7
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b0      	blx	r6
 8007f5c:	2800      	cmp	r0, #0
 8007f5e:	dc06      	bgt.n	8007f6e <__sflush_r+0xfe>
 8007f60:	89a3      	ldrh	r3, [r4, #12]
 8007f62:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007f66:	81a3      	strh	r3, [r4, #12]
 8007f68:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8007f6c:	e78e      	b.n	8007e8c <__sflush_r+0x1c>
 8007f6e:	4407      	add	r7, r0
 8007f70:	eba8 0800 	sub.w	r8, r8, r0
 8007f74:	e7e9      	b.n	8007f4a <__sflush_r+0xda>
 8007f76:	bf00      	nop
 8007f78:	20400001 	.word	0x20400001

08007f7c <_fflush_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	690b      	ldr	r3, [r1, #16]
 8007f80:	4605      	mov	r5, r0
 8007f82:	460c      	mov	r4, r1
 8007f84:	b913      	cbnz	r3, 8007f8c <_fflush_r+0x10>
 8007f86:	2500      	movs	r5, #0
 8007f88:	4628      	mov	r0, r5
 8007f8a:	bd38      	pop	{r3, r4, r5, pc}
 8007f8c:	b118      	cbz	r0, 8007f96 <_fflush_r+0x1a>
 8007f8e:	6983      	ldr	r3, [r0, #24]
 8007f90:	b90b      	cbnz	r3, 8007f96 <_fflush_r+0x1a>
 8007f92:	f7ff fba1 	bl	80076d8 <__sinit>
 8007f96:	4b14      	ldr	r3, [pc, #80]	; (8007fe8 <_fflush_r+0x6c>)
 8007f98:	429c      	cmp	r4, r3
 8007f9a:	d11b      	bne.n	8007fd4 <_fflush_r+0x58>
 8007f9c:	686c      	ldr	r4, [r5, #4]
 8007f9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d0ef      	beq.n	8007f86 <_fflush_r+0xa>
 8007fa6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007fa8:	07d0      	lsls	r0, r2, #31
 8007faa:	d404      	bmi.n	8007fb6 <_fflush_r+0x3a>
 8007fac:	0599      	lsls	r1, r3, #22
 8007fae:	d402      	bmi.n	8007fb6 <_fflush_r+0x3a>
 8007fb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fb2:	f7ff fc54 	bl	800785e <__retarget_lock_acquire_recursive>
 8007fb6:	4628      	mov	r0, r5
 8007fb8:	4621      	mov	r1, r4
 8007fba:	f7ff ff59 	bl	8007e70 <__sflush_r>
 8007fbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8007fc0:	07da      	lsls	r2, r3, #31
 8007fc2:	4605      	mov	r5, r0
 8007fc4:	d4e0      	bmi.n	8007f88 <_fflush_r+0xc>
 8007fc6:	89a3      	ldrh	r3, [r4, #12]
 8007fc8:	059b      	lsls	r3, r3, #22
 8007fca:	d4dd      	bmi.n	8007f88 <_fflush_r+0xc>
 8007fcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8007fce:	f7ff fc47 	bl	8007860 <__retarget_lock_release_recursive>
 8007fd2:	e7d9      	b.n	8007f88 <_fflush_r+0xc>
 8007fd4:	4b05      	ldr	r3, [pc, #20]	; (8007fec <_fflush_r+0x70>)
 8007fd6:	429c      	cmp	r4, r3
 8007fd8:	d101      	bne.n	8007fde <_fflush_r+0x62>
 8007fda:	68ac      	ldr	r4, [r5, #8]
 8007fdc:	e7df      	b.n	8007f9e <_fflush_r+0x22>
 8007fde:	4b04      	ldr	r3, [pc, #16]	; (8007ff0 <_fflush_r+0x74>)
 8007fe0:	429c      	cmp	r4, r3
 8007fe2:	bf08      	it	eq
 8007fe4:	68ec      	ldreq	r4, [r5, #12]
 8007fe6:	e7da      	b.n	8007f9e <_fflush_r+0x22>
 8007fe8:	080093b8 	.word	0x080093b8
 8007fec:	080093d8 	.word	0x080093d8
 8007ff0:	08009398 	.word	0x08009398

08007ff4 <_lseek_r>:
 8007ff4:	b538      	push	{r3, r4, r5, lr}
 8007ff6:	4d07      	ldr	r5, [pc, #28]	; (8008014 <_lseek_r+0x20>)
 8007ff8:	4604      	mov	r4, r0
 8007ffa:	4608      	mov	r0, r1
 8007ffc:	4611      	mov	r1, r2
 8007ffe:	2200      	movs	r2, #0
 8008000:	602a      	str	r2, [r5, #0]
 8008002:	461a      	mov	r2, r3
 8008004:	f7f8 ff66 	bl	8000ed4 <_lseek>
 8008008:	1c43      	adds	r3, r0, #1
 800800a:	d102      	bne.n	8008012 <_lseek_r+0x1e>
 800800c:	682b      	ldr	r3, [r5, #0]
 800800e:	b103      	cbz	r3, 8008012 <_lseek_r+0x1e>
 8008010:	6023      	str	r3, [r4, #0]
 8008012:	bd38      	pop	{r3, r4, r5, pc}
 8008014:	20004b0c 	.word	0x20004b0c

08008018 <__swhatbuf_r>:
 8008018:	b570      	push	{r4, r5, r6, lr}
 800801a:	460e      	mov	r6, r1
 800801c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008020:	2900      	cmp	r1, #0
 8008022:	b096      	sub	sp, #88	; 0x58
 8008024:	4614      	mov	r4, r2
 8008026:	461d      	mov	r5, r3
 8008028:	da08      	bge.n	800803c <__swhatbuf_r+0x24>
 800802a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800802e:	2200      	movs	r2, #0
 8008030:	602a      	str	r2, [r5, #0]
 8008032:	061a      	lsls	r2, r3, #24
 8008034:	d410      	bmi.n	8008058 <__swhatbuf_r+0x40>
 8008036:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800803a:	e00e      	b.n	800805a <__swhatbuf_r+0x42>
 800803c:	466a      	mov	r2, sp
 800803e:	f001 f837 	bl	80090b0 <_fstat_r>
 8008042:	2800      	cmp	r0, #0
 8008044:	dbf1      	blt.n	800802a <__swhatbuf_r+0x12>
 8008046:	9a01      	ldr	r2, [sp, #4]
 8008048:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800804c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008050:	425a      	negs	r2, r3
 8008052:	415a      	adcs	r2, r3
 8008054:	602a      	str	r2, [r5, #0]
 8008056:	e7ee      	b.n	8008036 <__swhatbuf_r+0x1e>
 8008058:	2340      	movs	r3, #64	; 0x40
 800805a:	2000      	movs	r0, #0
 800805c:	6023      	str	r3, [r4, #0]
 800805e:	b016      	add	sp, #88	; 0x58
 8008060:	bd70      	pop	{r4, r5, r6, pc}
	...

08008064 <__smakebuf_r>:
 8008064:	898b      	ldrh	r3, [r1, #12]
 8008066:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008068:	079d      	lsls	r5, r3, #30
 800806a:	4606      	mov	r6, r0
 800806c:	460c      	mov	r4, r1
 800806e:	d507      	bpl.n	8008080 <__smakebuf_r+0x1c>
 8008070:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008074:	6023      	str	r3, [r4, #0]
 8008076:	6123      	str	r3, [r4, #16]
 8008078:	2301      	movs	r3, #1
 800807a:	6163      	str	r3, [r4, #20]
 800807c:	b002      	add	sp, #8
 800807e:	bd70      	pop	{r4, r5, r6, pc}
 8008080:	ab01      	add	r3, sp, #4
 8008082:	466a      	mov	r2, sp
 8008084:	f7ff ffc8 	bl	8008018 <__swhatbuf_r>
 8008088:	9900      	ldr	r1, [sp, #0]
 800808a:	4605      	mov	r5, r0
 800808c:	4630      	mov	r0, r6
 800808e:	f7ff fc1f 	bl	80078d0 <_malloc_r>
 8008092:	b948      	cbnz	r0, 80080a8 <__smakebuf_r+0x44>
 8008094:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008098:	059a      	lsls	r2, r3, #22
 800809a:	d4ef      	bmi.n	800807c <__smakebuf_r+0x18>
 800809c:	f023 0303 	bic.w	r3, r3, #3
 80080a0:	f043 0302 	orr.w	r3, r3, #2
 80080a4:	81a3      	strh	r3, [r4, #12]
 80080a6:	e7e3      	b.n	8008070 <__smakebuf_r+0xc>
 80080a8:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <__smakebuf_r+0x7c>)
 80080aa:	62b3      	str	r3, [r6, #40]	; 0x28
 80080ac:	89a3      	ldrh	r3, [r4, #12]
 80080ae:	6020      	str	r0, [r4, #0]
 80080b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80080b4:	81a3      	strh	r3, [r4, #12]
 80080b6:	9b00      	ldr	r3, [sp, #0]
 80080b8:	6163      	str	r3, [r4, #20]
 80080ba:	9b01      	ldr	r3, [sp, #4]
 80080bc:	6120      	str	r0, [r4, #16]
 80080be:	b15b      	cbz	r3, 80080d8 <__smakebuf_r+0x74>
 80080c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80080c4:	4630      	mov	r0, r6
 80080c6:	f001 f805 	bl	80090d4 <_isatty_r>
 80080ca:	b128      	cbz	r0, 80080d8 <__smakebuf_r+0x74>
 80080cc:	89a3      	ldrh	r3, [r4, #12]
 80080ce:	f023 0303 	bic.w	r3, r3, #3
 80080d2:	f043 0301 	orr.w	r3, r3, #1
 80080d6:	81a3      	strh	r3, [r4, #12]
 80080d8:	89a0      	ldrh	r0, [r4, #12]
 80080da:	4305      	orrs	r5, r0
 80080dc:	81a5      	strh	r5, [r4, #12]
 80080de:	e7cd      	b.n	800807c <__smakebuf_r+0x18>
 80080e0:	08007671 	.word	0x08007671

080080e4 <__malloc_lock>:
 80080e4:	4801      	ldr	r0, [pc, #4]	; (80080ec <__malloc_lock+0x8>)
 80080e6:	f7ff bbba 	b.w	800785e <__retarget_lock_acquire_recursive>
 80080ea:	bf00      	nop
 80080ec:	20004b00 	.word	0x20004b00

080080f0 <__malloc_unlock>:
 80080f0:	4801      	ldr	r0, [pc, #4]	; (80080f8 <__malloc_unlock+0x8>)
 80080f2:	f7ff bbb5 	b.w	8007860 <__retarget_lock_release_recursive>
 80080f6:	bf00      	nop
 80080f8:	20004b00 	.word	0x20004b00

080080fc <_free_r>:
 80080fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080fe:	2900      	cmp	r1, #0
 8008100:	d044      	beq.n	800818c <_free_r+0x90>
 8008102:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008106:	9001      	str	r0, [sp, #4]
 8008108:	2b00      	cmp	r3, #0
 800810a:	f1a1 0404 	sub.w	r4, r1, #4
 800810e:	bfb8      	it	lt
 8008110:	18e4      	addlt	r4, r4, r3
 8008112:	f7ff ffe7 	bl	80080e4 <__malloc_lock>
 8008116:	4a1e      	ldr	r2, [pc, #120]	; (8008190 <_free_r+0x94>)
 8008118:	9801      	ldr	r0, [sp, #4]
 800811a:	6813      	ldr	r3, [r2, #0]
 800811c:	b933      	cbnz	r3, 800812c <_free_r+0x30>
 800811e:	6063      	str	r3, [r4, #4]
 8008120:	6014      	str	r4, [r2, #0]
 8008122:	b003      	add	sp, #12
 8008124:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008128:	f7ff bfe2 	b.w	80080f0 <__malloc_unlock>
 800812c:	42a3      	cmp	r3, r4
 800812e:	d908      	bls.n	8008142 <_free_r+0x46>
 8008130:	6825      	ldr	r5, [r4, #0]
 8008132:	1961      	adds	r1, r4, r5
 8008134:	428b      	cmp	r3, r1
 8008136:	bf01      	itttt	eq
 8008138:	6819      	ldreq	r1, [r3, #0]
 800813a:	685b      	ldreq	r3, [r3, #4]
 800813c:	1949      	addeq	r1, r1, r5
 800813e:	6021      	streq	r1, [r4, #0]
 8008140:	e7ed      	b.n	800811e <_free_r+0x22>
 8008142:	461a      	mov	r2, r3
 8008144:	685b      	ldr	r3, [r3, #4]
 8008146:	b10b      	cbz	r3, 800814c <_free_r+0x50>
 8008148:	42a3      	cmp	r3, r4
 800814a:	d9fa      	bls.n	8008142 <_free_r+0x46>
 800814c:	6811      	ldr	r1, [r2, #0]
 800814e:	1855      	adds	r5, r2, r1
 8008150:	42a5      	cmp	r5, r4
 8008152:	d10b      	bne.n	800816c <_free_r+0x70>
 8008154:	6824      	ldr	r4, [r4, #0]
 8008156:	4421      	add	r1, r4
 8008158:	1854      	adds	r4, r2, r1
 800815a:	42a3      	cmp	r3, r4
 800815c:	6011      	str	r1, [r2, #0]
 800815e:	d1e0      	bne.n	8008122 <_free_r+0x26>
 8008160:	681c      	ldr	r4, [r3, #0]
 8008162:	685b      	ldr	r3, [r3, #4]
 8008164:	6053      	str	r3, [r2, #4]
 8008166:	4421      	add	r1, r4
 8008168:	6011      	str	r1, [r2, #0]
 800816a:	e7da      	b.n	8008122 <_free_r+0x26>
 800816c:	d902      	bls.n	8008174 <_free_r+0x78>
 800816e:	230c      	movs	r3, #12
 8008170:	6003      	str	r3, [r0, #0]
 8008172:	e7d6      	b.n	8008122 <_free_r+0x26>
 8008174:	6825      	ldr	r5, [r4, #0]
 8008176:	1961      	adds	r1, r4, r5
 8008178:	428b      	cmp	r3, r1
 800817a:	bf04      	itt	eq
 800817c:	6819      	ldreq	r1, [r3, #0]
 800817e:	685b      	ldreq	r3, [r3, #4]
 8008180:	6063      	str	r3, [r4, #4]
 8008182:	bf04      	itt	eq
 8008184:	1949      	addeq	r1, r1, r5
 8008186:	6021      	streq	r1, [r4, #0]
 8008188:	6054      	str	r4, [r2, #4]
 800818a:	e7ca      	b.n	8008122 <_free_r+0x26>
 800818c:	b003      	add	sp, #12
 800818e:	bd30      	pop	{r4, r5, pc}
 8008190:	20004b04 	.word	0x20004b04

08008194 <_sungetc_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	1c4b      	adds	r3, r1, #1
 8008198:	4614      	mov	r4, r2
 800819a:	d103      	bne.n	80081a4 <_sungetc_r+0x10>
 800819c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 80081a0:	4628      	mov	r0, r5
 80081a2:	bd38      	pop	{r3, r4, r5, pc}
 80081a4:	8993      	ldrh	r3, [r2, #12]
 80081a6:	f023 0320 	bic.w	r3, r3, #32
 80081aa:	8193      	strh	r3, [r2, #12]
 80081ac:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80081ae:	6852      	ldr	r2, [r2, #4]
 80081b0:	b2cd      	uxtb	r5, r1
 80081b2:	b18b      	cbz	r3, 80081d8 <_sungetc_r+0x44>
 80081b4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80081b6:	4293      	cmp	r3, r2
 80081b8:	dd08      	ble.n	80081cc <_sungetc_r+0x38>
 80081ba:	6823      	ldr	r3, [r4, #0]
 80081bc:	1e5a      	subs	r2, r3, #1
 80081be:	6022      	str	r2, [r4, #0]
 80081c0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80081c4:	6863      	ldr	r3, [r4, #4]
 80081c6:	3301      	adds	r3, #1
 80081c8:	6063      	str	r3, [r4, #4]
 80081ca:	e7e9      	b.n	80081a0 <_sungetc_r+0xc>
 80081cc:	4621      	mov	r1, r4
 80081ce:	f000 ff35 	bl	800903c <__submore>
 80081d2:	2800      	cmp	r0, #0
 80081d4:	d0f1      	beq.n	80081ba <_sungetc_r+0x26>
 80081d6:	e7e1      	b.n	800819c <_sungetc_r+0x8>
 80081d8:	6921      	ldr	r1, [r4, #16]
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	b151      	cbz	r1, 80081f4 <_sungetc_r+0x60>
 80081de:	4299      	cmp	r1, r3
 80081e0:	d208      	bcs.n	80081f4 <_sungetc_r+0x60>
 80081e2:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 80081e6:	42a9      	cmp	r1, r5
 80081e8:	d104      	bne.n	80081f4 <_sungetc_r+0x60>
 80081ea:	3b01      	subs	r3, #1
 80081ec:	3201      	adds	r2, #1
 80081ee:	6023      	str	r3, [r4, #0]
 80081f0:	6062      	str	r2, [r4, #4]
 80081f2:	e7d5      	b.n	80081a0 <_sungetc_r+0xc>
 80081f4:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 80081f8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80081fc:	6363      	str	r3, [r4, #52]	; 0x34
 80081fe:	2303      	movs	r3, #3
 8008200:	63a3      	str	r3, [r4, #56]	; 0x38
 8008202:	4623      	mov	r3, r4
 8008204:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008208:	6023      	str	r3, [r4, #0]
 800820a:	2301      	movs	r3, #1
 800820c:	e7dc      	b.n	80081c8 <_sungetc_r+0x34>

0800820e <__ssrefill_r>:
 800820e:	b510      	push	{r4, lr}
 8008210:	460c      	mov	r4, r1
 8008212:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008214:	b169      	cbz	r1, 8008232 <__ssrefill_r+0x24>
 8008216:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800821a:	4299      	cmp	r1, r3
 800821c:	d001      	beq.n	8008222 <__ssrefill_r+0x14>
 800821e:	f7ff ff6d 	bl	80080fc <_free_r>
 8008222:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008224:	6063      	str	r3, [r4, #4]
 8008226:	2000      	movs	r0, #0
 8008228:	6360      	str	r0, [r4, #52]	; 0x34
 800822a:	b113      	cbz	r3, 8008232 <__ssrefill_r+0x24>
 800822c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800822e:	6023      	str	r3, [r4, #0]
 8008230:	bd10      	pop	{r4, pc}
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	6023      	str	r3, [r4, #0]
 8008236:	2300      	movs	r3, #0
 8008238:	6063      	str	r3, [r4, #4]
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f043 0320 	orr.w	r3, r3, #32
 8008240:	81a3      	strh	r3, [r4, #12]
 8008242:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008246:	e7f3      	b.n	8008230 <__ssrefill_r+0x22>

08008248 <__ssvfiscanf_r>:
 8008248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800824c:	460c      	mov	r4, r1
 800824e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008252:	2100      	movs	r1, #0
 8008254:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008258:	49a6      	ldr	r1, [pc, #664]	; (80084f4 <__ssvfiscanf_r+0x2ac>)
 800825a:	91a0      	str	r1, [sp, #640]	; 0x280
 800825c:	f10d 0804 	add.w	r8, sp, #4
 8008260:	49a5      	ldr	r1, [pc, #660]	; (80084f8 <__ssvfiscanf_r+0x2b0>)
 8008262:	4fa6      	ldr	r7, [pc, #664]	; (80084fc <__ssvfiscanf_r+0x2b4>)
 8008264:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008500 <__ssvfiscanf_r+0x2b8>
 8008268:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800826c:	4606      	mov	r6, r0
 800826e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008270:	9300      	str	r3, [sp, #0]
 8008272:	7813      	ldrb	r3, [r2, #0]
 8008274:	2b00      	cmp	r3, #0
 8008276:	f000 815a 	beq.w	800852e <__ssvfiscanf_r+0x2e6>
 800827a:	5dd9      	ldrb	r1, [r3, r7]
 800827c:	f011 0108 	ands.w	r1, r1, #8
 8008280:	f102 0501 	add.w	r5, r2, #1
 8008284:	d019      	beq.n	80082ba <__ssvfiscanf_r+0x72>
 8008286:	6863      	ldr	r3, [r4, #4]
 8008288:	2b00      	cmp	r3, #0
 800828a:	dd0f      	ble.n	80082ac <__ssvfiscanf_r+0x64>
 800828c:	6823      	ldr	r3, [r4, #0]
 800828e:	781a      	ldrb	r2, [r3, #0]
 8008290:	5cba      	ldrb	r2, [r7, r2]
 8008292:	0712      	lsls	r2, r2, #28
 8008294:	d401      	bmi.n	800829a <__ssvfiscanf_r+0x52>
 8008296:	462a      	mov	r2, r5
 8008298:	e7eb      	b.n	8008272 <__ssvfiscanf_r+0x2a>
 800829a:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800829c:	3201      	adds	r2, #1
 800829e:	9245      	str	r2, [sp, #276]	; 0x114
 80082a0:	6862      	ldr	r2, [r4, #4]
 80082a2:	3301      	adds	r3, #1
 80082a4:	3a01      	subs	r2, #1
 80082a6:	6062      	str	r2, [r4, #4]
 80082a8:	6023      	str	r3, [r4, #0]
 80082aa:	e7ec      	b.n	8008286 <__ssvfiscanf_r+0x3e>
 80082ac:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80082ae:	4621      	mov	r1, r4
 80082b0:	4630      	mov	r0, r6
 80082b2:	4798      	blx	r3
 80082b4:	2800      	cmp	r0, #0
 80082b6:	d0e9      	beq.n	800828c <__ssvfiscanf_r+0x44>
 80082b8:	e7ed      	b.n	8008296 <__ssvfiscanf_r+0x4e>
 80082ba:	2b25      	cmp	r3, #37	; 0x25
 80082bc:	d012      	beq.n	80082e4 <__ssvfiscanf_r+0x9c>
 80082be:	469a      	mov	sl, r3
 80082c0:	6863      	ldr	r3, [r4, #4]
 80082c2:	2b00      	cmp	r3, #0
 80082c4:	f340 8091 	ble.w	80083ea <__ssvfiscanf_r+0x1a2>
 80082c8:	6822      	ldr	r2, [r4, #0]
 80082ca:	7813      	ldrb	r3, [r2, #0]
 80082cc:	4553      	cmp	r3, sl
 80082ce:	f040 812e 	bne.w	800852e <__ssvfiscanf_r+0x2e6>
 80082d2:	6863      	ldr	r3, [r4, #4]
 80082d4:	3b01      	subs	r3, #1
 80082d6:	6063      	str	r3, [r4, #4]
 80082d8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80082da:	3201      	adds	r2, #1
 80082dc:	3301      	adds	r3, #1
 80082de:	6022      	str	r2, [r4, #0]
 80082e0:	9345      	str	r3, [sp, #276]	; 0x114
 80082e2:	e7d8      	b.n	8008296 <__ssvfiscanf_r+0x4e>
 80082e4:	9141      	str	r1, [sp, #260]	; 0x104
 80082e6:	9143      	str	r1, [sp, #268]	; 0x10c
 80082e8:	7853      	ldrb	r3, [r2, #1]
 80082ea:	2b2a      	cmp	r3, #42	; 0x2a
 80082ec:	bf02      	ittt	eq
 80082ee:	2310      	moveq	r3, #16
 80082f0:	1c95      	addeq	r5, r2, #2
 80082f2:	9341      	streq	r3, [sp, #260]	; 0x104
 80082f4:	220a      	movs	r2, #10
 80082f6:	46aa      	mov	sl, r5
 80082f8:	f81a 1b01 	ldrb.w	r1, [sl], #1
 80082fc:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008300:	2b09      	cmp	r3, #9
 8008302:	d91d      	bls.n	8008340 <__ssvfiscanf_r+0xf8>
 8008304:	487e      	ldr	r0, [pc, #504]	; (8008500 <__ssvfiscanf_r+0x2b8>)
 8008306:	2203      	movs	r2, #3
 8008308:	f7f7 ff6a 	bl	80001e0 <memchr>
 800830c:	b140      	cbz	r0, 8008320 <__ssvfiscanf_r+0xd8>
 800830e:	2301      	movs	r3, #1
 8008310:	eba0 0009 	sub.w	r0, r0, r9
 8008314:	fa03 f000 	lsl.w	r0, r3, r0
 8008318:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800831a:	4318      	orrs	r0, r3
 800831c:	9041      	str	r0, [sp, #260]	; 0x104
 800831e:	4655      	mov	r5, sl
 8008320:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008324:	2b78      	cmp	r3, #120	; 0x78
 8008326:	d806      	bhi.n	8008336 <__ssvfiscanf_r+0xee>
 8008328:	2b57      	cmp	r3, #87	; 0x57
 800832a:	d810      	bhi.n	800834e <__ssvfiscanf_r+0x106>
 800832c:	2b25      	cmp	r3, #37	; 0x25
 800832e:	d0c6      	beq.n	80082be <__ssvfiscanf_r+0x76>
 8008330:	d856      	bhi.n	80083e0 <__ssvfiscanf_r+0x198>
 8008332:	2b00      	cmp	r3, #0
 8008334:	d064      	beq.n	8008400 <__ssvfiscanf_r+0x1b8>
 8008336:	2303      	movs	r3, #3
 8008338:	9347      	str	r3, [sp, #284]	; 0x11c
 800833a:	230a      	movs	r3, #10
 800833c:	9342      	str	r3, [sp, #264]	; 0x108
 800833e:	e071      	b.n	8008424 <__ssvfiscanf_r+0x1dc>
 8008340:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008342:	fb02 1103 	mla	r1, r2, r3, r1
 8008346:	3930      	subs	r1, #48	; 0x30
 8008348:	9143      	str	r1, [sp, #268]	; 0x10c
 800834a:	4655      	mov	r5, sl
 800834c:	e7d3      	b.n	80082f6 <__ssvfiscanf_r+0xae>
 800834e:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008352:	2a20      	cmp	r2, #32
 8008354:	d8ef      	bhi.n	8008336 <__ssvfiscanf_r+0xee>
 8008356:	a101      	add	r1, pc, #4	; (adr r1, 800835c <__ssvfiscanf_r+0x114>)
 8008358:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800835c:	0800840f 	.word	0x0800840f
 8008360:	08008337 	.word	0x08008337
 8008364:	08008337 	.word	0x08008337
 8008368:	0800846d 	.word	0x0800846d
 800836c:	08008337 	.word	0x08008337
 8008370:	08008337 	.word	0x08008337
 8008374:	08008337 	.word	0x08008337
 8008378:	08008337 	.word	0x08008337
 800837c:	08008337 	.word	0x08008337
 8008380:	08008337 	.word	0x08008337
 8008384:	08008337 	.word	0x08008337
 8008388:	08008483 	.word	0x08008483
 800838c:	08008459 	.word	0x08008459
 8008390:	080083e7 	.word	0x080083e7
 8008394:	080083e7 	.word	0x080083e7
 8008398:	080083e7 	.word	0x080083e7
 800839c:	08008337 	.word	0x08008337
 80083a0:	0800845d 	.word	0x0800845d
 80083a4:	08008337 	.word	0x08008337
 80083a8:	08008337 	.word	0x08008337
 80083ac:	08008337 	.word	0x08008337
 80083b0:	08008337 	.word	0x08008337
 80083b4:	08008493 	.word	0x08008493
 80083b8:	08008465 	.word	0x08008465
 80083bc:	08008407 	.word	0x08008407
 80083c0:	08008337 	.word	0x08008337
 80083c4:	08008337 	.word	0x08008337
 80083c8:	0800848f 	.word	0x0800848f
 80083cc:	08008337 	.word	0x08008337
 80083d0:	08008459 	.word	0x08008459
 80083d4:	08008337 	.word	0x08008337
 80083d8:	08008337 	.word	0x08008337
 80083dc:	0800840f 	.word	0x0800840f
 80083e0:	3b45      	subs	r3, #69	; 0x45
 80083e2:	2b02      	cmp	r3, #2
 80083e4:	d8a7      	bhi.n	8008336 <__ssvfiscanf_r+0xee>
 80083e6:	2305      	movs	r3, #5
 80083e8:	e01b      	b.n	8008422 <__ssvfiscanf_r+0x1da>
 80083ea:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083ec:	4621      	mov	r1, r4
 80083ee:	4630      	mov	r0, r6
 80083f0:	4798      	blx	r3
 80083f2:	2800      	cmp	r0, #0
 80083f4:	f43f af68 	beq.w	80082c8 <__ssvfiscanf_r+0x80>
 80083f8:	9844      	ldr	r0, [sp, #272]	; 0x110
 80083fa:	2800      	cmp	r0, #0
 80083fc:	f040 808d 	bne.w	800851a <__ssvfiscanf_r+0x2d2>
 8008400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008404:	e08f      	b.n	8008526 <__ssvfiscanf_r+0x2de>
 8008406:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008408:	f042 0220 	orr.w	r2, r2, #32
 800840c:	9241      	str	r2, [sp, #260]	; 0x104
 800840e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008410:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008414:	9241      	str	r2, [sp, #260]	; 0x104
 8008416:	2210      	movs	r2, #16
 8008418:	2b6f      	cmp	r3, #111	; 0x6f
 800841a:	9242      	str	r2, [sp, #264]	; 0x108
 800841c:	bf34      	ite	cc
 800841e:	2303      	movcc	r3, #3
 8008420:	2304      	movcs	r3, #4
 8008422:	9347      	str	r3, [sp, #284]	; 0x11c
 8008424:	6863      	ldr	r3, [r4, #4]
 8008426:	2b00      	cmp	r3, #0
 8008428:	dd42      	ble.n	80084b0 <__ssvfiscanf_r+0x268>
 800842a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 800842c:	0659      	lsls	r1, r3, #25
 800842e:	d404      	bmi.n	800843a <__ssvfiscanf_r+0x1f2>
 8008430:	6823      	ldr	r3, [r4, #0]
 8008432:	781a      	ldrb	r2, [r3, #0]
 8008434:	5cba      	ldrb	r2, [r7, r2]
 8008436:	0712      	lsls	r2, r2, #28
 8008438:	d441      	bmi.n	80084be <__ssvfiscanf_r+0x276>
 800843a:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 800843c:	2b02      	cmp	r3, #2
 800843e:	dc50      	bgt.n	80084e2 <__ssvfiscanf_r+0x29a>
 8008440:	466b      	mov	r3, sp
 8008442:	4622      	mov	r2, r4
 8008444:	a941      	add	r1, sp, #260	; 0x104
 8008446:	4630      	mov	r0, r6
 8008448:	f000 fb64 	bl	8008b14 <_scanf_chars>
 800844c:	2801      	cmp	r0, #1
 800844e:	d06e      	beq.n	800852e <__ssvfiscanf_r+0x2e6>
 8008450:	2802      	cmp	r0, #2
 8008452:	f47f af20 	bne.w	8008296 <__ssvfiscanf_r+0x4e>
 8008456:	e7cf      	b.n	80083f8 <__ssvfiscanf_r+0x1b0>
 8008458:	220a      	movs	r2, #10
 800845a:	e7dd      	b.n	8008418 <__ssvfiscanf_r+0x1d0>
 800845c:	2300      	movs	r3, #0
 800845e:	9342      	str	r3, [sp, #264]	; 0x108
 8008460:	2303      	movs	r3, #3
 8008462:	e7de      	b.n	8008422 <__ssvfiscanf_r+0x1da>
 8008464:	2308      	movs	r3, #8
 8008466:	9342      	str	r3, [sp, #264]	; 0x108
 8008468:	2304      	movs	r3, #4
 800846a:	e7da      	b.n	8008422 <__ssvfiscanf_r+0x1da>
 800846c:	4629      	mov	r1, r5
 800846e:	4640      	mov	r0, r8
 8008470:	f000 fcb4 	bl	8008ddc <__sccl>
 8008474:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008476:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800847a:	9341      	str	r3, [sp, #260]	; 0x104
 800847c:	4605      	mov	r5, r0
 800847e:	2301      	movs	r3, #1
 8008480:	e7cf      	b.n	8008422 <__ssvfiscanf_r+0x1da>
 8008482:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008484:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008488:	9341      	str	r3, [sp, #260]	; 0x104
 800848a:	2300      	movs	r3, #0
 800848c:	e7c9      	b.n	8008422 <__ssvfiscanf_r+0x1da>
 800848e:	2302      	movs	r3, #2
 8008490:	e7c7      	b.n	8008422 <__ssvfiscanf_r+0x1da>
 8008492:	9841      	ldr	r0, [sp, #260]	; 0x104
 8008494:	06c3      	lsls	r3, r0, #27
 8008496:	f53f aefe 	bmi.w	8008296 <__ssvfiscanf_r+0x4e>
 800849a:	9b00      	ldr	r3, [sp, #0]
 800849c:	9a45      	ldr	r2, [sp, #276]	; 0x114
 800849e:	1d19      	adds	r1, r3, #4
 80084a0:	9100      	str	r1, [sp, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f010 0f01 	tst.w	r0, #1
 80084a8:	bf14      	ite	ne
 80084aa:	801a      	strhne	r2, [r3, #0]
 80084ac:	601a      	streq	r2, [r3, #0]
 80084ae:	e6f2      	b.n	8008296 <__ssvfiscanf_r+0x4e>
 80084b0:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80084b2:	4621      	mov	r1, r4
 80084b4:	4630      	mov	r0, r6
 80084b6:	4798      	blx	r3
 80084b8:	2800      	cmp	r0, #0
 80084ba:	d0b6      	beq.n	800842a <__ssvfiscanf_r+0x1e2>
 80084bc:	e79c      	b.n	80083f8 <__ssvfiscanf_r+0x1b0>
 80084be:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80084c0:	3201      	adds	r2, #1
 80084c2:	9245      	str	r2, [sp, #276]	; 0x114
 80084c4:	6862      	ldr	r2, [r4, #4]
 80084c6:	3a01      	subs	r2, #1
 80084c8:	2a00      	cmp	r2, #0
 80084ca:	6062      	str	r2, [r4, #4]
 80084cc:	dd02      	ble.n	80084d4 <__ssvfiscanf_r+0x28c>
 80084ce:	3301      	adds	r3, #1
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	e7ad      	b.n	8008430 <__ssvfiscanf_r+0x1e8>
 80084d4:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80084d6:	4621      	mov	r1, r4
 80084d8:	4630      	mov	r0, r6
 80084da:	4798      	blx	r3
 80084dc:	2800      	cmp	r0, #0
 80084de:	d0a7      	beq.n	8008430 <__ssvfiscanf_r+0x1e8>
 80084e0:	e78a      	b.n	80083f8 <__ssvfiscanf_r+0x1b0>
 80084e2:	2b04      	cmp	r3, #4
 80084e4:	dc0e      	bgt.n	8008504 <__ssvfiscanf_r+0x2bc>
 80084e6:	466b      	mov	r3, sp
 80084e8:	4622      	mov	r2, r4
 80084ea:	a941      	add	r1, sp, #260	; 0x104
 80084ec:	4630      	mov	r0, r6
 80084ee:	f000 fb6b 	bl	8008bc8 <_scanf_i>
 80084f2:	e7ab      	b.n	800844c <__ssvfiscanf_r+0x204>
 80084f4:	08008195 	.word	0x08008195
 80084f8:	0800820f 	.word	0x0800820f
 80084fc:	0800944b 	.word	0x0800944b
 8008500:	080093fc 	.word	0x080093fc
 8008504:	4b0b      	ldr	r3, [pc, #44]	; (8008534 <__ssvfiscanf_r+0x2ec>)
 8008506:	2b00      	cmp	r3, #0
 8008508:	f43f aec5 	beq.w	8008296 <__ssvfiscanf_r+0x4e>
 800850c:	466b      	mov	r3, sp
 800850e:	4622      	mov	r2, r4
 8008510:	a941      	add	r1, sp, #260	; 0x104
 8008512:	4630      	mov	r0, r6
 8008514:	f3af 8000 	nop.w
 8008518:	e798      	b.n	800844c <__ssvfiscanf_r+0x204>
 800851a:	89a3      	ldrh	r3, [r4, #12]
 800851c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008520:	bf18      	it	ne
 8008522:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8008526:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800852a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800852e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008530:	e7f9      	b.n	8008526 <__ssvfiscanf_r+0x2de>
 8008532:	bf00      	nop
 8008534:	00000000 	.word	0x00000000

08008538 <__sfputc_r>:
 8008538:	6893      	ldr	r3, [r2, #8]
 800853a:	3b01      	subs	r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	b410      	push	{r4}
 8008540:	6093      	str	r3, [r2, #8]
 8008542:	da08      	bge.n	8008556 <__sfputc_r+0x1e>
 8008544:	6994      	ldr	r4, [r2, #24]
 8008546:	42a3      	cmp	r3, r4
 8008548:	db01      	blt.n	800854e <__sfputc_r+0x16>
 800854a:	290a      	cmp	r1, #10
 800854c:	d103      	bne.n	8008556 <__sfputc_r+0x1e>
 800854e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008552:	f7ff bbab 	b.w	8007cac <__swbuf_r>
 8008556:	6813      	ldr	r3, [r2, #0]
 8008558:	1c58      	adds	r0, r3, #1
 800855a:	6010      	str	r0, [r2, #0]
 800855c:	7019      	strb	r1, [r3, #0]
 800855e:	4608      	mov	r0, r1
 8008560:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008564:	4770      	bx	lr

08008566 <__sfputs_r>:
 8008566:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008568:	4606      	mov	r6, r0
 800856a:	460f      	mov	r7, r1
 800856c:	4614      	mov	r4, r2
 800856e:	18d5      	adds	r5, r2, r3
 8008570:	42ac      	cmp	r4, r5
 8008572:	d101      	bne.n	8008578 <__sfputs_r+0x12>
 8008574:	2000      	movs	r0, #0
 8008576:	e007      	b.n	8008588 <__sfputs_r+0x22>
 8008578:	f814 1b01 	ldrb.w	r1, [r4], #1
 800857c:	463a      	mov	r2, r7
 800857e:	4630      	mov	r0, r6
 8008580:	f7ff ffda 	bl	8008538 <__sfputc_r>
 8008584:	1c43      	adds	r3, r0, #1
 8008586:	d1f3      	bne.n	8008570 <__sfputs_r+0xa>
 8008588:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800858c <_vfiprintf_r>:
 800858c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008590:	460d      	mov	r5, r1
 8008592:	b09d      	sub	sp, #116	; 0x74
 8008594:	4614      	mov	r4, r2
 8008596:	4698      	mov	r8, r3
 8008598:	4606      	mov	r6, r0
 800859a:	b118      	cbz	r0, 80085a4 <_vfiprintf_r+0x18>
 800859c:	6983      	ldr	r3, [r0, #24]
 800859e:	b90b      	cbnz	r3, 80085a4 <_vfiprintf_r+0x18>
 80085a0:	f7ff f89a 	bl	80076d8 <__sinit>
 80085a4:	4b89      	ldr	r3, [pc, #548]	; (80087cc <_vfiprintf_r+0x240>)
 80085a6:	429d      	cmp	r5, r3
 80085a8:	d11b      	bne.n	80085e2 <_vfiprintf_r+0x56>
 80085aa:	6875      	ldr	r5, [r6, #4]
 80085ac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085ae:	07d9      	lsls	r1, r3, #31
 80085b0:	d405      	bmi.n	80085be <_vfiprintf_r+0x32>
 80085b2:	89ab      	ldrh	r3, [r5, #12]
 80085b4:	059a      	lsls	r2, r3, #22
 80085b6:	d402      	bmi.n	80085be <_vfiprintf_r+0x32>
 80085b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085ba:	f7ff f950 	bl	800785e <__retarget_lock_acquire_recursive>
 80085be:	89ab      	ldrh	r3, [r5, #12]
 80085c0:	071b      	lsls	r3, r3, #28
 80085c2:	d501      	bpl.n	80085c8 <_vfiprintf_r+0x3c>
 80085c4:	692b      	ldr	r3, [r5, #16]
 80085c6:	b9eb      	cbnz	r3, 8008604 <_vfiprintf_r+0x78>
 80085c8:	4629      	mov	r1, r5
 80085ca:	4630      	mov	r0, r6
 80085cc:	f7ff fbd2 	bl	8007d74 <__swsetup_r>
 80085d0:	b1c0      	cbz	r0, 8008604 <_vfiprintf_r+0x78>
 80085d2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80085d4:	07dc      	lsls	r4, r3, #31
 80085d6:	d50e      	bpl.n	80085f6 <_vfiprintf_r+0x6a>
 80085d8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80085dc:	b01d      	add	sp, #116	; 0x74
 80085de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80085e2:	4b7b      	ldr	r3, [pc, #492]	; (80087d0 <_vfiprintf_r+0x244>)
 80085e4:	429d      	cmp	r5, r3
 80085e6:	d101      	bne.n	80085ec <_vfiprintf_r+0x60>
 80085e8:	68b5      	ldr	r5, [r6, #8]
 80085ea:	e7df      	b.n	80085ac <_vfiprintf_r+0x20>
 80085ec:	4b79      	ldr	r3, [pc, #484]	; (80087d4 <_vfiprintf_r+0x248>)
 80085ee:	429d      	cmp	r5, r3
 80085f0:	bf08      	it	eq
 80085f2:	68f5      	ldreq	r5, [r6, #12]
 80085f4:	e7da      	b.n	80085ac <_vfiprintf_r+0x20>
 80085f6:	89ab      	ldrh	r3, [r5, #12]
 80085f8:	0598      	lsls	r0, r3, #22
 80085fa:	d4ed      	bmi.n	80085d8 <_vfiprintf_r+0x4c>
 80085fc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80085fe:	f7ff f92f 	bl	8007860 <__retarget_lock_release_recursive>
 8008602:	e7e9      	b.n	80085d8 <_vfiprintf_r+0x4c>
 8008604:	2300      	movs	r3, #0
 8008606:	9309      	str	r3, [sp, #36]	; 0x24
 8008608:	2320      	movs	r3, #32
 800860a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800860e:	f8cd 800c 	str.w	r8, [sp, #12]
 8008612:	2330      	movs	r3, #48	; 0x30
 8008614:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 80087d8 <_vfiprintf_r+0x24c>
 8008618:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800861c:	f04f 0901 	mov.w	r9, #1
 8008620:	4623      	mov	r3, r4
 8008622:	469a      	mov	sl, r3
 8008624:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008628:	b10a      	cbz	r2, 800862e <_vfiprintf_r+0xa2>
 800862a:	2a25      	cmp	r2, #37	; 0x25
 800862c:	d1f9      	bne.n	8008622 <_vfiprintf_r+0x96>
 800862e:	ebba 0b04 	subs.w	fp, sl, r4
 8008632:	d00b      	beq.n	800864c <_vfiprintf_r+0xc0>
 8008634:	465b      	mov	r3, fp
 8008636:	4622      	mov	r2, r4
 8008638:	4629      	mov	r1, r5
 800863a:	4630      	mov	r0, r6
 800863c:	f7ff ff93 	bl	8008566 <__sfputs_r>
 8008640:	3001      	adds	r0, #1
 8008642:	f000 80aa 	beq.w	800879a <_vfiprintf_r+0x20e>
 8008646:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008648:	445a      	add	r2, fp
 800864a:	9209      	str	r2, [sp, #36]	; 0x24
 800864c:	f89a 3000 	ldrb.w	r3, [sl]
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 80a2 	beq.w	800879a <_vfiprintf_r+0x20e>
 8008656:	2300      	movs	r3, #0
 8008658:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800865c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008660:	f10a 0a01 	add.w	sl, sl, #1
 8008664:	9304      	str	r3, [sp, #16]
 8008666:	9307      	str	r3, [sp, #28]
 8008668:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800866c:	931a      	str	r3, [sp, #104]	; 0x68
 800866e:	4654      	mov	r4, sl
 8008670:	2205      	movs	r2, #5
 8008672:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008676:	4858      	ldr	r0, [pc, #352]	; (80087d8 <_vfiprintf_r+0x24c>)
 8008678:	f7f7 fdb2 	bl	80001e0 <memchr>
 800867c:	9a04      	ldr	r2, [sp, #16]
 800867e:	b9d8      	cbnz	r0, 80086b8 <_vfiprintf_r+0x12c>
 8008680:	06d1      	lsls	r1, r2, #27
 8008682:	bf44      	itt	mi
 8008684:	2320      	movmi	r3, #32
 8008686:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800868a:	0713      	lsls	r3, r2, #28
 800868c:	bf44      	itt	mi
 800868e:	232b      	movmi	r3, #43	; 0x2b
 8008690:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008694:	f89a 3000 	ldrb.w	r3, [sl]
 8008698:	2b2a      	cmp	r3, #42	; 0x2a
 800869a:	d015      	beq.n	80086c8 <_vfiprintf_r+0x13c>
 800869c:	9a07      	ldr	r2, [sp, #28]
 800869e:	4654      	mov	r4, sl
 80086a0:	2000      	movs	r0, #0
 80086a2:	f04f 0c0a 	mov.w	ip, #10
 80086a6:	4621      	mov	r1, r4
 80086a8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ac:	3b30      	subs	r3, #48	; 0x30
 80086ae:	2b09      	cmp	r3, #9
 80086b0:	d94e      	bls.n	8008750 <_vfiprintf_r+0x1c4>
 80086b2:	b1b0      	cbz	r0, 80086e2 <_vfiprintf_r+0x156>
 80086b4:	9207      	str	r2, [sp, #28]
 80086b6:	e014      	b.n	80086e2 <_vfiprintf_r+0x156>
 80086b8:	eba0 0308 	sub.w	r3, r0, r8
 80086bc:	fa09 f303 	lsl.w	r3, r9, r3
 80086c0:	4313      	orrs	r3, r2
 80086c2:	9304      	str	r3, [sp, #16]
 80086c4:	46a2      	mov	sl, r4
 80086c6:	e7d2      	b.n	800866e <_vfiprintf_r+0xe2>
 80086c8:	9b03      	ldr	r3, [sp, #12]
 80086ca:	1d19      	adds	r1, r3, #4
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	9103      	str	r1, [sp, #12]
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	bfbb      	ittet	lt
 80086d4:	425b      	neglt	r3, r3
 80086d6:	f042 0202 	orrlt.w	r2, r2, #2
 80086da:	9307      	strge	r3, [sp, #28]
 80086dc:	9307      	strlt	r3, [sp, #28]
 80086de:	bfb8      	it	lt
 80086e0:	9204      	strlt	r2, [sp, #16]
 80086e2:	7823      	ldrb	r3, [r4, #0]
 80086e4:	2b2e      	cmp	r3, #46	; 0x2e
 80086e6:	d10c      	bne.n	8008702 <_vfiprintf_r+0x176>
 80086e8:	7863      	ldrb	r3, [r4, #1]
 80086ea:	2b2a      	cmp	r3, #42	; 0x2a
 80086ec:	d135      	bne.n	800875a <_vfiprintf_r+0x1ce>
 80086ee:	9b03      	ldr	r3, [sp, #12]
 80086f0:	1d1a      	adds	r2, r3, #4
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	9203      	str	r2, [sp, #12]
 80086f6:	2b00      	cmp	r3, #0
 80086f8:	bfb8      	it	lt
 80086fa:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80086fe:	3402      	adds	r4, #2
 8008700:	9305      	str	r3, [sp, #20]
 8008702:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80087e8 <_vfiprintf_r+0x25c>
 8008706:	7821      	ldrb	r1, [r4, #0]
 8008708:	2203      	movs	r2, #3
 800870a:	4650      	mov	r0, sl
 800870c:	f7f7 fd68 	bl	80001e0 <memchr>
 8008710:	b140      	cbz	r0, 8008724 <_vfiprintf_r+0x198>
 8008712:	2340      	movs	r3, #64	; 0x40
 8008714:	eba0 000a 	sub.w	r0, r0, sl
 8008718:	fa03 f000 	lsl.w	r0, r3, r0
 800871c:	9b04      	ldr	r3, [sp, #16]
 800871e:	4303      	orrs	r3, r0
 8008720:	3401      	adds	r4, #1
 8008722:	9304      	str	r3, [sp, #16]
 8008724:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008728:	482c      	ldr	r0, [pc, #176]	; (80087dc <_vfiprintf_r+0x250>)
 800872a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800872e:	2206      	movs	r2, #6
 8008730:	f7f7 fd56 	bl	80001e0 <memchr>
 8008734:	2800      	cmp	r0, #0
 8008736:	d03f      	beq.n	80087b8 <_vfiprintf_r+0x22c>
 8008738:	4b29      	ldr	r3, [pc, #164]	; (80087e0 <_vfiprintf_r+0x254>)
 800873a:	bb1b      	cbnz	r3, 8008784 <_vfiprintf_r+0x1f8>
 800873c:	9b03      	ldr	r3, [sp, #12]
 800873e:	3307      	adds	r3, #7
 8008740:	f023 0307 	bic.w	r3, r3, #7
 8008744:	3308      	adds	r3, #8
 8008746:	9303      	str	r3, [sp, #12]
 8008748:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800874a:	443b      	add	r3, r7
 800874c:	9309      	str	r3, [sp, #36]	; 0x24
 800874e:	e767      	b.n	8008620 <_vfiprintf_r+0x94>
 8008750:	fb0c 3202 	mla	r2, ip, r2, r3
 8008754:	460c      	mov	r4, r1
 8008756:	2001      	movs	r0, #1
 8008758:	e7a5      	b.n	80086a6 <_vfiprintf_r+0x11a>
 800875a:	2300      	movs	r3, #0
 800875c:	3401      	adds	r4, #1
 800875e:	9305      	str	r3, [sp, #20]
 8008760:	4619      	mov	r1, r3
 8008762:	f04f 0c0a 	mov.w	ip, #10
 8008766:	4620      	mov	r0, r4
 8008768:	f810 2b01 	ldrb.w	r2, [r0], #1
 800876c:	3a30      	subs	r2, #48	; 0x30
 800876e:	2a09      	cmp	r2, #9
 8008770:	d903      	bls.n	800877a <_vfiprintf_r+0x1ee>
 8008772:	2b00      	cmp	r3, #0
 8008774:	d0c5      	beq.n	8008702 <_vfiprintf_r+0x176>
 8008776:	9105      	str	r1, [sp, #20]
 8008778:	e7c3      	b.n	8008702 <_vfiprintf_r+0x176>
 800877a:	fb0c 2101 	mla	r1, ip, r1, r2
 800877e:	4604      	mov	r4, r0
 8008780:	2301      	movs	r3, #1
 8008782:	e7f0      	b.n	8008766 <_vfiprintf_r+0x1da>
 8008784:	ab03      	add	r3, sp, #12
 8008786:	9300      	str	r3, [sp, #0]
 8008788:	462a      	mov	r2, r5
 800878a:	4b16      	ldr	r3, [pc, #88]	; (80087e4 <_vfiprintf_r+0x258>)
 800878c:	a904      	add	r1, sp, #16
 800878e:	4630      	mov	r0, r6
 8008790:	f3af 8000 	nop.w
 8008794:	4607      	mov	r7, r0
 8008796:	1c78      	adds	r0, r7, #1
 8008798:	d1d6      	bne.n	8008748 <_vfiprintf_r+0x1bc>
 800879a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800879c:	07d9      	lsls	r1, r3, #31
 800879e:	d405      	bmi.n	80087ac <_vfiprintf_r+0x220>
 80087a0:	89ab      	ldrh	r3, [r5, #12]
 80087a2:	059a      	lsls	r2, r3, #22
 80087a4:	d402      	bmi.n	80087ac <_vfiprintf_r+0x220>
 80087a6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80087a8:	f7ff f85a 	bl	8007860 <__retarget_lock_release_recursive>
 80087ac:	89ab      	ldrh	r3, [r5, #12]
 80087ae:	065b      	lsls	r3, r3, #25
 80087b0:	f53f af12 	bmi.w	80085d8 <_vfiprintf_r+0x4c>
 80087b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80087b6:	e711      	b.n	80085dc <_vfiprintf_r+0x50>
 80087b8:	ab03      	add	r3, sp, #12
 80087ba:	9300      	str	r3, [sp, #0]
 80087bc:	462a      	mov	r2, r5
 80087be:	4b09      	ldr	r3, [pc, #36]	; (80087e4 <_vfiprintf_r+0x258>)
 80087c0:	a904      	add	r1, sp, #16
 80087c2:	4630      	mov	r0, r6
 80087c4:	f000 f880 	bl	80088c8 <_printf_i>
 80087c8:	e7e4      	b.n	8008794 <_vfiprintf_r+0x208>
 80087ca:	bf00      	nop
 80087cc:	080093b8 	.word	0x080093b8
 80087d0:	080093d8 	.word	0x080093d8
 80087d4:	08009398 	.word	0x08009398
 80087d8:	08009400 	.word	0x08009400
 80087dc:	08009406 	.word	0x08009406
 80087e0:	00000000 	.word	0x00000000
 80087e4:	08008567 	.word	0x08008567
 80087e8:	080093fc 	.word	0x080093fc

080087ec <_printf_common>:
 80087ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80087f0:	4616      	mov	r6, r2
 80087f2:	4699      	mov	r9, r3
 80087f4:	688a      	ldr	r2, [r1, #8]
 80087f6:	690b      	ldr	r3, [r1, #16]
 80087f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80087fc:	4293      	cmp	r3, r2
 80087fe:	bfb8      	it	lt
 8008800:	4613      	movlt	r3, r2
 8008802:	6033      	str	r3, [r6, #0]
 8008804:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008808:	4607      	mov	r7, r0
 800880a:	460c      	mov	r4, r1
 800880c:	b10a      	cbz	r2, 8008812 <_printf_common+0x26>
 800880e:	3301      	adds	r3, #1
 8008810:	6033      	str	r3, [r6, #0]
 8008812:	6823      	ldr	r3, [r4, #0]
 8008814:	0699      	lsls	r1, r3, #26
 8008816:	bf42      	ittt	mi
 8008818:	6833      	ldrmi	r3, [r6, #0]
 800881a:	3302      	addmi	r3, #2
 800881c:	6033      	strmi	r3, [r6, #0]
 800881e:	6825      	ldr	r5, [r4, #0]
 8008820:	f015 0506 	ands.w	r5, r5, #6
 8008824:	d106      	bne.n	8008834 <_printf_common+0x48>
 8008826:	f104 0a19 	add.w	sl, r4, #25
 800882a:	68e3      	ldr	r3, [r4, #12]
 800882c:	6832      	ldr	r2, [r6, #0]
 800882e:	1a9b      	subs	r3, r3, r2
 8008830:	42ab      	cmp	r3, r5
 8008832:	dc26      	bgt.n	8008882 <_printf_common+0x96>
 8008834:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008838:	1e13      	subs	r3, r2, #0
 800883a:	6822      	ldr	r2, [r4, #0]
 800883c:	bf18      	it	ne
 800883e:	2301      	movne	r3, #1
 8008840:	0692      	lsls	r2, r2, #26
 8008842:	d42b      	bmi.n	800889c <_printf_common+0xb0>
 8008844:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008848:	4649      	mov	r1, r9
 800884a:	4638      	mov	r0, r7
 800884c:	47c0      	blx	r8
 800884e:	3001      	adds	r0, #1
 8008850:	d01e      	beq.n	8008890 <_printf_common+0xa4>
 8008852:	6823      	ldr	r3, [r4, #0]
 8008854:	68e5      	ldr	r5, [r4, #12]
 8008856:	6832      	ldr	r2, [r6, #0]
 8008858:	f003 0306 	and.w	r3, r3, #6
 800885c:	2b04      	cmp	r3, #4
 800885e:	bf08      	it	eq
 8008860:	1aad      	subeq	r5, r5, r2
 8008862:	68a3      	ldr	r3, [r4, #8]
 8008864:	6922      	ldr	r2, [r4, #16]
 8008866:	bf0c      	ite	eq
 8008868:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800886c:	2500      	movne	r5, #0
 800886e:	4293      	cmp	r3, r2
 8008870:	bfc4      	itt	gt
 8008872:	1a9b      	subgt	r3, r3, r2
 8008874:	18ed      	addgt	r5, r5, r3
 8008876:	2600      	movs	r6, #0
 8008878:	341a      	adds	r4, #26
 800887a:	42b5      	cmp	r5, r6
 800887c:	d11a      	bne.n	80088b4 <_printf_common+0xc8>
 800887e:	2000      	movs	r0, #0
 8008880:	e008      	b.n	8008894 <_printf_common+0xa8>
 8008882:	2301      	movs	r3, #1
 8008884:	4652      	mov	r2, sl
 8008886:	4649      	mov	r1, r9
 8008888:	4638      	mov	r0, r7
 800888a:	47c0      	blx	r8
 800888c:	3001      	adds	r0, #1
 800888e:	d103      	bne.n	8008898 <_printf_common+0xac>
 8008890:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008894:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008898:	3501      	adds	r5, #1
 800889a:	e7c6      	b.n	800882a <_printf_common+0x3e>
 800889c:	18e1      	adds	r1, r4, r3
 800889e:	1c5a      	adds	r2, r3, #1
 80088a0:	2030      	movs	r0, #48	; 0x30
 80088a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80088a6:	4422      	add	r2, r4
 80088a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80088ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80088b0:	3302      	adds	r3, #2
 80088b2:	e7c7      	b.n	8008844 <_printf_common+0x58>
 80088b4:	2301      	movs	r3, #1
 80088b6:	4622      	mov	r2, r4
 80088b8:	4649      	mov	r1, r9
 80088ba:	4638      	mov	r0, r7
 80088bc:	47c0      	blx	r8
 80088be:	3001      	adds	r0, #1
 80088c0:	d0e6      	beq.n	8008890 <_printf_common+0xa4>
 80088c2:	3601      	adds	r6, #1
 80088c4:	e7d9      	b.n	800887a <_printf_common+0x8e>
	...

080088c8 <_printf_i>:
 80088c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80088cc:	7e0f      	ldrb	r7, [r1, #24]
 80088ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80088d0:	2f78      	cmp	r7, #120	; 0x78
 80088d2:	4691      	mov	r9, r2
 80088d4:	4680      	mov	r8, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	469a      	mov	sl, r3
 80088da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80088de:	d807      	bhi.n	80088f0 <_printf_i+0x28>
 80088e0:	2f62      	cmp	r7, #98	; 0x62
 80088e2:	d80a      	bhi.n	80088fa <_printf_i+0x32>
 80088e4:	2f00      	cmp	r7, #0
 80088e6:	f000 80d8 	beq.w	8008a9a <_printf_i+0x1d2>
 80088ea:	2f58      	cmp	r7, #88	; 0x58
 80088ec:	f000 80a3 	beq.w	8008a36 <_printf_i+0x16e>
 80088f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80088f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80088f8:	e03a      	b.n	8008970 <_printf_i+0xa8>
 80088fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80088fe:	2b15      	cmp	r3, #21
 8008900:	d8f6      	bhi.n	80088f0 <_printf_i+0x28>
 8008902:	a101      	add	r1, pc, #4	; (adr r1, 8008908 <_printf_i+0x40>)
 8008904:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008908:	08008961 	.word	0x08008961
 800890c:	08008975 	.word	0x08008975
 8008910:	080088f1 	.word	0x080088f1
 8008914:	080088f1 	.word	0x080088f1
 8008918:	080088f1 	.word	0x080088f1
 800891c:	080088f1 	.word	0x080088f1
 8008920:	08008975 	.word	0x08008975
 8008924:	080088f1 	.word	0x080088f1
 8008928:	080088f1 	.word	0x080088f1
 800892c:	080088f1 	.word	0x080088f1
 8008930:	080088f1 	.word	0x080088f1
 8008934:	08008a81 	.word	0x08008a81
 8008938:	080089a5 	.word	0x080089a5
 800893c:	08008a63 	.word	0x08008a63
 8008940:	080088f1 	.word	0x080088f1
 8008944:	080088f1 	.word	0x080088f1
 8008948:	08008aa3 	.word	0x08008aa3
 800894c:	080088f1 	.word	0x080088f1
 8008950:	080089a5 	.word	0x080089a5
 8008954:	080088f1 	.word	0x080088f1
 8008958:	080088f1 	.word	0x080088f1
 800895c:	08008a6b 	.word	0x08008a6b
 8008960:	682b      	ldr	r3, [r5, #0]
 8008962:	1d1a      	adds	r2, r3, #4
 8008964:	681b      	ldr	r3, [r3, #0]
 8008966:	602a      	str	r2, [r5, #0]
 8008968:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800896c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008970:	2301      	movs	r3, #1
 8008972:	e0a3      	b.n	8008abc <_printf_i+0x1f4>
 8008974:	6820      	ldr	r0, [r4, #0]
 8008976:	6829      	ldr	r1, [r5, #0]
 8008978:	0606      	lsls	r6, r0, #24
 800897a:	f101 0304 	add.w	r3, r1, #4
 800897e:	d50a      	bpl.n	8008996 <_printf_i+0xce>
 8008980:	680e      	ldr	r6, [r1, #0]
 8008982:	602b      	str	r3, [r5, #0]
 8008984:	2e00      	cmp	r6, #0
 8008986:	da03      	bge.n	8008990 <_printf_i+0xc8>
 8008988:	232d      	movs	r3, #45	; 0x2d
 800898a:	4276      	negs	r6, r6
 800898c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008990:	485e      	ldr	r0, [pc, #376]	; (8008b0c <_printf_i+0x244>)
 8008992:	230a      	movs	r3, #10
 8008994:	e019      	b.n	80089ca <_printf_i+0x102>
 8008996:	680e      	ldr	r6, [r1, #0]
 8008998:	602b      	str	r3, [r5, #0]
 800899a:	f010 0f40 	tst.w	r0, #64	; 0x40
 800899e:	bf18      	it	ne
 80089a0:	b236      	sxthne	r6, r6
 80089a2:	e7ef      	b.n	8008984 <_printf_i+0xbc>
 80089a4:	682b      	ldr	r3, [r5, #0]
 80089a6:	6820      	ldr	r0, [r4, #0]
 80089a8:	1d19      	adds	r1, r3, #4
 80089aa:	6029      	str	r1, [r5, #0]
 80089ac:	0601      	lsls	r1, r0, #24
 80089ae:	d501      	bpl.n	80089b4 <_printf_i+0xec>
 80089b0:	681e      	ldr	r6, [r3, #0]
 80089b2:	e002      	b.n	80089ba <_printf_i+0xf2>
 80089b4:	0646      	lsls	r6, r0, #25
 80089b6:	d5fb      	bpl.n	80089b0 <_printf_i+0xe8>
 80089b8:	881e      	ldrh	r6, [r3, #0]
 80089ba:	4854      	ldr	r0, [pc, #336]	; (8008b0c <_printf_i+0x244>)
 80089bc:	2f6f      	cmp	r7, #111	; 0x6f
 80089be:	bf0c      	ite	eq
 80089c0:	2308      	moveq	r3, #8
 80089c2:	230a      	movne	r3, #10
 80089c4:	2100      	movs	r1, #0
 80089c6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80089ca:	6865      	ldr	r5, [r4, #4]
 80089cc:	60a5      	str	r5, [r4, #8]
 80089ce:	2d00      	cmp	r5, #0
 80089d0:	bfa2      	ittt	ge
 80089d2:	6821      	ldrge	r1, [r4, #0]
 80089d4:	f021 0104 	bicge.w	r1, r1, #4
 80089d8:	6021      	strge	r1, [r4, #0]
 80089da:	b90e      	cbnz	r6, 80089e0 <_printf_i+0x118>
 80089dc:	2d00      	cmp	r5, #0
 80089de:	d04d      	beq.n	8008a7c <_printf_i+0x1b4>
 80089e0:	4615      	mov	r5, r2
 80089e2:	fbb6 f1f3 	udiv	r1, r6, r3
 80089e6:	fb03 6711 	mls	r7, r3, r1, r6
 80089ea:	5dc7      	ldrb	r7, [r0, r7]
 80089ec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80089f0:	4637      	mov	r7, r6
 80089f2:	42bb      	cmp	r3, r7
 80089f4:	460e      	mov	r6, r1
 80089f6:	d9f4      	bls.n	80089e2 <_printf_i+0x11a>
 80089f8:	2b08      	cmp	r3, #8
 80089fa:	d10b      	bne.n	8008a14 <_printf_i+0x14c>
 80089fc:	6823      	ldr	r3, [r4, #0]
 80089fe:	07de      	lsls	r6, r3, #31
 8008a00:	d508      	bpl.n	8008a14 <_printf_i+0x14c>
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	6861      	ldr	r1, [r4, #4]
 8008a06:	4299      	cmp	r1, r3
 8008a08:	bfde      	ittt	le
 8008a0a:	2330      	movle	r3, #48	; 0x30
 8008a0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8008a10:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8008a14:	1b52      	subs	r2, r2, r5
 8008a16:	6122      	str	r2, [r4, #16]
 8008a18:	f8cd a000 	str.w	sl, [sp]
 8008a1c:	464b      	mov	r3, r9
 8008a1e:	aa03      	add	r2, sp, #12
 8008a20:	4621      	mov	r1, r4
 8008a22:	4640      	mov	r0, r8
 8008a24:	f7ff fee2 	bl	80087ec <_printf_common>
 8008a28:	3001      	adds	r0, #1
 8008a2a:	d14c      	bne.n	8008ac6 <_printf_i+0x1fe>
 8008a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008a30:	b004      	add	sp, #16
 8008a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a36:	4835      	ldr	r0, [pc, #212]	; (8008b0c <_printf_i+0x244>)
 8008a38:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8008a3c:	6829      	ldr	r1, [r5, #0]
 8008a3e:	6823      	ldr	r3, [r4, #0]
 8008a40:	f851 6b04 	ldr.w	r6, [r1], #4
 8008a44:	6029      	str	r1, [r5, #0]
 8008a46:	061d      	lsls	r5, r3, #24
 8008a48:	d514      	bpl.n	8008a74 <_printf_i+0x1ac>
 8008a4a:	07df      	lsls	r7, r3, #31
 8008a4c:	bf44      	itt	mi
 8008a4e:	f043 0320 	orrmi.w	r3, r3, #32
 8008a52:	6023      	strmi	r3, [r4, #0]
 8008a54:	b91e      	cbnz	r6, 8008a5e <_printf_i+0x196>
 8008a56:	6823      	ldr	r3, [r4, #0]
 8008a58:	f023 0320 	bic.w	r3, r3, #32
 8008a5c:	6023      	str	r3, [r4, #0]
 8008a5e:	2310      	movs	r3, #16
 8008a60:	e7b0      	b.n	80089c4 <_printf_i+0xfc>
 8008a62:	6823      	ldr	r3, [r4, #0]
 8008a64:	f043 0320 	orr.w	r3, r3, #32
 8008a68:	6023      	str	r3, [r4, #0]
 8008a6a:	2378      	movs	r3, #120	; 0x78
 8008a6c:	4828      	ldr	r0, [pc, #160]	; (8008b10 <_printf_i+0x248>)
 8008a6e:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8008a72:	e7e3      	b.n	8008a3c <_printf_i+0x174>
 8008a74:	0659      	lsls	r1, r3, #25
 8008a76:	bf48      	it	mi
 8008a78:	b2b6      	uxthmi	r6, r6
 8008a7a:	e7e6      	b.n	8008a4a <_printf_i+0x182>
 8008a7c:	4615      	mov	r5, r2
 8008a7e:	e7bb      	b.n	80089f8 <_printf_i+0x130>
 8008a80:	682b      	ldr	r3, [r5, #0]
 8008a82:	6826      	ldr	r6, [r4, #0]
 8008a84:	6961      	ldr	r1, [r4, #20]
 8008a86:	1d18      	adds	r0, r3, #4
 8008a88:	6028      	str	r0, [r5, #0]
 8008a8a:	0635      	lsls	r5, r6, #24
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	d501      	bpl.n	8008a94 <_printf_i+0x1cc>
 8008a90:	6019      	str	r1, [r3, #0]
 8008a92:	e002      	b.n	8008a9a <_printf_i+0x1d2>
 8008a94:	0670      	lsls	r0, r6, #25
 8008a96:	d5fb      	bpl.n	8008a90 <_printf_i+0x1c8>
 8008a98:	8019      	strh	r1, [r3, #0]
 8008a9a:	2300      	movs	r3, #0
 8008a9c:	6123      	str	r3, [r4, #16]
 8008a9e:	4615      	mov	r5, r2
 8008aa0:	e7ba      	b.n	8008a18 <_printf_i+0x150>
 8008aa2:	682b      	ldr	r3, [r5, #0]
 8008aa4:	1d1a      	adds	r2, r3, #4
 8008aa6:	602a      	str	r2, [r5, #0]
 8008aa8:	681d      	ldr	r5, [r3, #0]
 8008aaa:	6862      	ldr	r2, [r4, #4]
 8008aac:	2100      	movs	r1, #0
 8008aae:	4628      	mov	r0, r5
 8008ab0:	f7f7 fb96 	bl	80001e0 <memchr>
 8008ab4:	b108      	cbz	r0, 8008aba <_printf_i+0x1f2>
 8008ab6:	1b40      	subs	r0, r0, r5
 8008ab8:	6060      	str	r0, [r4, #4]
 8008aba:	6863      	ldr	r3, [r4, #4]
 8008abc:	6123      	str	r3, [r4, #16]
 8008abe:	2300      	movs	r3, #0
 8008ac0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008ac4:	e7a8      	b.n	8008a18 <_printf_i+0x150>
 8008ac6:	6923      	ldr	r3, [r4, #16]
 8008ac8:	462a      	mov	r2, r5
 8008aca:	4649      	mov	r1, r9
 8008acc:	4640      	mov	r0, r8
 8008ace:	47d0      	blx	sl
 8008ad0:	3001      	adds	r0, #1
 8008ad2:	d0ab      	beq.n	8008a2c <_printf_i+0x164>
 8008ad4:	6823      	ldr	r3, [r4, #0]
 8008ad6:	079b      	lsls	r3, r3, #30
 8008ad8:	d413      	bmi.n	8008b02 <_printf_i+0x23a>
 8008ada:	68e0      	ldr	r0, [r4, #12]
 8008adc:	9b03      	ldr	r3, [sp, #12]
 8008ade:	4298      	cmp	r0, r3
 8008ae0:	bfb8      	it	lt
 8008ae2:	4618      	movlt	r0, r3
 8008ae4:	e7a4      	b.n	8008a30 <_printf_i+0x168>
 8008ae6:	2301      	movs	r3, #1
 8008ae8:	4632      	mov	r2, r6
 8008aea:	4649      	mov	r1, r9
 8008aec:	4640      	mov	r0, r8
 8008aee:	47d0      	blx	sl
 8008af0:	3001      	adds	r0, #1
 8008af2:	d09b      	beq.n	8008a2c <_printf_i+0x164>
 8008af4:	3501      	adds	r5, #1
 8008af6:	68e3      	ldr	r3, [r4, #12]
 8008af8:	9903      	ldr	r1, [sp, #12]
 8008afa:	1a5b      	subs	r3, r3, r1
 8008afc:	42ab      	cmp	r3, r5
 8008afe:	dcf2      	bgt.n	8008ae6 <_printf_i+0x21e>
 8008b00:	e7eb      	b.n	8008ada <_printf_i+0x212>
 8008b02:	2500      	movs	r5, #0
 8008b04:	f104 0619 	add.w	r6, r4, #25
 8008b08:	e7f5      	b.n	8008af6 <_printf_i+0x22e>
 8008b0a:	bf00      	nop
 8008b0c:	0800940d 	.word	0x0800940d
 8008b10:	0800941e 	.word	0x0800941e

08008b14 <_scanf_chars>:
 8008b14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008b18:	4615      	mov	r5, r2
 8008b1a:	688a      	ldr	r2, [r1, #8]
 8008b1c:	4680      	mov	r8, r0
 8008b1e:	460c      	mov	r4, r1
 8008b20:	b932      	cbnz	r2, 8008b30 <_scanf_chars+0x1c>
 8008b22:	698a      	ldr	r2, [r1, #24]
 8008b24:	2a00      	cmp	r2, #0
 8008b26:	bf0c      	ite	eq
 8008b28:	2201      	moveq	r2, #1
 8008b2a:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 8008b2e:	608a      	str	r2, [r1, #8]
 8008b30:	6822      	ldr	r2, [r4, #0]
 8008b32:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008bc4 <_scanf_chars+0xb0>
 8008b36:	06d1      	lsls	r1, r2, #27
 8008b38:	bf5f      	itttt	pl
 8008b3a:	681a      	ldrpl	r2, [r3, #0]
 8008b3c:	1d11      	addpl	r1, r2, #4
 8008b3e:	6019      	strpl	r1, [r3, #0]
 8008b40:	6816      	ldrpl	r6, [r2, #0]
 8008b42:	2700      	movs	r7, #0
 8008b44:	69a0      	ldr	r0, [r4, #24]
 8008b46:	b188      	cbz	r0, 8008b6c <_scanf_chars+0x58>
 8008b48:	2801      	cmp	r0, #1
 8008b4a:	d107      	bne.n	8008b5c <_scanf_chars+0x48>
 8008b4c:	682a      	ldr	r2, [r5, #0]
 8008b4e:	7811      	ldrb	r1, [r2, #0]
 8008b50:	6962      	ldr	r2, [r4, #20]
 8008b52:	5c52      	ldrb	r2, [r2, r1]
 8008b54:	b952      	cbnz	r2, 8008b6c <_scanf_chars+0x58>
 8008b56:	2f00      	cmp	r7, #0
 8008b58:	d031      	beq.n	8008bbe <_scanf_chars+0xaa>
 8008b5a:	e022      	b.n	8008ba2 <_scanf_chars+0x8e>
 8008b5c:	2802      	cmp	r0, #2
 8008b5e:	d120      	bne.n	8008ba2 <_scanf_chars+0x8e>
 8008b60:	682b      	ldr	r3, [r5, #0]
 8008b62:	781b      	ldrb	r3, [r3, #0]
 8008b64:	f813 3009 	ldrb.w	r3, [r3, r9]
 8008b68:	071b      	lsls	r3, r3, #28
 8008b6a:	d41a      	bmi.n	8008ba2 <_scanf_chars+0x8e>
 8008b6c:	6823      	ldr	r3, [r4, #0]
 8008b6e:	06da      	lsls	r2, r3, #27
 8008b70:	bf5e      	ittt	pl
 8008b72:	682b      	ldrpl	r3, [r5, #0]
 8008b74:	781b      	ldrbpl	r3, [r3, #0]
 8008b76:	f806 3b01 	strbpl.w	r3, [r6], #1
 8008b7a:	682a      	ldr	r2, [r5, #0]
 8008b7c:	686b      	ldr	r3, [r5, #4]
 8008b7e:	3201      	adds	r2, #1
 8008b80:	602a      	str	r2, [r5, #0]
 8008b82:	68a2      	ldr	r2, [r4, #8]
 8008b84:	3b01      	subs	r3, #1
 8008b86:	3a01      	subs	r2, #1
 8008b88:	606b      	str	r3, [r5, #4]
 8008b8a:	3701      	adds	r7, #1
 8008b8c:	60a2      	str	r2, [r4, #8]
 8008b8e:	b142      	cbz	r2, 8008ba2 <_scanf_chars+0x8e>
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	dcd7      	bgt.n	8008b44 <_scanf_chars+0x30>
 8008b94:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008b98:	4629      	mov	r1, r5
 8008b9a:	4640      	mov	r0, r8
 8008b9c:	4798      	blx	r3
 8008b9e:	2800      	cmp	r0, #0
 8008ba0:	d0d0      	beq.n	8008b44 <_scanf_chars+0x30>
 8008ba2:	6823      	ldr	r3, [r4, #0]
 8008ba4:	f013 0310 	ands.w	r3, r3, #16
 8008ba8:	d105      	bne.n	8008bb6 <_scanf_chars+0xa2>
 8008baa:	68e2      	ldr	r2, [r4, #12]
 8008bac:	3201      	adds	r2, #1
 8008bae:	60e2      	str	r2, [r4, #12]
 8008bb0:	69a2      	ldr	r2, [r4, #24]
 8008bb2:	b102      	cbz	r2, 8008bb6 <_scanf_chars+0xa2>
 8008bb4:	7033      	strb	r3, [r6, #0]
 8008bb6:	6923      	ldr	r3, [r4, #16]
 8008bb8:	443b      	add	r3, r7
 8008bba:	6123      	str	r3, [r4, #16]
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bc2:	bf00      	nop
 8008bc4:	0800944b 	.word	0x0800944b

08008bc8 <_scanf_i>:
 8008bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bcc:	4698      	mov	r8, r3
 8008bce:	4b76      	ldr	r3, [pc, #472]	; (8008da8 <_scanf_i+0x1e0>)
 8008bd0:	460c      	mov	r4, r1
 8008bd2:	4682      	mov	sl, r0
 8008bd4:	4616      	mov	r6, r2
 8008bd6:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8008bda:	b087      	sub	sp, #28
 8008bdc:	ab03      	add	r3, sp, #12
 8008bde:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008be2:	4b72      	ldr	r3, [pc, #456]	; (8008dac <_scanf_i+0x1e4>)
 8008be4:	69a1      	ldr	r1, [r4, #24]
 8008be6:	4a72      	ldr	r2, [pc, #456]	; (8008db0 <_scanf_i+0x1e8>)
 8008be8:	2903      	cmp	r1, #3
 8008bea:	bf18      	it	ne
 8008bec:	461a      	movne	r2, r3
 8008bee:	68a3      	ldr	r3, [r4, #8]
 8008bf0:	9201      	str	r2, [sp, #4]
 8008bf2:	1e5a      	subs	r2, r3, #1
 8008bf4:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008bf8:	bf88      	it	hi
 8008bfa:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008bfe:	4627      	mov	r7, r4
 8008c00:	bf82      	ittt	hi
 8008c02:	eb03 0905 	addhi.w	r9, r3, r5
 8008c06:	f240 135d 	movwhi	r3, #349	; 0x15d
 8008c0a:	60a3      	strhi	r3, [r4, #8]
 8008c0c:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008c10:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008c14:	bf98      	it	ls
 8008c16:	f04f 0900 	movls.w	r9, #0
 8008c1a:	6023      	str	r3, [r4, #0]
 8008c1c:	463d      	mov	r5, r7
 8008c1e:	f04f 0b00 	mov.w	fp, #0
 8008c22:	6831      	ldr	r1, [r6, #0]
 8008c24:	ab03      	add	r3, sp, #12
 8008c26:	7809      	ldrb	r1, [r1, #0]
 8008c28:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008c2c:	2202      	movs	r2, #2
 8008c2e:	f7f7 fad7 	bl	80001e0 <memchr>
 8008c32:	b328      	cbz	r0, 8008c80 <_scanf_i+0xb8>
 8008c34:	f1bb 0f01 	cmp.w	fp, #1
 8008c38:	d159      	bne.n	8008cee <_scanf_i+0x126>
 8008c3a:	6862      	ldr	r2, [r4, #4]
 8008c3c:	b92a      	cbnz	r2, 8008c4a <_scanf_i+0x82>
 8008c3e:	6822      	ldr	r2, [r4, #0]
 8008c40:	2308      	movs	r3, #8
 8008c42:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008c46:	6063      	str	r3, [r4, #4]
 8008c48:	6022      	str	r2, [r4, #0]
 8008c4a:	6822      	ldr	r2, [r4, #0]
 8008c4c:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008c50:	6022      	str	r2, [r4, #0]
 8008c52:	68a2      	ldr	r2, [r4, #8]
 8008c54:	1e51      	subs	r1, r2, #1
 8008c56:	60a1      	str	r1, [r4, #8]
 8008c58:	b192      	cbz	r2, 8008c80 <_scanf_i+0xb8>
 8008c5a:	6832      	ldr	r2, [r6, #0]
 8008c5c:	1c51      	adds	r1, r2, #1
 8008c5e:	6031      	str	r1, [r6, #0]
 8008c60:	7812      	ldrb	r2, [r2, #0]
 8008c62:	f805 2b01 	strb.w	r2, [r5], #1
 8008c66:	6872      	ldr	r2, [r6, #4]
 8008c68:	3a01      	subs	r2, #1
 8008c6a:	2a00      	cmp	r2, #0
 8008c6c:	6072      	str	r2, [r6, #4]
 8008c6e:	dc07      	bgt.n	8008c80 <_scanf_i+0xb8>
 8008c70:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 8008c74:	4631      	mov	r1, r6
 8008c76:	4650      	mov	r0, sl
 8008c78:	4790      	blx	r2
 8008c7a:	2800      	cmp	r0, #0
 8008c7c:	f040 8085 	bne.w	8008d8a <_scanf_i+0x1c2>
 8008c80:	f10b 0b01 	add.w	fp, fp, #1
 8008c84:	f1bb 0f03 	cmp.w	fp, #3
 8008c88:	d1cb      	bne.n	8008c22 <_scanf_i+0x5a>
 8008c8a:	6863      	ldr	r3, [r4, #4]
 8008c8c:	b90b      	cbnz	r3, 8008c92 <_scanf_i+0xca>
 8008c8e:	230a      	movs	r3, #10
 8008c90:	6063      	str	r3, [r4, #4]
 8008c92:	6863      	ldr	r3, [r4, #4]
 8008c94:	4947      	ldr	r1, [pc, #284]	; (8008db4 <_scanf_i+0x1ec>)
 8008c96:	6960      	ldr	r0, [r4, #20]
 8008c98:	1ac9      	subs	r1, r1, r3
 8008c9a:	f000 f89f 	bl	8008ddc <__sccl>
 8008c9e:	f04f 0b00 	mov.w	fp, #0
 8008ca2:	68a3      	ldr	r3, [r4, #8]
 8008ca4:	6822      	ldr	r2, [r4, #0]
 8008ca6:	2b00      	cmp	r3, #0
 8008ca8:	d03d      	beq.n	8008d26 <_scanf_i+0x15e>
 8008caa:	6831      	ldr	r1, [r6, #0]
 8008cac:	6960      	ldr	r0, [r4, #20]
 8008cae:	f891 c000 	ldrb.w	ip, [r1]
 8008cb2:	f810 000c 	ldrb.w	r0, [r0, ip]
 8008cb6:	2800      	cmp	r0, #0
 8008cb8:	d035      	beq.n	8008d26 <_scanf_i+0x15e>
 8008cba:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008cbe:	d124      	bne.n	8008d0a <_scanf_i+0x142>
 8008cc0:	0510      	lsls	r0, r2, #20
 8008cc2:	d522      	bpl.n	8008d0a <_scanf_i+0x142>
 8008cc4:	f10b 0b01 	add.w	fp, fp, #1
 8008cc8:	f1b9 0f00 	cmp.w	r9, #0
 8008ccc:	d003      	beq.n	8008cd6 <_scanf_i+0x10e>
 8008cce:	3301      	adds	r3, #1
 8008cd0:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 8008cd4:	60a3      	str	r3, [r4, #8]
 8008cd6:	6873      	ldr	r3, [r6, #4]
 8008cd8:	3b01      	subs	r3, #1
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	6073      	str	r3, [r6, #4]
 8008cde:	dd1b      	ble.n	8008d18 <_scanf_i+0x150>
 8008ce0:	6833      	ldr	r3, [r6, #0]
 8008ce2:	3301      	adds	r3, #1
 8008ce4:	6033      	str	r3, [r6, #0]
 8008ce6:	68a3      	ldr	r3, [r4, #8]
 8008ce8:	3b01      	subs	r3, #1
 8008cea:	60a3      	str	r3, [r4, #8]
 8008cec:	e7d9      	b.n	8008ca2 <_scanf_i+0xda>
 8008cee:	f1bb 0f02 	cmp.w	fp, #2
 8008cf2:	d1ae      	bne.n	8008c52 <_scanf_i+0x8a>
 8008cf4:	6822      	ldr	r2, [r4, #0]
 8008cf6:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 8008cfa:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008cfe:	d1bf      	bne.n	8008c80 <_scanf_i+0xb8>
 8008d00:	2310      	movs	r3, #16
 8008d02:	6063      	str	r3, [r4, #4]
 8008d04:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008d08:	e7a2      	b.n	8008c50 <_scanf_i+0x88>
 8008d0a:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008d0e:	6022      	str	r2, [r4, #0]
 8008d10:	780b      	ldrb	r3, [r1, #0]
 8008d12:	f805 3b01 	strb.w	r3, [r5], #1
 8008d16:	e7de      	b.n	8008cd6 <_scanf_i+0x10e>
 8008d18:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008d1c:	4631      	mov	r1, r6
 8008d1e:	4650      	mov	r0, sl
 8008d20:	4798      	blx	r3
 8008d22:	2800      	cmp	r0, #0
 8008d24:	d0df      	beq.n	8008ce6 <_scanf_i+0x11e>
 8008d26:	6823      	ldr	r3, [r4, #0]
 8008d28:	05db      	lsls	r3, r3, #23
 8008d2a:	d50d      	bpl.n	8008d48 <_scanf_i+0x180>
 8008d2c:	42bd      	cmp	r5, r7
 8008d2e:	d909      	bls.n	8008d44 <_scanf_i+0x17c>
 8008d30:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008d34:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008d38:	4632      	mov	r2, r6
 8008d3a:	4650      	mov	r0, sl
 8008d3c:	4798      	blx	r3
 8008d3e:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 8008d42:	464d      	mov	r5, r9
 8008d44:	42bd      	cmp	r5, r7
 8008d46:	d02d      	beq.n	8008da4 <_scanf_i+0x1dc>
 8008d48:	6822      	ldr	r2, [r4, #0]
 8008d4a:	f012 0210 	ands.w	r2, r2, #16
 8008d4e:	d113      	bne.n	8008d78 <_scanf_i+0x1b0>
 8008d50:	702a      	strb	r2, [r5, #0]
 8008d52:	6863      	ldr	r3, [r4, #4]
 8008d54:	9e01      	ldr	r6, [sp, #4]
 8008d56:	4639      	mov	r1, r7
 8008d58:	4650      	mov	r0, sl
 8008d5a:	47b0      	blx	r6
 8008d5c:	6821      	ldr	r1, [r4, #0]
 8008d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8008d62:	f011 0f20 	tst.w	r1, #32
 8008d66:	d013      	beq.n	8008d90 <_scanf_i+0x1c8>
 8008d68:	1d1a      	adds	r2, r3, #4
 8008d6a:	f8c8 2000 	str.w	r2, [r8]
 8008d6e:	681b      	ldr	r3, [r3, #0]
 8008d70:	6018      	str	r0, [r3, #0]
 8008d72:	68e3      	ldr	r3, [r4, #12]
 8008d74:	3301      	adds	r3, #1
 8008d76:	60e3      	str	r3, [r4, #12]
 8008d78:	1bed      	subs	r5, r5, r7
 8008d7a:	44ab      	add	fp, r5
 8008d7c:	6925      	ldr	r5, [r4, #16]
 8008d7e:	445d      	add	r5, fp
 8008d80:	6125      	str	r5, [r4, #16]
 8008d82:	2000      	movs	r0, #0
 8008d84:	b007      	add	sp, #28
 8008d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d8a:	f04f 0b00 	mov.w	fp, #0
 8008d8e:	e7ca      	b.n	8008d26 <_scanf_i+0x15e>
 8008d90:	1d1a      	adds	r2, r3, #4
 8008d92:	f8c8 2000 	str.w	r2, [r8]
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	f011 0f01 	tst.w	r1, #1
 8008d9c:	bf14      	ite	ne
 8008d9e:	8018      	strhne	r0, [r3, #0]
 8008da0:	6018      	streq	r0, [r3, #0]
 8008da2:	e7e6      	b.n	8008d72 <_scanf_i+0x1aa>
 8008da4:	2001      	movs	r0, #1
 8008da6:	e7ed      	b.n	8008d84 <_scanf_i+0x1bc>
 8008da8:	08009320 	.word	0x08009320
 8008dac:	08009039 	.word	0x08009039
 8008db0:	08008f51 	.word	0x08008f51
 8008db4:	08009448 	.word	0x08009448

08008db8 <_read_r>:
 8008db8:	b538      	push	{r3, r4, r5, lr}
 8008dba:	4d07      	ldr	r5, [pc, #28]	; (8008dd8 <_read_r+0x20>)
 8008dbc:	4604      	mov	r4, r0
 8008dbe:	4608      	mov	r0, r1
 8008dc0:	4611      	mov	r1, r2
 8008dc2:	2200      	movs	r2, #0
 8008dc4:	602a      	str	r2, [r5, #0]
 8008dc6:	461a      	mov	r2, r3
 8008dc8:	f7f8 f840 	bl	8000e4c <_read>
 8008dcc:	1c43      	adds	r3, r0, #1
 8008dce:	d102      	bne.n	8008dd6 <_read_r+0x1e>
 8008dd0:	682b      	ldr	r3, [r5, #0]
 8008dd2:	b103      	cbz	r3, 8008dd6 <_read_r+0x1e>
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	bd38      	pop	{r3, r4, r5, pc}
 8008dd8:	20004b0c 	.word	0x20004b0c

08008ddc <__sccl>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	780b      	ldrb	r3, [r1, #0]
 8008de0:	4604      	mov	r4, r0
 8008de2:	2b5e      	cmp	r3, #94	; 0x5e
 8008de4:	bf0b      	itete	eq
 8008de6:	784b      	ldrbeq	r3, [r1, #1]
 8008de8:	1c48      	addne	r0, r1, #1
 8008dea:	1c88      	addeq	r0, r1, #2
 8008dec:	2200      	movne	r2, #0
 8008dee:	bf08      	it	eq
 8008df0:	2201      	moveq	r2, #1
 8008df2:	1e61      	subs	r1, r4, #1
 8008df4:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008df8:	f801 2f01 	strb.w	r2, [r1, #1]!
 8008dfc:	42a9      	cmp	r1, r5
 8008dfe:	d1fb      	bne.n	8008df8 <__sccl+0x1c>
 8008e00:	b90b      	cbnz	r3, 8008e06 <__sccl+0x2a>
 8008e02:	3801      	subs	r0, #1
 8008e04:	bd70      	pop	{r4, r5, r6, pc}
 8008e06:	f082 0201 	eor.w	r2, r2, #1
 8008e0a:	54e2      	strb	r2, [r4, r3]
 8008e0c:	4605      	mov	r5, r0
 8008e0e:	4628      	mov	r0, r5
 8008e10:	f810 1b01 	ldrb.w	r1, [r0], #1
 8008e14:	292d      	cmp	r1, #45	; 0x2d
 8008e16:	d006      	beq.n	8008e26 <__sccl+0x4a>
 8008e18:	295d      	cmp	r1, #93	; 0x5d
 8008e1a:	d0f3      	beq.n	8008e04 <__sccl+0x28>
 8008e1c:	b909      	cbnz	r1, 8008e22 <__sccl+0x46>
 8008e1e:	4628      	mov	r0, r5
 8008e20:	e7f0      	b.n	8008e04 <__sccl+0x28>
 8008e22:	460b      	mov	r3, r1
 8008e24:	e7f1      	b.n	8008e0a <__sccl+0x2e>
 8008e26:	786e      	ldrb	r6, [r5, #1]
 8008e28:	2e5d      	cmp	r6, #93	; 0x5d
 8008e2a:	d0fa      	beq.n	8008e22 <__sccl+0x46>
 8008e2c:	42b3      	cmp	r3, r6
 8008e2e:	dcf8      	bgt.n	8008e22 <__sccl+0x46>
 8008e30:	3502      	adds	r5, #2
 8008e32:	4619      	mov	r1, r3
 8008e34:	3101      	adds	r1, #1
 8008e36:	428e      	cmp	r6, r1
 8008e38:	5462      	strb	r2, [r4, r1]
 8008e3a:	dcfb      	bgt.n	8008e34 <__sccl+0x58>
 8008e3c:	1af1      	subs	r1, r6, r3
 8008e3e:	3901      	subs	r1, #1
 8008e40:	1c58      	adds	r0, r3, #1
 8008e42:	42b3      	cmp	r3, r6
 8008e44:	bfa8      	it	ge
 8008e46:	2100      	movge	r1, #0
 8008e48:	1843      	adds	r3, r0, r1
 8008e4a:	e7e0      	b.n	8008e0e <__sccl+0x32>

08008e4c <_strtol_l.constprop.0>:
 8008e4c:	2b01      	cmp	r3, #1
 8008e4e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e52:	d001      	beq.n	8008e58 <_strtol_l.constprop.0+0xc>
 8008e54:	2b24      	cmp	r3, #36	; 0x24
 8008e56:	d906      	bls.n	8008e66 <_strtol_l.constprop.0+0x1a>
 8008e58:	f7fe fbe0 	bl	800761c <__errno>
 8008e5c:	2316      	movs	r3, #22
 8008e5e:	6003      	str	r3, [r0, #0]
 8008e60:	2000      	movs	r0, #0
 8008e62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e66:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008f4c <_strtol_l.constprop.0+0x100>
 8008e6a:	460d      	mov	r5, r1
 8008e6c:	462e      	mov	r6, r5
 8008e6e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008e72:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008e76:	f017 0708 	ands.w	r7, r7, #8
 8008e7a:	d1f7      	bne.n	8008e6c <_strtol_l.constprop.0+0x20>
 8008e7c:	2c2d      	cmp	r4, #45	; 0x2d
 8008e7e:	d132      	bne.n	8008ee6 <_strtol_l.constprop.0+0x9a>
 8008e80:	782c      	ldrb	r4, [r5, #0]
 8008e82:	2701      	movs	r7, #1
 8008e84:	1cb5      	adds	r5, r6, #2
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d05b      	beq.n	8008f42 <_strtol_l.constprop.0+0xf6>
 8008e8a:	2b10      	cmp	r3, #16
 8008e8c:	d109      	bne.n	8008ea2 <_strtol_l.constprop.0+0x56>
 8008e8e:	2c30      	cmp	r4, #48	; 0x30
 8008e90:	d107      	bne.n	8008ea2 <_strtol_l.constprop.0+0x56>
 8008e92:	782c      	ldrb	r4, [r5, #0]
 8008e94:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008e98:	2c58      	cmp	r4, #88	; 0x58
 8008e9a:	d14d      	bne.n	8008f38 <_strtol_l.constprop.0+0xec>
 8008e9c:	786c      	ldrb	r4, [r5, #1]
 8008e9e:	2310      	movs	r3, #16
 8008ea0:	3502      	adds	r5, #2
 8008ea2:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008ea6:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008eaa:	f04f 0c00 	mov.w	ip, #0
 8008eae:	fbb8 f9f3 	udiv	r9, r8, r3
 8008eb2:	4666      	mov	r6, ip
 8008eb4:	fb03 8a19 	mls	sl, r3, r9, r8
 8008eb8:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008ebc:	f1be 0f09 	cmp.w	lr, #9
 8008ec0:	d816      	bhi.n	8008ef0 <_strtol_l.constprop.0+0xa4>
 8008ec2:	4674      	mov	r4, lr
 8008ec4:	42a3      	cmp	r3, r4
 8008ec6:	dd24      	ble.n	8008f12 <_strtol_l.constprop.0+0xc6>
 8008ec8:	f1bc 0f00 	cmp.w	ip, #0
 8008ecc:	db1e      	blt.n	8008f0c <_strtol_l.constprop.0+0xc0>
 8008ece:	45b1      	cmp	r9, r6
 8008ed0:	d31c      	bcc.n	8008f0c <_strtol_l.constprop.0+0xc0>
 8008ed2:	d101      	bne.n	8008ed8 <_strtol_l.constprop.0+0x8c>
 8008ed4:	45a2      	cmp	sl, r4
 8008ed6:	db19      	blt.n	8008f0c <_strtol_l.constprop.0+0xc0>
 8008ed8:	fb06 4603 	mla	r6, r6, r3, r4
 8008edc:	f04f 0c01 	mov.w	ip, #1
 8008ee0:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008ee4:	e7e8      	b.n	8008eb8 <_strtol_l.constprop.0+0x6c>
 8008ee6:	2c2b      	cmp	r4, #43	; 0x2b
 8008ee8:	bf04      	itt	eq
 8008eea:	782c      	ldrbeq	r4, [r5, #0]
 8008eec:	1cb5      	addeq	r5, r6, #2
 8008eee:	e7ca      	b.n	8008e86 <_strtol_l.constprop.0+0x3a>
 8008ef0:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008ef4:	f1be 0f19 	cmp.w	lr, #25
 8008ef8:	d801      	bhi.n	8008efe <_strtol_l.constprop.0+0xb2>
 8008efa:	3c37      	subs	r4, #55	; 0x37
 8008efc:	e7e2      	b.n	8008ec4 <_strtol_l.constprop.0+0x78>
 8008efe:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008f02:	f1be 0f19 	cmp.w	lr, #25
 8008f06:	d804      	bhi.n	8008f12 <_strtol_l.constprop.0+0xc6>
 8008f08:	3c57      	subs	r4, #87	; 0x57
 8008f0a:	e7db      	b.n	8008ec4 <_strtol_l.constprop.0+0x78>
 8008f0c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008f10:	e7e6      	b.n	8008ee0 <_strtol_l.constprop.0+0x94>
 8008f12:	f1bc 0f00 	cmp.w	ip, #0
 8008f16:	da05      	bge.n	8008f24 <_strtol_l.constprop.0+0xd8>
 8008f18:	2322      	movs	r3, #34	; 0x22
 8008f1a:	6003      	str	r3, [r0, #0]
 8008f1c:	4646      	mov	r6, r8
 8008f1e:	b942      	cbnz	r2, 8008f32 <_strtol_l.constprop.0+0xe6>
 8008f20:	4630      	mov	r0, r6
 8008f22:	e79e      	b.n	8008e62 <_strtol_l.constprop.0+0x16>
 8008f24:	b107      	cbz	r7, 8008f28 <_strtol_l.constprop.0+0xdc>
 8008f26:	4276      	negs	r6, r6
 8008f28:	2a00      	cmp	r2, #0
 8008f2a:	d0f9      	beq.n	8008f20 <_strtol_l.constprop.0+0xd4>
 8008f2c:	f1bc 0f00 	cmp.w	ip, #0
 8008f30:	d000      	beq.n	8008f34 <_strtol_l.constprop.0+0xe8>
 8008f32:	1e69      	subs	r1, r5, #1
 8008f34:	6011      	str	r1, [r2, #0]
 8008f36:	e7f3      	b.n	8008f20 <_strtol_l.constprop.0+0xd4>
 8008f38:	2430      	movs	r4, #48	; 0x30
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d1b1      	bne.n	8008ea2 <_strtol_l.constprop.0+0x56>
 8008f3e:	2308      	movs	r3, #8
 8008f40:	e7af      	b.n	8008ea2 <_strtol_l.constprop.0+0x56>
 8008f42:	2c30      	cmp	r4, #48	; 0x30
 8008f44:	d0a5      	beq.n	8008e92 <_strtol_l.constprop.0+0x46>
 8008f46:	230a      	movs	r3, #10
 8008f48:	e7ab      	b.n	8008ea2 <_strtol_l.constprop.0+0x56>
 8008f4a:	bf00      	nop
 8008f4c:	0800944b 	.word	0x0800944b

08008f50 <_strtol_r>:
 8008f50:	f7ff bf7c 	b.w	8008e4c <_strtol_l.constprop.0>

08008f54 <_strtoul_l.constprop.0>:
 8008f54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008f58:	4f36      	ldr	r7, [pc, #216]	; (8009034 <_strtoul_l.constprop.0+0xe0>)
 8008f5a:	4686      	mov	lr, r0
 8008f5c:	460d      	mov	r5, r1
 8008f5e:	4628      	mov	r0, r5
 8008f60:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008f64:	5de6      	ldrb	r6, [r4, r7]
 8008f66:	f016 0608 	ands.w	r6, r6, #8
 8008f6a:	d1f8      	bne.n	8008f5e <_strtoul_l.constprop.0+0xa>
 8008f6c:	2c2d      	cmp	r4, #45	; 0x2d
 8008f6e:	d12f      	bne.n	8008fd0 <_strtoul_l.constprop.0+0x7c>
 8008f70:	782c      	ldrb	r4, [r5, #0]
 8008f72:	2601      	movs	r6, #1
 8008f74:	1c85      	adds	r5, r0, #2
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d057      	beq.n	800902a <_strtoul_l.constprop.0+0xd6>
 8008f7a:	2b10      	cmp	r3, #16
 8008f7c:	d109      	bne.n	8008f92 <_strtoul_l.constprop.0+0x3e>
 8008f7e:	2c30      	cmp	r4, #48	; 0x30
 8008f80:	d107      	bne.n	8008f92 <_strtoul_l.constprop.0+0x3e>
 8008f82:	7828      	ldrb	r0, [r5, #0]
 8008f84:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008f88:	2858      	cmp	r0, #88	; 0x58
 8008f8a:	d149      	bne.n	8009020 <_strtoul_l.constprop.0+0xcc>
 8008f8c:	786c      	ldrb	r4, [r5, #1]
 8008f8e:	2310      	movs	r3, #16
 8008f90:	3502      	adds	r5, #2
 8008f92:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 8008f96:	2700      	movs	r7, #0
 8008f98:	fbb8 f8f3 	udiv	r8, r8, r3
 8008f9c:	fb03 f908 	mul.w	r9, r3, r8
 8008fa0:	ea6f 0909 	mvn.w	r9, r9
 8008fa4:	4638      	mov	r0, r7
 8008fa6:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008faa:	f1bc 0f09 	cmp.w	ip, #9
 8008fae:	d814      	bhi.n	8008fda <_strtoul_l.constprop.0+0x86>
 8008fb0:	4664      	mov	r4, ip
 8008fb2:	42a3      	cmp	r3, r4
 8008fb4:	dd22      	ble.n	8008ffc <_strtoul_l.constprop.0+0xa8>
 8008fb6:	2f00      	cmp	r7, #0
 8008fb8:	db1d      	blt.n	8008ff6 <_strtoul_l.constprop.0+0xa2>
 8008fba:	4580      	cmp	r8, r0
 8008fbc:	d31b      	bcc.n	8008ff6 <_strtoul_l.constprop.0+0xa2>
 8008fbe:	d101      	bne.n	8008fc4 <_strtoul_l.constprop.0+0x70>
 8008fc0:	45a1      	cmp	r9, r4
 8008fc2:	db18      	blt.n	8008ff6 <_strtoul_l.constprop.0+0xa2>
 8008fc4:	fb00 4003 	mla	r0, r0, r3, r4
 8008fc8:	2701      	movs	r7, #1
 8008fca:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008fce:	e7ea      	b.n	8008fa6 <_strtoul_l.constprop.0+0x52>
 8008fd0:	2c2b      	cmp	r4, #43	; 0x2b
 8008fd2:	bf04      	itt	eq
 8008fd4:	782c      	ldrbeq	r4, [r5, #0]
 8008fd6:	1c85      	addeq	r5, r0, #2
 8008fd8:	e7cd      	b.n	8008f76 <_strtoul_l.constprop.0+0x22>
 8008fda:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008fde:	f1bc 0f19 	cmp.w	ip, #25
 8008fe2:	d801      	bhi.n	8008fe8 <_strtoul_l.constprop.0+0x94>
 8008fe4:	3c37      	subs	r4, #55	; 0x37
 8008fe6:	e7e4      	b.n	8008fb2 <_strtoul_l.constprop.0+0x5e>
 8008fe8:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008fec:	f1bc 0f19 	cmp.w	ip, #25
 8008ff0:	d804      	bhi.n	8008ffc <_strtoul_l.constprop.0+0xa8>
 8008ff2:	3c57      	subs	r4, #87	; 0x57
 8008ff4:	e7dd      	b.n	8008fb2 <_strtoul_l.constprop.0+0x5e>
 8008ff6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8008ffa:	e7e6      	b.n	8008fca <_strtoul_l.constprop.0+0x76>
 8008ffc:	2f00      	cmp	r7, #0
 8008ffe:	da07      	bge.n	8009010 <_strtoul_l.constprop.0+0xbc>
 8009000:	2322      	movs	r3, #34	; 0x22
 8009002:	f8ce 3000 	str.w	r3, [lr]
 8009006:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800900a:	b932      	cbnz	r2, 800901a <_strtoul_l.constprop.0+0xc6>
 800900c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009010:	b106      	cbz	r6, 8009014 <_strtoul_l.constprop.0+0xc0>
 8009012:	4240      	negs	r0, r0
 8009014:	2a00      	cmp	r2, #0
 8009016:	d0f9      	beq.n	800900c <_strtoul_l.constprop.0+0xb8>
 8009018:	b107      	cbz	r7, 800901c <_strtoul_l.constprop.0+0xc8>
 800901a:	1e69      	subs	r1, r5, #1
 800901c:	6011      	str	r1, [r2, #0]
 800901e:	e7f5      	b.n	800900c <_strtoul_l.constprop.0+0xb8>
 8009020:	2430      	movs	r4, #48	; 0x30
 8009022:	2b00      	cmp	r3, #0
 8009024:	d1b5      	bne.n	8008f92 <_strtoul_l.constprop.0+0x3e>
 8009026:	2308      	movs	r3, #8
 8009028:	e7b3      	b.n	8008f92 <_strtoul_l.constprop.0+0x3e>
 800902a:	2c30      	cmp	r4, #48	; 0x30
 800902c:	d0a9      	beq.n	8008f82 <_strtoul_l.constprop.0+0x2e>
 800902e:	230a      	movs	r3, #10
 8009030:	e7af      	b.n	8008f92 <_strtoul_l.constprop.0+0x3e>
 8009032:	bf00      	nop
 8009034:	0800944b 	.word	0x0800944b

08009038 <_strtoul_r>:
 8009038:	f7ff bf8c 	b.w	8008f54 <_strtoul_l.constprop.0>

0800903c <__submore>:
 800903c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009040:	460c      	mov	r4, r1
 8009042:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8009044:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009048:	4299      	cmp	r1, r3
 800904a:	d11d      	bne.n	8009088 <__submore+0x4c>
 800904c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8009050:	f7fe fc3e 	bl	80078d0 <_malloc_r>
 8009054:	b918      	cbnz	r0, 800905e <__submore+0x22>
 8009056:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800905a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800905e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8009062:	63a3      	str	r3, [r4, #56]	; 0x38
 8009064:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8009068:	6360      	str	r0, [r4, #52]	; 0x34
 800906a:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800906e:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 8009072:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 8009076:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800907a:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800907e:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 8009082:	6020      	str	r0, [r4, #0]
 8009084:	2000      	movs	r0, #0
 8009086:	e7e8      	b.n	800905a <__submore+0x1e>
 8009088:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800908a:	0077      	lsls	r7, r6, #1
 800908c:	463a      	mov	r2, r7
 800908e:	f000 f831 	bl	80090f4 <_realloc_r>
 8009092:	4605      	mov	r5, r0
 8009094:	2800      	cmp	r0, #0
 8009096:	d0de      	beq.n	8009056 <__submore+0x1a>
 8009098:	eb00 0806 	add.w	r8, r0, r6
 800909c:	4601      	mov	r1, r0
 800909e:	4632      	mov	r2, r6
 80090a0:	4640      	mov	r0, r8
 80090a2:	f7fe fbde 	bl	8007862 <memcpy>
 80090a6:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80090aa:	f8c4 8000 	str.w	r8, [r4]
 80090ae:	e7e9      	b.n	8009084 <__submore+0x48>

080090b0 <_fstat_r>:
 80090b0:	b538      	push	{r3, r4, r5, lr}
 80090b2:	4d07      	ldr	r5, [pc, #28]	; (80090d0 <_fstat_r+0x20>)
 80090b4:	2300      	movs	r3, #0
 80090b6:	4604      	mov	r4, r0
 80090b8:	4608      	mov	r0, r1
 80090ba:	4611      	mov	r1, r2
 80090bc:	602b      	str	r3, [r5, #0]
 80090be:	f7f7 feee 	bl	8000e9e <_fstat>
 80090c2:	1c43      	adds	r3, r0, #1
 80090c4:	d102      	bne.n	80090cc <_fstat_r+0x1c>
 80090c6:	682b      	ldr	r3, [r5, #0]
 80090c8:	b103      	cbz	r3, 80090cc <_fstat_r+0x1c>
 80090ca:	6023      	str	r3, [r4, #0]
 80090cc:	bd38      	pop	{r3, r4, r5, pc}
 80090ce:	bf00      	nop
 80090d0:	20004b0c 	.word	0x20004b0c

080090d4 <_isatty_r>:
 80090d4:	b538      	push	{r3, r4, r5, lr}
 80090d6:	4d06      	ldr	r5, [pc, #24]	; (80090f0 <_isatty_r+0x1c>)
 80090d8:	2300      	movs	r3, #0
 80090da:	4604      	mov	r4, r0
 80090dc:	4608      	mov	r0, r1
 80090de:	602b      	str	r3, [r5, #0]
 80090e0:	f7f7 feed 	bl	8000ebe <_isatty>
 80090e4:	1c43      	adds	r3, r0, #1
 80090e6:	d102      	bne.n	80090ee <_isatty_r+0x1a>
 80090e8:	682b      	ldr	r3, [r5, #0]
 80090ea:	b103      	cbz	r3, 80090ee <_isatty_r+0x1a>
 80090ec:	6023      	str	r3, [r4, #0]
 80090ee:	bd38      	pop	{r3, r4, r5, pc}
 80090f0:	20004b0c 	.word	0x20004b0c

080090f4 <_realloc_r>:
 80090f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80090f8:	4680      	mov	r8, r0
 80090fa:	4614      	mov	r4, r2
 80090fc:	460e      	mov	r6, r1
 80090fe:	b921      	cbnz	r1, 800910a <_realloc_r+0x16>
 8009100:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009104:	4611      	mov	r1, r2
 8009106:	f7fe bbe3 	b.w	80078d0 <_malloc_r>
 800910a:	b92a      	cbnz	r2, 8009118 <_realloc_r+0x24>
 800910c:	f7fe fff6 	bl	80080fc <_free_r>
 8009110:	4625      	mov	r5, r4
 8009112:	4628      	mov	r0, r5
 8009114:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009118:	f000 f81b 	bl	8009152 <_malloc_usable_size_r>
 800911c:	4284      	cmp	r4, r0
 800911e:	4607      	mov	r7, r0
 8009120:	d802      	bhi.n	8009128 <_realloc_r+0x34>
 8009122:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009126:	d812      	bhi.n	800914e <_realloc_r+0x5a>
 8009128:	4621      	mov	r1, r4
 800912a:	4640      	mov	r0, r8
 800912c:	f7fe fbd0 	bl	80078d0 <_malloc_r>
 8009130:	4605      	mov	r5, r0
 8009132:	2800      	cmp	r0, #0
 8009134:	d0ed      	beq.n	8009112 <_realloc_r+0x1e>
 8009136:	42bc      	cmp	r4, r7
 8009138:	4622      	mov	r2, r4
 800913a:	4631      	mov	r1, r6
 800913c:	bf28      	it	cs
 800913e:	463a      	movcs	r2, r7
 8009140:	f7fe fb8f 	bl	8007862 <memcpy>
 8009144:	4631      	mov	r1, r6
 8009146:	4640      	mov	r0, r8
 8009148:	f7fe ffd8 	bl	80080fc <_free_r>
 800914c:	e7e1      	b.n	8009112 <_realloc_r+0x1e>
 800914e:	4635      	mov	r5, r6
 8009150:	e7df      	b.n	8009112 <_realloc_r+0x1e>

08009152 <_malloc_usable_size_r>:
 8009152:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009156:	1f18      	subs	r0, r3, #4
 8009158:	2b00      	cmp	r3, #0
 800915a:	bfbc      	itt	lt
 800915c:	580b      	ldrlt	r3, [r1, r0]
 800915e:	18c0      	addlt	r0, r0, r3
 8009160:	4770      	bx	lr
	...

08009164 <_init>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	bf00      	nop
 8009168:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800916a:	bc08      	pop	{r3}
 800916c:	469e      	mov	lr, r3
 800916e:	4770      	bx	lr

08009170 <_fini>:
 8009170:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009172:	bf00      	nop
 8009174:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009176:	bc08      	pop	{r3}
 8009178:	469e      	mov	lr, r3
 800917a:	4770      	bx	lr
