
LECTURE_03.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005c10  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f0  08005da0  08005da0  00015da0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005e90  08005e90  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005e90  08005e90  00015e90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005e98  08005e98  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005e98  08005e98  00015e98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005e9c  08005e9c  00015e9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ea0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ac4  20000074  08005f14  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b38  08005f14  00021b38  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001c0fd  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003605  00000000  00000000  0003c1a1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000016a8  00000000  00000000  0003f7a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001570  00000000  00000000  00040e50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00003644  00000000  00000000  000423c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000184f0  00000000  00000000  00045a04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d51ad  00000000  00000000  0005def4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001330a1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006288  00000000  00000000  001330f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08005d88 	.word	0x08005d88

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08005d88 	.word	0x08005d88

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004d8:	f000 fa7d 	bl	80009d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004dc:	f000 f818 	bl	8000510 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004e0:	f000 f8a8 	bl	8000634 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80004e4:	f000 f876 	bl	80005d4 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80004e8:	f002 fdd6 	bl	8003098 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80004ec:	4a05      	ldr	r2, [pc, #20]	; (8000504 <main+0x30>)
 80004ee:	2100      	movs	r1, #0
 80004f0:	4805      	ldr	r0, [pc, #20]	; (8000508 <main+0x34>)
 80004f2:	f002 fe1b 	bl	800312c <osThreadNew>
 80004f6:	4603      	mov	r3, r0
 80004f8:	4a04      	ldr	r2, [pc, #16]	; (800050c <main+0x38>)
 80004fa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80004fc:	f002 fdf0 	bl	80030e0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000500:	e7fe      	b.n	8000500 <main+0x2c>
 8000502:	bf00      	nop
 8000504:	08005dc4 	.word	0x08005dc4
 8000508:	080006c9 	.word	0x080006c9
 800050c:	20000114 	.word	0x20000114

08000510 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b096      	sub	sp, #88	; 0x58
 8000514:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000516:	f107 0314 	add.w	r3, r7, #20
 800051a:	2244      	movs	r2, #68	; 0x44
 800051c:	2100      	movs	r1, #0
 800051e:	4618      	mov	r0, r3
 8000520:	f005 fb68 	bl	8005bf4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000524:	463b      	mov	r3, r7
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
 800052a:	605a      	str	r2, [r3, #4]
 800052c:	609a      	str	r2, [r3, #8]
 800052e:	60da      	str	r2, [r3, #12]
 8000530:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000532:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000536:	f000 fd09 	bl	8000f4c <HAL_PWREx_ControlVoltageScaling>
 800053a:	4603      	mov	r3, r0
 800053c:	2b00      	cmp	r3, #0
 800053e:	d001      	beq.n	8000544 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000540:	f000 f8dc 	bl	80006fc <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000544:	f000 fce4 	bl	8000f10 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000548:	4b21      	ldr	r3, [pc, #132]	; (80005d0 <SystemClock_Config+0xc0>)
 800054a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800054e:	4a20      	ldr	r2, [pc, #128]	; (80005d0 <SystemClock_Config+0xc0>)
 8000550:	f023 0318 	bic.w	r3, r3, #24
 8000554:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000558:	2314      	movs	r3, #20
 800055a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800055c:	2301      	movs	r3, #1
 800055e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000560:	2301      	movs	r3, #1
 8000562:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000564:	2300      	movs	r3, #0
 8000566:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000568:	2360      	movs	r3, #96	; 0x60
 800056a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800056c:	2302      	movs	r3, #2
 800056e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000570:	2301      	movs	r3, #1
 8000572:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000574:	2301      	movs	r3, #1
 8000576:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000578:	2310      	movs	r3, #16
 800057a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800057c:	2307      	movs	r3, #7
 800057e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000580:	2302      	movs	r3, #2
 8000582:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000584:	2302      	movs	r3, #2
 8000586:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000588:	f107 0314 	add.w	r3, r7, #20
 800058c:	4618      	mov	r0, r3
 800058e:	f000 fd33 	bl	8000ff8 <HAL_RCC_OscConfig>
 8000592:	4603      	mov	r3, r0
 8000594:	2b00      	cmp	r3, #0
 8000596:	d001      	beq.n	800059c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000598:	f000 f8b0 	bl	80006fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800059c:	230f      	movs	r3, #15
 800059e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005a0:	2303      	movs	r3, #3
 80005a2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005a4:	2300      	movs	r3, #0
 80005a6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80005a8:	2300      	movs	r3, #0
 80005aa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005ac:	2300      	movs	r3, #0
 80005ae:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80005b0:	463b      	mov	r3, r7
 80005b2:	2101      	movs	r1, #1
 80005b4:	4618      	mov	r0, r3
 80005b6:	f001 f933 	bl	8001820 <HAL_RCC_ClockConfig>
 80005ba:	4603      	mov	r3, r0
 80005bc:	2b00      	cmp	r3, #0
 80005be:	d001      	beq.n	80005c4 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80005c0:	f000 f89c 	bl	80006fc <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 80005c4:	f001 fd78 	bl	80020b8 <HAL_RCCEx_EnableMSIPLLMode>
}
 80005c8:	bf00      	nop
 80005ca:	3758      	adds	r7, #88	; 0x58
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	40021000 	.word	0x40021000

080005d4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80005d8:	4b14      	ldr	r3, [pc, #80]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005da:	4a15      	ldr	r2, [pc, #84]	; (8000630 <MX_USART2_UART_Init+0x5c>)
 80005dc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80005de:	4b13      	ldr	r3, [pc, #76]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80005e4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80005e6:	4b11      	ldr	r3, [pc, #68]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80005ec:	4b0f      	ldr	r3, [pc, #60]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80005f2:	4b0e      	ldr	r3, [pc, #56]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80005f8:	4b0c      	ldr	r3, [pc, #48]	; (800062c <MX_USART2_UART_Init+0x58>)
 80005fa:	220c      	movs	r2, #12
 80005fc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80005fe:	4b0b      	ldr	r3, [pc, #44]	; (800062c <MX_USART2_UART_Init+0x58>)
 8000600:	2200      	movs	r2, #0
 8000602:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000604:	4b09      	ldr	r3, [pc, #36]	; (800062c <MX_USART2_UART_Init+0x58>)
 8000606:	2200      	movs	r2, #0
 8000608:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800060a:	4b08      	ldr	r3, [pc, #32]	; (800062c <MX_USART2_UART_Init+0x58>)
 800060c:	2200      	movs	r2, #0
 800060e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000610:	4b06      	ldr	r3, [pc, #24]	; (800062c <MX_USART2_UART_Init+0x58>)
 8000612:	2200      	movs	r2, #0
 8000614:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000616:	4805      	ldr	r0, [pc, #20]	; (800062c <MX_USART2_UART_Init+0x58>)
 8000618:	f002 f8d0 	bl	80027bc <HAL_UART_Init>
 800061c:	4603      	mov	r3, r0
 800061e:	2b00      	cmp	r3, #0
 8000620:	d001      	beq.n	8000626 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000622:	f000 f86b 	bl	80006fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000626:	bf00      	nop
 8000628:	bd80      	pop	{r7, pc}
 800062a:	bf00      	nop
 800062c:	20000090 	.word	0x20000090
 8000630:	40004400 	.word	0x40004400

08000634 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b088      	sub	sp, #32
 8000638:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800063a:	f107 030c 	add.w	r3, r7, #12
 800063e:	2200      	movs	r2, #0
 8000640:	601a      	str	r2, [r3, #0]
 8000642:	605a      	str	r2, [r3, #4]
 8000644:	609a      	str	r2, [r3, #8]
 8000646:	60da      	str	r2, [r3, #12]
 8000648:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800064a:	4b1d      	ldr	r3, [pc, #116]	; (80006c0 <MX_GPIO_Init+0x8c>)
 800064c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800064e:	4a1c      	ldr	r2, [pc, #112]	; (80006c0 <MX_GPIO_Init+0x8c>)
 8000650:	f043 0304 	orr.w	r3, r3, #4
 8000654:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000656:	4b1a      	ldr	r3, [pc, #104]	; (80006c0 <MX_GPIO_Init+0x8c>)
 8000658:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800065a:	f003 0304 	and.w	r3, r3, #4
 800065e:	60bb      	str	r3, [r7, #8]
 8000660:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000662:	4b17      	ldr	r3, [pc, #92]	; (80006c0 <MX_GPIO_Init+0x8c>)
 8000664:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000666:	4a16      	ldr	r2, [pc, #88]	; (80006c0 <MX_GPIO_Init+0x8c>)
 8000668:	f043 0301 	orr.w	r3, r3, #1
 800066c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800066e:	4b14      	ldr	r3, [pc, #80]	; (80006c0 <MX_GPIO_Init+0x8c>)
 8000670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000672:	f003 0301 	and.w	r3, r3, #1
 8000676:	607b      	str	r3, [r7, #4]
 8000678:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800067a:	4b11      	ldr	r3, [pc, #68]	; (80006c0 <MX_GPIO_Init+0x8c>)
 800067c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800067e:	4a10      	ldr	r2, [pc, #64]	; (80006c0 <MX_GPIO_Init+0x8c>)
 8000680:	f043 0302 	orr.w	r3, r3, #2
 8000684:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000686:	4b0e      	ldr	r3, [pc, #56]	; (80006c0 <MX_GPIO_Init+0x8c>)
 8000688:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800068a:	f003 0302 	and.w	r3, r3, #2
 800068e:	603b      	str	r3, [r7, #0]
 8000690:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BOARD_LED_GPIO_Port, BOARD_LED_Pin, GPIO_PIN_RESET);
 8000692:	2200      	movs	r2, #0
 8000694:	2108      	movs	r1, #8
 8000696:	480b      	ldr	r0, [pc, #44]	; (80006c4 <MX_GPIO_Init+0x90>)
 8000698:	f000 fc22 	bl	8000ee0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BOARD_LED_Pin */
  GPIO_InitStruct.Pin = BOARD_LED_Pin;
 800069c:	2308      	movs	r3, #8
 800069e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BOARD_LED_GPIO_Port, &GPIO_InitStruct);
 80006ac:	f107 030c 	add.w	r3, r7, #12
 80006b0:	4619      	mov	r1, r3
 80006b2:	4804      	ldr	r0, [pc, #16]	; (80006c4 <MX_GPIO_Init+0x90>)
 80006b4:	f000 faaa 	bl	8000c0c <HAL_GPIO_Init>

}
 80006b8:	bf00      	nop
 80006ba:	3720      	adds	r7, #32
 80006bc:	46bd      	mov	sp, r7
 80006be:	bd80      	pop	{r7, pc}
 80006c0:	40021000 	.word	0x40021000
 80006c4:	48000400 	.word	0x48000400

080006c8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b082      	sub	sp, #8
 80006cc:	af00      	add	r7, sp, #0
 80006ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80006d0:	2001      	movs	r0, #1
 80006d2:	f002 fdbd 	bl	8003250 <osDelay>
 80006d6:	e7fb      	b.n	80006d0 <StartDefaultTask+0x8>

080006d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006d8:	b580      	push	{r7, lr}
 80006da:	b082      	sub	sp, #8
 80006dc:	af00      	add	r7, sp, #0
 80006de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	4a04      	ldr	r2, [pc, #16]	; (80006f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006e6:	4293      	cmp	r3, r2
 80006e8:	d101      	bne.n	80006ee <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006ea:	f000 f98d 	bl	8000a08 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80006ee:	bf00      	nop
 80006f0:	3708      	adds	r7, #8
 80006f2:	46bd      	mov	sp, r7
 80006f4:	bd80      	pop	{r7, pc}
 80006f6:	bf00      	nop
 80006f8:	40001000 	.word	0x40001000

080006fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000700:	b672      	cpsid	i
}
 8000702:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000704:	e7fe      	b.n	8000704 <Error_Handler+0x8>
	...

08000708 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	b082      	sub	sp, #8
 800070c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800070e:	4b11      	ldr	r3, [pc, #68]	; (8000754 <HAL_MspInit+0x4c>)
 8000710:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000712:	4a10      	ldr	r2, [pc, #64]	; (8000754 <HAL_MspInit+0x4c>)
 8000714:	f043 0301 	orr.w	r3, r3, #1
 8000718:	6613      	str	r3, [r2, #96]	; 0x60
 800071a:	4b0e      	ldr	r3, [pc, #56]	; (8000754 <HAL_MspInit+0x4c>)
 800071c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800071e:	f003 0301 	and.w	r3, r3, #1
 8000722:	607b      	str	r3, [r7, #4]
 8000724:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000726:	4b0b      	ldr	r3, [pc, #44]	; (8000754 <HAL_MspInit+0x4c>)
 8000728:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800072a:	4a0a      	ldr	r2, [pc, #40]	; (8000754 <HAL_MspInit+0x4c>)
 800072c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000730:	6593      	str	r3, [r2, #88]	; 0x58
 8000732:	4b08      	ldr	r3, [pc, #32]	; (8000754 <HAL_MspInit+0x4c>)
 8000734:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000736:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800073a:	603b      	str	r3, [r7, #0]
 800073c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800073e:	2200      	movs	r2, #0
 8000740:	210f      	movs	r1, #15
 8000742:	f06f 0001 	mvn.w	r0, #1
 8000746:	f000 fa37 	bl	8000bb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800074a:	bf00      	nop
 800074c:	3708      	adds	r7, #8
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}
 8000752:	bf00      	nop
 8000754:	40021000 	.word	0x40021000

08000758 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000758:	b580      	push	{r7, lr}
 800075a:	b09e      	sub	sp, #120	; 0x78
 800075c:	af00      	add	r7, sp, #0
 800075e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000760:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
 8000768:	605a      	str	r2, [r3, #4]
 800076a:	609a      	str	r2, [r3, #8]
 800076c:	60da      	str	r2, [r3, #12]
 800076e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000770:	f107 0310 	add.w	r3, r7, #16
 8000774:	2254      	movs	r2, #84	; 0x54
 8000776:	2100      	movs	r1, #0
 8000778:	4618      	mov	r0, r3
 800077a:	f005 fa3b 	bl	8005bf4 <memset>
  if(huart->Instance==USART2)
 800077e:	687b      	ldr	r3, [r7, #4]
 8000780:	681b      	ldr	r3, [r3, #0]
 8000782:	4a28      	ldr	r2, [pc, #160]	; (8000824 <HAL_UART_MspInit+0xcc>)
 8000784:	4293      	cmp	r3, r2
 8000786:	d148      	bne.n	800081a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000788:	2302      	movs	r3, #2
 800078a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800078c:	2300      	movs	r3, #0
 800078e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000790:	f107 0310 	add.w	r3, r7, #16
 8000794:	4618      	mov	r0, r3
 8000796:	f001 fa99 	bl	8001ccc <HAL_RCCEx_PeriphCLKConfig>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80007a0:	f7ff ffac 	bl	80006fc <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80007a4:	4b20      	ldr	r3, [pc, #128]	; (8000828 <HAL_UART_MspInit+0xd0>)
 80007a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007a8:	4a1f      	ldr	r2, [pc, #124]	; (8000828 <HAL_UART_MspInit+0xd0>)
 80007aa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007ae:	6593      	str	r3, [r2, #88]	; 0x58
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <HAL_UART_MspInit+0xd0>)
 80007b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80007b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80007b8:	60fb      	str	r3, [r7, #12]
 80007ba:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <HAL_UART_MspInit+0xd0>)
 80007be:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <HAL_UART_MspInit+0xd0>)
 80007c2:	f043 0301 	orr.w	r3, r3, #1
 80007c6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <HAL_UART_MspInit+0xd0>)
 80007ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80007cc:	f003 0301 	and.w	r3, r3, #1
 80007d0:	60bb      	str	r3, [r7, #8]
 80007d2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80007d4:	2304      	movs	r3, #4
 80007d6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007e4:	2307      	movs	r3, #7
 80007e6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80007ec:	4619      	mov	r1, r3
 80007ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80007f2:	f000 fa0b 	bl	8000c0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80007f6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007fa:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007fc:	2302      	movs	r3, #2
 80007fe:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000800:	2300      	movs	r3, #0
 8000802:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000804:	2303      	movs	r3, #3
 8000806:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000808:	2303      	movs	r3, #3
 800080a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800080c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000810:	4619      	mov	r1, r3
 8000812:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000816:	f000 f9f9 	bl	8000c0c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800081a:	bf00      	nop
 800081c:	3778      	adds	r7, #120	; 0x78
 800081e:	46bd      	mov	sp, r7
 8000820:	bd80      	pop	{r7, pc}
 8000822:	bf00      	nop
 8000824:	40004400 	.word	0x40004400
 8000828:	40021000 	.word	0x40021000

0800082c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800082c:	b580      	push	{r7, lr}
 800082e:	b08e      	sub	sp, #56	; 0x38
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000834:	2300      	movs	r3, #0
 8000836:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800083a:	4b34      	ldr	r3, [pc, #208]	; (800090c <HAL_InitTick+0xe0>)
 800083c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800083e:	4a33      	ldr	r2, [pc, #204]	; (800090c <HAL_InitTick+0xe0>)
 8000840:	f043 0310 	orr.w	r3, r3, #16
 8000844:	6593      	str	r3, [r2, #88]	; 0x58
 8000846:	4b31      	ldr	r3, [pc, #196]	; (800090c <HAL_InitTick+0xe0>)
 8000848:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800084a:	f003 0310 	and.w	r3, r3, #16
 800084e:	60fb      	str	r3, [r7, #12]
 8000850:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000852:	f107 0210 	add.w	r2, r7, #16
 8000856:	f107 0314 	add.w	r3, r7, #20
 800085a:	4611      	mov	r1, r2
 800085c:	4618      	mov	r0, r3
 800085e:	f001 f9a3 	bl	8001ba8 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000862:	6a3b      	ldr	r3, [r7, #32]
 8000864:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000868:	2b00      	cmp	r3, #0
 800086a:	d103      	bne.n	8000874 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 800086c:	f001 f970 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8000870:	6378      	str	r0, [r7, #52]	; 0x34
 8000872:	e004      	b.n	800087e <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000874:	f001 f96c 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8000878:	4603      	mov	r3, r0
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800087e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000880:	4a23      	ldr	r2, [pc, #140]	; (8000910 <HAL_InitTick+0xe4>)
 8000882:	fba2 2303 	umull	r2, r3, r2, r3
 8000886:	0c9b      	lsrs	r3, r3, #18
 8000888:	3b01      	subs	r3, #1
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 800088c:	4b21      	ldr	r3, [pc, #132]	; (8000914 <HAL_InitTick+0xe8>)
 800088e:	4a22      	ldr	r2, [pc, #136]	; (8000918 <HAL_InitTick+0xec>)
 8000890:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000892:	4b20      	ldr	r3, [pc, #128]	; (8000914 <HAL_InitTick+0xe8>)
 8000894:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000898:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 800089a:	4a1e      	ldr	r2, [pc, #120]	; (8000914 <HAL_InitTick+0xe8>)
 800089c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800089e:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80008a0:	4b1c      	ldr	r3, [pc, #112]	; (8000914 <HAL_InitTick+0xe8>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a6:	4b1b      	ldr	r3, [pc, #108]	; (8000914 <HAL_InitTick+0xe8>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008ac:	4b19      	ldr	r3, [pc, #100]	; (8000914 <HAL_InitTick+0xe8>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80008b2:	4818      	ldr	r0, [pc, #96]	; (8000914 <HAL_InitTick+0xe8>)
 80008b4:	f001 fd02 	bl	80022bc <HAL_TIM_Base_Init>
 80008b8:	4603      	mov	r3, r0
 80008ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80008be:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d11b      	bne.n	80008fe <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80008c6:	4813      	ldr	r0, [pc, #76]	; (8000914 <HAL_InitTick+0xe8>)
 80008c8:	f001 fd5a 	bl	8002380 <HAL_TIM_Base_Start_IT>
 80008cc:	4603      	mov	r3, r0
 80008ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80008d2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d111      	bne.n	80008fe <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80008da:	2036      	movs	r0, #54	; 0x36
 80008dc:	f000 f988 	bl	8000bf0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	2b0f      	cmp	r3, #15
 80008e4:	d808      	bhi.n	80008f8 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80008e6:	2200      	movs	r2, #0
 80008e8:	6879      	ldr	r1, [r7, #4]
 80008ea:	2036      	movs	r0, #54	; 0x36
 80008ec:	f000 f964 	bl	8000bb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80008f0:	4a0a      	ldr	r2, [pc, #40]	; (800091c <HAL_InitTick+0xf0>)
 80008f2:	687b      	ldr	r3, [r7, #4]
 80008f4:	6013      	str	r3, [r2, #0]
 80008f6:	e002      	b.n	80008fe <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80008f8:	2301      	movs	r3, #1
 80008fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80008fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000902:	4618      	mov	r0, r3
 8000904:	3738      	adds	r7, #56	; 0x38
 8000906:	46bd      	mov	sp, r7
 8000908:	bd80      	pop	{r7, pc}
 800090a:	bf00      	nop
 800090c:	40021000 	.word	0x40021000
 8000910:	431bde83 	.word	0x431bde83
 8000914:	20000118 	.word	0x20000118
 8000918:	40001000 	.word	0x40001000
 800091c:	20000004 	.word	0x20000004

08000920 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000920:	b480      	push	{r7}
 8000922:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000924:	e7fe      	b.n	8000924 <NMI_Handler+0x4>

08000926 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000926:	b480      	push	{r7}
 8000928:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800092a:	e7fe      	b.n	800092a <HardFault_Handler+0x4>

0800092c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800092c:	b480      	push	{r7}
 800092e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000930:	e7fe      	b.n	8000930 <MemManage_Handler+0x4>

08000932 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000932:	b480      	push	{r7}
 8000934:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000936:	e7fe      	b.n	8000936 <BusFault_Handler+0x4>

08000938 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000938:	b480      	push	{r7}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800093c:	e7fe      	b.n	800093c <UsageFault_Handler+0x4>

0800093e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800093e:	b480      	push	{r7}
 8000940:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000942:	bf00      	nop
 8000944:	46bd      	mov	sp, r7
 8000946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800094a:	4770      	bx	lr

0800094c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800094c:	b580      	push	{r7, lr}
 800094e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000950:	4802      	ldr	r0, [pc, #8]	; (800095c <TIM6_DAC_IRQHandler+0x10>)
 8000952:	f001 fd69 	bl	8002428 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000956:	bf00      	nop
 8000958:	bd80      	pop	{r7, pc}
 800095a:	bf00      	nop
 800095c:	20000118 	.word	0x20000118

08000960 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000964:	4b06      	ldr	r3, [pc, #24]	; (8000980 <SystemInit+0x20>)
 8000966:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800096a:	4a05      	ldr	r2, [pc, #20]	; (8000980 <SystemInit+0x20>)
 800096c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000970:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000974:	bf00      	nop
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	e000ed00 	.word	0xe000ed00

08000984 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000984:	f8df d034 	ldr.w	sp, [pc, #52]	; 80009bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000988:	f7ff ffea 	bl	8000960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800098c:	480c      	ldr	r0, [pc, #48]	; (80009c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800098e:	490d      	ldr	r1, [pc, #52]	; (80009c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000990:	4a0d      	ldr	r2, [pc, #52]	; (80009c8 <LoopForever+0xe>)
  movs r3, #0
 8000992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000994:	e002      	b.n	800099c <LoopCopyDataInit>

08000996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800099a:	3304      	adds	r3, #4

0800099c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800099c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800099e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009a0:	d3f9      	bcc.n	8000996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009a2:	4a0a      	ldr	r2, [pc, #40]	; (80009cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80009a4:	4c0a      	ldr	r4, [pc, #40]	; (80009d0 <LoopForever+0x16>)
  movs r3, #0
 80009a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009a8:	e001      	b.n	80009ae <LoopFillZerobss>

080009aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009ac:	3204      	adds	r2, #4

080009ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80009b0:	d3fb      	bcc.n	80009aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80009b2:	f005 f8eb 	bl	8005b8c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80009b6:	f7ff fd8d 	bl	80004d4 <main>

080009ba <LoopForever>:

LoopForever:
    b LoopForever
 80009ba:	e7fe      	b.n	80009ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80009bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80009c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80009c4:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 80009c8:	08005ea0 	.word	0x08005ea0
  ldr r2, =_sbss
 80009cc:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 80009d0:	20001b38 	.word	0x20001b38

080009d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80009d4:	e7fe      	b.n	80009d4 <ADC1_IRQHandler>

080009d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80009d6:	b580      	push	{r7, lr}
 80009d8:	b082      	sub	sp, #8
 80009da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80009dc:	2300      	movs	r3, #0
 80009de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80009e0:	2003      	movs	r0, #3
 80009e2:	f000 f8de 	bl	8000ba2 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80009e6:	200f      	movs	r0, #15
 80009e8:	f7ff ff20 	bl	800082c <HAL_InitTick>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d002      	beq.n	80009f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80009f2:	2301      	movs	r3, #1
 80009f4:	71fb      	strb	r3, [r7, #7]
 80009f6:	e001      	b.n	80009fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80009f8:	f7ff fe86 	bl	8000708 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80009fc:	79fb      	ldrb	r3, [r7, #7]
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}
	...

08000a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a08:	b480      	push	{r7}
 8000a0a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000a0c:	4b06      	ldr	r3, [pc, #24]	; (8000a28 <HAL_IncTick+0x20>)
 8000a0e:	781b      	ldrb	r3, [r3, #0]
 8000a10:	461a      	mov	r2, r3
 8000a12:	4b06      	ldr	r3, [pc, #24]	; (8000a2c <HAL_IncTick+0x24>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	4413      	add	r3, r2
 8000a18:	4a04      	ldr	r2, [pc, #16]	; (8000a2c <HAL_IncTick+0x24>)
 8000a1a:	6013      	str	r3, [r2, #0]
}
 8000a1c:	bf00      	nop
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a24:	4770      	bx	lr
 8000a26:	bf00      	nop
 8000a28:	20000008 	.word	0x20000008
 8000a2c:	20000164 	.word	0x20000164

08000a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  return uwTick;
 8000a34:	4b03      	ldr	r3, [pc, #12]	; (8000a44 <HAL_GetTick+0x14>)
 8000a36:	681b      	ldr	r3, [r3, #0]
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a40:	4770      	bx	lr
 8000a42:	bf00      	nop
 8000a44:	20000164 	.word	0x20000164

08000a48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	b085      	sub	sp, #20
 8000a4c:	af00      	add	r7, sp, #0
 8000a4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	f003 0307 	and.w	r3, r3, #7
 8000a56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000a58:	4b0c      	ldr	r3, [pc, #48]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a5a:	68db      	ldr	r3, [r3, #12]
 8000a5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000a5e:	68ba      	ldr	r2, [r7, #8]
 8000a60:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000a64:	4013      	ands	r3, r2
 8000a66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000a68:	68fb      	ldr	r3, [r7, #12]
 8000a6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000a6c:	68bb      	ldr	r3, [r7, #8]
 8000a6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000a70:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000a74:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000a78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000a7a:	4a04      	ldr	r2, [pc, #16]	; (8000a8c <__NVIC_SetPriorityGrouping+0x44>)
 8000a7c:	68bb      	ldr	r3, [r7, #8]
 8000a7e:	60d3      	str	r3, [r2, #12]
}
 8000a80:	bf00      	nop
 8000a82:	3714      	adds	r7, #20
 8000a84:	46bd      	mov	sp, r7
 8000a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a8a:	4770      	bx	lr
 8000a8c:	e000ed00 	.word	0xe000ed00

08000a90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <__NVIC_GetPriorityGrouping+0x18>)
 8000a96:	68db      	ldr	r3, [r3, #12]
 8000a98:	0a1b      	lsrs	r3, r3, #8
 8000a9a:	f003 0307 	and.w	r3, r3, #7
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr
 8000aa8:	e000ed00 	.word	0xe000ed00

08000aac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000aac:	b480      	push	{r7}
 8000aae:	b083      	sub	sp, #12
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ab6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	db0b      	blt.n	8000ad6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	f003 021f 	and.w	r2, r3, #31
 8000ac4:	4907      	ldr	r1, [pc, #28]	; (8000ae4 <__NVIC_EnableIRQ+0x38>)
 8000ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000aca:	095b      	lsrs	r3, r3, #5
 8000acc:	2001      	movs	r0, #1
 8000ace:	fa00 f202 	lsl.w	r2, r0, r2
 8000ad2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr
 8000ae2:	bf00      	nop
 8000ae4:	e000e100 	.word	0xe000e100

08000ae8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000ae8:	b480      	push	{r7}
 8000aea:	b083      	sub	sp, #12
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	4603      	mov	r3, r0
 8000af0:	6039      	str	r1, [r7, #0]
 8000af2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000af4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000af8:	2b00      	cmp	r3, #0
 8000afa:	db0a      	blt.n	8000b12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000afc:	683b      	ldr	r3, [r7, #0]
 8000afe:	b2da      	uxtb	r2, r3
 8000b00:	490c      	ldr	r1, [pc, #48]	; (8000b34 <__NVIC_SetPriority+0x4c>)
 8000b02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b06:	0112      	lsls	r2, r2, #4
 8000b08:	b2d2      	uxtb	r2, r2
 8000b0a:	440b      	add	r3, r1
 8000b0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000b10:	e00a      	b.n	8000b28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	b2da      	uxtb	r2, r3
 8000b16:	4908      	ldr	r1, [pc, #32]	; (8000b38 <__NVIC_SetPriority+0x50>)
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	f003 030f 	and.w	r3, r3, #15
 8000b1e:	3b04      	subs	r3, #4
 8000b20:	0112      	lsls	r2, r2, #4
 8000b22:	b2d2      	uxtb	r2, r2
 8000b24:	440b      	add	r3, r1
 8000b26:	761a      	strb	r2, [r3, #24]
}
 8000b28:	bf00      	nop
 8000b2a:	370c      	adds	r7, #12
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b32:	4770      	bx	lr
 8000b34:	e000e100 	.word	0xe000e100
 8000b38:	e000ed00 	.word	0xe000ed00

08000b3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	b089      	sub	sp, #36	; 0x24
 8000b40:	af00      	add	r7, sp, #0
 8000b42:	60f8      	str	r0, [r7, #12]
 8000b44:	60b9      	str	r1, [r7, #8]
 8000b46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	f003 0307 	and.w	r3, r3, #7
 8000b4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000b50:	69fb      	ldr	r3, [r7, #28]
 8000b52:	f1c3 0307 	rsb	r3, r3, #7
 8000b56:	2b04      	cmp	r3, #4
 8000b58:	bf28      	it	cs
 8000b5a:	2304      	movcs	r3, #4
 8000b5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000b5e:	69fb      	ldr	r3, [r7, #28]
 8000b60:	3304      	adds	r3, #4
 8000b62:	2b06      	cmp	r3, #6
 8000b64:	d902      	bls.n	8000b6c <NVIC_EncodePriority+0x30>
 8000b66:	69fb      	ldr	r3, [r7, #28]
 8000b68:	3b03      	subs	r3, #3
 8000b6a:	e000      	b.n	8000b6e <NVIC_EncodePriority+0x32>
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000b74:	69bb      	ldr	r3, [r7, #24]
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43da      	mvns	r2, r3
 8000b7c:	68bb      	ldr	r3, [r7, #8]
 8000b7e:	401a      	ands	r2, r3
 8000b80:	697b      	ldr	r3, [r7, #20]
 8000b82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000b84:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b88:	697b      	ldr	r3, [r7, #20]
 8000b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8000b8e:	43d9      	mvns	r1, r3
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000b94:	4313      	orrs	r3, r2
         );
}
 8000b96:	4618      	mov	r0, r3
 8000b98:	3724      	adds	r7, #36	; 0x24
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr

08000ba2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ba2:	b580      	push	{r7, lr}
 8000ba4:	b082      	sub	sp, #8
 8000ba6:	af00      	add	r7, sp, #0
 8000ba8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f7ff ff4c 	bl	8000a48 <__NVIC_SetPriorityGrouping>
}
 8000bb0:	bf00      	nop
 8000bb2:	3708      	adds	r7, #8
 8000bb4:	46bd      	mov	sp, r7
 8000bb6:	bd80      	pop	{r7, pc}

08000bb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b086      	sub	sp, #24
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	4603      	mov	r3, r0
 8000bc0:	60b9      	str	r1, [r7, #8]
 8000bc2:	607a      	str	r2, [r7, #4]
 8000bc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000bca:	f7ff ff61 	bl	8000a90 <__NVIC_GetPriorityGrouping>
 8000bce:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000bd0:	687a      	ldr	r2, [r7, #4]
 8000bd2:	68b9      	ldr	r1, [r7, #8]
 8000bd4:	6978      	ldr	r0, [r7, #20]
 8000bd6:	f7ff ffb1 	bl	8000b3c <NVIC_EncodePriority>
 8000bda:	4602      	mov	r2, r0
 8000bdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000be0:	4611      	mov	r1, r2
 8000be2:	4618      	mov	r0, r3
 8000be4:	f7ff ff80 	bl	8000ae8 <__NVIC_SetPriority>
}
 8000be8:	bf00      	nop
 8000bea:	3718      	adds	r7, #24
 8000bec:	46bd      	mov	sp, r7
 8000bee:	bd80      	pop	{r7, pc}

08000bf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b082      	sub	sp, #8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000bfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f7ff ff54 	bl	8000aac <__NVIC_EnableIRQ>
}
 8000c04:	bf00      	nop
 8000c06:	3708      	adds	r7, #8
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bd80      	pop	{r7, pc}

08000c0c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b087      	sub	sp, #28
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
 8000c14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000c16:	2300      	movs	r3, #0
 8000c18:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c1a:	e148      	b.n	8000eae <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	2101      	movs	r1, #1
 8000c22:	697b      	ldr	r3, [r7, #20]
 8000c24:	fa01 f303 	lsl.w	r3, r1, r3
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	f000 813a 	beq.w	8000ea8 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000c34:	683b      	ldr	r3, [r7, #0]
 8000c36:	685b      	ldr	r3, [r3, #4]
 8000c38:	f003 0303 	and.w	r3, r3, #3
 8000c3c:	2b01      	cmp	r3, #1
 8000c3e:	d005      	beq.n	8000c4c <HAL_GPIO_Init+0x40>
 8000c40:	683b      	ldr	r3, [r7, #0]
 8000c42:	685b      	ldr	r3, [r3, #4]
 8000c44:	f003 0303 	and.w	r3, r3, #3
 8000c48:	2b02      	cmp	r3, #2
 8000c4a:	d130      	bne.n	8000cae <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	689b      	ldr	r3, [r3, #8]
 8000c50:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000c52:	697b      	ldr	r3, [r7, #20]
 8000c54:	005b      	lsls	r3, r3, #1
 8000c56:	2203      	movs	r2, #3
 8000c58:	fa02 f303 	lsl.w	r3, r2, r3
 8000c5c:	43db      	mvns	r3, r3
 8000c5e:	693a      	ldr	r2, [r7, #16]
 8000c60:	4013      	ands	r3, r2
 8000c62:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000c64:	683b      	ldr	r3, [r7, #0]
 8000c66:	68da      	ldr	r2, [r3, #12]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	005b      	lsls	r3, r3, #1
 8000c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000c70:	693a      	ldr	r2, [r7, #16]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	693a      	ldr	r2, [r7, #16]
 8000c7a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	685b      	ldr	r3, [r3, #4]
 8000c80:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000c82:	2201      	movs	r2, #1
 8000c84:	697b      	ldr	r3, [r7, #20]
 8000c86:	fa02 f303 	lsl.w	r3, r2, r3
 8000c8a:	43db      	mvns	r3, r3
 8000c8c:	693a      	ldr	r2, [r7, #16]
 8000c8e:	4013      	ands	r3, r2
 8000c90:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c92:	683b      	ldr	r3, [r7, #0]
 8000c94:	685b      	ldr	r3, [r3, #4]
 8000c96:	091b      	lsrs	r3, r3, #4
 8000c98:	f003 0201 	and.w	r2, r3, #1
 8000c9c:	697b      	ldr	r3, [r7, #20]
 8000c9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4313      	orrs	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	693a      	ldr	r2, [r7, #16]
 8000cac:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	685b      	ldr	r3, [r3, #4]
 8000cb2:	f003 0303 	and.w	r3, r3, #3
 8000cb6:	2b03      	cmp	r3, #3
 8000cb8:	d017      	beq.n	8000cea <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000cba:	687b      	ldr	r3, [r7, #4]
 8000cbc:	68db      	ldr	r3, [r3, #12]
 8000cbe:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000cc0:	697b      	ldr	r3, [r7, #20]
 8000cc2:	005b      	lsls	r3, r3, #1
 8000cc4:	2203      	movs	r2, #3
 8000cc6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	689a      	ldr	r2, [r3, #8]
 8000cd6:	697b      	ldr	r3, [r7, #20]
 8000cd8:	005b      	lsls	r3, r3, #1
 8000cda:	fa02 f303 	lsl.w	r3, r2, r3
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	693a      	ldr	r2, [r7, #16]
 8000ce8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000cea:	683b      	ldr	r3, [r7, #0]
 8000cec:	685b      	ldr	r3, [r3, #4]
 8000cee:	f003 0303 	and.w	r3, r3, #3
 8000cf2:	2b02      	cmp	r3, #2
 8000cf4:	d123      	bne.n	8000d3e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000cf6:	697b      	ldr	r3, [r7, #20]
 8000cf8:	08da      	lsrs	r2, r3, #3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	3208      	adds	r2, #8
 8000cfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000d02:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	f003 0307 	and.w	r3, r3, #7
 8000d0a:	009b      	lsls	r3, r3, #2
 8000d0c:	220f      	movs	r2, #15
 8000d0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d12:	43db      	mvns	r3, r3
 8000d14:	693a      	ldr	r2, [r7, #16]
 8000d16:	4013      	ands	r3, r2
 8000d18:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000d1a:	683b      	ldr	r3, [r7, #0]
 8000d1c:	691a      	ldr	r2, [r3, #16]
 8000d1e:	697b      	ldr	r3, [r7, #20]
 8000d20:	f003 0307 	and.w	r3, r3, #7
 8000d24:	009b      	lsls	r3, r3, #2
 8000d26:	fa02 f303 	lsl.w	r3, r2, r3
 8000d2a:	693a      	ldr	r2, [r7, #16]
 8000d2c:	4313      	orrs	r3, r2
 8000d2e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000d30:	697b      	ldr	r3, [r7, #20]
 8000d32:	08da      	lsrs	r2, r3, #3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3208      	adds	r2, #8
 8000d38:	6939      	ldr	r1, [r7, #16]
 8000d3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000d44:	697b      	ldr	r3, [r7, #20]
 8000d46:	005b      	lsls	r3, r3, #1
 8000d48:	2203      	movs	r2, #3
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43db      	mvns	r3, r3
 8000d50:	693a      	ldr	r2, [r7, #16]
 8000d52:	4013      	ands	r3, r2
 8000d54:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000d56:	683b      	ldr	r3, [r7, #0]
 8000d58:	685b      	ldr	r3, [r3, #4]
 8000d5a:	f003 0203 	and.w	r2, r3, #3
 8000d5e:	697b      	ldr	r3, [r7, #20]
 8000d60:	005b      	lsls	r3, r3, #1
 8000d62:	fa02 f303 	lsl.w	r3, r2, r3
 8000d66:	693a      	ldr	r2, [r7, #16]
 8000d68:	4313      	orrs	r3, r2
 8000d6a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	693a      	ldr	r2, [r7, #16]
 8000d70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000d72:	683b      	ldr	r3, [r7, #0]
 8000d74:	685b      	ldr	r3, [r3, #4]
 8000d76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	f000 8094 	beq.w	8000ea8 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d80:	4b52      	ldr	r3, [pc, #328]	; (8000ecc <HAL_GPIO_Init+0x2c0>)
 8000d82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d84:	4a51      	ldr	r2, [pc, #324]	; (8000ecc <HAL_GPIO_Init+0x2c0>)
 8000d86:	f043 0301 	orr.w	r3, r3, #1
 8000d8a:	6613      	str	r3, [r2, #96]	; 0x60
 8000d8c:	4b4f      	ldr	r3, [pc, #316]	; (8000ecc <HAL_GPIO_Init+0x2c0>)
 8000d8e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d90:	f003 0301 	and.w	r3, r3, #1
 8000d94:	60bb      	str	r3, [r7, #8]
 8000d96:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000d98:	4a4d      	ldr	r2, [pc, #308]	; (8000ed0 <HAL_GPIO_Init+0x2c4>)
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	089b      	lsrs	r3, r3, #2
 8000d9e:	3302      	adds	r3, #2
 8000da0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000da4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000da6:	697b      	ldr	r3, [r7, #20]
 8000da8:	f003 0303 	and.w	r3, r3, #3
 8000dac:	009b      	lsls	r3, r3, #2
 8000dae:	220f      	movs	r2, #15
 8000db0:	fa02 f303 	lsl.w	r3, r2, r3
 8000db4:	43db      	mvns	r3, r3
 8000db6:	693a      	ldr	r2, [r7, #16]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000dc2:	d00d      	beq.n	8000de0 <HAL_GPIO_Init+0x1d4>
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	4a43      	ldr	r2, [pc, #268]	; (8000ed4 <HAL_GPIO_Init+0x2c8>)
 8000dc8:	4293      	cmp	r3, r2
 8000dca:	d007      	beq.n	8000ddc <HAL_GPIO_Init+0x1d0>
 8000dcc:	687b      	ldr	r3, [r7, #4]
 8000dce:	4a42      	ldr	r2, [pc, #264]	; (8000ed8 <HAL_GPIO_Init+0x2cc>)
 8000dd0:	4293      	cmp	r3, r2
 8000dd2:	d101      	bne.n	8000dd8 <HAL_GPIO_Init+0x1cc>
 8000dd4:	2302      	movs	r3, #2
 8000dd6:	e004      	b.n	8000de2 <HAL_GPIO_Init+0x1d6>
 8000dd8:	2307      	movs	r3, #7
 8000dda:	e002      	b.n	8000de2 <HAL_GPIO_Init+0x1d6>
 8000ddc:	2301      	movs	r3, #1
 8000dde:	e000      	b.n	8000de2 <HAL_GPIO_Init+0x1d6>
 8000de0:	2300      	movs	r3, #0
 8000de2:	697a      	ldr	r2, [r7, #20]
 8000de4:	f002 0203 	and.w	r2, r2, #3
 8000de8:	0092      	lsls	r2, r2, #2
 8000dea:	4093      	lsls	r3, r2
 8000dec:	693a      	ldr	r2, [r7, #16]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000df2:	4937      	ldr	r1, [pc, #220]	; (8000ed0 <HAL_GPIO_Init+0x2c4>)
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	089b      	lsrs	r3, r3, #2
 8000df8:	3302      	adds	r3, #2
 8000dfa:	693a      	ldr	r2, [r7, #16]
 8000dfc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000e00:	4b36      	ldr	r3, [pc, #216]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e02:	689b      	ldr	r3, [r3, #8]
 8000e04:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	43db      	mvns	r3, r3
 8000e0a:	693a      	ldr	r2, [r7, #16]
 8000e0c:	4013      	ands	r3, r2
 8000e0e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000e10:	683b      	ldr	r3, [r7, #0]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000e18:	2b00      	cmp	r3, #0
 8000e1a:	d003      	beq.n	8000e24 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000e1c:	693a      	ldr	r2, [r7, #16]
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	4313      	orrs	r3, r2
 8000e22:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000e24:	4a2d      	ldr	r2, [pc, #180]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e26:	693b      	ldr	r3, [r7, #16]
 8000e28:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000e2a:	4b2c      	ldr	r3, [pc, #176]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e2c:	68db      	ldr	r3, [r3, #12]
 8000e2e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	43db      	mvns	r3, r3
 8000e34:	693a      	ldr	r2, [r7, #16]
 8000e36:	4013      	ands	r3, r2
 8000e38:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	685b      	ldr	r3, [r3, #4]
 8000e3e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d003      	beq.n	8000e4e <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000e46:	693a      	ldr	r2, [r7, #16]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4313      	orrs	r3, r2
 8000e4c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000e4e:	4a23      	ldr	r2, [pc, #140]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e50:	693b      	ldr	r3, [r7, #16]
 8000e52:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000e54:	4b21      	ldr	r3, [pc, #132]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e56:	685b      	ldr	r3, [r3, #4]
 8000e58:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e5a:	68fb      	ldr	r3, [r7, #12]
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	693a      	ldr	r2, [r7, #16]
 8000e60:	4013      	ands	r3, r2
 8000e62:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	685b      	ldr	r3, [r3, #4]
 8000e68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000e6c:	2b00      	cmp	r3, #0
 8000e6e:	d003      	beq.n	8000e78 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8000e70:	693a      	ldr	r2, [r7, #16]
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	4313      	orrs	r3, r2
 8000e76:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000e78:	4a18      	ldr	r2, [pc, #96]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e7a:	693b      	ldr	r3, [r7, #16]
 8000e7c:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8000e7e:	4b17      	ldr	r3, [pc, #92]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000e80:	681b      	ldr	r3, [r3, #0]
 8000e82:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	43db      	mvns	r3, r3
 8000e88:	693a      	ldr	r2, [r7, #16]
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	685b      	ldr	r3, [r3, #4]
 8000e92:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d003      	beq.n	8000ea2 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8000e9a:	693a      	ldr	r2, [r7, #16]
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000ea2:	4a0e      	ldr	r2, [pc, #56]	; (8000edc <HAL_GPIO_Init+0x2d0>)
 8000ea4:	693b      	ldr	r3, [r7, #16]
 8000ea6:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000ea8:	697b      	ldr	r3, [r7, #20]
 8000eaa:	3301      	adds	r3, #1
 8000eac:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000eae:	683b      	ldr	r3, [r7, #0]
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	697b      	ldr	r3, [r7, #20]
 8000eb4:	fa22 f303 	lsr.w	r3, r2, r3
 8000eb8:	2b00      	cmp	r3, #0
 8000eba:	f47f aeaf 	bne.w	8000c1c <HAL_GPIO_Init+0x10>
  }
}
 8000ebe:	bf00      	nop
 8000ec0:	bf00      	nop
 8000ec2:	371c      	adds	r7, #28
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr
 8000ecc:	40021000 	.word	0x40021000
 8000ed0:	40010000 	.word	0x40010000
 8000ed4:	48000400 	.word	0x48000400
 8000ed8:	48000800 	.word	0x48000800
 8000edc:	40010400 	.word	0x40010400

08000ee0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	b083      	sub	sp, #12
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
 8000ee8:	460b      	mov	r3, r1
 8000eea:	807b      	strh	r3, [r7, #2]
 8000eec:	4613      	mov	r3, r2
 8000eee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000ef0:	787b      	ldrb	r3, [r7, #1]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d003      	beq.n	8000efe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ef6:	887a      	ldrh	r2, [r7, #2]
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000efc:	e002      	b.n	8000f04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000efe:	887a      	ldrh	r2, [r7, #2]
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f04:	bf00      	nop
 8000f06:	370c      	adds	r7, #12
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8000f14:	4b05      	ldr	r3, [pc, #20]	; (8000f2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	4a04      	ldr	r2, [pc, #16]	; (8000f2c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8000f1a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000f1e:	6013      	str	r3, [r2, #0]
}
 8000f20:	bf00      	nop
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr
 8000f2a:	bf00      	nop
 8000f2c:	40007000 	.word	0x40007000

08000f30 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000f30:	b480      	push	{r7}
 8000f32:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000f34:	4b04      	ldr	r3, [pc, #16]	; (8000f48 <HAL_PWREx_GetVoltageRange+0x18>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000f3c:	4618      	mov	r0, r3
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop
 8000f48:	40007000 	.word	0x40007000

08000f4c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000f4c:	b480      	push	{r7}
 8000f4e:	b085      	sub	sp, #20
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f5a:	d130      	bne.n	8000fbe <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000f5c:	4b23      	ldr	r3, [pc, #140]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000f64:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000f68:	d038      	beq.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f6a:	4b20      	ldr	r3, [pc, #128]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000f72:	4a1e      	ldr	r2, [pc, #120]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f74:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000f78:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000f7a:	4b1d      	ldr	r3, [pc, #116]	; (8000ff0 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	2232      	movs	r2, #50	; 0x32
 8000f80:	fb02 f303 	mul.w	r3, r2, r3
 8000f84:	4a1b      	ldr	r2, [pc, #108]	; (8000ff4 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000f86:	fba2 2303 	umull	r2, r3, r2, r3
 8000f8a:	0c9b      	lsrs	r3, r3, #18
 8000f8c:	3301      	adds	r3, #1
 8000f8e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f90:	e002      	b.n	8000f98 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000f92:	68fb      	ldr	r3, [r7, #12]
 8000f94:	3b01      	subs	r3, #1
 8000f96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000f98:	4b14      	ldr	r3, [pc, #80]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000f9a:	695b      	ldr	r3, [r3, #20]
 8000f9c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fa0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fa4:	d102      	bne.n	8000fac <HAL_PWREx_ControlVoltageScaling+0x60>
 8000fa6:	68fb      	ldr	r3, [r7, #12]
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d1f2      	bne.n	8000f92 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000fac:	4b0f      	ldr	r3, [pc, #60]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fae:	695b      	ldr	r3, [r3, #20]
 8000fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fb8:	d110      	bne.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000fba:	2303      	movs	r3, #3
 8000fbc:	e00f      	b.n	8000fde <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000fbe:	4b0b      	ldr	r3, [pc, #44]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fca:	d007      	beq.n	8000fdc <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000fcc:	4b07      	ldr	r3, [pc, #28]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000fd4:	4a05      	ldr	r2, [pc, #20]	; (8000fec <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000fd6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fda:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000fdc:	2300      	movs	r3, #0
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3714      	adds	r7, #20
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	40007000 	.word	0x40007000
 8000ff0:	20000000 	.word	0x20000000
 8000ff4:	431bde83 	.word	0x431bde83

08000ff8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ff8:	b580      	push	{r7, lr}
 8000ffa:	b088      	sub	sp, #32
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	2b00      	cmp	r3, #0
 8001004:	d102      	bne.n	800100c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	f000 bc02 	b.w	8001810 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800100c:	4b96      	ldr	r3, [pc, #600]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800100e:	689b      	ldr	r3, [r3, #8]
 8001010:	f003 030c 	and.w	r3, r3, #12
 8001014:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001016:	4b94      	ldr	r3, [pc, #592]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001018:	68db      	ldr	r3, [r3, #12]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	681b      	ldr	r3, [r3, #0]
 8001024:	f003 0310 	and.w	r3, r3, #16
 8001028:	2b00      	cmp	r3, #0
 800102a:	f000 80e4 	beq.w	80011f6 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d007      	beq.n	8001044 <HAL_RCC_OscConfig+0x4c>
 8001034:	69bb      	ldr	r3, [r7, #24]
 8001036:	2b0c      	cmp	r3, #12
 8001038:	f040 808b 	bne.w	8001152 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800103c:	697b      	ldr	r3, [r7, #20]
 800103e:	2b01      	cmp	r3, #1
 8001040:	f040 8087 	bne.w	8001152 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001044:	4b88      	ldr	r3, [pc, #544]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	f003 0302 	and.w	r3, r3, #2
 800104c:	2b00      	cmp	r3, #0
 800104e:	d005      	beq.n	800105c <HAL_RCC_OscConfig+0x64>
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	699b      	ldr	r3, [r3, #24]
 8001054:	2b00      	cmp	r3, #0
 8001056:	d101      	bne.n	800105c <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001058:	2301      	movs	r3, #1
 800105a:	e3d9      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a1a      	ldr	r2, [r3, #32]
 8001060:	4b81      	ldr	r3, [pc, #516]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	f003 0308 	and.w	r3, r3, #8
 8001068:	2b00      	cmp	r3, #0
 800106a:	d004      	beq.n	8001076 <HAL_RCC_OscConfig+0x7e>
 800106c:	4b7e      	ldr	r3, [pc, #504]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001074:	e005      	b.n	8001082 <HAL_RCC_OscConfig+0x8a>
 8001076:	4b7c      	ldr	r3, [pc, #496]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001078:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800107c:	091b      	lsrs	r3, r3, #4
 800107e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001082:	4293      	cmp	r3, r2
 8001084:	d223      	bcs.n	80010ce <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6a1b      	ldr	r3, [r3, #32]
 800108a:	4618      	mov	r0, r3
 800108c:	f000 fdbe 	bl	8001c0c <RCC_SetFlashLatencyFromMSIRange>
 8001090:	4603      	mov	r3, r0
 8001092:	2b00      	cmp	r3, #0
 8001094:	d001      	beq.n	800109a <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001096:	2301      	movs	r3, #1
 8001098:	e3ba      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800109a:	4b73      	ldr	r3, [pc, #460]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	4a72      	ldr	r2, [pc, #456]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010a0:	f043 0308 	orr.w	r3, r3, #8
 80010a4:	6013      	str	r3, [r2, #0]
 80010a6:	4b70      	ldr	r3, [pc, #448]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010a8:	681b      	ldr	r3, [r3, #0]
 80010aa:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6a1b      	ldr	r3, [r3, #32]
 80010b2:	496d      	ldr	r1, [pc, #436]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010b4:	4313      	orrs	r3, r2
 80010b6:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010b8:	4b6b      	ldr	r3, [pc, #428]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	69db      	ldr	r3, [r3, #28]
 80010c4:	021b      	lsls	r3, r3, #8
 80010c6:	4968      	ldr	r1, [pc, #416]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010c8:	4313      	orrs	r3, r2
 80010ca:	604b      	str	r3, [r1, #4]
 80010cc:	e025      	b.n	800111a <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010ce:	4b66      	ldr	r3, [pc, #408]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	4a65      	ldr	r2, [pc, #404]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010d4:	f043 0308 	orr.w	r3, r3, #8
 80010d8:	6013      	str	r3, [r2, #0]
 80010da:	4b63      	ldr	r3, [pc, #396]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6a1b      	ldr	r3, [r3, #32]
 80010e6:	4960      	ldr	r1, [pc, #384]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010e8:	4313      	orrs	r3, r2
 80010ea:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80010ec:	4b5e      	ldr	r3, [pc, #376]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	69db      	ldr	r3, [r3, #28]
 80010f8:	021b      	lsls	r3, r3, #8
 80010fa:	495b      	ldr	r1, [pc, #364]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80010fc:	4313      	orrs	r3, r2
 80010fe:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	6a1b      	ldr	r3, [r3, #32]
 800110a:	4618      	mov	r0, r3
 800110c:	f000 fd7e 	bl	8001c0c <RCC_SetFlashLatencyFromMSIRange>
 8001110:	4603      	mov	r3, r0
 8001112:	2b00      	cmp	r3, #0
 8001114:	d001      	beq.n	800111a <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001116:	2301      	movs	r3, #1
 8001118:	e37a      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800111a:	f000 fc81 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 800111e:	4602      	mov	r2, r0
 8001120:	4b51      	ldr	r3, [pc, #324]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001122:	689b      	ldr	r3, [r3, #8]
 8001124:	091b      	lsrs	r3, r3, #4
 8001126:	f003 030f 	and.w	r3, r3, #15
 800112a:	4950      	ldr	r1, [pc, #320]	; (800126c <HAL_RCC_OscConfig+0x274>)
 800112c:	5ccb      	ldrb	r3, [r1, r3]
 800112e:	f003 031f 	and.w	r3, r3, #31
 8001132:	fa22 f303 	lsr.w	r3, r2, r3
 8001136:	4a4e      	ldr	r2, [pc, #312]	; (8001270 <HAL_RCC_OscConfig+0x278>)
 8001138:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800113a:	4b4e      	ldr	r3, [pc, #312]	; (8001274 <HAL_RCC_OscConfig+0x27c>)
 800113c:	681b      	ldr	r3, [r3, #0]
 800113e:	4618      	mov	r0, r3
 8001140:	f7ff fb74 	bl	800082c <HAL_InitTick>
 8001144:	4603      	mov	r3, r0
 8001146:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001148:	7bfb      	ldrb	r3, [r7, #15]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d052      	beq.n	80011f4 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800114e:	7bfb      	ldrb	r3, [r7, #15]
 8001150:	e35e      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	699b      	ldr	r3, [r3, #24]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d032      	beq.n	80011c0 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 800115a:	4b43      	ldr	r3, [pc, #268]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800115c:	681b      	ldr	r3, [r3, #0]
 800115e:	4a42      	ldr	r2, [pc, #264]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001160:	f043 0301 	orr.w	r3, r3, #1
 8001164:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001166:	f7ff fc63 	bl	8000a30 <HAL_GetTick>
 800116a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800116c:	e008      	b.n	8001180 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800116e:	f7ff fc5f 	bl	8000a30 <HAL_GetTick>
 8001172:	4602      	mov	r2, r0
 8001174:	693b      	ldr	r3, [r7, #16]
 8001176:	1ad3      	subs	r3, r2, r3
 8001178:	2b02      	cmp	r3, #2
 800117a:	d901      	bls.n	8001180 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 800117c:	2303      	movs	r3, #3
 800117e:	e347      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001180:	4b39      	ldr	r3, [pc, #228]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f003 0302 	and.w	r3, r3, #2
 8001188:	2b00      	cmp	r3, #0
 800118a:	d0f0      	beq.n	800116e <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800118c:	4b36      	ldr	r3, [pc, #216]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	4a35      	ldr	r2, [pc, #212]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001192:	f043 0308 	orr.w	r3, r3, #8
 8001196:	6013      	str	r3, [r2, #0]
 8001198:	4b33      	ldr	r3, [pc, #204]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	6a1b      	ldr	r3, [r3, #32]
 80011a4:	4930      	ldr	r1, [pc, #192]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011a6:	4313      	orrs	r3, r2
 80011a8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011aa:	4b2f      	ldr	r3, [pc, #188]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011ac:	685b      	ldr	r3, [r3, #4]
 80011ae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	69db      	ldr	r3, [r3, #28]
 80011b6:	021b      	lsls	r3, r3, #8
 80011b8:	492b      	ldr	r1, [pc, #172]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011ba:	4313      	orrs	r3, r2
 80011bc:	604b      	str	r3, [r1, #4]
 80011be:	e01a      	b.n	80011f6 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011c0:	4b29      	ldr	r3, [pc, #164]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a28      	ldr	r2, [pc, #160]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011c6:	f023 0301 	bic.w	r3, r3, #1
 80011ca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80011cc:	f7ff fc30 	bl	8000a30 <HAL_GetTick>
 80011d0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011d2:	e008      	b.n	80011e6 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011d4:	f7ff fc2c 	bl	8000a30 <HAL_GetTick>
 80011d8:	4602      	mov	r2, r0
 80011da:	693b      	ldr	r3, [r7, #16]
 80011dc:	1ad3      	subs	r3, r2, r3
 80011de:	2b02      	cmp	r3, #2
 80011e0:	d901      	bls.n	80011e6 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80011e2:	2303      	movs	r3, #3
 80011e4:	e314      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80011e6:	4b20      	ldr	r3, [pc, #128]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	f003 0302 	and.w	r3, r3, #2
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d1f0      	bne.n	80011d4 <HAL_RCC_OscConfig+0x1dc>
 80011f2:	e000      	b.n	80011f6 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011f4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d073      	beq.n	80012ea <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001202:	69bb      	ldr	r3, [r7, #24]
 8001204:	2b08      	cmp	r3, #8
 8001206:	d005      	beq.n	8001214 <HAL_RCC_OscConfig+0x21c>
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2b0c      	cmp	r3, #12
 800120c:	d10e      	bne.n	800122c <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800120e:	697b      	ldr	r3, [r7, #20]
 8001210:	2b03      	cmp	r3, #3
 8001212:	d10b      	bne.n	800122c <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001214:	4b14      	ldr	r3, [pc, #80]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800121c:	2b00      	cmp	r3, #0
 800121e:	d063      	beq.n	80012e8 <HAL_RCC_OscConfig+0x2f0>
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	685b      	ldr	r3, [r3, #4]
 8001224:	2b00      	cmp	r3, #0
 8001226:	d15f      	bne.n	80012e8 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001228:	2301      	movs	r3, #1
 800122a:	e2f1      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001234:	d106      	bne.n	8001244 <HAL_RCC_OscConfig+0x24c>
 8001236:	4b0c      	ldr	r3, [pc, #48]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001238:	681b      	ldr	r3, [r3, #0]
 800123a:	4a0b      	ldr	r2, [pc, #44]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800123c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001240:	6013      	str	r3, [r2, #0]
 8001242:	e025      	b.n	8001290 <HAL_RCC_OscConfig+0x298>
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	685b      	ldr	r3, [r3, #4]
 8001248:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800124c:	d114      	bne.n	8001278 <HAL_RCC_OscConfig+0x280>
 800124e:	4b06      	ldr	r3, [pc, #24]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	4a05      	ldr	r2, [pc, #20]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001254:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001258:	6013      	str	r3, [r2, #0]
 800125a:	4b03      	ldr	r3, [pc, #12]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	4a02      	ldr	r2, [pc, #8]	; (8001268 <HAL_RCC_OscConfig+0x270>)
 8001260:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001264:	6013      	str	r3, [r2, #0]
 8001266:	e013      	b.n	8001290 <HAL_RCC_OscConfig+0x298>
 8001268:	40021000 	.word	0x40021000
 800126c:	08005de8 	.word	0x08005de8
 8001270:	20000000 	.word	0x20000000
 8001274:	20000004 	.word	0x20000004
 8001278:	4ba0      	ldr	r3, [pc, #640]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800127a:	681b      	ldr	r3, [r3, #0]
 800127c:	4a9f      	ldr	r2, [pc, #636]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800127e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001282:	6013      	str	r3, [r2, #0]
 8001284:	4b9d      	ldr	r3, [pc, #628]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a9c      	ldr	r2, [pc, #624]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800128a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800128e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	685b      	ldr	r3, [r3, #4]
 8001294:	2b00      	cmp	r3, #0
 8001296:	d013      	beq.n	80012c0 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001298:	f7ff fbca 	bl	8000a30 <HAL_GetTick>
 800129c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800129e:	e008      	b.n	80012b2 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012a0:	f7ff fbc6 	bl	8000a30 <HAL_GetTick>
 80012a4:	4602      	mov	r2, r0
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	1ad3      	subs	r3, r2, r3
 80012aa:	2b64      	cmp	r3, #100	; 0x64
 80012ac:	d901      	bls.n	80012b2 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80012ae:	2303      	movs	r3, #3
 80012b0:	e2ae      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80012b2:	4b92      	ldr	r3, [pc, #584]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d0f0      	beq.n	80012a0 <HAL_RCC_OscConfig+0x2a8>
 80012be:	e014      	b.n	80012ea <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80012c0:	f7ff fbb6 	bl	8000a30 <HAL_GetTick>
 80012c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012c6:	e008      	b.n	80012da <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80012c8:	f7ff fbb2 	bl	8000a30 <HAL_GetTick>
 80012cc:	4602      	mov	r2, r0
 80012ce:	693b      	ldr	r3, [r7, #16]
 80012d0:	1ad3      	subs	r3, r2, r3
 80012d2:	2b64      	cmp	r3, #100	; 0x64
 80012d4:	d901      	bls.n	80012da <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80012d6:	2303      	movs	r3, #3
 80012d8:	e29a      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80012da:	4b88      	ldr	r3, [pc, #544]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d1f0      	bne.n	80012c8 <HAL_RCC_OscConfig+0x2d0>
 80012e6:	e000      	b.n	80012ea <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80012e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	f003 0302 	and.w	r3, r3, #2
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d060      	beq.n	80013b8 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	2b04      	cmp	r3, #4
 80012fa:	d005      	beq.n	8001308 <HAL_RCC_OscConfig+0x310>
 80012fc:	69bb      	ldr	r3, [r7, #24]
 80012fe:	2b0c      	cmp	r3, #12
 8001300:	d119      	bne.n	8001336 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001302:	697b      	ldr	r3, [r7, #20]
 8001304:	2b02      	cmp	r3, #2
 8001306:	d116      	bne.n	8001336 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001308:	4b7c      	ldr	r3, [pc, #496]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001310:	2b00      	cmp	r3, #0
 8001312:	d005      	beq.n	8001320 <HAL_RCC_OscConfig+0x328>
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	68db      	ldr	r3, [r3, #12]
 8001318:	2b00      	cmp	r3, #0
 800131a:	d101      	bne.n	8001320 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 800131c:	2301      	movs	r3, #1
 800131e:	e277      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001320:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001322:	685b      	ldr	r3, [r3, #4]
 8001324:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	691b      	ldr	r3, [r3, #16]
 800132c:	061b      	lsls	r3, r3, #24
 800132e:	4973      	ldr	r1, [pc, #460]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001330:	4313      	orrs	r3, r2
 8001332:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001334:	e040      	b.n	80013b8 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	68db      	ldr	r3, [r3, #12]
 800133a:	2b00      	cmp	r3, #0
 800133c:	d023      	beq.n	8001386 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800133e:	4b6f      	ldr	r3, [pc, #444]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a6e      	ldr	r2, [pc, #440]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001344:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001348:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800134a:	f7ff fb71 	bl	8000a30 <HAL_GetTick>
 800134e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001350:	e008      	b.n	8001364 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001352:	f7ff fb6d 	bl	8000a30 <HAL_GetTick>
 8001356:	4602      	mov	r2, r0
 8001358:	693b      	ldr	r3, [r7, #16]
 800135a:	1ad3      	subs	r3, r2, r3
 800135c:	2b02      	cmp	r3, #2
 800135e:	d901      	bls.n	8001364 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001360:	2303      	movs	r3, #3
 8001362:	e255      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001364:	4b65      	ldr	r3, [pc, #404]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800136c:	2b00      	cmp	r3, #0
 800136e:	d0f0      	beq.n	8001352 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001370:	4b62      	ldr	r3, [pc, #392]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	691b      	ldr	r3, [r3, #16]
 800137c:	061b      	lsls	r3, r3, #24
 800137e:	495f      	ldr	r1, [pc, #380]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001380:	4313      	orrs	r3, r2
 8001382:	604b      	str	r3, [r1, #4]
 8001384:	e018      	b.n	80013b8 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001386:	4b5d      	ldr	r3, [pc, #372]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a5c      	ldr	r2, [pc, #368]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800138c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001390:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001392:	f7ff fb4d 	bl	8000a30 <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800139a:	f7ff fb49 	bl	8000a30 <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e231      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80013ac:	4b53      	ldr	r3, [pc, #332]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d1f0      	bne.n	800139a <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	f003 0308 	and.w	r3, r3, #8
 80013c0:	2b00      	cmp	r3, #0
 80013c2:	d03c      	beq.n	800143e <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	695b      	ldr	r3, [r3, #20]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d01c      	beq.n	8001406 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013cc:	4b4b      	ldr	r3, [pc, #300]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80013ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013d2:	4a4a      	ldr	r2, [pc, #296]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80013d4:	f043 0301 	orr.w	r3, r3, #1
 80013d8:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80013dc:	f7ff fb28 	bl	8000a30 <HAL_GetTick>
 80013e0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013e2:	e008      	b.n	80013f6 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80013e4:	f7ff fb24 	bl	8000a30 <HAL_GetTick>
 80013e8:	4602      	mov	r2, r0
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	2b02      	cmp	r3, #2
 80013f0:	d901      	bls.n	80013f6 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80013f2:	2303      	movs	r3, #3
 80013f4:	e20c      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80013f8:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80013fc:	f003 0302 	and.w	r3, r3, #2
 8001400:	2b00      	cmp	r3, #0
 8001402:	d0ef      	beq.n	80013e4 <HAL_RCC_OscConfig+0x3ec>
 8001404:	e01b      	b.n	800143e <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001406:	4b3d      	ldr	r3, [pc, #244]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001408:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800140c:	4a3b      	ldr	r2, [pc, #236]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800140e:	f023 0301 	bic.w	r3, r3, #1
 8001412:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001416:	f7ff fb0b 	bl	8000a30 <HAL_GetTick>
 800141a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800141c:	e008      	b.n	8001430 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800141e:	f7ff fb07 	bl	8000a30 <HAL_GetTick>
 8001422:	4602      	mov	r2, r0
 8001424:	693b      	ldr	r3, [r7, #16]
 8001426:	1ad3      	subs	r3, r2, r3
 8001428:	2b02      	cmp	r3, #2
 800142a:	d901      	bls.n	8001430 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 800142c:	2303      	movs	r3, #3
 800142e:	e1ef      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001430:	4b32      	ldr	r3, [pc, #200]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001432:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001436:	f003 0302 	and.w	r3, r3, #2
 800143a:	2b00      	cmp	r3, #0
 800143c:	d1ef      	bne.n	800141e <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	f003 0304 	and.w	r3, r3, #4
 8001446:	2b00      	cmp	r3, #0
 8001448:	f000 80a6 	beq.w	8001598 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 800144c:	2300      	movs	r3, #0
 800144e:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001450:	4b2a      	ldr	r3, [pc, #168]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001454:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001458:	2b00      	cmp	r3, #0
 800145a:	d10d      	bne.n	8001478 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800145c:	4b27      	ldr	r3, [pc, #156]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800145e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001460:	4a26      	ldr	r2, [pc, #152]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 8001462:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001466:	6593      	str	r3, [r2, #88]	; 0x58
 8001468:	4b24      	ldr	r3, [pc, #144]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 800146a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800146c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001470:	60bb      	str	r3, [r7, #8]
 8001472:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001474:	2301      	movs	r3, #1
 8001476:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001478:	4b21      	ldr	r3, [pc, #132]	; (8001500 <HAL_RCC_OscConfig+0x508>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001480:	2b00      	cmp	r3, #0
 8001482:	d118      	bne.n	80014b6 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001484:	4b1e      	ldr	r3, [pc, #120]	; (8001500 <HAL_RCC_OscConfig+0x508>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	4a1d      	ldr	r2, [pc, #116]	; (8001500 <HAL_RCC_OscConfig+0x508>)
 800148a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800148e:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001490:	f7ff face 	bl	8000a30 <HAL_GetTick>
 8001494:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001496:	e008      	b.n	80014aa <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001498:	f7ff faca 	bl	8000a30 <HAL_GetTick>
 800149c:	4602      	mov	r2, r0
 800149e:	693b      	ldr	r3, [r7, #16]
 80014a0:	1ad3      	subs	r3, r2, r3
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d901      	bls.n	80014aa <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80014a6:	2303      	movs	r3, #3
 80014a8:	e1b2      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80014aa:	4b15      	ldr	r3, [pc, #84]	; (8001500 <HAL_RCC_OscConfig+0x508>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f0      	beq.n	8001498 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80014b6:	687b      	ldr	r3, [r7, #4]
 80014b8:	689b      	ldr	r3, [r3, #8]
 80014ba:	2b01      	cmp	r3, #1
 80014bc:	d108      	bne.n	80014d0 <HAL_RCC_OscConfig+0x4d8>
 80014be:	4b0f      	ldr	r3, [pc, #60]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014c4:	4a0d      	ldr	r2, [pc, #52]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014c6:	f043 0301 	orr.w	r3, r3, #1
 80014ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014ce:	e029      	b.n	8001524 <HAL_RCC_OscConfig+0x52c>
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	689b      	ldr	r3, [r3, #8]
 80014d4:	2b05      	cmp	r3, #5
 80014d6:	d115      	bne.n	8001504 <HAL_RCC_OscConfig+0x50c>
 80014d8:	4b08      	ldr	r3, [pc, #32]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014de:	4a07      	ldr	r2, [pc, #28]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014e0:	f043 0304 	orr.w	r3, r3, #4
 80014e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014e8:	4b04      	ldr	r3, [pc, #16]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80014ee:	4a03      	ldr	r2, [pc, #12]	; (80014fc <HAL_RCC_OscConfig+0x504>)
 80014f0:	f043 0301 	orr.w	r3, r3, #1
 80014f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80014f8:	e014      	b.n	8001524 <HAL_RCC_OscConfig+0x52c>
 80014fa:	bf00      	nop
 80014fc:	40021000 	.word	0x40021000
 8001500:	40007000 	.word	0x40007000
 8001504:	4b9a      	ldr	r3, [pc, #616]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001506:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800150a:	4a99      	ldr	r2, [pc, #612]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800150c:	f023 0301 	bic.w	r3, r3, #1
 8001510:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001514:	4b96      	ldr	r3, [pc, #600]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001516:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800151a:	4a95      	ldr	r2, [pc, #596]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800151c:	f023 0304 	bic.w	r3, r3, #4
 8001520:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001524:	687b      	ldr	r3, [r7, #4]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d016      	beq.n	800155a <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800152c:	f7ff fa80 	bl	8000a30 <HAL_GetTick>
 8001530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001532:	e00a      	b.n	800154a <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001534:	f7ff fa7c 	bl	8000a30 <HAL_GetTick>
 8001538:	4602      	mov	r2, r0
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	1ad3      	subs	r3, r2, r3
 800153e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001542:	4293      	cmp	r3, r2
 8001544:	d901      	bls.n	800154a <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001546:	2303      	movs	r3, #3
 8001548:	e162      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800154a:	4b89      	ldr	r3, [pc, #548]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800154c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d0ed      	beq.n	8001534 <HAL_RCC_OscConfig+0x53c>
 8001558:	e015      	b.n	8001586 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800155a:	f7ff fa69 	bl	8000a30 <HAL_GetTick>
 800155e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001560:	e00a      	b.n	8001578 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001562:	f7ff fa65 	bl	8000a30 <HAL_GetTick>
 8001566:	4602      	mov	r2, r0
 8001568:	693b      	ldr	r3, [r7, #16]
 800156a:	1ad3      	subs	r3, r2, r3
 800156c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001570:	4293      	cmp	r3, r2
 8001572:	d901      	bls.n	8001578 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001574:	2303      	movs	r3, #3
 8001576:	e14b      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001578:	4b7d      	ldr	r3, [pc, #500]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800157a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	2b00      	cmp	r3, #0
 8001584:	d1ed      	bne.n	8001562 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001586:	7ffb      	ldrb	r3, [r7, #31]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d105      	bne.n	8001598 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800158c:	4b78      	ldr	r3, [pc, #480]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800158e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001590:	4a77      	ldr	r2, [pc, #476]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001592:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001596:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	f003 0320 	and.w	r3, r3, #32
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d03c      	beq.n	800161e <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d01c      	beq.n	80015e6 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80015ac:	4b70      	ldr	r3, [pc, #448]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80015ae:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015b2:	4a6f      	ldr	r2, [pc, #444]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80015b4:	f043 0301 	orr.w	r3, r3, #1
 80015b8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015bc:	f7ff fa38 	bl	8000a30 <HAL_GetTick>
 80015c0:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015c2:	e008      	b.n	80015d6 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015c4:	f7ff fa34 	bl	8000a30 <HAL_GetTick>
 80015c8:	4602      	mov	r2, r0
 80015ca:	693b      	ldr	r3, [r7, #16]
 80015cc:	1ad3      	subs	r3, r2, r3
 80015ce:	2b02      	cmp	r3, #2
 80015d0:	d901      	bls.n	80015d6 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80015d2:	2303      	movs	r3, #3
 80015d4:	e11c      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80015d6:	4b66      	ldr	r3, [pc, #408]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80015d8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015dc:	f003 0302 	and.w	r3, r3, #2
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0ef      	beq.n	80015c4 <HAL_RCC_OscConfig+0x5cc>
 80015e4:	e01b      	b.n	800161e <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80015e6:	4b62      	ldr	r3, [pc, #392]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80015e8:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80015ec:	4a60      	ldr	r2, [pc, #384]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80015ee:	f023 0301 	bic.w	r3, r3, #1
 80015f2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015f6:	f7ff fa1b 	bl	8000a30 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80015fe:	f7ff fa17 	bl	8000a30 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e0ff      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001610:	4b57      	ldr	r3, [pc, #348]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001612:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001616:	f003 0302 	and.w	r3, r3, #2
 800161a:	2b00      	cmp	r3, #0
 800161c:	d1ef      	bne.n	80015fe <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001622:	2b00      	cmp	r3, #0
 8001624:	f000 80f3 	beq.w	800180e <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800162c:	2b02      	cmp	r3, #2
 800162e:	f040 80c9 	bne.w	80017c4 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8001632:	4b4f      	ldr	r3, [pc, #316]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001634:	68db      	ldr	r3, [r3, #12]
 8001636:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	f003 0203 	and.w	r2, r3, #3
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001642:	429a      	cmp	r2, r3
 8001644:	d12c      	bne.n	80016a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001646:	697b      	ldr	r3, [r7, #20]
 8001648:	f003 0270 	and.w	r2, r3, #112	; 0x70
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001650:	3b01      	subs	r3, #1
 8001652:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001654:	429a      	cmp	r2, r3
 8001656:	d123      	bne.n	80016a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001658:	697b      	ldr	r3, [r7, #20]
 800165a:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001662:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001664:	429a      	cmp	r2, r3
 8001666:	d11b      	bne.n	80016a0 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001668:	697b      	ldr	r3, [r7, #20]
 800166a:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001672:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001674:	429a      	cmp	r2, r3
 8001676:	d113      	bne.n	80016a0 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001678:	697b      	ldr	r3, [r7, #20]
 800167a:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001682:	085b      	lsrs	r3, r3, #1
 8001684:	3b01      	subs	r3, #1
 8001686:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001688:	429a      	cmp	r2, r3
 800168a:	d109      	bne.n	80016a0 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 800168c:	697b      	ldr	r3, [r7, #20]
 800168e:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001696:	085b      	lsrs	r3, r3, #1
 8001698:	3b01      	subs	r3, #1
 800169a:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800169c:	429a      	cmp	r2, r3
 800169e:	d06b      	beq.n	8001778 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80016a0:	69bb      	ldr	r3, [r7, #24]
 80016a2:	2b0c      	cmp	r3, #12
 80016a4:	d062      	beq.n	800176c <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80016a6:	4b32      	ldr	r3, [pc, #200]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e0ac      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80016b6:	4b2e      	ldr	r3, [pc, #184]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a2d      	ldr	r2, [pc, #180]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016bc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80016c0:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80016c2:	f7ff f9b5 	bl	8000a30 <HAL_GetTick>
 80016c6:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016c8:	e008      	b.n	80016dc <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016ca:	f7ff f9b1 	bl	8000a30 <HAL_GetTick>
 80016ce:	4602      	mov	r2, r0
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	2b02      	cmp	r3, #2
 80016d6:	d901      	bls.n	80016dc <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 80016d8:	2303      	movs	r3, #3
 80016da:	e099      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80016dc:	4b24      	ldr	r3, [pc, #144]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016de:	681b      	ldr	r3, [r3, #0]
 80016e0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016e4:	2b00      	cmp	r3, #0
 80016e6:	d1f0      	bne.n	80016ca <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80016e8:	4b21      	ldr	r3, [pc, #132]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 80016ea:	68da      	ldr	r2, [r3, #12]
 80016ec:	4b21      	ldr	r3, [pc, #132]	; (8001774 <HAL_RCC_OscConfig+0x77c>)
 80016ee:	4013      	ands	r3, r2
 80016f0:	687a      	ldr	r2, [r7, #4]
 80016f2:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80016f4:	687a      	ldr	r2, [r7, #4]
 80016f6:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80016f8:	3a01      	subs	r2, #1
 80016fa:	0112      	lsls	r2, r2, #4
 80016fc:	4311      	orrs	r1, r2
 80016fe:	687a      	ldr	r2, [r7, #4]
 8001700:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001702:	0212      	lsls	r2, r2, #8
 8001704:	4311      	orrs	r1, r2
 8001706:	687a      	ldr	r2, [r7, #4]
 8001708:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 800170a:	0852      	lsrs	r2, r2, #1
 800170c:	3a01      	subs	r2, #1
 800170e:	0552      	lsls	r2, r2, #21
 8001710:	4311      	orrs	r1, r2
 8001712:	687a      	ldr	r2, [r7, #4]
 8001714:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001716:	0852      	lsrs	r2, r2, #1
 8001718:	3a01      	subs	r2, #1
 800171a:	0652      	lsls	r2, r2, #25
 800171c:	4311      	orrs	r1, r2
 800171e:	687a      	ldr	r2, [r7, #4]
 8001720:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001722:	06d2      	lsls	r2, r2, #27
 8001724:	430a      	orrs	r2, r1
 8001726:	4912      	ldr	r1, [pc, #72]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001728:	4313      	orrs	r3, r2
 800172a:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 800172c:	4b10      	ldr	r3, [pc, #64]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a0f      	ldr	r2, [pc, #60]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001732:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001736:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001738:	4b0d      	ldr	r3, [pc, #52]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	4a0c      	ldr	r2, [pc, #48]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 800173e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001742:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001744:	f7ff f974 	bl	8000a30 <HAL_GetTick>
 8001748:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800174a:	e008      	b.n	800175e <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800174c:	f7ff f970 	bl	8000a30 <HAL_GetTick>
 8001750:	4602      	mov	r2, r0
 8001752:	693b      	ldr	r3, [r7, #16]
 8001754:	1ad3      	subs	r3, r2, r3
 8001756:	2b02      	cmp	r3, #2
 8001758:	d901      	bls.n	800175e <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800175a:	2303      	movs	r3, #3
 800175c:	e058      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800175e:	4b04      	ldr	r3, [pc, #16]	; (8001770 <HAL_RCC_OscConfig+0x778>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001766:	2b00      	cmp	r3, #0
 8001768:	d0f0      	beq.n	800174c <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800176a:	e050      	b.n	800180e <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e04f      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
 8001770:	40021000 	.word	0x40021000
 8001774:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001778:	4b27      	ldr	r3, [pc, #156]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 800177a:	681b      	ldr	r3, [r3, #0]
 800177c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001780:	2b00      	cmp	r3, #0
 8001782:	d144      	bne.n	800180e <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001784:	4b24      	ldr	r3, [pc, #144]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a23      	ldr	r2, [pc, #140]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 800178a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800178e:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001790:	4b21      	ldr	r3, [pc, #132]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 8001792:	68db      	ldr	r3, [r3, #12]
 8001794:	4a20      	ldr	r2, [pc, #128]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 8001796:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800179a:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800179c:	f7ff f948 	bl	8000a30 <HAL_GetTick>
 80017a0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017a4:	f7ff f944 	bl	8000a30 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	693b      	ldr	r3, [r7, #16]
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e02c      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80017b6:	4b18      	ldr	r3, [pc, #96]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x7ac>
 80017c2:	e024      	b.n	800180e <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80017c4:	69bb      	ldr	r3, [r7, #24]
 80017c6:	2b0c      	cmp	r3, #12
 80017c8:	d01f      	beq.n	800180a <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80017ca:	4b13      	ldr	r3, [pc, #76]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a12      	ldr	r2, [pc, #72]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 80017d0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80017d4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017d6:	f7ff f92b 	bl	8000a30 <HAL_GetTick>
 80017da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017dc:	e008      	b.n	80017f0 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80017de:	f7ff f927 	bl	8000a30 <HAL_GetTick>
 80017e2:	4602      	mov	r2, r0
 80017e4:	693b      	ldr	r3, [r7, #16]
 80017e6:	1ad3      	subs	r3, r2, r3
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d901      	bls.n	80017f0 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80017ec:	2303      	movs	r3, #3
 80017ee:	e00f      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80017f0:	4b09      	ldr	r3, [pc, #36]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d1f0      	bne.n	80017de <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80017fc:	4b06      	ldr	r3, [pc, #24]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 80017fe:	68da      	ldr	r2, [r3, #12]
 8001800:	4905      	ldr	r1, [pc, #20]	; (8001818 <HAL_RCC_OscConfig+0x820>)
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HAL_RCC_OscConfig+0x824>)
 8001804:	4013      	ands	r3, r2
 8001806:	60cb      	str	r3, [r1, #12]
 8001808:	e001      	b.n	800180e <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 800180a:	2301      	movs	r3, #1
 800180c:	e000      	b.n	8001810 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 800180e:	2300      	movs	r3, #0
}
 8001810:	4618      	mov	r0, r3
 8001812:	3720      	adds	r7, #32
 8001814:	46bd      	mov	sp, r7
 8001816:	bd80      	pop	{r7, pc}
 8001818:	40021000 	.word	0x40021000
 800181c:	feeefffc 	.word	0xfeeefffc

08001820 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d101      	bne.n	8001834 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e0e7      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001834:	4b75      	ldr	r3, [pc, #468]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	f003 0307 	and.w	r3, r3, #7
 800183c:	683a      	ldr	r2, [r7, #0]
 800183e:	429a      	cmp	r2, r3
 8001840:	d910      	bls.n	8001864 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001842:	4b72      	ldr	r3, [pc, #456]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	f023 0207 	bic.w	r2, r3, #7
 800184a:	4970      	ldr	r1, [pc, #448]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 800184c:	683b      	ldr	r3, [r7, #0]
 800184e:	4313      	orrs	r3, r2
 8001850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001852:	4b6e      	ldr	r3, [pc, #440]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	f003 0307 	and.w	r3, r3, #7
 800185a:	683a      	ldr	r2, [r7, #0]
 800185c:	429a      	cmp	r2, r3
 800185e:	d001      	beq.n	8001864 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001860:	2301      	movs	r3, #1
 8001862:	e0cf      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f003 0302 	and.w	r3, r3, #2
 800186c:	2b00      	cmp	r3, #0
 800186e:	d010      	beq.n	8001892 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001870:	687b      	ldr	r3, [r7, #4]
 8001872:	689a      	ldr	r2, [r3, #8]
 8001874:	4b66      	ldr	r3, [pc, #408]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800187c:	429a      	cmp	r2, r3
 800187e:	d908      	bls.n	8001892 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001880:	4b63      	ldr	r3, [pc, #396]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001882:	689b      	ldr	r3, [r3, #8]
 8001884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	4960      	ldr	r1, [pc, #384]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 800188e:	4313      	orrs	r3, r2
 8001890:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f003 0301 	and.w	r3, r3, #1
 800189a:	2b00      	cmp	r3, #0
 800189c:	d04c      	beq.n	8001938 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	2b03      	cmp	r3, #3
 80018a4:	d107      	bne.n	80018b6 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018a6:	4b5a      	ldr	r3, [pc, #360]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d121      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e0a6      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	685b      	ldr	r3, [r3, #4]
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d107      	bne.n	80018ce <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80018be:	4b54      	ldr	r3, [pc, #336]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d115      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e09a      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	685b      	ldr	r3, [r3, #4]
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d107      	bne.n	80018e6 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018d6:	4b4e      	ldr	r3, [pc, #312]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 0302 	and.w	r3, r3, #2
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d109      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018e2:	2301      	movs	r3, #1
 80018e4:	e08e      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80018e6:	4b4a      	ldr	r3, [pc, #296]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d101      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e086      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80018f6:	4b46      	ldr	r3, [pc, #280]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80018f8:	689b      	ldr	r3, [r3, #8]
 80018fa:	f023 0203 	bic.w	r2, r3, #3
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	4943      	ldr	r1, [pc, #268]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001904:	4313      	orrs	r3, r2
 8001906:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001908:	f7ff f892 	bl	8000a30 <HAL_GetTick>
 800190c:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800190e:	e00a      	b.n	8001926 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001910:	f7ff f88e 	bl	8000a30 <HAL_GetTick>
 8001914:	4602      	mov	r2, r0
 8001916:	68fb      	ldr	r3, [r7, #12]
 8001918:	1ad3      	subs	r3, r2, r3
 800191a:	f241 3288 	movw	r2, #5000	; 0x1388
 800191e:	4293      	cmp	r3, r2
 8001920:	d901      	bls.n	8001926 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001922:	2303      	movs	r3, #3
 8001924:	e06e      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001926:	4b3a      	ldr	r3, [pc, #232]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f003 020c 	and.w	r2, r3, #12
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	009b      	lsls	r3, r3, #2
 8001934:	429a      	cmp	r2, r3
 8001936:	d1eb      	bne.n	8001910 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f003 0302 	and.w	r3, r3, #2
 8001940:	2b00      	cmp	r3, #0
 8001942:	d010      	beq.n	8001966 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	689a      	ldr	r2, [r3, #8]
 8001948:	4b31      	ldr	r3, [pc, #196]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 800194a:	689b      	ldr	r3, [r3, #8]
 800194c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001950:	429a      	cmp	r2, r3
 8001952:	d208      	bcs.n	8001966 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001954:	4b2e      	ldr	r3, [pc, #184]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001956:	689b      	ldr	r3, [r3, #8]
 8001958:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	689b      	ldr	r3, [r3, #8]
 8001960:	492b      	ldr	r1, [pc, #172]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 8001962:	4313      	orrs	r3, r2
 8001964:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	f003 0307 	and.w	r3, r3, #7
 800196e:	683a      	ldr	r2, [r7, #0]
 8001970:	429a      	cmp	r2, r3
 8001972:	d210      	bcs.n	8001996 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001974:	4b25      	ldr	r3, [pc, #148]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 0207 	bic.w	r2, r3, #7
 800197c:	4923      	ldr	r1, [pc, #140]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 800197e:	683b      	ldr	r3, [r7, #0]
 8001980:	4313      	orrs	r3, r2
 8001982:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001984:	4b21      	ldr	r3, [pc, #132]	; (8001a0c <HAL_RCC_ClockConfig+0x1ec>)
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f003 0307 	and.w	r3, r3, #7
 800198c:	683a      	ldr	r2, [r7, #0]
 800198e:	429a      	cmp	r2, r3
 8001990:	d001      	beq.n	8001996 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001992:	2301      	movs	r3, #1
 8001994:	e036      	b.n	8001a04 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	f003 0304 	and.w	r3, r3, #4
 800199e:	2b00      	cmp	r3, #0
 80019a0:	d008      	beq.n	80019b4 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80019a2:	4b1b      	ldr	r3, [pc, #108]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019a4:	689b      	ldr	r3, [r3, #8]
 80019a6:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	68db      	ldr	r3, [r3, #12]
 80019ae:	4918      	ldr	r1, [pc, #96]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019b0:	4313      	orrs	r3, r2
 80019b2:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f003 0308 	and.w	r3, r3, #8
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d009      	beq.n	80019d4 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019c0:	4b13      	ldr	r3, [pc, #76]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019c2:	689b      	ldr	r3, [r3, #8]
 80019c4:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	691b      	ldr	r3, [r3, #16]
 80019cc:	00db      	lsls	r3, r3, #3
 80019ce:	4910      	ldr	r1, [pc, #64]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019d0:	4313      	orrs	r3, r2
 80019d2:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80019d4:	f000 f824 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 80019d8:	4602      	mov	r2, r0
 80019da:	4b0d      	ldr	r3, [pc, #52]	; (8001a10 <HAL_RCC_ClockConfig+0x1f0>)
 80019dc:	689b      	ldr	r3, [r3, #8]
 80019de:	091b      	lsrs	r3, r3, #4
 80019e0:	f003 030f 	and.w	r3, r3, #15
 80019e4:	490b      	ldr	r1, [pc, #44]	; (8001a14 <HAL_RCC_ClockConfig+0x1f4>)
 80019e6:	5ccb      	ldrb	r3, [r1, r3]
 80019e8:	f003 031f 	and.w	r3, r3, #31
 80019ec:	fa22 f303 	lsr.w	r3, r2, r3
 80019f0:	4a09      	ldr	r2, [pc, #36]	; (8001a18 <HAL_RCC_ClockConfig+0x1f8>)
 80019f2:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80019f4:	4b09      	ldr	r3, [pc, #36]	; (8001a1c <HAL_RCC_ClockConfig+0x1fc>)
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7fe ff17 	bl	800082c <HAL_InitTick>
 80019fe:	4603      	mov	r3, r0
 8001a00:	72fb      	strb	r3, [r7, #11]

  return status;
 8001a02:	7afb      	ldrb	r3, [r7, #11]
}
 8001a04:	4618      	mov	r0, r3
 8001a06:	3710      	adds	r7, #16
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	bd80      	pop	{r7, pc}
 8001a0c:	40022000 	.word	0x40022000
 8001a10:	40021000 	.word	0x40021000
 8001a14:	08005de8 	.word	0x08005de8
 8001a18:	20000000 	.word	0x20000000
 8001a1c:	20000004 	.word	0x20000004

08001a20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a20:	b480      	push	{r7}
 8001a22:	b089      	sub	sp, #36	; 0x24
 8001a24:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001a26:	2300      	movs	r3, #0
 8001a28:	61fb      	str	r3, [r7, #28]
 8001a2a:	2300      	movs	r3, #0
 8001a2c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a2e:	4b3e      	ldr	r3, [pc, #248]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a30:	689b      	ldr	r3, [r3, #8]
 8001a32:	f003 030c 	and.w	r3, r3, #12
 8001a36:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001a38:	4b3b      	ldr	r3, [pc, #236]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a3a:	68db      	ldr	r3, [r3, #12]
 8001a3c:	f003 0303 	and.w	r3, r3, #3
 8001a40:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001a42:	693b      	ldr	r3, [r7, #16]
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d005      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x34>
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	2b0c      	cmp	r3, #12
 8001a4c:	d121      	bne.n	8001a92 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	2b01      	cmp	r3, #1
 8001a52:	d11e      	bne.n	8001a92 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001a54:	4b34      	ldr	r3, [pc, #208]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	f003 0308 	and.w	r3, r3, #8
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d107      	bne.n	8001a70 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001a60:	4b31      	ldr	r3, [pc, #196]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a62:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001a66:	0a1b      	lsrs	r3, r3, #8
 8001a68:	f003 030f 	and.w	r3, r3, #15
 8001a6c:	61fb      	str	r3, [r7, #28]
 8001a6e:	e005      	b.n	8001a7c <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001a70:	4b2d      	ldr	r3, [pc, #180]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	091b      	lsrs	r3, r3, #4
 8001a76:	f003 030f 	and.w	r3, r3, #15
 8001a7a:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001a7c:	4a2b      	ldr	r2, [pc, #172]	; (8001b2c <HAL_RCC_GetSysClockFreq+0x10c>)
 8001a7e:	69fb      	ldr	r3, [r7, #28]
 8001a80:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a84:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d10d      	bne.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001a8c:	69fb      	ldr	r3, [r7, #28]
 8001a8e:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001a90:	e00a      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001a92:	693b      	ldr	r3, [r7, #16]
 8001a94:	2b04      	cmp	r3, #4
 8001a96:	d102      	bne.n	8001a9e <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001a98:	4b25      	ldr	r3, [pc, #148]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001a9a:	61bb      	str	r3, [r7, #24]
 8001a9c:	e004      	b.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001a9e:	693b      	ldr	r3, [r7, #16]
 8001aa0:	2b08      	cmp	r3, #8
 8001aa2:	d101      	bne.n	8001aa8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001aa4:	4b23      	ldr	r3, [pc, #140]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001aa6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001aa8:	693b      	ldr	r3, [r7, #16]
 8001aaa:	2b0c      	cmp	r3, #12
 8001aac:	d134      	bne.n	8001b18 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001aae:	4b1e      	ldr	r3, [pc, #120]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ab0:	68db      	ldr	r3, [r3, #12]
 8001ab2:	f003 0303 	and.w	r3, r3, #3
 8001ab6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ab8:	68bb      	ldr	r3, [r7, #8]
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d003      	beq.n	8001ac6 <HAL_RCC_GetSysClockFreq+0xa6>
 8001abe:	68bb      	ldr	r3, [r7, #8]
 8001ac0:	2b03      	cmp	r3, #3
 8001ac2:	d003      	beq.n	8001acc <HAL_RCC_GetSysClockFreq+0xac>
 8001ac4:	e005      	b.n	8001ad2 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001ac6:	4b1a      	ldr	r3, [pc, #104]	; (8001b30 <HAL_RCC_GetSysClockFreq+0x110>)
 8001ac8:	617b      	str	r3, [r7, #20]
      break;
 8001aca:	e005      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001acc:	4b19      	ldr	r3, [pc, #100]	; (8001b34 <HAL_RCC_GetSysClockFreq+0x114>)
 8001ace:	617b      	str	r3, [r7, #20]
      break;
 8001ad0:	e002      	b.n	8001ad8 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001ad2:	69fb      	ldr	r3, [r7, #28]
 8001ad4:	617b      	str	r3, [r7, #20]
      break;
 8001ad6:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001ad8:	4b13      	ldr	r3, [pc, #76]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	091b      	lsrs	r3, r3, #4
 8001ade:	f003 0307 	and.w	r3, r3, #7
 8001ae2:	3301      	adds	r3, #1
 8001ae4:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ae8:	68db      	ldr	r3, [r3, #12]
 8001aea:	0a1b      	lsrs	r3, r3, #8
 8001aec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001af0:	697a      	ldr	r2, [r7, #20]
 8001af2:	fb03 f202 	mul.w	r2, r3, r2
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001afc:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001afe:	4b0a      	ldr	r3, [pc, #40]	; (8001b28 <HAL_RCC_GetSysClockFreq+0x108>)
 8001b00:	68db      	ldr	r3, [r3, #12]
 8001b02:	0e5b      	lsrs	r3, r3, #25
 8001b04:	f003 0303 	and.w	r3, r3, #3
 8001b08:	3301      	adds	r3, #1
 8001b0a:	005b      	lsls	r3, r3, #1
 8001b0c:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001b0e:	697a      	ldr	r2, [r7, #20]
 8001b10:	683b      	ldr	r3, [r7, #0]
 8001b12:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b16:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001b18:	69bb      	ldr	r3, [r7, #24]
}
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	3724      	adds	r7, #36	; 0x24
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b24:	4770      	bx	lr
 8001b26:	bf00      	nop
 8001b28:	40021000 	.word	0x40021000
 8001b2c:	08005e00 	.word	0x08005e00
 8001b30:	00f42400 	.word	0x00f42400
 8001b34:	007a1200 	.word	0x007a1200

08001b38 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b38:	b480      	push	{r7}
 8001b3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b3c:	4b03      	ldr	r3, [pc, #12]	; (8001b4c <HAL_RCC_GetHCLKFreq+0x14>)
 8001b3e:	681b      	ldr	r3, [r3, #0]
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	46bd      	mov	sp, r7
 8001b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b48:	4770      	bx	lr
 8001b4a:	bf00      	nop
 8001b4c:	20000000 	.word	0x20000000

08001b50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001b54:	f7ff fff0 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	4b06      	ldr	r3, [pc, #24]	; (8001b74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b5c:	689b      	ldr	r3, [r3, #8]
 8001b5e:	0a1b      	lsrs	r3, r3, #8
 8001b60:	f003 0307 	and.w	r3, r3, #7
 8001b64:	4904      	ldr	r1, [pc, #16]	; (8001b78 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001b66:	5ccb      	ldrb	r3, [r1, r3]
 8001b68:	f003 031f 	and.w	r3, r3, #31
 8001b6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	bd80      	pop	{r7, pc}
 8001b74:	40021000 	.word	0x40021000
 8001b78:	08005df8 	.word	0x08005df8

08001b7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001b80:	f7ff ffda 	bl	8001b38 <HAL_RCC_GetHCLKFreq>
 8001b84:	4602      	mov	r2, r0
 8001b86:	4b06      	ldr	r3, [pc, #24]	; (8001ba0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b88:	689b      	ldr	r3, [r3, #8]
 8001b8a:	0adb      	lsrs	r3, r3, #11
 8001b8c:	f003 0307 	and.w	r3, r3, #7
 8001b90:	4904      	ldr	r1, [pc, #16]	; (8001ba4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001b92:	5ccb      	ldrb	r3, [r1, r3]
 8001b94:	f003 031f 	and.w	r3, r3, #31
 8001b98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b9c:	4618      	mov	r0, r3
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	40021000 	.word	0x40021000
 8001ba4:	08005df8 	.word	0x08005df8

08001ba8 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	220f      	movs	r2, #15
 8001bb6:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001bb8:	4b12      	ldr	r3, [pc, #72]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bba:	689b      	ldr	r3, [r3, #8]
 8001bbc:	f003 0203 	and.w	r2, r3, #3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001bc4:	4b0f      	ldr	r3, [pc, #60]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bc6:	689b      	ldr	r3, [r3, #8]
 8001bc8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001bd0:	4b0c      	ldr	r3, [pc, #48]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bd2:	689b      	ldr	r3, [r3, #8]
 8001bd4:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001bdc:	4b09      	ldr	r3, [pc, #36]	; (8001c04 <HAL_RCC_GetClockConfig+0x5c>)
 8001bde:	689b      	ldr	r3, [r3, #8]
 8001be0:	08db      	lsrs	r3, r3, #3
 8001be2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001bea:	4b07      	ldr	r3, [pc, #28]	; (8001c08 <HAL_RCC_GetClockConfig+0x60>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 0207 	and.w	r2, r3, #7
 8001bf2:	683b      	ldr	r3, [r7, #0]
 8001bf4:	601a      	str	r2, [r3, #0]
}
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c00:	4770      	bx	lr
 8001c02:	bf00      	nop
 8001c04:	40021000 	.word	0x40021000
 8001c08:	40022000 	.word	0x40022000

08001c0c <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001c14:	2300      	movs	r3, #0
 8001c16:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001c18:	4b2a      	ldr	r3, [pc, #168]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d003      	beq.n	8001c2c <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001c24:	f7ff f984 	bl	8000f30 <HAL_PWREx_GetVoltageRange>
 8001c28:	6178      	str	r0, [r7, #20]
 8001c2a:	e014      	b.n	8001c56 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c2c:	4b25      	ldr	r3, [pc, #148]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c30:	4a24      	ldr	r2, [pc, #144]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c32:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c36:	6593      	str	r3, [r2, #88]	; 0x58
 8001c38:	4b22      	ldr	r3, [pc, #136]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c3c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c40:	60fb      	str	r3, [r7, #12]
 8001c42:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001c44:	f7ff f974 	bl	8000f30 <HAL_PWREx_GetVoltageRange>
 8001c48:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001c4a:	4b1e      	ldr	r3, [pc, #120]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c4c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c4e:	4a1d      	ldr	r2, [pc, #116]	; (8001cc4 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001c50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001c54:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001c5c:	d10b      	bne.n	8001c76 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2b80      	cmp	r3, #128	; 0x80
 8001c62:	d919      	bls.n	8001c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	2ba0      	cmp	r3, #160	; 0xa0
 8001c68:	d902      	bls.n	8001c70 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c6a:	2302      	movs	r3, #2
 8001c6c:	613b      	str	r3, [r7, #16]
 8001c6e:	e013      	b.n	8001c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c70:	2301      	movs	r3, #1
 8001c72:	613b      	str	r3, [r7, #16]
 8001c74:	e010      	b.n	8001c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	2b80      	cmp	r3, #128	; 0x80
 8001c7a:	d902      	bls.n	8001c82 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001c7c:	2303      	movs	r3, #3
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	e00a      	b.n	8001c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	2b80      	cmp	r3, #128	; 0x80
 8001c86:	d102      	bne.n	8001c8e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001c88:	2302      	movs	r3, #2
 8001c8a:	613b      	str	r3, [r7, #16]
 8001c8c:	e004      	b.n	8001c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	2b70      	cmp	r3, #112	; 0x70
 8001c92:	d101      	bne.n	8001c98 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001c94:	2301      	movs	r3, #1
 8001c96:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001c98:	4b0b      	ldr	r3, [pc, #44]	; (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	f023 0207 	bic.w	r2, r3, #7
 8001ca0:	4909      	ldr	r1, [pc, #36]	; (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ca8:	4b07      	ldr	r3, [pc, #28]	; (8001cc8 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	f003 0307 	and.w	r3, r3, #7
 8001cb0:	693a      	ldr	r2, [r7, #16]
 8001cb2:	429a      	cmp	r2, r3
 8001cb4:	d001      	beq.n	8001cba <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001cb6:	2301      	movs	r3, #1
 8001cb8:	e000      	b.n	8001cbc <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001cba:	2300      	movs	r3, #0
}
 8001cbc:	4618      	mov	r0, r3
 8001cbe:	3718      	adds	r7, #24
 8001cc0:	46bd      	mov	sp, r7
 8001cc2:	bd80      	pop	{r7, pc}
 8001cc4:	40021000 	.word	0x40021000
 8001cc8:	40022000 	.word	0x40022000

08001ccc <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b086      	sub	sp, #24
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001cd8:	2300      	movs	r3, #0
 8001cda:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d031      	beq.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001cec:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cf0:	d01a      	beq.n	8001d28 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001cf2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001cf6:	d814      	bhi.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d009      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001cfc:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001d00:	d10f      	bne.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001d02:	4b5d      	ldr	r3, [pc, #372]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d04:	68db      	ldr	r3, [r3, #12]
 8001d06:	4a5c      	ldr	r2, [pc, #368]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d08:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d0c:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d0e:	e00c      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	3304      	adds	r3, #4
 8001d14:	2100      	movs	r1, #0
 8001d16:	4618      	mov	r0, r3
 8001d18:	f000 f9de 	bl	80020d8 <RCCEx_PLLSAI1_Config>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001d20:	e003      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001d22:	2301      	movs	r3, #1
 8001d24:	74fb      	strb	r3, [r7, #19]
      break;
 8001d26:	e000      	b.n	8001d2a <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001d28:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001d2a:	7cfb      	ldrb	r3, [r7, #19]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10b      	bne.n	8001d48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d30:	4b51      	ldr	r3, [pc, #324]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d36:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001d3e:	494e      	ldr	r1, [pc, #312]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d40:	4313      	orrs	r3, r2
 8001d42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001d46:	e001      	b.n	8001d4c <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001d48:	7cfb      	ldrb	r3, [r7, #19]
 8001d4a:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 809e 	beq.w	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001d5e:	4b46      	ldr	r3, [pc, #280]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d66:	2b00      	cmp	r3, #0
 8001d68:	d101      	bne.n	8001d6e <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001d6a:	2301      	movs	r3, #1
 8001d6c:	e000      	b.n	8001d70 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001d6e:	2300      	movs	r3, #0
 8001d70:	2b00      	cmp	r3, #0
 8001d72:	d00d      	beq.n	8001d90 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001d74:	4b40      	ldr	r3, [pc, #256]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d78:	4a3f      	ldr	r2, [pc, #252]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d7a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d7e:	6593      	str	r3, [r2, #88]	; 0x58
 8001d80:	4b3d      	ldr	r3, [pc, #244]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001d82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d84:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d88:	60bb      	str	r3, [r7, #8]
 8001d8a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001d8c:	2301      	movs	r3, #1
 8001d8e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001d90:	4b3a      	ldr	r3, [pc, #232]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a39      	ldr	r2, [pc, #228]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001d96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001d9a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001d9c:	f7fe fe48 	bl	8000a30 <HAL_GetTick>
 8001da0:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001da2:	e009      	b.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001da4:	f7fe fe44 	bl	8000a30 <HAL_GetTick>
 8001da8:	4602      	mov	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d902      	bls.n	8001db8 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001db2:	2303      	movs	r3, #3
 8001db4:	74fb      	strb	r3, [r7, #19]
        break;
 8001db6:	e005      	b.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001db8:	4b30      	ldr	r3, [pc, #192]	; (8001e7c <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dc0:	2b00      	cmp	r3, #0
 8001dc2:	d0ef      	beq.n	8001da4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001dc4:	7cfb      	ldrb	r3, [r7, #19]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d15a      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001dca:	4b2b      	ldr	r3, [pc, #172]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dcc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dd0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001dd4:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001dd6:	697b      	ldr	r3, [r7, #20]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	d01e      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	429a      	cmp	r2, r3
 8001de4:	d019      	beq.n	8001e1a <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001de6:	4b24      	ldr	r3, [pc, #144]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001dec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001df0:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001df2:	4b21      	ldr	r3, [pc, #132]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001df4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001df8:	4a1f      	ldr	r2, [pc, #124]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001dfe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001e02:	4b1d      	ldr	r3, [pc, #116]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e08:	4a1b      	ldr	r2, [pc, #108]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e0a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e0e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001e12:	4a19      	ldr	r2, [pc, #100]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001e1a:	697b      	ldr	r3, [r7, #20]
 8001e1c:	f003 0301 	and.w	r3, r3, #1
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d016      	beq.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e24:	f7fe fe04 	bl	8000a30 <HAL_GetTick>
 8001e28:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e2a:	e00b      	b.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e2c:	f7fe fe00 	bl	8000a30 <HAL_GetTick>
 8001e30:	4602      	mov	r2, r0
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	1ad3      	subs	r3, r2, r3
 8001e36:	f241 3288 	movw	r2, #5000	; 0x1388
 8001e3a:	4293      	cmp	r3, r2
 8001e3c:	d902      	bls.n	8001e44 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	74fb      	strb	r3, [r7, #19]
            break;
 8001e42:	e006      	b.n	8001e52 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001e44:	4b0c      	ldr	r3, [pc, #48]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e4a:	f003 0302 	and.w	r3, r3, #2
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d0ec      	beq.n	8001e2c <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001e52:	7cfb      	ldrb	r3, [r7, #19]
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d10b      	bne.n	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001e58:	4b07      	ldr	r3, [pc, #28]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001e5e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001e66:	4904      	ldr	r1, [pc, #16]	; (8001e78 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001e6e:	e009      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	74bb      	strb	r3, [r7, #18]
 8001e74:	e006      	b.n	8001e84 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001e76:	bf00      	nop
 8001e78:	40021000 	.word	0x40021000
 8001e7c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001e80:	7cfb      	ldrb	r3, [r7, #19]
 8001e82:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001e84:	7c7b      	ldrb	r3, [r7, #17]
 8001e86:	2b01      	cmp	r3, #1
 8001e88:	d105      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001e8a:	4b8a      	ldr	r3, [pc, #552]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e8e:	4a89      	ldr	r2, [pc, #548]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e94:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00a      	beq.n	8001eb8 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001ea2:	4b84      	ldr	r3, [pc, #528]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ea4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ea8:	f023 0203 	bic.w	r2, r3, #3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	6a1b      	ldr	r3, [r3, #32]
 8001eb0:	4980      	ldr	r1, [pc, #512]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f003 0302 	and.w	r3, r3, #2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d00a      	beq.n	8001eda <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001ec4:	4b7b      	ldr	r3, [pc, #492]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ec6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eca:	f023 020c 	bic.w	r2, r3, #12
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ed2:	4978      	ldr	r1, [pc, #480]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d00a      	beq.n	8001efc <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001ee6:	4b73      	ldr	r3, [pc, #460]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ee8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eec:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef4:	496f      	ldr	r1, [pc, #444]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d00a      	beq.n	8001f1e <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001f08:	4b6a      	ldr	r3, [pc, #424]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f0e:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001f16:	4967      	ldr	r1, [pc, #412]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	681b      	ldr	r3, [r3, #0]
 8001f22:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d00a      	beq.n	8001f40 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001f2a:	4b62      	ldr	r3, [pc, #392]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f30:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f38:	495e      	ldr	r1, [pc, #376]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f3a:	4313      	orrs	r3, r2
 8001f3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d00a      	beq.n	8001f62 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001f4c:	4b59      	ldr	r3, [pc, #356]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f52:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5a:	4956      	ldr	r1, [pc, #344]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d00a      	beq.n	8001f84 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001f6e:	4b51      	ldr	r3, [pc, #324]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f74:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f7c:	494d      	ldr	r1, [pc, #308]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d028      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001f90:	4b48      	ldr	r3, [pc, #288]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001f92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f96:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4945      	ldr	r1, [pc, #276]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001fae:	d106      	bne.n	8001fbe <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001fb0:	4b40      	ldr	r3, [pc, #256]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fb2:	68db      	ldr	r3, [r3, #12]
 8001fb4:	4a3f      	ldr	r2, [pc, #252]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001fb6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001fba:	60d3      	str	r3, [r2, #12]
 8001fbc:	e011      	b.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc2:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001fc6:	d10c      	bne.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	3304      	adds	r3, #4
 8001fcc:	2101      	movs	r1, #1
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f000 f882 	bl	80020d8 <RCCEx_PLLSAI1_Config>
 8001fd4:	4603      	mov	r3, r0
 8001fd6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001fd8:	7cfb      	ldrb	r3, [r7, #19]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d001      	beq.n	8001fe2 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8001fde:	7cfb      	ldrb	r3, [r7, #19]
 8001fe0:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d028      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001fee:	4b31      	ldr	r3, [pc, #196]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ff0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ff4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffc:	492d      	ldr	r1, [pc, #180]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002008:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800200c:	d106      	bne.n	800201c <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800200e:	4b29      	ldr	r3, [pc, #164]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002010:	68db      	ldr	r3, [r3, #12]
 8002012:	4a28      	ldr	r2, [pc, #160]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002014:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002018:	60d3      	str	r3, [r2, #12]
 800201a:	e011      	b.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002020:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002024:	d10c      	bne.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	3304      	adds	r3, #4
 800202a:	2101      	movs	r1, #1
 800202c:	4618      	mov	r0, r3
 800202e:	f000 f853 	bl	80020d8 <RCCEx_PLLSAI1_Config>
 8002032:	4603      	mov	r3, r0
 8002034:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002036:	7cfb      	ldrb	r3, [r7, #19]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d001      	beq.n	8002040 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 800203c:	7cfb      	ldrb	r3, [r7, #19]
 800203e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d01c      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800204c:	4b19      	ldr	r3, [pc, #100]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002052:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800205a:	4916      	ldr	r1, [pc, #88]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800205c:	4313      	orrs	r3, r2
 800205e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002066:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800206a:	d10c      	bne.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	3304      	adds	r3, #4
 8002070:	2102      	movs	r1, #2
 8002072:	4618      	mov	r0, r3
 8002074:	f000 f830 	bl	80020d8 <RCCEx_PLLSAI1_Config>
 8002078:	4603      	mov	r3, r0
 800207a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800207c:	7cfb      	ldrb	r3, [r7, #19]
 800207e:	2b00      	cmp	r3, #0
 8002080:	d001      	beq.n	8002086 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002082:	7cfb      	ldrb	r3, [r7, #19]
 8002084:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800208e:	2b00      	cmp	r3, #0
 8002090:	d00a      	beq.n	80020a8 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002092:	4b08      	ldr	r3, [pc, #32]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002094:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002098:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80020a0:	4904      	ldr	r1, [pc, #16]	; (80020b4 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a2:	4313      	orrs	r3, r2
 80020a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80020a8:	7cbb      	ldrb	r3, [r7, #18]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	40021000 	.word	0x40021000

080020b8 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80020b8:	b480      	push	{r7}
 80020ba:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80020bc:	4b05      	ldr	r3, [pc, #20]	; (80020d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	4a04      	ldr	r2, [pc, #16]	; (80020d4 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80020c2:	f043 0304 	orr.w	r3, r3, #4
 80020c6:	6013      	str	r3, [r2, #0]
}
 80020c8:	bf00      	nop
 80020ca:	46bd      	mov	sp, r7
 80020cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d0:	4770      	bx	lr
 80020d2:	bf00      	nop
 80020d4:	40021000 	.word	0x40021000

080020d8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80020d8:	b580      	push	{r7, lr}
 80020da:	b084      	sub	sp, #16
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80020e2:	2300      	movs	r3, #0
 80020e4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80020e6:	4b74      	ldr	r3, [pc, #464]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	f003 0303 	and.w	r3, r3, #3
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d018      	beq.n	8002124 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80020f2:	4b71      	ldr	r3, [pc, #452]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80020f4:	68db      	ldr	r3, [r3, #12]
 80020f6:	f003 0203 	and.w	r2, r3, #3
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	429a      	cmp	r2, r3
 8002100:	d10d      	bne.n	800211e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
       ||
 8002106:	2b00      	cmp	r3, #0
 8002108:	d009      	beq.n	800211e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800210a:	4b6b      	ldr	r3, [pc, #428]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800210c:	68db      	ldr	r3, [r3, #12]
 800210e:	091b      	lsrs	r3, r3, #4
 8002110:	f003 0307 	and.w	r3, r3, #7
 8002114:	1c5a      	adds	r2, r3, #1
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	685b      	ldr	r3, [r3, #4]
       ||
 800211a:	429a      	cmp	r2, r3
 800211c:	d047      	beq.n	80021ae <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800211e:	2301      	movs	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	e044      	b.n	80021ae <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	2b03      	cmp	r3, #3
 800212a:	d018      	beq.n	800215e <RCCEx_PLLSAI1_Config+0x86>
 800212c:	2b03      	cmp	r3, #3
 800212e:	d825      	bhi.n	800217c <RCCEx_PLLSAI1_Config+0xa4>
 8002130:	2b01      	cmp	r3, #1
 8002132:	d002      	beq.n	800213a <RCCEx_PLLSAI1_Config+0x62>
 8002134:	2b02      	cmp	r3, #2
 8002136:	d009      	beq.n	800214c <RCCEx_PLLSAI1_Config+0x74>
 8002138:	e020      	b.n	800217c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800213a:	4b5f      	ldr	r3, [pc, #380]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	2b00      	cmp	r3, #0
 8002144:	d11d      	bne.n	8002182 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002146:	2301      	movs	r3, #1
 8002148:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800214a:	e01a      	b.n	8002182 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800214c:	4b5a      	ldr	r3, [pc, #360]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002154:	2b00      	cmp	r3, #0
 8002156:	d116      	bne.n	8002186 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800215c:	e013      	b.n	8002186 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800215e:	4b56      	ldr	r3, [pc, #344]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d10f      	bne.n	800218a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800216a:	4b53      	ldr	r3, [pc, #332]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d109      	bne.n	800218a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800217a:	e006      	b.n	800218a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      break;
 8002180:	e004      	b.n	800218c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002182:	bf00      	nop
 8002184:	e002      	b.n	800218c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002186:	bf00      	nop
 8002188:	e000      	b.n	800218c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800218a:	bf00      	nop
    }

    if(status == HAL_OK)
 800218c:	7bfb      	ldrb	r3, [r7, #15]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d10d      	bne.n	80021ae <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002192:	4b49      	ldr	r3, [pc, #292]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002194:	68db      	ldr	r3, [r3, #12]
 8002196:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	6819      	ldr	r1, [r3, #0]
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	685b      	ldr	r3, [r3, #4]
 80021a2:	3b01      	subs	r3, #1
 80021a4:	011b      	lsls	r3, r3, #4
 80021a6:	430b      	orrs	r3, r1
 80021a8:	4943      	ldr	r1, [pc, #268]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80021ae:	7bfb      	ldrb	r3, [r7, #15]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d17c      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80021b4:	4b40      	ldr	r3, [pc, #256]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	4a3f      	ldr	r2, [pc, #252]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80021be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021c0:	f7fe fc36 	bl	8000a30 <HAL_GetTick>
 80021c4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021c6:	e009      	b.n	80021dc <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80021c8:	f7fe fc32 	bl	8000a30 <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	68bb      	ldr	r3, [r7, #8]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d902      	bls.n	80021dc <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	73fb      	strb	r3, [r7, #15]
        break;
 80021da:	e005      	b.n	80021e8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80021dc:	4b36      	ldr	r3, [pc, #216]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1ef      	bne.n	80021c8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d15f      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d110      	bne.n	8002216 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80021f4:	4b30      	ldr	r3, [pc, #192]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80021f6:	691b      	ldr	r3, [r3, #16]
 80021f8:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80021fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002200:	687a      	ldr	r2, [r7, #4]
 8002202:	6892      	ldr	r2, [r2, #8]
 8002204:	0211      	lsls	r1, r2, #8
 8002206:	687a      	ldr	r2, [r7, #4]
 8002208:	68d2      	ldr	r2, [r2, #12]
 800220a:	06d2      	lsls	r2, r2, #27
 800220c:	430a      	orrs	r2, r1
 800220e:	492a      	ldr	r1, [pc, #168]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002210:	4313      	orrs	r3, r2
 8002212:	610b      	str	r3, [r1, #16]
 8002214:	e027      	b.n	8002266 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d112      	bne.n	8002242 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800221c:	4b26      	ldr	r3, [pc, #152]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800221e:	691b      	ldr	r3, [r3, #16]
 8002220:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002224:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002228:	687a      	ldr	r2, [r7, #4]
 800222a:	6892      	ldr	r2, [r2, #8]
 800222c:	0211      	lsls	r1, r2, #8
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	6912      	ldr	r2, [r2, #16]
 8002232:	0852      	lsrs	r2, r2, #1
 8002234:	3a01      	subs	r2, #1
 8002236:	0552      	lsls	r2, r2, #21
 8002238:	430a      	orrs	r2, r1
 800223a:	491f      	ldr	r1, [pc, #124]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800223c:	4313      	orrs	r3, r2
 800223e:	610b      	str	r3, [r1, #16]
 8002240:	e011      	b.n	8002266 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002242:	4b1d      	ldr	r3, [pc, #116]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002244:	691b      	ldr	r3, [r3, #16]
 8002246:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 800224a:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800224e:	687a      	ldr	r2, [r7, #4]
 8002250:	6892      	ldr	r2, [r2, #8]
 8002252:	0211      	lsls	r1, r2, #8
 8002254:	687a      	ldr	r2, [r7, #4]
 8002256:	6952      	ldr	r2, [r2, #20]
 8002258:	0852      	lsrs	r2, r2, #1
 800225a:	3a01      	subs	r2, #1
 800225c:	0652      	lsls	r2, r2, #25
 800225e:	430a      	orrs	r2, r1
 8002260:	4915      	ldr	r1, [pc, #84]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002262:	4313      	orrs	r3, r2
 8002264:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a13      	ldr	r2, [pc, #76]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 800226c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002270:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002272:	f7fe fbdd 	bl	8000a30 <HAL_GetTick>
 8002276:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002278:	e009      	b.n	800228e <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800227a:	f7fe fbd9 	bl	8000a30 <HAL_GetTick>
 800227e:	4602      	mov	r2, r0
 8002280:	68bb      	ldr	r3, [r7, #8]
 8002282:	1ad3      	subs	r3, r2, r3
 8002284:	2b02      	cmp	r3, #2
 8002286:	d902      	bls.n	800228e <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002288:	2303      	movs	r3, #3
 800228a:	73fb      	strb	r3, [r7, #15]
          break;
 800228c:	e005      	b.n	800229a <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800228e:	4b0a      	ldr	r3, [pc, #40]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d0ef      	beq.n	800227a <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800229a:	7bfb      	ldrb	r3, [r7, #15]
 800229c:	2b00      	cmp	r3, #0
 800229e:	d106      	bne.n	80022ae <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80022a0:	4b05      	ldr	r3, [pc, #20]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a2:	691a      	ldr	r2, [r3, #16]
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	4903      	ldr	r1, [pc, #12]	; (80022b8 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022aa:	4313      	orrs	r3, r2
 80022ac:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80022ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80022b0:	4618      	mov	r0, r3
 80022b2:	3710      	adds	r7, #16
 80022b4:	46bd      	mov	sp, r7
 80022b6:	bd80      	pop	{r7, pc}
 80022b8:	40021000 	.word	0x40021000

080022bc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e049      	b.n	8002362 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80022d4:	b2db      	uxtb	r3, r3
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d106      	bne.n	80022e8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80022e2:	6878      	ldr	r0, [r7, #4]
 80022e4:	f000 f841 	bl	800236a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	2202      	movs	r2, #2
 80022ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3304      	adds	r3, #4
 80022f8:	4619      	mov	r1, r3
 80022fa:	4610      	mov	r0, r2
 80022fc:	f000 f9dc 	bl	80026b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	2201      	movs	r2, #1
 8002304:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	2201      	movs	r2, #1
 8002324:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2201      	movs	r2, #1
 800232c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2201      	movs	r2, #1
 8002334:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	2201      	movs	r2, #1
 800233c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	2201      	movs	r2, #1
 8002344:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2201      	movs	r2, #1
 800234c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2201      	movs	r2, #1
 8002354:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	2201      	movs	r2, #1
 800235c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002360:	2300      	movs	r3, #0
}
 8002362:	4618      	mov	r0, r3
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800236a:	b480      	push	{r7}
 800236c:	b083      	sub	sp, #12
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002372:	bf00      	nop
 8002374:	370c      	adds	r7, #12
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr
	...

08002380 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002380:	b480      	push	{r7}
 8002382:	b085      	sub	sp, #20
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800238e:	b2db      	uxtb	r3, r3
 8002390:	2b01      	cmp	r3, #1
 8002392:	d001      	beq.n	8002398 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002394:	2301      	movs	r3, #1
 8002396:	e03b      	b.n	8002410 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	2202      	movs	r2, #2
 800239c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f042 0201 	orr.w	r2, r2, #1
 80023ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a19      	ldr	r2, [pc, #100]	; (800241c <HAL_TIM_Base_Start_IT+0x9c>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d009      	beq.n	80023ce <HAL_TIM_Base_Start_IT+0x4e>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023c2:	d004      	beq.n	80023ce <HAL_TIM_Base_Start_IT+0x4e>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a15      	ldr	r2, [pc, #84]	; (8002420 <HAL_TIM_Base_Start_IT+0xa0>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d115      	bne.n	80023fa <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	689a      	ldr	r2, [r3, #8]
 80023d4:	4b13      	ldr	r3, [pc, #76]	; (8002424 <HAL_TIM_Base_Start_IT+0xa4>)
 80023d6:	4013      	ands	r3, r2
 80023d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	2b06      	cmp	r3, #6
 80023de:	d015      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x8c>
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023e6:	d011      	beq.n	800240c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	681a      	ldr	r2, [r3, #0]
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f042 0201 	orr.w	r2, r2, #1
 80023f6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80023f8:	e008      	b.n	800240c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	681a      	ldr	r2, [r3, #0]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0201 	orr.w	r2, r2, #1
 8002408:	601a      	str	r2, [r3, #0]
 800240a:	e000      	b.n	800240e <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800240c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800240e:	2300      	movs	r3, #0
}
 8002410:	4618      	mov	r0, r3
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800241a:	4770      	bx	lr
 800241c:	40012c00 	.word	0x40012c00
 8002420:	40014000 	.word	0x40014000
 8002424:	00010007 	.word	0x00010007

08002428 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b082      	sub	sp, #8
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	691b      	ldr	r3, [r3, #16]
 8002436:	f003 0302 	and.w	r3, r3, #2
 800243a:	2b02      	cmp	r3, #2
 800243c:	d122      	bne.n	8002484 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b02      	cmp	r3, #2
 800244a:	d11b      	bne.n	8002484 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f06f 0202 	mvn.w	r2, #2
 8002454:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	2201      	movs	r2, #1
 800245a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	699b      	ldr	r3, [r3, #24]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	2b00      	cmp	r3, #0
 8002468:	d003      	beq.n	8002472 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800246a:	6878      	ldr	r0, [r7, #4]
 800246c:	f000 f905 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 8002470:	e005      	b.n	800247e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f000 f8f7 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002478:	6878      	ldr	r0, [r7, #4]
 800247a:	f000 f908 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	2200      	movs	r2, #0
 8002482:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	691b      	ldr	r3, [r3, #16]
 800248a:	f003 0304 	and.w	r3, r3, #4
 800248e:	2b04      	cmp	r3, #4
 8002490:	d122      	bne.n	80024d8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	68db      	ldr	r3, [r3, #12]
 8002498:	f003 0304 	and.w	r3, r3, #4
 800249c:	2b04      	cmp	r3, #4
 800249e:	d11b      	bne.n	80024d8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f06f 0204 	mvn.w	r2, #4
 80024a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	2202      	movs	r2, #2
 80024ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	699b      	ldr	r3, [r3, #24]
 80024b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d003      	beq.n	80024c6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f000 f8db 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 80024c4:	e005      	b.n	80024d2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80024c6:	6878      	ldr	r0, [r7, #4]
 80024c8:	f000 f8cd 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80024cc:	6878      	ldr	r0, [r7, #4]
 80024ce:	f000 f8de 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	2200      	movs	r2, #0
 80024d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	691b      	ldr	r3, [r3, #16]
 80024de:	f003 0308 	and.w	r3, r3, #8
 80024e2:	2b08      	cmp	r3, #8
 80024e4:	d122      	bne.n	800252c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68db      	ldr	r3, [r3, #12]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b08      	cmp	r3, #8
 80024f2:	d11b      	bne.n	800252c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f06f 0208 	mvn.w	r2, #8
 80024fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	2204      	movs	r2, #4
 8002502:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	69db      	ldr	r3, [r3, #28]
 800250a:	f003 0303 	and.w	r3, r3, #3
 800250e:	2b00      	cmp	r3, #0
 8002510:	d003      	beq.n	800251a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002512:	6878      	ldr	r0, [r7, #4]
 8002514:	f000 f8b1 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 8002518:	e005      	b.n	8002526 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800251a:	6878      	ldr	r0, [r7, #4]
 800251c:	f000 f8a3 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002520:	6878      	ldr	r0, [r7, #4]
 8002522:	f000 f8b4 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	2200      	movs	r2, #0
 800252a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	691b      	ldr	r3, [r3, #16]
 8002532:	f003 0310 	and.w	r3, r3, #16
 8002536:	2b10      	cmp	r3, #16
 8002538:	d122      	bne.n	8002580 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f003 0310 	and.w	r3, r3, #16
 8002544:	2b10      	cmp	r3, #16
 8002546:	d11b      	bne.n	8002580 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f06f 0210 	mvn.w	r2, #16
 8002550:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	2208      	movs	r2, #8
 8002556:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	69db      	ldr	r3, [r3, #28]
 800255e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002562:	2b00      	cmp	r3, #0
 8002564:	d003      	beq.n	800256e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002566:	6878      	ldr	r0, [r7, #4]
 8002568:	f000 f887 	bl	800267a <HAL_TIM_IC_CaptureCallback>
 800256c:	e005      	b.n	800257a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800256e:	6878      	ldr	r0, [r7, #4]
 8002570:	f000 f879 	bl	8002666 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002574:	6878      	ldr	r0, [r7, #4]
 8002576:	f000 f88a 	bl	800268e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	2200      	movs	r2, #0
 800257e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	691b      	ldr	r3, [r3, #16]
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	2b01      	cmp	r3, #1
 800258c:	d10e      	bne.n	80025ac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	68db      	ldr	r3, [r3, #12]
 8002594:	f003 0301 	and.w	r3, r3, #1
 8002598:	2b01      	cmp	r3, #1
 800259a:	d107      	bne.n	80025ac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f06f 0201 	mvn.w	r2, #1
 80025a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80025a6:	6878      	ldr	r0, [r7, #4]
 80025a8:	f7fe f896 	bl	80006d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	691b      	ldr	r3, [r3, #16]
 80025b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025b6:	2b80      	cmp	r3, #128	; 0x80
 80025b8:	d10e      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025c4:	2b80      	cmp	r3, #128	; 0x80
 80025c6:	d107      	bne.n	80025d8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80025d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80025d2:	6878      	ldr	r0, [r7, #4]
 80025d4:	f000 f8de 	bl	8002794 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	681b      	ldr	r3, [r3, #0]
 80025dc:	691b      	ldr	r3, [r3, #16]
 80025de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025e6:	d10e      	bne.n	8002606 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	68db      	ldr	r3, [r3, #12]
 80025ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025f2:	2b80      	cmp	r3, #128	; 0x80
 80025f4:	d107      	bne.n	8002606 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80025fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002600:	6878      	ldr	r0, [r7, #4]
 8002602:	f000 f8d1 	bl	80027a8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	691b      	ldr	r3, [r3, #16]
 800260c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002610:	2b40      	cmp	r3, #64	; 0x40
 8002612:	d10e      	bne.n	8002632 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	68db      	ldr	r3, [r3, #12]
 800261a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800261e:	2b40      	cmp	r3, #64	; 0x40
 8002620:	d107      	bne.n	8002632 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800262a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f838 	bl	80026a2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f003 0320 	and.w	r3, r3, #32
 800263c:	2b20      	cmp	r3, #32
 800263e:	d10e      	bne.n	800265e <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	68db      	ldr	r3, [r3, #12]
 8002646:	f003 0320 	and.w	r3, r3, #32
 800264a:	2b20      	cmp	r3, #32
 800264c:	d107      	bne.n	800265e <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f06f 0220 	mvn.w	r2, #32
 8002656:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002658:	6878      	ldr	r0, [r7, #4]
 800265a:	f000 f891 	bl	8002780 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800265e:	bf00      	nop
 8002660:	3708      	adds	r7, #8
 8002662:	46bd      	mov	sp, r7
 8002664:	bd80      	pop	{r7, pc}

08002666 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002666:	b480      	push	{r7}
 8002668:	b083      	sub	sp, #12
 800266a:	af00      	add	r7, sp, #0
 800266c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800266e:	bf00      	nop
 8002670:	370c      	adds	r7, #12
 8002672:	46bd      	mov	sp, r7
 8002674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002678:	4770      	bx	lr

0800267a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800267a:	b480      	push	{r7}
 800267c:	b083      	sub	sp, #12
 800267e:	af00      	add	r7, sp, #0
 8002680:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002682:	bf00      	nop
 8002684:	370c      	adds	r7, #12
 8002686:	46bd      	mov	sp, r7
 8002688:	f85d 7b04 	ldr.w	r7, [sp], #4
 800268c:	4770      	bx	lr

0800268e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002696:	bf00      	nop
 8002698:	370c      	adds	r7, #12
 800269a:	46bd      	mov	sp, r7
 800269c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a0:	4770      	bx	lr

080026a2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80026a2:	b480      	push	{r7}
 80026a4:	b083      	sub	sp, #12
 80026a6:	af00      	add	r7, sp, #0
 80026a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80026aa:	bf00      	nop
 80026ac:	370c      	adds	r7, #12
 80026ae:	46bd      	mov	sp, r7
 80026b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026b4:	4770      	bx	lr
	...

080026b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80026b8:	b480      	push	{r7}
 80026ba:	b085      	sub	sp, #20
 80026bc:	af00      	add	r7, sp, #0
 80026be:	6078      	str	r0, [r7, #4]
 80026c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	4a2a      	ldr	r2, [pc, #168]	; (8002774 <TIM_Base_SetConfig+0xbc>)
 80026cc:	4293      	cmp	r3, r2
 80026ce:	d003      	beq.n	80026d8 <TIM_Base_SetConfig+0x20>
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026d6:	d108      	bne.n	80026ea <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80026d8:	68fb      	ldr	r3, [r7, #12]
 80026da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80026de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	68fa      	ldr	r2, [r7, #12]
 80026e6:	4313      	orrs	r3, r2
 80026e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	4a21      	ldr	r2, [pc, #132]	; (8002774 <TIM_Base_SetConfig+0xbc>)
 80026ee:	4293      	cmp	r3, r2
 80026f0:	d00b      	beq.n	800270a <TIM_Base_SetConfig+0x52>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d007      	beq.n	800270a <TIM_Base_SetConfig+0x52>
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	4a1e      	ldr	r2, [pc, #120]	; (8002778 <TIM_Base_SetConfig+0xc0>)
 80026fe:	4293      	cmp	r3, r2
 8002700:	d003      	beq.n	800270a <TIM_Base_SetConfig+0x52>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a1d      	ldr	r2, [pc, #116]	; (800277c <TIM_Base_SetConfig+0xc4>)
 8002706:	4293      	cmp	r3, r2
 8002708:	d108      	bne.n	800271c <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	68db      	ldr	r3, [r3, #12]
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	4313      	orrs	r3, r2
 800271a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002722:	683b      	ldr	r3, [r7, #0]
 8002724:	695b      	ldr	r3, [r3, #20]
 8002726:	4313      	orrs	r3, r2
 8002728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	68fa      	ldr	r2, [r7, #12]
 800272e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	689a      	ldr	r2, [r3, #8]
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	681a      	ldr	r2, [r3, #0]
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	4a0c      	ldr	r2, [pc, #48]	; (8002774 <TIM_Base_SetConfig+0xbc>)
 8002744:	4293      	cmp	r3, r2
 8002746:	d007      	beq.n	8002758 <TIM_Base_SetConfig+0xa0>
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	4a0b      	ldr	r2, [pc, #44]	; (8002778 <TIM_Base_SetConfig+0xc0>)
 800274c:	4293      	cmp	r3, r2
 800274e:	d003      	beq.n	8002758 <TIM_Base_SetConfig+0xa0>
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	4a0a      	ldr	r2, [pc, #40]	; (800277c <TIM_Base_SetConfig+0xc4>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d103      	bne.n	8002760 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002758:	683b      	ldr	r3, [r7, #0]
 800275a:	691a      	ldr	r2, [r3, #16]
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	2201      	movs	r2, #1
 8002764:	615a      	str	r2, [r3, #20]
}
 8002766:	bf00      	nop
 8002768:	3714      	adds	r7, #20
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr
 8002772:	bf00      	nop
 8002774:	40012c00 	.word	0x40012c00
 8002778:	40014000 	.word	0x40014000
 800277c:	40014400 	.word	0x40014400

08002780 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002780:	b480      	push	{r7}
 8002782:	b083      	sub	sp, #12
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002788:	bf00      	nop
 800278a:	370c      	adds	r7, #12
 800278c:	46bd      	mov	sp, r7
 800278e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002792:	4770      	bx	lr

08002794 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002794:	b480      	push	{r7}
 8002796:	b083      	sub	sp, #12
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800279c:	bf00      	nop
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a6:	4770      	bx	lr

080027a8 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b083      	sub	sp, #12
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80027b0:	bf00      	nop
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ba:	4770      	bx	lr

080027bc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80027bc:	b580      	push	{r7, lr}
 80027be:	b082      	sub	sp, #8
 80027c0:	af00      	add	r7, sp, #0
 80027c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d101      	bne.n	80027ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	e040      	b.n	8002850 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d106      	bne.n	80027e4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027de:	6878      	ldr	r0, [r7, #4]
 80027e0:	f7fd ffba 	bl	8000758 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	2224      	movs	r2, #36	; 0x24
 80027e8:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f022 0201 	bic.w	r2, r2, #1
 80027f8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027fa:	6878      	ldr	r0, [r7, #4]
 80027fc:	f000 f82c 	bl	8002858 <UART_SetConfig>
 8002800:	4603      	mov	r3, r0
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e022      	b.n	8002850 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800280e:	2b00      	cmp	r3, #0
 8002810:	d002      	beq.n	8002818 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 fa4c 	bl	8002cb0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	685a      	ldr	r2, [r3, #4]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002826:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	689a      	ldr	r2, [r3, #8]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002836:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f042 0201 	orr.w	r2, r2, #1
 8002846:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002848:	6878      	ldr	r0, [r7, #4]
 800284a:	f000 fad3 	bl	8002df4 <UART_CheckIdleState>
 800284e:	4603      	mov	r3, r0
}
 8002850:	4618      	mov	r0, r3
 8002852:	3708      	adds	r7, #8
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}

08002858 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002858:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800285c:	b08a      	sub	sp, #40	; 0x28
 800285e:	af00      	add	r7, sp, #0
 8002860:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002862:	2300      	movs	r3, #0
 8002864:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	689a      	ldr	r2, [r3, #8]
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	691b      	ldr	r3, [r3, #16]
 8002870:	431a      	orrs	r2, r3
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	431a      	orrs	r2, r3
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	69db      	ldr	r3, [r3, #28]
 800287c:	4313      	orrs	r3, r2
 800287e:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	4bb4      	ldr	r3, [pc, #720]	; (8002b58 <UART_SetConfig+0x300>)
 8002888:	4013      	ands	r3, r2
 800288a:	68fa      	ldr	r2, [r7, #12]
 800288c:	6812      	ldr	r2, [r2, #0]
 800288e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002890:	430b      	orrs	r3, r1
 8002892:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	685b      	ldr	r3, [r3, #4]
 800289a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	68da      	ldr	r2, [r3, #12]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	430a      	orrs	r2, r1
 80028a8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	699b      	ldr	r3, [r3, #24]
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4aa9      	ldr	r2, [pc, #676]	; (8002b5c <UART_SetConfig+0x304>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d004      	beq.n	80028c4 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	6a1b      	ldr	r3, [r3, #32]
 80028be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028c0:	4313      	orrs	r3, r2
 80028c2:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80028d4:	430a      	orrs	r2, r1
 80028d6:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4aa0      	ldr	r2, [pc, #640]	; (8002b60 <UART_SetConfig+0x308>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d126      	bne.n	8002930 <UART_SetConfig+0xd8>
 80028e2:	4ba0      	ldr	r3, [pc, #640]	; (8002b64 <UART_SetConfig+0x30c>)
 80028e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028e8:	f003 0303 	and.w	r3, r3, #3
 80028ec:	2b03      	cmp	r3, #3
 80028ee:	d81b      	bhi.n	8002928 <UART_SetConfig+0xd0>
 80028f0:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <UART_SetConfig+0xa0>)
 80028f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f6:	bf00      	nop
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002919 	.word	0x08002919
 8002900:	08002911 	.word	0x08002911
 8002904:	08002921 	.word	0x08002921
 8002908:	2301      	movs	r3, #1
 800290a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800290e:	e080      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002910:	2302      	movs	r3, #2
 8002912:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002916:	e07c      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002918:	2304      	movs	r3, #4
 800291a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800291e:	e078      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002920:	2308      	movs	r3, #8
 8002922:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002926:	e074      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002928:	2310      	movs	r3, #16
 800292a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800292e:	e070      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4a8c      	ldr	r2, [pc, #560]	; (8002b68 <UART_SetConfig+0x310>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d138      	bne.n	80029ac <UART_SetConfig+0x154>
 800293a:	4b8a      	ldr	r3, [pc, #552]	; (8002b64 <UART_SetConfig+0x30c>)
 800293c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002940:	f003 030c 	and.w	r3, r3, #12
 8002944:	2b0c      	cmp	r3, #12
 8002946:	d82d      	bhi.n	80029a4 <UART_SetConfig+0x14c>
 8002948:	a201      	add	r2, pc, #4	; (adr r2, 8002950 <UART_SetConfig+0xf8>)
 800294a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800294e:	bf00      	nop
 8002950:	08002985 	.word	0x08002985
 8002954:	080029a5 	.word	0x080029a5
 8002958:	080029a5 	.word	0x080029a5
 800295c:	080029a5 	.word	0x080029a5
 8002960:	08002995 	.word	0x08002995
 8002964:	080029a5 	.word	0x080029a5
 8002968:	080029a5 	.word	0x080029a5
 800296c:	080029a5 	.word	0x080029a5
 8002970:	0800298d 	.word	0x0800298d
 8002974:	080029a5 	.word	0x080029a5
 8002978:	080029a5 	.word	0x080029a5
 800297c:	080029a5 	.word	0x080029a5
 8002980:	0800299d 	.word	0x0800299d
 8002984:	2300      	movs	r3, #0
 8002986:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800298a:	e042      	b.n	8002a12 <UART_SetConfig+0x1ba>
 800298c:	2302      	movs	r3, #2
 800298e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002992:	e03e      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002994:	2304      	movs	r3, #4
 8002996:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800299a:	e03a      	b.n	8002a12 <UART_SetConfig+0x1ba>
 800299c:	2308      	movs	r3, #8
 800299e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029a2:	e036      	b.n	8002a12 <UART_SetConfig+0x1ba>
 80029a4:	2310      	movs	r3, #16
 80029a6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029aa:	e032      	b.n	8002a12 <UART_SetConfig+0x1ba>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	4a6a      	ldr	r2, [pc, #424]	; (8002b5c <UART_SetConfig+0x304>)
 80029b2:	4293      	cmp	r3, r2
 80029b4:	d12a      	bne.n	8002a0c <UART_SetConfig+0x1b4>
 80029b6:	4b6b      	ldr	r3, [pc, #428]	; (8002b64 <UART_SetConfig+0x30c>)
 80029b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029bc:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80029c0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029c4:	d01a      	beq.n	80029fc <UART_SetConfig+0x1a4>
 80029c6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80029ca:	d81b      	bhi.n	8002a04 <UART_SetConfig+0x1ac>
 80029cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d0:	d00c      	beq.n	80029ec <UART_SetConfig+0x194>
 80029d2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80029d6:	d815      	bhi.n	8002a04 <UART_SetConfig+0x1ac>
 80029d8:	2b00      	cmp	r3, #0
 80029da:	d003      	beq.n	80029e4 <UART_SetConfig+0x18c>
 80029dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80029e0:	d008      	beq.n	80029f4 <UART_SetConfig+0x19c>
 80029e2:	e00f      	b.n	8002a04 <UART_SetConfig+0x1ac>
 80029e4:	2300      	movs	r3, #0
 80029e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029ea:	e012      	b.n	8002a12 <UART_SetConfig+0x1ba>
 80029ec:	2302      	movs	r3, #2
 80029ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029f2:	e00e      	b.n	8002a12 <UART_SetConfig+0x1ba>
 80029f4:	2304      	movs	r3, #4
 80029f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80029fa:	e00a      	b.n	8002a12 <UART_SetConfig+0x1ba>
 80029fc:	2308      	movs	r3, #8
 80029fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a02:	e006      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002a04:	2310      	movs	r3, #16
 8002a06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002a0a:	e002      	b.n	8002a12 <UART_SetConfig+0x1ba>
 8002a0c:	2310      	movs	r3, #16
 8002a0e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a51      	ldr	r2, [pc, #324]	; (8002b5c <UART_SetConfig+0x304>)
 8002a18:	4293      	cmp	r3, r2
 8002a1a:	d17a      	bne.n	8002b12 <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002a1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002a20:	2b08      	cmp	r3, #8
 8002a22:	d824      	bhi.n	8002a6e <UART_SetConfig+0x216>
 8002a24:	a201      	add	r2, pc, #4	; (adr r2, 8002a2c <UART_SetConfig+0x1d4>)
 8002a26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a2a:	bf00      	nop
 8002a2c:	08002a51 	.word	0x08002a51
 8002a30:	08002a6f 	.word	0x08002a6f
 8002a34:	08002a59 	.word	0x08002a59
 8002a38:	08002a6f 	.word	0x08002a6f
 8002a3c:	08002a5f 	.word	0x08002a5f
 8002a40:	08002a6f 	.word	0x08002a6f
 8002a44:	08002a6f 	.word	0x08002a6f
 8002a48:	08002a6f 	.word	0x08002a6f
 8002a4c:	08002a67 	.word	0x08002a67
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002a50:	f7ff f87e 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8002a54:	61f8      	str	r0, [r7, #28]
        break;
 8002a56:	e010      	b.n	8002a7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002a58:	4b44      	ldr	r3, [pc, #272]	; (8002b6c <UART_SetConfig+0x314>)
 8002a5a:	61fb      	str	r3, [r7, #28]
        break;
 8002a5c:	e00d      	b.n	8002a7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002a5e:	f7fe ffdf 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 8002a62:	61f8      	str	r0, [r7, #28]
        break;
 8002a64:	e009      	b.n	8002a7a <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002a66:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a6a:	61fb      	str	r3, [r7, #28]
        break;
 8002a6c:	e005      	b.n	8002a7a <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002a72:	2301      	movs	r3, #1
 8002a74:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002a78:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002a7a:	69fb      	ldr	r3, [r7, #28]
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	f000 8107 	beq.w	8002c90 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	685a      	ldr	r2, [r3, #4]
 8002a86:	4613      	mov	r3, r2
 8002a88:	005b      	lsls	r3, r3, #1
 8002a8a:	4413      	add	r3, r2
 8002a8c:	69fa      	ldr	r2, [r7, #28]
 8002a8e:	429a      	cmp	r2, r3
 8002a90:	d305      	bcc.n	8002a9e <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002a92:	68fb      	ldr	r3, [r7, #12]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002a98:	69fa      	ldr	r2, [r7, #28]
 8002a9a:	429a      	cmp	r2, r3
 8002a9c:	d903      	bls.n	8002aa6 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002a9e:	2301      	movs	r3, #1
 8002aa0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002aa4:	e0f4      	b.n	8002c90 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002aa6:	69fb      	ldr	r3, [r7, #28]
 8002aa8:	2200      	movs	r2, #0
 8002aaa:	461c      	mov	r4, r3
 8002aac:	4615      	mov	r5, r2
 8002aae:	f04f 0200 	mov.w	r2, #0
 8002ab2:	f04f 0300 	mov.w	r3, #0
 8002ab6:	022b      	lsls	r3, r5, #8
 8002ab8:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002abc:	0222      	lsls	r2, r4, #8
 8002abe:	68f9      	ldr	r1, [r7, #12]
 8002ac0:	6849      	ldr	r1, [r1, #4]
 8002ac2:	0849      	lsrs	r1, r1, #1
 8002ac4:	2000      	movs	r0, #0
 8002ac6:	4688      	mov	r8, r1
 8002ac8:	4681      	mov	r9, r0
 8002aca:	eb12 0a08 	adds.w	sl, r2, r8
 8002ace:	eb43 0b09 	adc.w	fp, r3, r9
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	685b      	ldr	r3, [r3, #4]
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	603b      	str	r3, [r7, #0]
 8002ada:	607a      	str	r2, [r7, #4]
 8002adc:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002ae0:	4650      	mov	r0, sl
 8002ae2:	4659      	mov	r1, fp
 8002ae4:	f7fd fb74 	bl	80001d0 <__aeabi_uldivmod>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	460b      	mov	r3, r1
 8002aec:	4613      	mov	r3, r2
 8002aee:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002af0:	69bb      	ldr	r3, [r7, #24]
 8002af2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002af6:	d308      	bcc.n	8002b0a <UART_SetConfig+0x2b2>
 8002af8:	69bb      	ldr	r3, [r7, #24]
 8002afa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002afe:	d204      	bcs.n	8002b0a <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	69ba      	ldr	r2, [r7, #24]
 8002b06:	60da      	str	r2, [r3, #12]
 8002b08:	e0c2      	b.n	8002c90 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002b10:	e0be      	b.n	8002c90 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002b1a:	d16a      	bne.n	8002bf2 <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002b1c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002b20:	2b08      	cmp	r3, #8
 8002b22:	d834      	bhi.n	8002b8e <UART_SetConfig+0x336>
 8002b24:	a201      	add	r2, pc, #4	; (adr r2, 8002b2c <UART_SetConfig+0x2d4>)
 8002b26:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b2a:	bf00      	nop
 8002b2c:	08002b51 	.word	0x08002b51
 8002b30:	08002b71 	.word	0x08002b71
 8002b34:	08002b79 	.word	0x08002b79
 8002b38:	08002b8f 	.word	0x08002b8f
 8002b3c:	08002b7f 	.word	0x08002b7f
 8002b40:	08002b8f 	.word	0x08002b8f
 8002b44:	08002b8f 	.word	0x08002b8f
 8002b48:	08002b8f 	.word	0x08002b8f
 8002b4c:	08002b87 	.word	0x08002b87
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002b50:	f7fe fffe 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8002b54:	61f8      	str	r0, [r7, #28]
        break;
 8002b56:	e020      	b.n	8002b9a <UART_SetConfig+0x342>
 8002b58:	efff69f3 	.word	0xefff69f3
 8002b5c:	40008000 	.word	0x40008000
 8002b60:	40013800 	.word	0x40013800
 8002b64:	40021000 	.word	0x40021000
 8002b68:	40004400 	.word	0x40004400
 8002b6c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002b70:	f7ff f804 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 8002b74:	61f8      	str	r0, [r7, #28]
        break;
 8002b76:	e010      	b.n	8002b9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002b78:	4b4c      	ldr	r3, [pc, #304]	; (8002cac <UART_SetConfig+0x454>)
 8002b7a:	61fb      	str	r3, [r7, #28]
        break;
 8002b7c:	e00d      	b.n	8002b9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002b7e:	f7fe ff4f 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 8002b82:	61f8      	str	r0, [r7, #28]
        break;
 8002b84:	e009      	b.n	8002b9a <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002b86:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b8a:	61fb      	str	r3, [r7, #28]
        break;
 8002b8c:	e005      	b.n	8002b9a <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002b92:	2301      	movs	r3, #1
 8002b94:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002b98:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d077      	beq.n	8002c90 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	005a      	lsls	r2, r3, #1
 8002ba4:	68fb      	ldr	r3, [r7, #12]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	085b      	lsrs	r3, r3, #1
 8002baa:	441a      	add	r2, r3
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	685b      	ldr	r3, [r3, #4]
 8002bb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bb4:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002bb6:	69bb      	ldr	r3, [r7, #24]
 8002bb8:	2b0f      	cmp	r3, #15
 8002bba:	d916      	bls.n	8002bea <UART_SetConfig+0x392>
 8002bbc:	69bb      	ldr	r3, [r7, #24]
 8002bbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002bc2:	d212      	bcs.n	8002bea <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002bc4:	69bb      	ldr	r3, [r7, #24]
 8002bc6:	b29b      	uxth	r3, r3
 8002bc8:	f023 030f 	bic.w	r3, r3, #15
 8002bcc:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002bce:	69bb      	ldr	r3, [r7, #24]
 8002bd0:	085b      	lsrs	r3, r3, #1
 8002bd2:	b29b      	uxth	r3, r3
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	b29a      	uxth	r2, r3
 8002bda:	8afb      	ldrh	r3, [r7, #22]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	8afa      	ldrh	r2, [r7, #22]
 8002be6:	60da      	str	r2, [r3, #12]
 8002be8:	e052      	b.n	8002c90 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002bf0:	e04e      	b.n	8002c90 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002bf2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002bf6:	2b08      	cmp	r3, #8
 8002bf8:	d827      	bhi.n	8002c4a <UART_SetConfig+0x3f2>
 8002bfa:	a201      	add	r2, pc, #4	; (adr r2, 8002c00 <UART_SetConfig+0x3a8>)
 8002bfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c00:	08002c25 	.word	0x08002c25
 8002c04:	08002c2d 	.word	0x08002c2d
 8002c08:	08002c35 	.word	0x08002c35
 8002c0c:	08002c4b 	.word	0x08002c4b
 8002c10:	08002c3b 	.word	0x08002c3b
 8002c14:	08002c4b 	.word	0x08002c4b
 8002c18:	08002c4b 	.word	0x08002c4b
 8002c1c:	08002c4b 	.word	0x08002c4b
 8002c20:	08002c43 	.word	0x08002c43
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002c24:	f7fe ff94 	bl	8001b50 <HAL_RCC_GetPCLK1Freq>
 8002c28:	61f8      	str	r0, [r7, #28]
        break;
 8002c2a:	e014      	b.n	8002c56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002c2c:	f7fe ffa6 	bl	8001b7c <HAL_RCC_GetPCLK2Freq>
 8002c30:	61f8      	str	r0, [r7, #28]
        break;
 8002c32:	e010      	b.n	8002c56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002c34:	4b1d      	ldr	r3, [pc, #116]	; (8002cac <UART_SetConfig+0x454>)
 8002c36:	61fb      	str	r3, [r7, #28]
        break;
 8002c38:	e00d      	b.n	8002c56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002c3a:	f7fe fef1 	bl	8001a20 <HAL_RCC_GetSysClockFreq>
 8002c3e:	61f8      	str	r0, [r7, #28]
        break;
 8002c40:	e009      	b.n	8002c56 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002c42:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c46:	61fb      	str	r3, [r7, #28]
        break;
 8002c48:	e005      	b.n	8002c56 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002c4e:	2301      	movs	r3, #1
 8002c50:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002c54:	bf00      	nop
    }

    if (pclk != 0U)
 8002c56:	69fb      	ldr	r3, [r7, #28]
 8002c58:	2b00      	cmp	r3, #0
 8002c5a:	d019      	beq.n	8002c90 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	085a      	lsrs	r2, r3, #1
 8002c62:	69fb      	ldr	r3, [r7, #28]
 8002c64:	441a      	add	r2, r3
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	685b      	ldr	r3, [r3, #4]
 8002c6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c6e:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002c70:	69bb      	ldr	r3, [r7, #24]
 8002c72:	2b0f      	cmp	r3, #15
 8002c74:	d909      	bls.n	8002c8a <UART_SetConfig+0x432>
 8002c76:	69bb      	ldr	r3, [r7, #24]
 8002c78:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002c7c:	d205      	bcs.n	8002c8a <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	b29a      	uxth	r2, r3
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	60da      	str	r2, [r3, #12]
 8002c88:	e002      	b.n	8002c90 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	2200      	movs	r2, #0
 8002c94:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8002c9c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	3728      	adds	r7, #40	; 0x28
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002caa:	bf00      	nop
 8002cac:	00f42400 	.word	0x00f42400

08002cb0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	f003 0301 	and.w	r3, r3, #1
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d00a      	beq.n	8002cda <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	685b      	ldr	r3, [r3, #4]
 8002cca:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	430a      	orrs	r2, r1
 8002cd8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cde:	f003 0302 	and.w	r3, r3, #2
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d00a      	beq.n	8002cfc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d00:	f003 0304 	and.w	r3, r3, #4
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d00a      	beq.n	8002d1e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	685b      	ldr	r3, [r3, #4]
 8002d0e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	430a      	orrs	r2, r1
 8002d1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d22:	f003 0308 	and.w	r3, r3, #8
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d00a      	beq.n	8002d40 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	430a      	orrs	r2, r1
 8002d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d44:	f003 0310 	and.w	r3, r3, #16
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d00a      	beq.n	8002d62 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d66:	f003 0320 	and.w	r3, r3, #32
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d00a      	beq.n	8002d84 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	430a      	orrs	r2, r1
 8002d82:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d01a      	beq.n	8002dc6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	430a      	orrs	r2, r1
 8002da4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002daa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002dae:	d10a      	bne.n	8002dc6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	685b      	ldr	r3, [r3, #4]
 8002db6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	430a      	orrs	r2, r1
 8002dc4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002dce:	2b00      	cmp	r3, #0
 8002dd0:	d00a      	beq.n	8002de8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	430a      	orrs	r2, r1
 8002de6:	605a      	str	r2, [r3, #4]
  }
}
 8002de8:	bf00      	nop
 8002dea:	370c      	adds	r7, #12
 8002dec:	46bd      	mov	sp, r7
 8002dee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df2:	4770      	bx	lr

08002df4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002df4:	b580      	push	{r7, lr}
 8002df6:	b086      	sub	sp, #24
 8002df8:	af02      	add	r7, sp, #8
 8002dfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8002e04:	f7fd fe14 	bl	8000a30 <HAL_GetTick>
 8002e08:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	f003 0308 	and.w	r3, r3, #8
 8002e14:	2b08      	cmp	r3, #8
 8002e16:	d10e      	bne.n	8002e36 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e18:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	2200      	movs	r2, #0
 8002e22:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002e26:	6878      	ldr	r0, [r7, #4]
 8002e28:	f000 f82d 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d001      	beq.n	8002e36 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e32:	2303      	movs	r3, #3
 8002e34:	e023      	b.n	8002e7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	f003 0304 	and.w	r3, r3, #4
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d10e      	bne.n	8002e62 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002e44:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002e48:	9300      	str	r3, [sp, #0]
 8002e4a:	68fb      	ldr	r3, [r7, #12]
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	f000 f817 	bl	8002e86 <UART_WaitOnFlagUntilTimeout>
 8002e58:	4603      	mov	r3, r0
 8002e5a:	2b00      	cmp	r3, #0
 8002e5c:	d001      	beq.n	8002e62 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002e5e:	2303      	movs	r3, #3
 8002e60:	e00d      	b.n	8002e7e <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	2220      	movs	r2, #32
 8002e66:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	2220      	movs	r2, #32
 8002e6c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	2200      	movs	r2, #0
 8002e72:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2200      	movs	r2, #0
 8002e78:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8002e7c:	2300      	movs	r3, #0
}
 8002e7e:	4618      	mov	r0, r3
 8002e80:	3710      	adds	r7, #16
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b09c      	sub	sp, #112	; 0x70
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	60f8      	str	r0, [r7, #12]
 8002e8e:	60b9      	str	r1, [r7, #8]
 8002e90:	603b      	str	r3, [r7, #0]
 8002e92:	4613      	mov	r3, r2
 8002e94:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002e96:	e0a5      	b.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e98:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002e9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e9e:	f000 80a1 	beq.w	8002fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ea2:	f7fd fdc5 	bl	8000a30 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d302      	bcc.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0x32>
 8002eb2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002eb4:	2b00      	cmp	r3, #0
 8002eb6:	d13e      	bne.n	8002f36 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002eb8:	68fb      	ldr	r3, [r7, #12]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ebe:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002ec0:	e853 3f00 	ldrex	r3, [r3]
 8002ec4:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8002ec6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002ec8:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002ecc:	667b      	str	r3, [r7, #100]	; 0x64
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002ed6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002ed8:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002eda:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002edc:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8002ede:	e841 2300 	strex	r3, r2, [r1]
 8002ee2:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8002ee4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d1e6      	bne.n	8002eb8 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	3308      	adds	r3, #8
 8002ef0:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ef2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002ef4:	e853 3f00 	ldrex	r3, [r3]
 8002ef8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8002efa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002efc:	f023 0301 	bic.w	r3, r3, #1
 8002f00:	663b      	str	r3, [r7, #96]	; 0x60
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	3308      	adds	r3, #8
 8002f08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8002f0a:	64ba      	str	r2, [r7, #72]	; 0x48
 8002f0c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f0e:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8002f10:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f12:	e841 2300 	strex	r3, r2, [r1]
 8002f16:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8002f18:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002f1a:	2b00      	cmp	r3, #0
 8002f1c:	d1e5      	bne.n	8002eea <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	2220      	movs	r2, #32
 8002f22:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	2220      	movs	r2, #32
 8002f28:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2200      	movs	r2, #0
 8002f2e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8002f32:	2303      	movs	r3, #3
 8002f34:	e067      	b.n	8003006 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f003 0304 	and.w	r3, r3, #4
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d04f      	beq.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f52:	d147      	bne.n	8002fe4 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002f5c:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f66:	e853 3f00 	ldrex	r3, [r3]
 8002f6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8002f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f6e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8002f72:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	461a      	mov	r2, r3
 8002f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002f7c:	637b      	str	r3, [r7, #52]	; 0x34
 8002f7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002f80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002f82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002f84:	e841 2300 	strex	r3, r2, [r1]
 8002f88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8002f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d1e6      	bne.n	8002f5e <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	3308      	adds	r3, #8
 8002f96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	e853 3f00 	ldrex	r3, [r3]
 8002f9e:	613b      	str	r3, [r7, #16]
   return(result);
 8002fa0:	693b      	ldr	r3, [r7, #16]
 8002fa2:	f023 0301 	bic.w	r3, r3, #1
 8002fa6:	66bb      	str	r3, [r7, #104]	; 0x68
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	3308      	adds	r3, #8
 8002fae:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8002fb0:	623a      	str	r2, [r7, #32]
 8002fb2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fb4:	69f9      	ldr	r1, [r7, #28]
 8002fb6:	6a3a      	ldr	r2, [r7, #32]
 8002fb8:	e841 2300 	strex	r3, r2, [r1]
 8002fbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8002fbe:	69bb      	ldr	r3, [r7, #24]
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d1e5      	bne.n	8002f90 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	2220      	movs	r2, #32
 8002fc8:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2220      	movs	r2, #32
 8002fce:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2220      	movs	r2, #32
 8002fd4:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8002fe0:	2303      	movs	r3, #3
 8002fe2:	e010      	b.n	8003006 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	69da      	ldr	r2, [r3, #28]
 8002fea:	68bb      	ldr	r3, [r7, #8]
 8002fec:	4013      	ands	r3, r2
 8002fee:	68ba      	ldr	r2, [r7, #8]
 8002ff0:	429a      	cmp	r2, r3
 8002ff2:	bf0c      	ite	eq
 8002ff4:	2301      	moveq	r3, #1
 8002ff6:	2300      	movne	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	461a      	mov	r2, r3
 8002ffc:	79fb      	ldrb	r3, [r7, #7]
 8002ffe:	429a      	cmp	r2, r3
 8003000:	f43f af4a 	beq.w	8002e98 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003004:	2300      	movs	r3, #0
}
 8003006:	4618      	mov	r0, r3
 8003008:	3770      	adds	r7, #112	; 0x70
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
	...

08003010 <__NVIC_SetPriority>:
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	4603      	mov	r3, r0
 8003018:	6039      	str	r1, [r7, #0]
 800301a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800301c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003020:	2b00      	cmp	r3, #0
 8003022:	db0a      	blt.n	800303a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	b2da      	uxtb	r2, r3
 8003028:	490c      	ldr	r1, [pc, #48]	; (800305c <__NVIC_SetPriority+0x4c>)
 800302a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800302e:	0112      	lsls	r2, r2, #4
 8003030:	b2d2      	uxtb	r2, r2
 8003032:	440b      	add	r3, r1
 8003034:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003038:	e00a      	b.n	8003050 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	b2da      	uxtb	r2, r3
 800303e:	4908      	ldr	r1, [pc, #32]	; (8003060 <__NVIC_SetPriority+0x50>)
 8003040:	79fb      	ldrb	r3, [r7, #7]
 8003042:	f003 030f 	and.w	r3, r3, #15
 8003046:	3b04      	subs	r3, #4
 8003048:	0112      	lsls	r2, r2, #4
 800304a:	b2d2      	uxtb	r2, r2
 800304c:	440b      	add	r3, r1
 800304e:	761a      	strb	r2, [r3, #24]
}
 8003050:	bf00      	nop
 8003052:	370c      	adds	r7, #12
 8003054:	46bd      	mov	sp, r7
 8003056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305a:	4770      	bx	lr
 800305c:	e000e100 	.word	0xe000e100
 8003060:	e000ed00 	.word	0xe000ed00

08003064 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003064:	b580      	push	{r7, lr}
 8003066:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003068:	4b05      	ldr	r3, [pc, #20]	; (8003080 <SysTick_Handler+0x1c>)
 800306a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800306c:	f001 fd28 	bl	8004ac0 <xTaskGetSchedulerState>
 8003070:	4603      	mov	r3, r0
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003076:	f002 fb0f 	bl	8005698 <xPortSysTickHandler>
  }
}
 800307a:	bf00      	nop
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	e000e010 	.word	0xe000e010

08003084 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003084:	b580      	push	{r7, lr}
 8003086:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003088:	2100      	movs	r1, #0
 800308a:	f06f 0004 	mvn.w	r0, #4
 800308e:	f7ff ffbf 	bl	8003010 <__NVIC_SetPriority>
#endif
}
 8003092:	bf00      	nop
 8003094:	bd80      	pop	{r7, pc}
	...

08003098 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800309e:	f3ef 8305 	mrs	r3, IPSR
 80030a2:	603b      	str	r3, [r7, #0]
  return(result);
 80030a4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	d003      	beq.n	80030b2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80030aa:	f06f 0305 	mvn.w	r3, #5
 80030ae:	607b      	str	r3, [r7, #4]
 80030b0:	e00c      	b.n	80030cc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80030b2:	4b0a      	ldr	r3, [pc, #40]	; (80030dc <osKernelInitialize+0x44>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d105      	bne.n	80030c6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80030ba:	4b08      	ldr	r3, [pc, #32]	; (80030dc <osKernelInitialize+0x44>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80030c0:	2300      	movs	r3, #0
 80030c2:	607b      	str	r3, [r7, #4]
 80030c4:	e002      	b.n	80030cc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80030c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80030ca:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80030cc:	687b      	ldr	r3, [r7, #4]
}
 80030ce:	4618      	mov	r0, r3
 80030d0:	370c      	adds	r7, #12
 80030d2:	46bd      	mov	sp, r7
 80030d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d8:	4770      	bx	lr
 80030da:	bf00      	nop
 80030dc:	20000168 	.word	0x20000168

080030e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b082      	sub	sp, #8
 80030e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80030e6:	f3ef 8305 	mrs	r3, IPSR
 80030ea:	603b      	str	r3, [r7, #0]
  return(result);
 80030ec:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d003      	beq.n	80030fa <osKernelStart+0x1a>
    stat = osErrorISR;
 80030f2:	f06f 0305 	mvn.w	r3, #5
 80030f6:	607b      	str	r3, [r7, #4]
 80030f8:	e010      	b.n	800311c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80030fa:	4b0b      	ldr	r3, [pc, #44]	; (8003128 <osKernelStart+0x48>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	2b01      	cmp	r3, #1
 8003100:	d109      	bne.n	8003116 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8003102:	f7ff ffbf 	bl	8003084 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8003106:	4b08      	ldr	r3, [pc, #32]	; (8003128 <osKernelStart+0x48>)
 8003108:	2202      	movs	r2, #2
 800310a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800310c:	f001 f87c 	bl	8004208 <vTaskStartScheduler>
      stat = osOK;
 8003110:	2300      	movs	r3, #0
 8003112:	607b      	str	r3, [r7, #4]
 8003114:	e002      	b.n	800311c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8003116:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800311a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800311c:	687b      	ldr	r3, [r7, #4]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3708      	adds	r7, #8
 8003122:	46bd      	mov	sp, r7
 8003124:	bd80      	pop	{r7, pc}
 8003126:	bf00      	nop
 8003128:	20000168 	.word	0x20000168

0800312c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800312c:	b580      	push	{r7, lr}
 800312e:	b08e      	sub	sp, #56	; 0x38
 8003130:	af04      	add	r7, sp, #16
 8003132:	60f8      	str	r0, [r7, #12]
 8003134:	60b9      	str	r1, [r7, #8]
 8003136:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003138:	2300      	movs	r3, #0
 800313a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800313c:	f3ef 8305 	mrs	r3, IPSR
 8003140:	617b      	str	r3, [r7, #20]
  return(result);
 8003142:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003144:	2b00      	cmp	r3, #0
 8003146:	d17e      	bne.n	8003246 <osThreadNew+0x11a>
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	2b00      	cmp	r3, #0
 800314c:	d07b      	beq.n	8003246 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003152:	2318      	movs	r3, #24
 8003154:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003156:	2300      	movs	r3, #0
 8003158:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800315a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800315e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2b00      	cmp	r3, #0
 8003164:	d045      	beq.n	80031f2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d002      	beq.n	8003174 <osThreadNew+0x48>
        name = attr->name;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	699b      	ldr	r3, [r3, #24]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d002      	beq.n	8003182 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	699b      	ldr	r3, [r3, #24]
 8003180:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d008      	beq.n	800319a <osThreadNew+0x6e>
 8003188:	69fb      	ldr	r3, [r7, #28]
 800318a:	2b38      	cmp	r3, #56	; 0x38
 800318c:	d805      	bhi.n	800319a <osThreadNew+0x6e>
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f003 0301 	and.w	r3, r3, #1
 8003196:	2b00      	cmp	r3, #0
 8003198:	d001      	beq.n	800319e <osThreadNew+0x72>
        return (NULL);
 800319a:	2300      	movs	r3, #0
 800319c:	e054      	b.n	8003248 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d003      	beq.n	80031ae <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	089b      	lsrs	r3, r3, #2
 80031ac:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	689b      	ldr	r3, [r3, #8]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d00e      	beq.n	80031d4 <osThreadNew+0xa8>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2bbb      	cmp	r3, #187	; 0xbb
 80031bc:	d90a      	bls.n	80031d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d006      	beq.n	80031d4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	695b      	ldr	r3, [r3, #20]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d002      	beq.n	80031d4 <osThreadNew+0xa8>
        mem = 1;
 80031ce:	2301      	movs	r3, #1
 80031d0:	61bb      	str	r3, [r7, #24]
 80031d2:	e010      	b.n	80031f6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	689b      	ldr	r3, [r3, #8]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d10c      	bne.n	80031f6 <osThreadNew+0xca>
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d108      	bne.n	80031f6 <osThreadNew+0xca>
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	691b      	ldr	r3, [r3, #16]
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d104      	bne.n	80031f6 <osThreadNew+0xca>
          mem = 0;
 80031ec:	2300      	movs	r3, #0
 80031ee:	61bb      	str	r3, [r7, #24]
 80031f0:	e001      	b.n	80031f6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80031f2:	2300      	movs	r3, #0
 80031f4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	2b01      	cmp	r3, #1
 80031fa:	d110      	bne.n	800321e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003200:	687a      	ldr	r2, [r7, #4]
 8003202:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003204:	9202      	str	r2, [sp, #8]
 8003206:	9301      	str	r3, [sp, #4]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	9300      	str	r3, [sp, #0]
 800320c:	68bb      	ldr	r3, [r7, #8]
 800320e:	6a3a      	ldr	r2, [r7, #32]
 8003210:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003212:	68f8      	ldr	r0, [r7, #12]
 8003214:	f000 fe0c 	bl	8003e30 <xTaskCreateStatic>
 8003218:	4603      	mov	r3, r0
 800321a:	613b      	str	r3, [r7, #16]
 800321c:	e013      	b.n	8003246 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	2b00      	cmp	r3, #0
 8003222:	d110      	bne.n	8003246 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003224:	6a3b      	ldr	r3, [r7, #32]
 8003226:	b29a      	uxth	r2, r3
 8003228:	f107 0310 	add.w	r3, r7, #16
 800322c:	9301      	str	r3, [sp, #4]
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	9300      	str	r3, [sp, #0]
 8003232:	68bb      	ldr	r3, [r7, #8]
 8003234:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003236:	68f8      	ldr	r0, [r7, #12]
 8003238:	f000 fe57 	bl	8003eea <xTaskCreate>
 800323c:	4603      	mov	r3, r0
 800323e:	2b01      	cmp	r3, #1
 8003240:	d001      	beq.n	8003246 <osThreadNew+0x11a>
            hTask = NULL;
 8003242:	2300      	movs	r3, #0
 8003244:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003246:	693b      	ldr	r3, [r7, #16]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3728      	adds	r7, #40	; 0x28
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}

08003250 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003250:	b580      	push	{r7, lr}
 8003252:	b084      	sub	sp, #16
 8003254:	af00      	add	r7, sp, #0
 8003256:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003258:	f3ef 8305 	mrs	r3, IPSR
 800325c:	60bb      	str	r3, [r7, #8]
  return(result);
 800325e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003260:	2b00      	cmp	r3, #0
 8003262:	d003      	beq.n	800326c <osDelay+0x1c>
    stat = osErrorISR;
 8003264:	f06f 0305 	mvn.w	r3, #5
 8003268:	60fb      	str	r3, [r7, #12]
 800326a:	e007      	b.n	800327c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 800326c:	2300      	movs	r3, #0
 800326e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <osDelay+0x2c>
      vTaskDelay(ticks);
 8003276:	6878      	ldr	r0, [r7, #4]
 8003278:	f000 ff92 	bl	80041a0 <vTaskDelay>
    }
  }

  return (stat);
 800327c:	68fb      	ldr	r3, [r7, #12]
}
 800327e:	4618      	mov	r0, r3
 8003280:	3710      	adds	r7, #16
 8003282:	46bd      	mov	sp, r7
 8003284:	bd80      	pop	{r7, pc}
	...

08003288 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	60f8      	str	r0, [r7, #12]
 8003290:	60b9      	str	r1, [r7, #8]
 8003292:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	4a07      	ldr	r2, [pc, #28]	; (80032b4 <vApplicationGetIdleTaskMemory+0x2c>)
 8003298:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800329a:	68bb      	ldr	r3, [r7, #8]
 800329c:	4a06      	ldr	r2, [pc, #24]	; (80032b8 <vApplicationGetIdleTaskMemory+0x30>)
 800329e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2280      	movs	r2, #128	; 0x80
 80032a4:	601a      	str	r2, [r3, #0]
}
 80032a6:	bf00      	nop
 80032a8:	3714      	adds	r7, #20
 80032aa:	46bd      	mov	sp, r7
 80032ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b0:	4770      	bx	lr
 80032b2:	bf00      	nop
 80032b4:	2000016c 	.word	0x2000016c
 80032b8:	20000228 	.word	0x20000228

080032bc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80032bc:	b480      	push	{r7}
 80032be:	b085      	sub	sp, #20
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	4a07      	ldr	r2, [pc, #28]	; (80032e8 <vApplicationGetTimerTaskMemory+0x2c>)
 80032cc:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	4a06      	ldr	r2, [pc, #24]	; (80032ec <vApplicationGetTimerTaskMemory+0x30>)
 80032d2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80032da:	601a      	str	r2, [r3, #0]
}
 80032dc:	bf00      	nop
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	20000428 	.word	0x20000428
 80032ec:	200004e4 	.word	0x200004e4

080032f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80032f0:	b480      	push	{r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	f103 0208 	add.w	r2, r3, #8
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003308:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	f103 0208 	add.w	r2, r3, #8
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	f103 0208 	add.w	r2, r3, #8
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800332e:	4770      	bx	lr

08003330 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003330:	b480      	push	{r7}
 8003332:	b083      	sub	sp, #12
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2200      	movs	r2, #0
 800333c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800333e:	bf00      	nop
 8003340:	370c      	adds	r7, #12
 8003342:	46bd      	mov	sp, r7
 8003344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003348:	4770      	bx	lr

0800334a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800334a:	b480      	push	{r7}
 800334c:	b085      	sub	sp, #20
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
 8003352:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	685b      	ldr	r3, [r3, #4]
 8003358:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800335a:	683b      	ldr	r3, [r7, #0]
 800335c:	68fa      	ldr	r2, [r7, #12]
 800335e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	689a      	ldr	r2, [r3, #8]
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	683a      	ldr	r2, [r7, #0]
 800336e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	683a      	ldr	r2, [r7, #0]
 8003374:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	687a      	ldr	r2, [r7, #4]
 800337a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	1c5a      	adds	r2, r3, #1
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	601a      	str	r2, [r3, #0]
}
 8003386:	bf00      	nop
 8003388:	3714      	adds	r7, #20
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr

08003392 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003392:	b480      	push	{r7}
 8003394:	b085      	sub	sp, #20
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
 800339a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80033a2:	68bb      	ldr	r3, [r7, #8]
 80033a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80033a8:	d103      	bne.n	80033b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	691b      	ldr	r3, [r3, #16]
 80033ae:	60fb      	str	r3, [r7, #12]
 80033b0:	e00c      	b.n	80033cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	3308      	adds	r3, #8
 80033b6:	60fb      	str	r3, [r7, #12]
 80033b8:	e002      	b.n	80033c0 <vListInsert+0x2e>
 80033ba:	68fb      	ldr	r3, [r7, #12]
 80033bc:	685b      	ldr	r3, [r3, #4]
 80033be:	60fb      	str	r3, [r7, #12]
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	685b      	ldr	r3, [r3, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	68ba      	ldr	r2, [r7, #8]
 80033c8:	429a      	cmp	r2, r3
 80033ca:	d2f6      	bcs.n	80033ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	685a      	ldr	r2, [r3, #4]
 80033d0:	683b      	ldr	r3, [r7, #0]
 80033d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	685b      	ldr	r3, [r3, #4]
 80033d8:	683a      	ldr	r2, [r7, #0]
 80033da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	68fa      	ldr	r2, [r7, #12]
 80033e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	683a      	ldr	r2, [r7, #0]
 80033e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80033e8:	683b      	ldr	r3, [r7, #0]
 80033ea:	687a      	ldr	r2, [r7, #4]
 80033ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	1c5a      	adds	r2, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	601a      	str	r2, [r3, #0]
}
 80033f8:	bf00      	nop
 80033fa:	3714      	adds	r7, #20
 80033fc:	46bd      	mov	sp, r7
 80033fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003402:	4770      	bx	lr

08003404 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003404:	b480      	push	{r7}
 8003406:	b085      	sub	sp, #20
 8003408:	af00      	add	r7, sp, #0
 800340a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	691b      	ldr	r3, [r3, #16]
 8003410:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	685b      	ldr	r3, [r3, #4]
 8003416:	687a      	ldr	r2, [r7, #4]
 8003418:	6892      	ldr	r2, [r2, #8]
 800341a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	689b      	ldr	r3, [r3, #8]
 8003420:	687a      	ldr	r2, [r7, #4]
 8003422:	6852      	ldr	r2, [r2, #4]
 8003424:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	687a      	ldr	r2, [r7, #4]
 800342c:	429a      	cmp	r2, r3
 800342e:	d103      	bne.n	8003438 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2200      	movs	r2, #0
 800343c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	1e5a      	subs	r2, r3, #1
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
}
 800344c:	4618      	mov	r0, r3
 800344e:	3714      	adds	r7, #20
 8003450:	46bd      	mov	sp, r7
 8003452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003456:	4770      	bx	lr

08003458 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003458:	b580      	push	{r7, lr}
 800345a:	b084      	sub	sp, #16
 800345c:	af00      	add	r7, sp, #0
 800345e:	6078      	str	r0, [r7, #4]
 8003460:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d10a      	bne.n	8003482 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800346c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003470:	f383 8811 	msr	BASEPRI, r3
 8003474:	f3bf 8f6f 	isb	sy
 8003478:	f3bf 8f4f 	dsb	sy
 800347c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800347e:	bf00      	nop
 8003480:	e7fe      	b.n	8003480 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003482:	f002 f877 	bl	8005574 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800348e:	68f9      	ldr	r1, [r7, #12]
 8003490:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003492:	fb01 f303 	mul.w	r3, r1, r3
 8003496:	441a      	add	r2, r3
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	2200      	movs	r2, #0
 80034a0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80034b2:	3b01      	subs	r3, #1
 80034b4:	68f9      	ldr	r1, [r7, #12]
 80034b6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80034b8:	fb01 f303 	mul.w	r3, r1, r3
 80034bc:	441a      	add	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	22ff      	movs	r2, #255	; 0xff
 80034c6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	22ff      	movs	r2, #255	; 0xff
 80034ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d114      	bne.n	8003502 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d01a      	beq.n	8003516 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	3310      	adds	r3, #16
 80034e4:	4618      	mov	r0, r3
 80034e6:	f001 f929 	bl	800473c <xTaskRemoveFromEventList>
 80034ea:	4603      	mov	r3, r0
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d012      	beq.n	8003516 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80034f0:	4b0c      	ldr	r3, [pc, #48]	; (8003524 <xQueueGenericReset+0xcc>)
 80034f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	f3bf 8f4f 	dsb	sy
 80034fc:	f3bf 8f6f 	isb	sy
 8003500:	e009      	b.n	8003516 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	3310      	adds	r3, #16
 8003506:	4618      	mov	r0, r3
 8003508:	f7ff fef2 	bl	80032f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	3324      	adds	r3, #36	; 0x24
 8003510:	4618      	mov	r0, r3
 8003512:	f7ff feed 	bl	80032f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003516:	f002 f85d 	bl	80055d4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800351a:	2301      	movs	r3, #1
}
 800351c:	4618      	mov	r0, r3
 800351e:	3710      	adds	r7, #16
 8003520:	46bd      	mov	sp, r7
 8003522:	bd80      	pop	{r7, pc}
 8003524:	e000ed04 	.word	0xe000ed04

08003528 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003528:	b580      	push	{r7, lr}
 800352a:	b08e      	sub	sp, #56	; 0x38
 800352c:	af02      	add	r7, sp, #8
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]
 8003534:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003536:	68fb      	ldr	r3, [r7, #12]
 8003538:	2b00      	cmp	r3, #0
 800353a:	d10a      	bne.n	8003552 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800353c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003540:	f383 8811 	msr	BASEPRI, r3
 8003544:	f3bf 8f6f 	isb	sy
 8003548:	f3bf 8f4f 	dsb	sy
 800354c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800354e:	bf00      	nop
 8003550:	e7fe      	b.n	8003550 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003552:	683b      	ldr	r3, [r7, #0]
 8003554:	2b00      	cmp	r3, #0
 8003556:	d10a      	bne.n	800356e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003558:	f04f 0350 	mov.w	r3, #80	; 0x50
 800355c:	f383 8811 	msr	BASEPRI, r3
 8003560:	f3bf 8f6f 	isb	sy
 8003564:	f3bf 8f4f 	dsb	sy
 8003568:	627b      	str	r3, [r7, #36]	; 0x24
}
 800356a:	bf00      	nop
 800356c:	e7fe      	b.n	800356c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d002      	beq.n	800357a <xQueueGenericCreateStatic+0x52>
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <xQueueGenericCreateStatic+0x56>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <xQueueGenericCreateStatic+0x58>
 800357e:	2300      	movs	r3, #0
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10a      	bne.n	800359a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003584:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003588:	f383 8811 	msr	BASEPRI, r3
 800358c:	f3bf 8f6f 	isb	sy
 8003590:	f3bf 8f4f 	dsb	sy
 8003594:	623b      	str	r3, [r7, #32]
}
 8003596:	bf00      	nop
 8003598:	e7fe      	b.n	8003598 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d102      	bne.n	80035a6 <xQueueGenericCreateStatic+0x7e>
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <xQueueGenericCreateStatic+0x82>
 80035a6:	2301      	movs	r3, #1
 80035a8:	e000      	b.n	80035ac <xQueueGenericCreateStatic+0x84>
 80035aa:	2300      	movs	r3, #0
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d10a      	bne.n	80035c6 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 80035b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035b4:	f383 8811 	msr	BASEPRI, r3
 80035b8:	f3bf 8f6f 	isb	sy
 80035bc:	f3bf 8f4f 	dsb	sy
 80035c0:	61fb      	str	r3, [r7, #28]
}
 80035c2:	bf00      	nop
 80035c4:	e7fe      	b.n	80035c4 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80035c6:	2350      	movs	r3, #80	; 0x50
 80035c8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	2b50      	cmp	r3, #80	; 0x50
 80035ce:	d00a      	beq.n	80035e6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80035d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80035d4:	f383 8811 	msr	BASEPRI, r3
 80035d8:	f3bf 8f6f 	isb	sy
 80035dc:	f3bf 8f4f 	dsb	sy
 80035e0:	61bb      	str	r3, [r7, #24]
}
 80035e2:	bf00      	nop
 80035e4:	e7fe      	b.n	80035e4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80035e6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80035ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d00d      	beq.n	800360e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80035f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80035f4:	2201      	movs	r2, #1
 80035f6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80035fa:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80035fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003600:	9300      	str	r3, [sp, #0]
 8003602:	4613      	mov	r3, r2
 8003604:	687a      	ldr	r2, [r7, #4]
 8003606:	68b9      	ldr	r1, [r7, #8]
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f000 f805 	bl	8003618 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800360e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003610:	4618      	mov	r0, r3
 8003612:	3730      	adds	r7, #48	; 0x30
 8003614:	46bd      	mov	sp, r7
 8003616:	bd80      	pop	{r7, pc}

08003618 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003618:	b580      	push	{r7, lr}
 800361a:	b084      	sub	sp, #16
 800361c:	af00      	add	r7, sp, #0
 800361e:	60f8      	str	r0, [r7, #12]
 8003620:	60b9      	str	r1, [r7, #8]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d103      	bne.n	8003634 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800362c:	69bb      	ldr	r3, [r7, #24]
 800362e:	69ba      	ldr	r2, [r7, #24]
 8003630:	601a      	str	r2, [r3, #0]
 8003632:	e002      	b.n	800363a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003634:	69bb      	ldr	r3, [r7, #24]
 8003636:	687a      	ldr	r2, [r7, #4]
 8003638:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800363a:	69bb      	ldr	r3, [r7, #24]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003640:	69bb      	ldr	r3, [r7, #24]
 8003642:	68ba      	ldr	r2, [r7, #8]
 8003644:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003646:	2101      	movs	r1, #1
 8003648:	69b8      	ldr	r0, [r7, #24]
 800364a:	f7ff ff05 	bl	8003458 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800364e:	69bb      	ldr	r3, [r7, #24]
 8003650:	78fa      	ldrb	r2, [r7, #3]
 8003652:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003656:	bf00      	nop
 8003658:	3710      	adds	r7, #16
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}
	...

08003660 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b08e      	sub	sp, #56	; 0x38
 8003664:	af00      	add	r7, sp, #0
 8003666:	60f8      	str	r0, [r7, #12]
 8003668:	60b9      	str	r1, [r7, #8]
 800366a:	607a      	str	r2, [r7, #4]
 800366c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800366e:	2300      	movs	r3, #0
 8003670:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003672:	68fb      	ldr	r3, [r7, #12]
 8003674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <xQueueGenericSend+0x32>
	__asm volatile
 800367c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003680:	f383 8811 	msr	BASEPRI, r3
 8003684:	f3bf 8f6f 	isb	sy
 8003688:	f3bf 8f4f 	dsb	sy
 800368c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800368e:	bf00      	nop
 8003690:	e7fe      	b.n	8003690 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003692:	68bb      	ldr	r3, [r7, #8]
 8003694:	2b00      	cmp	r3, #0
 8003696:	d103      	bne.n	80036a0 <xQueueGenericSend+0x40>
 8003698:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800369a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <xQueueGenericSend+0x44>
 80036a0:	2301      	movs	r3, #1
 80036a2:	e000      	b.n	80036a6 <xQueueGenericSend+0x46>
 80036a4:	2300      	movs	r3, #0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d10a      	bne.n	80036c0 <xQueueGenericSend+0x60>
	__asm volatile
 80036aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036ae:	f383 8811 	msr	BASEPRI, r3
 80036b2:	f3bf 8f6f 	isb	sy
 80036b6:	f3bf 8f4f 	dsb	sy
 80036ba:	627b      	str	r3, [r7, #36]	; 0x24
}
 80036bc:	bf00      	nop
 80036be:	e7fe      	b.n	80036be <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d103      	bne.n	80036ce <xQueueGenericSend+0x6e>
 80036c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80036ca:	2b01      	cmp	r3, #1
 80036cc:	d101      	bne.n	80036d2 <xQueueGenericSend+0x72>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <xQueueGenericSend+0x74>
 80036d2:	2300      	movs	r3, #0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d10a      	bne.n	80036ee <xQueueGenericSend+0x8e>
	__asm volatile
 80036d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036dc:	f383 8811 	msr	BASEPRI, r3
 80036e0:	f3bf 8f6f 	isb	sy
 80036e4:	f3bf 8f4f 	dsb	sy
 80036e8:	623b      	str	r3, [r7, #32]
}
 80036ea:	bf00      	nop
 80036ec:	e7fe      	b.n	80036ec <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80036ee:	f001 f9e7 	bl	8004ac0 <xTaskGetSchedulerState>
 80036f2:	4603      	mov	r3, r0
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d102      	bne.n	80036fe <xQueueGenericSend+0x9e>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d101      	bne.n	8003702 <xQueueGenericSend+0xa2>
 80036fe:	2301      	movs	r3, #1
 8003700:	e000      	b.n	8003704 <xQueueGenericSend+0xa4>
 8003702:	2300      	movs	r3, #0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d10a      	bne.n	800371e <xQueueGenericSend+0xbe>
	__asm volatile
 8003708:	f04f 0350 	mov.w	r3, #80	; 0x50
 800370c:	f383 8811 	msr	BASEPRI, r3
 8003710:	f3bf 8f6f 	isb	sy
 8003714:	f3bf 8f4f 	dsb	sy
 8003718:	61fb      	str	r3, [r7, #28]
}
 800371a:	bf00      	nop
 800371c:	e7fe      	b.n	800371c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800371e:	f001 ff29 	bl	8005574 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003722:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003724:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003726:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800372a:	429a      	cmp	r2, r3
 800372c:	d302      	bcc.n	8003734 <xQueueGenericSend+0xd4>
 800372e:	683b      	ldr	r3, [r7, #0]
 8003730:	2b02      	cmp	r3, #2
 8003732:	d129      	bne.n	8003788 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003734:	683a      	ldr	r2, [r7, #0]
 8003736:	68b9      	ldr	r1, [r7, #8]
 8003738:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800373a:	f000 fa0b 	bl	8003b54 <prvCopyDataToQueue>
 800373e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	d010      	beq.n	800376a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003748:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800374a:	3324      	adds	r3, #36	; 0x24
 800374c:	4618      	mov	r0, r3
 800374e:	f000 fff5 	bl	800473c <xTaskRemoveFromEventList>
 8003752:	4603      	mov	r3, r0
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003758:	4b3f      	ldr	r3, [pc, #252]	; (8003858 <xQueueGenericSend+0x1f8>)
 800375a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800375e:	601a      	str	r2, [r3, #0]
 8003760:	f3bf 8f4f 	dsb	sy
 8003764:	f3bf 8f6f 	isb	sy
 8003768:	e00a      	b.n	8003780 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800376a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800376c:	2b00      	cmp	r3, #0
 800376e:	d007      	beq.n	8003780 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003770:	4b39      	ldr	r3, [pc, #228]	; (8003858 <xQueueGenericSend+0x1f8>)
 8003772:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	f3bf 8f4f 	dsb	sy
 800377c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003780:	f001 ff28 	bl	80055d4 <vPortExitCritical>
				return pdPASS;
 8003784:	2301      	movs	r3, #1
 8003786:	e063      	b.n	8003850 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2b00      	cmp	r3, #0
 800378c:	d103      	bne.n	8003796 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800378e:	f001 ff21 	bl	80055d4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003792:	2300      	movs	r3, #0
 8003794:	e05c      	b.n	8003850 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003796:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003798:	2b00      	cmp	r3, #0
 800379a:	d106      	bne.n	80037aa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800379c:	f107 0314 	add.w	r3, r7, #20
 80037a0:	4618      	mov	r0, r3
 80037a2:	f001 f82f 	bl	8004804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80037a6:	2301      	movs	r3, #1
 80037a8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80037aa:	f001 ff13 	bl	80055d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80037ae:	f000 fd9b 	bl	80042e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80037b2:	f001 fedf 	bl	8005574 <vPortEnterCritical>
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80037bc:	b25b      	sxtb	r3, r3
 80037be:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037c2:	d103      	bne.n	80037cc <xQueueGenericSend+0x16c>
 80037c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80037cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80037d2:	b25b      	sxtb	r3, r3
 80037d4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037d8:	d103      	bne.n	80037e2 <xQueueGenericSend+0x182>
 80037da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037dc:	2200      	movs	r2, #0
 80037de:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80037e2:	f001 fef7 	bl	80055d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80037e6:	1d3a      	adds	r2, r7, #4
 80037e8:	f107 0314 	add.w	r3, r7, #20
 80037ec:	4611      	mov	r1, r2
 80037ee:	4618      	mov	r0, r3
 80037f0:	f001 f81e 	bl	8004830 <xTaskCheckForTimeOut>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d124      	bne.n	8003844 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80037fa:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80037fc:	f000 faa2 	bl	8003d44 <prvIsQueueFull>
 8003800:	4603      	mov	r3, r0
 8003802:	2b00      	cmp	r3, #0
 8003804:	d018      	beq.n	8003838 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003808:	3310      	adds	r3, #16
 800380a:	687a      	ldr	r2, [r7, #4]
 800380c:	4611      	mov	r1, r2
 800380e:	4618      	mov	r0, r3
 8003810:	f000 ff44 	bl	800469c <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003814:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003816:	f000 fa2d 	bl	8003c74 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800381a:	f000 fd73 	bl	8004304 <xTaskResumeAll>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	f47f af7c 	bne.w	800371e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003826:	4b0c      	ldr	r3, [pc, #48]	; (8003858 <xQueueGenericSend+0x1f8>)
 8003828:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	f3bf 8f4f 	dsb	sy
 8003832:	f3bf 8f6f 	isb	sy
 8003836:	e772      	b.n	800371e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003838:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800383a:	f000 fa1b 	bl	8003c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800383e:	f000 fd61 	bl	8004304 <xTaskResumeAll>
 8003842:	e76c      	b.n	800371e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003844:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003846:	f000 fa15 	bl	8003c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800384a:	f000 fd5b 	bl	8004304 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800384e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003850:	4618      	mov	r0, r3
 8003852:	3738      	adds	r7, #56	; 0x38
 8003854:	46bd      	mov	sp, r7
 8003856:	bd80      	pop	{r7, pc}
 8003858:	e000ed04 	.word	0xe000ed04

0800385c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b090      	sub	sp, #64	; 0x40
 8003860:	af00      	add	r7, sp, #0
 8003862:	60f8      	str	r0, [r7, #12]
 8003864:	60b9      	str	r1, [r7, #8]
 8003866:	607a      	str	r2, [r7, #4]
 8003868:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 800386e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003870:	2b00      	cmp	r3, #0
 8003872:	d10a      	bne.n	800388a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003874:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003878:	f383 8811 	msr	BASEPRI, r3
 800387c:	f3bf 8f6f 	isb	sy
 8003880:	f3bf 8f4f 	dsb	sy
 8003884:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003886:	bf00      	nop
 8003888:	e7fe      	b.n	8003888 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800388a:	68bb      	ldr	r3, [r7, #8]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d103      	bne.n	8003898 <xQueueGenericSendFromISR+0x3c>
 8003890:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003892:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003894:	2b00      	cmp	r3, #0
 8003896:	d101      	bne.n	800389c <xQueueGenericSendFromISR+0x40>
 8003898:	2301      	movs	r3, #1
 800389a:	e000      	b.n	800389e <xQueueGenericSendFromISR+0x42>
 800389c:	2300      	movs	r3, #0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d10a      	bne.n	80038b8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 80038a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038a6:	f383 8811 	msr	BASEPRI, r3
 80038aa:	f3bf 8f6f 	isb	sy
 80038ae:	f3bf 8f4f 	dsb	sy
 80038b2:	627b      	str	r3, [r7, #36]	; 0x24
}
 80038b4:	bf00      	nop
 80038b6:	e7fe      	b.n	80038b6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d103      	bne.n	80038c6 <xQueueGenericSendFromISR+0x6a>
 80038be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038c2:	2b01      	cmp	r3, #1
 80038c4:	d101      	bne.n	80038ca <xQueueGenericSendFromISR+0x6e>
 80038c6:	2301      	movs	r3, #1
 80038c8:	e000      	b.n	80038cc <xQueueGenericSendFromISR+0x70>
 80038ca:	2300      	movs	r3, #0
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d10a      	bne.n	80038e6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80038d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038d4:	f383 8811 	msr	BASEPRI, r3
 80038d8:	f3bf 8f6f 	isb	sy
 80038dc:	f3bf 8f4f 	dsb	sy
 80038e0:	623b      	str	r3, [r7, #32]
}
 80038e2:	bf00      	nop
 80038e4:	e7fe      	b.n	80038e4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80038e6:	f001 ff27 	bl	8005738 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80038ea:	f3ef 8211 	mrs	r2, BASEPRI
 80038ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038f2:	f383 8811 	msr	BASEPRI, r3
 80038f6:	f3bf 8f6f 	isb	sy
 80038fa:	f3bf 8f4f 	dsb	sy
 80038fe:	61fa      	str	r2, [r7, #28]
 8003900:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003902:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003904:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003906:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003908:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800390a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800390c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800390e:	429a      	cmp	r2, r3
 8003910:	d302      	bcc.n	8003918 <xQueueGenericSendFromISR+0xbc>
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	2b02      	cmp	r3, #2
 8003916:	d12f      	bne.n	8003978 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003918:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800391a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800391e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003922:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003924:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003926:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	68b9      	ldr	r1, [r7, #8]
 800392c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800392e:	f000 f911 	bl	8003b54 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003932:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003936:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393a:	d112      	bne.n	8003962 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800393c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800393e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003940:	2b00      	cmp	r3, #0
 8003942:	d016      	beq.n	8003972 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003944:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003946:	3324      	adds	r3, #36	; 0x24
 8003948:	4618      	mov	r0, r3
 800394a:	f000 fef7 	bl	800473c <xTaskRemoveFromEventList>
 800394e:	4603      	mov	r3, r0
 8003950:	2b00      	cmp	r3, #0
 8003952:	d00e      	beq.n	8003972 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2b00      	cmp	r3, #0
 8003958:	d00b      	beq.n	8003972 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2201      	movs	r2, #1
 800395e:	601a      	str	r2, [r3, #0]
 8003960:	e007      	b.n	8003972 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003962:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003966:	3301      	adds	r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	b25a      	sxtb	r2, r3
 800396c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003972:	2301      	movs	r3, #1
 8003974:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003976:	e001      	b.n	800397c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003978:	2300      	movs	r3, #0
 800397a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800397c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800397e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003980:	697b      	ldr	r3, [r7, #20]
 8003982:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003986:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003988:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800398a:	4618      	mov	r0, r3
 800398c:	3740      	adds	r7, #64	; 0x40
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
	...

08003994 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003994:	b580      	push	{r7, lr}
 8003996:	b08c      	sub	sp, #48	; 0x30
 8003998:	af00      	add	r7, sp, #0
 800399a:	60f8      	str	r0, [r7, #12]
 800399c:	60b9      	str	r1, [r7, #8]
 800399e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80039a0:	2300      	movs	r3, #0
 80039a2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80039a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d10a      	bne.n	80039c4 <xQueueReceive+0x30>
	__asm volatile
 80039ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039b2:	f383 8811 	msr	BASEPRI, r3
 80039b6:	f3bf 8f6f 	isb	sy
 80039ba:	f3bf 8f4f 	dsb	sy
 80039be:	623b      	str	r3, [r7, #32]
}
 80039c0:	bf00      	nop
 80039c2:	e7fe      	b.n	80039c2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d103      	bne.n	80039d2 <xQueueReceive+0x3e>
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d101      	bne.n	80039d6 <xQueueReceive+0x42>
 80039d2:	2301      	movs	r3, #1
 80039d4:	e000      	b.n	80039d8 <xQueueReceive+0x44>
 80039d6:	2300      	movs	r3, #0
 80039d8:	2b00      	cmp	r3, #0
 80039da:	d10a      	bne.n	80039f2 <xQueueReceive+0x5e>
	__asm volatile
 80039dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039e0:	f383 8811 	msr	BASEPRI, r3
 80039e4:	f3bf 8f6f 	isb	sy
 80039e8:	f3bf 8f4f 	dsb	sy
 80039ec:	61fb      	str	r3, [r7, #28]
}
 80039ee:	bf00      	nop
 80039f0:	e7fe      	b.n	80039f0 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80039f2:	f001 f865 	bl	8004ac0 <xTaskGetSchedulerState>
 80039f6:	4603      	mov	r3, r0
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d102      	bne.n	8003a02 <xQueueReceive+0x6e>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d101      	bne.n	8003a06 <xQueueReceive+0x72>
 8003a02:	2301      	movs	r3, #1
 8003a04:	e000      	b.n	8003a08 <xQueueReceive+0x74>
 8003a06:	2300      	movs	r3, #0
 8003a08:	2b00      	cmp	r3, #0
 8003a0a:	d10a      	bne.n	8003a22 <xQueueReceive+0x8e>
	__asm volatile
 8003a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a10:	f383 8811 	msr	BASEPRI, r3
 8003a14:	f3bf 8f6f 	isb	sy
 8003a18:	f3bf 8f4f 	dsb	sy
 8003a1c:	61bb      	str	r3, [r7, #24]
}
 8003a1e:	bf00      	nop
 8003a20:	e7fe      	b.n	8003a20 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003a22:	f001 fda7 	bl	8005574 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003a26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d01f      	beq.n	8003a72 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003a32:	68b9      	ldr	r1, [r7, #8]
 8003a34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003a36:	f000 f8f7 	bl	8003c28 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a3c:	1e5a      	subs	r2, r3, #1
 8003a3e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a40:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003a42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a44:	691b      	ldr	r3, [r3, #16]
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d00f      	beq.n	8003a6a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003a4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a4c:	3310      	adds	r3, #16
 8003a4e:	4618      	mov	r0, r3
 8003a50:	f000 fe74 	bl	800473c <xTaskRemoveFromEventList>
 8003a54:	4603      	mov	r3, r0
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d007      	beq.n	8003a6a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003a5a:	4b3d      	ldr	r3, [pc, #244]	; (8003b50 <xQueueReceive+0x1bc>)
 8003a5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a60:	601a      	str	r2, [r3, #0]
 8003a62:	f3bf 8f4f 	dsb	sy
 8003a66:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003a6a:	f001 fdb3 	bl	80055d4 <vPortExitCritical>
				return pdPASS;
 8003a6e:	2301      	movs	r3, #1
 8003a70:	e069      	b.n	8003b46 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d103      	bne.n	8003a80 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003a78:	f001 fdac 	bl	80055d4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	e062      	b.n	8003b46 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003a80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d106      	bne.n	8003a94 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003a86:	f107 0310 	add.w	r3, r7, #16
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	f000 feba 	bl	8004804 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003a90:	2301      	movs	r3, #1
 8003a92:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003a94:	f001 fd9e 	bl	80055d4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003a98:	f000 fc26 	bl	80042e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003a9c:	f001 fd6a 	bl	8005574 <vPortEnterCritical>
 8003aa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003aa6:	b25b      	sxtb	r3, r3
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aac:	d103      	bne.n	8003ab6 <xQueueReceive+0x122>
 8003aae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ab6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ab8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003abc:	b25b      	sxtb	r3, r3
 8003abe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac2:	d103      	bne.n	8003acc <xQueueReceive+0x138>
 8003ac4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003acc:	f001 fd82 	bl	80055d4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003ad0:	1d3a      	adds	r2, r7, #4
 8003ad2:	f107 0310 	add.w	r3, r7, #16
 8003ad6:	4611      	mov	r1, r2
 8003ad8:	4618      	mov	r0, r3
 8003ada:	f000 fea9 	bl	8004830 <xTaskCheckForTimeOut>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d123      	bne.n	8003b2c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003ae4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ae6:	f000 f917 	bl	8003d18 <prvIsQueueEmpty>
 8003aea:	4603      	mov	r3, r0
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d017      	beq.n	8003b20 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003af0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003af2:	3324      	adds	r3, #36	; 0x24
 8003af4:	687a      	ldr	r2, [r7, #4]
 8003af6:	4611      	mov	r1, r2
 8003af8:	4618      	mov	r0, r3
 8003afa:	f000 fdcf 	bl	800469c <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003afe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b00:	f000 f8b8 	bl	8003c74 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003b04:	f000 fbfe 	bl	8004304 <xTaskResumeAll>
 8003b08:	4603      	mov	r3, r0
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d189      	bne.n	8003a22 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003b0e:	4b10      	ldr	r3, [pc, #64]	; (8003b50 <xQueueReceive+0x1bc>)
 8003b10:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003b14:	601a      	str	r2, [r3, #0]
 8003b16:	f3bf 8f4f 	dsb	sy
 8003b1a:	f3bf 8f6f 	isb	sy
 8003b1e:	e780      	b.n	8003a22 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003b20:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b22:	f000 f8a7 	bl	8003c74 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003b26:	f000 fbed 	bl	8004304 <xTaskResumeAll>
 8003b2a:	e77a      	b.n	8003a22 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003b2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b2e:	f000 f8a1 	bl	8003c74 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003b32:	f000 fbe7 	bl	8004304 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003b36:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003b38:	f000 f8ee 	bl	8003d18 <prvIsQueueEmpty>
 8003b3c:	4603      	mov	r3, r0
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	f43f af6f 	beq.w	8003a22 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003b44:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3730      	adds	r7, #48	; 0x30
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}
 8003b4e:	bf00      	nop
 8003b50:	e000ed04 	.word	0xe000ed04

08003b54 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003b54:	b580      	push	{r7, lr}
 8003b56:	b086      	sub	sp, #24
 8003b58:	af00      	add	r7, sp, #0
 8003b5a:	60f8      	str	r0, [r7, #12]
 8003b5c:	60b9      	str	r1, [r7, #8]
 8003b5e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003b60:	2300      	movs	r3, #0
 8003b62:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003b68:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d10d      	bne.n	8003b8e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	2b00      	cmp	r3, #0
 8003b78:	d14d      	bne.n	8003c16 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003b7a:	68fb      	ldr	r3, [r7, #12]
 8003b7c:	689b      	ldr	r3, [r3, #8]
 8003b7e:	4618      	mov	r0, r3
 8003b80:	f000 ffbc 	bl	8004afc <xTaskPriorityDisinherit>
 8003b84:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	609a      	str	r2, [r3, #8]
 8003b8c:	e043      	b.n	8003c16 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d119      	bne.n	8003bc8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	6858      	ldr	r0, [r3, #4]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	68b9      	ldr	r1, [r7, #8]
 8003ba0:	f002 f81a 	bl	8005bd8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	685a      	ldr	r2, [r3, #4]
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bac:	441a      	add	r2, r3
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	685a      	ldr	r2, [r3, #4]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d32b      	bcc.n	8003c16 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	605a      	str	r2, [r3, #4]
 8003bc6:	e026      	b.n	8003c16 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	68d8      	ldr	r0, [r3, #12]
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd0:	461a      	mov	r2, r3
 8003bd2:	68b9      	ldr	r1, [r7, #8]
 8003bd4:	f002 f800 	bl	8005bd8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	68da      	ldr	r2, [r3, #12]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be0:	425b      	negs	r3, r3
 8003be2:	441a      	add	r2, r3
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	68da      	ldr	r2, [r3, #12]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	429a      	cmp	r2, r3
 8003bf2:	d207      	bcs.n	8003c04 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	689a      	ldr	r2, [r3, #8]
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bfc:	425b      	negs	r3, r3
 8003bfe:	441a      	add	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b02      	cmp	r3, #2
 8003c08:	d105      	bne.n	8003c16 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003c0a:	693b      	ldr	r3, [r7, #16]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d002      	beq.n	8003c16 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003c10:	693b      	ldr	r3, [r7, #16]
 8003c12:	3b01      	subs	r3, #1
 8003c14:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003c16:	693b      	ldr	r3, [r7, #16]
 8003c18:	1c5a      	adds	r2, r3, #1
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003c1e:	697b      	ldr	r3, [r7, #20]
}
 8003c20:	4618      	mov	r0, r3
 8003c22:	3718      	adds	r7, #24
 8003c24:	46bd      	mov	sp, r7
 8003c26:	bd80      	pop	{r7, pc}

08003c28 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003c28:	b580      	push	{r7, lr}
 8003c2a:	b082      	sub	sp, #8
 8003c2c:	af00      	add	r7, sp, #0
 8003c2e:	6078      	str	r0, [r7, #4]
 8003c30:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d018      	beq.n	8003c6c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	441a      	add	r2, r3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	68da      	ldr	r2, [r3, #12]
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	429a      	cmp	r2, r3
 8003c52:	d303      	bcc.n	8003c5c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681a      	ldr	r2, [r3, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	68d9      	ldr	r1, [r3, #12]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	461a      	mov	r2, r3
 8003c66:	6838      	ldr	r0, [r7, #0]
 8003c68:	f001 ffb6 	bl	8005bd8 <memcpy>
	}
}
 8003c6c:	bf00      	nop
 8003c6e:	3708      	adds	r7, #8
 8003c70:	46bd      	mov	sp, r7
 8003c72:	bd80      	pop	{r7, pc}

08003c74 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003c74:	b580      	push	{r7, lr}
 8003c76:	b084      	sub	sp, #16
 8003c78:	af00      	add	r7, sp, #0
 8003c7a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003c7c:	f001 fc7a 	bl	8005574 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c86:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003c88:	e011      	b.n	8003cae <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d012      	beq.n	8003cb8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	3324      	adds	r3, #36	; 0x24
 8003c96:	4618      	mov	r0, r3
 8003c98:	f000 fd50 	bl	800473c <xTaskRemoveFromEventList>
 8003c9c:	4603      	mov	r3, r0
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d001      	beq.n	8003ca6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ca2:	f000 fe27 	bl	80048f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8003ca6:	7bfb      	ldrb	r3, [r7, #15]
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	b2db      	uxtb	r3, r3
 8003cac:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003cae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cb2:	2b00      	cmp	r3, #0
 8003cb4:	dce9      	bgt.n	8003c8a <prvUnlockQueue+0x16>
 8003cb6:	e000      	b.n	8003cba <prvUnlockQueue+0x46>
					break;
 8003cb8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	22ff      	movs	r2, #255	; 0xff
 8003cbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8003cc2:	f001 fc87 	bl	80055d4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8003cc6:	f001 fc55 	bl	8005574 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cd0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cd2:	e011      	b.n	8003cf8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	691b      	ldr	r3, [r3, #16]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d012      	beq.n	8003d02 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3310      	adds	r3, #16
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fd2b 	bl	800473c <xTaskRemoveFromEventList>
 8003ce6:	4603      	mov	r3, r0
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d001      	beq.n	8003cf0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8003cec:	f000 fe02 	bl	80048f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8003cf0:	7bbb      	ldrb	r3, [r7, #14]
 8003cf2:	3b01      	subs	r3, #1
 8003cf4:	b2db      	uxtb	r3, r3
 8003cf6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8003cf8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	dce9      	bgt.n	8003cd4 <prvUnlockQueue+0x60>
 8003d00:	e000      	b.n	8003d04 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8003d02:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	22ff      	movs	r2, #255	; 0xff
 8003d08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8003d0c:	f001 fc62 	bl	80055d4 <vPortExitCritical>
}
 8003d10:	bf00      	nop
 8003d12:	3710      	adds	r7, #16
 8003d14:	46bd      	mov	sp, r7
 8003d16:	bd80      	pop	{r7, pc}

08003d18 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8003d18:	b580      	push	{r7, lr}
 8003d1a:	b084      	sub	sp, #16
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d20:	f001 fc28 	bl	8005574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d28:	2b00      	cmp	r3, #0
 8003d2a:	d102      	bne.n	8003d32 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8003d2c:	2301      	movs	r3, #1
 8003d2e:	60fb      	str	r3, [r7, #12]
 8003d30:	e001      	b.n	8003d36 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8003d32:	2300      	movs	r3, #0
 8003d34:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d36:	f001 fc4d 	bl	80055d4 <vPortExitCritical>

	return xReturn;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
}
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	3710      	adds	r7, #16
 8003d40:	46bd      	mov	sp, r7
 8003d42:	bd80      	pop	{r7, pc}

08003d44 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8003d44:	b580      	push	{r7, lr}
 8003d46:	b084      	sub	sp, #16
 8003d48:	af00      	add	r7, sp, #0
 8003d4a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8003d4c:	f001 fc12 	bl	8005574 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d102      	bne.n	8003d62 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8003d5c:	2301      	movs	r3, #1
 8003d5e:	60fb      	str	r3, [r7, #12]
 8003d60:	e001      	b.n	8003d66 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8003d62:	2300      	movs	r3, #0
 8003d64:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8003d66:	f001 fc35 	bl	80055d4 <vPortExitCritical>

	return xReturn;
 8003d6a:	68fb      	ldr	r3, [r7, #12]
}
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	3710      	adds	r7, #16
 8003d70:	46bd      	mov	sp, r7
 8003d72:	bd80      	pop	{r7, pc}

08003d74 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8003d74:	b480      	push	{r7}
 8003d76:	b085      	sub	sp, #20
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
 8003d7c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003d7e:	2300      	movs	r3, #0
 8003d80:	60fb      	str	r3, [r7, #12]
 8003d82:	e014      	b.n	8003dae <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8003d84:	4a0f      	ldr	r2, [pc, #60]	; (8003dc4 <vQueueAddToRegistry+0x50>)
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d10b      	bne.n	8003da8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8003d90:	490c      	ldr	r1, [pc, #48]	; (8003dc4 <vQueueAddToRegistry+0x50>)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	683a      	ldr	r2, [r7, #0]
 8003d96:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8003d9a:	4a0a      	ldr	r2, [pc, #40]	; (8003dc4 <vQueueAddToRegistry+0x50>)
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	00db      	lsls	r3, r3, #3
 8003da0:	4413      	add	r3, r2
 8003da2:	687a      	ldr	r2, [r7, #4]
 8003da4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8003da6:	e006      	b.n	8003db6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	2b07      	cmp	r3, #7
 8003db2:	d9e7      	bls.n	8003d84 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8003db4:	bf00      	nop
 8003db6:	bf00      	nop
 8003db8:	3714      	adds	r7, #20
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc0:	4770      	bx	lr
 8003dc2:	bf00      	nop
 8003dc4:	200008e4 	.word	0x200008e4

08003dc8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b086      	sub	sp, #24
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	60f8      	str	r0, [r7, #12]
 8003dd0:	60b9      	str	r1, [r7, #8]
 8003dd2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8003dd8:	f001 fbcc 	bl	8005574 <vPortEnterCritical>
 8003ddc:	697b      	ldr	r3, [r7, #20]
 8003dde:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003de2:	b25b      	sxtb	r3, r3
 8003de4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003de8:	d103      	bne.n	8003df2 <vQueueWaitForMessageRestricted+0x2a>
 8003dea:	697b      	ldr	r3, [r7, #20]
 8003dec:	2200      	movs	r2, #0
 8003dee:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003df2:	697b      	ldr	r3, [r7, #20]
 8003df4:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003df8:	b25b      	sxtb	r3, r3
 8003dfa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003dfe:	d103      	bne.n	8003e08 <vQueueWaitForMessageRestricted+0x40>
 8003e00:	697b      	ldr	r3, [r7, #20]
 8003e02:	2200      	movs	r2, #0
 8003e04:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e08:	f001 fbe4 	bl	80055d4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8003e0c:	697b      	ldr	r3, [r7, #20]
 8003e0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d106      	bne.n	8003e22 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	3324      	adds	r3, #36	; 0x24
 8003e18:	687a      	ldr	r2, [r7, #4]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fc61 	bl	80046e4 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8003e22:	6978      	ldr	r0, [r7, #20]
 8003e24:	f7ff ff26 	bl	8003c74 <prvUnlockQueue>
	}
 8003e28:	bf00      	nop
 8003e2a:	3718      	adds	r7, #24
 8003e2c:	46bd      	mov	sp, r7
 8003e2e:	bd80      	pop	{r7, pc}

08003e30 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b08e      	sub	sp, #56	; 0x38
 8003e34:	af04      	add	r7, sp, #16
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	60b9      	str	r1, [r7, #8]
 8003e3a:	607a      	str	r2, [r7, #4]
 8003e3c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8003e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d10a      	bne.n	8003e5a <xTaskCreateStatic+0x2a>
	__asm volatile
 8003e44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e48:	f383 8811 	msr	BASEPRI, r3
 8003e4c:	f3bf 8f6f 	isb	sy
 8003e50:	f3bf 8f4f 	dsb	sy
 8003e54:	623b      	str	r3, [r7, #32]
}
 8003e56:	bf00      	nop
 8003e58:	e7fe      	b.n	8003e58 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8003e5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <xTaskCreateStatic+0x46>
	__asm volatile
 8003e60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e64:	f383 8811 	msr	BASEPRI, r3
 8003e68:	f3bf 8f6f 	isb	sy
 8003e6c:	f3bf 8f4f 	dsb	sy
 8003e70:	61fb      	str	r3, [r7, #28]
}
 8003e72:	bf00      	nop
 8003e74:	e7fe      	b.n	8003e74 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8003e76:	23bc      	movs	r3, #188	; 0xbc
 8003e78:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8003e7a:	693b      	ldr	r3, [r7, #16]
 8003e7c:	2bbc      	cmp	r3, #188	; 0xbc
 8003e7e:	d00a      	beq.n	8003e96 <xTaskCreateStatic+0x66>
	__asm volatile
 8003e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e84:	f383 8811 	msr	BASEPRI, r3
 8003e88:	f3bf 8f6f 	isb	sy
 8003e8c:	f3bf 8f4f 	dsb	sy
 8003e90:	61bb      	str	r3, [r7, #24]
}
 8003e92:	bf00      	nop
 8003e94:	e7fe      	b.n	8003e94 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8003e96:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8003e98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d01e      	beq.n	8003edc <xTaskCreateStatic+0xac>
 8003e9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d01b      	beq.n	8003edc <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ea4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ea6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8003ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eaa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003eac:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	2202      	movs	r2, #2
 8003eb2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8003eb6:	2300      	movs	r3, #0
 8003eb8:	9303      	str	r3, [sp, #12]
 8003eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ebc:	9302      	str	r3, [sp, #8]
 8003ebe:	f107 0314 	add.w	r3, r7, #20
 8003ec2:	9301      	str	r3, [sp, #4]
 8003ec4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ec6:	9300      	str	r3, [sp, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f850 	bl	8003f74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003ed4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8003ed6:	f000 f8f3 	bl	80040c0 <prvAddNewTaskToReadyList>
 8003eda:	e001      	b.n	8003ee0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8003edc:	2300      	movs	r3, #0
 8003ede:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8003ee0:	697b      	ldr	r3, [r7, #20]
	}
 8003ee2:	4618      	mov	r0, r3
 8003ee4:	3728      	adds	r7, #40	; 0x28
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b08c      	sub	sp, #48	; 0x30
 8003eee:	af04      	add	r7, sp, #16
 8003ef0:	60f8      	str	r0, [r7, #12]
 8003ef2:	60b9      	str	r1, [r7, #8]
 8003ef4:	603b      	str	r3, [r7, #0]
 8003ef6:	4613      	mov	r3, r2
 8003ef8:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8003efa:	88fb      	ldrh	r3, [r7, #6]
 8003efc:	009b      	lsls	r3, r3, #2
 8003efe:	4618      	mov	r0, r3
 8003f00:	f001 fc5a 	bl	80057b8 <pvPortMalloc>
 8003f04:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d00e      	beq.n	8003f2a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8003f0c:	20bc      	movs	r0, #188	; 0xbc
 8003f0e:	f001 fc53 	bl	80057b8 <pvPortMalloc>
 8003f12:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8003f14:	69fb      	ldr	r3, [r7, #28]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d003      	beq.n	8003f22 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8003f1a:	69fb      	ldr	r3, [r7, #28]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f20:	e005      	b.n	8003f2e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8003f22:	6978      	ldr	r0, [r7, #20]
 8003f24:	f001 fd14 	bl	8005950 <vPortFree>
 8003f28:	e001      	b.n	8003f2e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8003f2e:	69fb      	ldr	r3, [r7, #28]
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d017      	beq.n	8003f64 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	2200      	movs	r2, #0
 8003f38:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8003f3c:	88fa      	ldrh	r2, [r7, #6]
 8003f3e:	2300      	movs	r3, #0
 8003f40:	9303      	str	r3, [sp, #12]
 8003f42:	69fb      	ldr	r3, [r7, #28]
 8003f44:	9302      	str	r3, [sp, #8]
 8003f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f48:	9301      	str	r3, [sp, #4]
 8003f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f4c:	9300      	str	r3, [sp, #0]
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	68b9      	ldr	r1, [r7, #8]
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f80e 	bl	8003f74 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8003f58:	69f8      	ldr	r0, [r7, #28]
 8003f5a:	f000 f8b1 	bl	80040c0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8003f5e:	2301      	movs	r3, #1
 8003f60:	61bb      	str	r3, [r7, #24]
 8003f62:	e002      	b.n	8003f6a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8003f64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003f68:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8003f6a:	69bb      	ldr	r3, [r7, #24]
	}
 8003f6c:	4618      	mov	r0, r3
 8003f6e:	3720      	adds	r7, #32
 8003f70:	46bd      	mov	sp, r7
 8003f72:	bd80      	pop	{r7, pc}

08003f74 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8003f74:	b580      	push	{r7, lr}
 8003f76:	b088      	sub	sp, #32
 8003f78:	af00      	add	r7, sp, #0
 8003f7a:	60f8      	str	r0, [r7, #12]
 8003f7c:	60b9      	str	r1, [r7, #8]
 8003f7e:	607a      	str	r2, [r7, #4]
 8003f80:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8003f82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f84:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	009b      	lsls	r3, r3, #2
 8003f8a:	461a      	mov	r2, r3
 8003f8c:	21a5      	movs	r1, #165	; 0xa5
 8003f8e:	f001 fe31 	bl	8005bf4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8003f92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f94:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003f9c:	3b01      	subs	r3, #1
 8003f9e:	009b      	lsls	r3, r3, #2
 8003fa0:	4413      	add	r3, r2
 8003fa2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8003fa4:	69bb      	ldr	r3, [r7, #24]
 8003fa6:	f023 0307 	bic.w	r3, r3, #7
 8003faa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	f003 0307 	and.w	r3, r3, #7
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d00a      	beq.n	8003fcc <prvInitialiseNewTask+0x58>
	__asm volatile
 8003fb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fba:	f383 8811 	msr	BASEPRI, r3
 8003fbe:	f3bf 8f6f 	isb	sy
 8003fc2:	f3bf 8f4f 	dsb	sy
 8003fc6:	617b      	str	r3, [r7, #20]
}
 8003fc8:	bf00      	nop
 8003fca:	e7fe      	b.n	8003fca <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d01f      	beq.n	8004012 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003fd2:	2300      	movs	r3, #0
 8003fd4:	61fb      	str	r3, [r7, #28]
 8003fd6:	e012      	b.n	8003ffe <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	69fb      	ldr	r3, [r7, #28]
 8003fdc:	4413      	add	r3, r2
 8003fde:	7819      	ldrb	r1, [r3, #0]
 8003fe0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003fe2:	69fb      	ldr	r3, [r7, #28]
 8003fe4:	4413      	add	r3, r2
 8003fe6:	3334      	adds	r3, #52	; 0x34
 8003fe8:	460a      	mov	r2, r1
 8003fea:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8003fec:	68ba      	ldr	r2, [r7, #8]
 8003fee:	69fb      	ldr	r3, [r7, #28]
 8003ff0:	4413      	add	r3, r2
 8003ff2:	781b      	ldrb	r3, [r3, #0]
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d006      	beq.n	8004006 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8003ff8:	69fb      	ldr	r3, [r7, #28]
 8003ffa:	3301      	adds	r3, #1
 8003ffc:	61fb      	str	r3, [r7, #28]
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	2b0f      	cmp	r3, #15
 8004002:	d9e9      	bls.n	8003fd8 <prvInitialiseNewTask+0x64>
 8004004:	e000      	b.n	8004008 <prvInitialiseNewTask+0x94>
			{
				break;
 8004006:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004008:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004010:	e003      	b.n	800401a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004012:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004014:	2200      	movs	r2, #0
 8004016:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800401a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800401c:	2b37      	cmp	r3, #55	; 0x37
 800401e:	d901      	bls.n	8004024 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004020:	2337      	movs	r3, #55	; 0x37
 8004022:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004026:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004028:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800402a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800402c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800402e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004030:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004032:	2200      	movs	r2, #0
 8004034:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004036:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004038:	3304      	adds	r3, #4
 800403a:	4618      	mov	r0, r3
 800403c:	f7ff f978 	bl	8003330 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004040:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004042:	3318      	adds	r3, #24
 8004044:	4618      	mov	r0, r3
 8004046:	f7ff f973 	bl	8003330 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800404a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800404c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800404e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004052:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004056:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004058:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800405a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800405c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800405e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004060:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004062:	2200      	movs	r2, #0
 8004064:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004068:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406a:	2200      	movs	r2, #0
 800406c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004070:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004072:	3354      	adds	r3, #84	; 0x54
 8004074:	2260      	movs	r2, #96	; 0x60
 8004076:	2100      	movs	r1, #0
 8004078:	4618      	mov	r0, r3
 800407a:	f001 fdbb 	bl	8005bf4 <memset>
 800407e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004080:	4a0c      	ldr	r2, [pc, #48]	; (80040b4 <prvInitialiseNewTask+0x140>)
 8004082:	659a      	str	r2, [r3, #88]	; 0x58
 8004084:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004086:	4a0c      	ldr	r2, [pc, #48]	; (80040b8 <prvInitialiseNewTask+0x144>)
 8004088:	65da      	str	r2, [r3, #92]	; 0x5c
 800408a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800408c:	4a0b      	ldr	r2, [pc, #44]	; (80040bc <prvInitialiseNewTask+0x148>)
 800408e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004090:	683a      	ldr	r2, [r7, #0]
 8004092:	68f9      	ldr	r1, [r7, #12]
 8004094:	69b8      	ldr	r0, [r7, #24]
 8004096:	f001 f941 	bl	800531c <pxPortInitialiseStack>
 800409a:	4602      	mov	r2, r0
 800409c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800409e:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80040a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d002      	beq.n	80040ac <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80040a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80040aa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80040ac:	bf00      	nop
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	08005e50 	.word	0x08005e50
 80040b8:	08005e70 	.word	0x08005e70
 80040bc:	08005e30 	.word	0x08005e30

080040c0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80040c0:	b580      	push	{r7, lr}
 80040c2:	b082      	sub	sp, #8
 80040c4:	af00      	add	r7, sp, #0
 80040c6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80040c8:	f001 fa54 	bl	8005574 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80040cc:	4b2d      	ldr	r3, [pc, #180]	; (8004184 <prvAddNewTaskToReadyList+0xc4>)
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	3301      	adds	r3, #1
 80040d2:	4a2c      	ldr	r2, [pc, #176]	; (8004184 <prvAddNewTaskToReadyList+0xc4>)
 80040d4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80040d6:	4b2c      	ldr	r3, [pc, #176]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	d109      	bne.n	80040f2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80040de:	4a2a      	ldr	r2, [pc, #168]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80040e4:	4b27      	ldr	r3, [pc, #156]	; (8004184 <prvAddNewTaskToReadyList+0xc4>)
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d110      	bne.n	800410e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80040ec:	f000 fc26 	bl	800493c <prvInitialiseTaskLists>
 80040f0:	e00d      	b.n	800410e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80040f2:	4b26      	ldr	r3, [pc, #152]	; (800418c <prvAddNewTaskToReadyList+0xcc>)
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d109      	bne.n	800410e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80040fa:	4b23      	ldr	r3, [pc, #140]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004104:	429a      	cmp	r2, r3
 8004106:	d802      	bhi.n	800410e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004108:	4a1f      	ldr	r2, [pc, #124]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800410e:	4b20      	ldr	r3, [pc, #128]	; (8004190 <prvAddNewTaskToReadyList+0xd0>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	3301      	adds	r3, #1
 8004114:	4a1e      	ldr	r2, [pc, #120]	; (8004190 <prvAddNewTaskToReadyList+0xd0>)
 8004116:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004118:	4b1d      	ldr	r3, [pc, #116]	; (8004190 <prvAddNewTaskToReadyList+0xd0>)
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <prvAddNewTaskToReadyList+0xd4>)
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	429a      	cmp	r2, r3
 800412a:	d903      	bls.n	8004134 <prvAddNewTaskToReadyList+0x74>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004130:	4a18      	ldr	r2, [pc, #96]	; (8004194 <prvAddNewTaskToReadyList+0xd4>)
 8004132:	6013      	str	r3, [r2, #0]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004138:	4613      	mov	r3, r2
 800413a:	009b      	lsls	r3, r3, #2
 800413c:	4413      	add	r3, r2
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	4a15      	ldr	r2, [pc, #84]	; (8004198 <prvAddNewTaskToReadyList+0xd8>)
 8004142:	441a      	add	r2, r3
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	3304      	adds	r3, #4
 8004148:	4619      	mov	r1, r3
 800414a:	4610      	mov	r0, r2
 800414c:	f7ff f8fd 	bl	800334a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004150:	f001 fa40 	bl	80055d4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004154:	4b0d      	ldr	r3, [pc, #52]	; (800418c <prvAddNewTaskToReadyList+0xcc>)
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d00e      	beq.n	800417a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800415c:	4b0a      	ldr	r3, [pc, #40]	; (8004188 <prvAddNewTaskToReadyList+0xc8>)
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004166:	429a      	cmp	r2, r3
 8004168:	d207      	bcs.n	800417a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800416a:	4b0c      	ldr	r3, [pc, #48]	; (800419c <prvAddNewTaskToReadyList+0xdc>)
 800416c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004170:	601a      	str	r2, [r3, #0]
 8004172:	f3bf 8f4f 	dsb	sy
 8004176:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800417a:	bf00      	nop
 800417c:	3708      	adds	r7, #8
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}
 8004182:	bf00      	nop
 8004184:	20000df8 	.word	0x20000df8
 8004188:	20000924 	.word	0x20000924
 800418c:	20000e04 	.word	0x20000e04
 8004190:	20000e14 	.word	0x20000e14
 8004194:	20000e00 	.word	0x20000e00
 8004198:	20000928 	.word	0x20000928
 800419c:	e000ed04 	.word	0xe000ed04

080041a0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80041a0:	b580      	push	{r7, lr}
 80041a2:	b084      	sub	sp, #16
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80041a8:	2300      	movs	r3, #0
 80041aa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d017      	beq.n	80041e2 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80041b2:	4b13      	ldr	r3, [pc, #76]	; (8004200 <vTaskDelay+0x60>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d00a      	beq.n	80041d0 <vTaskDelay+0x30>
	__asm volatile
 80041ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041be:	f383 8811 	msr	BASEPRI, r3
 80041c2:	f3bf 8f6f 	isb	sy
 80041c6:	f3bf 8f4f 	dsb	sy
 80041ca:	60bb      	str	r3, [r7, #8]
}
 80041cc:	bf00      	nop
 80041ce:	e7fe      	b.n	80041ce <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80041d0:	f000 f88a 	bl	80042e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80041d4:	2100      	movs	r1, #0
 80041d6:	6878      	ldr	r0, [r7, #4]
 80041d8:	f000 fcfe 	bl	8004bd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80041dc:	f000 f892 	bl	8004304 <xTaskResumeAll>
 80041e0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d107      	bne.n	80041f8 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80041e8:	4b06      	ldr	r3, [pc, #24]	; (8004204 <vTaskDelay+0x64>)
 80041ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80041ee:	601a      	str	r2, [r3, #0]
 80041f0:	f3bf 8f4f 	dsb	sy
 80041f4:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80041f8:	bf00      	nop
 80041fa:	3710      	adds	r7, #16
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000e20 	.word	0x20000e20
 8004204:	e000ed04 	.word	0xe000ed04

08004208 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004208:	b580      	push	{r7, lr}
 800420a:	b08a      	sub	sp, #40	; 0x28
 800420c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800420e:	2300      	movs	r3, #0
 8004210:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004212:	2300      	movs	r3, #0
 8004214:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004216:	463a      	mov	r2, r7
 8004218:	1d39      	adds	r1, r7, #4
 800421a:	f107 0308 	add.w	r3, r7, #8
 800421e:	4618      	mov	r0, r3
 8004220:	f7ff f832 	bl	8003288 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004224:	6839      	ldr	r1, [r7, #0]
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	68ba      	ldr	r2, [r7, #8]
 800422a:	9202      	str	r2, [sp, #8]
 800422c:	9301      	str	r3, [sp, #4]
 800422e:	2300      	movs	r3, #0
 8004230:	9300      	str	r3, [sp, #0]
 8004232:	2300      	movs	r3, #0
 8004234:	460a      	mov	r2, r1
 8004236:	4924      	ldr	r1, [pc, #144]	; (80042c8 <vTaskStartScheduler+0xc0>)
 8004238:	4824      	ldr	r0, [pc, #144]	; (80042cc <vTaskStartScheduler+0xc4>)
 800423a:	f7ff fdf9 	bl	8003e30 <xTaskCreateStatic>
 800423e:	4603      	mov	r3, r0
 8004240:	4a23      	ldr	r2, [pc, #140]	; (80042d0 <vTaskStartScheduler+0xc8>)
 8004242:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004244:	4b22      	ldr	r3, [pc, #136]	; (80042d0 <vTaskStartScheduler+0xc8>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d002      	beq.n	8004252 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800424c:	2301      	movs	r3, #1
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e001      	b.n	8004256 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004252:	2300      	movs	r3, #0
 8004254:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004256:	697b      	ldr	r3, [r7, #20]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d102      	bne.n	8004262 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800425c:	f000 fd10 	bl	8004c80 <xTimerCreateTimerTask>
 8004260:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004262:	697b      	ldr	r3, [r7, #20]
 8004264:	2b01      	cmp	r3, #1
 8004266:	d11b      	bne.n	80042a0 <vTaskStartScheduler+0x98>
	__asm volatile
 8004268:	f04f 0350 	mov.w	r3, #80	; 0x50
 800426c:	f383 8811 	msr	BASEPRI, r3
 8004270:	f3bf 8f6f 	isb	sy
 8004274:	f3bf 8f4f 	dsb	sy
 8004278:	613b      	str	r3, [r7, #16]
}
 800427a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800427c:	4b15      	ldr	r3, [pc, #84]	; (80042d4 <vTaskStartScheduler+0xcc>)
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	3354      	adds	r3, #84	; 0x54
 8004282:	4a15      	ldr	r2, [pc, #84]	; (80042d8 <vTaskStartScheduler+0xd0>)
 8004284:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004286:	4b15      	ldr	r3, [pc, #84]	; (80042dc <vTaskStartScheduler+0xd4>)
 8004288:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800428c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800428e:	4b14      	ldr	r3, [pc, #80]	; (80042e0 <vTaskStartScheduler+0xd8>)
 8004290:	2201      	movs	r2, #1
 8004292:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <vTaskStartScheduler+0xdc>)
 8004296:	2200      	movs	r2, #0
 8004298:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800429a:	f001 f8c9 	bl	8005430 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800429e:	e00e      	b.n	80042be <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80042a0:	697b      	ldr	r3, [r7, #20]
 80042a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042a6:	d10a      	bne.n	80042be <vTaskStartScheduler+0xb6>
	__asm volatile
 80042a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042ac:	f383 8811 	msr	BASEPRI, r3
 80042b0:	f3bf 8f6f 	isb	sy
 80042b4:	f3bf 8f4f 	dsb	sy
 80042b8:	60fb      	str	r3, [r7, #12]
}
 80042ba:	bf00      	nop
 80042bc:	e7fe      	b.n	80042bc <vTaskStartScheduler+0xb4>
}
 80042be:	bf00      	nop
 80042c0:	3718      	adds	r7, #24
 80042c2:	46bd      	mov	sp, r7
 80042c4:	bd80      	pop	{r7, pc}
 80042c6:	bf00      	nop
 80042c8:	08005dac 	.word	0x08005dac
 80042cc:	0800490d 	.word	0x0800490d
 80042d0:	20000e1c 	.word	0x20000e1c
 80042d4:	20000924 	.word	0x20000924
 80042d8:	20000010 	.word	0x20000010
 80042dc:	20000e18 	.word	0x20000e18
 80042e0:	20000e04 	.word	0x20000e04
 80042e4:	20000dfc 	.word	0x20000dfc

080042e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80042e8:	b480      	push	{r7}
 80042ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80042ec:	4b04      	ldr	r3, [pc, #16]	; (8004300 <vTaskSuspendAll+0x18>)
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	3301      	adds	r3, #1
 80042f2:	4a03      	ldr	r2, [pc, #12]	; (8004300 <vTaskSuspendAll+0x18>)
 80042f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80042f6:	bf00      	nop
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr
 8004300:	20000e20 	.word	0x20000e20

08004304 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004304:	b580      	push	{r7, lr}
 8004306:	b084      	sub	sp, #16
 8004308:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800430a:	2300      	movs	r3, #0
 800430c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800430e:	2300      	movs	r3, #0
 8004310:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004312:	4b42      	ldr	r3, [pc, #264]	; (800441c <xTaskResumeAll+0x118>)
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	2b00      	cmp	r3, #0
 8004318:	d10a      	bne.n	8004330 <xTaskResumeAll+0x2c>
	__asm volatile
 800431a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800431e:	f383 8811 	msr	BASEPRI, r3
 8004322:	f3bf 8f6f 	isb	sy
 8004326:	f3bf 8f4f 	dsb	sy
 800432a:	603b      	str	r3, [r7, #0]
}
 800432c:	bf00      	nop
 800432e:	e7fe      	b.n	800432e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004330:	f001 f920 	bl	8005574 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004334:	4b39      	ldr	r3, [pc, #228]	; (800441c <xTaskResumeAll+0x118>)
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	3b01      	subs	r3, #1
 800433a:	4a38      	ldr	r2, [pc, #224]	; (800441c <xTaskResumeAll+0x118>)
 800433c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800433e:	4b37      	ldr	r3, [pc, #220]	; (800441c <xTaskResumeAll+0x118>)
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	2b00      	cmp	r3, #0
 8004344:	d162      	bne.n	800440c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004346:	4b36      	ldr	r3, [pc, #216]	; (8004420 <xTaskResumeAll+0x11c>)
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	2b00      	cmp	r3, #0
 800434c:	d05e      	beq.n	800440c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800434e:	e02f      	b.n	80043b0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004350:	4b34      	ldr	r3, [pc, #208]	; (8004424 <xTaskResumeAll+0x120>)
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	68db      	ldr	r3, [r3, #12]
 8004356:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	3318      	adds	r3, #24
 800435c:	4618      	mov	r0, r3
 800435e:	f7ff f851 	bl	8003404 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	3304      	adds	r3, #4
 8004366:	4618      	mov	r0, r3
 8004368:	f7ff f84c 	bl	8003404 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004370:	4b2d      	ldr	r3, [pc, #180]	; (8004428 <xTaskResumeAll+0x124>)
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	429a      	cmp	r2, r3
 8004376:	d903      	bls.n	8004380 <xTaskResumeAll+0x7c>
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800437c:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <xTaskResumeAll+0x124>)
 800437e:	6013      	str	r3, [r2, #0]
 8004380:	68fb      	ldr	r3, [r7, #12]
 8004382:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004384:	4613      	mov	r3, r2
 8004386:	009b      	lsls	r3, r3, #2
 8004388:	4413      	add	r3, r2
 800438a:	009b      	lsls	r3, r3, #2
 800438c:	4a27      	ldr	r2, [pc, #156]	; (800442c <xTaskResumeAll+0x128>)
 800438e:	441a      	add	r2, r3
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	3304      	adds	r3, #4
 8004394:	4619      	mov	r1, r3
 8004396:	4610      	mov	r0, r2
 8004398:	f7fe ffd7 	bl	800334a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043a0:	4b23      	ldr	r3, [pc, #140]	; (8004430 <xTaskResumeAll+0x12c>)
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043a6:	429a      	cmp	r2, r3
 80043a8:	d302      	bcc.n	80043b0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80043aa:	4b22      	ldr	r3, [pc, #136]	; (8004434 <xTaskResumeAll+0x130>)
 80043ac:	2201      	movs	r2, #1
 80043ae:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80043b0:	4b1c      	ldr	r3, [pc, #112]	; (8004424 <xTaskResumeAll+0x120>)
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d1cb      	bne.n	8004350 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	d001      	beq.n	80043c2 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80043be:	f000 fb5f 	bl	8004a80 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80043c2:	4b1d      	ldr	r3, [pc, #116]	; (8004438 <xTaskResumeAll+0x134>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d010      	beq.n	80043f0 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80043ce:	f000 f847 	bl	8004460 <xTaskIncrementTick>
 80043d2:	4603      	mov	r3, r0
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d002      	beq.n	80043de <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80043d8:	4b16      	ldr	r3, [pc, #88]	; (8004434 <xTaskResumeAll+0x130>)
 80043da:	2201      	movs	r2, #1
 80043dc:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	3b01      	subs	r3, #1
 80043e2:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d1f1      	bne.n	80043ce <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80043ea:	4b13      	ldr	r3, [pc, #76]	; (8004438 <xTaskResumeAll+0x134>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80043f0:	4b10      	ldr	r3, [pc, #64]	; (8004434 <xTaskResumeAll+0x130>)
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d009      	beq.n	800440c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80043f8:	2301      	movs	r3, #1
 80043fa:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80043fc:	4b0f      	ldr	r3, [pc, #60]	; (800443c <xTaskResumeAll+0x138>)
 80043fe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004402:	601a      	str	r2, [r3, #0]
 8004404:	f3bf 8f4f 	dsb	sy
 8004408:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800440c:	f001 f8e2 	bl	80055d4 <vPortExitCritical>

	return xAlreadyYielded;
 8004410:	68bb      	ldr	r3, [r7, #8]
}
 8004412:	4618      	mov	r0, r3
 8004414:	3710      	adds	r7, #16
 8004416:	46bd      	mov	sp, r7
 8004418:	bd80      	pop	{r7, pc}
 800441a:	bf00      	nop
 800441c:	20000e20 	.word	0x20000e20
 8004420:	20000df8 	.word	0x20000df8
 8004424:	20000db8 	.word	0x20000db8
 8004428:	20000e00 	.word	0x20000e00
 800442c:	20000928 	.word	0x20000928
 8004430:	20000924 	.word	0x20000924
 8004434:	20000e0c 	.word	0x20000e0c
 8004438:	20000e08 	.word	0x20000e08
 800443c:	e000ed04 	.word	0xe000ed04

08004440 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004440:	b480      	push	{r7}
 8004442:	b083      	sub	sp, #12
 8004444:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004446:	4b05      	ldr	r3, [pc, #20]	; (800445c <xTaskGetTickCount+0x1c>)
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800444c:	687b      	ldr	r3, [r7, #4]
}
 800444e:	4618      	mov	r0, r3
 8004450:	370c      	adds	r7, #12
 8004452:	46bd      	mov	sp, r7
 8004454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004458:	4770      	bx	lr
 800445a:	bf00      	nop
 800445c:	20000dfc 	.word	0x20000dfc

08004460 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b086      	sub	sp, #24
 8004464:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004466:	2300      	movs	r3, #0
 8004468:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800446a:	4b4f      	ldr	r3, [pc, #316]	; (80045a8 <xTaskIncrementTick+0x148>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	f040 808f 	bne.w	8004592 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004474:	4b4d      	ldr	r3, [pc, #308]	; (80045ac <xTaskIncrementTick+0x14c>)
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	3301      	adds	r3, #1
 800447a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800447c:	4a4b      	ldr	r2, [pc, #300]	; (80045ac <xTaskIncrementTick+0x14c>)
 800447e:	693b      	ldr	r3, [r7, #16]
 8004480:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d120      	bne.n	80044ca <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004488:	4b49      	ldr	r3, [pc, #292]	; (80045b0 <xTaskIncrementTick+0x150>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	2b00      	cmp	r3, #0
 8004490:	d00a      	beq.n	80044a8 <xTaskIncrementTick+0x48>
	__asm volatile
 8004492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004496:	f383 8811 	msr	BASEPRI, r3
 800449a:	f3bf 8f6f 	isb	sy
 800449e:	f3bf 8f4f 	dsb	sy
 80044a2:	603b      	str	r3, [r7, #0]
}
 80044a4:	bf00      	nop
 80044a6:	e7fe      	b.n	80044a6 <xTaskIncrementTick+0x46>
 80044a8:	4b41      	ldr	r3, [pc, #260]	; (80045b0 <xTaskIncrementTick+0x150>)
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	60fb      	str	r3, [r7, #12]
 80044ae:	4b41      	ldr	r3, [pc, #260]	; (80045b4 <xTaskIncrementTick+0x154>)
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	4a3f      	ldr	r2, [pc, #252]	; (80045b0 <xTaskIncrementTick+0x150>)
 80044b4:	6013      	str	r3, [r2, #0]
 80044b6:	4a3f      	ldr	r2, [pc, #252]	; (80045b4 <xTaskIncrementTick+0x154>)
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	6013      	str	r3, [r2, #0]
 80044bc:	4b3e      	ldr	r3, [pc, #248]	; (80045b8 <xTaskIncrementTick+0x158>)
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	3301      	adds	r3, #1
 80044c2:	4a3d      	ldr	r2, [pc, #244]	; (80045b8 <xTaskIncrementTick+0x158>)
 80044c4:	6013      	str	r3, [r2, #0]
 80044c6:	f000 fadb 	bl	8004a80 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80044ca:	4b3c      	ldr	r3, [pc, #240]	; (80045bc <xTaskIncrementTick+0x15c>)
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	693a      	ldr	r2, [r7, #16]
 80044d0:	429a      	cmp	r2, r3
 80044d2:	d349      	bcc.n	8004568 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80044d4:	4b36      	ldr	r3, [pc, #216]	; (80045b0 <xTaskIncrementTick+0x150>)
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	2b00      	cmp	r3, #0
 80044dc:	d104      	bne.n	80044e8 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044de:	4b37      	ldr	r3, [pc, #220]	; (80045bc <xTaskIncrementTick+0x15c>)
 80044e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80044e4:	601a      	str	r2, [r3, #0]
					break;
 80044e6:	e03f      	b.n	8004568 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80044e8:	4b31      	ldr	r3, [pc, #196]	; (80045b0 <xTaskIncrementTick+0x150>)
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68db      	ldr	r3, [r3, #12]
 80044ee:	68db      	ldr	r3, [r3, #12]
 80044f0:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80044f2:	68bb      	ldr	r3, [r7, #8]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80044f8:	693a      	ldr	r2, [r7, #16]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d203      	bcs.n	8004508 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004500:	4a2e      	ldr	r2, [pc, #184]	; (80045bc <xTaskIncrementTick+0x15c>)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004506:	e02f      	b.n	8004568 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004508:	68bb      	ldr	r3, [r7, #8]
 800450a:	3304      	adds	r3, #4
 800450c:	4618      	mov	r0, r3
 800450e:	f7fe ff79 	bl	8003404 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004512:	68bb      	ldr	r3, [r7, #8]
 8004514:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004516:	2b00      	cmp	r3, #0
 8004518:	d004      	beq.n	8004524 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800451a:	68bb      	ldr	r3, [r7, #8]
 800451c:	3318      	adds	r3, #24
 800451e:	4618      	mov	r0, r3
 8004520:	f7fe ff70 	bl	8003404 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004528:	4b25      	ldr	r3, [pc, #148]	; (80045c0 <xTaskIncrementTick+0x160>)
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	429a      	cmp	r2, r3
 800452e:	d903      	bls.n	8004538 <xTaskIncrementTick+0xd8>
 8004530:	68bb      	ldr	r3, [r7, #8]
 8004532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004534:	4a22      	ldr	r2, [pc, #136]	; (80045c0 <xTaskIncrementTick+0x160>)
 8004536:	6013      	str	r3, [r2, #0]
 8004538:	68bb      	ldr	r3, [r7, #8]
 800453a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800453c:	4613      	mov	r3, r2
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	009b      	lsls	r3, r3, #2
 8004544:	4a1f      	ldr	r2, [pc, #124]	; (80045c4 <xTaskIncrementTick+0x164>)
 8004546:	441a      	add	r2, r3
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	3304      	adds	r3, #4
 800454c:	4619      	mov	r1, r3
 800454e:	4610      	mov	r0, r2
 8004550:	f7fe fefb 	bl	800334a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004554:	68bb      	ldr	r3, [r7, #8]
 8004556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004558:	4b1b      	ldr	r3, [pc, #108]	; (80045c8 <xTaskIncrementTick+0x168>)
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800455e:	429a      	cmp	r2, r3
 8004560:	d3b8      	bcc.n	80044d4 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004562:	2301      	movs	r3, #1
 8004564:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004566:	e7b5      	b.n	80044d4 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004568:	4b17      	ldr	r3, [pc, #92]	; (80045c8 <xTaskIncrementTick+0x168>)
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800456e:	4915      	ldr	r1, [pc, #84]	; (80045c4 <xTaskIncrementTick+0x164>)
 8004570:	4613      	mov	r3, r2
 8004572:	009b      	lsls	r3, r3, #2
 8004574:	4413      	add	r3, r2
 8004576:	009b      	lsls	r3, r3, #2
 8004578:	440b      	add	r3, r1
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	2b01      	cmp	r3, #1
 800457e:	d901      	bls.n	8004584 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004580:	2301      	movs	r3, #1
 8004582:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004584:	4b11      	ldr	r3, [pc, #68]	; (80045cc <xTaskIncrementTick+0x16c>)
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	2b00      	cmp	r3, #0
 800458a:	d007      	beq.n	800459c <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800458c:	2301      	movs	r3, #1
 800458e:	617b      	str	r3, [r7, #20]
 8004590:	e004      	b.n	800459c <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004592:	4b0f      	ldr	r3, [pc, #60]	; (80045d0 <xTaskIncrementTick+0x170>)
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	3301      	adds	r3, #1
 8004598:	4a0d      	ldr	r2, [pc, #52]	; (80045d0 <xTaskIncrementTick+0x170>)
 800459a:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800459c:	697b      	ldr	r3, [r7, #20]
}
 800459e:	4618      	mov	r0, r3
 80045a0:	3718      	adds	r7, #24
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bd80      	pop	{r7, pc}
 80045a6:	bf00      	nop
 80045a8:	20000e20 	.word	0x20000e20
 80045ac:	20000dfc 	.word	0x20000dfc
 80045b0:	20000db0 	.word	0x20000db0
 80045b4:	20000db4 	.word	0x20000db4
 80045b8:	20000e10 	.word	0x20000e10
 80045bc:	20000e18 	.word	0x20000e18
 80045c0:	20000e00 	.word	0x20000e00
 80045c4:	20000928 	.word	0x20000928
 80045c8:	20000924 	.word	0x20000924
 80045cc:	20000e0c 	.word	0x20000e0c
 80045d0:	20000e08 	.word	0x20000e08

080045d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80045d4:	b480      	push	{r7}
 80045d6:	b085      	sub	sp, #20
 80045d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80045da:	4b2a      	ldr	r3, [pc, #168]	; (8004684 <vTaskSwitchContext+0xb0>)
 80045dc:	681b      	ldr	r3, [r3, #0]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d003      	beq.n	80045ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80045e2:	4b29      	ldr	r3, [pc, #164]	; (8004688 <vTaskSwitchContext+0xb4>)
 80045e4:	2201      	movs	r2, #1
 80045e6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80045e8:	e046      	b.n	8004678 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80045ea:	4b27      	ldr	r3, [pc, #156]	; (8004688 <vTaskSwitchContext+0xb4>)
 80045ec:	2200      	movs	r2, #0
 80045ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80045f0:	4b26      	ldr	r3, [pc, #152]	; (800468c <vTaskSwitchContext+0xb8>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	60fb      	str	r3, [r7, #12]
 80045f6:	e010      	b.n	800461a <vTaskSwitchContext+0x46>
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d10a      	bne.n	8004614 <vTaskSwitchContext+0x40>
	__asm volatile
 80045fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004602:	f383 8811 	msr	BASEPRI, r3
 8004606:	f3bf 8f6f 	isb	sy
 800460a:	f3bf 8f4f 	dsb	sy
 800460e:	607b      	str	r3, [r7, #4]
}
 8004610:	bf00      	nop
 8004612:	e7fe      	b.n	8004612 <vTaskSwitchContext+0x3e>
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	3b01      	subs	r3, #1
 8004618:	60fb      	str	r3, [r7, #12]
 800461a:	491d      	ldr	r1, [pc, #116]	; (8004690 <vTaskSwitchContext+0xbc>)
 800461c:	68fa      	ldr	r2, [r7, #12]
 800461e:	4613      	mov	r3, r2
 8004620:	009b      	lsls	r3, r3, #2
 8004622:	4413      	add	r3, r2
 8004624:	009b      	lsls	r3, r3, #2
 8004626:	440b      	add	r3, r1
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	2b00      	cmp	r3, #0
 800462c:	d0e4      	beq.n	80045f8 <vTaskSwitchContext+0x24>
 800462e:	68fa      	ldr	r2, [r7, #12]
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4a15      	ldr	r2, [pc, #84]	; (8004690 <vTaskSwitchContext+0xbc>)
 800463a:	4413      	add	r3, r2
 800463c:	60bb      	str	r3, [r7, #8]
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	685b      	ldr	r3, [r3, #4]
 8004642:	685a      	ldr	r2, [r3, #4]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	605a      	str	r2, [r3, #4]
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	685a      	ldr	r2, [r3, #4]
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	3308      	adds	r3, #8
 8004650:	429a      	cmp	r2, r3
 8004652:	d104      	bne.n	800465e <vTaskSwitchContext+0x8a>
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	685a      	ldr	r2, [r3, #4]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	605a      	str	r2, [r3, #4]
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	685b      	ldr	r3, [r3, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4a0b      	ldr	r2, [pc, #44]	; (8004694 <vTaskSwitchContext+0xc0>)
 8004666:	6013      	str	r3, [r2, #0]
 8004668:	4a08      	ldr	r2, [pc, #32]	; (800468c <vTaskSwitchContext+0xb8>)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800466e:	4b09      	ldr	r3, [pc, #36]	; (8004694 <vTaskSwitchContext+0xc0>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3354      	adds	r3, #84	; 0x54
 8004674:	4a08      	ldr	r2, [pc, #32]	; (8004698 <vTaskSwitchContext+0xc4>)
 8004676:	6013      	str	r3, [r2, #0]
}
 8004678:	bf00      	nop
 800467a:	3714      	adds	r7, #20
 800467c:	46bd      	mov	sp, r7
 800467e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004682:	4770      	bx	lr
 8004684:	20000e20 	.word	0x20000e20
 8004688:	20000e0c 	.word	0x20000e0c
 800468c:	20000e00 	.word	0x20000e00
 8004690:	20000928 	.word	0x20000928
 8004694:	20000924 	.word	0x20000924
 8004698:	20000010 	.word	0x20000010

0800469c <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800469c:	b580      	push	{r7, lr}
 800469e:	b084      	sub	sp, #16
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	6078      	str	r0, [r7, #4]
 80046a4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d10a      	bne.n	80046c2 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 80046ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b0:	f383 8811 	msr	BASEPRI, r3
 80046b4:	f3bf 8f6f 	isb	sy
 80046b8:	f3bf 8f4f 	dsb	sy
 80046bc:	60fb      	str	r3, [r7, #12]
}
 80046be:	bf00      	nop
 80046c0:	e7fe      	b.n	80046c0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80046c2:	4b07      	ldr	r3, [pc, #28]	; (80046e0 <vTaskPlaceOnEventList+0x44>)
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	3318      	adds	r3, #24
 80046c8:	4619      	mov	r1, r3
 80046ca:	6878      	ldr	r0, [r7, #4]
 80046cc:	f7fe fe61 	bl	8003392 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80046d0:	2101      	movs	r1, #1
 80046d2:	6838      	ldr	r0, [r7, #0]
 80046d4:	f000 fa80 	bl	8004bd8 <prvAddCurrentTaskToDelayedList>
}
 80046d8:	bf00      	nop
 80046da:	3710      	adds	r7, #16
 80046dc:	46bd      	mov	sp, r7
 80046de:	bd80      	pop	{r7, pc}
 80046e0:	20000924 	.word	0x20000924

080046e4 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b086      	sub	sp, #24
 80046e8:	af00      	add	r7, sp, #0
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d10a      	bne.n	800470c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80046f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fa:	f383 8811 	msr	BASEPRI, r3
 80046fe:	f3bf 8f6f 	isb	sy
 8004702:	f3bf 8f4f 	dsb	sy
 8004706:	617b      	str	r3, [r7, #20]
}
 8004708:	bf00      	nop
 800470a:	e7fe      	b.n	800470a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800470c:	4b0a      	ldr	r3, [pc, #40]	; (8004738 <vTaskPlaceOnEventListRestricted+0x54>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	3318      	adds	r3, #24
 8004712:	4619      	mov	r1, r3
 8004714:	68f8      	ldr	r0, [r7, #12]
 8004716:	f7fe fe18 	bl	800334a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d002      	beq.n	8004726 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004724:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004726:	6879      	ldr	r1, [r7, #4]
 8004728:	68b8      	ldr	r0, [r7, #8]
 800472a:	f000 fa55 	bl	8004bd8 <prvAddCurrentTaskToDelayedList>
	}
 800472e:	bf00      	nop
 8004730:	3718      	adds	r7, #24
 8004732:	46bd      	mov	sp, r7
 8004734:	bd80      	pop	{r7, pc}
 8004736:	bf00      	nop
 8004738:	20000924 	.word	0x20000924

0800473c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800473c:	b580      	push	{r7, lr}
 800473e:	b086      	sub	sp, #24
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	68db      	ldr	r3, [r3, #12]
 8004748:	68db      	ldr	r3, [r3, #12]
 800474a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800474c:	693b      	ldr	r3, [r7, #16]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d10a      	bne.n	8004768 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004752:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004756:	f383 8811 	msr	BASEPRI, r3
 800475a:	f3bf 8f6f 	isb	sy
 800475e:	f3bf 8f4f 	dsb	sy
 8004762:	60fb      	str	r3, [r7, #12]
}
 8004764:	bf00      	nop
 8004766:	e7fe      	b.n	8004766 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004768:	693b      	ldr	r3, [r7, #16]
 800476a:	3318      	adds	r3, #24
 800476c:	4618      	mov	r0, r3
 800476e:	f7fe fe49 	bl	8003404 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004772:	4b1e      	ldr	r3, [pc, #120]	; (80047ec <xTaskRemoveFromEventList+0xb0>)
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	2b00      	cmp	r3, #0
 8004778:	d11d      	bne.n	80047b6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800477a:	693b      	ldr	r3, [r7, #16]
 800477c:	3304      	adds	r3, #4
 800477e:	4618      	mov	r0, r3
 8004780:	f7fe fe40 	bl	8003404 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004788:	4b19      	ldr	r3, [pc, #100]	; (80047f0 <xTaskRemoveFromEventList+0xb4>)
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	429a      	cmp	r2, r3
 800478e:	d903      	bls.n	8004798 <xTaskRemoveFromEventList+0x5c>
 8004790:	693b      	ldr	r3, [r7, #16]
 8004792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004794:	4a16      	ldr	r2, [pc, #88]	; (80047f0 <xTaskRemoveFromEventList+0xb4>)
 8004796:	6013      	str	r3, [r2, #0]
 8004798:	693b      	ldr	r3, [r7, #16]
 800479a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800479c:	4613      	mov	r3, r2
 800479e:	009b      	lsls	r3, r3, #2
 80047a0:	4413      	add	r3, r2
 80047a2:	009b      	lsls	r3, r3, #2
 80047a4:	4a13      	ldr	r2, [pc, #76]	; (80047f4 <xTaskRemoveFromEventList+0xb8>)
 80047a6:	441a      	add	r2, r3
 80047a8:	693b      	ldr	r3, [r7, #16]
 80047aa:	3304      	adds	r3, #4
 80047ac:	4619      	mov	r1, r3
 80047ae:	4610      	mov	r0, r2
 80047b0:	f7fe fdcb 	bl	800334a <vListInsertEnd>
 80047b4:	e005      	b.n	80047c2 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	3318      	adds	r3, #24
 80047ba:	4619      	mov	r1, r3
 80047bc:	480e      	ldr	r0, [pc, #56]	; (80047f8 <xTaskRemoveFromEventList+0xbc>)
 80047be:	f7fe fdc4 	bl	800334a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80047c2:	693b      	ldr	r3, [r7, #16]
 80047c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c6:	4b0d      	ldr	r3, [pc, #52]	; (80047fc <xTaskRemoveFromEventList+0xc0>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	429a      	cmp	r2, r3
 80047ce:	d905      	bls.n	80047dc <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80047d0:	2301      	movs	r3, #1
 80047d2:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80047d4:	4b0a      	ldr	r3, [pc, #40]	; (8004800 <xTaskRemoveFromEventList+0xc4>)
 80047d6:	2201      	movs	r2, #1
 80047d8:	601a      	str	r2, [r3, #0]
 80047da:	e001      	b.n	80047e0 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80047dc:	2300      	movs	r3, #0
 80047de:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80047e0:	697b      	ldr	r3, [r7, #20]
}
 80047e2:	4618      	mov	r0, r3
 80047e4:	3718      	adds	r7, #24
 80047e6:	46bd      	mov	sp, r7
 80047e8:	bd80      	pop	{r7, pc}
 80047ea:	bf00      	nop
 80047ec:	20000e20 	.word	0x20000e20
 80047f0:	20000e00 	.word	0x20000e00
 80047f4:	20000928 	.word	0x20000928
 80047f8:	20000db8 	.word	0x20000db8
 80047fc:	20000924 	.word	0x20000924
 8004800:	20000e0c 	.word	0x20000e0c

08004804 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004804:	b480      	push	{r7}
 8004806:	b083      	sub	sp, #12
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800480c:	4b06      	ldr	r3, [pc, #24]	; (8004828 <vTaskInternalSetTimeOutState+0x24>)
 800480e:	681a      	ldr	r2, [r3, #0]
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004814:	4b05      	ldr	r3, [pc, #20]	; (800482c <vTaskInternalSetTimeOutState+0x28>)
 8004816:	681a      	ldr	r2, [r3, #0]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	605a      	str	r2, [r3, #4]
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr
 8004828:	20000e10 	.word	0x20000e10
 800482c:	20000dfc 	.word	0x20000dfc

08004830 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004830:	b580      	push	{r7, lr}
 8004832:	b088      	sub	sp, #32
 8004834:	af00      	add	r7, sp, #0
 8004836:	6078      	str	r0, [r7, #4]
 8004838:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d10a      	bne.n	8004856 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004844:	f383 8811 	msr	BASEPRI, r3
 8004848:	f3bf 8f6f 	isb	sy
 800484c:	f3bf 8f4f 	dsb	sy
 8004850:	613b      	str	r3, [r7, #16]
}
 8004852:	bf00      	nop
 8004854:	e7fe      	b.n	8004854 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	2b00      	cmp	r3, #0
 800485a:	d10a      	bne.n	8004872 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800485c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004860:	f383 8811 	msr	BASEPRI, r3
 8004864:	f3bf 8f6f 	isb	sy
 8004868:	f3bf 8f4f 	dsb	sy
 800486c:	60fb      	str	r3, [r7, #12]
}
 800486e:	bf00      	nop
 8004870:	e7fe      	b.n	8004870 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004872:	f000 fe7f 	bl	8005574 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004876:	4b1d      	ldr	r3, [pc, #116]	; (80048ec <xTaskCheckForTimeOut+0xbc>)
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	69ba      	ldr	r2, [r7, #24]
 8004882:	1ad3      	subs	r3, r2, r3
 8004884:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800488e:	d102      	bne.n	8004896 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004890:	2300      	movs	r3, #0
 8004892:	61fb      	str	r3, [r7, #28]
 8004894:	e023      	b.n	80048de <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	681a      	ldr	r2, [r3, #0]
 800489a:	4b15      	ldr	r3, [pc, #84]	; (80048f0 <xTaskCheckForTimeOut+0xc0>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	429a      	cmp	r2, r3
 80048a0:	d007      	beq.n	80048b2 <xTaskCheckForTimeOut+0x82>
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	685b      	ldr	r3, [r3, #4]
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	429a      	cmp	r2, r3
 80048aa:	d302      	bcc.n	80048b2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80048ac:	2301      	movs	r3, #1
 80048ae:	61fb      	str	r3, [r7, #28]
 80048b0:	e015      	b.n	80048de <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80048b2:	683b      	ldr	r3, [r7, #0]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	697a      	ldr	r2, [r7, #20]
 80048b8:	429a      	cmp	r2, r3
 80048ba:	d20b      	bcs.n	80048d4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80048bc:	683b      	ldr	r3, [r7, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	697b      	ldr	r3, [r7, #20]
 80048c2:	1ad2      	subs	r2, r2, r3
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f7ff ff9b 	bl	8004804 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80048ce:	2300      	movs	r3, #0
 80048d0:	61fb      	str	r3, [r7, #28]
 80048d2:	e004      	b.n	80048de <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	2200      	movs	r2, #0
 80048d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80048da:	2301      	movs	r3, #1
 80048dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80048de:	f000 fe79 	bl	80055d4 <vPortExitCritical>

	return xReturn;
 80048e2:	69fb      	ldr	r3, [r7, #28]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3720      	adds	r7, #32
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	20000dfc 	.word	0x20000dfc
 80048f0:	20000e10 	.word	0x20000e10

080048f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80048f4:	b480      	push	{r7}
 80048f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80048f8:	4b03      	ldr	r3, [pc, #12]	; (8004908 <vTaskMissedYield+0x14>)
 80048fa:	2201      	movs	r2, #1
 80048fc:	601a      	str	r2, [r3, #0]
}
 80048fe:	bf00      	nop
 8004900:	46bd      	mov	sp, r7
 8004902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004906:	4770      	bx	lr
 8004908:	20000e0c 	.word	0x20000e0c

0800490c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b082      	sub	sp, #8
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004914:	f000 f852 	bl	80049bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004918:	4b06      	ldr	r3, [pc, #24]	; (8004934 <prvIdleTask+0x28>)
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	2b01      	cmp	r3, #1
 800491e:	d9f9      	bls.n	8004914 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004920:	4b05      	ldr	r3, [pc, #20]	; (8004938 <prvIdleTask+0x2c>)
 8004922:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004926:	601a      	str	r2, [r3, #0]
 8004928:	f3bf 8f4f 	dsb	sy
 800492c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004930:	e7f0      	b.n	8004914 <prvIdleTask+0x8>
 8004932:	bf00      	nop
 8004934:	20000928 	.word	0x20000928
 8004938:	e000ed04 	.word	0xe000ed04

0800493c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b082      	sub	sp, #8
 8004940:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004942:	2300      	movs	r3, #0
 8004944:	607b      	str	r3, [r7, #4]
 8004946:	e00c      	b.n	8004962 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004948:	687a      	ldr	r2, [r7, #4]
 800494a:	4613      	mov	r3, r2
 800494c:	009b      	lsls	r3, r3, #2
 800494e:	4413      	add	r3, r2
 8004950:	009b      	lsls	r3, r3, #2
 8004952:	4a12      	ldr	r2, [pc, #72]	; (800499c <prvInitialiseTaskLists+0x60>)
 8004954:	4413      	add	r3, r2
 8004956:	4618      	mov	r0, r3
 8004958:	f7fe fcca 	bl	80032f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	3301      	adds	r3, #1
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	2b37      	cmp	r3, #55	; 0x37
 8004966:	d9ef      	bls.n	8004948 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004968:	480d      	ldr	r0, [pc, #52]	; (80049a0 <prvInitialiseTaskLists+0x64>)
 800496a:	f7fe fcc1 	bl	80032f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800496e:	480d      	ldr	r0, [pc, #52]	; (80049a4 <prvInitialiseTaskLists+0x68>)
 8004970:	f7fe fcbe 	bl	80032f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004974:	480c      	ldr	r0, [pc, #48]	; (80049a8 <prvInitialiseTaskLists+0x6c>)
 8004976:	f7fe fcbb 	bl	80032f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800497a:	480c      	ldr	r0, [pc, #48]	; (80049ac <prvInitialiseTaskLists+0x70>)
 800497c:	f7fe fcb8 	bl	80032f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004980:	480b      	ldr	r0, [pc, #44]	; (80049b0 <prvInitialiseTaskLists+0x74>)
 8004982:	f7fe fcb5 	bl	80032f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004986:	4b0b      	ldr	r3, [pc, #44]	; (80049b4 <prvInitialiseTaskLists+0x78>)
 8004988:	4a05      	ldr	r2, [pc, #20]	; (80049a0 <prvInitialiseTaskLists+0x64>)
 800498a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <prvInitialiseTaskLists+0x7c>)
 800498e:	4a05      	ldr	r2, [pc, #20]	; (80049a4 <prvInitialiseTaskLists+0x68>)
 8004990:	601a      	str	r2, [r3, #0]
}
 8004992:	bf00      	nop
 8004994:	3708      	adds	r7, #8
 8004996:	46bd      	mov	sp, r7
 8004998:	bd80      	pop	{r7, pc}
 800499a:	bf00      	nop
 800499c:	20000928 	.word	0x20000928
 80049a0:	20000d88 	.word	0x20000d88
 80049a4:	20000d9c 	.word	0x20000d9c
 80049a8:	20000db8 	.word	0x20000db8
 80049ac:	20000dcc 	.word	0x20000dcc
 80049b0:	20000de4 	.word	0x20000de4
 80049b4:	20000db0 	.word	0x20000db0
 80049b8:	20000db4 	.word	0x20000db4

080049bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80049bc:	b580      	push	{r7, lr}
 80049be:	b082      	sub	sp, #8
 80049c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049c2:	e019      	b.n	80049f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80049c4:	f000 fdd6 	bl	8005574 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80049c8:	4b10      	ldr	r3, [pc, #64]	; (8004a0c <prvCheckTasksWaitingTermination+0x50>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	68db      	ldr	r3, [r3, #12]
 80049ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	3304      	adds	r3, #4
 80049d4:	4618      	mov	r0, r3
 80049d6:	f7fe fd15 	bl	8003404 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80049da:	4b0d      	ldr	r3, [pc, #52]	; (8004a10 <prvCheckTasksWaitingTermination+0x54>)
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	3b01      	subs	r3, #1
 80049e0:	4a0b      	ldr	r2, [pc, #44]	; (8004a10 <prvCheckTasksWaitingTermination+0x54>)
 80049e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80049e4:	4b0b      	ldr	r3, [pc, #44]	; (8004a14 <prvCheckTasksWaitingTermination+0x58>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	3b01      	subs	r3, #1
 80049ea:	4a0a      	ldr	r2, [pc, #40]	; (8004a14 <prvCheckTasksWaitingTermination+0x58>)
 80049ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80049ee:	f000 fdf1 	bl	80055d4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80049f2:	6878      	ldr	r0, [r7, #4]
 80049f4:	f000 f810 	bl	8004a18 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80049f8:	4b06      	ldr	r3, [pc, #24]	; (8004a14 <prvCheckTasksWaitingTermination+0x58>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d1e1      	bne.n	80049c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004a00:	bf00      	nop
 8004a02:	bf00      	nop
 8004a04:	3708      	adds	r7, #8
 8004a06:	46bd      	mov	sp, r7
 8004a08:	bd80      	pop	{r7, pc}
 8004a0a:	bf00      	nop
 8004a0c:	20000dcc 	.word	0x20000dcc
 8004a10:	20000df8 	.word	0x20000df8
 8004a14:	20000de0 	.word	0x20000de0

08004a18 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004a18:	b580      	push	{r7, lr}
 8004a1a:	b084      	sub	sp, #16
 8004a1c:	af00      	add	r7, sp, #0
 8004a1e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	3354      	adds	r3, #84	; 0x54
 8004a24:	4618      	mov	r0, r3
 8004a26:	f001 f8fb 	bl	8005c20 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d108      	bne.n	8004a46 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a38:	4618      	mov	r0, r3
 8004a3a:	f000 ff89 	bl	8005950 <vPortFree>
				vPortFree( pxTCB );
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 ff86 	bl	8005950 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004a44:	e018      	b.n	8004a78 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d103      	bne.n	8004a58 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 ff7d 	bl	8005950 <vPortFree>
	}
 8004a56:	e00f      	b.n	8004a78 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004a5e:	2b02      	cmp	r3, #2
 8004a60:	d00a      	beq.n	8004a78 <prvDeleteTCB+0x60>
	__asm volatile
 8004a62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a66:	f383 8811 	msr	BASEPRI, r3
 8004a6a:	f3bf 8f6f 	isb	sy
 8004a6e:	f3bf 8f4f 	dsb	sy
 8004a72:	60fb      	str	r3, [r7, #12]
}
 8004a74:	bf00      	nop
 8004a76:	e7fe      	b.n	8004a76 <prvDeleteTCB+0x5e>
	}
 8004a78:	bf00      	nop
 8004a7a:	3710      	adds	r7, #16
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	bd80      	pop	{r7, pc}

08004a80 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004a80:	b480      	push	{r7}
 8004a82:	b083      	sub	sp, #12
 8004a84:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004a86:	4b0c      	ldr	r3, [pc, #48]	; (8004ab8 <prvResetNextTaskUnblockTime+0x38>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d104      	bne.n	8004a9a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004a90:	4b0a      	ldr	r3, [pc, #40]	; (8004abc <prvResetNextTaskUnblockTime+0x3c>)
 8004a92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004a96:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004a98:	e008      	b.n	8004aac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a9a:	4b07      	ldr	r3, [pc, #28]	; (8004ab8 <prvResetNextTaskUnblockTime+0x38>)
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	68db      	ldr	r3, [r3, #12]
 8004aa0:	68db      	ldr	r3, [r3, #12]
 8004aa2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	685b      	ldr	r3, [r3, #4]
 8004aa8:	4a04      	ldr	r2, [pc, #16]	; (8004abc <prvResetNextTaskUnblockTime+0x3c>)
 8004aaa:	6013      	str	r3, [r2, #0]
}
 8004aac:	bf00      	nop
 8004aae:	370c      	adds	r7, #12
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab6:	4770      	bx	lr
 8004ab8:	20000db0 	.word	0x20000db0
 8004abc:	20000e18 	.word	0x20000e18

08004ac0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004ac0:	b480      	push	{r7}
 8004ac2:	b083      	sub	sp, #12
 8004ac4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004ac6:	4b0b      	ldr	r3, [pc, #44]	; (8004af4 <xTaskGetSchedulerState+0x34>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	e008      	b.n	8004ae6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ad4:	4b08      	ldr	r3, [pc, #32]	; (8004af8 <xTaskGetSchedulerState+0x38>)
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d102      	bne.n	8004ae2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004adc:	2302      	movs	r3, #2
 8004ade:	607b      	str	r3, [r7, #4]
 8004ae0:	e001      	b.n	8004ae6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004ae6:	687b      	ldr	r3, [r7, #4]
	}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	370c      	adds	r7, #12
 8004aec:	46bd      	mov	sp, r7
 8004aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af2:	4770      	bx	lr
 8004af4:	20000e04 	.word	0x20000e04
 8004af8:	20000e20 	.word	0x20000e20

08004afc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b086      	sub	sp, #24
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004b08:	2300      	movs	r3, #0
 8004b0a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d056      	beq.n	8004bc0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004b12:	4b2e      	ldr	r3, [pc, #184]	; (8004bcc <xTaskPriorityDisinherit+0xd0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	693a      	ldr	r2, [r7, #16]
 8004b18:	429a      	cmp	r2, r3
 8004b1a:	d00a      	beq.n	8004b32 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	60fb      	str	r3, [r7, #12]
}
 8004b2e:	bf00      	nop
 8004b30:	e7fe      	b.n	8004b30 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d10a      	bne.n	8004b50 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8004b3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b3e:	f383 8811 	msr	BASEPRI, r3
 8004b42:	f3bf 8f6f 	isb	sy
 8004b46:	f3bf 8f4f 	dsb	sy
 8004b4a:	60bb      	str	r3, [r7, #8]
}
 8004b4c:	bf00      	nop
 8004b4e:	e7fe      	b.n	8004b4e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b54:	1e5a      	subs	r2, r3, #1
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004b5a:	693b      	ldr	r3, [r7, #16]
 8004b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b62:	429a      	cmp	r2, r3
 8004b64:	d02c      	beq.n	8004bc0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004b66:	693b      	ldr	r3, [r7, #16]
 8004b68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d128      	bne.n	8004bc0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004b6e:	693b      	ldr	r3, [r7, #16]
 8004b70:	3304      	adds	r3, #4
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fe fc46 	bl	8003404 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004b78:	693b      	ldr	r3, [r7, #16]
 8004b7a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004b80:	693b      	ldr	r3, [r7, #16]
 8004b82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b84:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8004b88:	693b      	ldr	r3, [r7, #16]
 8004b8a:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004b8c:	693b      	ldr	r3, [r7, #16]
 8004b8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004b90:	4b0f      	ldr	r3, [pc, #60]	; (8004bd0 <xTaskPriorityDisinherit+0xd4>)
 8004b92:	681b      	ldr	r3, [r3, #0]
 8004b94:	429a      	cmp	r2, r3
 8004b96:	d903      	bls.n	8004ba0 <xTaskPriorityDisinherit+0xa4>
 8004b98:	693b      	ldr	r3, [r7, #16]
 8004b9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b9c:	4a0c      	ldr	r2, [pc, #48]	; (8004bd0 <xTaskPriorityDisinherit+0xd4>)
 8004b9e:	6013      	str	r3, [r2, #0]
 8004ba0:	693b      	ldr	r3, [r7, #16]
 8004ba2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ba4:	4613      	mov	r3, r2
 8004ba6:	009b      	lsls	r3, r3, #2
 8004ba8:	4413      	add	r3, r2
 8004baa:	009b      	lsls	r3, r3, #2
 8004bac:	4a09      	ldr	r2, [pc, #36]	; (8004bd4 <xTaskPriorityDisinherit+0xd8>)
 8004bae:	441a      	add	r2, r3
 8004bb0:	693b      	ldr	r3, [r7, #16]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	4619      	mov	r1, r3
 8004bb6:	4610      	mov	r0, r2
 8004bb8:	f7fe fbc7 	bl	800334a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004bbc:	2301      	movs	r3, #1
 8004bbe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004bc0:	697b      	ldr	r3, [r7, #20]
	}
 8004bc2:	4618      	mov	r0, r3
 8004bc4:	3718      	adds	r7, #24
 8004bc6:	46bd      	mov	sp, r7
 8004bc8:	bd80      	pop	{r7, pc}
 8004bca:	bf00      	nop
 8004bcc:	20000924 	.word	0x20000924
 8004bd0:	20000e00 	.word	0x20000e00
 8004bd4:	20000928 	.word	0x20000928

08004bd8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004bd8:	b580      	push	{r7, lr}
 8004bda:	b084      	sub	sp, #16
 8004bdc:	af00      	add	r7, sp, #0
 8004bde:	6078      	str	r0, [r7, #4]
 8004be0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004be2:	4b21      	ldr	r3, [pc, #132]	; (8004c68 <prvAddCurrentTaskToDelayedList+0x90>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004be8:	4b20      	ldr	r3, [pc, #128]	; (8004c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3304      	adds	r3, #4
 8004bee:	4618      	mov	r0, r3
 8004bf0:	f7fe fc08 	bl	8003404 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bfa:	d10a      	bne.n	8004c12 <prvAddCurrentTaskToDelayedList+0x3a>
 8004bfc:	683b      	ldr	r3, [r7, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d007      	beq.n	8004c12 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c02:	4b1a      	ldr	r3, [pc, #104]	; (8004c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	3304      	adds	r3, #4
 8004c08:	4619      	mov	r1, r3
 8004c0a:	4819      	ldr	r0, [pc, #100]	; (8004c70 <prvAddCurrentTaskToDelayedList+0x98>)
 8004c0c:	f7fe fb9d 	bl	800334a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8004c10:	e026      	b.n	8004c60 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8004c12:	68fa      	ldr	r2, [r7, #12]
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	4413      	add	r3, r2
 8004c18:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8004c1a:	4b14      	ldr	r3, [pc, #80]	; (8004c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	68ba      	ldr	r2, [r7, #8]
 8004c20:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8004c22:	68ba      	ldr	r2, [r7, #8]
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	429a      	cmp	r2, r3
 8004c28:	d209      	bcs.n	8004c3e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c2a:	4b12      	ldr	r3, [pc, #72]	; (8004c74 <prvAddCurrentTaskToDelayedList+0x9c>)
 8004c2c:	681a      	ldr	r2, [r3, #0]
 8004c2e:	4b0f      	ldr	r3, [pc, #60]	; (8004c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	3304      	adds	r3, #4
 8004c34:	4619      	mov	r1, r3
 8004c36:	4610      	mov	r0, r2
 8004c38:	f7fe fbab 	bl	8003392 <vListInsert>
}
 8004c3c:	e010      	b.n	8004c60 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8004c3e:	4b0e      	ldr	r3, [pc, #56]	; (8004c78 <prvAddCurrentTaskToDelayedList+0xa0>)
 8004c40:	681a      	ldr	r2, [r3, #0]
 8004c42:	4b0a      	ldr	r3, [pc, #40]	; (8004c6c <prvAddCurrentTaskToDelayedList+0x94>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7fe fba1 	bl	8003392 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8004c50:	4b0a      	ldr	r3, [pc, #40]	; (8004c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	68ba      	ldr	r2, [r7, #8]
 8004c56:	429a      	cmp	r2, r3
 8004c58:	d202      	bcs.n	8004c60 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8004c5a:	4a08      	ldr	r2, [pc, #32]	; (8004c7c <prvAddCurrentTaskToDelayedList+0xa4>)
 8004c5c:	68bb      	ldr	r3, [r7, #8]
 8004c5e:	6013      	str	r3, [r2, #0]
}
 8004c60:	bf00      	nop
 8004c62:	3710      	adds	r7, #16
 8004c64:	46bd      	mov	sp, r7
 8004c66:	bd80      	pop	{r7, pc}
 8004c68:	20000dfc 	.word	0x20000dfc
 8004c6c:	20000924 	.word	0x20000924
 8004c70:	20000de4 	.word	0x20000de4
 8004c74:	20000db4 	.word	0x20000db4
 8004c78:	20000db0 	.word	0x20000db0
 8004c7c:	20000e18 	.word	0x20000e18

08004c80 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8004c80:	b580      	push	{r7, lr}
 8004c82:	b08a      	sub	sp, #40	; 0x28
 8004c84:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8004c86:	2300      	movs	r3, #0
 8004c88:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8004c8a:	f000 fb07 	bl	800529c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8004c8e:	4b1c      	ldr	r3, [pc, #112]	; (8004d00 <xTimerCreateTimerTask+0x80>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d021      	beq.n	8004cda <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8004c96:	2300      	movs	r3, #0
 8004c98:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8004c9a:	2300      	movs	r3, #0
 8004c9c:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8004c9e:	1d3a      	adds	r2, r7, #4
 8004ca0:	f107 0108 	add.w	r1, r7, #8
 8004ca4:	f107 030c 	add.w	r3, r7, #12
 8004ca8:	4618      	mov	r0, r3
 8004caa:	f7fe fb07 	bl	80032bc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8004cae:	6879      	ldr	r1, [r7, #4]
 8004cb0:	68bb      	ldr	r3, [r7, #8]
 8004cb2:	68fa      	ldr	r2, [r7, #12]
 8004cb4:	9202      	str	r2, [sp, #8]
 8004cb6:	9301      	str	r3, [sp, #4]
 8004cb8:	2302      	movs	r3, #2
 8004cba:	9300      	str	r3, [sp, #0]
 8004cbc:	2300      	movs	r3, #0
 8004cbe:	460a      	mov	r2, r1
 8004cc0:	4910      	ldr	r1, [pc, #64]	; (8004d04 <xTimerCreateTimerTask+0x84>)
 8004cc2:	4811      	ldr	r0, [pc, #68]	; (8004d08 <xTimerCreateTimerTask+0x88>)
 8004cc4:	f7ff f8b4 	bl	8003e30 <xTaskCreateStatic>
 8004cc8:	4603      	mov	r3, r0
 8004cca:	4a10      	ldr	r2, [pc, #64]	; (8004d0c <xTimerCreateTimerTask+0x8c>)
 8004ccc:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8004cce:	4b0f      	ldr	r3, [pc, #60]	; (8004d0c <xTimerCreateTimerTask+0x8c>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d10a      	bne.n	8004cf6 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8004ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ce4:	f383 8811 	msr	BASEPRI, r3
 8004ce8:	f3bf 8f6f 	isb	sy
 8004cec:	f3bf 8f4f 	dsb	sy
 8004cf0:	613b      	str	r3, [r7, #16]
}
 8004cf2:	bf00      	nop
 8004cf4:	e7fe      	b.n	8004cf4 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8004cf6:	697b      	ldr	r3, [r7, #20]
}
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	3718      	adds	r7, #24
 8004cfc:	46bd      	mov	sp, r7
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	20000e54 	.word	0x20000e54
 8004d04:	08005db4 	.word	0x08005db4
 8004d08:	08004e45 	.word	0x08004e45
 8004d0c:	20000e58 	.word	0x20000e58

08004d10 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8004d10:	b580      	push	{r7, lr}
 8004d12:	b08a      	sub	sp, #40	; 0x28
 8004d14:	af00      	add	r7, sp, #0
 8004d16:	60f8      	str	r0, [r7, #12]
 8004d18:	60b9      	str	r1, [r7, #8]
 8004d1a:	607a      	str	r2, [r7, #4]
 8004d1c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10a      	bne.n	8004d3e <xTimerGenericCommand+0x2e>
	__asm volatile
 8004d28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d2c:	f383 8811 	msr	BASEPRI, r3
 8004d30:	f3bf 8f6f 	isb	sy
 8004d34:	f3bf 8f4f 	dsb	sy
 8004d38:	623b      	str	r3, [r7, #32]
}
 8004d3a:	bf00      	nop
 8004d3c:	e7fe      	b.n	8004d3c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8004d3e:	4b1a      	ldr	r3, [pc, #104]	; (8004da8 <xTimerGenericCommand+0x98>)
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d02a      	beq.n	8004d9c <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8004d52:	68bb      	ldr	r3, [r7, #8]
 8004d54:	2b05      	cmp	r3, #5
 8004d56:	dc18      	bgt.n	8004d8a <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8004d58:	f7ff feb2 	bl	8004ac0 <xTaskGetSchedulerState>
 8004d5c:	4603      	mov	r3, r0
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d109      	bne.n	8004d76 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8004d62:	4b11      	ldr	r3, [pc, #68]	; (8004da8 <xTimerGenericCommand+0x98>)
 8004d64:	6818      	ldr	r0, [r3, #0]
 8004d66:	f107 0110 	add.w	r1, r7, #16
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004d6e:	f7fe fc77 	bl	8003660 <xQueueGenericSend>
 8004d72:	6278      	str	r0, [r7, #36]	; 0x24
 8004d74:	e012      	b.n	8004d9c <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8004d76:	4b0c      	ldr	r3, [pc, #48]	; (8004da8 <xTimerGenericCommand+0x98>)
 8004d78:	6818      	ldr	r0, [r3, #0]
 8004d7a:	f107 0110 	add.w	r1, r7, #16
 8004d7e:	2300      	movs	r3, #0
 8004d80:	2200      	movs	r2, #0
 8004d82:	f7fe fc6d 	bl	8003660 <xQueueGenericSend>
 8004d86:	6278      	str	r0, [r7, #36]	; 0x24
 8004d88:	e008      	b.n	8004d9c <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8004d8a:	4b07      	ldr	r3, [pc, #28]	; (8004da8 <xTimerGenericCommand+0x98>)
 8004d8c:	6818      	ldr	r0, [r3, #0]
 8004d8e:	f107 0110 	add.w	r1, r7, #16
 8004d92:	2300      	movs	r3, #0
 8004d94:	683a      	ldr	r2, [r7, #0]
 8004d96:	f7fe fd61 	bl	800385c <xQueueGenericSendFromISR>
 8004d9a:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8004d9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004d9e:	4618      	mov	r0, r3
 8004da0:	3728      	adds	r7, #40	; 0x28
 8004da2:	46bd      	mov	sp, r7
 8004da4:	bd80      	pop	{r7, pc}
 8004da6:	bf00      	nop
 8004da8:	20000e54 	.word	0x20000e54

08004dac <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b088      	sub	sp, #32
 8004db0:	af02      	add	r7, sp, #8
 8004db2:	6078      	str	r0, [r7, #4]
 8004db4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004db6:	4b22      	ldr	r3, [pc, #136]	; (8004e40 <prvProcessExpiredTimer+0x94>)
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	68db      	ldr	r3, [r3, #12]
 8004dbc:	68db      	ldr	r3, [r3, #12]
 8004dbe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	3304      	adds	r3, #4
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	f7fe fb1d 	bl	8003404 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8004dca:	697b      	ldr	r3, [r7, #20]
 8004dcc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004dd0:	f003 0304 	and.w	r3, r3, #4
 8004dd4:	2b00      	cmp	r3, #0
 8004dd6:	d022      	beq.n	8004e1e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8004dd8:	697b      	ldr	r3, [r7, #20]
 8004dda:	699a      	ldr	r2, [r3, #24]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	18d1      	adds	r1, r2, r3
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	6978      	ldr	r0, [r7, #20]
 8004de6:	f000 f8d1 	bl	8004f8c <prvInsertTimerInActiveList>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d01f      	beq.n	8004e30 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8004df0:	2300      	movs	r3, #0
 8004df2:	9300      	str	r3, [sp, #0]
 8004df4:	2300      	movs	r3, #0
 8004df6:	687a      	ldr	r2, [r7, #4]
 8004df8:	2100      	movs	r1, #0
 8004dfa:	6978      	ldr	r0, [r7, #20]
 8004dfc:	f7ff ff88 	bl	8004d10 <xTimerGenericCommand>
 8004e00:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8004e02:	693b      	ldr	r3, [r7, #16]
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d113      	bne.n	8004e30 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8004e08:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e0c:	f383 8811 	msr	BASEPRI, r3
 8004e10:	f3bf 8f6f 	isb	sy
 8004e14:	f3bf 8f4f 	dsb	sy
 8004e18:	60fb      	str	r3, [r7, #12]
}
 8004e1a:	bf00      	nop
 8004e1c:	e7fe      	b.n	8004e1c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8004e24:	f023 0301 	bic.w	r3, r3, #1
 8004e28:	b2da      	uxtb	r2, r3
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8004e30:	697b      	ldr	r3, [r7, #20]
 8004e32:	6a1b      	ldr	r3, [r3, #32]
 8004e34:	6978      	ldr	r0, [r7, #20]
 8004e36:	4798      	blx	r3
}
 8004e38:	bf00      	nop
 8004e3a:	3718      	adds	r7, #24
 8004e3c:	46bd      	mov	sp, r7
 8004e3e:	bd80      	pop	{r7, pc}
 8004e40:	20000e4c 	.word	0x20000e4c

08004e44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8004e44:	b580      	push	{r7, lr}
 8004e46:	b084      	sub	sp, #16
 8004e48:	af00      	add	r7, sp, #0
 8004e4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e4c:	f107 0308 	add.w	r3, r7, #8
 8004e50:	4618      	mov	r0, r3
 8004e52:	f000 f857 	bl	8004f04 <prvGetNextExpireTime>
 8004e56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8004e58:	68bb      	ldr	r3, [r7, #8]
 8004e5a:	4619      	mov	r1, r3
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f803 	bl	8004e68 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8004e62:	f000 f8d5 	bl	8005010 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8004e66:	e7f1      	b.n	8004e4c <prvTimerTask+0x8>

08004e68 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8004e72:	f7ff fa39 	bl	80042e8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8004e76:	f107 0308 	add.w	r3, r7, #8
 8004e7a:	4618      	mov	r0, r3
 8004e7c:	f000 f866 	bl	8004f4c <prvSampleTimeNow>
 8004e80:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8004e82:	68bb      	ldr	r3, [r7, #8]
 8004e84:	2b00      	cmp	r3, #0
 8004e86:	d130      	bne.n	8004eea <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	d10a      	bne.n	8004ea4 <prvProcessTimerOrBlockTask+0x3c>
 8004e8e:	687a      	ldr	r2, [r7, #4]
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	429a      	cmp	r2, r3
 8004e94:	d806      	bhi.n	8004ea4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8004e96:	f7ff fa35 	bl	8004304 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8004e9a:	68f9      	ldr	r1, [r7, #12]
 8004e9c:	6878      	ldr	r0, [r7, #4]
 8004e9e:	f7ff ff85 	bl	8004dac <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8004ea2:	e024      	b.n	8004eee <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d008      	beq.n	8004ebc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8004eaa:	4b13      	ldr	r3, [pc, #76]	; (8004ef8 <prvProcessTimerOrBlockTask+0x90>)
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d101      	bne.n	8004eb8 <prvProcessTimerOrBlockTask+0x50>
 8004eb4:	2301      	movs	r3, #1
 8004eb6:	e000      	b.n	8004eba <prvProcessTimerOrBlockTask+0x52>
 8004eb8:	2300      	movs	r3, #0
 8004eba:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8004ebc:	4b0f      	ldr	r3, [pc, #60]	; (8004efc <prvProcessTimerOrBlockTask+0x94>)
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	687a      	ldr	r2, [r7, #4]
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	1ad3      	subs	r3, r2, r3
 8004ec6:	683a      	ldr	r2, [r7, #0]
 8004ec8:	4619      	mov	r1, r3
 8004eca:	f7fe ff7d 	bl	8003dc8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8004ece:	f7ff fa19 	bl	8004304 <xTaskResumeAll>
 8004ed2:	4603      	mov	r3, r0
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8004ed8:	4b09      	ldr	r3, [pc, #36]	; (8004f00 <prvProcessTimerOrBlockTask+0x98>)
 8004eda:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ede:	601a      	str	r2, [r3, #0]
 8004ee0:	f3bf 8f4f 	dsb	sy
 8004ee4:	f3bf 8f6f 	isb	sy
}
 8004ee8:	e001      	b.n	8004eee <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8004eea:	f7ff fa0b 	bl	8004304 <xTaskResumeAll>
}
 8004eee:	bf00      	nop
 8004ef0:	3710      	adds	r7, #16
 8004ef2:	46bd      	mov	sp, r7
 8004ef4:	bd80      	pop	{r7, pc}
 8004ef6:	bf00      	nop
 8004ef8:	20000e50 	.word	0x20000e50
 8004efc:	20000e54 	.word	0x20000e54
 8004f00:	e000ed04 	.word	0xe000ed04

08004f04 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8004f0c:	4b0e      	ldr	r3, [pc, #56]	; (8004f48 <prvGetNextExpireTime+0x44>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d101      	bne.n	8004f1a <prvGetNextExpireTime+0x16>
 8004f16:	2201      	movs	r2, #1
 8004f18:	e000      	b.n	8004f1c <prvGetNextExpireTime+0x18>
 8004f1a:	2200      	movs	r2, #0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	681b      	ldr	r3, [r3, #0]
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d105      	bne.n	8004f34 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8004f28:	4b07      	ldr	r3, [pc, #28]	; (8004f48 <prvGetNextExpireTime+0x44>)
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	68db      	ldr	r3, [r3, #12]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	60fb      	str	r3, [r7, #12]
 8004f32:	e001      	b.n	8004f38 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8004f34:	2300      	movs	r3, #0
 8004f36:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8004f38:	68fb      	ldr	r3, [r7, #12]
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3714      	adds	r7, #20
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000e4c 	.word	0x20000e4c

08004f4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8004f4c:	b580      	push	{r7, lr}
 8004f4e:	b084      	sub	sp, #16
 8004f50:	af00      	add	r7, sp, #0
 8004f52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8004f54:	f7ff fa74 	bl	8004440 <xTaskGetTickCount>
 8004f58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8004f5a:	4b0b      	ldr	r3, [pc, #44]	; (8004f88 <prvSampleTimeNow+0x3c>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	68fa      	ldr	r2, [r7, #12]
 8004f60:	429a      	cmp	r2, r3
 8004f62:	d205      	bcs.n	8004f70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8004f64:	f000 f936 	bl	80051d4 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	601a      	str	r2, [r3, #0]
 8004f6e:	e002      	b.n	8004f76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8004f76:	4a04      	ldr	r2, [pc, #16]	; (8004f88 <prvSampleTimeNow+0x3c>)
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
}
 8004f7e:	4618      	mov	r0, r3
 8004f80:	3710      	adds	r7, #16
 8004f82:	46bd      	mov	sp, r7
 8004f84:	bd80      	pop	{r7, pc}
 8004f86:	bf00      	nop
 8004f88:	20000e5c 	.word	0x20000e5c

08004f8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8004f8c:	b580      	push	{r7, lr}
 8004f8e:	b086      	sub	sp, #24
 8004f90:	af00      	add	r7, sp, #0
 8004f92:	60f8      	str	r0, [r7, #12]
 8004f94:	60b9      	str	r1, [r7, #8]
 8004f96:	607a      	str	r2, [r7, #4]
 8004f98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	68fa      	ldr	r2, [r7, #12]
 8004fa8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8004faa:	68ba      	ldr	r2, [r7, #8]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	429a      	cmp	r2, r3
 8004fb0:	d812      	bhi.n	8004fd8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fb2:	687a      	ldr	r2, [r7, #4]
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	1ad2      	subs	r2, r2, r3
 8004fb8:	68fb      	ldr	r3, [r7, #12]
 8004fba:	699b      	ldr	r3, [r3, #24]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d302      	bcc.n	8004fc6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8004fc0:	2301      	movs	r3, #1
 8004fc2:	617b      	str	r3, [r7, #20]
 8004fc4:	e01b      	b.n	8004ffe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8004fc6:	4b10      	ldr	r3, [pc, #64]	; (8005008 <prvInsertTimerInActiveList+0x7c>)
 8004fc8:	681a      	ldr	r2, [r3, #0]
 8004fca:	68fb      	ldr	r3, [r7, #12]
 8004fcc:	3304      	adds	r3, #4
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4610      	mov	r0, r2
 8004fd2:	f7fe f9de 	bl	8003392 <vListInsert>
 8004fd6:	e012      	b.n	8004ffe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	683b      	ldr	r3, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d206      	bcs.n	8004fee <prvInsertTimerInActiveList+0x62>
 8004fe0:	68ba      	ldr	r2, [r7, #8]
 8004fe2:	683b      	ldr	r3, [r7, #0]
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d302      	bcc.n	8004fee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	617b      	str	r3, [r7, #20]
 8004fec:	e007      	b.n	8004ffe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8004fee:	4b07      	ldr	r3, [pc, #28]	; (800500c <prvInsertTimerInActiveList+0x80>)
 8004ff0:	681a      	ldr	r2, [r3, #0]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3304      	adds	r3, #4
 8004ff6:	4619      	mov	r1, r3
 8004ff8:	4610      	mov	r0, r2
 8004ffa:	f7fe f9ca 	bl	8003392 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8004ffe:	697b      	ldr	r3, [r7, #20]
}
 8005000:	4618      	mov	r0, r3
 8005002:	3718      	adds	r7, #24
 8005004:	46bd      	mov	sp, r7
 8005006:	bd80      	pop	{r7, pc}
 8005008:	20000e50 	.word	0x20000e50
 800500c:	20000e4c 	.word	0x20000e4c

08005010 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b08e      	sub	sp, #56	; 0x38
 8005014:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005016:	e0ca      	b.n	80051ae <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2b00      	cmp	r3, #0
 800501c:	da18      	bge.n	8005050 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800501e:	1d3b      	adds	r3, r7, #4
 8005020:	3304      	adds	r3, #4
 8005022:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005024:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d10a      	bne.n	8005040 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800502a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800502e:	f383 8811 	msr	BASEPRI, r3
 8005032:	f3bf 8f6f 	isb	sy
 8005036:	f3bf 8f4f 	dsb	sy
 800503a:	61fb      	str	r3, [r7, #28]
}
 800503c:	bf00      	nop
 800503e:	e7fe      	b.n	800503e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005046:	6850      	ldr	r0, [r2, #4]
 8005048:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800504a:	6892      	ldr	r2, [r2, #8]
 800504c:	4611      	mov	r1, r2
 800504e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	2b00      	cmp	r3, #0
 8005054:	f2c0 80aa 	blt.w	80051ac <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800505c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d004      	beq.n	800506e <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005064:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005066:	3304      	adds	r3, #4
 8005068:	4618      	mov	r0, r3
 800506a:	f7fe f9cb 	bl	8003404 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800506e:	463b      	mov	r3, r7
 8005070:	4618      	mov	r0, r3
 8005072:	f7ff ff6b 	bl	8004f4c <prvSampleTimeNow>
 8005076:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2b09      	cmp	r3, #9
 800507c:	f200 8097 	bhi.w	80051ae <prvProcessReceivedCommands+0x19e>
 8005080:	a201      	add	r2, pc, #4	; (adr r2, 8005088 <prvProcessReceivedCommands+0x78>)
 8005082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005086:	bf00      	nop
 8005088:	080050b1 	.word	0x080050b1
 800508c:	080050b1 	.word	0x080050b1
 8005090:	080050b1 	.word	0x080050b1
 8005094:	08005125 	.word	0x08005125
 8005098:	08005139 	.word	0x08005139
 800509c:	08005183 	.word	0x08005183
 80050a0:	080050b1 	.word	0x080050b1
 80050a4:	080050b1 	.word	0x080050b1
 80050a8:	08005125 	.word	0x08005125
 80050ac:	08005139 	.word	0x08005139
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80050b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050b2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050b6:	f043 0301 	orr.w	r3, r3, #1
 80050ba:	b2da      	uxtb	r2, r3
 80050bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050be:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80050c2:	68ba      	ldr	r2, [r7, #8]
 80050c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050c6:	699b      	ldr	r3, [r3, #24]
 80050c8:	18d1      	adds	r1, r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80050ce:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050d0:	f7ff ff5c 	bl	8004f8c <prvInsertTimerInActiveList>
 80050d4:	4603      	mov	r3, r0
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d069      	beq.n	80051ae <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80050da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80050e0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80050e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050e4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80050e8:	f003 0304 	and.w	r3, r3, #4
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d05e      	beq.n	80051ae <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80050f0:	68ba      	ldr	r2, [r7, #8]
 80050f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	441a      	add	r2, r3
 80050f8:	2300      	movs	r3, #0
 80050fa:	9300      	str	r3, [sp, #0]
 80050fc:	2300      	movs	r3, #0
 80050fe:	2100      	movs	r1, #0
 8005100:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005102:	f7ff fe05 	bl	8004d10 <xTimerGenericCommand>
 8005106:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005108:	6a3b      	ldr	r3, [r7, #32]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d14f      	bne.n	80051ae <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800510e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005112:	f383 8811 	msr	BASEPRI, r3
 8005116:	f3bf 8f6f 	isb	sy
 800511a:	f3bf 8f4f 	dsb	sy
 800511e:	61bb      	str	r3, [r7, #24]
}
 8005120:	bf00      	nop
 8005122:	e7fe      	b.n	8005122 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005124:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005126:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800512a:	f023 0301 	bic.w	r3, r3, #1
 800512e:	b2da      	uxtb	r2, r3
 8005130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005132:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8005136:	e03a      	b.n	80051ae <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005138:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800513a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800513e:	f043 0301 	orr.w	r3, r3, #1
 8005142:	b2da      	uxtb	r2, r3
 8005144:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005146:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800514e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005150:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005152:	699b      	ldr	r3, [r3, #24]
 8005154:	2b00      	cmp	r3, #0
 8005156:	d10a      	bne.n	800516e <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005158:	f04f 0350 	mov.w	r3, #80	; 0x50
 800515c:	f383 8811 	msr	BASEPRI, r3
 8005160:	f3bf 8f6f 	isb	sy
 8005164:	f3bf 8f4f 	dsb	sy
 8005168:	617b      	str	r3, [r7, #20]
}
 800516a:	bf00      	nop
 800516c:	e7fe      	b.n	800516c <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800516e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005170:	699a      	ldr	r2, [r3, #24]
 8005172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005174:	18d1      	adds	r1, r2, r3
 8005176:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005178:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800517a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800517c:	f7ff ff06 	bl	8004f8c <prvInsertTimerInActiveList>
					break;
 8005180:	e015      	b.n	80051ae <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005184:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005188:	f003 0302 	and.w	r3, r3, #2
 800518c:	2b00      	cmp	r3, #0
 800518e:	d103      	bne.n	8005198 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005190:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005192:	f000 fbdd 	bl	8005950 <vPortFree>
 8005196:	e00a      	b.n	80051ae <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005198:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800519a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800519e:	f023 0301 	bic.w	r3, r3, #1
 80051a2:	b2da      	uxtb	r2, r3
 80051a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80051a6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80051aa:	e000      	b.n	80051ae <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80051ac:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80051ae:	4b08      	ldr	r3, [pc, #32]	; (80051d0 <prvProcessReceivedCommands+0x1c0>)
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	1d39      	adds	r1, r7, #4
 80051b4:	2200      	movs	r2, #0
 80051b6:	4618      	mov	r0, r3
 80051b8:	f7fe fbec 	bl	8003994 <xQueueReceive>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	f47f af2a 	bne.w	8005018 <prvProcessReceivedCommands+0x8>
	}
}
 80051c4:	bf00      	nop
 80051c6:	bf00      	nop
 80051c8:	3730      	adds	r7, #48	; 0x30
 80051ca:	46bd      	mov	sp, r7
 80051cc:	bd80      	pop	{r7, pc}
 80051ce:	bf00      	nop
 80051d0:	20000e54 	.word	0x20000e54

080051d4 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b088      	sub	sp, #32
 80051d8:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80051da:	e048      	b.n	800526e <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80051dc:	4b2d      	ldr	r3, [pc, #180]	; (8005294 <prvSwitchTimerLists+0xc0>)
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80051e6:	4b2b      	ldr	r3, [pc, #172]	; (8005294 <prvSwitchTimerLists+0xc0>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	68db      	ldr	r3, [r3, #12]
 80051ec:	68db      	ldr	r3, [r3, #12]
 80051ee:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	3304      	adds	r3, #4
 80051f4:	4618      	mov	r0, r3
 80051f6:	f7fe f905 	bl	8003404 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80051fa:	68fb      	ldr	r3, [r7, #12]
 80051fc:	6a1b      	ldr	r3, [r3, #32]
 80051fe:	68f8      	ldr	r0, [r7, #12]
 8005200:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005208:	f003 0304 	and.w	r3, r3, #4
 800520c:	2b00      	cmp	r3, #0
 800520e:	d02e      	beq.n	800526e <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	699b      	ldr	r3, [r3, #24]
 8005214:	693a      	ldr	r2, [r7, #16]
 8005216:	4413      	add	r3, r2
 8005218:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800521a:	68ba      	ldr	r2, [r7, #8]
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	429a      	cmp	r2, r3
 8005220:	d90e      	bls.n	8005240 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	68ba      	ldr	r2, [r7, #8]
 8005226:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	68fa      	ldr	r2, [r7, #12]
 800522c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800522e:	4b19      	ldr	r3, [pc, #100]	; (8005294 <prvSwitchTimerLists+0xc0>)
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	3304      	adds	r3, #4
 8005236:	4619      	mov	r1, r3
 8005238:	4610      	mov	r0, r2
 800523a:	f7fe f8aa 	bl	8003392 <vListInsert>
 800523e:	e016      	b.n	800526e <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005240:	2300      	movs	r3, #0
 8005242:	9300      	str	r3, [sp, #0]
 8005244:	2300      	movs	r3, #0
 8005246:	693a      	ldr	r2, [r7, #16]
 8005248:	2100      	movs	r1, #0
 800524a:	68f8      	ldr	r0, [r7, #12]
 800524c:	f7ff fd60 	bl	8004d10 <xTimerGenericCommand>
 8005250:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d10a      	bne.n	800526e <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005258:	f04f 0350 	mov.w	r3, #80	; 0x50
 800525c:	f383 8811 	msr	BASEPRI, r3
 8005260:	f3bf 8f6f 	isb	sy
 8005264:	f3bf 8f4f 	dsb	sy
 8005268:	603b      	str	r3, [r7, #0]
}
 800526a:	bf00      	nop
 800526c:	e7fe      	b.n	800526c <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800526e:	4b09      	ldr	r3, [pc, #36]	; (8005294 <prvSwitchTimerLists+0xc0>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d1b1      	bne.n	80051dc <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005278:	4b06      	ldr	r3, [pc, #24]	; (8005294 <prvSwitchTimerLists+0xc0>)
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800527e:	4b06      	ldr	r3, [pc, #24]	; (8005298 <prvSwitchTimerLists+0xc4>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a04      	ldr	r2, [pc, #16]	; (8005294 <prvSwitchTimerLists+0xc0>)
 8005284:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005286:	4a04      	ldr	r2, [pc, #16]	; (8005298 <prvSwitchTimerLists+0xc4>)
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	6013      	str	r3, [r2, #0]
}
 800528c:	bf00      	nop
 800528e:	3718      	adds	r7, #24
 8005290:	46bd      	mov	sp, r7
 8005292:	bd80      	pop	{r7, pc}
 8005294:	20000e4c 	.word	0x20000e4c
 8005298:	20000e50 	.word	0x20000e50

0800529c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800529c:	b580      	push	{r7, lr}
 800529e:	b082      	sub	sp, #8
 80052a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80052a2:	f000 f967 	bl	8005574 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80052a6:	4b15      	ldr	r3, [pc, #84]	; (80052fc <prvCheckForValidListAndQueue+0x60>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d120      	bne.n	80052f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80052ae:	4814      	ldr	r0, [pc, #80]	; (8005300 <prvCheckForValidListAndQueue+0x64>)
 80052b0:	f7fe f81e 	bl	80032f0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80052b4:	4813      	ldr	r0, [pc, #76]	; (8005304 <prvCheckForValidListAndQueue+0x68>)
 80052b6:	f7fe f81b 	bl	80032f0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80052ba:	4b13      	ldr	r3, [pc, #76]	; (8005308 <prvCheckForValidListAndQueue+0x6c>)
 80052bc:	4a10      	ldr	r2, [pc, #64]	; (8005300 <prvCheckForValidListAndQueue+0x64>)
 80052be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80052c0:	4b12      	ldr	r3, [pc, #72]	; (800530c <prvCheckForValidListAndQueue+0x70>)
 80052c2:	4a10      	ldr	r2, [pc, #64]	; (8005304 <prvCheckForValidListAndQueue+0x68>)
 80052c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80052c6:	2300      	movs	r3, #0
 80052c8:	9300      	str	r3, [sp, #0]
 80052ca:	4b11      	ldr	r3, [pc, #68]	; (8005310 <prvCheckForValidListAndQueue+0x74>)
 80052cc:	4a11      	ldr	r2, [pc, #68]	; (8005314 <prvCheckForValidListAndQueue+0x78>)
 80052ce:	2110      	movs	r1, #16
 80052d0:	200a      	movs	r0, #10
 80052d2:	f7fe f929 	bl	8003528 <xQueueGenericCreateStatic>
 80052d6:	4603      	mov	r3, r0
 80052d8:	4a08      	ldr	r2, [pc, #32]	; (80052fc <prvCheckForValidListAndQueue+0x60>)
 80052da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80052dc:	4b07      	ldr	r3, [pc, #28]	; (80052fc <prvCheckForValidListAndQueue+0x60>)
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d005      	beq.n	80052f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80052e4:	4b05      	ldr	r3, [pc, #20]	; (80052fc <prvCheckForValidListAndQueue+0x60>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	490b      	ldr	r1, [pc, #44]	; (8005318 <prvCheckForValidListAndQueue+0x7c>)
 80052ea:	4618      	mov	r0, r3
 80052ec:	f7fe fd42 	bl	8003d74 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80052f0:	f000 f970 	bl	80055d4 <vPortExitCritical>
}
 80052f4:	bf00      	nop
 80052f6:	46bd      	mov	sp, r7
 80052f8:	bd80      	pop	{r7, pc}
 80052fa:	bf00      	nop
 80052fc:	20000e54 	.word	0x20000e54
 8005300:	20000e24 	.word	0x20000e24
 8005304:	20000e38 	.word	0x20000e38
 8005308:	20000e4c 	.word	0x20000e4c
 800530c:	20000e50 	.word	0x20000e50
 8005310:	20000f00 	.word	0x20000f00
 8005314:	20000e60 	.word	0x20000e60
 8005318:	08005dbc 	.word	0x08005dbc

0800531c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	60f8      	str	r0, [r7, #12]
 8005324:	60b9      	str	r1, [r7, #8]
 8005326:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	3b04      	subs	r3, #4
 800532c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005334:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	3b04      	subs	r3, #4
 800533a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800533c:	68bb      	ldr	r3, [r7, #8]
 800533e:	f023 0201 	bic.w	r2, r3, #1
 8005342:	68fb      	ldr	r3, [r7, #12]
 8005344:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	3b04      	subs	r3, #4
 800534a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800534c:	4a0c      	ldr	r2, [pc, #48]	; (8005380 <pxPortInitialiseStack+0x64>)
 800534e:	68fb      	ldr	r3, [r7, #12]
 8005350:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005352:	68fb      	ldr	r3, [r7, #12]
 8005354:	3b14      	subs	r3, #20
 8005356:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005358:	687a      	ldr	r2, [r7, #4]
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	3b04      	subs	r3, #4
 8005362:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f06f 0202 	mvn.w	r2, #2
 800536a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	3b20      	subs	r3, #32
 8005370:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005372:	68fb      	ldr	r3, [r7, #12]
}
 8005374:	4618      	mov	r0, r3
 8005376:	3714      	adds	r7, #20
 8005378:	46bd      	mov	sp, r7
 800537a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537e:	4770      	bx	lr
 8005380:	08005385 	.word	0x08005385

08005384 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005384:	b480      	push	{r7}
 8005386:	b085      	sub	sp, #20
 8005388:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800538a:	2300      	movs	r3, #0
 800538c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800538e:	4b12      	ldr	r3, [pc, #72]	; (80053d8 <prvTaskExitError+0x54>)
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005396:	d00a      	beq.n	80053ae <prvTaskExitError+0x2a>
	__asm volatile
 8005398:	f04f 0350 	mov.w	r3, #80	; 0x50
 800539c:	f383 8811 	msr	BASEPRI, r3
 80053a0:	f3bf 8f6f 	isb	sy
 80053a4:	f3bf 8f4f 	dsb	sy
 80053a8:	60fb      	str	r3, [r7, #12]
}
 80053aa:	bf00      	nop
 80053ac:	e7fe      	b.n	80053ac <prvTaskExitError+0x28>
	__asm volatile
 80053ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b2:	f383 8811 	msr	BASEPRI, r3
 80053b6:	f3bf 8f6f 	isb	sy
 80053ba:	f3bf 8f4f 	dsb	sy
 80053be:	60bb      	str	r3, [r7, #8]
}
 80053c0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80053c2:	bf00      	nop
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d0fc      	beq.n	80053c4 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80053ca:	bf00      	nop
 80053cc:	bf00      	nop
 80053ce:	3714      	adds	r7, #20
 80053d0:	46bd      	mov	sp, r7
 80053d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d6:	4770      	bx	lr
 80053d8:	2000000c 	.word	0x2000000c
 80053dc:	00000000 	.word	0x00000000

080053e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80053e0:	4b07      	ldr	r3, [pc, #28]	; (8005400 <pxCurrentTCBConst2>)
 80053e2:	6819      	ldr	r1, [r3, #0]
 80053e4:	6808      	ldr	r0, [r1, #0]
 80053e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ea:	f380 8809 	msr	PSP, r0
 80053ee:	f3bf 8f6f 	isb	sy
 80053f2:	f04f 0000 	mov.w	r0, #0
 80053f6:	f380 8811 	msr	BASEPRI, r0
 80053fa:	4770      	bx	lr
 80053fc:	f3af 8000 	nop.w

08005400 <pxCurrentTCBConst2>:
 8005400:	20000924 	.word	0x20000924
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop

08005408 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005408:	4808      	ldr	r0, [pc, #32]	; (800542c <prvPortStartFirstTask+0x24>)
 800540a:	6800      	ldr	r0, [r0, #0]
 800540c:	6800      	ldr	r0, [r0, #0]
 800540e:	f380 8808 	msr	MSP, r0
 8005412:	f04f 0000 	mov.w	r0, #0
 8005416:	f380 8814 	msr	CONTROL, r0
 800541a:	b662      	cpsie	i
 800541c:	b661      	cpsie	f
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	f3bf 8f6f 	isb	sy
 8005426:	df00      	svc	0
 8005428:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800542a:	bf00      	nop
 800542c:	e000ed08 	.word	0xe000ed08

08005430 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b086      	sub	sp, #24
 8005434:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005436:	4b46      	ldr	r3, [pc, #280]	; (8005550 <xPortStartScheduler+0x120>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	4a46      	ldr	r2, [pc, #280]	; (8005554 <xPortStartScheduler+0x124>)
 800543c:	4293      	cmp	r3, r2
 800543e:	d10a      	bne.n	8005456 <xPortStartScheduler+0x26>
	__asm volatile
 8005440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005444:	f383 8811 	msr	BASEPRI, r3
 8005448:	f3bf 8f6f 	isb	sy
 800544c:	f3bf 8f4f 	dsb	sy
 8005450:	613b      	str	r3, [r7, #16]
}
 8005452:	bf00      	nop
 8005454:	e7fe      	b.n	8005454 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005456:	4b3e      	ldr	r3, [pc, #248]	; (8005550 <xPortStartScheduler+0x120>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a3f      	ldr	r2, [pc, #252]	; (8005558 <xPortStartScheduler+0x128>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d10a      	bne.n	8005476 <xPortStartScheduler+0x46>
	__asm volatile
 8005460:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005464:	f383 8811 	msr	BASEPRI, r3
 8005468:	f3bf 8f6f 	isb	sy
 800546c:	f3bf 8f4f 	dsb	sy
 8005470:	60fb      	str	r3, [r7, #12]
}
 8005472:	bf00      	nop
 8005474:	e7fe      	b.n	8005474 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005476:	4b39      	ldr	r3, [pc, #228]	; (800555c <xPortStartScheduler+0x12c>)
 8005478:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800547a:	697b      	ldr	r3, [r7, #20]
 800547c:	781b      	ldrb	r3, [r3, #0]
 800547e:	b2db      	uxtb	r3, r3
 8005480:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005482:	697b      	ldr	r3, [r7, #20]
 8005484:	22ff      	movs	r2, #255	; 0xff
 8005486:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	781b      	ldrb	r3, [r3, #0]
 800548c:	b2db      	uxtb	r3, r3
 800548e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005490:	78fb      	ldrb	r3, [r7, #3]
 8005492:	b2db      	uxtb	r3, r3
 8005494:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005498:	b2da      	uxtb	r2, r3
 800549a:	4b31      	ldr	r3, [pc, #196]	; (8005560 <xPortStartScheduler+0x130>)
 800549c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800549e:	4b31      	ldr	r3, [pc, #196]	; (8005564 <xPortStartScheduler+0x134>)
 80054a0:	2207      	movs	r2, #7
 80054a2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054a4:	e009      	b.n	80054ba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80054a6:	4b2f      	ldr	r3, [pc, #188]	; (8005564 <xPortStartScheduler+0x134>)
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	4a2d      	ldr	r2, [pc, #180]	; (8005564 <xPortStartScheduler+0x134>)
 80054ae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80054b0:	78fb      	ldrb	r3, [r7, #3]
 80054b2:	b2db      	uxtb	r3, r3
 80054b4:	005b      	lsls	r3, r3, #1
 80054b6:	b2db      	uxtb	r3, r3
 80054b8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80054ba:	78fb      	ldrb	r3, [r7, #3]
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80054c2:	2b80      	cmp	r3, #128	; 0x80
 80054c4:	d0ef      	beq.n	80054a6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80054c6:	4b27      	ldr	r3, [pc, #156]	; (8005564 <xPortStartScheduler+0x134>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f1c3 0307 	rsb	r3, r3, #7
 80054ce:	2b04      	cmp	r3, #4
 80054d0:	d00a      	beq.n	80054e8 <xPortStartScheduler+0xb8>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	60bb      	str	r3, [r7, #8]
}
 80054e4:	bf00      	nop
 80054e6:	e7fe      	b.n	80054e6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80054e8:	4b1e      	ldr	r3, [pc, #120]	; (8005564 <xPortStartScheduler+0x134>)
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	021b      	lsls	r3, r3, #8
 80054ee:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <xPortStartScheduler+0x134>)
 80054f0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80054f2:	4b1c      	ldr	r3, [pc, #112]	; (8005564 <xPortStartScheduler+0x134>)
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80054fa:	4a1a      	ldr	r2, [pc, #104]	; (8005564 <xPortStartScheduler+0x134>)
 80054fc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	b2da      	uxtb	r2, r3
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005506:	4b18      	ldr	r3, [pc, #96]	; (8005568 <xPortStartScheduler+0x138>)
 8005508:	681b      	ldr	r3, [r3, #0]
 800550a:	4a17      	ldr	r2, [pc, #92]	; (8005568 <xPortStartScheduler+0x138>)
 800550c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005510:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005512:	4b15      	ldr	r3, [pc, #84]	; (8005568 <xPortStartScheduler+0x138>)
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a14      	ldr	r2, [pc, #80]	; (8005568 <xPortStartScheduler+0x138>)
 8005518:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800551c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800551e:	f000 f8dd 	bl	80056dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005522:	4b12      	ldr	r3, [pc, #72]	; (800556c <xPortStartScheduler+0x13c>)
 8005524:	2200      	movs	r2, #0
 8005526:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005528:	f000 f8fc 	bl	8005724 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800552c:	4b10      	ldr	r3, [pc, #64]	; (8005570 <xPortStartScheduler+0x140>)
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	4a0f      	ldr	r2, [pc, #60]	; (8005570 <xPortStartScheduler+0x140>)
 8005532:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005536:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005538:	f7ff ff66 	bl	8005408 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800553c:	f7ff f84a 	bl	80045d4 <vTaskSwitchContext>
	prvTaskExitError();
 8005540:	f7ff ff20 	bl	8005384 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3718      	adds	r7, #24
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	e000ed00 	.word	0xe000ed00
 8005554:	410fc271 	.word	0x410fc271
 8005558:	410fc270 	.word	0x410fc270
 800555c:	e000e400 	.word	0xe000e400
 8005560:	20000f50 	.word	0x20000f50
 8005564:	20000f54 	.word	0x20000f54
 8005568:	e000ed20 	.word	0xe000ed20
 800556c:	2000000c 	.word	0x2000000c
 8005570:	e000ef34 	.word	0xe000ef34

08005574 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005574:	b480      	push	{r7}
 8005576:	b083      	sub	sp, #12
 8005578:	af00      	add	r7, sp, #0
	__asm volatile
 800557a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557e:	f383 8811 	msr	BASEPRI, r3
 8005582:	f3bf 8f6f 	isb	sy
 8005586:	f3bf 8f4f 	dsb	sy
 800558a:	607b      	str	r3, [r7, #4]
}
 800558c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800558e:	4b0f      	ldr	r3, [pc, #60]	; (80055cc <vPortEnterCritical+0x58>)
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	3301      	adds	r3, #1
 8005594:	4a0d      	ldr	r2, [pc, #52]	; (80055cc <vPortEnterCritical+0x58>)
 8005596:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005598:	4b0c      	ldr	r3, [pc, #48]	; (80055cc <vPortEnterCritical+0x58>)
 800559a:	681b      	ldr	r3, [r3, #0]
 800559c:	2b01      	cmp	r3, #1
 800559e:	d10f      	bne.n	80055c0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80055a0:	4b0b      	ldr	r3, [pc, #44]	; (80055d0 <vPortEnterCritical+0x5c>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	b2db      	uxtb	r3, r3
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d00a      	beq.n	80055c0 <vPortEnterCritical+0x4c>
	__asm volatile
 80055aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055ae:	f383 8811 	msr	BASEPRI, r3
 80055b2:	f3bf 8f6f 	isb	sy
 80055b6:	f3bf 8f4f 	dsb	sy
 80055ba:	603b      	str	r3, [r7, #0]
}
 80055bc:	bf00      	nop
 80055be:	e7fe      	b.n	80055be <vPortEnterCritical+0x4a>
	}
}
 80055c0:	bf00      	nop
 80055c2:	370c      	adds	r7, #12
 80055c4:	46bd      	mov	sp, r7
 80055c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055ca:	4770      	bx	lr
 80055cc:	2000000c 	.word	0x2000000c
 80055d0:	e000ed04 	.word	0xe000ed04

080055d4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80055d4:	b480      	push	{r7}
 80055d6:	b083      	sub	sp, #12
 80055d8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80055da:	4b12      	ldr	r3, [pc, #72]	; (8005624 <vPortExitCritical+0x50>)
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d10a      	bne.n	80055f8 <vPortExitCritical+0x24>
	__asm volatile
 80055e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e6:	f383 8811 	msr	BASEPRI, r3
 80055ea:	f3bf 8f6f 	isb	sy
 80055ee:	f3bf 8f4f 	dsb	sy
 80055f2:	607b      	str	r3, [r7, #4]
}
 80055f4:	bf00      	nop
 80055f6:	e7fe      	b.n	80055f6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80055f8:	4b0a      	ldr	r3, [pc, #40]	; (8005624 <vPortExitCritical+0x50>)
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	3b01      	subs	r3, #1
 80055fe:	4a09      	ldr	r2, [pc, #36]	; (8005624 <vPortExitCritical+0x50>)
 8005600:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005602:	4b08      	ldr	r3, [pc, #32]	; (8005624 <vPortExitCritical+0x50>)
 8005604:	681b      	ldr	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	d105      	bne.n	8005616 <vPortExitCritical+0x42>
 800560a:	2300      	movs	r3, #0
 800560c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	f383 8811 	msr	BASEPRI, r3
}
 8005614:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005616:	bf00      	nop
 8005618:	370c      	adds	r7, #12
 800561a:	46bd      	mov	sp, r7
 800561c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005620:	4770      	bx	lr
 8005622:	bf00      	nop
 8005624:	2000000c 	.word	0x2000000c
	...

08005630 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005630:	f3ef 8009 	mrs	r0, PSP
 8005634:	f3bf 8f6f 	isb	sy
 8005638:	4b15      	ldr	r3, [pc, #84]	; (8005690 <pxCurrentTCBConst>)
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	f01e 0f10 	tst.w	lr, #16
 8005640:	bf08      	it	eq
 8005642:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005646:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800564a:	6010      	str	r0, [r2, #0]
 800564c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005650:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005654:	f380 8811 	msr	BASEPRI, r0
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	f3bf 8f6f 	isb	sy
 8005660:	f7fe ffb8 	bl	80045d4 <vTaskSwitchContext>
 8005664:	f04f 0000 	mov.w	r0, #0
 8005668:	f380 8811 	msr	BASEPRI, r0
 800566c:	bc09      	pop	{r0, r3}
 800566e:	6819      	ldr	r1, [r3, #0]
 8005670:	6808      	ldr	r0, [r1, #0]
 8005672:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005676:	f01e 0f10 	tst.w	lr, #16
 800567a:	bf08      	it	eq
 800567c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005680:	f380 8809 	msr	PSP, r0
 8005684:	f3bf 8f6f 	isb	sy
 8005688:	4770      	bx	lr
 800568a:	bf00      	nop
 800568c:	f3af 8000 	nop.w

08005690 <pxCurrentTCBConst>:
 8005690:	20000924 	.word	0x20000924
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005694:	bf00      	nop
 8005696:	bf00      	nop

08005698 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005698:	b580      	push	{r7, lr}
 800569a:	b082      	sub	sp, #8
 800569c:	af00      	add	r7, sp, #0
	__asm volatile
 800569e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056a2:	f383 8811 	msr	BASEPRI, r3
 80056a6:	f3bf 8f6f 	isb	sy
 80056aa:	f3bf 8f4f 	dsb	sy
 80056ae:	607b      	str	r3, [r7, #4]
}
 80056b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80056b2:	f7fe fed5 	bl	8004460 <xTaskIncrementTick>
 80056b6:	4603      	mov	r3, r0
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d003      	beq.n	80056c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80056bc:	4b06      	ldr	r3, [pc, #24]	; (80056d8 <xPortSysTickHandler+0x40>)
 80056be:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80056c2:	601a      	str	r2, [r3, #0]
 80056c4:	2300      	movs	r3, #0
 80056c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	f383 8811 	msr	BASEPRI, r3
}
 80056ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80056d0:	bf00      	nop
 80056d2:	3708      	adds	r7, #8
 80056d4:	46bd      	mov	sp, r7
 80056d6:	bd80      	pop	{r7, pc}
 80056d8:	e000ed04 	.word	0xe000ed04

080056dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80056dc:	b480      	push	{r7}
 80056de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80056e0:	4b0b      	ldr	r3, [pc, #44]	; (8005710 <vPortSetupTimerInterrupt+0x34>)
 80056e2:	2200      	movs	r2, #0
 80056e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80056e6:	4b0b      	ldr	r3, [pc, #44]	; (8005714 <vPortSetupTimerInterrupt+0x38>)
 80056e8:	2200      	movs	r2, #0
 80056ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80056ec:	4b0a      	ldr	r3, [pc, #40]	; (8005718 <vPortSetupTimerInterrupt+0x3c>)
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	4a0a      	ldr	r2, [pc, #40]	; (800571c <vPortSetupTimerInterrupt+0x40>)
 80056f2:	fba2 2303 	umull	r2, r3, r2, r3
 80056f6:	099b      	lsrs	r3, r3, #6
 80056f8:	4a09      	ldr	r2, [pc, #36]	; (8005720 <vPortSetupTimerInterrupt+0x44>)
 80056fa:	3b01      	subs	r3, #1
 80056fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80056fe:	4b04      	ldr	r3, [pc, #16]	; (8005710 <vPortSetupTimerInterrupt+0x34>)
 8005700:	2207      	movs	r2, #7
 8005702:	601a      	str	r2, [r3, #0]
}
 8005704:	bf00      	nop
 8005706:	46bd      	mov	sp, r7
 8005708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570c:	4770      	bx	lr
 800570e:	bf00      	nop
 8005710:	e000e010 	.word	0xe000e010
 8005714:	e000e018 	.word	0xe000e018
 8005718:	20000000 	.word	0x20000000
 800571c:	10624dd3 	.word	0x10624dd3
 8005720:	e000e014 	.word	0xe000e014

08005724 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005724:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005734 <vPortEnableVFP+0x10>
 8005728:	6801      	ldr	r1, [r0, #0]
 800572a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800572e:	6001      	str	r1, [r0, #0]
 8005730:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005732:	bf00      	nop
 8005734:	e000ed88 	.word	0xe000ed88

08005738 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005738:	b480      	push	{r7}
 800573a:	b085      	sub	sp, #20
 800573c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800573e:	f3ef 8305 	mrs	r3, IPSR
 8005742:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2b0f      	cmp	r3, #15
 8005748:	d914      	bls.n	8005774 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800574a:	4a17      	ldr	r2, [pc, #92]	; (80057a8 <vPortValidateInterruptPriority+0x70>)
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	4413      	add	r3, r2
 8005750:	781b      	ldrb	r3, [r3, #0]
 8005752:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005754:	4b15      	ldr	r3, [pc, #84]	; (80057ac <vPortValidateInterruptPriority+0x74>)
 8005756:	781b      	ldrb	r3, [r3, #0]
 8005758:	7afa      	ldrb	r2, [r7, #11]
 800575a:	429a      	cmp	r2, r3
 800575c:	d20a      	bcs.n	8005774 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800575e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005762:	f383 8811 	msr	BASEPRI, r3
 8005766:	f3bf 8f6f 	isb	sy
 800576a:	f3bf 8f4f 	dsb	sy
 800576e:	607b      	str	r3, [r7, #4]
}
 8005770:	bf00      	nop
 8005772:	e7fe      	b.n	8005772 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005774:	4b0e      	ldr	r3, [pc, #56]	; (80057b0 <vPortValidateInterruptPriority+0x78>)
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800577c:	4b0d      	ldr	r3, [pc, #52]	; (80057b4 <vPortValidateInterruptPriority+0x7c>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	429a      	cmp	r2, r3
 8005782:	d90a      	bls.n	800579a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005784:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005788:	f383 8811 	msr	BASEPRI, r3
 800578c:	f3bf 8f6f 	isb	sy
 8005790:	f3bf 8f4f 	dsb	sy
 8005794:	603b      	str	r3, [r7, #0]
}
 8005796:	bf00      	nop
 8005798:	e7fe      	b.n	8005798 <vPortValidateInterruptPriority+0x60>
	}
 800579a:	bf00      	nop
 800579c:	3714      	adds	r7, #20
 800579e:	46bd      	mov	sp, r7
 80057a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057a4:	4770      	bx	lr
 80057a6:	bf00      	nop
 80057a8:	e000e3f0 	.word	0xe000e3f0
 80057ac:	20000f50 	.word	0x20000f50
 80057b0:	e000ed0c 	.word	0xe000ed0c
 80057b4:	20000f54 	.word	0x20000f54

080057b8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80057b8:	b580      	push	{r7, lr}
 80057ba:	b08a      	sub	sp, #40	; 0x28
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80057c0:	2300      	movs	r3, #0
 80057c2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80057c4:	f7fe fd90 	bl	80042e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80057c8:	4b5b      	ldr	r3, [pc, #364]	; (8005938 <pvPortMalloc+0x180>)
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d101      	bne.n	80057d4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80057d0:	f000 f920 	bl	8005a14 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80057d4:	4b59      	ldr	r3, [pc, #356]	; (800593c <pvPortMalloc+0x184>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	4013      	ands	r3, r2
 80057dc:	2b00      	cmp	r3, #0
 80057de:	f040 8093 	bne.w	8005908 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d01d      	beq.n	8005824 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80057e8:	2208      	movs	r2, #8
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4413      	add	r3, r2
 80057ee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	f003 0307 	and.w	r3, r3, #7
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d014      	beq.n	8005824 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	f023 0307 	bic.w	r3, r3, #7
 8005800:	3308      	adds	r3, #8
 8005802:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	f003 0307 	and.w	r3, r3, #7
 800580a:	2b00      	cmp	r3, #0
 800580c:	d00a      	beq.n	8005824 <pvPortMalloc+0x6c>
	__asm volatile
 800580e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005812:	f383 8811 	msr	BASEPRI, r3
 8005816:	f3bf 8f6f 	isb	sy
 800581a:	f3bf 8f4f 	dsb	sy
 800581e:	617b      	str	r3, [r7, #20]
}
 8005820:	bf00      	nop
 8005822:	e7fe      	b.n	8005822 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d06e      	beq.n	8005908 <pvPortMalloc+0x150>
 800582a:	4b45      	ldr	r3, [pc, #276]	; (8005940 <pvPortMalloc+0x188>)
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	429a      	cmp	r2, r3
 8005832:	d869      	bhi.n	8005908 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005834:	4b43      	ldr	r3, [pc, #268]	; (8005944 <pvPortMalloc+0x18c>)
 8005836:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005838:	4b42      	ldr	r3, [pc, #264]	; (8005944 <pvPortMalloc+0x18c>)
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800583e:	e004      	b.n	800584a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005842:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005844:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005846:	681b      	ldr	r3, [r3, #0]
 8005848:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800584a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800584c:	685b      	ldr	r3, [r3, #4]
 800584e:	687a      	ldr	r2, [r7, #4]
 8005850:	429a      	cmp	r2, r3
 8005852:	d903      	bls.n	800585c <pvPortMalloc+0xa4>
 8005854:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d1f1      	bne.n	8005840 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800585c:	4b36      	ldr	r3, [pc, #216]	; (8005938 <pvPortMalloc+0x180>)
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005862:	429a      	cmp	r2, r3
 8005864:	d050      	beq.n	8005908 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	2208      	movs	r2, #8
 800586c:	4413      	add	r3, r2
 800586e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005870:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005872:	681a      	ldr	r2, [r3, #0]
 8005874:	6a3b      	ldr	r3, [r7, #32]
 8005876:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	1ad2      	subs	r2, r2, r3
 8005880:	2308      	movs	r3, #8
 8005882:	005b      	lsls	r3, r3, #1
 8005884:	429a      	cmp	r2, r3
 8005886:	d91f      	bls.n	80058c8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	4413      	add	r3, r2
 800588e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005890:	69bb      	ldr	r3, [r7, #24]
 8005892:	f003 0307 	and.w	r3, r3, #7
 8005896:	2b00      	cmp	r3, #0
 8005898:	d00a      	beq.n	80058b0 <pvPortMalloc+0xf8>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	613b      	str	r3, [r7, #16]
}
 80058ac:	bf00      	nop
 80058ae:	e7fe      	b.n	80058ae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80058b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058b2:	685a      	ldr	r2, [r3, #4]
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	1ad2      	subs	r2, r2, r3
 80058b8:	69bb      	ldr	r3, [r7, #24]
 80058ba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80058bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058be:	687a      	ldr	r2, [r7, #4]
 80058c0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80058c2:	69b8      	ldr	r0, [r7, #24]
 80058c4:	f000 f908 	bl	8005ad8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80058c8:	4b1d      	ldr	r3, [pc, #116]	; (8005940 <pvPortMalloc+0x188>)
 80058ca:	681a      	ldr	r2, [r3, #0]
 80058cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	1ad3      	subs	r3, r2, r3
 80058d2:	4a1b      	ldr	r2, [pc, #108]	; (8005940 <pvPortMalloc+0x188>)
 80058d4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80058d6:	4b1a      	ldr	r3, [pc, #104]	; (8005940 <pvPortMalloc+0x188>)
 80058d8:	681a      	ldr	r2, [r3, #0]
 80058da:	4b1b      	ldr	r3, [pc, #108]	; (8005948 <pvPortMalloc+0x190>)
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	429a      	cmp	r2, r3
 80058e0:	d203      	bcs.n	80058ea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80058e2:	4b17      	ldr	r3, [pc, #92]	; (8005940 <pvPortMalloc+0x188>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a18      	ldr	r2, [pc, #96]	; (8005948 <pvPortMalloc+0x190>)
 80058e8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80058ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058ec:	685a      	ldr	r2, [r3, #4]
 80058ee:	4b13      	ldr	r3, [pc, #76]	; (800593c <pvPortMalloc+0x184>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	431a      	orrs	r2, r3
 80058f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058f6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80058f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058fa:	2200      	movs	r2, #0
 80058fc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80058fe:	4b13      	ldr	r3, [pc, #76]	; (800594c <pvPortMalloc+0x194>)
 8005900:	681b      	ldr	r3, [r3, #0]
 8005902:	3301      	adds	r3, #1
 8005904:	4a11      	ldr	r2, [pc, #68]	; (800594c <pvPortMalloc+0x194>)
 8005906:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005908:	f7fe fcfc 	bl	8004304 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800590c:	69fb      	ldr	r3, [r7, #28]
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	2b00      	cmp	r3, #0
 8005914:	d00a      	beq.n	800592c <pvPortMalloc+0x174>
	__asm volatile
 8005916:	f04f 0350 	mov.w	r3, #80	; 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	60fb      	str	r3, [r7, #12]
}
 8005928:	bf00      	nop
 800592a:	e7fe      	b.n	800592a <pvPortMalloc+0x172>
	return pvReturn;
 800592c:	69fb      	ldr	r3, [r7, #28]
}
 800592e:	4618      	mov	r0, r3
 8005930:	3728      	adds	r7, #40	; 0x28
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}
 8005936:	bf00      	nop
 8005938:	20001b18 	.word	0x20001b18
 800593c:	20001b2c 	.word	0x20001b2c
 8005940:	20001b1c 	.word	0x20001b1c
 8005944:	20001b10 	.word	0x20001b10
 8005948:	20001b20 	.word	0x20001b20
 800594c:	20001b24 	.word	0x20001b24

08005950 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b086      	sub	sp, #24
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d04d      	beq.n	80059fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005962:	2308      	movs	r3, #8
 8005964:	425b      	negs	r3, r3
 8005966:	697a      	ldr	r2, [r7, #20]
 8005968:	4413      	add	r3, r2
 800596a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800596c:	697b      	ldr	r3, [r7, #20]
 800596e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	685a      	ldr	r2, [r3, #4]
 8005974:	4b24      	ldr	r3, [pc, #144]	; (8005a08 <vPortFree+0xb8>)
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	4013      	ands	r3, r2
 800597a:	2b00      	cmp	r3, #0
 800597c:	d10a      	bne.n	8005994 <vPortFree+0x44>
	__asm volatile
 800597e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005982:	f383 8811 	msr	BASEPRI, r3
 8005986:	f3bf 8f6f 	isb	sy
 800598a:	f3bf 8f4f 	dsb	sy
 800598e:	60fb      	str	r3, [r7, #12]
}
 8005990:	bf00      	nop
 8005992:	e7fe      	b.n	8005992 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d00a      	beq.n	80059b2 <vPortFree+0x62>
	__asm volatile
 800599c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059a0:	f383 8811 	msr	BASEPRI, r3
 80059a4:	f3bf 8f6f 	isb	sy
 80059a8:	f3bf 8f4f 	dsb	sy
 80059ac:	60bb      	str	r3, [r7, #8]
}
 80059ae:	bf00      	nop
 80059b0:	e7fe      	b.n	80059b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80059b2:	693b      	ldr	r3, [r7, #16]
 80059b4:	685a      	ldr	r2, [r3, #4]
 80059b6:	4b14      	ldr	r3, [pc, #80]	; (8005a08 <vPortFree+0xb8>)
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	4013      	ands	r3, r2
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d01e      	beq.n	80059fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80059c0:	693b      	ldr	r3, [r7, #16]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d11a      	bne.n	80059fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	685a      	ldr	r2, [r3, #4]
 80059cc:	4b0e      	ldr	r3, [pc, #56]	; (8005a08 <vPortFree+0xb8>)
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	43db      	mvns	r3, r3
 80059d2:	401a      	ands	r2, r3
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80059d8:	f7fe fc86 	bl	80042e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80059dc:	693b      	ldr	r3, [r7, #16]
 80059de:	685a      	ldr	r2, [r3, #4]
 80059e0:	4b0a      	ldr	r3, [pc, #40]	; (8005a0c <vPortFree+0xbc>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	4413      	add	r3, r2
 80059e6:	4a09      	ldr	r2, [pc, #36]	; (8005a0c <vPortFree+0xbc>)
 80059e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80059ea:	6938      	ldr	r0, [r7, #16]
 80059ec:	f000 f874 	bl	8005ad8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80059f0:	4b07      	ldr	r3, [pc, #28]	; (8005a10 <vPortFree+0xc0>)
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	3301      	adds	r3, #1
 80059f6:	4a06      	ldr	r2, [pc, #24]	; (8005a10 <vPortFree+0xc0>)
 80059f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80059fa:	f7fe fc83 	bl	8004304 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80059fe:	bf00      	nop
 8005a00:	3718      	adds	r7, #24
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
 8005a06:	bf00      	nop
 8005a08:	20001b2c 	.word	0x20001b2c
 8005a0c:	20001b1c 	.word	0x20001b1c
 8005a10:	20001b28 	.word	0x20001b28

08005a14 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005a14:	b480      	push	{r7}
 8005a16:	b085      	sub	sp, #20
 8005a18:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005a1a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005a1e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005a20:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <prvHeapInit+0xac>)
 8005a22:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	f003 0307 	and.w	r3, r3, #7
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d00c      	beq.n	8005a48 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	3307      	adds	r3, #7
 8005a32:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	f023 0307 	bic.w	r3, r3, #7
 8005a3a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005a3c:	68ba      	ldr	r2, [r7, #8]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	1ad3      	subs	r3, r2, r3
 8005a42:	4a1f      	ldr	r2, [pc, #124]	; (8005ac0 <prvHeapInit+0xac>)
 8005a44:	4413      	add	r3, r2
 8005a46:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005a4c:	4a1d      	ldr	r2, [pc, #116]	; (8005ac4 <prvHeapInit+0xb0>)
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005a52:	4b1c      	ldr	r3, [pc, #112]	; (8005ac4 <prvHeapInit+0xb0>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	68ba      	ldr	r2, [r7, #8]
 8005a5c:	4413      	add	r3, r2
 8005a5e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005a60:	2208      	movs	r2, #8
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	1a9b      	subs	r3, r3, r2
 8005a66:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f023 0307 	bic.w	r3, r3, #7
 8005a6e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	4a15      	ldr	r2, [pc, #84]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a74:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005a76:	4b14      	ldr	r3, [pc, #80]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005a7e:	4b12      	ldr	r3, [pc, #72]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2200      	movs	r2, #0
 8005a84:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005a8a:	683b      	ldr	r3, [r7, #0]
 8005a8c:	68fa      	ldr	r2, [r7, #12]
 8005a8e:	1ad2      	subs	r2, r2, r3
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005a94:	4b0c      	ldr	r3, [pc, #48]	; (8005ac8 <prvHeapInit+0xb4>)
 8005a96:	681a      	ldr	r2, [r3, #0]
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	685b      	ldr	r3, [r3, #4]
 8005aa0:	4a0a      	ldr	r2, [pc, #40]	; (8005acc <prvHeapInit+0xb8>)
 8005aa2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	4a09      	ldr	r2, [pc, #36]	; (8005ad0 <prvHeapInit+0xbc>)
 8005aaa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005aac:	4b09      	ldr	r3, [pc, #36]	; (8005ad4 <prvHeapInit+0xc0>)
 8005aae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ab2:	601a      	str	r2, [r3, #0]
}
 8005ab4:	bf00      	nop
 8005ab6:	3714      	adds	r7, #20
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005abe:	4770      	bx	lr
 8005ac0:	20000f58 	.word	0x20000f58
 8005ac4:	20001b10 	.word	0x20001b10
 8005ac8:	20001b18 	.word	0x20001b18
 8005acc:	20001b20 	.word	0x20001b20
 8005ad0:	20001b1c 	.word	0x20001b1c
 8005ad4:	20001b2c 	.word	0x20001b2c

08005ad8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005ad8:	b480      	push	{r7}
 8005ada:	b085      	sub	sp, #20
 8005adc:	af00      	add	r7, sp, #0
 8005ade:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005ae0:	4b28      	ldr	r3, [pc, #160]	; (8005b84 <prvInsertBlockIntoFreeList+0xac>)
 8005ae2:	60fb      	str	r3, [r7, #12]
 8005ae4:	e002      	b.n	8005aec <prvInsertBlockIntoFreeList+0x14>
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	60fb      	str	r3, [r7, #12]
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d8f7      	bhi.n	8005ae6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	685b      	ldr	r3, [r3, #4]
 8005afe:	68ba      	ldr	r2, [r7, #8]
 8005b00:	4413      	add	r3, r2
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	429a      	cmp	r2, r3
 8005b06:	d108      	bne.n	8005b1a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	685a      	ldr	r2, [r3, #4]
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	441a      	add	r2, r3
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	685b      	ldr	r3, [r3, #4]
 8005b22:	68ba      	ldr	r2, [r7, #8]
 8005b24:	441a      	add	r2, r3
 8005b26:	68fb      	ldr	r3, [r7, #12]
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	429a      	cmp	r2, r3
 8005b2c:	d118      	bne.n	8005b60 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	681a      	ldr	r2, [r3, #0]
 8005b32:	4b15      	ldr	r3, [pc, #84]	; (8005b88 <prvInsertBlockIntoFreeList+0xb0>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	429a      	cmp	r2, r3
 8005b38:	d00d      	beq.n	8005b56 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	685a      	ldr	r2, [r3, #4]
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	441a      	add	r2, r3
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	681b      	ldr	r3, [r3, #0]
 8005b4e:	681a      	ldr	r2, [r3, #0]
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	601a      	str	r2, [r3, #0]
 8005b54:	e008      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005b56:	4b0c      	ldr	r3, [pc, #48]	; (8005b88 <prvInsertBlockIntoFreeList+0xb0>)
 8005b58:	681a      	ldr	r2, [r3, #0]
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	601a      	str	r2, [r3, #0]
 8005b5e:	e003      	b.n	8005b68 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681a      	ldr	r2, [r3, #0]
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8005b68:	68fa      	ldr	r2, [r7, #12]
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	429a      	cmp	r2, r3
 8005b6e:	d002      	beq.n	8005b76 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	687a      	ldr	r2, [r7, #4]
 8005b74:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005b76:	bf00      	nop
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr
 8005b82:	bf00      	nop
 8005b84:	20001b10 	.word	0x20001b10
 8005b88:	20001b18 	.word	0x20001b18

08005b8c <__libc_init_array>:
 8005b8c:	b570      	push	{r4, r5, r6, lr}
 8005b8e:	4d0d      	ldr	r5, [pc, #52]	; (8005bc4 <__libc_init_array+0x38>)
 8005b90:	4c0d      	ldr	r4, [pc, #52]	; (8005bc8 <__libc_init_array+0x3c>)
 8005b92:	1b64      	subs	r4, r4, r5
 8005b94:	10a4      	asrs	r4, r4, #2
 8005b96:	2600      	movs	r6, #0
 8005b98:	42a6      	cmp	r6, r4
 8005b9a:	d109      	bne.n	8005bb0 <__libc_init_array+0x24>
 8005b9c:	4d0b      	ldr	r5, [pc, #44]	; (8005bcc <__libc_init_array+0x40>)
 8005b9e:	4c0c      	ldr	r4, [pc, #48]	; (8005bd0 <__libc_init_array+0x44>)
 8005ba0:	f000 f8f2 	bl	8005d88 <_init>
 8005ba4:	1b64      	subs	r4, r4, r5
 8005ba6:	10a4      	asrs	r4, r4, #2
 8005ba8:	2600      	movs	r6, #0
 8005baa:	42a6      	cmp	r6, r4
 8005bac:	d105      	bne.n	8005bba <__libc_init_array+0x2e>
 8005bae:	bd70      	pop	{r4, r5, r6, pc}
 8005bb0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bb4:	4798      	blx	r3
 8005bb6:	3601      	adds	r6, #1
 8005bb8:	e7ee      	b.n	8005b98 <__libc_init_array+0xc>
 8005bba:	f855 3b04 	ldr.w	r3, [r5], #4
 8005bbe:	4798      	blx	r3
 8005bc0:	3601      	adds	r6, #1
 8005bc2:	e7f2      	b.n	8005baa <__libc_init_array+0x1e>
 8005bc4:	08005e98 	.word	0x08005e98
 8005bc8:	08005e98 	.word	0x08005e98
 8005bcc:	08005e98 	.word	0x08005e98
 8005bd0:	08005e9c 	.word	0x08005e9c

08005bd4 <__retarget_lock_acquire_recursive>:
 8005bd4:	4770      	bx	lr

08005bd6 <__retarget_lock_release_recursive>:
 8005bd6:	4770      	bx	lr

08005bd8 <memcpy>:
 8005bd8:	440a      	add	r2, r1
 8005bda:	4291      	cmp	r1, r2
 8005bdc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8005be0:	d100      	bne.n	8005be4 <memcpy+0xc>
 8005be2:	4770      	bx	lr
 8005be4:	b510      	push	{r4, lr}
 8005be6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005bea:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005bee:	4291      	cmp	r1, r2
 8005bf0:	d1f9      	bne.n	8005be6 <memcpy+0xe>
 8005bf2:	bd10      	pop	{r4, pc}

08005bf4 <memset>:
 8005bf4:	4402      	add	r2, r0
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	4293      	cmp	r3, r2
 8005bfa:	d100      	bne.n	8005bfe <memset+0xa>
 8005bfc:	4770      	bx	lr
 8005bfe:	f803 1b01 	strb.w	r1, [r3], #1
 8005c02:	e7f9      	b.n	8005bf8 <memset+0x4>

08005c04 <cleanup_glue>:
 8005c04:	b538      	push	{r3, r4, r5, lr}
 8005c06:	460c      	mov	r4, r1
 8005c08:	6809      	ldr	r1, [r1, #0]
 8005c0a:	4605      	mov	r5, r0
 8005c0c:	b109      	cbz	r1, 8005c12 <cleanup_glue+0xe>
 8005c0e:	f7ff fff9 	bl	8005c04 <cleanup_glue>
 8005c12:	4621      	mov	r1, r4
 8005c14:	4628      	mov	r0, r5
 8005c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005c1a:	f000 b869 	b.w	8005cf0 <_free_r>
	...

08005c20 <_reclaim_reent>:
 8005c20:	4b2c      	ldr	r3, [pc, #176]	; (8005cd4 <_reclaim_reent+0xb4>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	4283      	cmp	r3, r0
 8005c26:	b570      	push	{r4, r5, r6, lr}
 8005c28:	4604      	mov	r4, r0
 8005c2a:	d051      	beq.n	8005cd0 <_reclaim_reent+0xb0>
 8005c2c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8005c2e:	b143      	cbz	r3, 8005c42 <_reclaim_reent+0x22>
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d14a      	bne.n	8005ccc <_reclaim_reent+0xac>
 8005c36:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005c38:	6819      	ldr	r1, [r3, #0]
 8005c3a:	b111      	cbz	r1, 8005c42 <_reclaim_reent+0x22>
 8005c3c:	4620      	mov	r0, r4
 8005c3e:	f000 f857 	bl	8005cf0 <_free_r>
 8005c42:	6961      	ldr	r1, [r4, #20]
 8005c44:	b111      	cbz	r1, 8005c4c <_reclaim_reent+0x2c>
 8005c46:	4620      	mov	r0, r4
 8005c48:	f000 f852 	bl	8005cf0 <_free_r>
 8005c4c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005c4e:	b111      	cbz	r1, 8005c56 <_reclaim_reent+0x36>
 8005c50:	4620      	mov	r0, r4
 8005c52:	f000 f84d 	bl	8005cf0 <_free_r>
 8005c56:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8005c58:	b111      	cbz	r1, 8005c60 <_reclaim_reent+0x40>
 8005c5a:	4620      	mov	r0, r4
 8005c5c:	f000 f848 	bl	8005cf0 <_free_r>
 8005c60:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8005c62:	b111      	cbz	r1, 8005c6a <_reclaim_reent+0x4a>
 8005c64:	4620      	mov	r0, r4
 8005c66:	f000 f843 	bl	8005cf0 <_free_r>
 8005c6a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8005c6c:	b111      	cbz	r1, 8005c74 <_reclaim_reent+0x54>
 8005c6e:	4620      	mov	r0, r4
 8005c70:	f000 f83e 	bl	8005cf0 <_free_r>
 8005c74:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8005c76:	b111      	cbz	r1, 8005c7e <_reclaim_reent+0x5e>
 8005c78:	4620      	mov	r0, r4
 8005c7a:	f000 f839 	bl	8005cf0 <_free_r>
 8005c7e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8005c80:	b111      	cbz	r1, 8005c88 <_reclaim_reent+0x68>
 8005c82:	4620      	mov	r0, r4
 8005c84:	f000 f834 	bl	8005cf0 <_free_r>
 8005c88:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005c8a:	b111      	cbz	r1, 8005c92 <_reclaim_reent+0x72>
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	f000 f82f 	bl	8005cf0 <_free_r>
 8005c92:	69a3      	ldr	r3, [r4, #24]
 8005c94:	b1e3      	cbz	r3, 8005cd0 <_reclaim_reent+0xb0>
 8005c96:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005c98:	4620      	mov	r0, r4
 8005c9a:	4798      	blx	r3
 8005c9c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8005c9e:	b1b9      	cbz	r1, 8005cd0 <_reclaim_reent+0xb0>
 8005ca0:	4620      	mov	r0, r4
 8005ca2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8005ca6:	f7ff bfad 	b.w	8005c04 <cleanup_glue>
 8005caa:	5949      	ldr	r1, [r1, r5]
 8005cac:	b941      	cbnz	r1, 8005cc0 <_reclaim_reent+0xa0>
 8005cae:	3504      	adds	r5, #4
 8005cb0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cb2:	2d80      	cmp	r5, #128	; 0x80
 8005cb4:	68d9      	ldr	r1, [r3, #12]
 8005cb6:	d1f8      	bne.n	8005caa <_reclaim_reent+0x8a>
 8005cb8:	4620      	mov	r0, r4
 8005cba:	f000 f819 	bl	8005cf0 <_free_r>
 8005cbe:	e7ba      	b.n	8005c36 <_reclaim_reent+0x16>
 8005cc0:	680e      	ldr	r6, [r1, #0]
 8005cc2:	4620      	mov	r0, r4
 8005cc4:	f000 f814 	bl	8005cf0 <_free_r>
 8005cc8:	4631      	mov	r1, r6
 8005cca:	e7ef      	b.n	8005cac <_reclaim_reent+0x8c>
 8005ccc:	2500      	movs	r5, #0
 8005cce:	e7ef      	b.n	8005cb0 <_reclaim_reent+0x90>
 8005cd0:	bd70      	pop	{r4, r5, r6, pc}
 8005cd2:	bf00      	nop
 8005cd4:	20000010 	.word	0x20000010

08005cd8 <__malloc_lock>:
 8005cd8:	4801      	ldr	r0, [pc, #4]	; (8005ce0 <__malloc_lock+0x8>)
 8005cda:	f7ff bf7b 	b.w	8005bd4 <__retarget_lock_acquire_recursive>
 8005cde:	bf00      	nop
 8005ce0:	20001b30 	.word	0x20001b30

08005ce4 <__malloc_unlock>:
 8005ce4:	4801      	ldr	r0, [pc, #4]	; (8005cec <__malloc_unlock+0x8>)
 8005ce6:	f7ff bf76 	b.w	8005bd6 <__retarget_lock_release_recursive>
 8005cea:	bf00      	nop
 8005cec:	20001b30 	.word	0x20001b30

08005cf0 <_free_r>:
 8005cf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005cf2:	2900      	cmp	r1, #0
 8005cf4:	d044      	beq.n	8005d80 <_free_r+0x90>
 8005cf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005cfa:	9001      	str	r0, [sp, #4]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	f1a1 0404 	sub.w	r4, r1, #4
 8005d02:	bfb8      	it	lt
 8005d04:	18e4      	addlt	r4, r4, r3
 8005d06:	f7ff ffe7 	bl	8005cd8 <__malloc_lock>
 8005d0a:	4a1e      	ldr	r2, [pc, #120]	; (8005d84 <_free_r+0x94>)
 8005d0c:	9801      	ldr	r0, [sp, #4]
 8005d0e:	6813      	ldr	r3, [r2, #0]
 8005d10:	b933      	cbnz	r3, 8005d20 <_free_r+0x30>
 8005d12:	6063      	str	r3, [r4, #4]
 8005d14:	6014      	str	r4, [r2, #0]
 8005d16:	b003      	add	sp, #12
 8005d18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005d1c:	f7ff bfe2 	b.w	8005ce4 <__malloc_unlock>
 8005d20:	42a3      	cmp	r3, r4
 8005d22:	d908      	bls.n	8005d36 <_free_r+0x46>
 8005d24:	6825      	ldr	r5, [r4, #0]
 8005d26:	1961      	adds	r1, r4, r5
 8005d28:	428b      	cmp	r3, r1
 8005d2a:	bf01      	itttt	eq
 8005d2c:	6819      	ldreq	r1, [r3, #0]
 8005d2e:	685b      	ldreq	r3, [r3, #4]
 8005d30:	1949      	addeq	r1, r1, r5
 8005d32:	6021      	streq	r1, [r4, #0]
 8005d34:	e7ed      	b.n	8005d12 <_free_r+0x22>
 8005d36:	461a      	mov	r2, r3
 8005d38:	685b      	ldr	r3, [r3, #4]
 8005d3a:	b10b      	cbz	r3, 8005d40 <_free_r+0x50>
 8005d3c:	42a3      	cmp	r3, r4
 8005d3e:	d9fa      	bls.n	8005d36 <_free_r+0x46>
 8005d40:	6811      	ldr	r1, [r2, #0]
 8005d42:	1855      	adds	r5, r2, r1
 8005d44:	42a5      	cmp	r5, r4
 8005d46:	d10b      	bne.n	8005d60 <_free_r+0x70>
 8005d48:	6824      	ldr	r4, [r4, #0]
 8005d4a:	4421      	add	r1, r4
 8005d4c:	1854      	adds	r4, r2, r1
 8005d4e:	42a3      	cmp	r3, r4
 8005d50:	6011      	str	r1, [r2, #0]
 8005d52:	d1e0      	bne.n	8005d16 <_free_r+0x26>
 8005d54:	681c      	ldr	r4, [r3, #0]
 8005d56:	685b      	ldr	r3, [r3, #4]
 8005d58:	6053      	str	r3, [r2, #4]
 8005d5a:	4421      	add	r1, r4
 8005d5c:	6011      	str	r1, [r2, #0]
 8005d5e:	e7da      	b.n	8005d16 <_free_r+0x26>
 8005d60:	d902      	bls.n	8005d68 <_free_r+0x78>
 8005d62:	230c      	movs	r3, #12
 8005d64:	6003      	str	r3, [r0, #0]
 8005d66:	e7d6      	b.n	8005d16 <_free_r+0x26>
 8005d68:	6825      	ldr	r5, [r4, #0]
 8005d6a:	1961      	adds	r1, r4, r5
 8005d6c:	428b      	cmp	r3, r1
 8005d6e:	bf04      	itt	eq
 8005d70:	6819      	ldreq	r1, [r3, #0]
 8005d72:	685b      	ldreq	r3, [r3, #4]
 8005d74:	6063      	str	r3, [r4, #4]
 8005d76:	bf04      	itt	eq
 8005d78:	1949      	addeq	r1, r1, r5
 8005d7a:	6021      	streq	r1, [r4, #0]
 8005d7c:	6054      	str	r4, [r2, #4]
 8005d7e:	e7ca      	b.n	8005d16 <_free_r+0x26>
 8005d80:	b003      	add	sp, #12
 8005d82:	bd30      	pop	{r4, r5, pc}
 8005d84:	20001b34 	.word	0x20001b34

08005d88 <_init>:
 8005d88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d8a:	bf00      	nop
 8005d8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d8e:	bc08      	pop	{r3}
 8005d90:	469e      	mov	lr, r3
 8005d92:	4770      	bx	lr

08005d94 <_fini>:
 8005d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005d96:	bf00      	nop
 8005d98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005d9a:	bc08      	pop	{r3}
 8005d9c:	469e      	mov	lr, r3
 8005d9e:	4770      	bx	lr
