
RTOS_Tutorial_Part4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006310  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000154  080064a0  080064a0  000164a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080065f4  080065f4  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080065f4  080065f4  000165f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080065fc  080065fc  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080065fc  080065fc  000165fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006600  08006600  00016600  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006604  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001ad0  20000074  08006678  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001b44  08006678  00021b44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001cc2f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000039e8  00000000  00000000  0003ccd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001700  00000000  00000000  000406c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001598  00000000  00000000  00041dc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023b04  00000000  00000000  00043358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019d4a  00000000  00000000  00066e5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d6290  00000000  00000000  00080ba6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00156e36  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000062f4  00000000  00000000  00156e88  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006488 	.word	0x08006488

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006488 	.word	0x08006488

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f4:	f000 b974 	b.w	80004e0 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9d08      	ldr	r5, [sp, #32]
 8000216:	4604      	mov	r4, r0
 8000218:	468e      	mov	lr, r1
 800021a:	2b00      	cmp	r3, #0
 800021c:	d14d      	bne.n	80002ba <__udivmoddi4+0xaa>
 800021e:	428a      	cmp	r2, r1
 8000220:	4694      	mov	ip, r2
 8000222:	d969      	bls.n	80002f8 <__udivmoddi4+0xe8>
 8000224:	fab2 f282 	clz	r2, r2
 8000228:	b152      	cbz	r2, 8000240 <__udivmoddi4+0x30>
 800022a:	fa01 f302 	lsl.w	r3, r1, r2
 800022e:	f1c2 0120 	rsb	r1, r2, #32
 8000232:	fa20 f101 	lsr.w	r1, r0, r1
 8000236:	fa0c fc02 	lsl.w	ip, ip, r2
 800023a:	ea41 0e03 	orr.w	lr, r1, r3
 800023e:	4094      	lsls	r4, r2
 8000240:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000244:	0c21      	lsrs	r1, r4, #16
 8000246:	fbbe f6f8 	udiv	r6, lr, r8
 800024a:	fa1f f78c 	uxth.w	r7, ip
 800024e:	fb08 e316 	mls	r3, r8, r6, lr
 8000252:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000256:	fb06 f107 	mul.w	r1, r6, r7
 800025a:	4299      	cmp	r1, r3
 800025c:	d90a      	bls.n	8000274 <__udivmoddi4+0x64>
 800025e:	eb1c 0303 	adds.w	r3, ip, r3
 8000262:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000266:	f080 811f 	bcs.w	80004a8 <__udivmoddi4+0x298>
 800026a:	4299      	cmp	r1, r3
 800026c:	f240 811c 	bls.w	80004a8 <__udivmoddi4+0x298>
 8000270:	3e02      	subs	r6, #2
 8000272:	4463      	add	r3, ip
 8000274:	1a5b      	subs	r3, r3, r1
 8000276:	b2a4      	uxth	r4, r4
 8000278:	fbb3 f0f8 	udiv	r0, r3, r8
 800027c:	fb08 3310 	mls	r3, r8, r0, r3
 8000280:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000284:	fb00 f707 	mul.w	r7, r0, r7
 8000288:	42a7      	cmp	r7, r4
 800028a:	d90a      	bls.n	80002a2 <__udivmoddi4+0x92>
 800028c:	eb1c 0404 	adds.w	r4, ip, r4
 8000290:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000294:	f080 810a 	bcs.w	80004ac <__udivmoddi4+0x29c>
 8000298:	42a7      	cmp	r7, r4
 800029a:	f240 8107 	bls.w	80004ac <__udivmoddi4+0x29c>
 800029e:	4464      	add	r4, ip
 80002a0:	3802      	subs	r0, #2
 80002a2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002a6:	1be4      	subs	r4, r4, r7
 80002a8:	2600      	movs	r6, #0
 80002aa:	b11d      	cbz	r5, 80002b4 <__udivmoddi4+0xa4>
 80002ac:	40d4      	lsrs	r4, r2
 80002ae:	2300      	movs	r3, #0
 80002b0:	e9c5 4300 	strd	r4, r3, [r5]
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	428b      	cmp	r3, r1
 80002bc:	d909      	bls.n	80002d2 <__udivmoddi4+0xc2>
 80002be:	2d00      	cmp	r5, #0
 80002c0:	f000 80ef 	beq.w	80004a2 <__udivmoddi4+0x292>
 80002c4:	2600      	movs	r6, #0
 80002c6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ca:	4630      	mov	r0, r6
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	fab3 f683 	clz	r6, r3
 80002d6:	2e00      	cmp	r6, #0
 80002d8:	d14a      	bne.n	8000370 <__udivmoddi4+0x160>
 80002da:	428b      	cmp	r3, r1
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xd4>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 80f9 	bhi.w	80004d6 <__udivmoddi4+0x2c6>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb61 0303 	sbc.w	r3, r1, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	469e      	mov	lr, r3
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e0      	beq.n	80002b4 <__udivmoddi4+0xa4>
 80002f2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002f6:	e7dd      	b.n	80002b4 <__udivmoddi4+0xa4>
 80002f8:	b902      	cbnz	r2, 80002fc <__udivmoddi4+0xec>
 80002fa:	deff      	udf	#255	; 0xff
 80002fc:	fab2 f282 	clz	r2, r2
 8000300:	2a00      	cmp	r2, #0
 8000302:	f040 8092 	bne.w	800042a <__udivmoddi4+0x21a>
 8000306:	eba1 010c 	sub.w	r1, r1, ip
 800030a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800030e:	fa1f fe8c 	uxth.w	lr, ip
 8000312:	2601      	movs	r6, #1
 8000314:	0c20      	lsrs	r0, r4, #16
 8000316:	fbb1 f3f7 	udiv	r3, r1, r7
 800031a:	fb07 1113 	mls	r1, r7, r3, r1
 800031e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000322:	fb0e f003 	mul.w	r0, lr, r3
 8000326:	4288      	cmp	r0, r1
 8000328:	d908      	bls.n	800033c <__udivmoddi4+0x12c>
 800032a:	eb1c 0101 	adds.w	r1, ip, r1
 800032e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000332:	d202      	bcs.n	800033a <__udivmoddi4+0x12a>
 8000334:	4288      	cmp	r0, r1
 8000336:	f200 80cb 	bhi.w	80004d0 <__udivmoddi4+0x2c0>
 800033a:	4643      	mov	r3, r8
 800033c:	1a09      	subs	r1, r1, r0
 800033e:	b2a4      	uxth	r4, r4
 8000340:	fbb1 f0f7 	udiv	r0, r1, r7
 8000344:	fb07 1110 	mls	r1, r7, r0, r1
 8000348:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800034c:	fb0e fe00 	mul.w	lr, lr, r0
 8000350:	45a6      	cmp	lr, r4
 8000352:	d908      	bls.n	8000366 <__udivmoddi4+0x156>
 8000354:	eb1c 0404 	adds.w	r4, ip, r4
 8000358:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x154>
 800035e:	45a6      	cmp	lr, r4
 8000360:	f200 80bb 	bhi.w	80004da <__udivmoddi4+0x2ca>
 8000364:	4608      	mov	r0, r1
 8000366:	eba4 040e 	sub.w	r4, r4, lr
 800036a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800036e:	e79c      	b.n	80002aa <__udivmoddi4+0x9a>
 8000370:	f1c6 0720 	rsb	r7, r6, #32
 8000374:	40b3      	lsls	r3, r6
 8000376:	fa22 fc07 	lsr.w	ip, r2, r7
 800037a:	ea4c 0c03 	orr.w	ip, ip, r3
 800037e:	fa20 f407 	lsr.w	r4, r0, r7
 8000382:	fa01 f306 	lsl.w	r3, r1, r6
 8000386:	431c      	orrs	r4, r3
 8000388:	40f9      	lsrs	r1, r7
 800038a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800038e:	fa00 f306 	lsl.w	r3, r0, r6
 8000392:	fbb1 f8f9 	udiv	r8, r1, r9
 8000396:	0c20      	lsrs	r0, r4, #16
 8000398:	fa1f fe8c 	uxth.w	lr, ip
 800039c:	fb09 1118 	mls	r1, r9, r8, r1
 80003a0:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a4:	fb08 f00e 	mul.w	r0, r8, lr
 80003a8:	4288      	cmp	r0, r1
 80003aa:	fa02 f206 	lsl.w	r2, r2, r6
 80003ae:	d90b      	bls.n	80003c8 <__udivmoddi4+0x1b8>
 80003b0:	eb1c 0101 	adds.w	r1, ip, r1
 80003b4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003b8:	f080 8088 	bcs.w	80004cc <__udivmoddi4+0x2bc>
 80003bc:	4288      	cmp	r0, r1
 80003be:	f240 8085 	bls.w	80004cc <__udivmoddi4+0x2bc>
 80003c2:	f1a8 0802 	sub.w	r8, r8, #2
 80003c6:	4461      	add	r1, ip
 80003c8:	1a09      	subs	r1, r1, r0
 80003ca:	b2a4      	uxth	r4, r4
 80003cc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d0:	fb09 1110 	mls	r1, r9, r0, r1
 80003d4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003dc:	458e      	cmp	lr, r1
 80003de:	d908      	bls.n	80003f2 <__udivmoddi4+0x1e2>
 80003e0:	eb1c 0101 	adds.w	r1, ip, r1
 80003e4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003e8:	d26c      	bcs.n	80004c4 <__udivmoddi4+0x2b4>
 80003ea:	458e      	cmp	lr, r1
 80003ec:	d96a      	bls.n	80004c4 <__udivmoddi4+0x2b4>
 80003ee:	3802      	subs	r0, #2
 80003f0:	4461      	add	r1, ip
 80003f2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003f6:	fba0 9402 	umull	r9, r4, r0, r2
 80003fa:	eba1 010e 	sub.w	r1, r1, lr
 80003fe:	42a1      	cmp	r1, r4
 8000400:	46c8      	mov	r8, r9
 8000402:	46a6      	mov	lr, r4
 8000404:	d356      	bcc.n	80004b4 <__udivmoddi4+0x2a4>
 8000406:	d053      	beq.n	80004b0 <__udivmoddi4+0x2a0>
 8000408:	b15d      	cbz	r5, 8000422 <__udivmoddi4+0x212>
 800040a:	ebb3 0208 	subs.w	r2, r3, r8
 800040e:	eb61 010e 	sbc.w	r1, r1, lr
 8000412:	fa01 f707 	lsl.w	r7, r1, r7
 8000416:	fa22 f306 	lsr.w	r3, r2, r6
 800041a:	40f1      	lsrs	r1, r6
 800041c:	431f      	orrs	r7, r3
 800041e:	e9c5 7100 	strd	r7, r1, [r5]
 8000422:	2600      	movs	r6, #0
 8000424:	4631      	mov	r1, r6
 8000426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042a:	f1c2 0320 	rsb	r3, r2, #32
 800042e:	40d8      	lsrs	r0, r3
 8000430:	fa0c fc02 	lsl.w	ip, ip, r2
 8000434:	fa21 f303 	lsr.w	r3, r1, r3
 8000438:	4091      	lsls	r1, r2
 800043a:	4301      	orrs	r1, r0
 800043c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000440:	fa1f fe8c 	uxth.w	lr, ip
 8000444:	fbb3 f0f7 	udiv	r0, r3, r7
 8000448:	fb07 3610 	mls	r6, r7, r0, r3
 800044c:	0c0b      	lsrs	r3, r1, #16
 800044e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000452:	fb00 f60e 	mul.w	r6, r0, lr
 8000456:	429e      	cmp	r6, r3
 8000458:	fa04 f402 	lsl.w	r4, r4, r2
 800045c:	d908      	bls.n	8000470 <__udivmoddi4+0x260>
 800045e:	eb1c 0303 	adds.w	r3, ip, r3
 8000462:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000466:	d22f      	bcs.n	80004c8 <__udivmoddi4+0x2b8>
 8000468:	429e      	cmp	r6, r3
 800046a:	d92d      	bls.n	80004c8 <__udivmoddi4+0x2b8>
 800046c:	3802      	subs	r0, #2
 800046e:	4463      	add	r3, ip
 8000470:	1b9b      	subs	r3, r3, r6
 8000472:	b289      	uxth	r1, r1
 8000474:	fbb3 f6f7 	udiv	r6, r3, r7
 8000478:	fb07 3316 	mls	r3, r7, r6, r3
 800047c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000480:	fb06 f30e 	mul.w	r3, r6, lr
 8000484:	428b      	cmp	r3, r1
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x28a>
 8000488:	eb1c 0101 	adds.w	r1, ip, r1
 800048c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000490:	d216      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000492:	428b      	cmp	r3, r1
 8000494:	d914      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000496:	3e02      	subs	r6, #2
 8000498:	4461      	add	r1, ip
 800049a:	1ac9      	subs	r1, r1, r3
 800049c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a0:	e738      	b.n	8000314 <__udivmoddi4+0x104>
 80004a2:	462e      	mov	r6, r5
 80004a4:	4628      	mov	r0, r5
 80004a6:	e705      	b.n	80002b4 <__udivmoddi4+0xa4>
 80004a8:	4606      	mov	r6, r0
 80004aa:	e6e3      	b.n	8000274 <__udivmoddi4+0x64>
 80004ac:	4618      	mov	r0, r3
 80004ae:	e6f8      	b.n	80002a2 <__udivmoddi4+0x92>
 80004b0:	454b      	cmp	r3, r9
 80004b2:	d2a9      	bcs.n	8000408 <__udivmoddi4+0x1f8>
 80004b4:	ebb9 0802 	subs.w	r8, r9, r2
 80004b8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004bc:	3801      	subs	r0, #1
 80004be:	e7a3      	b.n	8000408 <__udivmoddi4+0x1f8>
 80004c0:	4646      	mov	r6, r8
 80004c2:	e7ea      	b.n	800049a <__udivmoddi4+0x28a>
 80004c4:	4620      	mov	r0, r4
 80004c6:	e794      	b.n	80003f2 <__udivmoddi4+0x1e2>
 80004c8:	4640      	mov	r0, r8
 80004ca:	e7d1      	b.n	8000470 <__udivmoddi4+0x260>
 80004cc:	46d0      	mov	r8, sl
 80004ce:	e77b      	b.n	80003c8 <__udivmoddi4+0x1b8>
 80004d0:	3b02      	subs	r3, #2
 80004d2:	4461      	add	r1, ip
 80004d4:	e732      	b.n	800033c <__udivmoddi4+0x12c>
 80004d6:	4630      	mov	r0, r6
 80004d8:	e709      	b.n	80002ee <__udivmoddi4+0xde>
 80004da:	4464      	add	r4, ip
 80004dc:	3802      	subs	r0, #2
 80004de:	e742      	b.n	8000366 <__udivmoddi4+0x156>

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of readUART_task */
  readUART_taskHandle = osThreadNew(ReadUART, NULL, &readUART_task_attributes);
 80004e8:	4a08      	ldr	r2, [pc, #32]	; (800050c <MX_FREERTOS_Init+0x28>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	4808      	ldr	r0, [pc, #32]	; (8000510 <MX_FREERTOS_Init+0x2c>)
 80004ee:	f003 f899 	bl	8003624 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a07      	ldr	r2, [pc, #28]	; (8000514 <MX_FREERTOS_Init+0x30>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* creation of writeUART_task */
  writeUART_taskHandle = osThreadNew(WriteUART, NULL, &writeUART_task_attributes);
 80004f8:	4a07      	ldr	r2, [pc, #28]	; (8000518 <MX_FREERTOS_Init+0x34>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	4807      	ldr	r0, [pc, #28]	; (800051c <MX_FREERTOS_Init+0x38>)
 80004fe:	f003 f891 	bl	8003624 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a06      	ldr	r2, [pc, #24]	; (8000520 <MX_FREERTOS_Init+0x3c>)
 8000506:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	08006504 	.word	0x08006504
 8000510:	08000525 	.word	0x08000525
 8000514:	20000098 	.word	0x20000098
 8000518:	08006528 	.word	0x08006528
 800051c:	080006cd 	.word	0x080006cd
 8000520:	2000009c 	.word	0x2000009c

08000524 <ReadUART>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_ReadUART */
void ReadUART(void *argument)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b0c6      	sub	sp, #280	; 0x118
 8000528:	af00      	add	r7, sp, #0
 800052a:	f507 738c 	add.w	r3, r7, #280	; 0x118
 800052e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8000532:	6018      	str	r0, [r3, #0]
  /* USER CODE BEGIN ReadUART */
  /* Infinite loop */
	uint8_t rxBuffer[UART_RX_BUFFER_SIZE]; // static buffer
	memset(rxBuffer, 0, UART_RX_BUFFER_SIZE);
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	22ff      	movs	r2, #255	; 0xff
 800053a:	2100      	movs	r1, #0
 800053c:	4618      	mov	r0, r3
 800053e:	f005 fed9 	bl	80062f4 <memset>
	uint8_t rxIndex = 0;
 8000542:	2300      	movs	r3, #0
 8000544:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
	HAL_StatusTypeDef ret;
	char *rx_error_str = "RX Buffer overflow!\r\n";
 8000548:	4b5a      	ldr	r3, [pc, #360]	; (80006b4 <ReadUART+0x190>)
 800054a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
	char *mem_error_str = "Out of memory!\r\n";
 800054e:	4b5a      	ldr	r3, [pc, #360]	; (80006b8 <ReadUART+0x194>)
 8000550:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
  for(;;)
  {
	  ret = HAL_UART_Receive(&huart2, rxBuffer+rxIndex, 1, UART_RX_MAX_DELAY);
 8000554:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000558:	f107 020c 	add.w	r2, r7, #12
 800055c:	18d1      	adds	r1, r2, r3
 800055e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000562:	2201      	movs	r2, #1
 8000564:	4855      	ldr	r0, [pc, #340]	; (80006bc <ReadUART+0x198>)
 8000566:	f002 fb21 	bl	8002bac <HAL_UART_Receive>
 800056a:	4603      	mov	r3, r0
 800056c:	f887 310b 	strb.w	r3, [r7, #267]	; 0x10b
	  if(rxBuffer[rxIndex] == '\r') {
 8000570:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000574:	f507 728c 	add.w	r2, r7, #280	; 0x118
 8000578:	f5a2 7286 	sub.w	r2, r2, #268	; 0x10c
 800057c:	5cd3      	ldrb	r3, [r2, r3]
 800057e:	2b0d      	cmp	r3, #13
 8000580:	d15d      	bne.n	800063e <ReadUART+0x11a>
		  msgBuffer = (uint8_t*)pvPortMalloc(rxIndex+3 * sizeof(uint8_t));
 8000582:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000586:	3303      	adds	r3, #3
 8000588:	4618      	mov	r0, r3
 800058a:	f005 fc95 	bl	8005eb8 <pvPortMalloc>
 800058e:	4603      	mov	r3, r0
 8000590:	4a4b      	ldr	r2, [pc, #300]	; (80006c0 <ReadUART+0x19c>)
 8000592:	6013      	str	r3, [r2, #0]
		  if(msgBuffer == NULL) {
 8000594:	4b4a      	ldr	r3, [pc, #296]	; (80006c0 <ReadUART+0x19c>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	2b00      	cmp	r3, #0
 800059a:	d122      	bne.n	80005e2 <ReadUART+0xbe>
			  vTaskSuspend(writeUART_taskHandle);
 800059c:	4b49      	ldr	r3, [pc, #292]	; (80006c4 <ReadUART+0x1a0>)
 800059e:	681b      	ldr	r3, [r3, #0]
 80005a0:	4618      	mov	r0, r3
 80005a2:	f004 f8ad 	bl	8004700 <vTaskSuspend>
			  HAL_UART_Transmit(&huart2, (uint8_t*)mem_error_str, strlen(mem_error_str), UART_TX_MAX_DELAY);
 80005a6:	f8d7 010c 	ldr.w	r0, [r7, #268]	; 0x10c
 80005aa:	f7ff fe11 	bl	80001d0 <strlen>
 80005ae:	4603      	mov	r3, r0
 80005b0:	b29a      	uxth	r2, r3
 80005b2:	f242 7310 	movw	r3, #10000	; 0x2710
 80005b6:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 80005ba:	4840      	ldr	r0, [pc, #256]	; (80006bc <ReadUART+0x198>)
 80005bc:	f002 fa62 	bl	8002a84 <HAL_UART_Transmit>
			  memset(rxBuffer, 0, rxIndex);
 80005c0:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80005c4:	f107 030c 	add.w	r3, r7, #12
 80005c8:	2100      	movs	r1, #0
 80005ca:	4618      	mov	r0, r3
 80005cc:	f005 fe92 	bl	80062f4 <memset>
			  rxIndex = 0;
 80005d0:	2300      	movs	r3, #0
 80005d2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			  vTaskResume(writeUART_taskHandle);
 80005d6:	4b3b      	ldr	r3, [pc, #236]	; (80006c4 <ReadUART+0x1a0>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4618      	mov	r0, r3
 80005dc:	f004 f938 	bl	8004850 <vTaskResume>
			  continue;
 80005e0:	e066      	b.n	80006b0 <ReadUART+0x18c>
		  }
		  memcpy(msgBuffer, rxBuffer, rxIndex);
 80005e2:	4b37      	ldr	r3, [pc, #220]	; (80006c0 <ReadUART+0x19c>)
 80005e4:	681b      	ldr	r3, [r3, #0]
 80005e6:	f897 2117 	ldrb.w	r2, [r7, #279]	; 0x117
 80005ea:	f107 010c 	add.w	r1, r7, #12
 80005ee:	4618      	mov	r0, r3
 80005f0:	f005 fe72 	bl	80062d8 <memcpy>
		  msgBuffer[rxIndex] = '\r';
 80005f4:	4b32      	ldr	r3, [pc, #200]	; (80006c0 <ReadUART+0x19c>)
 80005f6:	681a      	ldr	r2, [r3, #0]
 80005f8:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 80005fc:	4413      	add	r3, r2
 80005fe:	220d      	movs	r2, #13
 8000600:	701a      	strb	r2, [r3, #0]
		  msgBuffer[rxIndex+1] = '\n';
 8000602:	4b2f      	ldr	r3, [pc, #188]	; (80006c0 <ReadUART+0x19c>)
 8000604:	681a      	ldr	r2, [r3, #0]
 8000606:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800060a:	3301      	adds	r3, #1
 800060c:	4413      	add	r3, r2
 800060e:	220a      	movs	r2, #10
 8000610:	701a      	strb	r2, [r3, #0]
		  msgBuffer[rxIndex+2] = '\0';
 8000612:	4b2b      	ldr	r3, [pc, #172]	; (80006c0 <ReadUART+0x19c>)
 8000614:	681a      	ldr	r2, [r3, #0]
 8000616:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800061a:	3302      	adds	r3, #2
 800061c:	4413      	add	r3, r2
 800061e:	2200      	movs	r2, #0
 8000620:	701a      	strb	r2, [r3, #0]
		  msg_flag = 1;
 8000622:	4b29      	ldr	r3, [pc, #164]	; (80006c8 <ReadUART+0x1a4>)
 8000624:	2201      	movs	r2, #1
 8000626:	701a      	strb	r2, [r3, #0]
		  memset(rxBuffer, 0, UART_RX_BUFFER_SIZE);
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	22ff      	movs	r2, #255	; 0xff
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f005 fe5f 	bl	80062f4 <memset>
		  rxIndex = 0;
 8000636:	2300      	movs	r3, #0
 8000638:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
 800063c:	e78a      	b.n	8000554 <ReadUART+0x30>
	  } else if(ret == HAL_OK) {
 800063e:	f897 310b 	ldrb.w	r3, [r7, #267]	; 0x10b
 8000642:	2b00      	cmp	r3, #0
 8000644:	d186      	bne.n	8000554 <ReadUART+0x30>
		  rxIndex++;
 8000646:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 800064a:	3301      	adds	r3, #1
 800064c:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
		  if(rxIndex >= UART_RX_BUFFER_SIZE) {
 8000650:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000654:	2bff      	cmp	r3, #255	; 0xff
 8000656:	f47f af7d 	bne.w	8000554 <ReadUART+0x30>
			  vTaskSuspend(writeUART_taskHandle);
 800065a:	4b1a      	ldr	r3, [pc, #104]	; (80006c4 <ReadUART+0x1a0>)
 800065c:	681b      	ldr	r3, [r3, #0]
 800065e:	4618      	mov	r0, r3
 8000660:	f004 f84e 	bl	8004700 <vTaskSuspend>
			  HAL_UART_Transmit(&huart2, (uint8_t*)rx_error_str, strlen(rx_error_str), UART_TX_MAX_DELAY);
 8000664:	f8d7 0110 	ldr.w	r0, [r7, #272]	; 0x110
 8000668:	f7ff fdb2 	bl	80001d0 <strlen>
 800066c:	4603      	mov	r3, r0
 800066e:	b29a      	uxth	r2, r3
 8000670:	f242 7310 	movw	r3, #10000	; 0x2710
 8000674:	f8d7 1110 	ldr.w	r1, [r7, #272]	; 0x110
 8000678:	4810      	ldr	r0, [pc, #64]	; (80006bc <ReadUART+0x198>)
 800067a:	f002 fa03 	bl	8002a84 <HAL_UART_Transmit>
			  HAL_UART_Transmit(&huart2, rxBuffer, rxIndex, UART_TX_MAX_DELAY);
 800067e:	f897 3117 	ldrb.w	r3, [r7, #279]	; 0x117
 8000682:	b29a      	uxth	r2, r3
 8000684:	f107 010c 	add.w	r1, r7, #12
 8000688:	f242 7310 	movw	r3, #10000	; 0x2710
 800068c:	480b      	ldr	r0, [pc, #44]	; (80006bc <ReadUART+0x198>)
 800068e:	f002 f9f9 	bl	8002a84 <HAL_UART_Transmit>
			  memset(rxBuffer, 0, UART_RX_BUFFER_SIZE);
 8000692:	f107 030c 	add.w	r3, r7, #12
 8000696:	22ff      	movs	r2, #255	; 0xff
 8000698:	2100      	movs	r1, #0
 800069a:	4618      	mov	r0, r3
 800069c:	f005 fe2a 	bl	80062f4 <memset>
			  rxIndex = 0;
 80006a0:	2300      	movs	r3, #0
 80006a2:	f887 3117 	strb.w	r3, [r7, #279]	; 0x117
			  vTaskResume(writeUART_taskHandle);
 80006a6:	4b07      	ldr	r3, [pc, #28]	; (80006c4 <ReadUART+0x1a0>)
 80006a8:	681b      	ldr	r3, [r3, #0]
 80006aa:	4618      	mov	r0, r3
 80006ac:	f004 f8d0 	bl	8004850 <vTaskResume>
	  ret = HAL_UART_Receive(&huart2, rxBuffer+rxIndex, 1, UART_RX_MAX_DELAY);
 80006b0:	e750      	b.n	8000554 <ReadUART+0x30>
 80006b2:	bf00      	nop
 80006b4:	080064c0 	.word	0x080064c0
 80006b8:	080064d8 	.word	0x080064d8
 80006bc:	200000ec 	.word	0x200000ec
 80006c0:	20000090 	.word	0x20000090
 80006c4:	2000009c 	.word	0x2000009c
 80006c8:	20000094 	.word	0x20000094

080006cc <WriteUART>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_WriteUART */
void WriteUART(void *argument)
{
 80006cc:	b590      	push	{r4, r7, lr}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN WriteUART */
  /* Infinite loop */
  for(;;)
  {
    if(msg_flag) {
 80006d4:	4b11      	ldr	r3, [pc, #68]	; (800071c <WriteUART+0x50>)
 80006d6:	781b      	ldrb	r3, [r3, #0]
 80006d8:	b2db      	uxtb	r3, r3
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d019      	beq.n	8000712 <WriteUART+0x46>
    	HAL_UART_Transmit(&huart2, msgBuffer, strlen((char*)msgBuffer), UART_TX_MAX_DELAY);
 80006de:	4b10      	ldr	r3, [pc, #64]	; (8000720 <WriteUART+0x54>)
 80006e0:	681c      	ldr	r4, [r3, #0]
 80006e2:	4b0f      	ldr	r3, [pc, #60]	; (8000720 <WriteUART+0x54>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	4618      	mov	r0, r3
 80006e8:	f7ff fd72 	bl	80001d0 <strlen>
 80006ec:	4603      	mov	r3, r0
 80006ee:	b29a      	uxth	r2, r3
 80006f0:	f242 7310 	movw	r3, #10000	; 0x2710
 80006f4:	4621      	mov	r1, r4
 80006f6:	480b      	ldr	r0, [pc, #44]	; (8000724 <WriteUART+0x58>)
 80006f8:	f002 f9c4 	bl	8002a84 <HAL_UART_Transmit>
    	vPortFree(msgBuffer);
 80006fc:	4b08      	ldr	r3, [pc, #32]	; (8000720 <WriteUART+0x54>)
 80006fe:	681b      	ldr	r3, [r3, #0]
 8000700:	4618      	mov	r0, r3
 8000702:	f005 fca5 	bl	8006050 <vPortFree>
    	msgBuffer = NULL;
 8000706:	4b06      	ldr	r3, [pc, #24]	; (8000720 <WriteUART+0x54>)
 8000708:	2200      	movs	r2, #0
 800070a:	601a      	str	r2, [r3, #0]
    	msg_flag = 0;
 800070c:	4b03      	ldr	r3, [pc, #12]	; (800071c <WriteUART+0x50>)
 800070e:	2200      	movs	r2, #0
 8000710:	701a      	strb	r2, [r3, #0]
    }
    osDelay(1);
 8000712:	2001      	movs	r0, #1
 8000714:	f003 f818 	bl	8003748 <osDelay>
    if(msg_flag) {
 8000718:	e7dc      	b.n	80006d4 <WriteUART+0x8>
 800071a:	bf00      	nop
 800071c:	20000094 	.word	0x20000094
 8000720:	20000090 	.word	0x20000090
 8000724:	200000ec 	.word	0x200000ec

08000728 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000728:	b580      	push	{r7, lr}
 800072a:	b088      	sub	sp, #32
 800072c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800072e:	f107 030c 	add.w	r3, r7, #12
 8000732:	2200      	movs	r2, #0
 8000734:	601a      	str	r2, [r3, #0]
 8000736:	605a      	str	r2, [r3, #4]
 8000738:	609a      	str	r2, [r3, #8]
 800073a:	60da      	str	r2, [r3, #12]
 800073c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800073e:	4b1d      	ldr	r3, [pc, #116]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000742:	4a1c      	ldr	r2, [pc, #112]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000744:	f043 0304 	orr.w	r3, r3, #4
 8000748:	64d3      	str	r3, [r2, #76]	; 0x4c
 800074a:	4b1a      	ldr	r3, [pc, #104]	; (80007b4 <MX_GPIO_Init+0x8c>)
 800074c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800074e:	f003 0304 	and.w	r3, r3, #4
 8000752:	60bb      	str	r3, [r7, #8]
 8000754:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000756:	4b17      	ldr	r3, [pc, #92]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000758:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800075a:	4a16      	ldr	r2, [pc, #88]	; (80007b4 <MX_GPIO_Init+0x8c>)
 800075c:	f043 0301 	orr.w	r3, r3, #1
 8000760:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000762:	4b14      	ldr	r3, [pc, #80]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000766:	f003 0301 	and.w	r3, r3, #1
 800076a:	607b      	str	r3, [r7, #4]
 800076c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800076e:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000770:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000772:	4a10      	ldr	r2, [pc, #64]	; (80007b4 <MX_GPIO_Init+0x8c>)
 8000774:	f043 0302 	orr.w	r3, r3, #2
 8000778:	64d3      	str	r3, [r2, #76]	; 0x4c
 800077a:	4b0e      	ldr	r3, [pc, #56]	; (80007b4 <MX_GPIO_Init+0x8c>)
 800077c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800077e:	f003 0302 	and.w	r3, r3, #2
 8000782:	603b      	str	r3, [r7, #0]
 8000784:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Board_LED_GPIO_Port, Board_LED_Pin, GPIO_PIN_RESET);
 8000786:	2200      	movs	r2, #0
 8000788:	2108      	movs	r1, #8
 800078a:	480b      	ldr	r0, [pc, #44]	; (80007b8 <MX_GPIO_Init+0x90>)
 800078c:	f000 fcbe 	bl	800110c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Board_LED_Pin;
 8000790:	2308      	movs	r3, #8
 8000792:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000794:	2301      	movs	r3, #1
 8000796:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079c:	2300      	movs	r3, #0
 800079e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(Board_LED_GPIO_Port, &GPIO_InitStruct);
 80007a0:	f107 030c 	add.w	r3, r7, #12
 80007a4:	4619      	mov	r1, r3
 80007a6:	4804      	ldr	r0, [pc, #16]	; (80007b8 <MX_GPIO_Init+0x90>)
 80007a8:	f000 fb46 	bl	8000e38 <HAL_GPIO_Init>

}
 80007ac:	bf00      	nop
 80007ae:	3720      	adds	r7, #32
 80007b0:	46bd      	mov	sp, r7
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40021000 	.word	0x40021000
 80007b8:	48000400 	.word	0x48000400

080007bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007c0:	f000 fa1f 	bl	8000c02 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007c4:	f000 f80c 	bl	80007e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007c8:	f7ff ffae 	bl	8000728 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 80007cc:	f000 f956 	bl	8000a7c <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 80007d0:	f002 fede 	bl	8003590 <osKernelInitialize>
  MX_FREERTOS_Init();
 80007d4:	f7ff fe86 	bl	80004e4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80007d8:	f002 fefe 	bl	80035d8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80007dc:	e7fe      	b.n	80007dc <main+0x20>
	...

080007e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	b096      	sub	sp, #88	; 0x58
 80007e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007e6:	f107 0314 	add.w	r3, r7, #20
 80007ea:	2244      	movs	r2, #68	; 0x44
 80007ec:	2100      	movs	r1, #0
 80007ee:	4618      	mov	r0, r3
 80007f0:	f005 fd80 	bl	80062f4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007f4:	463b      	mov	r3, r7
 80007f6:	2200      	movs	r2, #0
 80007f8:	601a      	str	r2, [r3, #0]
 80007fa:	605a      	str	r2, [r3, #4]
 80007fc:	609a      	str	r2, [r3, #8]
 80007fe:	60da      	str	r2, [r3, #12]
 8000800:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000802:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000806:	f000 fcb7 	bl	8001178 <HAL_PWREx_ControlVoltageScaling>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000810:	f000 f85a 	bl	80008c8 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000814:	f000 fc92 	bl	800113c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000818:	4b21      	ldr	r3, [pc, #132]	; (80008a0 <SystemClock_Config+0xc0>)
 800081a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800081e:	4a20      	ldr	r2, [pc, #128]	; (80008a0 <SystemClock_Config+0xc0>)
 8000820:	f023 0318 	bic.w	r3, r3, #24
 8000824:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000828:	2314      	movs	r3, #20
 800082a:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800082c:	2301      	movs	r3, #1
 800082e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000830:	2301      	movs	r3, #1
 8000832:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000834:	2300      	movs	r3, #0
 8000836:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000838:	2360      	movs	r3, #96	; 0x60
 800083a:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800083c:	2302      	movs	r3, #2
 800083e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000840:	2301      	movs	r3, #1
 8000842:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000844:	2301      	movs	r3, #1
 8000846:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000848:	2310      	movs	r3, #16
 800084a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800084c:	2307      	movs	r3, #7
 800084e:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000850:	2302      	movs	r3, #2
 8000852:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000854:	2302      	movs	r3, #2
 8000856:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000858:	f107 0314 	add.w	r3, r7, #20
 800085c:	4618      	mov	r0, r3
 800085e:	f000 fce1 	bl	8001224 <HAL_RCC_OscConfig>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000868:	f000 f82e 	bl	80008c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800086c:	230f      	movs	r3, #15
 800086e:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000870:	2303      	movs	r3, #3
 8000872:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000874:	2300      	movs	r3, #0
 8000876:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800087c:	2300      	movs	r3, #0
 800087e:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000880:	463b      	mov	r3, r7
 8000882:	2101      	movs	r1, #1
 8000884:	4618      	mov	r0, r3
 8000886:	f001 f8e1 	bl	8001a4c <HAL_RCC_ClockConfig>
 800088a:	4603      	mov	r3, r0
 800088c:	2b00      	cmp	r3, #0
 800088e:	d001      	beq.n	8000894 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000890:	f000 f81a 	bl	80008c8 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000894:	f001 fd26 	bl	80022e4 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000898:	bf00      	nop
 800089a:	3758      	adds	r7, #88	; 0x58
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	40021000 	.word	0x40021000

080008a4 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b082      	sub	sp, #8
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	4a04      	ldr	r2, [pc, #16]	; (80008c4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80008b2:	4293      	cmp	r3, r2
 80008b4:	d101      	bne.n	80008ba <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80008b6:	f000 f9bd 	bl	8000c34 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80008ba:	bf00      	nop
 80008bc:	3708      	adds	r7, #8
 80008be:	46bd      	mov	sp, r7
 80008c0:	bd80      	pop	{r7, pc}
 80008c2:	bf00      	nop
 80008c4:	40001000 	.word	0x40001000

080008c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008c8:	b480      	push	{r7}
 80008ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008cc:	b672      	cpsid	i
}
 80008ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008d0:	e7fe      	b.n	80008d0 <Error_Handler+0x8>
	...

080008d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008da:	4b11      	ldr	r3, [pc, #68]	; (8000920 <HAL_MspInit+0x4c>)
 80008dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008de:	4a10      	ldr	r2, [pc, #64]	; (8000920 <HAL_MspInit+0x4c>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	6613      	str	r3, [r2, #96]	; 0x60
 80008e6:	4b0e      	ldr	r3, [pc, #56]	; (8000920 <HAL_MspInit+0x4c>)
 80008e8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	607b      	str	r3, [r7, #4]
 80008f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008f2:	4b0b      	ldr	r3, [pc, #44]	; (8000920 <HAL_MspInit+0x4c>)
 80008f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80008f6:	4a0a      	ldr	r2, [pc, #40]	; (8000920 <HAL_MspInit+0x4c>)
 80008f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fc:	6593      	str	r3, [r2, #88]	; 0x58
 80008fe:	4b08      	ldr	r3, [pc, #32]	; (8000920 <HAL_MspInit+0x4c>)
 8000900:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000902:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000906:	603b      	str	r3, [r7, #0]
 8000908:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800090a:	2200      	movs	r2, #0
 800090c:	210f      	movs	r1, #15
 800090e:	f06f 0001 	mvn.w	r0, #1
 8000912:	f000 fa67 	bl	8000de4 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000916:	bf00      	nop
 8000918:	3708      	adds	r7, #8
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40021000 	.word	0x40021000

08000924 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000924:	b580      	push	{r7, lr}
 8000926:	b08e      	sub	sp, #56	; 0x38
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 800092c:	2300      	movs	r3, #0
 800092e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <HAL_InitTick+0xe0>)
 8000934:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000936:	4a33      	ldr	r2, [pc, #204]	; (8000a04 <HAL_InitTick+0xe0>)
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	6593      	str	r3, [r2, #88]	; 0x58
 800093e:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <HAL_InitTick+0xe0>)
 8000940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000942:	f003 0310 	and.w	r3, r3, #16
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800094a:	f107 0210 	add.w	r2, r7, #16
 800094e:	f107 0314 	add.w	r3, r7, #20
 8000952:	4611      	mov	r1, r2
 8000954:	4618      	mov	r0, r3
 8000956:	f001 fa3d 	bl	8001dd4 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 800095a:	6a3b      	ldr	r3, [r7, #32]
 800095c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 800095e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000960:	2b00      	cmp	r3, #0
 8000962:	d103      	bne.n	800096c <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000964:	f001 fa0a 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8000968:	6378      	str	r0, [r7, #52]	; 0x34
 800096a:	e004      	b.n	8000976 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 800096c:	f001 fa06 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8000970:	4603      	mov	r3, r0
 8000972:	005b      	lsls	r3, r3, #1
 8000974:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000976:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <HAL_InitTick+0xe4>)
 800097a:	fba2 2303 	umull	r2, r3, r2, r3
 800097e:	0c9b      	lsrs	r3, r3, #18
 8000980:	3b01      	subs	r3, #1
 8000982:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000984:	4b21      	ldr	r3, [pc, #132]	; (8000a0c <HAL_InitTick+0xe8>)
 8000986:	4a22      	ldr	r2, [pc, #136]	; (8000a10 <HAL_InitTick+0xec>)
 8000988:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800098a:	4b20      	ldr	r3, [pc, #128]	; (8000a0c <HAL_InitTick+0xe8>)
 800098c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000990:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000992:	4a1e      	ldr	r2, [pc, #120]	; (8000a0c <HAL_InitTick+0xe8>)
 8000994:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000996:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000998:	4b1c      	ldr	r3, [pc, #112]	; (8000a0c <HAL_InitTick+0xe8>)
 800099a:	2200      	movs	r2, #0
 800099c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800099e:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_InitTick+0xe8>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009a4:	4b19      	ldr	r3, [pc, #100]	; (8000a0c <HAL_InitTick+0xe8>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80009aa:	4818      	ldr	r0, [pc, #96]	; (8000a0c <HAL_InitTick+0xe8>)
 80009ac:	f001 fd9c 	bl	80024e8 <HAL_TIM_Base_Init>
 80009b0:	4603      	mov	r3, r0
 80009b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80009b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	d11b      	bne.n	80009f6 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 80009be:	4813      	ldr	r0, [pc, #76]	; (8000a0c <HAL_InitTick+0xe8>)
 80009c0:	f001 fdf4 	bl	80025ac <HAL_TIM_Base_Start_IT>
 80009c4:	4603      	mov	r3, r0
 80009c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 80009ca:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d111      	bne.n	80009f6 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80009d2:	2036      	movs	r0, #54	; 0x36
 80009d4:	f000 fa22 	bl	8000e1c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	2b0f      	cmp	r3, #15
 80009dc:	d808      	bhi.n	80009f0 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 80009de:	2200      	movs	r2, #0
 80009e0:	6879      	ldr	r1, [r7, #4]
 80009e2:	2036      	movs	r0, #54	; 0x36
 80009e4:	f000 f9fe 	bl	8000de4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80009e8:	4a0a      	ldr	r2, [pc, #40]	; (8000a14 <HAL_InitTick+0xf0>)
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	6013      	str	r3, [r2, #0]
 80009ee:	e002      	b.n	80009f6 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 80009f0:	2301      	movs	r3, #1
 80009f2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 80009f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 80009fa:	4618      	mov	r0, r3
 80009fc:	3738      	adds	r7, #56	; 0x38
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40021000 	.word	0x40021000
 8000a08:	431bde83 	.word	0x431bde83
 8000a0c:	200000a0 	.word	0x200000a0
 8000a10:	40001000 	.word	0x40001000
 8000a14:	20000004 	.word	0x20000004

08000a18 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a18:	b480      	push	{r7}
 8000a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <NMI_Handler+0x4>

08000a1e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a1e:	b480      	push	{r7}
 8000a20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a22:	e7fe      	b.n	8000a22 <HardFault_Handler+0x4>

08000a24 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a28:	e7fe      	b.n	8000a28 <MemManage_Handler+0x4>

08000a2a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a2a:	b480      	push	{r7}
 8000a2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a2e:	e7fe      	b.n	8000a2e <BusFault_Handler+0x4>

08000a30 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a34:	e7fe      	b.n	8000a34 <UsageFault_Handler+0x4>

08000a36 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a36:	b480      	push	{r7}
 8000a38:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a3a:	bf00      	nop
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a42:	4770      	bx	lr

08000a44 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000a44:	b580      	push	{r7, lr}
 8000a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000a48:	4802      	ldr	r0, [pc, #8]	; (8000a54 <TIM6_DAC_IRQHandler+0x10>)
 8000a4a:	f001 fe03 	bl	8002654 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000a4e:	bf00      	nop
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	bf00      	nop
 8000a54:	200000a0 	.word	0x200000a0

08000a58 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000a58:	b480      	push	{r7}
 8000a5a:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000a5c:	4b06      	ldr	r3, [pc, #24]	; (8000a78 <SystemInit+0x20>)
 8000a5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a62:	4a05      	ldr	r2, [pc, #20]	; (8000a78 <SystemInit+0x20>)
 8000a64:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a68:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000a6c:	bf00      	nop
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a74:	4770      	bx	lr
 8000a76:	bf00      	nop
 8000a78:	e000ed00 	.word	0xe000ed00

08000a7c <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000a80:	4b14      	ldr	r3, [pc, #80]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000a82:	4a15      	ldr	r2, [pc, #84]	; (8000ad8 <MX_USART2_UART_Init+0x5c>)
 8000a84:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000a86:	4b13      	ldr	r3, [pc, #76]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000a88:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000a8c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000a8e:	4b11      	ldr	r3, [pc, #68]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000a94:	4b0f      	ldr	r3, [pc, #60]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000a96:	2200      	movs	r2, #0
 8000a98:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000a9a:	4b0e      	ldr	r3, [pc, #56]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000aa0:	4b0c      	ldr	r3, [pc, #48]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000aa2:	220c      	movs	r2, #12
 8000aa4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aa6:	4b0b      	ldr	r3, [pc, #44]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000aac:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ab2:	4b08      	ldr	r3, [pc, #32]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ab8:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000aba:	2200      	movs	r2, #0
 8000abc:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000abe:	4805      	ldr	r0, [pc, #20]	; (8000ad4 <MX_USART2_UART_Init+0x58>)
 8000ac0:	f001 ff92 	bl	80029e8 <HAL_UART_Init>
 8000ac4:	4603      	mov	r3, r0
 8000ac6:	2b00      	cmp	r3, #0
 8000ac8:	d001      	beq.n	8000ace <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000aca:	f7ff fefd 	bl	80008c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ace:	bf00      	nop
 8000ad0:	bd80      	pop	{r7, pc}
 8000ad2:	bf00      	nop
 8000ad4:	200000ec 	.word	0x200000ec
 8000ad8:	40004400 	.word	0x40004400

08000adc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b09e      	sub	sp, #120	; 0x78
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000ae8:	2200      	movs	r2, #0
 8000aea:	601a      	str	r2, [r3, #0]
 8000aec:	605a      	str	r2, [r3, #4]
 8000aee:	609a      	str	r2, [r3, #8]
 8000af0:	60da      	str	r2, [r3, #12]
 8000af2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000af4:	f107 0310 	add.w	r3, r7, #16
 8000af8:	2254      	movs	r2, #84	; 0x54
 8000afa:	2100      	movs	r1, #0
 8000afc:	4618      	mov	r0, r3
 8000afe:	f005 fbf9 	bl	80062f4 <memset>
  if(uartHandle->Instance==USART2)
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	4a28      	ldr	r2, [pc, #160]	; (8000ba8 <HAL_UART_MspInit+0xcc>)
 8000b08:	4293      	cmp	r3, r2
 8000b0a:	d148      	bne.n	8000b9e <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000b10:	2300      	movs	r3, #0
 8000b12:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b14:	f107 0310 	add.w	r3, r7, #16
 8000b18:	4618      	mov	r0, r3
 8000b1a:	f001 f9ed 	bl	8001ef8 <HAL_RCCEx_PeriphCLKConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000b24:	f7ff fed0 	bl	80008c8 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000b28:	4b20      	ldr	r3, [pc, #128]	; (8000bac <HAL_UART_MspInit+0xd0>)
 8000b2a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b2c:	4a1f      	ldr	r2, [pc, #124]	; (8000bac <HAL_UART_MspInit+0xd0>)
 8000b2e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b32:	6593      	str	r3, [r2, #88]	; 0x58
 8000b34:	4b1d      	ldr	r3, [pc, #116]	; (8000bac <HAL_UART_MspInit+0xd0>)
 8000b36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000b38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000b3c:	60fb      	str	r3, [r7, #12]
 8000b3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b40:	4b1a      	ldr	r3, [pc, #104]	; (8000bac <HAL_UART_MspInit+0xd0>)
 8000b42:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b44:	4a19      	ldr	r2, [pc, #100]	; (8000bac <HAL_UART_MspInit+0xd0>)
 8000b46:	f043 0301 	orr.w	r3, r3, #1
 8000b4a:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <HAL_UART_MspInit+0xd0>)
 8000b4e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000b50:	f003 0301 	and.w	r3, r3, #1
 8000b54:	60bb      	str	r3, [r7, #8]
 8000b56:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000b58:	2304      	movs	r3, #4
 8000b5a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b5c:	2302      	movs	r3, #2
 8000b5e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b60:	2300      	movs	r3, #0
 8000b62:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b64:	2303      	movs	r3, #3
 8000b66:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000b68:	2307      	movs	r3, #7
 8000b6a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000b6c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b70:	4619      	mov	r1, r3
 8000b72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b76:	f000 f95f 	bl	8000e38 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000b7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000b7e:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b80:	2302      	movs	r3, #2
 8000b82:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b84:	2300      	movs	r3, #0
 8000b86:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b88:	2303      	movs	r3, #3
 8000b8a:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000b8c:	2303      	movs	r3, #3
 8000b8e:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8000b90:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000b94:	4619      	mov	r1, r3
 8000b96:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b9a:	f000 f94d 	bl	8000e38 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000b9e:	bf00      	nop
 8000ba0:	3778      	adds	r7, #120	; 0x78
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	bd80      	pop	{r7, pc}
 8000ba6:	bf00      	nop
 8000ba8:	40004400 	.word	0x40004400
 8000bac:	40021000 	.word	0x40021000

08000bb0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bb0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000be8 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bb4:	f7ff ff50 	bl	8000a58 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bb8:	480c      	ldr	r0, [pc, #48]	; (8000bec <LoopForever+0x6>)
  ldr r1, =_edata
 8000bba:	490d      	ldr	r1, [pc, #52]	; (8000bf0 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000bbc:	4a0d      	ldr	r2, [pc, #52]	; (8000bf4 <LoopForever+0xe>)
  movs r3, #0
 8000bbe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc0:	e002      	b.n	8000bc8 <LoopCopyDataInit>

08000bc2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bc2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bc4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bc6:	3304      	adds	r3, #4

08000bc8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bc8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bcc:	d3f9      	bcc.n	8000bc2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bce:	4a0a      	ldr	r2, [pc, #40]	; (8000bf8 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000bd0:	4c0a      	ldr	r4, [pc, #40]	; (8000bfc <LoopForever+0x16>)
  movs r3, #0
 8000bd2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bd4:	e001      	b.n	8000bda <LoopFillZerobss>

08000bd6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bd6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000bd8:	3204      	adds	r2, #4

08000bda <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000bda:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000bdc:	d3fb      	bcc.n	8000bd6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000bde:	f005 fb55 	bl	800628c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000be2:	f7ff fdeb 	bl	80007bc <main>

08000be6 <LoopForever>:

LoopForever:
    b LoopForever
 8000be6:	e7fe      	b.n	8000be6 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000be8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bf0:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000bf4:	08006604 	.word	0x08006604
  ldr r2, =_sbss
 8000bf8:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000bfc:	20001b44 	.word	0x20001b44

08000c00 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c00:	e7fe      	b.n	8000c00 <ADC1_IRQHandler>

08000c02 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c02:	b580      	push	{r7, lr}
 8000c04:	b082      	sub	sp, #8
 8000c06:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c0c:	2003      	movs	r0, #3
 8000c0e:	f000 f8de 	bl	8000dce <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c12:	200f      	movs	r0, #15
 8000c14:	f7ff fe86 	bl	8000924 <HAL_InitTick>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d002      	beq.n	8000c24 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c1e:	2301      	movs	r3, #1
 8000c20:	71fb      	strb	r3, [r7, #7]
 8000c22:	e001      	b.n	8000c28 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c24:	f7ff fe56 	bl	80008d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c28:	79fb      	ldrb	r3, [r7, #7]
}
 8000c2a:	4618      	mov	r0, r3
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c38:	4b06      	ldr	r3, [pc, #24]	; (8000c54 <HAL_IncTick+0x20>)
 8000c3a:	781b      	ldrb	r3, [r3, #0]
 8000c3c:	461a      	mov	r2, r3
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <HAL_IncTick+0x24>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	4413      	add	r3, r2
 8000c44:	4a04      	ldr	r2, [pc, #16]	; (8000c58 <HAL_IncTick+0x24>)
 8000c46:	6013      	str	r3, [r2, #0]
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c50:	4770      	bx	lr
 8000c52:	bf00      	nop
 8000c54:	20000008 	.word	0x20000008
 8000c58:	20000170 	.word	0x20000170

08000c5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
  return uwTick;
 8000c60:	4b03      	ldr	r3, [pc, #12]	; (8000c70 <HAL_GetTick+0x14>)
 8000c62:	681b      	ldr	r3, [r3, #0]
}
 8000c64:	4618      	mov	r0, r3
 8000c66:	46bd      	mov	sp, r7
 8000c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6c:	4770      	bx	lr
 8000c6e:	bf00      	nop
 8000c70:	20000170 	.word	0x20000170

08000c74 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c74:	b480      	push	{r7}
 8000c76:	b085      	sub	sp, #20
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	f003 0307 	and.w	r3, r3, #7
 8000c82:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000c86:	68db      	ldr	r3, [r3, #12]
 8000c88:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c8a:	68ba      	ldr	r2, [r7, #8]
 8000c8c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c90:	4013      	ands	r3, r2
 8000c92:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c94:	68fb      	ldr	r3, [r7, #12]
 8000c96:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c98:	68bb      	ldr	r3, [r7, #8]
 8000c9a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c9c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ca0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ca4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ca6:	4a04      	ldr	r2, [pc, #16]	; (8000cb8 <__NVIC_SetPriorityGrouping+0x44>)
 8000ca8:	68bb      	ldr	r3, [r7, #8]
 8000caa:	60d3      	str	r3, [r2, #12]
}
 8000cac:	bf00      	nop
 8000cae:	3714      	adds	r7, #20
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb6:	4770      	bx	lr
 8000cb8:	e000ed00 	.word	0xe000ed00

08000cbc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000cc0:	4b04      	ldr	r3, [pc, #16]	; (8000cd4 <__NVIC_GetPriorityGrouping+0x18>)
 8000cc2:	68db      	ldr	r3, [r3, #12]
 8000cc4:	0a1b      	lsrs	r3, r3, #8
 8000cc6:	f003 0307 	and.w	r3, r3, #7
}
 8000cca:	4618      	mov	r0, r3
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr
 8000cd4:	e000ed00 	.word	0xe000ed00

08000cd8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	b083      	sub	sp, #12
 8000cdc:	af00      	add	r7, sp, #0
 8000cde:	4603      	mov	r3, r0
 8000ce0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ce6:	2b00      	cmp	r3, #0
 8000ce8:	db0b      	blt.n	8000d02 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000cea:	79fb      	ldrb	r3, [r7, #7]
 8000cec:	f003 021f 	and.w	r2, r3, #31
 8000cf0:	4907      	ldr	r1, [pc, #28]	; (8000d10 <__NVIC_EnableIRQ+0x38>)
 8000cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000cf6:	095b      	lsrs	r3, r3, #5
 8000cf8:	2001      	movs	r0, #1
 8000cfa:	fa00 f202 	lsl.w	r2, r0, r2
 8000cfe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d02:	bf00      	nop
 8000d04:	370c      	adds	r7, #12
 8000d06:	46bd      	mov	sp, r7
 8000d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d0c:	4770      	bx	lr
 8000d0e:	bf00      	nop
 8000d10:	e000e100 	.word	0xe000e100

08000d14 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d14:	b480      	push	{r7}
 8000d16:	b083      	sub	sp, #12
 8000d18:	af00      	add	r7, sp, #0
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	6039      	str	r1, [r7, #0]
 8000d1e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	db0a      	blt.n	8000d3e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	b2da      	uxtb	r2, r3
 8000d2c:	490c      	ldr	r1, [pc, #48]	; (8000d60 <__NVIC_SetPriority+0x4c>)
 8000d2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d32:	0112      	lsls	r2, r2, #4
 8000d34:	b2d2      	uxtb	r2, r2
 8000d36:	440b      	add	r3, r1
 8000d38:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d3c:	e00a      	b.n	8000d54 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d3e:	683b      	ldr	r3, [r7, #0]
 8000d40:	b2da      	uxtb	r2, r3
 8000d42:	4908      	ldr	r1, [pc, #32]	; (8000d64 <__NVIC_SetPriority+0x50>)
 8000d44:	79fb      	ldrb	r3, [r7, #7]
 8000d46:	f003 030f 	and.w	r3, r3, #15
 8000d4a:	3b04      	subs	r3, #4
 8000d4c:	0112      	lsls	r2, r2, #4
 8000d4e:	b2d2      	uxtb	r2, r2
 8000d50:	440b      	add	r3, r1
 8000d52:	761a      	strb	r2, [r3, #24]
}
 8000d54:	bf00      	nop
 8000d56:	370c      	adds	r7, #12
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5e:	4770      	bx	lr
 8000d60:	e000e100 	.word	0xe000e100
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	b089      	sub	sp, #36	; 0x24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	f003 0307 	and.w	r3, r3, #7
 8000d7a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000d7c:	69fb      	ldr	r3, [r7, #28]
 8000d7e:	f1c3 0307 	rsb	r3, r3, #7
 8000d82:	2b04      	cmp	r3, #4
 8000d84:	bf28      	it	cs
 8000d86:	2304      	movcs	r3, #4
 8000d88:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000d8a:	69fb      	ldr	r3, [r7, #28]
 8000d8c:	3304      	adds	r3, #4
 8000d8e:	2b06      	cmp	r3, #6
 8000d90:	d902      	bls.n	8000d98 <NVIC_EncodePriority+0x30>
 8000d92:	69fb      	ldr	r3, [r7, #28]
 8000d94:	3b03      	subs	r3, #3
 8000d96:	e000      	b.n	8000d9a <NVIC_EncodePriority+0x32>
 8000d98:	2300      	movs	r3, #0
 8000d9a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d9c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000da0:	69bb      	ldr	r3, [r7, #24]
 8000da2:	fa02 f303 	lsl.w	r3, r2, r3
 8000da6:	43da      	mvns	r2, r3
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	401a      	ands	r2, r3
 8000dac:	697b      	ldr	r3, [r7, #20]
 8000dae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000db0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000db4:	697b      	ldr	r3, [r7, #20]
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	43d9      	mvns	r1, r3
 8000dbc:	687b      	ldr	r3, [r7, #4]
 8000dbe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dc0:	4313      	orrs	r3, r2
         );
}
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	3724      	adds	r7, #36	; 0x24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dcc:	4770      	bx	lr

08000dce <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000dce:	b580      	push	{r7, lr}
 8000dd0:	b082      	sub	sp, #8
 8000dd2:	af00      	add	r7, sp, #0
 8000dd4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000dd6:	6878      	ldr	r0, [r7, #4]
 8000dd8:	f7ff ff4c 	bl	8000c74 <__NVIC_SetPriorityGrouping>
}
 8000ddc:	bf00      	nop
 8000dde:	3708      	adds	r7, #8
 8000de0:	46bd      	mov	sp, r7
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b086      	sub	sp, #24
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	4603      	mov	r3, r0
 8000dec:	60b9      	str	r1, [r7, #8]
 8000dee:	607a      	str	r2, [r7, #4]
 8000df0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000df2:	2300      	movs	r3, #0
 8000df4:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000df6:	f7ff ff61 	bl	8000cbc <__NVIC_GetPriorityGrouping>
 8000dfa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000dfc:	687a      	ldr	r2, [r7, #4]
 8000dfe:	68b9      	ldr	r1, [r7, #8]
 8000e00:	6978      	ldr	r0, [r7, #20]
 8000e02:	f7ff ffb1 	bl	8000d68 <NVIC_EncodePriority>
 8000e06:	4602      	mov	r2, r0
 8000e08:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e0c:	4611      	mov	r1, r2
 8000e0e:	4618      	mov	r0, r3
 8000e10:	f7ff ff80 	bl	8000d14 <__NVIC_SetPriority>
}
 8000e14:	bf00      	nop
 8000e16:	3718      	adds	r7, #24
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}

08000e1c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e1c:	b580      	push	{r7, lr}
 8000e1e:	b082      	sub	sp, #8
 8000e20:	af00      	add	r7, sp, #0
 8000e22:	4603      	mov	r3, r0
 8000e24:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e2a:	4618      	mov	r0, r3
 8000e2c:	f7ff ff54 	bl	8000cd8 <__NVIC_EnableIRQ>
}
 8000e30:	bf00      	nop
 8000e32:	3708      	adds	r7, #8
 8000e34:	46bd      	mov	sp, r7
 8000e36:	bd80      	pop	{r7, pc}

08000e38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b087      	sub	sp, #28
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e42:	2300      	movs	r3, #0
 8000e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e46:	e148      	b.n	80010da <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e48:	683b      	ldr	r3, [r7, #0]
 8000e4a:	681a      	ldr	r2, [r3, #0]
 8000e4c:	2101      	movs	r1, #1
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	fa01 f303 	lsl.w	r3, r1, r3
 8000e54:	4013      	ands	r3, r2
 8000e56:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e58:	68fb      	ldr	r3, [r7, #12]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	f000 813a 	beq.w	80010d4 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000e60:	683b      	ldr	r3, [r7, #0]
 8000e62:	685b      	ldr	r3, [r3, #4]
 8000e64:	f003 0303 	and.w	r3, r3, #3
 8000e68:	2b01      	cmp	r3, #1
 8000e6a:	d005      	beq.n	8000e78 <HAL_GPIO_Init+0x40>
 8000e6c:	683b      	ldr	r3, [r7, #0]
 8000e6e:	685b      	ldr	r3, [r3, #4]
 8000e70:	f003 0303 	and.w	r3, r3, #3
 8000e74:	2b02      	cmp	r3, #2
 8000e76:	d130      	bne.n	8000eda <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	2203      	movs	r2, #3
 8000e84:	fa02 f303 	lsl.w	r3, r2, r3
 8000e88:	43db      	mvns	r3, r3
 8000e8a:	693a      	ldr	r2, [r7, #16]
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000e90:	683b      	ldr	r3, [r7, #0]
 8000e92:	68da      	ldr	r2, [r3, #12]
 8000e94:	697b      	ldr	r3, [r7, #20]
 8000e96:	005b      	lsls	r3, r3, #1
 8000e98:	fa02 f303 	lsl.w	r3, r2, r3
 8000e9c:	693a      	ldr	r2, [r7, #16]
 8000e9e:	4313      	orrs	r3, r2
 8000ea0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	693a      	ldr	r2, [r7, #16]
 8000ea6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	685b      	ldr	r3, [r3, #4]
 8000eac:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000eae:	2201      	movs	r2, #1
 8000eb0:	697b      	ldr	r3, [r7, #20]
 8000eb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000eb6:	43db      	mvns	r3, r3
 8000eb8:	693a      	ldr	r2, [r7, #16]
 8000eba:	4013      	ands	r3, r2
 8000ebc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000ebe:	683b      	ldr	r3, [r7, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	091b      	lsrs	r3, r3, #4
 8000ec4:	f003 0201 	and.w	r2, r3, #1
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	fa02 f303 	lsl.w	r3, r2, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4313      	orrs	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	693a      	ldr	r2, [r7, #16]
 8000ed8:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	685b      	ldr	r3, [r3, #4]
 8000ede:	f003 0303 	and.w	r3, r3, #3
 8000ee2:	2b03      	cmp	r3, #3
 8000ee4:	d017      	beq.n	8000f16 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	68db      	ldr	r3, [r3, #12]
 8000eea:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	005b      	lsls	r3, r3, #1
 8000ef0:	2203      	movs	r2, #3
 8000ef2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef6:	43db      	mvns	r3, r3
 8000ef8:	693a      	ldr	r2, [r7, #16]
 8000efa:	4013      	ands	r3, r2
 8000efc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000efe:	683b      	ldr	r3, [r7, #0]
 8000f00:	689a      	ldr	r2, [r3, #8]
 8000f02:	697b      	ldr	r3, [r7, #20]
 8000f04:	005b      	lsls	r3, r3, #1
 8000f06:	fa02 f303 	lsl.w	r3, r2, r3
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4313      	orrs	r3, r2
 8000f0e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f16:	683b      	ldr	r3, [r7, #0]
 8000f18:	685b      	ldr	r3, [r3, #4]
 8000f1a:	f003 0303 	and.w	r3, r3, #3
 8000f1e:	2b02      	cmp	r3, #2
 8000f20:	d123      	bne.n	8000f6a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f22:	697b      	ldr	r3, [r7, #20]
 8000f24:	08da      	lsrs	r2, r3, #3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	3208      	adds	r2, #8
 8000f2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	f003 0307 	and.w	r3, r3, #7
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	220f      	movs	r2, #15
 8000f3a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3e:	43db      	mvns	r3, r3
 8000f40:	693a      	ldr	r2, [r7, #16]
 8000f42:	4013      	ands	r3, r2
 8000f44:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f46:	683b      	ldr	r3, [r7, #0]
 8000f48:	691a      	ldr	r2, [r3, #16]
 8000f4a:	697b      	ldr	r3, [r7, #20]
 8000f4c:	f003 0307 	and.w	r3, r3, #7
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	fa02 f303 	lsl.w	r3, r2, r3
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	4313      	orrs	r3, r2
 8000f5a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000f5c:	697b      	ldr	r3, [r7, #20]
 8000f5e:	08da      	lsrs	r2, r3, #3
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	3208      	adds	r2, #8
 8000f64:	6939      	ldr	r1, [r7, #16]
 8000f66:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000f70:	697b      	ldr	r3, [r7, #20]
 8000f72:	005b      	lsls	r3, r3, #1
 8000f74:	2203      	movs	r2, #3
 8000f76:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7a:	43db      	mvns	r3, r3
 8000f7c:	693a      	ldr	r2, [r7, #16]
 8000f7e:	4013      	ands	r3, r2
 8000f80:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	685b      	ldr	r3, [r3, #4]
 8000f86:	f003 0203 	and.w	r2, r3, #3
 8000f8a:	697b      	ldr	r3, [r7, #20]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	4313      	orrs	r3, r2
 8000f96:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f9e:	683b      	ldr	r3, [r7, #0]
 8000fa0:	685b      	ldr	r3, [r3, #4]
 8000fa2:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	f000 8094 	beq.w	80010d4 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fac:	4b52      	ldr	r3, [pc, #328]	; (80010f8 <HAL_GPIO_Init+0x2c0>)
 8000fae:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fb0:	4a51      	ldr	r2, [pc, #324]	; (80010f8 <HAL_GPIO_Init+0x2c0>)
 8000fb2:	f043 0301 	orr.w	r3, r3, #1
 8000fb6:	6613      	str	r3, [r2, #96]	; 0x60
 8000fb8:	4b4f      	ldr	r3, [pc, #316]	; (80010f8 <HAL_GPIO_Init+0x2c0>)
 8000fba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000fbc:	f003 0301 	and.w	r3, r3, #1
 8000fc0:	60bb      	str	r3, [r7, #8]
 8000fc2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000fc4:	4a4d      	ldr	r2, [pc, #308]	; (80010fc <HAL_GPIO_Init+0x2c4>)
 8000fc6:	697b      	ldr	r3, [r7, #20]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000fd0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000fd2:	697b      	ldr	r3, [r7, #20]
 8000fd4:	f003 0303 	and.w	r3, r3, #3
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	220f      	movs	r2, #15
 8000fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fe0:	43db      	mvns	r3, r3
 8000fe2:	693a      	ldr	r2, [r7, #16]
 8000fe4:	4013      	ands	r3, r2
 8000fe6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000fee:	d00d      	beq.n	800100c <HAL_GPIO_Init+0x1d4>
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	4a43      	ldr	r2, [pc, #268]	; (8001100 <HAL_GPIO_Init+0x2c8>)
 8000ff4:	4293      	cmp	r3, r2
 8000ff6:	d007      	beq.n	8001008 <HAL_GPIO_Init+0x1d0>
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	4a42      	ldr	r2, [pc, #264]	; (8001104 <HAL_GPIO_Init+0x2cc>)
 8000ffc:	4293      	cmp	r3, r2
 8000ffe:	d101      	bne.n	8001004 <HAL_GPIO_Init+0x1cc>
 8001000:	2302      	movs	r3, #2
 8001002:	e004      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 8001004:	2307      	movs	r3, #7
 8001006:	e002      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 8001008:	2301      	movs	r3, #1
 800100a:	e000      	b.n	800100e <HAL_GPIO_Init+0x1d6>
 800100c:	2300      	movs	r3, #0
 800100e:	697a      	ldr	r2, [r7, #20]
 8001010:	f002 0203 	and.w	r2, r2, #3
 8001014:	0092      	lsls	r2, r2, #2
 8001016:	4093      	lsls	r3, r2
 8001018:	693a      	ldr	r2, [r7, #16]
 800101a:	4313      	orrs	r3, r2
 800101c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800101e:	4937      	ldr	r1, [pc, #220]	; (80010fc <HAL_GPIO_Init+0x2c4>)
 8001020:	697b      	ldr	r3, [r7, #20]
 8001022:	089b      	lsrs	r3, r3, #2
 8001024:	3302      	adds	r3, #2
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800102c:	4b36      	ldr	r3, [pc, #216]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 800102e:	689b      	ldr	r3, [r3, #8]
 8001030:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001032:	68fb      	ldr	r3, [r7, #12]
 8001034:	43db      	mvns	r3, r3
 8001036:	693a      	ldr	r2, [r7, #16]
 8001038:	4013      	ands	r3, r2
 800103a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800103c:	683b      	ldr	r3, [r7, #0]
 800103e:	685b      	ldr	r3, [r3, #4]
 8001040:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001044:	2b00      	cmp	r3, #0
 8001046:	d003      	beq.n	8001050 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8001048:	693a      	ldr	r2, [r7, #16]
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	4313      	orrs	r3, r2
 800104e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001050:	4a2d      	ldr	r2, [pc, #180]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001056:	4b2c      	ldr	r3, [pc, #176]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 8001058:	68db      	ldr	r3, [r3, #12]
 800105a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800105c:	68fb      	ldr	r3, [r7, #12]
 800105e:	43db      	mvns	r3, r3
 8001060:	693a      	ldr	r2, [r7, #16]
 8001062:	4013      	ands	r3, r2
 8001064:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001066:	683b      	ldr	r3, [r7, #0]
 8001068:	685b      	ldr	r3, [r3, #4]
 800106a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800106e:	2b00      	cmp	r3, #0
 8001070:	d003      	beq.n	800107a <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8001072:	693a      	ldr	r2, [r7, #16]
 8001074:	68fb      	ldr	r3, [r7, #12]
 8001076:	4313      	orrs	r3, r2
 8001078:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800107a:	4a23      	ldr	r2, [pc, #140]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 800107c:	693b      	ldr	r3, [r7, #16]
 800107e:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001080:	4b21      	ldr	r3, [pc, #132]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001086:	68fb      	ldr	r3, [r7, #12]
 8001088:	43db      	mvns	r3, r3
 800108a:	693a      	ldr	r2, [r7, #16]
 800108c:	4013      	ands	r3, r2
 800108e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001098:	2b00      	cmp	r3, #0
 800109a:	d003      	beq.n	80010a4 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 800109c:	693a      	ldr	r2, [r7, #16]
 800109e:	68fb      	ldr	r3, [r7, #12]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010a4:	4a18      	ldr	r2, [pc, #96]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 80010a6:	693b      	ldr	r3, [r7, #16]
 80010a8:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010aa:	4b17      	ldr	r3, [pc, #92]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	43db      	mvns	r3, r3
 80010b4:	693a      	ldr	r2, [r7, #16]
 80010b6:	4013      	ands	r3, r2
 80010b8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	685b      	ldr	r3, [r3, #4]
 80010be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d003      	beq.n	80010ce <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 80010c6:	693a      	ldr	r2, [r7, #16]
 80010c8:	68fb      	ldr	r3, [r7, #12]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80010ce:	4a0e      	ldr	r2, [pc, #56]	; (8001108 <HAL_GPIO_Init+0x2d0>)
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 80010d4:	697b      	ldr	r3, [r7, #20]
 80010d6:	3301      	adds	r3, #1
 80010d8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010da:	683b      	ldr	r3, [r7, #0]
 80010dc:	681a      	ldr	r2, [r3, #0]
 80010de:	697b      	ldr	r3, [r7, #20]
 80010e0:	fa22 f303 	lsr.w	r3, r2, r3
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f47f aeaf 	bne.w	8000e48 <HAL_GPIO_Init+0x10>
  }
}
 80010ea:	bf00      	nop
 80010ec:	bf00      	nop
 80010ee:	371c      	adds	r7, #28
 80010f0:	46bd      	mov	sp, r7
 80010f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f6:	4770      	bx	lr
 80010f8:	40021000 	.word	0x40021000
 80010fc:	40010000 	.word	0x40010000
 8001100:	48000400 	.word	0x48000400
 8001104:	48000800 	.word	0x48000800
 8001108:	40010400 	.word	0x40010400

0800110c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800110c:	b480      	push	{r7}
 800110e:	b083      	sub	sp, #12
 8001110:	af00      	add	r7, sp, #0
 8001112:	6078      	str	r0, [r7, #4]
 8001114:	460b      	mov	r3, r1
 8001116:	807b      	strh	r3, [r7, #2]
 8001118:	4613      	mov	r3, r2
 800111a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800111c:	787b      	ldrb	r3, [r7, #1]
 800111e:	2b00      	cmp	r3, #0
 8001120:	d003      	beq.n	800112a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001122:	887a      	ldrh	r2, [r7, #2]
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001128:	e002      	b.n	8001130 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800112a:	887a      	ldrh	r2, [r7, #2]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001130:	bf00      	nop
 8001132:	370c      	adds	r7, #12
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr

0800113c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800113c:	b480      	push	{r7}
 800113e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001140:	4b05      	ldr	r3, [pc, #20]	; (8001158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a04      	ldr	r2, [pc, #16]	; (8001158 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]
}
 800114c:	bf00      	nop
 800114e:	46bd      	mov	sp, r7
 8001150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001154:	4770      	bx	lr
 8001156:	bf00      	nop
 8001158:	40007000 	.word	0x40007000

0800115c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800115c:	b480      	push	{r7}
 800115e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001160:	4b04      	ldr	r3, [pc, #16]	; (8001174 <HAL_PWREx_GetVoltageRange+0x18>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001168:	4618      	mov	r0, r3
 800116a:	46bd      	mov	sp, r7
 800116c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001170:	4770      	bx	lr
 8001172:	bf00      	nop
 8001174:	40007000 	.word	0x40007000

08001178 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001186:	d130      	bne.n	80011ea <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001188:	4b23      	ldr	r3, [pc, #140]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001190:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001194:	d038      	beq.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001196:	4b20      	ldr	r3, [pc, #128]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800119e:	4a1e      	ldr	r2, [pc, #120]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011a0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011a4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80011a6:	4b1d      	ldr	r3, [pc, #116]	; (800121c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	2232      	movs	r2, #50	; 0x32
 80011ac:	fb02 f303 	mul.w	r3, r2, r3
 80011b0:	4a1b      	ldr	r2, [pc, #108]	; (8001220 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80011b2:	fba2 2303 	umull	r2, r3, r2, r3
 80011b6:	0c9b      	lsrs	r3, r3, #18
 80011b8:	3301      	adds	r3, #1
 80011ba:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011bc:	e002      	b.n	80011c4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3b01      	subs	r3, #1
 80011c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80011c4:	4b14      	ldr	r3, [pc, #80]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011c6:	695b      	ldr	r3, [r3, #20]
 80011c8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011cc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011d0:	d102      	bne.n	80011d8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80011d2:	68fb      	ldr	r3, [r7, #12]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	d1f2      	bne.n	80011be <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80011d8:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011da:	695b      	ldr	r3, [r3, #20]
 80011dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011e0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011e4:	d110      	bne.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80011e6:	2303      	movs	r3, #3
 80011e8:	e00f      	b.n	800120a <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80011ea:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80011f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80011f6:	d007      	beq.n	8001208 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80011f8:	4b07      	ldr	r3, [pc, #28]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001200:	4a05      	ldr	r2, [pc, #20]	; (8001218 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001206:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001208:	2300      	movs	r3, #0
}
 800120a:	4618      	mov	r0, r3
 800120c:	3714      	adds	r7, #20
 800120e:	46bd      	mov	sp, r7
 8001210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001214:	4770      	bx	lr
 8001216:	bf00      	nop
 8001218:	40007000 	.word	0x40007000
 800121c:	20000000 	.word	0x20000000
 8001220:	431bde83 	.word	0x431bde83

08001224 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	b088      	sub	sp, #32
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	2b00      	cmp	r3, #0
 8001230:	d102      	bne.n	8001238 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001232:	2301      	movs	r3, #1
 8001234:	f000 bc02 	b.w	8001a3c <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001238:	4b96      	ldr	r3, [pc, #600]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 800123a:	689b      	ldr	r3, [r3, #8]
 800123c:	f003 030c 	and.w	r3, r3, #12
 8001240:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001242:	4b94      	ldr	r3, [pc, #592]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001244:	68db      	ldr	r3, [r3, #12]
 8001246:	f003 0303 	and.w	r3, r3, #3
 800124a:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	f003 0310 	and.w	r3, r3, #16
 8001254:	2b00      	cmp	r3, #0
 8001256:	f000 80e4 	beq.w	8001422 <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800125a:	69bb      	ldr	r3, [r7, #24]
 800125c:	2b00      	cmp	r3, #0
 800125e:	d007      	beq.n	8001270 <HAL_RCC_OscConfig+0x4c>
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	2b0c      	cmp	r3, #12
 8001264:	f040 808b 	bne.w	800137e <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	2b01      	cmp	r3, #1
 800126c:	f040 8087 	bne.w	800137e <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001270:	4b88      	ldr	r3, [pc, #544]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f003 0302 	and.w	r3, r3, #2
 8001278:	2b00      	cmp	r3, #0
 800127a:	d005      	beq.n	8001288 <HAL_RCC_OscConfig+0x64>
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	699b      	ldr	r3, [r3, #24]
 8001280:	2b00      	cmp	r3, #0
 8001282:	d101      	bne.n	8001288 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001284:	2301      	movs	r3, #1
 8001286:	e3d9      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6a1a      	ldr	r2, [r3, #32]
 800128c:	4b81      	ldr	r3, [pc, #516]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 800128e:	681b      	ldr	r3, [r3, #0]
 8001290:	f003 0308 	and.w	r3, r3, #8
 8001294:	2b00      	cmp	r3, #0
 8001296:	d004      	beq.n	80012a2 <HAL_RCC_OscConfig+0x7e>
 8001298:	4b7e      	ldr	r3, [pc, #504]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012a0:	e005      	b.n	80012ae <HAL_RCC_OscConfig+0x8a>
 80012a2:	4b7c      	ldr	r3, [pc, #496]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80012a4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80012a8:	091b      	lsrs	r3, r3, #4
 80012aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80012ae:	4293      	cmp	r3, r2
 80012b0:	d223      	bcs.n	80012fa <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	6a1b      	ldr	r3, [r3, #32]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f000 fdbe 	bl	8001e38 <RCC_SetFlashLatencyFromMSIRange>
 80012bc:	4603      	mov	r3, r0
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d001      	beq.n	80012c6 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 80012c2:	2301      	movs	r3, #1
 80012c4:	e3ba      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012c6:	4b73      	ldr	r3, [pc, #460]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80012c8:	681b      	ldr	r3, [r3, #0]
 80012ca:	4a72      	ldr	r2, [pc, #456]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6013      	str	r3, [r2, #0]
 80012d2:	4b70      	ldr	r3, [pc, #448]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	6a1b      	ldr	r3, [r3, #32]
 80012de:	496d      	ldr	r1, [pc, #436]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80012e0:	4313      	orrs	r3, r2
 80012e2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80012e4:	4b6b      	ldr	r3, [pc, #428]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	69db      	ldr	r3, [r3, #28]
 80012f0:	021b      	lsls	r3, r3, #8
 80012f2:	4968      	ldr	r1, [pc, #416]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80012f4:	4313      	orrs	r3, r2
 80012f6:	604b      	str	r3, [r1, #4]
 80012f8:	e025      	b.n	8001346 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80012fa:	4b66      	ldr	r3, [pc, #408]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	4a65      	ldr	r2, [pc, #404]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001300:	f043 0308 	orr.w	r3, r3, #8
 8001304:	6013      	str	r3, [r2, #0]
 8001306:	4b63      	ldr	r3, [pc, #396]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6a1b      	ldr	r3, [r3, #32]
 8001312:	4960      	ldr	r1, [pc, #384]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001314:	4313      	orrs	r3, r2
 8001316:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001318:	4b5e      	ldr	r3, [pc, #376]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	69db      	ldr	r3, [r3, #28]
 8001324:	021b      	lsls	r3, r3, #8
 8001326:	495b      	ldr	r1, [pc, #364]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001328:	4313      	orrs	r3, r2
 800132a:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800132c:	69bb      	ldr	r3, [r7, #24]
 800132e:	2b00      	cmp	r3, #0
 8001330:	d109      	bne.n	8001346 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6a1b      	ldr	r3, [r3, #32]
 8001336:	4618      	mov	r0, r3
 8001338:	f000 fd7e 	bl	8001e38 <RCC_SetFlashLatencyFromMSIRange>
 800133c:	4603      	mov	r3, r0
 800133e:	2b00      	cmp	r3, #0
 8001340:	d001      	beq.n	8001346 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001342:	2301      	movs	r3, #1
 8001344:	e37a      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001346:	f000 fc81 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 800134a:	4602      	mov	r2, r0
 800134c:	4b51      	ldr	r3, [pc, #324]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	091b      	lsrs	r3, r3, #4
 8001352:	f003 030f 	and.w	r3, r3, #15
 8001356:	4950      	ldr	r1, [pc, #320]	; (8001498 <HAL_RCC_OscConfig+0x274>)
 8001358:	5ccb      	ldrb	r3, [r1, r3]
 800135a:	f003 031f 	and.w	r3, r3, #31
 800135e:	fa22 f303 	lsr.w	r3, r2, r3
 8001362:	4a4e      	ldr	r2, [pc, #312]	; (800149c <HAL_RCC_OscConfig+0x278>)
 8001364:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001366:	4b4e      	ldr	r3, [pc, #312]	; (80014a0 <HAL_RCC_OscConfig+0x27c>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	4618      	mov	r0, r3
 800136c:	f7ff fada 	bl	8000924 <HAL_InitTick>
 8001370:	4603      	mov	r3, r0
 8001372:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001374:	7bfb      	ldrb	r3, [r7, #15]
 8001376:	2b00      	cmp	r3, #0
 8001378:	d052      	beq.n	8001420 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 800137a:	7bfb      	ldrb	r3, [r7, #15]
 800137c:	e35e      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	699b      	ldr	r3, [r3, #24]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d032      	beq.n	80013ec <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001386:	4b43      	ldr	r3, [pc, #268]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	4a42      	ldr	r2, [pc, #264]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001392:	f7ff fc63 	bl	8000c5c <HAL_GetTick>
 8001396:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001398:	e008      	b.n	80013ac <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800139a:	f7ff fc5f 	bl	8000c5c <HAL_GetTick>
 800139e:	4602      	mov	r2, r0
 80013a0:	693b      	ldr	r3, [r7, #16]
 80013a2:	1ad3      	subs	r3, r2, r3
 80013a4:	2b02      	cmp	r3, #2
 80013a6:	d901      	bls.n	80013ac <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80013a8:	2303      	movs	r3, #3
 80013aa:	e347      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80013ac:	4b39      	ldr	r3, [pc, #228]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	f003 0302 	and.w	r3, r3, #2
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d0f0      	beq.n	800139a <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80013b8:	4b36      	ldr	r3, [pc, #216]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a35      	ldr	r2, [pc, #212]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80013be:	f043 0308 	orr.w	r3, r3, #8
 80013c2:	6013      	str	r3, [r2, #0]
 80013c4:	4b33      	ldr	r3, [pc, #204]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6a1b      	ldr	r3, [r3, #32]
 80013d0:	4930      	ldr	r1, [pc, #192]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80013d2:	4313      	orrs	r3, r2
 80013d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80013d6:	4b2f      	ldr	r3, [pc, #188]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80013d8:	685b      	ldr	r3, [r3, #4]
 80013da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	69db      	ldr	r3, [r3, #28]
 80013e2:	021b      	lsls	r3, r3, #8
 80013e4:	492b      	ldr	r1, [pc, #172]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80013e6:	4313      	orrs	r3, r2
 80013e8:	604b      	str	r3, [r1, #4]
 80013ea:	e01a      	b.n	8001422 <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80013ec:	4b29      	ldr	r3, [pc, #164]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	4a28      	ldr	r2, [pc, #160]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 80013f2:	f023 0301 	bic.w	r3, r3, #1
 80013f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80013f8:	f7ff fc30 	bl	8000c5c <HAL_GetTick>
 80013fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80013fe:	e008      	b.n	8001412 <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001400:	f7ff fc2c 	bl	8000c5c <HAL_GetTick>
 8001404:	4602      	mov	r2, r0
 8001406:	693b      	ldr	r3, [r7, #16]
 8001408:	1ad3      	subs	r3, r2, r3
 800140a:	2b02      	cmp	r3, #2
 800140c:	d901      	bls.n	8001412 <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800140e:	2303      	movs	r3, #3
 8001410:	e314      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001412:	4b20      	ldr	r3, [pc, #128]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001414:	681b      	ldr	r3, [r3, #0]
 8001416:	f003 0302 	and.w	r3, r3, #2
 800141a:	2b00      	cmp	r3, #0
 800141c:	d1f0      	bne.n	8001400 <HAL_RCC_OscConfig+0x1dc>
 800141e:	e000      	b.n	8001422 <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001420:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	d073      	beq.n	8001516 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800142e:	69bb      	ldr	r3, [r7, #24]
 8001430:	2b08      	cmp	r3, #8
 8001432:	d005      	beq.n	8001440 <HAL_RCC_OscConfig+0x21c>
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	2b0c      	cmp	r3, #12
 8001438:	d10e      	bne.n	8001458 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800143a:	697b      	ldr	r3, [r7, #20]
 800143c:	2b03      	cmp	r3, #3
 800143e:	d10b      	bne.n	8001458 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001440:	4b14      	ldr	r3, [pc, #80]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001448:	2b00      	cmp	r3, #0
 800144a:	d063      	beq.n	8001514 <HAL_RCC_OscConfig+0x2f0>
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	685b      	ldr	r3, [r3, #4]
 8001450:	2b00      	cmp	r3, #0
 8001452:	d15f      	bne.n	8001514 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e2f1      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	685b      	ldr	r3, [r3, #4]
 800145c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001460:	d106      	bne.n	8001470 <HAL_RCC_OscConfig+0x24c>
 8001462:	4b0c      	ldr	r3, [pc, #48]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	4a0b      	ldr	r2, [pc, #44]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800146c:	6013      	str	r3, [r2, #0]
 800146e:	e025      	b.n	80014bc <HAL_RCC_OscConfig+0x298>
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	685b      	ldr	r3, [r3, #4]
 8001474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001478:	d114      	bne.n	80014a4 <HAL_RCC_OscConfig+0x280>
 800147a:	4b06      	ldr	r3, [pc, #24]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	4a05      	ldr	r2, [pc, #20]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001484:	6013      	str	r3, [r2, #0]
 8001486:	4b03      	ldr	r3, [pc, #12]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4a02      	ldr	r2, [pc, #8]	; (8001494 <HAL_RCC_OscConfig+0x270>)
 800148c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001490:	6013      	str	r3, [r2, #0]
 8001492:	e013      	b.n	80014bc <HAL_RCC_OscConfig+0x298>
 8001494:	40021000 	.word	0x40021000
 8001498:	0800654c 	.word	0x0800654c
 800149c:	20000000 	.word	0x20000000
 80014a0:	20000004 	.word	0x20000004
 80014a4:	4ba0      	ldr	r3, [pc, #640]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a9f      	ldr	r2, [pc, #636]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80014aa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80014ae:	6013      	str	r3, [r2, #0]
 80014b0:	4b9d      	ldr	r3, [pc, #628]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	4a9c      	ldr	r2, [pc, #624]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80014b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80014ba:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	685b      	ldr	r3, [r3, #4]
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d013      	beq.n	80014ec <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c4:	f7ff fbca 	bl	8000c5c <HAL_GetTick>
 80014c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014ca:	e008      	b.n	80014de <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014cc:	f7ff fbc6 	bl	8000c5c <HAL_GetTick>
 80014d0:	4602      	mov	r2, r0
 80014d2:	693b      	ldr	r3, [r7, #16]
 80014d4:	1ad3      	subs	r3, r2, r3
 80014d6:	2b64      	cmp	r3, #100	; 0x64
 80014d8:	d901      	bls.n	80014de <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80014da:	2303      	movs	r3, #3
 80014dc:	e2ae      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80014de:	4b92      	ldr	r3, [pc, #584]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014e6:	2b00      	cmp	r3, #0
 80014e8:	d0f0      	beq.n	80014cc <HAL_RCC_OscConfig+0x2a8>
 80014ea:	e014      	b.n	8001516 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ec:	f7ff fbb6 	bl	8000c5c <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fbb2 	bl	8000c5c <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	; 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e29a      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001506:	4b88      	ldr	r3, [pc, #544]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d1f0      	bne.n	80014f4 <HAL_RCC_OscConfig+0x2d0>
 8001512:	e000      	b.n	8001516 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001514:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f003 0302 	and.w	r3, r3, #2
 800151e:	2b00      	cmp	r3, #0
 8001520:	d060      	beq.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001522:	69bb      	ldr	r3, [r7, #24]
 8001524:	2b04      	cmp	r3, #4
 8001526:	d005      	beq.n	8001534 <HAL_RCC_OscConfig+0x310>
 8001528:	69bb      	ldr	r3, [r7, #24]
 800152a:	2b0c      	cmp	r3, #12
 800152c:	d119      	bne.n	8001562 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800152e:	697b      	ldr	r3, [r7, #20]
 8001530:	2b02      	cmp	r3, #2
 8001532:	d116      	bne.n	8001562 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001534:	4b7c      	ldr	r3, [pc, #496]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800153c:	2b00      	cmp	r3, #0
 800153e:	d005      	beq.n	800154c <HAL_RCC_OscConfig+0x328>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	68db      	ldr	r3, [r3, #12]
 8001544:	2b00      	cmp	r3, #0
 8001546:	d101      	bne.n	800154c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e277      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800154c:	4b76      	ldr	r3, [pc, #472]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	691b      	ldr	r3, [r3, #16]
 8001558:	061b      	lsls	r3, r3, #24
 800155a:	4973      	ldr	r1, [pc, #460]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800155c:	4313      	orrs	r3, r2
 800155e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001560:	e040      	b.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	68db      	ldr	r3, [r3, #12]
 8001566:	2b00      	cmp	r3, #0
 8001568:	d023      	beq.n	80015b2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800156a:	4b6f      	ldr	r3, [pc, #444]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a6e      	ldr	r2, [pc, #440]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 8001570:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001574:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001576:	f7ff fb71 	bl	8000c5c <HAL_GetTick>
 800157a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800157c:	e008      	b.n	8001590 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800157e:	f7ff fb6d 	bl	8000c5c <HAL_GetTick>
 8001582:	4602      	mov	r2, r0
 8001584:	693b      	ldr	r3, [r7, #16]
 8001586:	1ad3      	subs	r3, r2, r3
 8001588:	2b02      	cmp	r3, #2
 800158a:	d901      	bls.n	8001590 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800158c:	2303      	movs	r3, #3
 800158e:	e255      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001590:	4b65      	ldr	r3, [pc, #404]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001598:	2b00      	cmp	r3, #0
 800159a:	d0f0      	beq.n	800157e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800159c:	4b62      	ldr	r3, [pc, #392]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	691b      	ldr	r3, [r3, #16]
 80015a8:	061b      	lsls	r3, r3, #24
 80015aa:	495f      	ldr	r1, [pc, #380]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80015ac:	4313      	orrs	r3, r2
 80015ae:	604b      	str	r3, [r1, #4]
 80015b0:	e018      	b.n	80015e4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015b2:	4b5d      	ldr	r3, [pc, #372]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80015b4:	681b      	ldr	r3, [r3, #0]
 80015b6:	4a5c      	ldr	r2, [pc, #368]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80015b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80015bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015be:	f7ff fb4d 	bl	8000c5c <HAL_GetTick>
 80015c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015c4:	e008      	b.n	80015d8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015c6:	f7ff fb49 	bl	8000c5c <HAL_GetTick>
 80015ca:	4602      	mov	r2, r0
 80015cc:	693b      	ldr	r3, [r7, #16]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d901      	bls.n	80015d8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80015d4:	2303      	movs	r3, #3
 80015d6:	e231      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80015d8:	4b53      	ldr	r3, [pc, #332]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d1f0      	bne.n	80015c6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	681b      	ldr	r3, [r3, #0]
 80015e8:	f003 0308 	and.w	r3, r3, #8
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d03c      	beq.n	800166a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80015f0:	687b      	ldr	r3, [r7, #4]
 80015f2:	695b      	ldr	r3, [r3, #20]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d01c      	beq.n	8001632 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015f8:	4b4b      	ldr	r3, [pc, #300]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80015fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015fe:	4a4a      	ldr	r2, [pc, #296]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001608:	f7ff fb28 	bl	8000c5c <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001610:	f7ff fb24 	bl	8000c5c <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e20c      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001622:	4b41      	ldr	r3, [pc, #260]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 8001624:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001628:	f003 0302 	and.w	r3, r3, #2
 800162c:	2b00      	cmp	r3, #0
 800162e:	d0ef      	beq.n	8001610 <HAL_RCC_OscConfig+0x3ec>
 8001630:	e01b      	b.n	800166a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 8001634:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001638:	4a3b      	ldr	r2, [pc, #236]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800163a:	f023 0301 	bic.w	r3, r3, #1
 800163e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001642:	f7ff fb0b 	bl	8000c5c <HAL_GetTick>
 8001646:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001648:	e008      	b.n	800165c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800164a:	f7ff fb07 	bl	8000c5c <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	693b      	ldr	r3, [r7, #16]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	2b02      	cmp	r3, #2
 8001656:	d901      	bls.n	800165c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001658:	2303      	movs	r3, #3
 800165a:	e1ef      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800165c:	4b32      	ldr	r3, [pc, #200]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800165e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001662:	f003 0302 	and.w	r3, r3, #2
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1ef      	bne.n	800164a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f003 0304 	and.w	r3, r3, #4
 8001672:	2b00      	cmp	r3, #0
 8001674:	f000 80a6 	beq.w	80017c4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001678:	2300      	movs	r3, #0
 800167a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800167c:	4b2a      	ldr	r3, [pc, #168]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800167e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001680:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001684:	2b00      	cmp	r3, #0
 8001686:	d10d      	bne.n	80016a4 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800168a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800168c:	4a26      	ldr	r2, [pc, #152]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800168e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001692:	6593      	str	r3, [r2, #88]	; 0x58
 8001694:	4b24      	ldr	r3, [pc, #144]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 8001696:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800169c:	60bb      	str	r3, [r7, #8]
 800169e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016a0:	2301      	movs	r3, #1
 80016a2:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016a4:	4b21      	ldr	r3, [pc, #132]	; (800172c <HAL_RCC_OscConfig+0x508>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d118      	bne.n	80016e2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80016b0:	4b1e      	ldr	r3, [pc, #120]	; (800172c <HAL_RCC_OscConfig+0x508>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a1d      	ldr	r2, [pc, #116]	; (800172c <HAL_RCC_OscConfig+0x508>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016ba:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016bc:	f7ff face 	bl	8000c5c <HAL_GetTick>
 80016c0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016c2:	e008      	b.n	80016d6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016c4:	f7ff faca 	bl	8000c5c <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	693b      	ldr	r3, [r7, #16]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	2b02      	cmp	r3, #2
 80016d0:	d901      	bls.n	80016d6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80016d2:	2303      	movs	r3, #3
 80016d4:	e1b2      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80016d6:	4b15      	ldr	r3, [pc, #84]	; (800172c <HAL_RCC_OscConfig+0x508>)
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f0      	beq.n	80016c4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	689b      	ldr	r3, [r3, #8]
 80016e6:	2b01      	cmp	r3, #1
 80016e8:	d108      	bne.n	80016fc <HAL_RCC_OscConfig+0x4d8>
 80016ea:	4b0f      	ldr	r3, [pc, #60]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80016ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f0:	4a0d      	ldr	r2, [pc, #52]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 80016f2:	f043 0301 	orr.w	r3, r3, #1
 80016f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80016fa:	e029      	b.n	8001750 <HAL_RCC_OscConfig+0x52c>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	2b05      	cmp	r3, #5
 8001702:	d115      	bne.n	8001730 <HAL_RCC_OscConfig+0x50c>
 8001704:	4b08      	ldr	r3, [pc, #32]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 8001706:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800170a:	4a07      	ldr	r2, [pc, #28]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800170c:	f043 0304 	orr.w	r3, r3, #4
 8001710:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001714:	4b04      	ldr	r3, [pc, #16]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 8001716:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800171a:	4a03      	ldr	r2, [pc, #12]	; (8001728 <HAL_RCC_OscConfig+0x504>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001724:	e014      	b.n	8001750 <HAL_RCC_OscConfig+0x52c>
 8001726:	bf00      	nop
 8001728:	40021000 	.word	0x40021000
 800172c:	40007000 	.word	0x40007000
 8001730:	4b9a      	ldr	r3, [pc, #616]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001732:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001736:	4a99      	ldr	r2, [pc, #612]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001738:	f023 0301 	bic.w	r3, r3, #1
 800173c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001740:	4b96      	ldr	r3, [pc, #600]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001742:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001746:	4a95      	ldr	r2, [pc, #596]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001748:	f023 0304 	bic.w	r3, r3, #4
 800174c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	689b      	ldr	r3, [r3, #8]
 8001754:	2b00      	cmp	r3, #0
 8001756:	d016      	beq.n	8001786 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001758:	f7ff fa80 	bl	8000c5c <HAL_GetTick>
 800175c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800175e:	e00a      	b.n	8001776 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7ff fa7c 	bl	8000c5c <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	693b      	ldr	r3, [r7, #16]
 8001768:	1ad3      	subs	r3, r2, r3
 800176a:	f241 3288 	movw	r2, #5000	; 0x1388
 800176e:	4293      	cmp	r3, r2
 8001770:	d901      	bls.n	8001776 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8001772:	2303      	movs	r3, #3
 8001774:	e162      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001776:	4b89      	ldr	r3, [pc, #548]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001778:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800177c:	f003 0302 	and.w	r3, r3, #2
 8001780:	2b00      	cmp	r3, #0
 8001782:	d0ed      	beq.n	8001760 <HAL_RCC_OscConfig+0x53c>
 8001784:	e015      	b.n	80017b2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001786:	f7ff fa69 	bl	8000c5c <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fa65 	bl	8000c5c <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e14b      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80017a4:	4b7d      	ldr	r3, [pc, #500]	; (800199c <HAL_RCC_OscConfig+0x778>)
 80017a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017aa:	f003 0302 	and.w	r3, r3, #2
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d1ed      	bne.n	800178e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80017b2:	7ffb      	ldrb	r3, [r7, #31]
 80017b4:	2b01      	cmp	r3, #1
 80017b6:	d105      	bne.n	80017c4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017b8:	4b78      	ldr	r3, [pc, #480]	; (800199c <HAL_RCC_OscConfig+0x778>)
 80017ba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017bc:	4a77      	ldr	r2, [pc, #476]	; (800199c <HAL_RCC_OscConfig+0x778>)
 80017be:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	f003 0320 	and.w	r3, r3, #32
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d03c      	beq.n	800184a <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d01c      	beq.n	8001812 <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80017d8:	4b70      	ldr	r3, [pc, #448]	; (800199c <HAL_RCC_OscConfig+0x778>)
 80017da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80017de:	4a6f      	ldr	r2, [pc, #444]	; (800199c <HAL_RCC_OscConfig+0x778>)
 80017e0:	f043 0301 	orr.w	r3, r3, #1
 80017e4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e8:	f7ff fa38 	bl	8000c5c <HAL_GetTick>
 80017ec:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80017ee:	e008      	b.n	8001802 <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80017f0:	f7ff fa34 	bl	8000c5c <HAL_GetTick>
 80017f4:	4602      	mov	r2, r0
 80017f6:	693b      	ldr	r3, [r7, #16]
 80017f8:	1ad3      	subs	r3, r2, r3
 80017fa:	2b02      	cmp	r3, #2
 80017fc:	d901      	bls.n	8001802 <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80017fe:	2303      	movs	r3, #3
 8001800:	e11c      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001802:	4b66      	ldr	r3, [pc, #408]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001804:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001808:	f003 0302 	and.w	r3, r3, #2
 800180c:	2b00      	cmp	r3, #0
 800180e:	d0ef      	beq.n	80017f0 <HAL_RCC_OscConfig+0x5cc>
 8001810:	e01b      	b.n	800184a <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001812:	4b62      	ldr	r3, [pc, #392]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001814:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001818:	4a60      	ldr	r2, [pc, #384]	; (800199c <HAL_RCC_OscConfig+0x778>)
 800181a:	f023 0301 	bic.w	r3, r3, #1
 800181e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001822:	f7ff fa1b 	bl	8000c5c <HAL_GetTick>
 8001826:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001828:	e008      	b.n	800183c <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800182a:	f7ff fa17 	bl	8000c5c <HAL_GetTick>
 800182e:	4602      	mov	r2, r0
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	1ad3      	subs	r3, r2, r3
 8001834:	2b02      	cmp	r3, #2
 8001836:	d901      	bls.n	800183c <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001838:	2303      	movs	r3, #3
 800183a:	e0ff      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800183c:	4b57      	ldr	r3, [pc, #348]	; (800199c <HAL_RCC_OscConfig+0x778>)
 800183e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001842:	f003 0302 	and.w	r3, r3, #2
 8001846:	2b00      	cmp	r3, #0
 8001848:	d1ef      	bne.n	800182a <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800184e:	2b00      	cmp	r3, #0
 8001850:	f000 80f3 	beq.w	8001a3a <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001858:	2b02      	cmp	r3, #2
 800185a:	f040 80c9 	bne.w	80019f0 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800185e:	4b4f      	ldr	r3, [pc, #316]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001860:	68db      	ldr	r3, [r3, #12]
 8001862:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	f003 0203 	and.w	r2, r3, #3
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	429a      	cmp	r2, r3
 8001870:	d12c      	bne.n	80018cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	3b01      	subs	r3, #1
 800187e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001880:	429a      	cmp	r2, r3
 8001882:	d123      	bne.n	80018cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001884:	697b      	ldr	r3, [r7, #20]
 8001886:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800188e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d11b      	bne.n	80018cc <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018a0:	429a      	cmp	r2, r3
 80018a2:	d113      	bne.n	80018cc <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80018ae:	085b      	lsrs	r3, r3, #1
 80018b0:	3b01      	subs	r3, #1
 80018b2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80018b4:	429a      	cmp	r2, r3
 80018b6:	d109      	bne.n	80018cc <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018c2:	085b      	lsrs	r3, r3, #1
 80018c4:	3b01      	subs	r3, #1
 80018c6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d06b      	beq.n	80019a4 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	2b0c      	cmp	r3, #12
 80018d0:	d062      	beq.n	8001998 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 80018d2:	4b32      	ldr	r3, [pc, #200]	; (800199c <HAL_RCC_OscConfig+0x778>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d001      	beq.n	80018e2 <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
 80018e0:	e0ac      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_RCC_OscConfig+0x778>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a2d      	ldr	r2, [pc, #180]	; (800199c <HAL_RCC_OscConfig+0x778>)
 80018e8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018ec:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018ee:	f7ff f9b5 	bl	8000c5c <HAL_GetTick>
 80018f2:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80018f4:	e008      	b.n	8001908 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018f6:	f7ff f9b1 	bl	8000c5c <HAL_GetTick>
 80018fa:	4602      	mov	r2, r0
 80018fc:	693b      	ldr	r3, [r7, #16]
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e099      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001908:	4b24      	ldr	r3, [pc, #144]	; (800199c <HAL_RCC_OscConfig+0x778>)
 800190a:	681b      	ldr	r3, [r3, #0]
 800190c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001910:	2b00      	cmp	r3, #0
 8001912:	d1f0      	bne.n	80018f6 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001914:	4b21      	ldr	r3, [pc, #132]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001916:	68da      	ldr	r2, [r3, #12]
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_RCC_OscConfig+0x77c>)
 800191a:	4013      	ands	r3, r2
 800191c:	687a      	ldr	r2, [r7, #4]
 800191e:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001920:	687a      	ldr	r2, [r7, #4]
 8001922:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001924:	3a01      	subs	r2, #1
 8001926:	0112      	lsls	r2, r2, #4
 8001928:	4311      	orrs	r1, r2
 800192a:	687a      	ldr	r2, [r7, #4]
 800192c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800192e:	0212      	lsls	r2, r2, #8
 8001930:	4311      	orrs	r1, r2
 8001932:	687a      	ldr	r2, [r7, #4]
 8001934:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001936:	0852      	lsrs	r2, r2, #1
 8001938:	3a01      	subs	r2, #1
 800193a:	0552      	lsls	r2, r2, #21
 800193c:	4311      	orrs	r1, r2
 800193e:	687a      	ldr	r2, [r7, #4]
 8001940:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001942:	0852      	lsrs	r2, r2, #1
 8001944:	3a01      	subs	r2, #1
 8001946:	0652      	lsls	r2, r2, #25
 8001948:	4311      	orrs	r1, r2
 800194a:	687a      	ldr	r2, [r7, #4]
 800194c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800194e:	06d2      	lsls	r2, r2, #27
 8001950:	430a      	orrs	r2, r1
 8001952:	4912      	ldr	r1, [pc, #72]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001954:	4313      	orrs	r3, r2
 8001956:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8001958:	4b10      	ldr	r3, [pc, #64]	; (800199c <HAL_RCC_OscConfig+0x778>)
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	4a0f      	ldr	r2, [pc, #60]	; (800199c <HAL_RCC_OscConfig+0x778>)
 800195e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001962:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001964:	4b0d      	ldr	r3, [pc, #52]	; (800199c <HAL_RCC_OscConfig+0x778>)
 8001966:	68db      	ldr	r3, [r3, #12]
 8001968:	4a0c      	ldr	r2, [pc, #48]	; (800199c <HAL_RCC_OscConfig+0x778>)
 800196a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800196e:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001970:	f7ff f974 	bl	8000c5c <HAL_GetTick>
 8001974:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001976:	e008      	b.n	800198a <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001978:	f7ff f970 	bl	8000c5c <HAL_GetTick>
 800197c:	4602      	mov	r2, r0
 800197e:	693b      	ldr	r3, [r7, #16]
 8001980:	1ad3      	subs	r3, r2, r3
 8001982:	2b02      	cmp	r3, #2
 8001984:	d901      	bls.n	800198a <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 8001986:	2303      	movs	r3, #3
 8001988:	e058      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800198a:	4b04      	ldr	r3, [pc, #16]	; (800199c <HAL_RCC_OscConfig+0x778>)
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001992:	2b00      	cmp	r3, #0
 8001994:	d0f0      	beq.n	8001978 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001996:	e050      	b.n	8001a3a <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001998:	2301      	movs	r3, #1
 800199a:	e04f      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
 800199c:	40021000 	.word	0x40021000
 80019a0:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019a4:	4b27      	ldr	r3, [pc, #156]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d144      	bne.n	8001a3a <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80019b0:	4b24      	ldr	r3, [pc, #144]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	4a23      	ldr	r2, [pc, #140]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 80019b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019ba:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019bc:	4b21      	ldr	r3, [pc, #132]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a20      	ldr	r2, [pc, #128]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 80019c8:	f7ff f948 	bl	8000c5c <HAL_GetTick>
 80019cc:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ce:	e008      	b.n	80019e2 <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019d0:	f7ff f944 	bl	8000c5c <HAL_GetTick>
 80019d4:	4602      	mov	r2, r0
 80019d6:	693b      	ldr	r3, [r7, #16]
 80019d8:	1ad3      	subs	r3, r2, r3
 80019da:	2b02      	cmp	r3, #2
 80019dc:	d901      	bls.n	80019e2 <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 80019de:	2303      	movs	r3, #3
 80019e0:	e02c      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019e2:	4b18      	ldr	r3, [pc, #96]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d0f0      	beq.n	80019d0 <HAL_RCC_OscConfig+0x7ac>
 80019ee:	e024      	b.n	8001a3a <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80019f0:	69bb      	ldr	r3, [r7, #24]
 80019f2:	2b0c      	cmp	r3, #12
 80019f4:	d01f      	beq.n	8001a36 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019f6:	4b13      	ldr	r3, [pc, #76]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a12      	ldr	r2, [pc, #72]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 80019fc:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a02:	f7ff f92b 	bl	8000c5c <HAL_GetTick>
 8001a06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a08:	e008      	b.n	8001a1c <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a0a:	f7ff f927 	bl	8000c5c <HAL_GetTick>
 8001a0e:	4602      	mov	r2, r0
 8001a10:	693b      	ldr	r3, [r7, #16]
 8001a12:	1ad3      	subs	r3, r2, r3
 8001a14:	2b02      	cmp	r3, #2
 8001a16:	d901      	bls.n	8001a1c <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a18:	2303      	movs	r3, #3
 8001a1a:	e00f      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a1c:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d1f0      	bne.n	8001a0a <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001a28:	4b06      	ldr	r3, [pc, #24]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 8001a2a:	68da      	ldr	r2, [r3, #12]
 8001a2c:	4905      	ldr	r1, [pc, #20]	; (8001a44 <HAL_RCC_OscConfig+0x820>)
 8001a2e:	4b06      	ldr	r3, [pc, #24]	; (8001a48 <HAL_RCC_OscConfig+0x824>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	60cb      	str	r3, [r1, #12]
 8001a34:	e001      	b.n	8001a3a <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001a36:	2301      	movs	r3, #1
 8001a38:	e000      	b.n	8001a3c <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001a3a:	2300      	movs	r3, #0
}
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	3720      	adds	r7, #32
 8001a40:	46bd      	mov	sp, r7
 8001a42:	bd80      	pop	{r7, pc}
 8001a44:	40021000 	.word	0x40021000
 8001a48:	feeefffc 	.word	0xfeeefffc

08001a4c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001a4c:	b580      	push	{r7, lr}
 8001a4e:	b084      	sub	sp, #16
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	6078      	str	r0, [r7, #4]
 8001a54:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d101      	bne.n	8001a60 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001a5c:	2301      	movs	r3, #1
 8001a5e:	e0e7      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001a60:	4b75      	ldr	r3, [pc, #468]	; (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f003 0307 	and.w	r3, r3, #7
 8001a68:	683a      	ldr	r2, [r7, #0]
 8001a6a:	429a      	cmp	r2, r3
 8001a6c:	d910      	bls.n	8001a90 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a6e:	4b72      	ldr	r3, [pc, #456]	; (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f023 0207 	bic.w	r2, r3, #7
 8001a76:	4970      	ldr	r1, [pc, #448]	; (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001a78:	683b      	ldr	r3, [r7, #0]
 8001a7a:	4313      	orrs	r3, r2
 8001a7c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a7e:	4b6e      	ldr	r3, [pc, #440]	; (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 0307 	and.w	r3, r3, #7
 8001a86:	683a      	ldr	r2, [r7, #0]
 8001a88:	429a      	cmp	r2, r3
 8001a8a:	d001      	beq.n	8001a90 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001a8c:	2301      	movs	r3, #1
 8001a8e:	e0cf      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f003 0302 	and.w	r3, r3, #2
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d010      	beq.n	8001abe <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	689a      	ldr	r2, [r3, #8]
 8001aa0:	4b66      	ldr	r3, [pc, #408]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001aa2:	689b      	ldr	r3, [r3, #8]
 8001aa4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001aa8:	429a      	cmp	r2, r3
 8001aaa:	d908      	bls.n	8001abe <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001aac:	4b63      	ldr	r3, [pc, #396]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	689b      	ldr	r3, [r3, #8]
 8001ab8:	4960      	ldr	r1, [pc, #384]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001aba:	4313      	orrs	r3, r2
 8001abc:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	f003 0301 	and.w	r3, r3, #1
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d04c      	beq.n	8001b64 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	2b03      	cmp	r3, #3
 8001ad0:	d107      	bne.n	8001ae2 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ad2:	4b5a      	ldr	r3, [pc, #360]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d121      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	e0a6      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	685b      	ldr	r3, [r3, #4]
 8001ae6:	2b02      	cmp	r3, #2
 8001ae8:	d107      	bne.n	8001afa <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001aea:	4b54      	ldr	r3, [pc, #336]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d115      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e09a      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	685b      	ldr	r3, [r3, #4]
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d107      	bne.n	8001b12 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b02:	4b4e      	ldr	r3, [pc, #312]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f003 0302 	and.w	r3, r3, #2
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d109      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e08e      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b12:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b14:	681b      	ldr	r3, [r3, #0]
 8001b16:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d101      	bne.n	8001b22 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e086      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b22:	4b46      	ldr	r3, [pc, #280]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b24:	689b      	ldr	r3, [r3, #8]
 8001b26:	f023 0203 	bic.w	r2, r3, #3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	685b      	ldr	r3, [r3, #4]
 8001b2e:	4943      	ldr	r1, [pc, #268]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b30:	4313      	orrs	r3, r2
 8001b32:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b34:	f7ff f892 	bl	8000c5c <HAL_GetTick>
 8001b38:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b3a:	e00a      	b.n	8001b52 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001b3c:	f7ff f88e 	bl	8000c5c <HAL_GetTick>
 8001b40:	4602      	mov	r2, r0
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	1ad3      	subs	r3, r2, r3
 8001b46:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b4a:	4293      	cmp	r3, r2
 8001b4c:	d901      	bls.n	8001b52 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001b4e:	2303      	movs	r3, #3
 8001b50:	e06e      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001b52:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	f003 020c 	and.w	r2, r3, #12
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	429a      	cmp	r2, r3
 8001b62:	d1eb      	bne.n	8001b3c <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f003 0302 	and.w	r3, r3, #2
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d010      	beq.n	8001b92 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689a      	ldr	r2, [r3, #8]
 8001b74:	4b31      	ldr	r3, [pc, #196]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b76:	689b      	ldr	r3, [r3, #8]
 8001b78:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d208      	bcs.n	8001b92 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b82:	689b      	ldr	r3, [r3, #8]
 8001b84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	689b      	ldr	r3, [r3, #8]
 8001b8c:	492b      	ldr	r1, [pc, #172]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001b92:	4b29      	ldr	r3, [pc, #164]	; (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	683a      	ldr	r2, [r7, #0]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d210      	bcs.n	8001bc2 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ba0:	4b25      	ldr	r3, [pc, #148]	; (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	f023 0207 	bic.w	r2, r3, #7
 8001ba8:	4923      	ldr	r1, [pc, #140]	; (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bb0:	4b21      	ldr	r3, [pc, #132]	; (8001c38 <HAL_RCC_ClockConfig+0x1ec>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f003 0307 	and.w	r3, r3, #7
 8001bb8:	683a      	ldr	r2, [r7, #0]
 8001bba:	429a      	cmp	r2, r3
 8001bbc:	d001      	beq.n	8001bc2 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001bbe:	2301      	movs	r3, #1
 8001bc0:	e036      	b.n	8001c30 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	f003 0304 	and.w	r3, r3, #4
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d008      	beq.n	8001be0 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001bce:	4b1b      	ldr	r3, [pc, #108]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	68db      	ldr	r3, [r3, #12]
 8001bda:	4918      	ldr	r1, [pc, #96]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	f003 0308 	and.w	r3, r3, #8
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d009      	beq.n	8001c00 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001bec:	4b13      	ldr	r3, [pc, #76]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	691b      	ldr	r3, [r3, #16]
 8001bf8:	00db      	lsls	r3, r3, #3
 8001bfa:	4910      	ldr	r1, [pc, #64]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001bfc:	4313      	orrs	r3, r2
 8001bfe:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c00:	f000 f824 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8001c04:	4602      	mov	r2, r0
 8001c06:	4b0d      	ldr	r3, [pc, #52]	; (8001c3c <HAL_RCC_ClockConfig+0x1f0>)
 8001c08:	689b      	ldr	r3, [r3, #8]
 8001c0a:	091b      	lsrs	r3, r3, #4
 8001c0c:	f003 030f 	and.w	r3, r3, #15
 8001c10:	490b      	ldr	r1, [pc, #44]	; (8001c40 <HAL_RCC_ClockConfig+0x1f4>)
 8001c12:	5ccb      	ldrb	r3, [r1, r3]
 8001c14:	f003 031f 	and.w	r3, r3, #31
 8001c18:	fa22 f303 	lsr.w	r3, r2, r3
 8001c1c:	4a09      	ldr	r2, [pc, #36]	; (8001c44 <HAL_RCC_ClockConfig+0x1f8>)
 8001c1e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c20:	4b09      	ldr	r3, [pc, #36]	; (8001c48 <HAL_RCC_ClockConfig+0x1fc>)
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fe7d 	bl	8000924 <HAL_InitTick>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	72fb      	strb	r3, [r7, #11]

  return status;
 8001c2e:	7afb      	ldrb	r3, [r7, #11]
}
 8001c30:	4618      	mov	r0, r3
 8001c32:	3710      	adds	r7, #16
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}
 8001c38:	40022000 	.word	0x40022000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	0800654c 	.word	0x0800654c
 8001c44:	20000000 	.word	0x20000000
 8001c48:	20000004 	.word	0x20000004

08001c4c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b089      	sub	sp, #36	; 0x24
 8001c50:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001c52:	2300      	movs	r3, #0
 8001c54:	61fb      	str	r3, [r7, #28]
 8001c56:	2300      	movs	r3, #0
 8001c58:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001c5a:	4b3e      	ldr	r3, [pc, #248]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 030c 	and.w	r3, r3, #12
 8001c62:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001c64:	4b3b      	ldr	r3, [pc, #236]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c66:	68db      	ldr	r3, [r3, #12]
 8001c68:	f003 0303 	and.w	r3, r3, #3
 8001c6c:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001c6e:	693b      	ldr	r3, [r7, #16]
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d005      	beq.n	8001c80 <HAL_RCC_GetSysClockFreq+0x34>
 8001c74:	693b      	ldr	r3, [r7, #16]
 8001c76:	2b0c      	cmp	r3, #12
 8001c78:	d121      	bne.n	8001cbe <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	2b01      	cmp	r3, #1
 8001c7e:	d11e      	bne.n	8001cbe <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001c80:	4b34      	ldr	r3, [pc, #208]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	f003 0308 	and.w	r3, r3, #8
 8001c88:	2b00      	cmp	r3, #0
 8001c8a:	d107      	bne.n	8001c9c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001c8c:	4b31      	ldr	r3, [pc, #196]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001c92:	0a1b      	lsrs	r3, r3, #8
 8001c94:	f003 030f 	and.w	r3, r3, #15
 8001c98:	61fb      	str	r3, [r7, #28]
 8001c9a:	e005      	b.n	8001ca8 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001c9c:	4b2d      	ldr	r3, [pc, #180]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	091b      	lsrs	r3, r3, #4
 8001ca2:	f003 030f 	and.w	r3, r3, #15
 8001ca6:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001ca8:	4a2b      	ldr	r2, [pc, #172]	; (8001d58 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001caa:	69fb      	ldr	r3, [r7, #28]
 8001cac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cb0:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cb2:	693b      	ldr	r3, [r7, #16]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d10d      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001cb8:	69fb      	ldr	r3, [r7, #28]
 8001cba:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001cbc:	e00a      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d102      	bne.n	8001cca <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001cc4:	4b25      	ldr	r3, [pc, #148]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cc6:	61bb      	str	r3, [r7, #24]
 8001cc8:	e004      	b.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001cca:	693b      	ldr	r3, [r7, #16]
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	d101      	bne.n	8001cd4 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001cd0:	4b23      	ldr	r3, [pc, #140]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cd2:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	2b0c      	cmp	r3, #12
 8001cd8:	d134      	bne.n	8001d44 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001cda:	4b1e      	ldr	r3, [pc, #120]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001cdc:	68db      	ldr	r3, [r3, #12]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	2b02      	cmp	r3, #2
 8001ce8:	d003      	beq.n	8001cf2 <HAL_RCC_GetSysClockFreq+0xa6>
 8001cea:	68bb      	ldr	r3, [r7, #8]
 8001cec:	2b03      	cmp	r3, #3
 8001cee:	d003      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0xac>
 8001cf0:	e005      	b.n	8001cfe <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001cf2:	4b1a      	ldr	r3, [pc, #104]	; (8001d5c <HAL_RCC_GetSysClockFreq+0x110>)
 8001cf4:	617b      	str	r3, [r7, #20]
      break;
 8001cf6:	e005      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001cf8:	4b19      	ldr	r3, [pc, #100]	; (8001d60 <HAL_RCC_GetSysClockFreq+0x114>)
 8001cfa:	617b      	str	r3, [r7, #20]
      break;
 8001cfc:	e002      	b.n	8001d04 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001cfe:	69fb      	ldr	r3, [r7, #28]
 8001d00:	617b      	str	r3, [r7, #20]
      break;
 8001d02:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d04:	4b13      	ldr	r3, [pc, #76]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d06:	68db      	ldr	r3, [r3, #12]
 8001d08:	091b      	lsrs	r3, r3, #4
 8001d0a:	f003 0307 	and.w	r3, r3, #7
 8001d0e:	3301      	adds	r3, #1
 8001d10:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d12:	4b10      	ldr	r3, [pc, #64]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d14:	68db      	ldr	r3, [r3, #12]
 8001d16:	0a1b      	lsrs	r3, r3, #8
 8001d18:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d1c:	697a      	ldr	r2, [r7, #20]
 8001d1e:	fb03 f202 	mul.w	r2, r3, r2
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d28:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001d2a:	4b0a      	ldr	r3, [pc, #40]	; (8001d54 <HAL_RCC_GetSysClockFreq+0x108>)
 8001d2c:	68db      	ldr	r3, [r3, #12]
 8001d2e:	0e5b      	lsrs	r3, r3, #25
 8001d30:	f003 0303 	and.w	r3, r3, #3
 8001d34:	3301      	adds	r3, #1
 8001d36:	005b      	lsls	r3, r3, #1
 8001d38:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001d3a:	697a      	ldr	r2, [r7, #20]
 8001d3c:	683b      	ldr	r3, [r7, #0]
 8001d3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d42:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001d44:	69bb      	ldr	r3, [r7, #24]
}
 8001d46:	4618      	mov	r0, r3
 8001d48:	3724      	adds	r7, #36	; 0x24
 8001d4a:	46bd      	mov	sp, r7
 8001d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d50:	4770      	bx	lr
 8001d52:	bf00      	nop
 8001d54:	40021000 	.word	0x40021000
 8001d58:	08006564 	.word	0x08006564
 8001d5c:	00f42400 	.word	0x00f42400
 8001d60:	007a1200 	.word	0x007a1200

08001d64 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d64:	b480      	push	{r7}
 8001d66:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d68:	4b03      	ldr	r3, [pc, #12]	; (8001d78 <HAL_RCC_GetHCLKFreq+0x14>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
}
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d74:	4770      	bx	lr
 8001d76:	bf00      	nop
 8001d78:	20000000 	.word	0x20000000

08001d7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001d80:	f7ff fff0 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001d84:	4602      	mov	r2, r0
 8001d86:	4b06      	ldr	r3, [pc, #24]	; (8001da0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	0a1b      	lsrs	r3, r3, #8
 8001d8c:	f003 0307 	and.w	r3, r3, #7
 8001d90:	4904      	ldr	r1, [pc, #16]	; (8001da4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001d92:	5ccb      	ldrb	r3, [r1, r3]
 8001d94:	f003 031f 	and.w	r3, r3, #31
 8001d98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	40021000 	.word	0x40021000
 8001da4:	0800655c 	.word	0x0800655c

08001da8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001dac:	f7ff ffda 	bl	8001d64 <HAL_RCC_GetHCLKFreq>
 8001db0:	4602      	mov	r2, r0
 8001db2:	4b06      	ldr	r3, [pc, #24]	; (8001dcc <HAL_RCC_GetPCLK2Freq+0x24>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	0adb      	lsrs	r3, r3, #11
 8001db8:	f003 0307 	and.w	r3, r3, #7
 8001dbc:	4904      	ldr	r1, [pc, #16]	; (8001dd0 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001dbe:	5ccb      	ldrb	r3, [r1, r3]
 8001dc0:	f003 031f 	and.w	r3, r3, #31
 8001dc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dc8:	4618      	mov	r0, r3
 8001dca:	bd80      	pop	{r7, pc}
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	0800655c 	.word	0x0800655c

08001dd4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b083      	sub	sp, #12
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	220f      	movs	r2, #15
 8001de2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001de4:	4b12      	ldr	r3, [pc, #72]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001de6:	689b      	ldr	r3, [r3, #8]
 8001de8:	f003 0203 	and.w	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001df2:	689b      	ldr	r3, [r3, #8]
 8001df4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001dfc:	4b0c      	ldr	r3, [pc, #48]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e08:	4b09      	ldr	r3, [pc, #36]	; (8001e30 <HAL_RCC_GetClockConfig+0x5c>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	08db      	lsrs	r3, r3, #3
 8001e0e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e16:	4b07      	ldr	r3, [pc, #28]	; (8001e34 <HAL_RCC_GetClockConfig+0x60>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f003 0207 	and.w	r2, r3, #7
 8001e1e:	683b      	ldr	r3, [r7, #0]
 8001e20:	601a      	str	r2, [r3, #0]
}
 8001e22:	bf00      	nop
 8001e24:	370c      	adds	r7, #12
 8001e26:	46bd      	mov	sp, r7
 8001e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2c:	4770      	bx	lr
 8001e2e:	bf00      	nop
 8001e30:	40021000 	.word	0x40021000
 8001e34:	40022000 	.word	0x40022000

08001e38 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001e40:	2300      	movs	r3, #0
 8001e42:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001e44:	4b2a      	ldr	r3, [pc, #168]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e46:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e48:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d003      	beq.n	8001e58 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001e50:	f7ff f984 	bl	800115c <HAL_PWREx_GetVoltageRange>
 8001e54:	6178      	str	r0, [r7, #20]
 8001e56:	e014      	b.n	8001e82 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001e58:	4b25      	ldr	r3, [pc, #148]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5c:	4a24      	ldr	r2, [pc, #144]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e62:	6593      	str	r3, [r2, #88]	; 0x58
 8001e64:	4b22      	ldr	r3, [pc, #136]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e66:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e6c:	60fb      	str	r3, [r7, #12]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001e70:	f7ff f974 	bl	800115c <HAL_PWREx_GetVoltageRange>
 8001e74:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001e76:	4b1e      	ldr	r3, [pc, #120]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7a:	4a1d      	ldr	r2, [pc, #116]	; (8001ef0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001e7c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001e80:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001e82:	697b      	ldr	r3, [r7, #20]
 8001e84:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e88:	d10b      	bne.n	8001ea2 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2b80      	cmp	r3, #128	; 0x80
 8001e8e:	d919      	bls.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	2ba0      	cmp	r3, #160	; 0xa0
 8001e94:	d902      	bls.n	8001e9c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e96:	2302      	movs	r3, #2
 8001e98:	613b      	str	r3, [r7, #16]
 8001e9a:	e013      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	613b      	str	r3, [r7, #16]
 8001ea0:	e010      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	2b80      	cmp	r3, #128	; 0x80
 8001ea6:	d902      	bls.n	8001eae <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	613b      	str	r3, [r7, #16]
 8001eac:	e00a      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b80      	cmp	r3, #128	; 0x80
 8001eb2:	d102      	bne.n	8001eba <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001eb4:	2302      	movs	r3, #2
 8001eb6:	613b      	str	r3, [r7, #16]
 8001eb8:	e004      	b.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	2b70      	cmp	r3, #112	; 0x70
 8001ebe:	d101      	bne.n	8001ec4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001ec4:	4b0b      	ldr	r3, [pc, #44]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f023 0207 	bic.w	r2, r3, #7
 8001ecc:	4909      	ldr	r1, [pc, #36]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	4313      	orrs	r3, r2
 8001ed2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001ed4:	4b07      	ldr	r3, [pc, #28]	; (8001ef4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 0307 	and.w	r3, r3, #7
 8001edc:	693a      	ldr	r2, [r7, #16]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d001      	beq.n	8001ee6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001ee6:	2300      	movs	r3, #0
}
 8001ee8:	4618      	mov	r0, r3
 8001eea:	3718      	adds	r7, #24
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40021000 	.word	0x40021000
 8001ef4:	40022000 	.word	0x40022000

08001ef8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001ef8:	b580      	push	{r7, lr}
 8001efa:	b086      	sub	sp, #24
 8001efc:	af00      	add	r7, sp, #0
 8001efe:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f00:	2300      	movs	r3, #0
 8001f02:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f04:	2300      	movs	r3, #0
 8001f06:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d031      	beq.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f18:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f1c:	d01a      	beq.n	8001f54 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f1e:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f22:	d814      	bhi.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d009      	beq.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001f28:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001f2c:	d10f      	bne.n	8001f4e <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001f2e:	4b5d      	ldr	r3, [pc, #372]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f30:	68db      	ldr	r3, [r3, #12]
 8001f32:	4a5c      	ldr	r2, [pc, #368]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f38:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f3a:	e00c      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	3304      	adds	r3, #4
 8001f40:	2100      	movs	r1, #0
 8001f42:	4618      	mov	r0, r3
 8001f44:	f000 f9de 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001f4c:	e003      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	74fb      	strb	r3, [r7, #19]
      break;
 8001f52:	e000      	b.n	8001f56 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001f54:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001f56:	7cfb      	ldrb	r3, [r7, #19]
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10b      	bne.n	8001f74 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001f5c:	4b51      	ldr	r3, [pc, #324]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f5e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f62:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f6a:	494e      	ldr	r1, [pc, #312]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6c:	4313      	orrs	r3, r2
 8001f6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001f72:	e001      	b.n	8001f78 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001f74:	7cfb      	ldrb	r3, [r7, #19]
 8001f76:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	f000 809e 	beq.w	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f86:	2300      	movs	r3, #0
 8001f88:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001f8a:	4b46      	ldr	r3, [pc, #280]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d101      	bne.n	8001f9a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001f96:	2301      	movs	r3, #1
 8001f98:	e000      	b.n	8001f9c <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d00d      	beq.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fa0:	4b40      	ldr	r3, [pc, #256]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fa4:	4a3f      	ldr	r2, [pc, #252]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001faa:	6593      	str	r3, [r2, #88]	; 0x58
 8001fac:	4b3d      	ldr	r3, [pc, #244]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fb0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fb4:	60bb      	str	r3, [r7, #8]
 8001fb6:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fb8:	2301      	movs	r3, #1
 8001fba:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001fbc:	4b3a      	ldr	r3, [pc, #232]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	4a39      	ldr	r2, [pc, #228]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fc2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fc6:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001fc8:	f7fe fe48 	bl	8000c5c <HAL_GetTick>
 8001fcc:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fce:	e009      	b.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fd0:	f7fe fe44 	bl	8000c5c <HAL_GetTick>
 8001fd4:	4602      	mov	r2, r0
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	1ad3      	subs	r3, r2, r3
 8001fda:	2b02      	cmp	r3, #2
 8001fdc:	d902      	bls.n	8001fe4 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001fde:	2303      	movs	r3, #3
 8001fe0:	74fb      	strb	r3, [r7, #19]
        break;
 8001fe2:	e005      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001fe4:	4b30      	ldr	r3, [pc, #192]	; (80020a8 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d0ef      	beq.n	8001fd0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001ff0:	7cfb      	ldrb	r3, [r7, #19]
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d15a      	bne.n	80020ac <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ff6:	4b2b      	ldr	r3, [pc, #172]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ff8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ffc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002000:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	2b00      	cmp	r3, #0
 8002006:	d01e      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800200c:	697a      	ldr	r2, [r7, #20]
 800200e:	429a      	cmp	r2, r3
 8002010:	d019      	beq.n	8002046 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002012:	4b24      	ldr	r3, [pc, #144]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002014:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002018:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800201c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800201e:	4b21      	ldr	r3, [pc, #132]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002020:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002024:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002026:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800202a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 800202e:	4b1d      	ldr	r3, [pc, #116]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002030:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002034:	4a1b      	ldr	r2, [pc, #108]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002036:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800203a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800203e:	4a19      	ldr	r2, [pc, #100]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002046:	697b      	ldr	r3, [r7, #20]
 8002048:	f003 0301 	and.w	r3, r3, #1
 800204c:	2b00      	cmp	r3, #0
 800204e:	d016      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002050:	f7fe fe04 	bl	8000c5c <HAL_GetTick>
 8002054:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002056:	e00b      	b.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002058:	f7fe fe00 	bl	8000c5c <HAL_GetTick>
 800205c:	4602      	mov	r2, r0
 800205e:	68fb      	ldr	r3, [r7, #12]
 8002060:	1ad3      	subs	r3, r2, r3
 8002062:	f241 3288 	movw	r2, #5000	; 0x1388
 8002066:	4293      	cmp	r3, r2
 8002068:	d902      	bls.n	8002070 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 800206a:	2303      	movs	r3, #3
 800206c:	74fb      	strb	r3, [r7, #19]
            break;
 800206e:	e006      	b.n	800207e <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002070:	4b0c      	ldr	r3, [pc, #48]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002072:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d0ec      	beq.n	8002058 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 800207e:	7cfb      	ldrb	r3, [r7, #19]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10b      	bne.n	800209c <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002084:	4b07      	ldr	r3, [pc, #28]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002086:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800208a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002092:	4904      	ldr	r1, [pc, #16]	; (80020a4 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002094:	4313      	orrs	r3, r2
 8002096:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 800209a:	e009      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800209c:	7cfb      	ldrb	r3, [r7, #19]
 800209e:	74bb      	strb	r3, [r7, #18]
 80020a0:	e006      	b.n	80020b0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 80020a2:	bf00      	nop
 80020a4:	40021000 	.word	0x40021000
 80020a8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80020ac:	7cfb      	ldrb	r3, [r7, #19]
 80020ae:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020b0:	7c7b      	ldrb	r3, [r7, #17]
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d105      	bne.n	80020c2 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020b6:	4b8a      	ldr	r3, [pc, #552]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020ba:	4a89      	ldr	r2, [pc, #548]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020bc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020c0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00a      	beq.n	80020e4 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020ce:	4b84      	ldr	r3, [pc, #528]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020d4:	f023 0203 	bic.w	r2, r3, #3
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6a1b      	ldr	r3, [r3, #32]
 80020dc:	4980      	ldr	r1, [pc, #512]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020de:	4313      	orrs	r3, r2
 80020e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f003 0302 	and.w	r3, r3, #2
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d00a      	beq.n	8002106 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80020f0:	4b7b      	ldr	r3, [pc, #492]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020f6:	f023 020c 	bic.w	r2, r3, #12
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fe:	4978      	ldr	r1, [pc, #480]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002100:	4313      	orrs	r3, r2
 8002102:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f003 0320 	and.w	r3, r3, #32
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00a      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8002112:	4b73      	ldr	r3, [pc, #460]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002118:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002120:	496f      	ldr	r1, [pc, #444]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002122:	4313      	orrs	r3, r2
 8002124:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002130:	2b00      	cmp	r3, #0
 8002132:	d00a      	beq.n	800214a <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002134:	4b6a      	ldr	r3, [pc, #424]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800213a:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002142:	4967      	ldr	r1, [pc, #412]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002144:	4313      	orrs	r3, r2
 8002146:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002156:	4b62      	ldr	r3, [pc, #392]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800215c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002164:	495e      	ldr	r1, [pc, #376]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002166:	4313      	orrs	r3, r2
 8002168:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002174:	2b00      	cmp	r3, #0
 8002176:	d00a      	beq.n	800218e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002178:	4b59      	ldr	r3, [pc, #356]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800217a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800217e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	4956      	ldr	r1, [pc, #344]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002188:	4313      	orrs	r3, r2
 800218a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002196:	2b00      	cmp	r3, #0
 8002198:	d00a      	beq.n	80021b0 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800219a:	4b51      	ldr	r3, [pc, #324]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800219c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021a0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	494d      	ldr	r1, [pc, #308]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021aa:	4313      	orrs	r3, r2
 80021ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d028      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80021bc:	4b48      	ldr	r3, [pc, #288]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021c2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	4945      	ldr	r1, [pc, #276]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021cc:	4313      	orrs	r3, r2
 80021ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021d6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80021da:	d106      	bne.n	80021ea <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80021dc:	4b40      	ldr	r3, [pc, #256]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021de:	68db      	ldr	r3, [r3, #12]
 80021e0:	4a3f      	ldr	r2, [pc, #252]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021e2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80021e6:	60d3      	str	r3, [r2, #12]
 80021e8:	e011      	b.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ee:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80021f2:	d10c      	bne.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	3304      	adds	r3, #4
 80021f8:	2101      	movs	r1, #1
 80021fa:	4618      	mov	r0, r3
 80021fc:	f000 f882 	bl	8002304 <RCCEx_PLLSAI1_Config>
 8002200:	4603      	mov	r3, r0
 8002202:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002204:	7cfb      	ldrb	r3, [r7, #19]
 8002206:	2b00      	cmp	r3, #0
 8002208:	d001      	beq.n	800220e <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 800220a:	7cfb      	ldrb	r3, [r7, #19]
 800220c:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	681b      	ldr	r3, [r3, #0]
 8002212:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002216:	2b00      	cmp	r3, #0
 8002218:	d028      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800221a:	4b31      	ldr	r3, [pc, #196]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002220:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002228:	492d      	ldr	r1, [pc, #180]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800222a:	4313      	orrs	r3, r2
 800222c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002234:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002238:	d106      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800223a:	4b29      	ldr	r3, [pc, #164]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800223c:	68db      	ldr	r3, [r3, #12]
 800223e:	4a28      	ldr	r2, [pc, #160]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002240:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002244:	60d3      	str	r3, [r2, #12]
 8002246:	e011      	b.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800224c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002250:	d10c      	bne.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	3304      	adds	r3, #4
 8002256:	2101      	movs	r1, #1
 8002258:	4618      	mov	r0, r3
 800225a:	f000 f853 	bl	8002304 <RCCEx_PLLSAI1_Config>
 800225e:	4603      	mov	r3, r0
 8002260:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002262:	7cfb      	ldrb	r3, [r7, #19]
 8002264:	2b00      	cmp	r3, #0
 8002266:	d001      	beq.n	800226c <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002268:	7cfb      	ldrb	r3, [r7, #19]
 800226a:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d01c      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002278:	4b19      	ldr	r3, [pc, #100]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800227a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800227e:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002286:	4916      	ldr	r1, [pc, #88]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002288:	4313      	orrs	r3, r2
 800228a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002292:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002296:	d10c      	bne.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	3304      	adds	r3, #4
 800229c:	2102      	movs	r1, #2
 800229e:	4618      	mov	r0, r3
 80022a0:	f000 f830 	bl	8002304 <RCCEx_PLLSAI1_Config>
 80022a4:	4603      	mov	r3, r0
 80022a6:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022a8:	7cfb      	ldrb	r3, [r7, #19]
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d001      	beq.n	80022b2 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80022ae:	7cfb      	ldrb	r3, [r7, #19]
 80022b0:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00a      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80022be:	4b08      	ldr	r3, [pc, #32]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022c4:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022cc:	4904      	ldr	r1, [pc, #16]	; (80022e0 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022ce:	4313      	orrs	r3, r2
 80022d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80022d4:	7cbb      	ldrb	r3, [r7, #18]
}
 80022d6:	4618      	mov	r0, r3
 80022d8:	3718      	adds	r7, #24
 80022da:	46bd      	mov	sp, r7
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	40021000 	.word	0x40021000

080022e4 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a04      	ldr	r2, [pc, #16]	; (8002300 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80022ee:	f043 0304 	orr.w	r3, r3, #4
 80022f2:	6013      	str	r3, [r2, #0]
}
 80022f4:	bf00      	nop
 80022f6:	46bd      	mov	sp, r7
 80022f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022fc:	4770      	bx	lr
 80022fe:	bf00      	nop
 8002300:	40021000 	.word	0x40021000

08002304 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	b084      	sub	sp, #16
 8002308:	af00      	add	r7, sp, #0
 800230a:	6078      	str	r0, [r7, #4]
 800230c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800230e:	2300      	movs	r3, #0
 8002310:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002312:	4b74      	ldr	r3, [pc, #464]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002314:	68db      	ldr	r3, [r3, #12]
 8002316:	f003 0303 	and.w	r3, r3, #3
 800231a:	2b00      	cmp	r3, #0
 800231c:	d018      	beq.n	8002350 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800231e:	4b71      	ldr	r3, [pc, #452]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002320:	68db      	ldr	r3, [r3, #12]
 8002322:	f003 0203 	and.w	r2, r3, #3
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d10d      	bne.n	800234a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
       ||
 8002332:	2b00      	cmp	r3, #0
 8002334:	d009      	beq.n	800234a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002336:	4b6b      	ldr	r3, [pc, #428]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002338:	68db      	ldr	r3, [r3, #12]
 800233a:	091b      	lsrs	r3, r3, #4
 800233c:	f003 0307 	and.w	r3, r3, #7
 8002340:	1c5a      	adds	r2, r3, #1
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	685b      	ldr	r3, [r3, #4]
       ||
 8002346:	429a      	cmp	r2, r3
 8002348:	d047      	beq.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800234a:	2301      	movs	r3, #1
 800234c:	73fb      	strb	r3, [r7, #15]
 800234e:	e044      	b.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	2b03      	cmp	r3, #3
 8002356:	d018      	beq.n	800238a <RCCEx_PLLSAI1_Config+0x86>
 8002358:	2b03      	cmp	r3, #3
 800235a:	d825      	bhi.n	80023a8 <RCCEx_PLLSAI1_Config+0xa4>
 800235c:	2b01      	cmp	r3, #1
 800235e:	d002      	beq.n	8002366 <RCCEx_PLLSAI1_Config+0x62>
 8002360:	2b02      	cmp	r3, #2
 8002362:	d009      	beq.n	8002378 <RCCEx_PLLSAI1_Config+0x74>
 8002364:	e020      	b.n	80023a8 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002366:	4b5f      	ldr	r3, [pc, #380]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0302 	and.w	r3, r3, #2
 800236e:	2b00      	cmp	r3, #0
 8002370:	d11d      	bne.n	80023ae <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002376:	e01a      	b.n	80023ae <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002378:	4b5a      	ldr	r3, [pc, #360]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002380:	2b00      	cmp	r3, #0
 8002382:	d116      	bne.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002384:	2301      	movs	r3, #1
 8002386:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002388:	e013      	b.n	80023b2 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800238a:	4b56      	ldr	r3, [pc, #344]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002392:	2b00      	cmp	r3, #0
 8002394:	d10f      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002396:	4b53      	ldr	r3, [pc, #332]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800239e:	2b00      	cmp	r3, #0
 80023a0:	d109      	bne.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80023a6:	e006      	b.n	80023b6 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80023a8:	2301      	movs	r3, #1
 80023aa:	73fb      	strb	r3, [r7, #15]
      break;
 80023ac:	e004      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023ae:	bf00      	nop
 80023b0:	e002      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b2:	bf00      	nop
 80023b4:	e000      	b.n	80023b8 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80023b6:	bf00      	nop
    }

    if(status == HAL_OK)
 80023b8:	7bfb      	ldrb	r3, [r7, #15]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	d10d      	bne.n	80023da <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80023be:	4b49      	ldr	r3, [pc, #292]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c0:	68db      	ldr	r3, [r3, #12]
 80023c2:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	6819      	ldr	r1, [r3, #0]
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	685b      	ldr	r3, [r3, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	011b      	lsls	r3, r3, #4
 80023d2:	430b      	orrs	r3, r1
 80023d4:	4943      	ldr	r1, [pc, #268]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023d6:	4313      	orrs	r3, r2
 80023d8:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80023da:	7bfb      	ldrb	r3, [r7, #15]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d17c      	bne.n	80024da <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80023e0:	4b40      	ldr	r3, [pc, #256]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a3f      	ldr	r2, [pc, #252]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80023ea:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023ec:	f7fe fc36 	bl	8000c5c <HAL_GetTick>
 80023f0:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80023f2:	e009      	b.n	8002408 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023f4:	f7fe fc32 	bl	8000c5c <HAL_GetTick>
 80023f8:	4602      	mov	r2, r0
 80023fa:	68bb      	ldr	r3, [r7, #8]
 80023fc:	1ad3      	subs	r3, r2, r3
 80023fe:	2b02      	cmp	r3, #2
 8002400:	d902      	bls.n	8002408 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002402:	2303      	movs	r3, #3
 8002404:	73fb      	strb	r3, [r7, #15]
        break;
 8002406:	e005      	b.n	8002414 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002408:	4b36      	ldr	r3, [pc, #216]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002410:	2b00      	cmp	r3, #0
 8002412:	d1ef      	bne.n	80023f4 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002414:	7bfb      	ldrb	r3, [r7, #15]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d15f      	bne.n	80024da <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800241a:	683b      	ldr	r3, [r7, #0]
 800241c:	2b00      	cmp	r3, #0
 800241e:	d110      	bne.n	8002442 <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002420:	4b30      	ldr	r3, [pc, #192]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002422:	691b      	ldr	r3, [r3, #16]
 8002424:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002428:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800242c:	687a      	ldr	r2, [r7, #4]
 800242e:	6892      	ldr	r2, [r2, #8]
 8002430:	0211      	lsls	r1, r2, #8
 8002432:	687a      	ldr	r2, [r7, #4]
 8002434:	68d2      	ldr	r2, [r2, #12]
 8002436:	06d2      	lsls	r2, r2, #27
 8002438:	430a      	orrs	r2, r1
 800243a:	492a      	ldr	r1, [pc, #168]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800243c:	4313      	orrs	r3, r2
 800243e:	610b      	str	r3, [r1, #16]
 8002440:	e027      	b.n	8002492 <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d112      	bne.n	800246e <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002448:	4b26      	ldr	r3, [pc, #152]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800244a:	691b      	ldr	r3, [r3, #16]
 800244c:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002450:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002454:	687a      	ldr	r2, [r7, #4]
 8002456:	6892      	ldr	r2, [r2, #8]
 8002458:	0211      	lsls	r1, r2, #8
 800245a:	687a      	ldr	r2, [r7, #4]
 800245c:	6912      	ldr	r2, [r2, #16]
 800245e:	0852      	lsrs	r2, r2, #1
 8002460:	3a01      	subs	r2, #1
 8002462:	0552      	lsls	r2, r2, #21
 8002464:	430a      	orrs	r2, r1
 8002466:	491f      	ldr	r1, [pc, #124]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002468:	4313      	orrs	r3, r2
 800246a:	610b      	str	r3, [r1, #16]
 800246c:	e011      	b.n	8002492 <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800246e:	4b1d      	ldr	r3, [pc, #116]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002470:	691b      	ldr	r3, [r3, #16]
 8002472:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002476:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800247a:	687a      	ldr	r2, [r7, #4]
 800247c:	6892      	ldr	r2, [r2, #8]
 800247e:	0211      	lsls	r1, r2, #8
 8002480:	687a      	ldr	r2, [r7, #4]
 8002482:	6952      	ldr	r2, [r2, #20]
 8002484:	0852      	lsrs	r2, r2, #1
 8002486:	3a01      	subs	r2, #1
 8002488:	0652      	lsls	r2, r2, #25
 800248a:	430a      	orrs	r2, r1
 800248c:	4915      	ldr	r1, [pc, #84]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 800248e:	4313      	orrs	r3, r2
 8002490:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002492:	4b14      	ldr	r3, [pc, #80]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	4a13      	ldr	r2, [pc, #76]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002498:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800249c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800249e:	f7fe fbdd 	bl	8000c5c <HAL_GetTick>
 80024a2:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024a4:	e009      	b.n	80024ba <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80024a6:	f7fe fbd9 	bl	8000c5c <HAL_GetTick>
 80024aa:	4602      	mov	r2, r0
 80024ac:	68bb      	ldr	r3, [r7, #8]
 80024ae:	1ad3      	subs	r3, r2, r3
 80024b0:	2b02      	cmp	r3, #2
 80024b2:	d902      	bls.n	80024ba <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80024b4:	2303      	movs	r3, #3
 80024b6:	73fb      	strb	r3, [r7, #15]
          break;
 80024b8:	e005      	b.n	80024c6 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80024ba:	4b0a      	ldr	r3, [pc, #40]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d0ef      	beq.n	80024a6 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80024c6:	7bfb      	ldrb	r3, [r7, #15]
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d106      	bne.n	80024da <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80024cc:	4b05      	ldr	r3, [pc, #20]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024ce:	691a      	ldr	r2, [r3, #16]
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	699b      	ldr	r3, [r3, #24]
 80024d4:	4903      	ldr	r1, [pc, #12]	; (80024e4 <RCCEx_PLLSAI1_Config+0x1e0>)
 80024d6:	4313      	orrs	r3, r2
 80024d8:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80024da:	7bfb      	ldrb	r3, [r7, #15]
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3710      	adds	r7, #16
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	40021000 	.word	0x40021000

080024e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80024e8:	b580      	push	{r7, lr}
 80024ea:	b082      	sub	sp, #8
 80024ec:	af00      	add	r7, sp, #0
 80024ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d101      	bne.n	80024fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80024f6:	2301      	movs	r3, #1
 80024f8:	e049      	b.n	800258e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002500:	b2db      	uxtb	r3, r3
 8002502:	2b00      	cmp	r3, #0
 8002504:	d106      	bne.n	8002514 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800250e:	6878      	ldr	r0, [r7, #4]
 8002510:	f000 f841 	bl	8002596 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2202      	movs	r2, #2
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681a      	ldr	r2, [r3, #0]
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	3304      	adds	r3, #4
 8002524:	4619      	mov	r1, r3
 8002526:	4610      	mov	r0, r2
 8002528:	f000 f9dc 	bl	80028e4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2201      	movs	r2, #1
 8002530:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	2201      	movs	r2, #1
 8002538:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	2201      	movs	r2, #1
 8002540:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	2201      	movs	r2, #1
 8002548:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	2201      	movs	r2, #1
 8002550:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	2201      	movs	r2, #1
 8002558:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	2201      	movs	r2, #1
 8002560:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	2201      	movs	r2, #1
 8002568:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2201      	movs	r2, #1
 8002570:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	2201      	movs	r2, #1
 8002578:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800257c:	687b      	ldr	r3, [r7, #4]
 800257e:	2201      	movs	r2, #1
 8002580:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2201      	movs	r2, #1
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800258c:	2300      	movs	r3, #0
}
 800258e:	4618      	mov	r0, r3
 8002590:	3708      	adds	r7, #8
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}

08002596 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002596:	b480      	push	{r7}
 8002598:	b083      	sub	sp, #12
 800259a:	af00      	add	r7, sp, #0
 800259c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800259e:	bf00      	nop
 80025a0:	370c      	adds	r7, #12
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
	...

080025ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80025ac:	b480      	push	{r7}
 80025ae:	b085      	sub	sp, #20
 80025b0:	af00      	add	r7, sp, #0
 80025b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80025ba:	b2db      	uxtb	r3, r3
 80025bc:	2b01      	cmp	r3, #1
 80025be:	d001      	beq.n	80025c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80025c0:	2301      	movs	r3, #1
 80025c2:	e03b      	b.n	800263c <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2202      	movs	r2, #2
 80025c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	f042 0201 	orr.w	r2, r2, #1
 80025da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4a19      	ldr	r2, [pc, #100]	; (8002648 <HAL_TIM_Base_Start_IT+0x9c>)
 80025e2:	4293      	cmp	r3, r2
 80025e4:	d009      	beq.n	80025fa <HAL_TIM_Base_Start_IT+0x4e>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025ee:	d004      	beq.n	80025fa <HAL_TIM_Base_Start_IT+0x4e>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a15      	ldr	r2, [pc, #84]	; (800264c <HAL_TIM_Base_Start_IT+0xa0>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d115      	bne.n	8002626 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	689a      	ldr	r2, [r3, #8]
 8002600:	4b13      	ldr	r3, [pc, #76]	; (8002650 <HAL_TIM_Base_Start_IT+0xa4>)
 8002602:	4013      	ands	r3, r2
 8002604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002606:	68fb      	ldr	r3, [r7, #12]
 8002608:	2b06      	cmp	r3, #6
 800260a:	d015      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x8c>
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002612:	d011      	beq.n	8002638 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681a      	ldr	r2, [r3, #0]
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f042 0201 	orr.w	r2, r2, #1
 8002622:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002624:	e008      	b.n	8002638 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f042 0201 	orr.w	r2, r2, #1
 8002634:	601a      	str	r2, [r3, #0]
 8002636:	e000      	b.n	800263a <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002638:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800263a:	2300      	movs	r3, #0
}
 800263c:	4618      	mov	r0, r3
 800263e:	3714      	adds	r7, #20
 8002640:	46bd      	mov	sp, r7
 8002642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002646:	4770      	bx	lr
 8002648:	40012c00 	.word	0x40012c00
 800264c:	40014000 	.word	0x40014000
 8002650:	00010007 	.word	0x00010007

08002654 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	691b      	ldr	r3, [r3, #16]
 8002662:	f003 0302 	and.w	r3, r3, #2
 8002666:	2b02      	cmp	r3, #2
 8002668:	d122      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	68db      	ldr	r3, [r3, #12]
 8002670:	f003 0302 	and.w	r3, r3, #2
 8002674:	2b02      	cmp	r3, #2
 8002676:	d11b      	bne.n	80026b0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f06f 0202 	mvn.w	r2, #2
 8002680:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	699b      	ldr	r3, [r3, #24]
 800268e:	f003 0303 	and.w	r3, r3, #3
 8002692:	2b00      	cmp	r3, #0
 8002694:	d003      	beq.n	800269e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 f905 	bl	80028a6 <HAL_TIM_IC_CaptureCallback>
 800269c:	e005      	b.n	80026aa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800269e:	6878      	ldr	r0, [r7, #4]
 80026a0:	f000 f8f7 	bl	8002892 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026a4:	6878      	ldr	r0, [r7, #4]
 80026a6:	f000 f908 	bl	80028ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2200      	movs	r2, #0
 80026ae:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	691b      	ldr	r3, [r3, #16]
 80026b6:	f003 0304 	and.w	r3, r3, #4
 80026ba:	2b04      	cmp	r3, #4
 80026bc:	d122      	bne.n	8002704 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	68db      	ldr	r3, [r3, #12]
 80026c4:	f003 0304 	and.w	r3, r3, #4
 80026c8:	2b04      	cmp	r3, #4
 80026ca:	d11b      	bne.n	8002704 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f06f 0204 	mvn.w	r2, #4
 80026d4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	2202      	movs	r2, #2
 80026da:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	699b      	ldr	r3, [r3, #24]
 80026e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d003      	beq.n	80026f2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026ea:	6878      	ldr	r0, [r7, #4]
 80026ec:	f000 f8db 	bl	80028a6 <HAL_TIM_IC_CaptureCallback>
 80026f0:	e005      	b.n	80026fe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026f2:	6878      	ldr	r0, [r7, #4]
 80026f4:	f000 f8cd 	bl	8002892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026f8:	6878      	ldr	r0, [r7, #4]
 80026fa:	f000 f8de 	bl	80028ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	2200      	movs	r2, #0
 8002702:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0308 	and.w	r3, r3, #8
 800270e:	2b08      	cmp	r3, #8
 8002710:	d122      	bne.n	8002758 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0308 	and.w	r3, r3, #8
 800271c:	2b08      	cmp	r3, #8
 800271e:	d11b      	bne.n	8002758 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0208 	mvn.w	r2, #8
 8002728:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2204      	movs	r2, #4
 800272e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	69db      	ldr	r3, [r3, #28]
 8002736:	f003 0303 	and.w	r3, r3, #3
 800273a:	2b00      	cmp	r3, #0
 800273c:	d003      	beq.n	8002746 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800273e:	6878      	ldr	r0, [r7, #4]
 8002740:	f000 f8b1 	bl	80028a6 <HAL_TIM_IC_CaptureCallback>
 8002744:	e005      	b.n	8002752 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002746:	6878      	ldr	r0, [r7, #4]
 8002748:	f000 f8a3 	bl	8002892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800274c:	6878      	ldr	r0, [r7, #4]
 800274e:	f000 f8b4 	bl	80028ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2200      	movs	r2, #0
 8002756:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	691b      	ldr	r3, [r3, #16]
 800275e:	f003 0310 	and.w	r3, r3, #16
 8002762:	2b10      	cmp	r3, #16
 8002764:	d122      	bne.n	80027ac <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	f003 0310 	and.w	r3, r3, #16
 8002770:	2b10      	cmp	r3, #16
 8002772:	d11b      	bne.n	80027ac <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f06f 0210 	mvn.w	r2, #16
 800277c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2208      	movs	r2, #8
 8002782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	69db      	ldr	r3, [r3, #28]
 800278a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800278e:	2b00      	cmp	r3, #0
 8002790:	d003      	beq.n	800279a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002792:	6878      	ldr	r0, [r7, #4]
 8002794:	f000 f887 	bl	80028a6 <HAL_TIM_IC_CaptureCallback>
 8002798:	e005      	b.n	80027a6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f000 f879 	bl	8002892 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027a0:	6878      	ldr	r0, [r7, #4]
 80027a2:	f000 f88a 	bl	80028ba <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2200      	movs	r2, #0
 80027aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	691b      	ldr	r3, [r3, #16]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d10e      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	68db      	ldr	r3, [r3, #12]
 80027c0:	f003 0301 	and.w	r3, r3, #1
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d107      	bne.n	80027d8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f06f 0201 	mvn.w	r2, #1
 80027d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80027d2:	6878      	ldr	r0, [r7, #4]
 80027d4:	f7fe f866 	bl	80008a4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	691b      	ldr	r3, [r3, #16]
 80027de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027e2:	2b80      	cmp	r3, #128	; 0x80
 80027e4:	d10e      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68db      	ldr	r3, [r3, #12]
 80027ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027f0:	2b80      	cmp	r3, #128	; 0x80
 80027f2:	d107      	bne.n	8002804 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80027fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f8de 	bl	80029c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	691b      	ldr	r3, [r3, #16]
 800280a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800280e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002812:	d10e      	bne.n	8002832 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	68db      	ldr	r3, [r3, #12]
 800281a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800281e:	2b80      	cmp	r3, #128	; 0x80
 8002820:	d107      	bne.n	8002832 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800282a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f000 f8d1 	bl	80029d4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	691b      	ldr	r3, [r3, #16]
 8002838:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800283c:	2b40      	cmp	r3, #64	; 0x40
 800283e:	d10e      	bne.n	800285e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	68db      	ldr	r3, [r3, #12]
 8002846:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800284a:	2b40      	cmp	r3, #64	; 0x40
 800284c:	d107      	bne.n	800285e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002856:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002858:	6878      	ldr	r0, [r7, #4]
 800285a:	f000 f838 	bl	80028ce <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	f003 0320 	and.w	r3, r3, #32
 8002868:	2b20      	cmp	r3, #32
 800286a:	d10e      	bne.n	800288a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0320 	and.w	r3, r3, #32
 8002876:	2b20      	cmp	r3, #32
 8002878:	d107      	bne.n	800288a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f06f 0220 	mvn.w	r2, #32
 8002882:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002884:	6878      	ldr	r0, [r7, #4]
 8002886:	f000 f891 	bl	80029ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800288a:	bf00      	nop
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}

08002892 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002892:	b480      	push	{r7}
 8002894:	b083      	sub	sp, #12
 8002896:	af00      	add	r7, sp, #0
 8002898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800289a:	bf00      	nop
 800289c:	370c      	adds	r7, #12
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr

080028a6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80028a6:	b480      	push	{r7}
 80028a8:	b083      	sub	sp, #12
 80028aa:	af00      	add	r7, sp, #0
 80028ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80028ae:	bf00      	nop
 80028b0:	370c      	adds	r7, #12
 80028b2:	46bd      	mov	sp, r7
 80028b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b8:	4770      	bx	lr

080028ba <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80028ba:	b480      	push	{r7}
 80028bc:	b083      	sub	sp, #12
 80028be:	af00      	add	r7, sp, #0
 80028c0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80028c2:	bf00      	nop
 80028c4:	370c      	adds	r7, #12
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr

080028ce <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80028ce:	b480      	push	{r7}
 80028d0:	b083      	sub	sp, #12
 80028d2:	af00      	add	r7, sp, #0
 80028d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80028d6:	bf00      	nop
 80028d8:	370c      	adds	r7, #12
 80028da:	46bd      	mov	sp, r7
 80028dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e0:	4770      	bx	lr
	...

080028e4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b085      	sub	sp, #20
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
 80028ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	4a2a      	ldr	r2, [pc, #168]	; (80029a0 <TIM_Base_SetConfig+0xbc>)
 80028f8:	4293      	cmp	r3, r2
 80028fa:	d003      	beq.n	8002904 <TIM_Base_SetConfig+0x20>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002902:	d108      	bne.n	8002916 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002904:	68fb      	ldr	r3, [r7, #12]
 8002906:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800290a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	685b      	ldr	r3, [r3, #4]
 8002910:	68fa      	ldr	r2, [r7, #12]
 8002912:	4313      	orrs	r3, r2
 8002914:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a21      	ldr	r2, [pc, #132]	; (80029a0 <TIM_Base_SetConfig+0xbc>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d00b      	beq.n	8002936 <TIM_Base_SetConfig+0x52>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002924:	d007      	beq.n	8002936 <TIM_Base_SetConfig+0x52>
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	4a1e      	ldr	r2, [pc, #120]	; (80029a4 <TIM_Base_SetConfig+0xc0>)
 800292a:	4293      	cmp	r3, r2
 800292c:	d003      	beq.n	8002936 <TIM_Base_SetConfig+0x52>
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	4a1d      	ldr	r2, [pc, #116]	; (80029a8 <TIM_Base_SetConfig+0xc4>)
 8002932:	4293      	cmp	r3, r2
 8002934:	d108      	bne.n	8002948 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800293c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	68db      	ldr	r3, [r3, #12]
 8002942:	68fa      	ldr	r2, [r7, #12]
 8002944:	4313      	orrs	r3, r2
 8002946:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	695b      	ldr	r3, [r3, #20]
 8002952:	4313      	orrs	r3, r2
 8002954:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	68fa      	ldr	r2, [r7, #12]
 800295a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	689a      	ldr	r2, [r3, #8]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	681a      	ldr	r2, [r3, #0]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a0c      	ldr	r2, [pc, #48]	; (80029a0 <TIM_Base_SetConfig+0xbc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d007      	beq.n	8002984 <TIM_Base_SetConfig+0xa0>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	4a0b      	ldr	r2, [pc, #44]	; (80029a4 <TIM_Base_SetConfig+0xc0>)
 8002978:	4293      	cmp	r3, r2
 800297a:	d003      	beq.n	8002984 <TIM_Base_SetConfig+0xa0>
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	4a0a      	ldr	r2, [pc, #40]	; (80029a8 <TIM_Base_SetConfig+0xc4>)
 8002980:	4293      	cmp	r3, r2
 8002982:	d103      	bne.n	800298c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	691a      	ldr	r2, [r3, #16]
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	615a      	str	r2, [r3, #20]
}
 8002992:	bf00      	nop
 8002994:	3714      	adds	r7, #20
 8002996:	46bd      	mov	sp, r7
 8002998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	40012c00 	.word	0x40012c00
 80029a4:	40014000 	.word	0x40014000
 80029a8:	40014400 	.word	0x40014400

080029ac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b083      	sub	sp, #12
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80029b4:	bf00      	nop
 80029b6:	370c      	adds	r7, #12
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr

080029c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80029c8:	bf00      	nop
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b083      	sub	sp, #12
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80029dc:	bf00      	nop
 80029de:	370c      	adds	r7, #12
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr

080029e8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b082      	sub	sp, #8
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d101      	bne.n	80029fa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e040      	b.n	8002a7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d106      	bne.n	8002a10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2200      	movs	r2, #0
 8002a06:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7fe f866 	bl	8000adc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2224      	movs	r2, #36	; 0x24
 8002a14:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	681a      	ldr	r2, [r3, #0]
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 0201 	bic.w	r2, r2, #1
 8002a24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 f992 	bl	8002d50 <UART_SetConfig>
 8002a2c:	4603      	mov	r3, r0
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d101      	bne.n	8002a36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e022      	b.n	8002a7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d002      	beq.n	8002a44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002a3e:	6878      	ldr	r0, [r7, #4]
 8002a40:	f000 fbb2 	bl	80031a8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	685a      	ldr	r2, [r3, #4]
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002a52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002a62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	681a      	ldr	r2, [r3, #0]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f042 0201 	orr.w	r2, r2, #1
 8002a72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002a74:	6878      	ldr	r0, [r7, #4]
 8002a76:	f000 fc39 	bl	80032ec <UART_CheckIdleState>
 8002a7a:	4603      	mov	r3, r0
}
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	3708      	adds	r7, #8
 8002a80:	46bd      	mov	sp, r7
 8002a82:	bd80      	pop	{r7, pc}

08002a84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b08a      	sub	sp, #40	; 0x28
 8002a88:	af02      	add	r7, sp, #8
 8002a8a:	60f8      	str	r0, [r7, #12]
 8002a8c:	60b9      	str	r1, [r7, #8]
 8002a8e:	603b      	str	r3, [r7, #0]
 8002a90:	4613      	mov	r3, r2
 8002a92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a98:	2b20      	cmp	r3, #32
 8002a9a:	f040 8082 	bne.w	8002ba2 <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d002      	beq.n	8002aaa <HAL_UART_Transmit+0x26>
 8002aa4:	88fb      	ldrh	r3, [r7, #6]
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e07a      	b.n	8002ba4 <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d101      	bne.n	8002abc <HAL_UART_Transmit+0x38>
 8002ab8:	2302      	movs	r3, #2
 8002aba:	e073      	b.n	8002ba4 <HAL_UART_Transmit+0x120>
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2201      	movs	r2, #1
 8002ac0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	2221      	movs	r2, #33	; 0x21
 8002ad0:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002ad2:	f7fe f8c3 	bl	8000c5c <HAL_GetTick>
 8002ad6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	88fa      	ldrh	r2, [r7, #6]
 8002adc:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	88fa      	ldrh	r2, [r7, #6]
 8002ae4:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002af0:	d108      	bne.n	8002b04 <HAL_UART_Transmit+0x80>
 8002af2:	68fb      	ldr	r3, [r7, #12]
 8002af4:	691b      	ldr	r3, [r3, #16]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d104      	bne.n	8002b04 <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002afa:	2300      	movs	r3, #0
 8002afc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002afe:	68bb      	ldr	r3, [r7, #8]
 8002b00:	61bb      	str	r3, [r7, #24]
 8002b02:	e003      	b.n	8002b0c <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b04:	68bb      	ldr	r3, [r7, #8]
 8002b06:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b08:	2300      	movs	r3, #0
 8002b0a:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	2200      	movs	r2, #0
 8002b10:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b14:	e02d      	b.n	8002b72 <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	9300      	str	r3, [sp, #0]
 8002b1a:	697b      	ldr	r3, [r7, #20]
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2180      	movs	r1, #128	; 0x80
 8002b20:	68f8      	ldr	r0, [r7, #12]
 8002b22:	f000 fc2c 	bl	800337e <UART_WaitOnFlagUntilTimeout>
 8002b26:	4603      	mov	r3, r0
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d001      	beq.n	8002b30 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002b2c:	2303      	movs	r3, #3
 8002b2e:	e039      	b.n	8002ba4 <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002b30:	69fb      	ldr	r3, [r7, #28]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d10b      	bne.n	8002b4e <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002b36:	69bb      	ldr	r3, [r7, #24]
 8002b38:	881a      	ldrh	r2, [r3, #0]
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002b42:	b292      	uxth	r2, r2
 8002b44:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002b46:	69bb      	ldr	r3, [r7, #24]
 8002b48:	3302      	adds	r3, #2
 8002b4a:	61bb      	str	r3, [r7, #24]
 8002b4c:	e008      	b.n	8002b60 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002b4e:	69fb      	ldr	r3, [r7, #28]
 8002b50:	781a      	ldrb	r2, [r3, #0]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	b292      	uxth	r2, r2
 8002b58:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	3301      	adds	r3, #1
 8002b5e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b66:	b29b      	uxth	r3, r3
 8002b68:	3b01      	subs	r3, #1
 8002b6a:	b29a      	uxth	r2, r3
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002b72:	68fb      	ldr	r3, [r7, #12]
 8002b74:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002b78:	b29b      	uxth	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1cb      	bne.n	8002b16 <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002b7e:	683b      	ldr	r3, [r7, #0]
 8002b80:	9300      	str	r3, [sp, #0]
 8002b82:	697b      	ldr	r3, [r7, #20]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2140      	movs	r1, #64	; 0x40
 8002b88:	68f8      	ldr	r0, [r7, #12]
 8002b8a:	f000 fbf8 	bl	800337e <UART_WaitOnFlagUntilTimeout>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d001      	beq.n	8002b98 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002b94:	2303      	movs	r3, #3
 8002b96:	e005      	b.n	8002ba4 <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	2220      	movs	r2, #32
 8002b9c:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	e000      	b.n	8002ba4 <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002ba2:	2302      	movs	r3, #2
  }
}
 8002ba4:	4618      	mov	r0, r3
 8002ba6:	3720      	adds	r7, #32
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}

08002bac <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	b08a      	sub	sp, #40	; 0x28
 8002bb0:	af02      	add	r7, sp, #8
 8002bb2:	60f8      	str	r0, [r7, #12]
 8002bb4:	60b9      	str	r1, [r7, #8]
 8002bb6:	603b      	str	r3, [r7, #0]
 8002bb8:	4613      	mov	r3, r2
 8002bba:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002bc0:	2b20      	cmp	r3, #32
 8002bc2:	f040 80bf 	bne.w	8002d44 <HAL_UART_Receive+0x198>
  {
    if ((pData == NULL) || (Size == 0U))
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d002      	beq.n	8002bd2 <HAL_UART_Receive+0x26>
 8002bcc:	88fb      	ldrh	r3, [r7, #6]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d101      	bne.n	8002bd6 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8002bd2:	2301      	movs	r3, #1
 8002bd4:	e0b7      	b.n	8002d46 <HAL_UART_Receive+0x19a>
    }

    __HAL_LOCK(huart);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002bdc:	2b01      	cmp	r3, #1
 8002bde:	d101      	bne.n	8002be4 <HAL_UART_Receive+0x38>
 8002be0:	2302      	movs	r3, #2
 8002be2:	e0b0      	b.n	8002d46 <HAL_UART_Receive+0x19a>
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	2201      	movs	r2, #1
 8002be8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	2222      	movs	r2, #34	; 0x22
 8002bf8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002c00:	f7fe f82c 	bl	8000c5c <HAL_GetTick>
 8002c04:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8002c06:	68fb      	ldr	r3, [r7, #12]
 8002c08:	88fa      	ldrh	r2, [r7, #6]
 8002c0a:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	88fa      	ldrh	r2, [r7, #6]
 8002c12:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	689b      	ldr	r3, [r3, #8]
 8002c1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002c1e:	d10e      	bne.n	8002c3e <HAL_UART_Receive+0x92>
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	691b      	ldr	r3, [r3, #16]
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d105      	bne.n	8002c34 <HAL_UART_Receive+0x88>
 8002c28:	68fb      	ldr	r3, [r7, #12]
 8002c2a:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002c2e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c32:	e02d      	b.n	8002c90 <HAL_UART_Receive+0xe4>
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	22ff      	movs	r2, #255	; 0xff
 8002c38:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c3c:	e028      	b.n	8002c90 <HAL_UART_Receive+0xe4>
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	689b      	ldr	r3, [r3, #8]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d10d      	bne.n	8002c62 <HAL_UART_Receive+0xb6>
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	691b      	ldr	r3, [r3, #16]
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d104      	bne.n	8002c58 <HAL_UART_Receive+0xac>
 8002c4e:	68fb      	ldr	r3, [r7, #12]
 8002c50:	22ff      	movs	r2, #255	; 0xff
 8002c52:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c56:	e01b      	b.n	8002c90 <HAL_UART_Receive+0xe4>
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	227f      	movs	r2, #127	; 0x7f
 8002c5c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c60:	e016      	b.n	8002c90 <HAL_UART_Receive+0xe4>
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	689b      	ldr	r3, [r3, #8]
 8002c66:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c6a:	d10d      	bne.n	8002c88 <HAL_UART_Receive+0xdc>
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	691b      	ldr	r3, [r3, #16]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	d104      	bne.n	8002c7e <HAL_UART_Receive+0xd2>
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	227f      	movs	r2, #127	; 0x7f
 8002c78:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c7c:	e008      	b.n	8002c90 <HAL_UART_Receive+0xe4>
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	223f      	movs	r2, #63	; 0x3f
 8002c82:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8002c86:	e003      	b.n	8002c90 <HAL_UART_Receive+0xe4>
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8002c96:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002ca0:	d108      	bne.n	8002cb4 <HAL_UART_Receive+0x108>
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	691b      	ldr	r3, [r3, #16]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d104      	bne.n	8002cb4 <HAL_UART_Receive+0x108>
    {
      pdata8bits  = NULL;
 8002caa:	2300      	movs	r3, #0
 8002cac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002cae:	68bb      	ldr	r3, [r7, #8]
 8002cb0:	61bb      	str	r3, [r7, #24]
 8002cb2:	e003      	b.n	8002cbc <HAL_UART_Receive+0x110>
    }
    else
    {
      pdata8bits  = pData;
 8002cb4:	68bb      	ldr	r3, [r7, #8]
 8002cb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002cb8:	2300      	movs	r3, #0
 8002cba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8002cc4:	e033      	b.n	8002d2e <HAL_UART_Receive+0x182>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	9300      	str	r3, [sp, #0]
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2120      	movs	r1, #32
 8002cd0:	68f8      	ldr	r0, [r7, #12]
 8002cd2:	f000 fb54 	bl	800337e <UART_WaitOnFlagUntilTimeout>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d001      	beq.n	8002ce0 <HAL_UART_Receive+0x134>
      {
        return HAL_TIMEOUT;
 8002cdc:	2303      	movs	r3, #3
 8002cde:	e032      	b.n	8002d46 <HAL_UART_Receive+0x19a>
      }
      if (pdata8bits == NULL)
 8002ce0:	69fb      	ldr	r3, [r7, #28]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d10c      	bne.n	8002d00 <HAL_UART_Receive+0x154>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002cec:	b29a      	uxth	r2, r3
 8002cee:	8a7b      	ldrh	r3, [r7, #18]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	b29a      	uxth	r2, r3
 8002cf4:	69bb      	ldr	r3, [r7, #24]
 8002cf6:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002cf8:	69bb      	ldr	r3, [r7, #24]
 8002cfa:	3302      	adds	r3, #2
 8002cfc:	61bb      	str	r3, [r7, #24]
 8002cfe:	e00d      	b.n	8002d1c <HAL_UART_Receive+0x170>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002d06:	b29b      	uxth	r3, r3
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	8a7b      	ldrh	r3, [r7, #18]
 8002d0c:	b2db      	uxtb	r3, r3
 8002d0e:	4013      	ands	r3, r2
 8002d10:	b2da      	uxtb	r2, r3
 8002d12:	69fb      	ldr	r3, [r7, #28]
 8002d14:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	3301      	adds	r3, #1
 8002d1a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d22:	b29b      	uxth	r3, r3
 8002d24:	3b01      	subs	r3, #1
 8002d26:	b29a      	uxth	r2, r3
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002d34:	b29b      	uxth	r3, r3
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d1c5      	bne.n	8002cc6 <HAL_UART_Receive+0x11a>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	2220      	movs	r2, #32
 8002d3e:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8002d40:	2300      	movs	r3, #0
 8002d42:	e000      	b.n	8002d46 <HAL_UART_Receive+0x19a>
  }
  else
  {
    return HAL_BUSY;
 8002d44:	2302      	movs	r3, #2
  }
}
 8002d46:	4618      	mov	r0, r3
 8002d48:	3720      	adds	r7, #32
 8002d4a:	46bd      	mov	sp, r7
 8002d4c:	bd80      	pop	{r7, pc}
	...

08002d50 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d54:	b08a      	sub	sp, #40	; 0x28
 8002d56:	af00      	add	r7, sp, #0
 8002d58:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	689a      	ldr	r2, [r3, #8]
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	691b      	ldr	r3, [r3, #16]
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	695b      	ldr	r3, [r3, #20]
 8002d6e:	431a      	orrs	r2, r3
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	69db      	ldr	r3, [r3, #28]
 8002d74:	4313      	orrs	r3, r2
 8002d76:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	681a      	ldr	r2, [r3, #0]
 8002d7e:	4bb4      	ldr	r3, [pc, #720]	; (8003050 <UART_SetConfig+0x300>)
 8002d80:	4013      	ands	r3, r2
 8002d82:	68fa      	ldr	r2, [r7, #12]
 8002d84:	6812      	ldr	r2, [r2, #0]
 8002d86:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002d88:	430b      	orrs	r3, r1
 8002d8a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	68da      	ldr	r2, [r3, #12]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	699b      	ldr	r3, [r3, #24]
 8002da6:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	4aa9      	ldr	r2, [pc, #676]	; (8003054 <UART_SetConfig+0x304>)
 8002dae:	4293      	cmp	r3, r2
 8002db0:	d004      	beq.n	8002dbc <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	6a1b      	ldr	r3, [r3, #32]
 8002db6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002db8:	4313      	orrs	r3, r2
 8002dba:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dcc:	430a      	orrs	r2, r1
 8002dce:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	4aa0      	ldr	r2, [pc, #640]	; (8003058 <UART_SetConfig+0x308>)
 8002dd6:	4293      	cmp	r3, r2
 8002dd8:	d126      	bne.n	8002e28 <UART_SetConfig+0xd8>
 8002dda:	4ba0      	ldr	r3, [pc, #640]	; (800305c <UART_SetConfig+0x30c>)
 8002ddc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de0:	f003 0303 	and.w	r3, r3, #3
 8002de4:	2b03      	cmp	r3, #3
 8002de6:	d81b      	bhi.n	8002e20 <UART_SetConfig+0xd0>
 8002de8:	a201      	add	r2, pc, #4	; (adr r2, 8002df0 <UART_SetConfig+0xa0>)
 8002dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dee:	bf00      	nop
 8002df0:	08002e01 	.word	0x08002e01
 8002df4:	08002e11 	.word	0x08002e11
 8002df8:	08002e09 	.word	0x08002e09
 8002dfc:	08002e19 	.word	0x08002e19
 8002e00:	2301      	movs	r3, #1
 8002e02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e06:	e080      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002e08:	2302      	movs	r3, #2
 8002e0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e0e:	e07c      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002e10:	2304      	movs	r3, #4
 8002e12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e16:	e078      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002e18:	2308      	movs	r3, #8
 8002e1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e1e:	e074      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002e20:	2310      	movs	r3, #16
 8002e22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e26:	e070      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a8c      	ldr	r2, [pc, #560]	; (8003060 <UART_SetConfig+0x310>)
 8002e2e:	4293      	cmp	r3, r2
 8002e30:	d138      	bne.n	8002ea4 <UART_SetConfig+0x154>
 8002e32:	4b8a      	ldr	r3, [pc, #552]	; (800305c <UART_SetConfig+0x30c>)
 8002e34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e38:	f003 030c 	and.w	r3, r3, #12
 8002e3c:	2b0c      	cmp	r3, #12
 8002e3e:	d82d      	bhi.n	8002e9c <UART_SetConfig+0x14c>
 8002e40:	a201      	add	r2, pc, #4	; (adr r2, 8002e48 <UART_SetConfig+0xf8>)
 8002e42:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e46:	bf00      	nop
 8002e48:	08002e7d 	.word	0x08002e7d
 8002e4c:	08002e9d 	.word	0x08002e9d
 8002e50:	08002e9d 	.word	0x08002e9d
 8002e54:	08002e9d 	.word	0x08002e9d
 8002e58:	08002e8d 	.word	0x08002e8d
 8002e5c:	08002e9d 	.word	0x08002e9d
 8002e60:	08002e9d 	.word	0x08002e9d
 8002e64:	08002e9d 	.word	0x08002e9d
 8002e68:	08002e85 	.word	0x08002e85
 8002e6c:	08002e9d 	.word	0x08002e9d
 8002e70:	08002e9d 	.word	0x08002e9d
 8002e74:	08002e9d 	.word	0x08002e9d
 8002e78:	08002e95 	.word	0x08002e95
 8002e7c:	2300      	movs	r3, #0
 8002e7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e82:	e042      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002e84:	2302      	movs	r3, #2
 8002e86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e8a:	e03e      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002e8c:	2304      	movs	r3, #4
 8002e8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e92:	e03a      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002e94:	2308      	movs	r3, #8
 8002e96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002e9a:	e036      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002e9c:	2310      	movs	r3, #16
 8002e9e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ea2:	e032      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a6a      	ldr	r2, [pc, #424]	; (8003054 <UART_SetConfig+0x304>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d12a      	bne.n	8002f04 <UART_SetConfig+0x1b4>
 8002eae:	4b6b      	ldr	r3, [pc, #428]	; (800305c <UART_SetConfig+0x30c>)
 8002eb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002eb4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002eb8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ebc:	d01a      	beq.n	8002ef4 <UART_SetConfig+0x1a4>
 8002ebe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ec2:	d81b      	bhi.n	8002efc <UART_SetConfig+0x1ac>
 8002ec4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ec8:	d00c      	beq.n	8002ee4 <UART_SetConfig+0x194>
 8002eca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ece:	d815      	bhi.n	8002efc <UART_SetConfig+0x1ac>
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d003      	beq.n	8002edc <UART_SetConfig+0x18c>
 8002ed4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ed8:	d008      	beq.n	8002eec <UART_SetConfig+0x19c>
 8002eda:	e00f      	b.n	8002efc <UART_SetConfig+0x1ac>
 8002edc:	2300      	movs	r3, #0
 8002ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ee2:	e012      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002ee4:	2302      	movs	r3, #2
 8002ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002eea:	e00e      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002eec:	2304      	movs	r3, #4
 8002eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ef2:	e00a      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002ef4:	2308      	movs	r3, #8
 8002ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002efa:	e006      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002efc:	2310      	movs	r3, #16
 8002efe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002f02:	e002      	b.n	8002f0a <UART_SetConfig+0x1ba>
 8002f04:	2310      	movs	r3, #16
 8002f06:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4a51      	ldr	r2, [pc, #324]	; (8003054 <UART_SetConfig+0x304>)
 8002f10:	4293      	cmp	r3, r2
 8002f12:	d17a      	bne.n	800300a <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f14:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002f18:	2b08      	cmp	r3, #8
 8002f1a:	d824      	bhi.n	8002f66 <UART_SetConfig+0x216>
 8002f1c:	a201      	add	r2, pc, #4	; (adr r2, 8002f24 <UART_SetConfig+0x1d4>)
 8002f1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f22:	bf00      	nop
 8002f24:	08002f49 	.word	0x08002f49
 8002f28:	08002f67 	.word	0x08002f67
 8002f2c:	08002f51 	.word	0x08002f51
 8002f30:	08002f67 	.word	0x08002f67
 8002f34:	08002f57 	.word	0x08002f57
 8002f38:	08002f67 	.word	0x08002f67
 8002f3c:	08002f67 	.word	0x08002f67
 8002f40:	08002f67 	.word	0x08002f67
 8002f44:	08002f5f 	.word	0x08002f5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f48:	f7fe ff18 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8002f4c:	61f8      	str	r0, [r7, #28]
        break;
 8002f4e:	e010      	b.n	8002f72 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f50:	4b44      	ldr	r3, [pc, #272]	; (8003064 <UART_SetConfig+0x314>)
 8002f52:	61fb      	str	r3, [r7, #28]
        break;
 8002f54:	e00d      	b.n	8002f72 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f56:	f7fe fe79 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8002f5a:	61f8      	str	r0, [r7, #28]
        break;
 8002f5c:	e009      	b.n	8002f72 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f62:	61fb      	str	r3, [r7, #28]
        break;
 8002f64:	e005      	b.n	8002f72 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002f66:	2300      	movs	r3, #0
 8002f68:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f6a:	2301      	movs	r3, #1
 8002f6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f70:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	f000 8107 	beq.w	8003188 <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	4613      	mov	r3, r2
 8002f80:	005b      	lsls	r3, r3, #1
 8002f82:	4413      	add	r3, r2
 8002f84:	69fa      	ldr	r2, [r7, #28]
 8002f86:	429a      	cmp	r2, r3
 8002f88:	d305      	bcc.n	8002f96 <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	685b      	ldr	r3, [r3, #4]
 8002f8e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002f90:	69fa      	ldr	r2, [r7, #28]
 8002f92:	429a      	cmp	r2, r3
 8002f94:	d903      	bls.n	8002f9e <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002f96:	2301      	movs	r3, #1
 8002f98:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002f9c:	e0f4      	b.n	8003188 <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	461c      	mov	r4, r3
 8002fa4:	4615      	mov	r5, r2
 8002fa6:	f04f 0200 	mov.w	r2, #0
 8002faa:	f04f 0300 	mov.w	r3, #0
 8002fae:	022b      	lsls	r3, r5, #8
 8002fb0:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002fb4:	0222      	lsls	r2, r4, #8
 8002fb6:	68f9      	ldr	r1, [r7, #12]
 8002fb8:	6849      	ldr	r1, [r1, #4]
 8002fba:	0849      	lsrs	r1, r1, #1
 8002fbc:	2000      	movs	r0, #0
 8002fbe:	4688      	mov	r8, r1
 8002fc0:	4681      	mov	r9, r0
 8002fc2:	eb12 0a08 	adds.w	sl, r2, r8
 8002fc6:	eb43 0b09 	adc.w	fp, r3, r9
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	685b      	ldr	r3, [r3, #4]
 8002fce:	2200      	movs	r2, #0
 8002fd0:	603b      	str	r3, [r7, #0]
 8002fd2:	607a      	str	r2, [r7, #4]
 8002fd4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002fd8:	4650      	mov	r0, sl
 8002fda:	4659      	mov	r1, fp
 8002fdc:	f7fd f900 	bl	80001e0 <__aeabi_uldivmod>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4613      	mov	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002fe8:	69bb      	ldr	r3, [r7, #24]
 8002fea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002fee:	d308      	bcc.n	8003002 <UART_SetConfig+0x2b2>
 8002ff0:	69bb      	ldr	r3, [r7, #24]
 8002ff2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002ff6:	d204      	bcs.n	8003002 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	60da      	str	r2, [r3, #12]
 8003000:	e0c2      	b.n	8003188 <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003008:	e0be      	b.n	8003188 <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	69db      	ldr	r3, [r3, #28]
 800300e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003012:	d16a      	bne.n	80030ea <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003014:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003018:	2b08      	cmp	r3, #8
 800301a:	d834      	bhi.n	8003086 <UART_SetConfig+0x336>
 800301c:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <UART_SetConfig+0x2d4>)
 800301e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003022:	bf00      	nop
 8003024:	08003049 	.word	0x08003049
 8003028:	08003069 	.word	0x08003069
 800302c:	08003071 	.word	0x08003071
 8003030:	08003087 	.word	0x08003087
 8003034:	08003077 	.word	0x08003077
 8003038:	08003087 	.word	0x08003087
 800303c:	08003087 	.word	0x08003087
 8003040:	08003087 	.word	0x08003087
 8003044:	0800307f 	.word	0x0800307f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003048:	f7fe fe98 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 800304c:	61f8      	str	r0, [r7, #28]
        break;
 800304e:	e020      	b.n	8003092 <UART_SetConfig+0x342>
 8003050:	efff69f3 	.word	0xefff69f3
 8003054:	40008000 	.word	0x40008000
 8003058:	40013800 	.word	0x40013800
 800305c:	40021000 	.word	0x40021000
 8003060:	40004400 	.word	0x40004400
 8003064:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003068:	f7fe fe9e 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 800306c:	61f8      	str	r0, [r7, #28]
        break;
 800306e:	e010      	b.n	8003092 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003070:	4b4c      	ldr	r3, [pc, #304]	; (80031a4 <UART_SetConfig+0x454>)
 8003072:	61fb      	str	r3, [r7, #28]
        break;
 8003074:	e00d      	b.n	8003092 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003076:	f7fe fde9 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 800307a:	61f8      	str	r0, [r7, #28]
        break;
 800307c:	e009      	b.n	8003092 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800307e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003082:	61fb      	str	r3, [r7, #28]
        break;
 8003084:	e005      	b.n	8003092 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003086:	2300      	movs	r3, #0
 8003088:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003090:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003092:	69fb      	ldr	r3, [r7, #28]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d077      	beq.n	8003188 <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003098:	69fb      	ldr	r3, [r7, #28]
 800309a:	005a      	lsls	r2, r3, #1
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	685b      	ldr	r3, [r3, #4]
 80030a0:	085b      	lsrs	r3, r3, #1
 80030a2:	441a      	add	r2, r3
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	685b      	ldr	r3, [r3, #4]
 80030a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80030ac:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	2b0f      	cmp	r3, #15
 80030b2:	d916      	bls.n	80030e2 <UART_SetConfig+0x392>
 80030b4:	69bb      	ldr	r3, [r7, #24]
 80030b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030ba:	d212      	bcs.n	80030e2 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	b29b      	uxth	r3, r3
 80030c0:	f023 030f 	bic.w	r3, r3, #15
 80030c4:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030c6:	69bb      	ldr	r3, [r7, #24]
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	b29b      	uxth	r3, r3
 80030cc:	f003 0307 	and.w	r3, r3, #7
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	8afb      	ldrh	r3, [r7, #22]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	8afa      	ldrh	r2, [r7, #22]
 80030de:	60da      	str	r2, [r3, #12]
 80030e0:	e052      	b.n	8003188 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80030e2:	2301      	movs	r3, #1
 80030e4:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 80030e8:	e04e      	b.n	8003188 <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030ea:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80030ee:	2b08      	cmp	r3, #8
 80030f0:	d827      	bhi.n	8003142 <UART_SetConfig+0x3f2>
 80030f2:	a201      	add	r2, pc, #4	; (adr r2, 80030f8 <UART_SetConfig+0x3a8>)
 80030f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030f8:	0800311d 	.word	0x0800311d
 80030fc:	08003125 	.word	0x08003125
 8003100:	0800312d 	.word	0x0800312d
 8003104:	08003143 	.word	0x08003143
 8003108:	08003133 	.word	0x08003133
 800310c:	08003143 	.word	0x08003143
 8003110:	08003143 	.word	0x08003143
 8003114:	08003143 	.word	0x08003143
 8003118:	0800313b 	.word	0x0800313b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800311c:	f7fe fe2e 	bl	8001d7c <HAL_RCC_GetPCLK1Freq>
 8003120:	61f8      	str	r0, [r7, #28]
        break;
 8003122:	e014      	b.n	800314e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003124:	f7fe fe40 	bl	8001da8 <HAL_RCC_GetPCLK2Freq>
 8003128:	61f8      	str	r0, [r7, #28]
        break;
 800312a:	e010      	b.n	800314e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800312c:	4b1d      	ldr	r3, [pc, #116]	; (80031a4 <UART_SetConfig+0x454>)
 800312e:	61fb      	str	r3, [r7, #28]
        break;
 8003130:	e00d      	b.n	800314e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003132:	f7fe fd8b 	bl	8001c4c <HAL_RCC_GetSysClockFreq>
 8003136:	61f8      	str	r0, [r7, #28]
        break;
 8003138:	e009      	b.n	800314e <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800313a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313e:	61fb      	str	r3, [r7, #28]
        break;
 8003140:	e005      	b.n	800314e <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003146:	2301      	movs	r3, #1
 8003148:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 800314c:	bf00      	nop
    }

    if (pclk != 0U)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	2b00      	cmp	r3, #0
 8003152:	d019      	beq.n	8003188 <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	085a      	lsrs	r2, r3, #1
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	441a      	add	r2, r3
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	fbb2 f3f3 	udiv	r3, r2, r3
 8003166:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003168:	69bb      	ldr	r3, [r7, #24]
 800316a:	2b0f      	cmp	r3, #15
 800316c:	d909      	bls.n	8003182 <UART_SetConfig+0x432>
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003174:	d205      	bcs.n	8003182 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003176:	69bb      	ldr	r3, [r7, #24]
 8003178:	b29a      	uxth	r2, r3
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	60da      	str	r2, [r3, #12]
 8003180:	e002      	b.n	8003188 <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003182:	2301      	movs	r3, #1
 8003184:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	2200      	movs	r2, #0
 800318c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	2200      	movs	r2, #0
 8003192:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003194:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003198:	4618      	mov	r0, r3
 800319a:	3728      	adds	r7, #40	; 0x28
 800319c:	46bd      	mov	sp, r7
 800319e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031a2:	bf00      	nop
 80031a4:	00f42400 	.word	0x00f42400

080031a8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80031a8:	b480      	push	{r7}
 80031aa:	b083      	sub	sp, #12
 80031ac:	af00      	add	r7, sp, #0
 80031ae:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031b4:	f003 0301 	and.w	r3, r3, #1
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d00a      	beq.n	80031d2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	430a      	orrs	r2, r1
 80031d0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031d6:	f003 0302 	and.w	r3, r3, #2
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d00a      	beq.n	80031f4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	430a      	orrs	r2, r1
 80031f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f003 0304 	and.w	r3, r3, #4
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d00a      	beq.n	8003216 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685b      	ldr	r3, [r3, #4]
 8003206:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	430a      	orrs	r2, r1
 8003214:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800321a:	f003 0308 	and.w	r3, r3, #8
 800321e:	2b00      	cmp	r3, #0
 8003220:	d00a      	beq.n	8003238 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	430a      	orrs	r2, r1
 8003236:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800323c:	f003 0310 	and.w	r3, r3, #16
 8003240:	2b00      	cmp	r3, #0
 8003242:	d00a      	beq.n	800325a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	689b      	ldr	r3, [r3, #8]
 800324a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	430a      	orrs	r2, r1
 8003258:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800325e:	f003 0320 	and.w	r3, r3, #32
 8003262:	2b00      	cmp	r3, #0
 8003264:	d00a      	beq.n	800327c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	689b      	ldr	r3, [r3, #8]
 800326c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	430a      	orrs	r2, r1
 800327a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003280:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003284:	2b00      	cmp	r3, #0
 8003286:	d01a      	beq.n	80032be <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	430a      	orrs	r2, r1
 800329c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032a2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032a6:	d10a      	bne.n	80032be <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	685b      	ldr	r3, [r3, #4]
 80032ae:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	430a      	orrs	r2, r1
 80032bc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d00a      	beq.n	80032e0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	430a      	orrs	r2, r1
 80032de:	605a      	str	r2, [r3, #4]
  }
}
 80032e0:	bf00      	nop
 80032e2:	370c      	adds	r7, #12
 80032e4:	46bd      	mov	sp, r7
 80032e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ea:	4770      	bx	lr

080032ec <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b086      	sub	sp, #24
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	2200      	movs	r2, #0
 80032f8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032fc:	f7fd fcae 	bl	8000c5c <HAL_GetTick>
 8003300:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0308 	and.w	r3, r3, #8
 800330c:	2b08      	cmp	r3, #8
 800330e:	d10e      	bne.n	800332e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003310:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003314:	9300      	str	r3, [sp, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800331e:	6878      	ldr	r0, [r7, #4]
 8003320:	f000 f82d 	bl	800337e <UART_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e023      	b.n	8003376 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	f003 0304 	and.w	r3, r3, #4
 8003338:	2b04      	cmp	r3, #4
 800333a:	d10e      	bne.n	800335a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800333c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	2200      	movs	r2, #0
 8003346:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800334a:	6878      	ldr	r0, [r7, #4]
 800334c:	f000 f817 	bl	800337e <UART_WaitOnFlagUntilTimeout>
 8003350:	4603      	mov	r3, r0
 8003352:	2b00      	cmp	r3, #0
 8003354:	d001      	beq.n	800335a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e00d      	b.n	8003376 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	2220      	movs	r2, #32
 800335e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2220      	movs	r2, #32
 8003364:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2200      	movs	r2, #0
 8003370:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003374:	2300      	movs	r3, #0
}
 8003376:	4618      	mov	r0, r3
 8003378:	3710      	adds	r7, #16
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800337e:	b580      	push	{r7, lr}
 8003380:	b09c      	sub	sp, #112	; 0x70
 8003382:	af00      	add	r7, sp, #0
 8003384:	60f8      	str	r0, [r7, #12]
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	603b      	str	r3, [r7, #0]
 800338a:	4613      	mov	r3, r2
 800338c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800338e:	e0a5      	b.n	80034dc <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003392:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003396:	f000 80a1 	beq.w	80034dc <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800339a:	f7fd fc5f 	bl	8000c5c <HAL_GetTick>
 800339e:	4602      	mov	r2, r0
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d302      	bcc.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x32>
 80033aa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80033ac:	2b00      	cmp	r3, #0
 80033ae:	d13e      	bne.n	800342e <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033b6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80033b8:	e853 3f00 	ldrex	r3, [r3]
 80033bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80033be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80033c0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80033c4:	667b      	str	r3, [r7, #100]	; 0x64
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	461a      	mov	r2, r3
 80033cc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80033ce:	65fb      	str	r3, [r7, #92]	; 0x5c
 80033d0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033d2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80033d4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80033d6:	e841 2300 	strex	r3, r2, [r1]
 80033da:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80033dc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d1e6      	bne.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3308      	adds	r3, #8
 80033e8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80033ea:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80033ec:	e853 3f00 	ldrex	r3, [r3]
 80033f0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80033f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80033f4:	f023 0301 	bic.w	r3, r3, #1
 80033f8:	663b      	str	r3, [r7, #96]	; 0x60
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	3308      	adds	r3, #8
 8003400:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003402:	64ba      	str	r2, [r7, #72]	; 0x48
 8003404:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003406:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8003408:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800340a:	e841 2300 	strex	r3, r2, [r1]
 800340e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003410:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1e5      	bne.n	80033e2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	2220      	movs	r2, #32
 800341a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	2220      	movs	r2, #32
 8003420:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	2200      	movs	r2, #0
 8003426:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e067      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b00      	cmp	r3, #0
 800343a:	d04f      	beq.n	80034dc <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	69db      	ldr	r3, [r3, #28]
 8003442:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003446:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800344a:	d147      	bne.n	80034dc <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003454:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800345c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800345e:	e853 3f00 	ldrex	r3, [r3]
 8003462:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003464:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003466:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800346a:	66fb      	str	r3, [r7, #108]	; 0x6c
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	461a      	mov	r2, r3
 8003472:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003474:	637b      	str	r3, [r7, #52]	; 0x34
 8003476:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003478:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800347a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800347c:	e841 2300 	strex	r3, r2, [r1]
 8003480:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003484:	2b00      	cmp	r3, #0
 8003486:	d1e6      	bne.n	8003456 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	3308      	adds	r3, #8
 800348e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003490:	697b      	ldr	r3, [r7, #20]
 8003492:	e853 3f00 	ldrex	r3, [r3]
 8003496:	613b      	str	r3, [r7, #16]
   return(result);
 8003498:	693b      	ldr	r3, [r7, #16]
 800349a:	f023 0301 	bic.w	r3, r3, #1
 800349e:	66bb      	str	r3, [r7, #104]	; 0x68
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	3308      	adds	r3, #8
 80034a6:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80034a8:	623a      	str	r2, [r7, #32]
 80034aa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ac:	69f9      	ldr	r1, [r7, #28]
 80034ae:	6a3a      	ldr	r2, [r7, #32]
 80034b0:	e841 2300 	strex	r3, r2, [r1]
 80034b4:	61bb      	str	r3, [r7, #24]
   return(result);
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d1e5      	bne.n	8003488 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	2220      	movs	r2, #32
 80034c0:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2220      	movs	r2, #32
 80034c6:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2220      	movs	r2, #32
 80034cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2200      	movs	r2, #0
 80034d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e010      	b.n	80034fe <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	69da      	ldr	r2, [r3, #28]
 80034e2:	68bb      	ldr	r3, [r7, #8]
 80034e4:	4013      	ands	r3, r2
 80034e6:	68ba      	ldr	r2, [r7, #8]
 80034e8:	429a      	cmp	r2, r3
 80034ea:	bf0c      	ite	eq
 80034ec:	2301      	moveq	r3, #1
 80034ee:	2300      	movne	r3, #0
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	461a      	mov	r2, r3
 80034f4:	79fb      	ldrb	r3, [r7, #7]
 80034f6:	429a      	cmp	r2, r3
 80034f8:	f43f af4a 	beq.w	8003390 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80034fc:	2300      	movs	r3, #0
}
 80034fe:	4618      	mov	r0, r3
 8003500:	3770      	adds	r7, #112	; 0x70
 8003502:	46bd      	mov	sp, r7
 8003504:	bd80      	pop	{r7, pc}
	...

08003508 <__NVIC_SetPriority>:
{
 8003508:	b480      	push	{r7}
 800350a:	b083      	sub	sp, #12
 800350c:	af00      	add	r7, sp, #0
 800350e:	4603      	mov	r3, r0
 8003510:	6039      	str	r1, [r7, #0]
 8003512:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003514:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003518:	2b00      	cmp	r3, #0
 800351a:	db0a      	blt.n	8003532 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	b2da      	uxtb	r2, r3
 8003520:	490c      	ldr	r1, [pc, #48]	; (8003554 <__NVIC_SetPriority+0x4c>)
 8003522:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003526:	0112      	lsls	r2, r2, #4
 8003528:	b2d2      	uxtb	r2, r2
 800352a:	440b      	add	r3, r1
 800352c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003530:	e00a      	b.n	8003548 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	b2da      	uxtb	r2, r3
 8003536:	4908      	ldr	r1, [pc, #32]	; (8003558 <__NVIC_SetPriority+0x50>)
 8003538:	79fb      	ldrb	r3, [r7, #7]
 800353a:	f003 030f 	and.w	r3, r3, #15
 800353e:	3b04      	subs	r3, #4
 8003540:	0112      	lsls	r2, r2, #4
 8003542:	b2d2      	uxtb	r2, r2
 8003544:	440b      	add	r3, r1
 8003546:	761a      	strb	r2, [r3, #24]
}
 8003548:	bf00      	nop
 800354a:	370c      	adds	r7, #12
 800354c:	46bd      	mov	sp, r7
 800354e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003552:	4770      	bx	lr
 8003554:	e000e100 	.word	0xe000e100
 8003558:	e000ed00 	.word	0xe000ed00

0800355c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800355c:	b580      	push	{r7, lr}
 800355e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003560:	4b05      	ldr	r3, [pc, #20]	; (8003578 <SysTick_Handler+0x1c>)
 8003562:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003564:	f001 fe2e 	bl	80051c4 <xTaskGetSchedulerState>
 8003568:	4603      	mov	r3, r0
 800356a:	2b01      	cmp	r3, #1
 800356c:	d001      	beq.n	8003572 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800356e:	f002 fc13 	bl	8005d98 <xPortSysTickHandler>
  }
}
 8003572:	bf00      	nop
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	e000e010 	.word	0xe000e010

0800357c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800357c:	b580      	push	{r7, lr}
 800357e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003580:	2100      	movs	r1, #0
 8003582:	f06f 0004 	mvn.w	r0, #4
 8003586:	f7ff ffbf 	bl	8003508 <__NVIC_SetPriority>
#endif
}
 800358a:	bf00      	nop
 800358c:	bd80      	pop	{r7, pc}
	...

08003590 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003590:	b480      	push	{r7}
 8003592:	b083      	sub	sp, #12
 8003594:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003596:	f3ef 8305 	mrs	r3, IPSR
 800359a:	603b      	str	r3, [r7, #0]
  return(result);
 800359c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d003      	beq.n	80035aa <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80035a2:	f06f 0305 	mvn.w	r3, #5
 80035a6:	607b      	str	r3, [r7, #4]
 80035a8:	e00c      	b.n	80035c4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80035aa:	4b0a      	ldr	r3, [pc, #40]	; (80035d4 <osKernelInitialize+0x44>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d105      	bne.n	80035be <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80035b2:	4b08      	ldr	r3, [pc, #32]	; (80035d4 <osKernelInitialize+0x44>)
 80035b4:	2201      	movs	r2, #1
 80035b6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80035b8:	2300      	movs	r3, #0
 80035ba:	607b      	str	r3, [r7, #4]
 80035bc:	e002      	b.n	80035c4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80035be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80035c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80035c4:	687b      	ldr	r3, [r7, #4]
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr
 80035d2:	bf00      	nop
 80035d4:	20000174 	.word	0x20000174

080035d8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80035d8:	b580      	push	{r7, lr}
 80035da:	b082      	sub	sp, #8
 80035dc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80035de:	f3ef 8305 	mrs	r3, IPSR
 80035e2:	603b      	str	r3, [r7, #0]
  return(result);
 80035e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d003      	beq.n	80035f2 <osKernelStart+0x1a>
    stat = osErrorISR;
 80035ea:	f06f 0305 	mvn.w	r3, #5
 80035ee:	607b      	str	r3, [r7, #4]
 80035f0:	e010      	b.n	8003614 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80035f2:	4b0b      	ldr	r3, [pc, #44]	; (8003620 <osKernelStart+0x48>)
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	2b01      	cmp	r3, #1
 80035f8:	d109      	bne.n	800360e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80035fa:	f7ff ffbf 	bl	800357c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80035fe:	4b08      	ldr	r3, [pc, #32]	; (8003620 <osKernelStart+0x48>)
 8003600:	2202      	movs	r2, #2
 8003602:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8003604:	f001 f982 	bl	800490c <vTaskStartScheduler>
      stat = osOK;
 8003608:	2300      	movs	r3, #0
 800360a:	607b      	str	r3, [r7, #4]
 800360c:	e002      	b.n	8003614 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800360e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003612:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003614:	687b      	ldr	r3, [r7, #4]
}
 8003616:	4618      	mov	r0, r3
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20000174 	.word	0x20000174

08003624 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8003624:	b580      	push	{r7, lr}
 8003626:	b08e      	sub	sp, #56	; 0x38
 8003628:	af04      	add	r7, sp, #16
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003630:	2300      	movs	r3, #0
 8003632:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003634:	f3ef 8305 	mrs	r3, IPSR
 8003638:	617b      	str	r3, [r7, #20]
  return(result);
 800363a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800363c:	2b00      	cmp	r3, #0
 800363e:	d17e      	bne.n	800373e <osThreadNew+0x11a>
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d07b      	beq.n	800373e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003646:	2380      	movs	r3, #128	; 0x80
 8003648:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800364a:	2318      	movs	r3, #24
 800364c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800364e:	2300      	movs	r3, #0
 8003650:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003652:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003656:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2b00      	cmp	r3, #0
 800365c:	d045      	beq.n	80036ea <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	2b00      	cmp	r3, #0
 8003664:	d002      	beq.n	800366c <osThreadNew+0x48>
        name = attr->name;
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d002      	beq.n	800367a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	699b      	ldr	r3, [r3, #24]
 8003678:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800367a:	69fb      	ldr	r3, [r7, #28]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d008      	beq.n	8003692 <osThreadNew+0x6e>
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	2b38      	cmp	r3, #56	; 0x38
 8003684:	d805      	bhi.n	8003692 <osThreadNew+0x6e>
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	f003 0301 	and.w	r3, r3, #1
 800368e:	2b00      	cmp	r3, #0
 8003690:	d001      	beq.n	8003696 <osThreadNew+0x72>
        return (NULL);
 8003692:	2300      	movs	r3, #0
 8003694:	e054      	b.n	8003740 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	695b      	ldr	r3, [r3, #20]
 800369a:	2b00      	cmp	r3, #0
 800369c:	d003      	beq.n	80036a6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	695b      	ldr	r3, [r3, #20]
 80036a2:	089b      	lsrs	r3, r3, #2
 80036a4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	689b      	ldr	r3, [r3, #8]
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d00e      	beq.n	80036cc <osThreadNew+0xa8>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2bbb      	cmp	r3, #187	; 0xbb
 80036b4:	d90a      	bls.n	80036cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d006      	beq.n	80036cc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	695b      	ldr	r3, [r3, #20]
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <osThreadNew+0xa8>
        mem = 1;
 80036c6:	2301      	movs	r3, #1
 80036c8:	61bb      	str	r3, [r7, #24]
 80036ca:	e010      	b.n	80036ee <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	689b      	ldr	r3, [r3, #8]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d10c      	bne.n	80036ee <osThreadNew+0xca>
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	68db      	ldr	r3, [r3, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d108      	bne.n	80036ee <osThreadNew+0xca>
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	691b      	ldr	r3, [r3, #16]
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d104      	bne.n	80036ee <osThreadNew+0xca>
          mem = 0;
 80036e4:	2300      	movs	r3, #0
 80036e6:	61bb      	str	r3, [r7, #24]
 80036e8:	e001      	b.n	80036ee <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80036ea:	2300      	movs	r3, #0
 80036ec:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80036ee:	69bb      	ldr	r3, [r7, #24]
 80036f0:	2b01      	cmp	r3, #1
 80036f2:	d110      	bne.n	8003716 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80036f8:	687a      	ldr	r2, [r7, #4]
 80036fa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80036fc:	9202      	str	r2, [sp, #8]
 80036fe:	9301      	str	r3, [sp, #4]
 8003700:	69fb      	ldr	r3, [r7, #28]
 8003702:	9300      	str	r3, [sp, #0]
 8003704:	68bb      	ldr	r3, [r7, #8]
 8003706:	6a3a      	ldr	r2, [r7, #32]
 8003708:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800370a:	68f8      	ldr	r0, [r7, #12]
 800370c:	f000 fe0c 	bl	8004328 <xTaskCreateStatic>
 8003710:	4603      	mov	r3, r0
 8003712:	613b      	str	r3, [r7, #16]
 8003714:	e013      	b.n	800373e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d110      	bne.n	800373e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800371c:	6a3b      	ldr	r3, [r7, #32]
 800371e:	b29a      	uxth	r2, r3
 8003720:	f107 0310 	add.w	r3, r7, #16
 8003724:	9301      	str	r3, [sp, #4]
 8003726:	69fb      	ldr	r3, [r7, #28]
 8003728:	9300      	str	r3, [sp, #0]
 800372a:	68bb      	ldr	r3, [r7, #8]
 800372c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800372e:	68f8      	ldr	r0, [r7, #12]
 8003730:	f000 fe57 	bl	80043e2 <xTaskCreate>
 8003734:	4603      	mov	r3, r0
 8003736:	2b01      	cmp	r3, #1
 8003738:	d001      	beq.n	800373e <osThreadNew+0x11a>
            hTask = NULL;
 800373a:	2300      	movs	r3, #0
 800373c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800373e:	693b      	ldr	r3, [r7, #16]
}
 8003740:	4618      	mov	r0, r3
 8003742:	3728      	adds	r7, #40	; 0x28
 8003744:	46bd      	mov	sp, r7
 8003746:	bd80      	pop	{r7, pc}

08003748 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003750:	f3ef 8305 	mrs	r3, IPSR
 8003754:	60bb      	str	r3, [r7, #8]
  return(result);
 8003756:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003758:	2b00      	cmp	r3, #0
 800375a:	d003      	beq.n	8003764 <osDelay+0x1c>
    stat = osErrorISR;
 800375c:	f06f 0305 	mvn.w	r3, #5
 8003760:	60fb      	str	r3, [r7, #12]
 8003762:	e007      	b.n	8003774 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003764:	2300      	movs	r3, #0
 8003766:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	2b00      	cmp	r3, #0
 800376c:	d002      	beq.n	8003774 <osDelay+0x2c>
      vTaskDelay(ticks);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 ff92 	bl	8004698 <vTaskDelay>
    }
  }

  return (stat);
 8003774:	68fb      	ldr	r3, [r7, #12]
}
 8003776:	4618      	mov	r0, r3
 8003778:	3710      	adds	r7, #16
 800377a:	46bd      	mov	sp, r7
 800377c:	bd80      	pop	{r7, pc}
	...

08003780 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	60f8      	str	r0, [r7, #12]
 8003788:	60b9      	str	r1, [r7, #8]
 800378a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	4a07      	ldr	r2, [pc, #28]	; (80037ac <vApplicationGetIdleTaskMemory+0x2c>)
 8003790:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	4a06      	ldr	r2, [pc, #24]	; (80037b0 <vApplicationGetIdleTaskMemory+0x30>)
 8003796:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2280      	movs	r2, #128	; 0x80
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	3714      	adds	r7, #20
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	20000178 	.word	0x20000178
 80037b0:	20000234 	.word	0x20000234

080037b4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80037b4:	b480      	push	{r7}
 80037b6:	b085      	sub	sp, #20
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	60f8      	str	r0, [r7, #12]
 80037bc:	60b9      	str	r1, [r7, #8]
 80037be:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	4a07      	ldr	r2, [pc, #28]	; (80037e0 <vApplicationGetTimerTaskMemory+0x2c>)
 80037c4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80037c6:	68bb      	ldr	r3, [r7, #8]
 80037c8:	4a06      	ldr	r2, [pc, #24]	; (80037e4 <vApplicationGetTimerTaskMemory+0x30>)
 80037ca:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	f44f 7280 	mov.w	r2, #256	; 0x100
 80037d2:	601a      	str	r2, [r3, #0]
}
 80037d4:	bf00      	nop
 80037d6:	3714      	adds	r7, #20
 80037d8:	46bd      	mov	sp, r7
 80037da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037de:	4770      	bx	lr
 80037e0:	20000434 	.word	0x20000434
 80037e4:	200004f0 	.word	0x200004f0

080037e8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80037e8:	b480      	push	{r7}
 80037ea:	b083      	sub	sp, #12
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	f103 0208 	add.w	r2, r3, #8
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003800:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	f103 0208 	add.w	r2, r3, #8
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	f103 0208 	add.w	r2, r3, #8
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800381c:	bf00      	nop
 800381e:	370c      	adds	r7, #12
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003828:	b480      	push	{r7}
 800382a:	b083      	sub	sp, #12
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2200      	movs	r2, #0
 8003834:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003836:	bf00      	nop
 8003838:	370c      	adds	r7, #12
 800383a:	46bd      	mov	sp, r7
 800383c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003840:	4770      	bx	lr

08003842 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003842:	b480      	push	{r7}
 8003844:	b085      	sub	sp, #20
 8003846:	af00      	add	r7, sp, #0
 8003848:	6078      	str	r0, [r7, #4]
 800384a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003852:	683b      	ldr	r3, [r7, #0]
 8003854:	68fa      	ldr	r2, [r7, #12]
 8003856:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	689a      	ldr	r2, [r3, #8]
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	689b      	ldr	r3, [r3, #8]
 8003864:	683a      	ldr	r2, [r7, #0]
 8003866:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	683a      	ldr	r2, [r7, #0]
 800386c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	1c5a      	adds	r2, r3, #1
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	601a      	str	r2, [r3, #0]
}
 800387e:	bf00      	nop
 8003880:	3714      	adds	r7, #20
 8003882:	46bd      	mov	sp, r7
 8003884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003888:	4770      	bx	lr

0800388a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800388a:	b480      	push	{r7}
 800388c:	b085      	sub	sp, #20
 800388e:	af00      	add	r7, sp, #0
 8003890:	6078      	str	r0, [r7, #4]
 8003892:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800389a:	68bb      	ldr	r3, [r7, #8]
 800389c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80038a0:	d103      	bne.n	80038aa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	691b      	ldr	r3, [r3, #16]
 80038a6:	60fb      	str	r3, [r7, #12]
 80038a8:	e00c      	b.n	80038c4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3308      	adds	r3, #8
 80038ae:	60fb      	str	r3, [r7, #12]
 80038b0:	e002      	b.n	80038b8 <vListInsert+0x2e>
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	60fb      	str	r3, [r7, #12]
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	68ba      	ldr	r2, [r7, #8]
 80038c0:	429a      	cmp	r2, r3
 80038c2:	d2f6      	bcs.n	80038b2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	685a      	ldr	r2, [r3, #4]
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	685b      	ldr	r3, [r3, #4]
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80038d4:	683b      	ldr	r3, [r7, #0]
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	683a      	ldr	r2, [r7, #0]
 80038de:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80038e0:	683b      	ldr	r3, [r7, #0]
 80038e2:	687a      	ldr	r2, [r7, #4]
 80038e4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	1c5a      	adds	r2, r3, #1
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	601a      	str	r2, [r3, #0]
}
 80038f0:	bf00      	nop
 80038f2:	3714      	adds	r7, #20
 80038f4:	46bd      	mov	sp, r7
 80038f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038fa:	4770      	bx	lr

080038fc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80038fc:	b480      	push	{r7}
 80038fe:	b085      	sub	sp, #20
 8003900:	af00      	add	r7, sp, #0
 8003902:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	691b      	ldr	r3, [r3, #16]
 8003908:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	687a      	ldr	r2, [r7, #4]
 8003910:	6892      	ldr	r2, [r2, #8]
 8003912:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	689b      	ldr	r3, [r3, #8]
 8003918:	687a      	ldr	r2, [r7, #4]
 800391a:	6852      	ldr	r2, [r2, #4]
 800391c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	429a      	cmp	r2, r3
 8003926:	d103      	bne.n	8003930 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	689a      	ldr	r2, [r3, #8]
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	681b      	ldr	r3, [r3, #0]
 800393a:	1e5a      	subs	r2, r3, #1
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	681b      	ldr	r3, [r3, #0]
}
 8003944:	4618      	mov	r0, r3
 8003946:	3714      	adds	r7, #20
 8003948:	46bd      	mov	sp, r7
 800394a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394e:	4770      	bx	lr

08003950 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
 8003958:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d10a      	bne.n	800397a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003964:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003968:	f383 8811 	msr	BASEPRI, r3
 800396c:	f3bf 8f6f 	isb	sy
 8003970:	f3bf 8f4f 	dsb	sy
 8003974:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003976:	bf00      	nop
 8003978:	e7fe      	b.n	8003978 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800397a:	f002 f97b 	bl	8005c74 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003986:	68f9      	ldr	r1, [r7, #12]
 8003988:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800398a:	fb01 f303 	mul.w	r3, r1, r3
 800398e:	441a      	add	r2, r3
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	2200      	movs	r2, #0
 8003998:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681a      	ldr	r2, [r3, #0]
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	681a      	ldr	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039aa:	3b01      	subs	r3, #1
 80039ac:	68f9      	ldr	r1, [r7, #12]
 80039ae:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80039b0:	fb01 f303 	mul.w	r3, r1, r3
 80039b4:	441a      	add	r2, r3
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	22ff      	movs	r2, #255	; 0xff
 80039be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	22ff      	movs	r2, #255	; 0xff
 80039c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80039ca:	683b      	ldr	r3, [r7, #0]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d114      	bne.n	80039fa <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	691b      	ldr	r3, [r3, #16]
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d01a      	beq.n	8003a0e <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	3310      	adds	r3, #16
 80039dc:	4618      	mov	r0, r3
 80039de:	f001 fa2f 	bl	8004e40 <xTaskRemoveFromEventList>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d012      	beq.n	8003a0e <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80039e8:	4b0c      	ldr	r3, [pc, #48]	; (8003a1c <xQueueGenericReset+0xcc>)
 80039ea:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80039ee:	601a      	str	r2, [r3, #0]
 80039f0:	f3bf 8f4f 	dsb	sy
 80039f4:	f3bf 8f6f 	isb	sy
 80039f8:	e009      	b.n	8003a0e <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	3310      	adds	r3, #16
 80039fe:	4618      	mov	r0, r3
 8003a00:	f7ff fef2 	bl	80037e8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	3324      	adds	r3, #36	; 0x24
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7ff feed 	bl	80037e8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003a0e:	f002 f961 	bl	8005cd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003a12:	2301      	movs	r3, #1
}
 8003a14:	4618      	mov	r0, r3
 8003a16:	3710      	adds	r7, #16
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	e000ed04 	.word	0xe000ed04

08003a20 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003a20:	b580      	push	{r7, lr}
 8003a22:	b08e      	sub	sp, #56	; 0x38
 8003a24:	af02      	add	r7, sp, #8
 8003a26:	60f8      	str	r0, [r7, #12]
 8003a28:	60b9      	str	r1, [r7, #8]
 8003a2a:	607a      	str	r2, [r7, #4]
 8003a2c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10a      	bne.n	8003a4a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003a34:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a38:	f383 8811 	msr	BASEPRI, r3
 8003a3c:	f3bf 8f6f 	isb	sy
 8003a40:	f3bf 8f4f 	dsb	sy
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003a46:	bf00      	nop
 8003a48:	e7fe      	b.n	8003a48 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d10a      	bne.n	8003a66 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a54:	f383 8811 	msr	BASEPRI, r3
 8003a58:	f3bf 8f6f 	isb	sy
 8003a5c:	f3bf 8f4f 	dsb	sy
 8003a60:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003a62:	bf00      	nop
 8003a64:	e7fe      	b.n	8003a64 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2b00      	cmp	r3, #0
 8003a6a:	d002      	beq.n	8003a72 <xQueueGenericCreateStatic+0x52>
 8003a6c:	68bb      	ldr	r3, [r7, #8]
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d001      	beq.n	8003a76 <xQueueGenericCreateStatic+0x56>
 8003a72:	2301      	movs	r3, #1
 8003a74:	e000      	b.n	8003a78 <xQueueGenericCreateStatic+0x58>
 8003a76:	2300      	movs	r3, #0
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d10a      	bne.n	8003a92 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003a7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a80:	f383 8811 	msr	BASEPRI, r3
 8003a84:	f3bf 8f6f 	isb	sy
 8003a88:	f3bf 8f4f 	dsb	sy
 8003a8c:	623b      	str	r3, [r7, #32]
}
 8003a8e:	bf00      	nop
 8003a90:	e7fe      	b.n	8003a90 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d102      	bne.n	8003a9e <xQueueGenericCreateStatic+0x7e>
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d101      	bne.n	8003aa2 <xQueueGenericCreateStatic+0x82>
 8003a9e:	2301      	movs	r3, #1
 8003aa0:	e000      	b.n	8003aa4 <xQueueGenericCreateStatic+0x84>
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d10a      	bne.n	8003abe <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003aa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003aac:	f383 8811 	msr	BASEPRI, r3
 8003ab0:	f3bf 8f6f 	isb	sy
 8003ab4:	f3bf 8f4f 	dsb	sy
 8003ab8:	61fb      	str	r3, [r7, #28]
}
 8003aba:	bf00      	nop
 8003abc:	e7fe      	b.n	8003abc <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003abe:	2350      	movs	r3, #80	; 0x50
 8003ac0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003ac2:	697b      	ldr	r3, [r7, #20]
 8003ac4:	2b50      	cmp	r3, #80	; 0x50
 8003ac6:	d00a      	beq.n	8003ade <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003ac8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003acc:	f383 8811 	msr	BASEPRI, r3
 8003ad0:	f3bf 8f6f 	isb	sy
 8003ad4:	f3bf 8f4f 	dsb	sy
 8003ad8:	61bb      	str	r3, [r7, #24]
}
 8003ada:	bf00      	nop
 8003adc:	e7fe      	b.n	8003adc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003ade:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003aea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003aec:	2201      	movs	r2, #1
 8003aee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003af2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003af6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003af8:	9300      	str	r3, [sp, #0]
 8003afa:	4613      	mov	r3, r2
 8003afc:	687a      	ldr	r2, [r7, #4]
 8003afe:	68b9      	ldr	r1, [r7, #8]
 8003b00:	68f8      	ldr	r0, [r7, #12]
 8003b02:	f000 f805 	bl	8003b10 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003b06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3730      	adds	r7, #48	; 0x30
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b084      	sub	sp, #16
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
 8003b1c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003b1e:	68bb      	ldr	r3, [r7, #8]
 8003b20:	2b00      	cmp	r3, #0
 8003b22:	d103      	bne.n	8003b2c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003b24:	69bb      	ldr	r3, [r7, #24]
 8003b26:	69ba      	ldr	r2, [r7, #24]
 8003b28:	601a      	str	r2, [r3, #0]
 8003b2a:	e002      	b.n	8003b32 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003b2c:	69bb      	ldr	r3, [r7, #24]
 8003b2e:	687a      	ldr	r2, [r7, #4]
 8003b30:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003b32:	69bb      	ldr	r3, [r7, #24]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003b38:	69bb      	ldr	r3, [r7, #24]
 8003b3a:	68ba      	ldr	r2, [r7, #8]
 8003b3c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003b3e:	2101      	movs	r1, #1
 8003b40:	69b8      	ldr	r0, [r7, #24]
 8003b42:	f7ff ff05 	bl	8003950 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003b46:	69bb      	ldr	r3, [r7, #24]
 8003b48:	78fa      	ldrb	r2, [r7, #3]
 8003b4a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003b4e:	bf00      	nop
 8003b50:	3710      	adds	r7, #16
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bd80      	pop	{r7, pc}
	...

08003b58 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003b58:	b580      	push	{r7, lr}
 8003b5a:	b08e      	sub	sp, #56	; 0x38
 8003b5c:	af00      	add	r7, sp, #0
 8003b5e:	60f8      	str	r0, [r7, #12]
 8003b60:	60b9      	str	r1, [r7, #8]
 8003b62:	607a      	str	r2, [r7, #4]
 8003b64:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003b66:	2300      	movs	r3, #0
 8003b68:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003b6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d10a      	bne.n	8003b8a <xQueueGenericSend+0x32>
	__asm volatile
 8003b74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b78:	f383 8811 	msr	BASEPRI, r3
 8003b7c:	f3bf 8f6f 	isb	sy
 8003b80:	f3bf 8f4f 	dsb	sy
 8003b84:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003b86:	bf00      	nop
 8003b88:	e7fe      	b.n	8003b88 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003b8a:	68bb      	ldr	r3, [r7, #8]
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d103      	bne.n	8003b98 <xQueueGenericSend+0x40>
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d101      	bne.n	8003b9c <xQueueGenericSend+0x44>
 8003b98:	2301      	movs	r3, #1
 8003b9a:	e000      	b.n	8003b9e <xQueueGenericSend+0x46>
 8003b9c:	2300      	movs	r3, #0
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d10a      	bne.n	8003bb8 <xQueueGenericSend+0x60>
	__asm volatile
 8003ba2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ba6:	f383 8811 	msr	BASEPRI, r3
 8003baa:	f3bf 8f6f 	isb	sy
 8003bae:	f3bf 8f4f 	dsb	sy
 8003bb2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003bb4:	bf00      	nop
 8003bb6:	e7fe      	b.n	8003bb6 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	2b02      	cmp	r3, #2
 8003bbc:	d103      	bne.n	8003bc6 <xQueueGenericSend+0x6e>
 8003bbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003bc0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003bc2:	2b01      	cmp	r3, #1
 8003bc4:	d101      	bne.n	8003bca <xQueueGenericSend+0x72>
 8003bc6:	2301      	movs	r3, #1
 8003bc8:	e000      	b.n	8003bcc <xQueueGenericSend+0x74>
 8003bca:	2300      	movs	r3, #0
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d10a      	bne.n	8003be6 <xQueueGenericSend+0x8e>
	__asm volatile
 8003bd0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bd4:	f383 8811 	msr	BASEPRI, r3
 8003bd8:	f3bf 8f6f 	isb	sy
 8003bdc:	f3bf 8f4f 	dsb	sy
 8003be0:	623b      	str	r3, [r7, #32]
}
 8003be2:	bf00      	nop
 8003be4:	e7fe      	b.n	8003be4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003be6:	f001 faed 	bl	80051c4 <xTaskGetSchedulerState>
 8003bea:	4603      	mov	r3, r0
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d102      	bne.n	8003bf6 <xQueueGenericSend+0x9e>
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d101      	bne.n	8003bfa <xQueueGenericSend+0xa2>
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e000      	b.n	8003bfc <xQueueGenericSend+0xa4>
 8003bfa:	2300      	movs	r3, #0
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d10a      	bne.n	8003c16 <xQueueGenericSend+0xbe>
	__asm volatile
 8003c00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c04:	f383 8811 	msr	BASEPRI, r3
 8003c08:	f3bf 8f6f 	isb	sy
 8003c0c:	f3bf 8f4f 	dsb	sy
 8003c10:	61fb      	str	r3, [r7, #28]
}
 8003c12:	bf00      	nop
 8003c14:	e7fe      	b.n	8003c14 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003c16:	f002 f82d 	bl	8005c74 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003c1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003c1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c20:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c22:	429a      	cmp	r2, r3
 8003c24:	d302      	bcc.n	8003c2c <xQueueGenericSend+0xd4>
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	2b02      	cmp	r3, #2
 8003c2a:	d129      	bne.n	8003c80 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003c2c:	683a      	ldr	r2, [r7, #0]
 8003c2e:	68b9      	ldr	r1, [r7, #8]
 8003c30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c32:	f000 fa0b 	bl	800404c <prvCopyDataToQueue>
 8003c36:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003c38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d010      	beq.n	8003c62 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c42:	3324      	adds	r3, #36	; 0x24
 8003c44:	4618      	mov	r0, r3
 8003c46:	f001 f8fb 	bl	8004e40 <xTaskRemoveFromEventList>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d013      	beq.n	8003c78 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003c50:	4b3f      	ldr	r3, [pc, #252]	; (8003d50 <xQueueGenericSend+0x1f8>)
 8003c52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c56:	601a      	str	r2, [r3, #0]
 8003c58:	f3bf 8f4f 	dsb	sy
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	e00a      	b.n	8003c78 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003c62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c64:	2b00      	cmp	r3, #0
 8003c66:	d007      	beq.n	8003c78 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003c68:	4b39      	ldr	r3, [pc, #228]	; (8003d50 <xQueueGenericSend+0x1f8>)
 8003c6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c6e:	601a      	str	r2, [r3, #0]
 8003c70:	f3bf 8f4f 	dsb	sy
 8003c74:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003c78:	f002 f82c 	bl	8005cd4 <vPortExitCritical>
				return pdPASS;
 8003c7c:	2301      	movs	r3, #1
 8003c7e:	e063      	b.n	8003d48 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d103      	bne.n	8003c8e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003c86:	f002 f825 	bl	8005cd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003c8a:	2300      	movs	r3, #0
 8003c8c:	e05c      	b.n	8003d48 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	d106      	bne.n	8003ca2 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c94:	f107 0314 	add.w	r3, r7, #20
 8003c98:	4618      	mov	r0, r3
 8003c9a:	f001 f935 	bl	8004f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ca2:	f002 f817 	bl	8005cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ca6:	f000 fea1 	bl	80049ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003caa:	f001 ffe3 	bl	8005c74 <vPortEnterCritical>
 8003cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cb0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003cb4:	b25b      	sxtb	r3, r3
 8003cb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cba:	d103      	bne.n	8003cc4 <xQueueGenericSend+0x16c>
 8003cbc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cbe:	2200      	movs	r2, #0
 8003cc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cc6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cca:	b25b      	sxtb	r3, r3
 8003ccc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003cd0:	d103      	bne.n	8003cda <xQueueGenericSend+0x182>
 8003cd2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cda:	f001 fffb 	bl	8005cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cde:	1d3a      	adds	r2, r7, #4
 8003ce0:	f107 0314 	add.w	r3, r7, #20
 8003ce4:	4611      	mov	r1, r2
 8003ce6:	4618      	mov	r0, r3
 8003ce8:	f001 f924 	bl	8004f34 <xTaskCheckForTimeOut>
 8003cec:	4603      	mov	r3, r0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d124      	bne.n	8003d3c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003cf2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003cf4:	f000 faa2 	bl	800423c <prvIsQueueFull>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d018      	beq.n	8003d30 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d00:	3310      	adds	r3, #16
 8003d02:	687a      	ldr	r2, [r7, #4]
 8003d04:	4611      	mov	r1, r2
 8003d06:	4618      	mov	r0, r3
 8003d08:	f001 f84a 	bl	8004da0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003d0c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d0e:	f000 fa2d 	bl	800416c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003d12:	f000 fe79 	bl	8004a08 <xTaskResumeAll>
 8003d16:	4603      	mov	r3, r0
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f47f af7c 	bne.w	8003c16 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003d1e:	4b0c      	ldr	r3, [pc, #48]	; (8003d50 <xQueueGenericSend+0x1f8>)
 8003d20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d24:	601a      	str	r2, [r3, #0]
 8003d26:	f3bf 8f4f 	dsb	sy
 8003d2a:	f3bf 8f6f 	isb	sy
 8003d2e:	e772      	b.n	8003c16 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003d30:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d32:	f000 fa1b 	bl	800416c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d36:	f000 fe67 	bl	8004a08 <xTaskResumeAll>
 8003d3a:	e76c      	b.n	8003c16 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003d3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003d3e:	f000 fa15 	bl	800416c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d42:	f000 fe61 	bl	8004a08 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003d46:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3738      	adds	r7, #56	; 0x38
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	bd80      	pop	{r7, pc}
 8003d50:	e000ed04 	.word	0xe000ed04

08003d54 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b090      	sub	sp, #64	; 0x40
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	60f8      	str	r0, [r7, #12]
 8003d5c:	60b9      	str	r1, [r7, #8]
 8003d5e:	607a      	str	r2, [r7, #4]
 8003d60:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003d66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d10a      	bne.n	8003d82 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003d6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d70:	f383 8811 	msr	BASEPRI, r3
 8003d74:	f3bf 8f6f 	isb	sy
 8003d78:	f3bf 8f4f 	dsb	sy
 8003d7c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003d7e:	bf00      	nop
 8003d80:	e7fe      	b.n	8003d80 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d103      	bne.n	8003d90 <xQueueGenericSendFromISR+0x3c>
 8003d88:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8c:	2b00      	cmp	r3, #0
 8003d8e:	d101      	bne.n	8003d94 <xQueueGenericSendFromISR+0x40>
 8003d90:	2301      	movs	r3, #1
 8003d92:	e000      	b.n	8003d96 <xQueueGenericSendFromISR+0x42>
 8003d94:	2300      	movs	r3, #0
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d10a      	bne.n	8003db0 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003dac:	bf00      	nop
 8003dae:	e7fe      	b.n	8003dae <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	2b02      	cmp	r3, #2
 8003db4:	d103      	bne.n	8003dbe <xQueueGenericSendFromISR+0x6a>
 8003db6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003db8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	d101      	bne.n	8003dc2 <xQueueGenericSendFromISR+0x6e>
 8003dbe:	2301      	movs	r3, #1
 8003dc0:	e000      	b.n	8003dc4 <xQueueGenericSendFromISR+0x70>
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d10a      	bne.n	8003dde <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003dc8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dcc:	f383 8811 	msr	BASEPRI, r3
 8003dd0:	f3bf 8f6f 	isb	sy
 8003dd4:	f3bf 8f4f 	dsb	sy
 8003dd8:	623b      	str	r3, [r7, #32]
}
 8003dda:	bf00      	nop
 8003ddc:	e7fe      	b.n	8003ddc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dde:	f002 f82b 	bl	8005e38 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003de2:	f3ef 8211 	mrs	r2, BASEPRI
 8003de6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dea:	f383 8811 	msr	BASEPRI, r3
 8003dee:	f3bf 8f6f 	isb	sy
 8003df2:	f3bf 8f4f 	dsb	sy
 8003df6:	61fa      	str	r2, [r7, #28]
 8003df8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003dfa:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003dfc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e00:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d302      	bcc.n	8003e10 <xQueueGenericSendFromISR+0xbc>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b02      	cmp	r3, #2
 8003e0e:	d12f      	bne.n	8003e70 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003e10:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e12:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003e16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1e:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003e20:	683a      	ldr	r2, [r7, #0]
 8003e22:	68b9      	ldr	r1, [r7, #8]
 8003e24:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003e26:	f000 f911 	bl	800404c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003e2a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003e2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e32:	d112      	bne.n	8003e5a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003e34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d016      	beq.n	8003e6a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003e3c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e3e:	3324      	adds	r3, #36	; 0x24
 8003e40:	4618      	mov	r0, r3
 8003e42:	f000 fffd 	bl	8004e40 <xTaskRemoveFromEventList>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d00e      	beq.n	8003e6a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d00b      	beq.n	8003e6a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	601a      	str	r2, [r3, #0]
 8003e58:	e007      	b.n	8003e6a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003e5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003e5e:	3301      	adds	r3, #1
 8003e60:	b2db      	uxtb	r3, r3
 8003e62:	b25a      	sxtb	r2, r3
 8003e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003e66:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003e6e:	e001      	b.n	8003e74 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003e70:	2300      	movs	r3, #0
 8003e72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003e76:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003e78:	697b      	ldr	r3, [r7, #20]
 8003e7a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003e7e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e80:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3740      	adds	r7, #64	; 0x40
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}
	...

08003e8c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003e8c:	b580      	push	{r7, lr}
 8003e8e:	b08c      	sub	sp, #48	; 0x30
 8003e90:	af00      	add	r7, sp, #0
 8003e92:	60f8      	str	r0, [r7, #12]
 8003e94:	60b9      	str	r1, [r7, #8]
 8003e96:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003e98:	2300      	movs	r3, #0
 8003e9a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003ea0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d10a      	bne.n	8003ebc <xQueueReceive+0x30>
	__asm volatile
 8003ea6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003eaa:	f383 8811 	msr	BASEPRI, r3
 8003eae:	f3bf 8f6f 	isb	sy
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	623b      	str	r3, [r7, #32]
}
 8003eb8:	bf00      	nop
 8003eba:	e7fe      	b.n	8003eba <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	2b00      	cmp	r3, #0
 8003ec0:	d103      	bne.n	8003eca <xQueueReceive+0x3e>
 8003ec2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ec4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d101      	bne.n	8003ece <xQueueReceive+0x42>
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e000      	b.n	8003ed0 <xQueueReceive+0x44>
 8003ece:	2300      	movs	r3, #0
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d10a      	bne.n	8003eea <xQueueReceive+0x5e>
	__asm volatile
 8003ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ed8:	f383 8811 	msr	BASEPRI, r3
 8003edc:	f3bf 8f6f 	isb	sy
 8003ee0:	f3bf 8f4f 	dsb	sy
 8003ee4:	61fb      	str	r3, [r7, #28]
}
 8003ee6:	bf00      	nop
 8003ee8:	e7fe      	b.n	8003ee8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003eea:	f001 f96b 	bl	80051c4 <xTaskGetSchedulerState>
 8003eee:	4603      	mov	r3, r0
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d102      	bne.n	8003efa <xQueueReceive+0x6e>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d101      	bne.n	8003efe <xQueueReceive+0x72>
 8003efa:	2301      	movs	r3, #1
 8003efc:	e000      	b.n	8003f00 <xQueueReceive+0x74>
 8003efe:	2300      	movs	r3, #0
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d10a      	bne.n	8003f1a <xQueueReceive+0x8e>
	__asm volatile
 8003f04:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f08:	f383 8811 	msr	BASEPRI, r3
 8003f0c:	f3bf 8f6f 	isb	sy
 8003f10:	f3bf 8f4f 	dsb	sy
 8003f14:	61bb      	str	r3, [r7, #24]
}
 8003f16:	bf00      	nop
 8003f18:	e7fe      	b.n	8003f18 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003f1a:	f001 feab 	bl	8005c74 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003f1e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f22:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d01f      	beq.n	8003f6a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003f2a:	68b9      	ldr	r1, [r7, #8]
 8003f2c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f2e:	f000 f8f7 	bl	8004120 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f34:	1e5a      	subs	r2, r3, #1
 8003f36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003f3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d00f      	beq.n	8003f62 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003f42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f44:	3310      	adds	r3, #16
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 ff7a 	bl	8004e40 <xTaskRemoveFromEventList>
 8003f4c:	4603      	mov	r3, r0
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d007      	beq.n	8003f62 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003f52:	4b3d      	ldr	r3, [pc, #244]	; (8004048 <xQueueReceive+0x1bc>)
 8003f54:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f58:	601a      	str	r2, [r3, #0]
 8003f5a:	f3bf 8f4f 	dsb	sy
 8003f5e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003f62:	f001 feb7 	bl	8005cd4 <vPortExitCritical>
				return pdPASS;
 8003f66:	2301      	movs	r3, #1
 8003f68:	e069      	b.n	800403e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d103      	bne.n	8003f78 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003f70:	f001 feb0 	bl	8005cd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003f74:	2300      	movs	r3, #0
 8003f76:	e062      	b.n	800403e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003f78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003f7e:	f107 0310 	add.w	r3, r7, #16
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 ffc0 	bl	8004f08 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003f8c:	f001 fea2 	bl	8005cd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003f90:	f000 fd2c 	bl	80049ec <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003f94:	f001 fe6e 	bl	8005c74 <vPortEnterCritical>
 8003f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f9a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003f9e:	b25b      	sxtb	r3, r3
 8003fa0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fa4:	d103      	bne.n	8003fae <xQueueReceive+0x122>
 8003fa6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fa8:	2200      	movs	r2, #0
 8003faa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003fae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fb0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fb4:	b25b      	sxtb	r3, r3
 8003fb6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003fba:	d103      	bne.n	8003fc4 <xQueueReceive+0x138>
 8003fbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003fc4:	f001 fe86 	bl	8005cd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003fc8:	1d3a      	adds	r2, r7, #4
 8003fca:	f107 0310 	add.w	r3, r7, #16
 8003fce:	4611      	mov	r1, r2
 8003fd0:	4618      	mov	r0, r3
 8003fd2:	f000 ffaf 	bl	8004f34 <xTaskCheckForTimeOut>
 8003fd6:	4603      	mov	r3, r0
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d123      	bne.n	8004024 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003fdc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003fde:	f000 f917 	bl	8004210 <prvIsQueueEmpty>
 8003fe2:	4603      	mov	r3, r0
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d017      	beq.n	8004018 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003fea:	3324      	adds	r3, #36	; 0x24
 8003fec:	687a      	ldr	r2, [r7, #4]
 8003fee:	4611      	mov	r1, r2
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fed5 	bl	8004da0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003ff6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003ff8:	f000 f8b8 	bl	800416c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003ffc:	f000 fd04 	bl	8004a08 <xTaskResumeAll>
 8004000:	4603      	mov	r3, r0
 8004002:	2b00      	cmp	r3, #0
 8004004:	d189      	bne.n	8003f1a <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8004006:	4b10      	ldr	r3, [pc, #64]	; (8004048 <xQueueReceive+0x1bc>)
 8004008:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800400c:	601a      	str	r2, [r3, #0]
 800400e:	f3bf 8f4f 	dsb	sy
 8004012:	f3bf 8f6f 	isb	sy
 8004016:	e780      	b.n	8003f1a <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004018:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800401a:	f000 f8a7 	bl	800416c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800401e:	f000 fcf3 	bl	8004a08 <xTaskResumeAll>
 8004022:	e77a      	b.n	8003f1a <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004024:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004026:	f000 f8a1 	bl	800416c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800402a:	f000 fced 	bl	8004a08 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800402e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8004030:	f000 f8ee 	bl	8004210 <prvIsQueueEmpty>
 8004034:	4603      	mov	r3, r0
 8004036:	2b00      	cmp	r3, #0
 8004038:	f43f af6f 	beq.w	8003f1a <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800403c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800403e:	4618      	mov	r0, r3
 8004040:	3730      	adds	r7, #48	; 0x30
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}
 8004046:	bf00      	nop
 8004048:	e000ed04 	.word	0xe000ed04

0800404c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b086      	sub	sp, #24
 8004050:	af00      	add	r7, sp, #0
 8004052:	60f8      	str	r0, [r7, #12]
 8004054:	60b9      	str	r1, [r7, #8]
 8004056:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004058:	2300      	movs	r3, #0
 800405a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004060:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004066:	2b00      	cmp	r3, #0
 8004068:	d10d      	bne.n	8004086 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	2b00      	cmp	r3, #0
 8004070:	d14d      	bne.n	800410e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	4618      	mov	r0, r3
 8004078:	f001 f8c2 	bl	8005200 <xTaskPriorityDisinherit>
 800407c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	2200      	movs	r2, #0
 8004082:	609a      	str	r2, [r3, #8]
 8004084:	e043      	b.n	800410e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	2b00      	cmp	r3, #0
 800408a:	d119      	bne.n	80040c0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	6858      	ldr	r0, [r3, #4]
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004094:	461a      	mov	r2, r3
 8004096:	68b9      	ldr	r1, [r7, #8]
 8004098:	f002 f91e 	bl	80062d8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	685a      	ldr	r2, [r3, #4]
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a4:	441a      	add	r2, r3
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	685a      	ldr	r2, [r3, #4]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d32b      	bcc.n	800410e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	681a      	ldr	r2, [r3, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	605a      	str	r2, [r3, #4]
 80040be:	e026      	b.n	800410e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	68d8      	ldr	r0, [r3, #12]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040c8:	461a      	mov	r2, r3
 80040ca:	68b9      	ldr	r1, [r7, #8]
 80040cc:	f002 f904 	bl	80062d8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	68da      	ldr	r2, [r3, #12]
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	425b      	negs	r3, r3
 80040da:	441a      	add	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	68da      	ldr	r2, [r3, #12]
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	429a      	cmp	r2, r3
 80040ea:	d207      	bcs.n	80040fc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	689a      	ldr	r2, [r3, #8]
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040f4:	425b      	negs	r3, r3
 80040f6:	441a      	add	r2, r3
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d105      	bne.n	800410e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d002      	beq.n	800410e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	3b01      	subs	r3, #1
 800410c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1c5a      	adds	r2, r3, #1
 8004112:	68fb      	ldr	r3, [r7, #12]
 8004114:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8004116:	697b      	ldr	r3, [r7, #20]
}
 8004118:	4618      	mov	r0, r3
 800411a:	3718      	adds	r7, #24
 800411c:	46bd      	mov	sp, r7
 800411e:	bd80      	pop	{r7, pc}

08004120 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004120:	b580      	push	{r7, lr}
 8004122:	b082      	sub	sp, #8
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
 8004128:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800412e:	2b00      	cmp	r3, #0
 8004130:	d018      	beq.n	8004164 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	68da      	ldr	r2, [r3, #12]
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800413a:	441a      	add	r2, r3
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	68da      	ldr	r2, [r3, #12]
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	689b      	ldr	r3, [r3, #8]
 8004148:	429a      	cmp	r2, r3
 800414a:	d303      	bcc.n	8004154 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681a      	ldr	r2, [r3, #0]
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	68d9      	ldr	r1, [r3, #12]
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415c:	461a      	mov	r2, r3
 800415e:	6838      	ldr	r0, [r7, #0]
 8004160:	f002 f8ba 	bl	80062d8 <memcpy>
	}
}
 8004164:	bf00      	nop
 8004166:	3708      	adds	r7, #8
 8004168:	46bd      	mov	sp, r7
 800416a:	bd80      	pop	{r7, pc}

0800416c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004174:	f001 fd7e 	bl	8005c74 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800417e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004180:	e011      	b.n	80041a6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004186:	2b00      	cmp	r3, #0
 8004188:	d012      	beq.n	80041b0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	3324      	adds	r3, #36	; 0x24
 800418e:	4618      	mov	r0, r3
 8004190:	f000 fe56 	bl	8004e40 <xTaskRemoveFromEventList>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d001      	beq.n	800419e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800419a:	f000 ff2d 	bl	8004ff8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800419e:	7bfb      	ldrb	r3, [r7, #15]
 80041a0:	3b01      	subs	r3, #1
 80041a2:	b2db      	uxtb	r3, r3
 80041a4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80041a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	dce9      	bgt.n	8004182 <prvUnlockQueue+0x16>
 80041ae:	e000      	b.n	80041b2 <prvUnlockQueue+0x46>
					break;
 80041b0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	22ff      	movs	r2, #255	; 0xff
 80041b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80041ba:	f001 fd8b 	bl	8005cd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80041be:	f001 fd59 	bl	8005c74 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80041c8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041ca:	e011      	b.n	80041f0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	691b      	ldr	r3, [r3, #16]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d012      	beq.n	80041fa <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	3310      	adds	r3, #16
 80041d8:	4618      	mov	r0, r3
 80041da:	f000 fe31 	bl	8004e40 <xTaskRemoveFromEventList>
 80041de:	4603      	mov	r3, r0
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d001      	beq.n	80041e8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80041e4:	f000 ff08 	bl	8004ff8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80041e8:	7bbb      	ldrb	r3, [r7, #14]
 80041ea:	3b01      	subs	r3, #1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80041f0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	dce9      	bgt.n	80041cc <prvUnlockQueue+0x60>
 80041f8:	e000      	b.n	80041fc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80041fa:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	22ff      	movs	r2, #255	; 0xff
 8004200:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004204:	f001 fd66 	bl	8005cd4 <vPortExitCritical>
}
 8004208:	bf00      	nop
 800420a:	3710      	adds	r7, #16
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}

08004210 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004218:	f001 fd2c 	bl	8005c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004220:	2b00      	cmp	r3, #0
 8004222:	d102      	bne.n	800422a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004224:	2301      	movs	r3, #1
 8004226:	60fb      	str	r3, [r7, #12]
 8004228:	e001      	b.n	800422e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800422a:	2300      	movs	r3, #0
 800422c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800422e:	f001 fd51 	bl	8005cd4 <vPortExitCritical>

	return xReturn;
 8004232:	68fb      	ldr	r3, [r7, #12]
}
 8004234:	4618      	mov	r0, r3
 8004236:	3710      	adds	r7, #16
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}

0800423c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800423c:	b580      	push	{r7, lr}
 800423e:	b084      	sub	sp, #16
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004244:	f001 fd16 	bl	8005c74 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004250:	429a      	cmp	r2, r3
 8004252:	d102      	bne.n	800425a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004254:	2301      	movs	r3, #1
 8004256:	60fb      	str	r3, [r7, #12]
 8004258:	e001      	b.n	800425e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800425a:	2300      	movs	r3, #0
 800425c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800425e:	f001 fd39 	bl	8005cd4 <vPortExitCritical>

	return xReturn;
 8004262:	68fb      	ldr	r3, [r7, #12]
}
 8004264:	4618      	mov	r0, r3
 8004266:	3710      	adds	r7, #16
 8004268:	46bd      	mov	sp, r7
 800426a:	bd80      	pop	{r7, pc}

0800426c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800426c:	b480      	push	{r7}
 800426e:	b085      	sub	sp, #20
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
 8004274:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004276:	2300      	movs	r3, #0
 8004278:	60fb      	str	r3, [r7, #12]
 800427a:	e014      	b.n	80042a6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800427c:	4a0f      	ldr	r2, [pc, #60]	; (80042bc <vQueueAddToRegistry+0x50>)
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10b      	bne.n	80042a0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004288:	490c      	ldr	r1, [pc, #48]	; (80042bc <vQueueAddToRegistry+0x50>)
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004292:	4a0a      	ldr	r2, [pc, #40]	; (80042bc <vQueueAddToRegistry+0x50>)
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	00db      	lsls	r3, r3, #3
 8004298:	4413      	add	r3, r2
 800429a:	687a      	ldr	r2, [r7, #4]
 800429c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800429e:	e006      	b.n	80042ae <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	3301      	adds	r3, #1
 80042a4:	60fb      	str	r3, [r7, #12]
 80042a6:	68fb      	ldr	r3, [r7, #12]
 80042a8:	2b07      	cmp	r3, #7
 80042aa:	d9e7      	bls.n	800427c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80042ac:	bf00      	nop
 80042ae:	bf00      	nop
 80042b0:	3714      	adds	r7, #20
 80042b2:	46bd      	mov	sp, r7
 80042b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b8:	4770      	bx	lr
 80042ba:	bf00      	nop
 80042bc:	200008f0 	.word	0x200008f0

080042c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b086      	sub	sp, #24
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80042d0:	f001 fcd0 	bl	8005c74 <vPortEnterCritical>
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80042da:	b25b      	sxtb	r3, r3
 80042dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042e0:	d103      	bne.n	80042ea <vQueueWaitForMessageRestricted+0x2a>
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2200      	movs	r2, #0
 80042e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80042ea:	697b      	ldr	r3, [r7, #20]
 80042ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80042f0:	b25b      	sxtb	r3, r3
 80042f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80042f6:	d103      	bne.n	8004300 <vQueueWaitForMessageRestricted+0x40>
 80042f8:	697b      	ldr	r3, [r7, #20]
 80042fa:	2200      	movs	r2, #0
 80042fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004300:	f001 fce8 	bl	8005cd4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004304:	697b      	ldr	r3, [r7, #20]
 8004306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	3324      	adds	r3, #36	; 0x24
 8004310:	687a      	ldr	r2, [r7, #4]
 8004312:	68b9      	ldr	r1, [r7, #8]
 8004314:	4618      	mov	r0, r3
 8004316:	f000 fd67 	bl	8004de8 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800431a:	6978      	ldr	r0, [r7, #20]
 800431c:	f7ff ff26 	bl	800416c <prvUnlockQueue>
	}
 8004320:	bf00      	nop
 8004322:	3718      	adds	r7, #24
 8004324:	46bd      	mov	sp, r7
 8004326:	bd80      	pop	{r7, pc}

08004328 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004328:	b580      	push	{r7, lr}
 800432a:	b08e      	sub	sp, #56	; 0x38
 800432c:	af04      	add	r7, sp, #16
 800432e:	60f8      	str	r0, [r7, #12]
 8004330:	60b9      	str	r1, [r7, #8]
 8004332:	607a      	str	r2, [r7, #4]
 8004334:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8004336:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004338:	2b00      	cmp	r3, #0
 800433a:	d10a      	bne.n	8004352 <xTaskCreateStatic+0x2a>
	__asm volatile
 800433c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004340:	f383 8811 	msr	BASEPRI, r3
 8004344:	f3bf 8f6f 	isb	sy
 8004348:	f3bf 8f4f 	dsb	sy
 800434c:	623b      	str	r3, [r7, #32]
}
 800434e:	bf00      	nop
 8004350:	e7fe      	b.n	8004350 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <xTaskCreateStatic+0x46>
	__asm volatile
 8004358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800435c:	f383 8811 	msr	BASEPRI, r3
 8004360:	f3bf 8f6f 	isb	sy
 8004364:	f3bf 8f4f 	dsb	sy
 8004368:	61fb      	str	r3, [r7, #28]
}
 800436a:	bf00      	nop
 800436c:	e7fe      	b.n	800436c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800436e:	23bc      	movs	r3, #188	; 0xbc
 8004370:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	2bbc      	cmp	r3, #188	; 0xbc
 8004376:	d00a      	beq.n	800438e <xTaskCreateStatic+0x66>
	__asm volatile
 8004378:	f04f 0350 	mov.w	r3, #80	; 0x50
 800437c:	f383 8811 	msr	BASEPRI, r3
 8004380:	f3bf 8f6f 	isb	sy
 8004384:	f3bf 8f4f 	dsb	sy
 8004388:	61bb      	str	r3, [r7, #24]
}
 800438a:	bf00      	nop
 800438c:	e7fe      	b.n	800438c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800438e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004390:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004392:	2b00      	cmp	r3, #0
 8004394:	d01e      	beq.n	80043d4 <xTaskCreateStatic+0xac>
 8004396:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004398:	2b00      	cmp	r3, #0
 800439a:	d01b      	beq.n	80043d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800439c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800439e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80043a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80043a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043a8:	2202      	movs	r2, #2
 80043aa:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80043ae:	2300      	movs	r3, #0
 80043b0:	9303      	str	r3, [sp, #12]
 80043b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043b4:	9302      	str	r3, [sp, #8]
 80043b6:	f107 0314 	add.w	r3, r7, #20
 80043ba:	9301      	str	r3, [sp, #4]
 80043bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043be:	9300      	str	r3, [sp, #0]
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	687a      	ldr	r2, [r7, #4]
 80043c4:	68b9      	ldr	r1, [r7, #8]
 80043c6:	68f8      	ldr	r0, [r7, #12]
 80043c8:	f000 f850 	bl	800446c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80043ce:	f000 f8f3 	bl	80045b8 <prvAddNewTaskToReadyList>
 80043d2:	e001      	b.n	80043d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80043d8:	697b      	ldr	r3, [r7, #20]
	}
 80043da:	4618      	mov	r0, r3
 80043dc:	3728      	adds	r7, #40	; 0x28
 80043de:	46bd      	mov	sp, r7
 80043e0:	bd80      	pop	{r7, pc}

080043e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80043e2:	b580      	push	{r7, lr}
 80043e4:	b08c      	sub	sp, #48	; 0x30
 80043e6:	af04      	add	r7, sp, #16
 80043e8:	60f8      	str	r0, [r7, #12]
 80043ea:	60b9      	str	r1, [r7, #8]
 80043ec:	603b      	str	r3, [r7, #0]
 80043ee:	4613      	mov	r3, r2
 80043f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80043f2:	88fb      	ldrh	r3, [r7, #6]
 80043f4:	009b      	lsls	r3, r3, #2
 80043f6:	4618      	mov	r0, r3
 80043f8:	f001 fd5e 	bl	8005eb8 <pvPortMalloc>
 80043fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80043fe:	697b      	ldr	r3, [r7, #20]
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00e      	beq.n	8004422 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8004404:	20bc      	movs	r0, #188	; 0xbc
 8004406:	f001 fd57 	bl	8005eb8 <pvPortMalloc>
 800440a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800440c:	69fb      	ldr	r3, [r7, #28]
 800440e:	2b00      	cmp	r3, #0
 8004410:	d003      	beq.n	800441a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8004412:	69fb      	ldr	r3, [r7, #28]
 8004414:	697a      	ldr	r2, [r7, #20]
 8004416:	631a      	str	r2, [r3, #48]	; 0x30
 8004418:	e005      	b.n	8004426 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800441a:	6978      	ldr	r0, [r7, #20]
 800441c:	f001 fe18 	bl	8006050 <vPortFree>
 8004420:	e001      	b.n	8004426 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8004426:	69fb      	ldr	r3, [r7, #28]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d017      	beq.n	800445c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800442c:	69fb      	ldr	r3, [r7, #28]
 800442e:	2200      	movs	r2, #0
 8004430:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8004434:	88fa      	ldrh	r2, [r7, #6]
 8004436:	2300      	movs	r3, #0
 8004438:	9303      	str	r3, [sp, #12]
 800443a:	69fb      	ldr	r3, [r7, #28]
 800443c:	9302      	str	r3, [sp, #8]
 800443e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004440:	9301      	str	r3, [sp, #4]
 8004442:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004444:	9300      	str	r3, [sp, #0]
 8004446:	683b      	ldr	r3, [r7, #0]
 8004448:	68b9      	ldr	r1, [r7, #8]
 800444a:	68f8      	ldr	r0, [r7, #12]
 800444c:	f000 f80e 	bl	800446c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004450:	69f8      	ldr	r0, [r7, #28]
 8004452:	f000 f8b1 	bl	80045b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004456:	2301      	movs	r3, #1
 8004458:	61bb      	str	r3, [r7, #24]
 800445a:	e002      	b.n	8004462 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800445c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004460:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004462:	69bb      	ldr	r3, [r7, #24]
	}
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800446c:	b580      	push	{r7, lr}
 800446e:	b088      	sub	sp, #32
 8004470:	af00      	add	r7, sp, #0
 8004472:	60f8      	str	r0, [r7, #12]
 8004474:	60b9      	str	r1, [r7, #8]
 8004476:	607a      	str	r2, [r7, #4]
 8004478:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	009b      	lsls	r3, r3, #2
 8004482:	461a      	mov	r2, r3
 8004484:	21a5      	movs	r1, #165	; 0xa5
 8004486:	f001 ff35 	bl	80062f4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800448a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800448c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004494:	3b01      	subs	r3, #1
 8004496:	009b      	lsls	r3, r3, #2
 8004498:	4413      	add	r3, r2
 800449a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800449c:	69bb      	ldr	r3, [r7, #24]
 800449e:	f023 0307 	bic.w	r3, r3, #7
 80044a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80044a4:	69bb      	ldr	r3, [r7, #24]
 80044a6:	f003 0307 	and.w	r3, r3, #7
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d00a      	beq.n	80044c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80044ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044b2:	f383 8811 	msr	BASEPRI, r3
 80044b6:	f3bf 8f6f 	isb	sy
 80044ba:	f3bf 8f4f 	dsb	sy
 80044be:	617b      	str	r3, [r7, #20]
}
 80044c0:	bf00      	nop
 80044c2:	e7fe      	b.n	80044c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d01f      	beq.n	800450a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044ca:	2300      	movs	r3, #0
 80044cc:	61fb      	str	r3, [r7, #28]
 80044ce:	e012      	b.n	80044f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80044d0:	68ba      	ldr	r2, [r7, #8]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	4413      	add	r3, r2
 80044d6:	7819      	ldrb	r1, [r3, #0]
 80044d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044da:	69fb      	ldr	r3, [r7, #28]
 80044dc:	4413      	add	r3, r2
 80044de:	3334      	adds	r3, #52	; 0x34
 80044e0:	460a      	mov	r2, r1
 80044e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80044e4:	68ba      	ldr	r2, [r7, #8]
 80044e6:	69fb      	ldr	r3, [r7, #28]
 80044e8:	4413      	add	r3, r2
 80044ea:	781b      	ldrb	r3, [r3, #0]
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d006      	beq.n	80044fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80044f0:	69fb      	ldr	r3, [r7, #28]
 80044f2:	3301      	adds	r3, #1
 80044f4:	61fb      	str	r3, [r7, #28]
 80044f6:	69fb      	ldr	r3, [r7, #28]
 80044f8:	2b0f      	cmp	r3, #15
 80044fa:	d9e9      	bls.n	80044d0 <prvInitialiseNewTask+0x64>
 80044fc:	e000      	b.n	8004500 <prvInitialiseNewTask+0x94>
			{
				break;
 80044fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004500:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004502:	2200      	movs	r2, #0
 8004504:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004508:	e003      	b.n	8004512 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800450a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800450c:	2200      	movs	r2, #0
 800450e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8004512:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004514:	2b37      	cmp	r3, #55	; 0x37
 8004516:	d901      	bls.n	800451c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004518:	2337      	movs	r3, #55	; 0x37
 800451a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800451c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800451e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004520:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8004522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004524:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004526:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004528:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800452a:	2200      	movs	r2, #0
 800452c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800452e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004530:	3304      	adds	r3, #4
 8004532:	4618      	mov	r0, r3
 8004534:	f7ff f978 	bl	8003828 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004538:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453a:	3318      	adds	r3, #24
 800453c:	4618      	mov	r0, r3
 800453e:	f7ff f973 	bl	8003828 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8004542:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004544:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004546:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004548:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800454a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800454e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004550:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8004552:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004554:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004556:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004558:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800455a:	2200      	movs	r2, #0
 800455c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004560:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004562:	2200      	movs	r2, #0
 8004564:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004568:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800456a:	3354      	adds	r3, #84	; 0x54
 800456c:	2260      	movs	r2, #96	; 0x60
 800456e:	2100      	movs	r1, #0
 8004570:	4618      	mov	r0, r3
 8004572:	f001 febf 	bl	80062f4 <memset>
 8004576:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004578:	4a0c      	ldr	r2, [pc, #48]	; (80045ac <prvInitialiseNewTask+0x140>)
 800457a:	659a      	str	r2, [r3, #88]	; 0x58
 800457c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800457e:	4a0c      	ldr	r2, [pc, #48]	; (80045b0 <prvInitialiseNewTask+0x144>)
 8004580:	65da      	str	r2, [r3, #92]	; 0x5c
 8004582:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004584:	4a0b      	ldr	r2, [pc, #44]	; (80045b4 <prvInitialiseNewTask+0x148>)
 8004586:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004588:	683a      	ldr	r2, [r7, #0]
 800458a:	68f9      	ldr	r1, [r7, #12]
 800458c:	69b8      	ldr	r0, [r7, #24]
 800458e:	f001 fa47 	bl	8005a20 <pxPortInitialiseStack>
 8004592:	4602      	mov	r2, r0
 8004594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004596:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800459a:	2b00      	cmp	r3, #0
 800459c:	d002      	beq.n	80045a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800459e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80045a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045a4:	bf00      	nop
 80045a6:	3720      	adds	r7, #32
 80045a8:	46bd      	mov	sp, r7
 80045aa:	bd80      	pop	{r7, pc}
 80045ac:	080065b4 	.word	0x080065b4
 80045b0:	080065d4 	.word	0x080065d4
 80045b4:	08006594 	.word	0x08006594

080045b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	b082      	sub	sp, #8
 80045bc:	af00      	add	r7, sp, #0
 80045be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80045c0:	f001 fb58 	bl	8005c74 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80045c4:	4b2d      	ldr	r3, [pc, #180]	; (800467c <prvAddNewTaskToReadyList+0xc4>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3301      	adds	r3, #1
 80045ca:	4a2c      	ldr	r2, [pc, #176]	; (800467c <prvAddNewTaskToReadyList+0xc4>)
 80045cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80045ce:	4b2c      	ldr	r3, [pc, #176]	; (8004680 <prvAddNewTaskToReadyList+0xc8>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d109      	bne.n	80045ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80045d6:	4a2a      	ldr	r2, [pc, #168]	; (8004680 <prvAddNewTaskToReadyList+0xc8>)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80045dc:	4b27      	ldr	r3, [pc, #156]	; (800467c <prvAddNewTaskToReadyList+0xc4>)
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	d110      	bne.n	8004606 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80045e4:	f000 fd2c 	bl	8005040 <prvInitialiseTaskLists>
 80045e8:	e00d      	b.n	8004606 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80045ea:	4b26      	ldr	r3, [pc, #152]	; (8004684 <prvAddNewTaskToReadyList+0xcc>)
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d109      	bne.n	8004606 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80045f2:	4b23      	ldr	r3, [pc, #140]	; (8004680 <prvAddNewTaskToReadyList+0xc8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	429a      	cmp	r2, r3
 80045fe:	d802      	bhi.n	8004606 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004600:	4a1f      	ldr	r2, [pc, #124]	; (8004680 <prvAddNewTaskToReadyList+0xc8>)
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004606:	4b20      	ldr	r3, [pc, #128]	; (8004688 <prvAddNewTaskToReadyList+0xd0>)
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	3301      	adds	r3, #1
 800460c:	4a1e      	ldr	r2, [pc, #120]	; (8004688 <prvAddNewTaskToReadyList+0xd0>)
 800460e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004610:	4b1d      	ldr	r3, [pc, #116]	; (8004688 <prvAddNewTaskToReadyList+0xd0>)
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800461c:	4b1b      	ldr	r3, [pc, #108]	; (800468c <prvAddNewTaskToReadyList+0xd4>)
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	429a      	cmp	r2, r3
 8004622:	d903      	bls.n	800462c <prvAddNewTaskToReadyList+0x74>
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004628:	4a18      	ldr	r2, [pc, #96]	; (800468c <prvAddNewTaskToReadyList+0xd4>)
 800462a:	6013      	str	r3, [r2, #0]
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004630:	4613      	mov	r3, r2
 8004632:	009b      	lsls	r3, r3, #2
 8004634:	4413      	add	r3, r2
 8004636:	009b      	lsls	r3, r3, #2
 8004638:	4a15      	ldr	r2, [pc, #84]	; (8004690 <prvAddNewTaskToReadyList+0xd8>)
 800463a:	441a      	add	r2, r3
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	3304      	adds	r3, #4
 8004640:	4619      	mov	r1, r3
 8004642:	4610      	mov	r0, r2
 8004644:	f7ff f8fd 	bl	8003842 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004648:	f001 fb44 	bl	8005cd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800464c:	4b0d      	ldr	r3, [pc, #52]	; (8004684 <prvAddNewTaskToReadyList+0xcc>)
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	2b00      	cmp	r3, #0
 8004652:	d00e      	beq.n	8004672 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004654:	4b0a      	ldr	r3, [pc, #40]	; (8004680 <prvAddNewTaskToReadyList+0xc8>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800465e:	429a      	cmp	r2, r3
 8004660:	d207      	bcs.n	8004672 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004662:	4b0c      	ldr	r3, [pc, #48]	; (8004694 <prvAddNewTaskToReadyList+0xdc>)
 8004664:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004668:	601a      	str	r2, [r3, #0]
 800466a:	f3bf 8f4f 	dsb	sy
 800466e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004672:	bf00      	nop
 8004674:	3708      	adds	r7, #8
 8004676:	46bd      	mov	sp, r7
 8004678:	bd80      	pop	{r7, pc}
 800467a:	bf00      	nop
 800467c:	20000e04 	.word	0x20000e04
 8004680:	20000930 	.word	0x20000930
 8004684:	20000e10 	.word	0x20000e10
 8004688:	20000e20 	.word	0x20000e20
 800468c:	20000e0c 	.word	0x20000e0c
 8004690:	20000934 	.word	0x20000934
 8004694:	e000ed04 	.word	0xe000ed04

08004698 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004698:	b580      	push	{r7, lr}
 800469a:	b084      	sub	sp, #16
 800469c:	af00      	add	r7, sp, #0
 800469e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80046a0:	2300      	movs	r3, #0
 80046a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	d017      	beq.n	80046da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80046aa:	4b13      	ldr	r3, [pc, #76]	; (80046f8 <vTaskDelay+0x60>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d00a      	beq.n	80046c8 <vTaskDelay+0x30>
	__asm volatile
 80046b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046b6:	f383 8811 	msr	BASEPRI, r3
 80046ba:	f3bf 8f6f 	isb	sy
 80046be:	f3bf 8f4f 	dsb	sy
 80046c2:	60bb      	str	r3, [r7, #8]
}
 80046c4:	bf00      	nop
 80046c6:	e7fe      	b.n	80046c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80046c8:	f000 f990 	bl	80049ec <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80046cc:	2100      	movs	r1, #0
 80046ce:	6878      	ldr	r0, [r7, #4]
 80046d0:	f000 fe04 	bl	80052dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80046d4:	f000 f998 	bl	8004a08 <xTaskResumeAll>
 80046d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d107      	bne.n	80046f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80046e0:	4b06      	ldr	r3, [pc, #24]	; (80046fc <vTaskDelay+0x64>)
 80046e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80046e6:	601a      	str	r2, [r3, #0]
 80046e8:	f3bf 8f4f 	dsb	sy
 80046ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80046f0:	bf00      	nop
 80046f2:	3710      	adds	r7, #16
 80046f4:	46bd      	mov	sp, r7
 80046f6:	bd80      	pop	{r7, pc}
 80046f8:	20000e2c 	.word	0x20000e2c
 80046fc:	e000ed04 	.word	0xe000ed04

08004700 <vTaskSuspend>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskSuspend( TaskHandle_t xTaskToSuspend )
	{
 8004700:	b580      	push	{r7, lr}
 8004702:	b084      	sub	sp, #16
 8004704:	af00      	add	r7, sp, #0
 8004706:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8004708:	f001 fab4 	bl	8005c74 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the running task that is
			being suspended. */
			pxTCB = prvGetTCBFromHandle( xTaskToSuspend );
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d102      	bne.n	8004718 <vTaskSuspend+0x18>
 8004712:	4b30      	ldr	r3, [pc, #192]	; (80047d4 <vTaskSuspend+0xd4>)
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	e000      	b.n	800471a <vTaskSuspend+0x1a>
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	60fb      	str	r3, [r7, #12]

			traceTASK_SUSPEND( pxTCB );

			/* Remove task from the ready/delayed list and place in the
			suspended list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	3304      	adds	r3, #4
 8004720:	4618      	mov	r0, r3
 8004722:	f7ff f8eb 	bl	80038fc <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472a:	2b00      	cmp	r3, #0
 800472c:	d004      	beq.n	8004738 <vTaskSuspend+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	3318      	adds	r3, #24
 8004732:	4618      	mov	r0, r3
 8004734:	f7ff f8e2 	bl	80038fc <uxListRemove>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			vListInsertEnd( &xSuspendedTaskList, &( pxTCB->xStateListItem ) );
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	3304      	adds	r3, #4
 800473c:	4619      	mov	r1, r3
 800473e:	4826      	ldr	r0, [pc, #152]	; (80047d8 <vTaskSuspend+0xd8>)
 8004740:	f7ff f87f 	bl	8003842 <vListInsertEnd>

			#if( configUSE_TASK_NOTIFICATIONS == 1 )
			{
				if( pxTCB->ucNotifyState == taskWAITING_NOTIFICATION )
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 800474a:	b2db      	uxtb	r3, r3
 800474c:	2b01      	cmp	r3, #1
 800474e:	d103      	bne.n	8004758 <vTaskSuspend+0x58>
				{
					/* The task was blocked to wait for a notification, but is
					now suspended, so no notification was received. */
					pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8004750:	68fb      	ldr	r3, [r7, #12]
 8004752:	2200      	movs	r2, #0
 8004754:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
				}
			}
			#endif
		}
		taskEXIT_CRITICAL();
 8004758:	f001 fabc 	bl	8005cd4 <vPortExitCritical>

		if( xSchedulerRunning != pdFALSE )
 800475c:	4b1f      	ldr	r3, [pc, #124]	; (80047dc <vTaskSuspend+0xdc>)
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	2b00      	cmp	r3, #0
 8004762:	d005      	beq.n	8004770 <vTaskSuspend+0x70>
		{
			/* Reset the next expected unblock time in case it referred to the
			task that is now in the Suspended state. */
			taskENTER_CRITICAL();
 8004764:	f001 fa86 	bl	8005c74 <vPortEnterCritical>
			{
				prvResetNextTaskUnblockTime();
 8004768:	f000 fd0c 	bl	8005184 <prvResetNextTaskUnblockTime>
			}
			taskEXIT_CRITICAL();
 800476c:	f001 fab2 	bl	8005cd4 <vPortExitCritical>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( pxTCB == pxCurrentTCB )
 8004770:	4b18      	ldr	r3, [pc, #96]	; (80047d4 <vTaskSuspend+0xd4>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	68fa      	ldr	r2, [r7, #12]
 8004776:	429a      	cmp	r2, r3
 8004778:	d127      	bne.n	80047ca <vTaskSuspend+0xca>
		{
			if( xSchedulerRunning != pdFALSE )
 800477a:	4b18      	ldr	r3, [pc, #96]	; (80047dc <vTaskSuspend+0xdc>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d017      	beq.n	80047b2 <vTaskSuspend+0xb2>
			{
				/* The current task has just been suspended. */
				configASSERT( uxSchedulerSuspended == 0 );
 8004782:	4b17      	ldr	r3, [pc, #92]	; (80047e0 <vTaskSuspend+0xe0>)
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d00a      	beq.n	80047a0 <vTaskSuspend+0xa0>
	__asm volatile
 800478a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800478e:	f383 8811 	msr	BASEPRI, r3
 8004792:	f3bf 8f6f 	isb	sy
 8004796:	f3bf 8f4f 	dsb	sy
 800479a:	60bb      	str	r3, [r7, #8]
}
 800479c:	bf00      	nop
 800479e:	e7fe      	b.n	800479e <vTaskSuspend+0x9e>
				portYIELD_WITHIN_API();
 80047a0:	4b10      	ldr	r3, [pc, #64]	; (80047e4 <vTaskSuspend+0xe4>)
 80047a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80047a6:	601a      	str	r2, [r3, #0]
 80047a8:	f3bf 8f4f 	dsb	sy
 80047ac:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80047b0:	e00b      	b.n	80047ca <vTaskSuspend+0xca>
				if( listCURRENT_LIST_LENGTH( &xSuspendedTaskList ) == uxCurrentNumberOfTasks ) /*lint !e931 Right has no side effect, just volatile. */
 80047b2:	4b09      	ldr	r3, [pc, #36]	; (80047d8 <vTaskSuspend+0xd8>)
 80047b4:	681a      	ldr	r2, [r3, #0]
 80047b6:	4b0c      	ldr	r3, [pc, #48]	; (80047e8 <vTaskSuspend+0xe8>)
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d103      	bne.n	80047c6 <vTaskSuspend+0xc6>
					pxCurrentTCB = NULL;
 80047be:	4b05      	ldr	r3, [pc, #20]	; (80047d4 <vTaskSuspend+0xd4>)
 80047c0:	2200      	movs	r2, #0
 80047c2:	601a      	str	r2, [r3, #0]
	}
 80047c4:	e001      	b.n	80047ca <vTaskSuspend+0xca>
					vTaskSwitchContext();
 80047c6:	f000 fa87 	bl	8004cd8 <vTaskSwitchContext>
	}
 80047ca:	bf00      	nop
 80047cc:	3710      	adds	r7, #16
 80047ce:	46bd      	mov	sp, r7
 80047d0:	bd80      	pop	{r7, pc}
 80047d2:	bf00      	nop
 80047d4:	20000930 	.word	0x20000930
 80047d8:	20000df0 	.word	0x20000df0
 80047dc:	20000e10 	.word	0x20000e10
 80047e0:	20000e2c 	.word	0x20000e2c
 80047e4:	e000ed04 	.word	0xe000ed04
 80047e8:	20000e04 	.word	0x20000e04

080047ec <prvTaskIsTaskSuspended>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	static BaseType_t prvTaskIsTaskSuspended( const TaskHandle_t xTask )
	{
 80047ec:	b480      	push	{r7}
 80047ee:	b087      	sub	sp, #28
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn = pdFALSE;
 80047f4:	2300      	movs	r3, #0
 80047f6:	617b      	str	r3, [r7, #20]
	const TCB_t * const pxTCB = xTask;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	613b      	str	r3, [r7, #16]

		/* Accesses xPendingReadyList so must be called from a critical
		section. */

		/* It does not make sense to check if the calling task is suspended. */
		configASSERT( xTask );
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d10a      	bne.n	8004818 <prvTaskIsTaskSuspended+0x2c>
	__asm volatile
 8004802:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004806:	f383 8811 	msr	BASEPRI, r3
 800480a:	f3bf 8f6f 	isb	sy
 800480e:	f3bf 8f4f 	dsb	sy
 8004812:	60fb      	str	r3, [r7, #12]
}
 8004814:	bf00      	nop
 8004816:	e7fe      	b.n	8004816 <prvTaskIsTaskSuspended+0x2a>

		/* Is the task being resumed actually in the suspended list? */
		if( listIS_CONTAINED_WITHIN( &xSuspendedTaskList, &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	695b      	ldr	r3, [r3, #20]
 800481c:	4a0a      	ldr	r2, [pc, #40]	; (8004848 <prvTaskIsTaskSuspended+0x5c>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10a      	bne.n	8004838 <prvTaskIsTaskSuspended+0x4c>
		{
			/* Has the task already been resumed from within an ISR? */
			if( listIS_CONTAINED_WITHIN( &xPendingReadyList, &( pxTCB->xEventListItem ) ) == pdFALSE )
 8004822:	693b      	ldr	r3, [r7, #16]
 8004824:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004826:	4a09      	ldr	r2, [pc, #36]	; (800484c <prvTaskIsTaskSuspended+0x60>)
 8004828:	4293      	cmp	r3, r2
 800482a:	d005      	beq.n	8004838 <prvTaskIsTaskSuspended+0x4c>
			{
				/* Is it in the suspended list because it is in the	Suspended
				state, or because is is blocked with no timeout? */
				if( listIS_CONTAINED_WITHIN( NULL, &( pxTCB->xEventListItem ) ) != pdFALSE ) /*lint !e961.  The cast is only redundant when NULL is used. */
 800482c:	693b      	ldr	r3, [r7, #16]
 800482e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <prvTaskIsTaskSuspended+0x4c>
				{
					xReturn = pdTRUE;
 8004834:	2301      	movs	r3, #1
 8004836:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004838:	697b      	ldr	r3, [r7, #20]
	} /*lint !e818 xTask cannot be a pointer to const because it is a typedef. */
 800483a:	4618      	mov	r0, r3
 800483c:	371c      	adds	r7, #28
 800483e:	46bd      	mov	sp, r7
 8004840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004844:	4770      	bx	lr
 8004846:	bf00      	nop
 8004848:	20000df0 	.word	0x20000df0
 800484c:	20000dc4 	.word	0x20000dc4

08004850 <vTaskResume>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskSuspend == 1 )

	void vTaskResume( TaskHandle_t xTaskToResume )
	{
 8004850:	b580      	push	{r7, lr}
 8004852:	b084      	sub	sp, #16
 8004854:	af00      	add	r7, sp, #0
 8004856:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = xTaskToResume;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	60fb      	str	r3, [r7, #12]

		/* It does not make sense to resume the calling task. */
		configASSERT( xTaskToResume );
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	2b00      	cmp	r3, #0
 8004860:	d10a      	bne.n	8004878 <vTaskResume+0x28>
	__asm volatile
 8004862:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004866:	f383 8811 	msr	BASEPRI, r3
 800486a:	f3bf 8f6f 	isb	sy
 800486e:	f3bf 8f4f 	dsb	sy
 8004872:	60bb      	str	r3, [r7, #8]
}
 8004874:	bf00      	nop
 8004876:	e7fe      	b.n	8004876 <vTaskResume+0x26>

		/* The parameter cannot be NULL as it is impossible to resume the
		currently executing task. */
		if( ( pxTCB != pxCurrentTCB ) && ( pxTCB != NULL ) )
 8004878:	4b20      	ldr	r3, [pc, #128]	; (80048fc <vTaskResume+0xac>)
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	68fa      	ldr	r2, [r7, #12]
 800487e:	429a      	cmp	r2, r3
 8004880:	d038      	beq.n	80048f4 <vTaskResume+0xa4>
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2b00      	cmp	r3, #0
 8004886:	d035      	beq.n	80048f4 <vTaskResume+0xa4>
		{
			taskENTER_CRITICAL();
 8004888:	f001 f9f4 	bl	8005c74 <vPortEnterCritical>
			{
				if( prvTaskIsTaskSuspended( pxTCB ) != pdFALSE )
 800488c:	68f8      	ldr	r0, [r7, #12]
 800488e:	f7ff ffad 	bl	80047ec <prvTaskIsTaskSuspended>
 8004892:	4603      	mov	r3, r0
 8004894:	2b00      	cmp	r3, #0
 8004896:	d02b      	beq.n	80048f0 <vTaskResume+0xa0>
				{
					traceTASK_RESUME( pxTCB );

					/* The ready list can be accessed even if the scheduler is
					suspended because this is inside a critical section. */
					( void ) uxListRemove(  &( pxTCB->xStateListItem ) );
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	3304      	adds	r3, #4
 800489c:	4618      	mov	r0, r3
 800489e:	f7ff f82d 	bl	80038fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048a6:	4b16      	ldr	r3, [pc, #88]	; (8004900 <vTaskResume+0xb0>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	429a      	cmp	r2, r3
 80048ac:	d903      	bls.n	80048b6 <vTaskResume+0x66>
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b2:	4a13      	ldr	r2, [pc, #76]	; (8004900 <vTaskResume+0xb0>)
 80048b4:	6013      	str	r3, [r2, #0]
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048ba:	4613      	mov	r3, r2
 80048bc:	009b      	lsls	r3, r3, #2
 80048be:	4413      	add	r3, r2
 80048c0:	009b      	lsls	r3, r3, #2
 80048c2:	4a10      	ldr	r2, [pc, #64]	; (8004904 <vTaskResume+0xb4>)
 80048c4:	441a      	add	r2, r3
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	3304      	adds	r3, #4
 80048ca:	4619      	mov	r1, r3
 80048cc:	4610      	mov	r0, r2
 80048ce:	f7fe ffb8 	bl	8003842 <vListInsertEnd>

					/* A higher priority task may have just been resumed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80048d6:	4b09      	ldr	r3, [pc, #36]	; (80048fc <vTaskResume+0xac>)
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048dc:	429a      	cmp	r2, r3
 80048de:	d307      	bcc.n	80048f0 <vTaskResume+0xa0>
					{
						/* This yield may not cause the task just resumed to run,
						but will leave the lists in the correct state for the
						next yield. */
						taskYIELD_IF_USING_PREEMPTION();
 80048e0:	4b09      	ldr	r3, [pc, #36]	; (8004908 <vTaskResume+0xb8>)
 80048e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80048e6:	601a      	str	r2, [r3, #0]
 80048e8:	f3bf 8f4f 	dsb	sy
 80048ec:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			taskEXIT_CRITICAL();
 80048f0:	f001 f9f0 	bl	8005cd4 <vPortExitCritical>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80048f4:	bf00      	nop
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}
 80048fc:	20000930 	.word	0x20000930
 8004900:	20000e0c 	.word	0x20000e0c
 8004904:	20000934 	.word	0x20000934
 8004908:	e000ed04 	.word	0xe000ed04

0800490c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b08a      	sub	sp, #40	; 0x28
 8004910:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004912:	2300      	movs	r3, #0
 8004914:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004916:	2300      	movs	r3, #0
 8004918:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800491a:	463a      	mov	r2, r7
 800491c:	1d39      	adds	r1, r7, #4
 800491e:	f107 0308 	add.w	r3, r7, #8
 8004922:	4618      	mov	r0, r3
 8004924:	f7fe ff2c 	bl	8003780 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004928:	6839      	ldr	r1, [r7, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	68ba      	ldr	r2, [r7, #8]
 800492e:	9202      	str	r2, [sp, #8]
 8004930:	9301      	str	r3, [sp, #4]
 8004932:	2300      	movs	r3, #0
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	2300      	movs	r3, #0
 8004938:	460a      	mov	r2, r1
 800493a:	4924      	ldr	r1, [pc, #144]	; (80049cc <vTaskStartScheduler+0xc0>)
 800493c:	4824      	ldr	r0, [pc, #144]	; (80049d0 <vTaskStartScheduler+0xc4>)
 800493e:	f7ff fcf3 	bl	8004328 <xTaskCreateStatic>
 8004942:	4603      	mov	r3, r0
 8004944:	4a23      	ldr	r2, [pc, #140]	; (80049d4 <vTaskStartScheduler+0xc8>)
 8004946:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004948:	4b22      	ldr	r3, [pc, #136]	; (80049d4 <vTaskStartScheduler+0xc8>)
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d002      	beq.n	8004956 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004950:	2301      	movs	r3, #1
 8004952:	617b      	str	r3, [r7, #20]
 8004954:	e001      	b.n	800495a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004956:	2300      	movs	r3, #0
 8004958:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	2b01      	cmp	r3, #1
 800495e:	d102      	bne.n	8004966 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004960:	f000 fd10 	bl	8005384 <xTimerCreateTimerTask>
 8004964:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	2b01      	cmp	r3, #1
 800496a:	d11b      	bne.n	80049a4 <vTaskStartScheduler+0x98>
	__asm volatile
 800496c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004970:	f383 8811 	msr	BASEPRI, r3
 8004974:	f3bf 8f6f 	isb	sy
 8004978:	f3bf 8f4f 	dsb	sy
 800497c:	613b      	str	r3, [r7, #16]
}
 800497e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004980:	4b15      	ldr	r3, [pc, #84]	; (80049d8 <vTaskStartScheduler+0xcc>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3354      	adds	r3, #84	; 0x54
 8004986:	4a15      	ldr	r2, [pc, #84]	; (80049dc <vTaskStartScheduler+0xd0>)
 8004988:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800498a:	4b15      	ldr	r3, [pc, #84]	; (80049e0 <vTaskStartScheduler+0xd4>)
 800498c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004990:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004992:	4b14      	ldr	r3, [pc, #80]	; (80049e4 <vTaskStartScheduler+0xd8>)
 8004994:	2201      	movs	r2, #1
 8004996:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004998:	4b13      	ldr	r3, [pc, #76]	; (80049e8 <vTaskStartScheduler+0xdc>)
 800499a:	2200      	movs	r2, #0
 800499c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800499e:	f001 f8c7 	bl	8005b30 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80049a2:	e00e      	b.n	80049c2 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80049a4:	697b      	ldr	r3, [r7, #20]
 80049a6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049aa:	d10a      	bne.n	80049c2 <vTaskStartScheduler+0xb6>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	60fb      	str	r3, [r7, #12]
}
 80049be:	bf00      	nop
 80049c0:	e7fe      	b.n	80049c0 <vTaskStartScheduler+0xb4>
}
 80049c2:	bf00      	nop
 80049c4:	3718      	adds	r7, #24
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	080064ec 	.word	0x080064ec
 80049d0:	08005011 	.word	0x08005011
 80049d4:	20000e28 	.word	0x20000e28
 80049d8:	20000930 	.word	0x20000930
 80049dc:	20000010 	.word	0x20000010
 80049e0:	20000e24 	.word	0x20000e24
 80049e4:	20000e10 	.word	0x20000e10
 80049e8:	20000e08 	.word	0x20000e08

080049ec <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80049ec:	b480      	push	{r7}
 80049ee:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80049f0:	4b04      	ldr	r3, [pc, #16]	; (8004a04 <vTaskSuspendAll+0x18>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	3301      	adds	r3, #1
 80049f6:	4a03      	ldr	r2, [pc, #12]	; (8004a04 <vTaskSuspendAll+0x18>)
 80049f8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80049fa:	bf00      	nop
 80049fc:	46bd      	mov	sp, r7
 80049fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a02:	4770      	bx	lr
 8004a04:	20000e2c 	.word	0x20000e2c

08004a08 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004a08:	b580      	push	{r7, lr}
 8004a0a:	b084      	sub	sp, #16
 8004a0c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004a0e:	2300      	movs	r3, #0
 8004a10:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004a12:	2300      	movs	r3, #0
 8004a14:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004a16:	4b42      	ldr	r3, [pc, #264]	; (8004b20 <xTaskResumeAll+0x118>)
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d10a      	bne.n	8004a34 <xTaskResumeAll+0x2c>
	__asm volatile
 8004a1e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a22:	f383 8811 	msr	BASEPRI, r3
 8004a26:	f3bf 8f6f 	isb	sy
 8004a2a:	f3bf 8f4f 	dsb	sy
 8004a2e:	603b      	str	r3, [r7, #0]
}
 8004a30:	bf00      	nop
 8004a32:	e7fe      	b.n	8004a32 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004a34:	f001 f91e 	bl	8005c74 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004a38:	4b39      	ldr	r3, [pc, #228]	; (8004b20 <xTaskResumeAll+0x118>)
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	3b01      	subs	r3, #1
 8004a3e:	4a38      	ldr	r2, [pc, #224]	; (8004b20 <xTaskResumeAll+0x118>)
 8004a40:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004a42:	4b37      	ldr	r3, [pc, #220]	; (8004b20 <xTaskResumeAll+0x118>)
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	2b00      	cmp	r3, #0
 8004a48:	d162      	bne.n	8004b10 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004a4a:	4b36      	ldr	r3, [pc, #216]	; (8004b24 <xTaskResumeAll+0x11c>)
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d05e      	beq.n	8004b10 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004a52:	e02f      	b.n	8004ab4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a54:	4b34      	ldr	r3, [pc, #208]	; (8004b28 <xTaskResumeAll+0x120>)
 8004a56:	68db      	ldr	r3, [r3, #12]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	3318      	adds	r3, #24
 8004a60:	4618      	mov	r0, r3
 8004a62:	f7fe ff4b 	bl	80038fc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	3304      	adds	r3, #4
 8004a6a:	4618      	mov	r0, r3
 8004a6c:	f7fe ff46 	bl	80038fc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a74:	4b2d      	ldr	r3, [pc, #180]	; (8004b2c <xTaskResumeAll+0x124>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	429a      	cmp	r2, r3
 8004a7a:	d903      	bls.n	8004a84 <xTaskResumeAll+0x7c>
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a80:	4a2a      	ldr	r2, [pc, #168]	; (8004b2c <xTaskResumeAll+0x124>)
 8004a82:	6013      	str	r3, [r2, #0]
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a88:	4613      	mov	r3, r2
 8004a8a:	009b      	lsls	r3, r3, #2
 8004a8c:	4413      	add	r3, r2
 8004a8e:	009b      	lsls	r3, r3, #2
 8004a90:	4a27      	ldr	r2, [pc, #156]	; (8004b30 <xTaskResumeAll+0x128>)
 8004a92:	441a      	add	r2, r3
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	3304      	adds	r3, #4
 8004a98:	4619      	mov	r1, r3
 8004a9a:	4610      	mov	r0, r2
 8004a9c:	f7fe fed1 	bl	8003842 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004aa4:	4b23      	ldr	r3, [pc, #140]	; (8004b34 <xTaskResumeAll+0x12c>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d302      	bcc.n	8004ab4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004aae:	4b22      	ldr	r3, [pc, #136]	; (8004b38 <xTaskResumeAll+0x130>)
 8004ab0:	2201      	movs	r2, #1
 8004ab2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004ab4:	4b1c      	ldr	r3, [pc, #112]	; (8004b28 <xTaskResumeAll+0x120>)
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d1cb      	bne.n	8004a54 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d001      	beq.n	8004ac6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004ac2:	f000 fb5f 	bl	8005184 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004ac6:	4b1d      	ldr	r3, [pc, #116]	; (8004b3c <xTaskResumeAll+0x134>)
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	d010      	beq.n	8004af4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004ad2:	f000 f847 	bl	8004b64 <xTaskIncrementTick>
 8004ad6:	4603      	mov	r3, r0
 8004ad8:	2b00      	cmp	r3, #0
 8004ada:	d002      	beq.n	8004ae2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004adc:	4b16      	ldr	r3, [pc, #88]	; (8004b38 <xTaskResumeAll+0x130>)
 8004ade:	2201      	movs	r2, #1
 8004ae0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	3b01      	subs	r3, #1
 8004ae6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d1f1      	bne.n	8004ad2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004aee:	4b13      	ldr	r3, [pc, #76]	; (8004b3c <xTaskResumeAll+0x134>)
 8004af0:	2200      	movs	r2, #0
 8004af2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004af4:	4b10      	ldr	r3, [pc, #64]	; (8004b38 <xTaskResumeAll+0x130>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d009      	beq.n	8004b10 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004afc:	2301      	movs	r3, #1
 8004afe:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004b00:	4b0f      	ldr	r3, [pc, #60]	; (8004b40 <xTaskResumeAll+0x138>)
 8004b02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b06:	601a      	str	r2, [r3, #0]
 8004b08:	f3bf 8f4f 	dsb	sy
 8004b0c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004b10:	f001 f8e0 	bl	8005cd4 <vPortExitCritical>

	return xAlreadyYielded;
 8004b14:	68bb      	ldr	r3, [r7, #8]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3710      	adds	r7, #16
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	bd80      	pop	{r7, pc}
 8004b1e:	bf00      	nop
 8004b20:	20000e2c 	.word	0x20000e2c
 8004b24:	20000e04 	.word	0x20000e04
 8004b28:	20000dc4 	.word	0x20000dc4
 8004b2c:	20000e0c 	.word	0x20000e0c
 8004b30:	20000934 	.word	0x20000934
 8004b34:	20000930 	.word	0x20000930
 8004b38:	20000e18 	.word	0x20000e18
 8004b3c:	20000e14 	.word	0x20000e14
 8004b40:	e000ed04 	.word	0xe000ed04

08004b44 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004b44:	b480      	push	{r7}
 8004b46:	b083      	sub	sp, #12
 8004b48:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004b4a:	4b05      	ldr	r3, [pc, #20]	; (8004b60 <xTaskGetTickCount+0x1c>)
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004b50:	687b      	ldr	r3, [r7, #4]
}
 8004b52:	4618      	mov	r0, r3
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
 8004b5e:	bf00      	nop
 8004b60:	20000e08 	.word	0x20000e08

08004b64 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004b64:	b580      	push	{r7, lr}
 8004b66:	b086      	sub	sp, #24
 8004b68:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004b6a:	2300      	movs	r3, #0
 8004b6c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004b6e:	4b4f      	ldr	r3, [pc, #316]	; (8004cac <xTaskIncrementTick+0x148>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	f040 808f 	bne.w	8004c96 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004b78:	4b4d      	ldr	r3, [pc, #308]	; (8004cb0 <xTaskIncrementTick+0x14c>)
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	3301      	adds	r3, #1
 8004b7e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004b80:	4a4b      	ldr	r2, [pc, #300]	; (8004cb0 <xTaskIncrementTick+0x14c>)
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004b86:	693b      	ldr	r3, [r7, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d120      	bne.n	8004bce <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004b8c:	4b49      	ldr	r3, [pc, #292]	; (8004cb4 <xTaskIncrementTick+0x150>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d00a      	beq.n	8004bac <xTaskIncrementTick+0x48>
	__asm volatile
 8004b96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b9a:	f383 8811 	msr	BASEPRI, r3
 8004b9e:	f3bf 8f6f 	isb	sy
 8004ba2:	f3bf 8f4f 	dsb	sy
 8004ba6:	603b      	str	r3, [r7, #0]
}
 8004ba8:	bf00      	nop
 8004baa:	e7fe      	b.n	8004baa <xTaskIncrementTick+0x46>
 8004bac:	4b41      	ldr	r3, [pc, #260]	; (8004cb4 <xTaskIncrementTick+0x150>)
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	60fb      	str	r3, [r7, #12]
 8004bb2:	4b41      	ldr	r3, [pc, #260]	; (8004cb8 <xTaskIncrementTick+0x154>)
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	4a3f      	ldr	r2, [pc, #252]	; (8004cb4 <xTaskIncrementTick+0x150>)
 8004bb8:	6013      	str	r3, [r2, #0]
 8004bba:	4a3f      	ldr	r2, [pc, #252]	; (8004cb8 <xTaskIncrementTick+0x154>)
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	6013      	str	r3, [r2, #0]
 8004bc0:	4b3e      	ldr	r3, [pc, #248]	; (8004cbc <xTaskIncrementTick+0x158>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	3301      	adds	r3, #1
 8004bc6:	4a3d      	ldr	r2, [pc, #244]	; (8004cbc <xTaskIncrementTick+0x158>)
 8004bc8:	6013      	str	r3, [r2, #0]
 8004bca:	f000 fadb 	bl	8005184 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004bce:	4b3c      	ldr	r3, [pc, #240]	; (8004cc0 <xTaskIncrementTick+0x15c>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	429a      	cmp	r2, r3
 8004bd6:	d349      	bcc.n	8004c6c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004bd8:	4b36      	ldr	r3, [pc, #216]	; (8004cb4 <xTaskIncrementTick+0x150>)
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d104      	bne.n	8004bec <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004be2:	4b37      	ldr	r3, [pc, #220]	; (8004cc0 <xTaskIncrementTick+0x15c>)
 8004be4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004be8:	601a      	str	r2, [r3, #0]
					break;
 8004bea:	e03f      	b.n	8004c6c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bec:	4b31      	ldr	r3, [pc, #196]	; (8004cb4 <xTaskIncrementTick+0x150>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	68db      	ldr	r3, [r3, #12]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004bf6:	68bb      	ldr	r3, [r7, #8]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004bfc:	693a      	ldr	r2, [r7, #16]
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d203      	bcs.n	8004c0c <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004c04:	4a2e      	ldr	r2, [pc, #184]	; (8004cc0 <xTaskIncrementTick+0x15c>)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004c0a:	e02f      	b.n	8004c6c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	3304      	adds	r3, #4
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fe fe73 	bl	80038fc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004c16:	68bb      	ldr	r3, [r7, #8]
 8004c18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d004      	beq.n	8004c28 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c1e:	68bb      	ldr	r3, [r7, #8]
 8004c20:	3318      	adds	r3, #24
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fe fe6a 	bl	80038fc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c2c:	4b25      	ldr	r3, [pc, #148]	; (8004cc4 <xTaskIncrementTick+0x160>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d903      	bls.n	8004c3c <xTaskIncrementTick+0xd8>
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c38:	4a22      	ldr	r2, [pc, #136]	; (8004cc4 <xTaskIncrementTick+0x160>)
 8004c3a:	6013      	str	r3, [r2, #0]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c40:	4613      	mov	r3, r2
 8004c42:	009b      	lsls	r3, r3, #2
 8004c44:	4413      	add	r3, r2
 8004c46:	009b      	lsls	r3, r3, #2
 8004c48:	4a1f      	ldr	r2, [pc, #124]	; (8004cc8 <xTaskIncrementTick+0x164>)
 8004c4a:	441a      	add	r2, r3
 8004c4c:	68bb      	ldr	r3, [r7, #8]
 8004c4e:	3304      	adds	r3, #4
 8004c50:	4619      	mov	r1, r3
 8004c52:	4610      	mov	r0, r2
 8004c54:	f7fe fdf5 	bl	8003842 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c58:	68bb      	ldr	r3, [r7, #8]
 8004c5a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5c:	4b1b      	ldr	r3, [pc, #108]	; (8004ccc <xTaskIncrementTick+0x168>)
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c62:	429a      	cmp	r2, r3
 8004c64:	d3b8      	bcc.n	8004bd8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004c66:	2301      	movs	r3, #1
 8004c68:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c6a:	e7b5      	b.n	8004bd8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004c6c:	4b17      	ldr	r3, [pc, #92]	; (8004ccc <xTaskIncrementTick+0x168>)
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c72:	4915      	ldr	r1, [pc, #84]	; (8004cc8 <xTaskIncrementTick+0x164>)
 8004c74:	4613      	mov	r3, r2
 8004c76:	009b      	lsls	r3, r3, #2
 8004c78:	4413      	add	r3, r2
 8004c7a:	009b      	lsls	r3, r3, #2
 8004c7c:	440b      	add	r3, r1
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	2b01      	cmp	r3, #1
 8004c82:	d901      	bls.n	8004c88 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004c84:	2301      	movs	r3, #1
 8004c86:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004c88:	4b11      	ldr	r3, [pc, #68]	; (8004cd0 <xTaskIncrementTick+0x16c>)
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	2b00      	cmp	r3, #0
 8004c8e:	d007      	beq.n	8004ca0 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004c90:	2301      	movs	r3, #1
 8004c92:	617b      	str	r3, [r7, #20]
 8004c94:	e004      	b.n	8004ca0 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004c96:	4b0f      	ldr	r3, [pc, #60]	; (8004cd4 <xTaskIncrementTick+0x170>)
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	4a0d      	ldr	r2, [pc, #52]	; (8004cd4 <xTaskIncrementTick+0x170>)
 8004c9e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004ca0:	697b      	ldr	r3, [r7, #20]
}
 8004ca2:	4618      	mov	r0, r3
 8004ca4:	3718      	adds	r7, #24
 8004ca6:	46bd      	mov	sp, r7
 8004ca8:	bd80      	pop	{r7, pc}
 8004caa:	bf00      	nop
 8004cac:	20000e2c 	.word	0x20000e2c
 8004cb0:	20000e08 	.word	0x20000e08
 8004cb4:	20000dbc 	.word	0x20000dbc
 8004cb8:	20000dc0 	.word	0x20000dc0
 8004cbc:	20000e1c 	.word	0x20000e1c
 8004cc0:	20000e24 	.word	0x20000e24
 8004cc4:	20000e0c 	.word	0x20000e0c
 8004cc8:	20000934 	.word	0x20000934
 8004ccc:	20000930 	.word	0x20000930
 8004cd0:	20000e18 	.word	0x20000e18
 8004cd4:	20000e14 	.word	0x20000e14

08004cd8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004cde:	4b2a      	ldr	r3, [pc, #168]	; (8004d88 <vTaskSwitchContext+0xb0>)
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d003      	beq.n	8004cee <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004ce6:	4b29      	ldr	r3, [pc, #164]	; (8004d8c <vTaskSwitchContext+0xb4>)
 8004ce8:	2201      	movs	r2, #1
 8004cea:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004cec:	e046      	b.n	8004d7c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004cee:	4b27      	ldr	r3, [pc, #156]	; (8004d8c <vTaskSwitchContext+0xb4>)
 8004cf0:	2200      	movs	r2, #0
 8004cf2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004cf4:	4b26      	ldr	r3, [pc, #152]	; (8004d90 <vTaskSwitchContext+0xb8>)
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	e010      	b.n	8004d1e <vTaskSwitchContext+0x46>
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d10a      	bne.n	8004d18 <vTaskSwitchContext+0x40>
	__asm volatile
 8004d02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d06:	f383 8811 	msr	BASEPRI, r3
 8004d0a:	f3bf 8f6f 	isb	sy
 8004d0e:	f3bf 8f4f 	dsb	sy
 8004d12:	607b      	str	r3, [r7, #4]
}
 8004d14:	bf00      	nop
 8004d16:	e7fe      	b.n	8004d16 <vTaskSwitchContext+0x3e>
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	60fb      	str	r3, [r7, #12]
 8004d1e:	491d      	ldr	r1, [pc, #116]	; (8004d94 <vTaskSwitchContext+0xbc>)
 8004d20:	68fa      	ldr	r2, [r7, #12]
 8004d22:	4613      	mov	r3, r2
 8004d24:	009b      	lsls	r3, r3, #2
 8004d26:	4413      	add	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	440b      	add	r3, r1
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d0e4      	beq.n	8004cfc <vTaskSwitchContext+0x24>
 8004d32:	68fa      	ldr	r2, [r7, #12]
 8004d34:	4613      	mov	r3, r2
 8004d36:	009b      	lsls	r3, r3, #2
 8004d38:	4413      	add	r3, r2
 8004d3a:	009b      	lsls	r3, r3, #2
 8004d3c:	4a15      	ldr	r2, [pc, #84]	; (8004d94 <vTaskSwitchContext+0xbc>)
 8004d3e:	4413      	add	r3, r2
 8004d40:	60bb      	str	r3, [r7, #8]
 8004d42:	68bb      	ldr	r3, [r7, #8]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	685a      	ldr	r2, [r3, #4]
 8004d48:	68bb      	ldr	r3, [r7, #8]
 8004d4a:	605a      	str	r2, [r3, #4]
 8004d4c:	68bb      	ldr	r3, [r7, #8]
 8004d4e:	685a      	ldr	r2, [r3, #4]
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	3308      	adds	r3, #8
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d104      	bne.n	8004d62 <vTaskSwitchContext+0x8a>
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	685a      	ldr	r2, [r3, #4]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	605a      	str	r2, [r3, #4]
 8004d62:	68bb      	ldr	r3, [r7, #8]
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68db      	ldr	r3, [r3, #12]
 8004d68:	4a0b      	ldr	r2, [pc, #44]	; (8004d98 <vTaskSwitchContext+0xc0>)
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4a08      	ldr	r2, [pc, #32]	; (8004d90 <vTaskSwitchContext+0xb8>)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004d72:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <vTaskSwitchContext+0xc0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	3354      	adds	r3, #84	; 0x54
 8004d78:	4a08      	ldr	r2, [pc, #32]	; (8004d9c <vTaskSwitchContext+0xc4>)
 8004d7a:	6013      	str	r3, [r2, #0]
}
 8004d7c:	bf00      	nop
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	20000e2c 	.word	0x20000e2c
 8004d8c:	20000e18 	.word	0x20000e18
 8004d90:	20000e0c 	.word	0x20000e0c
 8004d94:	20000934 	.word	0x20000934
 8004d98:	20000930 	.word	0x20000930
 8004d9c:	20000010 	.word	0x20000010

08004da0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004da0:	b580      	push	{r7, lr}
 8004da2:	b084      	sub	sp, #16
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	d10a      	bne.n	8004dc6 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004db0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db4:	f383 8811 	msr	BASEPRI, r3
 8004db8:	f3bf 8f6f 	isb	sy
 8004dbc:	f3bf 8f4f 	dsb	sy
 8004dc0:	60fb      	str	r3, [r7, #12]
}
 8004dc2:	bf00      	nop
 8004dc4:	e7fe      	b.n	8004dc4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004dc6:	4b07      	ldr	r3, [pc, #28]	; (8004de4 <vTaskPlaceOnEventList+0x44>)
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	3318      	adds	r3, #24
 8004dcc:	4619      	mov	r1, r3
 8004dce:	6878      	ldr	r0, [r7, #4]
 8004dd0:	f7fe fd5b 	bl	800388a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004dd4:	2101      	movs	r1, #1
 8004dd6:	6838      	ldr	r0, [r7, #0]
 8004dd8:	f000 fa80 	bl	80052dc <prvAddCurrentTaskToDelayedList>
}
 8004ddc:	bf00      	nop
 8004dde:	3710      	adds	r7, #16
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}
 8004de4:	20000930 	.word	0x20000930

08004de8 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d10a      	bne.n	8004e10 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004dfa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004dfe:	f383 8811 	msr	BASEPRI, r3
 8004e02:	f3bf 8f6f 	isb	sy
 8004e06:	f3bf 8f4f 	dsb	sy
 8004e0a:	617b      	str	r3, [r7, #20]
}
 8004e0c:	bf00      	nop
 8004e0e:	e7fe      	b.n	8004e0e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004e10:	4b0a      	ldr	r3, [pc, #40]	; (8004e3c <vTaskPlaceOnEventListRestricted+0x54>)
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	3318      	adds	r3, #24
 8004e16:	4619      	mov	r1, r3
 8004e18:	68f8      	ldr	r0, [r7, #12]
 8004e1a:	f7fe fd12 	bl	8003842 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d002      	beq.n	8004e2a <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004e24:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e28:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	68b8      	ldr	r0, [r7, #8]
 8004e2e:	f000 fa55 	bl	80052dc <prvAddCurrentTaskToDelayedList>
	}
 8004e32:	bf00      	nop
 8004e34:	3718      	adds	r7, #24
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}
 8004e3a:	bf00      	nop
 8004e3c:	20000930 	.word	0x20000930

08004e40 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004e40:	b580      	push	{r7, lr}
 8004e42:	b086      	sub	sp, #24
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	68db      	ldr	r3, [r3, #12]
 8004e4c:	68db      	ldr	r3, [r3, #12]
 8004e4e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004e50:	693b      	ldr	r3, [r7, #16]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d10a      	bne.n	8004e6c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004e56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004e5a:	f383 8811 	msr	BASEPRI, r3
 8004e5e:	f3bf 8f6f 	isb	sy
 8004e62:	f3bf 8f4f 	dsb	sy
 8004e66:	60fb      	str	r3, [r7, #12]
}
 8004e68:	bf00      	nop
 8004e6a:	e7fe      	b.n	8004e6a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	3318      	adds	r3, #24
 8004e70:	4618      	mov	r0, r3
 8004e72:	f7fe fd43 	bl	80038fc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004e76:	4b1e      	ldr	r3, [pc, #120]	; (8004ef0 <xTaskRemoveFromEventList+0xb0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d11d      	bne.n	8004eba <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004e7e:	693b      	ldr	r3, [r7, #16]
 8004e80:	3304      	adds	r3, #4
 8004e82:	4618      	mov	r0, r3
 8004e84:	f7fe fd3a 	bl	80038fc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e8c:	4b19      	ldr	r3, [pc, #100]	; (8004ef4 <xTaskRemoveFromEventList+0xb4>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	429a      	cmp	r2, r3
 8004e92:	d903      	bls.n	8004e9c <xTaskRemoveFromEventList+0x5c>
 8004e94:	693b      	ldr	r3, [r7, #16]
 8004e96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e98:	4a16      	ldr	r2, [pc, #88]	; (8004ef4 <xTaskRemoveFromEventList+0xb4>)
 8004e9a:	6013      	str	r3, [r2, #0]
 8004e9c:	693b      	ldr	r3, [r7, #16]
 8004e9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ea0:	4613      	mov	r3, r2
 8004ea2:	009b      	lsls	r3, r3, #2
 8004ea4:	4413      	add	r3, r2
 8004ea6:	009b      	lsls	r3, r3, #2
 8004ea8:	4a13      	ldr	r2, [pc, #76]	; (8004ef8 <xTaskRemoveFromEventList+0xb8>)
 8004eaa:	441a      	add	r2, r3
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	3304      	adds	r3, #4
 8004eb0:	4619      	mov	r1, r3
 8004eb2:	4610      	mov	r0, r2
 8004eb4:	f7fe fcc5 	bl	8003842 <vListInsertEnd>
 8004eb8:	e005      	b.n	8004ec6 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	3318      	adds	r3, #24
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	480e      	ldr	r0, [pc, #56]	; (8004efc <xTaskRemoveFromEventList+0xbc>)
 8004ec2:	f7fe fcbe 	bl	8003842 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004ec6:	693b      	ldr	r3, [r7, #16]
 8004ec8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004eca:	4b0d      	ldr	r3, [pc, #52]	; (8004f00 <xTaskRemoveFromEventList+0xc0>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d905      	bls.n	8004ee0 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004ed8:	4b0a      	ldr	r3, [pc, #40]	; (8004f04 <xTaskRemoveFromEventList+0xc4>)
 8004eda:	2201      	movs	r2, #1
 8004edc:	601a      	str	r2, [r3, #0]
 8004ede:	e001      	b.n	8004ee4 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004ee4:	697b      	ldr	r3, [r7, #20]
}
 8004ee6:	4618      	mov	r0, r3
 8004ee8:	3718      	adds	r7, #24
 8004eea:	46bd      	mov	sp, r7
 8004eec:	bd80      	pop	{r7, pc}
 8004eee:	bf00      	nop
 8004ef0:	20000e2c 	.word	0x20000e2c
 8004ef4:	20000e0c 	.word	0x20000e0c
 8004ef8:	20000934 	.word	0x20000934
 8004efc:	20000dc4 	.word	0x20000dc4
 8004f00:	20000930 	.word	0x20000930
 8004f04:	20000e18 	.word	0x20000e18

08004f08 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b083      	sub	sp, #12
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004f10:	4b06      	ldr	r3, [pc, #24]	; (8004f2c <vTaskInternalSetTimeOutState+0x24>)
 8004f12:	681a      	ldr	r2, [r3, #0]
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <vTaskInternalSetTimeOutState+0x28>)
 8004f1a:	681a      	ldr	r2, [r3, #0]
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	605a      	str	r2, [r3, #4]
}
 8004f20:	bf00      	nop
 8004f22:	370c      	adds	r7, #12
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	20000e1c 	.word	0x20000e1c
 8004f30:	20000e08 	.word	0x20000e08

08004f34 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b088      	sub	sp, #32
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
 8004f3c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d10a      	bne.n	8004f5a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004f44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f48:	f383 8811 	msr	BASEPRI, r3
 8004f4c:	f3bf 8f6f 	isb	sy
 8004f50:	f3bf 8f4f 	dsb	sy
 8004f54:	613b      	str	r3, [r7, #16]
}
 8004f56:	bf00      	nop
 8004f58:	e7fe      	b.n	8004f58 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004f5a:	683b      	ldr	r3, [r7, #0]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60fb      	str	r3, [r7, #12]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004f76:	f000 fe7d 	bl	8005c74 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004f7a:	4b1d      	ldr	r3, [pc, #116]	; (8004ff0 <xTaskCheckForTimeOut+0xbc>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	685b      	ldr	r3, [r3, #4]
 8004f84:	69ba      	ldr	r2, [r7, #24]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004f8a:	683b      	ldr	r3, [r7, #0]
 8004f8c:	681b      	ldr	r3, [r3, #0]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004f92:	d102      	bne.n	8004f9a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004f94:	2300      	movs	r3, #0
 8004f96:	61fb      	str	r3, [r7, #28]
 8004f98:	e023      	b.n	8004fe2 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681a      	ldr	r2, [r3, #0]
 8004f9e:	4b15      	ldr	r3, [pc, #84]	; (8004ff4 <xTaskCheckForTimeOut+0xc0>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d007      	beq.n	8004fb6 <xTaskCheckForTimeOut+0x82>
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	685b      	ldr	r3, [r3, #4]
 8004faa:	69ba      	ldr	r2, [r7, #24]
 8004fac:	429a      	cmp	r2, r3
 8004fae:	d302      	bcc.n	8004fb6 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	61fb      	str	r3, [r7, #28]
 8004fb4:	e015      	b.n	8004fe2 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004fb6:	683b      	ldr	r3, [r7, #0]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	697a      	ldr	r2, [r7, #20]
 8004fbc:	429a      	cmp	r2, r3
 8004fbe:	d20b      	bcs.n	8004fd8 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	681a      	ldr	r2, [r3, #0]
 8004fc4:	697b      	ldr	r3, [r7, #20]
 8004fc6:	1ad2      	subs	r2, r2, r3
 8004fc8:	683b      	ldr	r3, [r7, #0]
 8004fca:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f7ff ff9b 	bl	8004f08 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004fd2:	2300      	movs	r3, #0
 8004fd4:	61fb      	str	r3, [r7, #28]
 8004fd6:	e004      	b.n	8004fe2 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004fd8:	683b      	ldr	r3, [r7, #0]
 8004fda:	2200      	movs	r2, #0
 8004fdc:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004fde:	2301      	movs	r3, #1
 8004fe0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004fe2:	f000 fe77 	bl	8005cd4 <vPortExitCritical>

	return xReturn;
 8004fe6:	69fb      	ldr	r3, [r7, #28]
}
 8004fe8:	4618      	mov	r0, r3
 8004fea:	3720      	adds	r7, #32
 8004fec:	46bd      	mov	sp, r7
 8004fee:	bd80      	pop	{r7, pc}
 8004ff0:	20000e08 	.word	0x20000e08
 8004ff4:	20000e1c 	.word	0x20000e1c

08004ff8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004ffc:	4b03      	ldr	r3, [pc, #12]	; (800500c <vTaskMissedYield+0x14>)
 8004ffe:	2201      	movs	r2, #1
 8005000:	601a      	str	r2, [r3, #0]
}
 8005002:	bf00      	nop
 8005004:	46bd      	mov	sp, r7
 8005006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500a:	4770      	bx	lr
 800500c:	20000e18 	.word	0x20000e18

08005010 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8005010:	b580      	push	{r7, lr}
 8005012:	b082      	sub	sp, #8
 8005014:	af00      	add	r7, sp, #0
 8005016:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8005018:	f000 f852 	bl	80050c0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800501c:	4b06      	ldr	r3, [pc, #24]	; (8005038 <prvIdleTask+0x28>)
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	2b01      	cmp	r3, #1
 8005022:	d9f9      	bls.n	8005018 <prvIdleTask+0x8>
			{
				taskYIELD();
 8005024:	4b05      	ldr	r3, [pc, #20]	; (800503c <prvIdleTask+0x2c>)
 8005026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800502a:	601a      	str	r2, [r3, #0]
 800502c:	f3bf 8f4f 	dsb	sy
 8005030:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8005034:	e7f0      	b.n	8005018 <prvIdleTask+0x8>
 8005036:	bf00      	nop
 8005038:	20000934 	.word	0x20000934
 800503c:	e000ed04 	.word	0xe000ed04

08005040 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b082      	sub	sp, #8
 8005044:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005046:	2300      	movs	r3, #0
 8005048:	607b      	str	r3, [r7, #4]
 800504a:	e00c      	b.n	8005066 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800504c:	687a      	ldr	r2, [r7, #4]
 800504e:	4613      	mov	r3, r2
 8005050:	009b      	lsls	r3, r3, #2
 8005052:	4413      	add	r3, r2
 8005054:	009b      	lsls	r3, r3, #2
 8005056:	4a12      	ldr	r2, [pc, #72]	; (80050a0 <prvInitialiseTaskLists+0x60>)
 8005058:	4413      	add	r3, r2
 800505a:	4618      	mov	r0, r3
 800505c:	f7fe fbc4 	bl	80037e8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005060:	687b      	ldr	r3, [r7, #4]
 8005062:	3301      	adds	r3, #1
 8005064:	607b      	str	r3, [r7, #4]
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2b37      	cmp	r3, #55	; 0x37
 800506a:	d9ef      	bls.n	800504c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800506c:	480d      	ldr	r0, [pc, #52]	; (80050a4 <prvInitialiseTaskLists+0x64>)
 800506e:	f7fe fbbb 	bl	80037e8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005072:	480d      	ldr	r0, [pc, #52]	; (80050a8 <prvInitialiseTaskLists+0x68>)
 8005074:	f7fe fbb8 	bl	80037e8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005078:	480c      	ldr	r0, [pc, #48]	; (80050ac <prvInitialiseTaskLists+0x6c>)
 800507a:	f7fe fbb5 	bl	80037e8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800507e:	480c      	ldr	r0, [pc, #48]	; (80050b0 <prvInitialiseTaskLists+0x70>)
 8005080:	f7fe fbb2 	bl	80037e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005084:	480b      	ldr	r0, [pc, #44]	; (80050b4 <prvInitialiseTaskLists+0x74>)
 8005086:	f7fe fbaf 	bl	80037e8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800508a:	4b0b      	ldr	r3, [pc, #44]	; (80050b8 <prvInitialiseTaskLists+0x78>)
 800508c:	4a05      	ldr	r2, [pc, #20]	; (80050a4 <prvInitialiseTaskLists+0x64>)
 800508e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005090:	4b0a      	ldr	r3, [pc, #40]	; (80050bc <prvInitialiseTaskLists+0x7c>)
 8005092:	4a05      	ldr	r2, [pc, #20]	; (80050a8 <prvInitialiseTaskLists+0x68>)
 8005094:	601a      	str	r2, [r3, #0]
}
 8005096:	bf00      	nop
 8005098:	3708      	adds	r7, #8
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000934 	.word	0x20000934
 80050a4:	20000d94 	.word	0x20000d94
 80050a8:	20000da8 	.word	0x20000da8
 80050ac:	20000dc4 	.word	0x20000dc4
 80050b0:	20000dd8 	.word	0x20000dd8
 80050b4:	20000df0 	.word	0x20000df0
 80050b8:	20000dbc 	.word	0x20000dbc
 80050bc:	20000dc0 	.word	0x20000dc0

080050c0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b082      	sub	sp, #8
 80050c4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050c6:	e019      	b.n	80050fc <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80050c8:	f000 fdd4 	bl	8005c74 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80050cc:	4b10      	ldr	r3, [pc, #64]	; (8005110 <prvCheckTasksWaitingTermination+0x50>)
 80050ce:	68db      	ldr	r3, [r3, #12]
 80050d0:	68db      	ldr	r3, [r3, #12]
 80050d2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	3304      	adds	r3, #4
 80050d8:	4618      	mov	r0, r3
 80050da:	f7fe fc0f 	bl	80038fc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80050de:	4b0d      	ldr	r3, [pc, #52]	; (8005114 <prvCheckTasksWaitingTermination+0x54>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	3b01      	subs	r3, #1
 80050e4:	4a0b      	ldr	r2, [pc, #44]	; (8005114 <prvCheckTasksWaitingTermination+0x54>)
 80050e6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80050e8:	4b0b      	ldr	r3, [pc, #44]	; (8005118 <prvCheckTasksWaitingTermination+0x58>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	3b01      	subs	r3, #1
 80050ee:	4a0a      	ldr	r2, [pc, #40]	; (8005118 <prvCheckTasksWaitingTermination+0x58>)
 80050f0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80050f2:	f000 fdef 	bl	8005cd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80050f6:	6878      	ldr	r0, [r7, #4]
 80050f8:	f000 f810 	bl	800511c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80050fc:	4b06      	ldr	r3, [pc, #24]	; (8005118 <prvCheckTasksWaitingTermination+0x58>)
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d1e1      	bne.n	80050c8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8005104:	bf00      	nop
 8005106:	bf00      	nop
 8005108:	3708      	adds	r7, #8
 800510a:	46bd      	mov	sp, r7
 800510c:	bd80      	pop	{r7, pc}
 800510e:	bf00      	nop
 8005110:	20000dd8 	.word	0x20000dd8
 8005114:	20000e04 	.word	0x20000e04
 8005118:	20000dec 	.word	0x20000dec

0800511c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800511c:	b580      	push	{r7, lr}
 800511e:	b084      	sub	sp, #16
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	3354      	adds	r3, #84	; 0x54
 8005128:	4618      	mov	r0, r3
 800512a:	f001 f8f9 	bl	8006320 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005134:	2b00      	cmp	r3, #0
 8005136:	d108      	bne.n	800514a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800513c:	4618      	mov	r0, r3
 800513e:	f000 ff87 	bl	8006050 <vPortFree>
				vPortFree( pxTCB );
 8005142:	6878      	ldr	r0, [r7, #4]
 8005144:	f000 ff84 	bl	8006050 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8005148:	e018      	b.n	800517c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005150:	2b01      	cmp	r3, #1
 8005152:	d103      	bne.n	800515c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005154:	6878      	ldr	r0, [r7, #4]
 8005156:	f000 ff7b 	bl	8006050 <vPortFree>
	}
 800515a:	e00f      	b.n	800517c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005162:	2b02      	cmp	r3, #2
 8005164:	d00a      	beq.n	800517c <prvDeleteTCB+0x60>
	__asm volatile
 8005166:	f04f 0350 	mov.w	r3, #80	; 0x50
 800516a:	f383 8811 	msr	BASEPRI, r3
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f3bf 8f4f 	dsb	sy
 8005176:	60fb      	str	r3, [r7, #12]
}
 8005178:	bf00      	nop
 800517a:	e7fe      	b.n	800517a <prvDeleteTCB+0x5e>
	}
 800517c:	bf00      	nop
 800517e:	3710      	adds	r7, #16
 8005180:	46bd      	mov	sp, r7
 8005182:	bd80      	pop	{r7, pc}

08005184 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005184:	b480      	push	{r7}
 8005186:	b083      	sub	sp, #12
 8005188:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800518a:	4b0c      	ldr	r3, [pc, #48]	; (80051bc <prvResetNextTaskUnblockTime+0x38>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d104      	bne.n	800519e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005194:	4b0a      	ldr	r3, [pc, #40]	; (80051c0 <prvResetNextTaskUnblockTime+0x3c>)
 8005196:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800519a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800519c:	e008      	b.n	80051b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800519e:	4b07      	ldr	r3, [pc, #28]	; (80051bc <prvResetNextTaskUnblockTime+0x38>)
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	68db      	ldr	r3, [r3, #12]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	685b      	ldr	r3, [r3, #4]
 80051ac:	4a04      	ldr	r2, [pc, #16]	; (80051c0 <prvResetNextTaskUnblockTime+0x3c>)
 80051ae:	6013      	str	r3, [r2, #0]
}
 80051b0:	bf00      	nop
 80051b2:	370c      	adds	r7, #12
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000dbc 	.word	0x20000dbc
 80051c0:	20000e24 	.word	0x20000e24

080051c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80051ca:	4b0b      	ldr	r3, [pc, #44]	; (80051f8 <xTaskGetSchedulerState+0x34>)
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d102      	bne.n	80051d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80051d2:	2301      	movs	r3, #1
 80051d4:	607b      	str	r3, [r7, #4]
 80051d6:	e008      	b.n	80051ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80051d8:	4b08      	ldr	r3, [pc, #32]	; (80051fc <xTaskGetSchedulerState+0x38>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d102      	bne.n	80051e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80051e0:	2302      	movs	r3, #2
 80051e2:	607b      	str	r3, [r7, #4]
 80051e4:	e001      	b.n	80051ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80051e6:	2300      	movs	r3, #0
 80051e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80051ea:	687b      	ldr	r3, [r7, #4]
	}
 80051ec:	4618      	mov	r0, r3
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr
 80051f8:	20000e10 	.word	0x20000e10
 80051fc:	20000e2c 	.word	0x20000e2c

08005200 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800520c:	2300      	movs	r3, #0
 800520e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2b00      	cmp	r3, #0
 8005214:	d056      	beq.n	80052c4 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8005216:	4b2e      	ldr	r3, [pc, #184]	; (80052d0 <xTaskPriorityDisinherit+0xd0>)
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	693a      	ldr	r2, [r7, #16]
 800521c:	429a      	cmp	r2, r3
 800521e:	d00a      	beq.n	8005236 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005224:	f383 8811 	msr	BASEPRI, r3
 8005228:	f3bf 8f6f 	isb	sy
 800522c:	f3bf 8f4f 	dsb	sy
 8005230:	60fb      	str	r3, [r7, #12]
}
 8005232:	bf00      	nop
 8005234:	e7fe      	b.n	8005234 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8005236:	693b      	ldr	r3, [r7, #16]
 8005238:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800523a:	2b00      	cmp	r3, #0
 800523c:	d10a      	bne.n	8005254 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800523e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005242:	f383 8811 	msr	BASEPRI, r3
 8005246:	f3bf 8f6f 	isb	sy
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	60bb      	str	r3, [r7, #8]
}
 8005250:	bf00      	nop
 8005252:	e7fe      	b.n	8005252 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005254:	693b      	ldr	r3, [r7, #16]
 8005256:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005258:	1e5a      	subs	r2, r3, #1
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800525e:	693b      	ldr	r3, [r7, #16]
 8005260:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005266:	429a      	cmp	r2, r3
 8005268:	d02c      	beq.n	80052c4 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800526a:	693b      	ldr	r3, [r7, #16]
 800526c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800526e:	2b00      	cmp	r3, #0
 8005270:	d128      	bne.n	80052c4 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005272:	693b      	ldr	r3, [r7, #16]
 8005274:	3304      	adds	r3, #4
 8005276:	4618      	mov	r0, r3
 8005278:	f7fe fb40 	bl	80038fc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800527c:	693b      	ldr	r3, [r7, #16]
 800527e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005288:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800528c:	693b      	ldr	r3, [r7, #16]
 800528e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005290:	693b      	ldr	r3, [r7, #16]
 8005292:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005294:	4b0f      	ldr	r3, [pc, #60]	; (80052d4 <xTaskPriorityDisinherit+0xd4>)
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	429a      	cmp	r2, r3
 800529a:	d903      	bls.n	80052a4 <xTaskPriorityDisinherit+0xa4>
 800529c:	693b      	ldr	r3, [r7, #16]
 800529e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a0:	4a0c      	ldr	r2, [pc, #48]	; (80052d4 <xTaskPriorityDisinherit+0xd4>)
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	693b      	ldr	r3, [r7, #16]
 80052a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80052a8:	4613      	mov	r3, r2
 80052aa:	009b      	lsls	r3, r3, #2
 80052ac:	4413      	add	r3, r2
 80052ae:	009b      	lsls	r3, r3, #2
 80052b0:	4a09      	ldr	r2, [pc, #36]	; (80052d8 <xTaskPriorityDisinherit+0xd8>)
 80052b2:	441a      	add	r2, r3
 80052b4:	693b      	ldr	r3, [r7, #16]
 80052b6:	3304      	adds	r3, #4
 80052b8:	4619      	mov	r1, r3
 80052ba:	4610      	mov	r0, r2
 80052bc:	f7fe fac1 	bl	8003842 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80052c0:	2301      	movs	r3, #1
 80052c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80052c4:	697b      	ldr	r3, [r7, #20]
	}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3718      	adds	r7, #24
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20000930 	.word	0x20000930
 80052d4:	20000e0c 	.word	0x20000e0c
 80052d8:	20000934 	.word	0x20000934

080052dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
 80052e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80052e6:	4b21      	ldr	r3, [pc, #132]	; (800536c <prvAddCurrentTaskToDelayedList+0x90>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80052ec:	4b20      	ldr	r3, [pc, #128]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	3304      	adds	r3, #4
 80052f2:	4618      	mov	r0, r3
 80052f4:	f7fe fb02 	bl	80038fc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80052fe:	d10a      	bne.n	8005316 <prvAddCurrentTaskToDelayedList+0x3a>
 8005300:	683b      	ldr	r3, [r7, #0]
 8005302:	2b00      	cmp	r3, #0
 8005304:	d007      	beq.n	8005316 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005306:	4b1a      	ldr	r3, [pc, #104]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005308:	681b      	ldr	r3, [r3, #0]
 800530a:	3304      	adds	r3, #4
 800530c:	4619      	mov	r1, r3
 800530e:	4819      	ldr	r0, [pc, #100]	; (8005374 <prvAddCurrentTaskToDelayedList+0x98>)
 8005310:	f7fe fa97 	bl	8003842 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005314:	e026      	b.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005316:	68fa      	ldr	r2, [r7, #12]
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	4413      	add	r3, r2
 800531c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800531e:	4b14      	ldr	r3, [pc, #80]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	68ba      	ldr	r2, [r7, #8]
 8005324:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005326:	68ba      	ldr	r2, [r7, #8]
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	429a      	cmp	r2, r3
 800532c:	d209      	bcs.n	8005342 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800532e:	4b12      	ldr	r3, [pc, #72]	; (8005378 <prvAddCurrentTaskToDelayedList+0x9c>)
 8005330:	681a      	ldr	r2, [r3, #0]
 8005332:	4b0f      	ldr	r3, [pc, #60]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	3304      	adds	r3, #4
 8005338:	4619      	mov	r1, r3
 800533a:	4610      	mov	r0, r2
 800533c:	f7fe faa5 	bl	800388a <vListInsert>
}
 8005340:	e010      	b.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005342:	4b0e      	ldr	r3, [pc, #56]	; (800537c <prvAddCurrentTaskToDelayedList+0xa0>)
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <prvAddCurrentTaskToDelayedList+0x94>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	3304      	adds	r3, #4
 800534c:	4619      	mov	r1, r3
 800534e:	4610      	mov	r0, r2
 8005350:	f7fe fa9b 	bl	800388a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005354:	4b0a      	ldr	r3, [pc, #40]	; (8005380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	68ba      	ldr	r2, [r7, #8]
 800535a:	429a      	cmp	r2, r3
 800535c:	d202      	bcs.n	8005364 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800535e:	4a08      	ldr	r2, [pc, #32]	; (8005380 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005360:	68bb      	ldr	r3, [r7, #8]
 8005362:	6013      	str	r3, [r2, #0]
}
 8005364:	bf00      	nop
 8005366:	3710      	adds	r7, #16
 8005368:	46bd      	mov	sp, r7
 800536a:	bd80      	pop	{r7, pc}
 800536c:	20000e08 	.word	0x20000e08
 8005370:	20000930 	.word	0x20000930
 8005374:	20000df0 	.word	0x20000df0
 8005378:	20000dc0 	.word	0x20000dc0
 800537c:	20000dbc 	.word	0x20000dbc
 8005380:	20000e24 	.word	0x20000e24

08005384 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	; 0x28
 8005388:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800538a:	2300      	movs	r3, #0
 800538c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800538e:	f000 fb07 	bl	80059a0 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005392:	4b1c      	ldr	r3, [pc, #112]	; (8005404 <xTimerCreateTimerTask+0x80>)
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d021      	beq.n	80053de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800539e:	2300      	movs	r3, #0
 80053a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80053a2:	1d3a      	adds	r2, r7, #4
 80053a4:	f107 0108 	add.w	r1, r7, #8
 80053a8:	f107 030c 	add.w	r3, r7, #12
 80053ac:	4618      	mov	r0, r3
 80053ae:	f7fe fa01 	bl	80037b4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80053b2:	6879      	ldr	r1, [r7, #4]
 80053b4:	68bb      	ldr	r3, [r7, #8]
 80053b6:	68fa      	ldr	r2, [r7, #12]
 80053b8:	9202      	str	r2, [sp, #8]
 80053ba:	9301      	str	r3, [sp, #4]
 80053bc:	2302      	movs	r3, #2
 80053be:	9300      	str	r3, [sp, #0]
 80053c0:	2300      	movs	r3, #0
 80053c2:	460a      	mov	r2, r1
 80053c4:	4910      	ldr	r1, [pc, #64]	; (8005408 <xTimerCreateTimerTask+0x84>)
 80053c6:	4811      	ldr	r0, [pc, #68]	; (800540c <xTimerCreateTimerTask+0x88>)
 80053c8:	f7fe ffae 	bl	8004328 <xTaskCreateStatic>
 80053cc:	4603      	mov	r3, r0
 80053ce:	4a10      	ldr	r2, [pc, #64]	; (8005410 <xTimerCreateTimerTask+0x8c>)
 80053d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80053d2:	4b0f      	ldr	r3, [pc, #60]	; (8005410 <xTimerCreateTimerTask+0x8c>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d001      	beq.n	80053de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80053da:	2301      	movs	r3, #1
 80053dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d10a      	bne.n	80053fa <xTimerCreateTimerTask+0x76>
	__asm volatile
 80053e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e8:	f383 8811 	msr	BASEPRI, r3
 80053ec:	f3bf 8f6f 	isb	sy
 80053f0:	f3bf 8f4f 	dsb	sy
 80053f4:	613b      	str	r3, [r7, #16]
}
 80053f6:	bf00      	nop
 80053f8:	e7fe      	b.n	80053f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80053fa:	697b      	ldr	r3, [r7, #20]
}
 80053fc:	4618      	mov	r0, r3
 80053fe:	3718      	adds	r7, #24
 8005400:	46bd      	mov	sp, r7
 8005402:	bd80      	pop	{r7, pc}
 8005404:	20000e60 	.word	0x20000e60
 8005408:	080064f4 	.word	0x080064f4
 800540c:	08005549 	.word	0x08005549
 8005410:	20000e64 	.word	0x20000e64

08005414 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005414:	b580      	push	{r7, lr}
 8005416:	b08a      	sub	sp, #40	; 0x28
 8005418:	af00      	add	r7, sp, #0
 800541a:	60f8      	str	r0, [r7, #12]
 800541c:	60b9      	str	r1, [r7, #8]
 800541e:	607a      	str	r2, [r7, #4]
 8005420:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005422:	2300      	movs	r3, #0
 8005424:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2b00      	cmp	r3, #0
 800542a:	d10a      	bne.n	8005442 <xTimerGenericCommand+0x2e>
	__asm volatile
 800542c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005430:	f383 8811 	msr	BASEPRI, r3
 8005434:	f3bf 8f6f 	isb	sy
 8005438:	f3bf 8f4f 	dsb	sy
 800543c:	623b      	str	r3, [r7, #32]
}
 800543e:	bf00      	nop
 8005440:	e7fe      	b.n	8005440 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005442:	4b1a      	ldr	r3, [pc, #104]	; (80054ac <xTimerGenericCommand+0x98>)
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d02a      	beq.n	80054a0 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800544a:	68bb      	ldr	r3, [r7, #8]
 800544c:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005456:	68bb      	ldr	r3, [r7, #8]
 8005458:	2b05      	cmp	r3, #5
 800545a:	dc18      	bgt.n	800548e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800545c:	f7ff feb2 	bl	80051c4 <xTaskGetSchedulerState>
 8005460:	4603      	mov	r3, r0
 8005462:	2b02      	cmp	r3, #2
 8005464:	d109      	bne.n	800547a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005466:	4b11      	ldr	r3, [pc, #68]	; (80054ac <xTimerGenericCommand+0x98>)
 8005468:	6818      	ldr	r0, [r3, #0]
 800546a:	f107 0110 	add.w	r1, r7, #16
 800546e:	2300      	movs	r3, #0
 8005470:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005472:	f7fe fb71 	bl	8003b58 <xQueueGenericSend>
 8005476:	6278      	str	r0, [r7, #36]	; 0x24
 8005478:	e012      	b.n	80054a0 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800547a:	4b0c      	ldr	r3, [pc, #48]	; (80054ac <xTimerGenericCommand+0x98>)
 800547c:	6818      	ldr	r0, [r3, #0]
 800547e:	f107 0110 	add.w	r1, r7, #16
 8005482:	2300      	movs	r3, #0
 8005484:	2200      	movs	r2, #0
 8005486:	f7fe fb67 	bl	8003b58 <xQueueGenericSend>
 800548a:	6278      	str	r0, [r7, #36]	; 0x24
 800548c:	e008      	b.n	80054a0 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800548e:	4b07      	ldr	r3, [pc, #28]	; (80054ac <xTimerGenericCommand+0x98>)
 8005490:	6818      	ldr	r0, [r3, #0]
 8005492:	f107 0110 	add.w	r1, r7, #16
 8005496:	2300      	movs	r3, #0
 8005498:	683a      	ldr	r2, [r7, #0]
 800549a:	f7fe fc5b 	bl	8003d54 <xQueueGenericSendFromISR>
 800549e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80054a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80054a2:	4618      	mov	r0, r3
 80054a4:	3728      	adds	r7, #40	; 0x28
 80054a6:	46bd      	mov	sp, r7
 80054a8:	bd80      	pop	{r7, pc}
 80054aa:	bf00      	nop
 80054ac:	20000e60 	.word	0x20000e60

080054b0 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80054b0:	b580      	push	{r7, lr}
 80054b2:	b088      	sub	sp, #32
 80054b4:	af02      	add	r7, sp, #8
 80054b6:	6078      	str	r0, [r7, #4]
 80054b8:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80054ba:	4b22      	ldr	r3, [pc, #136]	; (8005544 <prvProcessExpiredTimer+0x94>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	3304      	adds	r3, #4
 80054c8:	4618      	mov	r0, r3
 80054ca:	f7fe fa17 	bl	80038fc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80054d4:	f003 0304 	and.w	r3, r3, #4
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d022      	beq.n	8005522 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80054dc:	697b      	ldr	r3, [r7, #20]
 80054de:	699a      	ldr	r2, [r3, #24]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	18d1      	adds	r1, r2, r3
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	683a      	ldr	r2, [r7, #0]
 80054e8:	6978      	ldr	r0, [r7, #20]
 80054ea:	f000 f8d1 	bl	8005690 <prvInsertTimerInActiveList>
 80054ee:	4603      	mov	r3, r0
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d01f      	beq.n	8005534 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80054f4:	2300      	movs	r3, #0
 80054f6:	9300      	str	r3, [sp, #0]
 80054f8:	2300      	movs	r3, #0
 80054fa:	687a      	ldr	r2, [r7, #4]
 80054fc:	2100      	movs	r1, #0
 80054fe:	6978      	ldr	r0, [r7, #20]
 8005500:	f7ff ff88 	bl	8005414 <xTimerGenericCommand>
 8005504:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8005506:	693b      	ldr	r3, [r7, #16]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d113      	bne.n	8005534 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	60fb      	str	r3, [r7, #12]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005528:	f023 0301 	bic.w	r3, r3, #1
 800552c:	b2da      	uxtb	r2, r3
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005534:	697b      	ldr	r3, [r7, #20]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	6978      	ldr	r0, [r7, #20]
 800553a:	4798      	blx	r3
}
 800553c:	bf00      	nop
 800553e:	3718      	adds	r7, #24
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000e58 	.word	0x20000e58

08005548 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8005548:	b580      	push	{r7, lr}
 800554a:	b084      	sub	sp, #16
 800554c:	af00      	add	r7, sp, #0
 800554e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005550:	f107 0308 	add.w	r3, r7, #8
 8005554:	4618      	mov	r0, r3
 8005556:	f000 f857 	bl	8005608 <prvGetNextExpireTime>
 800555a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800555c:	68bb      	ldr	r3, [r7, #8]
 800555e:	4619      	mov	r1, r3
 8005560:	68f8      	ldr	r0, [r7, #12]
 8005562:	f000 f803 	bl	800556c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005566:	f000 f8d5 	bl	8005714 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800556a:	e7f1      	b.n	8005550 <prvTimerTask+0x8>

0800556c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800556c:	b580      	push	{r7, lr}
 800556e:	b084      	sub	sp, #16
 8005570:	af00      	add	r7, sp, #0
 8005572:	6078      	str	r0, [r7, #4]
 8005574:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005576:	f7ff fa39 	bl	80049ec <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800557a:	f107 0308 	add.w	r3, r7, #8
 800557e:	4618      	mov	r0, r3
 8005580:	f000 f866 	bl	8005650 <prvSampleTimeNow>
 8005584:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005586:	68bb      	ldr	r3, [r7, #8]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d130      	bne.n	80055ee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800558c:	683b      	ldr	r3, [r7, #0]
 800558e:	2b00      	cmp	r3, #0
 8005590:	d10a      	bne.n	80055a8 <prvProcessTimerOrBlockTask+0x3c>
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	429a      	cmp	r2, r3
 8005598:	d806      	bhi.n	80055a8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800559a:	f7ff fa35 	bl	8004a08 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800559e:	68f9      	ldr	r1, [r7, #12]
 80055a0:	6878      	ldr	r0, [r7, #4]
 80055a2:	f7ff ff85 	bl	80054b0 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80055a6:	e024      	b.n	80055f2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d008      	beq.n	80055c0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80055ae:	4b13      	ldr	r3, [pc, #76]	; (80055fc <prvProcessTimerOrBlockTask+0x90>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	681b      	ldr	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d101      	bne.n	80055bc <prvProcessTimerOrBlockTask+0x50>
 80055b8:	2301      	movs	r3, #1
 80055ba:	e000      	b.n	80055be <prvProcessTimerOrBlockTask+0x52>
 80055bc:	2300      	movs	r3, #0
 80055be:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80055c0:	4b0f      	ldr	r3, [pc, #60]	; (8005600 <prvProcessTimerOrBlockTask+0x94>)
 80055c2:	6818      	ldr	r0, [r3, #0]
 80055c4:	687a      	ldr	r2, [r7, #4]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	683a      	ldr	r2, [r7, #0]
 80055cc:	4619      	mov	r1, r3
 80055ce:	f7fe fe77 	bl	80042c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80055d2:	f7ff fa19 	bl	8004a08 <xTaskResumeAll>
 80055d6:	4603      	mov	r3, r0
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80055dc:	4b09      	ldr	r3, [pc, #36]	; (8005604 <prvProcessTimerOrBlockTask+0x98>)
 80055de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80055e2:	601a      	str	r2, [r3, #0]
 80055e4:	f3bf 8f4f 	dsb	sy
 80055e8:	f3bf 8f6f 	isb	sy
}
 80055ec:	e001      	b.n	80055f2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80055ee:	f7ff fa0b 	bl	8004a08 <xTaskResumeAll>
}
 80055f2:	bf00      	nop
 80055f4:	3710      	adds	r7, #16
 80055f6:	46bd      	mov	sp, r7
 80055f8:	bd80      	pop	{r7, pc}
 80055fa:	bf00      	nop
 80055fc:	20000e5c 	.word	0x20000e5c
 8005600:	20000e60 	.word	0x20000e60
 8005604:	e000ed04 	.word	0xe000ed04

08005608 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8005608:	b480      	push	{r7}
 800560a:	b085      	sub	sp, #20
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005610:	4b0e      	ldr	r3, [pc, #56]	; (800564c <prvGetNextExpireTime+0x44>)
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <prvGetNextExpireTime+0x16>
 800561a:	2201      	movs	r2, #1
 800561c:	e000      	b.n	8005620 <prvGetNextExpireTime+0x18>
 800561e:	2200      	movs	r2, #0
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	2b00      	cmp	r3, #0
 800562a:	d105      	bne.n	8005638 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800562c:	4b07      	ldr	r3, [pc, #28]	; (800564c <prvGetNextExpireTime+0x44>)
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	68db      	ldr	r3, [r3, #12]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	60fb      	str	r3, [r7, #12]
 8005636:	e001      	b.n	800563c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8005638:	2300      	movs	r3, #0
 800563a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800563c:	68fb      	ldr	r3, [r7, #12]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3714      	adds	r7, #20
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000e58 	.word	0x20000e58

08005650 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005650:	b580      	push	{r7, lr}
 8005652:	b084      	sub	sp, #16
 8005654:	af00      	add	r7, sp, #0
 8005656:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005658:	f7ff fa74 	bl	8004b44 <xTaskGetTickCount>
 800565c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800565e:	4b0b      	ldr	r3, [pc, #44]	; (800568c <prvSampleTimeNow+0x3c>)
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	68fa      	ldr	r2, [r7, #12]
 8005664:	429a      	cmp	r2, r3
 8005666:	d205      	bcs.n	8005674 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005668:	f000 f936 	bl	80058d8 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	2201      	movs	r2, #1
 8005670:	601a      	str	r2, [r3, #0]
 8005672:	e002      	b.n	800567a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	2200      	movs	r2, #0
 8005678:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800567a:	4a04      	ldr	r2, [pc, #16]	; (800568c <prvSampleTimeNow+0x3c>)
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005680:	68fb      	ldr	r3, [r7, #12]
}
 8005682:	4618      	mov	r0, r3
 8005684:	3710      	adds	r7, #16
 8005686:	46bd      	mov	sp, r7
 8005688:	bd80      	pop	{r7, pc}
 800568a:	bf00      	nop
 800568c:	20000e68 	.word	0x20000e68

08005690 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005690:	b580      	push	{r7, lr}
 8005692:	b086      	sub	sp, #24
 8005694:	af00      	add	r7, sp, #0
 8005696:	60f8      	str	r0, [r7, #12]
 8005698:	60b9      	str	r1, [r7, #8]
 800569a:	607a      	str	r2, [r7, #4]
 800569c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800569e:	2300      	movs	r3, #0
 80056a0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	68ba      	ldr	r2, [r7, #8]
 80056a6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	68fa      	ldr	r2, [r7, #12]
 80056ac:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80056ae:	68ba      	ldr	r2, [r7, #8]
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	429a      	cmp	r2, r3
 80056b4:	d812      	bhi.n	80056dc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80056b6:	687a      	ldr	r2, [r7, #4]
 80056b8:	683b      	ldr	r3, [r7, #0]
 80056ba:	1ad2      	subs	r2, r2, r3
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	699b      	ldr	r3, [r3, #24]
 80056c0:	429a      	cmp	r2, r3
 80056c2:	d302      	bcc.n	80056ca <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80056c4:	2301      	movs	r3, #1
 80056c6:	617b      	str	r3, [r7, #20]
 80056c8:	e01b      	b.n	8005702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80056ca:	4b10      	ldr	r3, [pc, #64]	; (800570c <prvInsertTimerInActiveList+0x7c>)
 80056cc:	681a      	ldr	r2, [r3, #0]
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	3304      	adds	r3, #4
 80056d2:	4619      	mov	r1, r3
 80056d4:	4610      	mov	r0, r2
 80056d6:	f7fe f8d8 	bl	800388a <vListInsert>
 80056da:	e012      	b.n	8005702 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	429a      	cmp	r2, r3
 80056e2:	d206      	bcs.n	80056f2 <prvInsertTimerInActiveList+0x62>
 80056e4:	68ba      	ldr	r2, [r7, #8]
 80056e6:	683b      	ldr	r3, [r7, #0]
 80056e8:	429a      	cmp	r2, r3
 80056ea:	d302      	bcc.n	80056f2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80056ec:	2301      	movs	r3, #1
 80056ee:	617b      	str	r3, [r7, #20]
 80056f0:	e007      	b.n	8005702 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80056f2:	4b07      	ldr	r3, [pc, #28]	; (8005710 <prvInsertTimerInActiveList+0x80>)
 80056f4:	681a      	ldr	r2, [r3, #0]
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3304      	adds	r3, #4
 80056fa:	4619      	mov	r1, r3
 80056fc:	4610      	mov	r0, r2
 80056fe:	f7fe f8c4 	bl	800388a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005702:	697b      	ldr	r3, [r7, #20]
}
 8005704:	4618      	mov	r0, r3
 8005706:	3718      	adds	r7, #24
 8005708:	46bd      	mov	sp, r7
 800570a:	bd80      	pop	{r7, pc}
 800570c:	20000e5c 	.word	0x20000e5c
 8005710:	20000e58 	.word	0x20000e58

08005714 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005714:	b580      	push	{r7, lr}
 8005716:	b08e      	sub	sp, #56	; 0x38
 8005718:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800571a:	e0ca      	b.n	80058b2 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	2b00      	cmp	r3, #0
 8005720:	da18      	bge.n	8005754 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005722:	1d3b      	adds	r3, r7, #4
 8005724:	3304      	adds	r3, #4
 8005726:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8005728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800572a:	2b00      	cmp	r3, #0
 800572c:	d10a      	bne.n	8005744 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800572e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005732:	f383 8811 	msr	BASEPRI, r3
 8005736:	f3bf 8f6f 	isb	sy
 800573a:	f3bf 8f4f 	dsb	sy
 800573e:	61fb      	str	r3, [r7, #28]
}
 8005740:	bf00      	nop
 8005742:	e7fe      	b.n	8005742 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005744:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574a:	6850      	ldr	r0, [r2, #4]
 800574c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800574e:	6892      	ldr	r2, [r2, #8]
 8005750:	4611      	mov	r1, r2
 8005752:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	f2c0 80aa 	blt.w	80058b0 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005760:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005762:	695b      	ldr	r3, [r3, #20]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d004      	beq.n	8005772 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005768:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800576a:	3304      	adds	r3, #4
 800576c:	4618      	mov	r0, r3
 800576e:	f7fe f8c5 	bl	80038fc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005772:	463b      	mov	r3, r7
 8005774:	4618      	mov	r0, r3
 8005776:	f7ff ff6b 	bl	8005650 <prvSampleTimeNow>
 800577a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	2b09      	cmp	r3, #9
 8005780:	f200 8097 	bhi.w	80058b2 <prvProcessReceivedCommands+0x19e>
 8005784:	a201      	add	r2, pc, #4	; (adr r2, 800578c <prvProcessReceivedCommands+0x78>)
 8005786:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800578a:	bf00      	nop
 800578c:	080057b5 	.word	0x080057b5
 8005790:	080057b5 	.word	0x080057b5
 8005794:	080057b5 	.word	0x080057b5
 8005798:	08005829 	.word	0x08005829
 800579c:	0800583d 	.word	0x0800583d
 80057a0:	08005887 	.word	0x08005887
 80057a4:	080057b5 	.word	0x080057b5
 80057a8:	080057b5 	.word	0x080057b5
 80057ac:	08005829 	.word	0x08005829
 80057b0:	0800583d 	.word	0x0800583d
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80057b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ba:	f043 0301 	orr.w	r3, r3, #1
 80057be:	b2da      	uxtb	r2, r3
 80057c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057c2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80057c6:	68ba      	ldr	r2, [r7, #8]
 80057c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057ca:	699b      	ldr	r3, [r3, #24]
 80057cc:	18d1      	adds	r1, r2, r3
 80057ce:	68bb      	ldr	r3, [r7, #8]
 80057d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057d2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057d4:	f7ff ff5c 	bl	8005690 <prvInsertTimerInActiveList>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d069      	beq.n	80058b2 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80057de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e0:	6a1b      	ldr	r3, [r3, #32]
 80057e2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80057e4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80057e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80057ec:	f003 0304 	and.w	r3, r3, #4
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d05e      	beq.n	80058b2 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80057f4:	68ba      	ldr	r2, [r7, #8]
 80057f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057f8:	699b      	ldr	r3, [r3, #24]
 80057fa:	441a      	add	r2, r3
 80057fc:	2300      	movs	r3, #0
 80057fe:	9300      	str	r3, [sp, #0]
 8005800:	2300      	movs	r3, #0
 8005802:	2100      	movs	r1, #0
 8005804:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005806:	f7ff fe05 	bl	8005414 <xTimerGenericCommand>
 800580a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800580c:	6a3b      	ldr	r3, [r7, #32]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d14f      	bne.n	80058b2 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005812:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005816:	f383 8811 	msr	BASEPRI, r3
 800581a:	f3bf 8f6f 	isb	sy
 800581e:	f3bf 8f4f 	dsb	sy
 8005822:	61bb      	str	r3, [r7, #24]
}
 8005824:	bf00      	nop
 8005826:	e7fe      	b.n	8005826 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005828:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800582a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800582e:	f023 0301 	bic.w	r3, r3, #1
 8005832:	b2da      	uxtb	r2, r3
 8005834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005836:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800583a:	e03a      	b.n	80058b2 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800583c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800583e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005842:	f043 0301 	orr.w	r3, r3, #1
 8005846:	b2da      	uxtb	r2, r3
 8005848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800584a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800584e:	68ba      	ldr	r2, [r7, #8]
 8005850:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005852:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005854:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005856:	699b      	ldr	r3, [r3, #24]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d10a      	bne.n	8005872 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800585c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005860:	f383 8811 	msr	BASEPRI, r3
 8005864:	f3bf 8f6f 	isb	sy
 8005868:	f3bf 8f4f 	dsb	sy
 800586c:	617b      	str	r3, [r7, #20]
}
 800586e:	bf00      	nop
 8005870:	e7fe      	b.n	8005870 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005874:	699a      	ldr	r2, [r3, #24]
 8005876:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005878:	18d1      	adds	r1, r2, r3
 800587a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800587e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005880:	f7ff ff06 	bl	8005690 <prvInsertTimerInActiveList>
					break;
 8005884:	e015      	b.n	80058b2 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800588c:	f003 0302 	and.w	r3, r3, #2
 8005890:	2b00      	cmp	r3, #0
 8005892:	d103      	bne.n	800589c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005896:	f000 fbdb 	bl	8006050 <vPortFree>
 800589a:	e00a      	b.n	80058b2 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80058a2:	f023 0301 	bic.w	r3, r3, #1
 80058a6:	b2da      	uxtb	r2, r3
 80058a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058aa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80058ae:	e000      	b.n	80058b2 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80058b0:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058b2:	4b08      	ldr	r3, [pc, #32]	; (80058d4 <prvProcessReceivedCommands+0x1c0>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	1d39      	adds	r1, r7, #4
 80058b8:	2200      	movs	r2, #0
 80058ba:	4618      	mov	r0, r3
 80058bc:	f7fe fae6 	bl	8003e8c <xQueueReceive>
 80058c0:	4603      	mov	r3, r0
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	f47f af2a 	bne.w	800571c <prvProcessReceivedCommands+0x8>
	}
}
 80058c8:	bf00      	nop
 80058ca:	bf00      	nop
 80058cc:	3730      	adds	r7, #48	; 0x30
 80058ce:	46bd      	mov	sp, r7
 80058d0:	bd80      	pop	{r7, pc}
 80058d2:	bf00      	nop
 80058d4:	20000e60 	.word	0x20000e60

080058d8 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80058d8:	b580      	push	{r7, lr}
 80058da:	b088      	sub	sp, #32
 80058dc:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80058de:	e048      	b.n	8005972 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80058e0:	4b2d      	ldr	r3, [pc, #180]	; (8005998 <prvSwitchTimerLists+0xc0>)
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68db      	ldr	r3, [r3, #12]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80058ea:	4b2b      	ldr	r3, [pc, #172]	; (8005998 <prvSwitchTimerLists+0xc0>)
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	68db      	ldr	r3, [r3, #12]
 80058f0:	68db      	ldr	r3, [r3, #12]
 80058f2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	3304      	adds	r3, #4
 80058f8:	4618      	mov	r0, r3
 80058fa:	f7fd ffff 	bl	80038fc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	6a1b      	ldr	r3, [r3, #32]
 8005902:	68f8      	ldr	r0, [r7, #12]
 8005904:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	d02e      	beq.n	8005972 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	699b      	ldr	r3, [r3, #24]
 8005918:	693a      	ldr	r2, [r7, #16]
 800591a:	4413      	add	r3, r2
 800591c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800591e:	68ba      	ldr	r2, [r7, #8]
 8005920:	693b      	ldr	r3, [r7, #16]
 8005922:	429a      	cmp	r2, r3
 8005924:	d90e      	bls.n	8005944 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	68ba      	ldr	r2, [r7, #8]
 800592a:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	68fa      	ldr	r2, [r7, #12]
 8005930:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005932:	4b19      	ldr	r3, [pc, #100]	; (8005998 <prvSwitchTimerLists+0xc0>)
 8005934:	681a      	ldr	r2, [r3, #0]
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	3304      	adds	r3, #4
 800593a:	4619      	mov	r1, r3
 800593c:	4610      	mov	r0, r2
 800593e:	f7fd ffa4 	bl	800388a <vListInsert>
 8005942:	e016      	b.n	8005972 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005944:	2300      	movs	r3, #0
 8005946:	9300      	str	r3, [sp, #0]
 8005948:	2300      	movs	r3, #0
 800594a:	693a      	ldr	r2, [r7, #16]
 800594c:	2100      	movs	r1, #0
 800594e:	68f8      	ldr	r0, [r7, #12]
 8005950:	f7ff fd60 	bl	8005414 <xTimerGenericCommand>
 8005954:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d10a      	bne.n	8005972 <prvSwitchTimerLists+0x9a>
	__asm volatile
 800595c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005960:	f383 8811 	msr	BASEPRI, r3
 8005964:	f3bf 8f6f 	isb	sy
 8005968:	f3bf 8f4f 	dsb	sy
 800596c:	603b      	str	r3, [r7, #0]
}
 800596e:	bf00      	nop
 8005970:	e7fe      	b.n	8005970 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005972:	4b09      	ldr	r3, [pc, #36]	; (8005998 <prvSwitchTimerLists+0xc0>)
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d1b1      	bne.n	80058e0 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800597c:	4b06      	ldr	r3, [pc, #24]	; (8005998 <prvSwitchTimerLists+0xc0>)
 800597e:	681b      	ldr	r3, [r3, #0]
 8005980:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005982:	4b06      	ldr	r3, [pc, #24]	; (800599c <prvSwitchTimerLists+0xc4>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	4a04      	ldr	r2, [pc, #16]	; (8005998 <prvSwitchTimerLists+0xc0>)
 8005988:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800598a:	4a04      	ldr	r2, [pc, #16]	; (800599c <prvSwitchTimerLists+0xc4>)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	6013      	str	r3, [r2, #0]
}
 8005990:	bf00      	nop
 8005992:	3718      	adds	r7, #24
 8005994:	46bd      	mov	sp, r7
 8005996:	bd80      	pop	{r7, pc}
 8005998:	20000e58 	.word	0x20000e58
 800599c:	20000e5c 	.word	0x20000e5c

080059a0 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80059a6:	f000 f965 	bl	8005c74 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80059aa:	4b15      	ldr	r3, [pc, #84]	; (8005a00 <prvCheckForValidListAndQueue+0x60>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d120      	bne.n	80059f4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80059b2:	4814      	ldr	r0, [pc, #80]	; (8005a04 <prvCheckForValidListAndQueue+0x64>)
 80059b4:	f7fd ff18 	bl	80037e8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80059b8:	4813      	ldr	r0, [pc, #76]	; (8005a08 <prvCheckForValidListAndQueue+0x68>)
 80059ba:	f7fd ff15 	bl	80037e8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80059be:	4b13      	ldr	r3, [pc, #76]	; (8005a0c <prvCheckForValidListAndQueue+0x6c>)
 80059c0:	4a10      	ldr	r2, [pc, #64]	; (8005a04 <prvCheckForValidListAndQueue+0x64>)
 80059c2:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80059c4:	4b12      	ldr	r3, [pc, #72]	; (8005a10 <prvCheckForValidListAndQueue+0x70>)
 80059c6:	4a10      	ldr	r2, [pc, #64]	; (8005a08 <prvCheckForValidListAndQueue+0x68>)
 80059c8:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80059ca:	2300      	movs	r3, #0
 80059cc:	9300      	str	r3, [sp, #0]
 80059ce:	4b11      	ldr	r3, [pc, #68]	; (8005a14 <prvCheckForValidListAndQueue+0x74>)
 80059d0:	4a11      	ldr	r2, [pc, #68]	; (8005a18 <prvCheckForValidListAndQueue+0x78>)
 80059d2:	2110      	movs	r1, #16
 80059d4:	200a      	movs	r0, #10
 80059d6:	f7fe f823 	bl	8003a20 <xQueueGenericCreateStatic>
 80059da:	4603      	mov	r3, r0
 80059dc:	4a08      	ldr	r2, [pc, #32]	; (8005a00 <prvCheckForValidListAndQueue+0x60>)
 80059de:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80059e0:	4b07      	ldr	r3, [pc, #28]	; (8005a00 <prvCheckForValidListAndQueue+0x60>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d005      	beq.n	80059f4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80059e8:	4b05      	ldr	r3, [pc, #20]	; (8005a00 <prvCheckForValidListAndQueue+0x60>)
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	490b      	ldr	r1, [pc, #44]	; (8005a1c <prvCheckForValidListAndQueue+0x7c>)
 80059ee:	4618      	mov	r0, r3
 80059f0:	f7fe fc3c 	bl	800426c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80059f4:	f000 f96e 	bl	8005cd4 <vPortExitCritical>
}
 80059f8:	bf00      	nop
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	20000e60 	.word	0x20000e60
 8005a04:	20000e30 	.word	0x20000e30
 8005a08:	20000e44 	.word	0x20000e44
 8005a0c:	20000e58 	.word	0x20000e58
 8005a10:	20000e5c 	.word	0x20000e5c
 8005a14:	20000f0c 	.word	0x20000f0c
 8005a18:	20000e6c 	.word	0x20000e6c
 8005a1c:	080064fc 	.word	0x080064fc

08005a20 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005a20:	b480      	push	{r7}
 8005a22:	b085      	sub	sp, #20
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	60f8      	str	r0, [r7, #12]
 8005a28:	60b9      	str	r1, [r7, #8]
 8005a2a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	3b04      	subs	r3, #4
 8005a30:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005a38:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	3b04      	subs	r3, #4
 8005a3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f023 0201 	bic.w	r2, r3, #1
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	3b04      	subs	r3, #4
 8005a4e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005a50:	4a0c      	ldr	r2, [pc, #48]	; (8005a84 <pxPortInitialiseStack+0x64>)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005a56:	68fb      	ldr	r3, [r7, #12]
 8005a58:	3b14      	subs	r3, #20
 8005a5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	3b04      	subs	r3, #4
 8005a66:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f06f 0202 	mvn.w	r2, #2
 8005a6e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	3b20      	subs	r3, #32
 8005a74:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005a76:	68fb      	ldr	r3, [r7, #12]
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a82:	4770      	bx	lr
 8005a84:	08005a89 	.word	0x08005a89

08005a88 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005a88:	b480      	push	{r7}
 8005a8a:	b085      	sub	sp, #20
 8005a8c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005a92:	4b12      	ldr	r3, [pc, #72]	; (8005adc <prvTaskExitError+0x54>)
 8005a94:	681b      	ldr	r3, [r3, #0]
 8005a96:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005a9a:	d00a      	beq.n	8005ab2 <prvTaskExitError+0x2a>
	__asm volatile
 8005a9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aa0:	f383 8811 	msr	BASEPRI, r3
 8005aa4:	f3bf 8f6f 	isb	sy
 8005aa8:	f3bf 8f4f 	dsb	sy
 8005aac:	60fb      	str	r3, [r7, #12]
}
 8005aae:	bf00      	nop
 8005ab0:	e7fe      	b.n	8005ab0 <prvTaskExitError+0x28>
	__asm volatile
 8005ab2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab6:	f383 8811 	msr	BASEPRI, r3
 8005aba:	f3bf 8f6f 	isb	sy
 8005abe:	f3bf 8f4f 	dsb	sy
 8005ac2:	60bb      	str	r3, [r7, #8]
}
 8005ac4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005ac6:	bf00      	nop
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d0fc      	beq.n	8005ac8 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005ace:	bf00      	nop
 8005ad0:	bf00      	nop
 8005ad2:	3714      	adds	r7, #20
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr
 8005adc:	2000000c 	.word	0x2000000c

08005ae0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005ae0:	4b07      	ldr	r3, [pc, #28]	; (8005b00 <pxCurrentTCBConst2>)
 8005ae2:	6819      	ldr	r1, [r3, #0]
 8005ae4:	6808      	ldr	r0, [r1, #0]
 8005ae6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005aea:	f380 8809 	msr	PSP, r0
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f04f 0000 	mov.w	r0, #0
 8005af6:	f380 8811 	msr	BASEPRI, r0
 8005afa:	4770      	bx	lr
 8005afc:	f3af 8000 	nop.w

08005b00 <pxCurrentTCBConst2>:
 8005b00:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005b04:	bf00      	nop
 8005b06:	bf00      	nop

08005b08 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005b08:	4808      	ldr	r0, [pc, #32]	; (8005b2c <prvPortStartFirstTask+0x24>)
 8005b0a:	6800      	ldr	r0, [r0, #0]
 8005b0c:	6800      	ldr	r0, [r0, #0]
 8005b0e:	f380 8808 	msr	MSP, r0
 8005b12:	f04f 0000 	mov.w	r0, #0
 8005b16:	f380 8814 	msr	CONTROL, r0
 8005b1a:	b662      	cpsie	i
 8005b1c:	b661      	cpsie	f
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	f3bf 8f6f 	isb	sy
 8005b26:	df00      	svc	0
 8005b28:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005b2a:	bf00      	nop
 8005b2c:	e000ed08 	.word	0xe000ed08

08005b30 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005b30:	b580      	push	{r7, lr}
 8005b32:	b086      	sub	sp, #24
 8005b34:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005b36:	4b46      	ldr	r3, [pc, #280]	; (8005c50 <xPortStartScheduler+0x120>)
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	4a46      	ldr	r2, [pc, #280]	; (8005c54 <xPortStartScheduler+0x124>)
 8005b3c:	4293      	cmp	r3, r2
 8005b3e:	d10a      	bne.n	8005b56 <xPortStartScheduler+0x26>
	__asm volatile
 8005b40:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b44:	f383 8811 	msr	BASEPRI, r3
 8005b48:	f3bf 8f6f 	isb	sy
 8005b4c:	f3bf 8f4f 	dsb	sy
 8005b50:	613b      	str	r3, [r7, #16]
}
 8005b52:	bf00      	nop
 8005b54:	e7fe      	b.n	8005b54 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005b56:	4b3e      	ldr	r3, [pc, #248]	; (8005c50 <xPortStartScheduler+0x120>)
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	4a3f      	ldr	r2, [pc, #252]	; (8005c58 <xPortStartScheduler+0x128>)
 8005b5c:	4293      	cmp	r3, r2
 8005b5e:	d10a      	bne.n	8005b76 <xPortStartScheduler+0x46>
	__asm volatile
 8005b60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b64:	f383 8811 	msr	BASEPRI, r3
 8005b68:	f3bf 8f6f 	isb	sy
 8005b6c:	f3bf 8f4f 	dsb	sy
 8005b70:	60fb      	str	r3, [r7, #12]
}
 8005b72:	bf00      	nop
 8005b74:	e7fe      	b.n	8005b74 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005b76:	4b39      	ldr	r3, [pc, #228]	; (8005c5c <xPortStartScheduler+0x12c>)
 8005b78:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005b7a:	697b      	ldr	r3, [r7, #20]
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	b2db      	uxtb	r3, r3
 8005b80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	22ff      	movs	r2, #255	; 0xff
 8005b86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	b2db      	uxtb	r3, r3
 8005b8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005b90:	78fb      	ldrb	r3, [r7, #3]
 8005b92:	b2db      	uxtb	r3, r3
 8005b94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005b98:	b2da      	uxtb	r2, r3
 8005b9a:	4b31      	ldr	r3, [pc, #196]	; (8005c60 <xPortStartScheduler+0x130>)
 8005b9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005b9e:	4b31      	ldr	r3, [pc, #196]	; (8005c64 <xPortStartScheduler+0x134>)
 8005ba0:	2207      	movs	r2, #7
 8005ba2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005ba4:	e009      	b.n	8005bba <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005ba6:	4b2f      	ldr	r3, [pc, #188]	; (8005c64 <xPortStartScheduler+0x134>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	3b01      	subs	r3, #1
 8005bac:	4a2d      	ldr	r2, [pc, #180]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005bb0:	78fb      	ldrb	r3, [r7, #3]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	005b      	lsls	r3, r3, #1
 8005bb6:	b2db      	uxtb	r3, r3
 8005bb8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005bba:	78fb      	ldrb	r3, [r7, #3]
 8005bbc:	b2db      	uxtb	r3, r3
 8005bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bc2:	2b80      	cmp	r3, #128	; 0x80
 8005bc4:	d0ef      	beq.n	8005ba6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005bc6:	4b27      	ldr	r3, [pc, #156]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f1c3 0307 	rsb	r3, r3, #7
 8005bce:	2b04      	cmp	r3, #4
 8005bd0:	d00a      	beq.n	8005be8 <xPortStartScheduler+0xb8>
	__asm volatile
 8005bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd6:	f383 8811 	msr	BASEPRI, r3
 8005bda:	f3bf 8f6f 	isb	sy
 8005bde:	f3bf 8f4f 	dsb	sy
 8005be2:	60bb      	str	r3, [r7, #8]
}
 8005be4:	bf00      	nop
 8005be6:	e7fe      	b.n	8005be6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005be8:	4b1e      	ldr	r3, [pc, #120]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	021b      	lsls	r3, r3, #8
 8005bee:	4a1d      	ldr	r2, [pc, #116]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bf0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005bf2:	4b1c      	ldr	r3, [pc, #112]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005bfa:	4a1a      	ldr	r2, [pc, #104]	; (8005c64 <xPortStartScheduler+0x134>)
 8005bfc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	b2da      	uxtb	r2, r3
 8005c02:	697b      	ldr	r3, [r7, #20]
 8005c04:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005c06:	4b18      	ldr	r3, [pc, #96]	; (8005c68 <xPortStartScheduler+0x138>)
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	4a17      	ldr	r2, [pc, #92]	; (8005c68 <xPortStartScheduler+0x138>)
 8005c0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005c10:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005c12:	4b15      	ldr	r3, [pc, #84]	; (8005c68 <xPortStartScheduler+0x138>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	4a14      	ldr	r2, [pc, #80]	; (8005c68 <xPortStartScheduler+0x138>)
 8005c18:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005c1c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005c1e:	f000 f8dd 	bl	8005ddc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005c22:	4b12      	ldr	r3, [pc, #72]	; (8005c6c <xPortStartScheduler+0x13c>)
 8005c24:	2200      	movs	r2, #0
 8005c26:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005c28:	f000 f8fc 	bl	8005e24 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005c2c:	4b10      	ldr	r3, [pc, #64]	; (8005c70 <xPortStartScheduler+0x140>)
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	4a0f      	ldr	r2, [pc, #60]	; (8005c70 <xPortStartScheduler+0x140>)
 8005c32:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005c36:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005c38:	f7ff ff66 	bl	8005b08 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005c3c:	f7ff f84c 	bl	8004cd8 <vTaskSwitchContext>
	prvTaskExitError();
 8005c40:	f7ff ff22 	bl	8005a88 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005c44:	2300      	movs	r3, #0
}
 8005c46:	4618      	mov	r0, r3
 8005c48:	3718      	adds	r7, #24
 8005c4a:	46bd      	mov	sp, r7
 8005c4c:	bd80      	pop	{r7, pc}
 8005c4e:	bf00      	nop
 8005c50:	e000ed00 	.word	0xe000ed00
 8005c54:	410fc271 	.word	0x410fc271
 8005c58:	410fc270 	.word	0x410fc270
 8005c5c:	e000e400 	.word	0xe000e400
 8005c60:	20000f5c 	.word	0x20000f5c
 8005c64:	20000f60 	.word	0x20000f60
 8005c68:	e000ed20 	.word	0xe000ed20
 8005c6c:	2000000c 	.word	0x2000000c
 8005c70:	e000ef34 	.word	0xe000ef34

08005c74 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005c74:	b480      	push	{r7}
 8005c76:	b083      	sub	sp, #12
 8005c78:	af00      	add	r7, sp, #0
	__asm volatile
 8005c7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c7e:	f383 8811 	msr	BASEPRI, r3
 8005c82:	f3bf 8f6f 	isb	sy
 8005c86:	f3bf 8f4f 	dsb	sy
 8005c8a:	607b      	str	r3, [r7, #4]
}
 8005c8c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005c8e:	4b0f      	ldr	r3, [pc, #60]	; (8005ccc <vPortEnterCritical+0x58>)
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	3301      	adds	r3, #1
 8005c94:	4a0d      	ldr	r2, [pc, #52]	; (8005ccc <vPortEnterCritical+0x58>)
 8005c96:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005c98:	4b0c      	ldr	r3, [pc, #48]	; (8005ccc <vPortEnterCritical+0x58>)
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	2b01      	cmp	r3, #1
 8005c9e:	d10f      	bne.n	8005cc0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ca0:	4b0b      	ldr	r3, [pc, #44]	; (8005cd0 <vPortEnterCritical+0x5c>)
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	b2db      	uxtb	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d00a      	beq.n	8005cc0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005caa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cae:	f383 8811 	msr	BASEPRI, r3
 8005cb2:	f3bf 8f6f 	isb	sy
 8005cb6:	f3bf 8f4f 	dsb	sy
 8005cba:	603b      	str	r3, [r7, #0]
}
 8005cbc:	bf00      	nop
 8005cbe:	e7fe      	b.n	8005cbe <vPortEnterCritical+0x4a>
	}
}
 8005cc0:	bf00      	nop
 8005cc2:	370c      	adds	r7, #12
 8005cc4:	46bd      	mov	sp, r7
 8005cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cca:	4770      	bx	lr
 8005ccc:	2000000c 	.word	0x2000000c
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005cd4:	b480      	push	{r7}
 8005cd6:	b083      	sub	sp, #12
 8005cd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005cda:	4b12      	ldr	r3, [pc, #72]	; (8005d24 <vPortExitCritical+0x50>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d10a      	bne.n	8005cf8 <vPortExitCritical+0x24>
	__asm volatile
 8005ce2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce6:	f383 8811 	msr	BASEPRI, r3
 8005cea:	f3bf 8f6f 	isb	sy
 8005cee:	f3bf 8f4f 	dsb	sy
 8005cf2:	607b      	str	r3, [r7, #4]
}
 8005cf4:	bf00      	nop
 8005cf6:	e7fe      	b.n	8005cf6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005cf8:	4b0a      	ldr	r3, [pc, #40]	; (8005d24 <vPortExitCritical+0x50>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	3b01      	subs	r3, #1
 8005cfe:	4a09      	ldr	r2, [pc, #36]	; (8005d24 <vPortExitCritical+0x50>)
 8005d00:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005d02:	4b08      	ldr	r3, [pc, #32]	; (8005d24 <vPortExitCritical+0x50>)
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d105      	bne.n	8005d16 <vPortExitCritical+0x42>
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005d0e:	683b      	ldr	r3, [r7, #0]
 8005d10:	f383 8811 	msr	BASEPRI, r3
}
 8005d14:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005d16:	bf00      	nop
 8005d18:	370c      	adds	r7, #12
 8005d1a:	46bd      	mov	sp, r7
 8005d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d20:	4770      	bx	lr
 8005d22:	bf00      	nop
 8005d24:	2000000c 	.word	0x2000000c
	...

08005d30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005d30:	f3ef 8009 	mrs	r0, PSP
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	4b15      	ldr	r3, [pc, #84]	; (8005d90 <pxCurrentTCBConst>)
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	f01e 0f10 	tst.w	lr, #16
 8005d40:	bf08      	it	eq
 8005d42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005d46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d4a:	6010      	str	r0, [r2, #0]
 8005d4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005d50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005d54:	f380 8811 	msr	BASEPRI, r0
 8005d58:	f3bf 8f4f 	dsb	sy
 8005d5c:	f3bf 8f6f 	isb	sy
 8005d60:	f7fe ffba 	bl	8004cd8 <vTaskSwitchContext>
 8005d64:	f04f 0000 	mov.w	r0, #0
 8005d68:	f380 8811 	msr	BASEPRI, r0
 8005d6c:	bc09      	pop	{r0, r3}
 8005d6e:	6819      	ldr	r1, [r3, #0]
 8005d70:	6808      	ldr	r0, [r1, #0]
 8005d72:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d76:	f01e 0f10 	tst.w	lr, #16
 8005d7a:	bf08      	it	eq
 8005d7c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005d80:	f380 8809 	msr	PSP, r0
 8005d84:	f3bf 8f6f 	isb	sy
 8005d88:	4770      	bx	lr
 8005d8a:	bf00      	nop
 8005d8c:	f3af 8000 	nop.w

08005d90 <pxCurrentTCBConst>:
 8005d90:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005d94:	bf00      	nop
 8005d96:	bf00      	nop

08005d98 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005d98:	b580      	push	{r7, lr}
 8005d9a:	b082      	sub	sp, #8
 8005d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8005d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005da2:	f383 8811 	msr	BASEPRI, r3
 8005da6:	f3bf 8f6f 	isb	sy
 8005daa:	f3bf 8f4f 	dsb	sy
 8005dae:	607b      	str	r3, [r7, #4]
}
 8005db0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005db2:	f7fe fed7 	bl	8004b64 <xTaskIncrementTick>
 8005db6:	4603      	mov	r3, r0
 8005db8:	2b00      	cmp	r3, #0
 8005dba:	d003      	beq.n	8005dc4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005dbc:	4b06      	ldr	r3, [pc, #24]	; (8005dd8 <xPortSysTickHandler+0x40>)
 8005dbe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005dc2:	601a      	str	r2, [r3, #0]
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	f383 8811 	msr	BASEPRI, r3
}
 8005dce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005dd0:	bf00      	nop
 8005dd2:	3708      	adds	r7, #8
 8005dd4:	46bd      	mov	sp, r7
 8005dd6:	bd80      	pop	{r7, pc}
 8005dd8:	e000ed04 	.word	0xe000ed04

08005ddc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005de0:	4b0b      	ldr	r3, [pc, #44]	; (8005e10 <vPortSetupTimerInterrupt+0x34>)
 8005de2:	2200      	movs	r2, #0
 8005de4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005de6:	4b0b      	ldr	r3, [pc, #44]	; (8005e14 <vPortSetupTimerInterrupt+0x38>)
 8005de8:	2200      	movs	r2, #0
 8005dea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005dec:	4b0a      	ldr	r3, [pc, #40]	; (8005e18 <vPortSetupTimerInterrupt+0x3c>)
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	4a0a      	ldr	r2, [pc, #40]	; (8005e1c <vPortSetupTimerInterrupt+0x40>)
 8005df2:	fba2 2303 	umull	r2, r3, r2, r3
 8005df6:	099b      	lsrs	r3, r3, #6
 8005df8:	4a09      	ldr	r2, [pc, #36]	; (8005e20 <vPortSetupTimerInterrupt+0x44>)
 8005dfa:	3b01      	subs	r3, #1
 8005dfc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005dfe:	4b04      	ldr	r3, [pc, #16]	; (8005e10 <vPortSetupTimerInterrupt+0x34>)
 8005e00:	2207      	movs	r2, #7
 8005e02:	601a      	str	r2, [r3, #0]
}
 8005e04:	bf00      	nop
 8005e06:	46bd      	mov	sp, r7
 8005e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e0c:	4770      	bx	lr
 8005e0e:	bf00      	nop
 8005e10:	e000e010 	.word	0xe000e010
 8005e14:	e000e018 	.word	0xe000e018
 8005e18:	20000000 	.word	0x20000000
 8005e1c:	10624dd3 	.word	0x10624dd3
 8005e20:	e000e014 	.word	0xe000e014

08005e24 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005e24:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005e34 <vPortEnableVFP+0x10>
 8005e28:	6801      	ldr	r1, [r0, #0]
 8005e2a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005e2e:	6001      	str	r1, [r0, #0]
 8005e30:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005e32:	bf00      	nop
 8005e34:	e000ed88 	.word	0xe000ed88

08005e38 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005e38:	b480      	push	{r7}
 8005e3a:	b085      	sub	sp, #20
 8005e3c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005e3e:	f3ef 8305 	mrs	r3, IPSR
 8005e42:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	2b0f      	cmp	r3, #15
 8005e48:	d914      	bls.n	8005e74 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005e4a:	4a17      	ldr	r2, [pc, #92]	; (8005ea8 <vPortValidateInterruptPriority+0x70>)
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	4413      	add	r3, r2
 8005e50:	781b      	ldrb	r3, [r3, #0]
 8005e52:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005e54:	4b15      	ldr	r3, [pc, #84]	; (8005eac <vPortValidateInterruptPriority+0x74>)
 8005e56:	781b      	ldrb	r3, [r3, #0]
 8005e58:	7afa      	ldrb	r2, [r7, #11]
 8005e5a:	429a      	cmp	r2, r3
 8005e5c:	d20a      	bcs.n	8005e74 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	607b      	str	r3, [r7, #4]
}
 8005e70:	bf00      	nop
 8005e72:	e7fe      	b.n	8005e72 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005e74:	4b0e      	ldr	r3, [pc, #56]	; (8005eb0 <vPortValidateInterruptPriority+0x78>)
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005e7c:	4b0d      	ldr	r3, [pc, #52]	; (8005eb4 <vPortValidateInterruptPriority+0x7c>)
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	429a      	cmp	r2, r3
 8005e82:	d90a      	bls.n	8005e9a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e88:	f383 8811 	msr	BASEPRI, r3
 8005e8c:	f3bf 8f6f 	isb	sy
 8005e90:	f3bf 8f4f 	dsb	sy
 8005e94:	603b      	str	r3, [r7, #0]
}
 8005e96:	bf00      	nop
 8005e98:	e7fe      	b.n	8005e98 <vPortValidateInterruptPriority+0x60>
	}
 8005e9a:	bf00      	nop
 8005e9c:	3714      	adds	r7, #20
 8005e9e:	46bd      	mov	sp, r7
 8005ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop
 8005ea8:	e000e3f0 	.word	0xe000e3f0
 8005eac:	20000f5c 	.word	0x20000f5c
 8005eb0:	e000ed0c 	.word	0xe000ed0c
 8005eb4:	20000f60 	.word	0x20000f60

08005eb8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005eb8:	b580      	push	{r7, lr}
 8005eba:	b08a      	sub	sp, #40	; 0x28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005ec0:	2300      	movs	r3, #0
 8005ec2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005ec4:	f7fe fd92 	bl	80049ec <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005ec8:	4b5b      	ldr	r3, [pc, #364]	; (8006038 <pvPortMalloc+0x180>)
 8005eca:	681b      	ldr	r3, [r3, #0]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d101      	bne.n	8005ed4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005ed0:	f000 f920 	bl	8006114 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005ed4:	4b59      	ldr	r3, [pc, #356]	; (800603c <pvPortMalloc+0x184>)
 8005ed6:	681a      	ldr	r2, [r3, #0]
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	4013      	ands	r3, r2
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	f040 8093 	bne.w	8006008 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01d      	beq.n	8005f24 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005ee8:	2208      	movs	r2, #8
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	4413      	add	r3, r2
 8005eee:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f003 0307 	and.w	r3, r3, #7
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d014      	beq.n	8005f24 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	f023 0307 	bic.w	r3, r3, #7
 8005f00:	3308      	adds	r3, #8
 8005f02:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	f003 0307 	and.w	r3, r3, #7
 8005f0a:	2b00      	cmp	r3, #0
 8005f0c:	d00a      	beq.n	8005f24 <pvPortMalloc+0x6c>
	__asm volatile
 8005f0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f12:	f383 8811 	msr	BASEPRI, r3
 8005f16:	f3bf 8f6f 	isb	sy
 8005f1a:	f3bf 8f4f 	dsb	sy
 8005f1e:	617b      	str	r3, [r7, #20]
}
 8005f20:	bf00      	nop
 8005f22:	e7fe      	b.n	8005f22 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d06e      	beq.n	8006008 <pvPortMalloc+0x150>
 8005f2a:	4b45      	ldr	r3, [pc, #276]	; (8006040 <pvPortMalloc+0x188>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	687a      	ldr	r2, [r7, #4]
 8005f30:	429a      	cmp	r2, r3
 8005f32:	d869      	bhi.n	8006008 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005f34:	4b43      	ldr	r3, [pc, #268]	; (8006044 <pvPortMalloc+0x18c>)
 8005f36:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005f38:	4b42      	ldr	r3, [pc, #264]	; (8006044 <pvPortMalloc+0x18c>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f3e:	e004      	b.n	8005f4a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f42:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f4c:	685b      	ldr	r3, [r3, #4]
 8005f4e:	687a      	ldr	r2, [r7, #4]
 8005f50:	429a      	cmp	r2, r3
 8005f52:	d903      	bls.n	8005f5c <pvPortMalloc+0xa4>
 8005f54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d1f1      	bne.n	8005f40 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005f5c:	4b36      	ldr	r3, [pc, #216]	; (8006038 <pvPortMalloc+0x180>)
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f62:	429a      	cmp	r2, r3
 8005f64:	d050      	beq.n	8006008 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005f66:	6a3b      	ldr	r3, [r7, #32]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	2208      	movs	r2, #8
 8005f6c:	4413      	add	r3, r2
 8005f6e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005f70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f72:	681a      	ldr	r2, [r3, #0]
 8005f74:	6a3b      	ldr	r3, [r7, #32]
 8005f76:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005f78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005f7a:	685a      	ldr	r2, [r3, #4]
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	1ad2      	subs	r2, r2, r3
 8005f80:	2308      	movs	r3, #8
 8005f82:	005b      	lsls	r3, r3, #1
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d91f      	bls.n	8005fc8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005f88:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005f90:	69bb      	ldr	r3, [r7, #24]
 8005f92:	f003 0307 	and.w	r3, r3, #7
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00a      	beq.n	8005fb0 <pvPortMalloc+0xf8>
	__asm volatile
 8005f9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f9e:	f383 8811 	msr	BASEPRI, r3
 8005fa2:	f3bf 8f6f 	isb	sy
 8005fa6:	f3bf 8f4f 	dsb	sy
 8005faa:	613b      	str	r3, [r7, #16]
}
 8005fac:	bf00      	nop
 8005fae:	e7fe      	b.n	8005fae <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005fb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fb2:	685a      	ldr	r2, [r3, #4]
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	1ad2      	subs	r2, r2, r3
 8005fb8:	69bb      	ldr	r3, [r7, #24]
 8005fba:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fbe:	687a      	ldr	r2, [r7, #4]
 8005fc0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005fc2:	69b8      	ldr	r0, [r7, #24]
 8005fc4:	f000 f908 	bl	80061d8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005fc8:	4b1d      	ldr	r3, [pc, #116]	; (8006040 <pvPortMalloc+0x188>)
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	1ad3      	subs	r3, r2, r3
 8005fd2:	4a1b      	ldr	r2, [pc, #108]	; (8006040 <pvPortMalloc+0x188>)
 8005fd4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005fd6:	4b1a      	ldr	r3, [pc, #104]	; (8006040 <pvPortMalloc+0x188>)
 8005fd8:	681a      	ldr	r2, [r3, #0]
 8005fda:	4b1b      	ldr	r3, [pc, #108]	; (8006048 <pvPortMalloc+0x190>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	429a      	cmp	r2, r3
 8005fe0:	d203      	bcs.n	8005fea <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005fe2:	4b17      	ldr	r3, [pc, #92]	; (8006040 <pvPortMalloc+0x188>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	4a18      	ldr	r2, [pc, #96]	; (8006048 <pvPortMalloc+0x190>)
 8005fe8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005fec:	685a      	ldr	r2, [r3, #4]
 8005fee:	4b13      	ldr	r3, [pc, #76]	; (800603c <pvPortMalloc+0x184>)
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	431a      	orrs	r2, r3
 8005ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005ff8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ffa:	2200      	movs	r2, #0
 8005ffc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005ffe:	4b13      	ldr	r3, [pc, #76]	; (800604c <pvPortMalloc+0x194>)
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	3301      	adds	r3, #1
 8006004:	4a11      	ldr	r2, [pc, #68]	; (800604c <pvPortMalloc+0x194>)
 8006006:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8006008:	f7fe fcfe 	bl	8004a08 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800600c:	69fb      	ldr	r3, [r7, #28]
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	2b00      	cmp	r3, #0
 8006014:	d00a      	beq.n	800602c <pvPortMalloc+0x174>
	__asm volatile
 8006016:	f04f 0350 	mov.w	r3, #80	; 0x50
 800601a:	f383 8811 	msr	BASEPRI, r3
 800601e:	f3bf 8f6f 	isb	sy
 8006022:	f3bf 8f4f 	dsb	sy
 8006026:	60fb      	str	r3, [r7, #12]
}
 8006028:	bf00      	nop
 800602a:	e7fe      	b.n	800602a <pvPortMalloc+0x172>
	return pvReturn;
 800602c:	69fb      	ldr	r3, [r7, #28]
}
 800602e:	4618      	mov	r0, r3
 8006030:	3728      	adds	r7, #40	; 0x28
 8006032:	46bd      	mov	sp, r7
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	20001b24 	.word	0x20001b24
 800603c:	20001b38 	.word	0x20001b38
 8006040:	20001b28 	.word	0x20001b28
 8006044:	20001b1c 	.word	0x20001b1c
 8006048:	20001b2c 	.word	0x20001b2c
 800604c:	20001b30 	.word	0x20001b30

08006050 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006050:	b580      	push	{r7, lr}
 8006052:	b086      	sub	sp, #24
 8006054:	af00      	add	r7, sp, #0
 8006056:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d04d      	beq.n	80060fe <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006062:	2308      	movs	r3, #8
 8006064:	425b      	negs	r3, r3
 8006066:	697a      	ldr	r2, [r7, #20]
 8006068:	4413      	add	r3, r2
 800606a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800606c:	697b      	ldr	r3, [r7, #20]
 800606e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006070:	693b      	ldr	r3, [r7, #16]
 8006072:	685a      	ldr	r2, [r3, #4]
 8006074:	4b24      	ldr	r3, [pc, #144]	; (8006108 <vPortFree+0xb8>)
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	4013      	ands	r3, r2
 800607a:	2b00      	cmp	r3, #0
 800607c:	d10a      	bne.n	8006094 <vPortFree+0x44>
	__asm volatile
 800607e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006082:	f383 8811 	msr	BASEPRI, r3
 8006086:	f3bf 8f6f 	isb	sy
 800608a:	f3bf 8f4f 	dsb	sy
 800608e:	60fb      	str	r3, [r7, #12]
}
 8006090:	bf00      	nop
 8006092:	e7fe      	b.n	8006092 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006094:	693b      	ldr	r3, [r7, #16]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d00a      	beq.n	80060b2 <vPortFree+0x62>
	__asm volatile
 800609c:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060a0:	f383 8811 	msr	BASEPRI, r3
 80060a4:	f3bf 8f6f 	isb	sy
 80060a8:	f3bf 8f4f 	dsb	sy
 80060ac:	60bb      	str	r3, [r7, #8]
}
 80060ae:	bf00      	nop
 80060b0:	e7fe      	b.n	80060b0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	685a      	ldr	r2, [r3, #4]
 80060b6:	4b14      	ldr	r3, [pc, #80]	; (8006108 <vPortFree+0xb8>)
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4013      	ands	r3, r2
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d01e      	beq.n	80060fe <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80060c0:	693b      	ldr	r3, [r7, #16]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	2b00      	cmp	r3, #0
 80060c6:	d11a      	bne.n	80060fe <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80060c8:	693b      	ldr	r3, [r7, #16]
 80060ca:	685a      	ldr	r2, [r3, #4]
 80060cc:	4b0e      	ldr	r3, [pc, #56]	; (8006108 <vPortFree+0xb8>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	43db      	mvns	r3, r3
 80060d2:	401a      	ands	r2, r3
 80060d4:	693b      	ldr	r3, [r7, #16]
 80060d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80060d8:	f7fe fc88 	bl	80049ec <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80060dc:	693b      	ldr	r3, [r7, #16]
 80060de:	685a      	ldr	r2, [r3, #4]
 80060e0:	4b0a      	ldr	r3, [pc, #40]	; (800610c <vPortFree+0xbc>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	4413      	add	r3, r2
 80060e6:	4a09      	ldr	r2, [pc, #36]	; (800610c <vPortFree+0xbc>)
 80060e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80060ea:	6938      	ldr	r0, [r7, #16]
 80060ec:	f000 f874 	bl	80061d8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80060f0:	4b07      	ldr	r3, [pc, #28]	; (8006110 <vPortFree+0xc0>)
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	3301      	adds	r3, #1
 80060f6:	4a06      	ldr	r2, [pc, #24]	; (8006110 <vPortFree+0xc0>)
 80060f8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80060fa:	f7fe fc85 	bl	8004a08 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80060fe:	bf00      	nop
 8006100:	3718      	adds	r7, #24
 8006102:	46bd      	mov	sp, r7
 8006104:	bd80      	pop	{r7, pc}
 8006106:	bf00      	nop
 8006108:	20001b38 	.word	0x20001b38
 800610c:	20001b28 	.word	0x20001b28
 8006110:	20001b34 	.word	0x20001b34

08006114 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8006114:	b480      	push	{r7}
 8006116:	b085      	sub	sp, #20
 8006118:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800611a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 800611e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8006120:	4b27      	ldr	r3, [pc, #156]	; (80061c0 <prvHeapInit+0xac>)
 8006122:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	2b00      	cmp	r3, #0
 800612c:	d00c      	beq.n	8006148 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800612e:	68fb      	ldr	r3, [r7, #12]
 8006130:	3307      	adds	r3, #7
 8006132:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f023 0307 	bic.w	r3, r3, #7
 800613a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800613c:	68ba      	ldr	r2, [r7, #8]
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	4a1f      	ldr	r2, [pc, #124]	; (80061c0 <prvHeapInit+0xac>)
 8006144:	4413      	add	r3, r2
 8006146:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800614c:	4a1d      	ldr	r2, [pc, #116]	; (80061c4 <prvHeapInit+0xb0>)
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006152:	4b1c      	ldr	r3, [pc, #112]	; (80061c4 <prvHeapInit+0xb0>)
 8006154:	2200      	movs	r2, #0
 8006156:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68ba      	ldr	r2, [r7, #8]
 800615c:	4413      	add	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006160:	2208      	movs	r2, #8
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	1a9b      	subs	r3, r3, r2
 8006166:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	f023 0307 	bic.w	r3, r3, #7
 800616e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006170:	68fb      	ldr	r3, [r7, #12]
 8006172:	4a15      	ldr	r2, [pc, #84]	; (80061c8 <prvHeapInit+0xb4>)
 8006174:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006176:	4b14      	ldr	r3, [pc, #80]	; (80061c8 <prvHeapInit+0xb4>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	2200      	movs	r2, #0
 800617c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800617e:	4b12      	ldr	r3, [pc, #72]	; (80061c8 <prvHeapInit+0xb4>)
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	2200      	movs	r2, #0
 8006184:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68fa      	ldr	r2, [r7, #12]
 800618e:	1ad2      	subs	r2, r2, r3
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006194:	4b0c      	ldr	r3, [pc, #48]	; (80061c8 <prvHeapInit+0xb4>)
 8006196:	681a      	ldr	r2, [r3, #0]
 8006198:	683b      	ldr	r3, [r7, #0]
 800619a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800619c:	683b      	ldr	r3, [r7, #0]
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	4a0a      	ldr	r2, [pc, #40]	; (80061cc <prvHeapInit+0xb8>)
 80061a2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80061a4:	683b      	ldr	r3, [r7, #0]
 80061a6:	685b      	ldr	r3, [r3, #4]
 80061a8:	4a09      	ldr	r2, [pc, #36]	; (80061d0 <prvHeapInit+0xbc>)
 80061aa:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80061ac:	4b09      	ldr	r3, [pc, #36]	; (80061d4 <prvHeapInit+0xc0>)
 80061ae:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80061b2:	601a      	str	r2, [r3, #0]
}
 80061b4:	bf00      	nop
 80061b6:	3714      	adds	r7, #20
 80061b8:	46bd      	mov	sp, r7
 80061ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061be:	4770      	bx	lr
 80061c0:	20000f64 	.word	0x20000f64
 80061c4:	20001b1c 	.word	0x20001b1c
 80061c8:	20001b24 	.word	0x20001b24
 80061cc:	20001b2c 	.word	0x20001b2c
 80061d0:	20001b28 	.word	0x20001b28
 80061d4:	20001b38 	.word	0x20001b38

080061d8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80061d8:	b480      	push	{r7}
 80061da:	b085      	sub	sp, #20
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80061e0:	4b28      	ldr	r3, [pc, #160]	; (8006284 <prvInsertBlockIntoFreeList+0xac>)
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	e002      	b.n	80061ec <prvInsertBlockIntoFreeList+0x14>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	60fb      	str	r3, [r7, #12]
 80061ec:	68fb      	ldr	r3, [r7, #12]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	687a      	ldr	r2, [r7, #4]
 80061f2:	429a      	cmp	r2, r3
 80061f4:	d8f7      	bhi.n	80061e6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	685b      	ldr	r3, [r3, #4]
 80061fe:	68ba      	ldr	r2, [r7, #8]
 8006200:	4413      	add	r3, r2
 8006202:	687a      	ldr	r2, [r7, #4]
 8006204:	429a      	cmp	r2, r3
 8006206:	d108      	bne.n	800621a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	685a      	ldr	r2, [r3, #4]
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	685b      	ldr	r3, [r3, #4]
 8006210:	441a      	add	r2, r3
 8006212:	68fb      	ldr	r3, [r7, #12]
 8006214:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006216:	68fb      	ldr	r3, [r7, #12]
 8006218:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	685b      	ldr	r3, [r3, #4]
 8006222:	68ba      	ldr	r2, [r7, #8]
 8006224:	441a      	add	r2, r3
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	d118      	bne.n	8006260 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	681a      	ldr	r2, [r3, #0]
 8006232:	4b15      	ldr	r3, [pc, #84]	; (8006288 <prvInsertBlockIntoFreeList+0xb0>)
 8006234:	681b      	ldr	r3, [r3, #0]
 8006236:	429a      	cmp	r2, r3
 8006238:	d00d      	beq.n	8006256 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	685b      	ldr	r3, [r3, #4]
 8006244:	441a      	add	r2, r3
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	681b      	ldr	r3, [r3, #0]
 800624e:	681a      	ldr	r2, [r3, #0]
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	601a      	str	r2, [r3, #0]
 8006254:	e008      	b.n	8006268 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006256:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <prvInsertBlockIntoFreeList+0xb0>)
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	601a      	str	r2, [r3, #0]
 800625e:	e003      	b.n	8006268 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006260:	68fb      	ldr	r3, [r7, #12]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006268:	68fa      	ldr	r2, [r7, #12]
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	429a      	cmp	r2, r3
 800626e:	d002      	beq.n	8006276 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	687a      	ldr	r2, [r7, #4]
 8006274:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006276:	bf00      	nop
 8006278:	3714      	adds	r7, #20
 800627a:	46bd      	mov	sp, r7
 800627c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop
 8006284:	20001b1c 	.word	0x20001b1c
 8006288:	20001b24 	.word	0x20001b24

0800628c <__libc_init_array>:
 800628c:	b570      	push	{r4, r5, r6, lr}
 800628e:	4d0d      	ldr	r5, [pc, #52]	; (80062c4 <__libc_init_array+0x38>)
 8006290:	4c0d      	ldr	r4, [pc, #52]	; (80062c8 <__libc_init_array+0x3c>)
 8006292:	1b64      	subs	r4, r4, r5
 8006294:	10a4      	asrs	r4, r4, #2
 8006296:	2600      	movs	r6, #0
 8006298:	42a6      	cmp	r6, r4
 800629a:	d109      	bne.n	80062b0 <__libc_init_array+0x24>
 800629c:	4d0b      	ldr	r5, [pc, #44]	; (80062cc <__libc_init_array+0x40>)
 800629e:	4c0c      	ldr	r4, [pc, #48]	; (80062d0 <__libc_init_array+0x44>)
 80062a0:	f000 f8f2 	bl	8006488 <_init>
 80062a4:	1b64      	subs	r4, r4, r5
 80062a6:	10a4      	asrs	r4, r4, #2
 80062a8:	2600      	movs	r6, #0
 80062aa:	42a6      	cmp	r6, r4
 80062ac:	d105      	bne.n	80062ba <__libc_init_array+0x2e>
 80062ae:	bd70      	pop	{r4, r5, r6, pc}
 80062b0:	f855 3b04 	ldr.w	r3, [r5], #4
 80062b4:	4798      	blx	r3
 80062b6:	3601      	adds	r6, #1
 80062b8:	e7ee      	b.n	8006298 <__libc_init_array+0xc>
 80062ba:	f855 3b04 	ldr.w	r3, [r5], #4
 80062be:	4798      	blx	r3
 80062c0:	3601      	adds	r6, #1
 80062c2:	e7f2      	b.n	80062aa <__libc_init_array+0x1e>
 80062c4:	080065fc 	.word	0x080065fc
 80062c8:	080065fc 	.word	0x080065fc
 80062cc:	080065fc 	.word	0x080065fc
 80062d0:	08006600 	.word	0x08006600

080062d4 <__retarget_lock_acquire_recursive>:
 80062d4:	4770      	bx	lr

080062d6 <__retarget_lock_release_recursive>:
 80062d6:	4770      	bx	lr

080062d8 <memcpy>:
 80062d8:	440a      	add	r2, r1
 80062da:	4291      	cmp	r1, r2
 80062dc:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80062e0:	d100      	bne.n	80062e4 <memcpy+0xc>
 80062e2:	4770      	bx	lr
 80062e4:	b510      	push	{r4, lr}
 80062e6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80062ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80062ee:	4291      	cmp	r1, r2
 80062f0:	d1f9      	bne.n	80062e6 <memcpy+0xe>
 80062f2:	bd10      	pop	{r4, pc}

080062f4 <memset>:
 80062f4:	4402      	add	r2, r0
 80062f6:	4603      	mov	r3, r0
 80062f8:	4293      	cmp	r3, r2
 80062fa:	d100      	bne.n	80062fe <memset+0xa>
 80062fc:	4770      	bx	lr
 80062fe:	f803 1b01 	strb.w	r1, [r3], #1
 8006302:	e7f9      	b.n	80062f8 <memset+0x4>

08006304 <cleanup_glue>:
 8006304:	b538      	push	{r3, r4, r5, lr}
 8006306:	460c      	mov	r4, r1
 8006308:	6809      	ldr	r1, [r1, #0]
 800630a:	4605      	mov	r5, r0
 800630c:	b109      	cbz	r1, 8006312 <cleanup_glue+0xe>
 800630e:	f7ff fff9 	bl	8006304 <cleanup_glue>
 8006312:	4621      	mov	r1, r4
 8006314:	4628      	mov	r0, r5
 8006316:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800631a:	f000 b869 	b.w	80063f0 <_free_r>
	...

08006320 <_reclaim_reent>:
 8006320:	4b2c      	ldr	r3, [pc, #176]	; (80063d4 <_reclaim_reent+0xb4>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4283      	cmp	r3, r0
 8006326:	b570      	push	{r4, r5, r6, lr}
 8006328:	4604      	mov	r4, r0
 800632a:	d051      	beq.n	80063d0 <_reclaim_reent+0xb0>
 800632c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800632e:	b143      	cbz	r3, 8006342 <_reclaim_reent+0x22>
 8006330:	68db      	ldr	r3, [r3, #12]
 8006332:	2b00      	cmp	r3, #0
 8006334:	d14a      	bne.n	80063cc <_reclaim_reent+0xac>
 8006336:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006338:	6819      	ldr	r1, [r3, #0]
 800633a:	b111      	cbz	r1, 8006342 <_reclaim_reent+0x22>
 800633c:	4620      	mov	r0, r4
 800633e:	f000 f857 	bl	80063f0 <_free_r>
 8006342:	6961      	ldr	r1, [r4, #20]
 8006344:	b111      	cbz	r1, 800634c <_reclaim_reent+0x2c>
 8006346:	4620      	mov	r0, r4
 8006348:	f000 f852 	bl	80063f0 <_free_r>
 800634c:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800634e:	b111      	cbz	r1, 8006356 <_reclaim_reent+0x36>
 8006350:	4620      	mov	r0, r4
 8006352:	f000 f84d 	bl	80063f0 <_free_r>
 8006356:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006358:	b111      	cbz	r1, 8006360 <_reclaim_reent+0x40>
 800635a:	4620      	mov	r0, r4
 800635c:	f000 f848 	bl	80063f0 <_free_r>
 8006360:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006362:	b111      	cbz	r1, 800636a <_reclaim_reent+0x4a>
 8006364:	4620      	mov	r0, r4
 8006366:	f000 f843 	bl	80063f0 <_free_r>
 800636a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800636c:	b111      	cbz	r1, 8006374 <_reclaim_reent+0x54>
 800636e:	4620      	mov	r0, r4
 8006370:	f000 f83e 	bl	80063f0 <_free_r>
 8006374:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006376:	b111      	cbz	r1, 800637e <_reclaim_reent+0x5e>
 8006378:	4620      	mov	r0, r4
 800637a:	f000 f839 	bl	80063f0 <_free_r>
 800637e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006380:	b111      	cbz	r1, 8006388 <_reclaim_reent+0x68>
 8006382:	4620      	mov	r0, r4
 8006384:	f000 f834 	bl	80063f0 <_free_r>
 8006388:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800638a:	b111      	cbz	r1, 8006392 <_reclaim_reent+0x72>
 800638c:	4620      	mov	r0, r4
 800638e:	f000 f82f 	bl	80063f0 <_free_r>
 8006392:	69a3      	ldr	r3, [r4, #24]
 8006394:	b1e3      	cbz	r3, 80063d0 <_reclaim_reent+0xb0>
 8006396:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006398:	4620      	mov	r0, r4
 800639a:	4798      	blx	r3
 800639c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800639e:	b1b9      	cbz	r1, 80063d0 <_reclaim_reent+0xb0>
 80063a0:	4620      	mov	r0, r4
 80063a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80063a6:	f7ff bfad 	b.w	8006304 <cleanup_glue>
 80063aa:	5949      	ldr	r1, [r1, r5]
 80063ac:	b941      	cbnz	r1, 80063c0 <_reclaim_reent+0xa0>
 80063ae:	3504      	adds	r5, #4
 80063b0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80063b2:	2d80      	cmp	r5, #128	; 0x80
 80063b4:	68d9      	ldr	r1, [r3, #12]
 80063b6:	d1f8      	bne.n	80063aa <_reclaim_reent+0x8a>
 80063b8:	4620      	mov	r0, r4
 80063ba:	f000 f819 	bl	80063f0 <_free_r>
 80063be:	e7ba      	b.n	8006336 <_reclaim_reent+0x16>
 80063c0:	680e      	ldr	r6, [r1, #0]
 80063c2:	4620      	mov	r0, r4
 80063c4:	f000 f814 	bl	80063f0 <_free_r>
 80063c8:	4631      	mov	r1, r6
 80063ca:	e7ef      	b.n	80063ac <_reclaim_reent+0x8c>
 80063cc:	2500      	movs	r5, #0
 80063ce:	e7ef      	b.n	80063b0 <_reclaim_reent+0x90>
 80063d0:	bd70      	pop	{r4, r5, r6, pc}
 80063d2:	bf00      	nop
 80063d4:	20000010 	.word	0x20000010

080063d8 <__malloc_lock>:
 80063d8:	4801      	ldr	r0, [pc, #4]	; (80063e0 <__malloc_lock+0x8>)
 80063da:	f7ff bf7b 	b.w	80062d4 <__retarget_lock_acquire_recursive>
 80063de:	bf00      	nop
 80063e0:	20001b3c 	.word	0x20001b3c

080063e4 <__malloc_unlock>:
 80063e4:	4801      	ldr	r0, [pc, #4]	; (80063ec <__malloc_unlock+0x8>)
 80063e6:	f7ff bf76 	b.w	80062d6 <__retarget_lock_release_recursive>
 80063ea:	bf00      	nop
 80063ec:	20001b3c 	.word	0x20001b3c

080063f0 <_free_r>:
 80063f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80063f2:	2900      	cmp	r1, #0
 80063f4:	d044      	beq.n	8006480 <_free_r+0x90>
 80063f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80063fa:	9001      	str	r0, [sp, #4]
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	f1a1 0404 	sub.w	r4, r1, #4
 8006402:	bfb8      	it	lt
 8006404:	18e4      	addlt	r4, r4, r3
 8006406:	f7ff ffe7 	bl	80063d8 <__malloc_lock>
 800640a:	4a1e      	ldr	r2, [pc, #120]	; (8006484 <_free_r+0x94>)
 800640c:	9801      	ldr	r0, [sp, #4]
 800640e:	6813      	ldr	r3, [r2, #0]
 8006410:	b933      	cbnz	r3, 8006420 <_free_r+0x30>
 8006412:	6063      	str	r3, [r4, #4]
 8006414:	6014      	str	r4, [r2, #0]
 8006416:	b003      	add	sp, #12
 8006418:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800641c:	f7ff bfe2 	b.w	80063e4 <__malloc_unlock>
 8006420:	42a3      	cmp	r3, r4
 8006422:	d908      	bls.n	8006436 <_free_r+0x46>
 8006424:	6825      	ldr	r5, [r4, #0]
 8006426:	1961      	adds	r1, r4, r5
 8006428:	428b      	cmp	r3, r1
 800642a:	bf01      	itttt	eq
 800642c:	6819      	ldreq	r1, [r3, #0]
 800642e:	685b      	ldreq	r3, [r3, #4]
 8006430:	1949      	addeq	r1, r1, r5
 8006432:	6021      	streq	r1, [r4, #0]
 8006434:	e7ed      	b.n	8006412 <_free_r+0x22>
 8006436:	461a      	mov	r2, r3
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	b10b      	cbz	r3, 8006440 <_free_r+0x50>
 800643c:	42a3      	cmp	r3, r4
 800643e:	d9fa      	bls.n	8006436 <_free_r+0x46>
 8006440:	6811      	ldr	r1, [r2, #0]
 8006442:	1855      	adds	r5, r2, r1
 8006444:	42a5      	cmp	r5, r4
 8006446:	d10b      	bne.n	8006460 <_free_r+0x70>
 8006448:	6824      	ldr	r4, [r4, #0]
 800644a:	4421      	add	r1, r4
 800644c:	1854      	adds	r4, r2, r1
 800644e:	42a3      	cmp	r3, r4
 8006450:	6011      	str	r1, [r2, #0]
 8006452:	d1e0      	bne.n	8006416 <_free_r+0x26>
 8006454:	681c      	ldr	r4, [r3, #0]
 8006456:	685b      	ldr	r3, [r3, #4]
 8006458:	6053      	str	r3, [r2, #4]
 800645a:	4421      	add	r1, r4
 800645c:	6011      	str	r1, [r2, #0]
 800645e:	e7da      	b.n	8006416 <_free_r+0x26>
 8006460:	d902      	bls.n	8006468 <_free_r+0x78>
 8006462:	230c      	movs	r3, #12
 8006464:	6003      	str	r3, [r0, #0]
 8006466:	e7d6      	b.n	8006416 <_free_r+0x26>
 8006468:	6825      	ldr	r5, [r4, #0]
 800646a:	1961      	adds	r1, r4, r5
 800646c:	428b      	cmp	r3, r1
 800646e:	bf04      	itt	eq
 8006470:	6819      	ldreq	r1, [r3, #0]
 8006472:	685b      	ldreq	r3, [r3, #4]
 8006474:	6063      	str	r3, [r4, #4]
 8006476:	bf04      	itt	eq
 8006478:	1949      	addeq	r1, r1, r5
 800647a:	6021      	streq	r1, [r4, #0]
 800647c:	6054      	str	r4, [r2, #4]
 800647e:	e7ca      	b.n	8006416 <_free_r+0x26>
 8006480:	b003      	add	sp, #12
 8006482:	bd30      	pop	{r4, r5, pc}
 8006484:	20001b40 	.word	0x20001b40

08006488 <_init>:
 8006488:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800648a:	bf00      	nop
 800648c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800648e:	bc08      	pop	{r3}
 8006490:	469e      	mov	lr, r3
 8006492:	4770      	bx	lr

08006494 <_fini>:
 8006494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006496:	bf00      	nop
 8006498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800649a:	bc08      	pop	{r3}
 800649c:	469e      	mov	lr, r3
 800649e:	4770      	bx	lr
