
LECTURE_02.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006fb8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000184  08007148  08007148  00017148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080072cc  080072cc  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080072cc  080072cc  000172cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080072d4  080072d4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080072d4  080072d4  000172d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080072d8  080072d8  000172d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080072dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001d90  20000074  08007350  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001e04  08007350  00021e04  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001da0f  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003a82  00000000  00000000  0003dab3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000017a0  00000000  00000000  00041538  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001638  00000000  00000000  00042cd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00004c4b  00000000  00000000  00044310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00019f0d  00000000  00000000  00048f5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d7703  00000000  00000000  00062e68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0013a56b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00006ab0  00000000  00000000  0013a5bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007130 	.word	0x08007130

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08007130 	.word	0x08007130

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000284:	f000 b974 	b.w	8000570 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	4604      	mov	r4, r0
 80002a8:	468e      	mov	lr, r1
 80002aa:	2b00      	cmp	r3, #0
 80002ac:	d14d      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ae:	428a      	cmp	r2, r1
 80002b0:	4694      	mov	ip, r2
 80002b2:	d969      	bls.n	8000388 <__udivmoddi4+0xe8>
 80002b4:	fab2 f282 	clz	r2, r2
 80002b8:	b152      	cbz	r2, 80002d0 <__udivmoddi4+0x30>
 80002ba:	fa01 f302 	lsl.w	r3, r1, r2
 80002be:	f1c2 0120 	rsb	r1, r2, #32
 80002c2:	fa20 f101 	lsr.w	r1, r0, r1
 80002c6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002ca:	ea41 0e03 	orr.w	lr, r1, r3
 80002ce:	4094      	lsls	r4, r2
 80002d0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002d4:	0c21      	lsrs	r1, r4, #16
 80002d6:	fbbe f6f8 	udiv	r6, lr, r8
 80002da:	fa1f f78c 	uxth.w	r7, ip
 80002de:	fb08 e316 	mls	r3, r8, r6, lr
 80002e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002e6:	fb06 f107 	mul.w	r1, r6, r7
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80002f6:	f080 811f 	bcs.w	8000538 <__udivmoddi4+0x298>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 811c 	bls.w	8000538 <__udivmoddi4+0x298>
 8000300:	3e02      	subs	r6, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a5b      	subs	r3, r3, r1
 8000306:	b2a4      	uxth	r4, r4
 8000308:	fbb3 f0f8 	udiv	r0, r3, r8
 800030c:	fb08 3310 	mls	r3, r8, r0, r3
 8000310:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000314:	fb00 f707 	mul.w	r7, r0, r7
 8000318:	42a7      	cmp	r7, r4
 800031a:	d90a      	bls.n	8000332 <__udivmoddi4+0x92>
 800031c:	eb1c 0404 	adds.w	r4, ip, r4
 8000320:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000324:	f080 810a 	bcs.w	800053c <__udivmoddi4+0x29c>
 8000328:	42a7      	cmp	r7, r4
 800032a:	f240 8107 	bls.w	800053c <__udivmoddi4+0x29c>
 800032e:	4464      	add	r4, ip
 8000330:	3802      	subs	r0, #2
 8000332:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000336:	1be4      	subs	r4, r4, r7
 8000338:	2600      	movs	r6, #0
 800033a:	b11d      	cbz	r5, 8000344 <__udivmoddi4+0xa4>
 800033c:	40d4      	lsrs	r4, r2
 800033e:	2300      	movs	r3, #0
 8000340:	e9c5 4300 	strd	r4, r3, [r5]
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d909      	bls.n	8000362 <__udivmoddi4+0xc2>
 800034e:	2d00      	cmp	r5, #0
 8000350:	f000 80ef 	beq.w	8000532 <__udivmoddi4+0x292>
 8000354:	2600      	movs	r6, #0
 8000356:	e9c5 0100 	strd	r0, r1, [r5]
 800035a:	4630      	mov	r0, r6
 800035c:	4631      	mov	r1, r6
 800035e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000362:	fab3 f683 	clz	r6, r3
 8000366:	2e00      	cmp	r6, #0
 8000368:	d14a      	bne.n	8000400 <__udivmoddi4+0x160>
 800036a:	428b      	cmp	r3, r1
 800036c:	d302      	bcc.n	8000374 <__udivmoddi4+0xd4>
 800036e:	4282      	cmp	r2, r0
 8000370:	f200 80f9 	bhi.w	8000566 <__udivmoddi4+0x2c6>
 8000374:	1a84      	subs	r4, r0, r2
 8000376:	eb61 0303 	sbc.w	r3, r1, r3
 800037a:	2001      	movs	r0, #1
 800037c:	469e      	mov	lr, r3
 800037e:	2d00      	cmp	r5, #0
 8000380:	d0e0      	beq.n	8000344 <__udivmoddi4+0xa4>
 8000382:	e9c5 4e00 	strd	r4, lr, [r5]
 8000386:	e7dd      	b.n	8000344 <__udivmoddi4+0xa4>
 8000388:	b902      	cbnz	r2, 800038c <__udivmoddi4+0xec>
 800038a:	deff      	udf	#255	; 0xff
 800038c:	fab2 f282 	clz	r2, r2
 8000390:	2a00      	cmp	r2, #0
 8000392:	f040 8092 	bne.w	80004ba <__udivmoddi4+0x21a>
 8000396:	eba1 010c 	sub.w	r1, r1, ip
 800039a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800039e:	fa1f fe8c 	uxth.w	lr, ip
 80003a2:	2601      	movs	r6, #1
 80003a4:	0c20      	lsrs	r0, r4, #16
 80003a6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003aa:	fb07 1113 	mls	r1, r7, r3, r1
 80003ae:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003b2:	fb0e f003 	mul.w	r0, lr, r3
 80003b6:	4288      	cmp	r0, r1
 80003b8:	d908      	bls.n	80003cc <__udivmoddi4+0x12c>
 80003ba:	eb1c 0101 	adds.w	r1, ip, r1
 80003be:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003c2:	d202      	bcs.n	80003ca <__udivmoddi4+0x12a>
 80003c4:	4288      	cmp	r0, r1
 80003c6:	f200 80cb 	bhi.w	8000560 <__udivmoddi4+0x2c0>
 80003ca:	4643      	mov	r3, r8
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003d4:	fb07 1110 	mls	r1, r7, r0, r1
 80003d8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003dc:	fb0e fe00 	mul.w	lr, lr, r0
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x156>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003ec:	d202      	bcs.n	80003f4 <__udivmoddi4+0x154>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	f200 80bb 	bhi.w	800056a <__udivmoddi4+0x2ca>
 80003f4:	4608      	mov	r0, r1
 80003f6:	eba4 040e 	sub.w	r4, r4, lr
 80003fa:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 80003fe:	e79c      	b.n	800033a <__udivmoddi4+0x9a>
 8000400:	f1c6 0720 	rsb	r7, r6, #32
 8000404:	40b3      	lsls	r3, r6
 8000406:	fa22 fc07 	lsr.w	ip, r2, r7
 800040a:	ea4c 0c03 	orr.w	ip, ip, r3
 800040e:	fa20 f407 	lsr.w	r4, r0, r7
 8000412:	fa01 f306 	lsl.w	r3, r1, r6
 8000416:	431c      	orrs	r4, r3
 8000418:	40f9      	lsrs	r1, r7
 800041a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800041e:	fa00 f306 	lsl.w	r3, r0, r6
 8000422:	fbb1 f8f9 	udiv	r8, r1, r9
 8000426:	0c20      	lsrs	r0, r4, #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fb09 1118 	mls	r1, r9, r8, r1
 8000430:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000434:	fb08 f00e 	mul.w	r0, r8, lr
 8000438:	4288      	cmp	r0, r1
 800043a:	fa02 f206 	lsl.w	r2, r2, r6
 800043e:	d90b      	bls.n	8000458 <__udivmoddi4+0x1b8>
 8000440:	eb1c 0101 	adds.w	r1, ip, r1
 8000444:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000448:	f080 8088 	bcs.w	800055c <__udivmoddi4+0x2bc>
 800044c:	4288      	cmp	r0, r1
 800044e:	f240 8085 	bls.w	800055c <__udivmoddi4+0x2bc>
 8000452:	f1a8 0802 	sub.w	r8, r8, #2
 8000456:	4461      	add	r1, ip
 8000458:	1a09      	subs	r1, r1, r0
 800045a:	b2a4      	uxth	r4, r4
 800045c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000460:	fb09 1110 	mls	r1, r9, r0, r1
 8000464:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000468:	fb00 fe0e 	mul.w	lr, r0, lr
 800046c:	458e      	cmp	lr, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x1e2>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000478:	d26c      	bcs.n	8000554 <__udivmoddi4+0x2b4>
 800047a:	458e      	cmp	lr, r1
 800047c:	d96a      	bls.n	8000554 <__udivmoddi4+0x2b4>
 800047e:	3802      	subs	r0, #2
 8000480:	4461      	add	r1, ip
 8000482:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000486:	fba0 9402 	umull	r9, r4, r0, r2
 800048a:	eba1 010e 	sub.w	r1, r1, lr
 800048e:	42a1      	cmp	r1, r4
 8000490:	46c8      	mov	r8, r9
 8000492:	46a6      	mov	lr, r4
 8000494:	d356      	bcc.n	8000544 <__udivmoddi4+0x2a4>
 8000496:	d053      	beq.n	8000540 <__udivmoddi4+0x2a0>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x212>
 800049a:	ebb3 0208 	subs.w	r2, r3, r8
 800049e:	eb61 010e 	sbc.w	r1, r1, lr
 80004a2:	fa01 f707 	lsl.w	r7, r1, r7
 80004a6:	fa22 f306 	lsr.w	r3, r2, r6
 80004aa:	40f1      	lsrs	r1, r6
 80004ac:	431f      	orrs	r7, r3
 80004ae:	e9c5 7100 	strd	r7, r1, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	40d8      	lsrs	r0, r3
 80004c0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004c4:	fa21 f303 	lsr.w	r3, r1, r3
 80004c8:	4091      	lsls	r1, r2
 80004ca:	4301      	orrs	r1, r0
 80004cc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d0:	fa1f fe8c 	uxth.w	lr, ip
 80004d4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004d8:	fb07 3610 	mls	r6, r7, r0, r3
 80004dc:	0c0b      	lsrs	r3, r1, #16
 80004de:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004e2:	fb00 f60e 	mul.w	r6, r0, lr
 80004e6:	429e      	cmp	r6, r3
 80004e8:	fa04 f402 	lsl.w	r4, r4, r2
 80004ec:	d908      	bls.n	8000500 <__udivmoddi4+0x260>
 80004ee:	eb1c 0303 	adds.w	r3, ip, r3
 80004f2:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 80004f6:	d22f      	bcs.n	8000558 <__udivmoddi4+0x2b8>
 80004f8:	429e      	cmp	r6, r3
 80004fa:	d92d      	bls.n	8000558 <__udivmoddi4+0x2b8>
 80004fc:	3802      	subs	r0, #2
 80004fe:	4463      	add	r3, ip
 8000500:	1b9b      	subs	r3, r3, r6
 8000502:	b289      	uxth	r1, r1
 8000504:	fbb3 f6f7 	udiv	r6, r3, r7
 8000508:	fb07 3316 	mls	r3, r7, r6, r3
 800050c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000510:	fb06 f30e 	mul.w	r3, r6, lr
 8000514:	428b      	cmp	r3, r1
 8000516:	d908      	bls.n	800052a <__udivmoddi4+0x28a>
 8000518:	eb1c 0101 	adds.w	r1, ip, r1
 800051c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000520:	d216      	bcs.n	8000550 <__udivmoddi4+0x2b0>
 8000522:	428b      	cmp	r3, r1
 8000524:	d914      	bls.n	8000550 <__udivmoddi4+0x2b0>
 8000526:	3e02      	subs	r6, #2
 8000528:	4461      	add	r1, ip
 800052a:	1ac9      	subs	r1, r1, r3
 800052c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000530:	e738      	b.n	80003a4 <__udivmoddi4+0x104>
 8000532:	462e      	mov	r6, r5
 8000534:	4628      	mov	r0, r5
 8000536:	e705      	b.n	8000344 <__udivmoddi4+0xa4>
 8000538:	4606      	mov	r6, r0
 800053a:	e6e3      	b.n	8000304 <__udivmoddi4+0x64>
 800053c:	4618      	mov	r0, r3
 800053e:	e6f8      	b.n	8000332 <__udivmoddi4+0x92>
 8000540:	454b      	cmp	r3, r9
 8000542:	d2a9      	bcs.n	8000498 <__udivmoddi4+0x1f8>
 8000544:	ebb9 0802 	subs.w	r8, r9, r2
 8000548:	eb64 0e0c 	sbc.w	lr, r4, ip
 800054c:	3801      	subs	r0, #1
 800054e:	e7a3      	b.n	8000498 <__udivmoddi4+0x1f8>
 8000550:	4646      	mov	r6, r8
 8000552:	e7ea      	b.n	800052a <__udivmoddi4+0x28a>
 8000554:	4620      	mov	r0, r4
 8000556:	e794      	b.n	8000482 <__udivmoddi4+0x1e2>
 8000558:	4640      	mov	r0, r8
 800055a:	e7d1      	b.n	8000500 <__udivmoddi4+0x260>
 800055c:	46d0      	mov	r8, sl
 800055e:	e77b      	b.n	8000458 <__udivmoddi4+0x1b8>
 8000560:	3b02      	subs	r3, #2
 8000562:	4461      	add	r1, ip
 8000564:	e732      	b.n	80003cc <__udivmoddi4+0x12c>
 8000566:	4630      	mov	r0, r6
 8000568:	e709      	b.n	800037e <__udivmoddi4+0xde>
 800056a:	4464      	add	r4, ip
 800056c:	3802      	subs	r0, #2
 800056e:	e742      	b.n	80003f6 <__udivmoddi4+0x156>

08000570 <__aeabi_idiv0>:
 8000570:	4770      	bx	lr
 8000572:	bf00      	nop

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fb65 	bl	8000c46 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f826 	bl	80005cc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f8b6 	bl	80006f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f884 	bl	8000690 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000588:	f002 ff6c 	bl	8003464 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of dynamicTask */
  dynamicTaskHandle = osThreadNew(StartDynamicTask, NULL, &dynamicTask_attributes);
 800058c:	4a09      	ldr	r2, [pc, #36]	; (80005b4 <main+0x40>)
 800058e:	2100      	movs	r1, #0
 8000590:	4809      	ldr	r0, [pc, #36]	; (80005b8 <main+0x44>)
 8000592:	f002 ffb1 	bl	80034f8 <osThreadNew>
 8000596:	4603      	mov	r3, r0
 8000598:	4a08      	ldr	r2, [pc, #32]	; (80005bc <main+0x48>)
 800059a:	6013      	str	r3, [r2, #0]

  /* creation of staticTask */
  staticTaskHandle = osThreadNew(StartStaticTask, NULL, &staticTask_attributes);
 800059c:	4a08      	ldr	r2, [pc, #32]	; (80005c0 <main+0x4c>)
 800059e:	2100      	movs	r1, #0
 80005a0:	4808      	ldr	r0, [pc, #32]	; (80005c4 <main+0x50>)
 80005a2:	f002 ffa9 	bl	80034f8 <osThreadNew>
 80005a6:	4603      	mov	r3, r0
 80005a8:	4a07      	ldr	r2, [pc, #28]	; (80005c8 <main+0x54>)
 80005aa:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80005ac:	f002 ff7e 	bl	80034ac <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <main+0x3c>
 80005b2:	bf00      	nop
 80005b4:	080071a4 	.word	0x080071a4
 80005b8:	08000785 	.word	0x08000785
 80005bc:	20000114 	.word	0x20000114
 80005c0:	080071c8 	.word	0x080071c8
 80005c4:	080007cd 	.word	0x080007cd
 80005c8:	20000118 	.word	0x20000118

080005cc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b096      	sub	sp, #88	; 0x58
 80005d0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005d2:	f107 0314 	add.w	r3, r7, #20
 80005d6:	2244      	movs	r2, #68	; 0x44
 80005d8:	2100      	movs	r1, #0
 80005da:	4618      	mov	r0, r3
 80005dc:	f005 fe9f 	bl	800631e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005e0:	463b      	mov	r3, r7
 80005e2:	2200      	movs	r2, #0
 80005e4:	601a      	str	r2, [r3, #0]
 80005e6:	605a      	str	r2, [r3, #4]
 80005e8:	609a      	str	r2, [r3, #8]
 80005ea:	60da      	str	r2, [r3, #12]
 80005ec:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005ee:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005f2:	f000 fdfd 	bl	80011f0 <HAL_PWREx_ControlVoltageScaling>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005fc:	f000 f900 	bl	8000800 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000600:	f000 fdd8 	bl	80011b4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000604:	4b21      	ldr	r3, [pc, #132]	; (800068c <SystemClock_Config+0xc0>)
 8000606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800060a:	4a20      	ldr	r2, [pc, #128]	; (800068c <SystemClock_Config+0xc0>)
 800060c:	f023 0318 	bic.w	r3, r3, #24
 8000610:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000614:	2314      	movs	r3, #20
 8000616:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000618:	2301      	movs	r3, #1
 800061a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800061c:	2301      	movs	r3, #1
 800061e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000620:	2300      	movs	r3, #0
 8000622:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000624:	2360      	movs	r3, #96	; 0x60
 8000626:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000628:	2302      	movs	r3, #2
 800062a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800062c:	2301      	movs	r3, #1
 800062e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000630:	2301      	movs	r3, #1
 8000632:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000634:	2310      	movs	r3, #16
 8000636:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000638:	2307      	movs	r3, #7
 800063a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800063c:	2302      	movs	r3, #2
 800063e:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000640:	2302      	movs	r3, #2
 8000642:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000644:	f107 0314 	add.w	r3, r7, #20
 8000648:	4618      	mov	r0, r3
 800064a:	f000 fe27 	bl	800129c <HAL_RCC_OscConfig>
 800064e:	4603      	mov	r3, r0
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8000654:	f000 f8d4 	bl	8000800 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000658:	230f      	movs	r3, #15
 800065a:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800065c:	2303      	movs	r3, #3
 800065e:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000660:	2300      	movs	r3, #0
 8000662:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000664:	2300      	movs	r3, #0
 8000666:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000668:	2300      	movs	r3, #0
 800066a:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800066c:	463b      	mov	r3, r7
 800066e:	2101      	movs	r1, #1
 8000670:	4618      	mov	r0, r3
 8000672:	f001 fa27 	bl	8001ac4 <HAL_RCC_ClockConfig>
 8000676:	4603      	mov	r3, r0
 8000678:	2b00      	cmp	r3, #0
 800067a:	d001      	beq.n	8000680 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 800067c:	f000 f8c0 	bl	8000800 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000680:	f001 fe6c 	bl	800235c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000684:	bf00      	nop
 8000686:	3758      	adds	r7, #88	; 0x58
 8000688:	46bd      	mov	sp, r7
 800068a:	bd80      	pop	{r7, pc}
 800068c:	40021000 	.word	0x40021000

08000690 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000690:	b580      	push	{r7, lr}
 8000692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 8000696:	4a15      	ldr	r2, [pc, #84]	; (80006ec <MX_USART2_UART_Init+0x5c>)
 8000698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 800069c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006aa:	2200      	movs	r2, #0
 80006ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80006ae:	4b0e      	ldr	r3, [pc, #56]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b0:	2200      	movs	r2, #0
 80006b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80006b4:	4b0c      	ldr	r3, [pc, #48]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006b6:	220c      	movs	r2, #12
 80006b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006ba:	4b0b      	ldr	r3, [pc, #44]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80006c0:	4b09      	ldr	r3, [pc, #36]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006c6:	4b08      	ldr	r3, [pc, #32]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006cc:	4b06      	ldr	r3, [pc, #24]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80006d2:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_USART2_UART_Init+0x58>)
 80006d4:	f002 f9c4 	bl	8002a60 <HAL_UART_Init>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80006de:	f000 f88f 	bl	8000800 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80006e2:	bf00      	nop
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000090 	.word	0x20000090
 80006ec:	40004400 	.word	0x40004400

080006f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b088      	sub	sp, #32
 80006f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80006f6:	f107 030c 	add.w	r3, r7, #12
 80006fa:	2200      	movs	r2, #0
 80006fc:	601a      	str	r2, [r3, #0]
 80006fe:	605a      	str	r2, [r3, #4]
 8000700:	609a      	str	r2, [r3, #8]
 8000702:	60da      	str	r2, [r3, #12]
 8000704:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000706:	4b1d      	ldr	r3, [pc, #116]	; (800077c <MX_GPIO_Init+0x8c>)
 8000708:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800070a:	4a1c      	ldr	r2, [pc, #112]	; (800077c <MX_GPIO_Init+0x8c>)
 800070c:	f043 0304 	orr.w	r3, r3, #4
 8000710:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000712:	4b1a      	ldr	r3, [pc, #104]	; (800077c <MX_GPIO_Init+0x8c>)
 8000714:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000716:	f003 0304 	and.w	r3, r3, #4
 800071a:	60bb      	str	r3, [r7, #8]
 800071c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800071e:	4b17      	ldr	r3, [pc, #92]	; (800077c <MX_GPIO_Init+0x8c>)
 8000720:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000722:	4a16      	ldr	r2, [pc, #88]	; (800077c <MX_GPIO_Init+0x8c>)
 8000724:	f043 0301 	orr.w	r3, r3, #1
 8000728:	64d3      	str	r3, [r2, #76]	; 0x4c
 800072a:	4b14      	ldr	r3, [pc, #80]	; (800077c <MX_GPIO_Init+0x8c>)
 800072c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800072e:	f003 0301 	and.w	r3, r3, #1
 8000732:	607b      	str	r3, [r7, #4]
 8000734:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000736:	4b11      	ldr	r3, [pc, #68]	; (800077c <MX_GPIO_Init+0x8c>)
 8000738:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800073a:	4a10      	ldr	r2, [pc, #64]	; (800077c <MX_GPIO_Init+0x8c>)
 800073c:	f043 0302 	orr.w	r3, r3, #2
 8000740:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000742:	4b0e      	ldr	r3, [pc, #56]	; (800077c <MX_GPIO_Init+0x8c>)
 8000744:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000746:	f003 0302 	and.w	r3, r3, #2
 800074a:	603b      	str	r3, [r7, #0]
 800074c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 800074e:	2200      	movs	r2, #0
 8000750:	2108      	movs	r1, #8
 8000752:	480b      	ldr	r0, [pc, #44]	; (8000780 <MX_GPIO_Init+0x90>)
 8000754:	f000 fcfc 	bl	8001150 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LD3_Pin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000758:	2308      	movs	r3, #8
 800075a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075c:	2301      	movs	r3, #1
 800075e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000764:	2300      	movs	r3, #0
 8000766:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000768:	f107 030c 	add.w	r3, r7, #12
 800076c:	4619      	mov	r1, r3
 800076e:	4804      	ldr	r0, [pc, #16]	; (8000780 <MX_GPIO_Init+0x90>)
 8000770:	f000 fb84 	bl	8000e7c <HAL_GPIO_Init>

}
 8000774:	bf00      	nop
 8000776:	3720      	adds	r7, #32
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40021000 	.word	0x40021000
 8000780:	48000400 	.word	0x48000400

08000784 <StartDynamicTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDynamicTask */
void StartDynamicTask(void *argument)
{
 8000784:	b590      	push	{r4, r7, lr}
 8000786:	b083      	sub	sp, #12
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]

  /* Infinite loop */
  for(;;)
  {
	/* toggle LED3 */
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 800078c:	2108      	movs	r1, #8
 800078e:	480d      	ldr	r0, [pc, #52]	; (80007c4 <StartDynamicTask+0x40>)
 8000790:	f000 fcf6 	bl	8001180 <HAL_GPIO_TogglePin>

	/* print currently remaining free (task) stack
	 * Don't forget the '\n' --> @see retarget.c
	 */
	printf("*** %u bytes free on task stack of %s ***\n", (unsigned int) osThreadGetStackSpace(osThreadGetId()), osThreadGetName(osThreadGetId()));
 8000794:	f002 ff5d 	bl	8003652 <osThreadGetId>
 8000798:	4603      	mov	r3, r0
 800079a:	4618      	mov	r0, r3
 800079c:	f002 ff64 	bl	8003668 <osThreadGetStackSpace>
 80007a0:	4604      	mov	r4, r0
 80007a2:	f002 ff56 	bl	8003652 <osThreadGetId>
 80007a6:	4603      	mov	r3, r0
 80007a8:	4618      	mov	r0, r3
 80007aa:	f002 ff37 	bl	800361c <osThreadGetName>
 80007ae:	4603      	mov	r3, r0
 80007b0:	461a      	mov	r2, r3
 80007b2:	4621      	mov	r1, r4
 80007b4:	4804      	ldr	r0, [pc, #16]	; (80007c8 <StartDynamicTask+0x44>)
 80007b6:	f005 fe4f 	bl	8006458 <iprintf>

	/* 500 ticks task deadline/delay before subseqent iteration
	 * 500 ticks @ 1000 Hz SystemTick frequency == 500 ms
	 */
    osDelay(500);
 80007ba:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80007be:	f002 ff70 	bl	80036a2 <osDelay>
	HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 80007c2:	e7e3      	b.n	800078c <StartDynamicTask+0x8>
 80007c4:	48000400 	.word	0x48000400
 80007c8:	08007160 	.word	0x08007160

080007cc <StartStaticTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartStaticTask */
void StartStaticTask(void *argument)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	b082      	sub	sp, #8
 80007d0:	af00      	add	r7, sp, #0
 80007d2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartStaticTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 80007d4:	2001      	movs	r0, #1
 80007d6:	f002 ff64 	bl	80036a2 <osDelay>
 80007da:	e7fb      	b.n	80007d4 <StartStaticTask+0x8>

080007dc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a04      	ldr	r2, [pc, #16]	; (80007fc <HAL_TIM_PeriodElapsedCallback+0x20>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d101      	bne.n	80007f2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80007ee:	f000 fa43 	bl	8000c78 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80007f2:	bf00      	nop
 80007f4:	3708      	adds	r7, #8
 80007f6:	46bd      	mov	sp, r7
 80007f8:	bd80      	pop	{r7, pc}
 80007fa:	bf00      	nop
 80007fc:	40001000 	.word	0x40001000

08000800 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000800:	b480      	push	{r7}
 8000802:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000804:	b672      	cpsid	i
}
 8000806:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000808:	e7fe      	b.n	8000808 <Error_Handler+0x8>

0800080a <_write>:
  * @param 	file 	...	file descriptor
  * @param	ptr		... pointer to the data buffer.
  * @param	len 	...	length of the buffer in bytes.
  * @retval (int)	... Successfully transmitted bytes.
  */
int _write(int file, char *ptr, int len){
 800080a:	b580      	push	{r7, lr}
 800080c:	b084      	sub	sp, #16
 800080e:	af00      	add	r7, sp, #0
 8000810:	60f8      	str	r0, [r7, #12]
 8000812:	60b9      	str	r1, [r7, #8]
 8000814:	607a      	str	r2, [r7, #4]
	while(len--){
 8000816:	e006      	b.n	8000826 <_write+0x1c>
		putchar(*ptr++);
 8000818:	68bb      	ldr	r3, [r7, #8]
 800081a:	1c5a      	adds	r2, r3, #1
 800081c:	60ba      	str	r2, [r7, #8]
 800081e:	781b      	ldrb	r3, [r3, #0]
 8000820:	4618      	mov	r0, r3
 8000822:	f000 f80b 	bl	800083c <putchar>
	while(len--){
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	1e5a      	subs	r2, r3, #1
 800082a:	607a      	str	r2, [r7, #4]
 800082c:	2b00      	cmp	r3, #0
 800082e:	d1f3      	bne.n	8000818 <_write+0xe>
	}
	return len;
 8000830:	687b      	ldr	r3, [r7, #4]
}
 8000832:	4618      	mov	r0, r3
 8000834:	3710      	adds	r7, #16
 8000836:	46bd      	mov	sp, r7
 8000838:	bd80      	pop	{r7, pc}
	...

0800083c <putchar>:
/**
 *
 * @param ch		... Character to be transmitted.
 * @return	(int) 	... Returns the character.
 */
int	putchar (int ch){
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
	char charTemp = (char) ch;
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	73fb      	strb	r3, [r7, #15]

	//if (charTemp == '\n'){
		//putchar('\r');
	//}
	HAL_UART_Transmit(&huart2, (uint8_t*)&charTemp, 1, -1);
 800084a:	f107 010f 	add.w	r1, r7, #15
 800084e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000852:	2201      	movs	r2, #1
 8000854:	4803      	ldr	r0, [pc, #12]	; (8000864 <putchar+0x28>)
 8000856:	f002 f951 	bl	8002afc <HAL_UART_Transmit>
	return ch;
 800085a:	687b      	ldr	r3, [r7, #4]
}
 800085c:	4618      	mov	r0, r3
 800085e:	3710      	adds	r7, #16
 8000860:	46bd      	mov	sp, r7
 8000862:	bd80      	pop	{r7, pc}
 8000864:	20000090 	.word	0x20000090

08000868 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b082      	sub	sp, #8
 800086c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800086e:	4b11      	ldr	r3, [pc, #68]	; (80008b4 <HAL_MspInit+0x4c>)
 8000870:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000872:	4a10      	ldr	r2, [pc, #64]	; (80008b4 <HAL_MspInit+0x4c>)
 8000874:	f043 0301 	orr.w	r3, r3, #1
 8000878:	6613      	str	r3, [r2, #96]	; 0x60
 800087a:	4b0e      	ldr	r3, [pc, #56]	; (80008b4 <HAL_MspInit+0x4c>)
 800087c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800087e:	f003 0301 	and.w	r3, r3, #1
 8000882:	607b      	str	r3, [r7, #4]
 8000884:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000886:	4b0b      	ldr	r3, [pc, #44]	; (80008b4 <HAL_MspInit+0x4c>)
 8000888:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <HAL_MspInit+0x4c>)
 800088c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000890:	6593      	str	r3, [r2, #88]	; 0x58
 8000892:	4b08      	ldr	r3, [pc, #32]	; (80008b4 <HAL_MspInit+0x4c>)
 8000894:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000896:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800089a:	603b      	str	r3, [r7, #0]
 800089c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	210f      	movs	r1, #15
 80008a2:	f06f 0001 	mvn.w	r0, #1
 80008a6:	f000 fabf 	bl	8000e28 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008aa:	bf00      	nop
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	40021000 	.word	0x40021000

080008b8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b09e      	sub	sp, #120	; 0x78
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008c0:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]
 80008ce:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008d0:	f107 0310 	add.w	r3, r7, #16
 80008d4:	2254      	movs	r2, #84	; 0x54
 80008d6:	2100      	movs	r1, #0
 80008d8:	4618      	mov	r0, r3
 80008da:	f005 fd20 	bl	800631e <memset>
  if(huart->Instance==USART2)
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	4a28      	ldr	r2, [pc, #160]	; (8000984 <HAL_UART_MspInit+0xcc>)
 80008e4:	4293      	cmp	r3, r2
 80008e6:	d148      	bne.n	800097a <HAL_UART_MspInit+0xc2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80008e8:	2302      	movs	r3, #2
 80008ea:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80008ec:	2300      	movs	r3, #0
 80008ee:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008f0:	f107 0310 	add.w	r3, r7, #16
 80008f4:	4618      	mov	r0, r3
 80008f6:	f001 fb3b 	bl	8001f70 <HAL_RCCEx_PeriphCLKConfig>
 80008fa:	4603      	mov	r3, r0
 80008fc:	2b00      	cmp	r3, #0
 80008fe:	d001      	beq.n	8000904 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000900:	f7ff ff7e 	bl	8000800 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000904:	4b20      	ldr	r3, [pc, #128]	; (8000988 <HAL_UART_MspInit+0xd0>)
 8000906:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000908:	4a1f      	ldr	r2, [pc, #124]	; (8000988 <HAL_UART_MspInit+0xd0>)
 800090a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800090e:	6593      	str	r3, [r2, #88]	; 0x58
 8000910:	4b1d      	ldr	r3, [pc, #116]	; (8000988 <HAL_UART_MspInit+0xd0>)
 8000912:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000914:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000918:	60fb      	str	r3, [r7, #12]
 800091a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800091c:	4b1a      	ldr	r3, [pc, #104]	; (8000988 <HAL_UART_MspInit+0xd0>)
 800091e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000920:	4a19      	ldr	r2, [pc, #100]	; (8000988 <HAL_UART_MspInit+0xd0>)
 8000922:	f043 0301 	orr.w	r3, r3, #1
 8000926:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000928:	4b17      	ldr	r3, [pc, #92]	; (8000988 <HAL_UART_MspInit+0xd0>)
 800092a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800092c:	f003 0301 	and.w	r3, r3, #1
 8000930:	60bb      	str	r3, [r7, #8]
 8000932:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 8000934:	2304      	movs	r3, #4
 8000936:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000938:	2302      	movs	r3, #2
 800093a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000940:	2303      	movs	r3, #3
 8000942:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000944:	2307      	movs	r3, #7
 8000946:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 8000948:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800094c:	4619      	mov	r1, r3
 800094e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000952:	f000 fa93 	bl	8000e7c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8000956:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800095a:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095c:	2302      	movs	r3, #2
 800095e:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000960:	2300      	movs	r3, #0
 8000962:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000964:	2303      	movs	r3, #3
 8000966:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8000968:	2303      	movs	r3, #3
 800096a:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 800096c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000970:	4619      	mov	r1, r3
 8000972:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000976:	f000 fa81 	bl	8000e7c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3778      	adds	r7, #120	; 0x78
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40004400 	.word	0x40004400
 8000988:	40021000 	.word	0x40021000

0800098c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800098c:	b580      	push	{r7, lr}
 800098e:	b08e      	sub	sp, #56	; 0x38
 8000990:	af00      	add	r7, sp, #0
 8000992:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000994:	2300      	movs	r3, #0
 8000996:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800099a:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <HAL_InitTick+0xe0>)
 800099c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800099e:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <HAL_InitTick+0xe0>)
 80009a0:	f043 0310 	orr.w	r3, r3, #16
 80009a4:	6593      	str	r3, [r2, #88]	; 0x58
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <HAL_InitTick+0xe0>)
 80009a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80009aa:	f003 0310 	and.w	r3, r3, #16
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80009b2:	f107 0210 	add.w	r2, r7, #16
 80009b6:	f107 0314 	add.w	r3, r7, #20
 80009ba:	4611      	mov	r1, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f001 fa45 	bl	8001e4c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80009c2:	6a3b      	ldr	r3, [r7, #32]
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80009c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d103      	bne.n	80009d4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80009cc:	f001 fa12 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 80009d0:	6378      	str	r0, [r7, #52]	; 0x34
 80009d2:	e004      	b.n	80009de <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80009d4:	f001 fa0e 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 80009d8:	4603      	mov	r3, r0
 80009da:	005b      	lsls	r3, r3, #1
 80009dc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80009de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80009e0:	4a23      	ldr	r2, [pc, #140]	; (8000a70 <HAL_InitTick+0xe4>)
 80009e2:	fba2 2303 	umull	r2, r3, r2, r3
 80009e6:	0c9b      	lsrs	r3, r3, #18
 80009e8:	3b01      	subs	r3, #1
 80009ea:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80009ec:	4b21      	ldr	r3, [pc, #132]	; (8000a74 <HAL_InitTick+0xe8>)
 80009ee:	4a22      	ldr	r2, [pc, #136]	; (8000a78 <HAL_InitTick+0xec>)
 80009f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80009f2:	4b20      	ldr	r3, [pc, #128]	; (8000a74 <HAL_InitTick+0xe8>)
 80009f4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80009f8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80009fa:	4a1e      	ldr	r2, [pc, #120]	; (8000a74 <HAL_InitTick+0xe8>)
 80009fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80009fe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000a00:	4b1c      	ldr	r3, [pc, #112]	; (8000a74 <HAL_InitTick+0xe8>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000a06:	4b1b      	ldr	r3, [pc, #108]	; (8000a74 <HAL_InitTick+0xe8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000a0c:	4b19      	ldr	r3, [pc, #100]	; (8000a74 <HAL_InitTick+0xe8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000a12:	4818      	ldr	r0, [pc, #96]	; (8000a74 <HAL_InitTick+0xe8>)
 8000a14:	f001 fda4 	bl	8002560 <HAL_TIM_Base_Init>
 8000a18:	4603      	mov	r3, r0
 8000a1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000a1e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d11b      	bne.n	8000a5e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000a26:	4813      	ldr	r0, [pc, #76]	; (8000a74 <HAL_InitTick+0xe8>)
 8000a28:	f001 fdfc 	bl	8002624 <HAL_TIM_Base_Start_IT>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000a32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d111      	bne.n	8000a5e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000a3a:	2036      	movs	r0, #54	; 0x36
 8000a3c:	f000 fa10 	bl	8000e60 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	2b0f      	cmp	r3, #15
 8000a44:	d808      	bhi.n	8000a58 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000a46:	2200      	movs	r2, #0
 8000a48:	6879      	ldr	r1, [r7, #4]
 8000a4a:	2036      	movs	r0, #54	; 0x36
 8000a4c:	f000 f9ec 	bl	8000e28 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000a50:	4a0a      	ldr	r2, [pc, #40]	; (8000a7c <HAL_InitTick+0xf0>)
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	6013      	str	r3, [r2, #0]
 8000a56:	e002      	b.n	8000a5e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000a5e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000a62:	4618      	mov	r0, r3
 8000a64:	3738      	adds	r7, #56	; 0x38
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40021000 	.word	0x40021000
 8000a70:	431bde83 	.word	0x431bde83
 8000a74:	200003d8 	.word	0x200003d8
 8000a78:	40001000 	.word	0x40001000
 8000a7c:	20000004 	.word	0x20000004

08000a80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <NMI_Handler+0x4>

08000a86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a86:	b480      	push	{r7}
 8000a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a8a:	e7fe      	b.n	8000a8a <HardFault_Handler+0x4>

08000a8c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a90:	e7fe      	b.n	8000a90 <MemManage_Handler+0x4>

08000a92 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a92:	b480      	push	{r7}
 8000a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a96:	e7fe      	b.n	8000a96 <BusFault_Handler+0x4>

08000a98 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a9c:	e7fe      	b.n	8000a9c <UsageFault_Handler+0x4>

08000a9e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000aa2:	bf00      	nop
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aaa:	4770      	bx	lr

08000aac <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000ab0:	4802      	ldr	r0, [pc, #8]	; (8000abc <TIM6_DAC_IRQHandler+0x10>)
 8000ab2:	f001 fe0b 	bl	80026cc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000ab6:	bf00      	nop
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	200003d8 	.word	0x200003d8

08000ac0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b086      	sub	sp, #24
 8000ac4:	af00      	add	r7, sp, #0
 8000ac6:	60f8      	str	r0, [r7, #12]
 8000ac8:	60b9      	str	r1, [r7, #8]
 8000aca:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000acc:	2300      	movs	r3, #0
 8000ace:	617b      	str	r3, [r7, #20]
 8000ad0:	e00a      	b.n	8000ae8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000ad2:	f3af 8000 	nop.w
 8000ad6:	4601      	mov	r1, r0
 8000ad8:	68bb      	ldr	r3, [r7, #8]
 8000ada:	1c5a      	adds	r2, r3, #1
 8000adc:	60ba      	str	r2, [r7, #8]
 8000ade:	b2ca      	uxtb	r2, r1
 8000ae0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ae2:	697b      	ldr	r3, [r7, #20]
 8000ae4:	3301      	adds	r3, #1
 8000ae6:	617b      	str	r3, [r7, #20]
 8000ae8:	697a      	ldr	r2, [r7, #20]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	429a      	cmp	r2, r3
 8000aee:	dbf0      	blt.n	8000ad2 <_read+0x12>
	}

return len;
 8000af0:	687b      	ldr	r3, [r7, #4]
}
 8000af2:	4618      	mov	r0, r3
 8000af4:	3718      	adds	r7, #24
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}

08000afa <_close>:
	}
	return len;
}

int _close(int file)
{
 8000afa:	b480      	push	{r7}
 8000afc:	b083      	sub	sp, #12
 8000afe:	af00      	add	r7, sp, #0
 8000b00:	6078      	str	r0, [r7, #4]
	return -1;
 8000b02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000b06:	4618      	mov	r0, r3
 8000b08:	370c      	adds	r7, #12
 8000b0a:	46bd      	mov	sp, r7
 8000b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b10:	4770      	bx	lr

08000b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b12:	b480      	push	{r7}
 8000b14:	b083      	sub	sp, #12
 8000b16:	af00      	add	r7, sp, #0
 8000b18:	6078      	str	r0, [r7, #4]
 8000b1a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000b1c:	683b      	ldr	r3, [r7, #0]
 8000b1e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b22:	605a      	str	r2, [r3, #4]
	return 0;
 8000b24:	2300      	movs	r3, #0
}
 8000b26:	4618      	mov	r0, r3
 8000b28:	370c      	adds	r7, #12
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <_isatty>:

int _isatty(int file)
{
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	return 1;
 8000b3a:	2301      	movs	r3, #1
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	b085      	sub	sp, #20
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	60f8      	str	r0, [r7, #12]
 8000b50:	60b9      	str	r1, [r7, #8]
 8000b52:	607a      	str	r2, [r7, #4]
	return 0;
 8000b54:	2300      	movs	r3, #0
}
 8000b56:	4618      	mov	r0, r3
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b60:	4770      	bx	lr
	...

08000b64 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b086      	sub	sp, #24
 8000b68:	af00      	add	r7, sp, #0
 8000b6a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b6c:	4a14      	ldr	r2, [pc, #80]	; (8000bc0 <_sbrk+0x5c>)
 8000b6e:	4b15      	ldr	r3, [pc, #84]	; (8000bc4 <_sbrk+0x60>)
 8000b70:	1ad3      	subs	r3, r2, r3
 8000b72:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b78:	4b13      	ldr	r3, [pc, #76]	; (8000bc8 <_sbrk+0x64>)
 8000b7a:	681b      	ldr	r3, [r3, #0]
 8000b7c:	2b00      	cmp	r3, #0
 8000b7e:	d102      	bne.n	8000b86 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b80:	4b11      	ldr	r3, [pc, #68]	; (8000bc8 <_sbrk+0x64>)
 8000b82:	4a12      	ldr	r2, [pc, #72]	; (8000bcc <_sbrk+0x68>)
 8000b84:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b86:	4b10      	ldr	r3, [pc, #64]	; (8000bc8 <_sbrk+0x64>)
 8000b88:	681a      	ldr	r2, [r3, #0]
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	4413      	add	r3, r2
 8000b8e:	693a      	ldr	r2, [r7, #16]
 8000b90:	429a      	cmp	r2, r3
 8000b92:	d207      	bcs.n	8000ba4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b94:	f005 fa92 	bl	80060bc <__errno>
 8000b98:	4603      	mov	r3, r0
 8000b9a:	220c      	movs	r2, #12
 8000b9c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ba2:	e009      	b.n	8000bb8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000ba4:	4b08      	ldr	r3, [pc, #32]	; (8000bc8 <_sbrk+0x64>)
 8000ba6:	681b      	ldr	r3, [r3, #0]
 8000ba8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000baa:	4b07      	ldr	r3, [pc, #28]	; (8000bc8 <_sbrk+0x64>)
 8000bac:	681a      	ldr	r2, [r3, #0]
 8000bae:	687b      	ldr	r3, [r7, #4]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <_sbrk+0x64>)
 8000bb4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
}
 8000bb8:	4618      	mov	r0, r3
 8000bba:	3718      	adds	r7, #24
 8000bbc:	46bd      	mov	sp, r7
 8000bbe:	bd80      	pop	{r7, pc}
 8000bc0:	20010000 	.word	0x20010000
 8000bc4:	00000400 	.word	0x00000400
 8000bc8:	20000424 	.word	0x20000424
 8000bcc:	20001e08 	.word	0x20001e08

08000bd0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000bd0:	b480      	push	{r7}
 8000bd2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000bd4:	4b06      	ldr	r3, [pc, #24]	; (8000bf0 <SystemInit+0x20>)
 8000bd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bda:	4a05      	ldr	r2, [pc, #20]	; (8000bf0 <SystemInit+0x20>)
 8000bdc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000be0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 8000be4:	bf00      	nop
 8000be6:	46bd      	mov	sp, r7
 8000be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	e000ed00 	.word	0xe000ed00

08000bf4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000bf4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c2c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000bf8:	f7ff ffea 	bl	8000bd0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000bfc:	480c      	ldr	r0, [pc, #48]	; (8000c30 <LoopForever+0x6>)
  ldr r1, =_edata
 8000bfe:	490d      	ldr	r1, [pc, #52]	; (8000c34 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c00:	4a0d      	ldr	r2, [pc, #52]	; (8000c38 <LoopForever+0xe>)
  movs r3, #0
 8000c02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c04:	e002      	b.n	8000c0c <LoopCopyDataInit>

08000c06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c0a:	3304      	adds	r3, #4

08000c0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c10:	d3f9      	bcc.n	8000c06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c12:	4a0a      	ldr	r2, [pc, #40]	; (8000c3c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c14:	4c0a      	ldr	r4, [pc, #40]	; (8000c40 <LoopForever+0x16>)
  movs r3, #0
 8000c16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c18:	e001      	b.n	8000c1e <LoopFillZerobss>

08000c1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c1c:	3204      	adds	r2, #4

08000c1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c20:	d3fb      	bcc.n	8000c1a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000c22:	f005 fb47 	bl	80062b4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000c26:	f7ff fca5 	bl	8000574 <main>

08000c2a <LoopForever>:

LoopForever:
    b LoopForever
 8000c2a:	e7fe      	b.n	8000c2a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000c2c:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c30:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c34:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000c38:	080072dc 	.word	0x080072dc
  ldr r2, =_sbss
 8000c3c:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000c40:	20001e04 	.word	0x20001e04

08000c44 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000c44:	e7fe      	b.n	8000c44 <ADC1_IRQHandler>

08000c46 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c46:	b580      	push	{r7, lr}
 8000c48:	b082      	sub	sp, #8
 8000c4a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c4c:	2300      	movs	r3, #0
 8000c4e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c50:	2003      	movs	r0, #3
 8000c52:	f000 f8de 	bl	8000e12 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c56:	200f      	movs	r0, #15
 8000c58:	f7ff fe98 	bl	800098c <HAL_InitTick>
 8000c5c:	4603      	mov	r3, r0
 8000c5e:	2b00      	cmp	r3, #0
 8000c60:	d002      	beq.n	8000c68 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000c62:	2301      	movs	r3, #1
 8000c64:	71fb      	strb	r3, [r7, #7]
 8000c66:	e001      	b.n	8000c6c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000c68:	f7ff fdfe 	bl	8000868 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000c6c:	79fb      	ldrb	r3, [r7, #7]
}
 8000c6e:	4618      	mov	r0, r3
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
	...

08000c78 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c7c:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <HAL_IncTick+0x20>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	461a      	mov	r2, r3
 8000c82:	4b06      	ldr	r3, [pc, #24]	; (8000c9c <HAL_IncTick+0x24>)
 8000c84:	681b      	ldr	r3, [r3, #0]
 8000c86:	4413      	add	r3, r2
 8000c88:	4a04      	ldr	r2, [pc, #16]	; (8000c9c <HAL_IncTick+0x24>)
 8000c8a:	6013      	str	r3, [r2, #0]
}
 8000c8c:	bf00      	nop
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop
 8000c98:	20000008 	.word	0x20000008
 8000c9c:	20000428 	.word	0x20000428

08000ca0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ca4:	4b03      	ldr	r3, [pc, #12]	; (8000cb4 <HAL_GetTick+0x14>)
 8000ca6:	681b      	ldr	r3, [r3, #0]
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	46bd      	mov	sp, r7
 8000cac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cb0:	4770      	bx	lr
 8000cb2:	bf00      	nop
 8000cb4:	20000428 	.word	0x20000428

08000cb8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb8:	b480      	push	{r7}
 8000cba:	b085      	sub	sp, #20
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	f003 0307 	and.w	r3, r3, #7
 8000cc6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc8:	4b0c      	ldr	r3, [pc, #48]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cca:	68db      	ldr	r3, [r3, #12]
 8000ccc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cce:	68ba      	ldr	r2, [r7, #8]
 8000cd0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd4:	4013      	ands	r3, r2
 8000cd6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd8:	68fb      	ldr	r3, [r7, #12]
 8000cda:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cdc:	68bb      	ldr	r3, [r7, #8]
 8000cde:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ce0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000ce4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ce8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000cea:	4a04      	ldr	r2, [pc, #16]	; (8000cfc <__NVIC_SetPriorityGrouping+0x44>)
 8000cec:	68bb      	ldr	r3, [r7, #8]
 8000cee:	60d3      	str	r3, [r2, #12]
}
 8000cf0:	bf00      	nop
 8000cf2:	3714      	adds	r7, #20
 8000cf4:	46bd      	mov	sp, r7
 8000cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfa:	4770      	bx	lr
 8000cfc:	e000ed00 	.word	0xe000ed00

08000d00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d00:	b480      	push	{r7}
 8000d02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d04:	4b04      	ldr	r3, [pc, #16]	; (8000d18 <__NVIC_GetPriorityGrouping+0x18>)
 8000d06:	68db      	ldr	r3, [r3, #12]
 8000d08:	0a1b      	lsrs	r3, r3, #8
 8000d0a:	f003 0307 	and.w	r3, r3, #7
}
 8000d0e:	4618      	mov	r0, r3
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	b083      	sub	sp, #12
 8000d20:	af00      	add	r7, sp, #0
 8000d22:	4603      	mov	r3, r0
 8000d24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d2a:	2b00      	cmp	r3, #0
 8000d2c:	db0b      	blt.n	8000d46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2e:	79fb      	ldrb	r3, [r7, #7]
 8000d30:	f003 021f 	and.w	r2, r3, #31
 8000d34:	4907      	ldr	r1, [pc, #28]	; (8000d54 <__NVIC_EnableIRQ+0x38>)
 8000d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d3a:	095b      	lsrs	r3, r3, #5
 8000d3c:	2001      	movs	r0, #1
 8000d3e:	fa00 f202 	lsl.w	r2, r0, r2
 8000d42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d46:	bf00      	nop
 8000d48:	370c      	adds	r7, #12
 8000d4a:	46bd      	mov	sp, r7
 8000d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d50:	4770      	bx	lr
 8000d52:	bf00      	nop
 8000d54:	e000e100 	.word	0xe000e100

08000d58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	b083      	sub	sp, #12
 8000d5c:	af00      	add	r7, sp, #0
 8000d5e:	4603      	mov	r3, r0
 8000d60:	6039      	str	r1, [r7, #0]
 8000d62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	db0a      	blt.n	8000d82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d6c:	683b      	ldr	r3, [r7, #0]
 8000d6e:	b2da      	uxtb	r2, r3
 8000d70:	490c      	ldr	r1, [pc, #48]	; (8000da4 <__NVIC_SetPriority+0x4c>)
 8000d72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d76:	0112      	lsls	r2, r2, #4
 8000d78:	b2d2      	uxtb	r2, r2
 8000d7a:	440b      	add	r3, r1
 8000d7c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d80:	e00a      	b.n	8000d98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d82:	683b      	ldr	r3, [r7, #0]
 8000d84:	b2da      	uxtb	r2, r3
 8000d86:	4908      	ldr	r1, [pc, #32]	; (8000da8 <__NVIC_SetPriority+0x50>)
 8000d88:	79fb      	ldrb	r3, [r7, #7]
 8000d8a:	f003 030f 	and.w	r3, r3, #15
 8000d8e:	3b04      	subs	r3, #4
 8000d90:	0112      	lsls	r2, r2, #4
 8000d92:	b2d2      	uxtb	r2, r2
 8000d94:	440b      	add	r3, r1
 8000d96:	761a      	strb	r2, [r3, #24]
}
 8000d98:	bf00      	nop
 8000d9a:	370c      	adds	r7, #12
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr
 8000da4:	e000e100 	.word	0xe000e100
 8000da8:	e000ed00 	.word	0xe000ed00

08000dac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dac:	b480      	push	{r7}
 8000dae:	b089      	sub	sp, #36	; 0x24
 8000db0:	af00      	add	r7, sp, #0
 8000db2:	60f8      	str	r0, [r7, #12]
 8000db4:	60b9      	str	r1, [r7, #8]
 8000db6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f003 0307 	and.w	r3, r3, #7
 8000dbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dc0:	69fb      	ldr	r3, [r7, #28]
 8000dc2:	f1c3 0307 	rsb	r3, r3, #7
 8000dc6:	2b04      	cmp	r3, #4
 8000dc8:	bf28      	it	cs
 8000dca:	2304      	movcs	r3, #4
 8000dcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dce:	69fb      	ldr	r3, [r7, #28]
 8000dd0:	3304      	adds	r3, #4
 8000dd2:	2b06      	cmp	r3, #6
 8000dd4:	d902      	bls.n	8000ddc <NVIC_EncodePriority+0x30>
 8000dd6:	69fb      	ldr	r3, [r7, #28]
 8000dd8:	3b03      	subs	r3, #3
 8000dda:	e000      	b.n	8000dde <NVIC_EncodePriority+0x32>
 8000ddc:	2300      	movs	r3, #0
 8000dde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000de0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000de4:	69bb      	ldr	r3, [r7, #24]
 8000de6:	fa02 f303 	lsl.w	r3, r2, r3
 8000dea:	43da      	mvns	r2, r3
 8000dec:	68bb      	ldr	r3, [r7, #8]
 8000dee:	401a      	ands	r2, r3
 8000df0:	697b      	ldr	r3, [r7, #20]
 8000df2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df8:	697b      	ldr	r3, [r7, #20]
 8000dfa:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfe:	43d9      	mvns	r1, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e04:	4313      	orrs	r3, r2
         );
}
 8000e06:	4618      	mov	r0, r3
 8000e08:	3724      	adds	r7, #36	; 0x24
 8000e0a:	46bd      	mov	sp, r7
 8000e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e10:	4770      	bx	lr

08000e12 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b082      	sub	sp, #8
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e1a:	6878      	ldr	r0, [r7, #4]
 8000e1c:	f7ff ff4c 	bl	8000cb8 <__NVIC_SetPriorityGrouping>
}
 8000e20:	bf00      	nop
 8000e22:	3708      	adds	r7, #8
 8000e24:	46bd      	mov	sp, r7
 8000e26:	bd80      	pop	{r7, pc}

08000e28 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000e28:	b580      	push	{r7, lr}
 8000e2a:	b086      	sub	sp, #24
 8000e2c:	af00      	add	r7, sp, #0
 8000e2e:	4603      	mov	r3, r0
 8000e30:	60b9      	str	r1, [r7, #8]
 8000e32:	607a      	str	r2, [r7, #4]
 8000e34:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e36:	2300      	movs	r3, #0
 8000e38:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000e3a:	f7ff ff61 	bl	8000d00 <__NVIC_GetPriorityGrouping>
 8000e3e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e40:	687a      	ldr	r2, [r7, #4]
 8000e42:	68b9      	ldr	r1, [r7, #8]
 8000e44:	6978      	ldr	r0, [r7, #20]
 8000e46:	f7ff ffb1 	bl	8000dac <NVIC_EncodePriority>
 8000e4a:	4602      	mov	r2, r0
 8000e4c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e50:	4611      	mov	r1, r2
 8000e52:	4618      	mov	r0, r3
 8000e54:	f7ff ff80 	bl	8000d58 <__NVIC_SetPriority>
}
 8000e58:	bf00      	nop
 8000e5a:	3718      	adds	r7, #24
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	bd80      	pop	{r7, pc}

08000e60 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b082      	sub	sp, #8
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	4603      	mov	r3, r0
 8000e68:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000e6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e6e:	4618      	mov	r0, r3
 8000e70:	f7ff ff54 	bl	8000d1c <__NVIC_EnableIRQ>
}
 8000e74:	bf00      	nop
 8000e76:	3708      	adds	r7, #8
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}

08000e7c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000e7c:	b480      	push	{r7}
 8000e7e:	b087      	sub	sp, #28
 8000e80:	af00      	add	r7, sp, #0
 8000e82:	6078      	str	r0, [r7, #4]
 8000e84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000e86:	2300      	movs	r3, #0
 8000e88:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000e8a:	e148      	b.n	800111e <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	681a      	ldr	r2, [r3, #0]
 8000e90:	2101      	movs	r1, #1
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	fa01 f303 	lsl.w	r3, r1, r3
 8000e98:	4013      	ands	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000e9c:	68fb      	ldr	r3, [r7, #12]
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	f000 813a 	beq.w	8001118 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000ea4:	683b      	ldr	r3, [r7, #0]
 8000ea6:	685b      	ldr	r3, [r3, #4]
 8000ea8:	f003 0303 	and.w	r3, r3, #3
 8000eac:	2b01      	cmp	r3, #1
 8000eae:	d005      	beq.n	8000ebc <HAL_GPIO_Init+0x40>
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f003 0303 	and.w	r3, r3, #3
 8000eb8:	2b02      	cmp	r3, #2
 8000eba:	d130      	bne.n	8000f1e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	689b      	ldr	r3, [r3, #8]
 8000ec0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000ec2:	697b      	ldr	r3, [r7, #20]
 8000ec4:	005b      	lsls	r3, r3, #1
 8000ec6:	2203      	movs	r2, #3
 8000ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ecc:	43db      	mvns	r3, r3
 8000ece:	693a      	ldr	r2, [r7, #16]
 8000ed0:	4013      	ands	r3, r2
 8000ed2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000ed4:	683b      	ldr	r3, [r7, #0]
 8000ed6:	68da      	ldr	r2, [r3, #12]
 8000ed8:	697b      	ldr	r3, [r7, #20]
 8000eda:	005b      	lsls	r3, r3, #1
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	693a      	ldr	r2, [r7, #16]
 8000ee2:	4313      	orrs	r3, r2
 8000ee4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	685b      	ldr	r3, [r3, #4]
 8000ef0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	697b      	ldr	r3, [r7, #20]
 8000ef6:	fa02 f303 	lsl.w	r3, r2, r3
 8000efa:	43db      	mvns	r3, r3
 8000efc:	693a      	ldr	r2, [r7, #16]
 8000efe:	4013      	ands	r3, r2
 8000f00:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f02:	683b      	ldr	r3, [r7, #0]
 8000f04:	685b      	ldr	r3, [r3, #4]
 8000f06:	091b      	lsrs	r3, r3, #4
 8000f08:	f003 0201 	and.w	r2, r3, #1
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f12:	693a      	ldr	r2, [r7, #16]
 8000f14:	4313      	orrs	r3, r2
 8000f16:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	693a      	ldr	r2, [r7, #16]
 8000f1c:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000f1e:	683b      	ldr	r3, [r7, #0]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	f003 0303 	and.w	r3, r3, #3
 8000f26:	2b03      	cmp	r3, #3
 8000f28:	d017      	beq.n	8000f5a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	68db      	ldr	r3, [r3, #12]
 8000f2e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000f30:	697b      	ldr	r3, [r7, #20]
 8000f32:	005b      	lsls	r3, r3, #1
 8000f34:	2203      	movs	r2, #3
 8000f36:	fa02 f303 	lsl.w	r3, r2, r3
 8000f3a:	43db      	mvns	r3, r3
 8000f3c:	693a      	ldr	r2, [r7, #16]
 8000f3e:	4013      	ands	r3, r2
 8000f40:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000f42:	683b      	ldr	r3, [r7, #0]
 8000f44:	689a      	ldr	r2, [r3, #8]
 8000f46:	697b      	ldr	r3, [r7, #20]
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4313      	orrs	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	693a      	ldr	r2, [r7, #16]
 8000f58:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f5a:	683b      	ldr	r3, [r7, #0]
 8000f5c:	685b      	ldr	r3, [r3, #4]
 8000f5e:	f003 0303 	and.w	r3, r3, #3
 8000f62:	2b02      	cmp	r3, #2
 8000f64:	d123      	bne.n	8000fae <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000f66:	697b      	ldr	r3, [r7, #20]
 8000f68:	08da      	lsrs	r2, r3, #3
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	3208      	adds	r2, #8
 8000f6e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000f72:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	f003 0307 	and.w	r3, r3, #7
 8000f7a:	009b      	lsls	r3, r3, #2
 8000f7c:	220f      	movs	r2, #15
 8000f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f82:	43db      	mvns	r3, r3
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4013      	ands	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	691a      	ldr	r2, [r3, #16]
 8000f8e:	697b      	ldr	r3, [r7, #20]
 8000f90:	f003 0307 	and.w	r3, r3, #7
 8000f94:	009b      	lsls	r3, r3, #2
 8000f96:	fa02 f303 	lsl.w	r3, r2, r3
 8000f9a:	693a      	ldr	r2, [r7, #16]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000fa0:	697b      	ldr	r3, [r7, #20]
 8000fa2:	08da      	lsrs	r2, r3, #3
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	3208      	adds	r2, #8
 8000fa8:	6939      	ldr	r1, [r7, #16]
 8000faa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000fb4:	697b      	ldr	r3, [r7, #20]
 8000fb6:	005b      	lsls	r3, r3, #1
 8000fb8:	2203      	movs	r2, #3
 8000fba:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbe:	43db      	mvns	r3, r3
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	4013      	ands	r3, r2
 8000fc4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000fc6:	683b      	ldr	r3, [r7, #0]
 8000fc8:	685b      	ldr	r3, [r3, #4]
 8000fca:	f003 0203 	and.w	r2, r3, #3
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	005b      	lsls	r3, r3, #1
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	693a      	ldr	r2, [r7, #16]
 8000fd8:	4313      	orrs	r3, r2
 8000fda:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	f000 8094 	beq.w	8001118 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ff0:	4b52      	ldr	r3, [pc, #328]	; (800113c <HAL_GPIO_Init+0x2c0>)
 8000ff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000ff4:	4a51      	ldr	r2, [pc, #324]	; (800113c <HAL_GPIO_Init+0x2c0>)
 8000ff6:	f043 0301 	orr.w	r3, r3, #1
 8000ffa:	6613      	str	r3, [r2, #96]	; 0x60
 8000ffc:	4b4f      	ldr	r3, [pc, #316]	; (800113c <HAL_GPIO_Init+0x2c0>)
 8000ffe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001000:	f003 0301 	and.w	r3, r3, #1
 8001004:	60bb      	str	r3, [r7, #8]
 8001006:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001008:	4a4d      	ldr	r2, [pc, #308]	; (8001140 <HAL_GPIO_Init+0x2c4>)
 800100a:	697b      	ldr	r3, [r7, #20]
 800100c:	089b      	lsrs	r3, r3, #2
 800100e:	3302      	adds	r3, #2
 8001010:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001014:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001016:	697b      	ldr	r3, [r7, #20]
 8001018:	f003 0303 	and.w	r3, r3, #3
 800101c:	009b      	lsls	r3, r3, #2
 800101e:	220f      	movs	r2, #15
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	693a      	ldr	r2, [r7, #16]
 8001028:	4013      	ands	r3, r2
 800102a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001032:	d00d      	beq.n	8001050 <HAL_GPIO_Init+0x1d4>
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	4a43      	ldr	r2, [pc, #268]	; (8001144 <HAL_GPIO_Init+0x2c8>)
 8001038:	4293      	cmp	r3, r2
 800103a:	d007      	beq.n	800104c <HAL_GPIO_Init+0x1d0>
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	4a42      	ldr	r2, [pc, #264]	; (8001148 <HAL_GPIO_Init+0x2cc>)
 8001040:	4293      	cmp	r3, r2
 8001042:	d101      	bne.n	8001048 <HAL_GPIO_Init+0x1cc>
 8001044:	2302      	movs	r3, #2
 8001046:	e004      	b.n	8001052 <HAL_GPIO_Init+0x1d6>
 8001048:	2307      	movs	r3, #7
 800104a:	e002      	b.n	8001052 <HAL_GPIO_Init+0x1d6>
 800104c:	2301      	movs	r3, #1
 800104e:	e000      	b.n	8001052 <HAL_GPIO_Init+0x1d6>
 8001050:	2300      	movs	r3, #0
 8001052:	697a      	ldr	r2, [r7, #20]
 8001054:	f002 0203 	and.w	r2, r2, #3
 8001058:	0092      	lsls	r2, r2, #2
 800105a:	4093      	lsls	r3, r2
 800105c:	693a      	ldr	r2, [r7, #16]
 800105e:	4313      	orrs	r3, r2
 8001060:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001062:	4937      	ldr	r1, [pc, #220]	; (8001140 <HAL_GPIO_Init+0x2c4>)
 8001064:	697b      	ldr	r3, [r7, #20]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	3302      	adds	r3, #2
 800106a:	693a      	ldr	r2, [r7, #16]
 800106c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001070:	4b36      	ldr	r3, [pc, #216]	; (800114c <HAL_GPIO_Init+0x2d0>)
 8001072:	689b      	ldr	r3, [r3, #8]
 8001074:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001076:	68fb      	ldr	r3, [r7, #12]
 8001078:	43db      	mvns	r3, r3
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	4013      	ands	r3, r2
 800107e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001080:	683b      	ldr	r3, [r7, #0]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001088:	2b00      	cmp	r3, #0
 800108a:	d003      	beq.n	8001094 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 800108c:	693a      	ldr	r2, [r7, #16]
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4313      	orrs	r3, r2
 8001092:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001094:	4a2d      	ldr	r2, [pc, #180]	; (800114c <HAL_GPIO_Init+0x2d0>)
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 800109a:	4b2c      	ldr	r3, [pc, #176]	; (800114c <HAL_GPIO_Init+0x2d0>)
 800109c:	68db      	ldr	r3, [r3, #12]
 800109e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010a0:	68fb      	ldr	r3, [r7, #12]
 80010a2:	43db      	mvns	r3, r3
 80010a4:	693a      	ldr	r2, [r7, #16]
 80010a6:	4013      	ands	r3, r2
 80010a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80010aa:	683b      	ldr	r3, [r7, #0]
 80010ac:	685b      	ldr	r3, [r3, #4]
 80010ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d003      	beq.n	80010be <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 80010b6:	693a      	ldr	r2, [r7, #16]
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	4313      	orrs	r3, r2
 80010bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80010be:	4a23      	ldr	r2, [pc, #140]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010c0:	693b      	ldr	r3, [r7, #16]
 80010c2:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80010c4:	4b21      	ldr	r3, [pc, #132]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010ca:	68fb      	ldr	r3, [r7, #12]
 80010cc:	43db      	mvns	r3, r3
 80010ce:	693a      	ldr	r2, [r7, #16]
 80010d0:	4013      	ands	r3, r2
 80010d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d003      	beq.n	80010e8 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 80010e0:	693a      	ldr	r2, [r7, #16]
 80010e2:	68fb      	ldr	r3, [r7, #12]
 80010e4:	4313      	orrs	r3, r2
 80010e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80010e8:	4a18      	ldr	r2, [pc, #96]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010ea:	693b      	ldr	r3, [r7, #16]
 80010ec:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 80010ee:	4b17      	ldr	r3, [pc, #92]	; (800114c <HAL_GPIO_Init+0x2d0>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	43db      	mvns	r3, r3
 80010f8:	693a      	ldr	r2, [r7, #16]
 80010fa:	4013      	ands	r3, r2
 80010fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80010fe:	683b      	ldr	r3, [r7, #0]
 8001100:	685b      	ldr	r3, [r3, #4]
 8001102:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001106:	2b00      	cmp	r3, #0
 8001108:	d003      	beq.n	8001112 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800110a:	693a      	ldr	r2, [r7, #16]
 800110c:	68fb      	ldr	r3, [r7, #12]
 800110e:	4313      	orrs	r3, r2
 8001110:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001112:	4a0e      	ldr	r2, [pc, #56]	; (800114c <HAL_GPIO_Init+0x2d0>)
 8001114:	693b      	ldr	r3, [r7, #16]
 8001116:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001118:	697b      	ldr	r3, [r7, #20]
 800111a:	3301      	adds	r3, #1
 800111c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800111e:	683b      	ldr	r3, [r7, #0]
 8001120:	681a      	ldr	r2, [r3, #0]
 8001122:	697b      	ldr	r3, [r7, #20]
 8001124:	fa22 f303 	lsr.w	r3, r2, r3
 8001128:	2b00      	cmp	r3, #0
 800112a:	f47f aeaf 	bne.w	8000e8c <HAL_GPIO_Init+0x10>
  }
}
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	371c      	adds	r7, #28
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	40021000 	.word	0x40021000
 8001140:	40010000 	.word	0x40010000
 8001144:	48000400 	.word	0x48000400
 8001148:	48000800 	.word	0x48000800
 800114c:	40010400 	.word	0x40010400

08001150 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001150:	b480      	push	{r7}
 8001152:	b083      	sub	sp, #12
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	460b      	mov	r3, r1
 800115a:	807b      	strh	r3, [r7, #2]
 800115c:	4613      	mov	r3, r2
 800115e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001160:	787b      	ldrb	r3, [r7, #1]
 8001162:	2b00      	cmp	r3, #0
 8001164:	d003      	beq.n	800116e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001166:	887a      	ldrh	r2, [r7, #2]
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800116c:	e002      	b.n	8001174 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800116e:	887a      	ldrh	r2, [r7, #2]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001174:	bf00      	nop
 8001176:	370c      	adds	r7, #12
 8001178:	46bd      	mov	sp, r7
 800117a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117e:	4770      	bx	lr

08001180 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001180:	b480      	push	{r7}
 8001182:	b085      	sub	sp, #20
 8001184:	af00      	add	r7, sp, #0
 8001186:	6078      	str	r0, [r7, #4]
 8001188:	460b      	mov	r3, r1
 800118a:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001192:	887a      	ldrh	r2, [r7, #2]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	4013      	ands	r3, r2
 8001198:	041a      	lsls	r2, r3, #16
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	43d9      	mvns	r1, r3
 800119e:	887b      	ldrh	r3, [r7, #2]
 80011a0:	400b      	ands	r3, r1
 80011a2:	431a      	orrs	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	619a      	str	r2, [r3, #24]
}
 80011a8:	bf00      	nop
 80011aa:	3714      	adds	r7, #20
 80011ac:	46bd      	mov	sp, r7
 80011ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b2:	4770      	bx	lr

080011b4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80011b8:	4b05      	ldr	r3, [pc, #20]	; (80011d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a04      	ldr	r2, [pc, #16]	; (80011d0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80011be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011c2:	6013      	str	r3, [r2, #0]
}
 80011c4:	bf00      	nop
 80011c6:	46bd      	mov	sp, r7
 80011c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011cc:	4770      	bx	lr
 80011ce:	bf00      	nop
 80011d0:	40007000 	.word	0x40007000

080011d4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80011d8:	4b04      	ldr	r3, [pc, #16]	; (80011ec <HAL_PWREx_GetVoltageRange+0x18>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80011e0:	4618      	mov	r0, r3
 80011e2:	46bd      	mov	sp, r7
 80011e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e8:	4770      	bx	lr
 80011ea:	bf00      	nop
 80011ec:	40007000 	.word	0x40007000

080011f0 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80011f0:	b480      	push	{r7}
 80011f2:	b085      	sub	sp, #20
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011fe:	d130      	bne.n	8001262 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001200:	4b23      	ldr	r3, [pc, #140]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001208:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800120c:	d038      	beq.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800120e:	4b20      	ldr	r3, [pc, #128]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001216:	4a1e      	ldr	r2, [pc, #120]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001218:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800121c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800121e:	4b1d      	ldr	r3, [pc, #116]	; (8001294 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	2232      	movs	r2, #50	; 0x32
 8001224:	fb02 f303 	mul.w	r3, r2, r3
 8001228:	4a1b      	ldr	r2, [pc, #108]	; (8001298 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 800122a:	fba2 2303 	umull	r2, r3, r2, r3
 800122e:	0c9b      	lsrs	r3, r3, #18
 8001230:	3301      	adds	r3, #1
 8001232:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001234:	e002      	b.n	800123c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001236:	68fb      	ldr	r3, [r7, #12]
 8001238:	3b01      	subs	r3, #1
 800123a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800123c:	4b14      	ldr	r3, [pc, #80]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800123e:	695b      	ldr	r3, [r3, #20]
 8001240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001244:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001248:	d102      	bne.n	8001250 <HAL_PWREx_ControlVoltageScaling+0x60>
 800124a:	68fb      	ldr	r3, [r7, #12]
 800124c:	2b00      	cmp	r3, #0
 800124e:	d1f2      	bne.n	8001236 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001250:	4b0f      	ldr	r3, [pc, #60]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001252:	695b      	ldr	r3, [r3, #20]
 8001254:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001258:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800125c:	d110      	bne.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 800125e:	2303      	movs	r3, #3
 8001260:	e00f      	b.n	8001282 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001262:	4b0b      	ldr	r3, [pc, #44]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001264:	681b      	ldr	r3, [r3, #0]
 8001266:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800126a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800126e:	d007      	beq.n	8001280 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001270:	4b07      	ldr	r3, [pc, #28]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001278:	4a05      	ldr	r2, [pc, #20]	; (8001290 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800127a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800127e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001280:	2300      	movs	r3, #0
}
 8001282:	4618      	mov	r0, r3
 8001284:	3714      	adds	r7, #20
 8001286:	46bd      	mov	sp, r7
 8001288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop
 8001290:	40007000 	.word	0x40007000
 8001294:	20000000 	.word	0x20000000
 8001298:	431bde83 	.word	0x431bde83

0800129c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800129c:	b580      	push	{r7, lr}
 800129e:	b088      	sub	sp, #32
 80012a0:	af00      	add	r7, sp, #0
 80012a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d102      	bne.n	80012b0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80012aa:	2301      	movs	r3, #1
 80012ac:	f000 bc02 	b.w	8001ab4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80012b0:	4b96      	ldr	r3, [pc, #600]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80012b2:	689b      	ldr	r3, [r3, #8]
 80012b4:	f003 030c 	and.w	r3, r3, #12
 80012b8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80012ba:	4b94      	ldr	r3, [pc, #592]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80012bc:	68db      	ldr	r3, [r3, #12]
 80012be:	f003 0303 	and.w	r3, r3, #3
 80012c2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	681b      	ldr	r3, [r3, #0]
 80012c8:	f003 0310 	and.w	r3, r3, #16
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	f000 80e4 	beq.w	800149a <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80012d2:	69bb      	ldr	r3, [r7, #24]
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d007      	beq.n	80012e8 <HAL_RCC_OscConfig+0x4c>
 80012d8:	69bb      	ldr	r3, [r7, #24]
 80012da:	2b0c      	cmp	r3, #12
 80012dc:	f040 808b 	bne.w	80013f6 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80012e0:	697b      	ldr	r3, [r7, #20]
 80012e2:	2b01      	cmp	r3, #1
 80012e4:	f040 8087 	bne.w	80013f6 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80012e8:	4b88      	ldr	r3, [pc, #544]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d005      	beq.n	8001300 <HAL_RCC_OscConfig+0x64>
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d101      	bne.n	8001300 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80012fc:	2301      	movs	r3, #1
 80012fe:	e3d9      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6a1a      	ldr	r2, [r3, #32]
 8001304:	4b81      	ldr	r3, [pc, #516]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f003 0308 	and.w	r3, r3, #8
 800130c:	2b00      	cmp	r3, #0
 800130e:	d004      	beq.n	800131a <HAL_RCC_OscConfig+0x7e>
 8001310:	4b7e      	ldr	r3, [pc, #504]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001318:	e005      	b.n	8001326 <HAL_RCC_OscConfig+0x8a>
 800131a:	4b7c      	ldr	r3, [pc, #496]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800131c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001320:	091b      	lsrs	r3, r3, #4
 8001322:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001326:	4293      	cmp	r3, r2
 8001328:	d223      	bcs.n	8001372 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	6a1b      	ldr	r3, [r3, #32]
 800132e:	4618      	mov	r0, r3
 8001330:	f000 fdbe 	bl	8001eb0 <RCC_SetFlashLatencyFromMSIRange>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
 800133c:	e3ba      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800133e:	4b73      	ldr	r3, [pc, #460]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	4a72      	ldr	r2, [pc, #456]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001344:	f043 0308 	orr.w	r3, r3, #8
 8001348:	6013      	str	r3, [r2, #0]
 800134a:	4b70      	ldr	r3, [pc, #448]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	6a1b      	ldr	r3, [r3, #32]
 8001356:	496d      	ldr	r1, [pc, #436]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001358:	4313      	orrs	r3, r2
 800135a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800135c:	4b6b      	ldr	r3, [pc, #428]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	69db      	ldr	r3, [r3, #28]
 8001368:	021b      	lsls	r3, r3, #8
 800136a:	4968      	ldr	r1, [pc, #416]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800136c:	4313      	orrs	r3, r2
 800136e:	604b      	str	r3, [r1, #4]
 8001370:	e025      	b.n	80013be <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001372:	4b66      	ldr	r3, [pc, #408]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	4a65      	ldr	r2, [pc, #404]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001378:	f043 0308 	orr.w	r3, r3, #8
 800137c:	6013      	str	r3, [r2, #0]
 800137e:	4b63      	ldr	r3, [pc, #396]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	6a1b      	ldr	r3, [r3, #32]
 800138a:	4960      	ldr	r1, [pc, #384]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800138c:	4313      	orrs	r3, r2
 800138e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001390:	4b5e      	ldr	r3, [pc, #376]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	69db      	ldr	r3, [r3, #28]
 800139c:	021b      	lsls	r3, r3, #8
 800139e:	495b      	ldr	r1, [pc, #364]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80013a0:	4313      	orrs	r3, r2
 80013a2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80013a4:	69bb      	ldr	r3, [r7, #24]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d109      	bne.n	80013be <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a1b      	ldr	r3, [r3, #32]
 80013ae:	4618      	mov	r0, r3
 80013b0:	f000 fd7e 	bl	8001eb0 <RCC_SetFlashLatencyFromMSIRange>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
 80013bc:	e37a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80013be:	f000 fc81 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 80013c2:	4602      	mov	r2, r0
 80013c4:	4b51      	ldr	r3, [pc, #324]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80013c6:	689b      	ldr	r3, [r3, #8]
 80013c8:	091b      	lsrs	r3, r3, #4
 80013ca:	f003 030f 	and.w	r3, r3, #15
 80013ce:	4950      	ldr	r1, [pc, #320]	; (8001510 <HAL_RCC_OscConfig+0x274>)
 80013d0:	5ccb      	ldrb	r3, [r1, r3]
 80013d2:	f003 031f 	and.w	r3, r3, #31
 80013d6:	fa22 f303 	lsr.w	r3, r2, r3
 80013da:	4a4e      	ldr	r2, [pc, #312]	; (8001514 <HAL_RCC_OscConfig+0x278>)
 80013dc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80013de:	4b4e      	ldr	r3, [pc, #312]	; (8001518 <HAL_RCC_OscConfig+0x27c>)
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	4618      	mov	r0, r3
 80013e4:	f7ff fad2 	bl	800098c <HAL_InitTick>
 80013e8:	4603      	mov	r3, r0
 80013ea:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d052      	beq.n	8001498 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80013f2:	7bfb      	ldrb	r3, [r7, #15]
 80013f4:	e35e      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	699b      	ldr	r3, [r3, #24]
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d032      	beq.n	8001464 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80013fe:	4b43      	ldr	r3, [pc, #268]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	4a42      	ldr	r2, [pc, #264]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800140a:	f7ff fc49 	bl	8000ca0 <HAL_GetTick>
 800140e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001410:	e008      	b.n	8001424 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001412:	f7ff fc45 	bl	8000ca0 <HAL_GetTick>
 8001416:	4602      	mov	r2, r0
 8001418:	693b      	ldr	r3, [r7, #16]
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d901      	bls.n	8001424 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	e347      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001424:	4b39      	ldr	r3, [pc, #228]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	f003 0302 	and.w	r3, r3, #2
 800142c:	2b00      	cmp	r3, #0
 800142e:	d0f0      	beq.n	8001412 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001430:	4b36      	ldr	r3, [pc, #216]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	4a35      	ldr	r2, [pc, #212]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001436:	f043 0308 	orr.w	r3, r3, #8
 800143a:	6013      	str	r3, [r2, #0]
 800143c:	4b33      	ldr	r3, [pc, #204]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	6a1b      	ldr	r3, [r3, #32]
 8001448:	4930      	ldr	r1, [pc, #192]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800144a:	4313      	orrs	r3, r2
 800144c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800144e:	4b2f      	ldr	r3, [pc, #188]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001450:	685b      	ldr	r3, [r3, #4]
 8001452:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	69db      	ldr	r3, [r3, #28]
 800145a:	021b      	lsls	r3, r3, #8
 800145c:	492b      	ldr	r1, [pc, #172]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800145e:	4313      	orrs	r3, r2
 8001460:	604b      	str	r3, [r1, #4]
 8001462:	e01a      	b.n	800149a <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001464:	4b29      	ldr	r3, [pc, #164]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a28      	ldr	r2, [pc, #160]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800146a:	f023 0301 	bic.w	r3, r3, #1
 800146e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001470:	f7ff fc16 	bl	8000ca0 <HAL_GetTick>
 8001474:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001476:	e008      	b.n	800148a <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001478:	f7ff fc12 	bl	8000ca0 <HAL_GetTick>
 800147c:	4602      	mov	r2, r0
 800147e:	693b      	ldr	r3, [r7, #16]
 8001480:	1ad3      	subs	r3, r2, r3
 8001482:	2b02      	cmp	r3, #2
 8001484:	d901      	bls.n	800148a <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001486:	2303      	movs	r3, #3
 8001488:	e314      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800148a:	4b20      	ldr	r3, [pc, #128]	; (800150c <HAL_RCC_OscConfig+0x270>)
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	f003 0302 	and.w	r3, r3, #2
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f0      	bne.n	8001478 <HAL_RCC_OscConfig+0x1dc>
 8001496:	e000      	b.n	800149a <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001498:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0301 	and.w	r3, r3, #1
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d073      	beq.n	800158e <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80014a6:	69bb      	ldr	r3, [r7, #24]
 80014a8:	2b08      	cmp	r3, #8
 80014aa:	d005      	beq.n	80014b8 <HAL_RCC_OscConfig+0x21c>
 80014ac:	69bb      	ldr	r3, [r7, #24]
 80014ae:	2b0c      	cmp	r3, #12
 80014b0:	d10e      	bne.n	80014d0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80014b2:	697b      	ldr	r3, [r7, #20]
 80014b4:	2b03      	cmp	r3, #3
 80014b6:	d10b      	bne.n	80014d0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014b8:	4b14      	ldr	r3, [pc, #80]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d063      	beq.n	800158c <HAL_RCC_OscConfig+0x2f0>
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	685b      	ldr	r3, [r3, #4]
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d15f      	bne.n	800158c <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80014cc:	2301      	movs	r3, #1
 80014ce:	e2f1      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	685b      	ldr	r3, [r3, #4]
 80014d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80014d8:	d106      	bne.n	80014e8 <HAL_RCC_OscConfig+0x24c>
 80014da:	4b0c      	ldr	r3, [pc, #48]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a0b      	ldr	r2, [pc, #44]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80014e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80014e4:	6013      	str	r3, [r2, #0]
 80014e6:	e025      	b.n	8001534 <HAL_RCC_OscConfig+0x298>
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80014f0:	d114      	bne.n	800151c <HAL_RCC_OscConfig+0x280>
 80014f2:	4b06      	ldr	r3, [pc, #24]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a05      	ldr	r2, [pc, #20]	; (800150c <HAL_RCC_OscConfig+0x270>)
 80014f8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80014fc:	6013      	str	r3, [r2, #0]
 80014fe:	4b03      	ldr	r3, [pc, #12]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a02      	ldr	r2, [pc, #8]	; (800150c <HAL_RCC_OscConfig+0x270>)
 8001504:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]
 800150a:	e013      	b.n	8001534 <HAL_RCC_OscConfig+0x298>
 800150c:	40021000 	.word	0x40021000
 8001510:	080071ec 	.word	0x080071ec
 8001514:	20000000 	.word	0x20000000
 8001518:	20000004 	.word	0x20000004
 800151c:	4ba0      	ldr	r3, [pc, #640]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	4a9f      	ldr	r2, [pc, #636]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001522:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001526:	6013      	str	r3, [r2, #0]
 8001528:	4b9d      	ldr	r3, [pc, #628]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4a9c      	ldr	r2, [pc, #624]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800152e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001532:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	2b00      	cmp	r3, #0
 800153a:	d013      	beq.n	8001564 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800153c:	f7ff fbb0 	bl	8000ca0 <HAL_GetTick>
 8001540:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001542:	e008      	b.n	8001556 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001544:	f7ff fbac 	bl	8000ca0 <HAL_GetTick>
 8001548:	4602      	mov	r2, r0
 800154a:	693b      	ldr	r3, [r7, #16]
 800154c:	1ad3      	subs	r3, r2, r3
 800154e:	2b64      	cmp	r3, #100	; 0x64
 8001550:	d901      	bls.n	8001556 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001552:	2303      	movs	r3, #3
 8001554:	e2ae      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001556:	4b92      	ldr	r3, [pc, #584]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155e:	2b00      	cmp	r3, #0
 8001560:	d0f0      	beq.n	8001544 <HAL_RCC_OscConfig+0x2a8>
 8001562:	e014      	b.n	800158e <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001564:	f7ff fb9c 	bl	8000ca0 <HAL_GetTick>
 8001568:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800156a:	e008      	b.n	800157e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800156c:	f7ff fb98 	bl	8000ca0 <HAL_GetTick>
 8001570:	4602      	mov	r2, r0
 8001572:	693b      	ldr	r3, [r7, #16]
 8001574:	1ad3      	subs	r3, r2, r3
 8001576:	2b64      	cmp	r3, #100	; 0x64
 8001578:	d901      	bls.n	800157e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800157a:	2303      	movs	r3, #3
 800157c:	e29a      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800157e:	4b88      	ldr	r3, [pc, #544]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001586:	2b00      	cmp	r3, #0
 8001588:	d1f0      	bne.n	800156c <HAL_RCC_OscConfig+0x2d0>
 800158a:	e000      	b.n	800158e <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800158c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d060      	beq.n	800165c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	2b04      	cmp	r3, #4
 800159e:	d005      	beq.n	80015ac <HAL_RCC_OscConfig+0x310>
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	2b0c      	cmp	r3, #12
 80015a4:	d119      	bne.n	80015da <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80015a6:	697b      	ldr	r3, [r7, #20]
 80015a8:	2b02      	cmp	r3, #2
 80015aa:	d116      	bne.n	80015da <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015ac:	4b7c      	ldr	r3, [pc, #496]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d005      	beq.n	80015c4 <HAL_RCC_OscConfig+0x328>
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d101      	bne.n	80015c4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80015c0:	2301      	movs	r3, #1
 80015c2:	e277      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015c4:	4b76      	ldr	r3, [pc, #472]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	691b      	ldr	r3, [r3, #16]
 80015d0:	061b      	lsls	r3, r3, #24
 80015d2:	4973      	ldr	r1, [pc, #460]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015d4:	4313      	orrs	r3, r2
 80015d6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80015d8:	e040      	b.n	800165c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	68db      	ldr	r3, [r3, #12]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d023      	beq.n	800162a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015e2:	4b6f      	ldr	r3, [pc, #444]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a6e      	ldr	r2, [pc, #440]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80015e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015ec:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80015ee:	f7ff fb57 	bl	8000ca0 <HAL_GetTick>
 80015f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f4:	e008      	b.n	8001608 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f6:	f7ff fb53 	bl	8000ca0 <HAL_GetTick>
 80015fa:	4602      	mov	r2, r0
 80015fc:	693b      	ldr	r3, [r7, #16]
 80015fe:	1ad3      	subs	r3, r2, r3
 8001600:	2b02      	cmp	r3, #2
 8001602:	d901      	bls.n	8001608 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001604:	2303      	movs	r3, #3
 8001606:	e255      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001608:	4b65      	ldr	r3, [pc, #404]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001610:	2b00      	cmp	r3, #0
 8001612:	d0f0      	beq.n	80015f6 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001614:	4b62      	ldr	r3, [pc, #392]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001616:	685b      	ldr	r3, [r3, #4]
 8001618:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	691b      	ldr	r3, [r3, #16]
 8001620:	061b      	lsls	r3, r3, #24
 8001622:	495f      	ldr	r1, [pc, #380]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001624:	4313      	orrs	r3, r2
 8001626:	604b      	str	r3, [r1, #4]
 8001628:	e018      	b.n	800165c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800162a:	4b5d      	ldr	r3, [pc, #372]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	4a5c      	ldr	r2, [pc, #368]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001630:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001634:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001636:	f7ff fb33 	bl	8000ca0 <HAL_GetTick>
 800163a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800163c:	e008      	b.n	8001650 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800163e:	f7ff fb2f 	bl	8000ca0 <HAL_GetTick>
 8001642:	4602      	mov	r2, r0
 8001644:	693b      	ldr	r3, [r7, #16]
 8001646:	1ad3      	subs	r3, r2, r3
 8001648:	2b02      	cmp	r3, #2
 800164a:	d901      	bls.n	8001650 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 800164c:	2303      	movs	r3, #3
 800164e:	e231      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001650:	4b53      	ldr	r3, [pc, #332]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001658:	2b00      	cmp	r3, #0
 800165a:	d1f0      	bne.n	800163e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	f003 0308 	and.w	r3, r3, #8
 8001664:	2b00      	cmp	r3, #0
 8001666:	d03c      	beq.n	80016e2 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	695b      	ldr	r3, [r3, #20]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d01c      	beq.n	80016aa <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001670:	4b4b      	ldr	r3, [pc, #300]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001672:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001676:	4a4a      	ldr	r2, [pc, #296]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001678:	f043 0301 	orr.w	r3, r3, #1
 800167c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001680:	f7ff fb0e 	bl	8000ca0 <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001688:	f7ff fb0a 	bl	8000ca0 <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e20c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800169a:	4b41      	ldr	r3, [pc, #260]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800169c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016a0:	f003 0302 	and.w	r3, r3, #2
 80016a4:	2b00      	cmp	r3, #0
 80016a6:	d0ef      	beq.n	8001688 <HAL_RCC_OscConfig+0x3ec>
 80016a8:	e01b      	b.n	80016e2 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80016aa:	4b3d      	ldr	r3, [pc, #244]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016b0:	4a3b      	ldr	r2, [pc, #236]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016b2:	f023 0301 	bic.w	r3, r3, #1
 80016b6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016ba:	f7ff faf1 	bl	8000ca0 <HAL_GetTick>
 80016be:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016c0:	e008      	b.n	80016d4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80016c2:	f7ff faed 	bl	8000ca0 <HAL_GetTick>
 80016c6:	4602      	mov	r2, r0
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	1ad3      	subs	r3, r2, r3
 80016cc:	2b02      	cmp	r3, #2
 80016ce:	d901      	bls.n	80016d4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80016d0:	2303      	movs	r3, #3
 80016d2:	e1ef      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80016d4:	4b32      	ldr	r3, [pc, #200]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016d6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d1ef      	bne.n	80016c2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	f003 0304 	and.w	r3, r3, #4
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	f000 80a6 	beq.w	800183c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016f0:	2300      	movs	r3, #0
 80016f2:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80016f4:	4b2a      	ldr	r3, [pc, #168]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	d10d      	bne.n	800171c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001700:	4b27      	ldr	r3, [pc, #156]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001702:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001704:	4a26      	ldr	r2, [pc, #152]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001706:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800170a:	6593      	str	r3, [r2, #88]	; 0x58
 800170c:	4b24      	ldr	r3, [pc, #144]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800170e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001710:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001714:	60bb      	str	r3, [r7, #8]
 8001716:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001718:	2301      	movs	r3, #1
 800171a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800171c:	4b21      	ldr	r3, [pc, #132]	; (80017a4 <HAL_RCC_OscConfig+0x508>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001724:	2b00      	cmp	r3, #0
 8001726:	d118      	bne.n	800175a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001728:	4b1e      	ldr	r3, [pc, #120]	; (80017a4 <HAL_RCC_OscConfig+0x508>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a1d      	ldr	r2, [pc, #116]	; (80017a4 <HAL_RCC_OscConfig+0x508>)
 800172e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001732:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001734:	f7ff fab4 	bl	8000ca0 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800173c:	f7ff fab0 	bl	8000ca0 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e1b2      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800174e:	4b15      	ldr	r3, [pc, #84]	; (80017a4 <HAL_RCC_OscConfig+0x508>)
 8001750:	681b      	ldr	r3, [r3, #0]
 8001752:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001756:	2b00      	cmp	r3, #0
 8001758:	d0f0      	beq.n	800173c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	689b      	ldr	r3, [r3, #8]
 800175e:	2b01      	cmp	r3, #1
 8001760:	d108      	bne.n	8001774 <HAL_RCC_OscConfig+0x4d8>
 8001762:	4b0f      	ldr	r3, [pc, #60]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001764:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001768:	4a0d      	ldr	r2, [pc, #52]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800176a:	f043 0301 	orr.w	r3, r3, #1
 800176e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001772:	e029      	b.n	80017c8 <HAL_RCC_OscConfig+0x52c>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	2b05      	cmp	r3, #5
 800177a:	d115      	bne.n	80017a8 <HAL_RCC_OscConfig+0x50c>
 800177c:	4b08      	ldr	r3, [pc, #32]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800177e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001782:	4a07      	ldr	r2, [pc, #28]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001784:	f043 0304 	orr.w	r3, r3, #4
 8001788:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800178c:	4b04      	ldr	r3, [pc, #16]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 800178e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001792:	4a03      	ldr	r2, [pc, #12]	; (80017a0 <HAL_RCC_OscConfig+0x504>)
 8001794:	f043 0301 	orr.w	r3, r3, #1
 8001798:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800179c:	e014      	b.n	80017c8 <HAL_RCC_OscConfig+0x52c>
 800179e:	bf00      	nop
 80017a0:	40021000 	.word	0x40021000
 80017a4:	40007000 	.word	0x40007000
 80017a8:	4b9a      	ldr	r3, [pc, #616]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80017aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017ae:	4a99      	ldr	r2, [pc, #612]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80017b0:	f023 0301 	bic.w	r3, r3, #1
 80017b4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80017b8:	4b96      	ldr	r3, [pc, #600]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80017ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017be:	4a95      	ldr	r2, [pc, #596]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80017c0:	f023 0304 	bic.w	r3, r3, #4
 80017c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	689b      	ldr	r3, [r3, #8]
 80017cc:	2b00      	cmp	r3, #0
 80017ce:	d016      	beq.n	80017fe <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017d0:	f7ff fa66 	bl	8000ca0 <HAL_GetTick>
 80017d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017d6:	e00a      	b.n	80017ee <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017d8:	f7ff fa62 	bl	8000ca0 <HAL_GetTick>
 80017dc:	4602      	mov	r2, r0
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	1ad3      	subs	r3, r2, r3
 80017e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d901      	bls.n	80017ee <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80017ea:	2303      	movs	r3, #3
 80017ec:	e162      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80017ee:	4b89      	ldr	r3, [pc, #548]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80017f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80017f4:	f003 0302 	and.w	r3, r3, #2
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d0ed      	beq.n	80017d8 <HAL_RCC_OscConfig+0x53c>
 80017fc:	e015      	b.n	800182a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017fe:	f7ff fa4f 	bl	8000ca0 <HAL_GetTick>
 8001802:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001804:	e00a      	b.n	800181c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001806:	f7ff fa4b 	bl	8000ca0 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	f241 3288 	movw	r2, #5000	; 0x1388
 8001814:	4293      	cmp	r3, r2
 8001816:	d901      	bls.n	800181c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8001818:	2303      	movs	r3, #3
 800181a:	e14b      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800181c:	4b7d      	ldr	r3, [pc, #500]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 800181e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001822:	f003 0302 	and.w	r3, r3, #2
 8001826:	2b00      	cmp	r3, #0
 8001828:	d1ed      	bne.n	8001806 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800182a:	7ffb      	ldrb	r3, [r7, #31]
 800182c:	2b01      	cmp	r3, #1
 800182e:	d105      	bne.n	800183c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001830:	4b78      	ldr	r3, [pc, #480]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001832:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001834:	4a77      	ldr	r2, [pc, #476]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001836:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800183a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	f003 0320 	and.w	r3, r3, #32
 8001844:	2b00      	cmp	r3, #0
 8001846:	d03c      	beq.n	80018c2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800184c:	2b00      	cmp	r3, #0
 800184e:	d01c      	beq.n	800188a <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001850:	4b70      	ldr	r3, [pc, #448]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001852:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001856:	4a6f      	ldr	r2, [pc, #444]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001858:	f043 0301 	orr.w	r3, r3, #1
 800185c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001860:	f7ff fa1e 	bl	8000ca0 <HAL_GetTick>
 8001864:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8001866:	e008      	b.n	800187a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001868:	f7ff fa1a 	bl	8000ca0 <HAL_GetTick>
 800186c:	4602      	mov	r2, r0
 800186e:	693b      	ldr	r3, [r7, #16]
 8001870:	1ad3      	subs	r3, r2, r3
 8001872:	2b02      	cmp	r3, #2
 8001874:	d901      	bls.n	800187a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8001876:	2303      	movs	r3, #3
 8001878:	e11c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800187a:	4b66      	ldr	r3, [pc, #408]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 800187c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001880:	f003 0302 	and.w	r3, r3, #2
 8001884:	2b00      	cmp	r3, #0
 8001886:	d0ef      	beq.n	8001868 <HAL_RCC_OscConfig+0x5cc>
 8001888:	e01b      	b.n	80018c2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800188a:	4b62      	ldr	r3, [pc, #392]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 800188c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001890:	4a60      	ldr	r2, [pc, #384]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001892:	f023 0301 	bic.w	r3, r3, #1
 8001896:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189a:	f7ff fa01 	bl	8000ca0 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80018a2:	f7ff f9fd 	bl	8000ca0 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e0ff      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80018b4:	4b57      	ldr	r3, [pc, #348]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80018b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80018ba:	f003 0302 	and.w	r3, r3, #2
 80018be:	2b00      	cmp	r3, #0
 80018c0:	d1ef      	bne.n	80018a2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	f000 80f3 	beq.w	8001ab2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018d0:	2b02      	cmp	r3, #2
 80018d2:	f040 80c9 	bne.w	8001a68 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80018d6:	4b4f      	ldr	r3, [pc, #316]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80018d8:	68db      	ldr	r3, [r3, #12]
 80018da:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018dc:	697b      	ldr	r3, [r7, #20]
 80018de:	f003 0203 	and.w	r2, r3, #3
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018e6:	429a      	cmp	r2, r3
 80018e8:	d12c      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80018ea:	697b      	ldr	r3, [r7, #20]
 80018ec:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80018f0:	687b      	ldr	r3, [r7, #4]
 80018f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f4:	3b01      	subs	r3, #1
 80018f6:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80018f8:	429a      	cmp	r2, r3
 80018fa:	d123      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80018fc:	697b      	ldr	r3, [r7, #20]
 80018fe:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001906:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001908:	429a      	cmp	r2, r3
 800190a:	d11b      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001916:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001918:	429a      	cmp	r2, r3
 800191a:	d113      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001926:	085b      	lsrs	r3, r3, #1
 8001928:	3b01      	subs	r3, #1
 800192a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800192c:	429a      	cmp	r2, r3
 800192e:	d109      	bne.n	8001944 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800193a:	085b      	lsrs	r3, r3, #1
 800193c:	3b01      	subs	r3, #1
 800193e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001940:	429a      	cmp	r2, r3
 8001942:	d06b      	beq.n	8001a1c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	2b0c      	cmp	r3, #12
 8001948:	d062      	beq.n	8001a10 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800194a:	4b32      	ldr	r3, [pc, #200]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8001956:	2301      	movs	r3, #1
 8001958:	e0ac      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800195a:	4b2e      	ldr	r3, [pc, #184]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a2d      	ldr	r2, [pc, #180]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001960:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001964:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8001966:	f7ff f99b 	bl	8000ca0 <HAL_GetTick>
 800196a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800196c:	e008      	b.n	8001980 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800196e:	f7ff f997 	bl	8000ca0 <HAL_GetTick>
 8001972:	4602      	mov	r2, r0
 8001974:	693b      	ldr	r3, [r7, #16]
 8001976:	1ad3      	subs	r3, r2, r3
 8001978:	2b02      	cmp	r3, #2
 800197a:	d901      	bls.n	8001980 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800197c:	2303      	movs	r3, #3
 800197e:	e099      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001980:	4b24      	ldr	r3, [pc, #144]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d1f0      	bne.n	800196e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800198c:	4b21      	ldr	r3, [pc, #132]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 800198e:	68da      	ldr	r2, [r3, #12]
 8001990:	4b21      	ldr	r3, [pc, #132]	; (8001a18 <HAL_RCC_OscConfig+0x77c>)
 8001992:	4013      	ands	r3, r2
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001998:	687a      	ldr	r2, [r7, #4]
 800199a:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800199c:	3a01      	subs	r2, #1
 800199e:	0112      	lsls	r2, r2, #4
 80019a0:	4311      	orrs	r1, r2
 80019a2:	687a      	ldr	r2, [r7, #4]
 80019a4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80019a6:	0212      	lsls	r2, r2, #8
 80019a8:	4311      	orrs	r1, r2
 80019aa:	687a      	ldr	r2, [r7, #4]
 80019ac:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80019ae:	0852      	lsrs	r2, r2, #1
 80019b0:	3a01      	subs	r2, #1
 80019b2:	0552      	lsls	r2, r2, #21
 80019b4:	4311      	orrs	r1, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80019ba:	0852      	lsrs	r2, r2, #1
 80019bc:	3a01      	subs	r2, #1
 80019be:	0652      	lsls	r2, r2, #25
 80019c0:	4311      	orrs	r1, r2
 80019c2:	687a      	ldr	r2, [r7, #4]
 80019c4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80019c6:	06d2      	lsls	r2, r2, #27
 80019c8:	430a      	orrs	r2, r1
 80019ca:	4912      	ldr	r1, [pc, #72]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80019cc:	4313      	orrs	r3, r2
 80019ce:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80019d0:	4b10      	ldr	r3, [pc, #64]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	4a0f      	ldr	r2, [pc, #60]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80019d6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019da:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80019dc:	4b0d      	ldr	r3, [pc, #52]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80019de:	68db      	ldr	r3, [r3, #12]
 80019e0:	4a0c      	ldr	r2, [pc, #48]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 80019e2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019e6:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80019e8:	f7ff f95a 	bl	8000ca0 <HAL_GetTick>
 80019ec:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80019ee:	e008      	b.n	8001a02 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019f0:	f7ff f956 	bl	8000ca0 <HAL_GetTick>
 80019f4:	4602      	mov	r2, r0
 80019f6:	693b      	ldr	r3, [r7, #16]
 80019f8:	1ad3      	subs	r3, r2, r3
 80019fa:	2b02      	cmp	r3, #2
 80019fc:	d901      	bls.n	8001a02 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80019fe:	2303      	movs	r3, #3
 8001a00:	e058      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a02:	4b04      	ldr	r3, [pc, #16]	; (8001a14 <HAL_RCC_OscConfig+0x778>)
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d0f0      	beq.n	80019f0 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a0e:	e050      	b.n	8001ab2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8001a10:	2301      	movs	r3, #1
 8001a12:	e04f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
 8001a14:	40021000 	.word	0x40021000
 8001a18:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1c:	4b27      	ldr	r3, [pc, #156]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d144      	bne.n	8001ab2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8001a28:	4b24      	ldr	r3, [pc, #144]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a23      	ldr	r2, [pc, #140]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001a34:	4b21      	ldr	r3, [pc, #132]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4a20      	ldr	r2, [pc, #128]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001a3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001a40:	f7ff f92e 	bl	8000ca0 <HAL_GetTick>
 8001a44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a46:	e008      	b.n	8001a5a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a48:	f7ff f92a 	bl	8000ca0 <HAL_GetTick>
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	693b      	ldr	r3, [r7, #16]
 8001a50:	1ad3      	subs	r3, r2, r3
 8001a52:	2b02      	cmp	r3, #2
 8001a54:	d901      	bls.n	8001a5a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8001a56:	2303      	movs	r3, #3
 8001a58:	e02c      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a5a:	4b18      	ldr	r3, [pc, #96]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d0f0      	beq.n	8001a48 <HAL_RCC_OscConfig+0x7ac>
 8001a66:	e024      	b.n	8001ab2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001a68:	69bb      	ldr	r3, [r7, #24]
 8001a6a:	2b0c      	cmp	r3, #12
 8001a6c:	d01f      	beq.n	8001aae <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a6e:	4b13      	ldr	r3, [pc, #76]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a12      	ldr	r2, [pc, #72]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7a:	f7ff f911 	bl	8000ca0 <HAL_GetTick>
 8001a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a80:	e008      	b.n	8001a94 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a82:	f7ff f90d 	bl	8000ca0 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	693b      	ldr	r3, [r7, #16]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e00f      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001a94:	4b09      	ldr	r3, [pc, #36]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d1f0      	bne.n	8001a82 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001aa0:	4b06      	ldr	r3, [pc, #24]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001aa2:	68da      	ldr	r2, [r3, #12]
 8001aa4:	4905      	ldr	r1, [pc, #20]	; (8001abc <HAL_RCC_OscConfig+0x820>)
 8001aa6:	4b06      	ldr	r3, [pc, #24]	; (8001ac0 <HAL_RCC_OscConfig+0x824>)
 8001aa8:	4013      	ands	r3, r2
 8001aaa:	60cb      	str	r3, [r1, #12]
 8001aac:	e001      	b.n	8001ab2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
}
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	3720      	adds	r7, #32
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}
 8001abc:	40021000 	.word	0x40021000
 8001ac0:	feeefffc 	.word	0xfeeefffc

08001ac4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b084      	sub	sp, #16
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
 8001acc:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	2b00      	cmp	r3, #0
 8001ad2:	d101      	bne.n	8001ad8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ad4:	2301      	movs	r3, #1
 8001ad6:	e0e7      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ad8:	4b75      	ldr	r3, [pc, #468]	; (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	f003 0307 	and.w	r3, r3, #7
 8001ae0:	683a      	ldr	r2, [r7, #0]
 8001ae2:	429a      	cmp	r2, r3
 8001ae4:	d910      	bls.n	8001b08 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ae6:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f023 0207 	bic.w	r2, r3, #7
 8001aee:	4970      	ldr	r1, [pc, #448]	; (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	4313      	orrs	r3, r2
 8001af4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001af6:	4b6e      	ldr	r3, [pc, #440]	; (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 0307 	and.w	r3, r3, #7
 8001afe:	683a      	ldr	r2, [r7, #0]
 8001b00:	429a      	cmp	r2, r3
 8001b02:	d001      	beq.n	8001b08 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001b04:	2301      	movs	r3, #1
 8001b06:	e0cf      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d010      	beq.n	8001b36 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	4b66      	ldr	r3, [pc, #408]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1a:	689b      	ldr	r3, [r3, #8]
 8001b1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b20:	429a      	cmp	r2, r3
 8001b22:	d908      	bls.n	8001b36 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b24:	4b63      	ldr	r3, [pc, #396]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b26:	689b      	ldr	r3, [r3, #8]
 8001b28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	689b      	ldr	r3, [r3, #8]
 8001b30:	4960      	ldr	r1, [pc, #384]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b32:	4313      	orrs	r3, r2
 8001b34:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	f003 0301 	and.w	r3, r3, #1
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d04c      	beq.n	8001bdc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	2b03      	cmp	r3, #3
 8001b48:	d107      	bne.n	8001b5a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001b4a:	4b5a      	ldr	r3, [pc, #360]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d121      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001b56:	2301      	movs	r3, #1
 8001b58:	e0a6      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	685b      	ldr	r3, [r3, #4]
 8001b5e:	2b02      	cmp	r3, #2
 8001b60:	d107      	bne.n	8001b72 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001b62:	4b54      	ldr	r3, [pc, #336]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b6a:	2b00      	cmp	r3, #0
 8001b6c:	d115      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b6e:	2301      	movs	r3, #1
 8001b70:	e09a      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001b7a:	4b4e      	ldr	r3, [pc, #312]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f003 0302 	and.w	r3, r3, #2
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d109      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e08e      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001b8a:	4b4a      	ldr	r3, [pc, #296]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b8c:	681b      	ldr	r3, [r3, #0]
 8001b8e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001b92:	2b00      	cmp	r3, #0
 8001b94:	d101      	bne.n	8001b9a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001b96:	2301      	movs	r3, #1
 8001b98:	e086      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001b9a:	4b46      	ldr	r3, [pc, #280]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f023 0203 	bic.w	r2, r3, #3
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	685b      	ldr	r3, [r3, #4]
 8001ba6:	4943      	ldr	r1, [pc, #268]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001bac:	f7ff f878 	bl	8000ca0 <HAL_GetTick>
 8001bb0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bb2:	e00a      	b.n	8001bca <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bb4:	f7ff f874 	bl	8000ca0 <HAL_GetTick>
 8001bb8:	4602      	mov	r2, r0
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	f241 3288 	movw	r2, #5000	; 0x1388
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d901      	bls.n	8001bca <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001bc6:	2303      	movs	r3, #3
 8001bc8:	e06e      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bca:	4b3a      	ldr	r3, [pc, #232]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bcc:	689b      	ldr	r3, [r3, #8]
 8001bce:	f003 020c 	and.w	r2, r3, #12
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	009b      	lsls	r3, r3, #2
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	d1eb      	bne.n	8001bb4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d010      	beq.n	8001c0a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	689a      	ldr	r2, [r3, #8]
 8001bec:	4b31      	ldr	r3, [pc, #196]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d208      	bcs.n	8001c0a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001bf8:	4b2e      	ldr	r3, [pc, #184]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	492b      	ldr	r1, [pc, #172]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c06:	4313      	orrs	r3, r2
 8001c08:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001c0a:	4b29      	ldr	r3, [pc, #164]	; (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	683a      	ldr	r2, [r7, #0]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d210      	bcs.n	8001c3a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c18:	4b25      	ldr	r3, [pc, #148]	; (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	f023 0207 	bic.w	r2, r3, #7
 8001c20:	4923      	ldr	r1, [pc, #140]	; (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <HAL_RCC_ClockConfig+0x1ec>)
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0307 	and.w	r3, r3, #7
 8001c30:	683a      	ldr	r2, [r7, #0]
 8001c32:	429a      	cmp	r2, r3
 8001c34:	d001      	beq.n	8001c3a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e036      	b.n	8001ca8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f003 0304 	and.w	r3, r3, #4
 8001c42:	2b00      	cmp	r3, #0
 8001c44:	d008      	beq.n	8001c58 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c46:	4b1b      	ldr	r3, [pc, #108]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c48:	689b      	ldr	r3, [r3, #8]
 8001c4a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	4918      	ldr	r1, [pc, #96]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c54:	4313      	orrs	r3, r2
 8001c56:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	2b00      	cmp	r3, #0
 8001c62:	d009      	beq.n	8001c78 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c64:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	691b      	ldr	r3, [r3, #16]
 8001c70:	00db      	lsls	r3, r3, #3
 8001c72:	4910      	ldr	r1, [pc, #64]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c74:	4313      	orrs	r3, r2
 8001c76:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001c78:	f000 f824 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8001c7c:	4602      	mov	r2, r0
 8001c7e:	4b0d      	ldr	r3, [pc, #52]	; (8001cb4 <HAL_RCC_ClockConfig+0x1f0>)
 8001c80:	689b      	ldr	r3, [r3, #8]
 8001c82:	091b      	lsrs	r3, r3, #4
 8001c84:	f003 030f 	and.w	r3, r3, #15
 8001c88:	490b      	ldr	r1, [pc, #44]	; (8001cb8 <HAL_RCC_ClockConfig+0x1f4>)
 8001c8a:	5ccb      	ldrb	r3, [r1, r3]
 8001c8c:	f003 031f 	and.w	r3, r3, #31
 8001c90:	fa22 f303 	lsr.w	r3, r2, r3
 8001c94:	4a09      	ldr	r2, [pc, #36]	; (8001cbc <HAL_RCC_ClockConfig+0x1f8>)
 8001c96:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001c98:	4b09      	ldr	r3, [pc, #36]	; (8001cc0 <HAL_RCC_ClockConfig+0x1fc>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fe75 	bl	800098c <HAL_InitTick>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	72fb      	strb	r3, [r7, #11]

  return status;
 8001ca6:	7afb      	ldrb	r3, [r7, #11]
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40022000 	.word	0x40022000
 8001cb4:	40021000 	.word	0x40021000
 8001cb8:	080071ec 	.word	0x080071ec
 8001cbc:	20000000 	.word	0x20000000
 8001cc0:	20000004 	.word	0x20000004

08001cc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cc4:	b480      	push	{r7}
 8001cc6:	b089      	sub	sp, #36	; 0x24
 8001cc8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	2300      	movs	r3, #0
 8001cd0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cd2:	4b3e      	ldr	r3, [pc, #248]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	f003 030c 	and.w	r3, r3, #12
 8001cda:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cdc:	4b3b      	ldr	r3, [pc, #236]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cde:	68db      	ldr	r3, [r3, #12]
 8001ce0:	f003 0303 	and.w	r3, r3, #3
 8001ce4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d005      	beq.n	8001cf8 <HAL_RCC_GetSysClockFreq+0x34>
 8001cec:	693b      	ldr	r3, [r7, #16]
 8001cee:	2b0c      	cmp	r3, #12
 8001cf0:	d121      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d11e      	bne.n	8001d36 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001cf8:	4b34      	ldr	r3, [pc, #208]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f003 0308 	and.w	r3, r3, #8
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d107      	bne.n	8001d14 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001d04:	4b31      	ldr	r3, [pc, #196]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d06:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001d0a:	0a1b      	lsrs	r3, r3, #8
 8001d0c:	f003 030f 	and.w	r3, r3, #15
 8001d10:	61fb      	str	r3, [r7, #28]
 8001d12:	e005      	b.n	8001d20 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001d14:	4b2d      	ldr	r3, [pc, #180]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	091b      	lsrs	r3, r3, #4
 8001d1a:	f003 030f 	and.w	r3, r3, #15
 8001d1e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001d20:	4a2b      	ldr	r2, [pc, #172]	; (8001dd0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d28:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d2a:	693b      	ldr	r3, [r7, #16]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	d10d      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001d34:	e00a      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001d36:	693b      	ldr	r3, [r7, #16]
 8001d38:	2b04      	cmp	r3, #4
 8001d3a:	d102      	bne.n	8001d42 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001d3c:	4b25      	ldr	r3, [pc, #148]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d3e:	61bb      	str	r3, [r7, #24]
 8001d40:	e004      	b.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001d42:	693b      	ldr	r3, [r7, #16]
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d101      	bne.n	8001d4c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001d48:	4b23      	ldr	r3, [pc, #140]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d4a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001d4c:	693b      	ldr	r3, [r7, #16]
 8001d4e:	2b0c      	cmp	r3, #12
 8001d50:	d134      	bne.n	8001dbc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001d52:	4b1e      	ldr	r3, [pc, #120]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d54:	68db      	ldr	r3, [r3, #12]
 8001d56:	f003 0303 	and.w	r3, r3, #3
 8001d5a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	2b02      	cmp	r3, #2
 8001d60:	d003      	beq.n	8001d6a <HAL_RCC_GetSysClockFreq+0xa6>
 8001d62:	68bb      	ldr	r3, [r7, #8]
 8001d64:	2b03      	cmp	r3, #3
 8001d66:	d003      	beq.n	8001d70 <HAL_RCC_GetSysClockFreq+0xac>
 8001d68:	e005      	b.n	8001d76 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001d6a:	4b1a      	ldr	r3, [pc, #104]	; (8001dd4 <HAL_RCC_GetSysClockFreq+0x110>)
 8001d6c:	617b      	str	r3, [r7, #20]
      break;
 8001d6e:	e005      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001d70:	4b19      	ldr	r3, [pc, #100]	; (8001dd8 <HAL_RCC_GetSysClockFreq+0x114>)
 8001d72:	617b      	str	r3, [r7, #20]
      break;
 8001d74:	e002      	b.n	8001d7c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	617b      	str	r3, [r7, #20]
      break;
 8001d7a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001d7c:	4b13      	ldr	r3, [pc, #76]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d7e:	68db      	ldr	r3, [r3, #12]
 8001d80:	091b      	lsrs	r3, r3, #4
 8001d82:	f003 0307 	and.w	r3, r3, #7
 8001d86:	3301      	adds	r3, #1
 8001d88:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001d8a:	4b10      	ldr	r3, [pc, #64]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001d8c:	68db      	ldr	r3, [r3, #12]
 8001d8e:	0a1b      	lsrs	r3, r3, #8
 8001d90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001d94:	697a      	ldr	r2, [r7, #20]
 8001d96:	fb03 f202 	mul.w	r2, r3, r2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001da0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001da2:	4b0a      	ldr	r3, [pc, #40]	; (8001dcc <HAL_RCC_GetSysClockFreq+0x108>)
 8001da4:	68db      	ldr	r3, [r3, #12]
 8001da6:	0e5b      	lsrs	r3, r3, #25
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	3301      	adds	r3, #1
 8001dae:	005b      	lsls	r3, r3, #1
 8001db0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001db2:	697a      	ldr	r2, [r7, #20]
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dba:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001dbc:	69bb      	ldr	r3, [r7, #24]
}
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	3724      	adds	r7, #36	; 0x24
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc8:	4770      	bx	lr
 8001dca:	bf00      	nop
 8001dcc:	40021000 	.word	0x40021000
 8001dd0:	08007204 	.word	0x08007204
 8001dd4:	00f42400 	.word	0x00f42400
 8001dd8:	007a1200 	.word	0x007a1200

08001ddc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001de0:	4b03      	ldr	r3, [pc, #12]	; (8001df0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001de2:	681b      	ldr	r3, [r3, #0]
}
 8001de4:	4618      	mov	r0, r3
 8001de6:	46bd      	mov	sp, r7
 8001de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dec:	4770      	bx	lr
 8001dee:	bf00      	nop
 8001df0:	20000000 	.word	0x20000000

08001df4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001df8:	f7ff fff0 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	4b06      	ldr	r3, [pc, #24]	; (8001e18 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001e00:	689b      	ldr	r3, [r3, #8]
 8001e02:	0a1b      	lsrs	r3, r3, #8
 8001e04:	f003 0307 	and.w	r3, r3, #7
 8001e08:	4904      	ldr	r1, [pc, #16]	; (8001e1c <HAL_RCC_GetPCLK1Freq+0x28>)
 8001e0a:	5ccb      	ldrb	r3, [r1, r3]
 8001e0c:	f003 031f 	and.w	r3, r3, #31
 8001e10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e14:	4618      	mov	r0, r3
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	080071fc 	.word	0x080071fc

08001e20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001e24:	f7ff ffda 	bl	8001ddc <HAL_RCC_GetHCLKFreq>
 8001e28:	4602      	mov	r2, r0
 8001e2a:	4b06      	ldr	r3, [pc, #24]	; (8001e44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001e2c:	689b      	ldr	r3, [r3, #8]
 8001e2e:	0adb      	lsrs	r3, r3, #11
 8001e30:	f003 0307 	and.w	r3, r3, #7
 8001e34:	4904      	ldr	r1, [pc, #16]	; (8001e48 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001e36:	5ccb      	ldrb	r3, [r1, r3]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001e40:	4618      	mov	r0, r3
 8001e42:	bd80      	pop	{r7, pc}
 8001e44:	40021000 	.word	0x40021000
 8001e48:	080071fc 	.word	0x080071fc

08001e4c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001e4c:	b480      	push	{r7}
 8001e4e:	b083      	sub	sp, #12
 8001e50:	af00      	add	r7, sp, #0
 8001e52:	6078      	str	r0, [r7, #4]
 8001e54:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	220f      	movs	r2, #15
 8001e5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001e5c:	4b12      	ldr	r3, [pc, #72]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e5e:	689b      	ldr	r3, [r3, #8]
 8001e60:	f003 0203 	and.w	r2, r3, #3
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001e68:	4b0f      	ldr	r3, [pc, #60]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001e74:	4b0c      	ldr	r3, [pc, #48]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001e80:	4b09      	ldr	r3, [pc, #36]	; (8001ea8 <HAL_RCC_GetClockConfig+0x5c>)
 8001e82:	689b      	ldr	r3, [r3, #8]
 8001e84:	08db      	lsrs	r3, r3, #3
 8001e86:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001e8e:	4b07      	ldr	r3, [pc, #28]	; (8001eac <HAL_RCC_GetClockConfig+0x60>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0207 	and.w	r2, r3, #7
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	601a      	str	r2, [r3, #0]
}
 8001e9a:	bf00      	nop
 8001e9c:	370c      	adds	r7, #12
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40021000 	.word	0x40021000
 8001eac:	40022000 	.word	0x40022000

08001eb0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001eb8:	2300      	movs	r3, #0
 8001eba:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001ebc:	4b2a      	ldr	r3, [pc, #168]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ec0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d003      	beq.n	8001ed0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001ec8:	f7ff f984 	bl	80011d4 <HAL_PWREx_GetVoltageRange>
 8001ecc:	6178      	str	r0, [r7, #20]
 8001ece:	e014      	b.n	8001efa <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001ed0:	4b25      	ldr	r3, [pc, #148]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	4a24      	ldr	r2, [pc, #144]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ed6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001eda:	6593      	str	r3, [r2, #88]	; 0x58
 8001edc:	4b22      	ldr	r3, [pc, #136]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ede:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ee0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ee4:	60fb      	str	r3, [r7, #12]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001ee8:	f7ff f974 	bl	80011d4 <HAL_PWREx_GetVoltageRange>
 8001eec:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001eee:	4b1e      	ldr	r3, [pc, #120]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef2:	4a1d      	ldr	r2, [pc, #116]	; (8001f68 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001ef4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001ef8:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001efa:	697b      	ldr	r3, [r7, #20]
 8001efc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f00:	d10b      	bne.n	8001f1a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	2b80      	cmp	r3, #128	; 0x80
 8001f06:	d919      	bls.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	2ba0      	cmp	r3, #160	; 0xa0
 8001f0c:	d902      	bls.n	8001f14 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f0e:	2302      	movs	r3, #2
 8001f10:	613b      	str	r3, [r7, #16]
 8001f12:	e013      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f14:	2301      	movs	r3, #1
 8001f16:	613b      	str	r3, [r7, #16]
 8001f18:	e010      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2b80      	cmp	r3, #128	; 0x80
 8001f1e:	d902      	bls.n	8001f26 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001f20:	2303      	movs	r3, #3
 8001f22:	613b      	str	r3, [r7, #16]
 8001f24:	e00a      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2b80      	cmp	r3, #128	; 0x80
 8001f2a:	d102      	bne.n	8001f32 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001f2c:	2302      	movs	r3, #2
 8001f2e:	613b      	str	r3, [r7, #16]
 8001f30:	e004      	b.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	2b70      	cmp	r3, #112	; 0x70
 8001f36:	d101      	bne.n	8001f3c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001f38:	2301      	movs	r3, #1
 8001f3a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001f3c:	4b0b      	ldr	r3, [pc, #44]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f023 0207 	bic.w	r2, r3, #7
 8001f44:	4909      	ldr	r1, [pc, #36]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f46:	693b      	ldr	r3, [r7, #16]
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001f4c:	4b07      	ldr	r3, [pc, #28]	; (8001f6c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	f003 0307 	and.w	r3, r3, #7
 8001f54:	693a      	ldr	r2, [r7, #16]
 8001f56:	429a      	cmp	r2, r3
 8001f58:	d001      	beq.n	8001f5e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001f5a:	2301      	movs	r3, #1
 8001f5c:	e000      	b.n	8001f60 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	3718      	adds	r7, #24
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40021000 	.word	0x40021000
 8001f6c:	40022000 	.word	0x40022000

08001f70 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001f78:	2300      	movs	r3, #0
 8001f7a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d031      	beq.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f94:	d01a      	beq.n	8001fcc <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001f96:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001f9a:	d814      	bhi.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d009      	beq.n	8001fb4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001fa0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001fa4:	d10f      	bne.n	8001fc6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fa8:	68db      	ldr	r3, [r3, #12]
 8001faa:	4a5c      	ldr	r2, [pc, #368]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fb0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fb2:	e00c      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	3304      	adds	r3, #4
 8001fb8:	2100      	movs	r1, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	f000 f9de 	bl	800237c <RCCEx_PLLSAI1_Config>
 8001fc0:	4603      	mov	r3, r0
 8001fc2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001fc4:	e003      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001fc6:	2301      	movs	r3, #1
 8001fc8:	74fb      	strb	r3, [r7, #19]
      break;
 8001fca:	e000      	b.n	8001fce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001fcc:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001fce:	7cfb      	ldrb	r3, [r7, #19]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10b      	bne.n	8001fec <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001fd4:	4b51      	ldr	r3, [pc, #324]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001fda:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fe2:	494e      	ldr	r1, [pc, #312]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001fea:	e001      	b.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001fec:	7cfb      	ldrb	r3, [r7, #19]
 8001fee:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	f000 809e 	beq.w	800213a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ffe:	2300      	movs	r3, #0
 8002000:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002002:	4b46      	ldr	r3, [pc, #280]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d101      	bne.n	8002012 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800200e:	2301      	movs	r3, #1
 8002010:	e000      	b.n	8002014 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002012:	2300      	movs	r3, #0
 8002014:	2b00      	cmp	r3, #0
 8002016:	d00d      	beq.n	8002034 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002018:	4b40      	ldr	r3, [pc, #256]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800201a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800201c:	4a3f      	ldr	r2, [pc, #252]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800201e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002022:	6593      	str	r3, [r2, #88]	; 0x58
 8002024:	4b3d      	ldr	r3, [pc, #244]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002026:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002028:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002030:	2301      	movs	r3, #1
 8002032:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002034:	4b3a      	ldr	r3, [pc, #232]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a39      	ldr	r2, [pc, #228]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800203a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800203e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002040:	f7fe fe2e 	bl	8000ca0 <HAL_GetTick>
 8002044:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002046:	e009      	b.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002048:	f7fe fe2a 	bl	8000ca0 <HAL_GetTick>
 800204c:	4602      	mov	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	2b02      	cmp	r3, #2
 8002054:	d902      	bls.n	800205c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	74fb      	strb	r3, [r7, #19]
        break;
 800205a:	e005      	b.n	8002068 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800205c:	4b30      	ldr	r3, [pc, #192]	; (8002120 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002064:	2b00      	cmp	r3, #0
 8002066:	d0ef      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002068:	7cfb      	ldrb	r3, [r7, #19]
 800206a:	2b00      	cmp	r3, #0
 800206c:	d15a      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800206e:	4b2b      	ldr	r3, [pc, #172]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002070:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002074:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002078:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800207a:	697b      	ldr	r3, [r7, #20]
 800207c:	2b00      	cmp	r3, #0
 800207e:	d01e      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002084:	697a      	ldr	r2, [r7, #20]
 8002086:	429a      	cmp	r2, r3
 8002088:	d019      	beq.n	80020be <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800208a:	4b24      	ldr	r3, [pc, #144]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800208c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002090:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002094:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002096:	4b21      	ldr	r3, [pc, #132]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002098:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800209c:	4a1f      	ldr	r2, [pc, #124]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800209e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020a2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80020a6:	4b1d      	ldr	r3, [pc, #116]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ac:	4a1b      	ldr	r2, [pc, #108]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80020b6:	4a19      	ldr	r2, [pc, #100]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020b8:	697b      	ldr	r3, [r7, #20]
 80020ba:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80020be:	697b      	ldr	r3, [r7, #20]
 80020c0:	f003 0301 	and.w	r3, r3, #1
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d016      	beq.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020c8:	f7fe fdea 	bl	8000ca0 <HAL_GetTick>
 80020cc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020ce:	e00b      	b.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020d0:	f7fe fde6 	bl	8000ca0 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	f241 3288 	movw	r2, #5000	; 0x1388
 80020de:	4293      	cmp	r3, r2
 80020e0:	d902      	bls.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	74fb      	strb	r3, [r7, #19]
            break;
 80020e6:	e006      	b.n	80020f6 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80020e8:	4b0c      	ldr	r3, [pc, #48]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80020ee:	f003 0302 	and.w	r3, r3, #2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d0ec      	beq.n	80020d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 80020f6:	7cfb      	ldrb	r3, [r7, #19]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d10b      	bne.n	8002114 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80020fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002102:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800210a:	4904      	ldr	r1, [pc, #16]	; (800211c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800210c:	4313      	orrs	r3, r2
 800210e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002112:	e009      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002114:	7cfb      	ldrb	r3, [r7, #19]
 8002116:	74bb      	strb	r3, [r7, #18]
 8002118:	e006      	b.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
 8002126:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002128:	7c7b      	ldrb	r3, [r7, #17]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d105      	bne.n	800213a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800212e:	4b8a      	ldr	r3, [pc, #552]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002130:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002132:	4a89      	ldr	r2, [pc, #548]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002134:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002138:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f003 0301 	and.w	r3, r3, #1
 8002142:	2b00      	cmp	r3, #0
 8002144:	d00a      	beq.n	800215c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002146:	4b84      	ldr	r3, [pc, #528]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002148:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800214c:	f023 0203 	bic.w	r2, r3, #3
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	4980      	ldr	r1, [pc, #512]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002156:	4313      	orrs	r3, r2
 8002158:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	f003 0302 	and.w	r3, r3, #2
 8002164:	2b00      	cmp	r3, #0
 8002166:	d00a      	beq.n	800217e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002168:	4b7b      	ldr	r3, [pc, #492]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800216a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216e:	f023 020c 	bic.w	r2, r3, #12
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002176:	4978      	ldr	r1, [pc, #480]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002178:	4313      	orrs	r3, r2
 800217a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	681b      	ldr	r3, [r3, #0]
 8002182:	f003 0320 	and.w	r3, r3, #32
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00a      	beq.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800218a:	4b73      	ldr	r3, [pc, #460]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002190:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002198:	496f      	ldr	r1, [pc, #444]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800219a:	4313      	orrs	r3, r2
 800219c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00a      	beq.n	80021c2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80021ac:	4b6a      	ldr	r3, [pc, #424]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021b2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80021ba:	4967      	ldr	r1, [pc, #412]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d00a      	beq.n	80021e4 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80021ce:	4b62      	ldr	r3, [pc, #392]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021d4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021dc:	495e      	ldr	r1, [pc, #376]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021de:	4313      	orrs	r3, r2
 80021e0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d00a      	beq.n	8002206 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021f0:	4b59      	ldr	r3, [pc, #356]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021f6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021fe:	4956      	ldr	r1, [pc, #344]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002200:	4313      	orrs	r3, r2
 8002202:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800220e:	2b00      	cmp	r3, #0
 8002210:	d00a      	beq.n	8002228 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002212:	4b51      	ldr	r3, [pc, #324]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002214:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002218:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002220:	494d      	ldr	r1, [pc, #308]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002222:	4313      	orrs	r3, r2
 8002224:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002230:	2b00      	cmp	r3, #0
 8002232:	d028      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002234:	4b48      	ldr	r3, [pc, #288]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002236:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800223a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002242:	4945      	ldr	r1, [pc, #276]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002244:	4313      	orrs	r3, r2
 8002246:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800224e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002252:	d106      	bne.n	8002262 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002254:	4b40      	ldr	r3, [pc, #256]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a3f      	ldr	r2, [pc, #252]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800225a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800225e:	60d3      	str	r3, [r2, #12]
 8002260:	e011      	b.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002266:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800226a:	d10c      	bne.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	3304      	adds	r3, #4
 8002270:	2101      	movs	r1, #1
 8002272:	4618      	mov	r0, r3
 8002274:	f000 f882 	bl	800237c <RCCEx_PLLSAI1_Config>
 8002278:	4603      	mov	r3, r0
 800227a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800227c:	7cfb      	ldrb	r3, [r7, #19]
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002282:	7cfb      	ldrb	r3, [r7, #19]
 8002284:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800228e:	2b00      	cmp	r3, #0
 8002290:	d028      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002292:	4b31      	ldr	r3, [pc, #196]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002294:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002298:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a0:	492d      	ldr	r1, [pc, #180]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022a2:	4313      	orrs	r3, r2
 80022a4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022ac:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80022b0:	d106      	bne.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80022b2:	4b29      	ldr	r3, [pc, #164]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b4:	68db      	ldr	r3, [r3, #12]
 80022b6:	4a28      	ldr	r2, [pc, #160]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80022bc:	60d3      	str	r3, [r2, #12]
 80022be:	e011      	b.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022c4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80022c8:	d10c      	bne.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	3304      	adds	r3, #4
 80022ce:	2101      	movs	r1, #1
 80022d0:	4618      	mov	r0, r3
 80022d2:	f000 f853 	bl	800237c <RCCEx_PLLSAI1_Config>
 80022d6:	4603      	mov	r3, r0
 80022d8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80022da:	7cfb      	ldrb	r3, [r7, #19]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d001      	beq.n	80022e4 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80022e0:	7cfb      	ldrb	r3, [r7, #19]
 80022e2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d01c      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80022f0:	4b19      	ldr	r3, [pc, #100]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80022f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80022f6:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022fe:	4916      	ldr	r1, [pc, #88]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002300:	4313      	orrs	r3, r2
 8002302:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800230a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800230e:	d10c      	bne.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	3304      	adds	r3, #4
 8002314:	2102      	movs	r1, #2
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f830 	bl	800237c <RCCEx_PLLSAI1_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002320:	7cfb      	ldrb	r3, [r7, #19]
 8002322:	2b00      	cmp	r3, #0
 8002324:	d001      	beq.n	800232a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002326:	7cfb      	ldrb	r3, [r7, #19]
 8002328:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002332:	2b00      	cmp	r3, #0
 8002334:	d00a      	beq.n	800234c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002338:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800233c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002344:	4904      	ldr	r1, [pc, #16]	; (8002358 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002346:	4313      	orrs	r3, r2
 8002348:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800234c:	7cbb      	ldrb	r3, [r7, #18]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}
 8002356:	bf00      	nop
 8002358:	40021000 	.word	0x40021000

0800235c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002360:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	4a04      	ldr	r2, [pc, #16]	; (8002378 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002366:	f043 0304 	orr.w	r3, r3, #4
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
 8002376:	bf00      	nop
 8002378:	40021000 	.word	0x40021000

0800237c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	b084      	sub	sp, #16
 8002380:	af00      	add	r7, sp, #0
 8002382:	6078      	str	r0, [r7, #4]
 8002384:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002386:	2300      	movs	r3, #0
 8002388:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800238a:	4b74      	ldr	r3, [pc, #464]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	2b00      	cmp	r3, #0
 8002394:	d018      	beq.n	80023c8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002396:	4b71      	ldr	r3, [pc, #452]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	f003 0203 	and.w	r2, r3, #3
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	429a      	cmp	r2, r3
 80023a4:	d10d      	bne.n	80023c2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
       ||
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d009      	beq.n	80023c2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80023ae:	4b6b      	ldr	r3, [pc, #428]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023b0:	68db      	ldr	r3, [r3, #12]
 80023b2:	091b      	lsrs	r3, r3, #4
 80023b4:	f003 0307 	and.w	r3, r3, #7
 80023b8:	1c5a      	adds	r2, r3, #1
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
       ||
 80023be:	429a      	cmp	r2, r3
 80023c0:	d047      	beq.n	8002452 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80023c2:	2301      	movs	r3, #1
 80023c4:	73fb      	strb	r3, [r7, #15]
 80023c6:	e044      	b.n	8002452 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	2b03      	cmp	r3, #3
 80023ce:	d018      	beq.n	8002402 <RCCEx_PLLSAI1_Config+0x86>
 80023d0:	2b03      	cmp	r3, #3
 80023d2:	d825      	bhi.n	8002420 <RCCEx_PLLSAI1_Config+0xa4>
 80023d4:	2b01      	cmp	r3, #1
 80023d6:	d002      	beq.n	80023de <RCCEx_PLLSAI1_Config+0x62>
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d009      	beq.n	80023f0 <RCCEx_PLLSAI1_Config+0x74>
 80023dc:	e020      	b.n	8002420 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80023de:	4b5f      	ldr	r3, [pc, #380]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	f003 0302 	and.w	r3, r3, #2
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	d11d      	bne.n	8002426 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80023ea:	2301      	movs	r3, #1
 80023ec:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023ee:	e01a      	b.n	8002426 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80023f0:	4b5a      	ldr	r3, [pc, #360]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023f8:	2b00      	cmp	r3, #0
 80023fa:	d116      	bne.n	800242a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80023fc:	2301      	movs	r3, #1
 80023fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002400:	e013      	b.n	800242a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002402:	4b56      	ldr	r3, [pc, #344]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d10f      	bne.n	800242e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800240e:	4b53      	ldr	r3, [pc, #332]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d109      	bne.n	800242e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 800241a:	2301      	movs	r3, #1
 800241c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800241e:	e006      	b.n	800242e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002420:	2301      	movs	r3, #1
 8002422:	73fb      	strb	r3, [r7, #15]
      break;
 8002424:	e004      	b.n	8002430 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002426:	bf00      	nop
 8002428:	e002      	b.n	8002430 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800242a:	bf00      	nop
 800242c:	e000      	b.n	8002430 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800242e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002430:	7bfb      	ldrb	r3, [r7, #15]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d10d      	bne.n	8002452 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002436:	4b49      	ldr	r3, [pc, #292]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002438:	68db      	ldr	r3, [r3, #12]
 800243a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	6819      	ldr	r1, [r3, #0]
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	685b      	ldr	r3, [r3, #4]
 8002446:	3b01      	subs	r3, #1
 8002448:	011b      	lsls	r3, r3, #4
 800244a:	430b      	orrs	r3, r1
 800244c:	4943      	ldr	r1, [pc, #268]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 800244e:	4313      	orrs	r3, r2
 8002450:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002452:	7bfb      	ldrb	r3, [r7, #15]
 8002454:	2b00      	cmp	r3, #0
 8002456:	d17c      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002458:	4b40      	ldr	r3, [pc, #256]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	4a3f      	ldr	r2, [pc, #252]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 800245e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002462:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002464:	f7fe fc1c 	bl	8000ca0 <HAL_GetTick>
 8002468:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800246a:	e009      	b.n	8002480 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800246c:	f7fe fc18 	bl	8000ca0 <HAL_GetTick>
 8002470:	4602      	mov	r2, r0
 8002472:	68bb      	ldr	r3, [r7, #8]
 8002474:	1ad3      	subs	r3, r2, r3
 8002476:	2b02      	cmp	r3, #2
 8002478:	d902      	bls.n	8002480 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800247a:	2303      	movs	r3, #3
 800247c:	73fb      	strb	r3, [r7, #15]
        break;
 800247e:	e005      	b.n	800248c <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002480:	4b36      	ldr	r3, [pc, #216]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d1ef      	bne.n	800246c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800248c:	7bfb      	ldrb	r3, [r7, #15]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d15f      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	2b00      	cmp	r3, #0
 8002496:	d110      	bne.n	80024ba <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002498:	4b30      	ldr	r3, [pc, #192]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 800249a:	691b      	ldr	r3, [r3, #16]
 800249c:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 80024a0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024a4:	687a      	ldr	r2, [r7, #4]
 80024a6:	6892      	ldr	r2, [r2, #8]
 80024a8:	0211      	lsls	r1, r2, #8
 80024aa:	687a      	ldr	r2, [r7, #4]
 80024ac:	68d2      	ldr	r2, [r2, #12]
 80024ae:	06d2      	lsls	r2, r2, #27
 80024b0:	430a      	orrs	r2, r1
 80024b2:	492a      	ldr	r1, [pc, #168]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	610b      	str	r3, [r1, #16]
 80024b8:	e027      	b.n	800250a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80024ba:	683b      	ldr	r3, [r7, #0]
 80024bc:	2b01      	cmp	r3, #1
 80024be:	d112      	bne.n	80024e6 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024c0:	4b26      	ldr	r3, [pc, #152]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024c2:	691b      	ldr	r3, [r3, #16]
 80024c4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80024c8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	6892      	ldr	r2, [r2, #8]
 80024d0:	0211      	lsls	r1, r2, #8
 80024d2:	687a      	ldr	r2, [r7, #4]
 80024d4:	6912      	ldr	r2, [r2, #16]
 80024d6:	0852      	lsrs	r2, r2, #1
 80024d8:	3a01      	subs	r2, #1
 80024da:	0552      	lsls	r2, r2, #21
 80024dc:	430a      	orrs	r2, r1
 80024de:	491f      	ldr	r1, [pc, #124]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e0:	4313      	orrs	r3, r2
 80024e2:	610b      	str	r3, [r1, #16]
 80024e4:	e011      	b.n	800250a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80024e6:	4b1d      	ldr	r3, [pc, #116]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 80024e8:	691b      	ldr	r3, [r3, #16]
 80024ea:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80024ee:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6892      	ldr	r2, [r2, #8]
 80024f6:	0211      	lsls	r1, r2, #8
 80024f8:	687a      	ldr	r2, [r7, #4]
 80024fa:	6952      	ldr	r2, [r2, #20]
 80024fc:	0852      	lsrs	r2, r2, #1
 80024fe:	3a01      	subs	r2, #1
 8002500:	0652      	lsls	r2, r2, #25
 8002502:	430a      	orrs	r2, r1
 8002504:	4915      	ldr	r1, [pc, #84]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002506:	4313      	orrs	r3, r2
 8002508:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800250a:	4b14      	ldr	r3, [pc, #80]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a13      	ldr	r2, [pc, #76]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002510:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002514:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002516:	f7fe fbc3 	bl	8000ca0 <HAL_GetTick>
 800251a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800251c:	e009      	b.n	8002532 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800251e:	f7fe fbbf 	bl	8000ca0 <HAL_GetTick>
 8002522:	4602      	mov	r2, r0
 8002524:	68bb      	ldr	r3, [r7, #8]
 8002526:	1ad3      	subs	r3, r2, r3
 8002528:	2b02      	cmp	r3, #2
 800252a:	d902      	bls.n	8002532 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 800252c:	2303      	movs	r3, #3
 800252e:	73fb      	strb	r3, [r7, #15]
          break;
 8002530:	e005      	b.n	800253e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002532:	4b0a      	ldr	r3, [pc, #40]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0ef      	beq.n	800251e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 800253e:	7bfb      	ldrb	r3, [r7, #15]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d106      	bne.n	8002552 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002544:	4b05      	ldr	r3, [pc, #20]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002546:	691a      	ldr	r2, [r3, #16]
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	699b      	ldr	r3, [r3, #24]
 800254c:	4903      	ldr	r1, [pc, #12]	; (800255c <RCCEx_PLLSAI1_Config+0x1e0>)
 800254e:	4313      	orrs	r3, r2
 8002550:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002552:	7bfb      	ldrb	r3, [r7, #15]
}
 8002554:	4618      	mov	r0, r3
 8002556:	3710      	adds	r7, #16
 8002558:	46bd      	mov	sp, r7
 800255a:	bd80      	pop	{r7, pc}
 800255c:	40021000 	.word	0x40021000

08002560 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002560:	b580      	push	{r7, lr}
 8002562:	b082      	sub	sp, #8
 8002564:	af00      	add	r7, sp, #0
 8002566:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b00      	cmp	r3, #0
 800256c:	d101      	bne.n	8002572 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800256e:	2301      	movs	r3, #1
 8002570:	e049      	b.n	8002606 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002578:	b2db      	uxtb	r3, r3
 800257a:	2b00      	cmp	r3, #0
 800257c:	d106      	bne.n	800258c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	2200      	movs	r2, #0
 8002582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f000 f841 	bl	800260e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681a      	ldr	r2, [r3, #0]
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	3304      	adds	r3, #4
 800259c:	4619      	mov	r1, r3
 800259e:	4610      	mov	r0, r2
 80025a0:	f000 f9dc 	bl	800295c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	2201      	movs	r2, #1
 8002600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002604:	2300      	movs	r3, #0
}
 8002606:	4618      	mov	r0, r3
 8002608:	3708      	adds	r7, #8
 800260a:	46bd      	mov	sp, r7
 800260c:	bd80      	pop	{r7, pc}

0800260e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800260e:	b480      	push	{r7}
 8002610:	b083      	sub	sp, #12
 8002612:	af00      	add	r7, sp, #0
 8002614:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002616:	bf00      	nop
 8002618:	370c      	adds	r7, #12
 800261a:	46bd      	mov	sp, r7
 800261c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002620:	4770      	bx	lr
	...

08002624 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002632:	b2db      	uxtb	r3, r3
 8002634:	2b01      	cmp	r3, #1
 8002636:	d001      	beq.n	800263c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002638:	2301      	movs	r3, #1
 800263a:	e03b      	b.n	80026b4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	2202      	movs	r2, #2
 8002640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	68da      	ldr	r2, [r3, #12]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	f042 0201 	orr.w	r2, r2, #1
 8002652:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a19      	ldr	r2, [pc, #100]	; (80026c0 <HAL_TIM_Base_Start_IT+0x9c>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d009      	beq.n	8002672 <HAL_TIM_Base_Start_IT+0x4e>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002666:	d004      	beq.n	8002672 <HAL_TIM_Base_Start_IT+0x4e>
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a15      	ldr	r2, [pc, #84]	; (80026c4 <HAL_TIM_Base_Start_IT+0xa0>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d115      	bne.n	800269e <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	689a      	ldr	r2, [r3, #8]
 8002678:	4b13      	ldr	r3, [pc, #76]	; (80026c8 <HAL_TIM_Base_Start_IT+0xa4>)
 800267a:	4013      	ands	r3, r2
 800267c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b06      	cmp	r3, #6
 8002682:	d015      	beq.n	80026b0 <HAL_TIM_Base_Start_IT+0x8c>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800268a:	d011      	beq.n	80026b0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	681a      	ldr	r2, [r3, #0]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f042 0201 	orr.w	r2, r2, #1
 800269a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800269c:	e008      	b.n	80026b0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f042 0201 	orr.w	r2, r2, #1
 80026ac:	601a      	str	r2, [r3, #0]
 80026ae:	e000      	b.n	80026b2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026b2:	2300      	movs	r3, #0
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3714      	adds	r7, #20
 80026b8:	46bd      	mov	sp, r7
 80026ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026be:	4770      	bx	lr
 80026c0:	40012c00 	.word	0x40012c00
 80026c4:	40014000 	.word	0x40014000
 80026c8:	00010007 	.word	0x00010007

080026cc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80026cc:	b580      	push	{r7, lr}
 80026ce:	b082      	sub	sp, #8
 80026d0:	af00      	add	r7, sp, #0
 80026d2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	691b      	ldr	r3, [r3, #16]
 80026da:	f003 0302 	and.w	r3, r3, #2
 80026de:	2b02      	cmp	r3, #2
 80026e0:	d122      	bne.n	8002728 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	68db      	ldr	r3, [r3, #12]
 80026e8:	f003 0302 	and.w	r3, r3, #2
 80026ec:	2b02      	cmp	r3, #2
 80026ee:	d11b      	bne.n	8002728 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f06f 0202 	mvn.w	r2, #2
 80026f8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2201      	movs	r2, #1
 80026fe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	699b      	ldr	r3, [r3, #24]
 8002706:	f003 0303 	and.w	r3, r3, #3
 800270a:	2b00      	cmp	r3, #0
 800270c:	d003      	beq.n	8002716 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800270e:	6878      	ldr	r0, [r7, #4]
 8002710:	f000 f905 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 8002714:	e005      	b.n	8002722 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8f7 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800271c:	6878      	ldr	r0, [r7, #4]
 800271e:	f000 f908 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2200      	movs	r2, #0
 8002726:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	691b      	ldr	r3, [r3, #16]
 800272e:	f003 0304 	and.w	r3, r3, #4
 8002732:	2b04      	cmp	r3, #4
 8002734:	d122      	bne.n	800277c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	f003 0304 	and.w	r3, r3, #4
 8002740:	2b04      	cmp	r3, #4
 8002742:	d11b      	bne.n	800277c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	f06f 0204 	mvn.w	r2, #4
 800274c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	2202      	movs	r2, #2
 8002752:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	699b      	ldr	r3, [r3, #24]
 800275a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800275e:	2b00      	cmp	r3, #0
 8002760:	d003      	beq.n	800276a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002762:	6878      	ldr	r0, [r7, #4]
 8002764:	f000 f8db 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 8002768:	e005      	b.n	8002776 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800276a:	6878      	ldr	r0, [r7, #4]
 800276c:	f000 f8cd 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002770:	6878      	ldr	r0, [r7, #4]
 8002772:	f000 f8de 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	691b      	ldr	r3, [r3, #16]
 8002782:	f003 0308 	and.w	r3, r3, #8
 8002786:	2b08      	cmp	r3, #8
 8002788:	d122      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	68db      	ldr	r3, [r3, #12]
 8002790:	f003 0308 	and.w	r3, r3, #8
 8002794:	2b08      	cmp	r3, #8
 8002796:	d11b      	bne.n	80027d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f06f 0208 	mvn.w	r2, #8
 80027a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2204      	movs	r2, #4
 80027a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	69db      	ldr	r3, [r3, #28]
 80027ae:	f003 0303 	and.w	r3, r3, #3
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d003      	beq.n	80027be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027b6:	6878      	ldr	r0, [r7, #4]
 80027b8:	f000 f8b1 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 80027bc:	e005      	b.n	80027ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027be:	6878      	ldr	r0, [r7, #4]
 80027c0:	f000 f8a3 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027c4:	6878      	ldr	r0, [r7, #4]
 80027c6:	f000 f8b4 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	2200      	movs	r2, #0
 80027ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	691b      	ldr	r3, [r3, #16]
 80027d6:	f003 0310 	and.w	r3, r3, #16
 80027da:	2b10      	cmp	r3, #16
 80027dc:	d122      	bne.n	8002824 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	68db      	ldr	r3, [r3, #12]
 80027e4:	f003 0310 	and.w	r3, r3, #16
 80027e8:	2b10      	cmp	r3, #16
 80027ea:	d11b      	bne.n	8002824 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f06f 0210 	mvn.w	r2, #16
 80027f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2208      	movs	r2, #8
 80027fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	69db      	ldr	r3, [r3, #28]
 8002802:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002806:	2b00      	cmp	r3, #0
 8002808:	d003      	beq.n	8002812 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800280a:	6878      	ldr	r0, [r7, #4]
 800280c:	f000 f887 	bl	800291e <HAL_TIM_IC_CaptureCallback>
 8002810:	e005      	b.n	800281e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002812:	6878      	ldr	r0, [r7, #4]
 8002814:	f000 f879 	bl	800290a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002818:	6878      	ldr	r0, [r7, #4]
 800281a:	f000 f88a 	bl	8002932 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	691b      	ldr	r3, [r3, #16]
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	2b01      	cmp	r3, #1
 8002830:	d10e      	bne.n	8002850 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	f003 0301 	and.w	r3, r3, #1
 800283c:	2b01      	cmp	r3, #1
 800283e:	d107      	bne.n	8002850 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	f06f 0201 	mvn.w	r2, #1
 8002848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800284a:	6878      	ldr	r0, [r7, #4]
 800284c:	f7fd ffc6 	bl	80007dc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	691b      	ldr	r3, [r3, #16]
 8002856:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800285a:	2b80      	cmp	r3, #128	; 0x80
 800285c:	d10e      	bne.n	800287c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	68db      	ldr	r3, [r3, #12]
 8002864:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002868:	2b80      	cmp	r3, #128	; 0x80
 800286a:	d107      	bne.n	800287c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002874:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f000 f8de 	bl	8002a38 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002886:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800288a:	d10e      	bne.n	80028aa <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002896:	2b80      	cmp	r3, #128	; 0x80
 8002898:	d107      	bne.n	80028aa <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028a2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028a4:	6878      	ldr	r0, [r7, #4]
 80028a6:	f000 f8d1 	bl	8002a4c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	691b      	ldr	r3, [r3, #16]
 80028b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028b4:	2b40      	cmp	r3, #64	; 0x40
 80028b6:	d10e      	bne.n	80028d6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	68db      	ldr	r3, [r3, #12]
 80028be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028c2:	2b40      	cmp	r3, #64	; 0x40
 80028c4:	d107      	bne.n	80028d6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80028ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80028d0:	6878      	ldr	r0, [r7, #4]
 80028d2:	f000 f838 	bl	8002946 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	691b      	ldr	r3, [r3, #16]
 80028dc:	f003 0320 	and.w	r3, r3, #32
 80028e0:	2b20      	cmp	r3, #32
 80028e2:	d10e      	bne.n	8002902 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	f003 0320 	and.w	r3, r3, #32
 80028ee:	2b20      	cmp	r3, #32
 80028f0:	d107      	bne.n	8002902 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f06f 0220 	mvn.w	r2, #32
 80028fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80028fc:	6878      	ldr	r0, [r7, #4]
 80028fe:	f000 f891 	bl	8002a24 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002902:	bf00      	nop
 8002904:	3708      	adds	r7, #8
 8002906:	46bd      	mov	sp, r7
 8002908:	bd80      	pop	{r7, pc}

0800290a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800290a:	b480      	push	{r7}
 800290c:	b083      	sub	sp, #12
 800290e:	af00      	add	r7, sp, #0
 8002910:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002912:	bf00      	nop
 8002914:	370c      	adds	r7, #12
 8002916:	46bd      	mov	sp, r7
 8002918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291c:	4770      	bx	lr

0800291e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800291e:	b480      	push	{r7}
 8002920:	b083      	sub	sp, #12
 8002922:	af00      	add	r7, sp, #0
 8002924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002926:	bf00      	nop
 8002928:	370c      	adds	r7, #12
 800292a:	46bd      	mov	sp, r7
 800292c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002930:	4770      	bx	lr

08002932 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002932:	b480      	push	{r7}
 8002934:	b083      	sub	sp, #12
 8002936:	af00      	add	r7, sp, #0
 8002938:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800293a:	bf00      	nop
 800293c:	370c      	adds	r7, #12
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr

08002946 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002946:	b480      	push	{r7}
 8002948:	b083      	sub	sp, #12
 800294a:	af00      	add	r7, sp, #0
 800294c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800294e:	bf00      	nop
 8002950:	370c      	adds	r7, #12
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
	...

0800295c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	4a2a      	ldr	r2, [pc, #168]	; (8002a18 <TIM_Base_SetConfig+0xbc>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d003      	beq.n	800297c <TIM_Base_SetConfig+0x20>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800297a:	d108      	bne.n	800298e <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002982:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	685b      	ldr	r3, [r3, #4]
 8002988:	68fa      	ldr	r2, [r7, #12]
 800298a:	4313      	orrs	r3, r2
 800298c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	4a21      	ldr	r2, [pc, #132]	; (8002a18 <TIM_Base_SetConfig+0xbc>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d00b      	beq.n	80029ae <TIM_Base_SetConfig+0x52>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299c:	d007      	beq.n	80029ae <TIM_Base_SetConfig+0x52>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	4a1e      	ldr	r2, [pc, #120]	; (8002a1c <TIM_Base_SetConfig+0xc0>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d003      	beq.n	80029ae <TIM_Base_SetConfig+0x52>
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	4a1d      	ldr	r2, [pc, #116]	; (8002a20 <TIM_Base_SetConfig+0xc4>)
 80029aa:	4293      	cmp	r3, r2
 80029ac:	d108      	bne.n	80029c0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80029ae:	68fb      	ldr	r3, [r7, #12]
 80029b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80029b4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80029b6:	683b      	ldr	r3, [r7, #0]
 80029b8:	68db      	ldr	r3, [r3, #12]
 80029ba:	68fa      	ldr	r2, [r7, #12]
 80029bc:	4313      	orrs	r3, r2
 80029be:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	695b      	ldr	r3, [r3, #20]
 80029ca:	4313      	orrs	r3, r2
 80029cc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	68fa      	ldr	r2, [r7, #12]
 80029d2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	689a      	ldr	r2, [r3, #8]
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80029dc:	683b      	ldr	r3, [r7, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	4a0c      	ldr	r2, [pc, #48]	; (8002a18 <TIM_Base_SetConfig+0xbc>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d007      	beq.n	80029fc <TIM_Base_SetConfig+0xa0>
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	4a0b      	ldr	r2, [pc, #44]	; (8002a1c <TIM_Base_SetConfig+0xc0>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d003      	beq.n	80029fc <TIM_Base_SetConfig+0xa0>
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	4a0a      	ldr	r2, [pc, #40]	; (8002a20 <TIM_Base_SetConfig+0xc4>)
 80029f8:	4293      	cmp	r3, r2
 80029fa:	d103      	bne.n	8002a04 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	691a      	ldr	r2, [r3, #16]
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	2201      	movs	r2, #1
 8002a08:	615a      	str	r2, [r3, #20]
}
 8002a0a:	bf00      	nop
 8002a0c:	3714      	adds	r7, #20
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a14:	4770      	bx	lr
 8002a16:	bf00      	nop
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40014000 	.word	0x40014000
 8002a20:	40014400 	.word	0x40014400

08002a24 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002a24:	b480      	push	{r7}
 8002a26:	b083      	sub	sp, #12
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002a2c:	bf00      	nop
 8002a2e:	370c      	adds	r7, #12
 8002a30:	46bd      	mov	sp, r7
 8002a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a36:	4770      	bx	lr

08002a38 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002a38:	b480      	push	{r7}
 8002a3a:	b083      	sub	sp, #12
 8002a3c:	af00      	add	r7, sp, #0
 8002a3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002a40:	bf00      	nop
 8002a42:	370c      	adds	r7, #12
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002a54:	bf00      	nop
 8002a56:	370c      	adds	r7, #12
 8002a58:	46bd      	mov	sp, r7
 8002a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5e:	4770      	bx	lr

08002a60 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002a60:	b580      	push	{r7, lr}
 8002a62:	b082      	sub	sp, #8
 8002a64:	af00      	add	r7, sp, #0
 8002a66:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d101      	bne.n	8002a72 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002a6e:	2301      	movs	r3, #1
 8002a70:	e040      	b.n	8002af4 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d106      	bne.n	8002a88 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f7fd ff18 	bl	80008b8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2224      	movs	r2, #36	; 0x24
 8002a8c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	681a      	ldr	r2, [r3, #0]
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f022 0201 	bic.w	r2, r2, #1
 8002a9c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002a9e:	6878      	ldr	r0, [r7, #4]
 8002aa0:	f000 f8c0 	bl	8002c24 <UART_SetConfig>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b01      	cmp	r3, #1
 8002aa8:	d101      	bne.n	8002aae <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	e022      	b.n	8002af4 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d002      	beq.n	8002abc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002ab6:	6878      	ldr	r0, [r7, #4]
 8002ab8:	f000 fae0 	bl	800307c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	685a      	ldr	r2, [r3, #4]
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002aca:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	689a      	ldr	r2, [r3, #8]
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002ada:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	681a      	ldr	r2, [r3, #0]
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	f042 0201 	orr.w	r2, r2, #1
 8002aea:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002aec:	6878      	ldr	r0, [r7, #4]
 8002aee:	f000 fb67 	bl	80031c0 <UART_CheckIdleState>
 8002af2:	4603      	mov	r3, r0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3708      	adds	r7, #8
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08a      	sub	sp, #40	; 0x28
 8002b00:	af02      	add	r7, sp, #8
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	603b      	str	r3, [r7, #0]
 8002b08:	4613      	mov	r3, r2
 8002b0a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002b10:	2b20      	cmp	r3, #32
 8002b12:	f040 8082 	bne.w	8002c1a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002b16:	68bb      	ldr	r3, [r7, #8]
 8002b18:	2b00      	cmp	r3, #0
 8002b1a:	d002      	beq.n	8002b22 <HAL_UART_Transmit+0x26>
 8002b1c:	88fb      	ldrh	r3, [r7, #6]
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d101      	bne.n	8002b26 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8002b22:	2301      	movs	r3, #1
 8002b24:	e07a      	b.n	8002c1c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d101      	bne.n	8002b34 <HAL_UART_Transmit+0x38>
 8002b30:	2302      	movs	r3, #2
 8002b32:	e073      	b.n	8002c1c <HAL_UART_Transmit+0x120>
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	2201      	movs	r2, #1
 8002b38:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002b44:	68fb      	ldr	r3, [r7, #12]
 8002b46:	2221      	movs	r2, #33	; 0x21
 8002b48:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002b4a:	f7fe f8a9 	bl	8000ca0 <HAL_GetTick>
 8002b4e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	88fa      	ldrh	r2, [r7, #6]
 8002b54:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8002b58:	68fb      	ldr	r3, [r7, #12]
 8002b5a:	88fa      	ldrh	r2, [r7, #6]
 8002b5c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	689b      	ldr	r3, [r3, #8]
 8002b64:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b68:	d108      	bne.n	8002b7c <HAL_UART_Transmit+0x80>
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	691b      	ldr	r3, [r3, #16]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d104      	bne.n	8002b7c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8002b72:	2300      	movs	r3, #0
 8002b74:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002b76:	68bb      	ldr	r3, [r7, #8]
 8002b78:	61bb      	str	r3, [r7, #24]
 8002b7a:	e003      	b.n	8002b84 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 8002b7c:	68bb      	ldr	r3, [r7, #8]
 8002b7e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002b80:	2300      	movs	r3, #0
 8002b82:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 8002b8c:	e02d      	b.n	8002bea <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	9300      	str	r3, [sp, #0]
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	2200      	movs	r2, #0
 8002b96:	2180      	movs	r1, #128	; 0x80
 8002b98:	68f8      	ldr	r0, [r7, #12]
 8002b9a:	f000 fb5a 	bl	8003252 <UART_WaitOnFlagUntilTimeout>
 8002b9e:	4603      	mov	r3, r0
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d001      	beq.n	8002ba8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 8002ba4:	2303      	movs	r3, #3
 8002ba6:	e039      	b.n	8002c1c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	2b00      	cmp	r3, #0
 8002bac:	d10b      	bne.n	8002bc6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002bae:	69bb      	ldr	r3, [r7, #24]
 8002bb0:	881a      	ldrh	r2, [r3, #0]
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002bba:	b292      	uxth	r2, r2
 8002bbc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	3302      	adds	r3, #2
 8002bc2:	61bb      	str	r3, [r7, #24]
 8002bc4:	e008      	b.n	8002bd8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8002bc6:	69fb      	ldr	r3, [r7, #28]
 8002bc8:	781a      	ldrb	r2, [r3, #0]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	b292      	uxth	r2, r2
 8002bd0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8002bd2:	69fb      	ldr	r3, [r7, #28]
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bde:	b29b      	uxth	r3, r3
 8002be0:	3b01      	subs	r3, #1
 8002be2:	b29a      	uxth	r2, r3
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8002bf0:	b29b      	uxth	r3, r3
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d1cb      	bne.n	8002b8e <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	9300      	str	r3, [sp, #0]
 8002bfa:	697b      	ldr	r3, [r7, #20]
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2140      	movs	r1, #64	; 0x40
 8002c00:	68f8      	ldr	r0, [r7, #12]
 8002c02:	f000 fb26 	bl	8003252 <UART_WaitOnFlagUntilTimeout>
 8002c06:	4603      	mov	r3, r0
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d001      	beq.n	8002c10 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 8002c0c:	2303      	movs	r3, #3
 8002c0e:	e005      	b.n	8002c1c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	2220      	movs	r2, #32
 8002c14:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8002c16:	2300      	movs	r3, #0
 8002c18:	e000      	b.n	8002c1c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 8002c1a:	2302      	movs	r3, #2
  }
}
 8002c1c:	4618      	mov	r0, r3
 8002c1e:	3720      	adds	r7, #32
 8002c20:	46bd      	mov	sp, r7
 8002c22:	bd80      	pop	{r7, pc}

08002c24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002c28:	b08a      	sub	sp, #40	; 0x28
 8002c2a:	af00      	add	r7, sp, #0
 8002c2c:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c2e:	2300      	movs	r3, #0
 8002c30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	689a      	ldr	r2, [r3, #8]
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	691b      	ldr	r3, [r3, #16]
 8002c3c:	431a      	orrs	r2, r3
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	695b      	ldr	r3, [r3, #20]
 8002c42:	431a      	orrs	r2, r3
 8002c44:	68fb      	ldr	r3, [r7, #12]
 8002c46:	69db      	ldr	r3, [r3, #28]
 8002c48:	4313      	orrs	r3, r2
 8002c4a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	681a      	ldr	r2, [r3, #0]
 8002c52:	4bb4      	ldr	r3, [pc, #720]	; (8002f24 <UART_SetConfig+0x300>)
 8002c54:	4013      	ands	r3, r2
 8002c56:	68fa      	ldr	r2, [r7, #12]
 8002c58:	6812      	ldr	r2, [r2, #0]
 8002c5a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c5c:	430b      	orrs	r3, r1
 8002c5e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	68da      	ldr	r2, [r3, #12]
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	430a      	orrs	r2, r1
 8002c74:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	699b      	ldr	r3, [r3, #24]
 8002c7a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4aa9      	ldr	r2, [pc, #676]	; (8002f28 <UART_SetConfig+0x304>)
 8002c82:	4293      	cmp	r3, r2
 8002c84:	d004      	beq.n	8002c90 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	6a1b      	ldr	r3, [r3, #32]
 8002c8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c8c:	4313      	orrs	r3, r2
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	689b      	ldr	r3, [r3, #8]
 8002c96:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002c9a:	68fb      	ldr	r3, [r7, #12]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ca0:	430a      	orrs	r2, r1
 8002ca2:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	4aa0      	ldr	r2, [pc, #640]	; (8002f2c <UART_SetConfig+0x308>)
 8002caa:	4293      	cmp	r3, r2
 8002cac:	d126      	bne.n	8002cfc <UART_SetConfig+0xd8>
 8002cae:	4ba0      	ldr	r3, [pc, #640]	; (8002f30 <UART_SetConfig+0x30c>)
 8002cb0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb4:	f003 0303 	and.w	r3, r3, #3
 8002cb8:	2b03      	cmp	r3, #3
 8002cba:	d81b      	bhi.n	8002cf4 <UART_SetConfig+0xd0>
 8002cbc:	a201      	add	r2, pc, #4	; (adr r2, 8002cc4 <UART_SetConfig+0xa0>)
 8002cbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cc2:	bf00      	nop
 8002cc4:	08002cd5 	.word	0x08002cd5
 8002cc8:	08002ce5 	.word	0x08002ce5
 8002ccc:	08002cdd 	.word	0x08002cdd
 8002cd0:	08002ced 	.word	0x08002ced
 8002cd4:	2301      	movs	r3, #1
 8002cd6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cda:	e080      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002cdc:	2302      	movs	r3, #2
 8002cde:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002ce2:	e07c      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002ce4:	2304      	movs	r3, #4
 8002ce6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cea:	e078      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002cec:	2308      	movs	r3, #8
 8002cee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cf2:	e074      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002cf4:	2310      	movs	r3, #16
 8002cf6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002cfa:	e070      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4a8c      	ldr	r2, [pc, #560]	; (8002f34 <UART_SetConfig+0x310>)
 8002d02:	4293      	cmp	r3, r2
 8002d04:	d138      	bne.n	8002d78 <UART_SetConfig+0x154>
 8002d06:	4b8a      	ldr	r3, [pc, #552]	; (8002f30 <UART_SetConfig+0x30c>)
 8002d08:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d0c:	f003 030c 	and.w	r3, r3, #12
 8002d10:	2b0c      	cmp	r3, #12
 8002d12:	d82d      	bhi.n	8002d70 <UART_SetConfig+0x14c>
 8002d14:	a201      	add	r2, pc, #4	; (adr r2, 8002d1c <UART_SetConfig+0xf8>)
 8002d16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d1a:	bf00      	nop
 8002d1c:	08002d51 	.word	0x08002d51
 8002d20:	08002d71 	.word	0x08002d71
 8002d24:	08002d71 	.word	0x08002d71
 8002d28:	08002d71 	.word	0x08002d71
 8002d2c:	08002d61 	.word	0x08002d61
 8002d30:	08002d71 	.word	0x08002d71
 8002d34:	08002d71 	.word	0x08002d71
 8002d38:	08002d71 	.word	0x08002d71
 8002d3c:	08002d59 	.word	0x08002d59
 8002d40:	08002d71 	.word	0x08002d71
 8002d44:	08002d71 	.word	0x08002d71
 8002d48:	08002d71 	.word	0x08002d71
 8002d4c:	08002d69 	.word	0x08002d69
 8002d50:	2300      	movs	r3, #0
 8002d52:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d56:	e042      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002d58:	2302      	movs	r3, #2
 8002d5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d5e:	e03e      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002d60:	2304      	movs	r3, #4
 8002d62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d66:	e03a      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002d68:	2308      	movs	r3, #8
 8002d6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d6e:	e036      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002d70:	2310      	movs	r3, #16
 8002d72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002d76:	e032      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4a6a      	ldr	r2, [pc, #424]	; (8002f28 <UART_SetConfig+0x304>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d12a      	bne.n	8002dd8 <UART_SetConfig+0x1b4>
 8002d82:	4b6b      	ldr	r3, [pc, #428]	; (8002f30 <UART_SetConfig+0x30c>)
 8002d84:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d88:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002d8c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d90:	d01a      	beq.n	8002dc8 <UART_SetConfig+0x1a4>
 8002d92:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002d96:	d81b      	bhi.n	8002dd0 <UART_SetConfig+0x1ac>
 8002d98:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d9c:	d00c      	beq.n	8002db8 <UART_SetConfig+0x194>
 8002d9e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002da2:	d815      	bhi.n	8002dd0 <UART_SetConfig+0x1ac>
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d003      	beq.n	8002db0 <UART_SetConfig+0x18c>
 8002da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002dac:	d008      	beq.n	8002dc0 <UART_SetConfig+0x19c>
 8002dae:	e00f      	b.n	8002dd0 <UART_SetConfig+0x1ac>
 8002db0:	2300      	movs	r3, #0
 8002db2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002db6:	e012      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002db8:	2302      	movs	r3, #2
 8002dba:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dbe:	e00e      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002dc0:	2304      	movs	r3, #4
 8002dc2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dc6:	e00a      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002dc8:	2308      	movs	r3, #8
 8002dca:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dce:	e006      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8002dd6:	e002      	b.n	8002dde <UART_SetConfig+0x1ba>
 8002dd8:	2310      	movs	r3, #16
 8002dda:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	4a51      	ldr	r2, [pc, #324]	; (8002f28 <UART_SetConfig+0x304>)
 8002de4:	4293      	cmp	r3, r2
 8002de6:	d17a      	bne.n	8002ede <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002de8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002dec:	2b08      	cmp	r3, #8
 8002dee:	d824      	bhi.n	8002e3a <UART_SetConfig+0x216>
 8002df0:	a201      	add	r2, pc, #4	; (adr r2, 8002df8 <UART_SetConfig+0x1d4>)
 8002df2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002df6:	bf00      	nop
 8002df8:	08002e1d 	.word	0x08002e1d
 8002dfc:	08002e3b 	.word	0x08002e3b
 8002e00:	08002e25 	.word	0x08002e25
 8002e04:	08002e3b 	.word	0x08002e3b
 8002e08:	08002e2b 	.word	0x08002e2b
 8002e0c:	08002e3b 	.word	0x08002e3b
 8002e10:	08002e3b 	.word	0x08002e3b
 8002e14:	08002e3b 	.word	0x08002e3b
 8002e18:	08002e33 	.word	0x08002e33
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002e1c:	f7fe ffea 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002e20:	61f8      	str	r0, [r7, #28]
        break;
 8002e22:	e010      	b.n	8002e46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002e24:	4b44      	ldr	r3, [pc, #272]	; (8002f38 <UART_SetConfig+0x314>)
 8002e26:	61fb      	str	r3, [r7, #28]
        break;
 8002e28:	e00d      	b.n	8002e46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002e2a:	f7fe ff4b 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8002e2e:	61f8      	str	r0, [r7, #28]
        break;
 8002e30:	e009      	b.n	8002e46 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002e32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e36:	61fb      	str	r3, [r7, #28]
        break;
 8002e38:	e005      	b.n	8002e46 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002e44:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8002e46:	69fb      	ldr	r3, [r7, #28]
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	f000 8107 	beq.w	800305c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	685a      	ldr	r2, [r3, #4]
 8002e52:	4613      	mov	r3, r2
 8002e54:	005b      	lsls	r3, r3, #1
 8002e56:	4413      	add	r3, r2
 8002e58:	69fa      	ldr	r2, [r7, #28]
 8002e5a:	429a      	cmp	r2, r3
 8002e5c:	d305      	bcc.n	8002e6a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8002e64:	69fa      	ldr	r2, [r7, #28]
 8002e66:	429a      	cmp	r2, r3
 8002e68:	d903      	bls.n	8002e72 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8002e6a:	2301      	movs	r3, #1
 8002e6c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002e70:	e0f4      	b.n	800305c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8002e72:	69fb      	ldr	r3, [r7, #28]
 8002e74:	2200      	movs	r2, #0
 8002e76:	461c      	mov	r4, r3
 8002e78:	4615      	mov	r5, r2
 8002e7a:	f04f 0200 	mov.w	r2, #0
 8002e7e:	f04f 0300 	mov.w	r3, #0
 8002e82:	022b      	lsls	r3, r5, #8
 8002e84:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8002e88:	0222      	lsls	r2, r4, #8
 8002e8a:	68f9      	ldr	r1, [r7, #12]
 8002e8c:	6849      	ldr	r1, [r1, #4]
 8002e8e:	0849      	lsrs	r1, r1, #1
 8002e90:	2000      	movs	r0, #0
 8002e92:	4688      	mov	r8, r1
 8002e94:	4681      	mov	r9, r0
 8002e96:	eb12 0a08 	adds.w	sl, r2, r8
 8002e9a:	eb43 0b09 	adc.w	fp, r3, r9
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	685b      	ldr	r3, [r3, #4]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	603b      	str	r3, [r7, #0]
 8002ea6:	607a      	str	r2, [r7, #4]
 8002ea8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002eac:	4650      	mov	r0, sl
 8002eae:	4659      	mov	r1, fp
 8002eb0:	f7fd f9de 	bl	8000270 <__aeabi_uldivmod>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4613      	mov	r3, r2
 8002eba:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ec2:	d308      	bcc.n	8002ed6 <UART_SetConfig+0x2b2>
 8002ec4:	69bb      	ldr	r3, [r7, #24]
 8002ec6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002eca:	d204      	bcs.n	8002ed6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	60da      	str	r2, [r3, #12]
 8002ed4:	e0c2      	b.n	800305c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8002ed6:	2301      	movs	r3, #1
 8002ed8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002edc:	e0be      	b.n	800305c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	69db      	ldr	r3, [r3, #28]
 8002ee2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002ee6:	d16a      	bne.n	8002fbe <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8002ee8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002eec:	2b08      	cmp	r3, #8
 8002eee:	d834      	bhi.n	8002f5a <UART_SetConfig+0x336>
 8002ef0:	a201      	add	r2, pc, #4	; (adr r2, 8002ef8 <UART_SetConfig+0x2d4>)
 8002ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ef6:	bf00      	nop
 8002ef8:	08002f1d 	.word	0x08002f1d
 8002efc:	08002f3d 	.word	0x08002f3d
 8002f00:	08002f45 	.word	0x08002f45
 8002f04:	08002f5b 	.word	0x08002f5b
 8002f08:	08002f4b 	.word	0x08002f4b
 8002f0c:	08002f5b 	.word	0x08002f5b
 8002f10:	08002f5b 	.word	0x08002f5b
 8002f14:	08002f5b 	.word	0x08002f5b
 8002f18:	08002f53 	.word	0x08002f53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002f1c:	f7fe ff6a 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002f20:	61f8      	str	r0, [r7, #28]
        break;
 8002f22:	e020      	b.n	8002f66 <UART_SetConfig+0x342>
 8002f24:	efff69f3 	.word	0xefff69f3
 8002f28:	40008000 	.word	0x40008000
 8002f2c:	40013800 	.word	0x40013800
 8002f30:	40021000 	.word	0x40021000
 8002f34:	40004400 	.word	0x40004400
 8002f38:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002f3c:	f7fe ff70 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8002f40:	61f8      	str	r0, [r7, #28]
        break;
 8002f42:	e010      	b.n	8002f66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8002f44:	4b4c      	ldr	r3, [pc, #304]	; (8003078 <UART_SetConfig+0x454>)
 8002f46:	61fb      	str	r3, [r7, #28]
        break;
 8002f48:	e00d      	b.n	8002f66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8002f4a:	f7fe febb 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 8002f4e:	61f8      	str	r0, [r7, #28]
        break;
 8002f50:	e009      	b.n	8002f66 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8002f52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f56:	61fb      	str	r3, [r7, #28]
        break;
 8002f58:	e005      	b.n	8002f66 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8002f5e:	2301      	movs	r3, #1
 8002f60:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8002f64:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d077      	beq.n	800305c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8002f6c:	69fb      	ldr	r3, [r7, #28]
 8002f6e:	005a      	lsls	r2, r3, #1
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	085b      	lsrs	r3, r3, #1
 8002f76:	441a      	add	r2, r3
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f80:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8002f82:	69bb      	ldr	r3, [r7, #24]
 8002f84:	2b0f      	cmp	r3, #15
 8002f86:	d916      	bls.n	8002fb6 <UART_SetConfig+0x392>
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8e:	d212      	bcs.n	8002fb6 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	f023 030f 	bic.w	r3, r3, #15
 8002f98:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	085b      	lsrs	r3, r3, #1
 8002f9e:	b29b      	uxth	r3, r3
 8002fa0:	f003 0307 	and.w	r3, r3, #7
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	8afb      	ldrh	r3, [r7, #22]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	8afa      	ldrh	r2, [r7, #22]
 8002fb2:	60da      	str	r2, [r3, #12]
 8002fb4:	e052      	b.n	800305c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8002fb6:	2301      	movs	r3, #1
 8002fb8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8002fbc:	e04e      	b.n	800305c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8002fbe:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8002fc2:	2b08      	cmp	r3, #8
 8002fc4:	d827      	bhi.n	8003016 <UART_SetConfig+0x3f2>
 8002fc6:	a201      	add	r2, pc, #4	; (adr r2, 8002fcc <UART_SetConfig+0x3a8>)
 8002fc8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fcc:	08002ff1 	.word	0x08002ff1
 8002fd0:	08002ff9 	.word	0x08002ff9
 8002fd4:	08003001 	.word	0x08003001
 8002fd8:	08003017 	.word	0x08003017
 8002fdc:	08003007 	.word	0x08003007
 8002fe0:	08003017 	.word	0x08003017
 8002fe4:	08003017 	.word	0x08003017
 8002fe8:	08003017 	.word	0x08003017
 8002fec:	0800300f 	.word	0x0800300f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8002ff0:	f7fe ff00 	bl	8001df4 <HAL_RCC_GetPCLK1Freq>
 8002ff4:	61f8      	str	r0, [r7, #28]
        break;
 8002ff6:	e014      	b.n	8003022 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8002ff8:	f7fe ff12 	bl	8001e20 <HAL_RCC_GetPCLK2Freq>
 8002ffc:	61f8      	str	r0, [r7, #28]
        break;
 8002ffe:	e010      	b.n	8003022 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003000:	4b1d      	ldr	r3, [pc, #116]	; (8003078 <UART_SetConfig+0x454>)
 8003002:	61fb      	str	r3, [r7, #28]
        break;
 8003004:	e00d      	b.n	8003022 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003006:	f7fe fe5d 	bl	8001cc4 <HAL_RCC_GetSysClockFreq>
 800300a:	61f8      	str	r0, [r7, #28]
        break;
 800300c:	e009      	b.n	8003022 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800300e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003012:	61fb      	str	r3, [r7, #28]
        break;
 8003014:	e005      	b.n	8003022 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800301a:	2301      	movs	r3, #1
 800301c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003020:	bf00      	nop
    }

    if (pclk != 0U)
 8003022:	69fb      	ldr	r3, [r7, #28]
 8003024:	2b00      	cmp	r3, #0
 8003026:	d019      	beq.n	800305c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	085a      	lsrs	r2, r3, #1
 800302e:	69fb      	ldr	r3, [r7, #28]
 8003030:	441a      	add	r2, r3
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	fbb2 f3f3 	udiv	r3, r2, r3
 800303a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	2b0f      	cmp	r3, #15
 8003040:	d909      	bls.n	8003056 <UART_SetConfig+0x432>
 8003042:	69bb      	ldr	r3, [r7, #24]
 8003044:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003048:	d205      	bcs.n	8003056 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	b29a      	uxth	r2, r3
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	60da      	str	r2, [r3, #12]
 8003054:	e002      	b.n	800305c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003056:	2301      	movs	r3, #1
 8003058:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	2200      	movs	r2, #0
 8003060:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	2200      	movs	r2, #0
 8003066:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003068:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 800306c:	4618      	mov	r0, r3
 800306e:	3728      	adds	r7, #40	; 0x28
 8003070:	46bd      	mov	sp, r7
 8003072:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003076:	bf00      	nop
 8003078:	00f42400 	.word	0x00f42400

0800307c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800307c:	b480      	push	{r7}
 800307e:	b083      	sub	sp, #12
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003088:	f003 0301 	and.w	r3, r3, #1
 800308c:	2b00      	cmp	r3, #0
 800308e:	d00a      	beq.n	80030a6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	430a      	orrs	r2, r1
 80030a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d00a      	beq.n	80030c8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030cc:	f003 0304 	and.w	r3, r3, #4
 80030d0:	2b00      	cmp	r3, #0
 80030d2:	d00a      	beq.n	80030ea <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	685b      	ldr	r3, [r3, #4]
 80030da:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	430a      	orrs	r2, r1
 80030e8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00a      	beq.n	800310c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	685b      	ldr	r3, [r3, #4]
 80030fc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	430a      	orrs	r2, r1
 800310a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003110:	f003 0310 	and.w	r3, r3, #16
 8003114:	2b00      	cmp	r3, #0
 8003116:	d00a      	beq.n	800312e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	689b      	ldr	r3, [r3, #8]
 800311e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	430a      	orrs	r2, r1
 800312c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003132:	f003 0320 	and.w	r3, r3, #32
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00a      	beq.n	8003150 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	689b      	ldr	r3, [r3, #8]
 8003140:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	430a      	orrs	r2, r1
 800314e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003158:	2b00      	cmp	r3, #0
 800315a:	d01a      	beq.n	8003192 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	685b      	ldr	r3, [r3, #4]
 8003162:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	430a      	orrs	r2, r1
 8003170:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003176:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800317a:	d10a      	bne.n	8003192 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	430a      	orrs	r2, r1
 8003190:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003196:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800319a:	2b00      	cmp	r3, #0
 800319c:	d00a      	beq.n	80031b4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	605a      	str	r2, [r3, #4]
  }
}
 80031b4:	bf00      	nop
 80031b6:	370c      	adds	r7, #12
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr

080031c0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80031c0:	b580      	push	{r7, lr}
 80031c2:	b086      	sub	sp, #24
 80031c4:	af02      	add	r7, sp, #8
 80031c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	2200      	movs	r2, #0
 80031cc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80031d0:	f7fd fd66 	bl	8000ca0 <HAL_GetTick>
 80031d4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b08      	cmp	r3, #8
 80031e2:	d10e      	bne.n	8003202 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80031e4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80031e8:	9300      	str	r3, [sp, #0]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	2200      	movs	r2, #0
 80031ee:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80031f2:	6878      	ldr	r0, [r7, #4]
 80031f4:	f000 f82d 	bl	8003252 <UART_WaitOnFlagUntilTimeout>
 80031f8:	4603      	mov	r3, r0
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d001      	beq.n	8003202 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80031fe:	2303      	movs	r3, #3
 8003200:	e023      	b.n	800324a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	f003 0304 	and.w	r3, r3, #4
 800320c:	2b04      	cmp	r3, #4
 800320e:	d10e      	bne.n	800322e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003210:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003214:	9300      	str	r3, [sp, #0]
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	2200      	movs	r2, #0
 800321a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800321e:	6878      	ldr	r0, [r7, #4]
 8003220:	f000 f817 	bl	8003252 <UART_WaitOnFlagUntilTimeout>
 8003224:	4603      	mov	r3, r0
 8003226:	2b00      	cmp	r3, #0
 8003228:	d001      	beq.n	800322e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	e00d      	b.n	800324a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	2220      	movs	r2, #32
 8003232:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	2220      	movs	r2, #32
 8003238:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	2200      	movs	r2, #0
 800323e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2200      	movs	r2, #0
 8003244:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	3710      	adds	r7, #16
 800324e:	46bd      	mov	sp, r7
 8003250:	bd80      	pop	{r7, pc}

08003252 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003252:	b580      	push	{r7, lr}
 8003254:	b09c      	sub	sp, #112	; 0x70
 8003256:	af00      	add	r7, sp, #0
 8003258:	60f8      	str	r0, [r7, #12]
 800325a:	60b9      	str	r1, [r7, #8]
 800325c:	603b      	str	r3, [r7, #0]
 800325e:	4613      	mov	r3, r2
 8003260:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003262:	e0a5      	b.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003264:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800326a:	f000 80a1 	beq.w	80033b0 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800326e:	f7fd fd17 	bl	8000ca0 <HAL_GetTick>
 8003272:	4602      	mov	r2, r0
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	1ad3      	subs	r3, r2, r3
 8003278:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800327a:	429a      	cmp	r2, r3
 800327c:	d302      	bcc.n	8003284 <UART_WaitOnFlagUntilTimeout+0x32>
 800327e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003280:	2b00      	cmp	r3, #0
 8003282:	d13e      	bne.n	8003302 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003284:	68fb      	ldr	r3, [r7, #12]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800328a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800328c:	e853 3f00 	ldrex	r3, [r3]
 8003290:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003292:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003294:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003298:	667b      	str	r3, [r7, #100]	; 0x64
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	461a      	mov	r2, r3
 80032a0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80032a2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80032a4:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032a6:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80032a8:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80032aa:	e841 2300 	strex	r3, r2, [r1]
 80032ae:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80032b0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d1e6      	bne.n	8003284 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	3308      	adds	r3, #8
 80032bc:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80032be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80032c0:	e853 3f00 	ldrex	r3, [r3]
 80032c4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80032c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80032c8:	f023 0301 	bic.w	r3, r3, #1
 80032cc:	663b      	str	r3, [r7, #96]	; 0x60
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	3308      	adds	r3, #8
 80032d4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80032d6:	64ba      	str	r2, [r7, #72]	; 0x48
 80032d8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80032da:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80032dc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80032de:	e841 2300 	strex	r3, r2, [r1]
 80032e2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80032e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1e5      	bne.n	80032b6 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	2220      	movs	r2, #32
 80032ee:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	2220      	movs	r2, #32
 80032f4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e067      	b.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0304 	and.w	r3, r3, #4
 800330c:	2b00      	cmp	r3, #0
 800330e:	d04f      	beq.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	69db      	ldr	r3, [r3, #28]
 8003316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800331a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800331e:	d147      	bne.n	80033b0 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003328:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003330:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003332:	e853 3f00 	ldrex	r3, [r3]
 8003336:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003338:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800333a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800333e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	461a      	mov	r2, r3
 8003346:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003348:	637b      	str	r3, [r7, #52]	; 0x34
 800334a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800334c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800334e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003350:	e841 2300 	strex	r3, r2, [r1]
 8003354:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003356:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003358:	2b00      	cmp	r3, #0
 800335a:	d1e6      	bne.n	800332a <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	3308      	adds	r3, #8
 8003362:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	e853 3f00 	ldrex	r3, [r3]
 800336a:	613b      	str	r3, [r7, #16]
   return(result);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	f023 0301 	bic.w	r3, r3, #1
 8003372:	66bb      	str	r3, [r7, #104]	; 0x68
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	3308      	adds	r3, #8
 800337a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800337c:	623a      	str	r2, [r7, #32]
 800337e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003380:	69f9      	ldr	r1, [r7, #28]
 8003382:	6a3a      	ldr	r2, [r7, #32]
 8003384:	e841 2300 	strex	r3, r2, [r1]
 8003388:	61bb      	str	r3, [r7, #24]
   return(result);
 800338a:	69bb      	ldr	r3, [r7, #24]
 800338c:	2b00      	cmp	r3, #0
 800338e:	d1e5      	bne.n	800335c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	2220      	movs	r2, #32
 8003394:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2220      	movs	r2, #32
 800339a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2220      	movs	r2, #32
 80033a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 80033ac:	2303      	movs	r3, #3
 80033ae:	e010      	b.n	80033d2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	69da      	ldr	r2, [r3, #28]
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	4013      	ands	r3, r2
 80033ba:	68ba      	ldr	r2, [r7, #8]
 80033bc:	429a      	cmp	r2, r3
 80033be:	bf0c      	ite	eq
 80033c0:	2301      	moveq	r3, #1
 80033c2:	2300      	movne	r3, #0
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	461a      	mov	r2, r3
 80033c8:	79fb      	ldrb	r3, [r7, #7]
 80033ca:	429a      	cmp	r2, r3
 80033cc:	f43f af4a 	beq.w	8003264 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80033d0:	2300      	movs	r3, #0
}
 80033d2:	4618      	mov	r0, r3
 80033d4:	3770      	adds	r7, #112	; 0x70
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}
	...

080033dc <__NVIC_SetPriority>:
{
 80033dc:	b480      	push	{r7}
 80033de:	b083      	sub	sp, #12
 80033e0:	af00      	add	r7, sp, #0
 80033e2:	4603      	mov	r3, r0
 80033e4:	6039      	str	r1, [r7, #0]
 80033e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80033e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	db0a      	blt.n	8003406 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80033f0:	683b      	ldr	r3, [r7, #0]
 80033f2:	b2da      	uxtb	r2, r3
 80033f4:	490c      	ldr	r1, [pc, #48]	; (8003428 <__NVIC_SetPriority+0x4c>)
 80033f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033fa:	0112      	lsls	r2, r2, #4
 80033fc:	b2d2      	uxtb	r2, r2
 80033fe:	440b      	add	r3, r1
 8003400:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8003404:	e00a      	b.n	800341c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003406:	683b      	ldr	r3, [r7, #0]
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4908      	ldr	r1, [pc, #32]	; (800342c <__NVIC_SetPriority+0x50>)
 800340c:	79fb      	ldrb	r3, [r7, #7]
 800340e:	f003 030f 	and.w	r3, r3, #15
 8003412:	3b04      	subs	r3, #4
 8003414:	0112      	lsls	r2, r2, #4
 8003416:	b2d2      	uxtb	r2, r2
 8003418:	440b      	add	r3, r1
 800341a:	761a      	strb	r2, [r3, #24]
}
 800341c:	bf00      	nop
 800341e:	370c      	adds	r7, #12
 8003420:	46bd      	mov	sp, r7
 8003422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003426:	4770      	bx	lr
 8003428:	e000e100 	.word	0xe000e100
 800342c:	e000ed00 	.word	0xe000ed00

08003430 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003430:	b580      	push	{r7, lr}
 8003432:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8003434:	4b05      	ldr	r3, [pc, #20]	; (800344c <SysTick_Handler+0x1c>)
 8003436:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003438:	f001 fdd6 	bl	8004fe8 <xTaskGetSchedulerState>
 800343c:	4603      	mov	r3, r0
 800343e:	2b01      	cmp	r3, #1
 8003440:	d001      	beq.n	8003446 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8003442:	f002 fbc1 	bl	8005bc8 <xPortSysTickHandler>
  }
}
 8003446:	bf00      	nop
 8003448:	bd80      	pop	{r7, pc}
 800344a:	bf00      	nop
 800344c:	e000e010 	.word	0xe000e010

08003450 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003450:	b580      	push	{r7, lr}
 8003452:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8003454:	2100      	movs	r1, #0
 8003456:	f06f 0004 	mvn.w	r0, #4
 800345a:	f7ff ffbf 	bl	80033dc <__NVIC_SetPriority>
#endif
}
 800345e:	bf00      	nop
 8003460:	bd80      	pop	{r7, pc}
	...

08003464 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8003464:	b480      	push	{r7}
 8003466:	b083      	sub	sp, #12
 8003468:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800346a:	f3ef 8305 	mrs	r3, IPSR
 800346e:	603b      	str	r3, [r7, #0]
  return(result);
 8003470:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003472:	2b00      	cmp	r3, #0
 8003474:	d003      	beq.n	800347e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8003476:	f06f 0305 	mvn.w	r3, #5
 800347a:	607b      	str	r3, [r7, #4]
 800347c:	e00c      	b.n	8003498 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800347e:	4b0a      	ldr	r3, [pc, #40]	; (80034a8 <osKernelInitialize+0x44>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	2b00      	cmp	r3, #0
 8003484:	d105      	bne.n	8003492 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8003486:	4b08      	ldr	r3, [pc, #32]	; (80034a8 <osKernelInitialize+0x44>)
 8003488:	2201      	movs	r2, #1
 800348a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800348c:	2300      	movs	r3, #0
 800348e:	607b      	str	r3, [r7, #4]
 8003490:	e002      	b.n	8003498 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8003492:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003496:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003498:	687b      	ldr	r3, [r7, #4]
}
 800349a:	4618      	mov	r0, r3
 800349c:	370c      	adds	r7, #12
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	2000042c 	.word	0x2000042c

080034ac <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b082      	sub	sp, #8
 80034b0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80034b2:	f3ef 8305 	mrs	r3, IPSR
 80034b6:	603b      	str	r3, [r7, #0]
  return(result);
 80034b8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d003      	beq.n	80034c6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80034be:	f06f 0305 	mvn.w	r3, #5
 80034c2:	607b      	str	r3, [r7, #4]
 80034c4:	e010      	b.n	80034e8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80034c6:	4b0b      	ldr	r3, [pc, #44]	; (80034f4 <osKernelStart+0x48>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2b01      	cmp	r3, #1
 80034cc:	d109      	bne.n	80034e2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80034ce:	f7ff ffbf 	bl	8003450 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80034d2:	4b08      	ldr	r3, [pc, #32]	; (80034f4 <osKernelStart+0x48>)
 80034d4:	2202      	movs	r2, #2
 80034d6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80034d8:	f001 f8be 	bl	8004658 <vTaskStartScheduler>
      stat = osOK;
 80034dc:	2300      	movs	r3, #0
 80034de:	607b      	str	r3, [r7, #4]
 80034e0:	e002      	b.n	80034e8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80034e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80034e6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80034e8:	687b      	ldr	r3, [r7, #4]
}
 80034ea:	4618      	mov	r0, r3
 80034ec:	3708      	adds	r7, #8
 80034ee:	46bd      	mov	sp, r7
 80034f0:	bd80      	pop	{r7, pc}
 80034f2:	bf00      	nop
 80034f4:	2000042c 	.word	0x2000042c

080034f8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b08e      	sub	sp, #56	; 0x38
 80034fc:	af04      	add	r7, sp, #16
 80034fe:	60f8      	str	r0, [r7, #12]
 8003500:	60b9      	str	r1, [r7, #8]
 8003502:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8003504:	2300      	movs	r3, #0
 8003506:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003508:	f3ef 8305 	mrs	r3, IPSR
 800350c:	617b      	str	r3, [r7, #20]
  return(result);
 800350e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8003510:	2b00      	cmp	r3, #0
 8003512:	d17e      	bne.n	8003612 <osThreadNew+0x11a>
 8003514:	68fb      	ldr	r3, [r7, #12]
 8003516:	2b00      	cmp	r3, #0
 8003518:	d07b      	beq.n	8003612 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800351a:	2380      	movs	r3, #128	; 0x80
 800351c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800351e:	2318      	movs	r3, #24
 8003520:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003522:	2300      	movs	r3, #0
 8003524:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003526:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800352a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2b00      	cmp	r3, #0
 8003530:	d045      	beq.n	80035be <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d002      	beq.n	8003540 <osThreadNew+0x48>
        name = attr->name;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	699b      	ldr	r3, [r3, #24]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d002      	beq.n	800354e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	699b      	ldr	r3, [r3, #24]
 800354c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800354e:	69fb      	ldr	r3, [r7, #28]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d008      	beq.n	8003566 <osThreadNew+0x6e>
 8003554:	69fb      	ldr	r3, [r7, #28]
 8003556:	2b38      	cmp	r3, #56	; 0x38
 8003558:	d805      	bhi.n	8003566 <osThreadNew+0x6e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	f003 0301 	and.w	r3, r3, #1
 8003562:	2b00      	cmp	r3, #0
 8003564:	d001      	beq.n	800356a <osThreadNew+0x72>
        return (NULL);
 8003566:	2300      	movs	r3, #0
 8003568:	e054      	b.n	8003614 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	695b      	ldr	r3, [r3, #20]
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	089b      	lsrs	r3, r3, #2
 8003578:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	2b00      	cmp	r3, #0
 8003580:	d00e      	beq.n	80035a0 <osThreadNew+0xa8>
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	68db      	ldr	r3, [r3, #12]
 8003586:	2bbb      	cmp	r3, #187	; 0xbb
 8003588:	d90a      	bls.n	80035a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800358e:	2b00      	cmp	r3, #0
 8003590:	d006      	beq.n	80035a0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	2b00      	cmp	r3, #0
 8003598:	d002      	beq.n	80035a0 <osThreadNew+0xa8>
        mem = 1;
 800359a:	2301      	movs	r3, #1
 800359c:	61bb      	str	r3, [r7, #24]
 800359e:	e010      	b.n	80035c2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	689b      	ldr	r3, [r3, #8]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d10c      	bne.n	80035c2 <osThreadNew+0xca>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d108      	bne.n	80035c2 <osThreadNew+0xca>
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	691b      	ldr	r3, [r3, #16]
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d104      	bne.n	80035c2 <osThreadNew+0xca>
          mem = 0;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
 80035bc:	e001      	b.n	80035c2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80035be:	2300      	movs	r3, #0
 80035c0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80035c2:	69bb      	ldr	r3, [r7, #24]
 80035c4:	2b01      	cmp	r3, #1
 80035c6:	d110      	bne.n	80035ea <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80035cc:	687a      	ldr	r2, [r7, #4]
 80035ce:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80035d0:	9202      	str	r2, [sp, #8]
 80035d2:	9301      	str	r3, [sp, #4]
 80035d4:	69fb      	ldr	r3, [r7, #28]
 80035d6:	9300      	str	r3, [sp, #0]
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	6a3a      	ldr	r2, [r7, #32]
 80035dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80035de:	68f8      	ldr	r0, [r7, #12]
 80035e0:	f000 fe4e 	bl	8004280 <xTaskCreateStatic>
 80035e4:	4603      	mov	r3, r0
 80035e6:	613b      	str	r3, [r7, #16]
 80035e8:	e013      	b.n	8003612 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d110      	bne.n	8003612 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80035f0:	6a3b      	ldr	r3, [r7, #32]
 80035f2:	b29a      	uxth	r2, r3
 80035f4:	f107 0310 	add.w	r3, r7, #16
 80035f8:	9301      	str	r3, [sp, #4]
 80035fa:	69fb      	ldr	r3, [r7, #28]
 80035fc:	9300      	str	r3, [sp, #0]
 80035fe:	68bb      	ldr	r3, [r7, #8]
 8003600:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003602:	68f8      	ldr	r0, [r7, #12]
 8003604:	f000 fe99 	bl	800433a <xTaskCreate>
 8003608:	4603      	mov	r3, r0
 800360a:	2b01      	cmp	r3, #1
 800360c:	d001      	beq.n	8003612 <osThreadNew+0x11a>
            hTask = NULL;
 800360e:	2300      	movs	r3, #0
 8003610:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003612:	693b      	ldr	r3, [r7, #16]
}
 8003614:	4618      	mov	r0, r3
 8003616:	3728      	adds	r7, #40	; 0x28
 8003618:	46bd      	mov	sp, r7
 800361a:	bd80      	pop	{r7, pc}

0800361c <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 800361c:	b580      	push	{r7, lr}
 800361e:	b086      	sub	sp, #24
 8003620:	af00      	add	r7, sp, #0
 8003622:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003628:	f3ef 8305 	mrs	r3, IPSR
 800362c:	60fb      	str	r3, [r7, #12]
  return(result);
 800362e:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 8003630:	2b00      	cmp	r3, #0
 8003632:	d102      	bne.n	800363a <osThreadGetName+0x1e>
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	2b00      	cmp	r3, #0
 8003638:	d102      	bne.n	8003640 <osThreadGetName+0x24>
    name = NULL;
 800363a:	2300      	movs	r3, #0
 800363c:	617b      	str	r3, [r7, #20]
 800363e:	e003      	b.n	8003648 <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 8003640:	6938      	ldr	r0, [r7, #16]
 8003642:	f001 f935 	bl	80048b0 <pcTaskGetName>
 8003646:	6178      	str	r0, [r7, #20]
  }

  return (name);
 8003648:	697b      	ldr	r3, [r7, #20]
}
 800364a:	4618      	mov	r0, r3
 800364c:	3718      	adds	r7, #24
 800364e:	46bd      	mov	sp, r7
 8003650:	bd80      	pop	{r7, pc}

08003652 <osThreadGetId>:

osThreadId_t osThreadGetId (void) {
 8003652:	b580      	push	{r7, lr}
 8003654:	b082      	sub	sp, #8
 8003656:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8003658:	f001 fcb6 	bl	8004fc8 <xTaskGetCurrentTaskHandle>
 800365c:	6078      	str	r0, [r7, #4]

  return (id);
 800365e:	687b      	ldr	r3, [r7, #4]
}
 8003660:	4618      	mov	r0, r3
 8003662:	3708      	adds	r7, #8
 8003664:	46bd      	mov	sp, r7
 8003666:	bd80      	pop	{r7, pc}

08003668 <osThreadGetStackSpace>:
  }

  return (state);
}

uint32_t osThreadGetStackSpace (osThreadId_t thread_id) {
 8003668:	b580      	push	{r7, lr}
 800366a:	b086      	sub	sp, #24
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003674:	f3ef 8305 	mrs	r3, IPSR
 8003678:	60fb      	str	r3, [r7, #12]
  return(result);
 800367a:	68fb      	ldr	r3, [r7, #12]
  uint32_t sz;

  if (IS_IRQ() || (hTask == NULL)) {
 800367c:	2b00      	cmp	r3, #0
 800367e:	d102      	bne.n	8003686 <osThreadGetStackSpace+0x1e>
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	2b00      	cmp	r3, #0
 8003684:	d102      	bne.n	800368c <osThreadGetStackSpace+0x24>
    sz = 0U;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e005      	b.n	8003698 <osThreadGetStackSpace+0x30>
  } else {
    sz = (uint32_t)(uxTaskGetStackHighWaterMark(hTask) * sizeof(StackType_t));
 800368c:	6938      	ldr	r0, [r7, #16]
 800368e:	f001 fc2b 	bl	8004ee8 <uxTaskGetStackHighWaterMark>
 8003692:	4603      	mov	r3, r0
 8003694:	009b      	lsls	r3, r3, #2
 8003696:	617b      	str	r3, [r7, #20]
  }

  return (sz);
 8003698:	697b      	ldr	r3, [r7, #20]
}
 800369a:	4618      	mov	r0, r3
 800369c:	3718      	adds	r7, #24
 800369e:	46bd      	mov	sp, r7
 80036a0:	bd80      	pop	{r7, pc}

080036a2 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80036a2:	b580      	push	{r7, lr}
 80036a4:	b084      	sub	sp, #16
 80036a6:	af00      	add	r7, sp, #0
 80036a8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80036aa:	f3ef 8305 	mrs	r3, IPSR
 80036ae:	60bb      	str	r3, [r7, #8]
  return(result);
 80036b0:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <osDelay+0x1c>
    stat = osErrorISR;
 80036b6:	f06f 0305 	mvn.w	r3, #5
 80036ba:	60fb      	str	r3, [r7, #12]
 80036bc:	e007      	b.n	80036ce <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80036be:	2300      	movs	r3, #0
 80036c0:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d002      	beq.n	80036ce <osDelay+0x2c>
      vTaskDelay(ticks);
 80036c8:	6878      	ldr	r0, [r7, #4]
 80036ca:	f000 ff91 	bl	80045f0 <vTaskDelay>
    }
  }

  return (stat);
 80036ce:	68fb      	ldr	r3, [r7, #12]
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3710      	adds	r7, #16
 80036d4:	46bd      	mov	sp, r7
 80036d6:	bd80      	pop	{r7, pc}

080036d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80036d8:	b480      	push	{r7}
 80036da:	b085      	sub	sp, #20
 80036dc:	af00      	add	r7, sp, #0
 80036de:	60f8      	str	r0, [r7, #12]
 80036e0:	60b9      	str	r1, [r7, #8]
 80036e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	4a07      	ldr	r2, [pc, #28]	; (8003704 <vApplicationGetIdleTaskMemory+0x2c>)
 80036e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80036ea:	68bb      	ldr	r3, [r7, #8]
 80036ec:	4a06      	ldr	r2, [pc, #24]	; (8003708 <vApplicationGetIdleTaskMemory+0x30>)
 80036ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2280      	movs	r2, #128	; 0x80
 80036f4:	601a      	str	r2, [r3, #0]
}
 80036f6:	bf00      	nop
 80036f8:	3714      	adds	r7, #20
 80036fa:	46bd      	mov	sp, r7
 80036fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003700:	4770      	bx	lr
 8003702:	bf00      	nop
 8003704:	20000430 	.word	0x20000430
 8003708:	200004ec 	.word	0x200004ec

0800370c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800370c:	b480      	push	{r7}
 800370e:	b085      	sub	sp, #20
 8003710:	af00      	add	r7, sp, #0
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	60b9      	str	r1, [r7, #8]
 8003716:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	4a07      	ldr	r2, [pc, #28]	; (8003738 <vApplicationGetTimerTaskMemory+0x2c>)
 800371c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800371e:	68bb      	ldr	r3, [r7, #8]
 8003720:	4a06      	ldr	r2, [pc, #24]	; (800373c <vApplicationGetTimerTaskMemory+0x30>)
 8003722:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	f44f 7280 	mov.w	r2, #256	; 0x100
 800372a:	601a      	str	r2, [r3, #0]
}
 800372c:	bf00      	nop
 800372e:	3714      	adds	r7, #20
 8003730:	46bd      	mov	sp, r7
 8003732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003736:	4770      	bx	lr
 8003738:	200006ec 	.word	0x200006ec
 800373c:	200007a8 	.word	0x200007a8

08003740 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003740:	b480      	push	{r7}
 8003742:	b083      	sub	sp, #12
 8003744:	af00      	add	r7, sp, #0
 8003746:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	f103 0208 	add.w	r2, r3, #8
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003758:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	f103 0208 	add.w	r2, r3, #8
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	f103 0208 	add.w	r2, r3, #8
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	2200      	movs	r2, #0
 8003772:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr

08003780 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003780:	b480      	push	{r7}
 8003782:	b083      	sub	sp, #12
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2200      	movs	r2, #0
 800378c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800378e:	bf00      	nop
 8003790:	370c      	adds	r7, #12
 8003792:	46bd      	mov	sp, r7
 8003794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003798:	4770      	bx	lr

0800379a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800379a:	b480      	push	{r7}
 800379c:	b085      	sub	sp, #20
 800379e:	af00      	add	r7, sp, #0
 80037a0:	6078      	str	r0, [r7, #4]
 80037a2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80037aa:	683b      	ldr	r3, [r7, #0]
 80037ac:	68fa      	ldr	r2, [r7, #12]
 80037ae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	689a      	ldr	r2, [r3, #8]
 80037b4:	683b      	ldr	r3, [r7, #0]
 80037b6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	689b      	ldr	r3, [r3, #8]
 80037bc:	683a      	ldr	r2, [r7, #0]
 80037be:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80037c0:	68fb      	ldr	r3, [r7, #12]
 80037c2:	683a      	ldr	r2, [r7, #0]
 80037c4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	687a      	ldr	r2, [r7, #4]
 80037ca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	1c5a      	adds	r2, r3, #1
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	601a      	str	r2, [r3, #0]
}
 80037d6:	bf00      	nop
 80037d8:	3714      	adds	r7, #20
 80037da:	46bd      	mov	sp, r7
 80037dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e0:	4770      	bx	lr

080037e2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80037e2:	b480      	push	{r7}
 80037e4:	b085      	sub	sp, #20
 80037e6:	af00      	add	r7, sp, #0
 80037e8:	6078      	str	r0, [r7, #4]
 80037ea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80037f8:	d103      	bne.n	8003802 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	691b      	ldr	r3, [r3, #16]
 80037fe:	60fb      	str	r3, [r7, #12]
 8003800:	e00c      	b.n	800381c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	3308      	adds	r3, #8
 8003806:	60fb      	str	r3, [r7, #12]
 8003808:	e002      	b.n	8003810 <vListInsert+0x2e>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	685b      	ldr	r3, [r3, #4]
 800380e:	60fb      	str	r3, [r7, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	429a      	cmp	r2, r3
 800381a:	d2f6      	bcs.n	800380a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	685a      	ldr	r2, [r3, #4]
 8003820:	683b      	ldr	r3, [r7, #0]
 8003822:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	683a      	ldr	r2, [r7, #0]
 800382a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	68fa      	ldr	r2, [r7, #12]
 8003830:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003838:	683b      	ldr	r3, [r7, #0]
 800383a:	687a      	ldr	r2, [r7, #4]
 800383c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	1c5a      	adds	r2, r3, #1
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	601a      	str	r2, [r3, #0]
}
 8003848:	bf00      	nop
 800384a:	3714      	adds	r7, #20
 800384c:	46bd      	mov	sp, r7
 800384e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003852:	4770      	bx	lr

08003854 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003854:	b480      	push	{r7}
 8003856:	b085      	sub	sp, #20
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	691b      	ldr	r3, [r3, #16]
 8003860:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	687a      	ldr	r2, [r7, #4]
 8003868:	6892      	ldr	r2, [r2, #8]
 800386a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	689b      	ldr	r3, [r3, #8]
 8003870:	687a      	ldr	r2, [r7, #4]
 8003872:	6852      	ldr	r2, [r2, #4]
 8003874:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	687a      	ldr	r2, [r7, #4]
 800387c:	429a      	cmp	r2, r3
 800387e:	d103      	bne.n	8003888 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	689a      	ldr	r2, [r3, #8]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2200      	movs	r2, #0
 800388c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	1e5a      	subs	r2, r3, #1
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
}
 800389c:	4618      	mov	r0, r3
 800389e:	3714      	adds	r7, #20
 80038a0:	46bd      	mov	sp, r7
 80038a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a6:	4770      	bx	lr

080038a8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d10a      	bne.n	80038d2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80038bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038c0:	f383 8811 	msr	BASEPRI, r3
 80038c4:	f3bf 8f6f 	isb	sy
 80038c8:	f3bf 8f4f 	dsb	sy
 80038cc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80038ce:	bf00      	nop
 80038d0:	e7fe      	b.n	80038d0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80038d2:	f002 f8e7 	bl	8005aa4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038de:	68f9      	ldr	r1, [r7, #12]
 80038e0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 80038e2:	fb01 f303 	mul.w	r3, r1, r3
 80038e6:	441a      	add	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2200      	movs	r2, #0
 80038f0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	681a      	ldr	r2, [r3, #0]
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003902:	3b01      	subs	r3, #1
 8003904:	68f9      	ldr	r1, [r7, #12]
 8003906:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003908:	fb01 f303 	mul.w	r3, r1, r3
 800390c:	441a      	add	r2, r3
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	22ff      	movs	r2, #255	; 0xff
 8003916:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	22ff      	movs	r2, #255	; 0xff
 800391e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d114      	bne.n	8003952 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	691b      	ldr	r3, [r3, #16]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d01a      	beq.n	8003966 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	3310      	adds	r3, #16
 8003934:	4618      	mov	r0, r3
 8003936:	f001 f94d 	bl	8004bd4 <xTaskRemoveFromEventList>
 800393a:	4603      	mov	r3, r0
 800393c:	2b00      	cmp	r3, #0
 800393e:	d012      	beq.n	8003966 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003940:	4b0c      	ldr	r3, [pc, #48]	; (8003974 <xQueueGenericReset+0xcc>)
 8003942:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003946:	601a      	str	r2, [r3, #0]
 8003948:	f3bf 8f4f 	dsb	sy
 800394c:	f3bf 8f6f 	isb	sy
 8003950:	e009      	b.n	8003966 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	3310      	adds	r3, #16
 8003956:	4618      	mov	r0, r3
 8003958:	f7ff fef2 	bl	8003740 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	3324      	adds	r3, #36	; 0x24
 8003960:	4618      	mov	r0, r3
 8003962:	f7ff feed 	bl	8003740 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003966:	f002 f8cd 	bl	8005b04 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800396a:	2301      	movs	r3, #1
}
 800396c:	4618      	mov	r0, r3
 800396e:	3710      	adds	r7, #16
 8003970:	46bd      	mov	sp, r7
 8003972:	bd80      	pop	{r7, pc}
 8003974:	e000ed04 	.word	0xe000ed04

08003978 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003978:	b580      	push	{r7, lr}
 800397a:	b08e      	sub	sp, #56	; 0x38
 800397c:	af02      	add	r7, sp, #8
 800397e:	60f8      	str	r0, [r7, #12]
 8003980:	60b9      	str	r1, [r7, #8]
 8003982:	607a      	str	r2, [r7, #4]
 8003984:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2b00      	cmp	r3, #0
 800398a:	d10a      	bne.n	80039a2 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800398c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003990:	f383 8811 	msr	BASEPRI, r3
 8003994:	f3bf 8f6f 	isb	sy
 8003998:	f3bf 8f4f 	dsb	sy
 800399c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800399e:	bf00      	nop
 80039a0:	e7fe      	b.n	80039a0 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d10a      	bne.n	80039be <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80039a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039ac:	f383 8811 	msr	BASEPRI, r3
 80039b0:	f3bf 8f6f 	isb	sy
 80039b4:	f3bf 8f4f 	dsb	sy
 80039b8:	627b      	str	r3, [r7, #36]	; 0x24
}
 80039ba:	bf00      	nop
 80039bc:	e7fe      	b.n	80039bc <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d002      	beq.n	80039ca <xQueueGenericCreateStatic+0x52>
 80039c4:	68bb      	ldr	r3, [r7, #8]
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <xQueueGenericCreateStatic+0x56>
 80039ca:	2301      	movs	r3, #1
 80039cc:	e000      	b.n	80039d0 <xQueueGenericCreateStatic+0x58>
 80039ce:	2300      	movs	r3, #0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d10a      	bne.n	80039ea <xQueueGenericCreateStatic+0x72>
	__asm volatile
 80039d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80039d8:	f383 8811 	msr	BASEPRI, r3
 80039dc:	f3bf 8f6f 	isb	sy
 80039e0:	f3bf 8f4f 	dsb	sy
 80039e4:	623b      	str	r3, [r7, #32]
}
 80039e6:	bf00      	nop
 80039e8:	e7fe      	b.n	80039e8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d102      	bne.n	80039f6 <xQueueGenericCreateStatic+0x7e>
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d101      	bne.n	80039fa <xQueueGenericCreateStatic+0x82>
 80039f6:	2301      	movs	r3, #1
 80039f8:	e000      	b.n	80039fc <xQueueGenericCreateStatic+0x84>
 80039fa:	2300      	movs	r3, #0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d10a      	bne.n	8003a16 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003a00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a04:	f383 8811 	msr	BASEPRI, r3
 8003a08:	f3bf 8f6f 	isb	sy
 8003a0c:	f3bf 8f4f 	dsb	sy
 8003a10:	61fb      	str	r3, [r7, #28]
}
 8003a12:	bf00      	nop
 8003a14:	e7fe      	b.n	8003a14 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003a16:	2350      	movs	r3, #80	; 0x50
 8003a18:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	2b50      	cmp	r3, #80	; 0x50
 8003a1e:	d00a      	beq.n	8003a36 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003a20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a24:	f383 8811 	msr	BASEPRI, r3
 8003a28:	f3bf 8f6f 	isb	sy
 8003a2c:	f3bf 8f4f 	dsb	sy
 8003a30:	61bb      	str	r3, [r7, #24]
}
 8003a32:	bf00      	nop
 8003a34:	e7fe      	b.n	8003a34 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003a36:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d00d      	beq.n	8003a5e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003a42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a44:	2201      	movs	r2, #1
 8003a46:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003a4a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003a4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a50:	9300      	str	r3, [sp, #0]
 8003a52:	4613      	mov	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	68b9      	ldr	r1, [r7, #8]
 8003a58:	68f8      	ldr	r0, [r7, #12]
 8003a5a:	f000 f805 	bl	8003a68 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003a5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3730      	adds	r7, #48	; 0x30
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	60f8      	str	r0, [r7, #12]
 8003a70:	60b9      	str	r1, [r7, #8]
 8003a72:	607a      	str	r2, [r7, #4]
 8003a74:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003a76:	68bb      	ldr	r3, [r7, #8]
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d103      	bne.n	8003a84 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	69ba      	ldr	r2, [r7, #24]
 8003a80:	601a      	str	r2, [r3, #0]
 8003a82:	e002      	b.n	8003a8a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003a84:	69bb      	ldr	r3, [r7, #24]
 8003a86:	687a      	ldr	r2, [r7, #4]
 8003a88:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	68fa      	ldr	r2, [r7, #12]
 8003a8e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003a90:	69bb      	ldr	r3, [r7, #24]
 8003a92:	68ba      	ldr	r2, [r7, #8]
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003a96:	2101      	movs	r1, #1
 8003a98:	69b8      	ldr	r0, [r7, #24]
 8003a9a:	f7ff ff05 	bl	80038a8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	78fa      	ldrb	r2, [r7, #3]
 8003aa2:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003aa6:	bf00      	nop
 8003aa8:	3710      	adds	r7, #16
 8003aaa:	46bd      	mov	sp, r7
 8003aac:	bd80      	pop	{r7, pc}
	...

08003ab0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b08e      	sub	sp, #56	; 0x38
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	60f8      	str	r0, [r7, #12]
 8003ab8:	60b9      	str	r1, [r7, #8]
 8003aba:	607a      	str	r2, [r7, #4]
 8003abc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d10a      	bne.n	8003ae2 <xQueueGenericSend+0x32>
	__asm volatile
 8003acc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ad0:	f383 8811 	msr	BASEPRI, r3
 8003ad4:	f3bf 8f6f 	isb	sy
 8003ad8:	f3bf 8f4f 	dsb	sy
 8003adc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003ade:	bf00      	nop
 8003ae0:	e7fe      	b.n	8003ae0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003ae2:	68bb      	ldr	r3, [r7, #8]
 8003ae4:	2b00      	cmp	r3, #0
 8003ae6:	d103      	bne.n	8003af0 <xQueueGenericSend+0x40>
 8003ae8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d101      	bne.n	8003af4 <xQueueGenericSend+0x44>
 8003af0:	2301      	movs	r3, #1
 8003af2:	e000      	b.n	8003af6 <xQueueGenericSend+0x46>
 8003af4:	2300      	movs	r3, #0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d10a      	bne.n	8003b10 <xQueueGenericSend+0x60>
	__asm volatile
 8003afa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003afe:	f383 8811 	msr	BASEPRI, r3
 8003b02:	f3bf 8f6f 	isb	sy
 8003b06:	f3bf 8f4f 	dsb	sy
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003b0c:	bf00      	nop
 8003b0e:	e7fe      	b.n	8003b0e <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	2b02      	cmp	r3, #2
 8003b14:	d103      	bne.n	8003b1e <xQueueGenericSend+0x6e>
 8003b16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b1a:	2b01      	cmp	r3, #1
 8003b1c:	d101      	bne.n	8003b22 <xQueueGenericSend+0x72>
 8003b1e:	2301      	movs	r3, #1
 8003b20:	e000      	b.n	8003b24 <xQueueGenericSend+0x74>
 8003b22:	2300      	movs	r3, #0
 8003b24:	2b00      	cmp	r3, #0
 8003b26:	d10a      	bne.n	8003b3e <xQueueGenericSend+0x8e>
	__asm volatile
 8003b28:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b2c:	f383 8811 	msr	BASEPRI, r3
 8003b30:	f3bf 8f6f 	isb	sy
 8003b34:	f3bf 8f4f 	dsb	sy
 8003b38:	623b      	str	r3, [r7, #32]
}
 8003b3a:	bf00      	nop
 8003b3c:	e7fe      	b.n	8003b3c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003b3e:	f001 fa53 	bl	8004fe8 <xTaskGetSchedulerState>
 8003b42:	4603      	mov	r3, r0
 8003b44:	2b00      	cmp	r3, #0
 8003b46:	d102      	bne.n	8003b4e <xQueueGenericSend+0x9e>
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <xQueueGenericSend+0xa2>
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e000      	b.n	8003b54 <xQueueGenericSend+0xa4>
 8003b52:	2300      	movs	r3, #0
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d10a      	bne.n	8003b6e <xQueueGenericSend+0xbe>
	__asm volatile
 8003b58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b5c:	f383 8811 	msr	BASEPRI, r3
 8003b60:	f3bf 8f6f 	isb	sy
 8003b64:	f3bf 8f4f 	dsb	sy
 8003b68:	61fb      	str	r3, [r7, #28]
}
 8003b6a:	bf00      	nop
 8003b6c:	e7fe      	b.n	8003b6c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003b6e:	f001 ff99 	bl	8005aa4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003b72:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b74:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003b76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003b7a:	429a      	cmp	r2, r3
 8003b7c:	d302      	bcc.n	8003b84 <xQueueGenericSend+0xd4>
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	2b02      	cmp	r3, #2
 8003b82:	d129      	bne.n	8003bd8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003b84:	683a      	ldr	r2, [r7, #0]
 8003b86:	68b9      	ldr	r1, [r7, #8]
 8003b88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003b8a:	f000 fa0b 	bl	8003fa4 <prvCopyDataToQueue>
 8003b8e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d010      	beq.n	8003bba <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b9a:	3324      	adds	r3, #36	; 0x24
 8003b9c:	4618      	mov	r0, r3
 8003b9e:	f001 f819 	bl	8004bd4 <xTaskRemoveFromEventList>
 8003ba2:	4603      	mov	r3, r0
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d013      	beq.n	8003bd0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8003ba8:	4b3f      	ldr	r3, [pc, #252]	; (8003ca8 <xQueueGenericSend+0x1f8>)
 8003baa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bae:	601a      	str	r2, [r3, #0]
 8003bb0:	f3bf 8f4f 	dsb	sy
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	e00a      	b.n	8003bd0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8003bba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d007      	beq.n	8003bd0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003bc0:	4b39      	ldr	r3, [pc, #228]	; (8003ca8 <xQueueGenericSend+0x1f8>)
 8003bc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003bc6:	601a      	str	r2, [r3, #0]
 8003bc8:	f3bf 8f4f 	dsb	sy
 8003bcc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003bd0:	f001 ff98 	bl	8005b04 <vPortExitCritical>
				return pdPASS;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e063      	b.n	8003ca0 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d103      	bne.n	8003be6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003bde:	f001 ff91 	bl	8005b04 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003be2:	2300      	movs	r3, #0
 8003be4:	e05c      	b.n	8003ca0 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003be6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d106      	bne.n	8003bfa <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003bec:	f107 0314 	add.w	r3, r7, #20
 8003bf0:	4618      	mov	r0, r3
 8003bf2:	f001 f853 	bl	8004c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003bfa:	f001 ff83 	bl	8005b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003bfe:	f000 fd9b 	bl	8004738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c02:	f001 ff4f 	bl	8005aa4 <vPortEnterCritical>
 8003c06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c0c:	b25b      	sxtb	r3, r3
 8003c0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c12:	d103      	bne.n	8003c1c <xQueueGenericSend+0x16c>
 8003c14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c16:	2200      	movs	r2, #0
 8003c18:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003c1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c1e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003c22:	b25b      	sxtb	r3, r3
 8003c24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c28:	d103      	bne.n	8003c32 <xQueueGenericSend+0x182>
 8003c2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003c32:	f001 ff67 	bl	8005b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003c36:	1d3a      	adds	r2, r7, #4
 8003c38:	f107 0314 	add.w	r3, r7, #20
 8003c3c:	4611      	mov	r1, r2
 8003c3e:	4618      	mov	r0, r3
 8003c40:	f001 f842 	bl	8004cc8 <xTaskCheckForTimeOut>
 8003c44:	4603      	mov	r3, r0
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d124      	bne.n	8003c94 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8003c4a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c4c:	f000 faa2 	bl	8004194 <prvIsQueueFull>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d018      	beq.n	8003c88 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003c56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c58:	3310      	adds	r3, #16
 8003c5a:	687a      	ldr	r2, [r7, #4]
 8003c5c:	4611      	mov	r1, r2
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 ff68 	bl	8004b34 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003c64:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c66:	f000 fa2d 	bl	80040c4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003c6a:	f000 fd73 	bl	8004754 <xTaskResumeAll>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	f47f af7c 	bne.w	8003b6e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8003c76:	4b0c      	ldr	r3, [pc, #48]	; (8003ca8 <xQueueGenericSend+0x1f8>)
 8003c78:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c7c:	601a      	str	r2, [r3, #0]
 8003c7e:	f3bf 8f4f 	dsb	sy
 8003c82:	f3bf 8f6f 	isb	sy
 8003c86:	e772      	b.n	8003b6e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003c88:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c8a:	f000 fa1b 	bl	80040c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003c8e:	f000 fd61 	bl	8004754 <xTaskResumeAll>
 8003c92:	e76c      	b.n	8003b6e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003c94:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003c96:	f000 fa15 	bl	80040c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003c9a:	f000 fd5b 	bl	8004754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003c9e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3738      	adds	r7, #56	; 0x38
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	bd80      	pop	{r7, pc}
 8003ca8:	e000ed04 	.word	0xe000ed04

08003cac <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b090      	sub	sp, #64	; 0x40
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	60f8      	str	r0, [r7, #12]
 8003cb4:	60b9      	str	r1, [r7, #8]
 8003cb6:	607a      	str	r2, [r7, #4]
 8003cb8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d10a      	bne.n	8003cda <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8003cc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cc8:	f383 8811 	msr	BASEPRI, r3
 8003ccc:	f3bf 8f6f 	isb	sy
 8003cd0:	f3bf 8f4f 	dsb	sy
 8003cd4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003cd6:	bf00      	nop
 8003cd8:	e7fe      	b.n	8003cd8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003cda:	68bb      	ldr	r3, [r7, #8]
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d103      	bne.n	8003ce8 <xQueueGenericSendFromISR+0x3c>
 8003ce0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003ce2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d101      	bne.n	8003cec <xQueueGenericSendFromISR+0x40>
 8003ce8:	2301      	movs	r3, #1
 8003cea:	e000      	b.n	8003cee <xQueueGenericSendFromISR+0x42>
 8003cec:	2300      	movs	r3, #0
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d10a      	bne.n	8003d08 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8003cf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003cf6:	f383 8811 	msr	BASEPRI, r3
 8003cfa:	f3bf 8f6f 	isb	sy
 8003cfe:	f3bf 8f4f 	dsb	sy
 8003d02:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003d04:	bf00      	nop
 8003d06:	e7fe      	b.n	8003d06 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b02      	cmp	r3, #2
 8003d0c:	d103      	bne.n	8003d16 <xQueueGenericSendFromISR+0x6a>
 8003d0e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d10:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d101      	bne.n	8003d1a <xQueueGenericSendFromISR+0x6e>
 8003d16:	2301      	movs	r3, #1
 8003d18:	e000      	b.n	8003d1c <xQueueGenericSendFromISR+0x70>
 8003d1a:	2300      	movs	r3, #0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	623b      	str	r3, [r7, #32]
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003d36:	f001 ff97 	bl	8005c68 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003d3a:	f3ef 8211 	mrs	r2, BASEPRI
 8003d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d42:	f383 8811 	msr	BASEPRI, r3
 8003d46:	f3bf 8f6f 	isb	sy
 8003d4a:	f3bf 8f4f 	dsb	sy
 8003d4e:	61fa      	str	r2, [r7, #28]
 8003d50:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003d52:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003d54:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d58:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d5c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d5e:	429a      	cmp	r2, r3
 8003d60:	d302      	bcc.n	8003d68 <xQueueGenericSendFromISR+0xbc>
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b02      	cmp	r3, #2
 8003d66:	d12f      	bne.n	8003dc8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d6a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003d6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d76:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003d78:	683a      	ldr	r2, [r7, #0]
 8003d7a:	68b9      	ldr	r1, [r7, #8]
 8003d7c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8003d7e:	f000 f911 	bl	8003fa4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003d82:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8003d86:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d8a:	d112      	bne.n	8003db2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d016      	beq.n	8003dc2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003d94:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003d96:	3324      	adds	r3, #36	; 0x24
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f000 ff1b 	bl	8004bd4 <xTaskRemoveFromEventList>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d00e      	beq.n	8003dc2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d00b      	beq.n	8003dc2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	2201      	movs	r2, #1
 8003dae:	601a      	str	r2, [r3, #0]
 8003db0:	e007      	b.n	8003dc2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003db2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003db6:	3301      	adds	r3, #1
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	b25a      	sxtb	r2, r3
 8003dbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003dbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8003dc6:	e001      	b.n	8003dcc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003dc8:	2300      	movs	r3, #0
 8003dca:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003dcc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dce:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8003dd6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003dd8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3740      	adds	r7, #64	; 0x40
 8003dde:	46bd      	mov	sp, r7
 8003de0:	bd80      	pop	{r7, pc}
	...

08003de4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b08c      	sub	sp, #48	; 0x30
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8003df0:	2300      	movs	r3, #0
 8003df2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d10a      	bne.n	8003e14 <xQueueReceive+0x30>
	__asm volatile
 8003dfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e02:	f383 8811 	msr	BASEPRI, r3
 8003e06:	f3bf 8f6f 	isb	sy
 8003e0a:	f3bf 8f4f 	dsb	sy
 8003e0e:	623b      	str	r3, [r7, #32]
}
 8003e10:	bf00      	nop
 8003e12:	e7fe      	b.n	8003e12 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003e14:	68bb      	ldr	r3, [r7, #8]
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d103      	bne.n	8003e22 <xQueueReceive+0x3e>
 8003e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d101      	bne.n	8003e26 <xQueueReceive+0x42>
 8003e22:	2301      	movs	r3, #1
 8003e24:	e000      	b.n	8003e28 <xQueueReceive+0x44>
 8003e26:	2300      	movs	r3, #0
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d10a      	bne.n	8003e42 <xQueueReceive+0x5e>
	__asm volatile
 8003e2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e30:	f383 8811 	msr	BASEPRI, r3
 8003e34:	f3bf 8f6f 	isb	sy
 8003e38:	f3bf 8f4f 	dsb	sy
 8003e3c:	61fb      	str	r3, [r7, #28]
}
 8003e3e:	bf00      	nop
 8003e40:	e7fe      	b.n	8003e40 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003e42:	f001 f8d1 	bl	8004fe8 <xTaskGetSchedulerState>
 8003e46:	4603      	mov	r3, r0
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d102      	bne.n	8003e52 <xQueueReceive+0x6e>
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2b00      	cmp	r3, #0
 8003e50:	d101      	bne.n	8003e56 <xQueueReceive+0x72>
 8003e52:	2301      	movs	r3, #1
 8003e54:	e000      	b.n	8003e58 <xQueueReceive+0x74>
 8003e56:	2300      	movs	r3, #0
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d10a      	bne.n	8003e72 <xQueueReceive+0x8e>
	__asm volatile
 8003e5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e60:	f383 8811 	msr	BASEPRI, r3
 8003e64:	f3bf 8f6f 	isb	sy
 8003e68:	f3bf 8f4f 	dsb	sy
 8003e6c:	61bb      	str	r3, [r7, #24]
}
 8003e6e:	bf00      	nop
 8003e70:	e7fe      	b.n	8003e70 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003e72:	f001 fe17 	bl	8005aa4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003e76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d01f      	beq.n	8003ec2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e82:	68b9      	ldr	r1, [r7, #8]
 8003e84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003e86:	f000 f8f7 	bl	8004078 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e8c:	1e5a      	subs	r2, r3, #1
 8003e8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e90:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e94:	691b      	ldr	r3, [r3, #16]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d00f      	beq.n	8003eba <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e9c:	3310      	adds	r3, #16
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f000 fe98 	bl	8004bd4 <xTaskRemoveFromEventList>
 8003ea4:	4603      	mov	r3, r0
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d007      	beq.n	8003eba <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003eaa:	4b3d      	ldr	r3, [pc, #244]	; (8003fa0 <xQueueReceive+0x1bc>)
 8003eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003eb0:	601a      	str	r2, [r3, #0]
 8003eb2:	f3bf 8f4f 	dsb	sy
 8003eb6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003eba:	f001 fe23 	bl	8005b04 <vPortExitCritical>
				return pdPASS;
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	e069      	b.n	8003f96 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d103      	bne.n	8003ed0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003ec8:	f001 fe1c 	bl	8005b04 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003ecc:	2300      	movs	r3, #0
 8003ece:	e062      	b.n	8003f96 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003ed0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d106      	bne.n	8003ee4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003ed6:	f107 0310 	add.w	r3, r7, #16
 8003eda:	4618      	mov	r0, r3
 8003edc:	f000 fede 	bl	8004c9c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003ee4:	f001 fe0e 	bl	8005b04 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003ee8:	f000 fc26 	bl	8004738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003eec:	f001 fdda 	bl	8005aa4 <vPortEnterCritical>
 8003ef0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003ef2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003ef6:	b25b      	sxtb	r3, r3
 8003ef8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003efc:	d103      	bne.n	8003f06 <xQueueReceive+0x122>
 8003efe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003f06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f08:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003f0c:	b25b      	sxtb	r3, r3
 8003f0e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f12:	d103      	bne.n	8003f1c <xQueueReceive+0x138>
 8003f14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f16:	2200      	movs	r2, #0
 8003f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003f1c:	f001 fdf2 	bl	8005b04 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003f20:	1d3a      	adds	r2, r7, #4
 8003f22:	f107 0310 	add.w	r3, r7, #16
 8003f26:	4611      	mov	r1, r2
 8003f28:	4618      	mov	r0, r3
 8003f2a:	f000 fecd 	bl	8004cc8 <xTaskCheckForTimeOut>
 8003f2e:	4603      	mov	r3, r0
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d123      	bne.n	8003f7c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f34:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f36:	f000 f917 	bl	8004168 <prvIsQueueEmpty>
 8003f3a:	4603      	mov	r3, r0
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d017      	beq.n	8003f70 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003f40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f42:	3324      	adds	r3, #36	; 0x24
 8003f44:	687a      	ldr	r2, [r7, #4]
 8003f46:	4611      	mov	r1, r2
 8003f48:	4618      	mov	r0, r3
 8003f4a:	f000 fdf3 	bl	8004b34 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003f4e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f50:	f000 f8b8 	bl	80040c4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003f54:	f000 fbfe 	bl	8004754 <xTaskResumeAll>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d189      	bne.n	8003e72 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8003f5e:	4b10      	ldr	r3, [pc, #64]	; (8003fa0 <xQueueReceive+0x1bc>)
 8003f60:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003f64:	601a      	str	r2, [r3, #0]
 8003f66:	f3bf 8f4f 	dsb	sy
 8003f6a:	f3bf 8f6f 	isb	sy
 8003f6e:	e780      	b.n	8003e72 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8003f70:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f72:	f000 f8a7 	bl	80040c4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003f76:	f000 fbed 	bl	8004754 <xTaskResumeAll>
 8003f7a:	e77a      	b.n	8003e72 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8003f7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f7e:	f000 f8a1 	bl	80040c4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003f82:	f000 fbe7 	bl	8004754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003f86:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8003f88:	f000 f8ee 	bl	8004168 <prvIsQueueEmpty>
 8003f8c:	4603      	mov	r3, r0
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f43f af6f 	beq.w	8003e72 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003f94:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003f96:	4618      	mov	r0, r3
 8003f98:	3730      	adds	r7, #48	; 0x30
 8003f9a:	46bd      	mov	sp, r7
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	e000ed04 	.word	0xe000ed04

08003fa4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	60b9      	str	r1, [r7, #8]
 8003fae:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003fb8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d10d      	bne.n	8003fde <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d14d      	bne.n	8004066 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	689b      	ldr	r3, [r3, #8]
 8003fce:	4618      	mov	r0, r3
 8003fd0:	f001 f828 	bl	8005024 <xTaskPriorityDisinherit>
 8003fd4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	609a      	str	r2, [r3, #8]
 8003fdc:	e043      	b.n	8004066 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d119      	bne.n	8004018 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	6858      	ldr	r0, [r3, #4]
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fec:	461a      	mov	r2, r3
 8003fee:	68b9      	ldr	r1, [r7, #8]
 8003ff0:	f002 f987 	bl	8006302 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	685a      	ldr	r2, [r3, #4]
 8003ff8:	68fb      	ldr	r3, [r7, #12]
 8003ffa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffc:	441a      	add	r2, r3
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	685a      	ldr	r2, [r3, #4]
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	429a      	cmp	r2, r3
 800400c:	d32b      	bcc.n	8004066 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	605a      	str	r2, [r3, #4]
 8004016:	e026      	b.n	8004066 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	68d8      	ldr	r0, [r3, #12]
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004020:	461a      	mov	r2, r3
 8004022:	68b9      	ldr	r1, [r7, #8]
 8004024:	f002 f96d 	bl	8006302 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	68da      	ldr	r2, [r3, #12]
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004030:	425b      	negs	r3, r3
 8004032:	441a      	add	r2, r3
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	68da      	ldr	r2, [r3, #12]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	429a      	cmp	r2, r3
 8004042:	d207      	bcs.n	8004054 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	689a      	ldr	r2, [r3, #8]
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800404c:	425b      	negs	r3, r3
 800404e:	441a      	add	r2, r3
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d105      	bne.n	8004066 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	2b00      	cmp	r3, #0
 800405e:	d002      	beq.n	8004066 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004060:	693b      	ldr	r3, [r7, #16]
 8004062:	3b01      	subs	r3, #1
 8004064:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	1c5a      	adds	r2, r3, #1
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800406e:	697b      	ldr	r3, [r7, #20]
}
 8004070:	4618      	mov	r0, r3
 8004072:	3718      	adds	r7, #24
 8004074:	46bd      	mov	sp, r7
 8004076:	bd80      	pop	{r7, pc}

08004078 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004078:	b580      	push	{r7, lr}
 800407a:	b082      	sub	sp, #8
 800407c:	af00      	add	r7, sp, #0
 800407e:	6078      	str	r0, [r7, #4]
 8004080:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004086:	2b00      	cmp	r3, #0
 8004088:	d018      	beq.n	80040bc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	68da      	ldr	r2, [r3, #12]
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004092:	441a      	add	r2, r3
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	68da      	ldr	r2, [r3, #12]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	689b      	ldr	r3, [r3, #8]
 80040a0:	429a      	cmp	r2, r3
 80040a2:	d303      	bcc.n	80040ac <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681a      	ldr	r2, [r3, #0]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	68d9      	ldr	r1, [r3, #12]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b4:	461a      	mov	r2, r3
 80040b6:	6838      	ldr	r0, [r7, #0]
 80040b8:	f002 f923 	bl	8006302 <memcpy>
	}
}
 80040bc:	bf00      	nop
 80040be:	3708      	adds	r7, #8
 80040c0:	46bd      	mov	sp, r7
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b084      	sub	sp, #16
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80040cc:	f001 fcea 	bl	8005aa4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80040d6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040d8:	e011      	b.n	80040fe <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d012      	beq.n	8004108 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	3324      	adds	r3, #36	; 0x24
 80040e6:	4618      	mov	r0, r3
 80040e8:	f000 fd74 	bl	8004bd4 <xTaskRemoveFromEventList>
 80040ec:	4603      	mov	r3, r0
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d001      	beq.n	80040f6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80040f2:	f000 fe4b 	bl	8004d8c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80040f6:	7bfb      	ldrb	r3, [r7, #15]
 80040f8:	3b01      	subs	r3, #1
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80040fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004102:	2b00      	cmp	r3, #0
 8004104:	dce9      	bgt.n	80040da <prvUnlockQueue+0x16>
 8004106:	e000      	b.n	800410a <prvUnlockQueue+0x46>
					break;
 8004108:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	22ff      	movs	r2, #255	; 0xff
 800410e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004112:	f001 fcf7 	bl	8005b04 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004116:	f001 fcc5 	bl	8005aa4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004120:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004122:	e011      	b.n	8004148 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	2b00      	cmp	r3, #0
 800412a:	d012      	beq.n	8004152 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	3310      	adds	r3, #16
 8004130:	4618      	mov	r0, r3
 8004132:	f000 fd4f 	bl	8004bd4 <xTaskRemoveFromEventList>
 8004136:	4603      	mov	r3, r0
 8004138:	2b00      	cmp	r3, #0
 800413a:	d001      	beq.n	8004140 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800413c:	f000 fe26 	bl	8004d8c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004140:	7bbb      	ldrb	r3, [r7, #14]
 8004142:	3b01      	subs	r3, #1
 8004144:	b2db      	uxtb	r3, r3
 8004146:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004148:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800414c:	2b00      	cmp	r3, #0
 800414e:	dce9      	bgt.n	8004124 <prvUnlockQueue+0x60>
 8004150:	e000      	b.n	8004154 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004152:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	22ff      	movs	r2, #255	; 0xff
 8004158:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800415c:	f001 fcd2 	bl	8005b04 <vPortExitCritical>
}
 8004160:	bf00      	nop
 8004162:	3710      	adds	r7, #16
 8004164:	46bd      	mov	sp, r7
 8004166:	bd80      	pop	{r7, pc}

08004168 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b084      	sub	sp, #16
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004170:	f001 fc98 	bl	8005aa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800417c:	2301      	movs	r3, #1
 800417e:	60fb      	str	r3, [r7, #12]
 8004180:	e001      	b.n	8004186 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004182:	2300      	movs	r3, #0
 8004184:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004186:	f001 fcbd 	bl	8005b04 <vPortExitCritical>

	return xReturn;
 800418a:	68fb      	ldr	r3, [r7, #12]
}
 800418c:	4618      	mov	r0, r3
 800418e:	3710      	adds	r7, #16
 8004190:	46bd      	mov	sp, r7
 8004192:	bd80      	pop	{r7, pc}

08004194 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004194:	b580      	push	{r7, lr}
 8004196:	b084      	sub	sp, #16
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800419c:	f001 fc82 	bl	8005aa4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041a8:	429a      	cmp	r2, r3
 80041aa:	d102      	bne.n	80041b2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80041ac:	2301      	movs	r3, #1
 80041ae:	60fb      	str	r3, [r7, #12]
 80041b0:	e001      	b.n	80041b6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80041b2:	2300      	movs	r3, #0
 80041b4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80041b6:	f001 fca5 	bl	8005b04 <vPortExitCritical>

	return xReturn;
 80041ba:	68fb      	ldr	r3, [r7, #12]
}
 80041bc:	4618      	mov	r0, r3
 80041be:	3710      	adds	r7, #16
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bd80      	pop	{r7, pc}

080041c4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80041c4:	b480      	push	{r7}
 80041c6:	b085      	sub	sp, #20
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041ce:	2300      	movs	r3, #0
 80041d0:	60fb      	str	r3, [r7, #12]
 80041d2:	e014      	b.n	80041fe <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80041d4:	4a0f      	ldr	r2, [pc, #60]	; (8004214 <vQueueAddToRegistry+0x50>)
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d10b      	bne.n	80041f8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80041e0:	490c      	ldr	r1, [pc, #48]	; (8004214 <vQueueAddToRegistry+0x50>)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80041ea:	4a0a      	ldr	r2, [pc, #40]	; (8004214 <vQueueAddToRegistry+0x50>)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	00db      	lsls	r3, r3, #3
 80041f0:	4413      	add	r3, r2
 80041f2:	687a      	ldr	r2, [r7, #4]
 80041f4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80041f6:	e006      	b.n	8004206 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	3301      	adds	r3, #1
 80041fc:	60fb      	str	r3, [r7, #12]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2b07      	cmp	r3, #7
 8004202:	d9e7      	bls.n	80041d4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004204:	bf00      	nop
 8004206:	bf00      	nop
 8004208:	3714      	adds	r7, #20
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr
 8004212:	bf00      	nop
 8004214:	20000ba8 	.word	0x20000ba8

08004218 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004218:	b580      	push	{r7, lr}
 800421a:	b086      	sub	sp, #24
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004228:	f001 fc3c 	bl	8005aa4 <vPortEnterCritical>
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004232:	b25b      	sxtb	r3, r3
 8004234:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004238:	d103      	bne.n	8004242 <vQueueWaitForMessageRestricted+0x2a>
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004242:	697b      	ldr	r3, [r7, #20]
 8004244:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004248:	b25b      	sxtb	r3, r3
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800424e:	d103      	bne.n	8004258 <vQueueWaitForMessageRestricted+0x40>
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	2200      	movs	r2, #0
 8004254:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004258:	f001 fc54 	bl	8005b04 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004260:	2b00      	cmp	r3, #0
 8004262:	d106      	bne.n	8004272 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004264:	697b      	ldr	r3, [r7, #20]
 8004266:	3324      	adds	r3, #36	; 0x24
 8004268:	687a      	ldr	r2, [r7, #4]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fc85 	bl	8004b7c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004272:	6978      	ldr	r0, [r7, #20]
 8004274:	f7ff ff26 	bl	80040c4 <prvUnlockQueue>
	}
 8004278:	bf00      	nop
 800427a:	3718      	adds	r7, #24
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}

08004280 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8004280:	b580      	push	{r7, lr}
 8004282:	b08e      	sub	sp, #56	; 0x38
 8004284:	af04      	add	r7, sp, #16
 8004286:	60f8      	str	r0, [r7, #12]
 8004288:	60b9      	str	r1, [r7, #8]
 800428a:	607a      	str	r2, [r7, #4]
 800428c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800428e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004290:	2b00      	cmp	r3, #0
 8004292:	d10a      	bne.n	80042aa <xTaskCreateStatic+0x2a>
	__asm volatile
 8004294:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004298:	f383 8811 	msr	BASEPRI, r3
 800429c:	f3bf 8f6f 	isb	sy
 80042a0:	f3bf 8f4f 	dsb	sy
 80042a4:	623b      	str	r3, [r7, #32]
}
 80042a6:	bf00      	nop
 80042a8:	e7fe      	b.n	80042a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80042aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d10a      	bne.n	80042c6 <xTaskCreateStatic+0x46>
	__asm volatile
 80042b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042b4:	f383 8811 	msr	BASEPRI, r3
 80042b8:	f3bf 8f6f 	isb	sy
 80042bc:	f3bf 8f4f 	dsb	sy
 80042c0:	61fb      	str	r3, [r7, #28]
}
 80042c2:	bf00      	nop
 80042c4:	e7fe      	b.n	80042c4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80042c6:	23bc      	movs	r3, #188	; 0xbc
 80042c8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80042ca:	693b      	ldr	r3, [r7, #16]
 80042cc:	2bbc      	cmp	r3, #188	; 0xbc
 80042ce:	d00a      	beq.n	80042e6 <xTaskCreateStatic+0x66>
	__asm volatile
 80042d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042d4:	f383 8811 	msr	BASEPRI, r3
 80042d8:	f3bf 8f6f 	isb	sy
 80042dc:	f3bf 8f4f 	dsb	sy
 80042e0:	61bb      	str	r3, [r7, #24]
}
 80042e2:	bf00      	nop
 80042e4:	e7fe      	b.n	80042e4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80042e6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80042e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d01e      	beq.n	800432c <xTaskCreateStatic+0xac>
 80042ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d01b      	beq.n	800432c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80042f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042f6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80042f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042fa:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80042fc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80042fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004300:	2202      	movs	r2, #2
 8004302:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8004306:	2300      	movs	r3, #0
 8004308:	9303      	str	r3, [sp, #12]
 800430a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800430c:	9302      	str	r3, [sp, #8]
 800430e:	f107 0314 	add.w	r3, r7, #20
 8004312:	9301      	str	r3, [sp, #4]
 8004314:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004316:	9300      	str	r3, [sp, #0]
 8004318:	683b      	ldr	r3, [r7, #0]
 800431a:	687a      	ldr	r2, [r7, #4]
 800431c:	68b9      	ldr	r1, [r7, #8]
 800431e:	68f8      	ldr	r0, [r7, #12]
 8004320:	f000 f850 	bl	80043c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004326:	f000 f8f3 	bl	8004510 <prvAddNewTaskToReadyList>
 800432a:	e001      	b.n	8004330 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800432c:	2300      	movs	r3, #0
 800432e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004330:	697b      	ldr	r3, [r7, #20]
	}
 8004332:	4618      	mov	r0, r3
 8004334:	3728      	adds	r7, #40	; 0x28
 8004336:	46bd      	mov	sp, r7
 8004338:	bd80      	pop	{r7, pc}

0800433a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800433a:	b580      	push	{r7, lr}
 800433c:	b08c      	sub	sp, #48	; 0x30
 800433e:	af04      	add	r7, sp, #16
 8004340:	60f8      	str	r0, [r7, #12]
 8004342:	60b9      	str	r1, [r7, #8]
 8004344:	603b      	str	r3, [r7, #0]
 8004346:	4613      	mov	r3, r2
 8004348:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800434a:	88fb      	ldrh	r3, [r7, #6]
 800434c:	009b      	lsls	r3, r3, #2
 800434e:	4618      	mov	r0, r3
 8004350:	f001 fcca 	bl	8005ce8 <pvPortMalloc>
 8004354:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8004356:	697b      	ldr	r3, [r7, #20]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d00e      	beq.n	800437a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800435c:	20bc      	movs	r0, #188	; 0xbc
 800435e:	f001 fcc3 	bl	8005ce8 <pvPortMalloc>
 8004362:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8004364:	69fb      	ldr	r3, [r7, #28]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d003      	beq.n	8004372 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800436a:	69fb      	ldr	r3, [r7, #28]
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	631a      	str	r2, [r3, #48]	; 0x30
 8004370:	e005      	b.n	800437e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8004372:	6978      	ldr	r0, [r7, #20]
 8004374:	f001 fd84 	bl	8005e80 <vPortFree>
 8004378:	e001      	b.n	800437e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800437a:	2300      	movs	r3, #0
 800437c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800437e:	69fb      	ldr	r3, [r7, #28]
 8004380:	2b00      	cmp	r3, #0
 8004382:	d017      	beq.n	80043b4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8004384:	69fb      	ldr	r3, [r7, #28]
 8004386:	2200      	movs	r2, #0
 8004388:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800438c:	88fa      	ldrh	r2, [r7, #6]
 800438e:	2300      	movs	r3, #0
 8004390:	9303      	str	r3, [sp, #12]
 8004392:	69fb      	ldr	r3, [r7, #28]
 8004394:	9302      	str	r3, [sp, #8]
 8004396:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004398:	9301      	str	r3, [sp, #4]
 800439a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800439c:	9300      	str	r3, [sp, #0]
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	68b9      	ldr	r1, [r7, #8]
 80043a2:	68f8      	ldr	r0, [r7, #12]
 80043a4:	f000 f80e 	bl	80043c4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80043a8:	69f8      	ldr	r0, [r7, #28]
 80043aa:	f000 f8b1 	bl	8004510 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80043ae:	2301      	movs	r3, #1
 80043b0:	61bb      	str	r3, [r7, #24]
 80043b2:	e002      	b.n	80043ba <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80043b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80043b8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80043ba:	69bb      	ldr	r3, [r7, #24]
	}
 80043bc:	4618      	mov	r0, r3
 80043be:	3720      	adds	r7, #32
 80043c0:	46bd      	mov	sp, r7
 80043c2:	bd80      	pop	{r7, pc}

080043c4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80043c4:	b580      	push	{r7, lr}
 80043c6:	b088      	sub	sp, #32
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80043d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043d4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	009b      	lsls	r3, r3, #2
 80043da:	461a      	mov	r2, r3
 80043dc:	21a5      	movs	r1, #165	; 0xa5
 80043de:	f001 ff9e 	bl	800631e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80043e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80043ec:	3b01      	subs	r3, #1
 80043ee:	009b      	lsls	r3, r3, #2
 80043f0:	4413      	add	r3, r2
 80043f2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	f023 0307 	bic.w	r3, r3, #7
 80043fa:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80043fc:	69bb      	ldr	r3, [r7, #24]
 80043fe:	f003 0307 	and.w	r3, r3, #7
 8004402:	2b00      	cmp	r3, #0
 8004404:	d00a      	beq.n	800441c <prvInitialiseNewTask+0x58>
	__asm volatile
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	617b      	str	r3, [r7, #20]
}
 8004418:	bf00      	nop
 800441a:	e7fe      	b.n	800441a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800441c:	68bb      	ldr	r3, [r7, #8]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d01f      	beq.n	8004462 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
 8004426:	e012      	b.n	800444e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8004428:	68ba      	ldr	r2, [r7, #8]
 800442a:	69fb      	ldr	r3, [r7, #28]
 800442c:	4413      	add	r3, r2
 800442e:	7819      	ldrb	r1, [r3, #0]
 8004430:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004432:	69fb      	ldr	r3, [r7, #28]
 8004434:	4413      	add	r3, r2
 8004436:	3334      	adds	r3, #52	; 0x34
 8004438:	460a      	mov	r2, r1
 800443a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800443c:	68ba      	ldr	r2, [r7, #8]
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	781b      	ldrb	r3, [r3, #0]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d006      	beq.n	8004456 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004448:	69fb      	ldr	r3, [r7, #28]
 800444a:	3301      	adds	r3, #1
 800444c:	61fb      	str	r3, [r7, #28]
 800444e:	69fb      	ldr	r3, [r7, #28]
 8004450:	2b0f      	cmp	r3, #15
 8004452:	d9e9      	bls.n	8004428 <prvInitialiseNewTask+0x64>
 8004454:	e000      	b.n	8004458 <prvInitialiseNewTask+0x94>
			{
				break;
 8004456:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8004458:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800445a:	2200      	movs	r2, #0
 800445c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004460:	e003      	b.n	800446a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004462:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800446a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800446c:	2b37      	cmp	r3, #55	; 0x37
 800446e:	d901      	bls.n	8004474 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8004470:	2337      	movs	r3, #55	; 0x37
 8004472:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8004474:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004476:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004478:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800447a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800447c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800447e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8004480:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004482:	2200      	movs	r2, #0
 8004484:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	3304      	adds	r3, #4
 800448a:	4618      	mov	r0, r3
 800448c:	f7ff f978 	bl	8003780 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8004490:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004492:	3318      	adds	r3, #24
 8004494:	4618      	mov	r0, r3
 8004496:	f7ff f973 	bl	8003780 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800449a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800449c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800449e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80044a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044a2:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80044a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044a8:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80044aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80044b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044b2:	2200      	movs	r2, #0
 80044b4:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80044b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80044c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044c2:	3354      	adds	r3, #84	; 0x54
 80044c4:	2260      	movs	r2, #96	; 0x60
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f001 ff28 	bl	800631e <memset>
 80044ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d0:	4a0c      	ldr	r2, [pc, #48]	; (8004504 <prvInitialiseNewTask+0x140>)
 80044d2:	659a      	str	r2, [r3, #88]	; 0x58
 80044d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044d6:	4a0c      	ldr	r2, [pc, #48]	; (8004508 <prvInitialiseNewTask+0x144>)
 80044d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80044da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044dc:	4a0b      	ldr	r2, [pc, #44]	; (800450c <prvInitialiseNewTask+0x148>)
 80044de:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80044e0:	683a      	ldr	r2, [r7, #0]
 80044e2:	68f9      	ldr	r1, [r7, #12]
 80044e4:	69b8      	ldr	r0, [r7, #24]
 80044e6:	f001 f9ad 	bl	8005844 <pxPortInitialiseStack>
 80044ea:	4602      	mov	r2, r0
 80044ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044ee:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80044f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d002      	beq.n	80044fc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80044f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80044f8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80044fa:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80044fc:	bf00      	nop
 80044fe:	3720      	adds	r7, #32
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}
 8004504:	08007254 	.word	0x08007254
 8004508:	08007274 	.word	0x08007274
 800450c:	08007234 	.word	0x08007234

08004510 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b082      	sub	sp, #8
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004518:	f001 fac4 	bl	8005aa4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800451c:	4b2d      	ldr	r3, [pc, #180]	; (80045d4 <prvAddNewTaskToReadyList+0xc4>)
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	3301      	adds	r3, #1
 8004522:	4a2c      	ldr	r2, [pc, #176]	; (80045d4 <prvAddNewTaskToReadyList+0xc4>)
 8004524:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8004526:	4b2c      	ldr	r3, [pc, #176]	; (80045d8 <prvAddNewTaskToReadyList+0xc8>)
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	2b00      	cmp	r3, #0
 800452c:	d109      	bne.n	8004542 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800452e:	4a2a      	ldr	r2, [pc, #168]	; (80045d8 <prvAddNewTaskToReadyList+0xc8>)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004534:	4b27      	ldr	r3, [pc, #156]	; (80045d4 <prvAddNewTaskToReadyList+0xc4>)
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2b01      	cmp	r3, #1
 800453a:	d110      	bne.n	800455e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800453c:	f000 fc4a 	bl	8004dd4 <prvInitialiseTaskLists>
 8004540:	e00d      	b.n	800455e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8004542:	4b26      	ldr	r3, [pc, #152]	; (80045dc <prvAddNewTaskToReadyList+0xcc>)
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d109      	bne.n	800455e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800454a:	4b23      	ldr	r3, [pc, #140]	; (80045d8 <prvAddNewTaskToReadyList+0xc8>)
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004554:	429a      	cmp	r2, r3
 8004556:	d802      	bhi.n	800455e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004558:	4a1f      	ldr	r2, [pc, #124]	; (80045d8 <prvAddNewTaskToReadyList+0xc8>)
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800455e:	4b20      	ldr	r3, [pc, #128]	; (80045e0 <prvAddNewTaskToReadyList+0xd0>)
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	3301      	adds	r3, #1
 8004564:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <prvAddNewTaskToReadyList+0xd0>)
 8004566:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8004568:	4b1d      	ldr	r3, [pc, #116]	; (80045e0 <prvAddNewTaskToReadyList+0xd0>)
 800456a:	681a      	ldr	r2, [r3, #0]
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004574:	4b1b      	ldr	r3, [pc, #108]	; (80045e4 <prvAddNewTaskToReadyList+0xd4>)
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	429a      	cmp	r2, r3
 800457a:	d903      	bls.n	8004584 <prvAddNewTaskToReadyList+0x74>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004580:	4a18      	ldr	r2, [pc, #96]	; (80045e4 <prvAddNewTaskToReadyList+0xd4>)
 8004582:	6013      	str	r3, [r2, #0]
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004588:	4613      	mov	r3, r2
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	4a15      	ldr	r2, [pc, #84]	; (80045e8 <prvAddNewTaskToReadyList+0xd8>)
 8004592:	441a      	add	r2, r3
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	3304      	adds	r3, #4
 8004598:	4619      	mov	r1, r3
 800459a:	4610      	mov	r0, r2
 800459c:	f7ff f8fd 	bl	800379a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80045a0:	f001 fab0 	bl	8005b04 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80045a4:	4b0d      	ldr	r3, [pc, #52]	; (80045dc <prvAddNewTaskToReadyList+0xcc>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	2b00      	cmp	r3, #0
 80045aa:	d00e      	beq.n	80045ca <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80045ac:	4b0a      	ldr	r3, [pc, #40]	; (80045d8 <prvAddNewTaskToReadyList+0xc8>)
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045b6:	429a      	cmp	r2, r3
 80045b8:	d207      	bcs.n	80045ca <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80045ba:	4b0c      	ldr	r3, [pc, #48]	; (80045ec <prvAddNewTaskToReadyList+0xdc>)
 80045bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80045c0:	601a      	str	r2, [r3, #0]
 80045c2:	f3bf 8f4f 	dsb	sy
 80045c6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80045ca:	bf00      	nop
 80045cc:	3708      	adds	r7, #8
 80045ce:	46bd      	mov	sp, r7
 80045d0:	bd80      	pop	{r7, pc}
 80045d2:	bf00      	nop
 80045d4:	200010bc 	.word	0x200010bc
 80045d8:	20000be8 	.word	0x20000be8
 80045dc:	200010c8 	.word	0x200010c8
 80045e0:	200010d8 	.word	0x200010d8
 80045e4:	200010c4 	.word	0x200010c4
 80045e8:	20000bec 	.word	0x20000bec
 80045ec:	e000ed04 	.word	0xe000ed04

080045f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80045f0:	b580      	push	{r7, lr}
 80045f2:	b084      	sub	sp, #16
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80045f8:	2300      	movs	r3, #0
 80045fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d017      	beq.n	8004632 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004602:	4b13      	ldr	r3, [pc, #76]	; (8004650 <vTaskDelay+0x60>)
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d00a      	beq.n	8004620 <vTaskDelay+0x30>
	__asm volatile
 800460a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800460e:	f383 8811 	msr	BASEPRI, r3
 8004612:	f3bf 8f6f 	isb	sy
 8004616:	f3bf 8f4f 	dsb	sy
 800461a:	60bb      	str	r3, [r7, #8]
}
 800461c:	bf00      	nop
 800461e:	e7fe      	b.n	800461e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004620:	f000 f88a 	bl	8004738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004624:	2100      	movs	r1, #0
 8004626:	6878      	ldr	r0, [r7, #4]
 8004628:	f000 fd6a 	bl	8005100 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800462c:	f000 f892 	bl	8004754 <xTaskResumeAll>
 8004630:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	2b00      	cmp	r3, #0
 8004636:	d107      	bne.n	8004648 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004638:	4b06      	ldr	r3, [pc, #24]	; (8004654 <vTaskDelay+0x64>)
 800463a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800463e:	601a      	str	r2, [r3, #0]
 8004640:	f3bf 8f4f 	dsb	sy
 8004644:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004648:	bf00      	nop
 800464a:	3710      	adds	r7, #16
 800464c:	46bd      	mov	sp, r7
 800464e:	bd80      	pop	{r7, pc}
 8004650:	200010e4 	.word	0x200010e4
 8004654:	e000ed04 	.word	0xe000ed04

08004658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004658:	b580      	push	{r7, lr}
 800465a:	b08a      	sub	sp, #40	; 0x28
 800465c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800465e:	2300      	movs	r3, #0
 8004660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004662:	2300      	movs	r3, #0
 8004664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004666:	463a      	mov	r2, r7
 8004668:	1d39      	adds	r1, r7, #4
 800466a:	f107 0308 	add.w	r3, r7, #8
 800466e:	4618      	mov	r0, r3
 8004670:	f7ff f832 	bl	80036d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004674:	6839      	ldr	r1, [r7, #0]
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	68ba      	ldr	r2, [r7, #8]
 800467a:	9202      	str	r2, [sp, #8]
 800467c:	9301      	str	r3, [sp, #4]
 800467e:	2300      	movs	r3, #0
 8004680:	9300      	str	r3, [sp, #0]
 8004682:	2300      	movs	r3, #0
 8004684:	460a      	mov	r2, r1
 8004686:	4924      	ldr	r1, [pc, #144]	; (8004718 <vTaskStartScheduler+0xc0>)
 8004688:	4824      	ldr	r0, [pc, #144]	; (800471c <vTaskStartScheduler+0xc4>)
 800468a:	f7ff fdf9 	bl	8004280 <xTaskCreateStatic>
 800468e:	4603      	mov	r3, r0
 8004690:	4a23      	ldr	r2, [pc, #140]	; (8004720 <vTaskStartScheduler+0xc8>)
 8004692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004694:	4b22      	ldr	r3, [pc, #136]	; (8004720 <vTaskStartScheduler+0xc8>)
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800469c:	2301      	movs	r3, #1
 800469e:	617b      	str	r3, [r7, #20]
 80046a0:	e001      	b.n	80046a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80046a2:	2300      	movs	r3, #0
 80046a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d102      	bne.n	80046b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80046ac:	f000 fd7c 	bl	80051a8 <xTimerCreateTimerTask>
 80046b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80046b2:	697b      	ldr	r3, [r7, #20]
 80046b4:	2b01      	cmp	r3, #1
 80046b6:	d11b      	bne.n	80046f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80046b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046bc:	f383 8811 	msr	BASEPRI, r3
 80046c0:	f3bf 8f6f 	isb	sy
 80046c4:	f3bf 8f4f 	dsb	sy
 80046c8:	613b      	str	r3, [r7, #16]
}
 80046ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80046cc:	4b15      	ldr	r3, [pc, #84]	; (8004724 <vTaskStartScheduler+0xcc>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	3354      	adds	r3, #84	; 0x54
 80046d2:	4a15      	ldr	r2, [pc, #84]	; (8004728 <vTaskStartScheduler+0xd0>)
 80046d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80046d6:	4b15      	ldr	r3, [pc, #84]	; (800472c <vTaskStartScheduler+0xd4>)
 80046d8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80046dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80046de:	4b14      	ldr	r3, [pc, #80]	; (8004730 <vTaskStartScheduler+0xd8>)
 80046e0:	2201      	movs	r2, #1
 80046e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80046e4:	4b13      	ldr	r3, [pc, #76]	; (8004734 <vTaskStartScheduler+0xdc>)
 80046e6:	2200      	movs	r2, #0
 80046e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80046ea:	f001 f939 	bl	8005960 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80046ee:	e00e      	b.n	800470e <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80046f0:	697b      	ldr	r3, [r7, #20]
 80046f2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046f6:	d10a      	bne.n	800470e <vTaskStartScheduler+0xb6>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	60fb      	str	r3, [r7, #12]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <vTaskStartScheduler+0xb4>
}
 800470e:	bf00      	nop
 8004710:	3718      	adds	r7, #24
 8004712:	46bd      	mov	sp, r7
 8004714:	bd80      	pop	{r7, pc}
 8004716:	bf00      	nop
 8004718:	0800718c 	.word	0x0800718c
 800471c:	08004da5 	.word	0x08004da5
 8004720:	200010e0 	.word	0x200010e0
 8004724:	20000be8 	.word	0x20000be8
 8004728:	20000010 	.word	0x20000010
 800472c:	200010dc 	.word	0x200010dc
 8004730:	200010c8 	.word	0x200010c8
 8004734:	200010c0 	.word	0x200010c0

08004738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004738:	b480      	push	{r7}
 800473a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800473c:	4b04      	ldr	r3, [pc, #16]	; (8004750 <vTaskSuspendAll+0x18>)
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	3301      	adds	r3, #1
 8004742:	4a03      	ldr	r2, [pc, #12]	; (8004750 <vTaskSuspendAll+0x18>)
 8004744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004746:	bf00      	nop
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr
 8004750:	200010e4 	.word	0x200010e4

08004754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b084      	sub	sp, #16
 8004758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800475a:	2300      	movs	r3, #0
 800475c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800475e:	2300      	movs	r3, #0
 8004760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004762:	4b42      	ldr	r3, [pc, #264]	; (800486c <xTaskResumeAll+0x118>)
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	2b00      	cmp	r3, #0
 8004768:	d10a      	bne.n	8004780 <xTaskResumeAll+0x2c>
	__asm volatile
 800476a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800476e:	f383 8811 	msr	BASEPRI, r3
 8004772:	f3bf 8f6f 	isb	sy
 8004776:	f3bf 8f4f 	dsb	sy
 800477a:	603b      	str	r3, [r7, #0]
}
 800477c:	bf00      	nop
 800477e:	e7fe      	b.n	800477e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004780:	f001 f990 	bl	8005aa4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004784:	4b39      	ldr	r3, [pc, #228]	; (800486c <xTaskResumeAll+0x118>)
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	3b01      	subs	r3, #1
 800478a:	4a38      	ldr	r2, [pc, #224]	; (800486c <xTaskResumeAll+0x118>)
 800478c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800478e:	4b37      	ldr	r3, [pc, #220]	; (800486c <xTaskResumeAll+0x118>)
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	2b00      	cmp	r3, #0
 8004794:	d162      	bne.n	800485c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004796:	4b36      	ldr	r3, [pc, #216]	; (8004870 <xTaskResumeAll+0x11c>)
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	2b00      	cmp	r3, #0
 800479c:	d05e      	beq.n	800485c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800479e:	e02f      	b.n	8004800 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047a0:	4b34      	ldr	r3, [pc, #208]	; (8004874 <xTaskResumeAll+0x120>)
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	68db      	ldr	r3, [r3, #12]
 80047a6:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	3318      	adds	r3, #24
 80047ac:	4618      	mov	r0, r3
 80047ae:	f7ff f851 	bl	8003854 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	3304      	adds	r3, #4
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7ff f84c 	bl	8003854 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047c0:	4b2d      	ldr	r3, [pc, #180]	; (8004878 <xTaskResumeAll+0x124>)
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	429a      	cmp	r2, r3
 80047c6:	d903      	bls.n	80047d0 <xTaskResumeAll+0x7c>
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047cc:	4a2a      	ldr	r2, [pc, #168]	; (8004878 <xTaskResumeAll+0x124>)
 80047ce:	6013      	str	r3, [r2, #0]
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047d4:	4613      	mov	r3, r2
 80047d6:	009b      	lsls	r3, r3, #2
 80047d8:	4413      	add	r3, r2
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	4a27      	ldr	r2, [pc, #156]	; (800487c <xTaskResumeAll+0x128>)
 80047de:	441a      	add	r2, r3
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	3304      	adds	r3, #4
 80047e4:	4619      	mov	r1, r3
 80047e6:	4610      	mov	r0, r2
 80047e8:	f7fe ffd7 	bl	800379a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047f0:	4b23      	ldr	r3, [pc, #140]	; (8004880 <xTaskResumeAll+0x12c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047f6:	429a      	cmp	r2, r3
 80047f8:	d302      	bcc.n	8004800 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80047fa:	4b22      	ldr	r3, [pc, #136]	; (8004884 <xTaskResumeAll+0x130>)
 80047fc:	2201      	movs	r2, #1
 80047fe:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004800:	4b1c      	ldr	r3, [pc, #112]	; (8004874 <xTaskResumeAll+0x120>)
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1cb      	bne.n	80047a0 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d001      	beq.n	8004812 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800480e:	f000 fbbb 	bl	8004f88 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004812:	4b1d      	ldr	r3, [pc, #116]	; (8004888 <xTaskResumeAll+0x134>)
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	2b00      	cmp	r3, #0
 800481c:	d010      	beq.n	8004840 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800481e:	f000 f86b 	bl	80048f8 <xTaskIncrementTick>
 8004822:	4603      	mov	r3, r0
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004828:	4b16      	ldr	r3, [pc, #88]	; (8004884 <xTaskResumeAll+0x130>)
 800482a:	2201      	movs	r2, #1
 800482c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	3b01      	subs	r3, #1
 8004832:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2b00      	cmp	r3, #0
 8004838:	d1f1      	bne.n	800481e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800483a:	4b13      	ldr	r3, [pc, #76]	; (8004888 <xTaskResumeAll+0x134>)
 800483c:	2200      	movs	r2, #0
 800483e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004840:	4b10      	ldr	r3, [pc, #64]	; (8004884 <xTaskResumeAll+0x130>)
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d009      	beq.n	800485c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004848:	2301      	movs	r3, #1
 800484a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800484c:	4b0f      	ldr	r3, [pc, #60]	; (800488c <xTaskResumeAll+0x138>)
 800484e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004852:	601a      	str	r2, [r3, #0]
 8004854:	f3bf 8f4f 	dsb	sy
 8004858:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800485c:	f001 f952 	bl	8005b04 <vPortExitCritical>

	return xAlreadyYielded;
 8004860:	68bb      	ldr	r3, [r7, #8]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3710      	adds	r7, #16
 8004866:	46bd      	mov	sp, r7
 8004868:	bd80      	pop	{r7, pc}
 800486a:	bf00      	nop
 800486c:	200010e4 	.word	0x200010e4
 8004870:	200010bc 	.word	0x200010bc
 8004874:	2000107c 	.word	0x2000107c
 8004878:	200010c4 	.word	0x200010c4
 800487c:	20000bec 	.word	0x20000bec
 8004880:	20000be8 	.word	0x20000be8
 8004884:	200010d0 	.word	0x200010d0
 8004888:	200010cc 	.word	0x200010cc
 800488c:	e000ed04 	.word	0xe000ed04

08004890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004890:	b480      	push	{r7}
 8004892:	b083      	sub	sp, #12
 8004894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004896:	4b05      	ldr	r3, [pc, #20]	; (80048ac <xTaskGetTickCount+0x1c>)
 8004898:	681b      	ldr	r3, [r3, #0]
 800489a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800489c:	687b      	ldr	r3, [r7, #4]
}
 800489e:	4618      	mov	r0, r3
 80048a0:	370c      	adds	r7, #12
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	200010c0 	.word	0x200010c0

080048b0 <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80048b0:	b480      	push	{r7}
 80048b2:	b085      	sub	sp, #20
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d102      	bne.n	80048c4 <pcTaskGetName+0x14>
 80048be:	4b0d      	ldr	r3, [pc, #52]	; (80048f4 <pcTaskGetName+0x44>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	e000      	b.n	80048c6 <pcTaskGetName+0x16>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d10a      	bne.n	80048e4 <pcTaskGetName+0x34>
	__asm volatile
 80048ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048d2:	f383 8811 	msr	BASEPRI, r3
 80048d6:	f3bf 8f6f 	isb	sy
 80048da:	f3bf 8f4f 	dsb	sy
 80048de:	60bb      	str	r3, [r7, #8]
}
 80048e0:	bf00      	nop
 80048e2:	e7fe      	b.n	80048e2 <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	3334      	adds	r3, #52	; 0x34
}
 80048e8:	4618      	mov	r0, r3
 80048ea:	3714      	adds	r7, #20
 80048ec:	46bd      	mov	sp, r7
 80048ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048f2:	4770      	bx	lr
 80048f4:	20000be8 	.word	0x20000be8

080048f8 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80048f8:	b580      	push	{r7, lr}
 80048fa:	b086      	sub	sp, #24
 80048fc:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80048fe:	2300      	movs	r3, #0
 8004900:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004902:	4b4f      	ldr	r3, [pc, #316]	; (8004a40 <xTaskIncrementTick+0x148>)
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	2b00      	cmp	r3, #0
 8004908:	f040 808f 	bne.w	8004a2a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800490c:	4b4d      	ldr	r3, [pc, #308]	; (8004a44 <xTaskIncrementTick+0x14c>)
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	3301      	adds	r3, #1
 8004912:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004914:	4a4b      	ldr	r2, [pc, #300]	; (8004a44 <xTaskIncrementTick+0x14c>)
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800491a:	693b      	ldr	r3, [r7, #16]
 800491c:	2b00      	cmp	r3, #0
 800491e:	d120      	bne.n	8004962 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004920:	4b49      	ldr	r3, [pc, #292]	; (8004a48 <xTaskIncrementTick+0x150>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d00a      	beq.n	8004940 <xTaskIncrementTick+0x48>
	__asm volatile
 800492a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800492e:	f383 8811 	msr	BASEPRI, r3
 8004932:	f3bf 8f6f 	isb	sy
 8004936:	f3bf 8f4f 	dsb	sy
 800493a:	603b      	str	r3, [r7, #0]
}
 800493c:	bf00      	nop
 800493e:	e7fe      	b.n	800493e <xTaskIncrementTick+0x46>
 8004940:	4b41      	ldr	r3, [pc, #260]	; (8004a48 <xTaskIncrementTick+0x150>)
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	60fb      	str	r3, [r7, #12]
 8004946:	4b41      	ldr	r3, [pc, #260]	; (8004a4c <xTaskIncrementTick+0x154>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	4a3f      	ldr	r2, [pc, #252]	; (8004a48 <xTaskIncrementTick+0x150>)
 800494c:	6013      	str	r3, [r2, #0]
 800494e:	4a3f      	ldr	r2, [pc, #252]	; (8004a4c <xTaskIncrementTick+0x154>)
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	6013      	str	r3, [r2, #0]
 8004954:	4b3e      	ldr	r3, [pc, #248]	; (8004a50 <xTaskIncrementTick+0x158>)
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	3301      	adds	r3, #1
 800495a:	4a3d      	ldr	r2, [pc, #244]	; (8004a50 <xTaskIncrementTick+0x158>)
 800495c:	6013      	str	r3, [r2, #0]
 800495e:	f000 fb13 	bl	8004f88 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004962:	4b3c      	ldr	r3, [pc, #240]	; (8004a54 <xTaskIncrementTick+0x15c>)
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	693a      	ldr	r2, [r7, #16]
 8004968:	429a      	cmp	r2, r3
 800496a:	d349      	bcc.n	8004a00 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800496c:	4b36      	ldr	r3, [pc, #216]	; (8004a48 <xTaskIncrementTick+0x150>)
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	2b00      	cmp	r3, #0
 8004974:	d104      	bne.n	8004980 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004976:	4b37      	ldr	r3, [pc, #220]	; (8004a54 <xTaskIncrementTick+0x15c>)
 8004978:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800497c:	601a      	str	r2, [r3, #0]
					break;
 800497e:	e03f      	b.n	8004a00 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004980:	4b31      	ldr	r3, [pc, #196]	; (8004a48 <xTaskIncrementTick+0x150>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	68db      	ldr	r3, [r3, #12]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800498a:	68bb      	ldr	r3, [r7, #8]
 800498c:	685b      	ldr	r3, [r3, #4]
 800498e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004990:	693a      	ldr	r2, [r7, #16]
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	429a      	cmp	r2, r3
 8004996:	d203      	bcs.n	80049a0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004998:	4a2e      	ldr	r2, [pc, #184]	; (8004a54 <xTaskIncrementTick+0x15c>)
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800499e:	e02f      	b.n	8004a00 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80049a0:	68bb      	ldr	r3, [r7, #8]
 80049a2:	3304      	adds	r3, #4
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fe ff55 	bl	8003854 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d004      	beq.n	80049bc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	3318      	adds	r3, #24
 80049b6:	4618      	mov	r0, r3
 80049b8:	f7fe ff4c 	bl	8003854 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049c0:	4b25      	ldr	r3, [pc, #148]	; (8004a58 <xTaskIncrementTick+0x160>)
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	429a      	cmp	r2, r3
 80049c6:	d903      	bls.n	80049d0 <xTaskIncrementTick+0xd8>
 80049c8:	68bb      	ldr	r3, [r7, #8]
 80049ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049cc:	4a22      	ldr	r2, [pc, #136]	; (8004a58 <xTaskIncrementTick+0x160>)
 80049ce:	6013      	str	r3, [r2, #0]
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d4:	4613      	mov	r3, r2
 80049d6:	009b      	lsls	r3, r3, #2
 80049d8:	4413      	add	r3, r2
 80049da:	009b      	lsls	r3, r3, #2
 80049dc:	4a1f      	ldr	r2, [pc, #124]	; (8004a5c <xTaskIncrementTick+0x164>)
 80049de:	441a      	add	r2, r3
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	3304      	adds	r3, #4
 80049e4:	4619      	mov	r1, r3
 80049e6:	4610      	mov	r0, r2
 80049e8:	f7fe fed7 	bl	800379a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f0:	4b1b      	ldr	r3, [pc, #108]	; (8004a60 <xTaskIncrementTick+0x168>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049f6:	429a      	cmp	r2, r3
 80049f8:	d3b8      	bcc.n	800496c <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 80049fa:	2301      	movs	r3, #1
 80049fc:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80049fe:	e7b5      	b.n	800496c <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004a00:	4b17      	ldr	r3, [pc, #92]	; (8004a60 <xTaskIncrementTick+0x168>)
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a06:	4915      	ldr	r1, [pc, #84]	; (8004a5c <xTaskIncrementTick+0x164>)
 8004a08:	4613      	mov	r3, r2
 8004a0a:	009b      	lsls	r3, r3, #2
 8004a0c:	4413      	add	r3, r2
 8004a0e:	009b      	lsls	r3, r3, #2
 8004a10:	440b      	add	r3, r1
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	2b01      	cmp	r3, #1
 8004a16:	d901      	bls.n	8004a1c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004a18:	2301      	movs	r3, #1
 8004a1a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004a1c:	4b11      	ldr	r3, [pc, #68]	; (8004a64 <xTaskIncrementTick+0x16c>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d007      	beq.n	8004a34 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004a24:	2301      	movs	r3, #1
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	e004      	b.n	8004a34 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004a2a:	4b0f      	ldr	r3, [pc, #60]	; (8004a68 <xTaskIncrementTick+0x170>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	4a0d      	ldr	r2, [pc, #52]	; (8004a68 <xTaskIncrementTick+0x170>)
 8004a32:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004a34:	697b      	ldr	r3, [r7, #20]
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3718      	adds	r7, #24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bd80      	pop	{r7, pc}
 8004a3e:	bf00      	nop
 8004a40:	200010e4 	.word	0x200010e4
 8004a44:	200010c0 	.word	0x200010c0
 8004a48:	20001074 	.word	0x20001074
 8004a4c:	20001078 	.word	0x20001078
 8004a50:	200010d4 	.word	0x200010d4
 8004a54:	200010dc 	.word	0x200010dc
 8004a58:	200010c4 	.word	0x200010c4
 8004a5c:	20000bec 	.word	0x20000bec
 8004a60:	20000be8 	.word	0x20000be8
 8004a64:	200010d0 	.word	0x200010d0
 8004a68:	200010cc 	.word	0x200010cc

08004a6c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b085      	sub	sp, #20
 8004a70:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004a72:	4b2a      	ldr	r3, [pc, #168]	; (8004b1c <vTaskSwitchContext+0xb0>)
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004a7a:	4b29      	ldr	r3, [pc, #164]	; (8004b20 <vTaskSwitchContext+0xb4>)
 8004a7c:	2201      	movs	r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004a80:	e046      	b.n	8004b10 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004a82:	4b27      	ldr	r3, [pc, #156]	; (8004b20 <vTaskSwitchContext+0xb4>)
 8004a84:	2200      	movs	r2, #0
 8004a86:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004a88:	4b26      	ldr	r3, [pc, #152]	; (8004b24 <vTaskSwitchContext+0xb8>)
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	60fb      	str	r3, [r7, #12]
 8004a8e:	e010      	b.n	8004ab2 <vTaskSwitchContext+0x46>
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d10a      	bne.n	8004aac <vTaskSwitchContext+0x40>
	__asm volatile
 8004a96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a9a:	f383 8811 	msr	BASEPRI, r3
 8004a9e:	f3bf 8f6f 	isb	sy
 8004aa2:	f3bf 8f4f 	dsb	sy
 8004aa6:	607b      	str	r3, [r7, #4]
}
 8004aa8:	bf00      	nop
 8004aaa:	e7fe      	b.n	8004aaa <vTaskSwitchContext+0x3e>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	3b01      	subs	r3, #1
 8004ab0:	60fb      	str	r3, [r7, #12]
 8004ab2:	491d      	ldr	r1, [pc, #116]	; (8004b28 <vTaskSwitchContext+0xbc>)
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	4613      	mov	r3, r2
 8004ab8:	009b      	lsls	r3, r3, #2
 8004aba:	4413      	add	r3, r2
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	440b      	add	r3, r1
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0e4      	beq.n	8004a90 <vTaskSwitchContext+0x24>
 8004ac6:	68fa      	ldr	r2, [r7, #12]
 8004ac8:	4613      	mov	r3, r2
 8004aca:	009b      	lsls	r3, r3, #2
 8004acc:	4413      	add	r3, r2
 8004ace:	009b      	lsls	r3, r3, #2
 8004ad0:	4a15      	ldr	r2, [pc, #84]	; (8004b28 <vTaskSwitchContext+0xbc>)
 8004ad2:	4413      	add	r3, r2
 8004ad4:	60bb      	str	r3, [r7, #8]
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	685b      	ldr	r3, [r3, #4]
 8004ada:	685a      	ldr	r2, [r3, #4]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	605a      	str	r2, [r3, #4]
 8004ae0:	68bb      	ldr	r3, [r7, #8]
 8004ae2:	685a      	ldr	r2, [r3, #4]
 8004ae4:	68bb      	ldr	r3, [r7, #8]
 8004ae6:	3308      	adds	r3, #8
 8004ae8:	429a      	cmp	r2, r3
 8004aea:	d104      	bne.n	8004af6 <vTaskSwitchContext+0x8a>
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	685b      	ldr	r3, [r3, #4]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	605a      	str	r2, [r3, #4]
 8004af6:	68bb      	ldr	r3, [r7, #8]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	68db      	ldr	r3, [r3, #12]
 8004afc:	4a0b      	ldr	r2, [pc, #44]	; (8004b2c <vTaskSwitchContext+0xc0>)
 8004afe:	6013      	str	r3, [r2, #0]
 8004b00:	4a08      	ldr	r2, [pc, #32]	; (8004b24 <vTaskSwitchContext+0xb8>)
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b06:	4b09      	ldr	r3, [pc, #36]	; (8004b2c <vTaskSwitchContext+0xc0>)
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	3354      	adds	r3, #84	; 0x54
 8004b0c:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <vTaskSwitchContext+0xc4>)
 8004b0e:	6013      	str	r3, [r2, #0]
}
 8004b10:	bf00      	nop
 8004b12:	3714      	adds	r7, #20
 8004b14:	46bd      	mov	sp, r7
 8004b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1a:	4770      	bx	lr
 8004b1c:	200010e4 	.word	0x200010e4
 8004b20:	200010d0 	.word	0x200010d0
 8004b24:	200010c4 	.word	0x200010c4
 8004b28:	20000bec 	.word	0x20000bec
 8004b2c:	20000be8 	.word	0x20000be8
 8004b30:	20000010 	.word	0x20000010

08004b34 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004b34:	b580      	push	{r7, lr}
 8004b36:	b084      	sub	sp, #16
 8004b38:	af00      	add	r7, sp, #0
 8004b3a:	6078      	str	r0, [r7, #4]
 8004b3c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10a      	bne.n	8004b5a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004b44:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b48:	f383 8811 	msr	BASEPRI, r3
 8004b4c:	f3bf 8f6f 	isb	sy
 8004b50:	f3bf 8f4f 	dsb	sy
 8004b54:	60fb      	str	r3, [r7, #12]
}
 8004b56:	bf00      	nop
 8004b58:	e7fe      	b.n	8004b58 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004b5a:	4b07      	ldr	r3, [pc, #28]	; (8004b78 <vTaskPlaceOnEventList+0x44>)
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	3318      	adds	r3, #24
 8004b60:	4619      	mov	r1, r3
 8004b62:	6878      	ldr	r0, [r7, #4]
 8004b64:	f7fe fe3d 	bl	80037e2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004b68:	2101      	movs	r1, #1
 8004b6a:	6838      	ldr	r0, [r7, #0]
 8004b6c:	f000 fac8 	bl	8005100 <prvAddCurrentTaskToDelayedList>
}
 8004b70:	bf00      	nop
 8004b72:	3710      	adds	r7, #16
 8004b74:	46bd      	mov	sp, r7
 8004b76:	bd80      	pop	{r7, pc}
 8004b78:	20000be8 	.word	0x20000be8

08004b7c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004b7c:	b580      	push	{r7, lr}
 8004b7e:	b086      	sub	sp, #24
 8004b80:	af00      	add	r7, sp, #0
 8004b82:	60f8      	str	r0, [r7, #12]
 8004b84:	60b9      	str	r1, [r7, #8]
 8004b86:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d10a      	bne.n	8004ba4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004b8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b92:	f383 8811 	msr	BASEPRI, r3
 8004b96:	f3bf 8f6f 	isb	sy
 8004b9a:	f3bf 8f4f 	dsb	sy
 8004b9e:	617b      	str	r3, [r7, #20]
}
 8004ba0:	bf00      	nop
 8004ba2:	e7fe      	b.n	8004ba2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004ba4:	4b0a      	ldr	r3, [pc, #40]	; (8004bd0 <vTaskPlaceOnEventListRestricted+0x54>)
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3318      	adds	r3, #24
 8004baa:	4619      	mov	r1, r3
 8004bac:	68f8      	ldr	r0, [r7, #12]
 8004bae:	f7fe fdf4 	bl	800379a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d002      	beq.n	8004bbe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004bb8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004bbc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004bbe:	6879      	ldr	r1, [r7, #4]
 8004bc0:	68b8      	ldr	r0, [r7, #8]
 8004bc2:	f000 fa9d 	bl	8005100 <prvAddCurrentTaskToDelayedList>
	}
 8004bc6:	bf00      	nop
 8004bc8:	3718      	adds	r7, #24
 8004bca:	46bd      	mov	sp, r7
 8004bcc:	bd80      	pop	{r7, pc}
 8004bce:	bf00      	nop
 8004bd0:	20000be8 	.word	0x20000be8

08004bd4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b086      	sub	sp, #24
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	68db      	ldr	r3, [r3, #12]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8004be4:	693b      	ldr	r3, [r7, #16]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d10a      	bne.n	8004c00 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8004bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bee:	f383 8811 	msr	BASEPRI, r3
 8004bf2:	f3bf 8f6f 	isb	sy
 8004bf6:	f3bf 8f4f 	dsb	sy
 8004bfa:	60fb      	str	r3, [r7, #12]
}
 8004bfc:	bf00      	nop
 8004bfe:	e7fe      	b.n	8004bfe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	3318      	adds	r3, #24
 8004c04:	4618      	mov	r0, r3
 8004c06:	f7fe fe25 	bl	8003854 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c0a:	4b1e      	ldr	r3, [pc, #120]	; (8004c84 <xTaskRemoveFromEventList+0xb0>)
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d11d      	bne.n	8004c4e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8004c12:	693b      	ldr	r3, [r7, #16]
 8004c14:	3304      	adds	r3, #4
 8004c16:	4618      	mov	r0, r3
 8004c18:	f7fe fe1c 	bl	8003854 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004c1c:	693b      	ldr	r3, [r7, #16]
 8004c1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c20:	4b19      	ldr	r3, [pc, #100]	; (8004c88 <xTaskRemoveFromEventList+0xb4>)
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	429a      	cmp	r2, r3
 8004c26:	d903      	bls.n	8004c30 <xTaskRemoveFromEventList+0x5c>
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c2c:	4a16      	ldr	r2, [pc, #88]	; (8004c88 <xTaskRemoveFromEventList+0xb4>)
 8004c2e:	6013      	str	r3, [r2, #0]
 8004c30:	693b      	ldr	r3, [r7, #16]
 8004c32:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c34:	4613      	mov	r3, r2
 8004c36:	009b      	lsls	r3, r3, #2
 8004c38:	4413      	add	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4a13      	ldr	r2, [pc, #76]	; (8004c8c <xTaskRemoveFromEventList+0xb8>)
 8004c3e:	441a      	add	r2, r3
 8004c40:	693b      	ldr	r3, [r7, #16]
 8004c42:	3304      	adds	r3, #4
 8004c44:	4619      	mov	r1, r3
 8004c46:	4610      	mov	r0, r2
 8004c48:	f7fe fda7 	bl	800379a <vListInsertEnd>
 8004c4c:	e005      	b.n	8004c5a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004c4e:	693b      	ldr	r3, [r7, #16]
 8004c50:	3318      	adds	r3, #24
 8004c52:	4619      	mov	r1, r3
 8004c54:	480e      	ldr	r0, [pc, #56]	; (8004c90 <xTaskRemoveFromEventList+0xbc>)
 8004c56:	f7fe fda0 	bl	800379a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c5e:	4b0d      	ldr	r3, [pc, #52]	; (8004c94 <xTaskRemoveFromEventList+0xc0>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c64:	429a      	cmp	r2, r3
 8004c66:	d905      	bls.n	8004c74 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004c68:	2301      	movs	r3, #1
 8004c6a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004c6c:	4b0a      	ldr	r3, [pc, #40]	; (8004c98 <xTaskRemoveFromEventList+0xc4>)
 8004c6e:	2201      	movs	r2, #1
 8004c70:	601a      	str	r2, [r3, #0]
 8004c72:	e001      	b.n	8004c78 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8004c74:	2300      	movs	r3, #0
 8004c76:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004c78:	697b      	ldr	r3, [r7, #20]
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	3718      	adds	r7, #24
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	bd80      	pop	{r7, pc}
 8004c82:	bf00      	nop
 8004c84:	200010e4 	.word	0x200010e4
 8004c88:	200010c4 	.word	0x200010c4
 8004c8c:	20000bec 	.word	0x20000bec
 8004c90:	2000107c 	.word	0x2000107c
 8004c94:	20000be8 	.word	0x20000be8
 8004c98:	200010d0 	.word	0x200010d0

08004c9c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004c9c:	b480      	push	{r7}
 8004c9e:	b083      	sub	sp, #12
 8004ca0:	af00      	add	r7, sp, #0
 8004ca2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8004ca4:	4b06      	ldr	r3, [pc, #24]	; (8004cc0 <vTaskInternalSetTimeOutState+0x24>)
 8004ca6:	681a      	ldr	r2, [r3, #0]
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <vTaskInternalSetTimeOutState+0x28>)
 8004cae:	681a      	ldr	r2, [r3, #0]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	605a      	str	r2, [r3, #4]
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr
 8004cc0:	200010d4 	.word	0x200010d4
 8004cc4:	200010c0 	.word	0x200010c0

08004cc8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
 8004cd0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d10a      	bne.n	8004cee <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8004cd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cdc:	f383 8811 	msr	BASEPRI, r3
 8004ce0:	f3bf 8f6f 	isb	sy
 8004ce4:	f3bf 8f4f 	dsb	sy
 8004ce8:	613b      	str	r3, [r7, #16]
}
 8004cea:	bf00      	nop
 8004cec:	e7fe      	b.n	8004cec <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8004cee:	683b      	ldr	r3, [r7, #0]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10a      	bne.n	8004d0a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8004cf4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004cf8:	f383 8811 	msr	BASEPRI, r3
 8004cfc:	f3bf 8f6f 	isb	sy
 8004d00:	f3bf 8f4f 	dsb	sy
 8004d04:	60fb      	str	r3, [r7, #12]
}
 8004d06:	bf00      	nop
 8004d08:	e7fe      	b.n	8004d08 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8004d0a:	f000 fecb 	bl	8005aa4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004d0e:	4b1d      	ldr	r3, [pc, #116]	; (8004d84 <xTaskCheckForTimeOut+0xbc>)
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	685b      	ldr	r3, [r3, #4]
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	1ad3      	subs	r3, r2, r3
 8004d1c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d26:	d102      	bne.n	8004d2e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004d28:	2300      	movs	r3, #0
 8004d2a:	61fb      	str	r3, [r7, #28]
 8004d2c:	e023      	b.n	8004d76 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681a      	ldr	r2, [r3, #0]
 8004d32:	4b15      	ldr	r3, [pc, #84]	; (8004d88 <xTaskCheckForTimeOut+0xc0>)
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	429a      	cmp	r2, r3
 8004d38:	d007      	beq.n	8004d4a <xTaskCheckForTimeOut+0x82>
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	685b      	ldr	r3, [r3, #4]
 8004d3e:	69ba      	ldr	r2, [r7, #24]
 8004d40:	429a      	cmp	r2, r3
 8004d42:	d302      	bcc.n	8004d4a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004d44:	2301      	movs	r3, #1
 8004d46:	61fb      	str	r3, [r7, #28]
 8004d48:	e015      	b.n	8004d76 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004d4a:	683b      	ldr	r3, [r7, #0]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	697a      	ldr	r2, [r7, #20]
 8004d50:	429a      	cmp	r2, r3
 8004d52:	d20b      	bcs.n	8004d6c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004d54:	683b      	ldr	r3, [r7, #0]
 8004d56:	681a      	ldr	r2, [r3, #0]
 8004d58:	697b      	ldr	r3, [r7, #20]
 8004d5a:	1ad2      	subs	r2, r2, r3
 8004d5c:	683b      	ldr	r3, [r7, #0]
 8004d5e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f7ff ff9b 	bl	8004c9c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004d66:	2300      	movs	r3, #0
 8004d68:	61fb      	str	r3, [r7, #28]
 8004d6a:	e004      	b.n	8004d76 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004d72:	2301      	movs	r3, #1
 8004d74:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004d76:	f000 fec5 	bl	8005b04 <vPortExitCritical>

	return xReturn;
 8004d7a:	69fb      	ldr	r3, [r7, #28]
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3720      	adds	r7, #32
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}
 8004d84:	200010c0 	.word	0x200010c0
 8004d88:	200010d4 	.word	0x200010d4

08004d8c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004d90:	4b03      	ldr	r3, [pc, #12]	; (8004da0 <vTaskMissedYield+0x14>)
 8004d92:	2201      	movs	r2, #1
 8004d94:	601a      	str	r2, [r3, #0]
}
 8004d96:	bf00      	nop
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	200010d0 	.word	0x200010d0

08004da4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004dac:	f000 f852 	bl	8004e54 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004db0:	4b06      	ldr	r3, [pc, #24]	; (8004dcc <prvIdleTask+0x28>)
 8004db2:	681b      	ldr	r3, [r3, #0]
 8004db4:	2b01      	cmp	r3, #1
 8004db6:	d9f9      	bls.n	8004dac <prvIdleTask+0x8>
			{
				taskYIELD();
 8004db8:	4b05      	ldr	r3, [pc, #20]	; (8004dd0 <prvIdleTask+0x2c>)
 8004dba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004dbe:	601a      	str	r2, [r3, #0]
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004dc8:	e7f0      	b.n	8004dac <prvIdleTask+0x8>
 8004dca:	bf00      	nop
 8004dcc:	20000bec 	.word	0x20000bec
 8004dd0:	e000ed04 	.word	0xe000ed04

08004dd4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b082      	sub	sp, #8
 8004dd8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004dda:	2300      	movs	r3, #0
 8004ddc:	607b      	str	r3, [r7, #4]
 8004dde:	e00c      	b.n	8004dfa <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004de0:	687a      	ldr	r2, [r7, #4]
 8004de2:	4613      	mov	r3, r2
 8004de4:	009b      	lsls	r3, r3, #2
 8004de6:	4413      	add	r3, r2
 8004de8:	009b      	lsls	r3, r3, #2
 8004dea:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <prvInitialiseTaskLists+0x60>)
 8004dec:	4413      	add	r3, r2
 8004dee:	4618      	mov	r0, r3
 8004df0:	f7fe fca6 	bl	8003740 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	3301      	adds	r3, #1
 8004df8:	607b      	str	r3, [r7, #4]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2b37      	cmp	r3, #55	; 0x37
 8004dfe:	d9ef      	bls.n	8004de0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004e00:	480d      	ldr	r0, [pc, #52]	; (8004e38 <prvInitialiseTaskLists+0x64>)
 8004e02:	f7fe fc9d 	bl	8003740 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004e06:	480d      	ldr	r0, [pc, #52]	; (8004e3c <prvInitialiseTaskLists+0x68>)
 8004e08:	f7fe fc9a 	bl	8003740 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004e0c:	480c      	ldr	r0, [pc, #48]	; (8004e40 <prvInitialiseTaskLists+0x6c>)
 8004e0e:	f7fe fc97 	bl	8003740 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004e12:	480c      	ldr	r0, [pc, #48]	; (8004e44 <prvInitialiseTaskLists+0x70>)
 8004e14:	f7fe fc94 	bl	8003740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004e18:	480b      	ldr	r0, [pc, #44]	; (8004e48 <prvInitialiseTaskLists+0x74>)
 8004e1a:	f7fe fc91 	bl	8003740 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004e1e:	4b0b      	ldr	r3, [pc, #44]	; (8004e4c <prvInitialiseTaskLists+0x78>)
 8004e20:	4a05      	ldr	r2, [pc, #20]	; (8004e38 <prvInitialiseTaskLists+0x64>)
 8004e22:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004e24:	4b0a      	ldr	r3, [pc, #40]	; (8004e50 <prvInitialiseTaskLists+0x7c>)
 8004e26:	4a05      	ldr	r2, [pc, #20]	; (8004e3c <prvInitialiseTaskLists+0x68>)
 8004e28:	601a      	str	r2, [r3, #0]
}
 8004e2a:	bf00      	nop
 8004e2c:	3708      	adds	r7, #8
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	bd80      	pop	{r7, pc}
 8004e32:	bf00      	nop
 8004e34:	20000bec 	.word	0x20000bec
 8004e38:	2000104c 	.word	0x2000104c
 8004e3c:	20001060 	.word	0x20001060
 8004e40:	2000107c 	.word	0x2000107c
 8004e44:	20001090 	.word	0x20001090
 8004e48:	200010a8 	.word	0x200010a8
 8004e4c:	20001074 	.word	0x20001074
 8004e50:	20001078 	.word	0x20001078

08004e54 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004e54:	b580      	push	{r7, lr}
 8004e56:	b082      	sub	sp, #8
 8004e58:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e5a:	e019      	b.n	8004e90 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004e5c:	f000 fe22 	bl	8005aa4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004e60:	4b10      	ldr	r3, [pc, #64]	; (8004ea4 <prvCheckTasksWaitingTermination+0x50>)
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	68db      	ldr	r3, [r3, #12]
 8004e66:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	3304      	adds	r3, #4
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f7fe fcf1 	bl	8003854 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004e72:	4b0d      	ldr	r3, [pc, #52]	; (8004ea8 <prvCheckTasksWaitingTermination+0x54>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	3b01      	subs	r3, #1
 8004e78:	4a0b      	ldr	r2, [pc, #44]	; (8004ea8 <prvCheckTasksWaitingTermination+0x54>)
 8004e7a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004e7c:	4b0b      	ldr	r3, [pc, #44]	; (8004eac <prvCheckTasksWaitingTermination+0x58>)
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	3b01      	subs	r3, #1
 8004e82:	4a0a      	ldr	r2, [pc, #40]	; (8004eac <prvCheckTasksWaitingTermination+0x58>)
 8004e84:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004e86:	f000 fe3d 	bl	8005b04 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f000 f848 	bl	8004f20 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004e90:	4b06      	ldr	r3, [pc, #24]	; (8004eac <prvCheckTasksWaitingTermination+0x58>)
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d1e1      	bne.n	8004e5c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004e98:	bf00      	nop
 8004e9a:	bf00      	nop
 8004e9c:	3708      	adds	r7, #8
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	bd80      	pop	{r7, pc}
 8004ea2:	bf00      	nop
 8004ea4:	20001090 	.word	0x20001090
 8004ea8:	200010bc 	.word	0x200010bc
 8004eac:	200010a4 	.word	0x200010a4

08004eb0 <prvTaskCheckFreeStackSpace>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark == 1 ) || ( INCLUDE_uxTaskGetStackHighWaterMark2 == 1 ) )

	static configSTACK_DEPTH_TYPE prvTaskCheckFreeStackSpace( const uint8_t * pucStackByte )
	{
 8004eb0:	b480      	push	{r7}
 8004eb2:	b085      	sub	sp, #20
 8004eb4:	af00      	add	r7, sp, #0
 8004eb6:	6078      	str	r0, [r7, #4]
	uint32_t ulCount = 0U;
 8004eb8:	2300      	movs	r3, #0
 8004eba:	60fb      	str	r3, [r7, #12]

		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004ebc:	e005      	b.n	8004eca <prvTaskCheckFreeStackSpace+0x1a>
		{
			pucStackByte -= portSTACK_GROWTH;
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	3301      	adds	r3, #1
 8004ec2:	607b      	str	r3, [r7, #4]
			ulCount++;
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	3301      	adds	r3, #1
 8004ec8:	60fb      	str	r3, [r7, #12]
		while( *pucStackByte == ( uint8_t ) tskSTACK_FILL_BYTE )
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	781b      	ldrb	r3, [r3, #0]
 8004ece:	2ba5      	cmp	r3, #165	; 0xa5
 8004ed0:	d0f5      	beq.n	8004ebe <prvTaskCheckFreeStackSpace+0xe>
		}

		ulCount /= ( uint32_t ) sizeof( StackType_t ); /*lint !e961 Casting is not redundant on smaller architectures. */
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	089b      	lsrs	r3, r3, #2
 8004ed6:	60fb      	str	r3, [r7, #12]

		return ( configSTACK_DEPTH_TYPE ) ulCount;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	b29b      	uxth	r3, r3
	}
 8004edc:	4618      	mov	r0, r3
 8004ede:	3714      	adds	r7, #20
 8004ee0:	46bd      	mov	sp, r7
 8004ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ee6:	4770      	bx	lr

08004ee8 <uxTaskGetStackHighWaterMark>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_uxTaskGetStackHighWaterMark == 1 )

	UBaseType_t uxTaskGetStackHighWaterMark( TaskHandle_t xTask )
	{
 8004ee8:	b580      	push	{r7, lr}
 8004eea:	b086      	sub	sp, #24
 8004eec:	af00      	add	r7, sp, #0
 8004eee:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	uint8_t *pucEndOfStack;
	UBaseType_t uxReturn;

		pxTCB = prvGetTCBFromHandle( xTask );
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d102      	bne.n	8004efc <uxTaskGetStackHighWaterMark+0x14>
 8004ef6:	4b09      	ldr	r3, [pc, #36]	; (8004f1c <uxTaskGetStackHighWaterMark+0x34>)
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	e000      	b.n	8004efe <uxTaskGetStackHighWaterMark+0x16>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	617b      	str	r3, [r7, #20]

		#if portSTACK_GROWTH < 0
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxStack;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f04:	613b      	str	r3, [r7, #16]
		{
			pucEndOfStack = ( uint8_t * ) pxTCB->pxEndOfStack;
		}
		#endif

		uxReturn = ( UBaseType_t ) prvTaskCheckFreeStackSpace( pucEndOfStack );
 8004f06:	6938      	ldr	r0, [r7, #16]
 8004f08:	f7ff ffd2 	bl	8004eb0 <prvTaskCheckFreeStackSpace>
 8004f0c:	4603      	mov	r3, r0
 8004f0e:	60fb      	str	r3, [r7, #12]

		return uxReturn;
 8004f10:	68fb      	ldr	r3, [r7, #12]
	}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3718      	adds	r7, #24
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	20000be8 	.word	0x20000be8

08004f20 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004f20:	b580      	push	{r7, lr}
 8004f22:	b084      	sub	sp, #16
 8004f24:	af00      	add	r7, sp, #0
 8004f26:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	3354      	adds	r3, #84	; 0x54
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f001 fab9 	bl	80064a4 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d108      	bne.n	8004f4e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004f40:	4618      	mov	r0, r3
 8004f42:	f000 ff9d 	bl	8005e80 <vPortFree>
				vPortFree( pxTCB );
 8004f46:	6878      	ldr	r0, [r7, #4]
 8004f48:	f000 ff9a 	bl	8005e80 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004f4c:	e018      	b.n	8004f80 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f54:	2b01      	cmp	r3, #1
 8004f56:	d103      	bne.n	8004f60 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8004f58:	6878      	ldr	r0, [r7, #4]
 8004f5a:	f000 ff91 	bl	8005e80 <vPortFree>
	}
 8004f5e:	e00f      	b.n	8004f80 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8004f66:	2b02      	cmp	r3, #2
 8004f68:	d00a      	beq.n	8004f80 <prvDeleteTCB+0x60>
	__asm volatile
 8004f6a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f6e:	f383 8811 	msr	BASEPRI, r3
 8004f72:	f3bf 8f6f 	isb	sy
 8004f76:	f3bf 8f4f 	dsb	sy
 8004f7a:	60fb      	str	r3, [r7, #12]
}
 8004f7c:	bf00      	nop
 8004f7e:	e7fe      	b.n	8004f7e <prvDeleteTCB+0x5e>
	}
 8004f80:	bf00      	nop
 8004f82:	3710      	adds	r7, #16
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004f8e:	4b0c      	ldr	r3, [pc, #48]	; (8004fc0 <prvResetNextTaskUnblockTime+0x38>)
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d104      	bne.n	8004fa2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004f98:	4b0a      	ldr	r3, [pc, #40]	; (8004fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8004f9a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004f9e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004fa0:	e008      	b.n	8004fb4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004fa2:	4b07      	ldr	r3, [pc, #28]	; (8004fc0 <prvResetNextTaskUnblockTime+0x38>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	68db      	ldr	r3, [r3, #12]
 8004fa8:	68db      	ldr	r3, [r3, #12]
 8004faa:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	685b      	ldr	r3, [r3, #4]
 8004fb0:	4a04      	ldr	r2, [pc, #16]	; (8004fc4 <prvResetNextTaskUnblockTime+0x3c>)
 8004fb2:	6013      	str	r3, [r2, #0]
}
 8004fb4:	bf00      	nop
 8004fb6:	370c      	adds	r7, #12
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fbe:	4770      	bx	lr
 8004fc0:	20001074 	.word	0x20001074
 8004fc4:	200010dc 	.word	0x200010dc

08004fc8 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 8004fce:	4b05      	ldr	r3, [pc, #20]	; (8004fe4 <xTaskGetCurrentTaskHandle+0x1c>)
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	607b      	str	r3, [r7, #4]

		return xReturn;
 8004fd4:	687b      	ldr	r3, [r7, #4]
	}
 8004fd6:	4618      	mov	r0, r3
 8004fd8:	370c      	adds	r7, #12
 8004fda:	46bd      	mov	sp, r7
 8004fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe0:	4770      	bx	lr
 8004fe2:	bf00      	nop
 8004fe4:	20000be8 	.word	0x20000be8

08004fe8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004fee:	4b0b      	ldr	r3, [pc, #44]	; (800501c <xTaskGetSchedulerState+0x34>)
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	d102      	bne.n	8004ffc <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	607b      	str	r3, [r7, #4]
 8004ffa:	e008      	b.n	800500e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004ffc:	4b08      	ldr	r3, [pc, #32]	; (8005020 <xTaskGetSchedulerState+0x38>)
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d102      	bne.n	800500a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005004:	2302      	movs	r3, #2
 8005006:	607b      	str	r3, [r7, #4]
 8005008:	e001      	b.n	800500e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800500a:	2300      	movs	r3, #0
 800500c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800500e:	687b      	ldr	r3, [r7, #4]
	}
 8005010:	4618      	mov	r0, r3
 8005012:	370c      	adds	r7, #12
 8005014:	46bd      	mov	sp, r7
 8005016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501a:	4770      	bx	lr
 800501c:	200010c8 	.word	0x200010c8
 8005020:	200010e4 	.word	0x200010e4

08005024 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8005024:	b580      	push	{r7, lr}
 8005026:	b086      	sub	sp, #24
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8005030:	2300      	movs	r3, #0
 8005032:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d056      	beq.n	80050e8 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800503a:	4b2e      	ldr	r3, [pc, #184]	; (80050f4 <xTaskPriorityDisinherit+0xd0>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	693a      	ldr	r2, [r7, #16]
 8005040:	429a      	cmp	r2, r3
 8005042:	d00a      	beq.n	800505a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8005044:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005048:	f383 8811 	msr	BASEPRI, r3
 800504c:	f3bf 8f6f 	isb	sy
 8005050:	f3bf 8f4f 	dsb	sy
 8005054:	60fb      	str	r3, [r7, #12]
}
 8005056:	bf00      	nop
 8005058:	e7fe      	b.n	8005058 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800505e:	2b00      	cmp	r3, #0
 8005060:	d10a      	bne.n	8005078 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8005062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005066:	f383 8811 	msr	BASEPRI, r3
 800506a:	f3bf 8f6f 	isb	sy
 800506e:	f3bf 8f4f 	dsb	sy
 8005072:	60bb      	str	r3, [r7, #8]
}
 8005074:	bf00      	nop
 8005076:	e7fe      	b.n	8005076 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800507c:	1e5a      	subs	r2, r3, #1
 800507e:	693b      	ldr	r3, [r7, #16]
 8005080:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8005082:	693b      	ldr	r3, [r7, #16]
 8005084:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005086:	693b      	ldr	r3, [r7, #16]
 8005088:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800508a:	429a      	cmp	r2, r3
 800508c:	d02c      	beq.n	80050e8 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800508e:	693b      	ldr	r3, [r7, #16]
 8005090:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005092:	2b00      	cmp	r3, #0
 8005094:	d128      	bne.n	80050e8 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005096:	693b      	ldr	r3, [r7, #16]
 8005098:	3304      	adds	r3, #4
 800509a:	4618      	mov	r0, r3
 800509c:	f7fe fbda 	bl	8003854 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80050a0:	693b      	ldr	r3, [r7, #16]
 80050a2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80050a4:	693b      	ldr	r3, [r7, #16]
 80050a6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80050a8:	693b      	ldr	r3, [r7, #16]
 80050aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050ac:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050b8:	4b0f      	ldr	r3, [pc, #60]	; (80050f8 <xTaskPriorityDisinherit+0xd4>)
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	429a      	cmp	r2, r3
 80050be:	d903      	bls.n	80050c8 <xTaskPriorityDisinherit+0xa4>
 80050c0:	693b      	ldr	r3, [r7, #16]
 80050c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80050c4:	4a0c      	ldr	r2, [pc, #48]	; (80050f8 <xTaskPriorityDisinherit+0xd4>)
 80050c6:	6013      	str	r3, [r2, #0]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	4a09      	ldr	r2, [pc, #36]	; (80050fc <xTaskPriorityDisinherit+0xd8>)
 80050d6:	441a      	add	r2, r3
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	3304      	adds	r3, #4
 80050dc:	4619      	mov	r1, r3
 80050de:	4610      	mov	r0, r2
 80050e0:	f7fe fb5b 	bl	800379a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80050e4:	2301      	movs	r3, #1
 80050e6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80050e8:	697b      	ldr	r3, [r7, #20]
	}
 80050ea:	4618      	mov	r0, r3
 80050ec:	3718      	adds	r7, #24
 80050ee:	46bd      	mov	sp, r7
 80050f0:	bd80      	pop	{r7, pc}
 80050f2:	bf00      	nop
 80050f4:	20000be8 	.word	0x20000be8
 80050f8:	200010c4 	.word	0x200010c4
 80050fc:	20000bec 	.word	0x20000bec

08005100 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800510a:	4b21      	ldr	r3, [pc, #132]	; (8005190 <prvAddCurrentTaskToDelayedList+0x90>)
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005110:	4b20      	ldr	r3, [pc, #128]	; (8005194 <prvAddCurrentTaskToDelayedList+0x94>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	3304      	adds	r3, #4
 8005116:	4618      	mov	r0, r3
 8005118:	f7fe fb9c 	bl	8003854 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005122:	d10a      	bne.n	800513a <prvAddCurrentTaskToDelayedList+0x3a>
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	2b00      	cmp	r3, #0
 8005128:	d007      	beq.n	800513a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800512a:	4b1a      	ldr	r3, [pc, #104]	; (8005194 <prvAddCurrentTaskToDelayedList+0x94>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3304      	adds	r3, #4
 8005130:	4619      	mov	r1, r3
 8005132:	4819      	ldr	r0, [pc, #100]	; (8005198 <prvAddCurrentTaskToDelayedList+0x98>)
 8005134:	f7fe fb31 	bl	800379a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8005138:	e026      	b.n	8005188 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800513a:	68fa      	ldr	r2, [r7, #12]
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4413      	add	r3, r2
 8005140:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005142:	4b14      	ldr	r3, [pc, #80]	; (8005194 <prvAddCurrentTaskToDelayedList+0x94>)
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800514a:	68ba      	ldr	r2, [r7, #8]
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	429a      	cmp	r2, r3
 8005150:	d209      	bcs.n	8005166 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005152:	4b12      	ldr	r3, [pc, #72]	; (800519c <prvAddCurrentTaskToDelayedList+0x9c>)
 8005154:	681a      	ldr	r2, [r3, #0]
 8005156:	4b0f      	ldr	r3, [pc, #60]	; (8005194 <prvAddCurrentTaskToDelayedList+0x94>)
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3304      	adds	r3, #4
 800515c:	4619      	mov	r1, r3
 800515e:	4610      	mov	r0, r2
 8005160:	f7fe fb3f 	bl	80037e2 <vListInsert>
}
 8005164:	e010      	b.n	8005188 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005166:	4b0e      	ldr	r3, [pc, #56]	; (80051a0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8005168:	681a      	ldr	r2, [r3, #0]
 800516a:	4b0a      	ldr	r3, [pc, #40]	; (8005194 <prvAddCurrentTaskToDelayedList+0x94>)
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	3304      	adds	r3, #4
 8005170:	4619      	mov	r1, r3
 8005172:	4610      	mov	r0, r2
 8005174:	f7fe fb35 	bl	80037e2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005178:	4b0a      	ldr	r3, [pc, #40]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	d202      	bcs.n	8005188 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8005182:	4a08      	ldr	r2, [pc, #32]	; (80051a4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005184:	68bb      	ldr	r3, [r7, #8]
 8005186:	6013      	str	r3, [r2, #0]
}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	200010c0 	.word	0x200010c0
 8005194:	20000be8 	.word	0x20000be8
 8005198:	200010a8 	.word	0x200010a8
 800519c:	20001078 	.word	0x20001078
 80051a0:	20001074 	.word	0x20001074
 80051a4:	200010dc 	.word	0x200010dc

080051a8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80051a8:	b580      	push	{r7, lr}
 80051aa:	b08a      	sub	sp, #40	; 0x28
 80051ac:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80051b2:	f000 fb07 	bl	80057c4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80051b6:	4b1c      	ldr	r3, [pc, #112]	; (8005228 <xTimerCreateTimerTask+0x80>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d021      	beq.n	8005202 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80051be:	2300      	movs	r3, #0
 80051c0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80051c2:	2300      	movs	r3, #0
 80051c4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80051c6:	1d3a      	adds	r2, r7, #4
 80051c8:	f107 0108 	add.w	r1, r7, #8
 80051cc:	f107 030c 	add.w	r3, r7, #12
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7fe fa9b 	bl	800370c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80051d6:	6879      	ldr	r1, [r7, #4]
 80051d8:	68bb      	ldr	r3, [r7, #8]
 80051da:	68fa      	ldr	r2, [r7, #12]
 80051dc:	9202      	str	r2, [sp, #8]
 80051de:	9301      	str	r3, [sp, #4]
 80051e0:	2302      	movs	r3, #2
 80051e2:	9300      	str	r3, [sp, #0]
 80051e4:	2300      	movs	r3, #0
 80051e6:	460a      	mov	r2, r1
 80051e8:	4910      	ldr	r1, [pc, #64]	; (800522c <xTimerCreateTimerTask+0x84>)
 80051ea:	4811      	ldr	r0, [pc, #68]	; (8005230 <xTimerCreateTimerTask+0x88>)
 80051ec:	f7ff f848 	bl	8004280 <xTaskCreateStatic>
 80051f0:	4603      	mov	r3, r0
 80051f2:	4a10      	ldr	r2, [pc, #64]	; (8005234 <xTimerCreateTimerTask+0x8c>)
 80051f4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80051f6:	4b0f      	ldr	r3, [pc, #60]	; (8005234 <xTimerCreateTimerTask+0x8c>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d001      	beq.n	8005202 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80051fe:	2301      	movs	r3, #1
 8005200:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8005202:	697b      	ldr	r3, [r7, #20]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10a      	bne.n	800521e <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	; 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	613b      	str	r3, [r7, #16]
}
 800521a:	bf00      	nop
 800521c:	e7fe      	b.n	800521c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800521e:	697b      	ldr	r3, [r7, #20]
}
 8005220:	4618      	mov	r0, r3
 8005222:	3718      	adds	r7, #24
 8005224:	46bd      	mov	sp, r7
 8005226:	bd80      	pop	{r7, pc}
 8005228:	20001118 	.word	0x20001118
 800522c:	08007194 	.word	0x08007194
 8005230:	0800536d 	.word	0x0800536d
 8005234:	2000111c 	.word	0x2000111c

08005238 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b08a      	sub	sp, #40	; 0x28
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	607a      	str	r2, [r7, #4]
 8005244:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8005246:	2300      	movs	r3, #0
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d10a      	bne.n	8005266 <xTimerGenericCommand+0x2e>
	__asm volatile
 8005250:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005254:	f383 8811 	msr	BASEPRI, r3
 8005258:	f3bf 8f6f 	isb	sy
 800525c:	f3bf 8f4f 	dsb	sy
 8005260:	623b      	str	r3, [r7, #32]
}
 8005262:	bf00      	nop
 8005264:	e7fe      	b.n	8005264 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8005266:	4b1a      	ldr	r3, [pc, #104]	; (80052d0 <xTimerGenericCommand+0x98>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d02a      	beq.n	80052c4 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b05      	cmp	r3, #5
 800527e:	dc18      	bgt.n	80052b2 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8005280:	f7ff feb2 	bl	8004fe8 <xTaskGetSchedulerState>
 8005284:	4603      	mov	r3, r0
 8005286:	2b02      	cmp	r3, #2
 8005288:	d109      	bne.n	800529e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800528a:	4b11      	ldr	r3, [pc, #68]	; (80052d0 <xTimerGenericCommand+0x98>)
 800528c:	6818      	ldr	r0, [r3, #0]
 800528e:	f107 0110 	add.w	r1, r7, #16
 8005292:	2300      	movs	r3, #0
 8005294:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005296:	f7fe fc0b 	bl	8003ab0 <xQueueGenericSend>
 800529a:	6278      	str	r0, [r7, #36]	; 0x24
 800529c:	e012      	b.n	80052c4 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800529e:	4b0c      	ldr	r3, [pc, #48]	; (80052d0 <xTimerGenericCommand+0x98>)
 80052a0:	6818      	ldr	r0, [r3, #0]
 80052a2:	f107 0110 	add.w	r1, r7, #16
 80052a6:	2300      	movs	r3, #0
 80052a8:	2200      	movs	r2, #0
 80052aa:	f7fe fc01 	bl	8003ab0 <xQueueGenericSend>
 80052ae:	6278      	str	r0, [r7, #36]	; 0x24
 80052b0:	e008      	b.n	80052c4 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80052b2:	4b07      	ldr	r3, [pc, #28]	; (80052d0 <xTimerGenericCommand+0x98>)
 80052b4:	6818      	ldr	r0, [r3, #0]
 80052b6:	f107 0110 	add.w	r1, r7, #16
 80052ba:	2300      	movs	r3, #0
 80052bc:	683a      	ldr	r2, [r7, #0]
 80052be:	f7fe fcf5 	bl	8003cac <xQueueGenericSendFromISR>
 80052c2:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80052c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80052c6:	4618      	mov	r0, r3
 80052c8:	3728      	adds	r7, #40	; 0x28
 80052ca:	46bd      	mov	sp, r7
 80052cc:	bd80      	pop	{r7, pc}
 80052ce:	bf00      	nop
 80052d0:	20001118 	.word	0x20001118

080052d4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80052d4:	b580      	push	{r7, lr}
 80052d6:	b088      	sub	sp, #32
 80052d8:	af02      	add	r7, sp, #8
 80052da:	6078      	str	r0, [r7, #4]
 80052dc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80052de:	4b22      	ldr	r3, [pc, #136]	; (8005368 <prvProcessExpiredTimer+0x94>)
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	68db      	ldr	r3, [r3, #12]
 80052e4:	68db      	ldr	r3, [r3, #12]
 80052e6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80052e8:	697b      	ldr	r3, [r7, #20]
 80052ea:	3304      	adds	r3, #4
 80052ec:	4618      	mov	r0, r3
 80052ee:	f7fe fab1 	bl	8003854 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052f8:	f003 0304 	and.w	r3, r3, #4
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d022      	beq.n	8005346 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8005300:	697b      	ldr	r3, [r7, #20]
 8005302:	699a      	ldr	r2, [r3, #24]
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	18d1      	adds	r1, r2, r3
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	683a      	ldr	r2, [r7, #0]
 800530c:	6978      	ldr	r0, [r7, #20]
 800530e:	f000 f8d1 	bl	80054b4 <prvInsertTimerInActiveList>
 8005312:	4603      	mov	r3, r0
 8005314:	2b00      	cmp	r3, #0
 8005316:	d01f      	beq.n	8005358 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005318:	2300      	movs	r3, #0
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	2300      	movs	r3, #0
 800531e:	687a      	ldr	r2, [r7, #4]
 8005320:	2100      	movs	r1, #0
 8005322:	6978      	ldr	r0, [r7, #20]
 8005324:	f7ff ff88 	bl	8005238 <xTimerGenericCommand>
 8005328:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800532a:	693b      	ldr	r3, [r7, #16]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d113      	bne.n	8005358 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	60fb      	str	r3, [r7, #12]
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005346:	697b      	ldr	r3, [r7, #20]
 8005348:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800534c:	f023 0301 	bic.w	r3, r3, #1
 8005350:	b2da      	uxtb	r2, r3
 8005352:	697b      	ldr	r3, [r7, #20]
 8005354:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005358:	697b      	ldr	r3, [r7, #20]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	6978      	ldr	r0, [r7, #20]
 800535e:	4798      	blx	r3
}
 8005360:	bf00      	nop
 8005362:	3718      	adds	r7, #24
 8005364:	46bd      	mov	sp, r7
 8005366:	bd80      	pop	{r7, pc}
 8005368:	20001110 	.word	0x20001110

0800536c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800536c:	b580      	push	{r7, lr}
 800536e:	b084      	sub	sp, #16
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005374:	f107 0308 	add.w	r3, r7, #8
 8005378:	4618      	mov	r0, r3
 800537a:	f000 f857 	bl	800542c <prvGetNextExpireTime>
 800537e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8005380:	68bb      	ldr	r3, [r7, #8]
 8005382:	4619      	mov	r1, r3
 8005384:	68f8      	ldr	r0, [r7, #12]
 8005386:	f000 f803 	bl	8005390 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800538a:	f000 f8d5 	bl	8005538 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800538e:	e7f1      	b.n	8005374 <prvTimerTask+0x8>

08005390 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b084      	sub	sp, #16
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
 8005398:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800539a:	f7ff f9cd 	bl	8004738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800539e:	f107 0308 	add.w	r3, r7, #8
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 f866 	bl	8005474 <prvSampleTimeNow>
 80053a8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d130      	bne.n	8005412 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80053b0:	683b      	ldr	r3, [r7, #0]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d10a      	bne.n	80053cc <prvProcessTimerOrBlockTask+0x3c>
 80053b6:	687a      	ldr	r2, [r7, #4]
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	429a      	cmp	r2, r3
 80053bc:	d806      	bhi.n	80053cc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80053be:	f7ff f9c9 	bl	8004754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80053c2:	68f9      	ldr	r1, [r7, #12]
 80053c4:	6878      	ldr	r0, [r7, #4]
 80053c6:	f7ff ff85 	bl	80052d4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80053ca:	e024      	b.n	8005416 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d008      	beq.n	80053e4 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80053d2:	4b13      	ldr	r3, [pc, #76]	; (8005420 <prvProcessTimerOrBlockTask+0x90>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d101      	bne.n	80053e0 <prvProcessTimerOrBlockTask+0x50>
 80053dc:	2301      	movs	r3, #1
 80053de:	e000      	b.n	80053e2 <prvProcessTimerOrBlockTask+0x52>
 80053e0:	2300      	movs	r3, #0
 80053e2:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80053e4:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <prvProcessTimerOrBlockTask+0x94>)
 80053e6:	6818      	ldr	r0, [r3, #0]
 80053e8:	687a      	ldr	r2, [r7, #4]
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	1ad3      	subs	r3, r2, r3
 80053ee:	683a      	ldr	r2, [r7, #0]
 80053f0:	4619      	mov	r1, r3
 80053f2:	f7fe ff11 	bl	8004218 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80053f6:	f7ff f9ad 	bl	8004754 <xTaskResumeAll>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10a      	bne.n	8005416 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8005400:	4b09      	ldr	r3, [pc, #36]	; (8005428 <prvProcessTimerOrBlockTask+0x98>)
 8005402:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005406:	601a      	str	r2, [r3, #0]
 8005408:	f3bf 8f4f 	dsb	sy
 800540c:	f3bf 8f6f 	isb	sy
}
 8005410:	e001      	b.n	8005416 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8005412:	f7ff f99f 	bl	8004754 <xTaskResumeAll>
}
 8005416:	bf00      	nop
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	20001114 	.word	0x20001114
 8005424:	20001118 	.word	0x20001118
 8005428:	e000ed04 	.word	0xe000ed04

0800542c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800542c:	b480      	push	{r7}
 800542e:	b085      	sub	sp, #20
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8005434:	4b0e      	ldr	r3, [pc, #56]	; (8005470 <prvGetNextExpireTime+0x44>)
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d101      	bne.n	8005442 <prvGetNextExpireTime+0x16>
 800543e:	2201      	movs	r2, #1
 8005440:	e000      	b.n	8005444 <prvGetNextExpireTime+0x18>
 8005442:	2200      	movs	r2, #0
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d105      	bne.n	800545c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005450:	4b07      	ldr	r3, [pc, #28]	; (8005470 <prvGetNextExpireTime+0x44>)
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	68db      	ldr	r3, [r3, #12]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	60fb      	str	r3, [r7, #12]
 800545a:	e001      	b.n	8005460 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800545c:	2300      	movs	r3, #0
 800545e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8005460:	68fb      	ldr	r3, [r7, #12]
}
 8005462:	4618      	mov	r0, r3
 8005464:	3714      	adds	r7, #20
 8005466:	46bd      	mov	sp, r7
 8005468:	f85d 7b04 	ldr.w	r7, [sp], #4
 800546c:	4770      	bx	lr
 800546e:	bf00      	nop
 8005470:	20001110 	.word	0x20001110

08005474 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005474:	b580      	push	{r7, lr}
 8005476:	b084      	sub	sp, #16
 8005478:	af00      	add	r7, sp, #0
 800547a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800547c:	f7ff fa08 	bl	8004890 <xTaskGetTickCount>
 8005480:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8005482:	4b0b      	ldr	r3, [pc, #44]	; (80054b0 <prvSampleTimeNow+0x3c>)
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	68fa      	ldr	r2, [r7, #12]
 8005488:	429a      	cmp	r2, r3
 800548a:	d205      	bcs.n	8005498 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800548c:	f000 f936 	bl	80056fc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	2201      	movs	r2, #1
 8005494:	601a      	str	r2, [r3, #0]
 8005496:	e002      	b.n	800549e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2200      	movs	r2, #0
 800549c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800549e:	4a04      	ldr	r2, [pc, #16]	; (80054b0 <prvSampleTimeNow+0x3c>)
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80054a4:	68fb      	ldr	r3, [r7, #12]
}
 80054a6:	4618      	mov	r0, r3
 80054a8:	3710      	adds	r7, #16
 80054aa:	46bd      	mov	sp, r7
 80054ac:	bd80      	pop	{r7, pc}
 80054ae:	bf00      	nop
 80054b0:	20001120 	.word	0x20001120

080054b4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80054b4:	b580      	push	{r7, lr}
 80054b6:	b086      	sub	sp, #24
 80054b8:	af00      	add	r7, sp, #0
 80054ba:	60f8      	str	r0, [r7, #12]
 80054bc:	60b9      	str	r1, [r7, #8]
 80054be:	607a      	str	r2, [r7, #4]
 80054c0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80054c2:	2300      	movs	r3, #0
 80054c4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	68ba      	ldr	r2, [r7, #8]
 80054ca:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	68fa      	ldr	r2, [r7, #12]
 80054d0:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	429a      	cmp	r2, r3
 80054d8:	d812      	bhi.n	8005500 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80054da:	687a      	ldr	r2, [r7, #4]
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	1ad2      	subs	r2, r2, r3
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d302      	bcc.n	80054ee <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80054e8:	2301      	movs	r3, #1
 80054ea:	617b      	str	r3, [r7, #20]
 80054ec:	e01b      	b.n	8005526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80054ee:	4b10      	ldr	r3, [pc, #64]	; (8005530 <prvInsertTimerInActiveList+0x7c>)
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	3304      	adds	r3, #4
 80054f6:	4619      	mov	r1, r3
 80054f8:	4610      	mov	r0, r2
 80054fa:	f7fe f972 	bl	80037e2 <vListInsert>
 80054fe:	e012      	b.n	8005526 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8005500:	687a      	ldr	r2, [r7, #4]
 8005502:	683b      	ldr	r3, [r7, #0]
 8005504:	429a      	cmp	r2, r3
 8005506:	d206      	bcs.n	8005516 <prvInsertTimerInActiveList+0x62>
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	683b      	ldr	r3, [r7, #0]
 800550c:	429a      	cmp	r2, r3
 800550e:	d302      	bcc.n	8005516 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8005510:	2301      	movs	r3, #1
 8005512:	617b      	str	r3, [r7, #20]
 8005514:	e007      	b.n	8005526 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005516:	4b07      	ldr	r3, [pc, #28]	; (8005534 <prvInsertTimerInActiveList+0x80>)
 8005518:	681a      	ldr	r2, [r3, #0]
 800551a:	68fb      	ldr	r3, [r7, #12]
 800551c:	3304      	adds	r3, #4
 800551e:	4619      	mov	r1, r3
 8005520:	4610      	mov	r0, r2
 8005522:	f7fe f95e 	bl	80037e2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8005526:	697b      	ldr	r3, [r7, #20]
}
 8005528:	4618      	mov	r0, r3
 800552a:	3718      	adds	r7, #24
 800552c:	46bd      	mov	sp, r7
 800552e:	bd80      	pop	{r7, pc}
 8005530:	20001114 	.word	0x20001114
 8005534:	20001110 	.word	0x20001110

08005538 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b08e      	sub	sp, #56	; 0x38
 800553c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800553e:	e0ca      	b.n	80056d6 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	2b00      	cmp	r3, #0
 8005544:	da18      	bge.n	8005578 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8005546:	1d3b      	adds	r3, r7, #4
 8005548:	3304      	adds	r3, #4
 800554a:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800554c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800554e:	2b00      	cmp	r3, #0
 8005550:	d10a      	bne.n	8005568 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8005552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005556:	f383 8811 	msr	BASEPRI, r3
 800555a:	f3bf 8f6f 	isb	sy
 800555e:	f3bf 8f4f 	dsb	sy
 8005562:	61fb      	str	r3, [r7, #28]
}
 8005564:	bf00      	nop
 8005566:	e7fe      	b.n	8005566 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8005568:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800556e:	6850      	ldr	r0, [r2, #4]
 8005570:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005572:	6892      	ldr	r2, [r2, #8]
 8005574:	4611      	mov	r1, r2
 8005576:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	2b00      	cmp	r3, #0
 800557c:	f2c0 80aa 	blt.w	80056d4 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8005580:	68fb      	ldr	r3, [r7, #12]
 8005582:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005584:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005586:	695b      	ldr	r3, [r3, #20]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d004      	beq.n	8005596 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800558c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800558e:	3304      	adds	r3, #4
 8005590:	4618      	mov	r0, r3
 8005592:	f7fe f95f 	bl	8003854 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005596:	463b      	mov	r3, r7
 8005598:	4618      	mov	r0, r3
 800559a:	f7ff ff6b 	bl	8005474 <prvSampleTimeNow>
 800559e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	2b09      	cmp	r3, #9
 80055a4:	f200 8097 	bhi.w	80056d6 <prvProcessReceivedCommands+0x19e>
 80055a8:	a201      	add	r2, pc, #4	; (adr r2, 80055b0 <prvProcessReceivedCommands+0x78>)
 80055aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055ae:	bf00      	nop
 80055b0:	080055d9 	.word	0x080055d9
 80055b4:	080055d9 	.word	0x080055d9
 80055b8:	080055d9 	.word	0x080055d9
 80055bc:	0800564d 	.word	0x0800564d
 80055c0:	08005661 	.word	0x08005661
 80055c4:	080056ab 	.word	0x080056ab
 80055c8:	080055d9 	.word	0x080055d9
 80055cc:	080055d9 	.word	0x080055d9
 80055d0:	0800564d 	.word	0x0800564d
 80055d4:	08005661 	.word	0x08005661
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80055d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80055de:	f043 0301 	orr.w	r3, r3, #1
 80055e2:	b2da      	uxtb	r2, r3
 80055e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80055ea:	68ba      	ldr	r2, [r7, #8]
 80055ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ee:	699b      	ldr	r3, [r3, #24]
 80055f0:	18d1      	adds	r1, r2, r3
 80055f2:	68bb      	ldr	r3, [r7, #8]
 80055f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80055f8:	f7ff ff5c 	bl	80054b4 <prvInsertTimerInActiveList>
 80055fc:	4603      	mov	r3, r0
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d069      	beq.n	80056d6 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005602:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005604:	6a1b      	ldr	r3, [r3, #32]
 8005606:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005608:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800560a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800560c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005610:	f003 0304 	and.w	r3, r3, #4
 8005614:	2b00      	cmp	r3, #0
 8005616:	d05e      	beq.n	80056d6 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8005618:	68ba      	ldr	r2, [r7, #8]
 800561a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800561c:	699b      	ldr	r3, [r3, #24]
 800561e:	441a      	add	r2, r3
 8005620:	2300      	movs	r3, #0
 8005622:	9300      	str	r3, [sp, #0]
 8005624:	2300      	movs	r3, #0
 8005626:	2100      	movs	r1, #0
 8005628:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800562a:	f7ff fe05 	bl	8005238 <xTimerGenericCommand>
 800562e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8005630:	6a3b      	ldr	r3, [r7, #32]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d14f      	bne.n	80056d6 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8005636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800563a:	f383 8811 	msr	BASEPRI, r3
 800563e:	f3bf 8f6f 	isb	sy
 8005642:	f3bf 8f4f 	dsb	sy
 8005646:	61bb      	str	r3, [r7, #24]
}
 8005648:	bf00      	nop
 800564a:	e7fe      	b.n	800564a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800564c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800564e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005652:	f023 0301 	bic.w	r3, r3, #1
 8005656:	b2da      	uxtb	r2, r3
 8005658:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800565a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800565e:	e03a      	b.n	80056d6 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005660:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005662:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005666:	f043 0301 	orr.w	r3, r3, #1
 800566a:	b2da      	uxtb	r2, r3
 800566c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800566e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005676:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800567a:	699b      	ldr	r3, [r3, #24]
 800567c:	2b00      	cmp	r3, #0
 800567e:	d10a      	bne.n	8005696 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005680:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005684:	f383 8811 	msr	BASEPRI, r3
 8005688:	f3bf 8f6f 	isb	sy
 800568c:	f3bf 8f4f 	dsb	sy
 8005690:	617b      	str	r3, [r7, #20]
}
 8005692:	bf00      	nop
 8005694:	e7fe      	b.n	8005694 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005698:	699a      	ldr	r2, [r3, #24]
 800569a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800569c:	18d1      	adds	r1, r2, r3
 800569e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056a4:	f7ff ff06 	bl	80054b4 <prvInsertTimerInActiveList>
					break;
 80056a8:	e015      	b.n	80056d6 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80056aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056b0:	f003 0302 	and.w	r3, r3, #2
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d103      	bne.n	80056c0 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80056b8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80056ba:	f000 fbe1 	bl	8005e80 <vPortFree>
 80056be:	e00a      	b.n	80056d6 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056c2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056c6:	f023 0301 	bic.w	r3, r3, #1
 80056ca:	b2da      	uxtb	r2, r3
 80056cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80056ce:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80056d2:	e000      	b.n	80056d6 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 80056d4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80056d6:	4b08      	ldr	r3, [pc, #32]	; (80056f8 <prvProcessReceivedCommands+0x1c0>)
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	1d39      	adds	r1, r7, #4
 80056dc:	2200      	movs	r2, #0
 80056de:	4618      	mov	r0, r3
 80056e0:	f7fe fb80 	bl	8003de4 <xQueueReceive>
 80056e4:	4603      	mov	r3, r0
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	f47f af2a 	bne.w	8005540 <prvProcessReceivedCommands+0x8>
	}
}
 80056ec:	bf00      	nop
 80056ee:	bf00      	nop
 80056f0:	3730      	adds	r7, #48	; 0x30
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	20001118 	.word	0x20001118

080056fc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	b088      	sub	sp, #32
 8005700:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005702:	e048      	b.n	8005796 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005704:	4b2d      	ldr	r3, [pc, #180]	; (80057bc <prvSwitchTimerLists+0xc0>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800570e:	4b2b      	ldr	r3, [pc, #172]	; (80057bc <prvSwitchTimerLists+0xc0>)
 8005710:	681b      	ldr	r3, [r3, #0]
 8005712:	68db      	ldr	r3, [r3, #12]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	3304      	adds	r3, #4
 800571c:	4618      	mov	r0, r3
 800571e:	f7fe f899 	bl	8003854 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005722:	68fb      	ldr	r3, [r7, #12]
 8005724:	6a1b      	ldr	r3, [r3, #32]
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005730:	f003 0304 	and.w	r3, r3, #4
 8005734:	2b00      	cmp	r3, #0
 8005736:	d02e      	beq.n	8005796 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	699b      	ldr	r3, [r3, #24]
 800573c:	693a      	ldr	r2, [r7, #16]
 800573e:	4413      	add	r3, r2
 8005740:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005742:	68ba      	ldr	r2, [r7, #8]
 8005744:	693b      	ldr	r3, [r7, #16]
 8005746:	429a      	cmp	r2, r3
 8005748:	d90e      	bls.n	8005768 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800574a:	68fb      	ldr	r3, [r7, #12]
 800574c:	68ba      	ldr	r2, [r7, #8]
 800574e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	68fa      	ldr	r2, [r7, #12]
 8005754:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005756:	4b19      	ldr	r3, [pc, #100]	; (80057bc <prvSwitchTimerLists+0xc0>)
 8005758:	681a      	ldr	r2, [r3, #0]
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	3304      	adds	r3, #4
 800575e:	4619      	mov	r1, r3
 8005760:	4610      	mov	r0, r2
 8005762:	f7fe f83e 	bl	80037e2 <vListInsert>
 8005766:	e016      	b.n	8005796 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005768:	2300      	movs	r3, #0
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	2300      	movs	r3, #0
 800576e:	693a      	ldr	r2, [r7, #16]
 8005770:	2100      	movs	r1, #0
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f7ff fd60 	bl	8005238 <xTimerGenericCommand>
 8005778:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d10a      	bne.n	8005796 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005780:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005784:	f383 8811 	msr	BASEPRI, r3
 8005788:	f3bf 8f6f 	isb	sy
 800578c:	f3bf 8f4f 	dsb	sy
 8005790:	603b      	str	r3, [r7, #0]
}
 8005792:	bf00      	nop
 8005794:	e7fe      	b.n	8005794 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005796:	4b09      	ldr	r3, [pc, #36]	; (80057bc <prvSwitchTimerLists+0xc0>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	2b00      	cmp	r3, #0
 800579e:	d1b1      	bne.n	8005704 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80057a0:	4b06      	ldr	r3, [pc, #24]	; (80057bc <prvSwitchTimerLists+0xc0>)
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80057a6:	4b06      	ldr	r3, [pc, #24]	; (80057c0 <prvSwitchTimerLists+0xc4>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4a04      	ldr	r2, [pc, #16]	; (80057bc <prvSwitchTimerLists+0xc0>)
 80057ac:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80057ae:	4a04      	ldr	r2, [pc, #16]	; (80057c0 <prvSwitchTimerLists+0xc4>)
 80057b0:	697b      	ldr	r3, [r7, #20]
 80057b2:	6013      	str	r3, [r2, #0]
}
 80057b4:	bf00      	nop
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	20001110 	.word	0x20001110
 80057c0:	20001114 	.word	0x20001114

080057c4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80057c4:	b580      	push	{r7, lr}
 80057c6:	b082      	sub	sp, #8
 80057c8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80057ca:	f000 f96b 	bl	8005aa4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80057ce:	4b15      	ldr	r3, [pc, #84]	; (8005824 <prvCheckForValidListAndQueue+0x60>)
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d120      	bne.n	8005818 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80057d6:	4814      	ldr	r0, [pc, #80]	; (8005828 <prvCheckForValidListAndQueue+0x64>)
 80057d8:	f7fd ffb2 	bl	8003740 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80057dc:	4813      	ldr	r0, [pc, #76]	; (800582c <prvCheckForValidListAndQueue+0x68>)
 80057de:	f7fd ffaf 	bl	8003740 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80057e2:	4b13      	ldr	r3, [pc, #76]	; (8005830 <prvCheckForValidListAndQueue+0x6c>)
 80057e4:	4a10      	ldr	r2, [pc, #64]	; (8005828 <prvCheckForValidListAndQueue+0x64>)
 80057e6:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80057e8:	4b12      	ldr	r3, [pc, #72]	; (8005834 <prvCheckForValidListAndQueue+0x70>)
 80057ea:	4a10      	ldr	r2, [pc, #64]	; (800582c <prvCheckForValidListAndQueue+0x68>)
 80057ec:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80057ee:	2300      	movs	r3, #0
 80057f0:	9300      	str	r3, [sp, #0]
 80057f2:	4b11      	ldr	r3, [pc, #68]	; (8005838 <prvCheckForValidListAndQueue+0x74>)
 80057f4:	4a11      	ldr	r2, [pc, #68]	; (800583c <prvCheckForValidListAndQueue+0x78>)
 80057f6:	2110      	movs	r1, #16
 80057f8:	200a      	movs	r0, #10
 80057fa:	f7fe f8bd 	bl	8003978 <xQueueGenericCreateStatic>
 80057fe:	4603      	mov	r3, r0
 8005800:	4a08      	ldr	r2, [pc, #32]	; (8005824 <prvCheckForValidListAndQueue+0x60>)
 8005802:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005804:	4b07      	ldr	r3, [pc, #28]	; (8005824 <prvCheckForValidListAndQueue+0x60>)
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	2b00      	cmp	r3, #0
 800580a:	d005      	beq.n	8005818 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800580c:	4b05      	ldr	r3, [pc, #20]	; (8005824 <prvCheckForValidListAndQueue+0x60>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	490b      	ldr	r1, [pc, #44]	; (8005840 <prvCheckForValidListAndQueue+0x7c>)
 8005812:	4618      	mov	r0, r3
 8005814:	f7fe fcd6 	bl	80041c4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005818:	f000 f974 	bl	8005b04 <vPortExitCritical>
}
 800581c:	bf00      	nop
 800581e:	46bd      	mov	sp, r7
 8005820:	bd80      	pop	{r7, pc}
 8005822:	bf00      	nop
 8005824:	20001118 	.word	0x20001118
 8005828:	200010e8 	.word	0x200010e8
 800582c:	200010fc 	.word	0x200010fc
 8005830:	20001110 	.word	0x20001110
 8005834:	20001114 	.word	0x20001114
 8005838:	200011c4 	.word	0x200011c4
 800583c:	20001124 	.word	0x20001124
 8005840:	0800719c 	.word	0x0800719c

08005844 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005844:	b480      	push	{r7}
 8005846:	b085      	sub	sp, #20
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	3b04      	subs	r3, #4
 8005854:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800585c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	3b04      	subs	r3, #4
 8005862:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005864:	68bb      	ldr	r3, [r7, #8]
 8005866:	f023 0201 	bic.w	r2, r3, #1
 800586a:	68fb      	ldr	r3, [r7, #12]
 800586c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	3b04      	subs	r3, #4
 8005872:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005874:	4a0c      	ldr	r2, [pc, #48]	; (80058a8 <pxPortInitialiseStack+0x64>)
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	3b14      	subs	r3, #20
 800587e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005880:	687a      	ldr	r2, [r7, #4]
 8005882:	68fb      	ldr	r3, [r7, #12]
 8005884:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	3b04      	subs	r3, #4
 800588a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	f06f 0202 	mvn.w	r2, #2
 8005892:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	3b20      	subs	r3, #32
 8005898:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800589a:	68fb      	ldr	r3, [r7, #12]
}
 800589c:	4618      	mov	r0, r3
 800589e:	3714      	adds	r7, #20
 80058a0:	46bd      	mov	sp, r7
 80058a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058a6:	4770      	bx	lr
 80058a8:	080058ad 	.word	0x080058ad

080058ac <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80058ac:	b480      	push	{r7}
 80058ae:	b085      	sub	sp, #20
 80058b0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80058b2:	2300      	movs	r3, #0
 80058b4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80058b6:	4b12      	ldr	r3, [pc, #72]	; (8005900 <prvTaskExitError+0x54>)
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80058be:	d00a      	beq.n	80058d6 <prvTaskExitError+0x2a>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	60fb      	str	r3, [r7, #12]
}
 80058d2:	bf00      	nop
 80058d4:	e7fe      	b.n	80058d4 <prvTaskExitError+0x28>
	__asm volatile
 80058d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058da:	f383 8811 	msr	BASEPRI, r3
 80058de:	f3bf 8f6f 	isb	sy
 80058e2:	f3bf 8f4f 	dsb	sy
 80058e6:	60bb      	str	r3, [r7, #8]
}
 80058e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80058ea:	bf00      	nop
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	2b00      	cmp	r3, #0
 80058f0:	d0fc      	beq.n	80058ec <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80058f2:	bf00      	nop
 80058f4:	bf00      	nop
 80058f6:	3714      	adds	r7, #20
 80058f8:	46bd      	mov	sp, r7
 80058fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058fe:	4770      	bx	lr
 8005900:	2000000c 	.word	0x2000000c
	...

08005910 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005910:	4b07      	ldr	r3, [pc, #28]	; (8005930 <pxCurrentTCBConst2>)
 8005912:	6819      	ldr	r1, [r3, #0]
 8005914:	6808      	ldr	r0, [r1, #0]
 8005916:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800591a:	f380 8809 	msr	PSP, r0
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f04f 0000 	mov.w	r0, #0
 8005926:	f380 8811 	msr	BASEPRI, r0
 800592a:	4770      	bx	lr
 800592c:	f3af 8000 	nop.w

08005930 <pxCurrentTCBConst2>:
 8005930:	20000be8 	.word	0x20000be8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005934:	bf00      	nop
 8005936:	bf00      	nop

08005938 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005938:	4808      	ldr	r0, [pc, #32]	; (800595c <prvPortStartFirstTask+0x24>)
 800593a:	6800      	ldr	r0, [r0, #0]
 800593c:	6800      	ldr	r0, [r0, #0]
 800593e:	f380 8808 	msr	MSP, r0
 8005942:	f04f 0000 	mov.w	r0, #0
 8005946:	f380 8814 	msr	CONTROL, r0
 800594a:	b662      	cpsie	i
 800594c:	b661      	cpsie	f
 800594e:	f3bf 8f4f 	dsb	sy
 8005952:	f3bf 8f6f 	isb	sy
 8005956:	df00      	svc	0
 8005958:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800595a:	bf00      	nop
 800595c:	e000ed08 	.word	0xe000ed08

08005960 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005960:	b580      	push	{r7, lr}
 8005962:	b086      	sub	sp, #24
 8005964:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005966:	4b46      	ldr	r3, [pc, #280]	; (8005a80 <xPortStartScheduler+0x120>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	4a46      	ldr	r2, [pc, #280]	; (8005a84 <xPortStartScheduler+0x124>)
 800596c:	4293      	cmp	r3, r2
 800596e:	d10a      	bne.n	8005986 <xPortStartScheduler+0x26>
	__asm volatile
 8005970:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005974:	f383 8811 	msr	BASEPRI, r3
 8005978:	f3bf 8f6f 	isb	sy
 800597c:	f3bf 8f4f 	dsb	sy
 8005980:	613b      	str	r3, [r7, #16]
}
 8005982:	bf00      	nop
 8005984:	e7fe      	b.n	8005984 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005986:	4b3e      	ldr	r3, [pc, #248]	; (8005a80 <xPortStartScheduler+0x120>)
 8005988:	681b      	ldr	r3, [r3, #0]
 800598a:	4a3f      	ldr	r2, [pc, #252]	; (8005a88 <xPortStartScheduler+0x128>)
 800598c:	4293      	cmp	r3, r2
 800598e:	d10a      	bne.n	80059a6 <xPortStartScheduler+0x46>
	__asm volatile
 8005990:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005994:	f383 8811 	msr	BASEPRI, r3
 8005998:	f3bf 8f6f 	isb	sy
 800599c:	f3bf 8f4f 	dsb	sy
 80059a0:	60fb      	str	r3, [r7, #12]
}
 80059a2:	bf00      	nop
 80059a4:	e7fe      	b.n	80059a4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80059a6:	4b39      	ldr	r3, [pc, #228]	; (8005a8c <xPortStartScheduler+0x12c>)
 80059a8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80059aa:	697b      	ldr	r3, [r7, #20]
 80059ac:	781b      	ldrb	r3, [r3, #0]
 80059ae:	b2db      	uxtb	r3, r3
 80059b0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	22ff      	movs	r2, #255	; 0xff
 80059b6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80059b8:	697b      	ldr	r3, [r7, #20]
 80059ba:	781b      	ldrb	r3, [r3, #0]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80059c0:	78fb      	ldrb	r3, [r7, #3]
 80059c2:	b2db      	uxtb	r3, r3
 80059c4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80059c8:	b2da      	uxtb	r2, r3
 80059ca:	4b31      	ldr	r3, [pc, #196]	; (8005a90 <xPortStartScheduler+0x130>)
 80059cc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80059ce:	4b31      	ldr	r3, [pc, #196]	; (8005a94 <xPortStartScheduler+0x134>)
 80059d0:	2207      	movs	r2, #7
 80059d2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059d4:	e009      	b.n	80059ea <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80059d6:	4b2f      	ldr	r3, [pc, #188]	; (8005a94 <xPortStartScheduler+0x134>)
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	3b01      	subs	r3, #1
 80059dc:	4a2d      	ldr	r2, [pc, #180]	; (8005a94 <xPortStartScheduler+0x134>)
 80059de:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80059e0:	78fb      	ldrb	r3, [r7, #3]
 80059e2:	b2db      	uxtb	r3, r3
 80059e4:	005b      	lsls	r3, r3, #1
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80059ea:	78fb      	ldrb	r3, [r7, #3]
 80059ec:	b2db      	uxtb	r3, r3
 80059ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059f2:	2b80      	cmp	r3, #128	; 0x80
 80059f4:	d0ef      	beq.n	80059d6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80059f6:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <xPortStartScheduler+0x134>)
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	f1c3 0307 	rsb	r3, r3, #7
 80059fe:	2b04      	cmp	r3, #4
 8005a00:	d00a      	beq.n	8005a18 <xPortStartScheduler+0xb8>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	60bb      	str	r3, [r7, #8]
}
 8005a14:	bf00      	nop
 8005a16:	e7fe      	b.n	8005a16 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005a18:	4b1e      	ldr	r3, [pc, #120]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	021b      	lsls	r3, r3, #8
 8005a1e:	4a1d      	ldr	r2, [pc, #116]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a20:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005a22:	4b1c      	ldr	r3, [pc, #112]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005a2a:	4a1a      	ldr	r2, [pc, #104]	; (8005a94 <xPortStartScheduler+0x134>)
 8005a2c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	b2da      	uxtb	r2, r3
 8005a32:	697b      	ldr	r3, [r7, #20]
 8005a34:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005a36:	4b18      	ldr	r3, [pc, #96]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	4a17      	ldr	r2, [pc, #92]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a3c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005a40:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005a42:	4b15      	ldr	r3, [pc, #84]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	4a14      	ldr	r2, [pc, #80]	; (8005a98 <xPortStartScheduler+0x138>)
 8005a48:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005a4c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005a4e:	f000 f8dd 	bl	8005c0c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005a52:	4b12      	ldr	r3, [pc, #72]	; (8005a9c <xPortStartScheduler+0x13c>)
 8005a54:	2200      	movs	r2, #0
 8005a56:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005a58:	f000 f8fc 	bl	8005c54 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005a5c:	4b10      	ldr	r3, [pc, #64]	; (8005aa0 <xPortStartScheduler+0x140>)
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	4a0f      	ldr	r2, [pc, #60]	; (8005aa0 <xPortStartScheduler+0x140>)
 8005a62:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005a66:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005a68:	f7ff ff66 	bl	8005938 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005a6c:	f7fe fffe 	bl	8004a6c <vTaskSwitchContext>
	prvTaskExitError();
 8005a70:	f7ff ff1c 	bl	80058ac <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005a74:	2300      	movs	r3, #0
}
 8005a76:	4618      	mov	r0, r3
 8005a78:	3718      	adds	r7, #24
 8005a7a:	46bd      	mov	sp, r7
 8005a7c:	bd80      	pop	{r7, pc}
 8005a7e:	bf00      	nop
 8005a80:	e000ed00 	.word	0xe000ed00
 8005a84:	410fc271 	.word	0x410fc271
 8005a88:	410fc270 	.word	0x410fc270
 8005a8c:	e000e400 	.word	0xe000e400
 8005a90:	20001214 	.word	0x20001214
 8005a94:	20001218 	.word	0x20001218
 8005a98:	e000ed20 	.word	0xe000ed20
 8005a9c:	2000000c 	.word	0x2000000c
 8005aa0:	e000ef34 	.word	0xe000ef34

08005aa4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005aa4:	b480      	push	{r7}
 8005aa6:	b083      	sub	sp, #12
 8005aa8:	af00      	add	r7, sp, #0
	__asm volatile
 8005aaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aae:	f383 8811 	msr	BASEPRI, r3
 8005ab2:	f3bf 8f6f 	isb	sy
 8005ab6:	f3bf 8f4f 	dsb	sy
 8005aba:	607b      	str	r3, [r7, #4]
}
 8005abc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005abe:	4b0f      	ldr	r3, [pc, #60]	; (8005afc <vPortEnterCritical+0x58>)
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	3301      	adds	r3, #1
 8005ac4:	4a0d      	ldr	r2, [pc, #52]	; (8005afc <vPortEnterCritical+0x58>)
 8005ac6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005ac8:	4b0c      	ldr	r3, [pc, #48]	; (8005afc <vPortEnterCritical+0x58>)
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	2b01      	cmp	r3, #1
 8005ace:	d10f      	bne.n	8005af0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005ad0:	4b0b      	ldr	r3, [pc, #44]	; (8005b00 <vPortEnterCritical+0x5c>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	b2db      	uxtb	r3, r3
 8005ad6:	2b00      	cmp	r3, #0
 8005ad8:	d00a      	beq.n	8005af0 <vPortEnterCritical+0x4c>
	__asm volatile
 8005ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ade:	f383 8811 	msr	BASEPRI, r3
 8005ae2:	f3bf 8f6f 	isb	sy
 8005ae6:	f3bf 8f4f 	dsb	sy
 8005aea:	603b      	str	r3, [r7, #0]
}
 8005aec:	bf00      	nop
 8005aee:	e7fe      	b.n	8005aee <vPortEnterCritical+0x4a>
	}
}
 8005af0:	bf00      	nop
 8005af2:	370c      	adds	r7, #12
 8005af4:	46bd      	mov	sp, r7
 8005af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afa:	4770      	bx	lr
 8005afc:	2000000c 	.word	0x2000000c
 8005b00:	e000ed04 	.word	0xe000ed04

08005b04 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005b0a:	4b12      	ldr	r3, [pc, #72]	; (8005b54 <vPortExitCritical+0x50>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d10a      	bne.n	8005b28 <vPortExitCritical+0x24>
	__asm volatile
 8005b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b16:	f383 8811 	msr	BASEPRI, r3
 8005b1a:	f3bf 8f6f 	isb	sy
 8005b1e:	f3bf 8f4f 	dsb	sy
 8005b22:	607b      	str	r3, [r7, #4]
}
 8005b24:	bf00      	nop
 8005b26:	e7fe      	b.n	8005b26 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005b28:	4b0a      	ldr	r3, [pc, #40]	; (8005b54 <vPortExitCritical+0x50>)
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	3b01      	subs	r3, #1
 8005b2e:	4a09      	ldr	r2, [pc, #36]	; (8005b54 <vPortExitCritical+0x50>)
 8005b30:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005b32:	4b08      	ldr	r3, [pc, #32]	; (8005b54 <vPortExitCritical+0x50>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d105      	bne.n	8005b46 <vPortExitCritical+0x42>
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	f383 8811 	msr	BASEPRI, r3
}
 8005b44:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005b46:	bf00      	nop
 8005b48:	370c      	adds	r7, #12
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b50:	4770      	bx	lr
 8005b52:	bf00      	nop
 8005b54:	2000000c 	.word	0x2000000c
	...

08005b60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005b60:	f3ef 8009 	mrs	r0, PSP
 8005b64:	f3bf 8f6f 	isb	sy
 8005b68:	4b15      	ldr	r3, [pc, #84]	; (8005bc0 <pxCurrentTCBConst>)
 8005b6a:	681a      	ldr	r2, [r3, #0]
 8005b6c:	f01e 0f10 	tst.w	lr, #16
 8005b70:	bf08      	it	eq
 8005b72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005b76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005b7a:	6010      	str	r0, [r2, #0]
 8005b7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005b80:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005b84:	f380 8811 	msr	BASEPRI, r0
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
 8005b90:	f7fe ff6c 	bl	8004a6c <vTaskSwitchContext>
 8005b94:	f04f 0000 	mov.w	r0, #0
 8005b98:	f380 8811 	msr	BASEPRI, r0
 8005b9c:	bc09      	pop	{r0, r3}
 8005b9e:	6819      	ldr	r1, [r3, #0]
 8005ba0:	6808      	ldr	r0, [r1, #0]
 8005ba2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ba6:	f01e 0f10 	tst.w	lr, #16
 8005baa:	bf08      	it	eq
 8005bac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005bb0:	f380 8809 	msr	PSP, r0
 8005bb4:	f3bf 8f6f 	isb	sy
 8005bb8:	4770      	bx	lr
 8005bba:	bf00      	nop
 8005bbc:	f3af 8000 	nop.w

08005bc0 <pxCurrentTCBConst>:
 8005bc0:	20000be8 	.word	0x20000be8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop

08005bc8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b082      	sub	sp, #8
 8005bcc:	af00      	add	r7, sp, #0
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	607b      	str	r3, [r7, #4]
}
 8005be0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005be2:	f7fe fe89 	bl	80048f8 <xTaskIncrementTick>
 8005be6:	4603      	mov	r3, r0
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d003      	beq.n	8005bf4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005bec:	4b06      	ldr	r3, [pc, #24]	; (8005c08 <xPortSysTickHandler+0x40>)
 8005bee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005bf2:	601a      	str	r2, [r3, #0]
 8005bf4:	2300      	movs	r3, #0
 8005bf6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	f383 8811 	msr	BASEPRI, r3
}
 8005bfe:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005c00:	bf00      	nop
 8005c02:	3708      	adds	r7, #8
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}
 8005c08:	e000ed04 	.word	0xe000ed04

08005c0c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005c10:	4b0b      	ldr	r3, [pc, #44]	; (8005c40 <vPortSetupTimerInterrupt+0x34>)
 8005c12:	2200      	movs	r2, #0
 8005c14:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005c16:	4b0b      	ldr	r3, [pc, #44]	; (8005c44 <vPortSetupTimerInterrupt+0x38>)
 8005c18:	2200      	movs	r2, #0
 8005c1a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005c1c:	4b0a      	ldr	r3, [pc, #40]	; (8005c48 <vPortSetupTimerInterrupt+0x3c>)
 8005c1e:	681b      	ldr	r3, [r3, #0]
 8005c20:	4a0a      	ldr	r2, [pc, #40]	; (8005c4c <vPortSetupTimerInterrupt+0x40>)
 8005c22:	fba2 2303 	umull	r2, r3, r2, r3
 8005c26:	099b      	lsrs	r3, r3, #6
 8005c28:	4a09      	ldr	r2, [pc, #36]	; (8005c50 <vPortSetupTimerInterrupt+0x44>)
 8005c2a:	3b01      	subs	r3, #1
 8005c2c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005c2e:	4b04      	ldr	r3, [pc, #16]	; (8005c40 <vPortSetupTimerInterrupt+0x34>)
 8005c30:	2207      	movs	r2, #7
 8005c32:	601a      	str	r2, [r3, #0]
}
 8005c34:	bf00      	nop
 8005c36:	46bd      	mov	sp, r7
 8005c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c3c:	4770      	bx	lr
 8005c3e:	bf00      	nop
 8005c40:	e000e010 	.word	0xe000e010
 8005c44:	e000e018 	.word	0xe000e018
 8005c48:	20000000 	.word	0x20000000
 8005c4c:	10624dd3 	.word	0x10624dd3
 8005c50:	e000e014 	.word	0xe000e014

08005c54 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005c54:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005c64 <vPortEnableVFP+0x10>
 8005c58:	6801      	ldr	r1, [r0, #0]
 8005c5a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005c5e:	6001      	str	r1, [r0, #0]
 8005c60:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005c62:	bf00      	nop
 8005c64:	e000ed88 	.word	0xe000ed88

08005c68 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005c68:	b480      	push	{r7}
 8005c6a:	b085      	sub	sp, #20
 8005c6c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005c6e:	f3ef 8305 	mrs	r3, IPSR
 8005c72:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005c74:	68fb      	ldr	r3, [r7, #12]
 8005c76:	2b0f      	cmp	r3, #15
 8005c78:	d914      	bls.n	8005ca4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005c7a:	4a17      	ldr	r2, [pc, #92]	; (8005cd8 <vPortValidateInterruptPriority+0x70>)
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8005c84:	4b15      	ldr	r3, [pc, #84]	; (8005cdc <vPortValidateInterruptPriority+0x74>)
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	7afa      	ldrb	r2, [r7, #11]
 8005c8a:	429a      	cmp	r2, r3
 8005c8c:	d20a      	bcs.n	8005ca4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8005c8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c92:	f383 8811 	msr	BASEPRI, r3
 8005c96:	f3bf 8f6f 	isb	sy
 8005c9a:	f3bf 8f4f 	dsb	sy
 8005c9e:	607b      	str	r3, [r7, #4]
}
 8005ca0:	bf00      	nop
 8005ca2:	e7fe      	b.n	8005ca2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8005ca4:	4b0e      	ldr	r3, [pc, #56]	; (8005ce0 <vPortValidateInterruptPriority+0x78>)
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8005cac:	4b0d      	ldr	r3, [pc, #52]	; (8005ce4 <vPortValidateInterruptPriority+0x7c>)
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	429a      	cmp	r2, r3
 8005cb2:	d90a      	bls.n	8005cca <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8005cb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb8:	f383 8811 	msr	BASEPRI, r3
 8005cbc:	f3bf 8f6f 	isb	sy
 8005cc0:	f3bf 8f4f 	dsb	sy
 8005cc4:	603b      	str	r3, [r7, #0]
}
 8005cc6:	bf00      	nop
 8005cc8:	e7fe      	b.n	8005cc8 <vPortValidateInterruptPriority+0x60>
	}
 8005cca:	bf00      	nop
 8005ccc:	3714      	adds	r7, #20
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr
 8005cd6:	bf00      	nop
 8005cd8:	e000e3f0 	.word	0xe000e3f0
 8005cdc:	20001214 	.word	0x20001214
 8005ce0:	e000ed0c 	.word	0xe000ed0c
 8005ce4:	20001218 	.word	0x20001218

08005ce8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005ce8:	b580      	push	{r7, lr}
 8005cea:	b08a      	sub	sp, #40	; 0x28
 8005cec:	af00      	add	r7, sp, #0
 8005cee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005cf0:	2300      	movs	r3, #0
 8005cf2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8005cf4:	f7fe fd20 	bl	8004738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005cf8:	4b5b      	ldr	r3, [pc, #364]	; (8005e68 <pvPortMalloc+0x180>)
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005d00:	f000 f920 	bl	8005f44 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8005d04:	4b59      	ldr	r3, [pc, #356]	; (8005e6c <pvPortMalloc+0x184>)
 8005d06:	681a      	ldr	r2, [r3, #0]
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	4013      	ands	r3, r2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	f040 8093 	bne.w	8005e38 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d01d      	beq.n	8005d54 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8005d18:	2208      	movs	r2, #8
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f003 0307 	and.w	r3, r3, #7
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d014      	beq.n	8005d54 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	f023 0307 	bic.w	r3, r3, #7
 8005d30:	3308      	adds	r3, #8
 8005d32:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f003 0307 	and.w	r3, r3, #7
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d00a      	beq.n	8005d54 <pvPortMalloc+0x6c>
	__asm volatile
 8005d3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d42:	f383 8811 	msr	BASEPRI, r3
 8005d46:	f3bf 8f6f 	isb	sy
 8005d4a:	f3bf 8f4f 	dsb	sy
 8005d4e:	617b      	str	r3, [r7, #20]
}
 8005d50:	bf00      	nop
 8005d52:	e7fe      	b.n	8005d52 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d06e      	beq.n	8005e38 <pvPortMalloc+0x150>
 8005d5a:	4b45      	ldr	r3, [pc, #276]	; (8005e70 <pvPortMalloc+0x188>)
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	687a      	ldr	r2, [r7, #4]
 8005d60:	429a      	cmp	r2, r3
 8005d62:	d869      	bhi.n	8005e38 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8005d64:	4b43      	ldr	r3, [pc, #268]	; (8005e74 <pvPortMalloc+0x18c>)
 8005d66:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8005d68:	4b42      	ldr	r3, [pc, #264]	; (8005e74 <pvPortMalloc+0x18c>)
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d6e:	e004      	b.n	8005d7a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8005d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d72:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8005d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8005d7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d7c:	685b      	ldr	r3, [r3, #4]
 8005d7e:	687a      	ldr	r2, [r7, #4]
 8005d80:	429a      	cmp	r2, r3
 8005d82:	d903      	bls.n	8005d8c <pvPortMalloc+0xa4>
 8005d84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d86:	681b      	ldr	r3, [r3, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d1f1      	bne.n	8005d70 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8005d8c:	4b36      	ldr	r3, [pc, #216]	; (8005e68 <pvPortMalloc+0x180>)
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005d92:	429a      	cmp	r2, r3
 8005d94:	d050      	beq.n	8005e38 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8005d96:	6a3b      	ldr	r3, [r7, #32]
 8005d98:	681b      	ldr	r3, [r3, #0]
 8005d9a:	2208      	movs	r2, #8
 8005d9c:	4413      	add	r3, r2
 8005d9e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8005da0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005da2:	681a      	ldr	r2, [r3, #0]
 8005da4:	6a3b      	ldr	r3, [r7, #32]
 8005da6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8005da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005daa:	685a      	ldr	r2, [r3, #4]
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	1ad2      	subs	r2, r2, r3
 8005db0:	2308      	movs	r3, #8
 8005db2:	005b      	lsls	r3, r3, #1
 8005db4:	429a      	cmp	r2, r3
 8005db6:	d91f      	bls.n	8005df8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8005db8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8005dc0:	69bb      	ldr	r3, [r7, #24]
 8005dc2:	f003 0307 	and.w	r3, r3, #7
 8005dc6:	2b00      	cmp	r3, #0
 8005dc8:	d00a      	beq.n	8005de0 <pvPortMalloc+0xf8>
	__asm volatile
 8005dca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dce:	f383 8811 	msr	BASEPRI, r3
 8005dd2:	f3bf 8f6f 	isb	sy
 8005dd6:	f3bf 8f4f 	dsb	sy
 8005dda:	613b      	str	r3, [r7, #16]
}
 8005ddc:	bf00      	nop
 8005dde:	e7fe      	b.n	8005dde <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005de0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de2:	685a      	ldr	r2, [r3, #4]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	1ad2      	subs	r2, r2, r3
 8005de8:	69bb      	ldr	r3, [r7, #24]
 8005dea:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dee:	687a      	ldr	r2, [r7, #4]
 8005df0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005df2:	69b8      	ldr	r0, [r7, #24]
 8005df4:	f000 f908 	bl	8006008 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8005df8:	4b1d      	ldr	r3, [pc, #116]	; (8005e70 <pvPortMalloc+0x188>)
 8005dfa:	681a      	ldr	r2, [r3, #0]
 8005dfc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005dfe:	685b      	ldr	r3, [r3, #4]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	4a1b      	ldr	r2, [pc, #108]	; (8005e70 <pvPortMalloc+0x188>)
 8005e04:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8005e06:	4b1a      	ldr	r3, [pc, #104]	; (8005e70 <pvPortMalloc+0x188>)
 8005e08:	681a      	ldr	r2, [r3, #0]
 8005e0a:	4b1b      	ldr	r3, [pc, #108]	; (8005e78 <pvPortMalloc+0x190>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	429a      	cmp	r2, r3
 8005e10:	d203      	bcs.n	8005e1a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005e12:	4b17      	ldr	r3, [pc, #92]	; (8005e70 <pvPortMalloc+0x188>)
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a18      	ldr	r2, [pc, #96]	; (8005e78 <pvPortMalloc+0x190>)
 8005e18:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8005e1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e1c:	685a      	ldr	r2, [r3, #4]
 8005e1e:	4b13      	ldr	r3, [pc, #76]	; (8005e6c <pvPortMalloc+0x184>)
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	431a      	orrs	r2, r3
 8005e24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e26:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8005e28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8005e2e:	4b13      	ldr	r3, [pc, #76]	; (8005e7c <pvPortMalloc+0x194>)
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	3301      	adds	r3, #1
 8005e34:	4a11      	ldr	r2, [pc, #68]	; (8005e7c <pvPortMalloc+0x194>)
 8005e36:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005e38:	f7fe fc8c 	bl	8004754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005e3c:	69fb      	ldr	r3, [r7, #28]
 8005e3e:	f003 0307 	and.w	r3, r3, #7
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d00a      	beq.n	8005e5c <pvPortMalloc+0x174>
	__asm volatile
 8005e46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e4a:	f383 8811 	msr	BASEPRI, r3
 8005e4e:	f3bf 8f6f 	isb	sy
 8005e52:	f3bf 8f4f 	dsb	sy
 8005e56:	60fb      	str	r3, [r7, #12]
}
 8005e58:	bf00      	nop
 8005e5a:	e7fe      	b.n	8005e5a <pvPortMalloc+0x172>
	return pvReturn;
 8005e5c:	69fb      	ldr	r3, [r7, #28]
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3728      	adds	r7, #40	; 0x28
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
 8005e66:	bf00      	nop
 8005e68:	20001ddc 	.word	0x20001ddc
 8005e6c:	20001df0 	.word	0x20001df0
 8005e70:	20001de0 	.word	0x20001de0
 8005e74:	20001dd4 	.word	0x20001dd4
 8005e78:	20001de4 	.word	0x20001de4
 8005e7c:	20001de8 	.word	0x20001de8

08005e80 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b086      	sub	sp, #24
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d04d      	beq.n	8005f2e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8005e92:	2308      	movs	r3, #8
 8005e94:	425b      	negs	r3, r3
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	4413      	add	r3, r2
 8005e9a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8005e9c:	697b      	ldr	r3, [r7, #20]
 8005e9e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8005ea0:	693b      	ldr	r3, [r7, #16]
 8005ea2:	685a      	ldr	r2, [r3, #4]
 8005ea4:	4b24      	ldr	r3, [pc, #144]	; (8005f38 <vPortFree+0xb8>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	4013      	ands	r3, r2
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d10a      	bne.n	8005ec4 <vPortFree+0x44>
	__asm volatile
 8005eae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb2:	f383 8811 	msr	BASEPRI, r3
 8005eb6:	f3bf 8f6f 	isb	sy
 8005eba:	f3bf 8f4f 	dsb	sy
 8005ebe:	60fb      	str	r3, [r7, #12]
}
 8005ec0:	bf00      	nop
 8005ec2:	e7fe      	b.n	8005ec2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8005ec4:	693b      	ldr	r3, [r7, #16]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d00a      	beq.n	8005ee2 <vPortFree+0x62>
	__asm volatile
 8005ecc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ed0:	f383 8811 	msr	BASEPRI, r3
 8005ed4:	f3bf 8f6f 	isb	sy
 8005ed8:	f3bf 8f4f 	dsb	sy
 8005edc:	60bb      	str	r3, [r7, #8]
}
 8005ede:	bf00      	nop
 8005ee0:	e7fe      	b.n	8005ee0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005ee2:	693b      	ldr	r3, [r7, #16]
 8005ee4:	685a      	ldr	r2, [r3, #4]
 8005ee6:	4b14      	ldr	r3, [pc, #80]	; (8005f38 <vPortFree+0xb8>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	4013      	ands	r3, r2
 8005eec:	2b00      	cmp	r3, #0
 8005eee:	d01e      	beq.n	8005f2e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005ef0:	693b      	ldr	r3, [r7, #16]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d11a      	bne.n	8005f2e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	685a      	ldr	r2, [r3, #4]
 8005efc:	4b0e      	ldr	r3, [pc, #56]	; (8005f38 <vPortFree+0xb8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	43db      	mvns	r3, r3
 8005f02:	401a      	ands	r2, r3
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005f08:	f7fe fc16 	bl	8004738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8005f0c:	693b      	ldr	r3, [r7, #16]
 8005f0e:	685a      	ldr	r2, [r3, #4]
 8005f10:	4b0a      	ldr	r3, [pc, #40]	; (8005f3c <vPortFree+0xbc>)
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	4413      	add	r3, r2
 8005f16:	4a09      	ldr	r2, [pc, #36]	; (8005f3c <vPortFree+0xbc>)
 8005f18:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8005f1a:	6938      	ldr	r0, [r7, #16]
 8005f1c:	f000 f874 	bl	8006008 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8005f20:	4b07      	ldr	r3, [pc, #28]	; (8005f40 <vPortFree+0xc0>)
 8005f22:	681b      	ldr	r3, [r3, #0]
 8005f24:	3301      	adds	r3, #1
 8005f26:	4a06      	ldr	r2, [pc, #24]	; (8005f40 <vPortFree+0xc0>)
 8005f28:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8005f2a:	f7fe fc13 	bl	8004754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005f2e:	bf00      	nop
 8005f30:	3718      	adds	r7, #24
 8005f32:	46bd      	mov	sp, r7
 8005f34:	bd80      	pop	{r7, pc}
 8005f36:	bf00      	nop
 8005f38:	20001df0 	.word	0x20001df0
 8005f3c:	20001de0 	.word	0x20001de0
 8005f40:	20001dec 	.word	0x20001dec

08005f44 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005f44:	b480      	push	{r7}
 8005f46:	b085      	sub	sp, #20
 8005f48:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8005f4a:	f640 33b8 	movw	r3, #3000	; 0xbb8
 8005f4e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005f50:	4b27      	ldr	r3, [pc, #156]	; (8005ff0 <prvHeapInit+0xac>)
 8005f52:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d00c      	beq.n	8005f78 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	3307      	adds	r3, #7
 8005f62:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	f023 0307 	bic.w	r3, r3, #7
 8005f6a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8005f6c:	68ba      	ldr	r2, [r7, #8]
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	1ad3      	subs	r3, r2, r3
 8005f72:	4a1f      	ldr	r2, [pc, #124]	; (8005ff0 <prvHeapInit+0xac>)
 8005f74:	4413      	add	r3, r2
 8005f76:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8005f7c:	4a1d      	ldr	r2, [pc, #116]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005f82:	4b1c      	ldr	r3, [pc, #112]	; (8005ff4 <prvHeapInit+0xb0>)
 8005f84:	2200      	movs	r2, #0
 8005f86:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	68ba      	ldr	r2, [r7, #8]
 8005f8c:	4413      	add	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8005f90:	2208      	movs	r2, #8
 8005f92:	68fb      	ldr	r3, [r7, #12]
 8005f94:	1a9b      	subs	r3, r3, r2
 8005f96:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005f98:	68fb      	ldr	r3, [r7, #12]
 8005f9a:	f023 0307 	bic.w	r3, r3, #7
 8005f9e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	4a15      	ldr	r2, [pc, #84]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8005fa6:	4b14      	ldr	r3, [pc, #80]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	2200      	movs	r2, #0
 8005fac:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8005fae:	4b12      	ldr	r3, [pc, #72]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8005fba:	683b      	ldr	r3, [r7, #0]
 8005fbc:	68fa      	ldr	r2, [r7, #12]
 8005fbe:	1ad2      	subs	r2, r2, r3
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8005fc4:	4b0c      	ldr	r3, [pc, #48]	; (8005ff8 <prvHeapInit+0xb4>)
 8005fc6:	681a      	ldr	r2, [r3, #0]
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fcc:	683b      	ldr	r3, [r7, #0]
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	4a0a      	ldr	r2, [pc, #40]	; (8005ffc <prvHeapInit+0xb8>)
 8005fd2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8005fd4:	683b      	ldr	r3, [r7, #0]
 8005fd6:	685b      	ldr	r3, [r3, #4]
 8005fd8:	4a09      	ldr	r2, [pc, #36]	; (8006000 <prvHeapInit+0xbc>)
 8005fda:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8005fdc:	4b09      	ldr	r3, [pc, #36]	; (8006004 <prvHeapInit+0xc0>)
 8005fde:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005fe2:	601a      	str	r2, [r3, #0]
}
 8005fe4:	bf00      	nop
 8005fe6:	3714      	adds	r7, #20
 8005fe8:	46bd      	mov	sp, r7
 8005fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fee:	4770      	bx	lr
 8005ff0:	2000121c 	.word	0x2000121c
 8005ff4:	20001dd4 	.word	0x20001dd4
 8005ff8:	20001ddc 	.word	0x20001ddc
 8005ffc:	20001de4 	.word	0x20001de4
 8006000:	20001de0 	.word	0x20001de0
 8006004:	20001df0 	.word	0x20001df0

08006008 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006008:	b480      	push	{r7}
 800600a:	b085      	sub	sp, #20
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006010:	4b28      	ldr	r3, [pc, #160]	; (80060b4 <prvInsertBlockIntoFreeList+0xac>)
 8006012:	60fb      	str	r3, [r7, #12]
 8006014:	e002      	b.n	800601c <prvInsertBlockIntoFreeList+0x14>
 8006016:	68fb      	ldr	r3, [r7, #12]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	60fb      	str	r3, [r7, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	687a      	ldr	r2, [r7, #4]
 8006022:	429a      	cmp	r2, r3
 8006024:	d8f7      	bhi.n	8006016 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	685b      	ldr	r3, [r3, #4]
 800602e:	68ba      	ldr	r2, [r7, #8]
 8006030:	4413      	add	r3, r2
 8006032:	687a      	ldr	r2, [r7, #4]
 8006034:	429a      	cmp	r2, r3
 8006036:	d108      	bne.n	800604a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	685b      	ldr	r3, [r3, #4]
 8006040:	441a      	add	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	68ba      	ldr	r2, [r7, #8]
 8006054:	441a      	add	r2, r3
 8006056:	68fb      	ldr	r3, [r7, #12]
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	429a      	cmp	r2, r3
 800605c:	d118      	bne.n	8006090 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	681a      	ldr	r2, [r3, #0]
 8006062:	4b15      	ldr	r3, [pc, #84]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d00d      	beq.n	8006086 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	685a      	ldr	r2, [r3, #4]
 800606e:	68fb      	ldr	r3, [r7, #12]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	441a      	add	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	681a      	ldr	r2, [r3, #0]
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	601a      	str	r2, [r3, #0]
 8006084:	e008      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006086:	4b0c      	ldr	r3, [pc, #48]	; (80060b8 <prvInsertBlockIntoFreeList+0xb0>)
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	601a      	str	r2, [r3, #0]
 800608e:	e003      	b.n	8006098 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681a      	ldr	r2, [r3, #0]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	429a      	cmp	r2, r3
 800609e:	d002      	beq.n	80060a6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	687a      	ldr	r2, [r7, #4]
 80060a4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80060a6:	bf00      	nop
 80060a8:	3714      	adds	r7, #20
 80060aa:	46bd      	mov	sp, r7
 80060ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060b0:	4770      	bx	lr
 80060b2:	bf00      	nop
 80060b4:	20001dd4 	.word	0x20001dd4
 80060b8:	20001ddc 	.word	0x20001ddc

080060bc <__errno>:
 80060bc:	4b01      	ldr	r3, [pc, #4]	; (80060c4 <__errno+0x8>)
 80060be:	6818      	ldr	r0, [r3, #0]
 80060c0:	4770      	bx	lr
 80060c2:	bf00      	nop
 80060c4:	20000010 	.word	0x20000010

080060c8 <std>:
 80060c8:	2300      	movs	r3, #0
 80060ca:	b510      	push	{r4, lr}
 80060cc:	4604      	mov	r4, r0
 80060ce:	e9c0 3300 	strd	r3, r3, [r0]
 80060d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80060d6:	6083      	str	r3, [r0, #8]
 80060d8:	8181      	strh	r1, [r0, #12]
 80060da:	6643      	str	r3, [r0, #100]	; 0x64
 80060dc:	81c2      	strh	r2, [r0, #14]
 80060de:	6183      	str	r3, [r0, #24]
 80060e0:	4619      	mov	r1, r3
 80060e2:	2208      	movs	r2, #8
 80060e4:	305c      	adds	r0, #92	; 0x5c
 80060e6:	f000 f91a 	bl	800631e <memset>
 80060ea:	4b05      	ldr	r3, [pc, #20]	; (8006100 <std+0x38>)
 80060ec:	6263      	str	r3, [r4, #36]	; 0x24
 80060ee:	4b05      	ldr	r3, [pc, #20]	; (8006104 <std+0x3c>)
 80060f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80060f2:	4b05      	ldr	r3, [pc, #20]	; (8006108 <std+0x40>)
 80060f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80060f6:	4b05      	ldr	r3, [pc, #20]	; (800610c <std+0x44>)
 80060f8:	6224      	str	r4, [r4, #32]
 80060fa:	6323      	str	r3, [r4, #48]	; 0x30
 80060fc:	bd10      	pop	{r4, pc}
 80060fe:	bf00      	nop
 8006100:	0800657d 	.word	0x0800657d
 8006104:	0800659f 	.word	0x0800659f
 8006108:	080065d7 	.word	0x080065d7
 800610c:	080065fb 	.word	0x080065fb

08006110 <_cleanup_r>:
 8006110:	4901      	ldr	r1, [pc, #4]	; (8006118 <_cleanup_r+0x8>)
 8006112:	f000 b8af 	b.w	8006274 <_fwalk_reent>
 8006116:	bf00      	nop
 8006118:	08006755 	.word	0x08006755

0800611c <__sfmoreglue>:
 800611c:	b570      	push	{r4, r5, r6, lr}
 800611e:	2268      	movs	r2, #104	; 0x68
 8006120:	1e4d      	subs	r5, r1, #1
 8006122:	4355      	muls	r5, r2
 8006124:	460e      	mov	r6, r1
 8006126:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800612a:	f000 f921 	bl	8006370 <_malloc_r>
 800612e:	4604      	mov	r4, r0
 8006130:	b140      	cbz	r0, 8006144 <__sfmoreglue+0x28>
 8006132:	2100      	movs	r1, #0
 8006134:	e9c0 1600 	strd	r1, r6, [r0]
 8006138:	300c      	adds	r0, #12
 800613a:	60a0      	str	r0, [r4, #8]
 800613c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006140:	f000 f8ed 	bl	800631e <memset>
 8006144:	4620      	mov	r0, r4
 8006146:	bd70      	pop	{r4, r5, r6, pc}

08006148 <__sfp_lock_acquire>:
 8006148:	4801      	ldr	r0, [pc, #4]	; (8006150 <__sfp_lock_acquire+0x8>)
 800614a:	f000 b8d8 	b.w	80062fe <__retarget_lock_acquire_recursive>
 800614e:	bf00      	nop
 8006150:	20001df5 	.word	0x20001df5

08006154 <__sfp_lock_release>:
 8006154:	4801      	ldr	r0, [pc, #4]	; (800615c <__sfp_lock_release+0x8>)
 8006156:	f000 b8d3 	b.w	8006300 <__retarget_lock_release_recursive>
 800615a:	bf00      	nop
 800615c:	20001df5 	.word	0x20001df5

08006160 <__sinit_lock_acquire>:
 8006160:	4801      	ldr	r0, [pc, #4]	; (8006168 <__sinit_lock_acquire+0x8>)
 8006162:	f000 b8cc 	b.w	80062fe <__retarget_lock_acquire_recursive>
 8006166:	bf00      	nop
 8006168:	20001df6 	.word	0x20001df6

0800616c <__sinit_lock_release>:
 800616c:	4801      	ldr	r0, [pc, #4]	; (8006174 <__sinit_lock_release+0x8>)
 800616e:	f000 b8c7 	b.w	8006300 <__retarget_lock_release_recursive>
 8006172:	bf00      	nop
 8006174:	20001df6 	.word	0x20001df6

08006178 <__sinit>:
 8006178:	b510      	push	{r4, lr}
 800617a:	4604      	mov	r4, r0
 800617c:	f7ff fff0 	bl	8006160 <__sinit_lock_acquire>
 8006180:	69a3      	ldr	r3, [r4, #24]
 8006182:	b11b      	cbz	r3, 800618c <__sinit+0x14>
 8006184:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006188:	f7ff bff0 	b.w	800616c <__sinit_lock_release>
 800618c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006190:	6523      	str	r3, [r4, #80]	; 0x50
 8006192:	4b13      	ldr	r3, [pc, #76]	; (80061e0 <__sinit+0x68>)
 8006194:	4a13      	ldr	r2, [pc, #76]	; (80061e4 <__sinit+0x6c>)
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	62a2      	str	r2, [r4, #40]	; 0x28
 800619a:	42a3      	cmp	r3, r4
 800619c:	bf04      	itt	eq
 800619e:	2301      	moveq	r3, #1
 80061a0:	61a3      	streq	r3, [r4, #24]
 80061a2:	4620      	mov	r0, r4
 80061a4:	f000 f820 	bl	80061e8 <__sfp>
 80061a8:	6060      	str	r0, [r4, #4]
 80061aa:	4620      	mov	r0, r4
 80061ac:	f000 f81c 	bl	80061e8 <__sfp>
 80061b0:	60a0      	str	r0, [r4, #8]
 80061b2:	4620      	mov	r0, r4
 80061b4:	f000 f818 	bl	80061e8 <__sfp>
 80061b8:	2200      	movs	r2, #0
 80061ba:	60e0      	str	r0, [r4, #12]
 80061bc:	2104      	movs	r1, #4
 80061be:	6860      	ldr	r0, [r4, #4]
 80061c0:	f7ff ff82 	bl	80060c8 <std>
 80061c4:	68a0      	ldr	r0, [r4, #8]
 80061c6:	2201      	movs	r2, #1
 80061c8:	2109      	movs	r1, #9
 80061ca:	f7ff ff7d 	bl	80060c8 <std>
 80061ce:	68e0      	ldr	r0, [r4, #12]
 80061d0:	2202      	movs	r2, #2
 80061d2:	2112      	movs	r1, #18
 80061d4:	f7ff ff78 	bl	80060c8 <std>
 80061d8:	2301      	movs	r3, #1
 80061da:	61a3      	str	r3, [r4, #24]
 80061dc:	e7d2      	b.n	8006184 <__sinit+0xc>
 80061de:	bf00      	nop
 80061e0:	08007294 	.word	0x08007294
 80061e4:	08006111 	.word	0x08006111

080061e8 <__sfp>:
 80061e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80061ea:	4607      	mov	r7, r0
 80061ec:	f7ff ffac 	bl	8006148 <__sfp_lock_acquire>
 80061f0:	4b1e      	ldr	r3, [pc, #120]	; (800626c <__sfp+0x84>)
 80061f2:	681e      	ldr	r6, [r3, #0]
 80061f4:	69b3      	ldr	r3, [r6, #24]
 80061f6:	b913      	cbnz	r3, 80061fe <__sfp+0x16>
 80061f8:	4630      	mov	r0, r6
 80061fa:	f7ff ffbd 	bl	8006178 <__sinit>
 80061fe:	3648      	adds	r6, #72	; 0x48
 8006200:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006204:	3b01      	subs	r3, #1
 8006206:	d503      	bpl.n	8006210 <__sfp+0x28>
 8006208:	6833      	ldr	r3, [r6, #0]
 800620a:	b30b      	cbz	r3, 8006250 <__sfp+0x68>
 800620c:	6836      	ldr	r6, [r6, #0]
 800620e:	e7f7      	b.n	8006200 <__sfp+0x18>
 8006210:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006214:	b9d5      	cbnz	r5, 800624c <__sfp+0x64>
 8006216:	4b16      	ldr	r3, [pc, #88]	; (8006270 <__sfp+0x88>)
 8006218:	60e3      	str	r3, [r4, #12]
 800621a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800621e:	6665      	str	r5, [r4, #100]	; 0x64
 8006220:	f000 f86c 	bl	80062fc <__retarget_lock_init_recursive>
 8006224:	f7ff ff96 	bl	8006154 <__sfp_lock_release>
 8006228:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800622c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006230:	6025      	str	r5, [r4, #0]
 8006232:	61a5      	str	r5, [r4, #24]
 8006234:	2208      	movs	r2, #8
 8006236:	4629      	mov	r1, r5
 8006238:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800623c:	f000 f86f 	bl	800631e <memset>
 8006240:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006244:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006248:	4620      	mov	r0, r4
 800624a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800624c:	3468      	adds	r4, #104	; 0x68
 800624e:	e7d9      	b.n	8006204 <__sfp+0x1c>
 8006250:	2104      	movs	r1, #4
 8006252:	4638      	mov	r0, r7
 8006254:	f7ff ff62 	bl	800611c <__sfmoreglue>
 8006258:	4604      	mov	r4, r0
 800625a:	6030      	str	r0, [r6, #0]
 800625c:	2800      	cmp	r0, #0
 800625e:	d1d5      	bne.n	800620c <__sfp+0x24>
 8006260:	f7ff ff78 	bl	8006154 <__sfp_lock_release>
 8006264:	230c      	movs	r3, #12
 8006266:	603b      	str	r3, [r7, #0]
 8006268:	e7ee      	b.n	8006248 <__sfp+0x60>
 800626a:	bf00      	nop
 800626c:	08007294 	.word	0x08007294
 8006270:	ffff0001 	.word	0xffff0001

08006274 <_fwalk_reent>:
 8006274:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006278:	4606      	mov	r6, r0
 800627a:	4688      	mov	r8, r1
 800627c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006280:	2700      	movs	r7, #0
 8006282:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006286:	f1b9 0901 	subs.w	r9, r9, #1
 800628a:	d505      	bpl.n	8006298 <_fwalk_reent+0x24>
 800628c:	6824      	ldr	r4, [r4, #0]
 800628e:	2c00      	cmp	r4, #0
 8006290:	d1f7      	bne.n	8006282 <_fwalk_reent+0xe>
 8006292:	4638      	mov	r0, r7
 8006294:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006298:	89ab      	ldrh	r3, [r5, #12]
 800629a:	2b01      	cmp	r3, #1
 800629c:	d907      	bls.n	80062ae <_fwalk_reent+0x3a>
 800629e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80062a2:	3301      	adds	r3, #1
 80062a4:	d003      	beq.n	80062ae <_fwalk_reent+0x3a>
 80062a6:	4629      	mov	r1, r5
 80062a8:	4630      	mov	r0, r6
 80062aa:	47c0      	blx	r8
 80062ac:	4307      	orrs	r7, r0
 80062ae:	3568      	adds	r5, #104	; 0x68
 80062b0:	e7e9      	b.n	8006286 <_fwalk_reent+0x12>
	...

080062b4 <__libc_init_array>:
 80062b4:	b570      	push	{r4, r5, r6, lr}
 80062b6:	4d0d      	ldr	r5, [pc, #52]	; (80062ec <__libc_init_array+0x38>)
 80062b8:	4c0d      	ldr	r4, [pc, #52]	; (80062f0 <__libc_init_array+0x3c>)
 80062ba:	1b64      	subs	r4, r4, r5
 80062bc:	10a4      	asrs	r4, r4, #2
 80062be:	2600      	movs	r6, #0
 80062c0:	42a6      	cmp	r6, r4
 80062c2:	d109      	bne.n	80062d8 <__libc_init_array+0x24>
 80062c4:	4d0b      	ldr	r5, [pc, #44]	; (80062f4 <__libc_init_array+0x40>)
 80062c6:	4c0c      	ldr	r4, [pc, #48]	; (80062f8 <__libc_init_array+0x44>)
 80062c8:	f000 ff32 	bl	8007130 <_init>
 80062cc:	1b64      	subs	r4, r4, r5
 80062ce:	10a4      	asrs	r4, r4, #2
 80062d0:	2600      	movs	r6, #0
 80062d2:	42a6      	cmp	r6, r4
 80062d4:	d105      	bne.n	80062e2 <__libc_init_array+0x2e>
 80062d6:	bd70      	pop	{r4, r5, r6, pc}
 80062d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80062dc:	4798      	blx	r3
 80062de:	3601      	adds	r6, #1
 80062e0:	e7ee      	b.n	80062c0 <__libc_init_array+0xc>
 80062e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80062e6:	4798      	blx	r3
 80062e8:	3601      	adds	r6, #1
 80062ea:	e7f2      	b.n	80062d2 <__libc_init_array+0x1e>
 80062ec:	080072d4 	.word	0x080072d4
 80062f0:	080072d4 	.word	0x080072d4
 80062f4:	080072d4 	.word	0x080072d4
 80062f8:	080072d8 	.word	0x080072d8

080062fc <__retarget_lock_init_recursive>:
 80062fc:	4770      	bx	lr

080062fe <__retarget_lock_acquire_recursive>:
 80062fe:	4770      	bx	lr

08006300 <__retarget_lock_release_recursive>:
 8006300:	4770      	bx	lr

08006302 <memcpy>:
 8006302:	440a      	add	r2, r1
 8006304:	4291      	cmp	r1, r2
 8006306:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 800630a:	d100      	bne.n	800630e <memcpy+0xc>
 800630c:	4770      	bx	lr
 800630e:	b510      	push	{r4, lr}
 8006310:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006314:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006318:	4291      	cmp	r1, r2
 800631a:	d1f9      	bne.n	8006310 <memcpy+0xe>
 800631c:	bd10      	pop	{r4, pc}

0800631e <memset>:
 800631e:	4402      	add	r2, r0
 8006320:	4603      	mov	r3, r0
 8006322:	4293      	cmp	r3, r2
 8006324:	d100      	bne.n	8006328 <memset+0xa>
 8006326:	4770      	bx	lr
 8006328:	f803 1b01 	strb.w	r1, [r3], #1
 800632c:	e7f9      	b.n	8006322 <memset+0x4>
	...

08006330 <sbrk_aligned>:
 8006330:	b570      	push	{r4, r5, r6, lr}
 8006332:	4e0e      	ldr	r6, [pc, #56]	; (800636c <sbrk_aligned+0x3c>)
 8006334:	460c      	mov	r4, r1
 8006336:	6831      	ldr	r1, [r6, #0]
 8006338:	4605      	mov	r5, r0
 800633a:	b911      	cbnz	r1, 8006342 <sbrk_aligned+0x12>
 800633c:	f000 f90e 	bl	800655c <_sbrk_r>
 8006340:	6030      	str	r0, [r6, #0]
 8006342:	4621      	mov	r1, r4
 8006344:	4628      	mov	r0, r5
 8006346:	f000 f909 	bl	800655c <_sbrk_r>
 800634a:	1c43      	adds	r3, r0, #1
 800634c:	d00a      	beq.n	8006364 <sbrk_aligned+0x34>
 800634e:	1cc4      	adds	r4, r0, #3
 8006350:	f024 0403 	bic.w	r4, r4, #3
 8006354:	42a0      	cmp	r0, r4
 8006356:	d007      	beq.n	8006368 <sbrk_aligned+0x38>
 8006358:	1a21      	subs	r1, r4, r0
 800635a:	4628      	mov	r0, r5
 800635c:	f000 f8fe 	bl	800655c <_sbrk_r>
 8006360:	3001      	adds	r0, #1
 8006362:	d101      	bne.n	8006368 <sbrk_aligned+0x38>
 8006364:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8006368:	4620      	mov	r0, r4
 800636a:	bd70      	pop	{r4, r5, r6, pc}
 800636c:	20001dfc 	.word	0x20001dfc

08006370 <_malloc_r>:
 8006370:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006374:	1ccd      	adds	r5, r1, #3
 8006376:	f025 0503 	bic.w	r5, r5, #3
 800637a:	3508      	adds	r5, #8
 800637c:	2d0c      	cmp	r5, #12
 800637e:	bf38      	it	cc
 8006380:	250c      	movcc	r5, #12
 8006382:	2d00      	cmp	r5, #0
 8006384:	4607      	mov	r7, r0
 8006386:	db01      	blt.n	800638c <_malloc_r+0x1c>
 8006388:	42a9      	cmp	r1, r5
 800638a:	d905      	bls.n	8006398 <_malloc_r+0x28>
 800638c:	230c      	movs	r3, #12
 800638e:	603b      	str	r3, [r7, #0]
 8006390:	2600      	movs	r6, #0
 8006392:	4630      	mov	r0, r6
 8006394:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006398:	4e2e      	ldr	r6, [pc, #184]	; (8006454 <_malloc_r+0xe4>)
 800639a:	f000 fa29 	bl	80067f0 <__malloc_lock>
 800639e:	6833      	ldr	r3, [r6, #0]
 80063a0:	461c      	mov	r4, r3
 80063a2:	bb34      	cbnz	r4, 80063f2 <_malloc_r+0x82>
 80063a4:	4629      	mov	r1, r5
 80063a6:	4638      	mov	r0, r7
 80063a8:	f7ff ffc2 	bl	8006330 <sbrk_aligned>
 80063ac:	1c43      	adds	r3, r0, #1
 80063ae:	4604      	mov	r4, r0
 80063b0:	d14d      	bne.n	800644e <_malloc_r+0xde>
 80063b2:	6834      	ldr	r4, [r6, #0]
 80063b4:	4626      	mov	r6, r4
 80063b6:	2e00      	cmp	r6, #0
 80063b8:	d140      	bne.n	800643c <_malloc_r+0xcc>
 80063ba:	6823      	ldr	r3, [r4, #0]
 80063bc:	4631      	mov	r1, r6
 80063be:	4638      	mov	r0, r7
 80063c0:	eb04 0803 	add.w	r8, r4, r3
 80063c4:	f000 f8ca 	bl	800655c <_sbrk_r>
 80063c8:	4580      	cmp	r8, r0
 80063ca:	d13a      	bne.n	8006442 <_malloc_r+0xd2>
 80063cc:	6821      	ldr	r1, [r4, #0]
 80063ce:	3503      	adds	r5, #3
 80063d0:	1a6d      	subs	r5, r5, r1
 80063d2:	f025 0503 	bic.w	r5, r5, #3
 80063d6:	3508      	adds	r5, #8
 80063d8:	2d0c      	cmp	r5, #12
 80063da:	bf38      	it	cc
 80063dc:	250c      	movcc	r5, #12
 80063de:	4629      	mov	r1, r5
 80063e0:	4638      	mov	r0, r7
 80063e2:	f7ff ffa5 	bl	8006330 <sbrk_aligned>
 80063e6:	3001      	adds	r0, #1
 80063e8:	d02b      	beq.n	8006442 <_malloc_r+0xd2>
 80063ea:	6823      	ldr	r3, [r4, #0]
 80063ec:	442b      	add	r3, r5
 80063ee:	6023      	str	r3, [r4, #0]
 80063f0:	e00e      	b.n	8006410 <_malloc_r+0xa0>
 80063f2:	6822      	ldr	r2, [r4, #0]
 80063f4:	1b52      	subs	r2, r2, r5
 80063f6:	d41e      	bmi.n	8006436 <_malloc_r+0xc6>
 80063f8:	2a0b      	cmp	r2, #11
 80063fa:	d916      	bls.n	800642a <_malloc_r+0xba>
 80063fc:	1961      	adds	r1, r4, r5
 80063fe:	42a3      	cmp	r3, r4
 8006400:	6025      	str	r5, [r4, #0]
 8006402:	bf18      	it	ne
 8006404:	6059      	strne	r1, [r3, #4]
 8006406:	6863      	ldr	r3, [r4, #4]
 8006408:	bf08      	it	eq
 800640a:	6031      	streq	r1, [r6, #0]
 800640c:	5162      	str	r2, [r4, r5]
 800640e:	604b      	str	r3, [r1, #4]
 8006410:	4638      	mov	r0, r7
 8006412:	f104 060b 	add.w	r6, r4, #11
 8006416:	f000 f9f1 	bl	80067fc <__malloc_unlock>
 800641a:	f026 0607 	bic.w	r6, r6, #7
 800641e:	1d23      	adds	r3, r4, #4
 8006420:	1af2      	subs	r2, r6, r3
 8006422:	d0b6      	beq.n	8006392 <_malloc_r+0x22>
 8006424:	1b9b      	subs	r3, r3, r6
 8006426:	50a3      	str	r3, [r4, r2]
 8006428:	e7b3      	b.n	8006392 <_malloc_r+0x22>
 800642a:	6862      	ldr	r2, [r4, #4]
 800642c:	42a3      	cmp	r3, r4
 800642e:	bf0c      	ite	eq
 8006430:	6032      	streq	r2, [r6, #0]
 8006432:	605a      	strne	r2, [r3, #4]
 8006434:	e7ec      	b.n	8006410 <_malloc_r+0xa0>
 8006436:	4623      	mov	r3, r4
 8006438:	6864      	ldr	r4, [r4, #4]
 800643a:	e7b2      	b.n	80063a2 <_malloc_r+0x32>
 800643c:	4634      	mov	r4, r6
 800643e:	6876      	ldr	r6, [r6, #4]
 8006440:	e7b9      	b.n	80063b6 <_malloc_r+0x46>
 8006442:	230c      	movs	r3, #12
 8006444:	603b      	str	r3, [r7, #0]
 8006446:	4638      	mov	r0, r7
 8006448:	f000 f9d8 	bl	80067fc <__malloc_unlock>
 800644c:	e7a1      	b.n	8006392 <_malloc_r+0x22>
 800644e:	6025      	str	r5, [r4, #0]
 8006450:	e7de      	b.n	8006410 <_malloc_r+0xa0>
 8006452:	bf00      	nop
 8006454:	20001df8 	.word	0x20001df8

08006458 <iprintf>:
 8006458:	b40f      	push	{r0, r1, r2, r3}
 800645a:	4b0a      	ldr	r3, [pc, #40]	; (8006484 <iprintf+0x2c>)
 800645c:	b513      	push	{r0, r1, r4, lr}
 800645e:	681c      	ldr	r4, [r3, #0]
 8006460:	b124      	cbz	r4, 800646c <iprintf+0x14>
 8006462:	69a3      	ldr	r3, [r4, #24]
 8006464:	b913      	cbnz	r3, 800646c <iprintf+0x14>
 8006466:	4620      	mov	r0, r4
 8006468:	f7ff fe86 	bl	8006178 <__sinit>
 800646c:	ab05      	add	r3, sp, #20
 800646e:	9a04      	ldr	r2, [sp, #16]
 8006470:	68a1      	ldr	r1, [r4, #8]
 8006472:	9301      	str	r3, [sp, #4]
 8006474:	4620      	mov	r0, r4
 8006476:	f000 fa3d 	bl	80068f4 <_vfiprintf_r>
 800647a:	b002      	add	sp, #8
 800647c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006480:	b004      	add	sp, #16
 8006482:	4770      	bx	lr
 8006484:	20000010 	.word	0x20000010

08006488 <cleanup_glue>:
 8006488:	b538      	push	{r3, r4, r5, lr}
 800648a:	460c      	mov	r4, r1
 800648c:	6809      	ldr	r1, [r1, #0]
 800648e:	4605      	mov	r5, r0
 8006490:	b109      	cbz	r1, 8006496 <cleanup_glue+0xe>
 8006492:	f7ff fff9 	bl	8006488 <cleanup_glue>
 8006496:	4621      	mov	r1, r4
 8006498:	4628      	mov	r0, r5
 800649a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800649e:	f000 b9b3 	b.w	8006808 <_free_r>
	...

080064a4 <_reclaim_reent>:
 80064a4:	4b2c      	ldr	r3, [pc, #176]	; (8006558 <_reclaim_reent+0xb4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	4283      	cmp	r3, r0
 80064aa:	b570      	push	{r4, r5, r6, lr}
 80064ac:	4604      	mov	r4, r0
 80064ae:	d051      	beq.n	8006554 <_reclaim_reent+0xb0>
 80064b0:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80064b2:	b143      	cbz	r3, 80064c6 <_reclaim_reent+0x22>
 80064b4:	68db      	ldr	r3, [r3, #12]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d14a      	bne.n	8006550 <_reclaim_reent+0xac>
 80064ba:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064bc:	6819      	ldr	r1, [r3, #0]
 80064be:	b111      	cbz	r1, 80064c6 <_reclaim_reent+0x22>
 80064c0:	4620      	mov	r0, r4
 80064c2:	f000 f9a1 	bl	8006808 <_free_r>
 80064c6:	6961      	ldr	r1, [r4, #20]
 80064c8:	b111      	cbz	r1, 80064d0 <_reclaim_reent+0x2c>
 80064ca:	4620      	mov	r0, r4
 80064cc:	f000 f99c 	bl	8006808 <_free_r>
 80064d0:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064d2:	b111      	cbz	r1, 80064da <_reclaim_reent+0x36>
 80064d4:	4620      	mov	r0, r4
 80064d6:	f000 f997 	bl	8006808 <_free_r>
 80064da:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80064dc:	b111      	cbz	r1, 80064e4 <_reclaim_reent+0x40>
 80064de:	4620      	mov	r0, r4
 80064e0:	f000 f992 	bl	8006808 <_free_r>
 80064e4:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80064e6:	b111      	cbz	r1, 80064ee <_reclaim_reent+0x4a>
 80064e8:	4620      	mov	r0, r4
 80064ea:	f000 f98d 	bl	8006808 <_free_r>
 80064ee:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80064f0:	b111      	cbz	r1, 80064f8 <_reclaim_reent+0x54>
 80064f2:	4620      	mov	r0, r4
 80064f4:	f000 f988 	bl	8006808 <_free_r>
 80064f8:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 80064fa:	b111      	cbz	r1, 8006502 <_reclaim_reent+0x5e>
 80064fc:	4620      	mov	r0, r4
 80064fe:	f000 f983 	bl	8006808 <_free_r>
 8006502:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006504:	b111      	cbz	r1, 800650c <_reclaim_reent+0x68>
 8006506:	4620      	mov	r0, r4
 8006508:	f000 f97e 	bl	8006808 <_free_r>
 800650c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800650e:	b111      	cbz	r1, 8006516 <_reclaim_reent+0x72>
 8006510:	4620      	mov	r0, r4
 8006512:	f000 f979 	bl	8006808 <_free_r>
 8006516:	69a3      	ldr	r3, [r4, #24]
 8006518:	b1e3      	cbz	r3, 8006554 <_reclaim_reent+0xb0>
 800651a:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800651c:	4620      	mov	r0, r4
 800651e:	4798      	blx	r3
 8006520:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8006522:	b1b9      	cbz	r1, 8006554 <_reclaim_reent+0xb0>
 8006524:	4620      	mov	r0, r4
 8006526:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800652a:	f7ff bfad 	b.w	8006488 <cleanup_glue>
 800652e:	5949      	ldr	r1, [r1, r5]
 8006530:	b941      	cbnz	r1, 8006544 <_reclaim_reent+0xa0>
 8006532:	3504      	adds	r5, #4
 8006534:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006536:	2d80      	cmp	r5, #128	; 0x80
 8006538:	68d9      	ldr	r1, [r3, #12]
 800653a:	d1f8      	bne.n	800652e <_reclaim_reent+0x8a>
 800653c:	4620      	mov	r0, r4
 800653e:	f000 f963 	bl	8006808 <_free_r>
 8006542:	e7ba      	b.n	80064ba <_reclaim_reent+0x16>
 8006544:	680e      	ldr	r6, [r1, #0]
 8006546:	4620      	mov	r0, r4
 8006548:	f000 f95e 	bl	8006808 <_free_r>
 800654c:	4631      	mov	r1, r6
 800654e:	e7ef      	b.n	8006530 <_reclaim_reent+0x8c>
 8006550:	2500      	movs	r5, #0
 8006552:	e7ef      	b.n	8006534 <_reclaim_reent+0x90>
 8006554:	bd70      	pop	{r4, r5, r6, pc}
 8006556:	bf00      	nop
 8006558:	20000010 	.word	0x20000010

0800655c <_sbrk_r>:
 800655c:	b538      	push	{r3, r4, r5, lr}
 800655e:	4d06      	ldr	r5, [pc, #24]	; (8006578 <_sbrk_r+0x1c>)
 8006560:	2300      	movs	r3, #0
 8006562:	4604      	mov	r4, r0
 8006564:	4608      	mov	r0, r1
 8006566:	602b      	str	r3, [r5, #0]
 8006568:	f7fa fafc 	bl	8000b64 <_sbrk>
 800656c:	1c43      	adds	r3, r0, #1
 800656e:	d102      	bne.n	8006576 <_sbrk_r+0x1a>
 8006570:	682b      	ldr	r3, [r5, #0]
 8006572:	b103      	cbz	r3, 8006576 <_sbrk_r+0x1a>
 8006574:	6023      	str	r3, [r4, #0]
 8006576:	bd38      	pop	{r3, r4, r5, pc}
 8006578:	20001e00 	.word	0x20001e00

0800657c <__sread>:
 800657c:	b510      	push	{r4, lr}
 800657e:	460c      	mov	r4, r1
 8006580:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006584:	f000 fc7a 	bl	8006e7c <_read_r>
 8006588:	2800      	cmp	r0, #0
 800658a:	bfab      	itete	ge
 800658c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800658e:	89a3      	ldrhlt	r3, [r4, #12]
 8006590:	181b      	addge	r3, r3, r0
 8006592:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006596:	bfac      	ite	ge
 8006598:	6563      	strge	r3, [r4, #84]	; 0x54
 800659a:	81a3      	strhlt	r3, [r4, #12]
 800659c:	bd10      	pop	{r4, pc}

0800659e <__swrite>:
 800659e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065a2:	461f      	mov	r7, r3
 80065a4:	898b      	ldrh	r3, [r1, #12]
 80065a6:	05db      	lsls	r3, r3, #23
 80065a8:	4605      	mov	r5, r0
 80065aa:	460c      	mov	r4, r1
 80065ac:	4616      	mov	r6, r2
 80065ae:	d505      	bpl.n	80065bc <__swrite+0x1e>
 80065b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065b4:	2302      	movs	r3, #2
 80065b6:	2200      	movs	r2, #0
 80065b8:	f000 f908 	bl	80067cc <_lseek_r>
 80065bc:	89a3      	ldrh	r3, [r4, #12]
 80065be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80065c2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80065c6:	81a3      	strh	r3, [r4, #12]
 80065c8:	4632      	mov	r2, r6
 80065ca:	463b      	mov	r3, r7
 80065cc:	4628      	mov	r0, r5
 80065ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80065d2:	f000 b817 	b.w	8006604 <_write_r>

080065d6 <__sseek>:
 80065d6:	b510      	push	{r4, lr}
 80065d8:	460c      	mov	r4, r1
 80065da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065de:	f000 f8f5 	bl	80067cc <_lseek_r>
 80065e2:	1c43      	adds	r3, r0, #1
 80065e4:	89a3      	ldrh	r3, [r4, #12]
 80065e6:	bf15      	itete	ne
 80065e8:	6560      	strne	r0, [r4, #84]	; 0x54
 80065ea:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80065ee:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80065f2:	81a3      	strheq	r3, [r4, #12]
 80065f4:	bf18      	it	ne
 80065f6:	81a3      	strhne	r3, [r4, #12]
 80065f8:	bd10      	pop	{r4, pc}

080065fa <__sclose>:
 80065fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80065fe:	f000 b813 	b.w	8006628 <_close_r>
	...

08006604 <_write_r>:
 8006604:	b538      	push	{r3, r4, r5, lr}
 8006606:	4d07      	ldr	r5, [pc, #28]	; (8006624 <_write_r+0x20>)
 8006608:	4604      	mov	r4, r0
 800660a:	4608      	mov	r0, r1
 800660c:	4611      	mov	r1, r2
 800660e:	2200      	movs	r2, #0
 8006610:	602a      	str	r2, [r5, #0]
 8006612:	461a      	mov	r2, r3
 8006614:	f7fa f8f9 	bl	800080a <_write>
 8006618:	1c43      	adds	r3, r0, #1
 800661a:	d102      	bne.n	8006622 <_write_r+0x1e>
 800661c:	682b      	ldr	r3, [r5, #0]
 800661e:	b103      	cbz	r3, 8006622 <_write_r+0x1e>
 8006620:	6023      	str	r3, [r4, #0]
 8006622:	bd38      	pop	{r3, r4, r5, pc}
 8006624:	20001e00 	.word	0x20001e00

08006628 <_close_r>:
 8006628:	b538      	push	{r3, r4, r5, lr}
 800662a:	4d06      	ldr	r5, [pc, #24]	; (8006644 <_close_r+0x1c>)
 800662c:	2300      	movs	r3, #0
 800662e:	4604      	mov	r4, r0
 8006630:	4608      	mov	r0, r1
 8006632:	602b      	str	r3, [r5, #0]
 8006634:	f7fa fa61 	bl	8000afa <_close>
 8006638:	1c43      	adds	r3, r0, #1
 800663a:	d102      	bne.n	8006642 <_close_r+0x1a>
 800663c:	682b      	ldr	r3, [r5, #0]
 800663e:	b103      	cbz	r3, 8006642 <_close_r+0x1a>
 8006640:	6023      	str	r3, [r4, #0]
 8006642:	bd38      	pop	{r3, r4, r5, pc}
 8006644:	20001e00 	.word	0x20001e00

08006648 <__sflush_r>:
 8006648:	898a      	ldrh	r2, [r1, #12]
 800664a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800664e:	4605      	mov	r5, r0
 8006650:	0710      	lsls	r0, r2, #28
 8006652:	460c      	mov	r4, r1
 8006654:	d458      	bmi.n	8006708 <__sflush_r+0xc0>
 8006656:	684b      	ldr	r3, [r1, #4]
 8006658:	2b00      	cmp	r3, #0
 800665a:	dc05      	bgt.n	8006668 <__sflush_r+0x20>
 800665c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800665e:	2b00      	cmp	r3, #0
 8006660:	dc02      	bgt.n	8006668 <__sflush_r+0x20>
 8006662:	2000      	movs	r0, #0
 8006664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006668:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800666a:	2e00      	cmp	r6, #0
 800666c:	d0f9      	beq.n	8006662 <__sflush_r+0x1a>
 800666e:	2300      	movs	r3, #0
 8006670:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006674:	682f      	ldr	r7, [r5, #0]
 8006676:	602b      	str	r3, [r5, #0]
 8006678:	d032      	beq.n	80066e0 <__sflush_r+0x98>
 800667a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	075a      	lsls	r2, r3, #29
 8006680:	d505      	bpl.n	800668e <__sflush_r+0x46>
 8006682:	6863      	ldr	r3, [r4, #4]
 8006684:	1ac0      	subs	r0, r0, r3
 8006686:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006688:	b10b      	cbz	r3, 800668e <__sflush_r+0x46>
 800668a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800668c:	1ac0      	subs	r0, r0, r3
 800668e:	2300      	movs	r3, #0
 8006690:	4602      	mov	r2, r0
 8006692:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006694:	6a21      	ldr	r1, [r4, #32]
 8006696:	4628      	mov	r0, r5
 8006698:	47b0      	blx	r6
 800669a:	1c43      	adds	r3, r0, #1
 800669c:	89a3      	ldrh	r3, [r4, #12]
 800669e:	d106      	bne.n	80066ae <__sflush_r+0x66>
 80066a0:	6829      	ldr	r1, [r5, #0]
 80066a2:	291d      	cmp	r1, #29
 80066a4:	d82c      	bhi.n	8006700 <__sflush_r+0xb8>
 80066a6:	4a2a      	ldr	r2, [pc, #168]	; (8006750 <__sflush_r+0x108>)
 80066a8:	40ca      	lsrs	r2, r1
 80066aa:	07d6      	lsls	r6, r2, #31
 80066ac:	d528      	bpl.n	8006700 <__sflush_r+0xb8>
 80066ae:	2200      	movs	r2, #0
 80066b0:	6062      	str	r2, [r4, #4]
 80066b2:	04d9      	lsls	r1, r3, #19
 80066b4:	6922      	ldr	r2, [r4, #16]
 80066b6:	6022      	str	r2, [r4, #0]
 80066b8:	d504      	bpl.n	80066c4 <__sflush_r+0x7c>
 80066ba:	1c42      	adds	r2, r0, #1
 80066bc:	d101      	bne.n	80066c2 <__sflush_r+0x7a>
 80066be:	682b      	ldr	r3, [r5, #0]
 80066c0:	b903      	cbnz	r3, 80066c4 <__sflush_r+0x7c>
 80066c2:	6560      	str	r0, [r4, #84]	; 0x54
 80066c4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80066c6:	602f      	str	r7, [r5, #0]
 80066c8:	2900      	cmp	r1, #0
 80066ca:	d0ca      	beq.n	8006662 <__sflush_r+0x1a>
 80066cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80066d0:	4299      	cmp	r1, r3
 80066d2:	d002      	beq.n	80066da <__sflush_r+0x92>
 80066d4:	4628      	mov	r0, r5
 80066d6:	f000 f897 	bl	8006808 <_free_r>
 80066da:	2000      	movs	r0, #0
 80066dc:	6360      	str	r0, [r4, #52]	; 0x34
 80066de:	e7c1      	b.n	8006664 <__sflush_r+0x1c>
 80066e0:	6a21      	ldr	r1, [r4, #32]
 80066e2:	2301      	movs	r3, #1
 80066e4:	4628      	mov	r0, r5
 80066e6:	47b0      	blx	r6
 80066e8:	1c41      	adds	r1, r0, #1
 80066ea:	d1c7      	bne.n	800667c <__sflush_r+0x34>
 80066ec:	682b      	ldr	r3, [r5, #0]
 80066ee:	2b00      	cmp	r3, #0
 80066f0:	d0c4      	beq.n	800667c <__sflush_r+0x34>
 80066f2:	2b1d      	cmp	r3, #29
 80066f4:	d001      	beq.n	80066fa <__sflush_r+0xb2>
 80066f6:	2b16      	cmp	r3, #22
 80066f8:	d101      	bne.n	80066fe <__sflush_r+0xb6>
 80066fa:	602f      	str	r7, [r5, #0]
 80066fc:	e7b1      	b.n	8006662 <__sflush_r+0x1a>
 80066fe:	89a3      	ldrh	r3, [r4, #12]
 8006700:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006704:	81a3      	strh	r3, [r4, #12]
 8006706:	e7ad      	b.n	8006664 <__sflush_r+0x1c>
 8006708:	690f      	ldr	r7, [r1, #16]
 800670a:	2f00      	cmp	r7, #0
 800670c:	d0a9      	beq.n	8006662 <__sflush_r+0x1a>
 800670e:	0793      	lsls	r3, r2, #30
 8006710:	680e      	ldr	r6, [r1, #0]
 8006712:	bf08      	it	eq
 8006714:	694b      	ldreq	r3, [r1, #20]
 8006716:	600f      	str	r7, [r1, #0]
 8006718:	bf18      	it	ne
 800671a:	2300      	movne	r3, #0
 800671c:	eba6 0807 	sub.w	r8, r6, r7
 8006720:	608b      	str	r3, [r1, #8]
 8006722:	f1b8 0f00 	cmp.w	r8, #0
 8006726:	dd9c      	ble.n	8006662 <__sflush_r+0x1a>
 8006728:	6a21      	ldr	r1, [r4, #32]
 800672a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800672c:	4643      	mov	r3, r8
 800672e:	463a      	mov	r2, r7
 8006730:	4628      	mov	r0, r5
 8006732:	47b0      	blx	r6
 8006734:	2800      	cmp	r0, #0
 8006736:	dc06      	bgt.n	8006746 <__sflush_r+0xfe>
 8006738:	89a3      	ldrh	r3, [r4, #12]
 800673a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800673e:	81a3      	strh	r3, [r4, #12]
 8006740:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006744:	e78e      	b.n	8006664 <__sflush_r+0x1c>
 8006746:	4407      	add	r7, r0
 8006748:	eba8 0800 	sub.w	r8, r8, r0
 800674c:	e7e9      	b.n	8006722 <__sflush_r+0xda>
 800674e:	bf00      	nop
 8006750:	20400001 	.word	0x20400001

08006754 <_fflush_r>:
 8006754:	b538      	push	{r3, r4, r5, lr}
 8006756:	690b      	ldr	r3, [r1, #16]
 8006758:	4605      	mov	r5, r0
 800675a:	460c      	mov	r4, r1
 800675c:	b913      	cbnz	r3, 8006764 <_fflush_r+0x10>
 800675e:	2500      	movs	r5, #0
 8006760:	4628      	mov	r0, r5
 8006762:	bd38      	pop	{r3, r4, r5, pc}
 8006764:	b118      	cbz	r0, 800676e <_fflush_r+0x1a>
 8006766:	6983      	ldr	r3, [r0, #24]
 8006768:	b90b      	cbnz	r3, 800676e <_fflush_r+0x1a>
 800676a:	f7ff fd05 	bl	8006178 <__sinit>
 800676e:	4b14      	ldr	r3, [pc, #80]	; (80067c0 <_fflush_r+0x6c>)
 8006770:	429c      	cmp	r4, r3
 8006772:	d11b      	bne.n	80067ac <_fflush_r+0x58>
 8006774:	686c      	ldr	r4, [r5, #4]
 8006776:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d0ef      	beq.n	800675e <_fflush_r+0xa>
 800677e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006780:	07d0      	lsls	r0, r2, #31
 8006782:	d404      	bmi.n	800678e <_fflush_r+0x3a>
 8006784:	0599      	lsls	r1, r3, #22
 8006786:	d402      	bmi.n	800678e <_fflush_r+0x3a>
 8006788:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800678a:	f7ff fdb8 	bl	80062fe <__retarget_lock_acquire_recursive>
 800678e:	4628      	mov	r0, r5
 8006790:	4621      	mov	r1, r4
 8006792:	f7ff ff59 	bl	8006648 <__sflush_r>
 8006796:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006798:	07da      	lsls	r2, r3, #31
 800679a:	4605      	mov	r5, r0
 800679c:	d4e0      	bmi.n	8006760 <_fflush_r+0xc>
 800679e:	89a3      	ldrh	r3, [r4, #12]
 80067a0:	059b      	lsls	r3, r3, #22
 80067a2:	d4dd      	bmi.n	8006760 <_fflush_r+0xc>
 80067a4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80067a6:	f7ff fdab 	bl	8006300 <__retarget_lock_release_recursive>
 80067aa:	e7d9      	b.n	8006760 <_fflush_r+0xc>
 80067ac:	4b05      	ldr	r3, [pc, #20]	; (80067c4 <_fflush_r+0x70>)
 80067ae:	429c      	cmp	r4, r3
 80067b0:	d101      	bne.n	80067b6 <_fflush_r+0x62>
 80067b2:	68ac      	ldr	r4, [r5, #8]
 80067b4:	e7df      	b.n	8006776 <_fflush_r+0x22>
 80067b6:	4b04      	ldr	r3, [pc, #16]	; (80067c8 <_fflush_r+0x74>)
 80067b8:	429c      	cmp	r4, r3
 80067ba:	bf08      	it	eq
 80067bc:	68ec      	ldreq	r4, [r5, #12]
 80067be:	e7da      	b.n	8006776 <_fflush_r+0x22>
 80067c0:	08007254 	.word	0x08007254
 80067c4:	08007274 	.word	0x08007274
 80067c8:	08007234 	.word	0x08007234

080067cc <_lseek_r>:
 80067cc:	b538      	push	{r3, r4, r5, lr}
 80067ce:	4d07      	ldr	r5, [pc, #28]	; (80067ec <_lseek_r+0x20>)
 80067d0:	4604      	mov	r4, r0
 80067d2:	4608      	mov	r0, r1
 80067d4:	4611      	mov	r1, r2
 80067d6:	2200      	movs	r2, #0
 80067d8:	602a      	str	r2, [r5, #0]
 80067da:	461a      	mov	r2, r3
 80067dc:	f7fa f9b4 	bl	8000b48 <_lseek>
 80067e0:	1c43      	adds	r3, r0, #1
 80067e2:	d102      	bne.n	80067ea <_lseek_r+0x1e>
 80067e4:	682b      	ldr	r3, [r5, #0]
 80067e6:	b103      	cbz	r3, 80067ea <_lseek_r+0x1e>
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	bd38      	pop	{r3, r4, r5, pc}
 80067ec:	20001e00 	.word	0x20001e00

080067f0 <__malloc_lock>:
 80067f0:	4801      	ldr	r0, [pc, #4]	; (80067f8 <__malloc_lock+0x8>)
 80067f2:	f7ff bd84 	b.w	80062fe <__retarget_lock_acquire_recursive>
 80067f6:	bf00      	nop
 80067f8:	20001df4 	.word	0x20001df4

080067fc <__malloc_unlock>:
 80067fc:	4801      	ldr	r0, [pc, #4]	; (8006804 <__malloc_unlock+0x8>)
 80067fe:	f7ff bd7f 	b.w	8006300 <__retarget_lock_release_recursive>
 8006802:	bf00      	nop
 8006804:	20001df4 	.word	0x20001df4

08006808 <_free_r>:
 8006808:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800680a:	2900      	cmp	r1, #0
 800680c:	d044      	beq.n	8006898 <_free_r+0x90>
 800680e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006812:	9001      	str	r0, [sp, #4]
 8006814:	2b00      	cmp	r3, #0
 8006816:	f1a1 0404 	sub.w	r4, r1, #4
 800681a:	bfb8      	it	lt
 800681c:	18e4      	addlt	r4, r4, r3
 800681e:	f7ff ffe7 	bl	80067f0 <__malloc_lock>
 8006822:	4a1e      	ldr	r2, [pc, #120]	; (800689c <_free_r+0x94>)
 8006824:	9801      	ldr	r0, [sp, #4]
 8006826:	6813      	ldr	r3, [r2, #0]
 8006828:	b933      	cbnz	r3, 8006838 <_free_r+0x30>
 800682a:	6063      	str	r3, [r4, #4]
 800682c:	6014      	str	r4, [r2, #0]
 800682e:	b003      	add	sp, #12
 8006830:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006834:	f7ff bfe2 	b.w	80067fc <__malloc_unlock>
 8006838:	42a3      	cmp	r3, r4
 800683a:	d908      	bls.n	800684e <_free_r+0x46>
 800683c:	6825      	ldr	r5, [r4, #0]
 800683e:	1961      	adds	r1, r4, r5
 8006840:	428b      	cmp	r3, r1
 8006842:	bf01      	itttt	eq
 8006844:	6819      	ldreq	r1, [r3, #0]
 8006846:	685b      	ldreq	r3, [r3, #4]
 8006848:	1949      	addeq	r1, r1, r5
 800684a:	6021      	streq	r1, [r4, #0]
 800684c:	e7ed      	b.n	800682a <_free_r+0x22>
 800684e:	461a      	mov	r2, r3
 8006850:	685b      	ldr	r3, [r3, #4]
 8006852:	b10b      	cbz	r3, 8006858 <_free_r+0x50>
 8006854:	42a3      	cmp	r3, r4
 8006856:	d9fa      	bls.n	800684e <_free_r+0x46>
 8006858:	6811      	ldr	r1, [r2, #0]
 800685a:	1855      	adds	r5, r2, r1
 800685c:	42a5      	cmp	r5, r4
 800685e:	d10b      	bne.n	8006878 <_free_r+0x70>
 8006860:	6824      	ldr	r4, [r4, #0]
 8006862:	4421      	add	r1, r4
 8006864:	1854      	adds	r4, r2, r1
 8006866:	42a3      	cmp	r3, r4
 8006868:	6011      	str	r1, [r2, #0]
 800686a:	d1e0      	bne.n	800682e <_free_r+0x26>
 800686c:	681c      	ldr	r4, [r3, #0]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	6053      	str	r3, [r2, #4]
 8006872:	4421      	add	r1, r4
 8006874:	6011      	str	r1, [r2, #0]
 8006876:	e7da      	b.n	800682e <_free_r+0x26>
 8006878:	d902      	bls.n	8006880 <_free_r+0x78>
 800687a:	230c      	movs	r3, #12
 800687c:	6003      	str	r3, [r0, #0]
 800687e:	e7d6      	b.n	800682e <_free_r+0x26>
 8006880:	6825      	ldr	r5, [r4, #0]
 8006882:	1961      	adds	r1, r4, r5
 8006884:	428b      	cmp	r3, r1
 8006886:	bf04      	itt	eq
 8006888:	6819      	ldreq	r1, [r3, #0]
 800688a:	685b      	ldreq	r3, [r3, #4]
 800688c:	6063      	str	r3, [r4, #4]
 800688e:	bf04      	itt	eq
 8006890:	1949      	addeq	r1, r1, r5
 8006892:	6021      	streq	r1, [r4, #0]
 8006894:	6054      	str	r4, [r2, #4]
 8006896:	e7ca      	b.n	800682e <_free_r+0x26>
 8006898:	b003      	add	sp, #12
 800689a:	bd30      	pop	{r4, r5, pc}
 800689c:	20001df8 	.word	0x20001df8

080068a0 <__sfputc_r>:
 80068a0:	6893      	ldr	r3, [r2, #8]
 80068a2:	3b01      	subs	r3, #1
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	b410      	push	{r4}
 80068a8:	6093      	str	r3, [r2, #8]
 80068aa:	da08      	bge.n	80068be <__sfputc_r+0x1e>
 80068ac:	6994      	ldr	r4, [r2, #24]
 80068ae:	42a3      	cmp	r3, r4
 80068b0:	db01      	blt.n	80068b6 <__sfputc_r+0x16>
 80068b2:	290a      	cmp	r1, #10
 80068b4:	d103      	bne.n	80068be <__sfputc_r+0x1e>
 80068b6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068ba:	f000 baf1 	b.w	8006ea0 <__swbuf_r>
 80068be:	6813      	ldr	r3, [r2, #0]
 80068c0:	1c58      	adds	r0, r3, #1
 80068c2:	6010      	str	r0, [r2, #0]
 80068c4:	7019      	strb	r1, [r3, #0]
 80068c6:	4608      	mov	r0, r1
 80068c8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068cc:	4770      	bx	lr

080068ce <__sfputs_r>:
 80068ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d0:	4606      	mov	r6, r0
 80068d2:	460f      	mov	r7, r1
 80068d4:	4614      	mov	r4, r2
 80068d6:	18d5      	adds	r5, r2, r3
 80068d8:	42ac      	cmp	r4, r5
 80068da:	d101      	bne.n	80068e0 <__sfputs_r+0x12>
 80068dc:	2000      	movs	r0, #0
 80068de:	e007      	b.n	80068f0 <__sfputs_r+0x22>
 80068e0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068e4:	463a      	mov	r2, r7
 80068e6:	4630      	mov	r0, r6
 80068e8:	f7ff ffda 	bl	80068a0 <__sfputc_r>
 80068ec:	1c43      	adds	r3, r0, #1
 80068ee:	d1f3      	bne.n	80068d8 <__sfputs_r+0xa>
 80068f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080068f4 <_vfiprintf_r>:
 80068f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f8:	460d      	mov	r5, r1
 80068fa:	b09d      	sub	sp, #116	; 0x74
 80068fc:	4614      	mov	r4, r2
 80068fe:	4698      	mov	r8, r3
 8006900:	4606      	mov	r6, r0
 8006902:	b118      	cbz	r0, 800690c <_vfiprintf_r+0x18>
 8006904:	6983      	ldr	r3, [r0, #24]
 8006906:	b90b      	cbnz	r3, 800690c <_vfiprintf_r+0x18>
 8006908:	f7ff fc36 	bl	8006178 <__sinit>
 800690c:	4b89      	ldr	r3, [pc, #548]	; (8006b34 <_vfiprintf_r+0x240>)
 800690e:	429d      	cmp	r5, r3
 8006910:	d11b      	bne.n	800694a <_vfiprintf_r+0x56>
 8006912:	6875      	ldr	r5, [r6, #4]
 8006914:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006916:	07d9      	lsls	r1, r3, #31
 8006918:	d405      	bmi.n	8006926 <_vfiprintf_r+0x32>
 800691a:	89ab      	ldrh	r3, [r5, #12]
 800691c:	059a      	lsls	r2, r3, #22
 800691e:	d402      	bmi.n	8006926 <_vfiprintf_r+0x32>
 8006920:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006922:	f7ff fcec 	bl	80062fe <__retarget_lock_acquire_recursive>
 8006926:	89ab      	ldrh	r3, [r5, #12]
 8006928:	071b      	lsls	r3, r3, #28
 800692a:	d501      	bpl.n	8006930 <_vfiprintf_r+0x3c>
 800692c:	692b      	ldr	r3, [r5, #16]
 800692e:	b9eb      	cbnz	r3, 800696c <_vfiprintf_r+0x78>
 8006930:	4629      	mov	r1, r5
 8006932:	4630      	mov	r0, r6
 8006934:	f000 fb06 	bl	8006f44 <__swsetup_r>
 8006938:	b1c0      	cbz	r0, 800696c <_vfiprintf_r+0x78>
 800693a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800693c:	07dc      	lsls	r4, r3, #31
 800693e:	d50e      	bpl.n	800695e <_vfiprintf_r+0x6a>
 8006940:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006944:	b01d      	add	sp, #116	; 0x74
 8006946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800694a:	4b7b      	ldr	r3, [pc, #492]	; (8006b38 <_vfiprintf_r+0x244>)
 800694c:	429d      	cmp	r5, r3
 800694e:	d101      	bne.n	8006954 <_vfiprintf_r+0x60>
 8006950:	68b5      	ldr	r5, [r6, #8]
 8006952:	e7df      	b.n	8006914 <_vfiprintf_r+0x20>
 8006954:	4b79      	ldr	r3, [pc, #484]	; (8006b3c <_vfiprintf_r+0x248>)
 8006956:	429d      	cmp	r5, r3
 8006958:	bf08      	it	eq
 800695a:	68f5      	ldreq	r5, [r6, #12]
 800695c:	e7da      	b.n	8006914 <_vfiprintf_r+0x20>
 800695e:	89ab      	ldrh	r3, [r5, #12]
 8006960:	0598      	lsls	r0, r3, #22
 8006962:	d4ed      	bmi.n	8006940 <_vfiprintf_r+0x4c>
 8006964:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006966:	f7ff fccb 	bl	8006300 <__retarget_lock_release_recursive>
 800696a:	e7e9      	b.n	8006940 <_vfiprintf_r+0x4c>
 800696c:	2300      	movs	r3, #0
 800696e:	9309      	str	r3, [sp, #36]	; 0x24
 8006970:	2320      	movs	r3, #32
 8006972:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006976:	f8cd 800c 	str.w	r8, [sp, #12]
 800697a:	2330      	movs	r3, #48	; 0x30
 800697c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8006b40 <_vfiprintf_r+0x24c>
 8006980:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006984:	f04f 0901 	mov.w	r9, #1
 8006988:	4623      	mov	r3, r4
 800698a:	469a      	mov	sl, r3
 800698c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006990:	b10a      	cbz	r2, 8006996 <_vfiprintf_r+0xa2>
 8006992:	2a25      	cmp	r2, #37	; 0x25
 8006994:	d1f9      	bne.n	800698a <_vfiprintf_r+0x96>
 8006996:	ebba 0b04 	subs.w	fp, sl, r4
 800699a:	d00b      	beq.n	80069b4 <_vfiprintf_r+0xc0>
 800699c:	465b      	mov	r3, fp
 800699e:	4622      	mov	r2, r4
 80069a0:	4629      	mov	r1, r5
 80069a2:	4630      	mov	r0, r6
 80069a4:	f7ff ff93 	bl	80068ce <__sfputs_r>
 80069a8:	3001      	adds	r0, #1
 80069aa:	f000 80aa 	beq.w	8006b02 <_vfiprintf_r+0x20e>
 80069ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80069b0:	445a      	add	r2, fp
 80069b2:	9209      	str	r2, [sp, #36]	; 0x24
 80069b4:	f89a 3000 	ldrb.w	r3, [sl]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	f000 80a2 	beq.w	8006b02 <_vfiprintf_r+0x20e>
 80069be:	2300      	movs	r3, #0
 80069c0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80069c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80069c8:	f10a 0a01 	add.w	sl, sl, #1
 80069cc:	9304      	str	r3, [sp, #16]
 80069ce:	9307      	str	r3, [sp, #28]
 80069d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80069d4:	931a      	str	r3, [sp, #104]	; 0x68
 80069d6:	4654      	mov	r4, sl
 80069d8:	2205      	movs	r2, #5
 80069da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069de:	4858      	ldr	r0, [pc, #352]	; (8006b40 <_vfiprintf_r+0x24c>)
 80069e0:	f7f9 fbf6 	bl	80001d0 <memchr>
 80069e4:	9a04      	ldr	r2, [sp, #16]
 80069e6:	b9d8      	cbnz	r0, 8006a20 <_vfiprintf_r+0x12c>
 80069e8:	06d1      	lsls	r1, r2, #27
 80069ea:	bf44      	itt	mi
 80069ec:	2320      	movmi	r3, #32
 80069ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069f2:	0713      	lsls	r3, r2, #28
 80069f4:	bf44      	itt	mi
 80069f6:	232b      	movmi	r3, #43	; 0x2b
 80069f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80069fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006a00:	2b2a      	cmp	r3, #42	; 0x2a
 8006a02:	d015      	beq.n	8006a30 <_vfiprintf_r+0x13c>
 8006a04:	9a07      	ldr	r2, [sp, #28]
 8006a06:	4654      	mov	r4, sl
 8006a08:	2000      	movs	r0, #0
 8006a0a:	f04f 0c0a 	mov.w	ip, #10
 8006a0e:	4621      	mov	r1, r4
 8006a10:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006a14:	3b30      	subs	r3, #48	; 0x30
 8006a16:	2b09      	cmp	r3, #9
 8006a18:	d94e      	bls.n	8006ab8 <_vfiprintf_r+0x1c4>
 8006a1a:	b1b0      	cbz	r0, 8006a4a <_vfiprintf_r+0x156>
 8006a1c:	9207      	str	r2, [sp, #28]
 8006a1e:	e014      	b.n	8006a4a <_vfiprintf_r+0x156>
 8006a20:	eba0 0308 	sub.w	r3, r0, r8
 8006a24:	fa09 f303 	lsl.w	r3, r9, r3
 8006a28:	4313      	orrs	r3, r2
 8006a2a:	9304      	str	r3, [sp, #16]
 8006a2c:	46a2      	mov	sl, r4
 8006a2e:	e7d2      	b.n	80069d6 <_vfiprintf_r+0xe2>
 8006a30:	9b03      	ldr	r3, [sp, #12]
 8006a32:	1d19      	adds	r1, r3, #4
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	9103      	str	r1, [sp, #12]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	bfbb      	ittet	lt
 8006a3c:	425b      	neglt	r3, r3
 8006a3e:	f042 0202 	orrlt.w	r2, r2, #2
 8006a42:	9307      	strge	r3, [sp, #28]
 8006a44:	9307      	strlt	r3, [sp, #28]
 8006a46:	bfb8      	it	lt
 8006a48:	9204      	strlt	r2, [sp, #16]
 8006a4a:	7823      	ldrb	r3, [r4, #0]
 8006a4c:	2b2e      	cmp	r3, #46	; 0x2e
 8006a4e:	d10c      	bne.n	8006a6a <_vfiprintf_r+0x176>
 8006a50:	7863      	ldrb	r3, [r4, #1]
 8006a52:	2b2a      	cmp	r3, #42	; 0x2a
 8006a54:	d135      	bne.n	8006ac2 <_vfiprintf_r+0x1ce>
 8006a56:	9b03      	ldr	r3, [sp, #12]
 8006a58:	1d1a      	adds	r2, r3, #4
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	9203      	str	r2, [sp, #12]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	bfb8      	it	lt
 8006a62:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8006a66:	3402      	adds	r4, #2
 8006a68:	9305      	str	r3, [sp, #20]
 8006a6a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8006b50 <_vfiprintf_r+0x25c>
 8006a6e:	7821      	ldrb	r1, [r4, #0]
 8006a70:	2203      	movs	r2, #3
 8006a72:	4650      	mov	r0, sl
 8006a74:	f7f9 fbac 	bl	80001d0 <memchr>
 8006a78:	b140      	cbz	r0, 8006a8c <_vfiprintf_r+0x198>
 8006a7a:	2340      	movs	r3, #64	; 0x40
 8006a7c:	eba0 000a 	sub.w	r0, r0, sl
 8006a80:	fa03 f000 	lsl.w	r0, r3, r0
 8006a84:	9b04      	ldr	r3, [sp, #16]
 8006a86:	4303      	orrs	r3, r0
 8006a88:	3401      	adds	r4, #1
 8006a8a:	9304      	str	r3, [sp, #16]
 8006a8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006a90:	482c      	ldr	r0, [pc, #176]	; (8006b44 <_vfiprintf_r+0x250>)
 8006a92:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006a96:	2206      	movs	r2, #6
 8006a98:	f7f9 fb9a 	bl	80001d0 <memchr>
 8006a9c:	2800      	cmp	r0, #0
 8006a9e:	d03f      	beq.n	8006b20 <_vfiprintf_r+0x22c>
 8006aa0:	4b29      	ldr	r3, [pc, #164]	; (8006b48 <_vfiprintf_r+0x254>)
 8006aa2:	bb1b      	cbnz	r3, 8006aec <_vfiprintf_r+0x1f8>
 8006aa4:	9b03      	ldr	r3, [sp, #12]
 8006aa6:	3307      	adds	r3, #7
 8006aa8:	f023 0307 	bic.w	r3, r3, #7
 8006aac:	3308      	adds	r3, #8
 8006aae:	9303      	str	r3, [sp, #12]
 8006ab0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006ab2:	443b      	add	r3, r7
 8006ab4:	9309      	str	r3, [sp, #36]	; 0x24
 8006ab6:	e767      	b.n	8006988 <_vfiprintf_r+0x94>
 8006ab8:	fb0c 3202 	mla	r2, ip, r2, r3
 8006abc:	460c      	mov	r4, r1
 8006abe:	2001      	movs	r0, #1
 8006ac0:	e7a5      	b.n	8006a0e <_vfiprintf_r+0x11a>
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	3401      	adds	r4, #1
 8006ac6:	9305      	str	r3, [sp, #20]
 8006ac8:	4619      	mov	r1, r3
 8006aca:	f04f 0c0a 	mov.w	ip, #10
 8006ace:	4620      	mov	r0, r4
 8006ad0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006ad4:	3a30      	subs	r2, #48	; 0x30
 8006ad6:	2a09      	cmp	r2, #9
 8006ad8:	d903      	bls.n	8006ae2 <_vfiprintf_r+0x1ee>
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0c5      	beq.n	8006a6a <_vfiprintf_r+0x176>
 8006ade:	9105      	str	r1, [sp, #20]
 8006ae0:	e7c3      	b.n	8006a6a <_vfiprintf_r+0x176>
 8006ae2:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ae6:	4604      	mov	r4, r0
 8006ae8:	2301      	movs	r3, #1
 8006aea:	e7f0      	b.n	8006ace <_vfiprintf_r+0x1da>
 8006aec:	ab03      	add	r3, sp, #12
 8006aee:	9300      	str	r3, [sp, #0]
 8006af0:	462a      	mov	r2, r5
 8006af2:	4b16      	ldr	r3, [pc, #88]	; (8006b4c <_vfiprintf_r+0x258>)
 8006af4:	a904      	add	r1, sp, #16
 8006af6:	4630      	mov	r0, r6
 8006af8:	f3af 8000 	nop.w
 8006afc:	4607      	mov	r7, r0
 8006afe:	1c78      	adds	r0, r7, #1
 8006b00:	d1d6      	bne.n	8006ab0 <_vfiprintf_r+0x1bc>
 8006b02:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b04:	07d9      	lsls	r1, r3, #31
 8006b06:	d405      	bmi.n	8006b14 <_vfiprintf_r+0x220>
 8006b08:	89ab      	ldrh	r3, [r5, #12]
 8006b0a:	059a      	lsls	r2, r3, #22
 8006b0c:	d402      	bmi.n	8006b14 <_vfiprintf_r+0x220>
 8006b0e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b10:	f7ff fbf6 	bl	8006300 <__retarget_lock_release_recursive>
 8006b14:	89ab      	ldrh	r3, [r5, #12]
 8006b16:	065b      	lsls	r3, r3, #25
 8006b18:	f53f af12 	bmi.w	8006940 <_vfiprintf_r+0x4c>
 8006b1c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006b1e:	e711      	b.n	8006944 <_vfiprintf_r+0x50>
 8006b20:	ab03      	add	r3, sp, #12
 8006b22:	9300      	str	r3, [sp, #0]
 8006b24:	462a      	mov	r2, r5
 8006b26:	4b09      	ldr	r3, [pc, #36]	; (8006b4c <_vfiprintf_r+0x258>)
 8006b28:	a904      	add	r1, sp, #16
 8006b2a:	4630      	mov	r0, r6
 8006b2c:	f000 f880 	bl	8006c30 <_printf_i>
 8006b30:	e7e4      	b.n	8006afc <_vfiprintf_r+0x208>
 8006b32:	bf00      	nop
 8006b34:	08007254 	.word	0x08007254
 8006b38:	08007274 	.word	0x08007274
 8006b3c:	08007234 	.word	0x08007234
 8006b40:	08007298 	.word	0x08007298
 8006b44:	080072a2 	.word	0x080072a2
 8006b48:	00000000 	.word	0x00000000
 8006b4c:	080068cf 	.word	0x080068cf
 8006b50:	0800729e 	.word	0x0800729e

08006b54 <_printf_common>:
 8006b54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b58:	4616      	mov	r6, r2
 8006b5a:	4699      	mov	r9, r3
 8006b5c:	688a      	ldr	r2, [r1, #8]
 8006b5e:	690b      	ldr	r3, [r1, #16]
 8006b60:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006b64:	4293      	cmp	r3, r2
 8006b66:	bfb8      	it	lt
 8006b68:	4613      	movlt	r3, r2
 8006b6a:	6033      	str	r3, [r6, #0]
 8006b6c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006b70:	4607      	mov	r7, r0
 8006b72:	460c      	mov	r4, r1
 8006b74:	b10a      	cbz	r2, 8006b7a <_printf_common+0x26>
 8006b76:	3301      	adds	r3, #1
 8006b78:	6033      	str	r3, [r6, #0]
 8006b7a:	6823      	ldr	r3, [r4, #0]
 8006b7c:	0699      	lsls	r1, r3, #26
 8006b7e:	bf42      	ittt	mi
 8006b80:	6833      	ldrmi	r3, [r6, #0]
 8006b82:	3302      	addmi	r3, #2
 8006b84:	6033      	strmi	r3, [r6, #0]
 8006b86:	6825      	ldr	r5, [r4, #0]
 8006b88:	f015 0506 	ands.w	r5, r5, #6
 8006b8c:	d106      	bne.n	8006b9c <_printf_common+0x48>
 8006b8e:	f104 0a19 	add.w	sl, r4, #25
 8006b92:	68e3      	ldr	r3, [r4, #12]
 8006b94:	6832      	ldr	r2, [r6, #0]
 8006b96:	1a9b      	subs	r3, r3, r2
 8006b98:	42ab      	cmp	r3, r5
 8006b9a:	dc26      	bgt.n	8006bea <_printf_common+0x96>
 8006b9c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ba0:	1e13      	subs	r3, r2, #0
 8006ba2:	6822      	ldr	r2, [r4, #0]
 8006ba4:	bf18      	it	ne
 8006ba6:	2301      	movne	r3, #1
 8006ba8:	0692      	lsls	r2, r2, #26
 8006baa:	d42b      	bmi.n	8006c04 <_printf_common+0xb0>
 8006bac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006bb0:	4649      	mov	r1, r9
 8006bb2:	4638      	mov	r0, r7
 8006bb4:	47c0      	blx	r8
 8006bb6:	3001      	adds	r0, #1
 8006bb8:	d01e      	beq.n	8006bf8 <_printf_common+0xa4>
 8006bba:	6823      	ldr	r3, [r4, #0]
 8006bbc:	68e5      	ldr	r5, [r4, #12]
 8006bbe:	6832      	ldr	r2, [r6, #0]
 8006bc0:	f003 0306 	and.w	r3, r3, #6
 8006bc4:	2b04      	cmp	r3, #4
 8006bc6:	bf08      	it	eq
 8006bc8:	1aad      	subeq	r5, r5, r2
 8006bca:	68a3      	ldr	r3, [r4, #8]
 8006bcc:	6922      	ldr	r2, [r4, #16]
 8006bce:	bf0c      	ite	eq
 8006bd0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006bd4:	2500      	movne	r5, #0
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	bfc4      	itt	gt
 8006bda:	1a9b      	subgt	r3, r3, r2
 8006bdc:	18ed      	addgt	r5, r5, r3
 8006bde:	2600      	movs	r6, #0
 8006be0:	341a      	adds	r4, #26
 8006be2:	42b5      	cmp	r5, r6
 8006be4:	d11a      	bne.n	8006c1c <_printf_common+0xc8>
 8006be6:	2000      	movs	r0, #0
 8006be8:	e008      	b.n	8006bfc <_printf_common+0xa8>
 8006bea:	2301      	movs	r3, #1
 8006bec:	4652      	mov	r2, sl
 8006bee:	4649      	mov	r1, r9
 8006bf0:	4638      	mov	r0, r7
 8006bf2:	47c0      	blx	r8
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d103      	bne.n	8006c00 <_printf_common+0xac>
 8006bf8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006bfc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c00:	3501      	adds	r5, #1
 8006c02:	e7c6      	b.n	8006b92 <_printf_common+0x3e>
 8006c04:	18e1      	adds	r1, r4, r3
 8006c06:	1c5a      	adds	r2, r3, #1
 8006c08:	2030      	movs	r0, #48	; 0x30
 8006c0a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006c0e:	4422      	add	r2, r4
 8006c10:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006c14:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006c18:	3302      	adds	r3, #2
 8006c1a:	e7c7      	b.n	8006bac <_printf_common+0x58>
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	4622      	mov	r2, r4
 8006c20:	4649      	mov	r1, r9
 8006c22:	4638      	mov	r0, r7
 8006c24:	47c0      	blx	r8
 8006c26:	3001      	adds	r0, #1
 8006c28:	d0e6      	beq.n	8006bf8 <_printf_common+0xa4>
 8006c2a:	3601      	adds	r6, #1
 8006c2c:	e7d9      	b.n	8006be2 <_printf_common+0x8e>
	...

08006c30 <_printf_i>:
 8006c30:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c34:	7e0f      	ldrb	r7, [r1, #24]
 8006c36:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006c38:	2f78      	cmp	r7, #120	; 0x78
 8006c3a:	4691      	mov	r9, r2
 8006c3c:	4680      	mov	r8, r0
 8006c3e:	460c      	mov	r4, r1
 8006c40:	469a      	mov	sl, r3
 8006c42:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006c46:	d807      	bhi.n	8006c58 <_printf_i+0x28>
 8006c48:	2f62      	cmp	r7, #98	; 0x62
 8006c4a:	d80a      	bhi.n	8006c62 <_printf_i+0x32>
 8006c4c:	2f00      	cmp	r7, #0
 8006c4e:	f000 80d8 	beq.w	8006e02 <_printf_i+0x1d2>
 8006c52:	2f58      	cmp	r7, #88	; 0x58
 8006c54:	f000 80a3 	beq.w	8006d9e <_printf_i+0x16e>
 8006c58:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c5c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006c60:	e03a      	b.n	8006cd8 <_printf_i+0xa8>
 8006c62:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006c66:	2b15      	cmp	r3, #21
 8006c68:	d8f6      	bhi.n	8006c58 <_printf_i+0x28>
 8006c6a:	a101      	add	r1, pc, #4	; (adr r1, 8006c70 <_printf_i+0x40>)
 8006c6c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006c70:	08006cc9 	.word	0x08006cc9
 8006c74:	08006cdd 	.word	0x08006cdd
 8006c78:	08006c59 	.word	0x08006c59
 8006c7c:	08006c59 	.word	0x08006c59
 8006c80:	08006c59 	.word	0x08006c59
 8006c84:	08006c59 	.word	0x08006c59
 8006c88:	08006cdd 	.word	0x08006cdd
 8006c8c:	08006c59 	.word	0x08006c59
 8006c90:	08006c59 	.word	0x08006c59
 8006c94:	08006c59 	.word	0x08006c59
 8006c98:	08006c59 	.word	0x08006c59
 8006c9c:	08006de9 	.word	0x08006de9
 8006ca0:	08006d0d 	.word	0x08006d0d
 8006ca4:	08006dcb 	.word	0x08006dcb
 8006ca8:	08006c59 	.word	0x08006c59
 8006cac:	08006c59 	.word	0x08006c59
 8006cb0:	08006e0b 	.word	0x08006e0b
 8006cb4:	08006c59 	.word	0x08006c59
 8006cb8:	08006d0d 	.word	0x08006d0d
 8006cbc:	08006c59 	.word	0x08006c59
 8006cc0:	08006c59 	.word	0x08006c59
 8006cc4:	08006dd3 	.word	0x08006dd3
 8006cc8:	682b      	ldr	r3, [r5, #0]
 8006cca:	1d1a      	adds	r2, r3, #4
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	602a      	str	r2, [r5, #0]
 8006cd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006cd4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0a3      	b.n	8006e24 <_printf_i+0x1f4>
 8006cdc:	6820      	ldr	r0, [r4, #0]
 8006cde:	6829      	ldr	r1, [r5, #0]
 8006ce0:	0606      	lsls	r6, r0, #24
 8006ce2:	f101 0304 	add.w	r3, r1, #4
 8006ce6:	d50a      	bpl.n	8006cfe <_printf_i+0xce>
 8006ce8:	680e      	ldr	r6, [r1, #0]
 8006cea:	602b      	str	r3, [r5, #0]
 8006cec:	2e00      	cmp	r6, #0
 8006cee:	da03      	bge.n	8006cf8 <_printf_i+0xc8>
 8006cf0:	232d      	movs	r3, #45	; 0x2d
 8006cf2:	4276      	negs	r6, r6
 8006cf4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006cf8:	485e      	ldr	r0, [pc, #376]	; (8006e74 <_printf_i+0x244>)
 8006cfa:	230a      	movs	r3, #10
 8006cfc:	e019      	b.n	8006d32 <_printf_i+0x102>
 8006cfe:	680e      	ldr	r6, [r1, #0]
 8006d00:	602b      	str	r3, [r5, #0]
 8006d02:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006d06:	bf18      	it	ne
 8006d08:	b236      	sxthne	r6, r6
 8006d0a:	e7ef      	b.n	8006cec <_printf_i+0xbc>
 8006d0c:	682b      	ldr	r3, [r5, #0]
 8006d0e:	6820      	ldr	r0, [r4, #0]
 8006d10:	1d19      	adds	r1, r3, #4
 8006d12:	6029      	str	r1, [r5, #0]
 8006d14:	0601      	lsls	r1, r0, #24
 8006d16:	d501      	bpl.n	8006d1c <_printf_i+0xec>
 8006d18:	681e      	ldr	r6, [r3, #0]
 8006d1a:	e002      	b.n	8006d22 <_printf_i+0xf2>
 8006d1c:	0646      	lsls	r6, r0, #25
 8006d1e:	d5fb      	bpl.n	8006d18 <_printf_i+0xe8>
 8006d20:	881e      	ldrh	r6, [r3, #0]
 8006d22:	4854      	ldr	r0, [pc, #336]	; (8006e74 <_printf_i+0x244>)
 8006d24:	2f6f      	cmp	r7, #111	; 0x6f
 8006d26:	bf0c      	ite	eq
 8006d28:	2308      	moveq	r3, #8
 8006d2a:	230a      	movne	r3, #10
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006d32:	6865      	ldr	r5, [r4, #4]
 8006d34:	60a5      	str	r5, [r4, #8]
 8006d36:	2d00      	cmp	r5, #0
 8006d38:	bfa2      	ittt	ge
 8006d3a:	6821      	ldrge	r1, [r4, #0]
 8006d3c:	f021 0104 	bicge.w	r1, r1, #4
 8006d40:	6021      	strge	r1, [r4, #0]
 8006d42:	b90e      	cbnz	r6, 8006d48 <_printf_i+0x118>
 8006d44:	2d00      	cmp	r5, #0
 8006d46:	d04d      	beq.n	8006de4 <_printf_i+0x1b4>
 8006d48:	4615      	mov	r5, r2
 8006d4a:	fbb6 f1f3 	udiv	r1, r6, r3
 8006d4e:	fb03 6711 	mls	r7, r3, r1, r6
 8006d52:	5dc7      	ldrb	r7, [r0, r7]
 8006d54:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006d58:	4637      	mov	r7, r6
 8006d5a:	42bb      	cmp	r3, r7
 8006d5c:	460e      	mov	r6, r1
 8006d5e:	d9f4      	bls.n	8006d4a <_printf_i+0x11a>
 8006d60:	2b08      	cmp	r3, #8
 8006d62:	d10b      	bne.n	8006d7c <_printf_i+0x14c>
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	07de      	lsls	r6, r3, #31
 8006d68:	d508      	bpl.n	8006d7c <_printf_i+0x14c>
 8006d6a:	6923      	ldr	r3, [r4, #16]
 8006d6c:	6861      	ldr	r1, [r4, #4]
 8006d6e:	4299      	cmp	r1, r3
 8006d70:	bfde      	ittt	le
 8006d72:	2330      	movle	r3, #48	; 0x30
 8006d74:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006d78:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8006d7c:	1b52      	subs	r2, r2, r5
 8006d7e:	6122      	str	r2, [r4, #16]
 8006d80:	f8cd a000 	str.w	sl, [sp]
 8006d84:	464b      	mov	r3, r9
 8006d86:	aa03      	add	r2, sp, #12
 8006d88:	4621      	mov	r1, r4
 8006d8a:	4640      	mov	r0, r8
 8006d8c:	f7ff fee2 	bl	8006b54 <_printf_common>
 8006d90:	3001      	adds	r0, #1
 8006d92:	d14c      	bne.n	8006e2e <_printf_i+0x1fe>
 8006d94:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006d98:	b004      	add	sp, #16
 8006d9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d9e:	4835      	ldr	r0, [pc, #212]	; (8006e74 <_printf_i+0x244>)
 8006da0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006da4:	6829      	ldr	r1, [r5, #0]
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006dac:	6029      	str	r1, [r5, #0]
 8006dae:	061d      	lsls	r5, r3, #24
 8006db0:	d514      	bpl.n	8006ddc <_printf_i+0x1ac>
 8006db2:	07df      	lsls	r7, r3, #31
 8006db4:	bf44      	itt	mi
 8006db6:	f043 0320 	orrmi.w	r3, r3, #32
 8006dba:	6023      	strmi	r3, [r4, #0]
 8006dbc:	b91e      	cbnz	r6, 8006dc6 <_printf_i+0x196>
 8006dbe:	6823      	ldr	r3, [r4, #0]
 8006dc0:	f023 0320 	bic.w	r3, r3, #32
 8006dc4:	6023      	str	r3, [r4, #0]
 8006dc6:	2310      	movs	r3, #16
 8006dc8:	e7b0      	b.n	8006d2c <_printf_i+0xfc>
 8006dca:	6823      	ldr	r3, [r4, #0]
 8006dcc:	f043 0320 	orr.w	r3, r3, #32
 8006dd0:	6023      	str	r3, [r4, #0]
 8006dd2:	2378      	movs	r3, #120	; 0x78
 8006dd4:	4828      	ldr	r0, [pc, #160]	; (8006e78 <_printf_i+0x248>)
 8006dd6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006dda:	e7e3      	b.n	8006da4 <_printf_i+0x174>
 8006ddc:	0659      	lsls	r1, r3, #25
 8006dde:	bf48      	it	mi
 8006de0:	b2b6      	uxthmi	r6, r6
 8006de2:	e7e6      	b.n	8006db2 <_printf_i+0x182>
 8006de4:	4615      	mov	r5, r2
 8006de6:	e7bb      	b.n	8006d60 <_printf_i+0x130>
 8006de8:	682b      	ldr	r3, [r5, #0]
 8006dea:	6826      	ldr	r6, [r4, #0]
 8006dec:	6961      	ldr	r1, [r4, #20]
 8006dee:	1d18      	adds	r0, r3, #4
 8006df0:	6028      	str	r0, [r5, #0]
 8006df2:	0635      	lsls	r5, r6, #24
 8006df4:	681b      	ldr	r3, [r3, #0]
 8006df6:	d501      	bpl.n	8006dfc <_printf_i+0x1cc>
 8006df8:	6019      	str	r1, [r3, #0]
 8006dfa:	e002      	b.n	8006e02 <_printf_i+0x1d2>
 8006dfc:	0670      	lsls	r0, r6, #25
 8006dfe:	d5fb      	bpl.n	8006df8 <_printf_i+0x1c8>
 8006e00:	8019      	strh	r1, [r3, #0]
 8006e02:	2300      	movs	r3, #0
 8006e04:	6123      	str	r3, [r4, #16]
 8006e06:	4615      	mov	r5, r2
 8006e08:	e7ba      	b.n	8006d80 <_printf_i+0x150>
 8006e0a:	682b      	ldr	r3, [r5, #0]
 8006e0c:	1d1a      	adds	r2, r3, #4
 8006e0e:	602a      	str	r2, [r5, #0]
 8006e10:	681d      	ldr	r5, [r3, #0]
 8006e12:	6862      	ldr	r2, [r4, #4]
 8006e14:	2100      	movs	r1, #0
 8006e16:	4628      	mov	r0, r5
 8006e18:	f7f9 f9da 	bl	80001d0 <memchr>
 8006e1c:	b108      	cbz	r0, 8006e22 <_printf_i+0x1f2>
 8006e1e:	1b40      	subs	r0, r0, r5
 8006e20:	6060      	str	r0, [r4, #4]
 8006e22:	6863      	ldr	r3, [r4, #4]
 8006e24:	6123      	str	r3, [r4, #16]
 8006e26:	2300      	movs	r3, #0
 8006e28:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006e2c:	e7a8      	b.n	8006d80 <_printf_i+0x150>
 8006e2e:	6923      	ldr	r3, [r4, #16]
 8006e30:	462a      	mov	r2, r5
 8006e32:	4649      	mov	r1, r9
 8006e34:	4640      	mov	r0, r8
 8006e36:	47d0      	blx	sl
 8006e38:	3001      	adds	r0, #1
 8006e3a:	d0ab      	beq.n	8006d94 <_printf_i+0x164>
 8006e3c:	6823      	ldr	r3, [r4, #0]
 8006e3e:	079b      	lsls	r3, r3, #30
 8006e40:	d413      	bmi.n	8006e6a <_printf_i+0x23a>
 8006e42:	68e0      	ldr	r0, [r4, #12]
 8006e44:	9b03      	ldr	r3, [sp, #12]
 8006e46:	4298      	cmp	r0, r3
 8006e48:	bfb8      	it	lt
 8006e4a:	4618      	movlt	r0, r3
 8006e4c:	e7a4      	b.n	8006d98 <_printf_i+0x168>
 8006e4e:	2301      	movs	r3, #1
 8006e50:	4632      	mov	r2, r6
 8006e52:	4649      	mov	r1, r9
 8006e54:	4640      	mov	r0, r8
 8006e56:	47d0      	blx	sl
 8006e58:	3001      	adds	r0, #1
 8006e5a:	d09b      	beq.n	8006d94 <_printf_i+0x164>
 8006e5c:	3501      	adds	r5, #1
 8006e5e:	68e3      	ldr	r3, [r4, #12]
 8006e60:	9903      	ldr	r1, [sp, #12]
 8006e62:	1a5b      	subs	r3, r3, r1
 8006e64:	42ab      	cmp	r3, r5
 8006e66:	dcf2      	bgt.n	8006e4e <_printf_i+0x21e>
 8006e68:	e7eb      	b.n	8006e42 <_printf_i+0x212>
 8006e6a:	2500      	movs	r5, #0
 8006e6c:	f104 0619 	add.w	r6, r4, #25
 8006e70:	e7f5      	b.n	8006e5e <_printf_i+0x22e>
 8006e72:	bf00      	nop
 8006e74:	080072a9 	.word	0x080072a9
 8006e78:	080072ba 	.word	0x080072ba

08006e7c <_read_r>:
 8006e7c:	b538      	push	{r3, r4, r5, lr}
 8006e7e:	4d07      	ldr	r5, [pc, #28]	; (8006e9c <_read_r+0x20>)
 8006e80:	4604      	mov	r4, r0
 8006e82:	4608      	mov	r0, r1
 8006e84:	4611      	mov	r1, r2
 8006e86:	2200      	movs	r2, #0
 8006e88:	602a      	str	r2, [r5, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	f7f9 fe18 	bl	8000ac0 <_read>
 8006e90:	1c43      	adds	r3, r0, #1
 8006e92:	d102      	bne.n	8006e9a <_read_r+0x1e>
 8006e94:	682b      	ldr	r3, [r5, #0]
 8006e96:	b103      	cbz	r3, 8006e9a <_read_r+0x1e>
 8006e98:	6023      	str	r3, [r4, #0]
 8006e9a:	bd38      	pop	{r3, r4, r5, pc}
 8006e9c:	20001e00 	.word	0x20001e00

08006ea0 <__swbuf_r>:
 8006ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006ea2:	460e      	mov	r6, r1
 8006ea4:	4614      	mov	r4, r2
 8006ea6:	4605      	mov	r5, r0
 8006ea8:	b118      	cbz	r0, 8006eb2 <__swbuf_r+0x12>
 8006eaa:	6983      	ldr	r3, [r0, #24]
 8006eac:	b90b      	cbnz	r3, 8006eb2 <__swbuf_r+0x12>
 8006eae:	f7ff f963 	bl	8006178 <__sinit>
 8006eb2:	4b21      	ldr	r3, [pc, #132]	; (8006f38 <__swbuf_r+0x98>)
 8006eb4:	429c      	cmp	r4, r3
 8006eb6:	d12b      	bne.n	8006f10 <__swbuf_r+0x70>
 8006eb8:	686c      	ldr	r4, [r5, #4]
 8006eba:	69a3      	ldr	r3, [r4, #24]
 8006ebc:	60a3      	str	r3, [r4, #8]
 8006ebe:	89a3      	ldrh	r3, [r4, #12]
 8006ec0:	071a      	lsls	r2, r3, #28
 8006ec2:	d52f      	bpl.n	8006f24 <__swbuf_r+0x84>
 8006ec4:	6923      	ldr	r3, [r4, #16]
 8006ec6:	b36b      	cbz	r3, 8006f24 <__swbuf_r+0x84>
 8006ec8:	6923      	ldr	r3, [r4, #16]
 8006eca:	6820      	ldr	r0, [r4, #0]
 8006ecc:	1ac0      	subs	r0, r0, r3
 8006ece:	6963      	ldr	r3, [r4, #20]
 8006ed0:	b2f6      	uxtb	r6, r6
 8006ed2:	4283      	cmp	r3, r0
 8006ed4:	4637      	mov	r7, r6
 8006ed6:	dc04      	bgt.n	8006ee2 <__swbuf_r+0x42>
 8006ed8:	4621      	mov	r1, r4
 8006eda:	4628      	mov	r0, r5
 8006edc:	f7ff fc3a 	bl	8006754 <_fflush_r>
 8006ee0:	bb30      	cbnz	r0, 8006f30 <__swbuf_r+0x90>
 8006ee2:	68a3      	ldr	r3, [r4, #8]
 8006ee4:	3b01      	subs	r3, #1
 8006ee6:	60a3      	str	r3, [r4, #8]
 8006ee8:	6823      	ldr	r3, [r4, #0]
 8006eea:	1c5a      	adds	r2, r3, #1
 8006eec:	6022      	str	r2, [r4, #0]
 8006eee:	701e      	strb	r6, [r3, #0]
 8006ef0:	6963      	ldr	r3, [r4, #20]
 8006ef2:	3001      	adds	r0, #1
 8006ef4:	4283      	cmp	r3, r0
 8006ef6:	d004      	beq.n	8006f02 <__swbuf_r+0x62>
 8006ef8:	89a3      	ldrh	r3, [r4, #12]
 8006efa:	07db      	lsls	r3, r3, #31
 8006efc:	d506      	bpl.n	8006f0c <__swbuf_r+0x6c>
 8006efe:	2e0a      	cmp	r6, #10
 8006f00:	d104      	bne.n	8006f0c <__swbuf_r+0x6c>
 8006f02:	4621      	mov	r1, r4
 8006f04:	4628      	mov	r0, r5
 8006f06:	f7ff fc25 	bl	8006754 <_fflush_r>
 8006f0a:	b988      	cbnz	r0, 8006f30 <__swbuf_r+0x90>
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f10:	4b0a      	ldr	r3, [pc, #40]	; (8006f3c <__swbuf_r+0x9c>)
 8006f12:	429c      	cmp	r4, r3
 8006f14:	d101      	bne.n	8006f1a <__swbuf_r+0x7a>
 8006f16:	68ac      	ldr	r4, [r5, #8]
 8006f18:	e7cf      	b.n	8006eba <__swbuf_r+0x1a>
 8006f1a:	4b09      	ldr	r3, [pc, #36]	; (8006f40 <__swbuf_r+0xa0>)
 8006f1c:	429c      	cmp	r4, r3
 8006f1e:	bf08      	it	eq
 8006f20:	68ec      	ldreq	r4, [r5, #12]
 8006f22:	e7ca      	b.n	8006eba <__swbuf_r+0x1a>
 8006f24:	4621      	mov	r1, r4
 8006f26:	4628      	mov	r0, r5
 8006f28:	f000 f80c 	bl	8006f44 <__swsetup_r>
 8006f2c:	2800      	cmp	r0, #0
 8006f2e:	d0cb      	beq.n	8006ec8 <__swbuf_r+0x28>
 8006f30:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8006f34:	e7ea      	b.n	8006f0c <__swbuf_r+0x6c>
 8006f36:	bf00      	nop
 8006f38:	08007254 	.word	0x08007254
 8006f3c:	08007274 	.word	0x08007274
 8006f40:	08007234 	.word	0x08007234

08006f44 <__swsetup_r>:
 8006f44:	4b32      	ldr	r3, [pc, #200]	; (8007010 <__swsetup_r+0xcc>)
 8006f46:	b570      	push	{r4, r5, r6, lr}
 8006f48:	681d      	ldr	r5, [r3, #0]
 8006f4a:	4606      	mov	r6, r0
 8006f4c:	460c      	mov	r4, r1
 8006f4e:	b125      	cbz	r5, 8006f5a <__swsetup_r+0x16>
 8006f50:	69ab      	ldr	r3, [r5, #24]
 8006f52:	b913      	cbnz	r3, 8006f5a <__swsetup_r+0x16>
 8006f54:	4628      	mov	r0, r5
 8006f56:	f7ff f90f 	bl	8006178 <__sinit>
 8006f5a:	4b2e      	ldr	r3, [pc, #184]	; (8007014 <__swsetup_r+0xd0>)
 8006f5c:	429c      	cmp	r4, r3
 8006f5e:	d10f      	bne.n	8006f80 <__swsetup_r+0x3c>
 8006f60:	686c      	ldr	r4, [r5, #4]
 8006f62:	89a3      	ldrh	r3, [r4, #12]
 8006f64:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f68:	0719      	lsls	r1, r3, #28
 8006f6a:	d42c      	bmi.n	8006fc6 <__swsetup_r+0x82>
 8006f6c:	06dd      	lsls	r5, r3, #27
 8006f6e:	d411      	bmi.n	8006f94 <__swsetup_r+0x50>
 8006f70:	2309      	movs	r3, #9
 8006f72:	6033      	str	r3, [r6, #0]
 8006f74:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006f78:	81a3      	strh	r3, [r4, #12]
 8006f7a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8006f7e:	e03e      	b.n	8006ffe <__swsetup_r+0xba>
 8006f80:	4b25      	ldr	r3, [pc, #148]	; (8007018 <__swsetup_r+0xd4>)
 8006f82:	429c      	cmp	r4, r3
 8006f84:	d101      	bne.n	8006f8a <__swsetup_r+0x46>
 8006f86:	68ac      	ldr	r4, [r5, #8]
 8006f88:	e7eb      	b.n	8006f62 <__swsetup_r+0x1e>
 8006f8a:	4b24      	ldr	r3, [pc, #144]	; (800701c <__swsetup_r+0xd8>)
 8006f8c:	429c      	cmp	r4, r3
 8006f8e:	bf08      	it	eq
 8006f90:	68ec      	ldreq	r4, [r5, #12]
 8006f92:	e7e6      	b.n	8006f62 <__swsetup_r+0x1e>
 8006f94:	0758      	lsls	r0, r3, #29
 8006f96:	d512      	bpl.n	8006fbe <__swsetup_r+0x7a>
 8006f98:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006f9a:	b141      	cbz	r1, 8006fae <__swsetup_r+0x6a>
 8006f9c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fa0:	4299      	cmp	r1, r3
 8006fa2:	d002      	beq.n	8006faa <__swsetup_r+0x66>
 8006fa4:	4630      	mov	r0, r6
 8006fa6:	f7ff fc2f 	bl	8006808 <_free_r>
 8006faa:	2300      	movs	r3, #0
 8006fac:	6363      	str	r3, [r4, #52]	; 0x34
 8006fae:	89a3      	ldrh	r3, [r4, #12]
 8006fb0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006fb4:	81a3      	strh	r3, [r4, #12]
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	6063      	str	r3, [r4, #4]
 8006fba:	6923      	ldr	r3, [r4, #16]
 8006fbc:	6023      	str	r3, [r4, #0]
 8006fbe:	89a3      	ldrh	r3, [r4, #12]
 8006fc0:	f043 0308 	orr.w	r3, r3, #8
 8006fc4:	81a3      	strh	r3, [r4, #12]
 8006fc6:	6923      	ldr	r3, [r4, #16]
 8006fc8:	b94b      	cbnz	r3, 8006fde <__swsetup_r+0x9a>
 8006fca:	89a3      	ldrh	r3, [r4, #12]
 8006fcc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006fd4:	d003      	beq.n	8006fde <__swsetup_r+0x9a>
 8006fd6:	4621      	mov	r1, r4
 8006fd8:	4630      	mov	r0, r6
 8006fda:	f000 f847 	bl	800706c <__smakebuf_r>
 8006fde:	89a0      	ldrh	r0, [r4, #12]
 8006fe0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fe4:	f010 0301 	ands.w	r3, r0, #1
 8006fe8:	d00a      	beq.n	8007000 <__swsetup_r+0xbc>
 8006fea:	2300      	movs	r3, #0
 8006fec:	60a3      	str	r3, [r4, #8]
 8006fee:	6963      	ldr	r3, [r4, #20]
 8006ff0:	425b      	negs	r3, r3
 8006ff2:	61a3      	str	r3, [r4, #24]
 8006ff4:	6923      	ldr	r3, [r4, #16]
 8006ff6:	b943      	cbnz	r3, 800700a <__swsetup_r+0xc6>
 8006ff8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006ffc:	d1ba      	bne.n	8006f74 <__swsetup_r+0x30>
 8006ffe:	bd70      	pop	{r4, r5, r6, pc}
 8007000:	0781      	lsls	r1, r0, #30
 8007002:	bf58      	it	pl
 8007004:	6963      	ldrpl	r3, [r4, #20]
 8007006:	60a3      	str	r3, [r4, #8]
 8007008:	e7f4      	b.n	8006ff4 <__swsetup_r+0xb0>
 800700a:	2000      	movs	r0, #0
 800700c:	e7f7      	b.n	8006ffe <__swsetup_r+0xba>
 800700e:	bf00      	nop
 8007010:	20000010 	.word	0x20000010
 8007014:	08007254 	.word	0x08007254
 8007018:	08007274 	.word	0x08007274
 800701c:	08007234 	.word	0x08007234

08007020 <__swhatbuf_r>:
 8007020:	b570      	push	{r4, r5, r6, lr}
 8007022:	460e      	mov	r6, r1
 8007024:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007028:	2900      	cmp	r1, #0
 800702a:	b096      	sub	sp, #88	; 0x58
 800702c:	4614      	mov	r4, r2
 800702e:	461d      	mov	r5, r3
 8007030:	da08      	bge.n	8007044 <__swhatbuf_r+0x24>
 8007032:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007036:	2200      	movs	r2, #0
 8007038:	602a      	str	r2, [r5, #0]
 800703a:	061a      	lsls	r2, r3, #24
 800703c:	d410      	bmi.n	8007060 <__swhatbuf_r+0x40>
 800703e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007042:	e00e      	b.n	8007062 <__swhatbuf_r+0x42>
 8007044:	466a      	mov	r2, sp
 8007046:	f000 f851 	bl	80070ec <_fstat_r>
 800704a:	2800      	cmp	r0, #0
 800704c:	dbf1      	blt.n	8007032 <__swhatbuf_r+0x12>
 800704e:	9a01      	ldr	r2, [sp, #4]
 8007050:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007054:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007058:	425a      	negs	r2, r3
 800705a:	415a      	adcs	r2, r3
 800705c:	602a      	str	r2, [r5, #0]
 800705e:	e7ee      	b.n	800703e <__swhatbuf_r+0x1e>
 8007060:	2340      	movs	r3, #64	; 0x40
 8007062:	2000      	movs	r0, #0
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	b016      	add	sp, #88	; 0x58
 8007068:	bd70      	pop	{r4, r5, r6, pc}
	...

0800706c <__smakebuf_r>:
 800706c:	898b      	ldrh	r3, [r1, #12]
 800706e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007070:	079d      	lsls	r5, r3, #30
 8007072:	4606      	mov	r6, r0
 8007074:	460c      	mov	r4, r1
 8007076:	d507      	bpl.n	8007088 <__smakebuf_r+0x1c>
 8007078:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800707c:	6023      	str	r3, [r4, #0]
 800707e:	6123      	str	r3, [r4, #16]
 8007080:	2301      	movs	r3, #1
 8007082:	6163      	str	r3, [r4, #20]
 8007084:	b002      	add	sp, #8
 8007086:	bd70      	pop	{r4, r5, r6, pc}
 8007088:	ab01      	add	r3, sp, #4
 800708a:	466a      	mov	r2, sp
 800708c:	f7ff ffc8 	bl	8007020 <__swhatbuf_r>
 8007090:	9900      	ldr	r1, [sp, #0]
 8007092:	4605      	mov	r5, r0
 8007094:	4630      	mov	r0, r6
 8007096:	f7ff f96b 	bl	8006370 <_malloc_r>
 800709a:	b948      	cbnz	r0, 80070b0 <__smakebuf_r+0x44>
 800709c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80070a0:	059a      	lsls	r2, r3, #22
 80070a2:	d4ef      	bmi.n	8007084 <__smakebuf_r+0x18>
 80070a4:	f023 0303 	bic.w	r3, r3, #3
 80070a8:	f043 0302 	orr.w	r3, r3, #2
 80070ac:	81a3      	strh	r3, [r4, #12]
 80070ae:	e7e3      	b.n	8007078 <__smakebuf_r+0xc>
 80070b0:	4b0d      	ldr	r3, [pc, #52]	; (80070e8 <__smakebuf_r+0x7c>)
 80070b2:	62b3      	str	r3, [r6, #40]	; 0x28
 80070b4:	89a3      	ldrh	r3, [r4, #12]
 80070b6:	6020      	str	r0, [r4, #0]
 80070b8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80070bc:	81a3      	strh	r3, [r4, #12]
 80070be:	9b00      	ldr	r3, [sp, #0]
 80070c0:	6163      	str	r3, [r4, #20]
 80070c2:	9b01      	ldr	r3, [sp, #4]
 80070c4:	6120      	str	r0, [r4, #16]
 80070c6:	b15b      	cbz	r3, 80070e0 <__smakebuf_r+0x74>
 80070c8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070cc:	4630      	mov	r0, r6
 80070ce:	f000 f81f 	bl	8007110 <_isatty_r>
 80070d2:	b128      	cbz	r0, 80070e0 <__smakebuf_r+0x74>
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	f023 0303 	bic.w	r3, r3, #3
 80070da:	f043 0301 	orr.w	r3, r3, #1
 80070de:	81a3      	strh	r3, [r4, #12]
 80070e0:	89a0      	ldrh	r0, [r4, #12]
 80070e2:	4305      	orrs	r5, r0
 80070e4:	81a5      	strh	r5, [r4, #12]
 80070e6:	e7cd      	b.n	8007084 <__smakebuf_r+0x18>
 80070e8:	08006111 	.word	0x08006111

080070ec <_fstat_r>:
 80070ec:	b538      	push	{r3, r4, r5, lr}
 80070ee:	4d07      	ldr	r5, [pc, #28]	; (800710c <_fstat_r+0x20>)
 80070f0:	2300      	movs	r3, #0
 80070f2:	4604      	mov	r4, r0
 80070f4:	4608      	mov	r0, r1
 80070f6:	4611      	mov	r1, r2
 80070f8:	602b      	str	r3, [r5, #0]
 80070fa:	f7f9 fd0a 	bl	8000b12 <_fstat>
 80070fe:	1c43      	adds	r3, r0, #1
 8007100:	d102      	bne.n	8007108 <_fstat_r+0x1c>
 8007102:	682b      	ldr	r3, [r5, #0]
 8007104:	b103      	cbz	r3, 8007108 <_fstat_r+0x1c>
 8007106:	6023      	str	r3, [r4, #0]
 8007108:	bd38      	pop	{r3, r4, r5, pc}
 800710a:	bf00      	nop
 800710c:	20001e00 	.word	0x20001e00

08007110 <_isatty_r>:
 8007110:	b538      	push	{r3, r4, r5, lr}
 8007112:	4d06      	ldr	r5, [pc, #24]	; (800712c <_isatty_r+0x1c>)
 8007114:	2300      	movs	r3, #0
 8007116:	4604      	mov	r4, r0
 8007118:	4608      	mov	r0, r1
 800711a:	602b      	str	r3, [r5, #0]
 800711c:	f7f9 fd09 	bl	8000b32 <_isatty>
 8007120:	1c43      	adds	r3, r0, #1
 8007122:	d102      	bne.n	800712a <_isatty_r+0x1a>
 8007124:	682b      	ldr	r3, [r5, #0]
 8007126:	b103      	cbz	r3, 800712a <_isatty_r+0x1a>
 8007128:	6023      	str	r3, [r4, #0]
 800712a:	bd38      	pop	{r3, r4, r5, pc}
 800712c:	20001e00 	.word	0x20001e00

08007130 <_init>:
 8007130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007132:	bf00      	nop
 8007134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007136:	bc08      	pop	{r3}
 8007138:	469e      	mov	lr, r3
 800713a:	4770      	bx	lr

0800713c <_fini>:
 800713c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800713e:	bf00      	nop
 8007140:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007142:	bc08      	pop	{r3}
 8007144:	469e      	mov	lr, r3
 8007146:	4770      	bx	lr
