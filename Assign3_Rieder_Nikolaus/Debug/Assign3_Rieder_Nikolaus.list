
Assign3_Rieder_Nikolaus.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a5a8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003cc  0800a738  0800a738  0001a738  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ab04  0800ab04  000200c0  2**0
                  CONTENTS
  4 .ARM          00000008  0800ab04  0800ab04  0001ab04  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ab0c  0800ab0c  000200c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ab0c  0800ab0c  0001ab0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ab10  0800ab10  0001ab10  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000c0  20000000  0800ab14  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004b0c  200000c0  0800abd4  000200c0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004bcc  0800abd4  00024bcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY
 12 .debug_info   000213dc  00000000  00000000  000200f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004901  00000000  00000000  000414cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001a20  00000000  00000000  00045dd0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001828  00000000  00000000  000477f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025e96  00000000  00000000  00049018  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001f2f0  00000000  00000000  0006eeae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d82e6  00000000  00000000  0008e19e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00166484  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00007758  00000000  00000000  001664d4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200000c0 	.word	0x200000c0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800a720 	.word	0x0800a720

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200000c4 	.word	0x200000c4
 80001cc:	0800a720 	.word	0x0800a720

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000290:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000294:	f000 b974 	b.w	8000580 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9d08      	ldr	r5, [sp, #32]
 80002b6:	4604      	mov	r4, r0
 80002b8:	468e      	mov	lr, r1
 80002ba:	2b00      	cmp	r3, #0
 80002bc:	d14d      	bne.n	800035a <__udivmoddi4+0xaa>
 80002be:	428a      	cmp	r2, r1
 80002c0:	4694      	mov	ip, r2
 80002c2:	d969      	bls.n	8000398 <__udivmoddi4+0xe8>
 80002c4:	fab2 f282 	clz	r2, r2
 80002c8:	b152      	cbz	r2, 80002e0 <__udivmoddi4+0x30>
 80002ca:	fa01 f302 	lsl.w	r3, r1, r2
 80002ce:	f1c2 0120 	rsb	r1, r2, #32
 80002d2:	fa20 f101 	lsr.w	r1, r0, r1
 80002d6:	fa0c fc02 	lsl.w	ip, ip, r2
 80002da:	ea41 0e03 	orr.w	lr, r1, r3
 80002de:	4094      	lsls	r4, r2
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	0c21      	lsrs	r1, r4, #16
 80002e6:	fbbe f6f8 	udiv	r6, lr, r8
 80002ea:	fa1f f78c 	uxth.w	r7, ip
 80002ee:	fb08 e316 	mls	r3, r8, r6, lr
 80002f2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80002f6:	fb06 f107 	mul.w	r1, r6, r7
 80002fa:	4299      	cmp	r1, r3
 80002fc:	d90a      	bls.n	8000314 <__udivmoddi4+0x64>
 80002fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000302:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000306:	f080 811f 	bcs.w	8000548 <__udivmoddi4+0x298>
 800030a:	4299      	cmp	r1, r3
 800030c:	f240 811c 	bls.w	8000548 <__udivmoddi4+0x298>
 8000310:	3e02      	subs	r6, #2
 8000312:	4463      	add	r3, ip
 8000314:	1a5b      	subs	r3, r3, r1
 8000316:	b2a4      	uxth	r4, r4
 8000318:	fbb3 f0f8 	udiv	r0, r3, r8
 800031c:	fb08 3310 	mls	r3, r8, r0, r3
 8000320:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000324:	fb00 f707 	mul.w	r7, r0, r7
 8000328:	42a7      	cmp	r7, r4
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x92>
 800032c:	eb1c 0404 	adds.w	r4, ip, r4
 8000330:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000334:	f080 810a 	bcs.w	800054c <__udivmoddi4+0x29c>
 8000338:	42a7      	cmp	r7, r4
 800033a:	f240 8107 	bls.w	800054c <__udivmoddi4+0x29c>
 800033e:	4464      	add	r4, ip
 8000340:	3802      	subs	r0, #2
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	1be4      	subs	r4, r4, r7
 8000348:	2600      	movs	r6, #0
 800034a:	b11d      	cbz	r5, 8000354 <__udivmoddi4+0xa4>
 800034c:	40d4      	lsrs	r4, r2
 800034e:	2300      	movs	r3, #0
 8000350:	e9c5 4300 	strd	r4, r3, [r5]
 8000354:	4631      	mov	r1, r6
 8000356:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800035a:	428b      	cmp	r3, r1
 800035c:	d909      	bls.n	8000372 <__udivmoddi4+0xc2>
 800035e:	2d00      	cmp	r5, #0
 8000360:	f000 80ef 	beq.w	8000542 <__udivmoddi4+0x292>
 8000364:	2600      	movs	r6, #0
 8000366:	e9c5 0100 	strd	r0, r1, [r5]
 800036a:	4630      	mov	r0, r6
 800036c:	4631      	mov	r1, r6
 800036e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000372:	fab3 f683 	clz	r6, r3
 8000376:	2e00      	cmp	r6, #0
 8000378:	d14a      	bne.n	8000410 <__udivmoddi4+0x160>
 800037a:	428b      	cmp	r3, r1
 800037c:	d302      	bcc.n	8000384 <__udivmoddi4+0xd4>
 800037e:	4282      	cmp	r2, r0
 8000380:	f200 80f9 	bhi.w	8000576 <__udivmoddi4+0x2c6>
 8000384:	1a84      	subs	r4, r0, r2
 8000386:	eb61 0303 	sbc.w	r3, r1, r3
 800038a:	2001      	movs	r0, #1
 800038c:	469e      	mov	lr, r3
 800038e:	2d00      	cmp	r5, #0
 8000390:	d0e0      	beq.n	8000354 <__udivmoddi4+0xa4>
 8000392:	e9c5 4e00 	strd	r4, lr, [r5]
 8000396:	e7dd      	b.n	8000354 <__udivmoddi4+0xa4>
 8000398:	b902      	cbnz	r2, 800039c <__udivmoddi4+0xec>
 800039a:	deff      	udf	#255	; 0xff
 800039c:	fab2 f282 	clz	r2, r2
 80003a0:	2a00      	cmp	r2, #0
 80003a2:	f040 8092 	bne.w	80004ca <__udivmoddi4+0x21a>
 80003a6:	eba1 010c 	sub.w	r1, r1, ip
 80003aa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003ae:	fa1f fe8c 	uxth.w	lr, ip
 80003b2:	2601      	movs	r6, #1
 80003b4:	0c20      	lsrs	r0, r4, #16
 80003b6:	fbb1 f3f7 	udiv	r3, r1, r7
 80003ba:	fb07 1113 	mls	r1, r7, r3, r1
 80003be:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003c2:	fb0e f003 	mul.w	r0, lr, r3
 80003c6:	4288      	cmp	r0, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x12c>
 80003ca:	eb1c 0101 	adds.w	r1, ip, r1
 80003ce:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x12a>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f200 80cb 	bhi.w	8000570 <__udivmoddi4+0x2c0>
 80003da:	4643      	mov	r3, r8
 80003dc:	1a09      	subs	r1, r1, r0
 80003de:	b2a4      	uxth	r4, r4
 80003e0:	fbb1 f0f7 	udiv	r0, r1, r7
 80003e4:	fb07 1110 	mls	r1, r7, r0, r1
 80003e8:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 80003ec:	fb0e fe00 	mul.w	lr, lr, r0
 80003f0:	45a6      	cmp	lr, r4
 80003f2:	d908      	bls.n	8000406 <__udivmoddi4+0x156>
 80003f4:	eb1c 0404 	adds.w	r4, ip, r4
 80003f8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80003fc:	d202      	bcs.n	8000404 <__udivmoddi4+0x154>
 80003fe:	45a6      	cmp	lr, r4
 8000400:	f200 80bb 	bhi.w	800057a <__udivmoddi4+0x2ca>
 8000404:	4608      	mov	r0, r1
 8000406:	eba4 040e 	sub.w	r4, r4, lr
 800040a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800040e:	e79c      	b.n	800034a <__udivmoddi4+0x9a>
 8000410:	f1c6 0720 	rsb	r7, r6, #32
 8000414:	40b3      	lsls	r3, r6
 8000416:	fa22 fc07 	lsr.w	ip, r2, r7
 800041a:	ea4c 0c03 	orr.w	ip, ip, r3
 800041e:	fa20 f407 	lsr.w	r4, r0, r7
 8000422:	fa01 f306 	lsl.w	r3, r1, r6
 8000426:	431c      	orrs	r4, r3
 8000428:	40f9      	lsrs	r1, r7
 800042a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800042e:	fa00 f306 	lsl.w	r3, r0, r6
 8000432:	fbb1 f8f9 	udiv	r8, r1, r9
 8000436:	0c20      	lsrs	r0, r4, #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fb09 1118 	mls	r1, r9, r8, r1
 8000440:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000444:	fb08 f00e 	mul.w	r0, r8, lr
 8000448:	4288      	cmp	r0, r1
 800044a:	fa02 f206 	lsl.w	r2, r2, r6
 800044e:	d90b      	bls.n	8000468 <__udivmoddi4+0x1b8>
 8000450:	eb1c 0101 	adds.w	r1, ip, r1
 8000454:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000458:	f080 8088 	bcs.w	800056c <__udivmoddi4+0x2bc>
 800045c:	4288      	cmp	r0, r1
 800045e:	f240 8085 	bls.w	800056c <__udivmoddi4+0x2bc>
 8000462:	f1a8 0802 	sub.w	r8, r8, #2
 8000466:	4461      	add	r1, ip
 8000468:	1a09      	subs	r1, r1, r0
 800046a:	b2a4      	uxth	r4, r4
 800046c:	fbb1 f0f9 	udiv	r0, r1, r9
 8000470:	fb09 1110 	mls	r1, r9, r0, r1
 8000474:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000478:	fb00 fe0e 	mul.w	lr, r0, lr
 800047c:	458e      	cmp	lr, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x1e2>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000488:	d26c      	bcs.n	8000564 <__udivmoddi4+0x2b4>
 800048a:	458e      	cmp	lr, r1
 800048c:	d96a      	bls.n	8000564 <__udivmoddi4+0x2b4>
 800048e:	3802      	subs	r0, #2
 8000490:	4461      	add	r1, ip
 8000492:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000496:	fba0 9402 	umull	r9, r4, r0, r2
 800049a:	eba1 010e 	sub.w	r1, r1, lr
 800049e:	42a1      	cmp	r1, r4
 80004a0:	46c8      	mov	r8, r9
 80004a2:	46a6      	mov	lr, r4
 80004a4:	d356      	bcc.n	8000554 <__udivmoddi4+0x2a4>
 80004a6:	d053      	beq.n	8000550 <__udivmoddi4+0x2a0>
 80004a8:	b15d      	cbz	r5, 80004c2 <__udivmoddi4+0x212>
 80004aa:	ebb3 0208 	subs.w	r2, r3, r8
 80004ae:	eb61 010e 	sbc.w	r1, r1, lr
 80004b2:	fa01 f707 	lsl.w	r7, r1, r7
 80004b6:	fa22 f306 	lsr.w	r3, r2, r6
 80004ba:	40f1      	lsrs	r1, r6
 80004bc:	431f      	orrs	r7, r3
 80004be:	e9c5 7100 	strd	r7, r1, [r5]
 80004c2:	2600      	movs	r6, #0
 80004c4:	4631      	mov	r1, r6
 80004c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ca:	f1c2 0320 	rsb	r3, r2, #32
 80004ce:	40d8      	lsrs	r0, r3
 80004d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d4:	fa21 f303 	lsr.w	r3, r1, r3
 80004d8:	4091      	lsls	r1, r2
 80004da:	4301      	orrs	r1, r0
 80004dc:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e0:	fa1f fe8c 	uxth.w	lr, ip
 80004e4:	fbb3 f0f7 	udiv	r0, r3, r7
 80004e8:	fb07 3610 	mls	r6, r7, r0, r3
 80004ec:	0c0b      	lsrs	r3, r1, #16
 80004ee:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 80004f2:	fb00 f60e 	mul.w	r6, r0, lr
 80004f6:	429e      	cmp	r6, r3
 80004f8:	fa04 f402 	lsl.w	r4, r4, r2
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x260>
 80004fe:	eb1c 0303 	adds.w	r3, ip, r3
 8000502:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000506:	d22f      	bcs.n	8000568 <__udivmoddi4+0x2b8>
 8000508:	429e      	cmp	r6, r3
 800050a:	d92d      	bls.n	8000568 <__udivmoddi4+0x2b8>
 800050c:	3802      	subs	r0, #2
 800050e:	4463      	add	r3, ip
 8000510:	1b9b      	subs	r3, r3, r6
 8000512:	b289      	uxth	r1, r1
 8000514:	fbb3 f6f7 	udiv	r6, r3, r7
 8000518:	fb07 3316 	mls	r3, r7, r6, r3
 800051c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000520:	fb06 f30e 	mul.w	r3, r6, lr
 8000524:	428b      	cmp	r3, r1
 8000526:	d908      	bls.n	800053a <__udivmoddi4+0x28a>
 8000528:	eb1c 0101 	adds.w	r1, ip, r1
 800052c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000530:	d216      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000532:	428b      	cmp	r3, r1
 8000534:	d914      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000536:	3e02      	subs	r6, #2
 8000538:	4461      	add	r1, ip
 800053a:	1ac9      	subs	r1, r1, r3
 800053c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000540:	e738      	b.n	80003b4 <__udivmoddi4+0x104>
 8000542:	462e      	mov	r6, r5
 8000544:	4628      	mov	r0, r5
 8000546:	e705      	b.n	8000354 <__udivmoddi4+0xa4>
 8000548:	4606      	mov	r6, r0
 800054a:	e6e3      	b.n	8000314 <__udivmoddi4+0x64>
 800054c:	4618      	mov	r0, r3
 800054e:	e6f8      	b.n	8000342 <__udivmoddi4+0x92>
 8000550:	454b      	cmp	r3, r9
 8000552:	d2a9      	bcs.n	80004a8 <__udivmoddi4+0x1f8>
 8000554:	ebb9 0802 	subs.w	r8, r9, r2
 8000558:	eb64 0e0c 	sbc.w	lr, r4, ip
 800055c:	3801      	subs	r0, #1
 800055e:	e7a3      	b.n	80004a8 <__udivmoddi4+0x1f8>
 8000560:	4646      	mov	r6, r8
 8000562:	e7ea      	b.n	800053a <__udivmoddi4+0x28a>
 8000564:	4620      	mov	r0, r4
 8000566:	e794      	b.n	8000492 <__udivmoddi4+0x1e2>
 8000568:	4640      	mov	r0, r8
 800056a:	e7d1      	b.n	8000510 <__udivmoddi4+0x260>
 800056c:	46d0      	mov	r8, sl
 800056e:	e77b      	b.n	8000468 <__udivmoddi4+0x1b8>
 8000570:	3b02      	subs	r3, #2
 8000572:	4461      	add	r1, ip
 8000574:	e732      	b.n	80003dc <__udivmoddi4+0x12c>
 8000576:	4630      	mov	r0, r6
 8000578:	e709      	b.n	800038e <__udivmoddi4+0xde>
 800057a:	4464      	add	r4, ip
 800057c:	3802      	subs	r0, #2
 800057e:	e742      	b.n	8000406 <__udivmoddi4+0x156>

08000580 <__aeabi_idiv0>:
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop

08000584 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of initTask */
  initTaskHandle = osThreadNew(StartInitializeTask, NULL, &initTask_attributes);
 8000588:	4a04      	ldr	r2, [pc, #16]	; (800059c <MX_FREERTOS_Init+0x18>)
 800058a:	2100      	movs	r1, #0
 800058c:	4804      	ldr	r0, [pc, #16]	; (80005a0 <MX_FREERTOS_Init+0x1c>)
 800058e:	f004 f9f3 	bl	8004978 <osThreadNew>
 8000592:	4603      	mov	r3, r0
 8000594:	4a03      	ldr	r2, [pc, #12]	; (80005a4 <MX_FREERTOS_Init+0x20>)
 8000596:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000598:	bf00      	nop
 800059a:	bd80      	pop	{r7, pc}
 800059c:	0800a8e4 	.word	0x0800a8e4
 80005a0:	08000755 	.word	0x08000755
 80005a4:	200000dc 	.word	0x200000dc

080005a8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005a8:	b580      	push	{r7, lr}
 80005aa:	b088      	sub	sp, #32
 80005ac:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005ae:	f107 030c 	add.w	r3, r7, #12
 80005b2:	2200      	movs	r2, #0
 80005b4:	601a      	str	r2, [r3, #0]
 80005b6:	605a      	str	r2, [r3, #4]
 80005b8:	609a      	str	r2, [r3, #8]
 80005ba:	60da      	str	r2, [r3, #12]
 80005bc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005be:	4b1d      	ldr	r3, [pc, #116]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005c2:	4a1c      	ldr	r2, [pc, #112]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005c4:	f043 0304 	orr.w	r3, r3, #4
 80005c8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005ca:	4b1a      	ldr	r3, [pc, #104]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005ce:	f003 0304 	and.w	r3, r3, #4
 80005d2:	60bb      	str	r3, [r7, #8]
 80005d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005d6:	4b17      	ldr	r3, [pc, #92]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005da:	4a16      	ldr	r2, [pc, #88]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005dc:	f043 0301 	orr.w	r3, r3, #1
 80005e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005e2:	4b14      	ldr	r3, [pc, #80]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005e6:	f003 0301 	and.w	r3, r3, #1
 80005ea:	607b      	str	r3, [r7, #4]
 80005ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005ee:	4b11      	ldr	r3, [pc, #68]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005f2:	4a10      	ldr	r2, [pc, #64]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005f4:	f043 0302 	orr.w	r3, r3, #2
 80005f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005fa:	4b0e      	ldr	r3, [pc, #56]	; (8000634 <MX_GPIO_Init+0x8c>)
 80005fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005fe:	f003 0302 	and.w	r3, r3, #2
 8000602:	603b      	str	r3, [r7, #0]
 8000604:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 8000606:	2200      	movs	r2, #0
 8000608:	2108      	movs	r1, #8
 800060a:	480b      	ldr	r0, [pc, #44]	; (8000638 <MX_GPIO_Init+0x90>)
 800060c:	f001 f9ca 	bl	80019a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 8000610:	2308      	movs	r3, #8
 8000612:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000614:	2301      	movs	r3, #1
 8000616:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000620:	f107 030c 	add.w	r3, r7, #12
 8000624:	4619      	mov	r1, r3
 8000626:	4804      	ldr	r0, [pc, #16]	; (8000638 <MX_GPIO_Init+0x90>)
 8000628:	f001 f852 	bl	80016d0 <HAL_GPIO_Init>

}
 800062c:	bf00      	nop
 800062e:	3720      	adds	r7, #32
 8000630:	46bd      	mov	sp, r7
 8000632:	bd80      	pop	{r7, pc}
 8000634:	40021000 	.word	0x40021000
 8000638:	48000400 	.word	0x48000400

0800063c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800063c:	b580      	push	{r7, lr}
 800063e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000640:	f000 feab 	bl	800139a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000644:	f000 f80c 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000648:	f7ff ffae 	bl	80005a8 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800064c:	f000 fdda 	bl	8001204 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000650:	f004 f948 	bl	80048e4 <osKernelInitialize>
  MX_FREERTOS_Init();
 8000654:	f7ff ff96 	bl	8000584 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000658:	f004 f968 	bl	800492c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800065c:	e7fe      	b.n	800065c <main+0x20>
	...

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b096      	sub	sp, #88	; 0x58
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0314 	add.w	r3, r7, #20
 800066a:	2244      	movs	r2, #68	; 0x44
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f008 fa4d 	bl	8008b0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	463b      	mov	r3, r7
 8000676:	2200      	movs	r2, #0
 8000678:	601a      	str	r2, [r3, #0]
 800067a:	605a      	str	r2, [r3, #4]
 800067c:	609a      	str	r2, [r3, #8]
 800067e:	60da      	str	r2, [r3, #12]
 8000680:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000682:	f44f 7000 	mov.w	r0, #512	; 0x200
 8000686:	f001 f9c3 	bl	8001a10 <HAL_PWREx_ControlVoltageScaling>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d001      	beq.n	8000694 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000690:	f000 f85a 	bl	8000748 <Error_Handler>
  }

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000694:	f001 f99e 	bl	80019d4 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000698:	4b21      	ldr	r3, [pc, #132]	; (8000720 <SystemClock_Config+0xc0>)
 800069a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800069e:	4a20      	ldr	r2, [pc, #128]	; (8000720 <SystemClock_Config+0xc0>)
 80006a0:	f023 0318 	bic.w	r3, r3, #24
 80006a4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 80006a8:	2314      	movs	r3, #20
 80006aa:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80006ac:	2301      	movs	r3, #1
 80006ae:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80006b0:	2301      	movs	r3, #1
 80006b2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80006b4:	2300      	movs	r3, #0
 80006b6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 80006b8:	2360      	movs	r3, #96	; 0x60
 80006ba:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006bc:	2302      	movs	r3, #2
 80006be:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 80006c0:	2301      	movs	r3, #1
 80006c2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 80006c8:	2310      	movs	r3, #16
 80006ca:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80006cc:	2307      	movs	r3, #7
 80006ce:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80006d0:	2302      	movs	r3, #2
 80006d2:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006d4:	2302      	movs	r3, #2
 80006d6:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006d8:	f107 0314 	add.w	r3, r7, #20
 80006dc:	4618      	mov	r0, r3
 80006de:	f001 f9ed 	bl	8001abc <HAL_RCC_OscConfig>
 80006e2:	4603      	mov	r3, r0
 80006e4:	2b00      	cmp	r3, #0
 80006e6:	d001      	beq.n	80006ec <SystemClock_Config+0x8c>
  {
    Error_Handler();
 80006e8:	f000 f82e 	bl	8000748 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ec:	230f      	movs	r3, #15
 80006ee:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006f0:	2303      	movs	r3, #3
 80006f2:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006f4:	2300      	movs	r3, #0
 80006f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006f8:	2300      	movs	r3, #0
 80006fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006fc:	2300      	movs	r3, #0
 80006fe:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000700:	463b      	mov	r3, r7
 8000702:	2101      	movs	r1, #1
 8000704:	4618      	mov	r0, r3
 8000706:	f001 fded 	bl	80022e4 <HAL_RCC_ClockConfig>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000710:	f000 f81a 	bl	8000748 <Error_Handler>
  }

  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000714:	f002 fa32 	bl	8002b7c <HAL_RCCEx_EnableMSIPLLMode>
}
 8000718:	bf00      	nop
 800071a:	3758      	adds	r7, #88	; 0x58
 800071c:	46bd      	mov	sp, r7
 800071e:	bd80      	pop	{r7, pc}
 8000720:	40021000 	.word	0x40021000

08000724 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a04      	ldr	r2, [pc, #16]	; (8000744 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000732:	4293      	cmp	r3, r2
 8000734:	d101      	bne.n	800073a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000736:	f000 fe49 	bl	80013cc <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800073a:	bf00      	nop
 800073c:	3708      	adds	r7, #8
 800073e:	46bd      	mov	sp, r7
 8000740:	bd80      	pop	{r7, pc}
 8000742:	bf00      	nop
 8000744:	40001000 	.word	0x40001000

08000748 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000748:	b480      	push	{r7}
 800074a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800074c:	b672      	cpsid	i
}
 800074e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000750:	e7fe      	b.n	8000750 <Error_Handler+0x8>
	...

08000754 <StartInitializeTask>:
osEventFlagsId_t monitorFlags; // Global variable for flag synchronization
osMessageQueueId_t monitorQueue; // Queue for the monitor to receive data
osMessageQueueId_t updateQueue; // Queue for the producers to receive data
char debugMsgBuffer[MSG_BUF_SIZE];

void StartInitializeTask(void *argument) {
 8000754:	b590      	push	{r4, r7, lr}
 8000756:	b0ad      	sub	sp, #180	; 0xb4
 8000758:	af02      	add	r7, sp, #8
 800075a:	6078      	str	r0, [r7, #4]
	printf("Initializing application...\r\n");
 800075c:	4863      	ldr	r0, [pc, #396]	; (80008ec <StartInitializeTask+0x198>)
 800075e:	f008 faf9 	bl	8008d54 <puts>
	//char *producerFlagNames[NUM_PRODUCERS] = {"ProdFlags1", "ProdFlags2", "ProdFlags3"};
	osThreadAttr_t producer_attributes[NUM_PRODUCERS];
	//osEventFlagsAttr_t producerFlags_attr[NUM_PRODUCERS];
	osThreadId_t *taskHandles = pvPortMalloc(sizeof(osThreadId_t) * NUM_PRODUCERS);
 8000762:	200c      	movs	r0, #12
 8000764:	f007 feb8 	bl	80084d8 <pvPortMalloc>
 8000768:	f8c7 00a0 	str.w	r0, [r7, #160]	; 0xa0
	producerObj_t *producerObjects = pvPortMalloc(sizeof(producerObj_t) * NUM_PRODUCERS);
 800076c:	2024      	movs	r0, #36	; 0x24
 800076e:	f007 feb3 	bl	80084d8 <pvPortMalloc>
 8000772:	f8c7 009c 	str.w	r0, [r7, #156]	; 0x9c
	// Initialize monitor event flags and messageQueues
	monitorFlags = osEventFlagsNew(&monitorFlags_attr);
 8000776:	485e      	ldr	r0, [pc, #376]	; (80008f0 <StartInitializeTask+0x19c>)
 8000778:	f004 fb4a 	bl	8004e10 <osEventFlagsNew>
 800077c:	4603      	mov	r3, r0
 800077e:	4a5d      	ldr	r2, [pc, #372]	; (80008f4 <StartInitializeTask+0x1a0>)
 8000780:	6013      	str	r3, [r2, #0]
	monitorQueue = osMessageQueueNew(NUM_PRODUCERS, sizeof(dataObj_t), &monitorQueue_attr);
 8000782:	4a5d      	ldr	r2, [pc, #372]	; (80008f8 <StartInitializeTask+0x1a4>)
 8000784:	2108      	movs	r1, #8
 8000786:	2003      	movs	r0, #3
 8000788:	f004 fc2c 	bl	8004fe4 <osMessageQueueNew>
 800078c:	4603      	mov	r3, r0
 800078e:	4a5b      	ldr	r2, [pc, #364]	; (80008fc <StartInitializeTask+0x1a8>)
 8000790:	6013      	str	r3, [r2, #0]
	updateQueue = osMessageQueueNew(1, sizeof(dataObj_t), &updateQueue_attr);
 8000792:	4a5b      	ldr	r2, [pc, #364]	; (8000900 <StartInitializeTask+0x1ac>)
 8000794:	2108      	movs	r1, #8
 8000796:	2001      	movs	r0, #1
 8000798:	f004 fc24 	bl	8004fe4 <osMessageQueueNew>
 800079c:	4603      	mov	r3, r0
 800079e:	4a59      	ldr	r2, [pc, #356]	; (8000904 <StartInitializeTask+0x1b0>)
 80007a0:	6013      	str	r3, [r2, #0]

	// Initialize and start the producers
	for(uint8_t i = 0; i < NUM_PRODUCERS; i++) {
 80007a2:	2300      	movs	r3, #0
 80007a4:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 80007a8:	e075      	b.n	8000896 <StartInitializeTask+0x142>
		initAttributes(&producer_attributes[i], producerNames[i], (128 * 4), osPriorityLow, osThreadDetached);
 80007aa:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80007ae:	f107 0130 	add.w	r1, r7, #48	; 0x30
 80007b2:	4613      	mov	r3, r2
 80007b4:	00db      	lsls	r3, r3, #3
 80007b6:	4413      	add	r3, r2
 80007b8:	009b      	lsls	r3, r3, #2
 80007ba:	18c8      	adds	r0, r1, r3
 80007bc:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 80007c0:	4a51      	ldr	r2, [pc, #324]	; (8000908 <StartInitializeTask+0x1b4>)
 80007c2:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80007c6:	2300      	movs	r3, #0
 80007c8:	9300      	str	r3, [sp, #0]
 80007ca:	2308      	movs	r3, #8
 80007cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007d0:	f000 fca0 	bl	8001114 <initAttributes>
		//producerFlags_attr[i].name = producerFlagNames[i];
		producerObjects[i].producerNumber = i;
 80007d4:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80007d8:	4613      	mov	r3, r2
 80007da:	005b      	lsls	r3, r3, #1
 80007dc:	4413      	add	r3, r2
 80007de:	009b      	lsls	r3, r3, #2
 80007e0:	461a      	mov	r2, r3
 80007e2:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80007e6:	4413      	add	r3, r2
 80007e8:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80007ec:	701a      	strb	r2, [r3, #0]
		producerObjects[i].monitorQueue = &monitorQueue;
 80007ee:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 80007f2:	4613      	mov	r3, r2
 80007f4:	005b      	lsls	r3, r3, #1
 80007f6:	4413      	add	r3, r2
 80007f8:	009b      	lsls	r3, r3, #2
 80007fa:	461a      	mov	r2, r3
 80007fc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000800:	4413      	add	r3, r2
 8000802:	4a3e      	ldr	r2, [pc, #248]	; (80008fc <StartInitializeTask+0x1a8>)
 8000804:	605a      	str	r2, [r3, #4]
		producerObjects[i].updateQueue = &updateQueue;
 8000806:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 800080a:	4613      	mov	r3, r2
 800080c:	005b      	lsls	r3, r3, #1
 800080e:	4413      	add	r3, r2
 8000810:	009b      	lsls	r3, r3, #2
 8000812:	461a      	mov	r2, r3
 8000814:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000818:	4413      	add	r3, r2
 800081a:	4a3a      	ldr	r2, [pc, #232]	; (8000904 <StartInitializeTask+0x1b0>)
 800081c:	609a      	str	r2, [r3, #8]
		//producerObjects[i].taskFlags = osEventFlagsNew(&producerFlags_attr[i]);
		taskHandles[i] = osThreadNew(ProducerTask, &producerObjects[i], &producer_attributes[i]);
 800081e:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8000822:	4613      	mov	r3, r2
 8000824:	005b      	lsls	r3, r3, #1
 8000826:	4413      	add	r3, r2
 8000828:	009b      	lsls	r3, r3, #2
 800082a:	461a      	mov	r2, r3
 800082c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8000830:	1898      	adds	r0, r3, r2
 8000832:	f897 20a7 	ldrb.w	r2, [r7, #167]	; 0xa7
 8000836:	f107 0130 	add.w	r1, r7, #48	; 0x30
 800083a:	4613      	mov	r3, r2
 800083c:	00db      	lsls	r3, r3, #3
 800083e:	4413      	add	r3, r2
 8000840:	009b      	lsls	r3, r3, #2
 8000842:	4419      	add	r1, r3
 8000844:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000848:	009b      	lsls	r3, r3, #2
 800084a:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 800084e:	18d4      	adds	r4, r2, r3
 8000850:	460a      	mov	r2, r1
 8000852:	4601      	mov	r1, r0
 8000854:	482d      	ldr	r0, [pc, #180]	; (800090c <StartInitializeTask+0x1b8>)
 8000856:	f004 f88f 	bl	8004978 <osThreadNew>
 800085a:	4603      	mov	r3, r0
 800085c:	6023      	str	r3, [r4, #0]
		sprintf(debugMsgBuffer, "#%d %s", (i+1), producerNames[i]);
 800085e:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000862:	1c5a      	adds	r2, r3, #1
 8000864:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000868:	4927      	ldr	r1, [pc, #156]	; (8000908 <StartInitializeTask+0x1b4>)
 800086a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800086e:	4928      	ldr	r1, [pc, #160]	; (8000910 <StartInitializeTask+0x1bc>)
 8000870:	4828      	ldr	r0, [pc, #160]	; (8000914 <StartInitializeTask+0x1c0>)
 8000872:	f008 faf1 	bl	8008e58 <siprintf>
		verifyTaskCreation(taskHandles[i], debugMsgBuffer);
 8000876:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8000880:	4413      	add	r3, r2
 8000882:	681b      	ldr	r3, [r3, #0]
 8000884:	4923      	ldr	r1, [pc, #140]	; (8000914 <StartInitializeTask+0x1c0>)
 8000886:	4618      	mov	r0, r3
 8000888:	f000 fc2a 	bl	80010e0 <verifyTaskCreation>
	for(uint8_t i = 0; i < NUM_PRODUCERS; i++) {
 800088c:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 8000890:	3301      	adds	r3, #1
 8000892:	f887 30a7 	strb.w	r3, [r7, #167]	; 0xa7
 8000896:	f897 30a7 	ldrb.w	r3, [r7, #167]	; 0xa7
 800089a:	2b02      	cmp	r3, #2
 800089c:	d985      	bls.n	80007aa <StartInitializeTask+0x56>
	}

	// Start the monitor and provide the producer array
	osThreadAttr_t monitor_attributes = {
 800089e:	f107 030c 	add.w	r3, r7, #12
 80008a2:	2224      	movs	r2, #36	; 0x24
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f008 f931 	bl	8008b0e <memset>
 80008ac:	4b1a      	ldr	r3, [pc, #104]	; (8000918 <StartInitializeTask+0x1c4>)
 80008ae:	60fb      	str	r3, [r7, #12]
 80008b0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80008b4:	623b      	str	r3, [r7, #32]
 80008b6:	2318      	movs	r3, #24
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
			.name = "MonitorTask",
			.stack_size = 512 * 4,
			.priority = osPriorityNormal
	};
	monitorHandle = osThreadNew(MonitorTask, taskHandles, &monitor_attributes);
 80008ba:	f107 030c 	add.w	r3, r7, #12
 80008be:	461a      	mov	r2, r3
 80008c0:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 80008c4:	4815      	ldr	r0, [pc, #84]	; (800091c <StartInitializeTask+0x1c8>)
 80008c6:	f004 f857 	bl	8004978 <osThreadNew>
 80008ca:	4603      	mov	r3, r0
 80008cc:	4a14      	ldr	r2, [pc, #80]	; (8000920 <StartInitializeTask+0x1cc>)
 80008ce:	6013      	str	r3, [r2, #0]
	sprintf(debugMsgBuffer, "#%d %s", (NUM_PRODUCERS+1), monitor_attributes.name);
 80008d0:	68fb      	ldr	r3, [r7, #12]
 80008d2:	2204      	movs	r2, #4
 80008d4:	490e      	ldr	r1, [pc, #56]	; (8000910 <StartInitializeTask+0x1bc>)
 80008d6:	480f      	ldr	r0, [pc, #60]	; (8000914 <StartInitializeTask+0x1c0>)
 80008d8:	f008 fabe 	bl	8008e58 <siprintf>
	verifyTaskCreation(monitorHandle, debugMsgBuffer);
 80008dc:	4b10      	ldr	r3, [pc, #64]	; (8000920 <StartInitializeTask+0x1cc>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	490c      	ldr	r1, [pc, #48]	; (8000914 <StartInitializeTask+0x1c0>)
 80008e2:	4618      	mov	r0, r3
 80008e4:	f000 fbfc 	bl	80010e0 <verifyTaskCreation>

	osThreadExit(); // Exit initialization task
 80008e8:	f004 f8fe 	bl	8004ae8 <osThreadExit>
 80008ec:	0800a794 	.word	0x0800a794
 80008f0:	20000030 	.word	0x20000030
 80008f4:	200000e4 	.word	0x200000e4
 80008f8:	20000000 	.word	0x20000000
 80008fc:	200000e8 	.word	0x200000e8
 8000900:	20000018 	.word	0x20000018
 8000904:	200000ec 	.word	0x200000ec
 8000908:	20000040 	.word	0x20000040
 800090c:	080009fd 	.word	0x080009fd
 8000910:	0800a7b4 	.word	0x0800a7b4
 8000914:	200000f0 	.word	0x200000f0
 8000918:	0800a7bc 	.word	0x0800a7bc
 800091c:	08000acd 	.word	0x08000acd
 8000920:	200000e0 	.word	0x200000e0

08000924 <producerTimerCallback>:
}



static void producerTimerCallback (void *argument) {
 8000924:	b580      	push	{r7, lr}
 8000926:	b084      	sub	sp, #16
 8000928:	af00      	add	r7, sp, #0
 800092a:	6078      	str	r0, [r7, #4]
	osThreadId_t arg = *((osThreadId_t*)argument);
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	681b      	ldr	r3, [r3, #0]
 8000930:	60fb      	str	r3, [r7, #12]
	osThreadFlagsSet(arg, TASK_INCREMENT);
 8000932:	2110      	movs	r1, #16
 8000934:	68f8      	ldr	r0, [r7, #12]
 8000936:	f004 f8dd 	bl	8004af4 <osThreadFlagsSet>
}
 800093a:	bf00      	nop
 800093c:	3710      	adds	r7, #16
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <producerUpdate>:

void producerUpdate(osMessageQueueId_t queue, osThreadId_t handle, uint32_t *interval) {
 8000942:	b580      	push	{r7, lr}
 8000944:	b086      	sub	sp, #24
 8000946:	af00      	add	r7, sp, #0
 8000948:	60f8      	str	r0, [r7, #12]
 800094a:	60b9      	str	r1, [r7, #8]
 800094c:	607a      	str	r2, [r7, #4]
	dataObj_t rx_obj;
	if(handleOSStatus(osMessageQueueGet(queue, &rx_obj, NULL, UPDATE_TIMEOUT))) {
 800094e:	f107 0110 	add.w	r1, r7, #16
 8000952:	f242 7310 	movw	r3, #10000	; 0x2710
 8000956:	2200      	movs	r2, #0
 8000958:	68f8      	ldr	r0, [r7, #12]
 800095a:	f004 fc17 	bl	800518c <osMessageQueueGet>
 800095e:	4603      	mov	r3, r0
 8000960:	4618      	mov	r0, r3
 8000962:	f000 fc2b 	bl	80011bc <handleOSStatus>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d013      	beq.n	8000994 <producerUpdate+0x52>
		if(rx_obj.taskHandle == handle) {
 800096c:	693b      	ldr	r3, [r7, #16]
 800096e:	68ba      	ldr	r2, [r7, #8]
 8000970:	429a      	cmp	r2, r3
 8000972:	d103      	bne.n	800097c <producerUpdate+0x3a>
			*interval = rx_obj.value;
 8000974:	697a      	ldr	r2, [r7, #20]
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	601a      	str	r2, [r3, #0]
 800097a:	e00b      	b.n	8000994 <producerUpdate+0x52>
			return;
		}
		if(handleOSStatus(osMessageQueuePut(queue, &rx_obj, 1, UPDATE_TIMEOUT))) {
 800097c:	f107 0110 	add.w	r1, r7, #16
 8000980:	f242 7310 	movw	r3, #10000	; 0x2710
 8000984:	2201      	movs	r2, #1
 8000986:	68f8      	ldr	r0, [r7, #12]
 8000988:	f004 fba0 	bl	80050cc <osMessageQueuePut>
 800098c:	4603      	mov	r3, r0
 800098e:	4618      	mov	r0, r3
 8000990:	f000 fc14 	bl	80011bc <handleOSStatus>
			// object was put back at end of queue, maybe notify?
			// Not sure what else to do here
		}
	}
}
 8000994:	3718      	adds	r7, #24
 8000996:	46bd      	mov	sp, r7
 8000998:	bd80      	pop	{r7, pc}
	...

0800099c <producerIncrement>:
void producerIncrement(osMessageQueueId_t queue, osThreadId_t handle, uint32_t *counter) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b086      	sub	sp, #24
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	60f8      	str	r0, [r7, #12]
 80009a4:	60b9      	str	r1, [r7, #8]
 80009a6:	607a      	str	r2, [r7, #4]
	*counter += 1;
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	1c5a      	adds	r2, r3, #1
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	601a      	str	r2, [r3, #0]
	dataObj_t tx_obj = {
 80009b2:	68bb      	ldr	r3, [r7, #8]
 80009b4:	613b      	str	r3, [r7, #16]
		.taskHandle = handle,
		.value = *counter
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	681b      	ldr	r3, [r3, #0]
	dataObj_t tx_obj = {
 80009ba:	617b      	str	r3, [r7, #20]
	};
	if(handleOSStatus(osMessageQueuePut(queue, &tx_obj, 1, osWaitForever))) {
 80009bc:	f107 0110 	add.w	r1, r7, #16
 80009c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009c4:	2201      	movs	r2, #1
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f004 fb80 	bl	80050cc <osMessageQueuePut>
 80009cc:	4603      	mov	r3, r0
 80009ce:	4618      	mov	r0, r3
 80009d0:	f000 fbf4 	bl	80011bc <handleOSStatus>
 80009d4:	4603      	mov	r3, r0
 80009d6:	2b00      	cmp	r3, #0
 80009d8:	d009      	beq.n	80009ee <producerIncrement+0x52>
		handleFlagReturn(osEventFlagsSet(monitorFlags, QUEUE_UPDATE));
 80009da:	4b07      	ldr	r3, [pc, #28]	; (80009f8 <producerIncrement+0x5c>)
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	2104      	movs	r1, #4
 80009e0:	4618      	mov	r0, r3
 80009e2:	f004 fa55 	bl	8004e90 <osEventFlagsSet>
 80009e6:	4603      	mov	r3, r0
 80009e8:	4618      	mov	r0, r3
 80009ea:	f000 fbb9 	bl	8001160 <handleFlagReturn>
	} else {
		// TODO handle queue error on producerIncrement
	}
}
 80009ee:	bf00      	nop
 80009f0:	3718      	adds	r7, #24
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	200000e4 	.word	0x200000e4

080009fc <ProducerTask>:

void ProducerTask(void *argument) {
 80009fc:	b580      	push	{r7, lr}
 80009fe:	b08c      	sub	sp, #48	; 0x30
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
	// Parse flags argument
	producerObj_t producerObj = *((producerObj_t*)argument);
 8000a04:	687a      	ldr	r2, [r7, #4]
 8000a06:	f107 0314 	add.w	r3, r7, #20
 8000a0a:	ca07      	ldmia	r2, {r0, r1, r2}
 8000a0c:	e883 0007 	stmia.w	r3, {r0, r1, r2}
	osThreadId_t producerHandle = osThreadGetId();
 8000a10:	f004 f85f 	bl	8004ad2 <osThreadGetId>
 8000a14:	4603      	mov	r3, r0
 8000a16:	613b      	str	r3, [r7, #16]
	osMessageQueueId_t monitorQueue = *(producerObj.monitorQueue);
 8000a18:	69bb      	ldr	r3, [r7, #24]
 8000a1a:	681b      	ldr	r3, [r3, #0]
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
	osMessageQueueId_t updateQueue = *(producerObj.updateQueue);
 8000a1e:	69fb      	ldr	r3, [r7, #28]
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	62bb      	str	r3, [r7, #40]	; 0x28
	uint32_t counterVar = 0;
 8000a24:	2300      	movs	r3, #0
 8000a26:	60fb      	str	r3, [r7, #12]
	uint32_t counterInterval = STARTING_INTERVAL;
 8000a28:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a2c:	60bb      	str	r3, [r7, #8]
	//osSemaphoreId_t updateSemaphore = osSemaphoreNew(1, 0, NULL);
	osTimerId_t producerTimer = osTimerNew(producerTimerCallback, osTimerOnce, &producerHandle, NULL);
 8000a2e:	f107 0210 	add.w	r2, r7, #16
 8000a32:	2300      	movs	r3, #0
 8000a34:	2100      	movs	r1, #0
 8000a36:	4819      	ldr	r0, [pc, #100]	; (8000a9c <ProducerTask+0xa0>)
 8000a38:	f004 f940 	bl	8004cbc <osTimerNew>
 8000a3c:	6278      	str	r0, [r7, #36]	; 0x24
	osTimerStart(producerTimer, counterInterval); // Shoots once
 8000a3e:	68bb      	ldr	r3, [r7, #8]
 8000a40:	4619      	mov	r1, r3
 8000a42:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a44:	f004 f9b6 	bl	8004db4 <osTimerStart>
	//osStatus_t ret;
	uint32_t flag = 0;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	623b      	str	r3, [r7, #32]
	for(;;) {
		flag = handleFlagReturn(osThreadFlagsWait(TASK_UPDATE | TASK_INCREMENT, osFlagsWaitAny, osWaitForever));
 8000a4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000a50:	2100      	movs	r1, #0
 8000a52:	2018      	movs	r0, #24
 8000a54:	f004 f89c 	bl	8004b90 <osThreadFlagsWait>
 8000a58:	4603      	mov	r3, r0
 8000a5a:	4618      	mov	r0, r3
 8000a5c:	f000 fb80 	bl	8001160 <handleFlagReturn>
 8000a60:	6238      	str	r0, [r7, #32]
		switch(flag) {
 8000a62:	6a3b      	ldr	r3, [r7, #32]
 8000a64:	2b08      	cmp	r3, #8
 8000a66:	d003      	beq.n	8000a70 <ProducerTask+0x74>
 8000a68:	6a3b      	ldr	r3, [r7, #32]
 8000a6a:	2b10      	cmp	r3, #16
 8000a6c:	d008      	beq.n	8000a80 <ProducerTask+0x84>
 8000a6e:	e00f      	b.n	8000a90 <ProducerTask+0x94>
		case TASK_UPDATE:
			producerUpdate(updateQueue, producerHandle, &counterInterval);
 8000a70:	693b      	ldr	r3, [r7, #16]
 8000a72:	f107 0208 	add.w	r2, r7, #8
 8000a76:	4619      	mov	r1, r3
 8000a78:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8000a7a:	f7ff ff62 	bl	8000942 <producerUpdate>
			break;
 8000a7e:	e007      	b.n	8000a90 <ProducerTask+0x94>
		case TASK_INCREMENT:
			producerIncrement(monitorQueue, producerHandle, &counterVar);
 8000a80:	693b      	ldr	r3, [r7, #16]
 8000a82:	f107 020c 	add.w	r2, r7, #12
 8000a86:	4619      	mov	r1, r3
 8000a88:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000a8a:	f7ff ff87 	bl	800099c <producerIncrement>
			break;
 8000a8e:	bf00      	nop
		}
		// Restart timer
		osTimerStart(producerTimer, counterInterval);
 8000a90:	68bb      	ldr	r3, [r7, #8]
 8000a92:	4619      	mov	r1, r3
 8000a94:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000a96:	f004 f98d 	bl	8004db4 <osTimerStart>
		flag = handleFlagReturn(osThreadFlagsWait(TASK_UPDATE | TASK_INCREMENT, osFlagsWaitAny, osWaitForever));
 8000a9a:	e7d7      	b.n	8000a4c <ProducerTask+0x50>
 8000a9c:	08000925 	.word	0x08000925

08000aa0 <HAL_UART_RxCpltCallback>:
	}
}

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000aa0:	b580      	push	{r7, lr}
 8000aa2:	b082      	sub	sp, #8
 8000aa4:	af00      	add	r7, sp, #0
 8000aa6:	6078      	str	r0, [r7, #4]
	if(huart == &huart2) {
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	4a06      	ldr	r2, [pc, #24]	; (8000ac4 <HAL_UART_RxCpltCallback+0x24>)
 8000aac:	4293      	cmp	r3, r2
 8000aae:	d105      	bne.n	8000abc <HAL_UART_RxCpltCallback+0x1c>
		osEventFlagsSet(monitorFlags, RX_BYTE);
 8000ab0:	4b05      	ldr	r3, [pc, #20]	; (8000ac8 <HAL_UART_RxCpltCallback+0x28>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	2101      	movs	r1, #1
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f004 f9ea 	bl	8004e90 <osEventFlagsSet>
	}
}
 8000abc:	bf00      	nop
 8000abe:	3708      	adds	r7, #8
 8000ac0:	46bd      	mov	sp, r7
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	200001a4 	.word	0x200001a4
 8000ac8:	200000e4 	.word	0x200000e4

08000acc <MonitorTask>:

void MonitorTask(void *argument) {
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b090      	sub	sp, #64	; 0x40
 8000ad0:	af00      	add	r7, sp, #0
 8000ad2:	6078      	str	r0, [r7, #4]
	// Parse producer argument
	osThreadId_t *producers = (osThreadId_t *)argument;
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	633b      	str	r3, [r7, #48]	; 0x30
	uint8_t buffer_index = 0;
 8000ad8:	2300      	movs	r3, #0
 8000ada:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
	char * rx_buffer = pvPortMalloc(sizeof(char) * buffer_index+1);
 8000ade:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000ae2:	3301      	adds	r3, #1
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f007 fcf7 	bl	80084d8 <pvPortMalloc>
 8000aea:	63b8      	str	r0, [r7, #56]	; 0x38
	rx_buffer[0] = '\0';
 8000aec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000aee:	2200      	movs	r2, #0
 8000af0:	701a      	strb	r2, [r3, #0]
	char * buffer_tmp = NULL;
 8000af2:	2300      	movs	r3, #0
 8000af4:	62fb      	str	r3, [r7, #44]	; 0x2c
	bool receiving_input = false;
 8000af6:	2300      	movs	r3, #0
 8000af8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
	osStatus_t ret;
	taskInfoObj_t taskInfo;
	dataObj_t rx_obj;
	uint32_t flag = 0;
 8000afc:	2300      	movs	r3, #0
 8000afe:	62bb      	str	r3, [r7, #40]	; 0x28
	HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 1);
 8000b00:	2201      	movs	r2, #1
 8000b02:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000b04:	4881      	ldr	r0, [pc, #516]	; (8000d0c <MonitorTask+0x240>)
 8000b06:	f002 fc9d 	bl	8003444 <HAL_UART_Receive_IT>
	for(;;) {
		flag = handleFlagReturn(osEventFlagsWait(monitorFlags, RX_BYTE | INPUT | QUEUE_UPDATE, osFlagsWaitAny, osWaitForever));
 8000b0a:	4b81      	ldr	r3, [pc, #516]	; (8000d10 <MonitorTask+0x244>)
 8000b0c:	6818      	ldr	r0, [r3, #0]
 8000b0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b12:	2200      	movs	r2, #0
 8000b14:	2107      	movs	r1, #7
 8000b16:	f004 f9ff 	bl	8004f18 <osEventFlagsWait>
 8000b1a:	4603      	mov	r3, r0
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	f000 fb1f 	bl	8001160 <handleFlagReturn>
 8000b22:	62b8      	str	r0, [r7, #40]	; 0x28
		switch(flag) {
 8000b24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b26:	2b04      	cmp	r3, #4
 8000b28:	f000 80c9 	beq.w	8000cbe <MonitorTask+0x1f2>
 8000b2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b2e:	2b04      	cmp	r3, #4
 8000b30:	d8eb      	bhi.n	8000b0a <MonitorTask+0x3e>
 8000b32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b34:	2b01      	cmp	r3, #1
 8000b36:	d003      	beq.n	8000b40 <MonitorTask+0x74>
 8000b38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d068      	beq.n	8000c10 <MonitorTask+0x144>
 8000b3e:	e0e3      	b.n	8000d08 <MonitorTask+0x23c>
		case RX_BYTE:
			// 'T'
			// buffer_index == 1
			//
			if(!receiving_input) { // Block monitor output for duration of CMD-Input
 8000b40:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000b44:	f083 0301 	eor.w	r3, r3, #1
 8000b48:	b2db      	uxtb	r3, r3
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d011      	beq.n	8000b72 <MonitorTask+0xa6>
				receiving_input = true;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
				sprintf(debugMsgBuffer, "Output halted - CMD: ");
 8000b54:	496f      	ldr	r1, [pc, #444]	; (8000d14 <MonitorTask+0x248>)
 8000b56:	4870      	ldr	r0, [pc, #448]	; (8000d18 <MonitorTask+0x24c>)
 8000b58:	f008 f97e 	bl	8008e58 <siprintf>
				HAL_UART_Transmit(&huart2, (uint8_t*)debugMsgBuffer, strlen(debugMsgBuffer), UPDATE_TIMEOUT);
 8000b5c:	486e      	ldr	r0, [pc, #440]	; (8000d18 <MonitorTask+0x24c>)
 8000b5e:	f7ff fb37 	bl	80001d0 <strlen>
 8000b62:	4603      	mov	r3, r0
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b6a:	496b      	ldr	r1, [pc, #428]	; (8000d18 <MonitorTask+0x24c>)
 8000b6c:	4867      	ldr	r0, [pc, #412]	; (8000d0c <MonitorTask+0x240>)
 8000b6e:	f002 fbd5 	bl	800331c <HAL_UART_Transmit>
			}
			if(rx_buffer[buffer_index] == '\r') {
 8000b72:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b76:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b78:	4413      	add	r3, r2
 8000b7a:	781b      	ldrb	r3, [r3, #0]
 8000b7c:	2b0d      	cmp	r3, #13
 8000b7e:	d114      	bne.n	8000baa <MonitorTask+0xde>
				rx_buffer[buffer_index] = '\0'; // NUL-terminate current string buffer
 8000b80:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000b84:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000b86:	4413      	add	r3, r2
 8000b88:	2200      	movs	r2, #0
 8000b8a:	701a      	strb	r2, [r3, #0]
				osEventFlagsSet(monitorFlags, INPUT); // Trigger input parsing on carriage return
 8000b8c:	4b60      	ldr	r3, [pc, #384]	; (8000d10 <MonitorTask+0x244>)
 8000b8e:	681b      	ldr	r3, [r3, #0]
 8000b90:	2102      	movs	r1, #2
 8000b92:	4618      	mov	r0, r3
 8000b94:	f004 f97c 	bl	8004e90 <osEventFlagsSet>
				buffer_index = 0;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer, 1);
 8000b9e:	2201      	movs	r2, #1
 8000ba0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000ba2:	485a      	ldr	r0, [pc, #360]	; (8000d0c <MonitorTask+0x240>)
 8000ba4:	f002 fc4e 	bl	8003444 <HAL_UART_Receive_IT>
				break;
 8000ba8:	e0ae      	b.n	8000d08 <MonitorTask+0x23c>
			} else {
				HAL_UART_Transmit(&huart2, (uint8_t*)rx_buffer+buffer_index, 1, UPDATE_TIMEOUT); // Output input character
 8000baa:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bae:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000bb0:	18d1      	adds	r1, r2, r3
 8000bb2:	f242 7310 	movw	r3, #10000	; 0x2710
 8000bb6:	2201      	movs	r2, #1
 8000bb8:	4854      	ldr	r0, [pc, #336]	; (8000d0c <MonitorTask+0x240>)
 8000bba:	f002 fbaf 	bl	800331c <HAL_UART_Transmit>
			}
			// Prepare & Resize buffer for next character
			// buffer_index+1 == Size of buffer (Reminder: index starts at 0)
			// buffer_index+2 == Size of buffer + 1 new element
			buffer_tmp = pvPortMalloc(sizeof(char) * (buffer_index+2));
 8000bbe:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bc2:	3302      	adds	r3, #2
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	f007 fc87 	bl	80084d8 <pvPortMalloc>
 8000bca:	62f8      	str	r0, [r7, #44]	; 0x2c
			if(buffer_tmp == NULL) {
 8000bcc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bce:	2b00      	cmp	r3, #0
 8000bd0:	f000 8095 	beq.w	8000cfe <MonitorTask+0x232>
				// TODO Handle out of memory exception
			} else {
				memcpy(buffer_tmp, rx_buffer, (buffer_index+1)); // Copy existing data
 8000bd4:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bd8:	3301      	adds	r3, #1
 8000bda:	461a      	mov	r2, r3
 8000bdc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8000bde:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8000be0:	f007 ff87 	bl	8008af2 <memcpy>
				vPortFree(rx_buffer); // Free old string memory
 8000be4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000be6:	f007 fd43 	bl	8008670 <vPortFree>
				rx_buffer = buffer_tmp; // Re-assign string memory to new block
 8000bea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000bec:	63bb      	str	r3, [r7, #56]	; 0x38
				buffer_tmp = NULL; // Re-assign temporary buffer to NULL;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
				buffer_index++; // Increase buffer index to next character position
 8000bf2:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
				HAL_UART_Receive_IT(&huart2, (uint8_t*)rx_buffer+buffer_index, 1);
 8000bfc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8000c00:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000c02:	4413      	add	r3, r2
 8000c04:	2201      	movs	r2, #1
 8000c06:	4619      	mov	r1, r3
 8000c08:	4840      	ldr	r0, [pc, #256]	; (8000d0c <MonitorTask+0x240>)
 8000c0a:	f002 fc1b 	bl	8003444 <HAL_UART_Receive_IT>
			}
			break;
 8000c0e:	e076      	b.n	8000cfe <MonitorTask+0x232>
		case INPUT:
			printf("\r\n");
 8000c10:	4842      	ldr	r0, [pc, #264]	; (8000d1c <MonitorTask+0x250>)
 8000c12:	f008 f89f 	bl	8008d54 <puts>
			receiving_input = false;
 8000c16:	2300      	movs	r3, #0
 8000c18:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
			parseStatus_t parse_ret = parseInput(rx_buffer, &taskInfo);
 8000c1c:	f107 0318 	add.w	r3, r7, #24
 8000c20:	4619      	mov	r1, r3
 8000c22:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8000c24:	f000 f88c 	bl	8000d40 <parseInput>
 8000c28:	4603      	mov	r3, r0
 8000c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
			switch(parse_ret) {
 8000c2e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8000c32:	2b02      	cmp	r3, #2
 8000c34:	d03e      	beq.n	8000cb4 <MonitorTask+0x1e8>
 8000c36:	2b02      	cmp	r3, #2
 8000c38:	dc63      	bgt.n	8000d02 <MonitorTask+0x236>
 8000c3a:	2b00      	cmp	r3, #0
 8000c3c:	d002      	beq.n	8000c44 <MonitorTask+0x178>
 8000c3e:	2b01      	cmp	r3, #1
 8000c40:	d034      	beq.n	8000cac <MonitorTask+0x1e0>
				break;
			case parseFailure:
				printf("Input parsing error.\r\n");
				break;
			}
			break;
 8000c42:	e05e      	b.n	8000d02 <MonitorTask+0x236>
				if(taskInfo.taskNumber >= NUM_PRODUCERS) {
 8000c44:	7e3b      	ldrb	r3, [r7, #24]
 8000c46:	2b02      	cmp	r3, #2
 8000c48:	d903      	bls.n	8000c52 <MonitorTask+0x186>
					printf("Task index out of bounds!\r\n");
 8000c4a:	4835      	ldr	r0, [pc, #212]	; (8000d20 <MonitorTask+0x254>)
 8000c4c:	f008 f882 	bl	8008d54 <puts>
					break;
 8000c50:	e034      	b.n	8000cbc <MonitorTask+0x1f0>
						.taskHandle = producers[taskInfo.taskNumber],
 8000c52:	7e3b      	ldrb	r3, [r7, #24]
 8000c54:	009b      	lsls	r3, r3, #2
 8000c56:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c58:	4413      	add	r3, r2
 8000c5a:	681b      	ldr	r3, [r3, #0]
				dataObj_t tx_obj = {
 8000c5c:	60bb      	str	r3, [r7, #8]
						.value = taskInfo.targetInterval
 8000c5e:	69fb      	ldr	r3, [r7, #28]
				dataObj_t tx_obj = {
 8000c60:	60fb      	str	r3, [r7, #12]
				printf("Updating %s interval to %lums.\r\n", osThreadGetName(tx_obj.taskHandle), (unsigned long)tx_obj.value);
 8000c62:	68bb      	ldr	r3, [r7, #8]
 8000c64:	4618      	mov	r0, r3
 8000c66:	f003 ff19 	bl	8004a9c <osThreadGetName>
 8000c6a:	4601      	mov	r1, r0
 8000c6c:	68fb      	ldr	r3, [r7, #12]
 8000c6e:	461a      	mov	r2, r3
 8000c70:	482c      	ldr	r0, [pc, #176]	; (8000d24 <MonitorTask+0x258>)
 8000c72:	f007 ffe9 	bl	8008c48 <iprintf>
				handleOSStatus(osMessageQueuePut(updateQueue, &tx_obj, 1, osWaitForever));
 8000c76:	4b2c      	ldr	r3, [pc, #176]	; (8000d28 <MonitorTask+0x25c>)
 8000c78:	6818      	ldr	r0, [r3, #0]
 8000c7a:	f107 0108 	add.w	r1, r7, #8
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c82:	2201      	movs	r2, #1
 8000c84:	f004 fa22 	bl	80050cc <osMessageQueuePut>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4618      	mov	r0, r3
 8000c8c:	f000 fa96 	bl	80011bc <handleOSStatus>
				handleFlagReturn(osThreadFlagsSet(producers[taskInfo.taskNumber], TASK_UPDATE));
 8000c90:	7e3b      	ldrb	r3, [r7, #24]
 8000c92:	009b      	lsls	r3, r3, #2
 8000c94:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8000c96:	4413      	add	r3, r2
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	f003 ff29 	bl	8004af4 <osThreadFlagsSet>
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	4618      	mov	r0, r3
 8000ca6:	f000 fa5b 	bl	8001160 <handleFlagReturn>
				break;
 8000caa:	e007      	b.n	8000cbc <MonitorTask+0x1f0>
				printf("Input parsing exception.\r\n");
 8000cac:	481f      	ldr	r0, [pc, #124]	; (8000d2c <MonitorTask+0x260>)
 8000cae:	f008 f851 	bl	8008d54 <puts>
				break;
 8000cb2:	e003      	b.n	8000cbc <MonitorTask+0x1f0>
				printf("Input parsing error.\r\n");
 8000cb4:	481e      	ldr	r0, [pc, #120]	; (8000d30 <MonitorTask+0x264>)
 8000cb6:	f008 f84d 	bl	8008d54 <puts>
				break;
 8000cba:	bf00      	nop
			break;
 8000cbc:	e021      	b.n	8000d02 <MonitorTask+0x236>
		case QUEUE_UPDATE:
			ret = osMessageQueueGet(monitorQueue, &rx_obj, NULL, osWaitForever);
 8000cbe:	4b1d      	ldr	r3, [pc, #116]	; (8000d34 <MonitorTask+0x268>)
 8000cc0:	6818      	ldr	r0, [r3, #0]
 8000cc2:	f107 0110 	add.w	r1, r7, #16
 8000cc6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f004 fa5e 	bl	800518c <osMessageQueueGet>
 8000cd0:	6278      	str	r0, [r7, #36]	; 0x24
			if(receiving_input) break;
 8000cd2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d115      	bne.n	8000d06 <MonitorTask+0x23a>
			if(ret == osOK) {
 8000cda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000cdc:	2b00      	cmp	r3, #0
 8000cde:	d10a      	bne.n	8000cf6 <MonitorTask+0x22a>
				printf("%s: %lu\r\n", osThreadGetName(rx_obj.taskHandle), (unsigned long)rx_obj.value);
 8000ce0:	693b      	ldr	r3, [r7, #16]
 8000ce2:	4618      	mov	r0, r3
 8000ce4:	f003 feda 	bl	8004a9c <osThreadGetName>
 8000ce8:	4601      	mov	r1, r0
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4812      	ldr	r0, [pc, #72]	; (8000d38 <MonitorTask+0x26c>)
 8000cf0:	f007 ffaa 	bl	8008c48 <iprintf>
			} else {
				printf("Monitor queue error.\r\n");
			}
			break;
 8000cf4:	e008      	b.n	8000d08 <MonitorTask+0x23c>
				printf("Monitor queue error.\r\n");
 8000cf6:	4811      	ldr	r0, [pc, #68]	; (8000d3c <MonitorTask+0x270>)
 8000cf8:	f008 f82c 	bl	8008d54 <puts>
			break;
 8000cfc:	e004      	b.n	8000d08 <MonitorTask+0x23c>
			break;
 8000cfe:	bf00      	nop
 8000d00:	e703      	b.n	8000b0a <MonitorTask+0x3e>
			break;
 8000d02:	bf00      	nop
 8000d04:	e701      	b.n	8000b0a <MonitorTask+0x3e>
			if(receiving_input) break;
 8000d06:	bf00      	nop
		flag = handleFlagReturn(osEventFlagsWait(monitorFlags, RX_BYTE | INPUT | QUEUE_UPDATE, osFlagsWaitAny, osWaitForever));
 8000d08:	e6ff      	b.n	8000b0a <MonitorTask+0x3e>
 8000d0a:	bf00      	nop
 8000d0c:	200001a4 	.word	0x200001a4
 8000d10:	200000e4 	.word	0x200000e4
 8000d14:	0800a7c8 	.word	0x0800a7c8
 8000d18:	200000f0 	.word	0x200000f0
 8000d1c:	0800a7e0 	.word	0x0800a7e0
 8000d20:	0800a7e4 	.word	0x0800a7e4
 8000d24:	0800a800 	.word	0x0800a800
 8000d28:	200000ec 	.word	0x200000ec
 8000d2c:	0800a824 	.word	0x0800a824
 8000d30:	0800a840 	.word	0x0800a840
 8000d34:	200000e8 	.word	0x200000e8
 8000d38:	0800a858 	.word	0x0800a858
 8000d3c:	0800a864 	.word	0x0800a864

08000d40 <parseInput>:
 *  Created on: Apr 16, 2023
 *      Author: rini
 */
#include "protocol.h"

parseStatus_t parseInput(char *input, taskInfoObj_t *parsedObj) {
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b086      	sub	sp, #24
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	6078      	str	r0, [r7, #4]
 8000d48:	6039      	str	r1, [r7, #0]
	if(parsedObj == NULL || input == NULL) return parseException;
 8000d4a:	683b      	ldr	r3, [r7, #0]
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d002      	beq.n	8000d56 <parseInput+0x16>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	2b00      	cmp	r3, #0
 8000d54:	d101      	bne.n	8000d5a <parseInput+0x1a>
 8000d56:	2301      	movs	r3, #1
 8000d58:	e028      	b.n	8000dac <parseInput+0x6c>
	int num = 0;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	613b      	str	r3, [r7, #16]
	int interval = 0;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
	int ret = sscanf(input, "T%d %dms\r", &num, &interval);
 8000d62:	f107 030c 	add.w	r3, r7, #12
 8000d66:	f107 0210 	add.w	r2, r7, #16
 8000d6a:	4912      	ldr	r1, [pc, #72]	; (8000db4 <parseInput+0x74>)
 8000d6c:	6878      	ldr	r0, [r7, #4]
 8000d6e:	f008 f893 	bl	8008e98 <siscanf>
 8000d72:	6178      	str	r0, [r7, #20]
	switch(ret) {
 8000d74:	697b      	ldr	r3, [r7, #20]
 8000d76:	2b02      	cmp	r3, #2
 8000d78:	d00d      	beq.n	8000d96 <parseInput+0x56>
 8000d7a:	697b      	ldr	r3, [r7, #20]
 8000d7c:	2b02      	cmp	r3, #2
 8000d7e:	dc14      	bgt.n	8000daa <parseInput+0x6a>
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d003      	beq.n	8000d8e <parseInput+0x4e>
 8000d86:	697b      	ldr	r3, [r7, #20]
 8000d88:	2b01      	cmp	r3, #1
 8000d8a:	d002      	beq.n	8000d92 <parseInput+0x52>
 8000d8c:	e00d      	b.n	8000daa <parseInput+0x6a>
	case 0:
		return parseFailure;
 8000d8e:	2302      	movs	r3, #2
 8000d90:	e00c      	b.n	8000dac <parseInput+0x6c>
	case 1:
		return parseFailure;
 8000d92:	2302      	movs	r3, #2
 8000d94:	e00a      	b.n	8000dac <parseInput+0x6c>
	case 2:
		parsedObj->taskNumber = num;
 8000d96:	693b      	ldr	r3, [r7, #16]
 8000d98:	b2da      	uxtb	r2, r3
 8000d9a:	683b      	ldr	r3, [r7, #0]
 8000d9c:	701a      	strb	r2, [r3, #0]
		parsedObj->targetInterval = interval;
 8000d9e:	68fb      	ldr	r3, [r7, #12]
 8000da0:	461a      	mov	r2, r3
 8000da2:	683b      	ldr	r3, [r7, #0]
 8000da4:	605a      	str	r2, [r3, #4]
		return parseOK;
 8000da6:	2300      	movs	r3, #0
 8000da8:	e000      	b.n	8000dac <parseInput+0x6c>
	default:
		// TODO Undefined/default behavior in parseInput?
		return parseFailure;
 8000daa:	2302      	movs	r3, #2
	}
}
 8000dac:	4618      	mov	r0, r3
 8000dae:	3718      	adds	r7, #24
 8000db0:	46bd      	mov	sp, r7
 8000db2:	bd80      	pop	{r7, pc}
 8000db4:	0800a87c 	.word	0x0800a87c

08000db8 <_write>:
  * @param 	file 	...	file descriptor
  * @param	ptr		... pointer to the data buffer.
  * @param	len 	...	length of the buffer in bytes.
  * @retval (int)	... Successfully transmitted bytes.
  */
int _write(int file, char *ptr, int len){
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	60f8      	str	r0, [r7, #12]
 8000dc0:	60b9      	str	r1, [r7, #8]
 8000dc2:	607a      	str	r2, [r7, #4]
	while(len--){
 8000dc4:	e006      	b.n	8000dd4 <_write+0x1c>
		putchar(*ptr++);
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1c5a      	adds	r2, r3, #1
 8000dca:	60ba      	str	r2, [r7, #8]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	4618      	mov	r0, r3
 8000dd0:	f000 f80a 	bl	8000de8 <putchar>
	while(len--){
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	1e5a      	subs	r2, r3, #1
 8000dd8:	607a      	str	r2, [r7, #4]
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d1f3      	bne.n	8000dc6 <_write+0xe>
	}
	return len;
 8000dde:	687b      	ldr	r3, [r7, #4]
}
 8000de0:	4618      	mov	r0, r3
 8000de2:	3710      	adds	r7, #16
 8000de4:	46bd      	mov	sp, r7
 8000de6:	bd80      	pop	{r7, pc}

08000de8 <putchar>:
/**
 *
 * @param ch		... Character to be transmitted.
 * @return	(int) 	... Returns the character.
 */
int	putchar (int ch){
 8000de8:	b580      	push	{r7, lr}
 8000dea:	b084      	sub	sp, #16
 8000dec:	af00      	add	r7, sp, #0
 8000dee:	6078      	str	r0, [r7, #4]
	char charTemp = (char) ch;
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	b2db      	uxtb	r3, r3
 8000df4:	73fb      	strb	r3, [r7, #15]
	 * Either that, or both '\r' and '\n' need to be provided.
	 */
//	if (charTemp == '\n'){
//		putchar('\r');
//	}
	HAL_UART_Transmit(&huart2, (uint8_t*)&charTemp, 1, -1);
 8000df6:	f107 010f 	add.w	r1, r7, #15
 8000dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000dfe:	2201      	movs	r2, #1
 8000e00:	4803      	ldr	r0, [pc, #12]	; (8000e10 <putchar+0x28>)
 8000e02:	f002 fa8b 	bl	800331c <HAL_UART_Transmit>
	return ch;
 8000e06:	687b      	ldr	r3, [r7, #4]
}
 8000e08:	4618      	mov	r0, r3
 8000e0a:	3710      	adds	r7, #16
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	bd80      	pop	{r7, pc}
 8000e10:	200001a4 	.word	0x200001a4

08000e14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000e1a:	4b11      	ldr	r3, [pc, #68]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e1e:	4a10      	ldr	r2, [pc, #64]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6613      	str	r3, [r2, #96]	; 0x60
 8000e26:	4b0e      	ldr	r3, [pc, #56]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	607b      	str	r3, [r7, #4]
 8000e30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e32:	4b0b      	ldr	r3, [pc, #44]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e36:	4a0a      	ldr	r2, [pc, #40]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e3e:	4b08      	ldr	r3, [pc, #32]	; (8000e60 <HAL_MspInit+0x4c>)
 8000e40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e46:	603b      	str	r3, [r7, #0]
 8000e48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	210f      	movs	r1, #15
 8000e4e:	f06f 0001 	mvn.w	r0, #1
 8000e52:	f000 fb93 	bl	800157c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000e56:	bf00      	nop
 8000e58:	3708      	adds	r7, #8
 8000e5a:	46bd      	mov	sp, r7
 8000e5c:	bd80      	pop	{r7, pc}
 8000e5e:	bf00      	nop
 8000e60:	40021000 	.word	0x40021000

08000e64 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	b08e      	sub	sp, #56	; 0x38
 8000e68:	af00      	add	r7, sp, #0
 8000e6a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000e72:	4b34      	ldr	r3, [pc, #208]	; (8000f44 <HAL_InitTick+0xe0>)
 8000e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e76:	4a33      	ldr	r2, [pc, #204]	; (8000f44 <HAL_InitTick+0xe0>)
 8000e78:	f043 0310 	orr.w	r3, r3, #16
 8000e7c:	6593      	str	r3, [r2, #88]	; 0x58
 8000e7e:	4b31      	ldr	r3, [pc, #196]	; (8000f44 <HAL_InitTick+0xe0>)
 8000e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e82:	f003 0310 	and.w	r3, r3, #16
 8000e86:	60fb      	str	r3, [r7, #12]
 8000e88:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000e8a:	f107 0210 	add.w	r2, r7, #16
 8000e8e:	f107 0314 	add.w	r3, r7, #20
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f001 fbe9 	bl	800266c <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000e9a:	6a3b      	ldr	r3, [r7, #32]
 8000e9c:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000e9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d103      	bne.n	8000eac <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000ea4:	f001 fbb6 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8000ea8:	6378      	str	r0, [r7, #52]	; 0x34
 8000eaa:	e004      	b.n	8000eb6 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000eac:	f001 fbb2 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8000eb0:	4603      	mov	r3, r0
 8000eb2:	005b      	lsls	r3, r3, #1
 8000eb4:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000eb6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000eb8:	4a23      	ldr	r2, [pc, #140]	; (8000f48 <HAL_InitTick+0xe4>)
 8000eba:	fba2 2303 	umull	r2, r3, r2, r3
 8000ebe:	0c9b      	lsrs	r3, r3, #18
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ec4:	4b21      	ldr	r3, [pc, #132]	; (8000f4c <HAL_InitTick+0xe8>)
 8000ec6:	4a22      	ldr	r2, [pc, #136]	; (8000f50 <HAL_InitTick+0xec>)
 8000ec8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000eca:	4b20      	ldr	r3, [pc, #128]	; (8000f4c <HAL_InitTick+0xe8>)
 8000ecc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ed0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ed2:	4a1e      	ldr	r2, [pc, #120]	; (8000f4c <HAL_InitTick+0xe8>)
 8000ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ed6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ed8:	4b1c      	ldr	r3, [pc, #112]	; (8000f4c <HAL_InitTick+0xe8>)
 8000eda:	2200      	movs	r2, #0
 8000edc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ede:	4b1b      	ldr	r3, [pc, #108]	; (8000f4c <HAL_InitTick+0xe8>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ee4:	4b19      	ldr	r3, [pc, #100]	; (8000f4c <HAL_InitTick+0xe8>)
 8000ee6:	2200      	movs	r2, #0
 8000ee8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000eea:	4818      	ldr	r0, [pc, #96]	; (8000f4c <HAL_InitTick+0xe8>)
 8000eec:	f001 ff48 	bl	8002d80 <HAL_TIM_Base_Init>
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000ef6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d11b      	bne.n	8000f36 <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000efe:	4813      	ldr	r0, [pc, #76]	; (8000f4c <HAL_InitTick+0xe8>)
 8000f00:	f001 ffa0 	bl	8002e44 <HAL_TIM_Base_Start_IT>
 8000f04:	4603      	mov	r3, r0
 8000f06:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000f0a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d111      	bne.n	8000f36 <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f12:	2036      	movs	r0, #54	; 0x36
 8000f14:	f000 fb4e 	bl	80015b4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2b0f      	cmp	r3, #15
 8000f1c:	d808      	bhi.n	8000f30 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f1e:	2200      	movs	r2, #0
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	2036      	movs	r0, #54	; 0x36
 8000f24:	f000 fb2a 	bl	800157c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000f28:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <HAL_InitTick+0xf0>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
 8000f2e:	e002      	b.n	8000f36 <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	3738      	adds	r7, #56	; 0x38
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000
 8000f48:	431bde83 	.word	0x431bde83
 8000f4c:	20000154 	.word	0x20000154
 8000f50:	40001000 	.word	0x40001000
 8000f54:	20000050 	.word	0x20000050

08000f58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000f5c:	e7fe      	b.n	8000f5c <NMI_Handler+0x4>

08000f5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f5e:	b480      	push	{r7}
 8000f60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f62:	e7fe      	b.n	8000f62 <HardFault_Handler+0x4>

08000f64 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f64:	b480      	push	{r7}
 8000f66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f68:	e7fe      	b.n	8000f68 <MemManage_Handler+0x4>

08000f6a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <BusFault_Handler+0x4>

08000f70 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <UsageFault_Handler+0x4>

08000f76 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f7a:	bf00      	nop
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f82:	4770      	bx	lr

08000f84 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000f88:	4802      	ldr	r0, [pc, #8]	; (8000f94 <USART2_IRQHandler+0x10>)
 8000f8a:	f002 fab1 	bl	80034f0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000f8e:	bf00      	nop
 8000f90:	bd80      	pop	{r7, pc}
 8000f92:	bf00      	nop
 8000f94:	200001a4 	.word	0x200001a4

08000f98 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000f9c:	4802      	ldr	r0, [pc, #8]	; (8000fa8 <TIM6_DAC_IRQHandler+0x10>)
 8000f9e:	f001 ffa5 	bl	8002eec <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	bd80      	pop	{r7, pc}
 8000fa6:	bf00      	nop
 8000fa8:	20000154 	.word	0x20000154

08000fac <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b086      	sub	sp, #24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fb8:	2300      	movs	r3, #0
 8000fba:	617b      	str	r3, [r7, #20]
 8000fbc:	e00a      	b.n	8000fd4 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8000fbe:	f3af 8000 	nop.w
 8000fc2:	4601      	mov	r1, r0
 8000fc4:	68bb      	ldr	r3, [r7, #8]
 8000fc6:	1c5a      	adds	r2, r3, #1
 8000fc8:	60ba      	str	r2, [r7, #8]
 8000fca:	b2ca      	uxtb	r2, r1
 8000fcc:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000fce:	697b      	ldr	r3, [r7, #20]
 8000fd0:	3301      	adds	r3, #1
 8000fd2:	617b      	str	r3, [r7, #20]
 8000fd4:	697a      	ldr	r2, [r7, #20]
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	429a      	cmp	r2, r3
 8000fda:	dbf0      	blt.n	8000fbe <_read+0x12>
	}

return len;
 8000fdc:	687b      	ldr	r3, [r7, #4]
}
 8000fde:	4618      	mov	r0, r3
 8000fe0:	3718      	adds	r7, #24
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}

08000fe6 <_close>:
	}
	return len;
}

int _close(int file)
{
 8000fe6:	b480      	push	{r7}
 8000fe8:	b083      	sub	sp, #12
 8000fea:	af00      	add	r7, sp, #0
 8000fec:	6078      	str	r0, [r7, #4]
	return -1;
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	370c      	adds	r7, #12
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b083      	sub	sp, #12
 8001002:	af00      	add	r7, sp, #0
 8001004:	6078      	str	r0, [r7, #4]
 8001006:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001008:	683b      	ldr	r3, [r7, #0]
 800100a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800100e:	605a      	str	r2, [r3, #4]
	return 0;
 8001010:	2300      	movs	r3, #0
}
 8001012:	4618      	mov	r0, r3
 8001014:	370c      	adds	r7, #12
 8001016:	46bd      	mov	sp, r7
 8001018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101c:	4770      	bx	lr

0800101e <_isatty>:

int _isatty(int file)
{
 800101e:	b480      	push	{r7}
 8001020:	b083      	sub	sp, #12
 8001022:	af00      	add	r7, sp, #0
 8001024:	6078      	str	r0, [r7, #4]
	return 1;
 8001026:	2301      	movs	r3, #1
}
 8001028:	4618      	mov	r0, r3
 800102a:	370c      	adds	r7, #12
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001034:	b480      	push	{r7}
 8001036:	b085      	sub	sp, #20
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	607a      	str	r2, [r7, #4]
	return 0;
 8001040:	2300      	movs	r3, #0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3714      	adds	r7, #20
 8001046:	46bd      	mov	sp, r7
 8001048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800104c:	4770      	bx	lr
	...

08001050 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	b086      	sub	sp, #24
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001058:	4a14      	ldr	r2, [pc, #80]	; (80010ac <_sbrk+0x5c>)
 800105a:	4b15      	ldr	r3, [pc, #84]	; (80010b0 <_sbrk+0x60>)
 800105c:	1ad3      	subs	r3, r2, r3
 800105e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001060:	697b      	ldr	r3, [r7, #20]
 8001062:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001064:	4b13      	ldr	r3, [pc, #76]	; (80010b4 <_sbrk+0x64>)
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	2b00      	cmp	r3, #0
 800106a:	d102      	bne.n	8001072 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800106c:	4b11      	ldr	r3, [pc, #68]	; (80010b4 <_sbrk+0x64>)
 800106e:	4a12      	ldr	r2, [pc, #72]	; (80010b8 <_sbrk+0x68>)
 8001070:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001072:	4b10      	ldr	r3, [pc, #64]	; (80010b4 <_sbrk+0x64>)
 8001074:	681a      	ldr	r2, [r3, #0]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4413      	add	r3, r2
 800107a:	693a      	ldr	r2, [r7, #16]
 800107c:	429a      	cmp	r2, r3
 800107e:	d207      	bcs.n	8001090 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001080:	f007 fc14 	bl	80088ac <__errno>
 8001084:	4603      	mov	r3, r0
 8001086:	220c      	movs	r2, #12
 8001088:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800108a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800108e:	e009      	b.n	80010a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001090:	4b08      	ldr	r3, [pc, #32]	; (80010b4 <_sbrk+0x64>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001096:	4b07      	ldr	r3, [pc, #28]	; (80010b4 <_sbrk+0x64>)
 8001098:	681a      	ldr	r2, [r3, #0]
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	4413      	add	r3, r2
 800109e:	4a05      	ldr	r2, [pc, #20]	; (80010b4 <_sbrk+0x64>)
 80010a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80010a2:	68fb      	ldr	r3, [r7, #12]
}
 80010a4:	4618      	mov	r0, r3
 80010a6:	3718      	adds	r7, #24
 80010a8:	46bd      	mov	sp, r7
 80010aa:	bd80      	pop	{r7, pc}
 80010ac:	20010000 	.word	0x20010000
 80010b0:	00000400 	.word	0x00000400
 80010b4:	200001a0 	.word	0x200001a0
 80010b8:	20004bd0 	.word	0x20004bd0

080010bc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80010bc:	b480      	push	{r7}
 80010be:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80010c0:	4b06      	ldr	r3, [pc, #24]	; (80010dc <SystemInit+0x20>)
 80010c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010c6:	4a05      	ldr	r2, [pc, #20]	; (80010dc <SystemInit+0x20>)
 80010c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80010d0:	bf00      	nop
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	e000ed00 	.word	0xe000ed00

080010e0 <verifyTaskCreation>:

#include "taskHelper.h"

#ifdef USE_CMSIS

void verifyTaskCreation(osThreadId_t handle, char * customMsg) {
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b082      	sub	sp, #8
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
 80010e8:	6039      	str	r1, [r7, #0]
	if(handle == NULL) {
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d104      	bne.n	80010fa <verifyTaskCreation+0x1a>
		printf("Failed to create thread: %s\r\n", customMsg);
 80010f0:	6839      	ldr	r1, [r7, #0]
 80010f2:	4806      	ldr	r0, [pc, #24]	; (800110c <verifyTaskCreation+0x2c>)
 80010f4:	f007 fda8 	bl	8008c48 <iprintf>
	} else {
		printf("Created thread: %s\r\n", customMsg);
	}
}
 80010f8:	e003      	b.n	8001102 <verifyTaskCreation+0x22>
		printf("Created thread: %s\r\n", customMsg);
 80010fa:	6839      	ldr	r1, [r7, #0]
 80010fc:	4804      	ldr	r0, [pc, #16]	; (8001110 <verifyTaskCreation+0x30>)
 80010fe:	f007 fda3 	bl	8008c48 <iprintf>
}
 8001102:	bf00      	nop
 8001104:	3708      	adds	r7, #8
 8001106:	46bd      	mov	sp, r7
 8001108:	bd80      	pop	{r7, pc}
 800110a:	bf00      	nop
 800110c:	0800a888 	.word	0x0800a888
 8001110:	0800a8a8 	.word	0x0800a8a8

08001114 <initAttributes>:

void initAttributes(osThreadAttr_t *attribute, const char *name, uint32_t stack_size, osPriority_t priority, uint32_t attr_bits) {
 8001114:	b480      	push	{r7}
 8001116:	b085      	sub	sp, #20
 8001118:	af00      	add	r7, sp, #0
 800111a:	60f8      	str	r0, [r7, #12]
 800111c:	60b9      	str	r1, [r7, #8]
 800111e:	607a      	str	r2, [r7, #4]
 8001120:	603b      	str	r3, [r7, #0]
	if(attribute == NULL) return;
 8001122:	68fb      	ldr	r3, [r7, #12]
 8001124:	2b00      	cmp	r3, #0
 8001126:	d015      	beq.n	8001154 <initAttributes+0x40>
	attribute->name = name;
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	68ba      	ldr	r2, [r7, #8]
 800112c:	601a      	str	r2, [r3, #0]
	attribute->stack_size = stack_size;
 800112e:	68fb      	ldr	r3, [r7, #12]
 8001130:	687a      	ldr	r2, [r7, #4]
 8001132:	615a      	str	r2, [r3, #20]
	attribute->priority = priority;
 8001134:	68fb      	ldr	r3, [r7, #12]
 8001136:	683a      	ldr	r2, [r7, #0]
 8001138:	619a      	str	r2, [r3, #24]
	attribute->attr_bits = attr_bits;
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	605a      	str	r2, [r3, #4]
	// Initialize default values for static allocation
	attribute->cb_mem = NULL;
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	2200      	movs	r2, #0
 8001144:	609a      	str	r2, [r3, #8]
	attribute->cb_size = 0;
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2200      	movs	r2, #0
 800114a:	60da      	str	r2, [r3, #12]
	attribute->stack_mem = NULL;
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	2200      	movs	r2, #0
 8001150:	611a      	str	r2, [r3, #16]
 8001152:	e000      	b.n	8001156 <initAttributes+0x42>
	if(attribute == NULL) return;
 8001154:	bf00      	nop
}
 8001156:	3714      	adds	r7, #20
 8001158:	46bd      	mov	sp, r7
 800115a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115e:	4770      	bx	lr

08001160 <handleFlagReturn>:

uint32_t handleFlagReturn(uint32_t flag_return) {
 8001160:	b480      	push	{r7}
 8001162:	b083      	sub	sp, #12
 8001164:	af00      	add	r7, sp, #0
 8001166:	6078      	str	r0, [r7, #4]
	switch(flag_return) {
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800116e:	d01b      	beq.n	80011a8 <handleFlagReturn+0x48>
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001176:	d319      	bcc.n	80011ac <handleFlagReturn+0x4c>
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	f113 0f06 	cmn.w	r3, #6
 800117e:	d315      	bcc.n	80011ac <handleFlagReturn+0x4c>
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	3306      	adds	r3, #6
 8001184:	2b05      	cmp	r3, #5
 8001186:	d811      	bhi.n	80011ac <handleFlagReturn+0x4c>
 8001188:	a201      	add	r2, pc, #4	; (adr r2, 8001190 <handleFlagReturn+0x30>)
 800118a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800118e:	bf00      	nop
 8001190:	080011ad 	.word	0x080011ad
 8001194:	080011ad 	.word	0x080011ad
 8001198:	080011ad 	.word	0x080011ad
 800119c:	080011ad 	.word	0x080011ad
 80011a0:	080011ad 	.word	0x080011ad
 80011a4:	080011ad 	.word	0x080011ad
	case osFlagsError:
		// TODO handle osFlagsError
		break;
 80011a8:	bf00      	nop
 80011aa:	e000      	b.n	80011ae <handleFlagReturn+0x4e>
	case osFlagsErrorISR:
		// TODO handle osFlagsErrorISR
		break;
	default:
		// TODO default handling behavior
		break;
 80011ac:	bf00      	nop
	}
	// If no flag error occurred, then returned flag state may be used by caller
	return flag_return;
 80011ae:	687b      	ldr	r3, [r7, #4]
}
 80011b0:	4618      	mov	r0, r3
 80011b2:	370c      	adds	r7, #12
 80011b4:	46bd      	mov	sp, r7
 80011b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ba:	4770      	bx	lr

080011bc <handleOSStatus>:

bool handleOSStatus(osStatus_t status) {
 80011bc:	b480      	push	{r7}
 80011be:	b083      	sub	sp, #12
 80011c0:	af00      	add	r7, sp, #0
 80011c2:	6078      	str	r0, [r7, #4]
	switch(status) {
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	3306      	adds	r3, #6
 80011c8:	2b06      	cmp	r3, #6
 80011ca:	d813      	bhi.n	80011f4 <handleOSStatus+0x38>
 80011cc:	a201      	add	r2, pc, #4	; (adr r2, 80011d4 <handleOSStatus+0x18>)
 80011ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80011d2:	bf00      	nop
 80011d4:	080011f5 	.word	0x080011f5
 80011d8:	080011f5 	.word	0x080011f5
 80011dc:	080011f5 	.word	0x080011f5
 80011e0:	080011f5 	.word	0x080011f5
 80011e4:	080011f5 	.word	0x080011f5
 80011e8:	080011f5 	.word	0x080011f5
 80011ec:	080011f1 	.word	0x080011f1
	case osOK:
		return true;
 80011f0:	2301      	movs	r3, #1
 80011f2:	e001      	b.n	80011f8 <handleOSStatus+0x3c>
		break;
	case osErrorISR:
		// TODO handle osErrorISR
		break;
	default:
		break;
 80011f4:	bf00      	nop
	}
	return false;
 80011f6:	2300      	movs	r3, #0
}
 80011f8:	4618      	mov	r0, r3
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr

08001204 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001208:	4b14      	ldr	r3, [pc, #80]	; (800125c <MX_USART2_UART_Init+0x58>)
 800120a:	4a15      	ldr	r2, [pc, #84]	; (8001260 <MX_USART2_UART_Init+0x5c>)
 800120c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800120e:	4b13      	ldr	r3, [pc, #76]	; (800125c <MX_USART2_UART_Init+0x58>)
 8001210:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001214:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001216:	4b11      	ldr	r3, [pc, #68]	; (800125c <MX_USART2_UART_Init+0x58>)
 8001218:	2200      	movs	r2, #0
 800121a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800121c:	4b0f      	ldr	r3, [pc, #60]	; (800125c <MX_USART2_UART_Init+0x58>)
 800121e:	2200      	movs	r2, #0
 8001220:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001222:	4b0e      	ldr	r3, [pc, #56]	; (800125c <MX_USART2_UART_Init+0x58>)
 8001224:	2200      	movs	r2, #0
 8001226:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001228:	4b0c      	ldr	r3, [pc, #48]	; (800125c <MX_USART2_UART_Init+0x58>)
 800122a:	220c      	movs	r2, #12
 800122c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800122e:	4b0b      	ldr	r3, [pc, #44]	; (800125c <MX_USART2_UART_Init+0x58>)
 8001230:	2200      	movs	r2, #0
 8001232:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001234:	4b09      	ldr	r3, [pc, #36]	; (800125c <MX_USART2_UART_Init+0x58>)
 8001236:	2200      	movs	r2, #0
 8001238:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800123a:	4b08      	ldr	r3, [pc, #32]	; (800125c <MX_USART2_UART_Init+0x58>)
 800123c:	2200      	movs	r2, #0
 800123e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001240:	4b06      	ldr	r3, [pc, #24]	; (800125c <MX_USART2_UART_Init+0x58>)
 8001242:	2200      	movs	r2, #0
 8001244:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001246:	4805      	ldr	r0, [pc, #20]	; (800125c <MX_USART2_UART_Init+0x58>)
 8001248:	f002 f81a 	bl	8003280 <HAL_UART_Init>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001252:	f7ff fa79 	bl	8000748 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001a4 	.word	0x200001a4
 8001260:	40004400 	.word	0x40004400

08001264 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	b09e      	sub	sp, #120	; 0x78
 8001268:	af00      	add	r7, sp, #0
 800126a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800126c:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800127c:	f107 0310 	add.w	r3, r7, #16
 8001280:	2254      	movs	r2, #84	; 0x54
 8001282:	2100      	movs	r1, #0
 8001284:	4618      	mov	r0, r3
 8001286:	f007 fc42 	bl	8008b0e <memset>
  if(uartHandle->Instance==USART2)
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	4a2c      	ldr	r2, [pc, #176]	; (8001340 <HAL_UART_MspInit+0xdc>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d150      	bne.n	8001336 <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001294:	2302      	movs	r3, #2
 8001296:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001298:	2300      	movs	r3, #0
 800129a:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800129c:	f107 0310 	add.w	r3, r7, #16
 80012a0:	4618      	mov	r0, r3
 80012a2:	f001 fa75 	bl	8002790 <HAL_RCCEx_PeriphCLKConfig>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80012ac:	f7ff fa4c 	bl	8000748 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80012b0:	4b24      	ldr	r3, [pc, #144]	; (8001344 <HAL_UART_MspInit+0xe0>)
 80012b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012b4:	4a23      	ldr	r2, [pc, #140]	; (8001344 <HAL_UART_MspInit+0xe0>)
 80012b6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80012ba:	6593      	str	r3, [r2, #88]	; 0x58
 80012bc:	4b21      	ldr	r3, [pc, #132]	; (8001344 <HAL_UART_MspInit+0xe0>)
 80012be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c8:	4b1e      	ldr	r3, [pc, #120]	; (8001344 <HAL_UART_MspInit+0xe0>)
 80012ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012cc:	4a1d      	ldr	r2, [pc, #116]	; (8001344 <HAL_UART_MspInit+0xe0>)
 80012ce:	f043 0301 	orr.w	r3, r3, #1
 80012d2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012d4:	4b1b      	ldr	r3, [pc, #108]	; (8001344 <HAL_UART_MspInit+0xe0>)
 80012d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d8:	f003 0301 	and.w	r3, r3, #1
 80012dc:	60bb      	str	r3, [r7, #8]
 80012de:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80012e0:	2304      	movs	r3, #4
 80012e2:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012e4:	2302      	movs	r3, #2
 80012e6:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e8:	2300      	movs	r3, #0
 80012ea:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ec:	2303      	movs	r3, #3
 80012ee:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012f0:	2307      	movs	r3, #7
 80012f2:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80012f4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80012f8:	4619      	mov	r1, r3
 80012fa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80012fe:	f000 f9e7 	bl	80016d0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 8001302:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001306:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001308:	2302      	movs	r3, #2
 800130a:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800130c:	2300      	movs	r3, #0
 800130e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001310:	2303      	movs	r3, #3
 8001312:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8001314:	2303      	movs	r3, #3
 8001316:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0364 	add.w	r3, r7, #100	; 0x64
 800131c:	4619      	mov	r1, r3
 800131e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001322:	f000 f9d5 	bl	80016d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001326:	2200      	movs	r2, #0
 8001328:	2105      	movs	r1, #5
 800132a:	2026      	movs	r0, #38	; 0x26
 800132c:	f000 f926 	bl	800157c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001330:	2026      	movs	r0, #38	; 0x26
 8001332:	f000 f93f 	bl	80015b4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001336:	bf00      	nop
 8001338:	3778      	adds	r7, #120	; 0x78
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	40004400 	.word	0x40004400
 8001344:	40021000 	.word	0x40021000

08001348 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001348:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001380 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 800134c:	f7ff feb6 	bl	80010bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <LoopForever+0x6>)
  ldr r1, =_edata
 8001352:	490d      	ldr	r1, [pc, #52]	; (8001388 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001354:	4a0d      	ldr	r2, [pc, #52]	; (800138c <LoopForever+0xe>)
  movs r3, #0
 8001356:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001358:	e002      	b.n	8001360 <LoopCopyDataInit>

0800135a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800135a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800135c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800135e:	3304      	adds	r3, #4

08001360 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001360:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001362:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001364:	d3f9      	bcc.n	800135a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001366:	4a0a      	ldr	r2, [pc, #40]	; (8001390 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001368:	4c0a      	ldr	r4, [pc, #40]	; (8001394 <LoopForever+0x16>)
  movs r3, #0
 800136a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800136c:	e001      	b.n	8001372 <LoopFillZerobss>

0800136e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800136e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001370:	3204      	adds	r2, #4

08001372 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001372:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001374:	d3fb      	bcc.n	800136e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001376:	f007 fb95 	bl	8008aa4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800137a:	f7ff f95f 	bl	800063c <main>

0800137e <LoopForever>:

LoopForever:
    b LoopForever
 800137e:	e7fe      	b.n	800137e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8001380:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001384:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001388:	200000c0 	.word	0x200000c0
  ldr r2, =_sidata
 800138c:	0800ab14 	.word	0x0800ab14
  ldr r2, =_sbss
 8001390:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 8001394:	20004bcc 	.word	0x20004bcc

08001398 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001398:	e7fe      	b.n	8001398 <ADC1_IRQHandler>

0800139a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800139a:	b580      	push	{r7, lr}
 800139c:	b082      	sub	sp, #8
 800139e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80013a0:	2300      	movs	r3, #0
 80013a2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013a4:	2003      	movs	r0, #3
 80013a6:	f000 f8de 	bl	8001566 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80013aa:	200f      	movs	r0, #15
 80013ac:	f7ff fd5a 	bl	8000e64 <HAL_InitTick>
 80013b0:	4603      	mov	r3, r0
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d002      	beq.n	80013bc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80013b6:	2301      	movs	r3, #1
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	e001      	b.n	80013c0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80013bc:	f7ff fd2a 	bl	8000e14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80013c0:	79fb      	ldrb	r3, [r7, #7]
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
	...

080013cc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013cc:	b480      	push	{r7}
 80013ce:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80013d0:	4b06      	ldr	r3, [pc, #24]	; (80013ec <HAL_IncTick+0x20>)
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	461a      	mov	r2, r3
 80013d6:	4b06      	ldr	r3, [pc, #24]	; (80013f0 <HAL_IncTick+0x24>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4413      	add	r3, r2
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <HAL_IncTick+0x24>)
 80013de:	6013      	str	r3, [r2, #0]
}
 80013e0:	bf00      	nop
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	20000054 	.word	0x20000054
 80013f0:	20000228 	.word	0x20000228

080013f4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  return uwTick;
 80013f8:	4b03      	ldr	r3, [pc, #12]	; (8001408 <HAL_GetTick+0x14>)
 80013fa:	681b      	ldr	r3, [r3, #0]
}
 80013fc:	4618      	mov	r0, r3
 80013fe:	46bd      	mov	sp, r7
 8001400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001404:	4770      	bx	lr
 8001406:	bf00      	nop
 8001408:	20000228 	.word	0x20000228

0800140c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800140c:	b480      	push	{r7}
 800140e:	b085      	sub	sp, #20
 8001410:	af00      	add	r7, sp, #0
 8001412:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001414:	687b      	ldr	r3, [r7, #4]
 8001416:	f003 0307 	and.w	r3, r3, #7
 800141a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800141c:	4b0c      	ldr	r3, [pc, #48]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 800141e:	68db      	ldr	r3, [r3, #12]
 8001420:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001422:	68ba      	ldr	r2, [r7, #8]
 8001424:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001428:	4013      	ands	r3, r2
 800142a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800142c:	68fb      	ldr	r3, [r7, #12]
 800142e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001430:	68bb      	ldr	r3, [r7, #8]
 8001432:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001434:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001438:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800143c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800143e:	4a04      	ldr	r2, [pc, #16]	; (8001450 <__NVIC_SetPriorityGrouping+0x44>)
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	60d3      	str	r3, [r2, #12]
}
 8001444:	bf00      	nop
 8001446:	3714      	adds	r7, #20
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000ed00 	.word	0xe000ed00

08001454 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001454:	b480      	push	{r7}
 8001456:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001458:	4b04      	ldr	r3, [pc, #16]	; (800146c <__NVIC_GetPriorityGrouping+0x18>)
 800145a:	68db      	ldr	r3, [r3, #12]
 800145c:	0a1b      	lsrs	r3, r3, #8
 800145e:	f003 0307 	and.w	r3, r3, #7
}
 8001462:	4618      	mov	r0, r3
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr
 800146c:	e000ed00 	.word	0xe000ed00

08001470 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001470:	b480      	push	{r7}
 8001472:	b083      	sub	sp, #12
 8001474:	af00      	add	r7, sp, #0
 8001476:	4603      	mov	r3, r0
 8001478:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800147a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800147e:	2b00      	cmp	r3, #0
 8001480:	db0b      	blt.n	800149a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001482:	79fb      	ldrb	r3, [r7, #7]
 8001484:	f003 021f 	and.w	r2, r3, #31
 8001488:	4907      	ldr	r1, [pc, #28]	; (80014a8 <__NVIC_EnableIRQ+0x38>)
 800148a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800148e:	095b      	lsrs	r3, r3, #5
 8001490:	2001      	movs	r0, #1
 8001492:	fa00 f202 	lsl.w	r2, r0, r2
 8001496:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800149a:	bf00      	nop
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000e100 	.word	0xe000e100

080014ac <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014ac:	b480      	push	{r7}
 80014ae:	b083      	sub	sp, #12
 80014b0:	af00      	add	r7, sp, #0
 80014b2:	4603      	mov	r3, r0
 80014b4:	6039      	str	r1, [r7, #0]
 80014b6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80014b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014bc:	2b00      	cmp	r3, #0
 80014be:	db0a      	blt.n	80014d6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	b2da      	uxtb	r2, r3
 80014c4:	490c      	ldr	r1, [pc, #48]	; (80014f8 <__NVIC_SetPriority+0x4c>)
 80014c6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80014ca:	0112      	lsls	r2, r2, #4
 80014cc:	b2d2      	uxtb	r2, r2
 80014ce:	440b      	add	r3, r1
 80014d0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80014d4:	e00a      	b.n	80014ec <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80014d6:	683b      	ldr	r3, [r7, #0]
 80014d8:	b2da      	uxtb	r2, r3
 80014da:	4908      	ldr	r1, [pc, #32]	; (80014fc <__NVIC_SetPriority+0x50>)
 80014dc:	79fb      	ldrb	r3, [r7, #7]
 80014de:	f003 030f 	and.w	r3, r3, #15
 80014e2:	3b04      	subs	r3, #4
 80014e4:	0112      	lsls	r2, r2, #4
 80014e6:	b2d2      	uxtb	r2, r2
 80014e8:	440b      	add	r3, r1
 80014ea:	761a      	strb	r2, [r3, #24]
}
 80014ec:	bf00      	nop
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	e000e100 	.word	0xe000e100
 80014fc:	e000ed00 	.word	0xe000ed00

08001500 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001500:	b480      	push	{r7}
 8001502:	b089      	sub	sp, #36	; 0x24
 8001504:	af00      	add	r7, sp, #0
 8001506:	60f8      	str	r0, [r7, #12]
 8001508:	60b9      	str	r1, [r7, #8]
 800150a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	f003 0307 	and.w	r3, r3, #7
 8001512:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001514:	69fb      	ldr	r3, [r7, #28]
 8001516:	f1c3 0307 	rsb	r3, r3, #7
 800151a:	2b04      	cmp	r3, #4
 800151c:	bf28      	it	cs
 800151e:	2304      	movcs	r3, #4
 8001520:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001522:	69fb      	ldr	r3, [r7, #28]
 8001524:	3304      	adds	r3, #4
 8001526:	2b06      	cmp	r3, #6
 8001528:	d902      	bls.n	8001530 <NVIC_EncodePriority+0x30>
 800152a:	69fb      	ldr	r3, [r7, #28]
 800152c:	3b03      	subs	r3, #3
 800152e:	e000      	b.n	8001532 <NVIC_EncodePriority+0x32>
 8001530:	2300      	movs	r3, #0
 8001532:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001534:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001538:	69bb      	ldr	r3, [r7, #24]
 800153a:	fa02 f303 	lsl.w	r3, r2, r3
 800153e:	43da      	mvns	r2, r3
 8001540:	68bb      	ldr	r3, [r7, #8]
 8001542:	401a      	ands	r2, r3
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001548:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800154c:	697b      	ldr	r3, [r7, #20]
 800154e:	fa01 f303 	lsl.w	r3, r1, r3
 8001552:	43d9      	mvns	r1, r3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001558:	4313      	orrs	r3, r2
         );
}
 800155a:	4618      	mov	r0, r3
 800155c:	3724      	adds	r7, #36	; 0x24
 800155e:	46bd      	mov	sp, r7
 8001560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001564:	4770      	bx	lr

08001566 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001566:	b580      	push	{r7, lr}
 8001568:	b082      	sub	sp, #8
 800156a:	af00      	add	r7, sp, #0
 800156c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800156e:	6878      	ldr	r0, [r7, #4]
 8001570:	f7ff ff4c 	bl	800140c <__NVIC_SetPriorityGrouping>
}
 8001574:	bf00      	nop
 8001576:	3708      	adds	r7, #8
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}

0800157c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b086      	sub	sp, #24
 8001580:	af00      	add	r7, sp, #0
 8001582:	4603      	mov	r3, r0
 8001584:	60b9      	str	r1, [r7, #8]
 8001586:	607a      	str	r2, [r7, #4]
 8001588:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800158a:	2300      	movs	r3, #0
 800158c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800158e:	f7ff ff61 	bl	8001454 <__NVIC_GetPriorityGrouping>
 8001592:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001594:	687a      	ldr	r2, [r7, #4]
 8001596:	68b9      	ldr	r1, [r7, #8]
 8001598:	6978      	ldr	r0, [r7, #20]
 800159a:	f7ff ffb1 	bl	8001500 <NVIC_EncodePriority>
 800159e:	4602      	mov	r2, r0
 80015a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80015a4:	4611      	mov	r1, r2
 80015a6:	4618      	mov	r0, r3
 80015a8:	f7ff ff80 	bl	80014ac <__NVIC_SetPriority>
}
 80015ac:	bf00      	nop
 80015ae:	3718      	adds	r7, #24
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	4603      	mov	r3, r0
 80015bc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80015be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015c2:	4618      	mov	r0, r3
 80015c4:	f7ff ff54 	bl	8001470 <__NVIC_EnableIRQ>
}
 80015c8:	bf00      	nop
 80015ca:	3708      	adds	r7, #8
 80015cc:	46bd      	mov	sp, r7
 80015ce:	bd80      	pop	{r7, pc}

080015d0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80015d8:	2300      	movs	r3, #0
 80015da:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80015e2:	b2db      	uxtb	r3, r3
 80015e4:	2b02      	cmp	r3, #2
 80015e6:	d008      	beq.n	80015fa <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	2204      	movs	r2, #4
 80015ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2200      	movs	r2, #0
 80015f2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e022      	b.n	8001640 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	681a      	ldr	r2, [r3, #0]
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	f022 020e 	bic.w	r2, r2, #14
 8001608:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	681a      	ldr	r2, [r3, #0]
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	f022 0201 	bic.w	r2, r2, #1
 8001618:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161e:	f003 021c 	and.w	r2, r3, #28
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001626:	2101      	movs	r1, #1
 8001628:	fa01 f202 	lsl.w	r2, r1, r2
 800162c:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2201      	movs	r2, #1
 8001632:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	2200      	movs	r2, #0
 800163a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 800163e:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8001640:	4618      	mov	r0, r3
 8001642:	3714      	adds	r7, #20
 8001644:	46bd      	mov	sp, r7
 8001646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800164a:	4770      	bx	lr

0800164c <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	b084      	sub	sp, #16
 8001650:	af00      	add	r7, sp, #0
 8001652:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001654:	2300      	movs	r3, #0
 8001656:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800165e:	b2db      	uxtb	r3, r3
 8001660:	2b02      	cmp	r3, #2
 8001662:	d005      	beq.n	8001670 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	2204      	movs	r2, #4
 8001668:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	73fb      	strb	r3, [r7, #15]
 800166e:	e029      	b.n	80016c4 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	681a      	ldr	r2, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f022 020e 	bic.w	r2, r2, #14
 800167e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001680:	687b      	ldr	r3, [r7, #4]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	681a      	ldr	r2, [r3, #0]
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f022 0201 	bic.w	r2, r2, #1
 800168e:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001694:	f003 021c 	and.w	r2, r3, #28
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800169c:	2101      	movs	r1, #1
 800169e:	fa01 f202 	lsl.w	r2, r1, r2
 80016a2:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	2201      	movs	r2, #1
 80016a8:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	2200      	movs	r2, #0
 80016b0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80016c0:	6878      	ldr	r0, [r7, #4]
 80016c2:	4798      	blx	r3
    }
  }
  return status;
 80016c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80016c6:	4618      	mov	r0, r3
 80016c8:	3710      	adds	r7, #16
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
	...

080016d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80016d0:	b480      	push	{r7}
 80016d2:	b087      	sub	sp, #28
 80016d4:	af00      	add	r7, sp, #0
 80016d6:	6078      	str	r0, [r7, #4]
 80016d8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80016da:	2300      	movs	r3, #0
 80016dc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80016de:	e148      	b.n	8001972 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2101      	movs	r1, #1
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	fa01 f303 	lsl.w	r3, r1, r3
 80016ec:	4013      	ands	r3, r2
 80016ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80016f0:	68fb      	ldr	r3, [r7, #12]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	f000 813a 	beq.w	800196c <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	685b      	ldr	r3, [r3, #4]
 80016fc:	f003 0303 	and.w	r3, r3, #3
 8001700:	2b01      	cmp	r3, #1
 8001702:	d005      	beq.n	8001710 <HAL_GPIO_Init+0x40>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	2b02      	cmp	r3, #2
 800170e:	d130      	bne.n	8001772 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	689b      	ldr	r3, [r3, #8]
 8001714:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	005b      	lsls	r3, r3, #1
 800171a:	2203      	movs	r2, #3
 800171c:	fa02 f303 	lsl.w	r3, r2, r3
 8001720:	43db      	mvns	r3, r3
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	4013      	ands	r3, r2
 8001726:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001728:	683b      	ldr	r3, [r7, #0]
 800172a:	68da      	ldr	r2, [r3, #12]
 800172c:	697b      	ldr	r3, [r7, #20]
 800172e:	005b      	lsls	r3, r3, #1
 8001730:	fa02 f303 	lsl.w	r3, r2, r3
 8001734:	693a      	ldr	r2, [r7, #16]
 8001736:	4313      	orrs	r3, r2
 8001738:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	685b      	ldr	r3, [r3, #4]
 8001744:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001746:	2201      	movs	r2, #1
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	fa02 f303 	lsl.w	r3, r2, r3
 800174e:	43db      	mvns	r3, r3
 8001750:	693a      	ldr	r2, [r7, #16]
 8001752:	4013      	ands	r3, r2
 8001754:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	685b      	ldr	r3, [r3, #4]
 800175a:	091b      	lsrs	r3, r3, #4
 800175c:	f003 0201 	and.w	r2, r3, #1
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	693a      	ldr	r2, [r7, #16]
 8001768:	4313      	orrs	r3, r2
 800176a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	693a      	ldr	r2, [r7, #16]
 8001770:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685b      	ldr	r3, [r3, #4]
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b03      	cmp	r3, #3
 800177c:	d017      	beq.n	80017ae <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	005b      	lsls	r3, r3, #1
 8001788:	2203      	movs	r2, #3
 800178a:	fa02 f303 	lsl.w	r3, r2, r3
 800178e:	43db      	mvns	r3, r3
 8001790:	693a      	ldr	r2, [r7, #16]
 8001792:	4013      	ands	r3, r2
 8001794:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	689a      	ldr	r2, [r3, #8]
 800179a:	697b      	ldr	r3, [r7, #20]
 800179c:	005b      	lsls	r3, r3, #1
 800179e:	fa02 f303 	lsl.w	r3, r2, r3
 80017a2:	693a      	ldr	r2, [r7, #16]
 80017a4:	4313      	orrs	r3, r2
 80017a6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	693a      	ldr	r2, [r7, #16]
 80017ac:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	685b      	ldr	r3, [r3, #4]
 80017b2:	f003 0303 	and.w	r3, r3, #3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d123      	bne.n	8001802 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	08da      	lsrs	r2, r3, #3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	3208      	adds	r2, #8
 80017c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80017c6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80017c8:	697b      	ldr	r3, [r7, #20]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	009b      	lsls	r3, r3, #2
 80017d0:	220f      	movs	r2, #15
 80017d2:	fa02 f303 	lsl.w	r3, r2, r3
 80017d6:	43db      	mvns	r3, r3
 80017d8:	693a      	ldr	r2, [r7, #16]
 80017da:	4013      	ands	r3, r2
 80017dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80017de:	683b      	ldr	r3, [r7, #0]
 80017e0:	691a      	ldr	r2, [r3, #16]
 80017e2:	697b      	ldr	r3, [r7, #20]
 80017e4:	f003 0307 	and.w	r3, r3, #7
 80017e8:	009b      	lsls	r3, r3, #2
 80017ea:	fa02 f303 	lsl.w	r3, r2, r3
 80017ee:	693a      	ldr	r2, [r7, #16]
 80017f0:	4313      	orrs	r3, r2
 80017f2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80017f4:	697b      	ldr	r3, [r7, #20]
 80017f6:	08da      	lsrs	r2, r3, #3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	3208      	adds	r2, #8
 80017fc:	6939      	ldr	r1, [r7, #16]
 80017fe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	005b      	lsls	r3, r3, #1
 800180c:	2203      	movs	r2, #3
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800181a:	683b      	ldr	r3, [r7, #0]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	f003 0203 	and.w	r2, r3, #3
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	005b      	lsls	r3, r3, #1
 8001826:	fa02 f303 	lsl.w	r3, r2, r3
 800182a:	693a      	ldr	r2, [r7, #16]
 800182c:	4313      	orrs	r3, r2
 800182e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	693a      	ldr	r2, [r7, #16]
 8001834:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001836:	683b      	ldr	r3, [r7, #0]
 8001838:	685b      	ldr	r3, [r3, #4]
 800183a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800183e:	2b00      	cmp	r3, #0
 8001840:	f000 8094 	beq.w	800196c <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001844:	4b52      	ldr	r3, [pc, #328]	; (8001990 <HAL_GPIO_Init+0x2c0>)
 8001846:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001848:	4a51      	ldr	r2, [pc, #324]	; (8001990 <HAL_GPIO_Init+0x2c0>)
 800184a:	f043 0301 	orr.w	r3, r3, #1
 800184e:	6613      	str	r3, [r2, #96]	; 0x60
 8001850:	4b4f      	ldr	r3, [pc, #316]	; (8001990 <HAL_GPIO_Init+0x2c0>)
 8001852:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001854:	f003 0301 	and.w	r3, r3, #1
 8001858:	60bb      	str	r3, [r7, #8]
 800185a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 800185c:	4a4d      	ldr	r2, [pc, #308]	; (8001994 <HAL_GPIO_Init+0x2c4>)
 800185e:	697b      	ldr	r3, [r7, #20]
 8001860:	089b      	lsrs	r3, r3, #2
 8001862:	3302      	adds	r3, #2
 8001864:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001868:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	f003 0303 	and.w	r3, r3, #3
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	220f      	movs	r2, #15
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4013      	ands	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001886:	d00d      	beq.n	80018a4 <HAL_GPIO_Init+0x1d4>
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	4a43      	ldr	r2, [pc, #268]	; (8001998 <HAL_GPIO_Init+0x2c8>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d007      	beq.n	80018a0 <HAL_GPIO_Init+0x1d0>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	4a42      	ldr	r2, [pc, #264]	; (800199c <HAL_GPIO_Init+0x2cc>)
 8001894:	4293      	cmp	r3, r2
 8001896:	d101      	bne.n	800189c <HAL_GPIO_Init+0x1cc>
 8001898:	2302      	movs	r3, #2
 800189a:	e004      	b.n	80018a6 <HAL_GPIO_Init+0x1d6>
 800189c:	2307      	movs	r3, #7
 800189e:	e002      	b.n	80018a6 <HAL_GPIO_Init+0x1d6>
 80018a0:	2301      	movs	r3, #1
 80018a2:	e000      	b.n	80018a6 <HAL_GPIO_Init+0x1d6>
 80018a4:	2300      	movs	r3, #0
 80018a6:	697a      	ldr	r2, [r7, #20]
 80018a8:	f002 0203 	and.w	r2, r2, #3
 80018ac:	0092      	lsls	r2, r2, #2
 80018ae:	4093      	lsls	r3, r2
 80018b0:	693a      	ldr	r2, [r7, #16]
 80018b2:	4313      	orrs	r3, r2
 80018b4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 80018b6:	4937      	ldr	r1, [pc, #220]	; (8001994 <HAL_GPIO_Init+0x2c4>)
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	089b      	lsrs	r3, r3, #2
 80018bc:	3302      	adds	r3, #2
 80018be:	693a      	ldr	r2, [r7, #16]
 80018c0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80018c4:	4b36      	ldr	r3, [pc, #216]	; (80019a0 <HAL_GPIO_Init+0x2d0>)
 80018c6:	689b      	ldr	r3, [r3, #8]
 80018c8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	43db      	mvns	r3, r3
 80018ce:	693a      	ldr	r2, [r7, #16]
 80018d0:	4013      	ands	r3, r2
 80018d2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	685b      	ldr	r3, [r3, #4]
 80018d8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d003      	beq.n	80018e8 <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 80018e0:	693a      	ldr	r2, [r7, #16]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	4313      	orrs	r3, r2
 80018e6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018e8:	4a2d      	ldr	r2, [pc, #180]	; (80019a0 <HAL_GPIO_Init+0x2d0>)
 80018ea:	693b      	ldr	r3, [r7, #16]
 80018ec:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_GPIO_Init+0x2d0>)
 80018f0:	68db      	ldr	r3, [r3, #12]
 80018f2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	43db      	mvns	r3, r3
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	4013      	ands	r3, r2
 80018fc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018fe:	683b      	ldr	r3, [r7, #0]
 8001900:	685b      	ldr	r3, [r3, #4]
 8001902:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001906:	2b00      	cmp	r3, #0
 8001908:	d003      	beq.n	8001912 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 800190a:	693a      	ldr	r2, [r7, #16]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	4313      	orrs	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001912:	4a23      	ldr	r2, [pc, #140]	; (80019a0 <HAL_GPIO_Init+0x2d0>)
 8001914:	693b      	ldr	r3, [r7, #16]
 8001916:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001918:	4b21      	ldr	r3, [pc, #132]	; (80019a0 <HAL_GPIO_Init+0x2d0>)
 800191a:	685b      	ldr	r3, [r3, #4]
 800191c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	43db      	mvns	r3, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4013      	ands	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001928:	683b      	ldr	r3, [r7, #0]
 800192a:	685b      	ldr	r3, [r3, #4]
 800192c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001930:	2b00      	cmp	r3, #0
 8001932:	d003      	beq.n	800193c <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	4313      	orrs	r3, r2
 800193a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800193c:	4a18      	ldr	r2, [pc, #96]	; (80019a0 <HAL_GPIO_Init+0x2d0>)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001942:	4b17      	ldr	r3, [pc, #92]	; (80019a0 <HAL_GPIO_Init+0x2d0>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001948:	68fb      	ldr	r3, [r7, #12]
 800194a:	43db      	mvns	r3, r3
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	4013      	ands	r3, r2
 8001950:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	685b      	ldr	r3, [r3, #4]
 8001956:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800195a:	2b00      	cmp	r3, #0
 800195c:	d003      	beq.n	8001966 <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 800195e:	693a      	ldr	r2, [r7, #16]
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001966:	4a0e      	ldr	r2, [pc, #56]	; (80019a0 <HAL_GPIO_Init+0x2d0>)
 8001968:	693b      	ldr	r3, [r7, #16]
 800196a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800196c:	697b      	ldr	r3, [r7, #20]
 800196e:	3301      	adds	r3, #1
 8001970:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681a      	ldr	r2, [r3, #0]
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	fa22 f303 	lsr.w	r3, r2, r3
 800197c:	2b00      	cmp	r3, #0
 800197e:	f47f aeaf 	bne.w	80016e0 <HAL_GPIO_Init+0x10>
  }
}
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	371c      	adds	r7, #28
 8001988:	46bd      	mov	sp, r7
 800198a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800198e:	4770      	bx	lr
 8001990:	40021000 	.word	0x40021000
 8001994:	40010000 	.word	0x40010000
 8001998:	48000400 	.word	0x48000400
 800199c:	48000800 	.word	0x48000800
 80019a0:	40010400 	.word	0x40010400

080019a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
 80019ac:	460b      	mov	r3, r1
 80019ae:	807b      	strh	r3, [r7, #2]
 80019b0:	4613      	mov	r3, r2
 80019b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80019b4:	787b      	ldrb	r3, [r7, #1]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d003      	beq.n	80019c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80019ba:	887a      	ldrh	r2, [r7, #2]
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80019c0:	e002      	b.n	80019c8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80019c2:	887a      	ldrh	r2, [r7, #2]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	629a      	str	r2, [r3, #40]	; 0x28
}
 80019c8:	bf00      	nop
 80019ca:	370c      	adds	r7, #12
 80019cc:	46bd      	mov	sp, r7
 80019ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d2:	4770      	bx	lr

080019d4 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80019d8:	4b05      	ldr	r3, [pc, #20]	; (80019f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a04      	ldr	r2, [pc, #16]	; (80019f0 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80019de:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80019e2:	6013      	str	r3, [r2, #0]
}
 80019e4:	bf00      	nop
 80019e6:	46bd      	mov	sp, r7
 80019e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ec:	4770      	bx	lr
 80019ee:	bf00      	nop
 80019f0:	40007000 	.word	0x40007000

080019f4 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80019f4:	b480      	push	{r7}
 80019f6:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80019f8:	4b04      	ldr	r3, [pc, #16]	; (8001a0c <HAL_PWREx_GetVoltageRange+0x18>)
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001a00:	4618      	mov	r0, r3
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40007000 	.word	0x40007000

08001a10 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001a10:	b480      	push	{r7}
 8001a12:	b085      	sub	sp, #20
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a1e:	d130      	bne.n	8001a82 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001a20:	4b23      	ldr	r3, [pc, #140]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a28:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a2c:	d038      	beq.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a2e:	4b20      	ldr	r3, [pc, #128]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a30:	681b      	ldr	r3, [r3, #0]
 8001a32:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a36:	4a1e      	ldr	r2, [pc, #120]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a38:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001a3c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8001a3e:	4b1d      	ldr	r3, [pc, #116]	; (8001ab4 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	2232      	movs	r2, #50	; 0x32
 8001a44:	fb02 f303 	mul.w	r3, r2, r3
 8001a48:	4a1b      	ldr	r2, [pc, #108]	; (8001ab8 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8001a4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a4e:	0c9b      	lsrs	r3, r3, #18
 8001a50:	3301      	adds	r3, #1
 8001a52:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a54:	e002      	b.n	8001a5c <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	3b01      	subs	r3, #1
 8001a5a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001a5c:	4b14      	ldr	r3, [pc, #80]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a5e:	695b      	ldr	r3, [r3, #20]
 8001a60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a68:	d102      	bne.n	8001a70 <HAL_PWREx_ControlVoltageScaling+0x60>
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d1f2      	bne.n	8001a56 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001a70:	4b0f      	ldr	r3, [pc, #60]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a72:	695b      	ldr	r3, [r3, #20]
 8001a74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a7c:	d110      	bne.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001a7e:	2303      	movs	r3, #3
 8001a80:	e00f      	b.n	8001aa2 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001a82:	4b0b      	ldr	r3, [pc, #44]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001a8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001a8e:	d007      	beq.n	8001aa0 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001a90:	4b07      	ldr	r3, [pc, #28]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001a98:	4a05      	ldr	r2, [pc, #20]	; (8001ab0 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001a9a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001a9e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001aa0:	2300      	movs	r3, #0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3714      	adds	r7, #20
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aac:	4770      	bx	lr
 8001aae:	bf00      	nop
 8001ab0:	40007000 	.word	0x40007000
 8001ab4:	2000004c 	.word	0x2000004c
 8001ab8:	431bde83 	.word	0x431bde83

08001abc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b088      	sub	sp, #32
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d102      	bne.n	8001ad0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001aca:	2301      	movs	r3, #1
 8001acc:	f000 bc02 	b.w	80022d4 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ad0:	4b96      	ldr	r3, [pc, #600]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001ad2:	689b      	ldr	r3, [r3, #8]
 8001ad4:	f003 030c 	and.w	r3, r3, #12
 8001ad8:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001ada:	4b94      	ldr	r3, [pc, #592]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001adc:	68db      	ldr	r3, [r3, #12]
 8001ade:	f003 0303 	and.w	r3, r3, #3
 8001ae2:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f003 0310 	and.w	r3, r3, #16
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	f000 80e4 	beq.w	8001cba <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001af2:	69bb      	ldr	r3, [r7, #24]
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d007      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4c>
 8001af8:	69bb      	ldr	r3, [r7, #24]
 8001afa:	2b0c      	cmp	r3, #12
 8001afc:	f040 808b 	bne.w	8001c16 <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001b00:	697b      	ldr	r3, [r7, #20]
 8001b02:	2b01      	cmp	r3, #1
 8001b04:	f040 8087 	bne.w	8001c16 <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001b08:	4b88      	ldr	r3, [pc, #544]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	f003 0302 	and.w	r3, r3, #2
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d005      	beq.n	8001b20 <HAL_RCC_OscConfig+0x64>
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	2b00      	cmp	r3, #0
 8001b1a:	d101      	bne.n	8001b20 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001b1c:	2301      	movs	r3, #1
 8001b1e:	e3d9      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	6a1a      	ldr	r2, [r3, #32]
 8001b24:	4b81      	ldr	r3, [pc, #516]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0308 	and.w	r3, r3, #8
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d004      	beq.n	8001b3a <HAL_RCC_OscConfig+0x7e>
 8001b30:	4b7e      	ldr	r3, [pc, #504]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b38:	e005      	b.n	8001b46 <HAL_RCC_OscConfig+0x8a>
 8001b3a:	4b7c      	ldr	r3, [pc, #496]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b3c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b40:	091b      	lsrs	r3, r3, #4
 8001b42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d223      	bcs.n	8001b92 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	6a1b      	ldr	r3, [r3, #32]
 8001b4e:	4618      	mov	r0, r3
 8001b50:	f000 fdbe 	bl	80026d0 <RCC_SetFlashLatencyFromMSIRange>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d001      	beq.n	8001b5e <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001b5a:	2301      	movs	r3, #1
 8001b5c:	e3ba      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b5e:	4b73      	ldr	r3, [pc, #460]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	4a72      	ldr	r2, [pc, #456]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b64:	f043 0308 	orr.w	r3, r3, #8
 8001b68:	6013      	str	r3, [r2, #0]
 8001b6a:	4b70      	ldr	r3, [pc, #448]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	6a1b      	ldr	r3, [r3, #32]
 8001b76:	496d      	ldr	r1, [pc, #436]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b78:	4313      	orrs	r3, r2
 8001b7a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001b7c:	4b6b      	ldr	r3, [pc, #428]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	69db      	ldr	r3, [r3, #28]
 8001b88:	021b      	lsls	r3, r3, #8
 8001b8a:	4968      	ldr	r1, [pc, #416]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	604b      	str	r3, [r1, #4]
 8001b90:	e025      	b.n	8001bde <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001b92:	4b66      	ldr	r3, [pc, #408]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	4a65      	ldr	r2, [pc, #404]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001b98:	f043 0308 	orr.w	r3, r3, #8
 8001b9c:	6013      	str	r3, [r2, #0]
 8001b9e:	4b63      	ldr	r3, [pc, #396]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6a1b      	ldr	r3, [r3, #32]
 8001baa:	4960      	ldr	r1, [pc, #384]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001bac:	4313      	orrs	r3, r2
 8001bae:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001bb0:	4b5e      	ldr	r3, [pc, #376]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001bb2:	685b      	ldr	r3, [r3, #4]
 8001bb4:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	69db      	ldr	r3, [r3, #28]
 8001bbc:	021b      	lsls	r3, r3, #8
 8001bbe:	495b      	ldr	r1, [pc, #364]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bc4:	69bb      	ldr	r3, [r7, #24]
 8001bc6:	2b00      	cmp	r3, #0
 8001bc8:	d109      	bne.n	8001bde <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001bca:	687b      	ldr	r3, [r7, #4]
 8001bcc:	6a1b      	ldr	r3, [r3, #32]
 8001bce:	4618      	mov	r0, r3
 8001bd0:	f000 fd7e 	bl	80026d0 <RCC_SetFlashLatencyFromMSIRange>
 8001bd4:	4603      	mov	r3, r0
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d001      	beq.n	8001bde <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e37a      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001bde:	f000 fc81 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8001be2:	4602      	mov	r2, r0
 8001be4:	4b51      	ldr	r3, [pc, #324]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	091b      	lsrs	r3, r3, #4
 8001bea:	f003 030f 	and.w	r3, r3, #15
 8001bee:	4950      	ldr	r1, [pc, #320]	; (8001d30 <HAL_RCC_OscConfig+0x274>)
 8001bf0:	5ccb      	ldrb	r3, [r1, r3]
 8001bf2:	f003 031f 	and.w	r3, r3, #31
 8001bf6:	fa22 f303 	lsr.w	r3, r2, r3
 8001bfa:	4a4e      	ldr	r2, [pc, #312]	; (8001d34 <HAL_RCC_OscConfig+0x278>)
 8001bfc:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001bfe:	4b4e      	ldr	r3, [pc, #312]	; (8001d38 <HAL_RCC_OscConfig+0x27c>)
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7ff f92e 	bl	8000e64 <HAL_InitTick>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001c0c:	7bfb      	ldrb	r3, [r7, #15]
 8001c0e:	2b00      	cmp	r3, #0
 8001c10:	d052      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8001c12:	7bfb      	ldrb	r3, [r7, #15]
 8001c14:	e35e      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	699b      	ldr	r3, [r3, #24]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d032      	beq.n	8001c84 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001c1e:	4b43      	ldr	r3, [pc, #268]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4a42      	ldr	r2, [pc, #264]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c24:	f043 0301 	orr.w	r3, r3, #1
 8001c28:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c2a:	f7ff fbe3 	bl	80013f4 <HAL_GetTick>
 8001c2e:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c30:	e008      	b.n	8001c44 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c32:	f7ff fbdf 	bl	80013f4 <HAL_GetTick>
 8001c36:	4602      	mov	r2, r0
 8001c38:	693b      	ldr	r3, [r7, #16]
 8001c3a:	1ad3      	subs	r3, r2, r3
 8001c3c:	2b02      	cmp	r3, #2
 8001c3e:	d901      	bls.n	8001c44 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8001c40:	2303      	movs	r3, #3
 8001c42:	e347      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001c44:	4b39      	ldr	r3, [pc, #228]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0302 	and.w	r3, r3, #2
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d0f0      	beq.n	8001c32 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001c50:	4b36      	ldr	r3, [pc, #216]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4a35      	ldr	r2, [pc, #212]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c56:	f043 0308 	orr.w	r3, r3, #8
 8001c5a:	6013      	str	r3, [r2, #0]
 8001c5c:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c64:	687b      	ldr	r3, [r7, #4]
 8001c66:	6a1b      	ldr	r3, [r3, #32]
 8001c68:	4930      	ldr	r1, [pc, #192]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c6a:	4313      	orrs	r3, r2
 8001c6c:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001c6e:	4b2f      	ldr	r3, [pc, #188]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	021b      	lsls	r3, r3, #8
 8001c7c:	492b      	ldr	r1, [pc, #172]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	604b      	str	r3, [r1, #4]
 8001c82:	e01a      	b.n	8001cba <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001c84:	4b29      	ldr	r3, [pc, #164]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4a28      	ldr	r2, [pc, #160]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001c8a:	f023 0301 	bic.w	r3, r3, #1
 8001c8e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001c90:	f7ff fbb0 	bl	80013f4 <HAL_GetTick>
 8001c94:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001c96:	e008      	b.n	8001caa <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001c98:	f7ff fbac 	bl	80013f4 <HAL_GetTick>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	693b      	ldr	r3, [r7, #16]
 8001ca0:	1ad3      	subs	r3, r2, r3
 8001ca2:	2b02      	cmp	r3, #2
 8001ca4:	d901      	bls.n	8001caa <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 8001ca6:	2303      	movs	r3, #3
 8001ca8:	e314      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001caa:	4b20      	ldr	r3, [pc, #128]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f003 0302 	and.w	r3, r3, #2
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d1f0      	bne.n	8001c98 <HAL_RCC_OscConfig+0x1dc>
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001cb8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f003 0301 	and.w	r3, r3, #1
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d073      	beq.n	8001dae <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d005      	beq.n	8001cd8 <HAL_RCC_OscConfig+0x21c>
 8001ccc:	69bb      	ldr	r3, [r7, #24]
 8001cce:	2b0c      	cmp	r3, #12
 8001cd0:	d10e      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001cd2:	697b      	ldr	r3, [r7, #20]
 8001cd4:	2b03      	cmp	r3, #3
 8001cd6:	d10b      	bne.n	8001cf0 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001cd8:	4b14      	ldr	r3, [pc, #80]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d063      	beq.n	8001dac <HAL_RCC_OscConfig+0x2f0>
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	d15f      	bne.n	8001dac <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8001cec:	2301      	movs	r3, #1
 8001cee:	e2f1      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001cf8:	d106      	bne.n	8001d08 <HAL_RCC_OscConfig+0x24c>
 8001cfa:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	4a0b      	ldr	r2, [pc, #44]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001d00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d04:	6013      	str	r3, [r2, #0]
 8001d06:	e025      	b.n	8001d54 <HAL_RCC_OscConfig+0x298>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	685b      	ldr	r3, [r3, #4]
 8001d0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d10:	d114      	bne.n	8001d3c <HAL_RCC_OscConfig+0x280>
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a05      	ldr	r2, [pc, #20]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001d18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d1c:	6013      	str	r3, [r2, #0]
 8001d1e:	4b03      	ldr	r3, [pc, #12]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	4a02      	ldr	r2, [pc, #8]	; (8001d2c <HAL_RCC_OscConfig+0x270>)
 8001d24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d28:	6013      	str	r3, [r2, #0]
 8001d2a:	e013      	b.n	8001d54 <HAL_RCC_OscConfig+0x298>
 8001d2c:	40021000 	.word	0x40021000
 8001d30:	0800a908 	.word	0x0800a908
 8001d34:	2000004c 	.word	0x2000004c
 8001d38:	20000050 	.word	0x20000050
 8001d3c:	4ba0      	ldr	r3, [pc, #640]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a9f      	ldr	r2, [pc, #636]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001d46:	6013      	str	r3, [r2, #0]
 8001d48:	4b9d      	ldr	r3, [pc, #628]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4a9c      	ldr	r2, [pc, #624]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d013      	beq.n	8001d84 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d5c:	f7ff fb4a 	bl	80013f4 <HAL_GetTick>
 8001d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d62:	e008      	b.n	8001d76 <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d64:	f7ff fb46 	bl	80013f4 <HAL_GetTick>
 8001d68:	4602      	mov	r2, r0
 8001d6a:	693b      	ldr	r3, [r7, #16]
 8001d6c:	1ad3      	subs	r3, r2, r3
 8001d6e:	2b64      	cmp	r3, #100	; 0x64
 8001d70:	d901      	bls.n	8001d76 <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001d72:	2303      	movs	r3, #3
 8001d74:	e2ae      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001d76:	4b92      	ldr	r3, [pc, #584]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d0f0      	beq.n	8001d64 <HAL_RCC_OscConfig+0x2a8>
 8001d82:	e014      	b.n	8001dae <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d84:	f7ff fb36 	bl	80013f4 <HAL_GetTick>
 8001d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d8a:	e008      	b.n	8001d9e <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001d8c:	f7ff fb32 	bl	80013f4 <HAL_GetTick>
 8001d90:	4602      	mov	r2, r0
 8001d92:	693b      	ldr	r3, [r7, #16]
 8001d94:	1ad3      	subs	r3, r2, r3
 8001d96:	2b64      	cmp	r3, #100	; 0x64
 8001d98:	d901      	bls.n	8001d9e <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8001d9a:	2303      	movs	r3, #3
 8001d9c:	e29a      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001d9e:	4b88      	ldr	r3, [pc, #544]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d1f0      	bne.n	8001d8c <HAL_RCC_OscConfig+0x2d0>
 8001daa:	e000      	b.n	8001dae <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f003 0302 	and.w	r3, r3, #2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d060      	beq.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001dba:	69bb      	ldr	r3, [r7, #24]
 8001dbc:	2b04      	cmp	r3, #4
 8001dbe:	d005      	beq.n	8001dcc <HAL_RCC_OscConfig+0x310>
 8001dc0:	69bb      	ldr	r3, [r7, #24]
 8001dc2:	2b0c      	cmp	r3, #12
 8001dc4:	d119      	bne.n	8001dfa <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001dc6:	697b      	ldr	r3, [r7, #20]
 8001dc8:	2b02      	cmp	r3, #2
 8001dca:	d116      	bne.n	8001dfa <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001dcc:	4b7c      	ldr	r3, [pc, #496]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d005      	beq.n	8001de4 <HAL_RCC_OscConfig+0x328>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d101      	bne.n	8001de4 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e277      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001de4:	4b76      	ldr	r3, [pc, #472]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	691b      	ldr	r3, [r3, #16]
 8001df0:	061b      	lsls	r3, r3, #24
 8001df2:	4973      	ldr	r1, [pc, #460]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001df4:	4313      	orrs	r3, r2
 8001df6:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001df8:	e040      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d023      	beq.n	8001e4a <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e02:	4b6f      	ldr	r3, [pc, #444]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	4a6e      	ldr	r2, [pc, #440]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e08:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e0c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e0e:	f7ff faf1 	bl	80013f4 <HAL_GetTick>
 8001e12:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e14:	e008      	b.n	8001e28 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e16:	f7ff faed 	bl	80013f4 <HAL_GetTick>
 8001e1a:	4602      	mov	r2, r0
 8001e1c:	693b      	ldr	r3, [r7, #16]
 8001e1e:	1ad3      	subs	r3, r2, r3
 8001e20:	2b02      	cmp	r3, #2
 8001e22:	d901      	bls.n	8001e28 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e255      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001e28:	4b65      	ldr	r3, [pc, #404]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d0f0      	beq.n	8001e16 <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e34:	4b62      	ldr	r3, [pc, #392]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	691b      	ldr	r3, [r3, #16]
 8001e40:	061b      	lsls	r3, r3, #24
 8001e42:	495f      	ldr	r1, [pc, #380]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e44:	4313      	orrs	r3, r2
 8001e46:	604b      	str	r3, [r1, #4]
 8001e48:	e018      	b.n	8001e7c <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001e4a:	4b5d      	ldr	r3, [pc, #372]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4a5c      	ldr	r2, [pc, #368]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e50:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001e54:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e56:	f7ff facd 	bl	80013f4 <HAL_GetTick>
 8001e5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e5c:	e008      	b.n	8001e70 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001e5e:	f7ff fac9 	bl	80013f4 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	693b      	ldr	r3, [r7, #16]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	2b02      	cmp	r3, #2
 8001e6a:	d901      	bls.n	8001e70 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001e6c:	2303      	movs	r3, #3
 8001e6e:	e231      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001e70:	4b53      	ldr	r3, [pc, #332]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d1f0      	bne.n	8001e5e <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f003 0308 	and.w	r3, r3, #8
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d03c      	beq.n	8001f02 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	695b      	ldr	r3, [r3, #20]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d01c      	beq.n	8001eca <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001e90:	4b4b      	ldr	r3, [pc, #300]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e92:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001e96:	4a4a      	ldr	r2, [pc, #296]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001e98:	f043 0301 	orr.w	r3, r3, #1
 8001e9c:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ea0:	f7ff faa8 	bl	80013f4 <HAL_GetTick>
 8001ea4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001ea6:	e008      	b.n	8001eba <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ea8:	f7ff faa4 	bl	80013f4 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	2b02      	cmp	r3, #2
 8001eb4:	d901      	bls.n	8001eba <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8001eb6:	2303      	movs	r3, #3
 8001eb8:	e20c      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001eba:	4b41      	ldr	r3, [pc, #260]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001ebc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ec0:	f003 0302 	and.w	r3, r3, #2
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d0ef      	beq.n	8001ea8 <HAL_RCC_OscConfig+0x3ec>
 8001ec8:	e01b      	b.n	8001f02 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001eca:	4b3d      	ldr	r3, [pc, #244]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001ecc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001ed0:	4a3b      	ldr	r2, [pc, #236]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001ed2:	f023 0301 	bic.w	r3, r3, #1
 8001ed6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001eda:	f7ff fa8b 	bl	80013f4 <HAL_GetTick>
 8001ede:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ee0:	e008      	b.n	8001ef4 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001ee2:	f7ff fa87 	bl	80013f4 <HAL_GetTick>
 8001ee6:	4602      	mov	r2, r0
 8001ee8:	693b      	ldr	r3, [r7, #16]
 8001eea:	1ad3      	subs	r3, r2, r3
 8001eec:	2b02      	cmp	r3, #2
 8001eee:	d901      	bls.n	8001ef4 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8001ef0:	2303      	movs	r3, #3
 8001ef2:	e1ef      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001ef4:	4b32      	ldr	r3, [pc, #200]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001ef6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001efa:	f003 0302 	and.w	r3, r3, #2
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d1ef      	bne.n	8001ee2 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0304 	and.w	r3, r3, #4
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f000 80a6 	beq.w	800205c <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f10:	2300      	movs	r3, #0
 8001f12:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001f14:	4b2a      	ldr	r3, [pc, #168]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d10d      	bne.n	8001f3c <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f20:	4b27      	ldr	r3, [pc, #156]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f22:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f24:	4a26      	ldr	r2, [pc, #152]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f2a:	6593      	str	r3, [r2, #88]	; 0x58
 8001f2c:	4b24      	ldr	r3, [pc, #144]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f30:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f34:	60bb      	str	r3, [r7, #8]
 8001f36:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f38:	2301      	movs	r3, #1
 8001f3a:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f3c:	4b21      	ldr	r3, [pc, #132]	; (8001fc4 <HAL_RCC_OscConfig+0x508>)
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d118      	bne.n	8001f7a <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f48:	4b1e      	ldr	r3, [pc, #120]	; (8001fc4 <HAL_RCC_OscConfig+0x508>)
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	4a1d      	ldr	r2, [pc, #116]	; (8001fc4 <HAL_RCC_OscConfig+0x508>)
 8001f4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f52:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001f54:	f7ff fa4e 	bl	80013f4 <HAL_GetTick>
 8001f58:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f5a:	e008      	b.n	8001f6e <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f5c:	f7ff fa4a 	bl	80013f4 <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	693b      	ldr	r3, [r7, #16]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	2b02      	cmp	r3, #2
 8001f68:	d901      	bls.n	8001f6e <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e1b2      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001f6e:	4b15      	ldr	r3, [pc, #84]	; (8001fc4 <HAL_RCC_OscConfig+0x508>)
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f76:	2b00      	cmp	r3, #0
 8001f78:	d0f0      	beq.n	8001f5c <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	689b      	ldr	r3, [r3, #8]
 8001f7e:	2b01      	cmp	r3, #1
 8001f80:	d108      	bne.n	8001f94 <HAL_RCC_OscConfig+0x4d8>
 8001f82:	4b0f      	ldr	r3, [pc, #60]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f88:	4a0d      	ldr	r2, [pc, #52]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f8a:	f043 0301 	orr.w	r3, r3, #1
 8001f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001f92:	e029      	b.n	8001fe8 <HAL_RCC_OscConfig+0x52c>
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	689b      	ldr	r3, [r3, #8]
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d115      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x50c>
 8001f9c:	4b08      	ldr	r3, [pc, #32]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001f9e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fa2:	4a07      	ldr	r2, [pc, #28]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001fa4:	f043 0304 	orr.w	r3, r3, #4
 8001fa8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fac:	4b04      	ldr	r3, [pc, #16]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001fae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fb2:	4a03      	ldr	r2, [pc, #12]	; (8001fc0 <HAL_RCC_OscConfig+0x504>)
 8001fb4:	f043 0301 	orr.w	r3, r3, #1
 8001fb8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fbc:	e014      	b.n	8001fe8 <HAL_RCC_OscConfig+0x52c>
 8001fbe:	bf00      	nop
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	40007000 	.word	0x40007000
 8001fc8:	4b9a      	ldr	r3, [pc, #616]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8001fca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fce:	4a99      	ldr	r2, [pc, #612]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8001fd0:	f023 0301 	bic.w	r3, r3, #1
 8001fd4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001fd8:	4b96      	ldr	r3, [pc, #600]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8001fda:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fde:	4a95      	ldr	r2, [pc, #596]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8001fe0:	f023 0304 	bic.w	r3, r3, #4
 8001fe4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	689b      	ldr	r3, [r3, #8]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d016      	beq.n	800201e <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001ff0:	f7ff fa00 	bl	80013f4 <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001ff6:	e00a      	b.n	800200e <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001ff8:	f7ff f9fc 	bl	80013f4 <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	f241 3288 	movw	r2, #5000	; 0x1388
 8002006:	4293      	cmp	r3, r2
 8002008:	d901      	bls.n	800200e <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800200a:	2303      	movs	r3, #3
 800200c:	e162      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800200e:	4b89      	ldr	r3, [pc, #548]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002014:	f003 0302 	and.w	r3, r3, #2
 8002018:	2b00      	cmp	r3, #0
 800201a:	d0ed      	beq.n	8001ff8 <HAL_RCC_OscConfig+0x53c>
 800201c:	e015      	b.n	800204a <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800201e:	f7ff f9e9 	bl	80013f4 <HAL_GetTick>
 8002022:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002024:	e00a      	b.n	800203c <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002026:	f7ff f9e5 	bl	80013f4 <HAL_GetTick>
 800202a:	4602      	mov	r2, r0
 800202c:	693b      	ldr	r3, [r7, #16]
 800202e:	1ad3      	subs	r3, r2, r3
 8002030:	f241 3288 	movw	r2, #5000	; 0x1388
 8002034:	4293      	cmp	r3, r2
 8002036:	d901      	bls.n	800203c <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002038:	2303      	movs	r3, #3
 800203a:	e14b      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800203c:	4b7d      	ldr	r3, [pc, #500]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 800203e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002042:	f003 0302 	and.w	r3, r3, #2
 8002046:	2b00      	cmp	r3, #0
 8002048:	d1ed      	bne.n	8002026 <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800204a:	7ffb      	ldrb	r3, [r7, #31]
 800204c:	2b01      	cmp	r3, #1
 800204e:	d105      	bne.n	800205c <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002050:	4b78      	ldr	r3, [pc, #480]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002052:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002054:	4a77      	ldr	r2, [pc, #476]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002056:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800205a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0320 	and.w	r3, r3, #32
 8002064:	2b00      	cmp	r3, #0
 8002066:	d03c      	beq.n	80020e2 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206c:	2b00      	cmp	r3, #0
 800206e:	d01c      	beq.n	80020aa <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002070:	4b70      	ldr	r3, [pc, #448]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002072:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002076:	4a6f      	ldr	r2, [pc, #444]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002078:	f043 0301 	orr.w	r3, r3, #1
 800207c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002080:	f7ff f9b8 	bl	80013f4 <HAL_GetTick>
 8002084:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002086:	e008      	b.n	800209a <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002088:	f7ff f9b4 	bl	80013f4 <HAL_GetTick>
 800208c:	4602      	mov	r2, r0
 800208e:	693b      	ldr	r3, [r7, #16]
 8002090:	1ad3      	subs	r3, r2, r3
 8002092:	2b02      	cmp	r3, #2
 8002094:	d901      	bls.n	800209a <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 8002096:	2303      	movs	r3, #3
 8002098:	e11c      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800209a:	4b66      	ldr	r3, [pc, #408]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 800209c:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020a0:	f003 0302 	and.w	r3, r3, #2
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d0ef      	beq.n	8002088 <HAL_RCC_OscConfig+0x5cc>
 80020a8:	e01b      	b.n	80020e2 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80020aa:	4b62      	ldr	r3, [pc, #392]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80020ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020b0:	4a60      	ldr	r2, [pc, #384]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80020b2:	f023 0301 	bic.w	r3, r3, #1
 80020b6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ba:	f7ff f99b 	bl	80013f4 <HAL_GetTick>
 80020be:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020c0:	e008      	b.n	80020d4 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80020c2:	f7ff f997 	bl	80013f4 <HAL_GetTick>
 80020c6:	4602      	mov	r2, r0
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	1ad3      	subs	r3, r2, r3
 80020cc:	2b02      	cmp	r3, #2
 80020ce:	d901      	bls.n	80020d4 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80020d0:	2303      	movs	r3, #3
 80020d2:	e0ff      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80020d4:	4b57      	ldr	r3, [pc, #348]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80020d6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80020da:	f003 0302 	and.w	r3, r3, #2
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d1ef      	bne.n	80020c2 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 80f3 	beq.w	80022d2 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f0:	2b02      	cmp	r3, #2
 80020f2:	f040 80c9 	bne.w	8002288 <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80020f6:	4b4f      	ldr	r3, [pc, #316]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80020f8:	68db      	ldr	r3, [r3, #12]
 80020fa:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80020fc:	697b      	ldr	r3, [r7, #20]
 80020fe:	f003 0203 	and.w	r2, r3, #3
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002106:	429a      	cmp	r2, r3
 8002108:	d12c      	bne.n	8002164 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800210a:	697b      	ldr	r3, [r7, #20]
 800210c:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002114:	3b01      	subs	r3, #1
 8002116:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002118:	429a      	cmp	r2, r3
 800211a:	d123      	bne.n	8002164 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800211c:	697b      	ldr	r3, [r7, #20]
 800211e:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002126:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002128:	429a      	cmp	r2, r3
 800212a:	d11b      	bne.n	8002164 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800212c:	697b      	ldr	r3, [r7, #20]
 800212e:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002136:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002138:	429a      	cmp	r2, r3
 800213a:	d113      	bne.n	8002164 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 800213c:	697b      	ldr	r3, [r7, #20]
 800213e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002146:	085b      	lsrs	r3, r3, #1
 8002148:	3b01      	subs	r3, #1
 800214a:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 800214c:	429a      	cmp	r2, r3
 800214e:	d109      	bne.n	8002164 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	085b      	lsrs	r3, r3, #1
 800215c:	3b01      	subs	r3, #1
 800215e:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002160:	429a      	cmp	r2, r3
 8002162:	d06b      	beq.n	800223c <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002164:	69bb      	ldr	r3, [r7, #24]
 8002166:	2b0c      	cmp	r3, #12
 8002168:	d062      	beq.n	8002230 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800216a:	4b32      	ldr	r3, [pc, #200]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d001      	beq.n	800217a <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	e0ac      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800217a:	4b2e      	ldr	r3, [pc, #184]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a2d      	ldr	r2, [pc, #180]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002180:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002184:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002186:	f7ff f935 	bl	80013f4 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800218e:	f7ff f931 	bl	80013f4 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e099      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80021a0:	4b24      	ldr	r3, [pc, #144]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d1f0      	bne.n	800218e <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80021ac:	4b21      	ldr	r3, [pc, #132]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021ae:	68da      	ldr	r2, [r3, #12]
 80021b0:	4b21      	ldr	r3, [pc, #132]	; (8002238 <HAL_RCC_OscConfig+0x77c>)
 80021b2:	4013      	ands	r3, r2
 80021b4:	687a      	ldr	r2, [r7, #4]
 80021b6:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80021b8:	687a      	ldr	r2, [r7, #4]
 80021ba:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80021bc:	3a01      	subs	r2, #1
 80021be:	0112      	lsls	r2, r2, #4
 80021c0:	4311      	orrs	r1, r2
 80021c2:	687a      	ldr	r2, [r7, #4]
 80021c4:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80021c6:	0212      	lsls	r2, r2, #8
 80021c8:	4311      	orrs	r1, r2
 80021ca:	687a      	ldr	r2, [r7, #4]
 80021cc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80021ce:	0852      	lsrs	r2, r2, #1
 80021d0:	3a01      	subs	r2, #1
 80021d2:	0552      	lsls	r2, r2, #21
 80021d4:	4311      	orrs	r1, r2
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80021da:	0852      	lsrs	r2, r2, #1
 80021dc:	3a01      	subs	r2, #1
 80021de:	0652      	lsls	r2, r2, #25
 80021e0:	4311      	orrs	r1, r2
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80021e6:	06d2      	lsls	r2, r2, #27
 80021e8:	430a      	orrs	r2, r1
 80021ea:	4912      	ldr	r1, [pc, #72]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80021f0:	4b10      	ldr	r3, [pc, #64]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	4a0f      	ldr	r2, [pc, #60]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021f6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80021fa:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80021fc:	4b0d      	ldr	r3, [pc, #52]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 80021fe:	68db      	ldr	r3, [r3, #12]
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002202:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002206:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002208:	f7ff f8f4 	bl	80013f4 <HAL_GetTick>
 800220c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800220e:	e008      	b.n	8002222 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002210:	f7ff f8f0 	bl	80013f4 <HAL_GetTick>
 8002214:	4602      	mov	r2, r0
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	1ad3      	subs	r3, r2, r3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d901      	bls.n	8002222 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 800221e:	2303      	movs	r3, #3
 8002220:	e058      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_RCC_OscConfig+0x778>)
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800222a:	2b00      	cmp	r3, #0
 800222c:	d0f0      	beq.n	8002210 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800222e:	e050      	b.n	80022d2 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002230:	2301      	movs	r3, #1
 8002232:	e04f      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
 8002234:	40021000 	.word	0x40021000
 8002238:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800223c:	4b27      	ldr	r3, [pc, #156]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002244:	2b00      	cmp	r3, #0
 8002246:	d144      	bne.n	80022d2 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002248:	4b24      	ldr	r3, [pc, #144]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4a23      	ldr	r2, [pc, #140]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 800224e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002252:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002254:	4b21      	ldr	r3, [pc, #132]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 8002256:	68db      	ldr	r3, [r3, #12]
 8002258:	4a20      	ldr	r2, [pc, #128]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 800225a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800225e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002260:	f7ff f8c8 	bl	80013f4 <HAL_GetTick>
 8002264:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002266:	e008      	b.n	800227a <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002268:	f7ff f8c4 	bl	80013f4 <HAL_GetTick>
 800226c:	4602      	mov	r2, r0
 800226e:	693b      	ldr	r3, [r7, #16]
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d901      	bls.n	800227a <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 8002276:	2303      	movs	r3, #3
 8002278:	e02c      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800227a:	4b18      	ldr	r3, [pc, #96]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d0f0      	beq.n	8002268 <HAL_RCC_OscConfig+0x7ac>
 8002286:	e024      	b.n	80022d2 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002288:	69bb      	ldr	r3, [r7, #24]
 800228a:	2b0c      	cmp	r3, #12
 800228c:	d01f      	beq.n	80022ce <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4a12      	ldr	r2, [pc, #72]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 8002294:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002298:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229a:	f7ff f8ab 	bl	80013f4 <HAL_GetTick>
 800229e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022a0:	e008      	b.n	80022b4 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022a2:	f7ff f8a7 	bl	80013f4 <HAL_GetTick>
 80022a6:	4602      	mov	r2, r0
 80022a8:	693b      	ldr	r3, [r7, #16]
 80022aa:	1ad3      	subs	r3, r2, r3
 80022ac:	2b02      	cmp	r3, #2
 80022ae:	d901      	bls.n	80022b4 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 80022b0:	2303      	movs	r3, #3
 80022b2:	e00f      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022bc:	2b00      	cmp	r3, #0
 80022be:	d1f0      	bne.n	80022a2 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 80022c2:	68da      	ldr	r2, [r3, #12]
 80022c4:	4905      	ldr	r1, [pc, #20]	; (80022dc <HAL_RCC_OscConfig+0x820>)
 80022c6:	4b06      	ldr	r3, [pc, #24]	; (80022e0 <HAL_RCC_OscConfig+0x824>)
 80022c8:	4013      	ands	r3, r2
 80022ca:	60cb      	str	r3, [r1, #12]
 80022cc:	e001      	b.n	80022d2 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	e000      	b.n	80022d4 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	4618      	mov	r0, r3
 80022d6:	3720      	adds	r7, #32
 80022d8:	46bd      	mov	sp, r7
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	40021000 	.word	0x40021000
 80022e0:	feeefffc 	.word	0xfeeefffc

080022e4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	b084      	sub	sp, #16
 80022e8:	af00      	add	r7, sp, #0
 80022ea:	6078      	str	r0, [r7, #4]
 80022ec:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d101      	bne.n	80022f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022f4:	2301      	movs	r3, #1
 80022f6:	e0e7      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80022f8:	4b75      	ldr	r3, [pc, #468]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f003 0307 	and.w	r3, r3, #7
 8002300:	683a      	ldr	r2, [r7, #0]
 8002302:	429a      	cmp	r2, r3
 8002304:	d910      	bls.n	8002328 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002306:	4b72      	ldr	r3, [pc, #456]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f023 0207 	bic.w	r2, r3, #7
 800230e:	4970      	ldr	r1, [pc, #448]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002310:	683b      	ldr	r3, [r7, #0]
 8002312:	4313      	orrs	r3, r2
 8002314:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002316:	4b6e      	ldr	r3, [pc, #440]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0307 	and.w	r3, r3, #7
 800231e:	683a      	ldr	r2, [r7, #0]
 8002320:	429a      	cmp	r2, r3
 8002322:	d001      	beq.n	8002328 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e0cf      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0302 	and.w	r3, r3, #2
 8002330:	2b00      	cmp	r3, #0
 8002332:	d010      	beq.n	8002356 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	689a      	ldr	r2, [r3, #8]
 8002338:	4b66      	ldr	r3, [pc, #408]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800233a:	689b      	ldr	r3, [r3, #8]
 800233c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002340:	429a      	cmp	r2, r3
 8002342:	d908      	bls.n	8002356 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002344:	4b63      	ldr	r3, [pc, #396]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4960      	ldr	r1, [pc, #384]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0301 	and.w	r3, r3, #1
 800235e:	2b00      	cmp	r3, #0
 8002360:	d04c      	beq.n	80023fc <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	2b03      	cmp	r3, #3
 8002368:	d107      	bne.n	800237a <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800236a:	4b5a      	ldr	r3, [pc, #360]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002372:	2b00      	cmp	r3, #0
 8002374:	d121      	bne.n	80023ba <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002376:	2301      	movs	r3, #1
 8002378:	e0a6      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	685b      	ldr	r3, [r3, #4]
 800237e:	2b02      	cmp	r3, #2
 8002380:	d107      	bne.n	8002392 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002382:	4b54      	ldr	r3, [pc, #336]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800238a:	2b00      	cmp	r3, #0
 800238c:	d115      	bne.n	80023ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e09a      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	685b      	ldr	r3, [r3, #4]
 8002396:	2b00      	cmp	r3, #0
 8002398:	d107      	bne.n	80023aa <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800239a:	4b4e      	ldr	r3, [pc, #312]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f003 0302 	and.w	r3, r3, #2
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d109      	bne.n	80023ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023a6:	2301      	movs	r3, #1
 80023a8:	e08e      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023aa:	4b4a      	ldr	r3, [pc, #296]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d101      	bne.n	80023ba <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 80023b6:	2301      	movs	r3, #1
 80023b8:	e086      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023ba:	4b46      	ldr	r3, [pc, #280]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80023bc:	689b      	ldr	r3, [r3, #8]
 80023be:	f023 0203 	bic.w	r2, r3, #3
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	685b      	ldr	r3, [r3, #4]
 80023c6:	4943      	ldr	r1, [pc, #268]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80023c8:	4313      	orrs	r3, r2
 80023ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023cc:	f7ff f812 	bl	80013f4 <HAL_GetTick>
 80023d0:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023d2:	e00a      	b.n	80023ea <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d4:	f7ff f80e 	bl	80013f4 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	f241 3288 	movw	r2, #5000	; 0x1388
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d901      	bls.n	80023ea <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 80023e6:	2303      	movs	r3, #3
 80023e8:	e06e      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ea:	4b3a      	ldr	r3, [pc, #232]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80023ec:	689b      	ldr	r3, [r3, #8]
 80023ee:	f003 020c 	and.w	r2, r3, #12
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	685b      	ldr	r3, [r3, #4]
 80023f6:	009b      	lsls	r3, r3, #2
 80023f8:	429a      	cmp	r2, r3
 80023fa:	d1eb      	bne.n	80023d4 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f003 0302 	and.w	r3, r3, #2
 8002404:	2b00      	cmp	r3, #0
 8002406:	d010      	beq.n	800242a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	4b31      	ldr	r3, [pc, #196]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002414:	429a      	cmp	r2, r3
 8002416:	d208      	bcs.n	800242a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002418:	4b2e      	ldr	r3, [pc, #184]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 800241a:	689b      	ldr	r3, [r3, #8]
 800241c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	492b      	ldr	r1, [pc, #172]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002426:	4313      	orrs	r3, r2
 8002428:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800242a:	4b29      	ldr	r3, [pc, #164]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f003 0307 	and.w	r3, r3, #7
 8002432:	683a      	ldr	r2, [r7, #0]
 8002434:	429a      	cmp	r2, r3
 8002436:	d210      	bcs.n	800245a <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002438:	4b25      	ldr	r3, [pc, #148]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f023 0207 	bic.w	r2, r3, #7
 8002440:	4923      	ldr	r1, [pc, #140]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 8002442:	683b      	ldr	r3, [r7, #0]
 8002444:	4313      	orrs	r3, r2
 8002446:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002448:	4b21      	ldr	r3, [pc, #132]	; (80024d0 <HAL_RCC_ClockConfig+0x1ec>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 0307 	and.w	r3, r3, #7
 8002450:	683a      	ldr	r2, [r7, #0]
 8002452:	429a      	cmp	r2, r3
 8002454:	d001      	beq.n	800245a <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002456:	2301      	movs	r3, #1
 8002458:	e036      	b.n	80024c8 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0304 	and.w	r3, r3, #4
 8002462:	2b00      	cmp	r3, #0
 8002464:	d008      	beq.n	8002478 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002466:	4b1b      	ldr	r3, [pc, #108]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002468:	689b      	ldr	r3, [r3, #8]
 800246a:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	4918      	ldr	r1, [pc, #96]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002474:	4313      	orrs	r3, r2
 8002476:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f003 0308 	and.w	r3, r3, #8
 8002480:	2b00      	cmp	r3, #0
 8002482:	d009      	beq.n	8002498 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002484:	4b13      	ldr	r3, [pc, #76]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	691b      	ldr	r3, [r3, #16]
 8002490:	00db      	lsls	r3, r3, #3
 8002492:	4910      	ldr	r1, [pc, #64]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 8002494:	4313      	orrs	r3, r2
 8002496:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002498:	f000 f824 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 800249c:	4602      	mov	r2, r0
 800249e:	4b0d      	ldr	r3, [pc, #52]	; (80024d4 <HAL_RCC_ClockConfig+0x1f0>)
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	091b      	lsrs	r3, r3, #4
 80024a4:	f003 030f 	and.w	r3, r3, #15
 80024a8:	490b      	ldr	r1, [pc, #44]	; (80024d8 <HAL_RCC_ClockConfig+0x1f4>)
 80024aa:	5ccb      	ldrb	r3, [r1, r3]
 80024ac:	f003 031f 	and.w	r3, r3, #31
 80024b0:	fa22 f303 	lsr.w	r3, r2, r3
 80024b4:	4a09      	ldr	r2, [pc, #36]	; (80024dc <HAL_RCC_ClockConfig+0x1f8>)
 80024b6:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80024b8:	4b09      	ldr	r3, [pc, #36]	; (80024e0 <HAL_RCC_ClockConfig+0x1fc>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe fcd1 	bl	8000e64 <HAL_InitTick>
 80024c2:	4603      	mov	r3, r0
 80024c4:	72fb      	strb	r3, [r7, #11]

  return status;
 80024c6:	7afb      	ldrb	r3, [r7, #11]
}
 80024c8:	4618      	mov	r0, r3
 80024ca:	3710      	adds	r7, #16
 80024cc:	46bd      	mov	sp, r7
 80024ce:	bd80      	pop	{r7, pc}
 80024d0:	40022000 	.word	0x40022000
 80024d4:	40021000 	.word	0x40021000
 80024d8:	0800a908 	.word	0x0800a908
 80024dc:	2000004c 	.word	0x2000004c
 80024e0:	20000050 	.word	0x20000050

080024e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b089      	sub	sp, #36	; 0x24
 80024e8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 80024ea:	2300      	movs	r3, #0
 80024ec:	61fb      	str	r3, [r7, #28]
 80024ee:	2300      	movs	r3, #0
 80024f0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024f2:	4b3e      	ldr	r3, [pc, #248]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	f003 030c 	and.w	r3, r3, #12
 80024fa:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024fc:	4b3b      	ldr	r3, [pc, #236]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	f003 0303 	and.w	r3, r3, #3
 8002504:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002506:	693b      	ldr	r3, [r7, #16]
 8002508:	2b00      	cmp	r3, #0
 800250a:	d005      	beq.n	8002518 <HAL_RCC_GetSysClockFreq+0x34>
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	2b0c      	cmp	r3, #12
 8002510:	d121      	bne.n	8002556 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	2b01      	cmp	r3, #1
 8002516:	d11e      	bne.n	8002556 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002518:	4b34      	ldr	r3, [pc, #208]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f003 0308 	and.w	r3, r3, #8
 8002520:	2b00      	cmp	r3, #0
 8002522:	d107      	bne.n	8002534 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002524:	4b31      	ldr	r3, [pc, #196]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002526:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	f003 030f 	and.w	r3, r3, #15
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e005      	b.n	8002540 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002534:	4b2d      	ldr	r3, [pc, #180]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	091b      	lsrs	r3, r3, #4
 800253a:	f003 030f 	and.w	r3, r3, #15
 800253e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002540:	4a2b      	ldr	r2, [pc, #172]	; (80025f0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002548:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800254a:	693b      	ldr	r3, [r7, #16]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d10d      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002550:	69fb      	ldr	r3, [r7, #28]
 8002552:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002554:	e00a      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	2b04      	cmp	r3, #4
 800255a:	d102      	bne.n	8002562 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800255c:	4b25      	ldr	r3, [pc, #148]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800255e:	61bb      	str	r3, [r7, #24]
 8002560:	e004      	b.n	800256c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002562:	693b      	ldr	r3, [r7, #16]
 8002564:	2b08      	cmp	r3, #8
 8002566:	d101      	bne.n	800256c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x114>)
 800256a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 800256c:	693b      	ldr	r3, [r7, #16]
 800256e:	2b0c      	cmp	r3, #12
 8002570:	d134      	bne.n	80025dc <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002572:	4b1e      	ldr	r3, [pc, #120]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 8002574:	68db      	ldr	r3, [r3, #12]
 8002576:	f003 0303 	and.w	r3, r3, #3
 800257a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800257c:	68bb      	ldr	r3, [r7, #8]
 800257e:	2b02      	cmp	r3, #2
 8002580:	d003      	beq.n	800258a <HAL_RCC_GetSysClockFreq+0xa6>
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	2b03      	cmp	r3, #3
 8002586:	d003      	beq.n	8002590 <HAL_RCC_GetSysClockFreq+0xac>
 8002588:	e005      	b.n	8002596 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 800258a:	4b1a      	ldr	r3, [pc, #104]	; (80025f4 <HAL_RCC_GetSysClockFreq+0x110>)
 800258c:	617b      	str	r3, [r7, #20]
      break;
 800258e:	e005      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002590:	4b19      	ldr	r3, [pc, #100]	; (80025f8 <HAL_RCC_GetSysClockFreq+0x114>)
 8002592:	617b      	str	r3, [r7, #20]
      break;
 8002594:	e002      	b.n	800259c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002596:	69fb      	ldr	r3, [r7, #28]
 8002598:	617b      	str	r3, [r7, #20]
      break;
 800259a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800259c:	4b13      	ldr	r3, [pc, #76]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 800259e:	68db      	ldr	r3, [r3, #12]
 80025a0:	091b      	lsrs	r3, r3, #4
 80025a2:	f003 0307 	and.w	r3, r3, #7
 80025a6:	3301      	adds	r3, #1
 80025a8:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80025aa:	4b10      	ldr	r3, [pc, #64]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 80025ac:	68db      	ldr	r3, [r3, #12]
 80025ae:	0a1b      	lsrs	r3, r3, #8
 80025b0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80025b4:	697a      	ldr	r2, [r7, #20]
 80025b6:	fb03 f202 	mul.w	r2, r3, r2
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80025c0:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80025c2:	4b0a      	ldr	r3, [pc, #40]	; (80025ec <HAL_RCC_GetSysClockFreq+0x108>)
 80025c4:	68db      	ldr	r3, [r3, #12]
 80025c6:	0e5b      	lsrs	r3, r3, #25
 80025c8:	f003 0303 	and.w	r3, r3, #3
 80025cc:	3301      	adds	r3, #1
 80025ce:	005b      	lsls	r3, r3, #1
 80025d0:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80025d2:	697a      	ldr	r2, [r7, #20]
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80025da:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80025dc:	69bb      	ldr	r3, [r7, #24]
}
 80025de:	4618      	mov	r0, r3
 80025e0:	3724      	adds	r7, #36	; 0x24
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	0800a920 	.word	0x0800a920
 80025f4:	00f42400 	.word	0x00f42400
 80025f8:	007a1200 	.word	0x007a1200

080025fc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002600:	4b03      	ldr	r3, [pc, #12]	; (8002610 <HAL_RCC_GetHCLKFreq+0x14>)
 8002602:	681b      	ldr	r3, [r3, #0]
}
 8002604:	4618      	mov	r0, r3
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	2000004c 	.word	0x2000004c

08002614 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002614:	b580      	push	{r7, lr}
 8002616:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002618:	f7ff fff0 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 800261c:	4602      	mov	r2, r0
 800261e:	4b06      	ldr	r3, [pc, #24]	; (8002638 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002620:	689b      	ldr	r3, [r3, #8]
 8002622:	0a1b      	lsrs	r3, r3, #8
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	4904      	ldr	r1, [pc, #16]	; (800263c <HAL_RCC_GetPCLK1Freq+0x28>)
 800262a:	5ccb      	ldrb	r3, [r1, r3]
 800262c:	f003 031f 	and.w	r3, r3, #31
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	0800a918 	.word	0x0800a918

08002640 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002644:	f7ff ffda 	bl	80025fc <HAL_RCC_GetHCLKFreq>
 8002648:	4602      	mov	r2, r0
 800264a:	4b06      	ldr	r3, [pc, #24]	; (8002664 <HAL_RCC_GetPCLK2Freq+0x24>)
 800264c:	689b      	ldr	r3, [r3, #8]
 800264e:	0adb      	lsrs	r3, r3, #11
 8002650:	f003 0307 	and.w	r3, r3, #7
 8002654:	4904      	ldr	r1, [pc, #16]	; (8002668 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002656:	5ccb      	ldrb	r3, [r1, r3]
 8002658:	f003 031f 	and.w	r3, r3, #31
 800265c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002660:	4618      	mov	r0, r3
 8002662:	bd80      	pop	{r7, pc}
 8002664:	40021000 	.word	0x40021000
 8002668:	0800a918 	.word	0x0800a918

0800266c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800266c:	b480      	push	{r7}
 800266e:	b083      	sub	sp, #12
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
 8002674:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	220f      	movs	r2, #15
 800267a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 800267c:	4b12      	ldr	r3, [pc, #72]	; (80026c8 <HAL_RCC_GetClockConfig+0x5c>)
 800267e:	689b      	ldr	r3, [r3, #8]
 8002680:	f003 0203 	and.w	r2, r3, #3
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8002688:	4b0f      	ldr	r3, [pc, #60]	; (80026c8 <HAL_RCC_GetClockConfig+0x5c>)
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8002694:	4b0c      	ldr	r3, [pc, #48]	; (80026c8 <HAL_RCC_GetClockConfig+0x5c>)
 8002696:	689b      	ldr	r3, [r3, #8]
 8002698:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80026a0:	4b09      	ldr	r3, [pc, #36]	; (80026c8 <HAL_RCC_GetClockConfig+0x5c>)
 80026a2:	689b      	ldr	r3, [r3, #8]
 80026a4:	08db      	lsrs	r3, r3, #3
 80026a6:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80026ae:	4b07      	ldr	r3, [pc, #28]	; (80026cc <HAL_RCC_GetClockConfig+0x60>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f003 0207 	and.w	r2, r3, #7
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	601a      	str	r2, [r3, #0]
}
 80026ba:	bf00      	nop
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr
 80026c6:	bf00      	nop
 80026c8:	40021000 	.word	0x40021000
 80026cc:	40022000 	.word	0x40022000

080026d0 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b086      	sub	sp, #24
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80026d8:	2300      	movs	r3, #0
 80026da:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80026dc:	4b2a      	ldr	r3, [pc, #168]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026de:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80026e8:	f7ff f984 	bl	80019f4 <HAL_PWREx_GetVoltageRange>
 80026ec:	6178      	str	r0, [r7, #20]
 80026ee:	e014      	b.n	800271a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80026f0:	4b25      	ldr	r3, [pc, #148]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80026f4:	4a24      	ldr	r2, [pc, #144]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80026fa:	6593      	str	r3, [r2, #88]	; 0x58
 80026fc:	4b22      	ldr	r3, [pc, #136]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80026fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002704:	60fb      	str	r3, [r7, #12]
 8002706:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002708:	f7ff f974 	bl	80019f4 <HAL_PWREx_GetVoltageRange>
 800270c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800270e:	4b1e      	ldr	r3, [pc, #120]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002710:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002712:	4a1d      	ldr	r2, [pc, #116]	; (8002788 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002714:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002718:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800271a:	697b      	ldr	r3, [r7, #20]
 800271c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002720:	d10b      	bne.n	800273a <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	2b80      	cmp	r3, #128	; 0x80
 8002726:	d919      	bls.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	2ba0      	cmp	r3, #160	; 0xa0
 800272c:	d902      	bls.n	8002734 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800272e:	2302      	movs	r3, #2
 8002730:	613b      	str	r3, [r7, #16]
 8002732:	e013      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002734:	2301      	movs	r3, #1
 8002736:	613b      	str	r3, [r7, #16]
 8002738:	e010      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2b80      	cmp	r3, #128	; 0x80
 800273e:	d902      	bls.n	8002746 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002740:	2303      	movs	r3, #3
 8002742:	613b      	str	r3, [r7, #16]
 8002744:	e00a      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	2b80      	cmp	r3, #128	; 0x80
 800274a:	d102      	bne.n	8002752 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800274c:	2302      	movs	r3, #2
 800274e:	613b      	str	r3, [r7, #16]
 8002750:	e004      	b.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	2b70      	cmp	r3, #112	; 0x70
 8002756:	d101      	bne.n	800275c <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002758:	2301      	movs	r3, #1
 800275a:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 800275c:	4b0b      	ldr	r3, [pc, #44]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f023 0207 	bic.w	r2, r3, #7
 8002764:	4909      	ldr	r1, [pc, #36]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	4313      	orrs	r3, r2
 800276a:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800276c:	4b07      	ldr	r3, [pc, #28]	; (800278c <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	693a      	ldr	r2, [r7, #16]
 8002776:	429a      	cmp	r2, r3
 8002778:	d001      	beq.n	800277e <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800277a:	2301      	movs	r3, #1
 800277c:	e000      	b.n	8002780 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3718      	adds	r7, #24
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}
 8002788:	40021000 	.word	0x40021000
 800278c:	40022000 	.word	0x40022000

08002790 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8002798:	2300      	movs	r3, #0
 800279a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800279c:	2300      	movs	r3, #0
 800279e:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d031      	beq.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80027b0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027b4:	d01a      	beq.n	80027ec <HAL_RCCEx_PeriphCLKConfig+0x5c>
 80027b6:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80027ba:	d814      	bhi.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80027bc:	2b00      	cmp	r3, #0
 80027be:	d009      	beq.n	80027d4 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80027c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80027c4:	d10f      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 80027c6:	4b5d      	ldr	r3, [pc, #372]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027c8:	68db      	ldr	r3, [r3, #12]
 80027ca:	4a5c      	ldr	r2, [pc, #368]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027d0:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027d2:	e00c      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	3304      	adds	r3, #4
 80027d8:	2100      	movs	r1, #0
 80027da:	4618      	mov	r0, r3
 80027dc:	f000 f9de 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 80027e0:	4603      	mov	r3, r0
 80027e2:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	74fb      	strb	r3, [r7, #19]
      break;
 80027ea:	e000      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 80027ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80027ee:	7cfb      	ldrb	r3, [r7, #19]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d10b      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80027f4:	4b51      	ldr	r3, [pc, #324]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80027f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027fa:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002802:	494e      	ldr	r1, [pc, #312]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002804:	4313      	orrs	r3, r2
 8002806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800280a:	e001      	b.n	8002810 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800280c:	7cfb      	ldrb	r3, [r7, #19]
 800280e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002818:	2b00      	cmp	r3, #0
 800281a:	f000 809e 	beq.w	800295a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 800281e:	2300      	movs	r3, #0
 8002820:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002822:	4b46      	ldr	r3, [pc, #280]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002824:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002826:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800282a:	2b00      	cmp	r3, #0
 800282c:	d101      	bne.n	8002832 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 800282e:	2301      	movs	r3, #1
 8002830:	e000      	b.n	8002834 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8002832:	2300      	movs	r3, #0
 8002834:	2b00      	cmp	r3, #0
 8002836:	d00d      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002838:	4b40      	ldr	r3, [pc, #256]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800283a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800283c:	4a3f      	ldr	r2, [pc, #252]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800283e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002842:	6593      	str	r3, [r2, #88]	; 0x58
 8002844:	4b3d      	ldr	r3, [pc, #244]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002848:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800284c:	60bb      	str	r3, [r7, #8]
 800284e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002850:	2301      	movs	r3, #1
 8002852:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002854:	4b3a      	ldr	r3, [pc, #232]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	4a39      	ldr	r2, [pc, #228]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800285a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800285e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002860:	f7fe fdc8 	bl	80013f4 <HAL_GetTick>
 8002864:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002866:	e009      	b.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002868:	f7fe fdc4 	bl	80013f4 <HAL_GetTick>
 800286c:	4602      	mov	r2, r0
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	1ad3      	subs	r3, r2, r3
 8002872:	2b02      	cmp	r3, #2
 8002874:	d902      	bls.n	800287c <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8002876:	2303      	movs	r3, #3
 8002878:	74fb      	strb	r3, [r7, #19]
        break;
 800287a:	e005      	b.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800287c:	4b30      	ldr	r3, [pc, #192]	; (8002940 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0ef      	beq.n	8002868 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8002888:	7cfb      	ldrb	r3, [r7, #19]
 800288a:	2b00      	cmp	r3, #0
 800288c:	d15a      	bne.n	8002944 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800288e:	4b2b      	ldr	r3, [pc, #172]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8002890:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002894:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002898:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	2b00      	cmp	r3, #0
 800289e:	d01e      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x14e>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80028a4:	697a      	ldr	r2, [r7, #20]
 80028a6:	429a      	cmp	r2, r3
 80028a8:	d019      	beq.n	80028de <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80028aa:	4b24      	ldr	r3, [pc, #144]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ac:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80028b4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80028b6:	4b21      	ldr	r3, [pc, #132]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028bc:	4a1f      	ldr	r2, [pc, #124]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028be:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80028c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80028c6:	4b1d      	ldr	r3, [pc, #116]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80028cc:	4a1b      	ldr	r2, [pc, #108]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028ce:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80028d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80028d6:	4a19      	ldr	r2, [pc, #100]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80028de:	697b      	ldr	r3, [r7, #20]
 80028e0:	f003 0301 	and.w	r3, r3, #1
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d016      	beq.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028e8:	f7fe fd84 	bl	80013f4 <HAL_GetTick>
 80028ec:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028ee:	e00b      	b.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028f0:	f7fe fd80 	bl	80013f4 <HAL_GetTick>
 80028f4:	4602      	mov	r2, r0
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	1ad3      	subs	r3, r2, r3
 80028fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80028fe:	4293      	cmp	r3, r2
 8002900:	d902      	bls.n	8002908 <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8002902:	2303      	movs	r3, #3
 8002904:	74fb      	strb	r3, [r7, #19]
            break;
 8002906:	e006      	b.n	8002916 <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002908:	4b0c      	ldr	r3, [pc, #48]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800290a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0ec      	beq.n	80028f0 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8002916:	7cfb      	ldrb	r3, [r7, #19]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d10b      	bne.n	8002934 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800291c:	4b07      	ldr	r3, [pc, #28]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800291e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002922:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800292a:	4904      	ldr	r1, [pc, #16]	; (800293c <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 800292c:	4313      	orrs	r3, r2
 800292e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8002932:	e009      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002934:	7cfb      	ldrb	r3, [r7, #19]
 8002936:	74bb      	strb	r3, [r7, #18]
 8002938:	e006      	b.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 800293a:	bf00      	nop
 800293c:	40021000 	.word	0x40021000
 8002940:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002944:	7cfb      	ldrb	r3, [r7, #19]
 8002946:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002948:	7c7b      	ldrb	r3, [r7, #17]
 800294a:	2b01      	cmp	r3, #1
 800294c:	d105      	bne.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800294e:	4b8a      	ldr	r3, [pc, #552]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002950:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002952:	4a89      	ldr	r2, [pc, #548]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002954:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002958:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00a      	beq.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002966:	4b84      	ldr	r3, [pc, #528]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002968:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800296c:	f023 0203 	bic.w	r2, r3, #3
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	6a1b      	ldr	r3, [r3, #32]
 8002974:	4980      	ldr	r1, [pc, #512]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002976:	4313      	orrs	r3, r2
 8002978:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f003 0302 	and.w	r3, r3, #2
 8002984:	2b00      	cmp	r3, #0
 8002986:	d00a      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002988:	4b7b      	ldr	r3, [pc, #492]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800298a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800298e:	f023 020c 	bic.w	r2, r3, #12
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002996:	4978      	ldr	r1, [pc, #480]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002998:	4313      	orrs	r3, r2
 800299a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f003 0320 	and.w	r3, r3, #32
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d00a      	beq.n	80029c0 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80029aa:	4b73      	ldr	r3, [pc, #460]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029b0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80029b8:	496f      	ldr	r1, [pc, #444]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ba:	4313      	orrs	r3, r2
 80029bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	681b      	ldr	r3, [r3, #0]
 80029c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d00a      	beq.n	80029e2 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80029cc:	4b6a      	ldr	r3, [pc, #424]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029ce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029d2:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80029da:	4967      	ldr	r1, [pc, #412]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029dc:	4313      	orrs	r3, r2
 80029de:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00a      	beq.n	8002a04 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80029ee:	4b62      	ldr	r3, [pc, #392]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80029f4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029fc:	495e      	ldr	r1, [pc, #376]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80029fe:	4313      	orrs	r3, r2
 8002a00:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d00a      	beq.n	8002a26 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002a10:	4b59      	ldr	r3, [pc, #356]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a16:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a1e:	4956      	ldr	r1, [pc, #344]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a20:	4313      	orrs	r3, r2
 8002a22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d00a      	beq.n	8002a48 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002a32:	4b51      	ldr	r3, [pc, #324]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a34:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a38:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a40:	494d      	ldr	r1, [pc, #308]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a42:	4313      	orrs	r3, r2
 8002a44:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d028      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a54:	4b48      	ldr	r3, [pc, #288]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002a5a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	4945      	ldr	r1, [pc, #276]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a64:	4313      	orrs	r3, r2
 8002a66:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002a72:	d106      	bne.n	8002a82 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002a74:	4b40      	ldr	r3, [pc, #256]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	4a3f      	ldr	r2, [pc, #252]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002a7a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002a7e:	60d3      	str	r3, [r2, #12]
 8002a80:	e011      	b.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002a8a:	d10c      	bne.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3304      	adds	r3, #4
 8002a90:	2101      	movs	r1, #1
 8002a92:	4618      	mov	r0, r3
 8002a94:	f000 f882 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002a98:	4603      	mov	r3, r0
 8002a9a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002a9c:	7cfb      	ldrb	r3, [r7, #19]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d001      	beq.n	8002aa6 <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002aa2:	7cfb      	ldrb	r3, [r7, #19]
 8002aa4:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d028      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002ab2:	4b31      	ldr	r3, [pc, #196]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ab4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ab8:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac0:	492d      	ldr	r1, [pc, #180]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ac2:	4313      	orrs	r3, r2
 8002ac4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002acc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002ad0:	d106      	bne.n	8002ae0 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002ad2:	4b29      	ldr	r3, [pc, #164]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ad4:	68db      	ldr	r3, [r3, #12]
 8002ad6:	4a28      	ldr	r2, [pc, #160]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002ad8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002adc:	60d3      	str	r3, [r2, #12]
 8002ade:	e011      	b.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ae4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002ae8:	d10c      	bne.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	3304      	adds	r3, #4
 8002aee:	2101      	movs	r1, #1
 8002af0:	4618      	mov	r0, r3
 8002af2:	f000 f853 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002af6:	4603      	mov	r3, r0
 8002af8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002afa:	7cfb      	ldrb	r3, [r7, #19]
 8002afc:	2b00      	cmp	r3, #0
 8002afe:	d001      	beq.n	8002b04 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 8002b00:	7cfb      	ldrb	r3, [r7, #19]
 8002b02:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d01c      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002b10:	4b19      	ldr	r3, [pc, #100]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b12:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b16:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b1e:	4916      	ldr	r1, [pc, #88]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b20:	4313      	orrs	r3, r2
 8002b22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002b2a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002b2e:	d10c      	bne.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	3304      	adds	r3, #4
 8002b34:	2102      	movs	r1, #2
 8002b36:	4618      	mov	r0, r3
 8002b38:	f000 f830 	bl	8002b9c <RCCEx_PLLSAI1_Config>
 8002b3c:	4603      	mov	r3, r0
 8002b3e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002b40:	7cfb      	ldrb	r3, [r7, #19]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d001      	beq.n	8002b4a <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 8002b46:	7cfb      	ldrb	r3, [r7, #19]
 8002b48:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d00a      	beq.n	8002b6c <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002b56:	4b08      	ldr	r3, [pc, #32]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b58:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b5c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b64:	4904      	ldr	r1, [pc, #16]	; (8002b78 <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002b66:	4313      	orrs	r3, r2
 8002b68:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002b6c:	7cbb      	ldrb	r3, [r7, #18]
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3718      	adds	r7, #24
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
 8002b76:	bf00      	nop
 8002b78:	40021000 	.word	0x40021000

08002b7c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8002b80:	4b05      	ldr	r3, [pc, #20]	; (8002b98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a04      	ldr	r2, [pc, #16]	; (8002b98 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 8002b86:	f043 0304 	orr.w	r3, r3, #4
 8002b8a:	6013      	str	r3, [r2, #0]
}
 8002b8c:	bf00      	nop
 8002b8e:	46bd      	mov	sp, r7
 8002b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b94:	4770      	bx	lr
 8002b96:	bf00      	nop
 8002b98:	40021000 	.word	0x40021000

08002b9c <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
 8002ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002baa:	4b74      	ldr	r3, [pc, #464]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bac:	68db      	ldr	r3, [r3, #12]
 8002bae:	f003 0303 	and.w	r3, r3, #3
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d018      	beq.n	8002be8 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8002bb6:	4b71      	ldr	r3, [pc, #452]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f003 0203 	and.w	r2, r3, #3
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d10d      	bne.n	8002be2 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d009      	beq.n	8002be2 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002bce:	4b6b      	ldr	r3, [pc, #428]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002bd0:	68db      	ldr	r3, [r3, #12]
 8002bd2:	091b      	lsrs	r3, r3, #4
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	1c5a      	adds	r2, r3, #1
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	685b      	ldr	r3, [r3, #4]
       ||
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d047      	beq.n	8002c72 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002be2:	2301      	movs	r3, #1
 8002be4:	73fb      	strb	r3, [r7, #15]
 8002be6:	e044      	b.n	8002c72 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	2b03      	cmp	r3, #3
 8002bee:	d018      	beq.n	8002c22 <RCCEx_PLLSAI1_Config+0x86>
 8002bf0:	2b03      	cmp	r3, #3
 8002bf2:	d825      	bhi.n	8002c40 <RCCEx_PLLSAI1_Config+0xa4>
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d002      	beq.n	8002bfe <RCCEx_PLLSAI1_Config+0x62>
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d009      	beq.n	8002c10 <RCCEx_PLLSAI1_Config+0x74>
 8002bfc:	e020      	b.n	8002c40 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002bfe:	4b5f      	ldr	r3, [pc, #380]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0302 	and.w	r3, r3, #2
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d11d      	bne.n	8002c46 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c0e:	e01a      	b.n	8002c46 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002c10:	4b5a      	ldr	r3, [pc, #360]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d116      	bne.n	8002c4a <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8002c1c:	2301      	movs	r3, #1
 8002c1e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c20:	e013      	b.n	8002c4a <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002c22:	4b56      	ldr	r3, [pc, #344]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d10f      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002c2e:	4b53      	ldr	r3, [pc, #332]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d109      	bne.n	8002c4e <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002c3e:	e006      	b.n	8002c4e <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	e004      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8002c4e:	bf00      	nop
    }

    if(status == HAL_OK)
 8002c50:	7bfb      	ldrb	r3, [r7, #15]
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d10d      	bne.n	8002c72 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002c56:	4b49      	ldr	r3, [pc, #292]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c58:	68db      	ldr	r3, [r3, #12]
 8002c5a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6819      	ldr	r1, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	3b01      	subs	r3, #1
 8002c68:	011b      	lsls	r3, r3, #4
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	4943      	ldr	r1, [pc, #268]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c6e:	4313      	orrs	r3, r2
 8002c70:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002c72:	7bfb      	ldrb	r3, [r7, #15]
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d17c      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002c78:	4b40      	ldr	r3, [pc, #256]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	4a3f      	ldr	r2, [pc, #252]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002c7e:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002c82:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c84:	f7fe fbb6 	bl	80013f4 <HAL_GetTick>
 8002c88:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002c8a:	e009      	b.n	8002ca0 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002c8c:	f7fe fbb2 	bl	80013f4 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	68bb      	ldr	r3, [r7, #8]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d902      	bls.n	8002ca0 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	73fb      	strb	r3, [r7, #15]
        break;
 8002c9e:	e005      	b.n	8002cac <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002ca0:	4b36      	ldr	r3, [pc, #216]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d1ef      	bne.n	8002c8c <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002cac:	7bfb      	ldrb	r3, [r7, #15]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d15f      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d110      	bne.n	8002cda <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002cb8:	4b30      	ldr	r3, [pc, #192]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cba:	691b      	ldr	r3, [r3, #16]
 8002cbc:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002cc0:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cc4:	687a      	ldr	r2, [r7, #4]
 8002cc6:	6892      	ldr	r2, [r2, #8]
 8002cc8:	0211      	lsls	r1, r2, #8
 8002cca:	687a      	ldr	r2, [r7, #4]
 8002ccc:	68d2      	ldr	r2, [r2, #12]
 8002cce:	06d2      	lsls	r2, r2, #27
 8002cd0:	430a      	orrs	r2, r1
 8002cd2:	492a      	ldr	r1, [pc, #168]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002cd4:	4313      	orrs	r3, r2
 8002cd6:	610b      	str	r3, [r1, #16]
 8002cd8:	e027      	b.n	8002d2a <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8002cda:	683b      	ldr	r3, [r7, #0]
 8002cdc:	2b01      	cmp	r3, #1
 8002cde:	d112      	bne.n	8002d06 <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002ce0:	4b26      	ldr	r3, [pc, #152]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002ce2:	691b      	ldr	r3, [r3, #16]
 8002ce4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8002ce8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002cec:	687a      	ldr	r2, [r7, #4]
 8002cee:	6892      	ldr	r2, [r2, #8]
 8002cf0:	0211      	lsls	r1, r2, #8
 8002cf2:	687a      	ldr	r2, [r7, #4]
 8002cf4:	6912      	ldr	r2, [r2, #16]
 8002cf6:	0852      	lsrs	r2, r2, #1
 8002cf8:	3a01      	subs	r2, #1
 8002cfa:	0552      	lsls	r2, r2, #21
 8002cfc:	430a      	orrs	r2, r1
 8002cfe:	491f      	ldr	r1, [pc, #124]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d00:	4313      	orrs	r3, r2
 8002d02:	610b      	str	r3, [r1, #16]
 8002d04:	e011      	b.n	8002d2a <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002d06:	4b1d      	ldr	r3, [pc, #116]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d08:	691b      	ldr	r3, [r3, #16]
 8002d0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002d0e:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002d12:	687a      	ldr	r2, [r7, #4]
 8002d14:	6892      	ldr	r2, [r2, #8]
 8002d16:	0211      	lsls	r1, r2, #8
 8002d18:	687a      	ldr	r2, [r7, #4]
 8002d1a:	6952      	ldr	r2, [r2, #20]
 8002d1c:	0852      	lsrs	r2, r2, #1
 8002d1e:	3a01      	subs	r2, #1
 8002d20:	0652      	lsls	r2, r2, #25
 8002d22:	430a      	orrs	r2, r1
 8002d24:	4915      	ldr	r1, [pc, #84]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d26:	4313      	orrs	r3, r2
 8002d28:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8002d2a:	4b14      	ldr	r3, [pc, #80]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	4a13      	ldr	r2, [pc, #76]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8002d34:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d36:	f7fe fb5d 	bl	80013f4 <HAL_GetTick>
 8002d3a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d3c:	e009      	b.n	8002d52 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002d3e:	f7fe fb59 	bl	80013f4 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	68bb      	ldr	r3, [r7, #8]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d902      	bls.n	8002d52 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	73fb      	strb	r3, [r7, #15]
          break;
 8002d50:	e005      	b.n	8002d5e <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002d52:	4b0a      	ldr	r3, [pc, #40]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d0ef      	beq.n	8002d3e <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 8002d5e:	7bfb      	ldrb	r3, [r7, #15]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d106      	bne.n	8002d72 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002d64:	4b05      	ldr	r3, [pc, #20]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d66:	691a      	ldr	r2, [r3, #16]
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	699b      	ldr	r3, [r3, #24]
 8002d6c:	4903      	ldr	r1, [pc, #12]	; (8002d7c <RCCEx_PLLSAI1_Config+0x1e0>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d74:	4618      	mov	r0, r3
 8002d76:	3710      	adds	r7, #16
 8002d78:	46bd      	mov	sp, r7
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40021000 	.word	0x40021000

08002d80 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	b082      	sub	sp, #8
 8002d84:	af00      	add	r7, sp, #0
 8002d86:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d101      	bne.n	8002d92 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d8e:	2301      	movs	r3, #1
 8002d90:	e049      	b.n	8002e26 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d106      	bne.n	8002dac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002da6:	6878      	ldr	r0, [r7, #4]
 8002da8:	f000 f841 	bl	8002e2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2202      	movs	r2, #2
 8002db0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681a      	ldr	r2, [r3, #0]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	3304      	adds	r3, #4
 8002dbc:	4619      	mov	r1, r3
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	f000 f9dc 	bl	800317c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2201      	movs	r2, #1
 8002dc8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	2201      	movs	r2, #1
 8002dd8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	2201      	movs	r2, #1
 8002de0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	2201      	movs	r2, #1
 8002de8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2201      	movs	r2, #1
 8002df8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2201      	movs	r2, #1
 8002e00:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2201      	movs	r2, #1
 8002e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2201      	movs	r2, #1
 8002e18:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	2201      	movs	r2, #1
 8002e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3708      	adds	r7, #8
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}

08002e2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8002e2e:	b480      	push	{r7}
 8002e30:	b083      	sub	sp, #12
 8002e32:	af00      	add	r7, sp, #0
 8002e34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8002e36:	bf00      	nop
 8002e38:	370c      	adds	r7, #12
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e40:	4770      	bx	lr
	...

08002e44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d001      	beq.n	8002e5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002e58:	2301      	movs	r3, #1
 8002e5a:	e03b      	b.n	8002ed4 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2202      	movs	r2, #2
 8002e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	68da      	ldr	r2, [r3, #12]
 8002e6a:	687b      	ldr	r3, [r7, #4]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f042 0201 	orr.w	r2, r2, #1
 8002e72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4a19      	ldr	r2, [pc, #100]	; (8002ee0 <HAL_TIM_Base_Start_IT+0x9c>)
 8002e7a:	4293      	cmp	r3, r2
 8002e7c:	d009      	beq.n	8002e92 <HAL_TIM_Base_Start_IT+0x4e>
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e86:	d004      	beq.n	8002e92 <HAL_TIM_Base_Start_IT+0x4e>
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a15      	ldr	r2, [pc, #84]	; (8002ee4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d115      	bne.n	8002ebe <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	689a      	ldr	r2, [r3, #8]
 8002e98:	4b13      	ldr	r3, [pc, #76]	; (8002ee8 <HAL_TIM_Base_Start_IT+0xa4>)
 8002e9a:	4013      	ands	r3, r2
 8002e9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	2b06      	cmp	r3, #6
 8002ea2:	d015      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x8c>
 8002ea4:	68fb      	ldr	r3, [r7, #12]
 8002ea6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002eaa:	d011      	beq.n	8002ed0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	681a      	ldr	r2, [r3, #0]
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f042 0201 	orr.w	r2, r2, #1
 8002eba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ebc:	e008      	b.n	8002ed0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681a      	ldr	r2, [r3, #0]
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	f042 0201 	orr.w	r2, r2, #1
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e000      	b.n	8002ed2 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002ed2:	2300      	movs	r3, #0
}
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	3714      	adds	r7, #20
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40012c00 	.word	0x40012c00
 8002ee4:	40014000 	.word	0x40014000
 8002ee8:	00010007 	.word	0x00010007

08002eec <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	691b      	ldr	r3, [r3, #16]
 8002efa:	f003 0302 	and.w	r3, r3, #2
 8002efe:	2b02      	cmp	r3, #2
 8002f00:	d122      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	68db      	ldr	r3, [r3, #12]
 8002f08:	f003 0302 	and.w	r3, r3, #2
 8002f0c:	2b02      	cmp	r3, #2
 8002f0e:	d11b      	bne.n	8002f48 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f06f 0202 	mvn.w	r2, #2
 8002f18:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2201      	movs	r2, #1
 8002f1e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	699b      	ldr	r3, [r3, #24]
 8002f26:	f003 0303 	and.w	r3, r3, #3
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d003      	beq.n	8002f36 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f2e:	6878      	ldr	r0, [r7, #4]
 8002f30:	f000 f905 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002f34:	e005      	b.n	8002f42 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f000 f8f7 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f3c:	6878      	ldr	r0, [r7, #4]
 8002f3e:	f000 f908 	bl	8003152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	2200      	movs	r2, #0
 8002f46:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	691b      	ldr	r3, [r3, #16]
 8002f4e:	f003 0304 	and.w	r3, r3, #4
 8002f52:	2b04      	cmp	r3, #4
 8002f54:	d122      	bne.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f003 0304 	and.w	r3, r3, #4
 8002f60:	2b04      	cmp	r3, #4
 8002f62:	d11b      	bne.n	8002f9c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f06f 0204 	mvn.w	r2, #4
 8002f6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	2202      	movs	r2, #2
 8002f72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	699b      	ldr	r3, [r3, #24]
 8002f7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d003      	beq.n	8002f8a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f82:	6878      	ldr	r0, [r7, #4]
 8002f84:	f000 f8db 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002f88:	e005      	b.n	8002f96 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 f8cd 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f90:	6878      	ldr	r0, [r7, #4]
 8002f92:	f000 f8de 	bl	8003152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	691b      	ldr	r3, [r3, #16]
 8002fa2:	f003 0308 	and.w	r3, r3, #8
 8002fa6:	2b08      	cmp	r3, #8
 8002fa8:	d122      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	68db      	ldr	r3, [r3, #12]
 8002fb0:	f003 0308 	and.w	r3, r3, #8
 8002fb4:	2b08      	cmp	r3, #8
 8002fb6:	d11b      	bne.n	8002ff0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f06f 0208 	mvn.w	r2, #8
 8002fc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2204      	movs	r2, #4
 8002fc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	69db      	ldr	r3, [r3, #28]
 8002fce:	f003 0303 	and.w	r3, r3, #3
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d003      	beq.n	8002fde <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fd6:	6878      	ldr	r0, [r7, #4]
 8002fd8:	f000 f8b1 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8002fdc:	e005      	b.n	8002fea <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fde:	6878      	ldr	r0, [r7, #4]
 8002fe0:	f000 f8a3 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fe4:	6878      	ldr	r0, [r7, #4]
 8002fe6:	f000 f8b4 	bl	8003152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	2200      	movs	r2, #0
 8002fee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	691b      	ldr	r3, [r3, #16]
 8002ff6:	f003 0310 	and.w	r3, r3, #16
 8002ffa:	2b10      	cmp	r3, #16
 8002ffc:	d122      	bne.n	8003044 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	68db      	ldr	r3, [r3, #12]
 8003004:	f003 0310 	and.w	r3, r3, #16
 8003008:	2b10      	cmp	r3, #16
 800300a:	d11b      	bne.n	8003044 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f06f 0210 	mvn.w	r2, #16
 8003014:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2208      	movs	r2, #8
 800301a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	69db      	ldr	r3, [r3, #28]
 8003022:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003026:	2b00      	cmp	r3, #0
 8003028:	d003      	beq.n	8003032 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800302a:	6878      	ldr	r0, [r7, #4]
 800302c:	f000 f887 	bl	800313e <HAL_TIM_IC_CaptureCallback>
 8003030:	e005      	b.n	800303e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003032:	6878      	ldr	r0, [r7, #4]
 8003034:	f000 f879 	bl	800312a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003038:	6878      	ldr	r0, [r7, #4]
 800303a:	f000 f88a 	bl	8003152 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	2200      	movs	r2, #0
 8003042:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0301 	and.w	r3, r3, #1
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10e      	bne.n	8003070 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0301 	and.w	r3, r3, #1
 800305c:	2b01      	cmp	r3, #1
 800305e:	d107      	bne.n	8003070 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0201 	mvn.w	r2, #1
 8003068:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800306a:	6878      	ldr	r0, [r7, #4]
 800306c:	f7fd fb5a 	bl	8000724 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800307a:	2b80      	cmp	r3, #128	; 0x80
 800307c:	d10e      	bne.n	800309c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003088:	2b80      	cmp	r3, #128	; 0x80
 800308a:	d107      	bne.n	800309c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003094:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f000 f8de 	bl	8003258 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	691b      	ldr	r3, [r3, #16]
 80030a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030a6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030aa:	d10e      	bne.n	80030ca <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030b6:	2b80      	cmp	r3, #128	; 0x80
 80030b8:	d107      	bne.n	80030ca <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80030c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030c4:	6878      	ldr	r0, [r7, #4]
 80030c6:	f000 f8d1 	bl	800326c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030d4:	2b40      	cmp	r3, #64	; 0x40
 80030d6:	d10e      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68db      	ldr	r3, [r3, #12]
 80030de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030e2:	2b40      	cmp	r3, #64	; 0x40
 80030e4:	d107      	bne.n	80030f6 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030ee:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030f0:	6878      	ldr	r0, [r7, #4]
 80030f2:	f000 f838 	bl	8003166 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	691b      	ldr	r3, [r3, #16]
 80030fc:	f003 0320 	and.w	r3, r3, #32
 8003100:	2b20      	cmp	r3, #32
 8003102:	d10e      	bne.n	8003122 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	68db      	ldr	r3, [r3, #12]
 800310a:	f003 0320 	and.w	r3, r3, #32
 800310e:	2b20      	cmp	r3, #32
 8003110:	d107      	bne.n	8003122 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f06f 0220 	mvn.w	r2, #32
 800311a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800311c:	6878      	ldr	r0, [r7, #4]
 800311e:	f000 f891 	bl	8003244 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003122:	bf00      	nop
 8003124:	3708      	adds	r7, #8
 8003126:	46bd      	mov	sp, r7
 8003128:	bd80      	pop	{r7, pc}

0800312a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800312a:	b480      	push	{r7}
 800312c:	b083      	sub	sp, #12
 800312e:	af00      	add	r7, sp, #0
 8003130:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003132:	bf00      	nop
 8003134:	370c      	adds	r7, #12
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr
	...

0800317c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800317c:	b480      	push	{r7}
 800317e:	b085      	sub	sp, #20
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
 8003184:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a2a      	ldr	r2, [pc, #168]	; (8003238 <TIM_Base_SetConfig+0xbc>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d003      	beq.n	800319c <TIM_Base_SetConfig+0x20>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800319a:	d108      	bne.n	80031ae <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	4a21      	ldr	r2, [pc, #132]	; (8003238 <TIM_Base_SetConfig+0xbc>)
 80031b2:	4293      	cmp	r3, r2
 80031b4:	d00b      	beq.n	80031ce <TIM_Base_SetConfig+0x52>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031bc:	d007      	beq.n	80031ce <TIM_Base_SetConfig+0x52>
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	4a1e      	ldr	r2, [pc, #120]	; (800323c <TIM_Base_SetConfig+0xc0>)
 80031c2:	4293      	cmp	r3, r2
 80031c4:	d003      	beq.n	80031ce <TIM_Base_SetConfig+0x52>
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a1d      	ldr	r2, [pc, #116]	; (8003240 <TIM_Base_SetConfig+0xc4>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d108      	bne.n	80031e0 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031d4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031d6:	683b      	ldr	r3, [r7, #0]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	68fa      	ldr	r2, [r7, #12]
 80031dc:	4313      	orrs	r3, r2
 80031de:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031e6:	683b      	ldr	r3, [r7, #0]
 80031e8:	695b      	ldr	r3, [r3, #20]
 80031ea:	4313      	orrs	r3, r2
 80031ec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	68fa      	ldr	r2, [r7, #12]
 80031f2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	689a      	ldr	r2, [r3, #8]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	681a      	ldr	r2, [r3, #0]
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	4a0c      	ldr	r2, [pc, #48]	; (8003238 <TIM_Base_SetConfig+0xbc>)
 8003208:	4293      	cmp	r3, r2
 800320a:	d007      	beq.n	800321c <TIM_Base_SetConfig+0xa0>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a0b      	ldr	r2, [pc, #44]	; (800323c <TIM_Base_SetConfig+0xc0>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d003      	beq.n	800321c <TIM_Base_SetConfig+0xa0>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a0a      	ldr	r2, [pc, #40]	; (8003240 <TIM_Base_SetConfig+0xc4>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d103      	bne.n	8003224 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	691a      	ldr	r2, [r3, #16]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	2201      	movs	r2, #1
 8003228:	615a      	str	r2, [r3, #20]
}
 800322a:	bf00      	nop
 800322c:	3714      	adds	r7, #20
 800322e:	46bd      	mov	sp, r7
 8003230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003234:	4770      	bx	lr
 8003236:	bf00      	nop
 8003238:	40012c00 	.word	0x40012c00
 800323c:	40014000 	.word	0x40014000
 8003240:	40014400 	.word	0x40014400

08003244 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800324c:	bf00      	nop
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003258:	b480      	push	{r7}
 800325a:	b083      	sub	sp, #12
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003260:	bf00      	nop
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800326c:	b480      	push	{r7}
 800326e:	b083      	sub	sp, #12
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003274:	bf00      	nop
 8003276:	370c      	adds	r7, #12
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b082      	sub	sp, #8
 8003284:	af00      	add	r7, sp, #0
 8003286:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d101      	bne.n	8003292 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800328e:	2301      	movs	r3, #1
 8003290:	e040      	b.n	8003314 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003296:	2b00      	cmp	r3, #0
 8003298:	d106      	bne.n	80032a8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	2200      	movs	r2, #0
 800329e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f7fd ffde 	bl	8001264 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2224      	movs	r2, #36	; 0x24
 80032ac:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f022 0201 	bic.w	r2, r2, #1
 80032bc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80032be:	6878      	ldr	r0, [r7, #4]
 80032c0:	f000 fc18 	bl	8003af4 <UART_SetConfig>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b01      	cmp	r3, #1
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e022      	b.n	8003314 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d002      	beq.n	80032dc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80032d6:	6878      	ldr	r0, [r7, #4]
 80032d8:	f000 fe38 	bl	8003f4c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	685a      	ldr	r2, [r3, #4]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80032ea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	689a      	ldr	r2, [r3, #8]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80032fa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f042 0201 	orr.w	r2, r2, #1
 800330a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800330c:	6878      	ldr	r0, [r7, #4]
 800330e:	f000 febf 	bl	8004090 <UART_CheckIdleState>
 8003312:	4603      	mov	r3, r0
}
 8003314:	4618      	mov	r0, r3
 8003316:	3708      	adds	r7, #8
 8003318:	46bd      	mov	sp, r7
 800331a:	bd80      	pop	{r7, pc}

0800331c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b08a      	sub	sp, #40	; 0x28
 8003320:	af02      	add	r7, sp, #8
 8003322:	60f8      	str	r0, [r7, #12]
 8003324:	60b9      	str	r1, [r7, #8]
 8003326:	603b      	str	r3, [r7, #0]
 8003328:	4613      	mov	r3, r2
 800332a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003330:	2b20      	cmp	r3, #32
 8003332:	f040 8082 	bne.w	800343a <HAL_UART_Transmit+0x11e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	2b00      	cmp	r3, #0
 800333a:	d002      	beq.n	8003342 <HAL_UART_Transmit+0x26>
 800333c:	88fb      	ldrh	r3, [r7, #6]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d101      	bne.n	8003346 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	e07a      	b.n	800343c <HAL_UART_Transmit+0x120>
    }

    __HAL_LOCK(huart);
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 800334c:	2b01      	cmp	r3, #1
 800334e:	d101      	bne.n	8003354 <HAL_UART_Transmit+0x38>
 8003350:	2302      	movs	r3, #2
 8003352:	e073      	b.n	800343c <HAL_UART_Transmit+0x120>
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	2200      	movs	r2, #0
 8003360:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	2221      	movs	r2, #33	; 0x21
 8003368:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800336a:	f7fe f843 	bl	80013f4 <HAL_GetTick>
 800336e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003370:	68fb      	ldr	r3, [r7, #12]
 8003372:	88fa      	ldrh	r2, [r7, #6]
 8003374:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	88fa      	ldrh	r2, [r7, #6]
 800337c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003380:	68fb      	ldr	r3, [r7, #12]
 8003382:	689b      	ldr	r3, [r3, #8]
 8003384:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003388:	d108      	bne.n	800339c <HAL_UART_Transmit+0x80>
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	691b      	ldr	r3, [r3, #16]
 800338e:	2b00      	cmp	r3, #0
 8003390:	d104      	bne.n	800339c <HAL_UART_Transmit+0x80>
    {
      pdata8bits  = NULL;
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003396:	68bb      	ldr	r3, [r7, #8]
 8003398:	61bb      	str	r3, [r7, #24]
 800339a:	e003      	b.n	80033a4 <HAL_UART_Transmit+0x88>
    }
    else
    {
      pdata8bits  = pData;
 800339c:	68bb      	ldr	r3, [r7, #8]
 800339e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033a0:	2300      	movs	r3, #0
 80033a2:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80033a4:	68fb      	ldr	r3, [r7, #12]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    while (huart->TxXferCount > 0U)
 80033ac:	e02d      	b.n	800340a <HAL_UART_Transmit+0xee>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	9300      	str	r3, [sp, #0]
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2200      	movs	r2, #0
 80033b6:	2180      	movs	r1, #128	; 0x80
 80033b8:	68f8      	ldr	r0, [r7, #12]
 80033ba:	f000 feb2 	bl	8004122 <UART_WaitOnFlagUntilTimeout>
 80033be:	4603      	mov	r3, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d001      	beq.n	80033c8 <HAL_UART_Transmit+0xac>
      {
        return HAL_TIMEOUT;
 80033c4:	2303      	movs	r3, #3
 80033c6:	e039      	b.n	800343c <HAL_UART_Transmit+0x120>
      }
      if (pdata8bits == NULL)
 80033c8:	69fb      	ldr	r3, [r7, #28]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d10b      	bne.n	80033e6 <HAL_UART_Transmit+0xca>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80033ce:	69bb      	ldr	r3, [r7, #24]
 80033d0:	881a      	ldrh	r2, [r3, #0]
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80033da:	b292      	uxth	r2, r2
 80033dc:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80033de:	69bb      	ldr	r3, [r7, #24]
 80033e0:	3302      	adds	r3, #2
 80033e2:	61bb      	str	r3, [r7, #24]
 80033e4:	e008      	b.n	80033f8 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	781a      	ldrb	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	b292      	uxth	r2, r2
 80033f0:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80033f2:	69fb      	ldr	r3, [r7, #28]
 80033f4:	3301      	adds	r3, #1
 80033f6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 80033fe:	b29b      	uxth	r3, r3
 8003400:	3b01      	subs	r3, #1
 8003402:	b29a      	uxth	r2, r3
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003410:	b29b      	uxth	r3, r3
 8003412:	2b00      	cmp	r3, #0
 8003414:	d1cb      	bne.n	80033ae <HAL_UART_Transmit+0x92>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	9300      	str	r3, [sp, #0]
 800341a:	697b      	ldr	r3, [r7, #20]
 800341c:	2200      	movs	r2, #0
 800341e:	2140      	movs	r1, #64	; 0x40
 8003420:	68f8      	ldr	r0, [r7, #12]
 8003422:	f000 fe7e 	bl	8004122 <UART_WaitOnFlagUntilTimeout>
 8003426:	4603      	mov	r3, r0
 8003428:	2b00      	cmp	r3, #0
 800342a:	d001      	beq.n	8003430 <HAL_UART_Transmit+0x114>
    {
      return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e005      	b.n	800343c <HAL_UART_Transmit+0x120>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	2220      	movs	r2, #32
 8003434:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8003436:	2300      	movs	r3, #0
 8003438:	e000      	b.n	800343c <HAL_UART_Transmit+0x120>
  }
  else
  {
    return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
  }
}
 800343c:	4618      	mov	r0, r3
 800343e:	3720      	adds	r7, #32
 8003440:	46bd      	mov	sp, r7
 8003442:	bd80      	pop	{r7, pc}

08003444 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003444:	b580      	push	{r7, lr}
 8003446:	b08a      	sub	sp, #40	; 0x28
 8003448:	af00      	add	r7, sp, #0
 800344a:	60f8      	str	r0, [r7, #12]
 800344c:	60b9      	str	r1, [r7, #8]
 800344e:	4613      	mov	r3, r2
 8003450:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003456:	2b20      	cmp	r3, #32
 8003458:	d142      	bne.n	80034e0 <HAL_UART_Receive_IT+0x9c>
  {
    if ((pData == NULL) || (Size == 0U))
 800345a:	68bb      	ldr	r3, [r7, #8]
 800345c:	2b00      	cmp	r3, #0
 800345e:	d002      	beq.n	8003466 <HAL_UART_Receive_IT+0x22>
 8003460:	88fb      	ldrh	r3, [r7, #6]
 8003462:	2b00      	cmp	r3, #0
 8003464:	d101      	bne.n	800346a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8003466:	2301      	movs	r3, #1
 8003468:	e03b      	b.n	80034e2 <HAL_UART_Receive_IT+0x9e>
    }

    __HAL_LOCK(huart);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8003470:	2b01      	cmp	r3, #1
 8003472:	d101      	bne.n	8003478 <HAL_UART_Receive_IT+0x34>
 8003474:	2302      	movs	r3, #2
 8003476:	e034      	b.n	80034e2 <HAL_UART_Receive_IT+0x9e>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	661a      	str	r2, [r3, #96]	; 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	4a18      	ldr	r2, [pc, #96]	; (80034ec <HAL_UART_Receive_IT+0xa8>)
 800348c:	4293      	cmp	r3, r2
 800348e:	d01f      	beq.n	80034d0 <HAL_UART_Receive_IT+0x8c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d018      	beq.n	80034d0 <HAL_UART_Receive_IT+0x8c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a4:	697b      	ldr	r3, [r7, #20]
 80034a6:	e853 3f00 	ldrex	r3, [r3]
 80034aa:	613b      	str	r3, [r7, #16]
   return(result);
 80034ac:	693b      	ldr	r3, [r7, #16]
 80034ae:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80034b2:	627b      	str	r3, [r7, #36]	; 0x24
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	461a      	mov	r2, r3
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	623b      	str	r3, [r7, #32]
 80034be:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034c0:	69f9      	ldr	r1, [r7, #28]
 80034c2:	6a3a      	ldr	r2, [r7, #32]
 80034c4:	e841 2300 	strex	r3, r2, [r1]
 80034c8:	61bb      	str	r3, [r7, #24]
   return(result);
 80034ca:	69bb      	ldr	r3, [r7, #24]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d1e6      	bne.n	800349e <HAL_UART_Receive_IT+0x5a>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80034d0:	88fb      	ldrh	r3, [r7, #6]
 80034d2:	461a      	mov	r2, r3
 80034d4:	68b9      	ldr	r1, [r7, #8]
 80034d6:	68f8      	ldr	r0, [r7, #12]
 80034d8:	f000 fee8 	bl	80042ac <UART_Start_Receive_IT>
 80034dc:	4603      	mov	r3, r0
 80034de:	e000      	b.n	80034e2 <HAL_UART_Receive_IT+0x9e>
  }
  else
  {
    return HAL_BUSY;
 80034e0:	2302      	movs	r3, #2
  }
}
 80034e2:	4618      	mov	r0, r3
 80034e4:	3728      	adds	r7, #40	; 0x28
 80034e6:	46bd      	mov	sp, r7
 80034e8:	bd80      	pop	{r7, pc}
 80034ea:	bf00      	nop
 80034ec:	40008000 	.word	0x40008000

080034f0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b0ba      	sub	sp, #232	; 0xe8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	69db      	ldr	r3, [r3, #28]
 80034fe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003516:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800351a:	f640 030f 	movw	r3, #2063	; 0x80f
 800351e:	4013      	ands	r3, r2
 8003520:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8003524:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8003528:	2b00      	cmp	r3, #0
 800352a:	d115      	bne.n	8003558 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800352c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003530:	f003 0320 	and.w	r3, r3, #32
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00f      	beq.n	8003558 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003538:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800353c:	f003 0320 	and.w	r3, r3, #32
 8003540:	2b00      	cmp	r3, #0
 8003542:	d009      	beq.n	8003558 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003548:	2b00      	cmp	r3, #0
 800354a:	f000 82a6 	beq.w	8003a9a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	4798      	blx	r3
      }
      return;
 8003556:	e2a0      	b.n	8003a9a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003558:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 8117 	beq.w	8003790 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003562:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003566:	f003 0301 	and.w	r3, r3, #1
 800356a:	2b00      	cmp	r3, #0
 800356c:	d106      	bne.n	800357c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800356e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8003572:	4b85      	ldr	r3, [pc, #532]	; (8003788 <HAL_UART_IRQHandler+0x298>)
 8003574:	4013      	ands	r3, r2
 8003576:	2b00      	cmp	r3, #0
 8003578:	f000 810a 	beq.w	8003790 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800357c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003580:	f003 0301 	and.w	r3, r3, #1
 8003584:	2b00      	cmp	r3, #0
 8003586:	d011      	beq.n	80035ac <HAL_UART_IRQHandler+0xbc>
 8003588:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800358c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003590:	2b00      	cmp	r3, #0
 8003592:	d00b      	beq.n	80035ac <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	2201      	movs	r2, #1
 800359a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035a2:	f043 0201 	orr.w	r2, r3, #1
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035b0:	f003 0302 	and.w	r3, r3, #2
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d011      	beq.n	80035dc <HAL_UART_IRQHandler+0xec>
 80035b8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d00b      	beq.n	80035dc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	2202      	movs	r2, #2
 80035ca:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80035d2:	f043 0204 	orr.w	r2, r3, #4
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80035dc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035e0:	f003 0304 	and.w	r3, r3, #4
 80035e4:	2b00      	cmp	r3, #0
 80035e6:	d011      	beq.n	800360c <HAL_UART_IRQHandler+0x11c>
 80035e8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	d00b      	beq.n	800360c <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	2204      	movs	r2, #4
 80035fa:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003602:	f043 0202 	orr.w	r2, r3, #2
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 800360c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003610:	f003 0308 	and.w	r3, r3, #8
 8003614:	2b00      	cmp	r3, #0
 8003616:	d017      	beq.n	8003648 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003618:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800361c:	f003 0320 	and.w	r3, r3, #32
 8003620:	2b00      	cmp	r3, #0
 8003622:	d105      	bne.n	8003630 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003624:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003628:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800362c:	2b00      	cmp	r3, #0
 800362e:	d00b      	beq.n	8003648 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	2208      	movs	r2, #8
 8003636:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800363e:	f043 0208 	orr.w	r2, r3, #8
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003648:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800364c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003650:	2b00      	cmp	r3, #0
 8003652:	d012      	beq.n	800367a <HAL_UART_IRQHandler+0x18a>
 8003654:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003658:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800365c:	2b00      	cmp	r3, #0
 800365e:	d00c      	beq.n	800367a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003668:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003670:	f043 0220 	orr.w	r2, r3, #32
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003680:	2b00      	cmp	r3, #0
 8003682:	f000 820c 	beq.w	8003a9e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003686:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800368a:	f003 0320 	and.w	r3, r3, #32
 800368e:	2b00      	cmp	r3, #0
 8003690:	d00d      	beq.n	80036ae <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003692:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003696:	f003 0320 	and.w	r3, r3, #32
 800369a:	2b00      	cmp	r3, #0
 800369c:	d007      	beq.n	80036ae <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d003      	beq.n	80036ae <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80036b4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	689b      	ldr	r3, [r3, #8]
 80036be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036c2:	2b40      	cmp	r3, #64	; 0x40
 80036c4:	d005      	beq.n	80036d2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80036c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80036ca:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d04f      	beq.n	8003772 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80036d2:	6878      	ldr	r0, [r7, #4]
 80036d4:	f000 feb4 	bl	8004440 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	689b      	ldr	r3, [r3, #8]
 80036de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036e2:	2b40      	cmp	r3, #64	; 0x40
 80036e4:	d141      	bne.n	800376a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	3308      	adds	r3, #8
 80036ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80036f4:	e853 3f00 	ldrex	r3, [r3]
 80036f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80036fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8003700:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003704:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	3308      	adds	r3, #8
 800370e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8003712:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8003716:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800371a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800371e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8003722:	e841 2300 	strex	r3, r2, [r1]
 8003726:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800372a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800372e:	2b00      	cmp	r3, #0
 8003730:	d1d9      	bne.n	80036e6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003736:	2b00      	cmp	r3, #0
 8003738:	d013      	beq.n	8003762 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800373e:	4a13      	ldr	r2, [pc, #76]	; (800378c <HAL_UART_IRQHandler+0x29c>)
 8003740:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4618      	mov	r0, r3
 8003748:	f7fd ff80 	bl	800164c <HAL_DMA_Abort_IT>
 800374c:	4603      	mov	r3, r0
 800374e:	2b00      	cmp	r3, #0
 8003750:	d017      	beq.n	8003782 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003758:	687a      	ldr	r2, [r7, #4]
 800375a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 800375c:	4610      	mov	r0, r2
 800375e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003760:	e00f      	b.n	8003782 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003762:	6878      	ldr	r0, [r7, #4]
 8003764:	f000 f9b0 	bl	8003ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003768:	e00b      	b.n	8003782 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800376a:	6878      	ldr	r0, [r7, #4]
 800376c:	f000 f9ac 	bl	8003ac8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003770:	e007      	b.n	8003782 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003772:	6878      	ldr	r0, [r7, #4]
 8003774:	f000 f9a8 	bl	8003ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8003780:	e18d      	b.n	8003a9e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003782:	bf00      	nop
    return;
 8003784:	e18b      	b.n	8003a9e <HAL_UART_IRQHandler+0x5ae>
 8003786:	bf00      	nop
 8003788:	04000120 	.word	0x04000120
 800378c:	08004507 	.word	0x08004507

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003794:	2b01      	cmp	r3, #1
 8003796:	f040 8146 	bne.w	8003a26 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800379a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800379e:	f003 0310 	and.w	r3, r3, #16
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	f000 813f 	beq.w	8003a26 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80037a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80037ac:	f003 0310 	and.w	r3, r3, #16
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 8138 	beq.w	8003a26 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	2210      	movs	r2, #16
 80037bc:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037c8:	2b40      	cmp	r3, #64	; 0x40
 80037ca:	f040 80b4 	bne.w	8003936 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80037da:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80037de:	2b00      	cmp	r3, #0
 80037e0:	f000 815f 	beq.w	8003aa2 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80037ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037ee:	429a      	cmp	r2, r3
 80037f0:	f080 8157 	bcs.w	8003aa2 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80037fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 0320 	and.w	r3, r3, #32
 800380a:	2b00      	cmp	r3, #0
 800380c:	f040 8085 	bne.w	800391a <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800381c:	e853 3f00 	ldrex	r3, [r3]
 8003820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8003824:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800382c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	461a      	mov	r2, r3
 8003836:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800383a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800383e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003842:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8003846:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800384a:	e841 2300 	strex	r3, r2, [r1]
 800384e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8003852:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8003856:	2b00      	cmp	r3, #0
 8003858:	d1da      	bne.n	8003810 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	3308      	adds	r3, #8
 8003860:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003862:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003864:	e853 3f00 	ldrex	r3, [r3]
 8003868:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800386a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800386c:	f023 0301 	bic.w	r3, r3, #1
 8003870:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	3308      	adds	r3, #8
 800387a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800387e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8003882:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003884:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8003886:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8003890:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e1      	bne.n	800385a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	3308      	adds	r3, #8
 800389c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800389e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80038a0:	e853 3f00 	ldrex	r3, [r3]
 80038a4:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80038a6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80038a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038ac:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	3308      	adds	r3, #8
 80038b6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80038ba:	66fa      	str	r2, [r7, #108]	; 0x6c
 80038bc:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80038be:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80038c0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80038c2:	e841 2300 	strex	r3, r2, [r1]
 80038c6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80038c8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1e3      	bne.n	8003896 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	2220      	movs	r2, #32
 80038d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	2200      	movs	r2, #0
 80038d8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80038e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80038e2:	e853 3f00 	ldrex	r3, [r3]
 80038e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80038e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80038ea:	f023 0310 	bic.w	r3, r3, #16
 80038ee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	461a      	mov	r2, r3
 80038f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80038fc:	65bb      	str	r3, [r7, #88]	; 0x58
 80038fe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003900:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8003902:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8003904:	e841 2300 	strex	r3, r2, [r1]
 8003908:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800390a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800390c:	2b00      	cmp	r3, #0
 800390e:	d1e4      	bne.n	80038da <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003914:	4618      	mov	r0, r3
 8003916:	f7fd fe5b 	bl	80015d0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003926:	b29b      	uxth	r3, r3
 8003928:	1ad3      	subs	r3, r2, r3
 800392a:	b29b      	uxth	r3, r3
 800392c:	4619      	mov	r1, r3
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 f8d4 	bl	8003adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003934:	e0b5      	b.n	8003aa2 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003942:	b29b      	uxth	r3, r3
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	f000 80a7 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8003958:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80a2 	beq.w	8003aa6 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003968:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800396a:	e853 3f00 	ldrex	r3, [r3]
 800396e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8003970:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003972:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003976:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	461a      	mov	r2, r3
 8003980:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003984:	647b      	str	r3, [r7, #68]	; 0x44
 8003986:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003988:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800398a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800398c:	e841 2300 	strex	r3, r2, [r1]
 8003990:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8003992:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1e4      	bne.n	8003962 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	3308      	adds	r3, #8
 800399e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039a2:	e853 3f00 	ldrex	r3, [r3]
 80039a6:	623b      	str	r3, [r7, #32]
   return(result);
 80039a8:	6a3b      	ldr	r3, [r7, #32]
 80039aa:	f023 0301 	bic.w	r3, r3, #1
 80039ae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	3308      	adds	r3, #8
 80039b8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80039bc:	633a      	str	r2, [r7, #48]	; 0x30
 80039be:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039c0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039c2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80039c4:	e841 2300 	strex	r3, r2, [r1]
 80039c8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80039ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d1e3      	bne.n	8003998 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	2220      	movs	r2, #32
 80039d4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80039e2:	687b      	ldr	r3, [r7, #4]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	693b      	ldr	r3, [r7, #16]
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	60fb      	str	r3, [r7, #12]
   return(result);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	f023 0310 	bic.w	r3, r3, #16
 80039f6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	461a      	mov	r2, r3
 8003a00:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003a04:	61fb      	str	r3, [r7, #28]
 8003a06:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	69b9      	ldr	r1, [r7, #24]
 8003a0a:	69fa      	ldr	r2, [r7, #28]
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	617b      	str	r3, [r7, #20]
   return(result);
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e4      	bne.n	80039e2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003a18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	6878      	ldr	r0, [r7, #4]
 8003a20:	f000 f85c 	bl	8003adc <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8003a24:	e03f      	b.n	8003aa6 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8003a26:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a2a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d00e      	beq.n	8003a50 <HAL_UART_IRQHandler+0x560>
 8003a32:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8003a36:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d008      	beq.n	8003a50 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003a46:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8003a48:	6878      	ldr	r0, [r7, #4]
 8003a4a:	f000 fefc 	bl	8004846 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8003a4e:	e02d      	b.n	8003aac <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8003a50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a54:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d00e      	beq.n	8003a7a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8003a5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a60:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d01c      	beq.n	8003aaa <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003a74:	6878      	ldr	r0, [r7, #4]
 8003a76:	4798      	blx	r3
    }
    return;
 8003a78:	e017      	b.n	8003aaa <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8003a7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003a7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d012      	beq.n	8003aac <HAL_UART_IRQHandler+0x5bc>
 8003a86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8003a8a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d00c      	beq.n	8003aac <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fd4d 	bl	8004532 <UART_EndTransmit_IT>
    return;
 8003a98:	e008      	b.n	8003aac <HAL_UART_IRQHandler+0x5bc>
      return;
 8003a9a:	bf00      	nop
 8003a9c:	e006      	b.n	8003aac <HAL_UART_IRQHandler+0x5bc>
    return;
 8003a9e:	bf00      	nop
 8003aa0:	e004      	b.n	8003aac <HAL_UART_IRQHandler+0x5bc>
      return;
 8003aa2:	bf00      	nop
 8003aa4:	e002      	b.n	8003aac <HAL_UART_IRQHandler+0x5bc>
      return;
 8003aa6:	bf00      	nop
 8003aa8:	e000      	b.n	8003aac <HAL_UART_IRQHandler+0x5bc>
    return;
 8003aaa:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8003aac:	37e8      	adds	r7, #232	; 0xe8
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}
 8003ab2:	bf00      	nop

08003ab4 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003ab4:	b480      	push	{r7}
 8003ab6:	b083      	sub	sp, #12
 8003ab8:	af00      	add	r7, sp, #0
 8003aba:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8003abc:	bf00      	nop
 8003abe:	370c      	adds	r7, #12
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ac6:	4770      	bx	lr

08003ac8 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b083      	sub	sp, #12
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8003ad0:	bf00      	nop
 8003ad2:	370c      	adds	r7, #12
 8003ad4:	46bd      	mov	sp, r7
 8003ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ada:	4770      	bx	lr

08003adc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b083      	sub	sp, #12
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003ae8:	bf00      	nop
 8003aea:	370c      	adds	r7, #12
 8003aec:	46bd      	mov	sp, r7
 8003aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af2:	4770      	bx	lr

08003af4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003af4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af8:	b08a      	sub	sp, #40	; 0x28
 8003afa:	af00      	add	r7, sp, #0
 8003afc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003afe:	2300      	movs	r3, #0
 8003b00:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	691b      	ldr	r3, [r3, #16]
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	695b      	ldr	r3, [r3, #20]
 8003b12:	431a      	orrs	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	69db      	ldr	r3, [r3, #28]
 8003b18:	4313      	orrs	r3, r2
 8003b1a:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	681a      	ldr	r2, [r3, #0]
 8003b22:	4bb4      	ldr	r3, [pc, #720]	; (8003df4 <UART_SetConfig+0x300>)
 8003b24:	4013      	ands	r3, r2
 8003b26:	68fa      	ldr	r2, [r7, #12]
 8003b28:	6812      	ldr	r2, [r2, #0]
 8003b2a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003b2c:	430b      	orrs	r3, r1
 8003b2e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	685b      	ldr	r3, [r3, #4]
 8003b36:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	68da      	ldr	r2, [r3, #12]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	699b      	ldr	r3, [r3, #24]
 8003b4a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	4aa9      	ldr	r2, [pc, #676]	; (8003df8 <UART_SetConfig+0x304>)
 8003b52:	4293      	cmp	r3, r2
 8003b54:	d004      	beq.n	8003b60 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	6a1b      	ldr	r3, [r3, #32]
 8003b5a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	689b      	ldr	r3, [r3, #8]
 8003b66:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b70:	430a      	orrs	r2, r1
 8003b72:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	4aa0      	ldr	r2, [pc, #640]	; (8003dfc <UART_SetConfig+0x308>)
 8003b7a:	4293      	cmp	r3, r2
 8003b7c:	d126      	bne.n	8003bcc <UART_SetConfig+0xd8>
 8003b7e:	4ba0      	ldr	r3, [pc, #640]	; (8003e00 <UART_SetConfig+0x30c>)
 8003b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b84:	f003 0303 	and.w	r3, r3, #3
 8003b88:	2b03      	cmp	r3, #3
 8003b8a:	d81b      	bhi.n	8003bc4 <UART_SetConfig+0xd0>
 8003b8c:	a201      	add	r2, pc, #4	; (adr r2, 8003b94 <UART_SetConfig+0xa0>)
 8003b8e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b92:	bf00      	nop
 8003b94:	08003ba5 	.word	0x08003ba5
 8003b98:	08003bb5 	.word	0x08003bb5
 8003b9c:	08003bad 	.word	0x08003bad
 8003ba0:	08003bbd 	.word	0x08003bbd
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003baa:	e080      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003bac:	2302      	movs	r3, #2
 8003bae:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bb2:	e07c      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003bb4:	2304      	movs	r3, #4
 8003bb6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bba:	e078      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003bbc:	2308      	movs	r3, #8
 8003bbe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bc2:	e074      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003bc4:	2310      	movs	r3, #16
 8003bc6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003bca:	e070      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a8c      	ldr	r2, [pc, #560]	; (8003e04 <UART_SetConfig+0x310>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d138      	bne.n	8003c48 <UART_SetConfig+0x154>
 8003bd6:	4b8a      	ldr	r3, [pc, #552]	; (8003e00 <UART_SetConfig+0x30c>)
 8003bd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bdc:	f003 030c 	and.w	r3, r3, #12
 8003be0:	2b0c      	cmp	r3, #12
 8003be2:	d82d      	bhi.n	8003c40 <UART_SetConfig+0x14c>
 8003be4:	a201      	add	r2, pc, #4	; (adr r2, 8003bec <UART_SetConfig+0xf8>)
 8003be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bea:	bf00      	nop
 8003bec:	08003c21 	.word	0x08003c21
 8003bf0:	08003c41 	.word	0x08003c41
 8003bf4:	08003c41 	.word	0x08003c41
 8003bf8:	08003c41 	.word	0x08003c41
 8003bfc:	08003c31 	.word	0x08003c31
 8003c00:	08003c41 	.word	0x08003c41
 8003c04:	08003c41 	.word	0x08003c41
 8003c08:	08003c41 	.word	0x08003c41
 8003c0c:	08003c29 	.word	0x08003c29
 8003c10:	08003c41 	.word	0x08003c41
 8003c14:	08003c41 	.word	0x08003c41
 8003c18:	08003c41 	.word	0x08003c41
 8003c1c:	08003c39 	.word	0x08003c39
 8003c20:	2300      	movs	r3, #0
 8003c22:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c26:	e042      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003c28:	2302      	movs	r3, #2
 8003c2a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c2e:	e03e      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003c30:	2304      	movs	r3, #4
 8003c32:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c36:	e03a      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003c38:	2308      	movs	r3, #8
 8003c3a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c3e:	e036      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003c40:	2310      	movs	r3, #16
 8003c42:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c46:	e032      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a6a      	ldr	r2, [pc, #424]	; (8003df8 <UART_SetConfig+0x304>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d12a      	bne.n	8003ca8 <UART_SetConfig+0x1b4>
 8003c52:	4b6b      	ldr	r3, [pc, #428]	; (8003e00 <UART_SetConfig+0x30c>)
 8003c54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c58:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003c5c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c60:	d01a      	beq.n	8003c98 <UART_SetConfig+0x1a4>
 8003c62:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003c66:	d81b      	bhi.n	8003ca0 <UART_SetConfig+0x1ac>
 8003c68:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c6c:	d00c      	beq.n	8003c88 <UART_SetConfig+0x194>
 8003c6e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003c72:	d815      	bhi.n	8003ca0 <UART_SetConfig+0x1ac>
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d003      	beq.n	8003c80 <UART_SetConfig+0x18c>
 8003c78:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003c7c:	d008      	beq.n	8003c90 <UART_SetConfig+0x19c>
 8003c7e:	e00f      	b.n	8003ca0 <UART_SetConfig+0x1ac>
 8003c80:	2300      	movs	r3, #0
 8003c82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c86:	e012      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003c88:	2302      	movs	r3, #2
 8003c8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c8e:	e00e      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003c90:	2304      	movs	r3, #4
 8003c92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c96:	e00a      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003c98:	2308      	movs	r3, #8
 8003c9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003c9e:	e006      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003ca0:	2310      	movs	r3, #16
 8003ca2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ca6:	e002      	b.n	8003cae <UART_SetConfig+0x1ba>
 8003ca8:	2310      	movs	r3, #16
 8003caa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	4a51      	ldr	r2, [pc, #324]	; (8003df8 <UART_SetConfig+0x304>)
 8003cb4:	4293      	cmp	r3, r2
 8003cb6:	d17a      	bne.n	8003dae <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003cb8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003cbc:	2b08      	cmp	r3, #8
 8003cbe:	d824      	bhi.n	8003d0a <UART_SetConfig+0x216>
 8003cc0:	a201      	add	r2, pc, #4	; (adr r2, 8003cc8 <UART_SetConfig+0x1d4>)
 8003cc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cc6:	bf00      	nop
 8003cc8:	08003ced 	.word	0x08003ced
 8003ccc:	08003d0b 	.word	0x08003d0b
 8003cd0:	08003cf5 	.word	0x08003cf5
 8003cd4:	08003d0b 	.word	0x08003d0b
 8003cd8:	08003cfb 	.word	0x08003cfb
 8003cdc:	08003d0b 	.word	0x08003d0b
 8003ce0:	08003d0b 	.word	0x08003d0b
 8003ce4:	08003d0b 	.word	0x08003d0b
 8003ce8:	08003d03 	.word	0x08003d03
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003cec:	f7fe fc92 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8003cf0:	61f8      	str	r0, [r7, #28]
        break;
 8003cf2:	e010      	b.n	8003d16 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003cf4:	4b44      	ldr	r3, [pc, #272]	; (8003e08 <UART_SetConfig+0x314>)
 8003cf6:	61fb      	str	r3, [r7, #28]
        break;
 8003cf8:	e00d      	b.n	8003d16 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003cfa:	f7fe fbf3 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8003cfe:	61f8      	str	r0, [r7, #28]
        break;
 8003d00:	e009      	b.n	8003d16 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003d02:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d06:	61fb      	str	r3, [r7, #28]
        break;
 8003d08:	e005      	b.n	8003d16 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 8003d0a:	2300      	movs	r3, #0
 8003d0c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003d0e:	2301      	movs	r3, #1
 8003d10:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003d14:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8003d16:	69fb      	ldr	r3, [r7, #28]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	f000 8107 	beq.w	8003f2c <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	685a      	ldr	r2, [r3, #4]
 8003d22:	4613      	mov	r3, r2
 8003d24:	005b      	lsls	r3, r3, #1
 8003d26:	4413      	add	r3, r2
 8003d28:	69fa      	ldr	r2, [r7, #28]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d305      	bcc.n	8003d3a <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8003d34:	69fa      	ldr	r2, [r7, #28]
 8003d36:	429a      	cmp	r2, r3
 8003d38:	d903      	bls.n	8003d42 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 8003d3a:	2301      	movs	r3, #1
 8003d3c:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003d40:	e0f4      	b.n	8003f2c <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	2200      	movs	r2, #0
 8003d46:	461c      	mov	r4, r3
 8003d48:	4615      	mov	r5, r2
 8003d4a:	f04f 0200 	mov.w	r2, #0
 8003d4e:	f04f 0300 	mov.w	r3, #0
 8003d52:	022b      	lsls	r3, r5, #8
 8003d54:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003d58:	0222      	lsls	r2, r4, #8
 8003d5a:	68f9      	ldr	r1, [r7, #12]
 8003d5c:	6849      	ldr	r1, [r1, #4]
 8003d5e:	0849      	lsrs	r1, r1, #1
 8003d60:	2000      	movs	r0, #0
 8003d62:	4688      	mov	r8, r1
 8003d64:	4681      	mov	r9, r0
 8003d66:	eb12 0a08 	adds.w	sl, r2, r8
 8003d6a:	eb43 0b09 	adc.w	fp, r3, r9
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	685b      	ldr	r3, [r3, #4]
 8003d72:	2200      	movs	r2, #0
 8003d74:	603b      	str	r3, [r7, #0]
 8003d76:	607a      	str	r2, [r7, #4]
 8003d78:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003d7c:	4650      	mov	r0, sl
 8003d7e:	4659      	mov	r1, fp
 8003d80:	f7fc fa7e 	bl	8000280 <__aeabi_uldivmod>
 8003d84:	4602      	mov	r2, r0
 8003d86:	460b      	mov	r3, r1
 8003d88:	4613      	mov	r3, r2
 8003d8a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8003d8c:	69bb      	ldr	r3, [r7, #24]
 8003d8e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003d92:	d308      	bcc.n	8003da6 <UART_SetConfig+0x2b2>
 8003d94:	69bb      	ldr	r3, [r7, #24]
 8003d96:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003d9a:	d204      	bcs.n	8003da6 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	69ba      	ldr	r2, [r7, #24]
 8003da2:	60da      	str	r2, [r3, #12]
 8003da4:	e0c2      	b.n	8003f2c <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003dac:	e0be      	b.n	8003f2c <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	69db      	ldr	r3, [r3, #28]
 8003db2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003db6:	d16a      	bne.n	8003e8e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003db8:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003dbc:	2b08      	cmp	r3, #8
 8003dbe:	d834      	bhi.n	8003e2a <UART_SetConfig+0x336>
 8003dc0:	a201      	add	r2, pc, #4	; (adr r2, 8003dc8 <UART_SetConfig+0x2d4>)
 8003dc2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dc6:	bf00      	nop
 8003dc8:	08003ded 	.word	0x08003ded
 8003dcc:	08003e0d 	.word	0x08003e0d
 8003dd0:	08003e15 	.word	0x08003e15
 8003dd4:	08003e2b 	.word	0x08003e2b
 8003dd8:	08003e1b 	.word	0x08003e1b
 8003ddc:	08003e2b 	.word	0x08003e2b
 8003de0:	08003e2b 	.word	0x08003e2b
 8003de4:	08003e2b 	.word	0x08003e2b
 8003de8:	08003e23 	.word	0x08003e23
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003dec:	f7fe fc12 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8003df0:	61f8      	str	r0, [r7, #28]
        break;
 8003df2:	e020      	b.n	8003e36 <UART_SetConfig+0x342>
 8003df4:	efff69f3 	.word	0xefff69f3
 8003df8:	40008000 	.word	0x40008000
 8003dfc:	40013800 	.word	0x40013800
 8003e00:	40021000 	.word	0x40021000
 8003e04:	40004400 	.word	0x40004400
 8003e08:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e0c:	f7fe fc18 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8003e10:	61f8      	str	r0, [r7, #28]
        break;
 8003e12:	e010      	b.n	8003e36 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003e14:	4b4c      	ldr	r3, [pc, #304]	; (8003f48 <UART_SetConfig+0x454>)
 8003e16:	61fb      	str	r3, [r7, #28]
        break;
 8003e18:	e00d      	b.n	8003e36 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003e1a:	f7fe fb63 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8003e1e:	61f8      	str	r0, [r7, #28]
        break;
 8003e20:	e009      	b.n	8003e36 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003e26:	61fb      	str	r3, [r7, #28]
        break;
 8003e28:	e005      	b.n	8003e36 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003e34:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003e36:	69fb      	ldr	r3, [r7, #28]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d077      	beq.n	8003f2c <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003e3c:	69fb      	ldr	r3, [r7, #28]
 8003e3e:	005a      	lsls	r2, r3, #1
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	685b      	ldr	r3, [r3, #4]
 8003e44:	085b      	lsrs	r3, r3, #1
 8003e46:	441a      	add	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	685b      	ldr	r3, [r3, #4]
 8003e4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e50:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003e52:	69bb      	ldr	r3, [r7, #24]
 8003e54:	2b0f      	cmp	r3, #15
 8003e56:	d916      	bls.n	8003e86 <UART_SetConfig+0x392>
 8003e58:	69bb      	ldr	r3, [r7, #24]
 8003e5a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003e5e:	d212      	bcs.n	8003e86 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003e60:	69bb      	ldr	r3, [r7, #24]
 8003e62:	b29b      	uxth	r3, r3
 8003e64:	f023 030f 	bic.w	r3, r3, #15
 8003e68:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	085b      	lsrs	r3, r3, #1
 8003e6e:	b29b      	uxth	r3, r3
 8003e70:	f003 0307 	and.w	r3, r3, #7
 8003e74:	b29a      	uxth	r2, r3
 8003e76:	8afb      	ldrh	r3, [r7, #22]
 8003e78:	4313      	orrs	r3, r2
 8003e7a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	8afa      	ldrh	r2, [r7, #22]
 8003e82:	60da      	str	r2, [r3, #12]
 8003e84:	e052      	b.n	8003f2c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003e86:	2301      	movs	r3, #1
 8003e88:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003e8c:	e04e      	b.n	8003f2c <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003e8e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003e92:	2b08      	cmp	r3, #8
 8003e94:	d827      	bhi.n	8003ee6 <UART_SetConfig+0x3f2>
 8003e96:	a201      	add	r2, pc, #4	; (adr r2, 8003e9c <UART_SetConfig+0x3a8>)
 8003e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e9c:	08003ec1 	.word	0x08003ec1
 8003ea0:	08003ec9 	.word	0x08003ec9
 8003ea4:	08003ed1 	.word	0x08003ed1
 8003ea8:	08003ee7 	.word	0x08003ee7
 8003eac:	08003ed7 	.word	0x08003ed7
 8003eb0:	08003ee7 	.word	0x08003ee7
 8003eb4:	08003ee7 	.word	0x08003ee7
 8003eb8:	08003ee7 	.word	0x08003ee7
 8003ebc:	08003edf 	.word	0x08003edf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003ec0:	f7fe fba8 	bl	8002614 <HAL_RCC_GetPCLK1Freq>
 8003ec4:	61f8      	str	r0, [r7, #28]
        break;
 8003ec6:	e014      	b.n	8003ef2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003ec8:	f7fe fbba 	bl	8002640 <HAL_RCC_GetPCLK2Freq>
 8003ecc:	61f8      	str	r0, [r7, #28]
        break;
 8003ece:	e010      	b.n	8003ef2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ed0:	4b1d      	ldr	r3, [pc, #116]	; (8003f48 <UART_SetConfig+0x454>)
 8003ed2:	61fb      	str	r3, [r7, #28]
        break;
 8003ed4:	e00d      	b.n	8003ef2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003ed6:	f7fe fb05 	bl	80024e4 <HAL_RCC_GetSysClockFreq>
 8003eda:	61f8      	str	r0, [r7, #28]
        break;
 8003edc:	e009      	b.n	8003ef2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003ede:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ee2:	61fb      	str	r3, [r7, #28]
        break;
 8003ee4:	e005      	b.n	8003ef2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8003eea:	2301      	movs	r3, #1
 8003eec:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 8003ef0:	bf00      	nop
    }

    if (pclk != 0U)
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d019      	beq.n	8003f2c <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	085a      	lsrs	r2, r3, #1
 8003efe:	69fb      	ldr	r3, [r7, #28]
 8003f00:	441a      	add	r2, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	685b      	ldr	r3, [r3, #4]
 8003f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f0a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f0c:	69bb      	ldr	r3, [r7, #24]
 8003f0e:	2b0f      	cmp	r3, #15
 8003f10:	d909      	bls.n	8003f26 <UART_SetConfig+0x432>
 8003f12:	69bb      	ldr	r3, [r7, #24]
 8003f14:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f18:	d205      	bcs.n	8003f26 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60da      	str	r2, [r3, #12]
 8003f24:	e002      	b.n	8003f2c <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003f26:	2301      	movs	r3, #1
 8003f28:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	2200      	movs	r2, #0
 8003f30:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2200      	movs	r2, #0
 8003f36:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003f38:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	3728      	adds	r7, #40	; 0x28
 8003f40:	46bd      	mov	sp, r7
 8003f42:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003f46:	bf00      	nop
 8003f48:	00f42400 	.word	0x00f42400

08003f4c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003f4c:	b480      	push	{r7}
 8003f4e:	b083      	sub	sp, #12
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f58:	f003 0301 	and.w	r3, r3, #1
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d00a      	beq.n	8003f76 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	685b      	ldr	r3, [r3, #4]
 8003f66:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f7a:	f003 0302 	and.w	r3, r3, #2
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d00a      	beq.n	8003f98 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	430a      	orrs	r2, r1
 8003f96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00a      	beq.n	8003fba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	685b      	ldr	r3, [r3, #4]
 8003faa:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	430a      	orrs	r2, r1
 8003fb8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbe:	f003 0308 	and.w	r3, r3, #8
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d00a      	beq.n	8003fdc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	685b      	ldr	r3, [r3, #4]
 8003fcc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	430a      	orrs	r2, r1
 8003fda:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe0:	f003 0310 	and.w	r3, r3, #16
 8003fe4:	2b00      	cmp	r3, #0
 8003fe6:	d00a      	beq.n	8003ffe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	689b      	ldr	r3, [r3, #8]
 8003fee:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	430a      	orrs	r2, r1
 8003ffc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004002:	f003 0320 	and.w	r3, r3, #32
 8004006:	2b00      	cmp	r3, #0
 8004008:	d00a      	beq.n	8004020 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	430a      	orrs	r2, r1
 800401e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004024:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004028:	2b00      	cmp	r3, #0
 800402a:	d01a      	beq.n	8004062 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	685b      	ldr	r3, [r3, #4]
 8004032:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	430a      	orrs	r2, r1
 8004040:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004046:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800404a:	d10a      	bne.n	8004062 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004066:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800406a:	2b00      	cmp	r3, #0
 800406c:	d00a      	beq.n	8004084 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	430a      	orrs	r2, r1
 8004082:	605a      	str	r2, [r3, #4]
  }
}
 8004084:	bf00      	nop
 8004086:	370c      	adds	r7, #12
 8004088:	46bd      	mov	sp, r7
 800408a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800408e:	4770      	bx	lr

08004090 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004090:	b580      	push	{r7, lr}
 8004092:	b086      	sub	sp, #24
 8004094:	af02      	add	r7, sp, #8
 8004096:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	2200      	movs	r2, #0
 800409c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80040a0:	f7fd f9a8 	bl	80013f4 <HAL_GetTick>
 80040a4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f003 0308 	and.w	r3, r3, #8
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d10e      	bne.n	80040d2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040b4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040b8:	9300      	str	r3, [sp, #0]
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	2200      	movs	r2, #0
 80040be:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80040c2:	6878      	ldr	r0, [r7, #4]
 80040c4:	f000 f82d 	bl	8004122 <UART_WaitOnFlagUntilTimeout>
 80040c8:	4603      	mov	r3, r0
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d001      	beq.n	80040d2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040ce:	2303      	movs	r3, #3
 80040d0:	e023      	b.n	800411a <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	f003 0304 	and.w	r3, r3, #4
 80040dc:	2b04      	cmp	r3, #4
 80040de:	d10e      	bne.n	80040fe <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80040e0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80040e4:	9300      	str	r3, [sp, #0]
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2200      	movs	r2, #0
 80040ea:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	f000 f817 	bl	8004122 <UART_WaitOnFlagUntilTimeout>
 80040f4:	4603      	mov	r3, r0
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d001      	beq.n	80040fe <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80040fa:	2303      	movs	r3, #3
 80040fc:	e00d      	b.n	800411a <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	2220      	movs	r2, #32
 8004102:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2220      	movs	r2, #32
 8004108:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2200      	movs	r2, #0
 800410e:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004118:	2300      	movs	r3, #0
}
 800411a:	4618      	mov	r0, r3
 800411c:	3710      	adds	r7, #16
 800411e:	46bd      	mov	sp, r7
 8004120:	bd80      	pop	{r7, pc}

08004122 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004122:	b580      	push	{r7, lr}
 8004124:	b09c      	sub	sp, #112	; 0x70
 8004126:	af00      	add	r7, sp, #0
 8004128:	60f8      	str	r0, [r7, #12]
 800412a:	60b9      	str	r1, [r7, #8]
 800412c:	603b      	str	r3, [r7, #0]
 800412e:	4613      	mov	r3, r2
 8004130:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004132:	e0a5      	b.n	8004280 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004134:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004136:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800413a:	f000 80a1 	beq.w	8004280 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800413e:	f7fd f959 	bl	80013f4 <HAL_GetTick>
 8004142:	4602      	mov	r2, r0
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	1ad3      	subs	r3, r2, r3
 8004148:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800414a:	429a      	cmp	r2, r3
 800414c:	d302      	bcc.n	8004154 <UART_WaitOnFlagUntilTimeout+0x32>
 800414e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004150:	2b00      	cmp	r3, #0
 8004152:	d13e      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800415c:	e853 3f00 	ldrex	r3, [r3]
 8004160:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8004162:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004164:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8004168:	667b      	str	r3, [r7, #100]	; 0x64
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	461a      	mov	r2, r3
 8004170:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004172:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004174:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004176:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8004178:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800417a:	e841 2300 	strex	r3, r2, [r1]
 800417e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8004180:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004182:	2b00      	cmp	r3, #0
 8004184:	d1e6      	bne.n	8004154 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	3308      	adds	r3, #8
 800418c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800418e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004190:	e853 3f00 	ldrex	r3, [r3]
 8004194:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	f023 0301 	bic.w	r3, r3, #1
 800419c:	663b      	str	r3, [r7, #96]	; 0x60
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	3308      	adds	r3, #8
 80041a4:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 80041a6:	64ba      	str	r2, [r7, #72]	; 0x48
 80041a8:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041aa:	6c79      	ldr	r1, [r7, #68]	; 0x44
 80041ac:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80041ae:	e841 2300 	strex	r3, r2, [r1]
 80041b2:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80041b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d1e5      	bne.n	8004186 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2220      	movs	r2, #32
 80041be:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2220      	movs	r2, #32
 80041c4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	2200      	movs	r2, #0
 80041ca:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e067      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d04f      	beq.n	8004280 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	69db      	ldr	r3, [r3, #28]
 80041e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80041ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80041ee:	d147      	bne.n	8004280 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041f8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80041fa:	68fb      	ldr	r3, [r7, #12]
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004200:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004202:	e853 3f00 	ldrex	r3, [r3]
 8004206:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004208:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800420a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800420e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	461a      	mov	r2, r3
 8004216:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004218:	637b      	str	r3, [r7, #52]	; 0x34
 800421a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800421c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800421e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004220:	e841 2300 	strex	r3, r2, [r1]
 8004224:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004226:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004228:	2b00      	cmp	r3, #0
 800422a:	d1e6      	bne.n	80041fa <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	3308      	adds	r3, #8
 8004232:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	e853 3f00 	ldrex	r3, [r3]
 800423a:	613b      	str	r3, [r7, #16]
   return(result);
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	f023 0301 	bic.w	r3, r3, #1
 8004242:	66bb      	str	r3, [r7, #104]	; 0x68
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	3308      	adds	r3, #8
 800424a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800424c:	623a      	str	r2, [r7, #32]
 800424e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004250:	69f9      	ldr	r1, [r7, #28]
 8004252:	6a3a      	ldr	r2, [r7, #32]
 8004254:	e841 2300 	strex	r3, r2, [r1]
 8004258:	61bb      	str	r3, [r7, #24]
   return(result);
 800425a:	69bb      	ldr	r3, [r7, #24]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d1e5      	bne.n	800422c <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2220      	movs	r2, #32
 800426a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	2220      	movs	r2, #32
 8004270:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	2200      	movs	r2, #0
 8004278:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800427c:	2303      	movs	r3, #3
 800427e:	e010      	b.n	80042a2 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	69da      	ldr	r2, [r3, #28]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	4013      	ands	r3, r2
 800428a:	68ba      	ldr	r2, [r7, #8]
 800428c:	429a      	cmp	r2, r3
 800428e:	bf0c      	ite	eq
 8004290:	2301      	moveq	r3, #1
 8004292:	2300      	movne	r3, #0
 8004294:	b2db      	uxtb	r3, r3
 8004296:	461a      	mov	r2, r3
 8004298:	79fb      	ldrb	r3, [r7, #7]
 800429a:	429a      	cmp	r2, r3
 800429c:	f43f af4a 	beq.w	8004134 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3770      	adds	r7, #112	; 0x70
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ac:	b480      	push	{r7}
 80042ae:	b097      	sub	sp, #92	; 0x5c
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	60f8      	str	r0, [r7, #12]
 80042b4:	60b9      	str	r1, [r7, #8]
 80042b6:	4613      	mov	r3, r2
 80042b8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	68ba      	ldr	r2, [r7, #8]
 80042be:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	88fa      	ldrh	r2, [r7, #6]
 80042c4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	88fa      	ldrh	r2, [r7, #6]
 80042cc:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	2200      	movs	r2, #0
 80042d4:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042de:	d10e      	bne.n	80042fe <UART_Start_Receive_IT+0x52>
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	691b      	ldr	r3, [r3, #16]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d105      	bne.n	80042f4 <UART_Start_Receive_IT+0x48>
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	f240 12ff 	movw	r2, #511	; 0x1ff
 80042ee:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042f2:	e02d      	b.n	8004350 <UART_Start_Receive_IT+0xa4>
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	22ff      	movs	r2, #255	; 0xff
 80042f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80042fc:	e028      	b.n	8004350 <UART_Start_Receive_IT+0xa4>
 80042fe:	68fb      	ldr	r3, [r7, #12]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b00      	cmp	r3, #0
 8004304:	d10d      	bne.n	8004322 <UART_Start_Receive_IT+0x76>
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	691b      	ldr	r3, [r3, #16]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d104      	bne.n	8004318 <UART_Start_Receive_IT+0x6c>
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	22ff      	movs	r2, #255	; 0xff
 8004312:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004316:	e01b      	b.n	8004350 <UART_Start_Receive_IT+0xa4>
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	227f      	movs	r2, #127	; 0x7f
 800431c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004320:	e016      	b.n	8004350 <UART_Start_Receive_IT+0xa4>
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	689b      	ldr	r3, [r3, #8]
 8004326:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800432a:	d10d      	bne.n	8004348 <UART_Start_Receive_IT+0x9c>
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	691b      	ldr	r3, [r3, #16]
 8004330:	2b00      	cmp	r3, #0
 8004332:	d104      	bne.n	800433e <UART_Start_Receive_IT+0x92>
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	227f      	movs	r2, #127	; 0x7f
 8004338:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800433c:	e008      	b.n	8004350 <UART_Start_Receive_IT+0xa4>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	223f      	movs	r2, #63	; 0x3f
 8004342:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8004346:	e003      	b.n	8004350 <UART_Start_Receive_IT+0xa4>
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	2200      	movs	r2, #0
 8004354:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	2222      	movs	r2, #34	; 0x22
 800435c:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	3308      	adds	r3, #8
 8004364:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004368:	e853 3f00 	ldrex	r3, [r3]
 800436c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800436e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004370:	f043 0301 	orr.w	r3, r3, #1
 8004374:	657b      	str	r3, [r7, #84]	; 0x54
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	3308      	adds	r3, #8
 800437c:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800437e:	64ba      	str	r2, [r7, #72]	; 0x48
 8004380:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004384:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004386:	e841 2300 	strex	r3, r2, [r1]
 800438a:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800438c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d1e5      	bne.n	800435e <UART_Start_Receive_IT+0xb2>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	689b      	ldr	r3, [r3, #8]
 8004396:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800439a:	d107      	bne.n	80043ac <UART_Start_Receive_IT+0x100>
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	691b      	ldr	r3, [r3, #16]
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d103      	bne.n	80043ac <UART_Start_Receive_IT+0x100>
  {
    huart->RxISR = UART_RxISR_16BIT;
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	4a24      	ldr	r2, [pc, #144]	; (8004438 <UART_Start_Receive_IT+0x18c>)
 80043a8:	665a      	str	r2, [r3, #100]	; 0x64
 80043aa:	e002      	b.n	80043b2 <UART_Start_Receive_IT+0x106>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a23      	ldr	r2, [pc, #140]	; (800443c <UART_Start_Receive_IT+0x190>)
 80043b0:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 80043b2:	68fb      	ldr	r3, [r7, #12]
 80043b4:	2200      	movs	r2, #0
 80043b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	691b      	ldr	r3, [r3, #16]
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d019      	beq.n	80043f6 <UART_Start_Receive_IT+0x14a>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043ca:	e853 3f00 	ldrex	r3, [r3]
 80043ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043d2:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80043d6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	461a      	mov	r2, r3
 80043de:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80043e0:	637b      	str	r3, [r7, #52]	; 0x34
 80043e2:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043e4:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80043e6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80043e8:	e841 2300 	strex	r3, r2, [r1]
 80043ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80043ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d1e6      	bne.n	80043c2 <UART_Start_Receive_IT+0x116>
 80043f4:	e018      	b.n	8004428 <UART_Start_Receive_IT+0x17c>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	e853 3f00 	ldrex	r3, [r3]
 8004402:	613b      	str	r3, [r7, #16]
   return(result);
 8004404:	693b      	ldr	r3, [r7, #16]
 8004406:	f043 0320 	orr.w	r3, r3, #32
 800440a:	653b      	str	r3, [r7, #80]	; 0x50
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	461a      	mov	r2, r3
 8004412:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004414:	623b      	str	r3, [r7, #32]
 8004416:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004418:	69f9      	ldr	r1, [r7, #28]
 800441a:	6a3a      	ldr	r2, [r7, #32]
 800441c:	e841 2300 	strex	r3, r2, [r1]
 8004420:	61bb      	str	r3, [r7, #24]
   return(result);
 8004422:	69bb      	ldr	r3, [r7, #24]
 8004424:	2b00      	cmp	r3, #0
 8004426:	d1e6      	bne.n	80043f6 <UART_Start_Receive_IT+0x14a>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004428:	2300      	movs	r3, #0
}
 800442a:	4618      	mov	r0, r3
 800442c:	375c      	adds	r7, #92	; 0x5c
 800442e:	46bd      	mov	sp, r7
 8004430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004434:	4770      	bx	lr
 8004436:	bf00      	nop
 8004438:	080046e7 	.word	0x080046e7
 800443c:	08004587 	.word	0x08004587

08004440 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004440:	b480      	push	{r7}
 8004442:	b095      	sub	sp, #84	; 0x54
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800444e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004450:	e853 3f00 	ldrex	r3, [r3]
 8004454:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800445c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004466:	643b      	str	r3, [r7, #64]	; 0x40
 8004468:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800446a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800446c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800446e:	e841 2300 	strex	r3, r2, [r1]
 8004472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004476:	2b00      	cmp	r3, #0
 8004478:	d1e6      	bne.n	8004448 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	3308      	adds	r3, #8
 8004480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004482:	6a3b      	ldr	r3, [r7, #32]
 8004484:	e853 3f00 	ldrex	r3, [r3]
 8004488:	61fb      	str	r3, [r7, #28]
   return(result);
 800448a:	69fb      	ldr	r3, [r7, #28]
 800448c:	f023 0301 	bic.w	r3, r3, #1
 8004490:	64bb      	str	r3, [r7, #72]	; 0x48
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	3308      	adds	r3, #8
 8004498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800449a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800449c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80044a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80044a2:	e841 2300 	strex	r3, r2, [r1]
 80044a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80044a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d1e5      	bne.n	800447a <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d118      	bne.n	80044e8 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	e853 3f00 	ldrex	r3, [r3]
 80044c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80044c4:	68bb      	ldr	r3, [r7, #8]
 80044c6:	f023 0310 	bic.w	r3, r3, #16
 80044ca:	647b      	str	r3, [r7, #68]	; 0x44
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	461a      	mov	r2, r3
 80044d2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80044d4:	61bb      	str	r3, [r7, #24]
 80044d6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044d8:	6979      	ldr	r1, [r7, #20]
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	e841 2300 	strex	r3, r2, [r1]
 80044e0:	613b      	str	r3, [r7, #16]
   return(result);
 80044e2:	693b      	ldr	r3, [r7, #16]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d1e6      	bne.n	80044b6 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2220      	movs	r2, #32
 80044ec:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	2200      	movs	r2, #0
 80044f2:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	2200      	movs	r2, #0
 80044f8:	665a      	str	r2, [r3, #100]	; 0x64
}
 80044fa:	bf00      	nop
 80044fc:	3754      	adds	r7, #84	; 0x54
 80044fe:	46bd      	mov	sp, r7
 8004500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004504:	4770      	bx	lr

08004506 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004506:	b580      	push	{r7, lr}
 8004508:	b084      	sub	sp, #16
 800450a:	af00      	add	r7, sp, #0
 800450c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004512:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	2200      	movs	r2, #0
 8004518:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	2200      	movs	r2, #0
 8004520:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004524:	68f8      	ldr	r0, [r7, #12]
 8004526:	f7ff facf 	bl	8003ac8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800452a:	bf00      	nop
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}

08004532 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004532:	b580      	push	{r7, lr}
 8004534:	b088      	sub	sp, #32
 8004536:	af00      	add	r7, sp, #0
 8004538:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	e853 3f00 	ldrex	r3, [r3]
 8004546:	60bb      	str	r3, [r7, #8]
   return(result);
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800454e:	61fb      	str	r3, [r7, #28]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	461a      	mov	r2, r3
 8004556:	69fb      	ldr	r3, [r7, #28]
 8004558:	61bb      	str	r3, [r7, #24]
 800455a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800455c:	6979      	ldr	r1, [r7, #20]
 800455e:	69ba      	ldr	r2, [r7, #24]
 8004560:	e841 2300 	strex	r3, r2, [r1]
 8004564:	613b      	str	r3, [r7, #16]
   return(result);
 8004566:	693b      	ldr	r3, [r7, #16]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d1e6      	bne.n	800453a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	2220      	movs	r2, #32
 8004570:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2200      	movs	r2, #0
 8004576:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004578:	6878      	ldr	r0, [r7, #4]
 800457a:	f7ff fa9b 	bl	8003ab4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800457e:	bf00      	nop
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}

08004586 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004586:	b580      	push	{r7, lr}
 8004588:	b096      	sub	sp, #88	; 0x58
 800458a:	af00      	add	r7, sp, #0
 800458c:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8004594:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800459c:	2b22      	cmp	r3, #34	; 0x22
 800459e:	f040 8094 	bne.w	80046ca <UART_RxISR_8BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80045a8:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80045ac:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80045b0:	b2d9      	uxtb	r1, r3
 80045b2:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80045b6:	b2da      	uxtb	r2, r3
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045bc:	400a      	ands	r2, r1
 80045be:	b2d2      	uxtb	r2, r2
 80045c0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	1c5a      	adds	r2, r3, #1
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045d2:	b29b      	uxth	r3, r3
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d179      	bne.n	80046de <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f2:	e853 3f00 	ldrex	r3, [r3]
 80045f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80045f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045fa:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045fe:	653b      	str	r3, [r7, #80]	; 0x50
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	461a      	mov	r2, r3
 8004606:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004608:	647b      	str	r3, [r7, #68]	; 0x44
 800460a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800460c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800460e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004610:	e841 2300 	strex	r3, r2, [r1]
 8004614:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004616:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004618:	2b00      	cmp	r3, #0
 800461a:	d1e6      	bne.n	80045ea <UART_RxISR_8BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	3308      	adds	r3, #8
 8004622:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004626:	e853 3f00 	ldrex	r3, [r3]
 800462a:	623b      	str	r3, [r7, #32]
   return(result);
 800462c:	6a3b      	ldr	r3, [r7, #32]
 800462e:	f023 0301 	bic.w	r3, r3, #1
 8004632:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	3308      	adds	r3, #8
 800463a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800463c:	633a      	str	r2, [r7, #48]	; 0x30
 800463e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004640:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004642:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004644:	e841 2300 	strex	r3, r2, [r1]
 8004648:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800464a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800464c:	2b00      	cmp	r3, #0
 800464e:	d1e5      	bne.n	800461c <UART_RxISR_8BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	2220      	movs	r2, #32
 8004654:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2200      	movs	r2, #0
 800465a:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004660:	2b01      	cmp	r3, #1
 8004662:	d12e      	bne.n	80046c2 <UART_RxISR_8BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	2200      	movs	r2, #0
 8004668:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004670:	693b      	ldr	r3, [r7, #16]
 8004672:	e853 3f00 	ldrex	r3, [r3]
 8004676:	60fb      	str	r3, [r7, #12]
   return(result);
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	f023 0310 	bic.w	r3, r3, #16
 800467e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	461a      	mov	r2, r3
 8004686:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004688:	61fb      	str	r3, [r7, #28]
 800468a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800468c:	69b9      	ldr	r1, [r7, #24]
 800468e:	69fa      	ldr	r2, [r7, #28]
 8004690:	e841 2300 	strex	r3, r2, [r1]
 8004694:	617b      	str	r3, [r7, #20]
   return(result);
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	2b00      	cmp	r3, #0
 800469a:	d1e6      	bne.n	800466a <UART_RxISR_8BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	f003 0310 	and.w	r3, r3, #16
 80046a6:	2b10      	cmp	r3, #16
 80046a8:	d103      	bne.n	80046b2 <UART_RxISR_8BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	2210      	movs	r2, #16
 80046b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80046b8:	4619      	mov	r1, r3
 80046ba:	6878      	ldr	r0, [r7, #4]
 80046bc:	f7ff fa0e 	bl	8003adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80046c0:	e00d      	b.n	80046de <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc f9ec 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 80046c8:	e009      	b.n	80046de <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	8b1b      	ldrh	r3, [r3, #24]
 80046d0:	b29a      	uxth	r2, r3
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0208 	orr.w	r2, r2, #8
 80046da:	b292      	uxth	r2, r2
 80046dc:	831a      	strh	r2, [r3, #24]
}
 80046de:	bf00      	nop
 80046e0:	3758      	adds	r7, #88	; 0x58
 80046e2:	46bd      	mov	sp, r7
 80046e4:	bd80      	pop	{r7, pc}

080046e6 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80046e6:	b580      	push	{r7, lr}
 80046e8:	b096      	sub	sp, #88	; 0x58
 80046ea:	af00      	add	r7, sp, #0
 80046ec:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80046f4:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80046fc:	2b22      	cmp	r3, #34	; 0x22
 80046fe:	f040 8094 	bne.w	800482a <UART_RxISR_16BIT+0x144>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8004708:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004710:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8004712:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8004716:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800471a:	4013      	ands	r3, r2
 800471c:	b29a      	uxth	r2, r3
 800471e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004720:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004726:	1c9a      	adds	r2, r3, #2
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004732:	b29b      	uxth	r3, r3
 8004734:	3b01      	subs	r3, #1
 8004736:	b29a      	uxth	r2, r3
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8004744:	b29b      	uxth	r3, r3
 8004746:	2b00      	cmp	r3, #0
 8004748:	d179      	bne.n	800483e <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004752:	e853 3f00 	ldrex	r3, [r3]
 8004756:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004758:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800475a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800475e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	461a      	mov	r2, r3
 8004766:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004768:	643b      	str	r3, [r7, #64]	; 0x40
 800476a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800476c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800476e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004770:	e841 2300 	strex	r3, r2, [r1]
 8004774:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004776:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1e6      	bne.n	800474a <UART_RxISR_16BIT+0x64>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	3308      	adds	r3, #8
 8004782:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004784:	6a3b      	ldr	r3, [r7, #32]
 8004786:	e853 3f00 	ldrex	r3, [r3]
 800478a:	61fb      	str	r3, [r7, #28]
   return(result);
 800478c:	69fb      	ldr	r3, [r7, #28]
 800478e:	f023 0301 	bic.w	r3, r3, #1
 8004792:	64bb      	str	r3, [r7, #72]	; 0x48
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	3308      	adds	r3, #8
 800479a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800479c:	62fa      	str	r2, [r7, #44]	; 0x2c
 800479e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047a0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80047a2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80047a4:	e841 2300 	strex	r3, r2, [r1]
 80047a8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80047aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d1e5      	bne.n	800477c <UART_RxISR_16BIT+0x96>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2220      	movs	r2, #32
 80047b4:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2200      	movs	r2, #0
 80047ba:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80047c0:	2b01      	cmp	r3, #1
 80047c2:	d12e      	bne.n	8004822 <UART_RxISR_16BIT+0x13c>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	2200      	movs	r2, #0
 80047c8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047d0:	68fb      	ldr	r3, [r7, #12]
 80047d2:	e853 3f00 	ldrex	r3, [r3]
 80047d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80047d8:	68bb      	ldr	r3, [r7, #8]
 80047da:	f023 0310 	bic.w	r3, r3, #16
 80047de:	647b      	str	r3, [r7, #68]	; 0x44
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	461a      	mov	r2, r3
 80047e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047e8:	61bb      	str	r3, [r7, #24]
 80047ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ec:	6979      	ldr	r1, [r7, #20]
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	e841 2300 	strex	r3, r2, [r1]
 80047f4:	613b      	str	r3, [r7, #16]
   return(result);
 80047f6:	693b      	ldr	r3, [r7, #16]
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e6      	bne.n	80047ca <UART_RxISR_16BIT+0xe4>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	69db      	ldr	r3, [r3, #28]
 8004802:	f003 0310 	and.w	r3, r3, #16
 8004806:	2b10      	cmp	r3, #16
 8004808:	d103      	bne.n	8004812 <UART_RxISR_16BIT+0x12c>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	2210      	movs	r2, #16
 8004810:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8004818:	4619      	mov	r1, r3
 800481a:	6878      	ldr	r0, [r7, #4]
 800481c:	f7ff f95e 	bl	8003adc <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004820:	e00d      	b.n	800483e <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8004822:	6878      	ldr	r0, [r7, #4]
 8004824:	f7fc f93c 	bl	8000aa0 <HAL_UART_RxCpltCallback>
}
 8004828:	e009      	b.n	800483e <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	8b1b      	ldrh	r3, [r3, #24]
 8004830:	b29a      	uxth	r2, r3
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f042 0208 	orr.w	r2, r2, #8
 800483a:	b292      	uxth	r2, r2
 800483c:	831a      	strh	r2, [r3, #24]
}
 800483e:	bf00      	nop
 8004840:	3758      	adds	r7, #88	; 0x58
 8004842:	46bd      	mov	sp, r7
 8004844:	bd80      	pop	{r7, pc}

08004846 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8004846:	b480      	push	{r7}
 8004848:	b083      	sub	sp, #12
 800484a:	af00      	add	r7, sp, #0
 800484c:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 800484e:	bf00      	nop
 8004850:	370c      	adds	r7, #12
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
	...

0800485c <__NVIC_SetPriority>:
{
 800485c:	b480      	push	{r7}
 800485e:	b083      	sub	sp, #12
 8004860:	af00      	add	r7, sp, #0
 8004862:	4603      	mov	r3, r0
 8004864:	6039      	str	r1, [r7, #0]
 8004866:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004868:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800486c:	2b00      	cmp	r3, #0
 800486e:	db0a      	blt.n	8004886 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004870:	683b      	ldr	r3, [r7, #0]
 8004872:	b2da      	uxtb	r2, r3
 8004874:	490c      	ldr	r1, [pc, #48]	; (80048a8 <__NVIC_SetPriority+0x4c>)
 8004876:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800487a:	0112      	lsls	r2, r2, #4
 800487c:	b2d2      	uxtb	r2, r2
 800487e:	440b      	add	r3, r1
 8004880:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004884:	e00a      	b.n	800489c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	b2da      	uxtb	r2, r3
 800488a:	4908      	ldr	r1, [pc, #32]	; (80048ac <__NVIC_SetPriority+0x50>)
 800488c:	79fb      	ldrb	r3, [r7, #7]
 800488e:	f003 030f 	and.w	r3, r3, #15
 8004892:	3b04      	subs	r3, #4
 8004894:	0112      	lsls	r2, r2, #4
 8004896:	b2d2      	uxtb	r2, r2
 8004898:	440b      	add	r3, r1
 800489a:	761a      	strb	r2, [r3, #24]
}
 800489c:	bf00      	nop
 800489e:	370c      	adds	r7, #12
 80048a0:	46bd      	mov	sp, r7
 80048a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a6:	4770      	bx	lr
 80048a8:	e000e100 	.word	0xe000e100
 80048ac:	e000ed00 	.word	0xe000ed00

080048b0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80048b0:	b580      	push	{r7, lr}
 80048b2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80048b4:	4b05      	ldr	r3, [pc, #20]	; (80048cc <SysTick_Handler+0x1c>)
 80048b6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80048b8:	f002 fc9a 	bl	80071f0 <xTaskGetSchedulerState>
 80048bc:	4603      	mov	r3, r0
 80048be:	2b01      	cmp	r3, #1
 80048c0:	d001      	beq.n	80048c6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80048c2:	f003 fd79 	bl	80083b8 <xPortSysTickHandler>
  }
}
 80048c6:	bf00      	nop
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	e000e010 	.word	0xe000e010

080048d0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80048d4:	2100      	movs	r1, #0
 80048d6:	f06f 0004 	mvn.w	r0, #4
 80048da:	f7ff ffbf 	bl	800485c <__NVIC_SetPriority>
#endif
}
 80048de:	bf00      	nop
 80048e0:	bd80      	pop	{r7, pc}
	...

080048e4 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80048e4:	b480      	push	{r7}
 80048e6:	b083      	sub	sp, #12
 80048e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048ea:	f3ef 8305 	mrs	r3, IPSR
 80048ee:	603b      	str	r3, [r7, #0]
  return(result);
 80048f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d003      	beq.n	80048fe <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80048f6:	f06f 0305 	mvn.w	r3, #5
 80048fa:	607b      	str	r3, [r7, #4]
 80048fc:	e00c      	b.n	8004918 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048fe:	4b0a      	ldr	r3, [pc, #40]	; (8004928 <osKernelInitialize+0x44>)
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d105      	bne.n	8004912 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004906:	4b08      	ldr	r3, [pc, #32]	; (8004928 <osKernelInitialize+0x44>)
 8004908:	2201      	movs	r2, #1
 800490a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800490c:	2300      	movs	r3, #0
 800490e:	607b      	str	r3, [r7, #4]
 8004910:	e002      	b.n	8004918 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004912:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004916:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004918:	687b      	ldr	r3, [r7, #4]
}
 800491a:	4618      	mov	r0, r3
 800491c:	370c      	adds	r7, #12
 800491e:	46bd      	mov	sp, r7
 8004920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004924:	4770      	bx	lr
 8004926:	bf00      	nop
 8004928:	2000022c 	.word	0x2000022c

0800492c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800492c:	b580      	push	{r7, lr}
 800492e:	b082      	sub	sp, #8
 8004930:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004932:	f3ef 8305 	mrs	r3, IPSR
 8004936:	603b      	str	r3, [r7, #0]
  return(result);
 8004938:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800493a:	2b00      	cmp	r3, #0
 800493c:	d003      	beq.n	8004946 <osKernelStart+0x1a>
    stat = osErrorISR;
 800493e:	f06f 0305 	mvn.w	r3, #5
 8004942:	607b      	str	r3, [r7, #4]
 8004944:	e010      	b.n	8004968 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004946:	4b0b      	ldr	r3, [pc, #44]	; (8004974 <osKernelStart+0x48>)
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	2b01      	cmp	r3, #1
 800494c:	d109      	bne.n	8004962 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800494e:	f7ff ffbf 	bl	80048d0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004952:	4b08      	ldr	r3, [pc, #32]	; (8004974 <osKernelStart+0x48>)
 8004954:	2202      	movs	r2, #2
 8004956:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004958:	f001 ff1c 	bl	8006794 <vTaskStartScheduler>
      stat = osOK;
 800495c:	2300      	movs	r3, #0
 800495e:	607b      	str	r3, [r7, #4]
 8004960:	e002      	b.n	8004968 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004962:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004966:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004968:	687b      	ldr	r3, [r7, #4]
}
 800496a:	4618      	mov	r0, r3
 800496c:	3708      	adds	r7, #8
 800496e:	46bd      	mov	sp, r7
 8004970:	bd80      	pop	{r7, pc}
 8004972:	bf00      	nop
 8004974:	2000022c 	.word	0x2000022c

08004978 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004978:	b580      	push	{r7, lr}
 800497a:	b08e      	sub	sp, #56	; 0x38
 800497c:	af04      	add	r7, sp, #16
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004984:	2300      	movs	r3, #0
 8004986:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004988:	f3ef 8305 	mrs	r3, IPSR
 800498c:	617b      	str	r3, [r7, #20]
  return(result);
 800498e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004990:	2b00      	cmp	r3, #0
 8004992:	d17e      	bne.n	8004a92 <osThreadNew+0x11a>
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	2b00      	cmp	r3, #0
 8004998:	d07b      	beq.n	8004a92 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800499a:	2340      	movs	r3, #64	; 0x40
 800499c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800499e:	2318      	movs	r3, #24
 80049a0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80049a2:	2300      	movs	r3, #0
 80049a4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 80049a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80049aa:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d045      	beq.n	8004a3e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d002      	beq.n	80049c0 <osThreadNew+0x48>
        name = attr->name;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	699b      	ldr	r3, [r3, #24]
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d002      	beq.n	80049ce <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	699b      	ldr	r3, [r3, #24]
 80049cc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80049ce:	69fb      	ldr	r3, [r7, #28]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d008      	beq.n	80049e6 <osThreadNew+0x6e>
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	2b38      	cmp	r3, #56	; 0x38
 80049d8:	d805      	bhi.n	80049e6 <osThreadNew+0x6e>
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	685b      	ldr	r3, [r3, #4]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d001      	beq.n	80049ea <osThreadNew+0x72>
        return (NULL);
 80049e6:	2300      	movs	r3, #0
 80049e8:	e054      	b.n	8004a94 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	695b      	ldr	r3, [r3, #20]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	695b      	ldr	r3, [r3, #20]
 80049f6:	089b      	lsrs	r3, r3, #2
 80049f8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	689b      	ldr	r3, [r3, #8]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d00e      	beq.n	8004a20 <osThreadNew+0xa8>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	2bbb      	cmp	r3, #187	; 0xbb
 8004a08:	d90a      	bls.n	8004a20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d006      	beq.n	8004a20 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	695b      	ldr	r3, [r3, #20]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d002      	beq.n	8004a20 <osThreadNew+0xa8>
        mem = 1;
 8004a1a:	2301      	movs	r3, #1
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e010      	b.n	8004a42 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	689b      	ldr	r3, [r3, #8]
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d10c      	bne.n	8004a42 <osThreadNew+0xca>
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d108      	bne.n	8004a42 <osThreadNew+0xca>
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d104      	bne.n	8004a42 <osThreadNew+0xca>
          mem = 0;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	61bb      	str	r3, [r7, #24]
 8004a3c:	e001      	b.n	8004a42 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004a42:	69bb      	ldr	r3, [r7, #24]
 8004a44:	2b01      	cmp	r3, #1
 8004a46:	d110      	bne.n	8004a6a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004a50:	9202      	str	r2, [sp, #8]
 8004a52:	9301      	str	r3, [sp, #4]
 8004a54:	69fb      	ldr	r3, [r7, #28]
 8004a56:	9300      	str	r3, [sp, #0]
 8004a58:	68bb      	ldr	r3, [r7, #8]
 8004a5a:	6a3a      	ldr	r2, [r7, #32]
 8004a5c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a5e:	68f8      	ldr	r0, [r7, #12]
 8004a60:	f001 fc6e 	bl	8006340 <xTaskCreateStatic>
 8004a64:	4603      	mov	r3, r0
 8004a66:	613b      	str	r3, [r7, #16]
 8004a68:	e013      	b.n	8004a92 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a6a:	69bb      	ldr	r3, [r7, #24]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d110      	bne.n	8004a92 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a70:	6a3b      	ldr	r3, [r7, #32]
 8004a72:	b29a      	uxth	r2, r3
 8004a74:	f107 0310 	add.w	r3, r7, #16
 8004a78:	9301      	str	r3, [sp, #4]
 8004a7a:	69fb      	ldr	r3, [r7, #28]
 8004a7c:	9300      	str	r3, [sp, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004a82:	68f8      	ldr	r0, [r7, #12]
 8004a84:	f001 fcb9 	bl	80063fa <xTaskCreate>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d001      	beq.n	8004a92 <osThreadNew+0x11a>
            hTask = NULL;
 8004a8e:	2300      	movs	r3, #0
 8004a90:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a92:	693b      	ldr	r3, [r7, #16]
}
 8004a94:	4618      	mov	r0, r3
 8004a96:	3728      	adds	r7, #40	; 0x28
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	bd80      	pop	{r7, pc}

08004a9c <osThreadGetName>:

const char *osThreadGetName (osThreadId_t thread_id) {
 8004a9c:	b580      	push	{r7, lr}
 8004a9e:	b086      	sub	sp, #24
 8004aa0:	af00      	add	r7, sp, #0
 8004aa2:	6078      	str	r0, [r7, #4]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004aa8:	f3ef 8305 	mrs	r3, IPSR
 8004aac:	60fb      	str	r3, [r7, #12]
  return(result);
 8004aae:	68fb      	ldr	r3, [r7, #12]
  const char *name;

  if (IS_IRQ() || (hTask == NULL)) {
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d102      	bne.n	8004aba <osThreadGetName+0x1e>
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d102      	bne.n	8004ac0 <osThreadGetName+0x24>
    name = NULL;
 8004aba:	2300      	movs	r3, #0
 8004abc:	617b      	str	r3, [r7, #20]
 8004abe:	e003      	b.n	8004ac8 <osThreadGetName+0x2c>
  } else {
    name = pcTaskGetName (hTask);
 8004ac0:	6938      	ldr	r0, [r7, #16]
 8004ac2:	f001 ff93 	bl	80069ec <pcTaskGetName>
 8004ac6:	6178      	str	r0, [r7, #20]
  }

  return (name);
 8004ac8:	697b      	ldr	r3, [r7, #20]
}
 8004aca:	4618      	mov	r0, r3
 8004acc:	3718      	adds	r7, #24
 8004ace:	46bd      	mov	sp, r7
 8004ad0:	bd80      	pop	{r7, pc}

08004ad2 <osThreadGetId>:

osThreadId_t osThreadGetId (void) {
 8004ad2:	b580      	push	{r7, lr}
 8004ad4:	b082      	sub	sp, #8
 8004ad6:	af00      	add	r7, sp, #0
  osThreadId_t id;

  id = (osThreadId_t)xTaskGetCurrentTaskHandle();
 8004ad8:	f002 fb7a 	bl	80071d0 <xTaskGetCurrentTaskHandle>
 8004adc:	6078      	str	r0, [r7, #4]

  return (id);
 8004ade:	687b      	ldr	r3, [r7, #4]
}
 8004ae0:	4618      	mov	r0, r3
 8004ae2:	3708      	adds	r7, #8
 8004ae4:	46bd      	mov	sp, r7
 8004ae6:	bd80      	pop	{r7, pc}

08004ae8 <osThreadExit>:

  return (stat);
}
#endif /* (configUSE_OS2_THREAD_SUSPEND_RESUME == 1) */

__NO_RETURN void osThreadExit (void) {
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	af00      	add	r7, sp, #0
#ifndef USE_FreeRTOS_HEAP_1
  vTaskDelete (NULL);
 8004aec:	2000      	movs	r0, #0
 8004aee:	f001 fddf 	bl	80066b0 <vTaskDelete>
#endif
  for (;;);
 8004af2:	e7fe      	b.n	8004af2 <osThreadExit+0xa>

08004af4 <osThreadFlagsSet>:
  return (count);
}
#endif /* (configUSE_OS2_THREAD_ENUMERATE == 1) */

#if (configUSE_OS2_THREAD_FLAGS == 1)
uint32_t osThreadFlagsSet (osThreadId_t thread_id, uint32_t flags) {
 8004af4:	b580      	push	{r7, lr}
 8004af6:	b088      	sub	sp, #32
 8004af8:	af02      	add	r7, sp, #8
 8004afa:	6078      	str	r0, [r7, #4]
 8004afc:	6039      	str	r1, [r7, #0]
  TaskHandle_t hTask = (TaskHandle_t)thread_id;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	617b      	str	r3, [r7, #20]
  uint32_t rflags;
  BaseType_t yield;

  if ((hTask == NULL) || ((flags & THREAD_FLAGS_INVALID_BITS) != 0U)) {
 8004b02:	697b      	ldr	r3, [r7, #20]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d002      	beq.n	8004b0e <osThreadFlagsSet+0x1a>
 8004b08:	683b      	ldr	r3, [r7, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	da03      	bge.n	8004b16 <osThreadFlagsSet+0x22>
    rflags = (uint32_t)osErrorParameter;
 8004b0e:	f06f 0303 	mvn.w	r3, #3
 8004b12:	60fb      	str	r3, [r7, #12]
 8004b14:	e035      	b.n	8004b82 <osThreadFlagsSet+0x8e>
  }
  else {
    rflags = (uint32_t)osError;
 8004b16:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004b1a:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b1c:	f3ef 8305 	mrs	r3, IPSR
 8004b20:	613b      	str	r3, [r7, #16]
  return(result);
 8004b22:	693b      	ldr	r3, [r7, #16]

    if (IS_IRQ()) {
 8004b24:	2b00      	cmp	r3, #0
 8004b26:	d01f      	beq.n	8004b68 <osThreadFlagsSet+0x74>
      yield = pdFALSE;
 8004b28:	2300      	movs	r3, #0
 8004b2a:	60bb      	str	r3, [r7, #8]

      (void)xTaskNotifyFromISR (hTask, flags, eSetBits, &yield);
 8004b2c:	f107 0308 	add.w	r3, r7, #8
 8004b30:	9300      	str	r3, [sp, #0]
 8004b32:	2300      	movs	r3, #0
 8004b34:	2201      	movs	r2, #1
 8004b36:	6839      	ldr	r1, [r7, #0]
 8004b38:	6978      	ldr	r0, [r7, #20]
 8004b3a:	f002 fd1b 	bl	8007574 <xTaskGenericNotifyFromISR>
      (void)xTaskNotifyAndQueryFromISR (hTask, 0, eNoAction, &rflags, NULL);
 8004b3e:	f107 030c 	add.w	r3, r7, #12
 8004b42:	2200      	movs	r2, #0
 8004b44:	9200      	str	r2, [sp, #0]
 8004b46:	2200      	movs	r2, #0
 8004b48:	2100      	movs	r1, #0
 8004b4a:	6978      	ldr	r0, [r7, #20]
 8004b4c:	f002 fd12 	bl	8007574 <xTaskGenericNotifyFromISR>

      portYIELD_FROM_ISR (yield);
 8004b50:	68bb      	ldr	r3, [r7, #8]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d015      	beq.n	8004b82 <osThreadFlagsSet+0x8e>
 8004b56:	4b0d      	ldr	r3, [pc, #52]	; (8004b8c <osThreadFlagsSet+0x98>)
 8004b58:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004b5c:	601a      	str	r2, [r3, #0]
 8004b5e:	f3bf 8f4f 	dsb	sy
 8004b62:	f3bf 8f6f 	isb	sy
 8004b66:	e00c      	b.n	8004b82 <osThreadFlagsSet+0x8e>
    }
    else {
      (void)xTaskNotify (hTask, flags, eSetBits);
 8004b68:	2300      	movs	r3, #0
 8004b6a:	2201      	movs	r2, #1
 8004b6c:	6839      	ldr	r1, [r7, #0]
 8004b6e:	6978      	ldr	r0, [r7, #20]
 8004b70:	f002 fc42 	bl	80073f8 <xTaskGenericNotify>
      (void)xTaskNotifyAndQuery (hTask, 0, eNoAction, &rflags);
 8004b74:	f107 030c 	add.w	r3, r7, #12
 8004b78:	2200      	movs	r2, #0
 8004b7a:	2100      	movs	r1, #0
 8004b7c:	6978      	ldr	r0, [r7, #20]
 8004b7e:	f002 fc3b 	bl	80073f8 <xTaskGenericNotify>
    }
  }
  /* Return flags after setting */
  return (rflags);
 8004b82:	68fb      	ldr	r3, [r7, #12]
}
 8004b84:	4618      	mov	r0, r3
 8004b86:	3718      	adds	r7, #24
 8004b88:	46bd      	mov	sp, r7
 8004b8a:	bd80      	pop	{r7, pc}
 8004b8c:	e000ed04 	.word	0xe000ed04

08004b90 <osThreadFlagsWait>:
  }

  return (rflags);
}

uint32_t osThreadFlagsWait (uint32_t flags, uint32_t options, uint32_t timeout) {
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b08c      	sub	sp, #48	; 0x30
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	607a      	str	r2, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b9c:	f3ef 8305 	mrs	r3, IPSR
 8004ba0:	617b      	str	r3, [r7, #20]
  return(result);
 8004ba2:	697b      	ldr	r3, [r7, #20]
  uint32_t rflags, nval;
  uint32_t clear;
  TickType_t t0, td, tout;
  BaseType_t rval;

  if (IS_IRQ()) {
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d003      	beq.n	8004bb0 <osThreadFlagsWait+0x20>
    rflags = (uint32_t)osErrorISR;
 8004ba8:	f06f 0305 	mvn.w	r3, #5
 8004bac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bae:	e06b      	b.n	8004c88 <osThreadFlagsWait+0xf8>
  }
  else if ((flags & THREAD_FLAGS_INVALID_BITS) != 0U) {
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	da03      	bge.n	8004bbe <osThreadFlagsWait+0x2e>
    rflags = (uint32_t)osErrorParameter;
 8004bb6:	f06f 0303 	mvn.w	r3, #3
 8004bba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bbc:	e064      	b.n	8004c88 <osThreadFlagsWait+0xf8>
  }
  else {
    if ((options & osFlagsNoClear) == osFlagsNoClear) {
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d002      	beq.n	8004bce <osThreadFlagsWait+0x3e>
      clear = 0U;
 8004bc8:	2300      	movs	r3, #0
 8004bca:	62bb      	str	r3, [r7, #40]	; 0x28
 8004bcc:	e001      	b.n	8004bd2 <osThreadFlagsWait+0x42>
    } else {
      clear = flags;
 8004bce:	68fb      	ldr	r3, [r7, #12]
 8004bd0:	62bb      	str	r3, [r7, #40]	; 0x28
    }

    rflags = 0U;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	62fb      	str	r3, [r7, #44]	; 0x2c
    tout   = timeout;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	627b      	str	r3, [r7, #36]	; 0x24

    t0 = xTaskGetTickCount();
 8004bda:	f001 fef7 	bl	80069cc <xTaskGetTickCount>
 8004bde:	6238      	str	r0, [r7, #32]
    do {
      rval = xTaskNotifyWait (0, clear, &nval, tout);
 8004be0:	f107 0210 	add.w	r2, r7, #16
 8004be4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004be8:	2000      	movs	r0, #0
 8004bea:	f002 fba5 	bl	8007338 <xTaskNotifyWait>
 8004bee:	61f8      	str	r0, [r7, #28]

      if (rval == pdPASS) {
 8004bf0:	69fb      	ldr	r3, [r7, #28]
 8004bf2:	2b01      	cmp	r3, #1
 8004bf4:	d137      	bne.n	8004c66 <osThreadFlagsWait+0xd6>
        rflags &= flags;
 8004bf6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	4013      	ands	r3, r2
 8004bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
        rflags |= nval;
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004c02:	4313      	orrs	r3, r2
 8004c04:	62fb      	str	r3, [r7, #44]	; 0x2c

        if ((options & osFlagsWaitAll) == osFlagsWaitAll) {
 8004c06:	68bb      	ldr	r3, [r7, #8]
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d00c      	beq.n	8004c2a <osThreadFlagsWait+0x9a>
          if ((flags & rflags) == flags) {
 8004c10:	68fa      	ldr	r2, [r7, #12]
 8004c12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c14:	4013      	ands	r3, r2
 8004c16:	68fa      	ldr	r2, [r7, #12]
 8004c18:	429a      	cmp	r2, r3
 8004c1a:	d032      	beq.n	8004c82 <osThreadFlagsWait+0xf2>
            break;
          } else {
            if (timeout == 0U) {
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10f      	bne.n	8004c42 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8004c22:	f06f 0302 	mvn.w	r3, #2
 8004c26:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8004c28:	e02e      	b.n	8004c88 <osThreadFlagsWait+0xf8>
            }
          }
        }
        else {
          if ((flags & rflags) != 0) {
 8004c2a:	68fa      	ldr	r2, [r7, #12]
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2e:	4013      	ands	r3, r2
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d128      	bne.n	8004c86 <osThreadFlagsWait+0xf6>
            break;
          } else {
            if (timeout == 0U) {
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d103      	bne.n	8004c42 <osThreadFlagsWait+0xb2>
              rflags = (uint32_t)osErrorResource;
 8004c3a:	f06f 0302 	mvn.w	r3, #2
 8004c3e:	62fb      	str	r3, [r7, #44]	; 0x2c
              break;
 8004c40:	e022      	b.n	8004c88 <osThreadFlagsWait+0xf8>
            }
          }
        }

        /* Update timeout */
        td = xTaskGetTickCount() - t0;
 8004c42:	f001 fec3 	bl	80069cc <xTaskGetTickCount>
 8004c46:	4602      	mov	r2, r0
 8004c48:	6a3b      	ldr	r3, [r7, #32]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	61bb      	str	r3, [r7, #24]

        if (td > tout) {
 8004c4e:	69ba      	ldr	r2, [r7, #24]
 8004c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c52:	429a      	cmp	r2, r3
 8004c54:	d902      	bls.n	8004c5c <osThreadFlagsWait+0xcc>
          tout  = 0;
 8004c56:	2300      	movs	r3, #0
 8004c58:	627b      	str	r3, [r7, #36]	; 0x24
 8004c5a:	e00e      	b.n	8004c7a <osThreadFlagsWait+0xea>
        } else {
          tout -= td;
 8004c5c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c5e:	69bb      	ldr	r3, [r7, #24]
 8004c60:	1ad3      	subs	r3, r2, r3
 8004c62:	627b      	str	r3, [r7, #36]	; 0x24
 8004c64:	e009      	b.n	8004c7a <osThreadFlagsWait+0xea>
        }
      }
      else {
        if (timeout == 0) {
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d103      	bne.n	8004c74 <osThreadFlagsWait+0xe4>
          rflags = (uint32_t)osErrorResource;
 8004c6c:	f06f 0302 	mvn.w	r3, #2
 8004c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004c72:	e002      	b.n	8004c7a <osThreadFlagsWait+0xea>
        } else {
          rflags = (uint32_t)osErrorTimeout;
 8004c74:	f06f 0301 	mvn.w	r3, #1
 8004c78:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
      }
    }
    while (rval != pdFAIL);
 8004c7a:	69fb      	ldr	r3, [r7, #28]
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d1af      	bne.n	8004be0 <osThreadFlagsWait+0x50>
 8004c80:	e002      	b.n	8004c88 <osThreadFlagsWait+0xf8>
            break;
 8004c82:	bf00      	nop
 8004c84:	e000      	b.n	8004c88 <osThreadFlagsWait+0xf8>
            break;
 8004c86:	bf00      	nop
  }

  /* Return flags before clearing */
  return (rflags);
 8004c88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3730      	adds	r7, #48	; 0x30
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <TimerCallback>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_TIMER == 1)

static void TimerCallback (TimerHandle_t hTimer) {
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b084      	sub	sp, #16
 8004c96:	af00      	add	r7, sp, #0
 8004c98:	6078      	str	r0, [r7, #4]
  TimerCallback_t *callb;

  callb = (TimerCallback_t *)pvTimerGetTimerID (hTimer);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f003 f98a 	bl	8007fb4 <pvTimerGetTimerID>
 8004ca0:	60f8      	str	r0, [r7, #12]

  if (callb != NULL) {
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	d005      	beq.n	8004cb4 <TimerCallback+0x22>
    callb->func (callb->arg);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	68fa      	ldr	r2, [r7, #12]
 8004cae:	6852      	ldr	r2, [r2, #4]
 8004cb0:	4610      	mov	r0, r2
 8004cb2:	4798      	blx	r3
  }
}
 8004cb4:	bf00      	nop
 8004cb6:	3710      	adds	r7, #16
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	bd80      	pop	{r7, pc}

08004cbc <osTimerNew>:

osTimerId_t osTimerNew (osTimerFunc_t func, osTimerType_t type, void *argument, const osTimerAttr_t *attr) {
 8004cbc:	b580      	push	{r7, lr}
 8004cbe:	b08c      	sub	sp, #48	; 0x30
 8004cc0:	af02      	add	r7, sp, #8
 8004cc2:	60f8      	str	r0, [r7, #12]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	603b      	str	r3, [r7, #0]
 8004cc8:	460b      	mov	r3, r1
 8004cca:	72fb      	strb	r3, [r7, #11]
  TimerHandle_t hTimer;
  TimerCallback_t *callb;
  UBaseType_t reload;
  int32_t mem;

  hTimer = NULL;
 8004ccc:	2300      	movs	r3, #0
 8004cce:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004cd0:	f3ef 8305 	mrs	r3, IPSR
 8004cd4:	613b      	str	r3, [r7, #16]
  return(result);
 8004cd6:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (func != NULL)) {
 8004cd8:	2b00      	cmp	r3, #0
 8004cda:	d163      	bne.n	8004da4 <osTimerNew+0xe8>
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	2b00      	cmp	r3, #0
 8004ce0:	d060      	beq.n	8004da4 <osTimerNew+0xe8>
    /* Allocate memory to store callback function and argument */
    callb = pvPortMalloc (sizeof(TimerCallback_t));
 8004ce2:	2008      	movs	r0, #8
 8004ce4:	f003 fbf8 	bl	80084d8 <pvPortMalloc>
 8004ce8:	6178      	str	r0, [r7, #20]

    if (callb != NULL) {
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d059      	beq.n	8004da4 <osTimerNew+0xe8>
      callb->func = func;
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	68fa      	ldr	r2, [r7, #12]
 8004cf4:	601a      	str	r2, [r3, #0]
      callb->arg  = argument;
 8004cf6:	697b      	ldr	r3, [r7, #20]
 8004cf8:	687a      	ldr	r2, [r7, #4]
 8004cfa:	605a      	str	r2, [r3, #4]

      if (type == osTimerOnce) {
 8004cfc:	7afb      	ldrb	r3, [r7, #11]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d102      	bne.n	8004d08 <osTimerNew+0x4c>
        reload = pdFALSE;
 8004d02:	2300      	movs	r3, #0
 8004d04:	61fb      	str	r3, [r7, #28]
 8004d06:	e001      	b.n	8004d0c <osTimerNew+0x50>
      } else {
        reload = pdTRUE;
 8004d08:	2301      	movs	r3, #1
 8004d0a:	61fb      	str	r3, [r7, #28]
      }

      mem  = -1;
 8004d0c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004d10:	61bb      	str	r3, [r7, #24]
      name = NULL;
 8004d12:	2300      	movs	r3, #0
 8004d14:	627b      	str	r3, [r7, #36]	; 0x24

      if (attr != NULL) {
 8004d16:	683b      	ldr	r3, [r7, #0]
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	d01c      	beq.n	8004d56 <osTimerNew+0x9a>
        if (attr->name != NULL) {
 8004d1c:	683b      	ldr	r3, [r7, #0]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <osTimerNew+0x6e>
          name = attr->name;
 8004d24:	683b      	ldr	r3, [r7, #0]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	627b      	str	r3, [r7, #36]	; 0x24
        }

        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticTimer_t))) {
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	689b      	ldr	r3, [r3, #8]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	d006      	beq.n	8004d40 <osTimerNew+0x84>
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	68db      	ldr	r3, [r3, #12]
 8004d36:	2b2b      	cmp	r3, #43	; 0x2b
 8004d38:	d902      	bls.n	8004d40 <osTimerNew+0x84>
          mem = 1;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	61bb      	str	r3, [r7, #24]
 8004d3e:	e00c      	b.n	8004d5a <osTimerNew+0x9e>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004d40:	683b      	ldr	r3, [r7, #0]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	d108      	bne.n	8004d5a <osTimerNew+0x9e>
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d104      	bne.n	8004d5a <osTimerNew+0x9e>
            mem = 0;
 8004d50:	2300      	movs	r3, #0
 8004d52:	61bb      	str	r3, [r7, #24]
 8004d54:	e001      	b.n	8004d5a <osTimerNew+0x9e>
          }
        }
      }
      else {
        mem = 0;
 8004d56:	2300      	movs	r3, #0
 8004d58:	61bb      	str	r3, [r7, #24]
      }

      if (mem == 1) {
 8004d5a:	69bb      	ldr	r3, [r7, #24]
 8004d5c:	2b01      	cmp	r3, #1
 8004d5e:	d10c      	bne.n	8004d7a <osTimerNew+0xbe>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          hTimer = xTimerCreateStatic (name, 1, reload, callb, TimerCallback, (StaticTimer_t *)attr->cb_mem);
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	689b      	ldr	r3, [r3, #8]
 8004d64:	9301      	str	r3, [sp, #4]
 8004d66:	4b12      	ldr	r3, [pc, #72]	; (8004db0 <osTimerNew+0xf4>)
 8004d68:	9300      	str	r3, [sp, #0]
 8004d6a:	697b      	ldr	r3, [r7, #20]
 8004d6c:	69fa      	ldr	r2, [r7, #28]
 8004d6e:	2101      	movs	r1, #1
 8004d70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d72:	f002 fda0 	bl	80078b6 <xTimerCreateStatic>
 8004d76:	6238      	str	r0, [r7, #32]
 8004d78:	e00b      	b.n	8004d92 <osTimerNew+0xd6>
        #endif
      }
      else {
        if (mem == 0) {
 8004d7a:	69bb      	ldr	r3, [r7, #24]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d108      	bne.n	8004d92 <osTimerNew+0xd6>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hTimer = xTimerCreate (name, 1, reload, callb, TimerCallback);
 8004d80:	4b0b      	ldr	r3, [pc, #44]	; (8004db0 <osTimerNew+0xf4>)
 8004d82:	9300      	str	r3, [sp, #0]
 8004d84:	697b      	ldr	r3, [r7, #20]
 8004d86:	69fa      	ldr	r2, [r7, #28]
 8004d88:	2101      	movs	r1, #1
 8004d8a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8004d8c:	f002 fd72 	bl	8007874 <xTimerCreate>
 8004d90:	6238      	str	r0, [r7, #32]
          #endif
        }
      }

      if ((hTimer == NULL) && (callb != NULL)) {
 8004d92:	6a3b      	ldr	r3, [r7, #32]
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d105      	bne.n	8004da4 <osTimerNew+0xe8>
 8004d98:	697b      	ldr	r3, [r7, #20]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <osTimerNew+0xe8>
        vPortFree (callb);
 8004d9e:	6978      	ldr	r0, [r7, #20]
 8004da0:	f003 fc66 	bl	8008670 <vPortFree>
      }
    }
  }

  return ((osTimerId_t)hTimer);
 8004da4:	6a3b      	ldr	r3, [r7, #32]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3728      	adds	r7, #40	; 0x28
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}
 8004dae:	bf00      	nop
 8004db0:	08004c93 	.word	0x08004c93

08004db4 <osTimerStart>:
  }

  return (p);
}

osStatus_t osTimerStart (osTimerId_t timer_id, uint32_t ticks) {
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b088      	sub	sp, #32
 8004db8:	af02      	add	r7, sp, #8
 8004dba:	6078      	str	r0, [r7, #4]
 8004dbc:	6039      	str	r1, [r7, #0]
  TimerHandle_t hTimer = (TimerHandle_t)timer_id;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dc2:	f3ef 8305 	mrs	r3, IPSR
 8004dc6:	60fb      	str	r3, [r7, #12]
  return(result);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d003      	beq.n	8004dd6 <osTimerStart+0x22>
    stat = osErrorISR;
 8004dce:	f06f 0305 	mvn.w	r3, #5
 8004dd2:	617b      	str	r3, [r7, #20]
 8004dd4:	e017      	b.n	8004e06 <osTimerStart+0x52>
  }
  else if (hTimer == NULL) {
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d103      	bne.n	8004de4 <osTimerStart+0x30>
    stat = osErrorParameter;
 8004ddc:	f06f 0303 	mvn.w	r3, #3
 8004de0:	617b      	str	r3, [r7, #20]
 8004de2:	e010      	b.n	8004e06 <osTimerStart+0x52>
  }
  else {
    if (xTimerChangePeriod (hTimer, ticks, 0) == pdPASS) {
 8004de4:	2300      	movs	r3, #0
 8004de6:	9300      	str	r3, [sp, #0]
 8004de8:	2300      	movs	r3, #0
 8004dea:	683a      	ldr	r2, [r7, #0]
 8004dec:	2104      	movs	r1, #4
 8004dee:	6938      	ldr	r0, [r7, #16]
 8004df0:	f002 fdda 	bl	80079a8 <xTimerGenericCommand>
 8004df4:	4603      	mov	r3, r0
 8004df6:	2b01      	cmp	r3, #1
 8004df8:	d102      	bne.n	8004e00 <osTimerStart+0x4c>
      stat = osOK;
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	617b      	str	r3, [r7, #20]
 8004dfe:	e002      	b.n	8004e06 <osTimerStart+0x52>
    } else {
      stat = osErrorResource;
 8004e00:	f06f 0302 	mvn.w	r3, #2
 8004e04:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8004e06:	697b      	ldr	r3, [r7, #20]
}
 8004e08:	4618      	mov	r0, r3
 8004e0a:	3718      	adds	r7, #24
 8004e0c:	46bd      	mov	sp, r7
 8004e0e:	bd80      	pop	{r7, pc}

08004e10 <osEventFlagsNew>:
}
#endif /* (configUSE_OS2_TIMER == 1) */

/*---------------------------------------------------------------------------*/

osEventFlagsId_t osEventFlagsNew (const osEventFlagsAttr_t *attr) {
 8004e10:	b580      	push	{r7, lr}
 8004e12:	b086      	sub	sp, #24
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
  EventGroupHandle_t hEventGroup;
  int32_t mem;

  hEventGroup = NULL;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e1c:	f3ef 8305 	mrs	r3, IPSR
 8004e20:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e22:	68fb      	ldr	r3, [r7, #12]

  if (!IS_IRQ()) {
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d12d      	bne.n	8004e84 <osEventFlagsNew+0x74>
    mem = -1;
 8004e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004e2c:	613b      	str	r3, [r7, #16]

    if (attr != NULL) {
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d015      	beq.n	8004e60 <osEventFlagsNew+0x50>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticEventGroup_t))) {
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	689b      	ldr	r3, [r3, #8]
 8004e38:	2b00      	cmp	r3, #0
 8004e3a:	d006      	beq.n	8004e4a <osEventFlagsNew+0x3a>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	68db      	ldr	r3, [r3, #12]
 8004e40:	2b1f      	cmp	r3, #31
 8004e42:	d902      	bls.n	8004e4a <osEventFlagsNew+0x3a>
        mem = 1;
 8004e44:	2301      	movs	r3, #1
 8004e46:	613b      	str	r3, [r7, #16]
 8004e48:	e00c      	b.n	8004e64 <osEventFlagsNew+0x54>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	689b      	ldr	r3, [r3, #8]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d108      	bne.n	8004e64 <osEventFlagsNew+0x54>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	68db      	ldr	r3, [r3, #12]
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d104      	bne.n	8004e64 <osEventFlagsNew+0x54>
          mem = 0;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	613b      	str	r3, [r7, #16]
 8004e5e:	e001      	b.n	8004e64 <osEventFlagsNew+0x54>
        }
      }
    }
    else {
      mem = 0;
 8004e60:	2300      	movs	r3, #0
 8004e62:	613b      	str	r3, [r7, #16]
    }

    if (mem == 1) {
 8004e64:	693b      	ldr	r3, [r7, #16]
 8004e66:	2b01      	cmp	r3, #1
 8004e68:	d106      	bne.n	8004e78 <osEventFlagsNew+0x68>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
      hEventGroup = xEventGroupCreateStatic (attr->cb_mem);
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	689b      	ldr	r3, [r3, #8]
 8004e6e:	4618      	mov	r0, r3
 8004e70:	f000 fa1e 	bl	80052b0 <xEventGroupCreateStatic>
 8004e74:	6178      	str	r0, [r7, #20]
 8004e76:	e005      	b.n	8004e84 <osEventFlagsNew+0x74>
      #endif
    }
    else {
      if (mem == 0) {
 8004e78:	693b      	ldr	r3, [r7, #16]
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d102      	bne.n	8004e84 <osEventFlagsNew+0x74>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hEventGroup = xEventGroupCreate();
 8004e7e:	f000 fa4e 	bl	800531e <xEventGroupCreate>
 8004e82:	6178      	str	r0, [r7, #20]
        #endif
      }
    }
  }

  return ((osEventFlagsId_t)hEventGroup);
 8004e84:	697b      	ldr	r3, [r7, #20]
}
 8004e86:	4618      	mov	r0, r3
 8004e88:	3718      	adds	r7, #24
 8004e8a:	46bd      	mov	sp, r7
 8004e8c:	bd80      	pop	{r7, pc}
	...

08004e90 <osEventFlagsSet>:

uint32_t osEventFlagsSet (osEventFlagsId_t ef_id, uint32_t flags) {
 8004e90:	b580      	push	{r7, lr}
 8004e92:	b086      	sub	sp, #24
 8004e94:	af00      	add	r7, sp, #0
 8004e96:	6078      	str	r0, [r7, #4]
 8004e98:	6039      	str	r1, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	613b      	str	r3, [r7, #16]
  uint32_t rflags;
  BaseType_t yield;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004e9e:	693b      	ldr	r3, [r7, #16]
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d004      	beq.n	8004eae <osEventFlagsSet+0x1e>
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d003      	beq.n	8004eb6 <osEventFlagsSet+0x26>
    rflags = (uint32_t)osErrorParameter;
 8004eae:	f06f 0303 	mvn.w	r3, #3
 8004eb2:	617b      	str	r3, [r7, #20]
 8004eb4:	e028      	b.n	8004f08 <osEventFlagsSet+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eb6:	f3ef 8305 	mrs	r3, IPSR
 8004eba:	60fb      	str	r3, [r7, #12]
  return(result);
 8004ebc:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d01d      	beq.n	8004efe <osEventFlagsSet+0x6e>
  #if (configUSE_OS2_EVENTFLAGS_FROM_ISR == 0)
    (void)yield;
    /* Enable timers and xTimerPendFunctionCall function to support osEventFlagsSet from ISR */
    rflags = (uint32_t)osErrorResource;
  #else
    yield = pdFALSE;
 8004ec2:	2300      	movs	r3, #0
 8004ec4:	60bb      	str	r3, [r7, #8]

    if (xEventGroupSetBitsFromISR (hEventGroup, (EventBits_t)flags, &yield) == pdFAIL) {
 8004ec6:	f107 0308 	add.w	r3, r7, #8
 8004eca:	461a      	mov	r2, r3
 8004ecc:	6839      	ldr	r1, [r7, #0]
 8004ece:	6938      	ldr	r0, [r7, #16]
 8004ed0:	f000 fbc8 	bl	8005664 <xEventGroupSetBitsFromISR>
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d103      	bne.n	8004ee2 <osEventFlagsSet+0x52>
      rflags = (uint32_t)osErrorResource;
 8004eda:	f06f 0302 	mvn.w	r3, #2
 8004ede:	617b      	str	r3, [r7, #20]
 8004ee0:	e012      	b.n	8004f08 <osEventFlagsSet+0x78>
    } else {
      rflags = flags;
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	617b      	str	r3, [r7, #20]
      portYIELD_FROM_ISR (yield);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	d00d      	beq.n	8004f08 <osEventFlagsSet+0x78>
 8004eec:	4b09      	ldr	r3, [pc, #36]	; (8004f14 <osEventFlagsSet+0x84>)
 8004eee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ef2:	601a      	str	r2, [r3, #0]
 8004ef4:	f3bf 8f4f 	dsb	sy
 8004ef8:	f3bf 8f6f 	isb	sy
 8004efc:	e004      	b.n	8004f08 <osEventFlagsSet+0x78>
    }
  #endif
  }
  else {
    rflags = xEventGroupSetBits (hEventGroup, (EventBits_t)flags);
 8004efe:	6839      	ldr	r1, [r7, #0]
 8004f00:	6938      	ldr	r0, [r7, #16]
 8004f02:	f000 faf5 	bl	80054f0 <xEventGroupSetBits>
 8004f06:	6178      	str	r0, [r7, #20]
  }

  return (rflags);
 8004f08:	697b      	ldr	r3, [r7, #20]
}
 8004f0a:	4618      	mov	r0, r3
 8004f0c:	3718      	adds	r7, #24
 8004f0e:	46bd      	mov	sp, r7
 8004f10:	bd80      	pop	{r7, pc}
 8004f12:	bf00      	nop
 8004f14:	e000ed04 	.word	0xe000ed04

08004f18 <osEventFlagsWait>:
  }

  return (rflags);
}

uint32_t osEventFlagsWait (osEventFlagsId_t ef_id, uint32_t flags, uint32_t options, uint32_t timeout) {
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b08c      	sub	sp, #48	; 0x30
 8004f1c:	af02      	add	r7, sp, #8
 8004f1e:	60f8      	str	r0, [r7, #12]
 8004f20:	60b9      	str	r1, [r7, #8]
 8004f22:	607a      	str	r2, [r7, #4]
 8004f24:	603b      	str	r3, [r7, #0]
  EventGroupHandle_t hEventGroup = (EventGroupHandle_t)ef_id;
 8004f26:	68fb      	ldr	r3, [r7, #12]
 8004f28:	61bb      	str	r3, [r7, #24]
  BaseType_t wait_all;
  BaseType_t exit_clr;
  uint32_t rflags;

  if ((hEventGroup == NULL) || ((flags & EVENT_FLAGS_INVALID_BITS) != 0U)) {
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d004      	beq.n	8004f3a <osEventFlagsWait+0x22>
 8004f30:	68bb      	ldr	r3, [r7, #8]
 8004f32:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d003      	beq.n	8004f42 <osEventFlagsWait+0x2a>
    rflags = (uint32_t)osErrorParameter;
 8004f3a:	f06f 0303 	mvn.w	r3, #3
 8004f3e:	61fb      	str	r3, [r7, #28]
 8004f40:	e04b      	b.n	8004fda <osEventFlagsWait+0xc2>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f42:	f3ef 8305 	mrs	r3, IPSR
 8004f46:	617b      	str	r3, [r7, #20]
  return(result);
 8004f48:	697b      	ldr	r3, [r7, #20]
  }
  else if (IS_IRQ()) {
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d003      	beq.n	8004f56 <osEventFlagsWait+0x3e>
    rflags = (uint32_t)osErrorISR;
 8004f4e:	f06f 0305 	mvn.w	r3, #5
 8004f52:	61fb      	str	r3, [r7, #28]
 8004f54:	e041      	b.n	8004fda <osEventFlagsWait+0xc2>
  }
  else {
    if (options & osFlagsWaitAll) {
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f003 0301 	and.w	r3, r3, #1
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d002      	beq.n	8004f66 <osEventFlagsWait+0x4e>
      wait_all = pdTRUE;
 8004f60:	2301      	movs	r3, #1
 8004f62:	627b      	str	r3, [r7, #36]	; 0x24
 8004f64:	e001      	b.n	8004f6a <osEventFlagsWait+0x52>
    } else {
      wait_all = pdFAIL;
 8004f66:	2300      	movs	r3, #0
 8004f68:	627b      	str	r3, [r7, #36]	; 0x24
    }

    if (options & osFlagsNoClear) {
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	f003 0302 	and.w	r3, r3, #2
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d002      	beq.n	8004f7a <osEventFlagsWait+0x62>
      exit_clr = pdFAIL;
 8004f74:	2300      	movs	r3, #0
 8004f76:	623b      	str	r3, [r7, #32]
 8004f78:	e001      	b.n	8004f7e <osEventFlagsWait+0x66>
    } else {
      exit_clr = pdTRUE;
 8004f7a:	2301      	movs	r3, #1
 8004f7c:	623b      	str	r3, [r7, #32]
    }

    rflags = xEventGroupWaitBits (hEventGroup, (EventBits_t)flags, exit_clr, wait_all, (TickType_t)timeout);
 8004f7e:	683b      	ldr	r3, [r7, #0]
 8004f80:	9300      	str	r3, [sp, #0]
 8004f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f84:	6a3a      	ldr	r2, [r7, #32]
 8004f86:	68b9      	ldr	r1, [r7, #8]
 8004f88:	69b8      	ldr	r0, [r7, #24]
 8004f8a:	f000 f9e3 	bl	8005354 <xEventGroupWaitBits>
 8004f8e:	61f8      	str	r0, [r7, #28]

    if (options & osFlagsWaitAll) {
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d010      	beq.n	8004fbc <osEventFlagsWait+0xa4>
      if ((flags & rflags) != flags) {
 8004f9a:	68ba      	ldr	r2, [r7, #8]
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	4013      	ands	r3, r2
 8004fa0:	68ba      	ldr	r2, [r7, #8]
 8004fa2:	429a      	cmp	r2, r3
 8004fa4:	d019      	beq.n	8004fda <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d003      	beq.n	8004fb4 <osEventFlagsWait+0x9c>
          rflags = (uint32_t)osErrorTimeout;
 8004fac:	f06f 0301 	mvn.w	r3, #1
 8004fb0:	61fb      	str	r3, [r7, #28]
 8004fb2:	e012      	b.n	8004fda <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004fb4:	f06f 0302 	mvn.w	r3, #2
 8004fb8:	61fb      	str	r3, [r7, #28]
 8004fba:	e00e      	b.n	8004fda <osEventFlagsWait+0xc2>
        }
      }
    }
    else {
      if ((flags & rflags) == 0U) {
 8004fbc:	68ba      	ldr	r2, [r7, #8]
 8004fbe:	69fb      	ldr	r3, [r7, #28]
 8004fc0:	4013      	ands	r3, r2
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d109      	bne.n	8004fda <osEventFlagsWait+0xc2>
        if (timeout > 0U) {
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d003      	beq.n	8004fd4 <osEventFlagsWait+0xbc>
          rflags = (uint32_t)osErrorTimeout;
 8004fcc:	f06f 0301 	mvn.w	r3, #1
 8004fd0:	61fb      	str	r3, [r7, #28]
 8004fd2:	e002      	b.n	8004fda <osEventFlagsWait+0xc2>
        } else {
          rflags = (uint32_t)osErrorResource;
 8004fd4:	f06f 0302 	mvn.w	r3, #2
 8004fd8:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (rflags);
 8004fda:	69fb      	ldr	r3, [r7, #28]
}
 8004fdc:	4618      	mov	r0, r3
 8004fde:	3728      	adds	r7, #40	; 0x28
 8004fe0:	46bd      	mov	sp, r7
 8004fe2:	bd80      	pop	{r7, pc}

08004fe4 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004fe4:	b580      	push	{r7, lr}
 8004fe6:	b08a      	sub	sp, #40	; 0x28
 8004fe8:	af02      	add	r7, sp, #8
 8004fea:	60f8      	str	r0, [r7, #12]
 8004fec:	60b9      	str	r1, [r7, #8]
 8004fee:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004ff0:	2300      	movs	r3, #0
 8004ff2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ff4:	f3ef 8305 	mrs	r3, IPSR
 8004ff8:	613b      	str	r3, [r7, #16]
  return(result);
 8004ffa:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d15f      	bne.n	80050c0 <osMessageQueueNew+0xdc>
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d05c      	beq.n	80050c0 <osMessageQueueNew+0xdc>
 8005006:	68bb      	ldr	r3, [r7, #8]
 8005008:	2b00      	cmp	r3, #0
 800500a:	d059      	beq.n	80050c0 <osMessageQueueNew+0xdc>
    mem = -1;
 800500c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005010:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d029      	beq.n	800506c <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	689b      	ldr	r3, [r3, #8]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d012      	beq.n	8005046 <osMessageQueueNew+0x62>
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b4f      	cmp	r3, #79	; 0x4f
 8005026:	d90e      	bls.n	8005046 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800502c:	2b00      	cmp	r3, #0
 800502e:	d00a      	beq.n	8005046 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	695a      	ldr	r2, [r3, #20]
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	68b9      	ldr	r1, [r7, #8]
 8005038:	fb01 f303 	mul.w	r3, r1, r3
 800503c:	429a      	cmp	r2, r3
 800503e:	d302      	bcc.n	8005046 <osMessageQueueNew+0x62>
        mem = 1;
 8005040:	2301      	movs	r3, #1
 8005042:	61bb      	str	r3, [r7, #24]
 8005044:	e014      	b.n	8005070 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	689b      	ldr	r3, [r3, #8]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d110      	bne.n	8005070 <osMessageQueueNew+0x8c>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10c      	bne.n	8005070 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800505a:	2b00      	cmp	r3, #0
 800505c:	d108      	bne.n	8005070 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	695b      	ldr	r3, [r3, #20]
 8005062:	2b00      	cmp	r3, #0
 8005064:	d104      	bne.n	8005070 <osMessageQueueNew+0x8c>
          mem = 0;
 8005066:	2300      	movs	r3, #0
 8005068:	61bb      	str	r3, [r7, #24]
 800506a:	e001      	b.n	8005070 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800506c:	2300      	movs	r3, #0
 800506e:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005070:	69bb      	ldr	r3, [r7, #24]
 8005072:	2b01      	cmp	r3, #1
 8005074:	d10b      	bne.n	800508e <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	691a      	ldr	r2, [r3, #16]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2100      	movs	r1, #0
 8005080:	9100      	str	r1, [sp, #0]
 8005082:	68b9      	ldr	r1, [r7, #8]
 8005084:	68f8      	ldr	r0, [r7, #12]
 8005086:	f000 fc1d 	bl	80058c4 <xQueueGenericCreateStatic>
 800508a:	61f8      	str	r0, [r7, #28]
 800508c:	e008      	b.n	80050a0 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	2b00      	cmp	r3, #0
 8005092:	d105      	bne.n	80050a0 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005094:	2200      	movs	r2, #0
 8005096:	68b9      	ldr	r1, [r7, #8]
 8005098:	68f8      	ldr	r0, [r7, #12]
 800509a:	f000 fc8b 	bl	80059b4 <xQueueGenericCreate>
 800509e:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00c      	beq.n	80050c0 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d003      	beq.n	80050b4 <osMessageQueueNew+0xd0>
        name = attr->name;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	617b      	str	r3, [r7, #20]
 80050b2:	e001      	b.n	80050b8 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80050b4:	2300      	movs	r3, #0
 80050b6:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80050b8:	6979      	ldr	r1, [r7, #20]
 80050ba:	69f8      	ldr	r0, [r7, #28]
 80050bc:	f001 f8e2 	bl	8006284 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80050c0:	69fb      	ldr	r3, [r7, #28]
}
 80050c2:	4618      	mov	r0, r3
 80050c4:	3720      	adds	r7, #32
 80050c6:	46bd      	mov	sp, r7
 80050c8:	bd80      	pop	{r7, pc}
	...

080050cc <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 80050cc:	b580      	push	{r7, lr}
 80050ce:	b088      	sub	sp, #32
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	60f8      	str	r0, [r7, #12]
 80050d4:	60b9      	str	r1, [r7, #8]
 80050d6:	603b      	str	r3, [r7, #0]
 80050d8:	4613      	mov	r3, r2
 80050da:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 80050e0:	2300      	movs	r3, #0
 80050e2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80050e4:	f3ef 8305 	mrs	r3, IPSR
 80050e8:	617b      	str	r3, [r7, #20]
  return(result);
 80050ea:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d028      	beq.n	8005142 <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d005      	beq.n	8005102 <osMessageQueuePut+0x36>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d002      	beq.n	8005102 <osMessageQueuePut+0x36>
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d003      	beq.n	800510a <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 8005102:	f06f 0303 	mvn.w	r3, #3
 8005106:	61fb      	str	r3, [r7, #28]
 8005108:	e038      	b.n	800517c <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 800510a:	2300      	movs	r3, #0
 800510c:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800510e:	f107 0210 	add.w	r2, r7, #16
 8005112:	2300      	movs	r3, #0
 8005114:	68b9      	ldr	r1, [r7, #8]
 8005116:	69b8      	ldr	r0, [r7, #24]
 8005118:	f000 fda8 	bl	8005c6c <xQueueGenericSendFromISR>
 800511c:	4603      	mov	r3, r0
 800511e:	2b01      	cmp	r3, #1
 8005120:	d003      	beq.n	800512a <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 8005122:	f06f 0302 	mvn.w	r3, #2
 8005126:	61fb      	str	r3, [r7, #28]
 8005128:	e028      	b.n	800517c <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d025      	beq.n	800517c <osMessageQueuePut+0xb0>
 8005130:	4b15      	ldr	r3, [pc, #84]	; (8005188 <osMessageQueuePut+0xbc>)
 8005132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005136:	601a      	str	r2, [r3, #0]
 8005138:	f3bf 8f4f 	dsb	sy
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	e01c      	b.n	800517c <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d002      	beq.n	800514e <osMessageQueuePut+0x82>
 8005148:	68bb      	ldr	r3, [r7, #8]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d103      	bne.n	8005156 <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 800514e:	f06f 0303 	mvn.w	r3, #3
 8005152:	61fb      	str	r3, [r7, #28]
 8005154:	e012      	b.n	800517c <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005156:	2300      	movs	r3, #0
 8005158:	683a      	ldr	r2, [r7, #0]
 800515a:	68b9      	ldr	r1, [r7, #8]
 800515c:	69b8      	ldr	r0, [r7, #24]
 800515e:	f000 fc87 	bl	8005a70 <xQueueGenericSend>
 8005162:	4603      	mov	r3, r0
 8005164:	2b01      	cmp	r3, #1
 8005166:	d009      	beq.n	800517c <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 8005168:	683b      	ldr	r3, [r7, #0]
 800516a:	2b00      	cmp	r3, #0
 800516c:	d003      	beq.n	8005176 <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 800516e:	f06f 0301 	mvn.w	r3, #1
 8005172:	61fb      	str	r3, [r7, #28]
 8005174:	e002      	b.n	800517c <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 8005176:	f06f 0302 	mvn.w	r3, #2
 800517a:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 800517c:	69fb      	ldr	r3, [r7, #28]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3720      	adds	r7, #32
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	e000ed04 	.word	0xe000ed04

0800518c <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800518c:	b580      	push	{r7, lr}
 800518e:	b088      	sub	sp, #32
 8005190:	af00      	add	r7, sp, #0
 8005192:	60f8      	str	r0, [r7, #12]
 8005194:	60b9      	str	r1, [r7, #8]
 8005196:	607a      	str	r2, [r7, #4]
 8005198:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 800519e:	2300      	movs	r3, #0
 80051a0:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051a2:	f3ef 8305 	mrs	r3, IPSR
 80051a6:	617b      	str	r3, [r7, #20]
  return(result);
 80051a8:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d028      	beq.n	8005200 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 80051ae:	69bb      	ldr	r3, [r7, #24]
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d005      	beq.n	80051c0 <osMessageQueueGet+0x34>
 80051b4:	68bb      	ldr	r3, [r7, #8]
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d002      	beq.n	80051c0 <osMessageQueueGet+0x34>
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d003      	beq.n	80051c8 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80051c0:	f06f 0303 	mvn.w	r3, #3
 80051c4:	61fb      	str	r3, [r7, #28]
 80051c6:	e037      	b.n	8005238 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80051c8:	2300      	movs	r3, #0
 80051ca:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80051cc:	f107 0310 	add.w	r3, r7, #16
 80051d0:	461a      	mov	r2, r3
 80051d2:	68b9      	ldr	r1, [r7, #8]
 80051d4:	69b8      	ldr	r0, [r7, #24]
 80051d6:	f000 fec5 	bl	8005f64 <xQueueReceiveFromISR>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b01      	cmp	r3, #1
 80051de:	d003      	beq.n	80051e8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80051e0:	f06f 0302 	mvn.w	r3, #2
 80051e4:	61fb      	str	r3, [r7, #28]
 80051e6:	e027      	b.n	8005238 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80051e8:	693b      	ldr	r3, [r7, #16]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d024      	beq.n	8005238 <osMessageQueueGet+0xac>
 80051ee:	4b15      	ldr	r3, [pc, #84]	; (8005244 <osMessageQueueGet+0xb8>)
 80051f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051f4:	601a      	str	r2, [r3, #0]
 80051f6:	f3bf 8f4f 	dsb	sy
 80051fa:	f3bf 8f6f 	isb	sy
 80051fe:	e01b      	b.n	8005238 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005200:	69bb      	ldr	r3, [r7, #24]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d002      	beq.n	800520c <osMessageQueueGet+0x80>
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d103      	bne.n	8005214 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 800520c:	f06f 0303 	mvn.w	r3, #3
 8005210:	61fb      	str	r3, [r7, #28]
 8005212:	e011      	b.n	8005238 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8005214:	683a      	ldr	r2, [r7, #0]
 8005216:	68b9      	ldr	r1, [r7, #8]
 8005218:	69b8      	ldr	r0, [r7, #24]
 800521a:	f000 fdc3 	bl	8005da4 <xQueueReceive>
 800521e:	4603      	mov	r3, r0
 8005220:	2b01      	cmp	r3, #1
 8005222:	d009      	beq.n	8005238 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d003      	beq.n	8005232 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 800522a:	f06f 0301 	mvn.w	r3, #1
 800522e:	61fb      	str	r3, [r7, #28]
 8005230:	e002      	b.n	8005238 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8005232:	f06f 0302 	mvn.w	r3, #2
 8005236:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005238:	69fb      	ldr	r3, [r7, #28]
}
 800523a:	4618      	mov	r0, r3
 800523c:	3720      	adds	r7, #32
 800523e:	46bd      	mov	sp, r7
 8005240:	bd80      	pop	{r7, pc}
 8005242:	bf00      	nop
 8005244:	e000ed04 	.word	0xe000ed04

08005248 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005248:	b480      	push	{r7}
 800524a:	b085      	sub	sp, #20
 800524c:	af00      	add	r7, sp, #0
 800524e:	60f8      	str	r0, [r7, #12]
 8005250:	60b9      	str	r1, [r7, #8]
 8005252:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	4a07      	ldr	r2, [pc, #28]	; (8005274 <vApplicationGetIdleTaskMemory+0x2c>)
 8005258:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800525a:	68bb      	ldr	r3, [r7, #8]
 800525c:	4a06      	ldr	r2, [pc, #24]	; (8005278 <vApplicationGetIdleTaskMemory+0x30>)
 800525e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2240      	movs	r2, #64	; 0x40
 8005264:	601a      	str	r2, [r3, #0]
}
 8005266:	bf00      	nop
 8005268:	3714      	adds	r7, #20
 800526a:	46bd      	mov	sp, r7
 800526c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005270:	4770      	bx	lr
 8005272:	bf00      	nop
 8005274:	20000230 	.word	0x20000230
 8005278:	200002ec 	.word	0x200002ec

0800527c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800527c:	b480      	push	{r7}
 800527e:	b085      	sub	sp, #20
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	4a07      	ldr	r2, [pc, #28]	; (80052a8 <vApplicationGetTimerTaskMemory+0x2c>)
 800528c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	4a06      	ldr	r2, [pc, #24]	; (80052ac <vApplicationGetTimerTaskMemory+0x30>)
 8005292:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2280      	movs	r2, #128	; 0x80
 8005298:	601a      	str	r2, [r3, #0]
}
 800529a:	bf00      	nop
 800529c:	3714      	adds	r7, #20
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr
 80052a6:	bf00      	nop
 80052a8:	200003ec 	.word	0x200003ec
 80052ac:	200004a8 	.word	0x200004a8

080052b0 <xEventGroupCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreateStatic( StaticEventGroup_t *pxEventGroupBuffer )
	{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b086      	sub	sp, #24
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
	EventGroup_t *pxEventBits;

		/* A StaticEventGroup_t object must be provided. */
		configASSERT( pxEventGroupBuffer );
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d10a      	bne.n	80052d4 <xEventGroupCreateStatic+0x24>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80052be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052c2:	f383 8811 	msr	BASEPRI, r3
 80052c6:	f3bf 8f6f 	isb	sy
 80052ca:	f3bf 8f4f 	dsb	sy
 80052ce:	613b      	str	r3, [r7, #16]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80052d0:	bf00      	nop
 80052d2:	e7fe      	b.n	80052d2 <xEventGroupCreateStatic+0x22>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticEventGroup_t equals the size of the real
			event group structure. */
			volatile size_t xSize = sizeof( StaticEventGroup_t );
 80052d4:	2320      	movs	r3, #32
 80052d6:	60bb      	str	r3, [r7, #8]
			configASSERT( xSize == sizeof( EventGroup_t ) );
 80052d8:	68bb      	ldr	r3, [r7, #8]
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d00a      	beq.n	80052f4 <xEventGroupCreateStatic+0x44>
	__asm volatile
 80052de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052e2:	f383 8811 	msr	BASEPRI, r3
 80052e6:	f3bf 8f6f 	isb	sy
 80052ea:	f3bf 8f4f 	dsb	sy
 80052ee:	60fb      	str	r3, [r7, #12]
}
 80052f0:	bf00      	nop
 80052f2:	e7fe      	b.n	80052f2 <xEventGroupCreateStatic+0x42>
		} /*lint !e529 xSize is referenced if configASSERT() is defined. */
		#endif /* configASSERT_DEFINED */

		/* The user has provided a statically allocated event group - use it. */
		pxEventBits = ( EventGroup_t * ) pxEventGroupBuffer; /*lint !e740 !e9087 EventGroup_t and StaticEventGroup_t are deliberately aliased for data hiding purposes and guaranteed to have the same size and alignment requirement - checked by configASSERT(). */
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	617b      	str	r3, [r7, #20]

		if( pxEventBits != NULL )
 80052f8:	697b      	ldr	r3, [r7, #20]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d00a      	beq.n	8005314 <xEventGroupCreateStatic+0x64>
		{
			pxEventBits->uxEventBits = 0;
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	2200      	movs	r2, #0
 8005302:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3304      	adds	r3, #4
 8005308:	4618      	mov	r0, r3
 800530a:	f000 f9bf 	bl	800568c <vListInitialise>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note that
				this event group was created statically in case the event group
				is later deleted. */
				pxEventBits->ucStaticallyAllocated = pdTRUE;
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	2201      	movs	r2, #1
 8005312:	771a      	strb	r2, [r3, #28]
			pxEventGroupBuffer pointing to a pre-allocated (compile time
			allocated) StaticEventGroup_t variable. */
			traceEVENT_GROUP_CREATE_FAILED();
		}

		return pxEventBits;
 8005314:	697b      	ldr	r3, [r7, #20]
	}
 8005316:	4618      	mov	r0, r3
 8005318:	3718      	adds	r7, #24
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <xEventGroupCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	EventGroupHandle_t xEventGroupCreate( void )
	{
 800531e:	b580      	push	{r7, lr}
 8005320:	b082      	sub	sp, #8
 8005322:	af00      	add	r7, sp, #0
		TickType_t alignment requirements the cast is safe.  In other cases,
		where the natural word size of the architecture is less than
		sizeof( TickType_t ), the TickType_t variables will be accessed in two
		or more reads operations, and the alignment requirements is only that
		of each individual read. */
		pxEventBits = ( EventGroup_t * ) pvPortMalloc( sizeof( EventGroup_t ) ); /*lint !e9087 !e9079 see comment above. */
 8005324:	2020      	movs	r0, #32
 8005326:	f003 f8d7 	bl	80084d8 <pvPortMalloc>
 800532a:	6078      	str	r0, [r7, #4]

		if( pxEventBits != NULL )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b00      	cmp	r3, #0
 8005330:	d00a      	beq.n	8005348 <xEventGroupCreate+0x2a>
		{
			pxEventBits->uxEventBits = 0;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	601a      	str	r2, [r3, #0]
			vListInitialise( &( pxEventBits->xTasksWaitingForBits ) );
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	3304      	adds	r3, #4
 800533c:	4618      	mov	r0, r3
 800533e:	f000 f9a5 	bl	800568c <vListInitialise>
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Both static and dynamic allocation can be used, so note this
				event group was allocated statically in case the event group is
				later deleted. */
				pxEventBits->ucStaticallyAllocated = pdFALSE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	771a      	strb	r2, [r3, #28]
		else
		{
			traceEVENT_GROUP_CREATE_FAILED(); /*lint !e9063 Else branch only exists to allow tracing and does not generate code if trace macros are not defined. */
		}

		return pxEventBits;
 8005348:	687b      	ldr	r3, [r7, #4]
	}
 800534a:	4618      	mov	r0, r3
 800534c:	3708      	adds	r7, #8
 800534e:	46bd      	mov	sp, r7
 8005350:	bd80      	pop	{r7, pc}
	...

08005354 <xEventGroupWaitBits>:
	return uxReturn;
}
/*-----------------------------------------------------------*/

EventBits_t xEventGroupWaitBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToWaitFor, const BaseType_t xClearOnExit, const BaseType_t xWaitForAllBits, TickType_t xTicksToWait )
{
 8005354:	b580      	push	{r7, lr}
 8005356:	b090      	sub	sp, #64	; 0x40
 8005358:	af00      	add	r7, sp, #0
 800535a:	60f8      	str	r0, [r7, #12]
 800535c:	60b9      	str	r1, [r7, #8]
 800535e:	607a      	str	r2, [r7, #4]
 8005360:	603b      	str	r3, [r7, #0]
EventGroup_t *pxEventBits = xEventGroup;
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	637b      	str	r3, [r7, #52]	; 0x34
EventBits_t uxReturn, uxControlBits = 0;
 8005366:	2300      	movs	r3, #0
 8005368:	63bb      	str	r3, [r7, #56]	; 0x38
BaseType_t xWaitConditionMet, xAlreadyYielded;
BaseType_t xTimeoutOccurred = pdFALSE;
 800536a:	2300      	movs	r3, #0
 800536c:	633b      	str	r3, [r7, #48]	; 0x30

	/* Check the user is not attempting to wait on the bits used by the kernel
	itself, and that at least one bit is being requested. */
	configASSERT( xEventGroup );
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d10a      	bne.n	800538a <xEventGroupWaitBits+0x36>
	__asm volatile
 8005374:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005378:	f383 8811 	msr	BASEPRI, r3
 800537c:	f3bf 8f6f 	isb	sy
 8005380:	f3bf 8f4f 	dsb	sy
 8005384:	623b      	str	r3, [r7, #32]
}
 8005386:	bf00      	nop
 8005388:	e7fe      	b.n	8005388 <xEventGroupWaitBits+0x34>
	configASSERT( ( uxBitsToWaitFor & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005390:	2b00      	cmp	r3, #0
 8005392:	d00a      	beq.n	80053aa <xEventGroupWaitBits+0x56>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	61fb      	str	r3, [r7, #28]
}
 80053a6:	bf00      	nop
 80053a8:	e7fe      	b.n	80053a8 <xEventGroupWaitBits+0x54>
	configASSERT( uxBitsToWaitFor != 0 );
 80053aa:	68bb      	ldr	r3, [r7, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d10a      	bne.n	80053c6 <xEventGroupWaitBits+0x72>
	__asm volatile
 80053b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053b4:	f383 8811 	msr	BASEPRI, r3
 80053b8:	f3bf 8f6f 	isb	sy
 80053bc:	f3bf 8f4f 	dsb	sy
 80053c0:	61bb      	str	r3, [r7, #24]
}
 80053c2:	bf00      	nop
 80053c4:	e7fe      	b.n	80053c4 <xEventGroupWaitBits+0x70>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80053c6:	f001 ff13 	bl	80071f0 <xTaskGetSchedulerState>
 80053ca:	4603      	mov	r3, r0
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d102      	bne.n	80053d6 <xEventGroupWaitBits+0x82>
 80053d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d101      	bne.n	80053da <xEventGroupWaitBits+0x86>
 80053d6:	2301      	movs	r3, #1
 80053d8:	e000      	b.n	80053dc <xEventGroupWaitBits+0x88>
 80053da:	2300      	movs	r3, #0
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d10a      	bne.n	80053f6 <xEventGroupWaitBits+0xa2>
	__asm volatile
 80053e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053e4:	f383 8811 	msr	BASEPRI, r3
 80053e8:	f3bf 8f6f 	isb	sy
 80053ec:	f3bf 8f4f 	dsb	sy
 80053f0:	617b      	str	r3, [r7, #20]
}
 80053f2:	bf00      	nop
 80053f4:	e7fe      	b.n	80053f4 <xEventGroupWaitBits+0xa0>
	}
	#endif

	vTaskSuspendAll();
 80053f6:	f001 fa3d 	bl	8006874 <vTaskSuspendAll>
	{
		const EventBits_t uxCurrentEventBits = pxEventBits->uxEventBits;
 80053fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	62fb      	str	r3, [r7, #44]	; 0x2c

		/* Check to see if the wait condition is already met or not. */
		xWaitConditionMet = prvTestWaitCondition( uxCurrentEventBits, uxBitsToWaitFor, xWaitForAllBits );
 8005400:	683a      	ldr	r2, [r7, #0]
 8005402:	68b9      	ldr	r1, [r7, #8]
 8005404:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8005406:	f000 f90b 	bl	8005620 <prvTestWaitCondition>
 800540a:	62b8      	str	r0, [r7, #40]	; 0x28

		if( xWaitConditionMet != pdFALSE )
 800540c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00e      	beq.n	8005430 <xEventGroupWaitBits+0xdc>
		{
			/* The wait condition has already been met so there is no need to
			block. */
			uxReturn = uxCurrentEventBits;
 8005412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005414:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTicksToWait = ( TickType_t ) 0;
 8005416:	2300      	movs	r3, #0
 8005418:	64bb      	str	r3, [r7, #72]	; 0x48

			/* Clear the wait bits if requested to do so. */
			if( xClearOnExit != pdFALSE )
 800541a:	687b      	ldr	r3, [r7, #4]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d028      	beq.n	8005472 <xEventGroupWaitBits+0x11e>
			{
				pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 8005420:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	43db      	mvns	r3, r3
 8005428:	401a      	ands	r2, r3
 800542a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800542c:	601a      	str	r2, [r3, #0]
 800542e:	e020      	b.n	8005472 <xEventGroupWaitBits+0x11e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		else if( xTicksToWait == ( TickType_t ) 0 )
 8005430:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005432:	2b00      	cmp	r3, #0
 8005434:	d104      	bne.n	8005440 <xEventGroupWaitBits+0xec>
		{
			/* The wait condition has not been met, but no block time was
			specified, so just return the current value. */
			uxReturn = uxCurrentEventBits;
 8005436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005438:	63fb      	str	r3, [r7, #60]	; 0x3c
			xTimeoutOccurred = pdTRUE;
 800543a:	2301      	movs	r3, #1
 800543c:	633b      	str	r3, [r7, #48]	; 0x30
 800543e:	e018      	b.n	8005472 <xEventGroupWaitBits+0x11e>
		{
			/* The task is going to block to wait for its required bits to be
			set.  uxControlBits are used to remember the specified behaviour of
			this call to xEventGroupWaitBits() - for use when the event bits
			unblock the task. */
			if( xClearOnExit != pdFALSE )
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	2b00      	cmp	r3, #0
 8005444:	d003      	beq.n	800544e <xEventGroupWaitBits+0xfa>
			{
				uxControlBits |= eventCLEAR_EVENTS_ON_EXIT_BIT;
 8005446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005448:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800544c:	63bb      	str	r3, [r7, #56]	; 0x38
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( xWaitForAllBits != pdFALSE )
 800544e:	683b      	ldr	r3, [r7, #0]
 8005450:	2b00      	cmp	r3, #0
 8005452:	d003      	beq.n	800545c <xEventGroupWaitBits+0x108>
			{
				uxControlBits |= eventWAIT_FOR_ALL_BITS;
 8005454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005456:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800545a:	63bb      	str	r3, [r7, #56]	; 0x38
			}

			/* Store the bits that the calling task is waiting for in the
			task's event list item so the kernel knows when a match is
			found.  Then enter the blocked state. */
			vTaskPlaceOnUnorderedEventList( &( pxEventBits->xTasksWaitingForBits ), ( uxBitsToWaitFor | uxControlBits ), xTicksToWait );
 800545c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800545e:	1d18      	adds	r0, r3, #4
 8005460:	68ba      	ldr	r2, [r7, #8]
 8005462:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005464:	4313      	orrs	r3, r2
 8005466:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005468:	4619      	mov	r1, r3
 800546a:	f001 fc25 	bl	8006cb8 <vTaskPlaceOnUnorderedEventList>

			/* This is obsolete as it will get set after the task unblocks, but
			some compilers mistakenly generate a warning about the variable
			being returned without being set if it is not done. */
			uxReturn = 0;
 800546e:	2300      	movs	r3, #0
 8005470:	63fb      	str	r3, [r7, #60]	; 0x3c

			traceEVENT_GROUP_WAIT_BITS_BLOCK( xEventGroup, uxBitsToWaitFor );
		}
	}
	xAlreadyYielded = xTaskResumeAll();
 8005472:	f001 fa0d 	bl	8006890 <xTaskResumeAll>
 8005476:	6278      	str	r0, [r7, #36]	; 0x24

	if( xTicksToWait != ( TickType_t ) 0 )
 8005478:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800547a:	2b00      	cmp	r3, #0
 800547c:	d031      	beq.n	80054e2 <xEventGroupWaitBits+0x18e>
	{
		if( xAlreadyYielded == pdFALSE )
 800547e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005480:	2b00      	cmp	r3, #0
 8005482:	d107      	bne.n	8005494 <xEventGroupWaitBits+0x140>
		{
			portYIELD_WITHIN_API();
 8005484:	4b19      	ldr	r3, [pc, #100]	; (80054ec <xEventGroupWaitBits+0x198>)
 8005486:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800548a:	601a      	str	r2, [r3, #0]
 800548c:	f3bf 8f4f 	dsb	sy
 8005490:	f3bf 8f6f 	isb	sy

		/* The task blocked to wait for its required bits to be set - at this
		point either the required bits were set or the block time expired.  If
		the required bits were set they will have been stored in the task's
		event list item, and they should now be retrieved then cleared. */
		uxReturn = uxTaskResetEventItemValue();
 8005494:	f001 ff38 	bl	8007308 <uxTaskResetEventItemValue>
 8005498:	63f8      	str	r0, [r7, #60]	; 0x3c

		if( ( uxReturn & eventUNBLOCKED_DUE_TO_BIT_SET ) == ( EventBits_t ) 0 )
 800549a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800549c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d11a      	bne.n	80054da <xEventGroupWaitBits+0x186>
		{
			taskENTER_CRITICAL();
 80054a4:	f002 fef6 	bl	8008294 <vPortEnterCritical>
			{
				/* The task timed out, just return the current event bit value. */
				uxReturn = pxEventBits->uxEventBits;
 80054a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	63fb      	str	r3, [r7, #60]	; 0x3c

				/* It is possible that the event bits were updated between this
				task leaving the Blocked state and running again. */
				if( prvTestWaitCondition( uxReturn, uxBitsToWaitFor, xWaitForAllBits ) != pdFALSE )
 80054ae:	683a      	ldr	r2, [r7, #0]
 80054b0:	68b9      	ldr	r1, [r7, #8]
 80054b2:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 80054b4:	f000 f8b4 	bl	8005620 <prvTestWaitCondition>
 80054b8:	4603      	mov	r3, r0
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d009      	beq.n	80054d2 <xEventGroupWaitBits+0x17e>
				{
					if( xClearOnExit != pdFALSE )
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d006      	beq.n	80054d2 <xEventGroupWaitBits+0x17e>
					{
						pxEventBits->uxEventBits &= ~uxBitsToWaitFor;
 80054c4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054c6:	681a      	ldr	r2, [r3, #0]
 80054c8:	68bb      	ldr	r3, [r7, #8]
 80054ca:	43db      	mvns	r3, r3
 80054cc:	401a      	ands	r2, r3
 80054ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80054d0:	601a      	str	r2, [r3, #0]
				}
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
				xTimeoutOccurred = pdTRUE;
 80054d2:	2301      	movs	r3, #1
 80054d4:	633b      	str	r3, [r7, #48]	; 0x30
			}
			taskEXIT_CRITICAL();
 80054d6:	f002 ff0d 	bl	80082f4 <vPortExitCritical>
		{
			/* The task unblocked because the bits were set. */
		}

		/* The task blocked so control bits may have been set. */
		uxReturn &= ~eventEVENT_BITS_CONTROL_BYTES;
 80054da:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80054dc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80054e0:	63fb      	str	r3, [r7, #60]	; 0x3c
	traceEVENT_GROUP_WAIT_BITS_END( xEventGroup, uxBitsToWaitFor, xTimeoutOccurred );

	/* Prevent compiler warnings when trace macros are not used. */
	( void ) xTimeoutOccurred;

	return uxReturn;
 80054e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80054e4:	4618      	mov	r0, r3
 80054e6:	3740      	adds	r7, #64	; 0x40
 80054e8:	46bd      	mov	sp, r7
 80054ea:	bd80      	pop	{r7, pc}
 80054ec:	e000ed04 	.word	0xe000ed04

080054f0 <xEventGroupSetBits>:
	return uxReturn;
} /*lint !e818 EventGroupHandle_t is a typedef used in other functions to so can't be pointer to const. */
/*-----------------------------------------------------------*/

EventBits_t xEventGroupSetBits( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet )
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b08e      	sub	sp, #56	; 0x38
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
 80054f8:	6039      	str	r1, [r7, #0]
ListItem_t *pxListItem, *pxNext;
ListItem_t const *pxListEnd;
List_t const * pxList;
EventBits_t uxBitsToClear = 0, uxBitsWaitedFor, uxControlBits;
 80054fa:	2300      	movs	r3, #0
 80054fc:	633b      	str	r3, [r7, #48]	; 0x30
EventGroup_t *pxEventBits = xEventGroup;
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	62bb      	str	r3, [r7, #40]	; 0x28
BaseType_t xMatchFound = pdFALSE;
 8005502:	2300      	movs	r3, #0
 8005504:	62fb      	str	r3, [r7, #44]	; 0x2c

	/* Check the user is not attempting to set the bits used by the kernel
	itself. */
	configASSERT( xEventGroup );
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	2b00      	cmp	r3, #0
 800550a:	d10a      	bne.n	8005522 <xEventGroupSetBits+0x32>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	613b      	str	r3, [r7, #16]
}
 800551e:	bf00      	nop
 8005520:	e7fe      	b.n	8005520 <xEventGroupSetBits+0x30>
	configASSERT( ( uxBitsToSet & eventEVENT_BITS_CONTROL_BYTES ) == 0 );
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8005528:	2b00      	cmp	r3, #0
 800552a:	d00a      	beq.n	8005542 <xEventGroupSetBits+0x52>
	__asm volatile
 800552c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005530:	f383 8811 	msr	BASEPRI, r3
 8005534:	f3bf 8f6f 	isb	sy
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	60fb      	str	r3, [r7, #12]
}
 800553e:	bf00      	nop
 8005540:	e7fe      	b.n	8005540 <xEventGroupSetBits+0x50>

	pxList = &( pxEventBits->xTasksWaitingForBits );
 8005542:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005544:	3304      	adds	r3, #4
 8005546:	627b      	str	r3, [r7, #36]	; 0x24
	pxListEnd = listGET_END_MARKER( pxList ); /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554a:	3308      	adds	r3, #8
 800554c:	623b      	str	r3, [r7, #32]
	vTaskSuspendAll();
 800554e:	f001 f991 	bl	8006874 <vTaskSuspendAll>
	{
		traceEVENT_GROUP_SET_BITS( xEventGroup, uxBitsToSet );

		pxListItem = listGET_HEAD_ENTRY( pxList );
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	68db      	ldr	r3, [r3, #12]
 8005556:	637b      	str	r3, [r7, #52]	; 0x34

		/* Set the bits. */
		pxEventBits->uxEventBits |= uxBitsToSet;
 8005558:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800555a:	681a      	ldr	r2, [r3, #0]
 800555c:	683b      	ldr	r3, [r7, #0]
 800555e:	431a      	orrs	r2, r3
 8005560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005562:	601a      	str	r2, [r3, #0]

		/* See if the new bit value should unblock any tasks. */
		while( pxListItem != pxListEnd )
 8005564:	e03c      	b.n	80055e0 <xEventGroupSetBits+0xf0>
		{
			pxNext = listGET_NEXT( pxListItem );
 8005566:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	61fb      	str	r3, [r7, #28]
			uxBitsWaitedFor = listGET_LIST_ITEM_VALUE( pxListItem );
 800556c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	61bb      	str	r3, [r7, #24]
			xMatchFound = pdFALSE;
 8005572:	2300      	movs	r3, #0
 8005574:	62fb      	str	r3, [r7, #44]	; 0x2c

			/* Split the bits waited for from the control bits. */
			uxControlBits = uxBitsWaitedFor & eventEVENT_BITS_CONTROL_BYTES;
 8005576:	69bb      	ldr	r3, [r7, #24]
 8005578:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 800557c:	617b      	str	r3, [r7, #20]
			uxBitsWaitedFor &= ~eventEVENT_BITS_CONTROL_BYTES;
 800557e:	69bb      	ldr	r3, [r7, #24]
 8005580:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8005584:	61bb      	str	r3, [r7, #24]

			if( ( uxControlBits & eventWAIT_FOR_ALL_BITS ) == ( EventBits_t ) 0 )
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800558c:	2b00      	cmp	r3, #0
 800558e:	d108      	bne.n	80055a2 <xEventGroupSetBits+0xb2>
			{
				/* Just looking for single bit being set. */
				if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) != ( EventBits_t ) 0 )
 8005590:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	69bb      	ldr	r3, [r7, #24]
 8005596:	4013      	ands	r3, r2
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00b      	beq.n	80055b4 <xEventGroupSetBits+0xc4>
				{
					xMatchFound = pdTRUE;
 800559c:	2301      	movs	r3, #1
 800559e:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055a0:	e008      	b.n	80055b4 <xEventGroupSetBits+0xc4>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}
			}
			else if( ( uxBitsWaitedFor & pxEventBits->uxEventBits ) == uxBitsWaitedFor )
 80055a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055a4:	681a      	ldr	r2, [r3, #0]
 80055a6:	69bb      	ldr	r3, [r7, #24]
 80055a8:	4013      	ands	r3, r2
 80055aa:	69ba      	ldr	r2, [r7, #24]
 80055ac:	429a      	cmp	r2, r3
 80055ae:	d101      	bne.n	80055b4 <xEventGroupSetBits+0xc4>
			{
				/* All bits are set. */
				xMatchFound = pdTRUE;
 80055b0:	2301      	movs	r3, #1
 80055b2:	62fb      	str	r3, [r7, #44]	; 0x2c
			else
			{
				/* Need all bits to be set, but not all the bits were set. */
			}

			if( xMatchFound != pdFALSE )
 80055b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d010      	beq.n	80055dc <xEventGroupSetBits+0xec>
			{
				/* The bits match.  Should the bits be cleared on exit? */
				if( ( uxControlBits & eventCLEAR_EVENTS_ON_EXIT_BIT ) != ( EventBits_t ) 0 )
 80055ba:	697b      	ldr	r3, [r7, #20]
 80055bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d003      	beq.n	80055cc <xEventGroupSetBits+0xdc>
				{
					uxBitsToClear |= uxBitsWaitedFor;
 80055c4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80055c6:	69bb      	ldr	r3, [r7, #24]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	633b      	str	r3, [r7, #48]	; 0x30
				/* Store the actual event flag value in the task's event list
				item before removing the task from the event list.  The
				eventUNBLOCKED_DUE_TO_BIT_SET bit is set so the task knows
				that is was unblocked due to its required bits matching, rather
				than because it timed out. */
				vTaskRemoveFromUnorderedEventList( pxListItem, pxEventBits->uxEventBits | eventUNBLOCKED_DUE_TO_BIT_SET );
 80055cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80055d4:	4619      	mov	r1, r3
 80055d6:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80055d8:	f001 fc3a 	bl	8006e50 <vTaskRemoveFromUnorderedEventList>
			}

			/* Move onto the next list item.  Note pxListItem->pxNext is not
			used here as the list item may have been removed from the event list
			and inserted into the ready/pending reading list. */
			pxListItem = pxNext;
 80055dc:	69fb      	ldr	r3, [r7, #28]
 80055de:	637b      	str	r3, [r7, #52]	; 0x34
		while( pxListItem != pxListEnd )
 80055e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80055e2:	6a3b      	ldr	r3, [r7, #32]
 80055e4:	429a      	cmp	r2, r3
 80055e6:	d1be      	bne.n	8005566 <xEventGroupSetBits+0x76>
		}

		/* Clear any bits that matched when the eventCLEAR_EVENTS_ON_EXIT_BIT
		bit was set in the control word. */
		pxEventBits->uxEventBits &= ~uxBitsToClear;
 80055e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055ea:	681a      	ldr	r2, [r3, #0]
 80055ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055ee:	43db      	mvns	r3, r3
 80055f0:	401a      	ands	r2, r3
 80055f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055f4:	601a      	str	r2, [r3, #0]
	}
	( void ) xTaskResumeAll();
 80055f6:	f001 f94b 	bl	8006890 <xTaskResumeAll>

	return pxEventBits->uxEventBits;
 80055fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80055fc:	681b      	ldr	r3, [r3, #0]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3738      	adds	r7, #56	; 0x38
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <vEventGroupSetBitsCallback>:
/*-----------------------------------------------------------*/

/* For internal use only - execute a 'set bits' command that was pended from
an interrupt. */
void vEventGroupSetBitsCallback( void *pvEventGroup, const uint32_t ulBitsToSet )
{
 8005606:	b580      	push	{r7, lr}
 8005608:	b082      	sub	sp, #8
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
 800560e:	6039      	str	r1, [r7, #0]
	( void ) xEventGroupSetBits( pvEventGroup, ( EventBits_t ) ulBitsToSet ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
 8005610:	6839      	ldr	r1, [r7, #0]
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f7ff ff6c 	bl	80054f0 <xEventGroupSetBits>
}
 8005618:	bf00      	nop
 800561a:	3708      	adds	r7, #8
 800561c:	46bd      	mov	sp, r7
 800561e:	bd80      	pop	{r7, pc}

08005620 <prvTestWaitCondition>:
	( void ) xEventGroupClearBits( pvEventGroup, ( EventBits_t ) ulBitsToClear ); /*lint !e9079 Can't avoid cast to void* as a generic timer callback prototype. Callback casts back to original type so safe. */
}
/*-----------------------------------------------------------*/

static BaseType_t prvTestWaitCondition( const EventBits_t uxCurrentEventBits, const EventBits_t uxBitsToWaitFor, const BaseType_t xWaitForAllBits )
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	60f8      	str	r0, [r7, #12]
 8005628:	60b9      	str	r1, [r7, #8]
 800562a:	607a      	str	r2, [r7, #4]
BaseType_t xWaitConditionMet = pdFALSE;
 800562c:	2300      	movs	r3, #0
 800562e:	617b      	str	r3, [r7, #20]

	if( xWaitForAllBits == pdFALSE )
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2b00      	cmp	r3, #0
 8005634:	d107      	bne.n	8005646 <prvTestWaitCondition+0x26>
	{
		/* Task only has to wait for one bit within uxBitsToWaitFor to be
		set.  Is one already set? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) != ( EventBits_t ) 0 )
 8005636:	68fa      	ldr	r2, [r7, #12]
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	4013      	ands	r3, r2
 800563c:	2b00      	cmp	r3, #0
 800563e:	d00a      	beq.n	8005656 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005640:	2301      	movs	r3, #1
 8005642:	617b      	str	r3, [r7, #20]
 8005644:	e007      	b.n	8005656 <prvTestWaitCondition+0x36>
	}
	else
	{
		/* Task has to wait for all the bits in uxBitsToWaitFor to be set.
		Are they set already? */
		if( ( uxCurrentEventBits & uxBitsToWaitFor ) == uxBitsToWaitFor )
 8005646:	68fa      	ldr	r2, [r7, #12]
 8005648:	68bb      	ldr	r3, [r7, #8]
 800564a:	4013      	ands	r3, r2
 800564c:	68ba      	ldr	r2, [r7, #8]
 800564e:	429a      	cmp	r2, r3
 8005650:	d101      	bne.n	8005656 <prvTestWaitCondition+0x36>
		{
			xWaitConditionMet = pdTRUE;
 8005652:	2301      	movs	r3, #1
 8005654:	617b      	str	r3, [r7, #20]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	return xWaitConditionMet;
 8005656:	697b      	ldr	r3, [r7, #20]
}
 8005658:	4618      	mov	r0, r3
 800565a:	371c      	adds	r7, #28
 800565c:	46bd      	mov	sp, r7
 800565e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005662:	4770      	bx	lr

08005664 <xEventGroupSetBitsFromISR>:
/*-----------------------------------------------------------*/

#if ( ( configUSE_TRACE_FACILITY == 1 ) && ( INCLUDE_xTimerPendFunctionCall == 1 ) && ( configUSE_TIMERS == 1 ) )

	BaseType_t xEventGroupSetBitsFromISR( EventGroupHandle_t xEventGroup, const EventBits_t uxBitsToSet, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8005664:	b580      	push	{r7, lr}
 8005666:	b086      	sub	sp, #24
 8005668:	af00      	add	r7, sp, #0
 800566a:	60f8      	str	r0, [r7, #12]
 800566c:	60b9      	str	r1, [r7, #8]
 800566e:	607a      	str	r2, [r7, #4]
	BaseType_t xReturn;

		traceEVENT_GROUP_SET_BITS_FROM_ISR( xEventGroup, uxBitsToSet );
		xReturn = xTimerPendFunctionCallFromISR( vEventGroupSetBitsCallback, ( void * ) xEventGroup, ( uint32_t ) uxBitsToSet, pxHigherPriorityTaskWoken ); /*lint !e9087 Can't avoid cast to void* as a generic callback function not specific to this use case. Callback casts back to original type so safe. */
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	68ba      	ldr	r2, [r7, #8]
 8005674:	68f9      	ldr	r1, [r7, #12]
 8005676:	4804      	ldr	r0, [pc, #16]	; (8005688 <xEventGroupSetBitsFromISR+0x24>)
 8005678:	f002 fcbc 	bl	8007ff4 <xTimerPendFunctionCallFromISR>
 800567c:	6178      	str	r0, [r7, #20]

		return xReturn;
 800567e:	697b      	ldr	r3, [r7, #20]
	}
 8005680:	4618      	mov	r0, r3
 8005682:	3718      	adds	r7, #24
 8005684:	46bd      	mov	sp, r7
 8005686:	bd80      	pop	{r7, pc}
 8005688:	08005607 	.word	0x08005607

0800568c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800568c:	b480      	push	{r7}
 800568e:	b083      	sub	sp, #12
 8005690:	af00      	add	r7, sp, #0
 8005692:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	f103 0208 	add.w	r2, r3, #8
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80056a4:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	f103 0208 	add.w	r2, r3, #8
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f103 0208 	add.w	r2, r3, #8
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80056c0:	bf00      	nop
 80056c2:	370c      	adds	r7, #12
 80056c4:	46bd      	mov	sp, r7
 80056c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ca:	4770      	bx	lr

080056cc <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80056cc:	b480      	push	{r7}
 80056ce:	b083      	sub	sp, #12
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	2200      	movs	r2, #0
 80056d8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80056da:	bf00      	nop
 80056dc:	370c      	adds	r7, #12
 80056de:	46bd      	mov	sp, r7
 80056e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e4:	4770      	bx	lr

080056e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80056e6:	b480      	push	{r7}
 80056e8:	b085      	sub	sp, #20
 80056ea:	af00      	add	r7, sp, #0
 80056ec:	6078      	str	r0, [r7, #4]
 80056ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	685b      	ldr	r3, [r3, #4]
 80056f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80056f6:	683b      	ldr	r3, [r7, #0]
 80056f8:	68fa      	ldr	r2, [r7, #12]
 80056fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	689a      	ldr	r2, [r3, #8]
 8005700:	683b      	ldr	r3, [r7, #0]
 8005702:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	683a      	ldr	r2, [r7, #0]
 800570a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	683a      	ldr	r2, [r7, #0]
 8005710:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	687a      	ldr	r2, [r7, #4]
 8005716:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	1c5a      	adds	r2, r3, #1
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	601a      	str	r2, [r3, #0]
}
 8005722:	bf00      	nop
 8005724:	3714      	adds	r7, #20
 8005726:	46bd      	mov	sp, r7
 8005728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572c:	4770      	bx	lr

0800572e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800572e:	b480      	push	{r7}
 8005730:	b085      	sub	sp, #20
 8005732:	af00      	add	r7, sp, #0
 8005734:	6078      	str	r0, [r7, #4]
 8005736:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005744:	d103      	bne.n	800574e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	60fb      	str	r3, [r7, #12]
 800574c:	e00c      	b.n	8005768 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	3308      	adds	r3, #8
 8005752:	60fb      	str	r3, [r7, #12]
 8005754:	e002      	b.n	800575c <vListInsert+0x2e>
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	60fb      	str	r3, [r7, #12]
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	685b      	ldr	r3, [r3, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	68ba      	ldr	r2, [r7, #8]
 8005764:	429a      	cmp	r2, r3
 8005766:	d2f6      	bcs.n	8005756 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	685a      	ldr	r2, [r3, #4]
 800576c:	683b      	ldr	r3, [r7, #0]
 800576e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005770:	683b      	ldr	r3, [r7, #0]
 8005772:	685b      	ldr	r3, [r3, #4]
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	683a      	ldr	r2, [r7, #0]
 8005782:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	687a      	ldr	r2, [r7, #4]
 8005788:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	1c5a      	adds	r2, r3, #1
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	601a      	str	r2, [r3, #0]
}
 8005794:	bf00      	nop
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	691b      	ldr	r3, [r3, #16]
 80057ac:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	685b      	ldr	r3, [r3, #4]
 80057b2:	687a      	ldr	r2, [r7, #4]
 80057b4:	6892      	ldr	r2, [r2, #8]
 80057b6:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	687a      	ldr	r2, [r7, #4]
 80057be:	6852      	ldr	r2, [r2, #4]
 80057c0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	687a      	ldr	r2, [r7, #4]
 80057c8:	429a      	cmp	r2, r3
 80057ca:	d103      	bne.n	80057d4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	689a      	ldr	r2, [r3, #8]
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2200      	movs	r2, #0
 80057d8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	1e5a      	subs	r2, r3, #1
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	681b      	ldr	r3, [r3, #0]
}
 80057e8:	4618      	mov	r0, r3
 80057ea:	3714      	adds	r7, #20
 80057ec:	46bd      	mov	sp, r7
 80057ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f2:	4770      	bx	lr

080057f4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80057f4:	b580      	push	{r7, lr}
 80057f6:	b084      	sub	sp, #16
 80057f8:	af00      	add	r7, sp, #0
 80057fa:	6078      	str	r0, [r7, #4]
 80057fc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	2b00      	cmp	r3, #0
 8005806:	d10a      	bne.n	800581e <xQueueGenericReset+0x2a>
	__asm volatile
 8005808:	f04f 0350 	mov.w	r3, #80	; 0x50
 800580c:	f383 8811 	msr	BASEPRI, r3
 8005810:	f3bf 8f6f 	isb	sy
 8005814:	f3bf 8f4f 	dsb	sy
 8005818:	60bb      	str	r3, [r7, #8]
}
 800581a:	bf00      	nop
 800581c:	e7fe      	b.n	800581c <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800581e:	f002 fd39 	bl	8008294 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681a      	ldr	r2, [r3, #0]
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800582a:	68f9      	ldr	r1, [r7, #12]
 800582c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800582e:	fb01 f303 	mul.w	r3, r1, r3
 8005832:	441a      	add	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	2200      	movs	r2, #0
 800583c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800583e:	68fb      	ldr	r3, [r7, #12]
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681a      	ldr	r2, [r3, #0]
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800584e:	3b01      	subs	r3, #1
 8005850:	68f9      	ldr	r1, [r7, #12]
 8005852:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005854:	fb01 f303 	mul.w	r3, r1, r3
 8005858:	441a      	add	r2, r3
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	22ff      	movs	r2, #255	; 0xff
 8005862:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	22ff      	movs	r2, #255	; 0xff
 800586a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	2b00      	cmp	r3, #0
 8005872:	d114      	bne.n	800589e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005874:	68fb      	ldr	r3, [r7, #12]
 8005876:	691b      	ldr	r3, [r3, #16]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d01a      	beq.n	80058b2 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	3310      	adds	r3, #16
 8005880:	4618      	mov	r0, r3
 8005882:	f001 fa81 	bl	8006d88 <xTaskRemoveFromEventList>
 8005886:	4603      	mov	r3, r0
 8005888:	2b00      	cmp	r3, #0
 800588a:	d012      	beq.n	80058b2 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800588c:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <xQueueGenericReset+0xcc>)
 800588e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	f3bf 8f4f 	dsb	sy
 8005898:	f3bf 8f6f 	isb	sy
 800589c:	e009      	b.n	80058b2 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3310      	adds	r3, #16
 80058a2:	4618      	mov	r0, r3
 80058a4:	f7ff fef2 	bl	800568c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80058a8:	68fb      	ldr	r3, [r7, #12]
 80058aa:	3324      	adds	r3, #36	; 0x24
 80058ac:	4618      	mov	r0, r3
 80058ae:	f7ff feed 	bl	800568c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80058b2:	f002 fd1f 	bl	80082f4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80058b6:	2301      	movs	r3, #1
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	bd80      	pop	{r7, pc}
 80058c0:	e000ed04 	.word	0xe000ed04

080058c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08e      	sub	sp, #56	; 0x38
 80058c8:	af02      	add	r7, sp, #8
 80058ca:	60f8      	str	r0, [r7, #12]
 80058cc:	60b9      	str	r1, [r7, #8]
 80058ce:	607a      	str	r2, [r7, #4]
 80058d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d10a      	bne.n	80058ee <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 80058d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058dc:	f383 8811 	msr	BASEPRI, r3
 80058e0:	f3bf 8f6f 	isb	sy
 80058e4:	f3bf 8f4f 	dsb	sy
 80058e8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 80058ea:	bf00      	nop
 80058ec:	e7fe      	b.n	80058ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80058ee:	683b      	ldr	r3, [r7, #0]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d10a      	bne.n	800590a <xQueueGenericCreateStatic+0x46>
	__asm volatile
 80058f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058f8:	f383 8811 	msr	BASEPRI, r3
 80058fc:	f3bf 8f6f 	isb	sy
 8005900:	f3bf 8f4f 	dsb	sy
 8005904:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005906:	bf00      	nop
 8005908:	e7fe      	b.n	8005908 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d002      	beq.n	8005916 <xQueueGenericCreateStatic+0x52>
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d001      	beq.n	800591a <xQueueGenericCreateStatic+0x56>
 8005916:	2301      	movs	r3, #1
 8005918:	e000      	b.n	800591c <xQueueGenericCreateStatic+0x58>
 800591a:	2300      	movs	r3, #0
 800591c:	2b00      	cmp	r3, #0
 800591e:	d10a      	bne.n	8005936 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005920:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005924:	f383 8811 	msr	BASEPRI, r3
 8005928:	f3bf 8f6f 	isb	sy
 800592c:	f3bf 8f4f 	dsb	sy
 8005930:	623b      	str	r3, [r7, #32]
}
 8005932:	bf00      	nop
 8005934:	e7fe      	b.n	8005934 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	2b00      	cmp	r3, #0
 800593a:	d102      	bne.n	8005942 <xQueueGenericCreateStatic+0x7e>
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	2b00      	cmp	r3, #0
 8005940:	d101      	bne.n	8005946 <xQueueGenericCreateStatic+0x82>
 8005942:	2301      	movs	r3, #1
 8005944:	e000      	b.n	8005948 <xQueueGenericCreateStatic+0x84>
 8005946:	2300      	movs	r3, #0
 8005948:	2b00      	cmp	r3, #0
 800594a:	d10a      	bne.n	8005962 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 800594c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005950:	f383 8811 	msr	BASEPRI, r3
 8005954:	f3bf 8f6f 	isb	sy
 8005958:	f3bf 8f4f 	dsb	sy
 800595c:	61fb      	str	r3, [r7, #28]
}
 800595e:	bf00      	nop
 8005960:	e7fe      	b.n	8005960 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005962:	2350      	movs	r3, #80	; 0x50
 8005964:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005966:	697b      	ldr	r3, [r7, #20]
 8005968:	2b50      	cmp	r3, #80	; 0x50
 800596a:	d00a      	beq.n	8005982 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	61bb      	str	r3, [r7, #24]
}
 800597e:	bf00      	nop
 8005980:	e7fe      	b.n	8005980 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005982:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005984:	683b      	ldr	r3, [r7, #0]
 8005986:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005988:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800598a:	2b00      	cmp	r3, #0
 800598c:	d00d      	beq.n	80059aa <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800598e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005990:	2201      	movs	r2, #1
 8005992:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005996:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800599a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800599c:	9300      	str	r3, [sp, #0]
 800599e:	4613      	mov	r3, r2
 80059a0:	687a      	ldr	r2, [r7, #4]
 80059a2:	68b9      	ldr	r1, [r7, #8]
 80059a4:	68f8      	ldr	r0, [r7, #12]
 80059a6:	f000 f83f 	bl	8005a28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80059aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3730      	adds	r7, #48	; 0x30
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b08a      	sub	sp, #40	; 0x28
 80059b8:	af02      	add	r7, sp, #8
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	4613      	mov	r3, r2
 80059c0:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	2b00      	cmp	r3, #0
 80059c6:	d10a      	bne.n	80059de <xQueueGenericCreate+0x2a>
	__asm volatile
 80059c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059cc:	f383 8811 	msr	BASEPRI, r3
 80059d0:	f3bf 8f6f 	isb	sy
 80059d4:	f3bf 8f4f 	dsb	sy
 80059d8:	613b      	str	r3, [r7, #16]
}
 80059da:	bf00      	nop
 80059dc:	e7fe      	b.n	80059dc <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	68ba      	ldr	r2, [r7, #8]
 80059e2:	fb02 f303 	mul.w	r3, r2, r3
 80059e6:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80059e8:	69fb      	ldr	r3, [r7, #28]
 80059ea:	3350      	adds	r3, #80	; 0x50
 80059ec:	4618      	mov	r0, r3
 80059ee:	f002 fd73 	bl	80084d8 <pvPortMalloc>
 80059f2:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80059f4:	69bb      	ldr	r3, [r7, #24]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d011      	beq.n	8005a1e <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80059fa:	69bb      	ldr	r3, [r7, #24]
 80059fc:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	3350      	adds	r3, #80	; 0x50
 8005a02:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005a04:	69bb      	ldr	r3, [r7, #24]
 8005a06:	2200      	movs	r2, #0
 8005a08:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a0c:	79fa      	ldrb	r2, [r7, #7]
 8005a0e:	69bb      	ldr	r3, [r7, #24]
 8005a10:	9300      	str	r3, [sp, #0]
 8005a12:	4613      	mov	r3, r2
 8005a14:	697a      	ldr	r2, [r7, #20]
 8005a16:	68b9      	ldr	r1, [r7, #8]
 8005a18:	68f8      	ldr	r0, [r7, #12]
 8005a1a:	f000 f805 	bl	8005a28 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a1e:	69bb      	ldr	r3, [r7, #24]
	}
 8005a20:	4618      	mov	r0, r3
 8005a22:	3720      	adds	r7, #32
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005a28:	b580      	push	{r7, lr}
 8005a2a:	b084      	sub	sp, #16
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	60f8      	str	r0, [r7, #12]
 8005a30:	60b9      	str	r1, [r7, #8]
 8005a32:	607a      	str	r2, [r7, #4]
 8005a34:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005a36:	68bb      	ldr	r3, [r7, #8]
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d103      	bne.n	8005a44 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005a3c:	69bb      	ldr	r3, [r7, #24]
 8005a3e:	69ba      	ldr	r2, [r7, #24]
 8005a40:	601a      	str	r2, [r3, #0]
 8005a42:	e002      	b.n	8005a4a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005a44:	69bb      	ldr	r3, [r7, #24]
 8005a46:	687a      	ldr	r2, [r7, #4]
 8005a48:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005a4a:	69bb      	ldr	r3, [r7, #24]
 8005a4c:	68fa      	ldr	r2, [r7, #12]
 8005a4e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005a50:	69bb      	ldr	r3, [r7, #24]
 8005a52:	68ba      	ldr	r2, [r7, #8]
 8005a54:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005a56:	2101      	movs	r1, #1
 8005a58:	69b8      	ldr	r0, [r7, #24]
 8005a5a:	f7ff fecb 	bl	80057f4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005a5e:	69bb      	ldr	r3, [r7, #24]
 8005a60:	78fa      	ldrb	r2, [r7, #3]
 8005a62:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005a66:	bf00      	nop
 8005a68:	3710      	adds	r7, #16
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}
	...

08005a70 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005a70:	b580      	push	{r7, lr}
 8005a72:	b08e      	sub	sp, #56	; 0x38
 8005a74:	af00      	add	r7, sp, #0
 8005a76:	60f8      	str	r0, [r7, #12]
 8005a78:	60b9      	str	r1, [r7, #8]
 8005a7a:	607a      	str	r2, [r7, #4]
 8005a7c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005a7e:	2300      	movs	r3, #0
 8005a80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005a86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d10a      	bne.n	8005aa2 <xQueueGenericSend+0x32>
	__asm volatile
 8005a8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a90:	f383 8811 	msr	BASEPRI, r3
 8005a94:	f3bf 8f6f 	isb	sy
 8005a98:	f3bf 8f4f 	dsb	sy
 8005a9c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005a9e:	bf00      	nop
 8005aa0:	e7fe      	b.n	8005aa0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005aa2:	68bb      	ldr	r3, [r7, #8]
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d103      	bne.n	8005ab0 <xQueueGenericSend+0x40>
 8005aa8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d101      	bne.n	8005ab4 <xQueueGenericSend+0x44>
 8005ab0:	2301      	movs	r3, #1
 8005ab2:	e000      	b.n	8005ab6 <xQueueGenericSend+0x46>
 8005ab4:	2300      	movs	r3, #0
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d10a      	bne.n	8005ad0 <xQueueGenericSend+0x60>
	__asm volatile
 8005aba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005abe:	f383 8811 	msr	BASEPRI, r3
 8005ac2:	f3bf 8f6f 	isb	sy
 8005ac6:	f3bf 8f4f 	dsb	sy
 8005aca:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005acc:	bf00      	nop
 8005ace:	e7fe      	b.n	8005ace <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d103      	bne.n	8005ade <xQueueGenericSend+0x6e>
 8005ad6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ada:	2b01      	cmp	r3, #1
 8005adc:	d101      	bne.n	8005ae2 <xQueueGenericSend+0x72>
 8005ade:	2301      	movs	r3, #1
 8005ae0:	e000      	b.n	8005ae4 <xQueueGenericSend+0x74>
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d10a      	bne.n	8005afe <xQueueGenericSend+0x8e>
	__asm volatile
 8005ae8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005aec:	f383 8811 	msr	BASEPRI, r3
 8005af0:	f3bf 8f6f 	isb	sy
 8005af4:	f3bf 8f4f 	dsb	sy
 8005af8:	623b      	str	r3, [r7, #32]
}
 8005afa:	bf00      	nop
 8005afc:	e7fe      	b.n	8005afc <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005afe:	f001 fb77 	bl	80071f0 <xTaskGetSchedulerState>
 8005b02:	4603      	mov	r3, r0
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d102      	bne.n	8005b0e <xQueueGenericSend+0x9e>
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d101      	bne.n	8005b12 <xQueueGenericSend+0xa2>
 8005b0e:	2301      	movs	r3, #1
 8005b10:	e000      	b.n	8005b14 <xQueueGenericSend+0xa4>
 8005b12:	2300      	movs	r3, #0
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d10a      	bne.n	8005b2e <xQueueGenericSend+0xbe>
	__asm volatile
 8005b18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b1c:	f383 8811 	msr	BASEPRI, r3
 8005b20:	f3bf 8f6f 	isb	sy
 8005b24:	f3bf 8f4f 	dsb	sy
 8005b28:	61fb      	str	r3, [r7, #28]
}
 8005b2a:	bf00      	nop
 8005b2c:	e7fe      	b.n	8005b2c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005b2e:	f002 fbb1 	bl	8008294 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005b32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b34:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b3a:	429a      	cmp	r2, r3
 8005b3c:	d302      	bcc.n	8005b44 <xQueueGenericSend+0xd4>
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	2b02      	cmp	r3, #2
 8005b42:	d129      	bne.n	8005b98 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	68b9      	ldr	r1, [r7, #8]
 8005b48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005b4a:	f000 fa8b 	bl	8006064 <prvCopyDataToQueue>
 8005b4e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005b50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	d010      	beq.n	8005b7a <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005b58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b5a:	3324      	adds	r3, #36	; 0x24
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	f001 f913 	bl	8006d88 <xTaskRemoveFromEventList>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d013      	beq.n	8005b90 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005b68:	4b3f      	ldr	r3, [pc, #252]	; (8005c68 <xQueueGenericSend+0x1f8>)
 8005b6a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b6e:	601a      	str	r2, [r3, #0]
 8005b70:	f3bf 8f4f 	dsb	sy
 8005b74:	f3bf 8f6f 	isb	sy
 8005b78:	e00a      	b.n	8005b90 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005b7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d007      	beq.n	8005b90 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005b80:	4b39      	ldr	r3, [pc, #228]	; (8005c68 <xQueueGenericSend+0x1f8>)
 8005b82:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b86:	601a      	str	r2, [r3, #0]
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005b90:	f002 fbb0 	bl	80082f4 <vPortExitCritical>
				return pdPASS;
 8005b94:	2301      	movs	r3, #1
 8005b96:	e063      	b.n	8005c60 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d103      	bne.n	8005ba6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005b9e:	f002 fba9 	bl	80082f4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	e05c      	b.n	8005c60 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005ba6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d106      	bne.n	8005bba <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005bac:	f107 0314 	add.w	r3, r7, #20
 8005bb0:	4618      	mov	r0, r3
 8005bb2:	f001 f9af 	bl	8006f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005bba:	f002 fb9b 	bl	80082f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005bbe:	f000 fe59 	bl	8006874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005bc2:	f002 fb67 	bl	8008294 <vPortEnterCritical>
 8005bc6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bc8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bcc:	b25b      	sxtb	r3, r3
 8005bce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005bd2:	d103      	bne.n	8005bdc <xQueueGenericSend+0x16c>
 8005bd4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bde:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005be2:	b25b      	sxtb	r3, r3
 8005be4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005be8:	d103      	bne.n	8005bf2 <xQueueGenericSend+0x182>
 8005bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005bec:	2200      	movs	r2, #0
 8005bee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005bf2:	f002 fb7f 	bl	80082f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005bf6:	1d3a      	adds	r2, r7, #4
 8005bf8:	f107 0314 	add.w	r3, r7, #20
 8005bfc:	4611      	mov	r1, r2
 8005bfe:	4618      	mov	r0, r3
 8005c00:	f001 f99e 	bl	8006f40 <xTaskCheckForTimeOut>
 8005c04:	4603      	mov	r3, r0
 8005c06:	2b00      	cmp	r3, #0
 8005c08:	d124      	bne.n	8005c54 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005c0a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c0c:	f000 fb22 	bl	8006254 <prvIsQueueFull>
 8005c10:	4603      	mov	r3, r0
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d018      	beq.n	8005c48 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005c16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c18:	3310      	adds	r3, #16
 8005c1a:	687a      	ldr	r2, [r7, #4]
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f001 f826 	bl	8006c70 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005c24:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c26:	f000 faad 	bl	8006184 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005c2a:	f000 fe31 	bl	8006890 <xTaskResumeAll>
 8005c2e:	4603      	mov	r3, r0
 8005c30:	2b00      	cmp	r3, #0
 8005c32:	f47f af7c 	bne.w	8005b2e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005c36:	4b0c      	ldr	r3, [pc, #48]	; (8005c68 <xQueueGenericSend+0x1f8>)
 8005c38:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005c3c:	601a      	str	r2, [r3, #0]
 8005c3e:	f3bf 8f4f 	dsb	sy
 8005c42:	f3bf 8f6f 	isb	sy
 8005c46:	e772      	b.n	8005b2e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005c48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c4a:	f000 fa9b 	bl	8006184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005c4e:	f000 fe1f 	bl	8006890 <xTaskResumeAll>
 8005c52:	e76c      	b.n	8005b2e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005c54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005c56:	f000 fa95 	bl	8006184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005c5a:	f000 fe19 	bl	8006890 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005c5e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005c60:	4618      	mov	r0, r3
 8005c62:	3738      	adds	r7, #56	; 0x38
 8005c64:	46bd      	mov	sp, r7
 8005c66:	bd80      	pop	{r7, pc}
 8005c68:	e000ed04 	.word	0xe000ed04

08005c6c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b090      	sub	sp, #64	; 0x40
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	60f8      	str	r0, [r7, #12]
 8005c74:	60b9      	str	r1, [r7, #8]
 8005c76:	607a      	str	r2, [r7, #4]
 8005c78:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d10a      	bne.n	8005c9a <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005c84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c88:	f383 8811 	msr	BASEPRI, r3
 8005c8c:	f3bf 8f6f 	isb	sy
 8005c90:	f3bf 8f4f 	dsb	sy
 8005c94:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005c96:	bf00      	nop
 8005c98:	e7fe      	b.n	8005c98 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005c9a:	68bb      	ldr	r3, [r7, #8]
 8005c9c:	2b00      	cmp	r3, #0
 8005c9e:	d103      	bne.n	8005ca8 <xQueueGenericSendFromISR+0x3c>
 8005ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d101      	bne.n	8005cac <xQueueGenericSendFromISR+0x40>
 8005ca8:	2301      	movs	r3, #1
 8005caa:	e000      	b.n	8005cae <xQueueGenericSendFromISR+0x42>
 8005cac:	2300      	movs	r3, #0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d10a      	bne.n	8005cc8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005cb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cb6:	f383 8811 	msr	BASEPRI, r3
 8005cba:	f3bf 8f6f 	isb	sy
 8005cbe:	f3bf 8f4f 	dsb	sy
 8005cc2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cc4:	bf00      	nop
 8005cc6:	e7fe      	b.n	8005cc6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005cc8:	683b      	ldr	r3, [r7, #0]
 8005cca:	2b02      	cmp	r3, #2
 8005ccc:	d103      	bne.n	8005cd6 <xQueueGenericSendFromISR+0x6a>
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d101      	bne.n	8005cda <xQueueGenericSendFromISR+0x6e>
 8005cd6:	2301      	movs	r3, #1
 8005cd8:	e000      	b.n	8005cdc <xQueueGenericSendFromISR+0x70>
 8005cda:	2300      	movs	r3, #0
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d10a      	bne.n	8005cf6 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ce4:	f383 8811 	msr	BASEPRI, r3
 8005ce8:	f3bf 8f6f 	isb	sy
 8005cec:	f3bf 8f4f 	dsb	sy
 8005cf0:	623b      	str	r3, [r7, #32]
}
 8005cf2:	bf00      	nop
 8005cf4:	e7fe      	b.n	8005cf4 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005cf6:	f002 fbaf 	bl	8008458 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005cfa:	f3ef 8211 	mrs	r2, BASEPRI
 8005cfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d02:	f383 8811 	msr	BASEPRI, r3
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	f3bf 8f4f 	dsb	sy
 8005d0e:	61fa      	str	r2, [r7, #28]
 8005d10:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005d12:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005d14:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d18:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d1e:	429a      	cmp	r2, r3
 8005d20:	d302      	bcc.n	8005d28 <xQueueGenericSendFromISR+0xbc>
 8005d22:	683b      	ldr	r3, [r7, #0]
 8005d24:	2b02      	cmp	r3, #2
 8005d26:	d12f      	bne.n	8005d88 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005d28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005d2e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005d36:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d38:	683a      	ldr	r2, [r7, #0]
 8005d3a:	68b9      	ldr	r1, [r7, #8]
 8005d3c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005d3e:	f000 f991 	bl	8006064 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005d42:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005d46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005d4a:	d112      	bne.n	8005d72 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d016      	beq.n	8005d82 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d56:	3324      	adds	r3, #36	; 0x24
 8005d58:	4618      	mov	r0, r3
 8005d5a:	f001 f815 	bl	8006d88 <xTaskRemoveFromEventList>
 8005d5e:	4603      	mov	r3, r0
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d00e      	beq.n	8005d82 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d00b      	beq.n	8005d82 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	601a      	str	r2, [r3, #0]
 8005d70:	e007      	b.n	8005d82 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005d72:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005d76:	3301      	adds	r3, #1
 8005d78:	b2db      	uxtb	r3, r3
 8005d7a:	b25a      	sxtb	r2, r3
 8005d7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005d82:	2301      	movs	r3, #1
 8005d84:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005d86:	e001      	b.n	8005d8c <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005d88:	2300      	movs	r3, #0
 8005d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005d8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d8e:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005d90:	697b      	ldr	r3, [r7, #20]
 8005d92:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005d96:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005d98:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005d9a:	4618      	mov	r0, r3
 8005d9c:	3740      	adds	r7, #64	; 0x40
 8005d9e:	46bd      	mov	sp, r7
 8005da0:	bd80      	pop	{r7, pc}
	...

08005da4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005da4:	b580      	push	{r7, lr}
 8005da6:	b08c      	sub	sp, #48	; 0x30
 8005da8:	af00      	add	r7, sp, #0
 8005daa:	60f8      	str	r0, [r7, #12]
 8005dac:	60b9      	str	r1, [r7, #8]
 8005dae:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005db0:	2300      	movs	r3, #0
 8005db2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005db8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d10a      	bne.n	8005dd4 <xQueueReceive+0x30>
	__asm volatile
 8005dbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005dc2:	f383 8811 	msr	BASEPRI, r3
 8005dc6:	f3bf 8f6f 	isb	sy
 8005dca:	f3bf 8f4f 	dsb	sy
 8005dce:	623b      	str	r3, [r7, #32]
}
 8005dd0:	bf00      	nop
 8005dd2:	e7fe      	b.n	8005dd2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005dd4:	68bb      	ldr	r3, [r7, #8]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d103      	bne.n	8005de2 <xQueueReceive+0x3e>
 8005dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d101      	bne.n	8005de6 <xQueueReceive+0x42>
 8005de2:	2301      	movs	r3, #1
 8005de4:	e000      	b.n	8005de8 <xQueueReceive+0x44>
 8005de6:	2300      	movs	r3, #0
 8005de8:	2b00      	cmp	r3, #0
 8005dea:	d10a      	bne.n	8005e02 <xQueueReceive+0x5e>
	__asm volatile
 8005dec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005df0:	f383 8811 	msr	BASEPRI, r3
 8005df4:	f3bf 8f6f 	isb	sy
 8005df8:	f3bf 8f4f 	dsb	sy
 8005dfc:	61fb      	str	r3, [r7, #28]
}
 8005dfe:	bf00      	nop
 8005e00:	e7fe      	b.n	8005e00 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005e02:	f001 f9f5 	bl	80071f0 <xTaskGetSchedulerState>
 8005e06:	4603      	mov	r3, r0
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d102      	bne.n	8005e12 <xQueueReceive+0x6e>
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d101      	bne.n	8005e16 <xQueueReceive+0x72>
 8005e12:	2301      	movs	r3, #1
 8005e14:	e000      	b.n	8005e18 <xQueueReceive+0x74>
 8005e16:	2300      	movs	r3, #0
 8005e18:	2b00      	cmp	r3, #0
 8005e1a:	d10a      	bne.n	8005e32 <xQueueReceive+0x8e>
	__asm volatile
 8005e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e20:	f383 8811 	msr	BASEPRI, r3
 8005e24:	f3bf 8f6f 	isb	sy
 8005e28:	f3bf 8f4f 	dsb	sy
 8005e2c:	61bb      	str	r3, [r7, #24]
}
 8005e2e:	bf00      	nop
 8005e30:	e7fe      	b.n	8005e30 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005e32:	f002 fa2f 	bl	8008294 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005e36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e38:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005e3a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005e3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e3e:	2b00      	cmp	r3, #0
 8005e40:	d01f      	beq.n	8005e82 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005e42:	68b9      	ldr	r1, [r7, #8]
 8005e44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005e46:	f000 f977 	bl	8006138 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005e4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4c:	1e5a      	subs	r2, r3, #1
 8005e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e50:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e54:	691b      	ldr	r3, [r3, #16]
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00f      	beq.n	8005e7a <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005e5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e5c:	3310      	adds	r3, #16
 8005e5e:	4618      	mov	r0, r3
 8005e60:	f000 ff92 	bl	8006d88 <xTaskRemoveFromEventList>
 8005e64:	4603      	mov	r3, r0
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	d007      	beq.n	8005e7a <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005e6a:	4b3d      	ldr	r3, [pc, #244]	; (8005f60 <xQueueReceive+0x1bc>)
 8005e6c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e70:	601a      	str	r2, [r3, #0]
 8005e72:	f3bf 8f4f 	dsb	sy
 8005e76:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005e7a:	f002 fa3b 	bl	80082f4 <vPortExitCritical>
				return pdPASS;
 8005e7e:	2301      	movs	r3, #1
 8005e80:	e069      	b.n	8005f56 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d103      	bne.n	8005e90 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005e88:	f002 fa34 	bl	80082f4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	e062      	b.n	8005f56 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005e90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d106      	bne.n	8005ea4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005e96:	f107 0310 	add.w	r3, r7, #16
 8005e9a:	4618      	mov	r0, r3
 8005e9c:	f001 f83a 	bl	8006f14 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ea4:	f002 fa26 	bl	80082f4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ea8:	f000 fce4 	bl	8006874 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005eac:	f002 f9f2 	bl	8008294 <vPortEnterCritical>
 8005eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005eb2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005eb6:	b25b      	sxtb	r3, r3
 8005eb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ebc:	d103      	bne.n	8005ec6 <xQueueReceive+0x122>
 8005ebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec0:	2200      	movs	r2, #0
 8005ec2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005ec6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ec8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005ecc:	b25b      	sxtb	r3, r3
 8005ece:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005ed2:	d103      	bne.n	8005edc <xQueueReceive+0x138>
 8005ed4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ed6:	2200      	movs	r2, #0
 8005ed8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005edc:	f002 fa0a 	bl	80082f4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005ee0:	1d3a      	adds	r2, r7, #4
 8005ee2:	f107 0310 	add.w	r3, r7, #16
 8005ee6:	4611      	mov	r1, r2
 8005ee8:	4618      	mov	r0, r3
 8005eea:	f001 f829 	bl	8006f40 <xTaskCheckForTimeOut>
 8005eee:	4603      	mov	r3, r0
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d123      	bne.n	8005f3c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005ef4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005ef6:	f000 f997 	bl	8006228 <prvIsQueueEmpty>
 8005efa:	4603      	mov	r3, r0
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d017      	beq.n	8005f30 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005f00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f02:	3324      	adds	r3, #36	; 0x24
 8005f04:	687a      	ldr	r2, [r7, #4]
 8005f06:	4611      	mov	r1, r2
 8005f08:	4618      	mov	r0, r3
 8005f0a:	f000 feb1 	bl	8006c70 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005f0e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f10:	f000 f938 	bl	8006184 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005f14:	f000 fcbc 	bl	8006890 <xTaskResumeAll>
 8005f18:	4603      	mov	r3, r0
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d189      	bne.n	8005e32 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8005f1e:	4b10      	ldr	r3, [pc, #64]	; (8005f60 <xQueueReceive+0x1bc>)
 8005f20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f24:	601a      	str	r2, [r3, #0]
 8005f26:	f3bf 8f4f 	dsb	sy
 8005f2a:	f3bf 8f6f 	isb	sy
 8005f2e:	e780      	b.n	8005e32 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005f30:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f32:	f000 f927 	bl	8006184 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005f36:	f000 fcab 	bl	8006890 <xTaskResumeAll>
 8005f3a:	e77a      	b.n	8005e32 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005f3c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f3e:	f000 f921 	bl	8006184 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005f42:	f000 fca5 	bl	8006890 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f46:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005f48:	f000 f96e 	bl	8006228 <prvIsQueueEmpty>
 8005f4c:	4603      	mov	r3, r0
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	f43f af6f 	beq.w	8005e32 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005f54:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005f56:	4618      	mov	r0, r3
 8005f58:	3730      	adds	r7, #48	; 0x30
 8005f5a:	46bd      	mov	sp, r7
 8005f5c:	bd80      	pop	{r7, pc}
 8005f5e:	bf00      	nop
 8005f60:	e000ed04 	.word	0xe000ed04

08005f64 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b08e      	sub	sp, #56	; 0x38
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	60f8      	str	r0, [r7, #12]
 8005f6c:	60b9      	str	r1, [r7, #8]
 8005f6e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005f70:	68fb      	ldr	r3, [r7, #12]
 8005f72:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005f74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d10a      	bne.n	8005f90 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 8005f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f7e:	f383 8811 	msr	BASEPRI, r3
 8005f82:	f3bf 8f6f 	isb	sy
 8005f86:	f3bf 8f4f 	dsb	sy
 8005f8a:	623b      	str	r3, [r7, #32]
}
 8005f8c:	bf00      	nop
 8005f8e:	e7fe      	b.n	8005f8e <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005f90:	68bb      	ldr	r3, [r7, #8]
 8005f92:	2b00      	cmp	r3, #0
 8005f94:	d103      	bne.n	8005f9e <xQueueReceiveFromISR+0x3a>
 8005f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f9a:	2b00      	cmp	r3, #0
 8005f9c:	d101      	bne.n	8005fa2 <xQueueReceiveFromISR+0x3e>
 8005f9e:	2301      	movs	r3, #1
 8005fa0:	e000      	b.n	8005fa4 <xQueueReceiveFromISR+0x40>
 8005fa2:	2300      	movs	r3, #0
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d10a      	bne.n	8005fbe <xQueueReceiveFromISR+0x5a>
	__asm volatile
 8005fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fac:	f383 8811 	msr	BASEPRI, r3
 8005fb0:	f3bf 8f6f 	isb	sy
 8005fb4:	f3bf 8f4f 	dsb	sy
 8005fb8:	61fb      	str	r3, [r7, #28]
}
 8005fba:	bf00      	nop
 8005fbc:	e7fe      	b.n	8005fbc <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005fbe:	f002 fa4b 	bl	8008458 <vPortValidateInterruptPriority>
	__asm volatile
 8005fc2:	f3ef 8211 	mrs	r2, BASEPRI
 8005fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005fca:	f383 8811 	msr	BASEPRI, r3
 8005fce:	f3bf 8f6f 	isb	sy
 8005fd2:	f3bf 8f4f 	dsb	sy
 8005fd6:	61ba      	str	r2, [r7, #24]
 8005fd8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005fda:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fe0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005fe4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fe6:	2b00      	cmp	r3, #0
 8005fe8:	d02f      	beq.n	800604a <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005fea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005fec:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ff0:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ff4:	68b9      	ldr	r1, [r7, #8]
 8005ff6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005ff8:	f000 f89e 	bl	8006138 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ffc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ffe:	1e5a      	subs	r2, r3, #1
 8006000:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006002:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8006004:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006008:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800600c:	d112      	bne.n	8006034 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800600e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006010:	691b      	ldr	r3, [r3, #16]
 8006012:	2b00      	cmp	r3, #0
 8006014:	d016      	beq.n	8006044 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006016:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006018:	3310      	adds	r3, #16
 800601a:	4618      	mov	r0, r3
 800601c:	f000 feb4 	bl	8006d88 <xTaskRemoveFromEventList>
 8006020:	4603      	mov	r3, r0
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00e      	beq.n	8006044 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2b00      	cmp	r3, #0
 800602a:	d00b      	beq.n	8006044 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	601a      	str	r2, [r3, #0]
 8006032:	e007      	b.n	8006044 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006034:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006038:	3301      	adds	r3, #1
 800603a:	b2db      	uxtb	r3, r3
 800603c:	b25a      	sxtb	r2, r3
 800603e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006040:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8006044:	2301      	movs	r3, #1
 8006046:	637b      	str	r3, [r7, #52]	; 0x34
 8006048:	e001      	b.n	800604e <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 800604a:	2300      	movs	r3, #0
 800604c:	637b      	str	r3, [r7, #52]	; 0x34
 800604e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006050:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006052:	693b      	ldr	r3, [r7, #16]
 8006054:	f383 8811 	msr	BASEPRI, r3
}
 8006058:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800605a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800605c:	4618      	mov	r0, r3
 800605e:	3738      	adds	r7, #56	; 0x38
 8006060:	46bd      	mov	sp, r7
 8006062:	bd80      	pop	{r7, pc}

08006064 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006064:	b580      	push	{r7, lr}
 8006066:	b086      	sub	sp, #24
 8006068:	af00      	add	r7, sp, #0
 800606a:	60f8      	str	r0, [r7, #12]
 800606c:	60b9      	str	r1, [r7, #8]
 800606e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006070:	2300      	movs	r3, #0
 8006072:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006074:	68fb      	ldr	r3, [r7, #12]
 8006076:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006078:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800607e:	2b00      	cmp	r3, #0
 8006080:	d10d      	bne.n	800609e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006082:	68fb      	ldr	r3, [r7, #12]
 8006084:	681b      	ldr	r3, [r3, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d14d      	bne.n	8006126 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	689b      	ldr	r3, [r3, #8]
 800608e:	4618      	mov	r0, r3
 8006090:	f001 f8cc 	bl	800722c <xTaskPriorityDisinherit>
 8006094:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2200      	movs	r2, #0
 800609a:	609a      	str	r2, [r3, #8]
 800609c:	e043      	b.n	8006126 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	2b00      	cmp	r3, #0
 80060a2:	d119      	bne.n	80060d8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80060a4:	68fb      	ldr	r3, [r7, #12]
 80060a6:	6858      	ldr	r0, [r3, #4]
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ac:	461a      	mov	r2, r3
 80060ae:	68b9      	ldr	r1, [r7, #8]
 80060b0:	f002 fd1f 	bl	8008af2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	685a      	ldr	r2, [r3, #4]
 80060b8:	68fb      	ldr	r3, [r7, #12]
 80060ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060bc:	441a      	add	r2, r3
 80060be:	68fb      	ldr	r3, [r7, #12]
 80060c0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	685a      	ldr	r2, [r3, #4]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	689b      	ldr	r3, [r3, #8]
 80060ca:	429a      	cmp	r2, r3
 80060cc:	d32b      	bcc.n	8006126 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	681a      	ldr	r2, [r3, #0]
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	605a      	str	r2, [r3, #4]
 80060d6:	e026      	b.n	8006126 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80060d8:	68fb      	ldr	r3, [r7, #12]
 80060da:	68d8      	ldr	r0, [r3, #12]
 80060dc:	68fb      	ldr	r3, [r7, #12]
 80060de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060e0:	461a      	mov	r2, r3
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	f002 fd05 	bl	8008af2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	68da      	ldr	r2, [r3, #12]
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	425b      	negs	r3, r3
 80060f2:	441a      	add	r2, r3
 80060f4:	68fb      	ldr	r3, [r7, #12]
 80060f6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	68da      	ldr	r2, [r3, #12]
 80060fc:	68fb      	ldr	r3, [r7, #12]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	429a      	cmp	r2, r3
 8006102:	d207      	bcs.n	8006114 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	689a      	ldr	r2, [r3, #8]
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800610c:	425b      	negs	r3, r3
 800610e:	441a      	add	r2, r3
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2b02      	cmp	r3, #2
 8006118:	d105      	bne.n	8006126 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800611a:	693b      	ldr	r3, [r7, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d002      	beq.n	8006126 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006120:	693b      	ldr	r3, [r7, #16]
 8006122:	3b01      	subs	r3, #1
 8006124:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006126:	693b      	ldr	r3, [r7, #16]
 8006128:	1c5a      	adds	r2, r3, #1
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800612e:	697b      	ldr	r3, [r7, #20]
}
 8006130:	4618      	mov	r0, r3
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}

08006138 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006138:	b580      	push	{r7, lr}
 800613a:	b082      	sub	sp, #8
 800613c:	af00      	add	r7, sp, #0
 800613e:	6078      	str	r0, [r7, #4]
 8006140:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006146:	2b00      	cmp	r3, #0
 8006148:	d018      	beq.n	800617c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	68da      	ldr	r2, [r3, #12]
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006152:	441a      	add	r2, r3
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	68da      	ldr	r2, [r3, #12]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	689b      	ldr	r3, [r3, #8]
 8006160:	429a      	cmp	r2, r3
 8006162:	d303      	bcc.n	800616c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	681a      	ldr	r2, [r3, #0]
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	68d9      	ldr	r1, [r3, #12]
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006174:	461a      	mov	r2, r3
 8006176:	6838      	ldr	r0, [r7, #0]
 8006178:	f002 fcbb 	bl	8008af2 <memcpy>
	}
}
 800617c:	bf00      	nop
 800617e:	3708      	adds	r7, #8
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800618c:	f002 f882 	bl	8008294 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006196:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006198:	e011      	b.n	80061be <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	2b00      	cmp	r3, #0
 80061a0:	d012      	beq.n	80061c8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	3324      	adds	r3, #36	; 0x24
 80061a6:	4618      	mov	r0, r3
 80061a8:	f000 fdee 	bl	8006d88 <xTaskRemoveFromEventList>
 80061ac:	4603      	mov	r3, r0
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d001      	beq.n	80061b6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80061b2:	f000 ff27 	bl	8007004 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80061b6:	7bfb      	ldrb	r3, [r7, #15]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	b2db      	uxtb	r3, r3
 80061bc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80061be:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	dce9      	bgt.n	800619a <prvUnlockQueue+0x16>
 80061c6:	e000      	b.n	80061ca <prvUnlockQueue+0x46>
					break;
 80061c8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	22ff      	movs	r2, #255	; 0xff
 80061ce:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80061d2:	f002 f88f 	bl	80082f4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80061d6:	f002 f85d 	bl	8008294 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80061e0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061e2:	e011      	b.n	8006208 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	691b      	ldr	r3, [r3, #16]
 80061e8:	2b00      	cmp	r3, #0
 80061ea:	d012      	beq.n	8006212 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	3310      	adds	r3, #16
 80061f0:	4618      	mov	r0, r3
 80061f2:	f000 fdc9 	bl	8006d88 <xTaskRemoveFromEventList>
 80061f6:	4603      	mov	r3, r0
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d001      	beq.n	8006200 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061fc:	f000 ff02 	bl	8007004 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006200:	7bbb      	ldrb	r3, [r7, #14]
 8006202:	3b01      	subs	r3, #1
 8006204:	b2db      	uxtb	r3, r3
 8006206:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006208:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800620c:	2b00      	cmp	r3, #0
 800620e:	dce9      	bgt.n	80061e4 <prvUnlockQueue+0x60>
 8006210:	e000      	b.n	8006214 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006212:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	22ff      	movs	r2, #255	; 0xff
 8006218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800621c:	f002 f86a 	bl	80082f4 <vPortExitCritical>
}
 8006220:	bf00      	nop
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006230:	f002 f830 	bl	8008294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006238:	2b00      	cmp	r3, #0
 800623a:	d102      	bne.n	8006242 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800623c:	2301      	movs	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e001      	b.n	8006246 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006242:	2300      	movs	r3, #0
 8006244:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006246:	f002 f855 	bl	80082f4 <vPortExitCritical>

	return xReturn;
 800624a:	68fb      	ldr	r3, [r7, #12]
}
 800624c:	4618      	mov	r0, r3
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800625c:	f002 f81a 	bl	8008294 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006268:	429a      	cmp	r2, r3
 800626a:	d102      	bne.n	8006272 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800626c:	2301      	movs	r3, #1
 800626e:	60fb      	str	r3, [r7, #12]
 8006270:	e001      	b.n	8006276 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006272:	2300      	movs	r3, #0
 8006274:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006276:	f002 f83d 	bl	80082f4 <vPortExitCritical>

	return xReturn;
 800627a:	68fb      	ldr	r3, [r7, #12]
}
 800627c:	4618      	mov	r0, r3
 800627e:	3710      	adds	r7, #16
 8006280:	46bd      	mov	sp, r7
 8006282:	bd80      	pop	{r7, pc}

08006284 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006284:	b480      	push	{r7}
 8006286:	b085      	sub	sp, #20
 8006288:	af00      	add	r7, sp, #0
 800628a:	6078      	str	r0, [r7, #4]
 800628c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800628e:	2300      	movs	r3, #0
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e014      	b.n	80062be <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006294:	4a0f      	ldr	r2, [pc, #60]	; (80062d4 <vQueueAddToRegistry+0x50>)
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800629c:	2b00      	cmp	r3, #0
 800629e:	d10b      	bne.n	80062b8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80062a0:	490c      	ldr	r1, [pc, #48]	; (80062d4 <vQueueAddToRegistry+0x50>)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	683a      	ldr	r2, [r7, #0]
 80062a6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80062aa:	4a0a      	ldr	r2, [pc, #40]	; (80062d4 <vQueueAddToRegistry+0x50>)
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	00db      	lsls	r3, r3, #3
 80062b0:	4413      	add	r3, r2
 80062b2:	687a      	ldr	r2, [r7, #4]
 80062b4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80062b6:	e006      	b.n	80062c6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	3301      	adds	r3, #1
 80062bc:	60fb      	str	r3, [r7, #12]
 80062be:	68fb      	ldr	r3, [r7, #12]
 80062c0:	2b07      	cmp	r3, #7
 80062c2:	d9e7      	bls.n	8006294 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	3714      	adds	r7, #20
 80062ca:	46bd      	mov	sp, r7
 80062cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d0:	4770      	bx	lr
 80062d2:	bf00      	nop
 80062d4:	200006a8 	.word	0x200006a8

080062d8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80062d8:	b580      	push	{r7, lr}
 80062da:	b086      	sub	sp, #24
 80062dc:	af00      	add	r7, sp, #0
 80062de:	60f8      	str	r0, [r7, #12]
 80062e0:	60b9      	str	r1, [r7, #8]
 80062e2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80062e8:	f001 ffd4 	bl	8008294 <vPortEnterCritical>
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80062f2:	b25b      	sxtb	r3, r3
 80062f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80062f8:	d103      	bne.n	8006302 <vQueueWaitForMessageRestricted+0x2a>
 80062fa:	697b      	ldr	r3, [r7, #20]
 80062fc:	2200      	movs	r2, #0
 80062fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006302:	697b      	ldr	r3, [r7, #20]
 8006304:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006308:	b25b      	sxtb	r3, r3
 800630a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800630e:	d103      	bne.n	8006318 <vQueueWaitForMessageRestricted+0x40>
 8006310:	697b      	ldr	r3, [r7, #20]
 8006312:	2200      	movs	r2, #0
 8006314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006318:	f001 ffec 	bl	80082f4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800631c:	697b      	ldr	r3, [r7, #20]
 800631e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006320:	2b00      	cmp	r3, #0
 8006322:	d106      	bne.n	8006332 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006324:	697b      	ldr	r3, [r7, #20]
 8006326:	3324      	adds	r3, #36	; 0x24
 8006328:	687a      	ldr	r2, [r7, #4]
 800632a:	68b9      	ldr	r1, [r7, #8]
 800632c:	4618      	mov	r0, r3
 800632e:	f000 fcff 	bl	8006d30 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006332:	6978      	ldr	r0, [r7, #20]
 8006334:	f7ff ff26 	bl	8006184 <prvUnlockQueue>
	}
 8006338:	bf00      	nop
 800633a:	3718      	adds	r7, #24
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006340:	b580      	push	{r7, lr}
 8006342:	b08e      	sub	sp, #56	; 0x38
 8006344:	af04      	add	r7, sp, #16
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
 800634c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800634e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006350:	2b00      	cmp	r3, #0
 8006352:	d10a      	bne.n	800636a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006354:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006358:	f383 8811 	msr	BASEPRI, r3
 800635c:	f3bf 8f6f 	isb	sy
 8006360:	f3bf 8f4f 	dsb	sy
 8006364:	623b      	str	r3, [r7, #32]
}
 8006366:	bf00      	nop
 8006368:	e7fe      	b.n	8006368 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800636a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10a      	bne.n	8006386 <xTaskCreateStatic+0x46>
	__asm volatile
 8006370:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006374:	f383 8811 	msr	BASEPRI, r3
 8006378:	f3bf 8f6f 	isb	sy
 800637c:	f3bf 8f4f 	dsb	sy
 8006380:	61fb      	str	r3, [r7, #28]
}
 8006382:	bf00      	nop
 8006384:	e7fe      	b.n	8006384 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8006386:	23bc      	movs	r3, #188	; 0xbc
 8006388:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800638a:	693b      	ldr	r3, [r7, #16]
 800638c:	2bbc      	cmp	r3, #188	; 0xbc
 800638e:	d00a      	beq.n	80063a6 <xTaskCreateStatic+0x66>
	__asm volatile
 8006390:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006394:	f383 8811 	msr	BASEPRI, r3
 8006398:	f3bf 8f6f 	isb	sy
 800639c:	f3bf 8f4f 	dsb	sy
 80063a0:	61bb      	str	r3, [r7, #24]
}
 80063a2:	bf00      	nop
 80063a4:	e7fe      	b.n	80063a4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80063a6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80063a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d01e      	beq.n	80063ec <xTaskCreateStatic+0xac>
 80063ae:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d01b      	beq.n	80063ec <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80063b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80063b6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80063b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063ba:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80063bc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80063be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063c0:	2202      	movs	r2, #2
 80063c2:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80063c6:	2300      	movs	r3, #0
 80063c8:	9303      	str	r3, [sp, #12]
 80063ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80063cc:	9302      	str	r3, [sp, #8]
 80063ce:	f107 0314 	add.w	r3, r7, #20
 80063d2:	9301      	str	r3, [sp, #4]
 80063d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80063d6:	9300      	str	r3, [sp, #0]
 80063d8:	683b      	ldr	r3, [r7, #0]
 80063da:	687a      	ldr	r2, [r7, #4]
 80063dc:	68b9      	ldr	r1, [r7, #8]
 80063de:	68f8      	ldr	r0, [r7, #12]
 80063e0:	f000 f850 	bl	8006484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80063e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80063e6:	f000 f8f3 	bl	80065d0 <prvAddNewTaskToReadyList>
 80063ea:	e001      	b.n	80063f0 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80063ec:	2300      	movs	r3, #0
 80063ee:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80063f0:	697b      	ldr	r3, [r7, #20]
	}
 80063f2:	4618      	mov	r0, r3
 80063f4:	3728      	adds	r7, #40	; 0x28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	bd80      	pop	{r7, pc}

080063fa <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80063fa:	b580      	push	{r7, lr}
 80063fc:	b08c      	sub	sp, #48	; 0x30
 80063fe:	af04      	add	r7, sp, #16
 8006400:	60f8      	str	r0, [r7, #12]
 8006402:	60b9      	str	r1, [r7, #8]
 8006404:	603b      	str	r3, [r7, #0]
 8006406:	4613      	mov	r3, r2
 8006408:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800640a:	88fb      	ldrh	r3, [r7, #6]
 800640c:	009b      	lsls	r3, r3, #2
 800640e:	4618      	mov	r0, r3
 8006410:	f002 f862 	bl	80084d8 <pvPortMalloc>
 8006414:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006416:	697b      	ldr	r3, [r7, #20]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d00e      	beq.n	800643a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800641c:	20bc      	movs	r0, #188	; 0xbc
 800641e:	f002 f85b 	bl	80084d8 <pvPortMalloc>
 8006422:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	2b00      	cmp	r3, #0
 8006428:	d003      	beq.n	8006432 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800642a:	69fb      	ldr	r3, [r7, #28]
 800642c:	697a      	ldr	r2, [r7, #20]
 800642e:	631a      	str	r2, [r3, #48]	; 0x30
 8006430:	e005      	b.n	800643e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006432:	6978      	ldr	r0, [r7, #20]
 8006434:	f002 f91c 	bl	8008670 <vPortFree>
 8006438:	e001      	b.n	800643e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800643a:	2300      	movs	r3, #0
 800643c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800643e:	69fb      	ldr	r3, [r7, #28]
 8006440:	2b00      	cmp	r3, #0
 8006442:	d017      	beq.n	8006474 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006444:	69fb      	ldr	r3, [r7, #28]
 8006446:	2200      	movs	r2, #0
 8006448:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800644c:	88fa      	ldrh	r2, [r7, #6]
 800644e:	2300      	movs	r3, #0
 8006450:	9303      	str	r3, [sp, #12]
 8006452:	69fb      	ldr	r3, [r7, #28]
 8006454:	9302      	str	r3, [sp, #8]
 8006456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006458:	9301      	str	r3, [sp, #4]
 800645a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800645c:	9300      	str	r3, [sp, #0]
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	68b9      	ldr	r1, [r7, #8]
 8006462:	68f8      	ldr	r0, [r7, #12]
 8006464:	f000 f80e 	bl	8006484 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006468:	69f8      	ldr	r0, [r7, #28]
 800646a:	f000 f8b1 	bl	80065d0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800646e:	2301      	movs	r3, #1
 8006470:	61bb      	str	r3, [r7, #24]
 8006472:	e002      	b.n	800647a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006478:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800647a:	69bb      	ldr	r3, [r7, #24]
	}
 800647c:	4618      	mov	r0, r3
 800647e:	3720      	adds	r7, #32
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b088      	sub	sp, #32
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006492:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006494:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	009b      	lsls	r3, r3, #2
 800649a:	461a      	mov	r2, r3
 800649c:	21a5      	movs	r1, #165	; 0xa5
 800649e:	f002 fb36 	bl	8008b0e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80064a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80064a4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80064ac:	3b01      	subs	r3, #1
 80064ae:	009b      	lsls	r3, r3, #2
 80064b0:	4413      	add	r3, r2
 80064b2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80064b4:	69bb      	ldr	r3, [r7, #24]
 80064b6:	f023 0307 	bic.w	r3, r3, #7
 80064ba:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80064bc:	69bb      	ldr	r3, [r7, #24]
 80064be:	f003 0307 	and.w	r3, r3, #7
 80064c2:	2b00      	cmp	r3, #0
 80064c4:	d00a      	beq.n	80064dc <prvInitialiseNewTask+0x58>
	__asm volatile
 80064c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064ca:	f383 8811 	msr	BASEPRI, r3
 80064ce:	f3bf 8f6f 	isb	sy
 80064d2:	f3bf 8f4f 	dsb	sy
 80064d6:	617b      	str	r3, [r7, #20]
}
 80064d8:	bf00      	nop
 80064da:	e7fe      	b.n	80064da <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80064dc:	68bb      	ldr	r3, [r7, #8]
 80064de:	2b00      	cmp	r3, #0
 80064e0:	d01f      	beq.n	8006522 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80064e2:	2300      	movs	r3, #0
 80064e4:	61fb      	str	r3, [r7, #28]
 80064e6:	e012      	b.n	800650e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80064e8:	68ba      	ldr	r2, [r7, #8]
 80064ea:	69fb      	ldr	r3, [r7, #28]
 80064ec:	4413      	add	r3, r2
 80064ee:	7819      	ldrb	r1, [r3, #0]
 80064f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80064f2:	69fb      	ldr	r3, [r7, #28]
 80064f4:	4413      	add	r3, r2
 80064f6:	3334      	adds	r3, #52	; 0x34
 80064f8:	460a      	mov	r2, r1
 80064fa:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80064fc:	68ba      	ldr	r2, [r7, #8]
 80064fe:	69fb      	ldr	r3, [r7, #28]
 8006500:	4413      	add	r3, r2
 8006502:	781b      	ldrb	r3, [r3, #0]
 8006504:	2b00      	cmp	r3, #0
 8006506:	d006      	beq.n	8006516 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006508:	69fb      	ldr	r3, [r7, #28]
 800650a:	3301      	adds	r3, #1
 800650c:	61fb      	str	r3, [r7, #28]
 800650e:	69fb      	ldr	r3, [r7, #28]
 8006510:	2b0f      	cmp	r3, #15
 8006512:	d9e9      	bls.n	80064e8 <prvInitialiseNewTask+0x64>
 8006514:	e000      	b.n	8006518 <prvInitialiseNewTask+0x94>
			{
				break;
 8006516:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800651a:	2200      	movs	r2, #0
 800651c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006520:	e003      	b.n	800652a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006522:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006524:	2200      	movs	r2, #0
 8006526:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800652a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800652c:	2b37      	cmp	r3, #55	; 0x37
 800652e:	d901      	bls.n	8006534 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006530:	2337      	movs	r3, #55	; 0x37
 8006532:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006534:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006536:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006538:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800653a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800653c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800653e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006540:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006542:	2200      	movs	r2, #0
 8006544:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006546:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006548:	3304      	adds	r3, #4
 800654a:	4618      	mov	r0, r3
 800654c:	f7ff f8be 	bl	80056cc <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006552:	3318      	adds	r3, #24
 8006554:	4618      	mov	r0, r3
 8006556:	f7ff f8b9 	bl	80056cc <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800655a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800655c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800655e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006560:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006562:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006566:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006568:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800656a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800656c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800656e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006570:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006572:	2200      	movs	r2, #0
 8006574:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006578:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800657a:	2200      	movs	r2, #0
 800657c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8006580:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006582:	3354      	adds	r3, #84	; 0x54
 8006584:	2260      	movs	r2, #96	; 0x60
 8006586:	2100      	movs	r1, #0
 8006588:	4618      	mov	r0, r3
 800658a:	f002 fac0 	bl	8008b0e <memset>
 800658e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006590:	4a0c      	ldr	r2, [pc, #48]	; (80065c4 <prvInitialiseNewTask+0x140>)
 8006592:	659a      	str	r2, [r3, #88]	; 0x58
 8006594:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006596:	4a0c      	ldr	r2, [pc, #48]	; (80065c8 <prvInitialiseNewTask+0x144>)
 8006598:	65da      	str	r2, [r3, #92]	; 0x5c
 800659a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800659c:	4a0b      	ldr	r2, [pc, #44]	; (80065cc <prvInitialiseNewTask+0x148>)
 800659e:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80065a0:	683a      	ldr	r2, [r7, #0]
 80065a2:	68f9      	ldr	r1, [r7, #12]
 80065a4:	69b8      	ldr	r0, [r7, #24]
 80065a6:	f001 fd45 	bl	8008034 <pxPortInitialiseStack>
 80065aa:	4602      	mov	r2, r0
 80065ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065ae:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80065b0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d002      	beq.n	80065bc <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80065b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80065ba:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065bc:	bf00      	nop
 80065be:	3720      	adds	r7, #32
 80065c0:	46bd      	mov	sp, r7
 80065c2:	bd80      	pop	{r7, pc}
 80065c4:	0800a970 	.word	0x0800a970
 80065c8:	0800a990 	.word	0x0800a990
 80065cc:	0800a950 	.word	0x0800a950

080065d0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80065d0:	b580      	push	{r7, lr}
 80065d2:	b082      	sub	sp, #8
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80065d8:	f001 fe5c 	bl	8008294 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80065dc:	4b2d      	ldr	r3, [pc, #180]	; (8006694 <prvAddNewTaskToReadyList+0xc4>)
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	3301      	adds	r3, #1
 80065e2:	4a2c      	ldr	r2, [pc, #176]	; (8006694 <prvAddNewTaskToReadyList+0xc4>)
 80065e4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80065e6:	4b2c      	ldr	r3, [pc, #176]	; (8006698 <prvAddNewTaskToReadyList+0xc8>)
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d109      	bne.n	8006602 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80065ee:	4a2a      	ldr	r2, [pc, #168]	; (8006698 <prvAddNewTaskToReadyList+0xc8>)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80065f4:	4b27      	ldr	r3, [pc, #156]	; (8006694 <prvAddNewTaskToReadyList+0xc4>)
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	2b01      	cmp	r3, #1
 80065fa:	d110      	bne.n	800661e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80065fc:	f000 fd26 	bl	800704c <prvInitialiseTaskLists>
 8006600:	e00d      	b.n	800661e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006602:	4b26      	ldr	r3, [pc, #152]	; (800669c <prvAddNewTaskToReadyList+0xcc>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d109      	bne.n	800661e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800660a:	4b23      	ldr	r3, [pc, #140]	; (8006698 <prvAddNewTaskToReadyList+0xc8>)
 800660c:	681b      	ldr	r3, [r3, #0]
 800660e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006614:	429a      	cmp	r2, r3
 8006616:	d802      	bhi.n	800661e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006618:	4a1f      	ldr	r2, [pc, #124]	; (8006698 <prvAddNewTaskToReadyList+0xc8>)
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800661e:	4b20      	ldr	r3, [pc, #128]	; (80066a0 <prvAddNewTaskToReadyList+0xd0>)
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	3301      	adds	r3, #1
 8006624:	4a1e      	ldr	r2, [pc, #120]	; (80066a0 <prvAddNewTaskToReadyList+0xd0>)
 8006626:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006628:	4b1d      	ldr	r3, [pc, #116]	; (80066a0 <prvAddNewTaskToReadyList+0xd0>)
 800662a:	681a      	ldr	r2, [r3, #0]
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006634:	4b1b      	ldr	r3, [pc, #108]	; (80066a4 <prvAddNewTaskToReadyList+0xd4>)
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	429a      	cmp	r2, r3
 800663a:	d903      	bls.n	8006644 <prvAddNewTaskToReadyList+0x74>
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006640:	4a18      	ldr	r2, [pc, #96]	; (80066a4 <prvAddNewTaskToReadyList+0xd4>)
 8006642:	6013      	str	r3, [r2, #0]
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006648:	4613      	mov	r3, r2
 800664a:	009b      	lsls	r3, r3, #2
 800664c:	4413      	add	r3, r2
 800664e:	009b      	lsls	r3, r3, #2
 8006650:	4a15      	ldr	r2, [pc, #84]	; (80066a8 <prvAddNewTaskToReadyList+0xd8>)
 8006652:	441a      	add	r2, r3
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	3304      	adds	r3, #4
 8006658:	4619      	mov	r1, r3
 800665a:	4610      	mov	r0, r2
 800665c:	f7ff f843 	bl	80056e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006660:	f001 fe48 	bl	80082f4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006664:	4b0d      	ldr	r3, [pc, #52]	; (800669c <prvAddNewTaskToReadyList+0xcc>)
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d00e      	beq.n	800668a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800666c:	4b0a      	ldr	r3, [pc, #40]	; (8006698 <prvAddNewTaskToReadyList+0xc8>)
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006676:	429a      	cmp	r2, r3
 8006678:	d207      	bcs.n	800668a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800667a:	4b0c      	ldr	r3, [pc, #48]	; (80066ac <prvAddNewTaskToReadyList+0xdc>)
 800667c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006680:	601a      	str	r2, [r3, #0]
 8006682:	f3bf 8f4f 	dsb	sy
 8006686:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800668a:	bf00      	nop
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
 8006692:	bf00      	nop
 8006694:	20000bbc 	.word	0x20000bbc
 8006698:	200006e8 	.word	0x200006e8
 800669c:	20000bc8 	.word	0x20000bc8
 80066a0:	20000bd8 	.word	0x20000bd8
 80066a4:	20000bc4 	.word	0x20000bc4
 80066a8:	200006ec 	.word	0x200006ec
 80066ac:	e000ed04 	.word	0xe000ed04

080066b0 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80066b8:	f001 fdec 	bl	8008294 <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2b00      	cmp	r3, #0
 80066c0:	d102      	bne.n	80066c8 <vTaskDelete+0x18>
 80066c2:	4b2c      	ldr	r3, [pc, #176]	; (8006774 <vTaskDelete+0xc4>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	e000      	b.n	80066ca <vTaskDelete+0x1a>
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready/delayed list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	3304      	adds	r3, #4
 80066d0:	4618      	mov	r0, r3
 80066d2:	f7ff f865 	bl	80057a0 <uxListRemove>
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80066d6:	68fb      	ldr	r3, [r7, #12]
 80066d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d004      	beq.n	80066e8 <vTaskDelete+0x38>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3318      	adds	r3, #24
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7ff f85c 	bl	80057a0 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 80066e8:	4b23      	ldr	r3, [pc, #140]	; (8006778 <vTaskDelete+0xc8>)
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	3301      	adds	r3, #1
 80066ee:	4a22      	ldr	r2, [pc, #136]	; (8006778 <vTaskDelete+0xc8>)
 80066f0:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 80066f2:	4b20      	ldr	r3, [pc, #128]	; (8006774 <vTaskDelete+0xc4>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	68fa      	ldr	r2, [r7, #12]
 80066f8:	429a      	cmp	r2, r3
 80066fa:	d10b      	bne.n	8006714 <vTaskDelete+0x64>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	3304      	adds	r3, #4
 8006700:	4619      	mov	r1, r3
 8006702:	481e      	ldr	r0, [pc, #120]	; (800677c <vTaskDelete+0xcc>)
 8006704:	f7fe ffef 	bl	80056e6 <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8006708:	4b1d      	ldr	r3, [pc, #116]	; (8006780 <vTaskDelete+0xd0>)
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	3301      	adds	r3, #1
 800670e:	4a1c      	ldr	r2, [pc, #112]	; (8006780 <vTaskDelete+0xd0>)
 8006710:	6013      	str	r3, [r2, #0]
 8006712:	e009      	b.n	8006728 <vTaskDelete+0x78>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8006714:	4b1b      	ldr	r3, [pc, #108]	; (8006784 <vTaskDelete+0xd4>)
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	3b01      	subs	r3, #1
 800671a:	4a1a      	ldr	r2, [pc, #104]	; (8006784 <vTaskDelete+0xd4>)
 800671c:	6013      	str	r3, [r2, #0]
				traceTASK_DELETE( pxTCB );
				prvDeleteTCB( pxTCB );
 800671e:	68f8      	ldr	r0, [r7, #12]
 8006720:	f000 fd02 	bl	8007128 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8006724:	f000 fd34 	bl	8007190 <prvResetNextTaskUnblockTime>
			}
		}
		taskEXIT_CRITICAL();
 8006728:	f001 fde4 	bl	80082f4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 800672c:	4b16      	ldr	r3, [pc, #88]	; (8006788 <vTaskDelete+0xd8>)
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	2b00      	cmp	r3, #0
 8006732:	d01b      	beq.n	800676c <vTaskDelete+0xbc>
		{
			if( pxTCB == pxCurrentTCB )
 8006734:	4b0f      	ldr	r3, [pc, #60]	; (8006774 <vTaskDelete+0xc4>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	68fa      	ldr	r2, [r7, #12]
 800673a:	429a      	cmp	r2, r3
 800673c:	d116      	bne.n	800676c <vTaskDelete+0xbc>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 800673e:	4b13      	ldr	r3, [pc, #76]	; (800678c <vTaskDelete+0xdc>)
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d00a      	beq.n	800675c <vTaskDelete+0xac>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	; 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	60bb      	str	r3, [r7, #8]
}
 8006758:	bf00      	nop
 800675a:	e7fe      	b.n	800675a <vTaskDelete+0xaa>
				portYIELD_WITHIN_API();
 800675c:	4b0c      	ldr	r3, [pc, #48]	; (8006790 <vTaskDelete+0xe0>)
 800675e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006762:	601a      	str	r2, [r3, #0]
 8006764:	f3bf 8f4f 	dsb	sy
 8006768:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800676c:	bf00      	nop
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}
 8006774:	200006e8 	.word	0x200006e8
 8006778:	20000bd8 	.word	0x20000bd8
 800677c:	20000b90 	.word	0x20000b90
 8006780:	20000ba4 	.word	0x20000ba4
 8006784:	20000bbc 	.word	0x20000bbc
 8006788:	20000bc8 	.word	0x20000bc8
 800678c:	20000be4 	.word	0x20000be4
 8006790:	e000ed04 	.word	0xe000ed04

08006794 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b08a      	sub	sp, #40	; 0x28
 8006798:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800679a:	2300      	movs	r3, #0
 800679c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800679e:	2300      	movs	r3, #0
 80067a0:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 80067a2:	463a      	mov	r2, r7
 80067a4:	1d39      	adds	r1, r7, #4
 80067a6:	f107 0308 	add.w	r3, r7, #8
 80067aa:	4618      	mov	r0, r3
 80067ac:	f7fe fd4c 	bl	8005248 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80067b0:	6839      	ldr	r1, [r7, #0]
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	68ba      	ldr	r2, [r7, #8]
 80067b6:	9202      	str	r2, [sp, #8]
 80067b8:	9301      	str	r3, [sp, #4]
 80067ba:	2300      	movs	r3, #0
 80067bc:	9300      	str	r3, [sp, #0]
 80067be:	2300      	movs	r3, #0
 80067c0:	460a      	mov	r2, r1
 80067c2:	4924      	ldr	r1, [pc, #144]	; (8006854 <vTaskStartScheduler+0xc0>)
 80067c4:	4824      	ldr	r0, [pc, #144]	; (8006858 <vTaskStartScheduler+0xc4>)
 80067c6:	f7ff fdbb 	bl	8006340 <xTaskCreateStatic>
 80067ca:	4603      	mov	r3, r0
 80067cc:	4a23      	ldr	r2, [pc, #140]	; (800685c <vTaskStartScheduler+0xc8>)
 80067ce:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80067d0:	4b22      	ldr	r3, [pc, #136]	; (800685c <vTaskStartScheduler+0xc8>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d002      	beq.n	80067de <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80067d8:	2301      	movs	r3, #1
 80067da:	617b      	str	r3, [r7, #20]
 80067dc:	e001      	b.n	80067e2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80067de:	2300      	movs	r3, #0
 80067e0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	2b01      	cmp	r3, #1
 80067e6:	d102      	bne.n	80067ee <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80067e8:	f000 fffc 	bl	80077e4 <xTimerCreateTimerTask>
 80067ec:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	2b01      	cmp	r3, #1
 80067f2:	d11b      	bne.n	800682c <vTaskStartScheduler+0x98>
	__asm volatile
 80067f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067f8:	f383 8811 	msr	BASEPRI, r3
 80067fc:	f3bf 8f6f 	isb	sy
 8006800:	f3bf 8f4f 	dsb	sy
 8006804:	613b      	str	r3, [r7, #16]
}
 8006806:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006808:	4b15      	ldr	r3, [pc, #84]	; (8006860 <vTaskStartScheduler+0xcc>)
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	3354      	adds	r3, #84	; 0x54
 800680e:	4a15      	ldr	r2, [pc, #84]	; (8006864 <vTaskStartScheduler+0xd0>)
 8006810:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006812:	4b15      	ldr	r3, [pc, #84]	; (8006868 <vTaskStartScheduler+0xd4>)
 8006814:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006818:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800681a:	4b14      	ldr	r3, [pc, #80]	; (800686c <vTaskStartScheduler+0xd8>)
 800681c:	2201      	movs	r2, #1
 800681e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006820:	4b13      	ldr	r3, [pc, #76]	; (8006870 <vTaskStartScheduler+0xdc>)
 8006822:	2200      	movs	r2, #0
 8006824:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006826:	f001 fc93 	bl	8008150 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800682a:	e00e      	b.n	800684a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800682c:	697b      	ldr	r3, [r7, #20]
 800682e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006832:	d10a      	bne.n	800684a <vTaskStartScheduler+0xb6>
	__asm volatile
 8006834:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006838:	f383 8811 	msr	BASEPRI, r3
 800683c:	f3bf 8f6f 	isb	sy
 8006840:	f3bf 8f4f 	dsb	sy
 8006844:	60fb      	str	r3, [r7, #12]
}
 8006846:	bf00      	nop
 8006848:	e7fe      	b.n	8006848 <vTaskStartScheduler+0xb4>
}
 800684a:	bf00      	nop
 800684c:	3718      	adds	r7, #24
 800684e:	46bd      	mov	sp, r7
 8006850:	bd80      	pop	{r7, pc}
 8006852:	bf00      	nop
 8006854:	0800a8c0 	.word	0x0800a8c0
 8006858:	0800701d 	.word	0x0800701d
 800685c:	20000be0 	.word	0x20000be0
 8006860:	200006e8 	.word	0x200006e8
 8006864:	2000005c 	.word	0x2000005c
 8006868:	20000bdc 	.word	0x20000bdc
 800686c:	20000bc8 	.word	0x20000bc8
 8006870:	20000bc0 	.word	0x20000bc0

08006874 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006874:	b480      	push	{r7}
 8006876:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006878:	4b04      	ldr	r3, [pc, #16]	; (800688c <vTaskSuspendAll+0x18>)
 800687a:	681b      	ldr	r3, [r3, #0]
 800687c:	3301      	adds	r3, #1
 800687e:	4a03      	ldr	r2, [pc, #12]	; (800688c <vTaskSuspendAll+0x18>)
 8006880:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006882:	bf00      	nop
 8006884:	46bd      	mov	sp, r7
 8006886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688a:	4770      	bx	lr
 800688c:	20000be4 	.word	0x20000be4

08006890 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006896:	2300      	movs	r3, #0
 8006898:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800689a:	2300      	movs	r3, #0
 800689c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800689e:	4b42      	ldr	r3, [pc, #264]	; (80069a8 <xTaskResumeAll+0x118>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d10a      	bne.n	80068bc <xTaskResumeAll+0x2c>
	__asm volatile
 80068a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068aa:	f383 8811 	msr	BASEPRI, r3
 80068ae:	f3bf 8f6f 	isb	sy
 80068b2:	f3bf 8f4f 	dsb	sy
 80068b6:	603b      	str	r3, [r7, #0]
}
 80068b8:	bf00      	nop
 80068ba:	e7fe      	b.n	80068ba <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80068bc:	f001 fcea 	bl	8008294 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80068c0:	4b39      	ldr	r3, [pc, #228]	; (80069a8 <xTaskResumeAll+0x118>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	3b01      	subs	r3, #1
 80068c6:	4a38      	ldr	r2, [pc, #224]	; (80069a8 <xTaskResumeAll+0x118>)
 80068c8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ca:	4b37      	ldr	r3, [pc, #220]	; (80069a8 <xTaskResumeAll+0x118>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d162      	bne.n	8006998 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80068d2:	4b36      	ldr	r3, [pc, #216]	; (80069ac <xTaskResumeAll+0x11c>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d05e      	beq.n	8006998 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80068da:	e02f      	b.n	800693c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80068dc:	4b34      	ldr	r3, [pc, #208]	; (80069b0 <xTaskResumeAll+0x120>)
 80068de:	68db      	ldr	r3, [r3, #12]
 80068e0:	68db      	ldr	r3, [r3, #12]
 80068e2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	3318      	adds	r3, #24
 80068e8:	4618      	mov	r0, r3
 80068ea:	f7fe ff59 	bl	80057a0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	3304      	adds	r3, #4
 80068f2:	4618      	mov	r0, r3
 80068f4:	f7fe ff54 	bl	80057a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80068f8:	68fb      	ldr	r3, [r7, #12]
 80068fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80068fc:	4b2d      	ldr	r3, [pc, #180]	; (80069b4 <xTaskResumeAll+0x124>)
 80068fe:	681b      	ldr	r3, [r3, #0]
 8006900:	429a      	cmp	r2, r3
 8006902:	d903      	bls.n	800690c <xTaskResumeAll+0x7c>
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006908:	4a2a      	ldr	r2, [pc, #168]	; (80069b4 <xTaskResumeAll+0x124>)
 800690a:	6013      	str	r3, [r2, #0]
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006910:	4613      	mov	r3, r2
 8006912:	009b      	lsls	r3, r3, #2
 8006914:	4413      	add	r3, r2
 8006916:	009b      	lsls	r3, r3, #2
 8006918:	4a27      	ldr	r2, [pc, #156]	; (80069b8 <xTaskResumeAll+0x128>)
 800691a:	441a      	add	r2, r3
 800691c:	68fb      	ldr	r3, [r7, #12]
 800691e:	3304      	adds	r3, #4
 8006920:	4619      	mov	r1, r3
 8006922:	4610      	mov	r0, r2
 8006924:	f7fe fedf 	bl	80056e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800692c:	4b23      	ldr	r3, [pc, #140]	; (80069bc <xTaskResumeAll+0x12c>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006932:	429a      	cmp	r2, r3
 8006934:	d302      	bcc.n	800693c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006936:	4b22      	ldr	r3, [pc, #136]	; (80069c0 <xTaskResumeAll+0x130>)
 8006938:	2201      	movs	r2, #1
 800693a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800693c:	4b1c      	ldr	r3, [pc, #112]	; (80069b0 <xTaskResumeAll+0x120>)
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	2b00      	cmp	r3, #0
 8006942:	d1cb      	bne.n	80068dc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	2b00      	cmp	r3, #0
 8006948:	d001      	beq.n	800694e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800694a:	f000 fc21 	bl	8007190 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800694e:	4b1d      	ldr	r3, [pc, #116]	; (80069c4 <xTaskResumeAll+0x134>)
 8006950:	681b      	ldr	r3, [r3, #0]
 8006952:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d010      	beq.n	800697c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800695a:	f000 f86b 	bl	8006a34 <xTaskIncrementTick>
 800695e:	4603      	mov	r3, r0
 8006960:	2b00      	cmp	r3, #0
 8006962:	d002      	beq.n	800696a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006964:	4b16      	ldr	r3, [pc, #88]	; (80069c0 <xTaskResumeAll+0x130>)
 8006966:	2201      	movs	r2, #1
 8006968:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	3b01      	subs	r3, #1
 800696e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	2b00      	cmp	r3, #0
 8006974:	d1f1      	bne.n	800695a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006976:	4b13      	ldr	r3, [pc, #76]	; (80069c4 <xTaskResumeAll+0x134>)
 8006978:	2200      	movs	r2, #0
 800697a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800697c:	4b10      	ldr	r3, [pc, #64]	; (80069c0 <xTaskResumeAll+0x130>)
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	2b00      	cmp	r3, #0
 8006982:	d009      	beq.n	8006998 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006984:	2301      	movs	r3, #1
 8006986:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006988:	4b0f      	ldr	r3, [pc, #60]	; (80069c8 <xTaskResumeAll+0x138>)
 800698a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800698e:	601a      	str	r2, [r3, #0]
 8006990:	f3bf 8f4f 	dsb	sy
 8006994:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006998:	f001 fcac 	bl	80082f4 <vPortExitCritical>

	return xAlreadyYielded;
 800699c:	68bb      	ldr	r3, [r7, #8]
}
 800699e:	4618      	mov	r0, r3
 80069a0:	3710      	adds	r7, #16
 80069a2:	46bd      	mov	sp, r7
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20000be4 	.word	0x20000be4
 80069ac:	20000bbc 	.word	0x20000bbc
 80069b0:	20000b7c 	.word	0x20000b7c
 80069b4:	20000bc4 	.word	0x20000bc4
 80069b8:	200006ec 	.word	0x200006ec
 80069bc:	200006e8 	.word	0x200006e8
 80069c0:	20000bd0 	.word	0x20000bd0
 80069c4:	20000bcc 	.word	0x20000bcc
 80069c8:	e000ed04 	.word	0xe000ed04

080069cc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80069cc:	b480      	push	{r7}
 80069ce:	b083      	sub	sp, #12
 80069d0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80069d2:	4b05      	ldr	r3, [pc, #20]	; (80069e8 <xTaskGetTickCount+0x1c>)
 80069d4:	681b      	ldr	r3, [r3, #0]
 80069d6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80069d8:	687b      	ldr	r3, [r7, #4]
}
 80069da:	4618      	mov	r0, r3
 80069dc:	370c      	adds	r7, #12
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	20000bc0 	.word	0x20000bc0

080069ec <pcTaskGetName>:
	return uxCurrentNumberOfTasks;
}
/*-----------------------------------------------------------*/

char *pcTaskGetName( TaskHandle_t xTaskToQuery ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
{
 80069ec:	b480      	push	{r7}
 80069ee:	b085      	sub	sp, #20
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
TCB_t *pxTCB;

	/* If null is passed in here then the name of the calling task is being
	queried. */
	pxTCB = prvGetTCBFromHandle( xTaskToQuery );
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d102      	bne.n	8006a00 <pcTaskGetName+0x14>
 80069fa:	4b0d      	ldr	r3, [pc, #52]	; (8006a30 <pcTaskGetName+0x44>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	e000      	b.n	8006a02 <pcTaskGetName+0x16>
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	60fb      	str	r3, [r7, #12]
	configASSERT( pxTCB );
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d10a      	bne.n	8006a20 <pcTaskGetName+0x34>
	__asm volatile
 8006a0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a0e:	f383 8811 	msr	BASEPRI, r3
 8006a12:	f3bf 8f6f 	isb	sy
 8006a16:	f3bf 8f4f 	dsb	sy
 8006a1a:	60bb      	str	r3, [r7, #8]
}
 8006a1c:	bf00      	nop
 8006a1e:	e7fe      	b.n	8006a1e <pcTaskGetName+0x32>
	return &( pxTCB->pcTaskName[ 0 ] );
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	3334      	adds	r3, #52	; 0x34
}
 8006a24:	4618      	mov	r0, r3
 8006a26:	3714      	adds	r7, #20
 8006a28:	46bd      	mov	sp, r7
 8006a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a2e:	4770      	bx	lr
 8006a30:	200006e8 	.word	0x200006e8

08006a34 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a34:	b580      	push	{r7, lr}
 8006a36:	b086      	sub	sp, #24
 8006a38:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a3a:	2300      	movs	r3, #0
 8006a3c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a3e:	4b4f      	ldr	r3, [pc, #316]	; (8006b7c <xTaskIncrementTick+0x148>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	f040 808f 	bne.w	8006b66 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a48:	4b4d      	ldr	r3, [pc, #308]	; (8006b80 <xTaskIncrementTick+0x14c>)
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	3301      	adds	r3, #1
 8006a4e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a50:	4a4b      	ldr	r2, [pc, #300]	; (8006b80 <xTaskIncrementTick+0x14c>)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a56:	693b      	ldr	r3, [r7, #16]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d120      	bne.n	8006a9e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a5c:	4b49      	ldr	r3, [pc, #292]	; (8006b84 <xTaskIncrementTick+0x150>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d00a      	beq.n	8006a7c <xTaskIncrementTick+0x48>
	__asm volatile
 8006a66:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006a6a:	f383 8811 	msr	BASEPRI, r3
 8006a6e:	f3bf 8f6f 	isb	sy
 8006a72:	f3bf 8f4f 	dsb	sy
 8006a76:	603b      	str	r3, [r7, #0]
}
 8006a78:	bf00      	nop
 8006a7a:	e7fe      	b.n	8006a7a <xTaskIncrementTick+0x46>
 8006a7c:	4b41      	ldr	r3, [pc, #260]	; (8006b84 <xTaskIncrementTick+0x150>)
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	60fb      	str	r3, [r7, #12]
 8006a82:	4b41      	ldr	r3, [pc, #260]	; (8006b88 <xTaskIncrementTick+0x154>)
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	4a3f      	ldr	r2, [pc, #252]	; (8006b84 <xTaskIncrementTick+0x150>)
 8006a88:	6013      	str	r3, [r2, #0]
 8006a8a:	4a3f      	ldr	r2, [pc, #252]	; (8006b88 <xTaskIncrementTick+0x154>)
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	6013      	str	r3, [r2, #0]
 8006a90:	4b3e      	ldr	r3, [pc, #248]	; (8006b8c <xTaskIncrementTick+0x158>)
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	3301      	adds	r3, #1
 8006a96:	4a3d      	ldr	r2, [pc, #244]	; (8006b8c <xTaskIncrementTick+0x158>)
 8006a98:	6013      	str	r3, [r2, #0]
 8006a9a:	f000 fb79 	bl	8007190 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006a9e:	4b3c      	ldr	r3, [pc, #240]	; (8006b90 <xTaskIncrementTick+0x15c>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	693a      	ldr	r2, [r7, #16]
 8006aa4:	429a      	cmp	r2, r3
 8006aa6:	d349      	bcc.n	8006b3c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006aa8:	4b36      	ldr	r3, [pc, #216]	; (8006b84 <xTaskIncrementTick+0x150>)
 8006aaa:	681b      	ldr	r3, [r3, #0]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d104      	bne.n	8006abc <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ab2:	4b37      	ldr	r3, [pc, #220]	; (8006b90 <xTaskIncrementTick+0x15c>)
 8006ab4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006ab8:	601a      	str	r2, [r3, #0]
					break;
 8006aba:	e03f      	b.n	8006b3c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006abc:	4b31      	ldr	r3, [pc, #196]	; (8006b84 <xTaskIncrementTick+0x150>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	68db      	ldr	r3, [r3, #12]
 8006ac2:	68db      	ldr	r3, [r3, #12]
 8006ac4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ac6:	68bb      	ldr	r3, [r7, #8]
 8006ac8:	685b      	ldr	r3, [r3, #4]
 8006aca:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006acc:	693a      	ldr	r2, [r7, #16]
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	429a      	cmp	r2, r3
 8006ad2:	d203      	bcs.n	8006adc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006ad4:	4a2e      	ldr	r2, [pc, #184]	; (8006b90 <xTaskIncrementTick+0x15c>)
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006ada:	e02f      	b.n	8006b3c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006adc:	68bb      	ldr	r3, [r7, #8]
 8006ade:	3304      	adds	r3, #4
 8006ae0:	4618      	mov	r0, r3
 8006ae2:	f7fe fe5d 	bl	80057a0 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006ae6:	68bb      	ldr	r3, [r7, #8]
 8006ae8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006aea:	2b00      	cmp	r3, #0
 8006aec:	d004      	beq.n	8006af8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006aee:	68bb      	ldr	r3, [r7, #8]
 8006af0:	3318      	adds	r3, #24
 8006af2:	4618      	mov	r0, r3
 8006af4:	f7fe fe54 	bl	80057a0 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006af8:	68bb      	ldr	r3, [r7, #8]
 8006afa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006afc:	4b25      	ldr	r3, [pc, #148]	; (8006b94 <xTaskIncrementTick+0x160>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	429a      	cmp	r2, r3
 8006b02:	d903      	bls.n	8006b0c <xTaskIncrementTick+0xd8>
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b08:	4a22      	ldr	r2, [pc, #136]	; (8006b94 <xTaskIncrementTick+0x160>)
 8006b0a:	6013      	str	r3, [r2, #0]
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b10:	4613      	mov	r3, r2
 8006b12:	009b      	lsls	r3, r3, #2
 8006b14:	4413      	add	r3, r2
 8006b16:	009b      	lsls	r3, r3, #2
 8006b18:	4a1f      	ldr	r2, [pc, #124]	; (8006b98 <xTaskIncrementTick+0x164>)
 8006b1a:	441a      	add	r2, r3
 8006b1c:	68bb      	ldr	r3, [r7, #8]
 8006b1e:	3304      	adds	r3, #4
 8006b20:	4619      	mov	r1, r3
 8006b22:	4610      	mov	r0, r2
 8006b24:	f7fe fddf 	bl	80056e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b28:	68bb      	ldr	r3, [r7, #8]
 8006b2a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b2c:	4b1b      	ldr	r3, [pc, #108]	; (8006b9c <xTaskIncrementTick+0x168>)
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b32:	429a      	cmp	r2, r3
 8006b34:	d3b8      	bcc.n	8006aa8 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006b36:	2301      	movs	r3, #1
 8006b38:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b3a:	e7b5      	b.n	8006aa8 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b3c:	4b17      	ldr	r3, [pc, #92]	; (8006b9c <xTaskIncrementTick+0x168>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b42:	4915      	ldr	r1, [pc, #84]	; (8006b98 <xTaskIncrementTick+0x164>)
 8006b44:	4613      	mov	r3, r2
 8006b46:	009b      	lsls	r3, r3, #2
 8006b48:	4413      	add	r3, r2
 8006b4a:	009b      	lsls	r3, r3, #2
 8006b4c:	440b      	add	r3, r1
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	2b01      	cmp	r3, #1
 8006b52:	d901      	bls.n	8006b58 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b58:	4b11      	ldr	r3, [pc, #68]	; (8006ba0 <xTaskIncrementTick+0x16c>)
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	2b00      	cmp	r3, #0
 8006b5e:	d007      	beq.n	8006b70 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006b60:	2301      	movs	r3, #1
 8006b62:	617b      	str	r3, [r7, #20]
 8006b64:	e004      	b.n	8006b70 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b66:	4b0f      	ldr	r3, [pc, #60]	; (8006ba4 <xTaskIncrementTick+0x170>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3301      	adds	r3, #1
 8006b6c:	4a0d      	ldr	r2, [pc, #52]	; (8006ba4 <xTaskIncrementTick+0x170>)
 8006b6e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b70:	697b      	ldr	r3, [r7, #20]
}
 8006b72:	4618      	mov	r0, r3
 8006b74:	3718      	adds	r7, #24
 8006b76:	46bd      	mov	sp, r7
 8006b78:	bd80      	pop	{r7, pc}
 8006b7a:	bf00      	nop
 8006b7c:	20000be4 	.word	0x20000be4
 8006b80:	20000bc0 	.word	0x20000bc0
 8006b84:	20000b74 	.word	0x20000b74
 8006b88:	20000b78 	.word	0x20000b78
 8006b8c:	20000bd4 	.word	0x20000bd4
 8006b90:	20000bdc 	.word	0x20000bdc
 8006b94:	20000bc4 	.word	0x20000bc4
 8006b98:	200006ec 	.word	0x200006ec
 8006b9c:	200006e8 	.word	0x200006e8
 8006ba0:	20000bd0 	.word	0x20000bd0
 8006ba4:	20000bcc 	.word	0x20000bcc

08006ba8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006ba8:	b480      	push	{r7}
 8006baa:	b085      	sub	sp, #20
 8006bac:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bae:	4b2a      	ldr	r3, [pc, #168]	; (8006c58 <vTaskSwitchContext+0xb0>)
 8006bb0:	681b      	ldr	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d003      	beq.n	8006bbe <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bb6:	4b29      	ldr	r3, [pc, #164]	; (8006c5c <vTaskSwitchContext+0xb4>)
 8006bb8:	2201      	movs	r2, #1
 8006bba:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bbc:	e046      	b.n	8006c4c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006bbe:	4b27      	ldr	r3, [pc, #156]	; (8006c5c <vTaskSwitchContext+0xb4>)
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006bc4:	4b26      	ldr	r3, [pc, #152]	; (8006c60 <vTaskSwitchContext+0xb8>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	60fb      	str	r3, [r7, #12]
 8006bca:	e010      	b.n	8006bee <vTaskSwitchContext+0x46>
 8006bcc:	68fb      	ldr	r3, [r7, #12]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d10a      	bne.n	8006be8 <vTaskSwitchContext+0x40>
	__asm volatile
 8006bd2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006bd6:	f383 8811 	msr	BASEPRI, r3
 8006bda:	f3bf 8f6f 	isb	sy
 8006bde:	f3bf 8f4f 	dsb	sy
 8006be2:	607b      	str	r3, [r7, #4]
}
 8006be4:	bf00      	nop
 8006be6:	e7fe      	b.n	8006be6 <vTaskSwitchContext+0x3e>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	3b01      	subs	r3, #1
 8006bec:	60fb      	str	r3, [r7, #12]
 8006bee:	491d      	ldr	r1, [pc, #116]	; (8006c64 <vTaskSwitchContext+0xbc>)
 8006bf0:	68fa      	ldr	r2, [r7, #12]
 8006bf2:	4613      	mov	r3, r2
 8006bf4:	009b      	lsls	r3, r3, #2
 8006bf6:	4413      	add	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	440b      	add	r3, r1
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	d0e4      	beq.n	8006bcc <vTaskSwitchContext+0x24>
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	4613      	mov	r3, r2
 8006c06:	009b      	lsls	r3, r3, #2
 8006c08:	4413      	add	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4a15      	ldr	r2, [pc, #84]	; (8006c64 <vTaskSwitchContext+0xbc>)
 8006c0e:	4413      	add	r3, r2
 8006c10:	60bb      	str	r3, [r7, #8]
 8006c12:	68bb      	ldr	r3, [r7, #8]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	685a      	ldr	r2, [r3, #4]
 8006c18:	68bb      	ldr	r3, [r7, #8]
 8006c1a:	605a      	str	r2, [r3, #4]
 8006c1c:	68bb      	ldr	r3, [r7, #8]
 8006c1e:	685a      	ldr	r2, [r3, #4]
 8006c20:	68bb      	ldr	r3, [r7, #8]
 8006c22:	3308      	adds	r3, #8
 8006c24:	429a      	cmp	r2, r3
 8006c26:	d104      	bne.n	8006c32 <vTaskSwitchContext+0x8a>
 8006c28:	68bb      	ldr	r3, [r7, #8]
 8006c2a:	685b      	ldr	r3, [r3, #4]
 8006c2c:	685a      	ldr	r2, [r3, #4]
 8006c2e:	68bb      	ldr	r3, [r7, #8]
 8006c30:	605a      	str	r2, [r3, #4]
 8006c32:	68bb      	ldr	r3, [r7, #8]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	68db      	ldr	r3, [r3, #12]
 8006c38:	4a0b      	ldr	r2, [pc, #44]	; (8006c68 <vTaskSwitchContext+0xc0>)
 8006c3a:	6013      	str	r3, [r2, #0]
 8006c3c:	4a08      	ldr	r2, [pc, #32]	; (8006c60 <vTaskSwitchContext+0xb8>)
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c42:	4b09      	ldr	r3, [pc, #36]	; (8006c68 <vTaskSwitchContext+0xc0>)
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	3354      	adds	r3, #84	; 0x54
 8006c48:	4a08      	ldr	r2, [pc, #32]	; (8006c6c <vTaskSwitchContext+0xc4>)
 8006c4a:	6013      	str	r3, [r2, #0]
}
 8006c4c:	bf00      	nop
 8006c4e:	3714      	adds	r7, #20
 8006c50:	46bd      	mov	sp, r7
 8006c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c56:	4770      	bx	lr
 8006c58:	20000be4 	.word	0x20000be4
 8006c5c:	20000bd0 	.word	0x20000bd0
 8006c60:	20000bc4 	.word	0x20000bc4
 8006c64:	200006ec 	.word	0x200006ec
 8006c68:	200006e8 	.word	0x200006e8
 8006c6c:	2000005c 	.word	0x2000005c

08006c70 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c70:	b580      	push	{r7, lr}
 8006c72:	b084      	sub	sp, #16
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	6078      	str	r0, [r7, #4]
 8006c78:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c7a:	687b      	ldr	r3, [r7, #4]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d10a      	bne.n	8006c96 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006c80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c84:	f383 8811 	msr	BASEPRI, r3
 8006c88:	f3bf 8f6f 	isb	sy
 8006c8c:	f3bf 8f4f 	dsb	sy
 8006c90:	60fb      	str	r3, [r7, #12]
}
 8006c92:	bf00      	nop
 8006c94:	e7fe      	b.n	8006c94 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006c96:	4b07      	ldr	r3, [pc, #28]	; (8006cb4 <vTaskPlaceOnEventList+0x44>)
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	3318      	adds	r3, #24
 8006c9c:	4619      	mov	r1, r3
 8006c9e:	6878      	ldr	r0, [r7, #4]
 8006ca0:	f7fe fd45 	bl	800572e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006ca4:	2101      	movs	r1, #1
 8006ca6:	6838      	ldr	r0, [r7, #0]
 8006ca8:	f000 fd48 	bl	800773c <prvAddCurrentTaskToDelayedList>
}
 8006cac:	bf00      	nop
 8006cae:	3710      	adds	r7, #16
 8006cb0:	46bd      	mov	sp, r7
 8006cb2:	bd80      	pop	{r7, pc}
 8006cb4:	200006e8 	.word	0x200006e8

08006cb8 <vTaskPlaceOnUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnUnorderedEventList( List_t * pxEventList, const TickType_t xItemValue, const TickType_t xTicksToWait )
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b086      	sub	sp, #24
 8006cbc:	af00      	add	r7, sp, #0
 8006cbe:	60f8      	str	r0, [r7, #12]
 8006cc0:	60b9      	str	r1, [r7, #8]
 8006cc2:	607a      	str	r2, [r7, #4]
	configASSERT( pxEventList );
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d10a      	bne.n	8006ce0 <vTaskPlaceOnUnorderedEventList+0x28>
	__asm volatile
 8006cca:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cce:	f383 8811 	msr	BASEPRI, r3
 8006cd2:	f3bf 8f6f 	isb	sy
 8006cd6:	f3bf 8f4f 	dsb	sy
 8006cda:	617b      	str	r3, [r7, #20]
}
 8006cdc:	bf00      	nop
 8006cde:	e7fe      	b.n	8006cde <vTaskPlaceOnUnorderedEventList+0x26>

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event groups implementation. */
	configASSERT( uxSchedulerSuspended != 0 );
 8006ce0:	4b11      	ldr	r3, [pc, #68]	; (8006d28 <vTaskPlaceOnUnorderedEventList+0x70>)
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d10a      	bne.n	8006cfe <vTaskPlaceOnUnorderedEventList+0x46>
	__asm volatile
 8006ce8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cec:	f383 8811 	msr	BASEPRI, r3
 8006cf0:	f3bf 8f6f 	isb	sy
 8006cf4:	f3bf 8f4f 	dsb	sy
 8006cf8:	613b      	str	r3, [r7, #16]
}
 8006cfa:	bf00      	nop
 8006cfc:	e7fe      	b.n	8006cfc <vTaskPlaceOnUnorderedEventList+0x44>

	/* Store the item value in the event list item.  It is safe to access the
	event list item here as interrupts won't access the event list item of a
	task that is not in the Blocked state. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006cfe:	4b0b      	ldr	r3, [pc, #44]	; (8006d2c <vTaskPlaceOnUnorderedEventList+0x74>)
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	68ba      	ldr	r2, [r7, #8]
 8006d04:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 8006d08:	619a      	str	r2, [r3, #24]
	/* Place the event list item of the TCB at the end of the appropriate event
	list.  It is safe to access the event list here because it is part of an
	event group implementation - and interrupts don't access event groups
	directly (instead they access them indirectly by pending function calls to
	the task level). */
	vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d0a:	4b08      	ldr	r3, [pc, #32]	; (8006d2c <vTaskPlaceOnUnorderedEventList+0x74>)
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	3318      	adds	r3, #24
 8006d10:	4619      	mov	r1, r3
 8006d12:	68f8      	ldr	r0, [r7, #12]
 8006d14:	f7fe fce7 	bl	80056e6 <vListInsertEnd>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d18:	2101      	movs	r1, #1
 8006d1a:	6878      	ldr	r0, [r7, #4]
 8006d1c:	f000 fd0e 	bl	800773c <prvAddCurrentTaskToDelayedList>
}
 8006d20:	bf00      	nop
 8006d22:	3718      	adds	r7, #24
 8006d24:	46bd      	mov	sp, r7
 8006d26:	bd80      	pop	{r7, pc}
 8006d28:	20000be4 	.word	0x20000be4
 8006d2c:	200006e8 	.word	0x200006e8

08006d30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b086      	sub	sp, #24
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d3c:	68fb      	ldr	r3, [r7, #12]
 8006d3e:	2b00      	cmp	r3, #0
 8006d40:	d10a      	bne.n	8006d58 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d42:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d46:	f383 8811 	msr	BASEPRI, r3
 8006d4a:	f3bf 8f6f 	isb	sy
 8006d4e:	f3bf 8f4f 	dsb	sy
 8006d52:	617b      	str	r3, [r7, #20]
}
 8006d54:	bf00      	nop
 8006d56:	e7fe      	b.n	8006d56 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d58:	4b0a      	ldr	r3, [pc, #40]	; (8006d84 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d5a:	681b      	ldr	r3, [r3, #0]
 8006d5c:	3318      	adds	r3, #24
 8006d5e:	4619      	mov	r1, r3
 8006d60:	68f8      	ldr	r0, [r7, #12]
 8006d62:	f7fe fcc0 	bl	80056e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d66:	687b      	ldr	r3, [r7, #4]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d002      	beq.n	8006d72 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d6c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006d70:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d72:	6879      	ldr	r1, [r7, #4]
 8006d74:	68b8      	ldr	r0, [r7, #8]
 8006d76:	f000 fce1 	bl	800773c <prvAddCurrentTaskToDelayedList>
	}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	200006e8 	.word	0x200006e8

08006d88 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	68db      	ldr	r3, [r3, #12]
 8006d94:	68db      	ldr	r3, [r3, #12]
 8006d96:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d98:	693b      	ldr	r3, [r7, #16]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d10a      	bne.n	8006db4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006da2:	f383 8811 	msr	BASEPRI, r3
 8006da6:	f3bf 8f6f 	isb	sy
 8006daa:	f3bf 8f4f 	dsb	sy
 8006dae:	60fb      	str	r3, [r7, #12]
}
 8006db0:	bf00      	nop
 8006db2:	e7fe      	b.n	8006db2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	3318      	adds	r3, #24
 8006db8:	4618      	mov	r0, r3
 8006dba:	f7fe fcf1 	bl	80057a0 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006dbe:	4b1e      	ldr	r3, [pc, #120]	; (8006e38 <xTaskRemoveFromEventList+0xb0>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	2b00      	cmp	r3, #0
 8006dc4:	d11d      	bne.n	8006e02 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4618      	mov	r0, r3
 8006dcc:	f7fe fce8 	bl	80057a0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dd4:	4b19      	ldr	r3, [pc, #100]	; (8006e3c <xTaskRemoveFromEventList+0xb4>)
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	429a      	cmp	r2, r3
 8006dda:	d903      	bls.n	8006de4 <xTaskRemoveFromEventList+0x5c>
 8006ddc:	693b      	ldr	r3, [r7, #16]
 8006dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006de0:	4a16      	ldr	r2, [pc, #88]	; (8006e3c <xTaskRemoveFromEventList+0xb4>)
 8006de2:	6013      	str	r3, [r2, #0]
 8006de4:	693b      	ldr	r3, [r7, #16]
 8006de6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006de8:	4613      	mov	r3, r2
 8006dea:	009b      	lsls	r3, r3, #2
 8006dec:	4413      	add	r3, r2
 8006dee:	009b      	lsls	r3, r3, #2
 8006df0:	4a13      	ldr	r2, [pc, #76]	; (8006e40 <xTaskRemoveFromEventList+0xb8>)
 8006df2:	441a      	add	r2, r3
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	3304      	adds	r3, #4
 8006df8:	4619      	mov	r1, r3
 8006dfa:	4610      	mov	r0, r2
 8006dfc:	f7fe fc73 	bl	80056e6 <vListInsertEnd>
 8006e00:	e005      	b.n	8006e0e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	3318      	adds	r3, #24
 8006e06:	4619      	mov	r1, r3
 8006e08:	480e      	ldr	r0, [pc, #56]	; (8006e44 <xTaskRemoveFromEventList+0xbc>)
 8006e0a:	f7fe fc6c 	bl	80056e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e0e:	693b      	ldr	r3, [r7, #16]
 8006e10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e12:	4b0d      	ldr	r3, [pc, #52]	; (8006e48 <xTaskRemoveFromEventList+0xc0>)
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e18:	429a      	cmp	r2, r3
 8006e1a:	d905      	bls.n	8006e28 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e20:	4b0a      	ldr	r3, [pc, #40]	; (8006e4c <xTaskRemoveFromEventList+0xc4>)
 8006e22:	2201      	movs	r2, #1
 8006e24:	601a      	str	r2, [r3, #0]
 8006e26:	e001      	b.n	8006e2c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e28:	2300      	movs	r3, #0
 8006e2a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e2c:	697b      	ldr	r3, [r7, #20]
}
 8006e2e:	4618      	mov	r0, r3
 8006e30:	3718      	adds	r7, #24
 8006e32:	46bd      	mov	sp, r7
 8006e34:	bd80      	pop	{r7, pc}
 8006e36:	bf00      	nop
 8006e38:	20000be4 	.word	0x20000be4
 8006e3c:	20000bc4 	.word	0x20000bc4
 8006e40:	200006ec 	.word	0x200006ec
 8006e44:	20000b7c 	.word	0x20000b7c
 8006e48:	200006e8 	.word	0x200006e8
 8006e4c:	20000bd0 	.word	0x20000bd0

08006e50 <vTaskRemoveFromUnorderedEventList>:
/*-----------------------------------------------------------*/

void vTaskRemoveFromUnorderedEventList( ListItem_t * pxEventListItem, const TickType_t xItemValue )
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b086      	sub	sp, #24
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
 8006e58:	6039      	str	r1, [r7, #0]
TCB_t *pxUnblockedTCB;

	/* THIS FUNCTION MUST BE CALLED WITH THE SCHEDULER SUSPENDED.  It is used by
	the event flags implementation. */
	configASSERT( uxSchedulerSuspended != pdFALSE );
 8006e5a:	4b29      	ldr	r3, [pc, #164]	; (8006f00 <vTaskRemoveFromUnorderedEventList+0xb0>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d10a      	bne.n	8006e78 <vTaskRemoveFromUnorderedEventList+0x28>
	__asm volatile
 8006e62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e66:	f383 8811 	msr	BASEPRI, r3
 8006e6a:	f3bf 8f6f 	isb	sy
 8006e6e:	f3bf 8f4f 	dsb	sy
 8006e72:	613b      	str	r3, [r7, #16]
}
 8006e74:	bf00      	nop
 8006e76:	e7fe      	b.n	8006e76 <vTaskRemoveFromUnorderedEventList+0x26>

	/* Store the new item value in the event list. */
	listSET_LIST_ITEM_VALUE( pxEventListItem, xItemValue | taskEVENT_LIST_ITEM_VALUE_IN_USE );
 8006e78:	683b      	ldr	r3, [r7, #0]
 8006e7a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	601a      	str	r2, [r3, #0]

	/* Remove the event list form the event flag.  Interrupts do not access
	event flags. */
	pxUnblockedTCB = listGET_LIST_ITEM_OWNER( pxEventListItem ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	68db      	ldr	r3, [r3, #12]
 8006e86:	617b      	str	r3, [r7, #20]
	configASSERT( pxUnblockedTCB );
 8006e88:	697b      	ldr	r3, [r7, #20]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d10a      	bne.n	8006ea4 <vTaskRemoveFromUnorderedEventList+0x54>
	__asm volatile
 8006e8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e92:	f383 8811 	msr	BASEPRI, r3
 8006e96:	f3bf 8f6f 	isb	sy
 8006e9a:	f3bf 8f4f 	dsb	sy
 8006e9e:	60fb      	str	r3, [r7, #12]
}
 8006ea0:	bf00      	nop
 8006ea2:	e7fe      	b.n	8006ea2 <vTaskRemoveFromUnorderedEventList+0x52>
	( void ) uxListRemove( pxEventListItem );
 8006ea4:	6878      	ldr	r0, [r7, #4]
 8006ea6:	f7fe fc7b 	bl	80057a0 <uxListRemove>
	#endif

	/* Remove the task from the delayed list and add it to the ready list.  The
	scheduler is suspended so interrupts will not be accessing the ready
	lists. */
	( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006eaa:	697b      	ldr	r3, [r7, #20]
 8006eac:	3304      	adds	r3, #4
 8006eae:	4618      	mov	r0, r3
 8006eb0:	f7fe fc76 	bl	80057a0 <uxListRemove>
	prvAddTaskToReadyList( pxUnblockedTCB );
 8006eb4:	697b      	ldr	r3, [r7, #20]
 8006eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006eb8:	4b12      	ldr	r3, [pc, #72]	; (8006f04 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	429a      	cmp	r2, r3
 8006ebe:	d903      	bls.n	8006ec8 <vTaskRemoveFromUnorderedEventList+0x78>
 8006ec0:	697b      	ldr	r3, [r7, #20]
 8006ec2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ec4:	4a0f      	ldr	r2, [pc, #60]	; (8006f04 <vTaskRemoveFromUnorderedEventList+0xb4>)
 8006ec6:	6013      	str	r3, [r2, #0]
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ecc:	4613      	mov	r3, r2
 8006ece:	009b      	lsls	r3, r3, #2
 8006ed0:	4413      	add	r3, r2
 8006ed2:	009b      	lsls	r3, r3, #2
 8006ed4:	4a0c      	ldr	r2, [pc, #48]	; (8006f08 <vTaskRemoveFromUnorderedEventList+0xb8>)
 8006ed6:	441a      	add	r2, r3
 8006ed8:	697b      	ldr	r3, [r7, #20]
 8006eda:	3304      	adds	r3, #4
 8006edc:	4619      	mov	r1, r3
 8006ede:	4610      	mov	r0, r2
 8006ee0:	f7fe fc01 	bl	80056e6 <vListInsertEnd>

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006ee4:	697b      	ldr	r3, [r7, #20]
 8006ee6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ee8:	4b08      	ldr	r3, [pc, #32]	; (8006f0c <vTaskRemoveFromUnorderedEventList+0xbc>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d902      	bls.n	8006ef8 <vTaskRemoveFromUnorderedEventList+0xa8>
	{
		/* The unblocked task has a priority above that of the calling task, so
		a context switch is required.  This function is called with the
		scheduler suspended so xYieldPending is set so the context switch
		occurs immediately that the scheduler is resumed (unsuspended). */
		xYieldPending = pdTRUE;
 8006ef2:	4b07      	ldr	r3, [pc, #28]	; (8006f10 <vTaskRemoveFromUnorderedEventList+0xc0>)
 8006ef4:	2201      	movs	r2, #1
 8006ef6:	601a      	str	r2, [r3, #0]
	}
}
 8006ef8:	bf00      	nop
 8006efa:	3718      	adds	r7, #24
 8006efc:	46bd      	mov	sp, r7
 8006efe:	bd80      	pop	{r7, pc}
 8006f00:	20000be4 	.word	0x20000be4
 8006f04:	20000bc4 	.word	0x20000bc4
 8006f08:	200006ec 	.word	0x200006ec
 8006f0c:	200006e8 	.word	0x200006e8
 8006f10:	20000bd0 	.word	0x20000bd0

08006f14 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006f14:	b480      	push	{r7}
 8006f16:	b083      	sub	sp, #12
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006f1c:	4b06      	ldr	r3, [pc, #24]	; (8006f38 <vTaskInternalSetTimeOutState+0x24>)
 8006f1e:	681a      	ldr	r2, [r3, #0]
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006f24:	4b05      	ldr	r3, [pc, #20]	; (8006f3c <vTaskInternalSetTimeOutState+0x28>)
 8006f26:	681a      	ldr	r2, [r3, #0]
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	605a      	str	r2, [r3, #4]
}
 8006f2c:	bf00      	nop
 8006f2e:	370c      	adds	r7, #12
 8006f30:	46bd      	mov	sp, r7
 8006f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f36:	4770      	bx	lr
 8006f38:	20000bd4 	.word	0x20000bd4
 8006f3c:	20000bc0 	.word	0x20000bc0

08006f40 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006f40:	b580      	push	{r7, lr}
 8006f42:	b088      	sub	sp, #32
 8006f44:	af00      	add	r7, sp, #0
 8006f46:	6078      	str	r0, [r7, #4]
 8006f48:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006f4a:	687b      	ldr	r3, [r7, #4]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d10a      	bne.n	8006f66 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006f50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f54:	f383 8811 	msr	BASEPRI, r3
 8006f58:	f3bf 8f6f 	isb	sy
 8006f5c:	f3bf 8f4f 	dsb	sy
 8006f60:	613b      	str	r3, [r7, #16]
}
 8006f62:	bf00      	nop
 8006f64:	e7fe      	b.n	8006f64 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	2b00      	cmp	r3, #0
 8006f6a:	d10a      	bne.n	8006f82 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006f6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f70:	f383 8811 	msr	BASEPRI, r3
 8006f74:	f3bf 8f6f 	isb	sy
 8006f78:	f3bf 8f4f 	dsb	sy
 8006f7c:	60fb      	str	r3, [r7, #12]
}
 8006f7e:	bf00      	nop
 8006f80:	e7fe      	b.n	8006f80 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006f82:	f001 f987 	bl	8008294 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006f86:	4b1d      	ldr	r3, [pc, #116]	; (8006ffc <xTaskCheckForTimeOut+0xbc>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	685b      	ldr	r3, [r3, #4]
 8006f90:	69ba      	ldr	r2, [r7, #24]
 8006f92:	1ad3      	subs	r3, r2, r3
 8006f94:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006f96:	683b      	ldr	r3, [r7, #0]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f9e:	d102      	bne.n	8006fa6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006fa0:	2300      	movs	r3, #0
 8006fa2:	61fb      	str	r3, [r7, #28]
 8006fa4:	e023      	b.n	8006fee <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	681a      	ldr	r2, [r3, #0]
 8006faa:	4b15      	ldr	r3, [pc, #84]	; (8007000 <xTaskCheckForTimeOut+0xc0>)
 8006fac:	681b      	ldr	r3, [r3, #0]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d007      	beq.n	8006fc2 <xTaskCheckForTimeOut+0x82>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	69ba      	ldr	r2, [r7, #24]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d302      	bcc.n	8006fc2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006fbc:	2301      	movs	r3, #1
 8006fbe:	61fb      	str	r3, [r7, #28]
 8006fc0:	e015      	b.n	8006fee <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	697a      	ldr	r2, [r7, #20]
 8006fc8:	429a      	cmp	r2, r3
 8006fca:	d20b      	bcs.n	8006fe4 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006fcc:	683b      	ldr	r3, [r7, #0]
 8006fce:	681a      	ldr	r2, [r3, #0]
 8006fd0:	697b      	ldr	r3, [r7, #20]
 8006fd2:	1ad2      	subs	r2, r2, r3
 8006fd4:	683b      	ldr	r3, [r7, #0]
 8006fd6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006fd8:	6878      	ldr	r0, [r7, #4]
 8006fda:	f7ff ff9b 	bl	8006f14 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	61fb      	str	r3, [r7, #28]
 8006fe2:	e004      	b.n	8006fee <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	2200      	movs	r2, #0
 8006fe8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006fea:	2301      	movs	r3, #1
 8006fec:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006fee:	f001 f981 	bl	80082f4 <vPortExitCritical>

	return xReturn;
 8006ff2:	69fb      	ldr	r3, [r7, #28]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3720      	adds	r7, #32
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000bc0 	.word	0x20000bc0
 8007000:	20000bd4 	.word	0x20000bd4

08007004 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8007004:	b480      	push	{r7}
 8007006:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8007008:	4b03      	ldr	r3, [pc, #12]	; (8007018 <vTaskMissedYield+0x14>)
 800700a:	2201      	movs	r2, #1
 800700c:	601a      	str	r2, [r3, #0]
}
 800700e:	bf00      	nop
 8007010:	46bd      	mov	sp, r7
 8007012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007016:	4770      	bx	lr
 8007018:	20000bd0 	.word	0x20000bd0

0800701c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800701c:	b580      	push	{r7, lr}
 800701e:	b082      	sub	sp, #8
 8007020:	af00      	add	r7, sp, #0
 8007022:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007024:	f000 f852 	bl	80070cc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007028:	4b06      	ldr	r3, [pc, #24]	; (8007044 <prvIdleTask+0x28>)
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	2b01      	cmp	r3, #1
 800702e:	d9f9      	bls.n	8007024 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007030:	4b05      	ldr	r3, [pc, #20]	; (8007048 <prvIdleTask+0x2c>)
 8007032:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007036:	601a      	str	r2, [r3, #0]
 8007038:	f3bf 8f4f 	dsb	sy
 800703c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007040:	e7f0      	b.n	8007024 <prvIdleTask+0x8>
 8007042:	bf00      	nop
 8007044:	200006ec 	.word	0x200006ec
 8007048:	e000ed04 	.word	0xe000ed04

0800704c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800704c:	b580      	push	{r7, lr}
 800704e:	b082      	sub	sp, #8
 8007050:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007052:	2300      	movs	r3, #0
 8007054:	607b      	str	r3, [r7, #4]
 8007056:	e00c      	b.n	8007072 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	4613      	mov	r3, r2
 800705c:	009b      	lsls	r3, r3, #2
 800705e:	4413      	add	r3, r2
 8007060:	009b      	lsls	r3, r3, #2
 8007062:	4a12      	ldr	r2, [pc, #72]	; (80070ac <prvInitialiseTaskLists+0x60>)
 8007064:	4413      	add	r3, r2
 8007066:	4618      	mov	r0, r3
 8007068:	f7fe fb10 	bl	800568c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	3301      	adds	r3, #1
 8007070:	607b      	str	r3, [r7, #4]
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2b37      	cmp	r3, #55	; 0x37
 8007076:	d9ef      	bls.n	8007058 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007078:	480d      	ldr	r0, [pc, #52]	; (80070b0 <prvInitialiseTaskLists+0x64>)
 800707a:	f7fe fb07 	bl	800568c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800707e:	480d      	ldr	r0, [pc, #52]	; (80070b4 <prvInitialiseTaskLists+0x68>)
 8007080:	f7fe fb04 	bl	800568c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007084:	480c      	ldr	r0, [pc, #48]	; (80070b8 <prvInitialiseTaskLists+0x6c>)
 8007086:	f7fe fb01 	bl	800568c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800708a:	480c      	ldr	r0, [pc, #48]	; (80070bc <prvInitialiseTaskLists+0x70>)
 800708c:	f7fe fafe 	bl	800568c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007090:	480b      	ldr	r0, [pc, #44]	; (80070c0 <prvInitialiseTaskLists+0x74>)
 8007092:	f7fe fafb 	bl	800568c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007096:	4b0b      	ldr	r3, [pc, #44]	; (80070c4 <prvInitialiseTaskLists+0x78>)
 8007098:	4a05      	ldr	r2, [pc, #20]	; (80070b0 <prvInitialiseTaskLists+0x64>)
 800709a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800709c:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <prvInitialiseTaskLists+0x7c>)
 800709e:	4a05      	ldr	r2, [pc, #20]	; (80070b4 <prvInitialiseTaskLists+0x68>)
 80070a0:	601a      	str	r2, [r3, #0]
}
 80070a2:	bf00      	nop
 80070a4:	3708      	adds	r7, #8
 80070a6:	46bd      	mov	sp, r7
 80070a8:	bd80      	pop	{r7, pc}
 80070aa:	bf00      	nop
 80070ac:	200006ec 	.word	0x200006ec
 80070b0:	20000b4c 	.word	0x20000b4c
 80070b4:	20000b60 	.word	0x20000b60
 80070b8:	20000b7c 	.word	0x20000b7c
 80070bc:	20000b90 	.word	0x20000b90
 80070c0:	20000ba8 	.word	0x20000ba8
 80070c4:	20000b74 	.word	0x20000b74
 80070c8:	20000b78 	.word	0x20000b78

080070cc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80070cc:	b580      	push	{r7, lr}
 80070ce:	b082      	sub	sp, #8
 80070d0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80070d2:	e019      	b.n	8007108 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80070d4:	f001 f8de 	bl	8008294 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070d8:	4b10      	ldr	r3, [pc, #64]	; (800711c <prvCheckTasksWaitingTermination+0x50>)
 80070da:	68db      	ldr	r3, [r3, #12]
 80070dc:	68db      	ldr	r3, [r3, #12]
 80070de:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	3304      	adds	r3, #4
 80070e4:	4618      	mov	r0, r3
 80070e6:	f7fe fb5b 	bl	80057a0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80070ea:	4b0d      	ldr	r3, [pc, #52]	; (8007120 <prvCheckTasksWaitingTermination+0x54>)
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	3b01      	subs	r3, #1
 80070f0:	4a0b      	ldr	r2, [pc, #44]	; (8007120 <prvCheckTasksWaitingTermination+0x54>)
 80070f2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80070f4:	4b0b      	ldr	r3, [pc, #44]	; (8007124 <prvCheckTasksWaitingTermination+0x58>)
 80070f6:	681b      	ldr	r3, [r3, #0]
 80070f8:	3b01      	subs	r3, #1
 80070fa:	4a0a      	ldr	r2, [pc, #40]	; (8007124 <prvCheckTasksWaitingTermination+0x58>)
 80070fc:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80070fe:	f001 f8f9 	bl	80082f4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007102:	6878      	ldr	r0, [r7, #4]
 8007104:	f000 f810 	bl	8007128 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007108:	4b06      	ldr	r3, [pc, #24]	; (8007124 <prvCheckTasksWaitingTermination+0x58>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	2b00      	cmp	r3, #0
 800710e:	d1e1      	bne.n	80070d4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007110:	bf00      	nop
 8007112:	bf00      	nop
 8007114:	3708      	adds	r7, #8
 8007116:	46bd      	mov	sp, r7
 8007118:	bd80      	pop	{r7, pc}
 800711a:	bf00      	nop
 800711c:	20000b90 	.word	0x20000b90
 8007120:	20000bbc 	.word	0x20000bbc
 8007124:	20000ba4 	.word	0x20000ba4

08007128 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007128:	b580      	push	{r7, lr}
 800712a:	b084      	sub	sp, #16
 800712c:	af00      	add	r7, sp, #0
 800712e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	3354      	adds	r3, #84	; 0x54
 8007134:	4618      	mov	r0, r3
 8007136:	f001 fe23 	bl	8008d80 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8007140:	2b00      	cmp	r3, #0
 8007142:	d108      	bne.n	8007156 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007148:	4618      	mov	r0, r3
 800714a:	f001 fa91 	bl	8008670 <vPortFree>
				vPortFree( pxTCB );
 800714e:	6878      	ldr	r0, [r7, #4]
 8007150:	f001 fa8e 	bl	8008670 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007154:	e018      	b.n	8007188 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800715c:	2b01      	cmp	r3, #1
 800715e:	d103      	bne.n	8007168 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007160:	6878      	ldr	r0, [r7, #4]
 8007162:	f001 fa85 	bl	8008670 <vPortFree>
	}
 8007166:	e00f      	b.n	8007188 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007168:	687b      	ldr	r3, [r7, #4]
 800716a:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800716e:	2b02      	cmp	r3, #2
 8007170:	d00a      	beq.n	8007188 <prvDeleteTCB+0x60>
	__asm volatile
 8007172:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007176:	f383 8811 	msr	BASEPRI, r3
 800717a:	f3bf 8f6f 	isb	sy
 800717e:	f3bf 8f4f 	dsb	sy
 8007182:	60fb      	str	r3, [r7, #12]
}
 8007184:	bf00      	nop
 8007186:	e7fe      	b.n	8007186 <prvDeleteTCB+0x5e>
	}
 8007188:	bf00      	nop
 800718a:	3710      	adds	r7, #16
 800718c:	46bd      	mov	sp, r7
 800718e:	bd80      	pop	{r7, pc}

08007190 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007190:	b480      	push	{r7}
 8007192:	b083      	sub	sp, #12
 8007194:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007196:	4b0c      	ldr	r3, [pc, #48]	; (80071c8 <prvResetNextTaskUnblockTime+0x38>)
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d104      	bne.n	80071aa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80071a0:	4b0a      	ldr	r3, [pc, #40]	; (80071cc <prvResetNextTaskUnblockTime+0x3c>)
 80071a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80071a6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80071a8:	e008      	b.n	80071bc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071aa:	4b07      	ldr	r3, [pc, #28]	; (80071c8 <prvResetNextTaskUnblockTime+0x38>)
 80071ac:	681b      	ldr	r3, [r3, #0]
 80071ae:	68db      	ldr	r3, [r3, #12]
 80071b0:	68db      	ldr	r3, [r3, #12]
 80071b2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	685b      	ldr	r3, [r3, #4]
 80071b8:	4a04      	ldr	r2, [pc, #16]	; (80071cc <prvResetNextTaskUnblockTime+0x3c>)
 80071ba:	6013      	str	r3, [r2, #0]
}
 80071bc:	bf00      	nop
 80071be:	370c      	adds	r7, #12
 80071c0:	46bd      	mov	sp, r7
 80071c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c6:	4770      	bx	lr
 80071c8:	20000b74 	.word	0x20000b74
 80071cc:	20000bdc 	.word	0x20000bdc

080071d0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80071d0:	b480      	push	{r7}
 80071d2:	b083      	sub	sp, #12
 80071d4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80071d6:	4b05      	ldr	r3, [pc, #20]	; (80071ec <xTaskGetCurrentTaskHandle+0x1c>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	607b      	str	r3, [r7, #4]

		return xReturn;
 80071dc:	687b      	ldr	r3, [r7, #4]
	}
 80071de:	4618      	mov	r0, r3
 80071e0:	370c      	adds	r7, #12
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop
 80071ec:	200006e8 	.word	0x200006e8

080071f0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80071f0:	b480      	push	{r7}
 80071f2:	b083      	sub	sp, #12
 80071f4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80071f6:	4b0b      	ldr	r3, [pc, #44]	; (8007224 <xTaskGetSchedulerState+0x34>)
 80071f8:	681b      	ldr	r3, [r3, #0]
 80071fa:	2b00      	cmp	r3, #0
 80071fc:	d102      	bne.n	8007204 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80071fe:	2301      	movs	r3, #1
 8007200:	607b      	str	r3, [r7, #4]
 8007202:	e008      	b.n	8007216 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007204:	4b08      	ldr	r3, [pc, #32]	; (8007228 <xTaskGetSchedulerState+0x38>)
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	2b00      	cmp	r3, #0
 800720a:	d102      	bne.n	8007212 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800720c:	2302      	movs	r3, #2
 800720e:	607b      	str	r3, [r7, #4]
 8007210:	e001      	b.n	8007216 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007212:	2300      	movs	r3, #0
 8007214:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007216:	687b      	ldr	r3, [r7, #4]
	}
 8007218:	4618      	mov	r0, r3
 800721a:	370c      	adds	r7, #12
 800721c:	46bd      	mov	sp, r7
 800721e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007222:	4770      	bx	lr
 8007224:	20000bc8 	.word	0x20000bc8
 8007228:	20000be4 	.word	0x20000be4

0800722c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800722c:	b580      	push	{r7, lr}
 800722e:	b086      	sub	sp, #24
 8007230:	af00      	add	r7, sp, #0
 8007232:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007238:	2300      	movs	r3, #0
 800723a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d056      	beq.n	80072f0 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007242:	4b2e      	ldr	r3, [pc, #184]	; (80072fc <xTaskPriorityDisinherit+0xd0>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	693a      	ldr	r2, [r7, #16]
 8007248:	429a      	cmp	r2, r3
 800724a:	d00a      	beq.n	8007262 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	60fb      	str	r3, [r7, #12]
}
 800725e:	bf00      	nop
 8007260:	e7fe      	b.n	8007260 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007262:	693b      	ldr	r3, [r7, #16]
 8007264:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007266:	2b00      	cmp	r3, #0
 8007268:	d10a      	bne.n	8007280 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800726a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800726e:	f383 8811 	msr	BASEPRI, r3
 8007272:	f3bf 8f6f 	isb	sy
 8007276:	f3bf 8f4f 	dsb	sy
 800727a:	60bb      	str	r3, [r7, #8]
}
 800727c:	bf00      	nop
 800727e:	e7fe      	b.n	800727e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007280:	693b      	ldr	r3, [r7, #16]
 8007282:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007284:	1e5a      	subs	r2, r3, #1
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800728a:	693b      	ldr	r3, [r7, #16]
 800728c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007292:	429a      	cmp	r2, r3
 8007294:	d02c      	beq.n	80072f0 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8007296:	693b      	ldr	r3, [r7, #16]
 8007298:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800729a:	2b00      	cmp	r3, #0
 800729c:	d128      	bne.n	80072f0 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800729e:	693b      	ldr	r3, [r7, #16]
 80072a0:	3304      	adds	r3, #4
 80072a2:	4618      	mov	r0, r3
 80072a4:	f7fe fa7c 	bl	80057a0 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80072a8:	693b      	ldr	r3, [r7, #16]
 80072aa:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80072ac:	693b      	ldr	r3, [r7, #16]
 80072ae:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80072b0:	693b      	ldr	r3, [r7, #16]
 80072b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072b4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80072b8:	693b      	ldr	r3, [r7, #16]
 80072ba:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80072bc:	693b      	ldr	r3, [r7, #16]
 80072be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072c0:	4b0f      	ldr	r3, [pc, #60]	; (8007300 <xTaskPriorityDisinherit+0xd4>)
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	429a      	cmp	r2, r3
 80072c6:	d903      	bls.n	80072d0 <xTaskPriorityDisinherit+0xa4>
 80072c8:	693b      	ldr	r3, [r7, #16]
 80072ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80072cc:	4a0c      	ldr	r2, [pc, #48]	; (8007300 <xTaskPriorityDisinherit+0xd4>)
 80072ce:	6013      	str	r3, [r2, #0]
 80072d0:	693b      	ldr	r3, [r7, #16]
 80072d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80072d4:	4613      	mov	r3, r2
 80072d6:	009b      	lsls	r3, r3, #2
 80072d8:	4413      	add	r3, r2
 80072da:	009b      	lsls	r3, r3, #2
 80072dc:	4a09      	ldr	r2, [pc, #36]	; (8007304 <xTaskPriorityDisinherit+0xd8>)
 80072de:	441a      	add	r2, r3
 80072e0:	693b      	ldr	r3, [r7, #16]
 80072e2:	3304      	adds	r3, #4
 80072e4:	4619      	mov	r1, r3
 80072e6:	4610      	mov	r0, r2
 80072e8:	f7fe f9fd 	bl	80056e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80072ec:	2301      	movs	r3, #1
 80072ee:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80072f0:	697b      	ldr	r3, [r7, #20]
	}
 80072f2:	4618      	mov	r0, r3
 80072f4:	3718      	adds	r7, #24
 80072f6:	46bd      	mov	sp, r7
 80072f8:	bd80      	pop	{r7, pc}
 80072fa:	bf00      	nop
 80072fc:	200006e8 	.word	0x200006e8
 8007300:	20000bc4 	.word	0x20000bc4
 8007304:	200006ec 	.word	0x200006ec

08007308 <uxTaskResetEventItemValue>:

#endif /* ( ( configGENERATE_RUN_TIME_STATS == 1 ) && ( configUSE_STATS_FORMATTING_FUNCTIONS > 0 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

TickType_t uxTaskResetEventItemValue( void )
{
 8007308:	b480      	push	{r7}
 800730a:	b083      	sub	sp, #12
 800730c:	af00      	add	r7, sp, #0
TickType_t uxReturn;

	uxReturn = listGET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ) );
 800730e:	4b09      	ldr	r3, [pc, #36]	; (8007334 <uxTaskResetEventItemValue+0x2c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	699b      	ldr	r3, [r3, #24]
 8007314:	607b      	str	r3, [r7, #4]

	/* Reset the event list item to its normal value - so it can be used with
	queues and semaphores. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xEventListItem ), ( ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ) ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007316:	4b07      	ldr	r3, [pc, #28]	; (8007334 <uxTaskResetEventItemValue+0x2c>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800731c:	4b05      	ldr	r3, [pc, #20]	; (8007334 <uxTaskResetEventItemValue+0x2c>)
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	f1c2 0238 	rsb	r2, r2, #56	; 0x38
 8007324:	619a      	str	r2, [r3, #24]

	return uxReturn;
 8007326:	687b      	ldr	r3, [r7, #4]
}
 8007328:	4618      	mov	r0, r3
 800732a:	370c      	adds	r7, #12
 800732c:	46bd      	mov	sp, r7
 800732e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007332:	4770      	bx	lr
 8007334:	200006e8 	.word	0x200006e8

08007338 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8007338:	b580      	push	{r7, lr}
 800733a:	b086      	sub	sp, #24
 800733c:	af00      	add	r7, sp, #0
 800733e:	60f8      	str	r0, [r7, #12]
 8007340:	60b9      	str	r1, [r7, #8]
 8007342:	607a      	str	r2, [r7, #4]
 8007344:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8007346:	f000 ffa5 	bl	8008294 <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800734a:	4b29      	ldr	r3, [pc, #164]	; (80073f0 <xTaskNotifyWait+0xb8>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007352:	b2db      	uxtb	r3, r3
 8007354:	2b02      	cmp	r3, #2
 8007356:	d01c      	beq.n	8007392 <xTaskNotifyWait+0x5a>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8007358:	4b25      	ldr	r3, [pc, #148]	; (80073f0 <xTaskNotifyWait+0xb8>)
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	43d2      	mvns	r2, r2
 8007364:	400a      	ands	r2, r1
 8007366:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800736a:	4b21      	ldr	r3, [pc, #132]	; (80073f0 <xTaskNotifyWait+0xb8>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	2201      	movs	r2, #1
 8007370:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

				if( xTicksToWait > ( TickType_t ) 0 )
 8007374:	683b      	ldr	r3, [r7, #0]
 8007376:	2b00      	cmp	r3, #0
 8007378:	d00b      	beq.n	8007392 <xTaskNotifyWait+0x5a>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800737a:	2101      	movs	r1, #1
 800737c:	6838      	ldr	r0, [r7, #0]
 800737e:	f000 f9dd 	bl	800773c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8007382:	4b1c      	ldr	r3, [pc, #112]	; (80073f4 <xTaskNotifyWait+0xbc>)
 8007384:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007388:	601a      	str	r2, [r3, #0]
 800738a:	f3bf 8f4f 	dsb	sy
 800738e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007392:	f000 ffaf 	bl	80082f4 <vPortExitCritical>

		taskENTER_CRITICAL();
 8007396:	f000 ff7d 	bl	8008294 <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d005      	beq.n	80073ac <xTaskNotifyWait+0x74>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 80073a0:	4b13      	ldr	r3, [pc, #76]	; (80073f0 <xTaskNotifyWait+0xb8>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80073ac:	4b10      	ldr	r3, [pc, #64]	; (80073f0 <xTaskNotifyWait+0xb8>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	2b02      	cmp	r3, #2
 80073b8:	d002      	beq.n	80073c0 <xTaskNotifyWait+0x88>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80073ba:	2300      	movs	r3, #0
 80073bc:	617b      	str	r3, [r7, #20]
 80073be:	e00a      	b.n	80073d6 <xTaskNotifyWait+0x9e>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80073c0:	4b0b      	ldr	r3, [pc, #44]	; (80073f0 <xTaskNotifyWait+0xb8>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	f8d3 10b4 	ldr.w	r1, [r3, #180]	; 0xb4
 80073c8:	68ba      	ldr	r2, [r7, #8]
 80073ca:	43d2      	mvns	r2, r2
 80073cc:	400a      	ands	r2, r1
 80073ce:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
				xReturn = pdTRUE;
 80073d2:	2301      	movs	r3, #1
 80073d4:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80073d6:	4b06      	ldr	r3, [pc, #24]	; (80073f0 <xTaskNotifyWait+0xb8>)
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	2200      	movs	r2, #0
 80073dc:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
		}
		taskEXIT_CRITICAL();
 80073e0:	f000 ff88 	bl	80082f4 <vPortExitCritical>

		return xReturn;
 80073e4:	697b      	ldr	r3, [r7, #20]
	}
 80073e6:	4618      	mov	r0, r3
 80073e8:	3718      	adds	r7, #24
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}
 80073ee:	bf00      	nop
 80073f0:	200006e8 	.word	0x200006e8
 80073f4:	e000ed04 	.word	0xe000ed04

080073f8 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80073f8:	b580      	push	{r7, lr}
 80073fa:	b08a      	sub	sp, #40	; 0x28
 80073fc:	af00      	add	r7, sp, #0
 80073fe:	60f8      	str	r0, [r7, #12]
 8007400:	60b9      	str	r1, [r7, #8]
 8007402:	603b      	str	r3, [r7, #0]
 8007404:	4613      	mov	r3, r2
 8007406:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007408:	2301      	movs	r3, #1
 800740a:	627b      	str	r3, [r7, #36]	; 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	2b00      	cmp	r3, #0
 8007410:	d10a      	bne.n	8007428 <xTaskGenericNotify+0x30>
	__asm volatile
 8007412:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007416:	f383 8811 	msr	BASEPRI, r3
 800741a:	f3bf 8f6f 	isb	sy
 800741e:	f3bf 8f4f 	dsb	sy
 8007422:	61bb      	str	r3, [r7, #24]
}
 8007424:	bf00      	nop
 8007426:	e7fe      	b.n	8007426 <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 800742c:	f000 ff32 	bl	8008294 <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8007430:	683b      	ldr	r3, [r7, #0]
 8007432:	2b00      	cmp	r3, #0
 8007434:	d004      	beq.n	8007440 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007436:	6a3b      	ldr	r3, [r7, #32]
 8007438:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 800743c:	683b      	ldr	r3, [r7, #0]
 800743e:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007440:	6a3b      	ldr	r3, [r7, #32]
 8007442:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 8007446:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007448:	6a3b      	ldr	r3, [r7, #32]
 800744a:	2202      	movs	r2, #2
 800744c:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 8007450:	79fb      	ldrb	r3, [r7, #7]
 8007452:	2b04      	cmp	r3, #4
 8007454:	d82d      	bhi.n	80074b2 <xTaskGenericNotify+0xba>
 8007456:	a201      	add	r2, pc, #4	; (adr r2, 800745c <xTaskGenericNotify+0x64>)
 8007458:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800745c:	080074d5 	.word	0x080074d5
 8007460:	08007471 	.word	0x08007471
 8007464:	08007483 	.word	0x08007483
 8007468:	08007493 	.word	0x08007493
 800746c:	0800749d 	.word	0x0800749d
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8007470:	6a3b      	ldr	r3, [r7, #32]
 8007472:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	431a      	orrs	r2, r3
 800747a:	6a3b      	ldr	r3, [r7, #32]
 800747c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007480:	e02b      	b.n	80074da <xTaskGenericNotify+0xe2>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8007482:	6a3b      	ldr	r3, [r7, #32]
 8007484:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007488:	1c5a      	adds	r2, r3, #1
 800748a:	6a3b      	ldr	r3, [r7, #32]
 800748c:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007490:	e023      	b.n	80074da <xTaskGenericNotify+0xe2>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007492:	6a3b      	ldr	r3, [r7, #32]
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800749a:	e01e      	b.n	80074da <xTaskGenericNotify+0xe2>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800749c:	7ffb      	ldrb	r3, [r7, #31]
 800749e:	2b02      	cmp	r3, #2
 80074a0:	d004      	beq.n	80074ac <xTaskGenericNotify+0xb4>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80074a2:	6a3b      	ldr	r3, [r7, #32]
 80074a4:	68ba      	ldr	r2, [r7, #8]
 80074a6:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80074aa:	e016      	b.n	80074da <xTaskGenericNotify+0xe2>
						xReturn = pdFAIL;
 80074ac:	2300      	movs	r3, #0
 80074ae:	627b      	str	r3, [r7, #36]	; 0x24
					break;
 80074b0:	e013      	b.n	80074da <xTaskGenericNotify+0xe2>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80074b2:	6a3b      	ldr	r3, [r7, #32]
 80074b4:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80074b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80074bc:	d00c      	beq.n	80074d8 <xTaskGenericNotify+0xe0>
	__asm volatile
 80074be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80074c2:	f383 8811 	msr	BASEPRI, r3
 80074c6:	f3bf 8f6f 	isb	sy
 80074ca:	f3bf 8f4f 	dsb	sy
 80074ce:	617b      	str	r3, [r7, #20]
}
 80074d0:	bf00      	nop
 80074d2:	e7fe      	b.n	80074d2 <xTaskGenericNotify+0xda>
					break;
 80074d4:	bf00      	nop
 80074d6:	e000      	b.n	80074da <xTaskGenericNotify+0xe2>

					break;
 80074d8:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80074da:	7ffb      	ldrb	r3, [r7, #31]
 80074dc:	2b01      	cmp	r3, #1
 80074de:	d13a      	bne.n	8007556 <xTaskGenericNotify+0x15e>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80074e0:	6a3b      	ldr	r3, [r7, #32]
 80074e2:	3304      	adds	r3, #4
 80074e4:	4618      	mov	r0, r3
 80074e6:	f7fe f95b 	bl	80057a0 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80074ea:	6a3b      	ldr	r3, [r7, #32]
 80074ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80074ee:	4b1d      	ldr	r3, [pc, #116]	; (8007564 <xTaskGenericNotify+0x16c>)
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	429a      	cmp	r2, r3
 80074f4:	d903      	bls.n	80074fe <xTaskGenericNotify+0x106>
 80074f6:	6a3b      	ldr	r3, [r7, #32]
 80074f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074fa:	4a1a      	ldr	r2, [pc, #104]	; (8007564 <xTaskGenericNotify+0x16c>)
 80074fc:	6013      	str	r3, [r2, #0]
 80074fe:	6a3b      	ldr	r3, [r7, #32]
 8007500:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007502:	4613      	mov	r3, r2
 8007504:	009b      	lsls	r3, r3, #2
 8007506:	4413      	add	r3, r2
 8007508:	009b      	lsls	r3, r3, #2
 800750a:	4a17      	ldr	r2, [pc, #92]	; (8007568 <xTaskGenericNotify+0x170>)
 800750c:	441a      	add	r2, r3
 800750e:	6a3b      	ldr	r3, [r7, #32]
 8007510:	3304      	adds	r3, #4
 8007512:	4619      	mov	r1, r3
 8007514:	4610      	mov	r0, r2
 8007516:	f7fe f8e6 	bl	80056e6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 800751a:	6a3b      	ldr	r3, [r7, #32]
 800751c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800751e:	2b00      	cmp	r3, #0
 8007520:	d00a      	beq.n	8007538 <xTaskGenericNotify+0x140>
	__asm volatile
 8007522:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007526:	f383 8811 	msr	BASEPRI, r3
 800752a:	f3bf 8f6f 	isb	sy
 800752e:	f3bf 8f4f 	dsb	sy
 8007532:	613b      	str	r3, [r7, #16]
}
 8007534:	bf00      	nop
 8007536:	e7fe      	b.n	8007536 <xTaskGenericNotify+0x13e>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007538:	6a3b      	ldr	r3, [r7, #32]
 800753a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800753c:	4b0b      	ldr	r3, [pc, #44]	; (800756c <xTaskGenericNotify+0x174>)
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007542:	429a      	cmp	r2, r3
 8007544:	d907      	bls.n	8007556 <xTaskGenericNotify+0x15e>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007546:	4b0a      	ldr	r3, [pc, #40]	; (8007570 <xTaskGenericNotify+0x178>)
 8007548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800754c:	601a      	str	r2, [r3, #0]
 800754e:	f3bf 8f4f 	dsb	sy
 8007552:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8007556:	f000 fecd 	bl	80082f4 <vPortExitCritical>

		return xReturn;
 800755a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 800755c:	4618      	mov	r0, r3
 800755e:	3728      	adds	r7, #40	; 0x28
 8007560:	46bd      	mov	sp, r7
 8007562:	bd80      	pop	{r7, pc}
 8007564:	20000bc4 	.word	0x20000bc4
 8007568:	200006ec 	.word	0x200006ec
 800756c:	200006e8 	.word	0x200006e8
 8007570:	e000ed04 	.word	0xe000ed04

08007574 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007574:	b580      	push	{r7, lr}
 8007576:	b08e      	sub	sp, #56	; 0x38
 8007578:	af00      	add	r7, sp, #0
 800757a:	60f8      	str	r0, [r7, #12]
 800757c:	60b9      	str	r1, [r7, #8]
 800757e:	603b      	str	r3, [r7, #0]
 8007580:	4613      	mov	r3, r2
 8007582:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8007584:	2301      	movs	r3, #1
 8007586:	637b      	str	r3, [r7, #52]	; 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d10a      	bne.n	80075a4 <xTaskGenericNotifyFromISR+0x30>
	__asm volatile
 800758e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007592:	f383 8811 	msr	BASEPRI, r3
 8007596:	f3bf 8f6f 	isb	sy
 800759a:	f3bf 8f4f 	dsb	sy
 800759e:	627b      	str	r3, [r7, #36]	; 0x24
}
 80075a0:	bf00      	nop
 80075a2:	e7fe      	b.n	80075a2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80075a4:	f000 ff58 	bl	8008458 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	633b      	str	r3, [r7, #48]	; 0x30
	__asm volatile
 80075ac:	f3ef 8211 	mrs	r2, BASEPRI
 80075b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075b4:	f383 8811 	msr	BASEPRI, r3
 80075b8:	f3bf 8f6f 	isb	sy
 80075bc:	f3bf 8f4f 	dsb	sy
 80075c0:	623a      	str	r2, [r7, #32]
 80075c2:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80075c4:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80075c6:	62fb      	str	r3, [r7, #44]	; 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80075c8:	683b      	ldr	r3, [r7, #0]
 80075ca:	2b00      	cmp	r3, #0
 80075cc:	d004      	beq.n	80075d8 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80075ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075d0:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80075d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075da:	f893 30b8 	ldrb.w	r3, [r3, #184]	; 0xb8
 80075de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80075e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80075e4:	2202      	movs	r2, #2
 80075e6:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8

			switch( eAction )
 80075ea:	79fb      	ldrb	r3, [r7, #7]
 80075ec:	2b04      	cmp	r3, #4
 80075ee:	d82f      	bhi.n	8007650 <xTaskGenericNotifyFromISR+0xdc>
 80075f0:	a201      	add	r2, pc, #4	; (adr r2, 80075f8 <xTaskGenericNotifyFromISR+0x84>)
 80075f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80075f6:	bf00      	nop
 80075f8:	08007673 	.word	0x08007673
 80075fc:	0800760d 	.word	0x0800760d
 8007600:	0800761f 	.word	0x0800761f
 8007604:	0800762f 	.word	0x0800762f
 8007608:	08007639 	.word	0x08007639
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800760c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800760e:	f8d3 20b4 	ldr.w	r2, [r3, #180]	; 0xb4
 8007612:	68bb      	ldr	r3, [r7, #8]
 8007614:	431a      	orrs	r2, r3
 8007616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007618:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800761c:	e02c      	b.n	8007678 <xTaskGenericNotifyFromISR+0x104>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800761e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007620:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007624:	1c5a      	adds	r2, r3, #1
 8007626:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007628:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 800762c:	e024      	b.n	8007678 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800762e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007630:	68ba      	ldr	r2, [r7, #8]
 8007632:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					break;
 8007636:	e01f      	b.n	8007678 <xTaskGenericNotifyFromISR+0x104>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8007638:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800763c:	2b02      	cmp	r3, #2
 800763e:	d004      	beq.n	800764a <xTaskGenericNotifyFromISR+0xd6>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007640:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007642:	68ba      	ldr	r2, [r7, #8]
 8007644:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8007648:	e016      	b.n	8007678 <xTaskGenericNotifyFromISR+0x104>
						xReturn = pdFAIL;
 800764a:	2300      	movs	r3, #0
 800764c:	637b      	str	r3, [r7, #52]	; 0x34
					break;
 800764e:	e013      	b.n	8007678 <xTaskGenericNotifyFromISR+0x104>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007650:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007652:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8007656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800765a:	d00c      	beq.n	8007676 <xTaskGenericNotifyFromISR+0x102>
	__asm volatile
 800765c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007660:	f383 8811 	msr	BASEPRI, r3
 8007664:	f3bf 8f6f 	isb	sy
 8007668:	f3bf 8f4f 	dsb	sy
 800766c:	61bb      	str	r3, [r7, #24]
}
 800766e:	bf00      	nop
 8007670:	e7fe      	b.n	8007670 <xTaskGenericNotifyFromISR+0xfc>
					break;
 8007672:	bf00      	nop
 8007674:	e000      	b.n	8007678 <xTaskGenericNotifyFromISR+0x104>
					break;
 8007676:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007678:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800767c:	2b01      	cmp	r3, #1
 800767e:	d146      	bne.n	800770e <xTaskGenericNotifyFromISR+0x19a>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007684:	2b00      	cmp	r3, #0
 8007686:	d00a      	beq.n	800769e <xTaskGenericNotifyFromISR+0x12a>
	__asm volatile
 8007688:	f04f 0350 	mov.w	r3, #80	; 0x50
 800768c:	f383 8811 	msr	BASEPRI, r3
 8007690:	f3bf 8f6f 	isb	sy
 8007694:	f3bf 8f4f 	dsb	sy
 8007698:	617b      	str	r3, [r7, #20]
}
 800769a:	bf00      	nop
 800769c:	e7fe      	b.n	800769c <xTaskGenericNotifyFromISR+0x128>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800769e:	4b21      	ldr	r3, [pc, #132]	; (8007724 <xTaskGenericNotifyFromISR+0x1b0>)
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d11d      	bne.n	80076e2 <xTaskGenericNotifyFromISR+0x16e>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80076a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a8:	3304      	adds	r3, #4
 80076aa:	4618      	mov	r0, r3
 80076ac:	f7fe f878 	bl	80057a0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80076b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076b4:	4b1c      	ldr	r3, [pc, #112]	; (8007728 <xTaskGenericNotifyFromISR+0x1b4>)
 80076b6:	681b      	ldr	r3, [r3, #0]
 80076b8:	429a      	cmp	r2, r3
 80076ba:	d903      	bls.n	80076c4 <xTaskGenericNotifyFromISR+0x150>
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076c0:	4a19      	ldr	r2, [pc, #100]	; (8007728 <xTaskGenericNotifyFromISR+0x1b4>)
 80076c2:	6013      	str	r3, [r2, #0]
 80076c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076c8:	4613      	mov	r3, r2
 80076ca:	009b      	lsls	r3, r3, #2
 80076cc:	4413      	add	r3, r2
 80076ce:	009b      	lsls	r3, r3, #2
 80076d0:	4a16      	ldr	r2, [pc, #88]	; (800772c <xTaskGenericNotifyFromISR+0x1b8>)
 80076d2:	441a      	add	r2, r3
 80076d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076d6:	3304      	adds	r3, #4
 80076d8:	4619      	mov	r1, r3
 80076da:	4610      	mov	r0, r2
 80076dc:	f7fe f803 	bl	80056e6 <vListInsertEnd>
 80076e0:	e005      	b.n	80076ee <xTaskGenericNotifyFromISR+0x17a>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80076e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076e4:	3318      	adds	r3, #24
 80076e6:	4619      	mov	r1, r3
 80076e8:	4811      	ldr	r0, [pc, #68]	; (8007730 <xTaskGenericNotifyFromISR+0x1bc>)
 80076ea:	f7fd fffc 	bl	80056e6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80076ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80076f2:	4b10      	ldr	r3, [pc, #64]	; (8007734 <xTaskGenericNotifyFromISR+0x1c0>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80076f8:	429a      	cmp	r2, r3
 80076fa:	d908      	bls.n	800770e <xTaskGenericNotifyFromISR+0x19a>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80076fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d002      	beq.n	8007708 <xTaskGenericNotifyFromISR+0x194>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007702:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007704:	2201      	movs	r2, #1
 8007706:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007708:	4b0b      	ldr	r3, [pc, #44]	; (8007738 <xTaskGenericNotifyFromISR+0x1c4>)
 800770a:	2201      	movs	r2, #1
 800770c:	601a      	str	r2, [r3, #0]
 800770e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007710:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	f383 8811 	msr	BASEPRI, r3
}
 8007718:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 800771a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
	}
 800771c:	4618      	mov	r0, r3
 800771e:	3738      	adds	r7, #56	; 0x38
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}
 8007724:	20000be4 	.word	0x20000be4
 8007728:	20000bc4 	.word	0x20000bc4
 800772c:	200006ec 	.word	0x200006ec
 8007730:	20000b7c 	.word	0x20000b7c
 8007734:	200006e8 	.word	0x200006e8
 8007738:	20000bd0 	.word	0x20000bd0

0800773c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b084      	sub	sp, #16
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
 8007744:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007746:	4b21      	ldr	r3, [pc, #132]	; (80077cc <prvAddCurrentTaskToDelayedList+0x90>)
 8007748:	681b      	ldr	r3, [r3, #0]
 800774a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800774c:	4b20      	ldr	r3, [pc, #128]	; (80077d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	3304      	adds	r3, #4
 8007752:	4618      	mov	r0, r3
 8007754:	f7fe f824 	bl	80057a0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800775e:	d10a      	bne.n	8007776 <prvAddCurrentTaskToDelayedList+0x3a>
 8007760:	683b      	ldr	r3, [r7, #0]
 8007762:	2b00      	cmp	r3, #0
 8007764:	d007      	beq.n	8007776 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007766:	4b1a      	ldr	r3, [pc, #104]	; (80077d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	3304      	adds	r3, #4
 800776c:	4619      	mov	r1, r3
 800776e:	4819      	ldr	r0, [pc, #100]	; (80077d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007770:	f7fd ffb9 	bl	80056e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007774:	e026      	b.n	80077c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	4413      	add	r3, r2
 800777c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800777e:	4b14      	ldr	r3, [pc, #80]	; (80077d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	68ba      	ldr	r2, [r7, #8]
 8007784:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	429a      	cmp	r2, r3
 800778c:	d209      	bcs.n	80077a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800778e:	4b12      	ldr	r3, [pc, #72]	; (80077d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007790:	681a      	ldr	r2, [r3, #0]
 8007792:	4b0f      	ldr	r3, [pc, #60]	; (80077d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	3304      	adds	r3, #4
 8007798:	4619      	mov	r1, r3
 800779a:	4610      	mov	r0, r2
 800779c:	f7fd ffc7 	bl	800572e <vListInsert>
}
 80077a0:	e010      	b.n	80077c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80077a2:	4b0e      	ldr	r3, [pc, #56]	; (80077dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80077a4:	681a      	ldr	r2, [r3, #0]
 80077a6:	4b0a      	ldr	r3, [pc, #40]	; (80077d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3304      	adds	r3, #4
 80077ac:	4619      	mov	r1, r3
 80077ae:	4610      	mov	r0, r2
 80077b0:	f7fd ffbd 	bl	800572e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80077b4:	4b0a      	ldr	r3, [pc, #40]	; (80077e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	68ba      	ldr	r2, [r7, #8]
 80077ba:	429a      	cmp	r2, r3
 80077bc:	d202      	bcs.n	80077c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80077be:	4a08      	ldr	r2, [pc, #32]	; (80077e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80077c0:	68bb      	ldr	r3, [r7, #8]
 80077c2:	6013      	str	r3, [r2, #0]
}
 80077c4:	bf00      	nop
 80077c6:	3710      	adds	r7, #16
 80077c8:	46bd      	mov	sp, r7
 80077ca:	bd80      	pop	{r7, pc}
 80077cc:	20000bc0 	.word	0x20000bc0
 80077d0:	200006e8 	.word	0x200006e8
 80077d4:	20000ba8 	.word	0x20000ba8
 80077d8:	20000b78 	.word	0x20000b78
 80077dc:	20000b74 	.word	0x20000b74
 80077e0:	20000bdc 	.word	0x20000bdc

080077e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b08a      	sub	sp, #40	; 0x28
 80077e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80077ea:	2300      	movs	r3, #0
 80077ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80077ee:	f000 fba1 	bl	8007f34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80077f2:	4b1c      	ldr	r3, [pc, #112]	; (8007864 <xTimerCreateTimerTask+0x80>)
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d021      	beq.n	800783e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80077fa:	2300      	movs	r3, #0
 80077fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80077fe:	2300      	movs	r3, #0
 8007800:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007802:	1d3a      	adds	r2, r7, #4
 8007804:	f107 0108 	add.w	r1, r7, #8
 8007808:	f107 030c 	add.w	r3, r7, #12
 800780c:	4618      	mov	r0, r3
 800780e:	f7fd fd35 	bl	800527c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007812:	6879      	ldr	r1, [r7, #4]
 8007814:	68bb      	ldr	r3, [r7, #8]
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	9202      	str	r2, [sp, #8]
 800781a:	9301      	str	r3, [sp, #4]
 800781c:	2302      	movs	r3, #2
 800781e:	9300      	str	r3, [sp, #0]
 8007820:	2300      	movs	r3, #0
 8007822:	460a      	mov	r2, r1
 8007824:	4910      	ldr	r1, [pc, #64]	; (8007868 <xTimerCreateTimerTask+0x84>)
 8007826:	4811      	ldr	r0, [pc, #68]	; (800786c <xTimerCreateTimerTask+0x88>)
 8007828:	f7fe fd8a 	bl	8006340 <xTaskCreateStatic>
 800782c:	4603      	mov	r3, r0
 800782e:	4a10      	ldr	r2, [pc, #64]	; (8007870 <xTimerCreateTimerTask+0x8c>)
 8007830:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007832:	4b0f      	ldr	r3, [pc, #60]	; (8007870 <xTimerCreateTimerTask+0x8c>)
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d001      	beq.n	800783e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800783a:	2301      	movs	r3, #1
 800783c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800783e:	697b      	ldr	r3, [r7, #20]
 8007840:	2b00      	cmp	r3, #0
 8007842:	d10a      	bne.n	800785a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007844:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007848:	f383 8811 	msr	BASEPRI, r3
 800784c:	f3bf 8f6f 	isb	sy
 8007850:	f3bf 8f4f 	dsb	sy
 8007854:	613b      	str	r3, [r7, #16]
}
 8007856:	bf00      	nop
 8007858:	e7fe      	b.n	8007858 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800785a:	697b      	ldr	r3, [r7, #20]
}
 800785c:	4618      	mov	r0, r3
 800785e:	3718      	adds	r7, #24
 8007860:	46bd      	mov	sp, r7
 8007862:	bd80      	pop	{r7, pc}
 8007864:	20000c18 	.word	0x20000c18
 8007868:	0800a8c8 	.word	0x0800a8c8
 800786c:	08007add 	.word	0x08007add
 8007870:	20000c1c 	.word	0x20000c1c

08007874 <xTimerCreate>:
	TimerHandle_t xTimerCreate(	const char * const pcTimerName,			/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
								const TickType_t xTimerPeriodInTicks,
								const UBaseType_t uxAutoReload,
								void * const pvTimerID,
								TimerCallbackFunction_t pxCallbackFunction )
	{
 8007874:	b580      	push	{r7, lr}
 8007876:	b088      	sub	sp, #32
 8007878:	af02      	add	r7, sp, #8
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]
 8007880:	603b      	str	r3, [r7, #0]
	Timer_t *pxNewTimer;

		pxNewTimer = ( Timer_t * ) pvPortMalloc( sizeof( Timer_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of Timer_t is always a pointer to the timer's mame. */
 8007882:	202c      	movs	r0, #44	; 0x2c
 8007884:	f000 fe28 	bl	80084d8 <pvPortMalloc>
 8007888:	6178      	str	r0, [r7, #20]

		if( pxNewTimer != NULL )
 800788a:	697b      	ldr	r3, [r7, #20]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d00d      	beq.n	80078ac <xTimerCreate+0x38>
		{
			/* Status is thus far zero as the timer is not created statically
			and has not been started.  The auto-reload bit may get set in
			prvInitialiseNewTimer. */
			pxNewTimer->ucStatus = 0x00;
 8007890:	697b      	ldr	r3, [r7, #20]
 8007892:	2200      	movs	r2, #0
 8007894:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007898:	697b      	ldr	r3, [r7, #20]
 800789a:	9301      	str	r3, [sp, #4]
 800789c:	6a3b      	ldr	r3, [r7, #32]
 800789e:	9300      	str	r3, [sp, #0]
 80078a0:	683b      	ldr	r3, [r7, #0]
 80078a2:	687a      	ldr	r2, [r7, #4]
 80078a4:	68b9      	ldr	r1, [r7, #8]
 80078a6:	68f8      	ldr	r0, [r7, #12]
 80078a8:	f000 f843 	bl	8007932 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 80078ac:	697b      	ldr	r3, [r7, #20]
	}
 80078ae:	4618      	mov	r0, r3
 80078b0:	3718      	adds	r7, #24
 80078b2:	46bd      	mov	sp, r7
 80078b4:	bd80      	pop	{r7, pc}

080078b6 <xTimerCreateStatic>:
										const TickType_t xTimerPeriodInTicks,
										const UBaseType_t uxAutoReload,
										void * const pvTimerID,
										TimerCallbackFunction_t pxCallbackFunction,
										StaticTimer_t *pxTimerBuffer )
	{
 80078b6:	b580      	push	{r7, lr}
 80078b8:	b08a      	sub	sp, #40	; 0x28
 80078ba:	af02      	add	r7, sp, #8
 80078bc:	60f8      	str	r0, [r7, #12]
 80078be:	60b9      	str	r1, [r7, #8]
 80078c0:	607a      	str	r2, [r7, #4]
 80078c2:	603b      	str	r3, [r7, #0]
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTimer_t equals the size of the real timer
			structure. */
			volatile size_t xSize = sizeof( StaticTimer_t );
 80078c4:	232c      	movs	r3, #44	; 0x2c
 80078c6:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( Timer_t ) );
 80078c8:	693b      	ldr	r3, [r7, #16]
 80078ca:	2b2c      	cmp	r3, #44	; 0x2c
 80078cc:	d00a      	beq.n	80078e4 <xTimerCreateStatic+0x2e>
	__asm volatile
 80078ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078d2:	f383 8811 	msr	BASEPRI, r3
 80078d6:	f3bf 8f6f 	isb	sy
 80078da:	f3bf 8f4f 	dsb	sy
 80078de:	61bb      	str	r3, [r7, #24]
}
 80078e0:	bf00      	nop
 80078e2:	e7fe      	b.n	80078e2 <xTimerCreateStatic+0x2c>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80078e4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */

		/* A pointer to a StaticTimer_t structure MUST be provided, use it. */
		configASSERT( pxTimerBuffer );
 80078e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078e8:	2b00      	cmp	r3, #0
 80078ea:	d10a      	bne.n	8007902 <xTimerCreateStatic+0x4c>
	__asm volatile
 80078ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80078f0:	f383 8811 	msr	BASEPRI, r3
 80078f4:	f3bf 8f6f 	isb	sy
 80078f8:	f3bf 8f4f 	dsb	sy
 80078fc:	617b      	str	r3, [r7, #20]
}
 80078fe:	bf00      	nop
 8007900:	e7fe      	b.n	8007900 <xTimerCreateStatic+0x4a>
		pxNewTimer = ( Timer_t * ) pxTimerBuffer; /*lint !e740 !e9087 StaticTimer_t is a pointer to a Timer_t, so guaranteed to be aligned and sized correctly (checked by an assert()), so this is safe. */
 8007902:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007904:	61fb      	str	r3, [r7, #28]

		if( pxNewTimer != NULL )
 8007906:	69fb      	ldr	r3, [r7, #28]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d00d      	beq.n	8007928 <xTimerCreateStatic+0x72>
		{
			/* Timers can be created statically or dynamically so note this
			timer was created statically in case it is later deleted.  The
			auto-reload bit may get set in prvInitialiseNewTimer(). */
			pxNewTimer->ucStatus = tmrSTATUS_IS_STATICALLY_ALLOCATED;
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	2202      	movs	r2, #2
 8007910:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28

			prvInitialiseNewTimer( pcTimerName, xTimerPeriodInTicks, uxAutoReload, pvTimerID, pxCallbackFunction, pxNewTimer );
 8007914:	69fb      	ldr	r3, [r7, #28]
 8007916:	9301      	str	r3, [sp, #4]
 8007918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800791a:	9300      	str	r3, [sp, #0]
 800791c:	683b      	ldr	r3, [r7, #0]
 800791e:	687a      	ldr	r2, [r7, #4]
 8007920:	68b9      	ldr	r1, [r7, #8]
 8007922:	68f8      	ldr	r0, [r7, #12]
 8007924:	f000 f805 	bl	8007932 <prvInitialiseNewTimer>
		}

		return pxNewTimer;
 8007928:	69fb      	ldr	r3, [r7, #28]
	}
 800792a:	4618      	mov	r0, r3
 800792c:	3720      	adds	r7, #32
 800792e:	46bd      	mov	sp, r7
 8007930:	bd80      	pop	{r7, pc}

08007932 <prvInitialiseNewTimer>:
									const TickType_t xTimerPeriodInTicks,
									const UBaseType_t uxAutoReload,
									void * const pvTimerID,
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer )
{
 8007932:	b580      	push	{r7, lr}
 8007934:	b086      	sub	sp, #24
 8007936:	af00      	add	r7, sp, #0
 8007938:	60f8      	str	r0, [r7, #12]
 800793a:	60b9      	str	r1, [r7, #8]
 800793c:	607a      	str	r2, [r7, #4]
 800793e:	603b      	str	r3, [r7, #0]
	/* 0 is not a valid value for xTimerPeriodInTicks. */
	configASSERT( ( xTimerPeriodInTicks > 0 ) );
 8007940:	68bb      	ldr	r3, [r7, #8]
 8007942:	2b00      	cmp	r3, #0
 8007944:	d10a      	bne.n	800795c <prvInitialiseNewTimer+0x2a>
	__asm volatile
 8007946:	f04f 0350 	mov.w	r3, #80	; 0x50
 800794a:	f383 8811 	msr	BASEPRI, r3
 800794e:	f3bf 8f6f 	isb	sy
 8007952:	f3bf 8f4f 	dsb	sy
 8007956:	617b      	str	r3, [r7, #20]
}
 8007958:	bf00      	nop
 800795a:	e7fe      	b.n	800795a <prvInitialiseNewTimer+0x28>

	if( pxNewTimer != NULL )
 800795c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800795e:	2b00      	cmp	r3, #0
 8007960:	d01e      	beq.n	80079a0 <prvInitialiseNewTimer+0x6e>
	{
		/* Ensure the infrastructure used by the timer service task has been
		created/initialised. */
		prvCheckForValidListAndQueue();
 8007962:	f000 fae7 	bl	8007f34 <prvCheckForValidListAndQueue>

		/* Initialise the timer structure members using the function
		parameters. */
		pxNewTimer->pcTimerName = pcTimerName;
 8007966:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007968:	68fa      	ldr	r2, [r7, #12]
 800796a:	601a      	str	r2, [r3, #0]
		pxNewTimer->xTimerPeriodInTicks = xTimerPeriodInTicks;
 800796c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800796e:	68ba      	ldr	r2, [r7, #8]
 8007970:	619a      	str	r2, [r3, #24]
		pxNewTimer->pvTimerID = pvTimerID;
 8007972:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007974:	683a      	ldr	r2, [r7, #0]
 8007976:	61da      	str	r2, [r3, #28]
		pxNewTimer->pxCallbackFunction = pxCallbackFunction;
 8007978:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800797a:	6a3a      	ldr	r2, [r7, #32]
 800797c:	621a      	str	r2, [r3, #32]
		vListInitialiseItem( &( pxNewTimer->xTimerListItem ) );
 800797e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007980:	3304      	adds	r3, #4
 8007982:	4618      	mov	r0, r3
 8007984:	f7fd fea2 	bl	80056cc <vListInitialiseItem>
		if( uxAutoReload != pdFALSE )
 8007988:	687b      	ldr	r3, [r7, #4]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d008      	beq.n	80079a0 <prvInitialiseNewTimer+0x6e>
		{
			pxNewTimer->ucStatus |= tmrSTATUS_IS_AUTORELOAD;
 800798e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007990:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007994:	f043 0304 	orr.w	r3, r3, #4
 8007998:	b2da      	uxtb	r2, r3
 800799a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800799c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		}
		traceTIMER_CREATE( pxNewTimer );
	}
}
 80079a0:	bf00      	nop
 80079a2:	3718      	adds	r7, #24
 80079a4:	46bd      	mov	sp, r7
 80079a6:	bd80      	pop	{r7, pc}

080079a8 <xTimerGenericCommand>:
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80079a8:	b580      	push	{r7, lr}
 80079aa:	b08a      	sub	sp, #40	; 0x28
 80079ac:	af00      	add	r7, sp, #0
 80079ae:	60f8      	str	r0, [r7, #12]
 80079b0:	60b9      	str	r1, [r7, #8]
 80079b2:	607a      	str	r2, [r7, #4]
 80079b4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80079b6:	2300      	movs	r3, #0
 80079b8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d10a      	bne.n	80079d6 <xTimerGenericCommand+0x2e>
	__asm volatile
 80079c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079c4:	f383 8811 	msr	BASEPRI, r3
 80079c8:	f3bf 8f6f 	isb	sy
 80079cc:	f3bf 8f4f 	dsb	sy
 80079d0:	623b      	str	r3, [r7, #32]
}
 80079d2:	bf00      	nop
 80079d4:	e7fe      	b.n	80079d4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80079d6:	4b1a      	ldr	r3, [pc, #104]	; (8007a40 <xTimerGenericCommand+0x98>)
 80079d8:	681b      	ldr	r3, [r3, #0]
 80079da:	2b00      	cmp	r3, #0
 80079dc:	d02a      	beq.n	8007a34 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80079de:	68bb      	ldr	r3, [r7, #8]
 80079e0:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	2b05      	cmp	r3, #5
 80079ee:	dc18      	bgt.n	8007a22 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80079f0:	f7ff fbfe 	bl	80071f0 <xTaskGetSchedulerState>
 80079f4:	4603      	mov	r3, r0
 80079f6:	2b02      	cmp	r3, #2
 80079f8:	d109      	bne.n	8007a0e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80079fa:	4b11      	ldr	r3, [pc, #68]	; (8007a40 <xTimerGenericCommand+0x98>)
 80079fc:	6818      	ldr	r0, [r3, #0]
 80079fe:	f107 0110 	add.w	r1, r7, #16
 8007a02:	2300      	movs	r3, #0
 8007a04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a06:	f7fe f833 	bl	8005a70 <xQueueGenericSend>
 8007a0a:	6278      	str	r0, [r7, #36]	; 0x24
 8007a0c:	e012      	b.n	8007a34 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007a0e:	4b0c      	ldr	r3, [pc, #48]	; (8007a40 <xTimerGenericCommand+0x98>)
 8007a10:	6818      	ldr	r0, [r3, #0]
 8007a12:	f107 0110 	add.w	r1, r7, #16
 8007a16:	2300      	movs	r3, #0
 8007a18:	2200      	movs	r2, #0
 8007a1a:	f7fe f829 	bl	8005a70 <xQueueGenericSend>
 8007a1e:	6278      	str	r0, [r7, #36]	; 0x24
 8007a20:	e008      	b.n	8007a34 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007a22:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <xTimerGenericCommand+0x98>)
 8007a24:	6818      	ldr	r0, [r3, #0]
 8007a26:	f107 0110 	add.w	r1, r7, #16
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	683a      	ldr	r2, [r7, #0]
 8007a2e:	f7fe f91d 	bl	8005c6c <xQueueGenericSendFromISR>
 8007a32:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007a34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8007a36:	4618      	mov	r0, r3
 8007a38:	3728      	adds	r7, #40	; 0x28
 8007a3a:	46bd      	mov	sp, r7
 8007a3c:	bd80      	pop	{r7, pc}
 8007a3e:	bf00      	nop
 8007a40:	20000c18 	.word	0x20000c18

08007a44 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b088      	sub	sp, #32
 8007a48:	af02      	add	r7, sp, #8
 8007a4a:	6078      	str	r0, [r7, #4]
 8007a4c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a4e:	4b22      	ldr	r3, [pc, #136]	; (8007ad8 <prvProcessExpiredTimer+0x94>)
 8007a50:	681b      	ldr	r3, [r3, #0]
 8007a52:	68db      	ldr	r3, [r3, #12]
 8007a54:	68db      	ldr	r3, [r3, #12]
 8007a56:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a58:	697b      	ldr	r3, [r7, #20]
 8007a5a:	3304      	adds	r3, #4
 8007a5c:	4618      	mov	r0, r3
 8007a5e:	f7fd fe9f 	bl	80057a0 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a62:	697b      	ldr	r3, [r7, #20]
 8007a64:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007a68:	f003 0304 	and.w	r3, r3, #4
 8007a6c:	2b00      	cmp	r3, #0
 8007a6e:	d022      	beq.n	8007ab6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007a70:	697b      	ldr	r3, [r7, #20]
 8007a72:	699a      	ldr	r2, [r3, #24]
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	18d1      	adds	r1, r2, r3
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	683a      	ldr	r2, [r7, #0]
 8007a7c:	6978      	ldr	r0, [r7, #20]
 8007a7e:	f000 f8d1 	bl	8007c24 <prvInsertTimerInActiveList>
 8007a82:	4603      	mov	r3, r0
 8007a84:	2b00      	cmp	r3, #0
 8007a86:	d01f      	beq.n	8007ac8 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a88:	2300      	movs	r3, #0
 8007a8a:	9300      	str	r3, [sp, #0]
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	687a      	ldr	r2, [r7, #4]
 8007a90:	2100      	movs	r1, #0
 8007a92:	6978      	ldr	r0, [r7, #20]
 8007a94:	f7ff ff88 	bl	80079a8 <xTimerGenericCommand>
 8007a98:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007a9a:	693b      	ldr	r3, [r7, #16]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	d113      	bne.n	8007ac8 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	60fb      	str	r3, [r7, #12]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007ab6:	697b      	ldr	r3, [r7, #20]
 8007ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007abc:	f023 0301 	bic.w	r3, r3, #1
 8007ac0:	b2da      	uxtb	r2, r3
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	6a1b      	ldr	r3, [r3, #32]
 8007acc:	6978      	ldr	r0, [r7, #20]
 8007ace:	4798      	blx	r3
}
 8007ad0:	bf00      	nop
 8007ad2:	3718      	adds	r7, #24
 8007ad4:	46bd      	mov	sp, r7
 8007ad6:	bd80      	pop	{r7, pc}
 8007ad8:	20000c10 	.word	0x20000c10

08007adc <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007adc:	b580      	push	{r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af00      	add	r7, sp, #0
 8007ae2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007ae4:	f107 0308 	add.w	r3, r7, #8
 8007ae8:	4618      	mov	r0, r3
 8007aea:	f000 f857 	bl	8007b9c <prvGetNextExpireTime>
 8007aee:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007af0:	68bb      	ldr	r3, [r7, #8]
 8007af2:	4619      	mov	r1, r3
 8007af4:	68f8      	ldr	r0, [r7, #12]
 8007af6:	f000 f803 	bl	8007b00 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007afa:	f000 f8d5 	bl	8007ca8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007afe:	e7f1      	b.n	8007ae4 <prvTimerTask+0x8>

08007b00 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
 8007b08:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007b0a:	f7fe feb3 	bl	8006874 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007b0e:	f107 0308 	add.w	r3, r7, #8
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 f866 	bl	8007be4 <prvSampleTimeNow>
 8007b18:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b00      	cmp	r3, #0
 8007b1e:	d130      	bne.n	8007b82 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d10a      	bne.n	8007b3c <prvProcessTimerOrBlockTask+0x3c>
 8007b26:	687a      	ldr	r2, [r7, #4]
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	429a      	cmp	r2, r3
 8007b2c:	d806      	bhi.n	8007b3c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007b2e:	f7fe feaf 	bl	8006890 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007b32:	68f9      	ldr	r1, [r7, #12]
 8007b34:	6878      	ldr	r0, [r7, #4]
 8007b36:	f7ff ff85 	bl	8007a44 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007b3a:	e024      	b.n	8007b86 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007b3c:	683b      	ldr	r3, [r7, #0]
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d008      	beq.n	8007b54 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007b42:	4b13      	ldr	r3, [pc, #76]	; (8007b90 <prvProcessTimerOrBlockTask+0x90>)
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d101      	bne.n	8007b50 <prvProcessTimerOrBlockTask+0x50>
 8007b4c:	2301      	movs	r3, #1
 8007b4e:	e000      	b.n	8007b52 <prvProcessTimerOrBlockTask+0x52>
 8007b50:	2300      	movs	r3, #0
 8007b52:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007b54:	4b0f      	ldr	r3, [pc, #60]	; (8007b94 <prvProcessTimerOrBlockTask+0x94>)
 8007b56:	6818      	ldr	r0, [r3, #0]
 8007b58:	687a      	ldr	r2, [r7, #4]
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	1ad3      	subs	r3, r2, r3
 8007b5e:	683a      	ldr	r2, [r7, #0]
 8007b60:	4619      	mov	r1, r3
 8007b62:	f7fe fbb9 	bl	80062d8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007b66:	f7fe fe93 	bl	8006890 <xTaskResumeAll>
 8007b6a:	4603      	mov	r3, r0
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d10a      	bne.n	8007b86 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007b70:	4b09      	ldr	r3, [pc, #36]	; (8007b98 <prvProcessTimerOrBlockTask+0x98>)
 8007b72:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007b76:	601a      	str	r2, [r3, #0]
 8007b78:	f3bf 8f4f 	dsb	sy
 8007b7c:	f3bf 8f6f 	isb	sy
}
 8007b80:	e001      	b.n	8007b86 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007b82:	f7fe fe85 	bl	8006890 <xTaskResumeAll>
}
 8007b86:	bf00      	nop
 8007b88:	3710      	adds	r7, #16
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	20000c14 	.word	0x20000c14
 8007b94:	20000c18 	.word	0x20000c18
 8007b98:	e000ed04 	.word	0xe000ed04

08007b9c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007ba4:	4b0e      	ldr	r3, [pc, #56]	; (8007be0 <prvGetNextExpireTime+0x44>)
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d101      	bne.n	8007bb2 <prvGetNextExpireTime+0x16>
 8007bae:	2201      	movs	r2, #1
 8007bb0:	e000      	b.n	8007bb4 <prvGetNextExpireTime+0x18>
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d105      	bne.n	8007bcc <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007bc0:	4b07      	ldr	r3, [pc, #28]	; (8007be0 <prvGetNextExpireTime+0x44>)
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	68db      	ldr	r3, [r3, #12]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	60fb      	str	r3, [r7, #12]
 8007bca:	e001      	b.n	8007bd0 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007bcc:	2300      	movs	r3, #0
 8007bce:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007bd0:	68fb      	ldr	r3, [r7, #12]
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3714      	adds	r7, #20
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bdc:	4770      	bx	lr
 8007bde:	bf00      	nop
 8007be0:	20000c10 	.word	0x20000c10

08007be4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b084      	sub	sp, #16
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007bec:	f7fe feee 	bl	80069cc <xTaskGetTickCount>
 8007bf0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007bf2:	4b0b      	ldr	r3, [pc, #44]	; (8007c20 <prvSampleTimeNow+0x3c>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	68fa      	ldr	r2, [r7, #12]
 8007bf8:	429a      	cmp	r2, r3
 8007bfa:	d205      	bcs.n	8007c08 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007bfc:	f000 f936 	bl	8007e6c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2201      	movs	r2, #1
 8007c04:	601a      	str	r2, [r3, #0]
 8007c06:	e002      	b.n	8007c0e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007c0e:	4a04      	ldr	r2, [pc, #16]	; (8007c20 <prvSampleTimeNow+0x3c>)
 8007c10:	68fb      	ldr	r3, [r7, #12]
 8007c12:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007c14:	68fb      	ldr	r3, [r7, #12]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000c20 	.word	0x20000c20

08007c24 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007c24:	b580      	push	{r7, lr}
 8007c26:	b086      	sub	sp, #24
 8007c28:	af00      	add	r7, sp, #0
 8007c2a:	60f8      	str	r0, [r7, #12]
 8007c2c:	60b9      	str	r1, [r7, #8]
 8007c2e:	607a      	str	r2, [r7, #4]
 8007c30:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007c32:	2300      	movs	r3, #0
 8007c34:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	68ba      	ldr	r2, [r7, #8]
 8007c3a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	68fa      	ldr	r2, [r7, #12]
 8007c40:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007c42:	68ba      	ldr	r2, [r7, #8]
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	429a      	cmp	r2, r3
 8007c48:	d812      	bhi.n	8007c70 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007c4a:	687a      	ldr	r2, [r7, #4]
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	1ad2      	subs	r2, r2, r3
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	699b      	ldr	r3, [r3, #24]
 8007c54:	429a      	cmp	r2, r3
 8007c56:	d302      	bcc.n	8007c5e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007c58:	2301      	movs	r3, #1
 8007c5a:	617b      	str	r3, [r7, #20]
 8007c5c:	e01b      	b.n	8007c96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007c5e:	4b10      	ldr	r3, [pc, #64]	; (8007ca0 <prvInsertTimerInActiveList+0x7c>)
 8007c60:	681a      	ldr	r2, [r3, #0]
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	3304      	adds	r3, #4
 8007c66:	4619      	mov	r1, r3
 8007c68:	4610      	mov	r0, r2
 8007c6a:	f7fd fd60 	bl	800572e <vListInsert>
 8007c6e:	e012      	b.n	8007c96 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007c70:	687a      	ldr	r2, [r7, #4]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	429a      	cmp	r2, r3
 8007c76:	d206      	bcs.n	8007c86 <prvInsertTimerInActiveList+0x62>
 8007c78:	68ba      	ldr	r2, [r7, #8]
 8007c7a:	683b      	ldr	r3, [r7, #0]
 8007c7c:	429a      	cmp	r2, r3
 8007c7e:	d302      	bcc.n	8007c86 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007c80:	2301      	movs	r3, #1
 8007c82:	617b      	str	r3, [r7, #20]
 8007c84:	e007      	b.n	8007c96 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007c86:	4b07      	ldr	r3, [pc, #28]	; (8007ca4 <prvInsertTimerInActiveList+0x80>)
 8007c88:	681a      	ldr	r2, [r3, #0]
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	3304      	adds	r3, #4
 8007c8e:	4619      	mov	r1, r3
 8007c90:	4610      	mov	r0, r2
 8007c92:	f7fd fd4c 	bl	800572e <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007c96:	697b      	ldr	r3, [r7, #20]
}
 8007c98:	4618      	mov	r0, r3
 8007c9a:	3718      	adds	r7, #24
 8007c9c:	46bd      	mov	sp, r7
 8007c9e:	bd80      	pop	{r7, pc}
 8007ca0:	20000c14 	.word	0x20000c14
 8007ca4:	20000c10 	.word	0x20000c10

08007ca8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b08e      	sub	sp, #56	; 0x38
 8007cac:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007cae:	e0ca      	b.n	8007e46 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	da18      	bge.n	8007ce8 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007cb6:	1d3b      	adds	r3, r7, #4
 8007cb8:	3304      	adds	r3, #4
 8007cba:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d10a      	bne.n	8007cd8 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8007cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cc6:	f383 8811 	msr	BASEPRI, r3
 8007cca:	f3bf 8f6f 	isb	sy
 8007cce:	f3bf 8f4f 	dsb	sy
 8007cd2:	61fb      	str	r3, [r7, #28]
}
 8007cd4:	bf00      	nop
 8007cd6:	e7fe      	b.n	8007cd6 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007cd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007cde:	6850      	ldr	r0, [r2, #4]
 8007ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007ce2:	6892      	ldr	r2, [r2, #8]
 8007ce4:	4611      	mov	r1, r2
 8007ce6:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	f2c0 80aa 	blt.w	8007e44 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007cf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cf6:	695b      	ldr	r3, [r3, #20]
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d004      	beq.n	8007d06 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007cfe:	3304      	adds	r3, #4
 8007d00:	4618      	mov	r0, r3
 8007d02:	f7fd fd4d 	bl	80057a0 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d06:	463b      	mov	r3, r7
 8007d08:	4618      	mov	r0, r3
 8007d0a:	f7ff ff6b 	bl	8007be4 <prvSampleTimeNow>
 8007d0e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	2b09      	cmp	r3, #9
 8007d14:	f200 8097 	bhi.w	8007e46 <prvProcessReceivedCommands+0x19e>
 8007d18:	a201      	add	r2, pc, #4	; (adr r2, 8007d20 <prvProcessReceivedCommands+0x78>)
 8007d1a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007d1e:	bf00      	nop
 8007d20:	08007d49 	.word	0x08007d49
 8007d24:	08007d49 	.word	0x08007d49
 8007d28:	08007d49 	.word	0x08007d49
 8007d2c:	08007dbd 	.word	0x08007dbd
 8007d30:	08007dd1 	.word	0x08007dd1
 8007d34:	08007e1b 	.word	0x08007e1b
 8007d38:	08007d49 	.word	0x08007d49
 8007d3c:	08007d49 	.word	0x08007d49
 8007d40:	08007dbd 	.word	0x08007dbd
 8007d44:	08007dd1 	.word	0x08007dd1
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007d48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d4a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d4e:	f043 0301 	orr.w	r3, r3, #1
 8007d52:	b2da      	uxtb	r2, r3
 8007d54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d56:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007d5a:	68ba      	ldr	r2, [r7, #8]
 8007d5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d5e:	699b      	ldr	r3, [r3, #24]
 8007d60:	18d1      	adds	r1, r2, r3
 8007d62:	68bb      	ldr	r3, [r7, #8]
 8007d64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007d66:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d68:	f7ff ff5c 	bl	8007c24 <prvInsertTimerInActiveList>
 8007d6c:	4603      	mov	r3, r0
 8007d6e:	2b00      	cmp	r3, #0
 8007d70:	d069      	beq.n	8007e46 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d78:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007d7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d7c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007d80:	f003 0304 	and.w	r3, r3, #4
 8007d84:	2b00      	cmp	r3, #0
 8007d86:	d05e      	beq.n	8007e46 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007d88:	68ba      	ldr	r2, [r7, #8]
 8007d8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	441a      	add	r2, r3
 8007d90:	2300      	movs	r3, #0
 8007d92:	9300      	str	r3, [sp, #0]
 8007d94:	2300      	movs	r3, #0
 8007d96:	2100      	movs	r1, #0
 8007d98:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007d9a:	f7ff fe05 	bl	80079a8 <xTimerGenericCommand>
 8007d9e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007da0:	6a3b      	ldr	r3, [r7, #32]
 8007da2:	2b00      	cmp	r3, #0
 8007da4:	d14f      	bne.n	8007e46 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	61bb      	str	r3, [r7, #24]
}
 8007db8:	bf00      	nop
 8007dba:	e7fe      	b.n	8007dba <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007dbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dc2:	f023 0301 	bic.w	r3, r3, #1
 8007dc6:	b2da      	uxtb	r2, r3
 8007dc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007dce:	e03a      	b.n	8007e46 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007dd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dd2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007dd6:	f043 0301 	orr.w	r3, r3, #1
 8007dda:	b2da      	uxtb	r2, r3
 8007ddc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dde:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007de2:	68ba      	ldr	r2, [r7, #8]
 8007de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007de6:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007de8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007dea:	699b      	ldr	r3, [r3, #24]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d10a      	bne.n	8007e06 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007df4:	f383 8811 	msr	BASEPRI, r3
 8007df8:	f3bf 8f6f 	isb	sy
 8007dfc:	f3bf 8f4f 	dsb	sy
 8007e00:	617b      	str	r3, [r7, #20]
}
 8007e02:	bf00      	nop
 8007e04:	e7fe      	b.n	8007e04 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007e06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e08:	699a      	ldr	r2, [r3, #24]
 8007e0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e0c:	18d1      	adds	r1, r2, r3
 8007e0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007e12:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e14:	f7ff ff06 	bl	8007c24 <prvInsertTimerInActiveList>
					break;
 8007e18:	e015      	b.n	8007e46 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007e1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e1c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e20:	f003 0302 	and.w	r3, r3, #2
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d103      	bne.n	8007e30 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8007e28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007e2a:	f000 fc21 	bl	8008670 <vPortFree>
 8007e2e:	e00a      	b.n	8007e46 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e32:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007e36:	f023 0301 	bic.w	r3, r3, #1
 8007e3a:	b2da      	uxtb	r2, r3
 8007e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007e3e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8007e42:	e000      	b.n	8007e46 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8007e44:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007e46:	4b08      	ldr	r3, [pc, #32]	; (8007e68 <prvProcessReceivedCommands+0x1c0>)
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	1d39      	adds	r1, r7, #4
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	4618      	mov	r0, r3
 8007e50:	f7fd ffa8 	bl	8005da4 <xQueueReceive>
 8007e54:	4603      	mov	r3, r0
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	f47f af2a 	bne.w	8007cb0 <prvProcessReceivedCommands+0x8>
	}
}
 8007e5c:	bf00      	nop
 8007e5e:	bf00      	nop
 8007e60:	3730      	adds	r7, #48	; 0x30
 8007e62:	46bd      	mov	sp, r7
 8007e64:	bd80      	pop	{r7, pc}
 8007e66:	bf00      	nop
 8007e68:	20000c18 	.word	0x20000c18

08007e6c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007e6c:	b580      	push	{r7, lr}
 8007e6e:	b088      	sub	sp, #32
 8007e70:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007e72:	e048      	b.n	8007f06 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e74:	4b2d      	ldr	r3, [pc, #180]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	68db      	ldr	r3, [r3, #12]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e7e:	4b2b      	ldr	r3, [pc, #172]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	68db      	ldr	r3, [r3, #12]
 8007e84:	68db      	ldr	r3, [r3, #12]
 8007e86:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	3304      	adds	r3, #4
 8007e8c:	4618      	mov	r0, r3
 8007e8e:	f7fd fc87 	bl	80057a0 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	6a1b      	ldr	r3, [r3, #32]
 8007e96:	68f8      	ldr	r0, [r7, #12]
 8007e98:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007e9a:	68fb      	ldr	r3, [r7, #12]
 8007e9c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007ea0:	f003 0304 	and.w	r3, r3, #4
 8007ea4:	2b00      	cmp	r3, #0
 8007ea6:	d02e      	beq.n	8007f06 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	699b      	ldr	r3, [r3, #24]
 8007eac:	693a      	ldr	r2, [r7, #16]
 8007eae:	4413      	add	r3, r2
 8007eb0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007eb2:	68ba      	ldr	r2, [r7, #8]
 8007eb4:	693b      	ldr	r3, [r7, #16]
 8007eb6:	429a      	cmp	r2, r3
 8007eb8:	d90e      	bls.n	8007ed8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	68ba      	ldr	r2, [r7, #8]
 8007ebe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	68fa      	ldr	r2, [r7, #12]
 8007ec4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007ec6:	4b19      	ldr	r3, [pc, #100]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	f7fd fc2c 	bl	800572e <vListInsert>
 8007ed6:	e016      	b.n	8007f06 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007ed8:	2300      	movs	r3, #0
 8007eda:	9300      	str	r3, [sp, #0]
 8007edc:	2300      	movs	r3, #0
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	2100      	movs	r1, #0
 8007ee2:	68f8      	ldr	r0, [r7, #12]
 8007ee4:	f7ff fd60 	bl	80079a8 <xTimerGenericCommand>
 8007ee8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	2b00      	cmp	r3, #0
 8007eee:	d10a      	bne.n	8007f06 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007ef0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ef4:	f383 8811 	msr	BASEPRI, r3
 8007ef8:	f3bf 8f6f 	isb	sy
 8007efc:	f3bf 8f4f 	dsb	sy
 8007f00:	603b      	str	r3, [r7, #0]
}
 8007f02:	bf00      	nop
 8007f04:	e7fe      	b.n	8007f04 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007f06:	4b09      	ldr	r3, [pc, #36]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d1b1      	bne.n	8007e74 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007f10:	4b06      	ldr	r3, [pc, #24]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007f16:	4b06      	ldr	r3, [pc, #24]	; (8007f30 <prvSwitchTimerLists+0xc4>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	4a04      	ldr	r2, [pc, #16]	; (8007f2c <prvSwitchTimerLists+0xc0>)
 8007f1c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007f1e:	4a04      	ldr	r2, [pc, #16]	; (8007f30 <prvSwitchTimerLists+0xc4>)
 8007f20:	697b      	ldr	r3, [r7, #20]
 8007f22:	6013      	str	r3, [r2, #0]
}
 8007f24:	bf00      	nop
 8007f26:	3718      	adds	r7, #24
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	bd80      	pop	{r7, pc}
 8007f2c:	20000c10 	.word	0x20000c10
 8007f30:	20000c14 	.word	0x20000c14

08007f34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007f34:	b580      	push	{r7, lr}
 8007f36:	b082      	sub	sp, #8
 8007f38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007f3a:	f000 f9ab 	bl	8008294 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007f3e:	4b15      	ldr	r3, [pc, #84]	; (8007f94 <prvCheckForValidListAndQueue+0x60>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	2b00      	cmp	r3, #0
 8007f44:	d120      	bne.n	8007f88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007f46:	4814      	ldr	r0, [pc, #80]	; (8007f98 <prvCheckForValidListAndQueue+0x64>)
 8007f48:	f7fd fba0 	bl	800568c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007f4c:	4813      	ldr	r0, [pc, #76]	; (8007f9c <prvCheckForValidListAndQueue+0x68>)
 8007f4e:	f7fd fb9d 	bl	800568c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007f52:	4b13      	ldr	r3, [pc, #76]	; (8007fa0 <prvCheckForValidListAndQueue+0x6c>)
 8007f54:	4a10      	ldr	r2, [pc, #64]	; (8007f98 <prvCheckForValidListAndQueue+0x64>)
 8007f56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007f58:	4b12      	ldr	r3, [pc, #72]	; (8007fa4 <prvCheckForValidListAndQueue+0x70>)
 8007f5a:	4a10      	ldr	r2, [pc, #64]	; (8007f9c <prvCheckForValidListAndQueue+0x68>)
 8007f5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007f5e:	2300      	movs	r3, #0
 8007f60:	9300      	str	r3, [sp, #0]
 8007f62:	4b11      	ldr	r3, [pc, #68]	; (8007fa8 <prvCheckForValidListAndQueue+0x74>)
 8007f64:	4a11      	ldr	r2, [pc, #68]	; (8007fac <prvCheckForValidListAndQueue+0x78>)
 8007f66:	2110      	movs	r1, #16
 8007f68:	200a      	movs	r0, #10
 8007f6a:	f7fd fcab 	bl	80058c4 <xQueueGenericCreateStatic>
 8007f6e:	4603      	mov	r3, r0
 8007f70:	4a08      	ldr	r2, [pc, #32]	; (8007f94 <prvCheckForValidListAndQueue+0x60>)
 8007f72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007f74:	4b07      	ldr	r3, [pc, #28]	; (8007f94 <prvCheckForValidListAndQueue+0x60>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007f7c:	4b05      	ldr	r3, [pc, #20]	; (8007f94 <prvCheckForValidListAndQueue+0x60>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	490b      	ldr	r1, [pc, #44]	; (8007fb0 <prvCheckForValidListAndQueue+0x7c>)
 8007f82:	4618      	mov	r0, r3
 8007f84:	f7fe f97e 	bl	8006284 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007f88:	f000 f9b4 	bl	80082f4 <vPortExitCritical>
}
 8007f8c:	bf00      	nop
 8007f8e:	46bd      	mov	sp, r7
 8007f90:	bd80      	pop	{r7, pc}
 8007f92:	bf00      	nop
 8007f94:	20000c18 	.word	0x20000c18
 8007f98:	20000be8 	.word	0x20000be8
 8007f9c:	20000bfc 	.word	0x20000bfc
 8007fa0:	20000c10 	.word	0x20000c10
 8007fa4:	20000c14 	.word	0x20000c14
 8007fa8:	20000cc4 	.word	0x20000cc4
 8007fac:	20000c24 	.word	0x20000c24
 8007fb0:	0800a8d0 	.word	0x0800a8d0

08007fb4 <pvTimerGetTimerID>:
	return xReturn;
} /*lint !e818 Can't be pointer to const due to the typedef. */
/*-----------------------------------------------------------*/

void *pvTimerGetTimerID( const TimerHandle_t xTimer )
{
 8007fb4:	b580      	push	{r7, lr}
 8007fb6:	b086      	sub	sp, #24
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	6078      	str	r0, [r7, #4]
Timer_t * const pxTimer = xTimer;
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	617b      	str	r3, [r7, #20]
void *pvReturn;

	configASSERT( xTimer );
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d10a      	bne.n	8007fdc <pvTimerGetTimerID+0x28>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	60fb      	str	r3, [r7, #12]
}
 8007fd8:	bf00      	nop
 8007fda:	e7fe      	b.n	8007fda <pvTimerGetTimerID+0x26>

	taskENTER_CRITICAL();
 8007fdc:	f000 f95a 	bl	8008294 <vPortEnterCritical>
	{
		pvReturn = pxTimer->pvTimerID;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	69db      	ldr	r3, [r3, #28]
 8007fe4:	613b      	str	r3, [r7, #16]
	}
	taskEXIT_CRITICAL();
 8007fe6:	f000 f985 	bl	80082f4 <vPortExitCritical>

	return pvReturn;
 8007fea:	693b      	ldr	r3, [r7, #16]
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	3718      	adds	r7, #24
 8007ff0:	46bd      	mov	sp, r7
 8007ff2:	bd80      	pop	{r7, pc}

08007ff4 <xTimerPendFunctionCallFromISR>:
/*-----------------------------------------------------------*/

#if( INCLUDE_xTimerPendFunctionCall == 1 )

	BaseType_t xTimerPendFunctionCallFromISR( PendedFunction_t xFunctionToPend, void *pvParameter1, uint32_t ulParameter2, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8007ff4:	b580      	push	{r7, lr}
 8007ff6:	b08a      	sub	sp, #40	; 0x28
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	60f8      	str	r0, [r7, #12]
 8007ffc:	60b9      	str	r1, [r7, #8]
 8007ffe:	607a      	str	r2, [r7, #4]
 8008000:	603b      	str	r3, [r7, #0]
	DaemonTaskMessage_t xMessage;
	BaseType_t xReturn;

		/* Complete the message with the function parameters and post it to the
		daemon task. */
		xMessage.xMessageID = tmrCOMMAND_EXECUTE_CALLBACK_FROM_ISR;
 8008002:	f06f 0301 	mvn.w	r3, #1
 8008006:	617b      	str	r3, [r7, #20]
		xMessage.u.xCallbackParameters.pxCallbackFunction = xFunctionToPend;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	61bb      	str	r3, [r7, #24]
		xMessage.u.xCallbackParameters.pvParameter1 = pvParameter1;
 800800c:	68bb      	ldr	r3, [r7, #8]
 800800e:	61fb      	str	r3, [r7, #28]
		xMessage.u.xCallbackParameters.ulParameter2 = ulParameter2;
 8008010:	687b      	ldr	r3, [r7, #4]
 8008012:	623b      	str	r3, [r7, #32]

		xReturn = xQueueSendFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8008014:	4b06      	ldr	r3, [pc, #24]	; (8008030 <xTimerPendFunctionCallFromISR+0x3c>)
 8008016:	6818      	ldr	r0, [r3, #0]
 8008018:	f107 0114 	add.w	r1, r7, #20
 800801c:	2300      	movs	r3, #0
 800801e:	683a      	ldr	r2, [r7, #0]
 8008020:	f7fd fe24 	bl	8005c6c <xQueueGenericSendFromISR>
 8008024:	6278      	str	r0, [r7, #36]	; 0x24

		tracePEND_FUNC_CALL_FROM_ISR( xFunctionToPend, pvParameter1, ulParameter2, xReturn );

		return xReturn;
 8008026:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	}
 8008028:	4618      	mov	r0, r3
 800802a:	3728      	adds	r7, #40	; 0x28
 800802c:	46bd      	mov	sp, r7
 800802e:	bd80      	pop	{r7, pc}
 8008030:	20000c18 	.word	0x20000c18

08008034 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	60f8      	str	r0, [r7, #12]
 800803c:	60b9      	str	r1, [r7, #8]
 800803e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008040:	68fb      	ldr	r3, [r7, #12]
 8008042:	3b04      	subs	r3, #4
 8008044:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800804c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800804e:	68fb      	ldr	r3, [r7, #12]
 8008050:	3b04      	subs	r3, #4
 8008052:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008054:	68bb      	ldr	r3, [r7, #8]
 8008056:	f023 0201 	bic.w	r2, r3, #1
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800805e:	68fb      	ldr	r3, [r7, #12]
 8008060:	3b04      	subs	r3, #4
 8008062:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008064:	4a0c      	ldr	r2, [pc, #48]	; (8008098 <pxPortInitialiseStack+0x64>)
 8008066:	68fb      	ldr	r3, [r7, #12]
 8008068:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	3b14      	subs	r3, #20
 800806e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008070:	687a      	ldr	r2, [r7, #4]
 8008072:	68fb      	ldr	r3, [r7, #12]
 8008074:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008076:	68fb      	ldr	r3, [r7, #12]
 8008078:	3b04      	subs	r3, #4
 800807a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	f06f 0202 	mvn.w	r2, #2
 8008082:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008084:	68fb      	ldr	r3, [r7, #12]
 8008086:	3b20      	subs	r3, #32
 8008088:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800808a:	68fb      	ldr	r3, [r7, #12]
}
 800808c:	4618      	mov	r0, r3
 800808e:	3714      	adds	r7, #20
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr
 8008098:	0800809d 	.word	0x0800809d

0800809c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800809c:	b480      	push	{r7}
 800809e:	b085      	sub	sp, #20
 80080a0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80080a2:	2300      	movs	r3, #0
 80080a4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80080a6:	4b12      	ldr	r3, [pc, #72]	; (80080f0 <prvTaskExitError+0x54>)
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80080ae:	d00a      	beq.n	80080c6 <prvTaskExitError+0x2a>
	__asm volatile
 80080b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080b4:	f383 8811 	msr	BASEPRI, r3
 80080b8:	f3bf 8f6f 	isb	sy
 80080bc:	f3bf 8f4f 	dsb	sy
 80080c0:	60fb      	str	r3, [r7, #12]
}
 80080c2:	bf00      	nop
 80080c4:	e7fe      	b.n	80080c4 <prvTaskExitError+0x28>
	__asm volatile
 80080c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ca:	f383 8811 	msr	BASEPRI, r3
 80080ce:	f3bf 8f6f 	isb	sy
 80080d2:	f3bf 8f4f 	dsb	sy
 80080d6:	60bb      	str	r3, [r7, #8]
}
 80080d8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80080da:	bf00      	nop
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2b00      	cmp	r3, #0
 80080e0:	d0fc      	beq.n	80080dc <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80080e2:	bf00      	nop
 80080e4:	bf00      	nop
 80080e6:	3714      	adds	r7, #20
 80080e8:	46bd      	mov	sp, r7
 80080ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ee:	4770      	bx	lr
 80080f0:	20000058 	.word	0x20000058
	...

08008100 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008100:	4b07      	ldr	r3, [pc, #28]	; (8008120 <pxCurrentTCBConst2>)
 8008102:	6819      	ldr	r1, [r3, #0]
 8008104:	6808      	ldr	r0, [r1, #0]
 8008106:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800810a:	f380 8809 	msr	PSP, r0
 800810e:	f3bf 8f6f 	isb	sy
 8008112:	f04f 0000 	mov.w	r0, #0
 8008116:	f380 8811 	msr	BASEPRI, r0
 800811a:	4770      	bx	lr
 800811c:	f3af 8000 	nop.w

08008120 <pxCurrentTCBConst2>:
 8008120:	200006e8 	.word	0x200006e8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008124:	bf00      	nop
 8008126:	bf00      	nop

08008128 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008128:	4808      	ldr	r0, [pc, #32]	; (800814c <prvPortStartFirstTask+0x24>)
 800812a:	6800      	ldr	r0, [r0, #0]
 800812c:	6800      	ldr	r0, [r0, #0]
 800812e:	f380 8808 	msr	MSP, r0
 8008132:	f04f 0000 	mov.w	r0, #0
 8008136:	f380 8814 	msr	CONTROL, r0
 800813a:	b662      	cpsie	i
 800813c:	b661      	cpsie	f
 800813e:	f3bf 8f4f 	dsb	sy
 8008142:	f3bf 8f6f 	isb	sy
 8008146:	df00      	svc	0
 8008148:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800814a:	bf00      	nop
 800814c:	e000ed08 	.word	0xe000ed08

08008150 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b086      	sub	sp, #24
 8008154:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008156:	4b46      	ldr	r3, [pc, #280]	; (8008270 <xPortStartScheduler+0x120>)
 8008158:	681b      	ldr	r3, [r3, #0]
 800815a:	4a46      	ldr	r2, [pc, #280]	; (8008274 <xPortStartScheduler+0x124>)
 800815c:	4293      	cmp	r3, r2
 800815e:	d10a      	bne.n	8008176 <xPortStartScheduler+0x26>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	613b      	str	r3, [r7, #16]
}
 8008172:	bf00      	nop
 8008174:	e7fe      	b.n	8008174 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008176:	4b3e      	ldr	r3, [pc, #248]	; (8008270 <xPortStartScheduler+0x120>)
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	4a3f      	ldr	r2, [pc, #252]	; (8008278 <xPortStartScheduler+0x128>)
 800817c:	4293      	cmp	r3, r2
 800817e:	d10a      	bne.n	8008196 <xPortStartScheduler+0x46>
	__asm volatile
 8008180:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008184:	f383 8811 	msr	BASEPRI, r3
 8008188:	f3bf 8f6f 	isb	sy
 800818c:	f3bf 8f4f 	dsb	sy
 8008190:	60fb      	str	r3, [r7, #12]
}
 8008192:	bf00      	nop
 8008194:	e7fe      	b.n	8008194 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008196:	4b39      	ldr	r3, [pc, #228]	; (800827c <xPortStartScheduler+0x12c>)
 8008198:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800819a:	697b      	ldr	r3, [r7, #20]
 800819c:	781b      	ldrb	r3, [r3, #0]
 800819e:	b2db      	uxtb	r3, r3
 80081a0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	22ff      	movs	r2, #255	; 0xff
 80081a6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 80081a8:	697b      	ldr	r3, [r7, #20]
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	b2db      	uxtb	r3, r3
 80081ae:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 80081b0:	78fb      	ldrb	r3, [r7, #3]
 80081b2:	b2db      	uxtb	r3, r3
 80081b4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80081b8:	b2da      	uxtb	r2, r3
 80081ba:	4b31      	ldr	r3, [pc, #196]	; (8008280 <xPortStartScheduler+0x130>)
 80081bc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 80081be:	4b31      	ldr	r3, [pc, #196]	; (8008284 <xPortStartScheduler+0x134>)
 80081c0:	2207      	movs	r2, #7
 80081c2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081c4:	e009      	b.n	80081da <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 80081c6:	4b2f      	ldr	r3, [pc, #188]	; (8008284 <xPortStartScheduler+0x134>)
 80081c8:	681b      	ldr	r3, [r3, #0]
 80081ca:	3b01      	subs	r3, #1
 80081cc:	4a2d      	ldr	r2, [pc, #180]	; (8008284 <xPortStartScheduler+0x134>)
 80081ce:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80081d0:	78fb      	ldrb	r3, [r7, #3]
 80081d2:	b2db      	uxtb	r3, r3
 80081d4:	005b      	lsls	r3, r3, #1
 80081d6:	b2db      	uxtb	r3, r3
 80081d8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80081da:	78fb      	ldrb	r3, [r7, #3]
 80081dc:	b2db      	uxtb	r3, r3
 80081de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081e2:	2b80      	cmp	r3, #128	; 0x80
 80081e4:	d0ef      	beq.n	80081c6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80081e6:	4b27      	ldr	r3, [pc, #156]	; (8008284 <xPortStartScheduler+0x134>)
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	f1c3 0307 	rsb	r3, r3, #7
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	d00a      	beq.n	8008208 <xPortStartScheduler+0xb8>
	__asm volatile
 80081f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80081f6:	f383 8811 	msr	BASEPRI, r3
 80081fa:	f3bf 8f6f 	isb	sy
 80081fe:	f3bf 8f4f 	dsb	sy
 8008202:	60bb      	str	r3, [r7, #8]
}
 8008204:	bf00      	nop
 8008206:	e7fe      	b.n	8008206 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008208:	4b1e      	ldr	r3, [pc, #120]	; (8008284 <xPortStartScheduler+0x134>)
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	021b      	lsls	r3, r3, #8
 800820e:	4a1d      	ldr	r2, [pc, #116]	; (8008284 <xPortStartScheduler+0x134>)
 8008210:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008212:	4b1c      	ldr	r3, [pc, #112]	; (8008284 <xPortStartScheduler+0x134>)
 8008214:	681b      	ldr	r3, [r3, #0]
 8008216:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800821a:	4a1a      	ldr	r2, [pc, #104]	; (8008284 <xPortStartScheduler+0x134>)
 800821c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	b2da      	uxtb	r2, r3
 8008222:	697b      	ldr	r3, [r7, #20]
 8008224:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008226:	4b18      	ldr	r3, [pc, #96]	; (8008288 <xPortStartScheduler+0x138>)
 8008228:	681b      	ldr	r3, [r3, #0]
 800822a:	4a17      	ldr	r2, [pc, #92]	; (8008288 <xPortStartScheduler+0x138>)
 800822c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008230:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008232:	4b15      	ldr	r3, [pc, #84]	; (8008288 <xPortStartScheduler+0x138>)
 8008234:	681b      	ldr	r3, [r3, #0]
 8008236:	4a14      	ldr	r2, [pc, #80]	; (8008288 <xPortStartScheduler+0x138>)
 8008238:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800823c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800823e:	f000 f8dd 	bl	80083fc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008242:	4b12      	ldr	r3, [pc, #72]	; (800828c <xPortStartScheduler+0x13c>)
 8008244:	2200      	movs	r2, #0
 8008246:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008248:	f000 f8fc 	bl	8008444 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800824c:	4b10      	ldr	r3, [pc, #64]	; (8008290 <xPortStartScheduler+0x140>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	4a0f      	ldr	r2, [pc, #60]	; (8008290 <xPortStartScheduler+0x140>)
 8008252:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008256:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008258:	f7ff ff66 	bl	8008128 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800825c:	f7fe fca4 	bl	8006ba8 <vTaskSwitchContext>
	prvTaskExitError();
 8008260:	f7ff ff1c 	bl	800809c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008264:	2300      	movs	r3, #0
}
 8008266:	4618      	mov	r0, r3
 8008268:	3718      	adds	r7, #24
 800826a:	46bd      	mov	sp, r7
 800826c:	bd80      	pop	{r7, pc}
 800826e:	bf00      	nop
 8008270:	e000ed00 	.word	0xe000ed00
 8008274:	410fc271 	.word	0x410fc271
 8008278:	410fc270 	.word	0x410fc270
 800827c:	e000e400 	.word	0xe000e400
 8008280:	20000d14 	.word	0x20000d14
 8008284:	20000d18 	.word	0x20000d18
 8008288:	e000ed20 	.word	0xe000ed20
 800828c:	20000058 	.word	0x20000058
 8008290:	e000ef34 	.word	0xe000ef34

08008294 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0
	__asm volatile
 800829a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800829e:	f383 8811 	msr	BASEPRI, r3
 80082a2:	f3bf 8f6f 	isb	sy
 80082a6:	f3bf 8f4f 	dsb	sy
 80082aa:	607b      	str	r3, [r7, #4]
}
 80082ac:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80082ae:	4b0f      	ldr	r3, [pc, #60]	; (80082ec <vPortEnterCritical+0x58>)
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	3301      	adds	r3, #1
 80082b4:	4a0d      	ldr	r2, [pc, #52]	; (80082ec <vPortEnterCritical+0x58>)
 80082b6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80082b8:	4b0c      	ldr	r3, [pc, #48]	; (80082ec <vPortEnterCritical+0x58>)
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b01      	cmp	r3, #1
 80082be:	d10f      	bne.n	80082e0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80082c0:	4b0b      	ldr	r3, [pc, #44]	; (80082f0 <vPortEnterCritical+0x5c>)
 80082c2:	681b      	ldr	r3, [r3, #0]
 80082c4:	b2db      	uxtb	r3, r3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d00a      	beq.n	80082e0 <vPortEnterCritical+0x4c>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	603b      	str	r3, [r7, #0]
}
 80082dc:	bf00      	nop
 80082de:	e7fe      	b.n	80082de <vPortEnterCritical+0x4a>
	}
}
 80082e0:	bf00      	nop
 80082e2:	370c      	adds	r7, #12
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	20000058 	.word	0x20000058
 80082f0:	e000ed04 	.word	0xe000ed04

080082f4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80082fa:	4b12      	ldr	r3, [pc, #72]	; (8008344 <vPortExitCritical+0x50>)
 80082fc:	681b      	ldr	r3, [r3, #0]
 80082fe:	2b00      	cmp	r3, #0
 8008300:	d10a      	bne.n	8008318 <vPortExitCritical+0x24>
	__asm volatile
 8008302:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008306:	f383 8811 	msr	BASEPRI, r3
 800830a:	f3bf 8f6f 	isb	sy
 800830e:	f3bf 8f4f 	dsb	sy
 8008312:	607b      	str	r3, [r7, #4]
}
 8008314:	bf00      	nop
 8008316:	e7fe      	b.n	8008316 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008318:	4b0a      	ldr	r3, [pc, #40]	; (8008344 <vPortExitCritical+0x50>)
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	3b01      	subs	r3, #1
 800831e:	4a09      	ldr	r2, [pc, #36]	; (8008344 <vPortExitCritical+0x50>)
 8008320:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008322:	4b08      	ldr	r3, [pc, #32]	; (8008344 <vPortExitCritical+0x50>)
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	2b00      	cmp	r3, #0
 8008328:	d105      	bne.n	8008336 <vPortExitCritical+0x42>
 800832a:	2300      	movs	r3, #0
 800832c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800832e:	683b      	ldr	r3, [r7, #0]
 8008330:	f383 8811 	msr	BASEPRI, r3
}
 8008334:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008336:	bf00      	nop
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20000058 	.word	0x20000058
	...

08008350 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008350:	f3ef 8009 	mrs	r0, PSP
 8008354:	f3bf 8f6f 	isb	sy
 8008358:	4b15      	ldr	r3, [pc, #84]	; (80083b0 <pxCurrentTCBConst>)
 800835a:	681a      	ldr	r2, [r3, #0]
 800835c:	f01e 0f10 	tst.w	lr, #16
 8008360:	bf08      	it	eq
 8008362:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008366:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800836a:	6010      	str	r0, [r2, #0]
 800836c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008370:	f04f 0050 	mov.w	r0, #80	; 0x50
 8008374:	f380 8811 	msr	BASEPRI, r0
 8008378:	f3bf 8f4f 	dsb	sy
 800837c:	f3bf 8f6f 	isb	sy
 8008380:	f7fe fc12 	bl	8006ba8 <vTaskSwitchContext>
 8008384:	f04f 0000 	mov.w	r0, #0
 8008388:	f380 8811 	msr	BASEPRI, r0
 800838c:	bc09      	pop	{r0, r3}
 800838e:	6819      	ldr	r1, [r3, #0]
 8008390:	6808      	ldr	r0, [r1, #0]
 8008392:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008396:	f01e 0f10 	tst.w	lr, #16
 800839a:	bf08      	it	eq
 800839c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80083a0:	f380 8809 	msr	PSP, r0
 80083a4:	f3bf 8f6f 	isb	sy
 80083a8:	4770      	bx	lr
 80083aa:	bf00      	nop
 80083ac:	f3af 8000 	nop.w

080083b0 <pxCurrentTCBConst>:
 80083b0:	200006e8 	.word	0x200006e8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 80083b4:	bf00      	nop
 80083b6:	bf00      	nop

080083b8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 80083b8:	b580      	push	{r7, lr}
 80083ba:	b082      	sub	sp, #8
 80083bc:	af00      	add	r7, sp, #0
	__asm volatile
 80083be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80083c2:	f383 8811 	msr	BASEPRI, r3
 80083c6:	f3bf 8f6f 	isb	sy
 80083ca:	f3bf 8f4f 	dsb	sy
 80083ce:	607b      	str	r3, [r7, #4]
}
 80083d0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80083d2:	f7fe fb2f 	bl	8006a34 <xTaskIncrementTick>
 80083d6:	4603      	mov	r3, r0
 80083d8:	2b00      	cmp	r3, #0
 80083da:	d003      	beq.n	80083e4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80083dc:	4b06      	ldr	r3, [pc, #24]	; (80083f8 <xPortSysTickHandler+0x40>)
 80083de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80083e2:	601a      	str	r2, [r3, #0]
 80083e4:	2300      	movs	r3, #0
 80083e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80083e8:	683b      	ldr	r3, [r7, #0]
 80083ea:	f383 8811 	msr	BASEPRI, r3
}
 80083ee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80083f0:	bf00      	nop
 80083f2:	3708      	adds	r7, #8
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	e000ed04 	.word	0xe000ed04

080083fc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80083fc:	b480      	push	{r7}
 80083fe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008400:	4b0b      	ldr	r3, [pc, #44]	; (8008430 <vPortSetupTimerInterrupt+0x34>)
 8008402:	2200      	movs	r2, #0
 8008404:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008406:	4b0b      	ldr	r3, [pc, #44]	; (8008434 <vPortSetupTimerInterrupt+0x38>)
 8008408:	2200      	movs	r2, #0
 800840a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800840c:	4b0a      	ldr	r3, [pc, #40]	; (8008438 <vPortSetupTimerInterrupt+0x3c>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a0a      	ldr	r2, [pc, #40]	; (800843c <vPortSetupTimerInterrupt+0x40>)
 8008412:	fba2 2303 	umull	r2, r3, r2, r3
 8008416:	099b      	lsrs	r3, r3, #6
 8008418:	4a09      	ldr	r2, [pc, #36]	; (8008440 <vPortSetupTimerInterrupt+0x44>)
 800841a:	3b01      	subs	r3, #1
 800841c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800841e:	4b04      	ldr	r3, [pc, #16]	; (8008430 <vPortSetupTimerInterrupt+0x34>)
 8008420:	2207      	movs	r2, #7
 8008422:	601a      	str	r2, [r3, #0]
}
 8008424:	bf00      	nop
 8008426:	46bd      	mov	sp, r7
 8008428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800842c:	4770      	bx	lr
 800842e:	bf00      	nop
 8008430:	e000e010 	.word	0xe000e010
 8008434:	e000e018 	.word	0xe000e018
 8008438:	2000004c 	.word	0x2000004c
 800843c:	10624dd3 	.word	0x10624dd3
 8008440:	e000e014 	.word	0xe000e014

08008444 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8008444:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8008454 <vPortEnableVFP+0x10>
 8008448:	6801      	ldr	r1, [r0, #0]
 800844a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800844e:	6001      	str	r1, [r0, #0]
 8008450:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8008452:	bf00      	nop
 8008454:	e000ed88 	.word	0xe000ed88

08008458 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008458:	b480      	push	{r7}
 800845a:	b085      	sub	sp, #20
 800845c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800845e:	f3ef 8305 	mrs	r3, IPSR
 8008462:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	2b0f      	cmp	r3, #15
 8008468:	d914      	bls.n	8008494 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800846a:	4a17      	ldr	r2, [pc, #92]	; (80084c8 <vPortValidateInterruptPriority+0x70>)
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	4413      	add	r3, r2
 8008470:	781b      	ldrb	r3, [r3, #0]
 8008472:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8008474:	4b15      	ldr	r3, [pc, #84]	; (80084cc <vPortValidateInterruptPriority+0x74>)
 8008476:	781b      	ldrb	r3, [r3, #0]
 8008478:	7afa      	ldrb	r2, [r7, #11]
 800847a:	429a      	cmp	r2, r3
 800847c:	d20a      	bcs.n	8008494 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800847e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008482:	f383 8811 	msr	BASEPRI, r3
 8008486:	f3bf 8f6f 	isb	sy
 800848a:	f3bf 8f4f 	dsb	sy
 800848e:	607b      	str	r3, [r7, #4]
}
 8008490:	bf00      	nop
 8008492:	e7fe      	b.n	8008492 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8008494:	4b0e      	ldr	r3, [pc, #56]	; (80084d0 <vPortValidateInterruptPriority+0x78>)
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800849c:	4b0d      	ldr	r3, [pc, #52]	; (80084d4 <vPortValidateInterruptPriority+0x7c>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	429a      	cmp	r2, r3
 80084a2:	d90a      	bls.n	80084ba <vPortValidateInterruptPriority+0x62>
	__asm volatile
 80084a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80084a8:	f383 8811 	msr	BASEPRI, r3
 80084ac:	f3bf 8f6f 	isb	sy
 80084b0:	f3bf 8f4f 	dsb	sy
 80084b4:	603b      	str	r3, [r7, #0]
}
 80084b6:	bf00      	nop
 80084b8:	e7fe      	b.n	80084b8 <vPortValidateInterruptPriority+0x60>
	}
 80084ba:	bf00      	nop
 80084bc:	3714      	adds	r7, #20
 80084be:	46bd      	mov	sp, r7
 80084c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084c4:	4770      	bx	lr
 80084c6:	bf00      	nop
 80084c8:	e000e3f0 	.word	0xe000e3f0
 80084cc:	20000d14 	.word	0x20000d14
 80084d0:	e000ed0c 	.word	0xe000ed0c
 80084d4:	20000d18 	.word	0x20000d18

080084d8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b08a      	sub	sp, #40	; 0x28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80084e0:	2300      	movs	r3, #0
 80084e2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80084e4:	f7fe f9c6 	bl	8006874 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80084e8:	4b5b      	ldr	r3, [pc, #364]	; (8008658 <pvPortMalloc+0x180>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d101      	bne.n	80084f4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80084f0:	f000 f920 	bl	8008734 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80084f4:	4b59      	ldr	r3, [pc, #356]	; (800865c <pvPortMalloc+0x184>)
 80084f6:	681a      	ldr	r2, [r3, #0]
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	4013      	ands	r3, r2
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	f040 8093 	bne.w	8008628 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	2b00      	cmp	r3, #0
 8008506:	d01d      	beq.n	8008544 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8008508:	2208      	movs	r2, #8
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	4413      	add	r3, r2
 800850e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	f003 0307 	and.w	r3, r3, #7
 8008516:	2b00      	cmp	r3, #0
 8008518:	d014      	beq.n	8008544 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	f023 0307 	bic.w	r3, r3, #7
 8008520:	3308      	adds	r3, #8
 8008522:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	f003 0307 	and.w	r3, r3, #7
 800852a:	2b00      	cmp	r3, #0
 800852c:	d00a      	beq.n	8008544 <pvPortMalloc+0x6c>
	__asm volatile
 800852e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008532:	f383 8811 	msr	BASEPRI, r3
 8008536:	f3bf 8f6f 	isb	sy
 800853a:	f3bf 8f4f 	dsb	sy
 800853e:	617b      	str	r3, [r7, #20]
}
 8008540:	bf00      	nop
 8008542:	e7fe      	b.n	8008542 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8008544:	687b      	ldr	r3, [r7, #4]
 8008546:	2b00      	cmp	r3, #0
 8008548:	d06e      	beq.n	8008628 <pvPortMalloc+0x150>
 800854a:	4b45      	ldr	r3, [pc, #276]	; (8008660 <pvPortMalloc+0x188>)
 800854c:	681b      	ldr	r3, [r3, #0]
 800854e:	687a      	ldr	r2, [r7, #4]
 8008550:	429a      	cmp	r2, r3
 8008552:	d869      	bhi.n	8008628 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8008554:	4b43      	ldr	r3, [pc, #268]	; (8008664 <pvPortMalloc+0x18c>)
 8008556:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008558:	4b42      	ldr	r3, [pc, #264]	; (8008664 <pvPortMalloc+0x18c>)
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800855e:	e004      	b.n	800856a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8008560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008562:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8008564:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008566:	681b      	ldr	r3, [r3, #0]
 8008568:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800856a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856c:	685b      	ldr	r3, [r3, #4]
 800856e:	687a      	ldr	r2, [r7, #4]
 8008570:	429a      	cmp	r2, r3
 8008572:	d903      	bls.n	800857c <pvPortMalloc+0xa4>
 8008574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	2b00      	cmp	r3, #0
 800857a:	d1f1      	bne.n	8008560 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800857c:	4b36      	ldr	r3, [pc, #216]	; (8008658 <pvPortMalloc+0x180>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008582:	429a      	cmp	r2, r3
 8008584:	d050      	beq.n	8008628 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8008586:	6a3b      	ldr	r3, [r7, #32]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	2208      	movs	r2, #8
 800858c:	4413      	add	r3, r2
 800858e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008590:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008592:	681a      	ldr	r2, [r3, #0]
 8008594:	6a3b      	ldr	r3, [r7, #32]
 8008596:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8008598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800859a:	685a      	ldr	r2, [r3, #4]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	1ad2      	subs	r2, r2, r3
 80085a0:	2308      	movs	r3, #8
 80085a2:	005b      	lsls	r3, r3, #1
 80085a4:	429a      	cmp	r2, r3
 80085a6:	d91f      	bls.n	80085e8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80085a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80085aa:	687b      	ldr	r3, [r7, #4]
 80085ac:	4413      	add	r3, r2
 80085ae:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	f003 0307 	and.w	r3, r3, #7
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d00a      	beq.n	80085d0 <pvPortMalloc+0xf8>
	__asm volatile
 80085ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80085be:	f383 8811 	msr	BASEPRI, r3
 80085c2:	f3bf 8f6f 	isb	sy
 80085c6:	f3bf 8f4f 	dsb	sy
 80085ca:	613b      	str	r3, [r7, #16]
}
 80085cc:	bf00      	nop
 80085ce:	e7fe      	b.n	80085ce <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80085d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d2:	685a      	ldr	r2, [r3, #4]
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	1ad2      	subs	r2, r2, r3
 80085d8:	69bb      	ldr	r3, [r7, #24]
 80085da:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80085dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085de:	687a      	ldr	r2, [r7, #4]
 80085e0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80085e2:	69b8      	ldr	r0, [r7, #24]
 80085e4:	f000 f908 	bl	80087f8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80085e8:	4b1d      	ldr	r3, [pc, #116]	; (8008660 <pvPortMalloc+0x188>)
 80085ea:	681a      	ldr	r2, [r3, #0]
 80085ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ee:	685b      	ldr	r3, [r3, #4]
 80085f0:	1ad3      	subs	r3, r2, r3
 80085f2:	4a1b      	ldr	r2, [pc, #108]	; (8008660 <pvPortMalloc+0x188>)
 80085f4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80085f6:	4b1a      	ldr	r3, [pc, #104]	; (8008660 <pvPortMalloc+0x188>)
 80085f8:	681a      	ldr	r2, [r3, #0]
 80085fa:	4b1b      	ldr	r3, [pc, #108]	; (8008668 <pvPortMalloc+0x190>)
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	429a      	cmp	r2, r3
 8008600:	d203      	bcs.n	800860a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8008602:	4b17      	ldr	r3, [pc, #92]	; (8008660 <pvPortMalloc+0x188>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	4a18      	ldr	r2, [pc, #96]	; (8008668 <pvPortMalloc+0x190>)
 8008608:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800860a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800860c:	685a      	ldr	r2, [r3, #4]
 800860e:	4b13      	ldr	r3, [pc, #76]	; (800865c <pvPortMalloc+0x184>)
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	431a      	orrs	r2, r3
 8008614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008616:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008618:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800861a:	2200      	movs	r2, #0
 800861c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800861e:	4b13      	ldr	r3, [pc, #76]	; (800866c <pvPortMalloc+0x194>)
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	3301      	adds	r3, #1
 8008624:	4a11      	ldr	r2, [pc, #68]	; (800866c <pvPortMalloc+0x194>)
 8008626:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008628:	f7fe f932 	bl	8006890 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800862c:	69fb      	ldr	r3, [r7, #28]
 800862e:	f003 0307 	and.w	r3, r3, #7
 8008632:	2b00      	cmp	r3, #0
 8008634:	d00a      	beq.n	800864c <pvPortMalloc+0x174>
	__asm volatile
 8008636:	f04f 0350 	mov.w	r3, #80	; 0x50
 800863a:	f383 8811 	msr	BASEPRI, r3
 800863e:	f3bf 8f6f 	isb	sy
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	60fb      	str	r3, [r7, #12]
}
 8008648:	bf00      	nop
 800864a:	e7fe      	b.n	800864a <pvPortMalloc+0x172>
	return pvReturn;
 800864c:	69fb      	ldr	r3, [r7, #28]
}
 800864e:	4618      	mov	r0, r3
 8008650:	3728      	adds	r7, #40	; 0x28
 8008652:	46bd      	mov	sp, r7
 8008654:	bd80      	pop	{r7, pc}
 8008656:	bf00      	nop
 8008658:	20004ba4 	.word	0x20004ba4
 800865c:	20004bb8 	.word	0x20004bb8
 8008660:	20004ba8 	.word	0x20004ba8
 8008664:	20004b9c 	.word	0x20004b9c
 8008668:	20004bac 	.word	0x20004bac
 800866c:	20004bb0 	.word	0x20004bb0

08008670 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008670:	b580      	push	{r7, lr}
 8008672:	b086      	sub	sp, #24
 8008674:	af00      	add	r7, sp, #0
 8008676:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d04d      	beq.n	800871e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8008682:	2308      	movs	r3, #8
 8008684:	425b      	negs	r3, r3
 8008686:	697a      	ldr	r2, [r7, #20]
 8008688:	4413      	add	r3, r2
 800868a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800868c:	697b      	ldr	r3, [r7, #20]
 800868e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008690:	693b      	ldr	r3, [r7, #16]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	4b24      	ldr	r3, [pc, #144]	; (8008728 <vPortFree+0xb8>)
 8008696:	681b      	ldr	r3, [r3, #0]
 8008698:	4013      	ands	r3, r2
 800869a:	2b00      	cmp	r3, #0
 800869c:	d10a      	bne.n	80086b4 <vPortFree+0x44>
	__asm volatile
 800869e:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086a2:	f383 8811 	msr	BASEPRI, r3
 80086a6:	f3bf 8f6f 	isb	sy
 80086aa:	f3bf 8f4f 	dsb	sy
 80086ae:	60fb      	str	r3, [r7, #12]
}
 80086b0:	bf00      	nop
 80086b2:	e7fe      	b.n	80086b2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80086b4:	693b      	ldr	r3, [r7, #16]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	2b00      	cmp	r3, #0
 80086ba:	d00a      	beq.n	80086d2 <vPortFree+0x62>
	__asm volatile
 80086bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80086c0:	f383 8811 	msr	BASEPRI, r3
 80086c4:	f3bf 8f6f 	isb	sy
 80086c8:	f3bf 8f4f 	dsb	sy
 80086cc:	60bb      	str	r3, [r7, #8]
}
 80086ce:	bf00      	nop
 80086d0:	e7fe      	b.n	80086d0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80086d2:	693b      	ldr	r3, [r7, #16]
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	4b14      	ldr	r3, [pc, #80]	; (8008728 <vPortFree+0xb8>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4013      	ands	r3, r2
 80086dc:	2b00      	cmp	r3, #0
 80086de:	d01e      	beq.n	800871e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80086e0:	693b      	ldr	r3, [r7, #16]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	2b00      	cmp	r3, #0
 80086e6:	d11a      	bne.n	800871e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80086e8:	693b      	ldr	r3, [r7, #16]
 80086ea:	685a      	ldr	r2, [r3, #4]
 80086ec:	4b0e      	ldr	r3, [pc, #56]	; (8008728 <vPortFree+0xb8>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	43db      	mvns	r3, r3
 80086f2:	401a      	ands	r2, r3
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80086f8:	f7fe f8bc 	bl	8006874 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80086fc:	693b      	ldr	r3, [r7, #16]
 80086fe:	685a      	ldr	r2, [r3, #4]
 8008700:	4b0a      	ldr	r3, [pc, #40]	; (800872c <vPortFree+0xbc>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	4413      	add	r3, r2
 8008706:	4a09      	ldr	r2, [pc, #36]	; (800872c <vPortFree+0xbc>)
 8008708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800870a:	6938      	ldr	r0, [r7, #16]
 800870c:	f000 f874 	bl	80087f8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008710:	4b07      	ldr	r3, [pc, #28]	; (8008730 <vPortFree+0xc0>)
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	3301      	adds	r3, #1
 8008716:	4a06      	ldr	r2, [pc, #24]	; (8008730 <vPortFree+0xc0>)
 8008718:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800871a:	f7fe f8b9 	bl	8006890 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800871e:	bf00      	nop
 8008720:	3718      	adds	r7, #24
 8008722:	46bd      	mov	sp, r7
 8008724:	bd80      	pop	{r7, pc}
 8008726:	bf00      	nop
 8008728:	20004bb8 	.word	0x20004bb8
 800872c:	20004ba8 	.word	0x20004ba8
 8008730:	20004bb4 	.word	0x20004bb4

08008734 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008734:	b480      	push	{r7}
 8008736:	b085      	sub	sp, #20
 8008738:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800873a:	f44f 537a 	mov.w	r3, #16000	; 0x3e80
 800873e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008740:	4b27      	ldr	r3, [pc, #156]	; (80087e0 <prvHeapInit+0xac>)
 8008742:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008744:	68fb      	ldr	r3, [r7, #12]
 8008746:	f003 0307 	and.w	r3, r3, #7
 800874a:	2b00      	cmp	r3, #0
 800874c:	d00c      	beq.n	8008768 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800874e:	68fb      	ldr	r3, [r7, #12]
 8008750:	3307      	adds	r3, #7
 8008752:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008754:	68fb      	ldr	r3, [r7, #12]
 8008756:	f023 0307 	bic.w	r3, r3, #7
 800875a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800875c:	68ba      	ldr	r2, [r7, #8]
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	4a1f      	ldr	r2, [pc, #124]	; (80087e0 <prvHeapInit+0xac>)
 8008764:	4413      	add	r3, r2
 8008766:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008768:	68fb      	ldr	r3, [r7, #12]
 800876a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800876c:	4a1d      	ldr	r2, [pc, #116]	; (80087e4 <prvHeapInit+0xb0>)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008772:	4b1c      	ldr	r3, [pc, #112]	; (80087e4 <prvHeapInit+0xb0>)
 8008774:	2200      	movs	r2, #0
 8008776:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	68ba      	ldr	r2, [r7, #8]
 800877c:	4413      	add	r3, r2
 800877e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8008780:	2208      	movs	r2, #8
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	1a9b      	subs	r3, r3, r2
 8008786:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	f023 0307 	bic.w	r3, r3, #7
 800878e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8008790:	68fb      	ldr	r3, [r7, #12]
 8008792:	4a15      	ldr	r2, [pc, #84]	; (80087e8 <prvHeapInit+0xb4>)
 8008794:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8008796:	4b14      	ldr	r3, [pc, #80]	; (80087e8 <prvHeapInit+0xb4>)
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	2200      	movs	r2, #0
 800879c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800879e:	4b12      	ldr	r3, [pc, #72]	; (80087e8 <prvHeapInit+0xb4>)
 80087a0:	681b      	ldr	r3, [r3, #0]
 80087a2:	2200      	movs	r2, #0
 80087a4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80087aa:	683b      	ldr	r3, [r7, #0]
 80087ac:	68fa      	ldr	r2, [r7, #12]
 80087ae:	1ad2      	subs	r2, r2, r3
 80087b0:	683b      	ldr	r3, [r7, #0]
 80087b2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80087b4:	4b0c      	ldr	r3, [pc, #48]	; (80087e8 <prvHeapInit+0xb4>)
 80087b6:	681a      	ldr	r2, [r3, #0]
 80087b8:	683b      	ldr	r3, [r7, #0]
 80087ba:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087bc:	683b      	ldr	r3, [r7, #0]
 80087be:	685b      	ldr	r3, [r3, #4]
 80087c0:	4a0a      	ldr	r2, [pc, #40]	; (80087ec <prvHeapInit+0xb8>)
 80087c2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80087c4:	683b      	ldr	r3, [r7, #0]
 80087c6:	685b      	ldr	r3, [r3, #4]
 80087c8:	4a09      	ldr	r2, [pc, #36]	; (80087f0 <prvHeapInit+0xbc>)
 80087ca:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80087cc:	4b09      	ldr	r3, [pc, #36]	; (80087f4 <prvHeapInit+0xc0>)
 80087ce:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80087d2:	601a      	str	r2, [r3, #0]
}
 80087d4:	bf00      	nop
 80087d6:	3714      	adds	r7, #20
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr
 80087e0:	20000d1c 	.word	0x20000d1c
 80087e4:	20004b9c 	.word	0x20004b9c
 80087e8:	20004ba4 	.word	0x20004ba4
 80087ec:	20004bac 	.word	0x20004bac
 80087f0:	20004ba8 	.word	0x20004ba8
 80087f4:	20004bb8 	.word	0x20004bb8

080087f8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80087f8:	b480      	push	{r7}
 80087fa:	b085      	sub	sp, #20
 80087fc:	af00      	add	r7, sp, #0
 80087fe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008800:	4b28      	ldr	r3, [pc, #160]	; (80088a4 <prvInsertBlockIntoFreeList+0xac>)
 8008802:	60fb      	str	r3, [r7, #12]
 8008804:	e002      	b.n	800880c <prvInsertBlockIntoFreeList+0x14>
 8008806:	68fb      	ldr	r3, [r7, #12]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	60fb      	str	r3, [r7, #12]
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	681b      	ldr	r3, [r3, #0]
 8008810:	687a      	ldr	r2, [r7, #4]
 8008812:	429a      	cmp	r2, r3
 8008814:	d8f7      	bhi.n	8008806 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008816:	68fb      	ldr	r3, [r7, #12]
 8008818:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800881a:	68fb      	ldr	r3, [r7, #12]
 800881c:	685b      	ldr	r3, [r3, #4]
 800881e:	68ba      	ldr	r2, [r7, #8]
 8008820:	4413      	add	r3, r2
 8008822:	687a      	ldr	r2, [r7, #4]
 8008824:	429a      	cmp	r2, r3
 8008826:	d108      	bne.n	800883a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008828:	68fb      	ldr	r3, [r7, #12]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	685b      	ldr	r3, [r3, #4]
 8008830:	441a      	add	r2, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800883e:	687b      	ldr	r3, [r7, #4]
 8008840:	685b      	ldr	r3, [r3, #4]
 8008842:	68ba      	ldr	r2, [r7, #8]
 8008844:	441a      	add	r2, r3
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	429a      	cmp	r2, r3
 800884c:	d118      	bne.n	8008880 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800884e:	68fb      	ldr	r3, [r7, #12]
 8008850:	681a      	ldr	r2, [r3, #0]
 8008852:	4b15      	ldr	r3, [pc, #84]	; (80088a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	429a      	cmp	r2, r3
 8008858:	d00d      	beq.n	8008876 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	685a      	ldr	r2, [r3, #4]
 800885e:	68fb      	ldr	r3, [r7, #12]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	685b      	ldr	r3, [r3, #4]
 8008864:	441a      	add	r2, r3
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	681a      	ldr	r2, [r3, #0]
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	601a      	str	r2, [r3, #0]
 8008874:	e008      	b.n	8008888 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008876:	4b0c      	ldr	r3, [pc, #48]	; (80088a8 <prvInsertBlockIntoFreeList+0xb0>)
 8008878:	681a      	ldr	r2, [r3, #0]
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	601a      	str	r2, [r3, #0]
 800887e:	e003      	b.n	8008888 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681a      	ldr	r2, [r3, #0]
 8008884:	687b      	ldr	r3, [r7, #4]
 8008886:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008888:	68fa      	ldr	r2, [r7, #12]
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	429a      	cmp	r2, r3
 800888e:	d002      	beq.n	8008896 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	687a      	ldr	r2, [r7, #4]
 8008894:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008896:	bf00      	nop
 8008898:	3714      	adds	r7, #20
 800889a:	46bd      	mov	sp, r7
 800889c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088a0:	4770      	bx	lr
 80088a2:	bf00      	nop
 80088a4:	20004b9c 	.word	0x20004b9c
 80088a8:	20004ba4 	.word	0x20004ba4

080088ac <__errno>:
 80088ac:	4b01      	ldr	r3, [pc, #4]	; (80088b4 <__errno+0x8>)
 80088ae:	6818      	ldr	r0, [r3, #0]
 80088b0:	4770      	bx	lr
 80088b2:	bf00      	nop
 80088b4:	2000005c 	.word	0x2000005c

080088b8 <std>:
 80088b8:	2300      	movs	r3, #0
 80088ba:	b510      	push	{r4, lr}
 80088bc:	4604      	mov	r4, r0
 80088be:	e9c0 3300 	strd	r3, r3, [r0]
 80088c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80088c6:	6083      	str	r3, [r0, #8]
 80088c8:	8181      	strh	r1, [r0, #12]
 80088ca:	6643      	str	r3, [r0, #100]	; 0x64
 80088cc:	81c2      	strh	r2, [r0, #14]
 80088ce:	6183      	str	r3, [r0, #24]
 80088d0:	4619      	mov	r1, r3
 80088d2:	2208      	movs	r2, #8
 80088d4:	305c      	adds	r0, #92	; 0x5c
 80088d6:	f000 f91a 	bl	8008b0e <memset>
 80088da:	4b05      	ldr	r3, [pc, #20]	; (80088f0 <std+0x38>)
 80088dc:	6263      	str	r3, [r4, #36]	; 0x24
 80088de:	4b05      	ldr	r3, [pc, #20]	; (80088f4 <std+0x3c>)
 80088e0:	62a3      	str	r3, [r4, #40]	; 0x28
 80088e2:	4b05      	ldr	r3, [pc, #20]	; (80088f8 <std+0x40>)
 80088e4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80088e6:	4b05      	ldr	r3, [pc, #20]	; (80088fc <std+0x44>)
 80088e8:	6224      	str	r4, [r4, #32]
 80088ea:	6323      	str	r3, [r4, #48]	; 0x30
 80088ec:	bd10      	pop	{r4, pc}
 80088ee:	bf00      	nop
 80088f0:	08008ef1 	.word	0x08008ef1
 80088f4:	08008f17 	.word	0x08008f17
 80088f8:	08008f4f 	.word	0x08008f4f
 80088fc:	08008f73 	.word	0x08008f73

08008900 <_cleanup_r>:
 8008900:	4901      	ldr	r1, [pc, #4]	; (8008908 <_cleanup_r+0x8>)
 8008902:	f000 b8af 	b.w	8008a64 <_fwalk_reent>
 8008906:	bf00      	nop
 8008908:	0800924d 	.word	0x0800924d

0800890c <__sfmoreglue>:
 800890c:	b570      	push	{r4, r5, r6, lr}
 800890e:	2268      	movs	r2, #104	; 0x68
 8008910:	1e4d      	subs	r5, r1, #1
 8008912:	4355      	muls	r5, r2
 8008914:	460e      	mov	r6, r1
 8008916:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800891a:	f000 f921 	bl	8008b60 <_malloc_r>
 800891e:	4604      	mov	r4, r0
 8008920:	b140      	cbz	r0, 8008934 <__sfmoreglue+0x28>
 8008922:	2100      	movs	r1, #0
 8008924:	e9c0 1600 	strd	r1, r6, [r0]
 8008928:	300c      	adds	r0, #12
 800892a:	60a0      	str	r0, [r4, #8]
 800892c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008930:	f000 f8ed 	bl	8008b0e <memset>
 8008934:	4620      	mov	r0, r4
 8008936:	bd70      	pop	{r4, r5, r6, pc}

08008938 <__sfp_lock_acquire>:
 8008938:	4801      	ldr	r0, [pc, #4]	; (8008940 <__sfp_lock_acquire+0x8>)
 800893a:	f000 b8d8 	b.w	8008aee <__retarget_lock_acquire_recursive>
 800893e:	bf00      	nop
 8008940:	20004bbd 	.word	0x20004bbd

08008944 <__sfp_lock_release>:
 8008944:	4801      	ldr	r0, [pc, #4]	; (800894c <__sfp_lock_release+0x8>)
 8008946:	f000 b8d3 	b.w	8008af0 <__retarget_lock_release_recursive>
 800894a:	bf00      	nop
 800894c:	20004bbd 	.word	0x20004bbd

08008950 <__sinit_lock_acquire>:
 8008950:	4801      	ldr	r0, [pc, #4]	; (8008958 <__sinit_lock_acquire+0x8>)
 8008952:	f000 b8cc 	b.w	8008aee <__retarget_lock_acquire_recursive>
 8008956:	bf00      	nop
 8008958:	20004bbe 	.word	0x20004bbe

0800895c <__sinit_lock_release>:
 800895c:	4801      	ldr	r0, [pc, #4]	; (8008964 <__sinit_lock_release+0x8>)
 800895e:	f000 b8c7 	b.w	8008af0 <__retarget_lock_release_recursive>
 8008962:	bf00      	nop
 8008964:	20004bbe 	.word	0x20004bbe

08008968 <__sinit>:
 8008968:	b510      	push	{r4, lr}
 800896a:	4604      	mov	r4, r0
 800896c:	f7ff fff0 	bl	8008950 <__sinit_lock_acquire>
 8008970:	69a3      	ldr	r3, [r4, #24]
 8008972:	b11b      	cbz	r3, 800897c <__sinit+0x14>
 8008974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008978:	f7ff bff0 	b.w	800895c <__sinit_lock_release>
 800897c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8008980:	6523      	str	r3, [r4, #80]	; 0x50
 8008982:	4b13      	ldr	r3, [pc, #76]	; (80089d0 <__sinit+0x68>)
 8008984:	4a13      	ldr	r2, [pc, #76]	; (80089d4 <__sinit+0x6c>)
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	62a2      	str	r2, [r4, #40]	; 0x28
 800898a:	42a3      	cmp	r3, r4
 800898c:	bf04      	itt	eq
 800898e:	2301      	moveq	r3, #1
 8008990:	61a3      	streq	r3, [r4, #24]
 8008992:	4620      	mov	r0, r4
 8008994:	f000 f820 	bl	80089d8 <__sfp>
 8008998:	6060      	str	r0, [r4, #4]
 800899a:	4620      	mov	r0, r4
 800899c:	f000 f81c 	bl	80089d8 <__sfp>
 80089a0:	60a0      	str	r0, [r4, #8]
 80089a2:	4620      	mov	r0, r4
 80089a4:	f000 f818 	bl	80089d8 <__sfp>
 80089a8:	2200      	movs	r2, #0
 80089aa:	60e0      	str	r0, [r4, #12]
 80089ac:	2104      	movs	r1, #4
 80089ae:	6860      	ldr	r0, [r4, #4]
 80089b0:	f7ff ff82 	bl	80088b8 <std>
 80089b4:	68a0      	ldr	r0, [r4, #8]
 80089b6:	2201      	movs	r2, #1
 80089b8:	2109      	movs	r1, #9
 80089ba:	f7ff ff7d 	bl	80088b8 <std>
 80089be:	68e0      	ldr	r0, [r4, #12]
 80089c0:	2202      	movs	r2, #2
 80089c2:	2112      	movs	r1, #18
 80089c4:	f7ff ff78 	bl	80088b8 <std>
 80089c8:	2301      	movs	r3, #1
 80089ca:	61a3      	str	r3, [r4, #24]
 80089cc:	e7d2      	b.n	8008974 <__sinit+0xc>
 80089ce:	bf00      	nop
 80089d0:	0800a9b0 	.word	0x0800a9b0
 80089d4:	08008901 	.word	0x08008901

080089d8 <__sfp>:
 80089d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089da:	4607      	mov	r7, r0
 80089dc:	f7ff ffac 	bl	8008938 <__sfp_lock_acquire>
 80089e0:	4b1e      	ldr	r3, [pc, #120]	; (8008a5c <__sfp+0x84>)
 80089e2:	681e      	ldr	r6, [r3, #0]
 80089e4:	69b3      	ldr	r3, [r6, #24]
 80089e6:	b913      	cbnz	r3, 80089ee <__sfp+0x16>
 80089e8:	4630      	mov	r0, r6
 80089ea:	f7ff ffbd 	bl	8008968 <__sinit>
 80089ee:	3648      	adds	r6, #72	; 0x48
 80089f0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80089f4:	3b01      	subs	r3, #1
 80089f6:	d503      	bpl.n	8008a00 <__sfp+0x28>
 80089f8:	6833      	ldr	r3, [r6, #0]
 80089fa:	b30b      	cbz	r3, 8008a40 <__sfp+0x68>
 80089fc:	6836      	ldr	r6, [r6, #0]
 80089fe:	e7f7      	b.n	80089f0 <__sfp+0x18>
 8008a00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008a04:	b9d5      	cbnz	r5, 8008a3c <__sfp+0x64>
 8008a06:	4b16      	ldr	r3, [pc, #88]	; (8008a60 <__sfp+0x88>)
 8008a08:	60e3      	str	r3, [r4, #12]
 8008a0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8008a0e:	6665      	str	r5, [r4, #100]	; 0x64
 8008a10:	f000 f86c 	bl	8008aec <__retarget_lock_init_recursive>
 8008a14:	f7ff ff96 	bl	8008944 <__sfp_lock_release>
 8008a18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8008a1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8008a20:	6025      	str	r5, [r4, #0]
 8008a22:	61a5      	str	r5, [r4, #24]
 8008a24:	2208      	movs	r2, #8
 8008a26:	4629      	mov	r1, r5
 8008a28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008a2c:	f000 f86f 	bl	8008b0e <memset>
 8008a30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008a34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008a38:	4620      	mov	r0, r4
 8008a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008a3c:	3468      	adds	r4, #104	; 0x68
 8008a3e:	e7d9      	b.n	80089f4 <__sfp+0x1c>
 8008a40:	2104      	movs	r1, #4
 8008a42:	4638      	mov	r0, r7
 8008a44:	f7ff ff62 	bl	800890c <__sfmoreglue>
 8008a48:	4604      	mov	r4, r0
 8008a4a:	6030      	str	r0, [r6, #0]
 8008a4c:	2800      	cmp	r0, #0
 8008a4e:	d1d5      	bne.n	80089fc <__sfp+0x24>
 8008a50:	f7ff ff78 	bl	8008944 <__sfp_lock_release>
 8008a54:	230c      	movs	r3, #12
 8008a56:	603b      	str	r3, [r7, #0]
 8008a58:	e7ee      	b.n	8008a38 <__sfp+0x60>
 8008a5a:	bf00      	nop
 8008a5c:	0800a9b0 	.word	0x0800a9b0
 8008a60:	ffff0001 	.word	0xffff0001

08008a64 <_fwalk_reent>:
 8008a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a68:	4606      	mov	r6, r0
 8008a6a:	4688      	mov	r8, r1
 8008a6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008a70:	2700      	movs	r7, #0
 8008a72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008a76:	f1b9 0901 	subs.w	r9, r9, #1
 8008a7a:	d505      	bpl.n	8008a88 <_fwalk_reent+0x24>
 8008a7c:	6824      	ldr	r4, [r4, #0]
 8008a7e:	2c00      	cmp	r4, #0
 8008a80:	d1f7      	bne.n	8008a72 <_fwalk_reent+0xe>
 8008a82:	4638      	mov	r0, r7
 8008a84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a88:	89ab      	ldrh	r3, [r5, #12]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d907      	bls.n	8008a9e <_fwalk_reent+0x3a>
 8008a8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008a92:	3301      	adds	r3, #1
 8008a94:	d003      	beq.n	8008a9e <_fwalk_reent+0x3a>
 8008a96:	4629      	mov	r1, r5
 8008a98:	4630      	mov	r0, r6
 8008a9a:	47c0      	blx	r8
 8008a9c:	4307      	orrs	r7, r0
 8008a9e:	3568      	adds	r5, #104	; 0x68
 8008aa0:	e7e9      	b.n	8008a76 <_fwalk_reent+0x12>
	...

08008aa4 <__libc_init_array>:
 8008aa4:	b570      	push	{r4, r5, r6, lr}
 8008aa6:	4d0d      	ldr	r5, [pc, #52]	; (8008adc <__libc_init_array+0x38>)
 8008aa8:	4c0d      	ldr	r4, [pc, #52]	; (8008ae0 <__libc_init_array+0x3c>)
 8008aaa:	1b64      	subs	r4, r4, r5
 8008aac:	10a4      	asrs	r4, r4, #2
 8008aae:	2600      	movs	r6, #0
 8008ab0:	42a6      	cmp	r6, r4
 8008ab2:	d109      	bne.n	8008ac8 <__libc_init_array+0x24>
 8008ab4:	4d0b      	ldr	r5, [pc, #44]	; (8008ae4 <__libc_init_array+0x40>)
 8008ab6:	4c0c      	ldr	r4, [pc, #48]	; (8008ae8 <__libc_init_array+0x44>)
 8008ab8:	f001 fe32 	bl	800a720 <_init>
 8008abc:	1b64      	subs	r4, r4, r5
 8008abe:	10a4      	asrs	r4, r4, #2
 8008ac0:	2600      	movs	r6, #0
 8008ac2:	42a6      	cmp	r6, r4
 8008ac4:	d105      	bne.n	8008ad2 <__libc_init_array+0x2e>
 8008ac6:	bd70      	pop	{r4, r5, r6, pc}
 8008ac8:	f855 3b04 	ldr.w	r3, [r5], #4
 8008acc:	4798      	blx	r3
 8008ace:	3601      	adds	r6, #1
 8008ad0:	e7ee      	b.n	8008ab0 <__libc_init_array+0xc>
 8008ad2:	f855 3b04 	ldr.w	r3, [r5], #4
 8008ad6:	4798      	blx	r3
 8008ad8:	3601      	adds	r6, #1
 8008ada:	e7f2      	b.n	8008ac2 <__libc_init_array+0x1e>
 8008adc:	0800ab0c 	.word	0x0800ab0c
 8008ae0:	0800ab0c 	.word	0x0800ab0c
 8008ae4:	0800ab0c 	.word	0x0800ab0c
 8008ae8:	0800ab10 	.word	0x0800ab10

08008aec <__retarget_lock_init_recursive>:
 8008aec:	4770      	bx	lr

08008aee <__retarget_lock_acquire_recursive>:
 8008aee:	4770      	bx	lr

08008af0 <__retarget_lock_release_recursive>:
 8008af0:	4770      	bx	lr

08008af2 <memcpy>:
 8008af2:	440a      	add	r2, r1
 8008af4:	4291      	cmp	r1, r2
 8008af6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008afa:	d100      	bne.n	8008afe <memcpy+0xc>
 8008afc:	4770      	bx	lr
 8008afe:	b510      	push	{r4, lr}
 8008b00:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008b04:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008b08:	4291      	cmp	r1, r2
 8008b0a:	d1f9      	bne.n	8008b00 <memcpy+0xe>
 8008b0c:	bd10      	pop	{r4, pc}

08008b0e <memset>:
 8008b0e:	4402      	add	r2, r0
 8008b10:	4603      	mov	r3, r0
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d100      	bne.n	8008b18 <memset+0xa>
 8008b16:	4770      	bx	lr
 8008b18:	f803 1b01 	strb.w	r1, [r3], #1
 8008b1c:	e7f9      	b.n	8008b12 <memset+0x4>
	...

08008b20 <sbrk_aligned>:
 8008b20:	b570      	push	{r4, r5, r6, lr}
 8008b22:	4e0e      	ldr	r6, [pc, #56]	; (8008b5c <sbrk_aligned+0x3c>)
 8008b24:	460c      	mov	r4, r1
 8008b26:	6831      	ldr	r1, [r6, #0]
 8008b28:	4605      	mov	r5, r0
 8008b2a:	b911      	cbnz	r1, 8008b32 <sbrk_aligned+0x12>
 8008b2c:	f000 f984 	bl	8008e38 <_sbrk_r>
 8008b30:	6030      	str	r0, [r6, #0]
 8008b32:	4621      	mov	r1, r4
 8008b34:	4628      	mov	r0, r5
 8008b36:	f000 f97f 	bl	8008e38 <_sbrk_r>
 8008b3a:	1c43      	adds	r3, r0, #1
 8008b3c:	d00a      	beq.n	8008b54 <sbrk_aligned+0x34>
 8008b3e:	1cc4      	adds	r4, r0, #3
 8008b40:	f024 0403 	bic.w	r4, r4, #3
 8008b44:	42a0      	cmp	r0, r4
 8008b46:	d007      	beq.n	8008b58 <sbrk_aligned+0x38>
 8008b48:	1a21      	subs	r1, r4, r0
 8008b4a:	4628      	mov	r0, r5
 8008b4c:	f000 f974 	bl	8008e38 <_sbrk_r>
 8008b50:	3001      	adds	r0, #1
 8008b52:	d101      	bne.n	8008b58 <sbrk_aligned+0x38>
 8008b54:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8008b58:	4620      	mov	r0, r4
 8008b5a:	bd70      	pop	{r4, r5, r6, pc}
 8008b5c:	20004bc4 	.word	0x20004bc4

08008b60 <_malloc_r>:
 8008b60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b64:	1ccd      	adds	r5, r1, #3
 8008b66:	f025 0503 	bic.w	r5, r5, #3
 8008b6a:	3508      	adds	r5, #8
 8008b6c:	2d0c      	cmp	r5, #12
 8008b6e:	bf38      	it	cc
 8008b70:	250c      	movcc	r5, #12
 8008b72:	2d00      	cmp	r5, #0
 8008b74:	4607      	mov	r7, r0
 8008b76:	db01      	blt.n	8008b7c <_malloc_r+0x1c>
 8008b78:	42a9      	cmp	r1, r5
 8008b7a:	d905      	bls.n	8008b88 <_malloc_r+0x28>
 8008b7c:	230c      	movs	r3, #12
 8008b7e:	603b      	str	r3, [r7, #0]
 8008b80:	2600      	movs	r6, #0
 8008b82:	4630      	mov	r0, r6
 8008b84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b88:	4e2e      	ldr	r6, [pc, #184]	; (8008c44 <_malloc_r+0xe4>)
 8008b8a:	f000 fc13 	bl	80093b4 <__malloc_lock>
 8008b8e:	6833      	ldr	r3, [r6, #0]
 8008b90:	461c      	mov	r4, r3
 8008b92:	bb34      	cbnz	r4, 8008be2 <_malloc_r+0x82>
 8008b94:	4629      	mov	r1, r5
 8008b96:	4638      	mov	r0, r7
 8008b98:	f7ff ffc2 	bl	8008b20 <sbrk_aligned>
 8008b9c:	1c43      	adds	r3, r0, #1
 8008b9e:	4604      	mov	r4, r0
 8008ba0:	d14d      	bne.n	8008c3e <_malloc_r+0xde>
 8008ba2:	6834      	ldr	r4, [r6, #0]
 8008ba4:	4626      	mov	r6, r4
 8008ba6:	2e00      	cmp	r6, #0
 8008ba8:	d140      	bne.n	8008c2c <_malloc_r+0xcc>
 8008baa:	6823      	ldr	r3, [r4, #0]
 8008bac:	4631      	mov	r1, r6
 8008bae:	4638      	mov	r0, r7
 8008bb0:	eb04 0803 	add.w	r8, r4, r3
 8008bb4:	f000 f940 	bl	8008e38 <_sbrk_r>
 8008bb8:	4580      	cmp	r8, r0
 8008bba:	d13a      	bne.n	8008c32 <_malloc_r+0xd2>
 8008bbc:	6821      	ldr	r1, [r4, #0]
 8008bbe:	3503      	adds	r5, #3
 8008bc0:	1a6d      	subs	r5, r5, r1
 8008bc2:	f025 0503 	bic.w	r5, r5, #3
 8008bc6:	3508      	adds	r5, #8
 8008bc8:	2d0c      	cmp	r5, #12
 8008bca:	bf38      	it	cc
 8008bcc:	250c      	movcc	r5, #12
 8008bce:	4629      	mov	r1, r5
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	f7ff ffa5 	bl	8008b20 <sbrk_aligned>
 8008bd6:	3001      	adds	r0, #1
 8008bd8:	d02b      	beq.n	8008c32 <_malloc_r+0xd2>
 8008bda:	6823      	ldr	r3, [r4, #0]
 8008bdc:	442b      	add	r3, r5
 8008bde:	6023      	str	r3, [r4, #0]
 8008be0:	e00e      	b.n	8008c00 <_malloc_r+0xa0>
 8008be2:	6822      	ldr	r2, [r4, #0]
 8008be4:	1b52      	subs	r2, r2, r5
 8008be6:	d41e      	bmi.n	8008c26 <_malloc_r+0xc6>
 8008be8:	2a0b      	cmp	r2, #11
 8008bea:	d916      	bls.n	8008c1a <_malloc_r+0xba>
 8008bec:	1961      	adds	r1, r4, r5
 8008bee:	42a3      	cmp	r3, r4
 8008bf0:	6025      	str	r5, [r4, #0]
 8008bf2:	bf18      	it	ne
 8008bf4:	6059      	strne	r1, [r3, #4]
 8008bf6:	6863      	ldr	r3, [r4, #4]
 8008bf8:	bf08      	it	eq
 8008bfa:	6031      	streq	r1, [r6, #0]
 8008bfc:	5162      	str	r2, [r4, r5]
 8008bfe:	604b      	str	r3, [r1, #4]
 8008c00:	4638      	mov	r0, r7
 8008c02:	f104 060b 	add.w	r6, r4, #11
 8008c06:	f000 fbdb 	bl	80093c0 <__malloc_unlock>
 8008c0a:	f026 0607 	bic.w	r6, r6, #7
 8008c0e:	1d23      	adds	r3, r4, #4
 8008c10:	1af2      	subs	r2, r6, r3
 8008c12:	d0b6      	beq.n	8008b82 <_malloc_r+0x22>
 8008c14:	1b9b      	subs	r3, r3, r6
 8008c16:	50a3      	str	r3, [r4, r2]
 8008c18:	e7b3      	b.n	8008b82 <_malloc_r+0x22>
 8008c1a:	6862      	ldr	r2, [r4, #4]
 8008c1c:	42a3      	cmp	r3, r4
 8008c1e:	bf0c      	ite	eq
 8008c20:	6032      	streq	r2, [r6, #0]
 8008c22:	605a      	strne	r2, [r3, #4]
 8008c24:	e7ec      	b.n	8008c00 <_malloc_r+0xa0>
 8008c26:	4623      	mov	r3, r4
 8008c28:	6864      	ldr	r4, [r4, #4]
 8008c2a:	e7b2      	b.n	8008b92 <_malloc_r+0x32>
 8008c2c:	4634      	mov	r4, r6
 8008c2e:	6876      	ldr	r6, [r6, #4]
 8008c30:	e7b9      	b.n	8008ba6 <_malloc_r+0x46>
 8008c32:	230c      	movs	r3, #12
 8008c34:	603b      	str	r3, [r7, #0]
 8008c36:	4638      	mov	r0, r7
 8008c38:	f000 fbc2 	bl	80093c0 <__malloc_unlock>
 8008c3c:	e7a1      	b.n	8008b82 <_malloc_r+0x22>
 8008c3e:	6025      	str	r5, [r4, #0]
 8008c40:	e7de      	b.n	8008c00 <_malloc_r+0xa0>
 8008c42:	bf00      	nop
 8008c44:	20004bc0 	.word	0x20004bc0

08008c48 <iprintf>:
 8008c48:	b40f      	push	{r0, r1, r2, r3}
 8008c4a:	4b0a      	ldr	r3, [pc, #40]	; (8008c74 <iprintf+0x2c>)
 8008c4c:	b513      	push	{r0, r1, r4, lr}
 8008c4e:	681c      	ldr	r4, [r3, #0]
 8008c50:	b124      	cbz	r4, 8008c5c <iprintf+0x14>
 8008c52:	69a3      	ldr	r3, [r4, #24]
 8008c54:	b913      	cbnz	r3, 8008c5c <iprintf+0x14>
 8008c56:	4620      	mov	r0, r4
 8008c58:	f7ff fe86 	bl	8008968 <__sinit>
 8008c5c:	ab05      	add	r3, sp, #20
 8008c5e:	9a04      	ldr	r2, [sp, #16]
 8008c60:	68a1      	ldr	r1, [r4, #8]
 8008c62:	9301      	str	r3, [sp, #4]
 8008c64:	4620      	mov	r0, r4
 8008c66:	f000 ff55 	bl	8009b14 <_vfiprintf_r>
 8008c6a:	b002      	add	sp, #8
 8008c6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008c70:	b004      	add	sp, #16
 8008c72:	4770      	bx	lr
 8008c74:	2000005c 	.word	0x2000005c

08008c78 <_puts_r>:
 8008c78:	b570      	push	{r4, r5, r6, lr}
 8008c7a:	460e      	mov	r6, r1
 8008c7c:	4605      	mov	r5, r0
 8008c7e:	b118      	cbz	r0, 8008c88 <_puts_r+0x10>
 8008c80:	6983      	ldr	r3, [r0, #24]
 8008c82:	b90b      	cbnz	r3, 8008c88 <_puts_r+0x10>
 8008c84:	f7ff fe70 	bl	8008968 <__sinit>
 8008c88:	69ab      	ldr	r3, [r5, #24]
 8008c8a:	68ac      	ldr	r4, [r5, #8]
 8008c8c:	b913      	cbnz	r3, 8008c94 <_puts_r+0x1c>
 8008c8e:	4628      	mov	r0, r5
 8008c90:	f7ff fe6a 	bl	8008968 <__sinit>
 8008c94:	4b2c      	ldr	r3, [pc, #176]	; (8008d48 <_puts_r+0xd0>)
 8008c96:	429c      	cmp	r4, r3
 8008c98:	d120      	bne.n	8008cdc <_puts_r+0x64>
 8008c9a:	686c      	ldr	r4, [r5, #4]
 8008c9c:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008c9e:	07db      	lsls	r3, r3, #31
 8008ca0:	d405      	bmi.n	8008cae <_puts_r+0x36>
 8008ca2:	89a3      	ldrh	r3, [r4, #12]
 8008ca4:	0598      	lsls	r0, r3, #22
 8008ca6:	d402      	bmi.n	8008cae <_puts_r+0x36>
 8008ca8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008caa:	f7ff ff20 	bl	8008aee <__retarget_lock_acquire_recursive>
 8008cae:	89a3      	ldrh	r3, [r4, #12]
 8008cb0:	0719      	lsls	r1, r3, #28
 8008cb2:	d51d      	bpl.n	8008cf0 <_puts_r+0x78>
 8008cb4:	6923      	ldr	r3, [r4, #16]
 8008cb6:	b1db      	cbz	r3, 8008cf0 <_puts_r+0x78>
 8008cb8:	3e01      	subs	r6, #1
 8008cba:	68a3      	ldr	r3, [r4, #8]
 8008cbc:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008cc0:	3b01      	subs	r3, #1
 8008cc2:	60a3      	str	r3, [r4, #8]
 8008cc4:	bb39      	cbnz	r1, 8008d16 <_puts_r+0x9e>
 8008cc6:	2b00      	cmp	r3, #0
 8008cc8:	da38      	bge.n	8008d3c <_puts_r+0xc4>
 8008cca:	4622      	mov	r2, r4
 8008ccc:	210a      	movs	r1, #10
 8008cce:	4628      	mov	r0, r5
 8008cd0:	f000 f954 	bl	8008f7c <__swbuf_r>
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d011      	beq.n	8008cfc <_puts_r+0x84>
 8008cd8:	250a      	movs	r5, #10
 8008cda:	e011      	b.n	8008d00 <_puts_r+0x88>
 8008cdc:	4b1b      	ldr	r3, [pc, #108]	; (8008d4c <_puts_r+0xd4>)
 8008cde:	429c      	cmp	r4, r3
 8008ce0:	d101      	bne.n	8008ce6 <_puts_r+0x6e>
 8008ce2:	68ac      	ldr	r4, [r5, #8]
 8008ce4:	e7da      	b.n	8008c9c <_puts_r+0x24>
 8008ce6:	4b1a      	ldr	r3, [pc, #104]	; (8008d50 <_puts_r+0xd8>)
 8008ce8:	429c      	cmp	r4, r3
 8008cea:	bf08      	it	eq
 8008cec:	68ec      	ldreq	r4, [r5, #12]
 8008cee:	e7d5      	b.n	8008c9c <_puts_r+0x24>
 8008cf0:	4621      	mov	r1, r4
 8008cf2:	4628      	mov	r0, r5
 8008cf4:	f000 f9a6 	bl	8009044 <__swsetup_r>
 8008cf8:	2800      	cmp	r0, #0
 8008cfa:	d0dd      	beq.n	8008cb8 <_puts_r+0x40>
 8008cfc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8008d00:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008d02:	07da      	lsls	r2, r3, #31
 8008d04:	d405      	bmi.n	8008d12 <_puts_r+0x9a>
 8008d06:	89a3      	ldrh	r3, [r4, #12]
 8008d08:	059b      	lsls	r3, r3, #22
 8008d0a:	d402      	bmi.n	8008d12 <_puts_r+0x9a>
 8008d0c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008d0e:	f7ff feef 	bl	8008af0 <__retarget_lock_release_recursive>
 8008d12:	4628      	mov	r0, r5
 8008d14:	bd70      	pop	{r4, r5, r6, pc}
 8008d16:	2b00      	cmp	r3, #0
 8008d18:	da04      	bge.n	8008d24 <_puts_r+0xac>
 8008d1a:	69a2      	ldr	r2, [r4, #24]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	dc06      	bgt.n	8008d2e <_puts_r+0xb6>
 8008d20:	290a      	cmp	r1, #10
 8008d22:	d004      	beq.n	8008d2e <_puts_r+0xb6>
 8008d24:	6823      	ldr	r3, [r4, #0]
 8008d26:	1c5a      	adds	r2, r3, #1
 8008d28:	6022      	str	r2, [r4, #0]
 8008d2a:	7019      	strb	r1, [r3, #0]
 8008d2c:	e7c5      	b.n	8008cba <_puts_r+0x42>
 8008d2e:	4622      	mov	r2, r4
 8008d30:	4628      	mov	r0, r5
 8008d32:	f000 f923 	bl	8008f7c <__swbuf_r>
 8008d36:	3001      	adds	r0, #1
 8008d38:	d1bf      	bne.n	8008cba <_puts_r+0x42>
 8008d3a:	e7df      	b.n	8008cfc <_puts_r+0x84>
 8008d3c:	6823      	ldr	r3, [r4, #0]
 8008d3e:	250a      	movs	r5, #10
 8008d40:	1c5a      	adds	r2, r3, #1
 8008d42:	6022      	str	r2, [r4, #0]
 8008d44:	701d      	strb	r5, [r3, #0]
 8008d46:	e7db      	b.n	8008d00 <_puts_r+0x88>
 8008d48:	0800a970 	.word	0x0800a970
 8008d4c:	0800a990 	.word	0x0800a990
 8008d50:	0800a950 	.word	0x0800a950

08008d54 <puts>:
 8008d54:	4b02      	ldr	r3, [pc, #8]	; (8008d60 <puts+0xc>)
 8008d56:	4601      	mov	r1, r0
 8008d58:	6818      	ldr	r0, [r3, #0]
 8008d5a:	f7ff bf8d 	b.w	8008c78 <_puts_r>
 8008d5e:	bf00      	nop
 8008d60:	2000005c 	.word	0x2000005c

08008d64 <cleanup_glue>:
 8008d64:	b538      	push	{r3, r4, r5, lr}
 8008d66:	460c      	mov	r4, r1
 8008d68:	6809      	ldr	r1, [r1, #0]
 8008d6a:	4605      	mov	r5, r0
 8008d6c:	b109      	cbz	r1, 8008d72 <cleanup_glue+0xe>
 8008d6e:	f7ff fff9 	bl	8008d64 <cleanup_glue>
 8008d72:	4621      	mov	r1, r4
 8008d74:	4628      	mov	r0, r5
 8008d76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d7a:	f000 bb27 	b.w	80093cc <_free_r>
	...

08008d80 <_reclaim_reent>:
 8008d80:	4b2c      	ldr	r3, [pc, #176]	; (8008e34 <_reclaim_reent+0xb4>)
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	4283      	cmp	r3, r0
 8008d86:	b570      	push	{r4, r5, r6, lr}
 8008d88:	4604      	mov	r4, r0
 8008d8a:	d051      	beq.n	8008e30 <_reclaim_reent+0xb0>
 8008d8c:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8008d8e:	b143      	cbz	r3, 8008da2 <_reclaim_reent+0x22>
 8008d90:	68db      	ldr	r3, [r3, #12]
 8008d92:	2b00      	cmp	r3, #0
 8008d94:	d14a      	bne.n	8008e2c <_reclaim_reent+0xac>
 8008d96:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008d98:	6819      	ldr	r1, [r3, #0]
 8008d9a:	b111      	cbz	r1, 8008da2 <_reclaim_reent+0x22>
 8008d9c:	4620      	mov	r0, r4
 8008d9e:	f000 fb15 	bl	80093cc <_free_r>
 8008da2:	6961      	ldr	r1, [r4, #20]
 8008da4:	b111      	cbz	r1, 8008dac <_reclaim_reent+0x2c>
 8008da6:	4620      	mov	r0, r4
 8008da8:	f000 fb10 	bl	80093cc <_free_r>
 8008dac:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8008dae:	b111      	cbz	r1, 8008db6 <_reclaim_reent+0x36>
 8008db0:	4620      	mov	r0, r4
 8008db2:	f000 fb0b 	bl	80093cc <_free_r>
 8008db6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008db8:	b111      	cbz	r1, 8008dc0 <_reclaim_reent+0x40>
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f000 fb06 	bl	80093cc <_free_r>
 8008dc0:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8008dc2:	b111      	cbz	r1, 8008dca <_reclaim_reent+0x4a>
 8008dc4:	4620      	mov	r0, r4
 8008dc6:	f000 fb01 	bl	80093cc <_free_r>
 8008dca:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8008dcc:	b111      	cbz	r1, 8008dd4 <_reclaim_reent+0x54>
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f000 fafc 	bl	80093cc <_free_r>
 8008dd4:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8008dd6:	b111      	cbz	r1, 8008dde <_reclaim_reent+0x5e>
 8008dd8:	4620      	mov	r0, r4
 8008dda:	f000 faf7 	bl	80093cc <_free_r>
 8008dde:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8008de0:	b111      	cbz	r1, 8008de8 <_reclaim_reent+0x68>
 8008de2:	4620      	mov	r0, r4
 8008de4:	f000 faf2 	bl	80093cc <_free_r>
 8008de8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008dea:	b111      	cbz	r1, 8008df2 <_reclaim_reent+0x72>
 8008dec:	4620      	mov	r0, r4
 8008dee:	f000 faed 	bl	80093cc <_free_r>
 8008df2:	69a3      	ldr	r3, [r4, #24]
 8008df4:	b1e3      	cbz	r3, 8008e30 <_reclaim_reent+0xb0>
 8008df6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8008df8:	4620      	mov	r0, r4
 8008dfa:	4798      	blx	r3
 8008dfc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008dfe:	b1b9      	cbz	r1, 8008e30 <_reclaim_reent+0xb0>
 8008e00:	4620      	mov	r0, r4
 8008e02:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008e06:	f7ff bfad 	b.w	8008d64 <cleanup_glue>
 8008e0a:	5949      	ldr	r1, [r1, r5]
 8008e0c:	b941      	cbnz	r1, 8008e20 <_reclaim_reent+0xa0>
 8008e0e:	3504      	adds	r5, #4
 8008e10:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008e12:	2d80      	cmp	r5, #128	; 0x80
 8008e14:	68d9      	ldr	r1, [r3, #12]
 8008e16:	d1f8      	bne.n	8008e0a <_reclaim_reent+0x8a>
 8008e18:	4620      	mov	r0, r4
 8008e1a:	f000 fad7 	bl	80093cc <_free_r>
 8008e1e:	e7ba      	b.n	8008d96 <_reclaim_reent+0x16>
 8008e20:	680e      	ldr	r6, [r1, #0]
 8008e22:	4620      	mov	r0, r4
 8008e24:	f000 fad2 	bl	80093cc <_free_r>
 8008e28:	4631      	mov	r1, r6
 8008e2a:	e7ef      	b.n	8008e0c <_reclaim_reent+0x8c>
 8008e2c:	2500      	movs	r5, #0
 8008e2e:	e7ef      	b.n	8008e10 <_reclaim_reent+0x90>
 8008e30:	bd70      	pop	{r4, r5, r6, pc}
 8008e32:	bf00      	nop
 8008e34:	2000005c 	.word	0x2000005c

08008e38 <_sbrk_r>:
 8008e38:	b538      	push	{r3, r4, r5, lr}
 8008e3a:	4d06      	ldr	r5, [pc, #24]	; (8008e54 <_sbrk_r+0x1c>)
 8008e3c:	2300      	movs	r3, #0
 8008e3e:	4604      	mov	r4, r0
 8008e40:	4608      	mov	r0, r1
 8008e42:	602b      	str	r3, [r5, #0]
 8008e44:	f7f8 f904 	bl	8001050 <_sbrk>
 8008e48:	1c43      	adds	r3, r0, #1
 8008e4a:	d102      	bne.n	8008e52 <_sbrk_r+0x1a>
 8008e4c:	682b      	ldr	r3, [r5, #0]
 8008e4e:	b103      	cbz	r3, 8008e52 <_sbrk_r+0x1a>
 8008e50:	6023      	str	r3, [r4, #0]
 8008e52:	bd38      	pop	{r3, r4, r5, pc}
 8008e54:	20004bc8 	.word	0x20004bc8

08008e58 <siprintf>:
 8008e58:	b40e      	push	{r1, r2, r3}
 8008e5a:	b500      	push	{lr}
 8008e5c:	b09c      	sub	sp, #112	; 0x70
 8008e5e:	ab1d      	add	r3, sp, #116	; 0x74
 8008e60:	9002      	str	r0, [sp, #8]
 8008e62:	9006      	str	r0, [sp, #24]
 8008e64:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008e68:	4809      	ldr	r0, [pc, #36]	; (8008e90 <siprintf+0x38>)
 8008e6a:	9107      	str	r1, [sp, #28]
 8008e6c:	9104      	str	r1, [sp, #16]
 8008e6e:	4909      	ldr	r1, [pc, #36]	; (8008e94 <siprintf+0x3c>)
 8008e70:	f853 2b04 	ldr.w	r2, [r3], #4
 8008e74:	9105      	str	r1, [sp, #20]
 8008e76:	6800      	ldr	r0, [r0, #0]
 8008e78:	9301      	str	r3, [sp, #4]
 8008e7a:	a902      	add	r1, sp, #8
 8008e7c:	f000 fb4e 	bl	800951c <_svfiprintf_r>
 8008e80:	9b02      	ldr	r3, [sp, #8]
 8008e82:	2200      	movs	r2, #0
 8008e84:	701a      	strb	r2, [r3, #0]
 8008e86:	b01c      	add	sp, #112	; 0x70
 8008e88:	f85d eb04 	ldr.w	lr, [sp], #4
 8008e8c:	b003      	add	sp, #12
 8008e8e:	4770      	bx	lr
 8008e90:	2000005c 	.word	0x2000005c
 8008e94:	ffff0208 	.word	0xffff0208

08008e98 <siscanf>:
 8008e98:	b40e      	push	{r1, r2, r3}
 8008e9a:	b510      	push	{r4, lr}
 8008e9c:	b09f      	sub	sp, #124	; 0x7c
 8008e9e:	ac21      	add	r4, sp, #132	; 0x84
 8008ea0:	f44f 7101 	mov.w	r1, #516	; 0x204
 8008ea4:	f854 2b04 	ldr.w	r2, [r4], #4
 8008ea8:	9201      	str	r2, [sp, #4]
 8008eaa:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008eae:	9004      	str	r0, [sp, #16]
 8008eb0:	9008      	str	r0, [sp, #32]
 8008eb2:	f7f7 f98d 	bl	80001d0 <strlen>
 8008eb6:	4b0c      	ldr	r3, [pc, #48]	; (8008ee8 <siscanf+0x50>)
 8008eb8:	9005      	str	r0, [sp, #20]
 8008eba:	9009      	str	r0, [sp, #36]	; 0x24
 8008ebc:	930d      	str	r3, [sp, #52]	; 0x34
 8008ebe:	480b      	ldr	r0, [pc, #44]	; (8008eec <siscanf+0x54>)
 8008ec0:	9a01      	ldr	r2, [sp, #4]
 8008ec2:	6800      	ldr	r0, [r0, #0]
 8008ec4:	9403      	str	r4, [sp, #12]
 8008ec6:	2300      	movs	r3, #0
 8008ec8:	9311      	str	r3, [sp, #68]	; 0x44
 8008eca:	9316      	str	r3, [sp, #88]	; 0x58
 8008ecc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008ed0:	f8ad 301e 	strh.w	r3, [sp, #30]
 8008ed4:	a904      	add	r1, sp, #16
 8008ed6:	4623      	mov	r3, r4
 8008ed8:	f000 fc7a 	bl	80097d0 <__ssvfiscanf_r>
 8008edc:	b01f      	add	sp, #124	; 0x7c
 8008ede:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ee2:	b003      	add	sp, #12
 8008ee4:	4770      	bx	lr
 8008ee6:	bf00      	nop
 8008ee8:	08008f13 	.word	0x08008f13
 8008eec:	2000005c 	.word	0x2000005c

08008ef0 <__sread>:
 8008ef0:	b510      	push	{r4, lr}
 8008ef2:	460c      	mov	r4, r1
 8008ef4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008ef8:	f001 fa22 	bl	800a340 <_read_r>
 8008efc:	2800      	cmp	r0, #0
 8008efe:	bfab      	itete	ge
 8008f00:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8008f02:	89a3      	ldrhlt	r3, [r4, #12]
 8008f04:	181b      	addge	r3, r3, r0
 8008f06:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8008f0a:	bfac      	ite	ge
 8008f0c:	6563      	strge	r3, [r4, #84]	; 0x54
 8008f0e:	81a3      	strhlt	r3, [r4, #12]
 8008f10:	bd10      	pop	{r4, pc}

08008f12 <__seofread>:
 8008f12:	2000      	movs	r0, #0
 8008f14:	4770      	bx	lr

08008f16 <__swrite>:
 8008f16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f1a:	461f      	mov	r7, r3
 8008f1c:	898b      	ldrh	r3, [r1, #12]
 8008f1e:	05db      	lsls	r3, r3, #23
 8008f20:	4605      	mov	r5, r0
 8008f22:	460c      	mov	r4, r1
 8008f24:	4616      	mov	r6, r2
 8008f26:	d505      	bpl.n	8008f34 <__swrite+0x1e>
 8008f28:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f2c:	2302      	movs	r3, #2
 8008f2e:	2200      	movs	r2, #0
 8008f30:	f000 f9c8 	bl	80092c4 <_lseek_r>
 8008f34:	89a3      	ldrh	r3, [r4, #12]
 8008f36:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008f3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008f3e:	81a3      	strh	r3, [r4, #12]
 8008f40:	4632      	mov	r2, r6
 8008f42:	463b      	mov	r3, r7
 8008f44:	4628      	mov	r0, r5
 8008f46:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008f4a:	f000 b869 	b.w	8009020 <_write_r>

08008f4e <__sseek>:
 8008f4e:	b510      	push	{r4, lr}
 8008f50:	460c      	mov	r4, r1
 8008f52:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f56:	f000 f9b5 	bl	80092c4 <_lseek_r>
 8008f5a:	1c43      	adds	r3, r0, #1
 8008f5c:	89a3      	ldrh	r3, [r4, #12]
 8008f5e:	bf15      	itete	ne
 8008f60:	6560      	strne	r0, [r4, #84]	; 0x54
 8008f62:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8008f66:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008f6a:	81a3      	strheq	r3, [r4, #12]
 8008f6c:	bf18      	it	ne
 8008f6e:	81a3      	strhne	r3, [r4, #12]
 8008f70:	bd10      	pop	{r4, pc}

08008f72 <__sclose>:
 8008f72:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f76:	f000 b8d3 	b.w	8009120 <_close_r>
	...

08008f7c <__swbuf_r>:
 8008f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f7e:	460e      	mov	r6, r1
 8008f80:	4614      	mov	r4, r2
 8008f82:	4605      	mov	r5, r0
 8008f84:	b118      	cbz	r0, 8008f8e <__swbuf_r+0x12>
 8008f86:	6983      	ldr	r3, [r0, #24]
 8008f88:	b90b      	cbnz	r3, 8008f8e <__swbuf_r+0x12>
 8008f8a:	f7ff fced 	bl	8008968 <__sinit>
 8008f8e:	4b21      	ldr	r3, [pc, #132]	; (8009014 <__swbuf_r+0x98>)
 8008f90:	429c      	cmp	r4, r3
 8008f92:	d12b      	bne.n	8008fec <__swbuf_r+0x70>
 8008f94:	686c      	ldr	r4, [r5, #4]
 8008f96:	69a3      	ldr	r3, [r4, #24]
 8008f98:	60a3      	str	r3, [r4, #8]
 8008f9a:	89a3      	ldrh	r3, [r4, #12]
 8008f9c:	071a      	lsls	r2, r3, #28
 8008f9e:	d52f      	bpl.n	8009000 <__swbuf_r+0x84>
 8008fa0:	6923      	ldr	r3, [r4, #16]
 8008fa2:	b36b      	cbz	r3, 8009000 <__swbuf_r+0x84>
 8008fa4:	6923      	ldr	r3, [r4, #16]
 8008fa6:	6820      	ldr	r0, [r4, #0]
 8008fa8:	1ac0      	subs	r0, r0, r3
 8008faa:	6963      	ldr	r3, [r4, #20]
 8008fac:	b2f6      	uxtb	r6, r6
 8008fae:	4283      	cmp	r3, r0
 8008fb0:	4637      	mov	r7, r6
 8008fb2:	dc04      	bgt.n	8008fbe <__swbuf_r+0x42>
 8008fb4:	4621      	mov	r1, r4
 8008fb6:	4628      	mov	r0, r5
 8008fb8:	f000 f948 	bl	800924c <_fflush_r>
 8008fbc:	bb30      	cbnz	r0, 800900c <__swbuf_r+0x90>
 8008fbe:	68a3      	ldr	r3, [r4, #8]
 8008fc0:	3b01      	subs	r3, #1
 8008fc2:	60a3      	str	r3, [r4, #8]
 8008fc4:	6823      	ldr	r3, [r4, #0]
 8008fc6:	1c5a      	adds	r2, r3, #1
 8008fc8:	6022      	str	r2, [r4, #0]
 8008fca:	701e      	strb	r6, [r3, #0]
 8008fcc:	6963      	ldr	r3, [r4, #20]
 8008fce:	3001      	adds	r0, #1
 8008fd0:	4283      	cmp	r3, r0
 8008fd2:	d004      	beq.n	8008fde <__swbuf_r+0x62>
 8008fd4:	89a3      	ldrh	r3, [r4, #12]
 8008fd6:	07db      	lsls	r3, r3, #31
 8008fd8:	d506      	bpl.n	8008fe8 <__swbuf_r+0x6c>
 8008fda:	2e0a      	cmp	r6, #10
 8008fdc:	d104      	bne.n	8008fe8 <__swbuf_r+0x6c>
 8008fde:	4621      	mov	r1, r4
 8008fe0:	4628      	mov	r0, r5
 8008fe2:	f000 f933 	bl	800924c <_fflush_r>
 8008fe6:	b988      	cbnz	r0, 800900c <__swbuf_r+0x90>
 8008fe8:	4638      	mov	r0, r7
 8008fea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008fec:	4b0a      	ldr	r3, [pc, #40]	; (8009018 <__swbuf_r+0x9c>)
 8008fee:	429c      	cmp	r4, r3
 8008ff0:	d101      	bne.n	8008ff6 <__swbuf_r+0x7a>
 8008ff2:	68ac      	ldr	r4, [r5, #8]
 8008ff4:	e7cf      	b.n	8008f96 <__swbuf_r+0x1a>
 8008ff6:	4b09      	ldr	r3, [pc, #36]	; (800901c <__swbuf_r+0xa0>)
 8008ff8:	429c      	cmp	r4, r3
 8008ffa:	bf08      	it	eq
 8008ffc:	68ec      	ldreq	r4, [r5, #12]
 8008ffe:	e7ca      	b.n	8008f96 <__swbuf_r+0x1a>
 8009000:	4621      	mov	r1, r4
 8009002:	4628      	mov	r0, r5
 8009004:	f000 f81e 	bl	8009044 <__swsetup_r>
 8009008:	2800      	cmp	r0, #0
 800900a:	d0cb      	beq.n	8008fa4 <__swbuf_r+0x28>
 800900c:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 8009010:	e7ea      	b.n	8008fe8 <__swbuf_r+0x6c>
 8009012:	bf00      	nop
 8009014:	0800a970 	.word	0x0800a970
 8009018:	0800a990 	.word	0x0800a990
 800901c:	0800a950 	.word	0x0800a950

08009020 <_write_r>:
 8009020:	b538      	push	{r3, r4, r5, lr}
 8009022:	4d07      	ldr	r5, [pc, #28]	; (8009040 <_write_r+0x20>)
 8009024:	4604      	mov	r4, r0
 8009026:	4608      	mov	r0, r1
 8009028:	4611      	mov	r1, r2
 800902a:	2200      	movs	r2, #0
 800902c:	602a      	str	r2, [r5, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	f7f7 fec2 	bl	8000db8 <_write>
 8009034:	1c43      	adds	r3, r0, #1
 8009036:	d102      	bne.n	800903e <_write_r+0x1e>
 8009038:	682b      	ldr	r3, [r5, #0]
 800903a:	b103      	cbz	r3, 800903e <_write_r+0x1e>
 800903c:	6023      	str	r3, [r4, #0]
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	20004bc8 	.word	0x20004bc8

08009044 <__swsetup_r>:
 8009044:	4b32      	ldr	r3, [pc, #200]	; (8009110 <__swsetup_r+0xcc>)
 8009046:	b570      	push	{r4, r5, r6, lr}
 8009048:	681d      	ldr	r5, [r3, #0]
 800904a:	4606      	mov	r6, r0
 800904c:	460c      	mov	r4, r1
 800904e:	b125      	cbz	r5, 800905a <__swsetup_r+0x16>
 8009050:	69ab      	ldr	r3, [r5, #24]
 8009052:	b913      	cbnz	r3, 800905a <__swsetup_r+0x16>
 8009054:	4628      	mov	r0, r5
 8009056:	f7ff fc87 	bl	8008968 <__sinit>
 800905a:	4b2e      	ldr	r3, [pc, #184]	; (8009114 <__swsetup_r+0xd0>)
 800905c:	429c      	cmp	r4, r3
 800905e:	d10f      	bne.n	8009080 <__swsetup_r+0x3c>
 8009060:	686c      	ldr	r4, [r5, #4]
 8009062:	89a3      	ldrh	r3, [r4, #12]
 8009064:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8009068:	0719      	lsls	r1, r3, #28
 800906a:	d42c      	bmi.n	80090c6 <__swsetup_r+0x82>
 800906c:	06dd      	lsls	r5, r3, #27
 800906e:	d411      	bmi.n	8009094 <__swsetup_r+0x50>
 8009070:	2309      	movs	r3, #9
 8009072:	6033      	str	r3, [r6, #0]
 8009074:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8009078:	81a3      	strh	r3, [r4, #12]
 800907a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800907e:	e03e      	b.n	80090fe <__swsetup_r+0xba>
 8009080:	4b25      	ldr	r3, [pc, #148]	; (8009118 <__swsetup_r+0xd4>)
 8009082:	429c      	cmp	r4, r3
 8009084:	d101      	bne.n	800908a <__swsetup_r+0x46>
 8009086:	68ac      	ldr	r4, [r5, #8]
 8009088:	e7eb      	b.n	8009062 <__swsetup_r+0x1e>
 800908a:	4b24      	ldr	r3, [pc, #144]	; (800911c <__swsetup_r+0xd8>)
 800908c:	429c      	cmp	r4, r3
 800908e:	bf08      	it	eq
 8009090:	68ec      	ldreq	r4, [r5, #12]
 8009092:	e7e6      	b.n	8009062 <__swsetup_r+0x1e>
 8009094:	0758      	lsls	r0, r3, #29
 8009096:	d512      	bpl.n	80090be <__swsetup_r+0x7a>
 8009098:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800909a:	b141      	cbz	r1, 80090ae <__swsetup_r+0x6a>
 800909c:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80090a0:	4299      	cmp	r1, r3
 80090a2:	d002      	beq.n	80090aa <__swsetup_r+0x66>
 80090a4:	4630      	mov	r0, r6
 80090a6:	f000 f991 	bl	80093cc <_free_r>
 80090aa:	2300      	movs	r3, #0
 80090ac:	6363      	str	r3, [r4, #52]	; 0x34
 80090ae:	89a3      	ldrh	r3, [r4, #12]
 80090b0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80090b4:	81a3      	strh	r3, [r4, #12]
 80090b6:	2300      	movs	r3, #0
 80090b8:	6063      	str	r3, [r4, #4]
 80090ba:	6923      	ldr	r3, [r4, #16]
 80090bc:	6023      	str	r3, [r4, #0]
 80090be:	89a3      	ldrh	r3, [r4, #12]
 80090c0:	f043 0308 	orr.w	r3, r3, #8
 80090c4:	81a3      	strh	r3, [r4, #12]
 80090c6:	6923      	ldr	r3, [r4, #16]
 80090c8:	b94b      	cbnz	r3, 80090de <__swsetup_r+0x9a>
 80090ca:	89a3      	ldrh	r3, [r4, #12]
 80090cc:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80090d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80090d4:	d003      	beq.n	80090de <__swsetup_r+0x9a>
 80090d6:	4621      	mov	r1, r4
 80090d8:	4630      	mov	r0, r6
 80090da:	f000 f92b 	bl	8009334 <__smakebuf_r>
 80090de:	89a0      	ldrh	r0, [r4, #12]
 80090e0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80090e4:	f010 0301 	ands.w	r3, r0, #1
 80090e8:	d00a      	beq.n	8009100 <__swsetup_r+0xbc>
 80090ea:	2300      	movs	r3, #0
 80090ec:	60a3      	str	r3, [r4, #8]
 80090ee:	6963      	ldr	r3, [r4, #20]
 80090f0:	425b      	negs	r3, r3
 80090f2:	61a3      	str	r3, [r4, #24]
 80090f4:	6923      	ldr	r3, [r4, #16]
 80090f6:	b943      	cbnz	r3, 800910a <__swsetup_r+0xc6>
 80090f8:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80090fc:	d1ba      	bne.n	8009074 <__swsetup_r+0x30>
 80090fe:	bd70      	pop	{r4, r5, r6, pc}
 8009100:	0781      	lsls	r1, r0, #30
 8009102:	bf58      	it	pl
 8009104:	6963      	ldrpl	r3, [r4, #20]
 8009106:	60a3      	str	r3, [r4, #8]
 8009108:	e7f4      	b.n	80090f4 <__swsetup_r+0xb0>
 800910a:	2000      	movs	r0, #0
 800910c:	e7f7      	b.n	80090fe <__swsetup_r+0xba>
 800910e:	bf00      	nop
 8009110:	2000005c 	.word	0x2000005c
 8009114:	0800a970 	.word	0x0800a970
 8009118:	0800a990 	.word	0x0800a990
 800911c:	0800a950 	.word	0x0800a950

08009120 <_close_r>:
 8009120:	b538      	push	{r3, r4, r5, lr}
 8009122:	4d06      	ldr	r5, [pc, #24]	; (800913c <_close_r+0x1c>)
 8009124:	2300      	movs	r3, #0
 8009126:	4604      	mov	r4, r0
 8009128:	4608      	mov	r0, r1
 800912a:	602b      	str	r3, [r5, #0]
 800912c:	f7f7 ff5b 	bl	8000fe6 <_close>
 8009130:	1c43      	adds	r3, r0, #1
 8009132:	d102      	bne.n	800913a <_close_r+0x1a>
 8009134:	682b      	ldr	r3, [r5, #0]
 8009136:	b103      	cbz	r3, 800913a <_close_r+0x1a>
 8009138:	6023      	str	r3, [r4, #0]
 800913a:	bd38      	pop	{r3, r4, r5, pc}
 800913c:	20004bc8 	.word	0x20004bc8

08009140 <__sflush_r>:
 8009140:	898a      	ldrh	r2, [r1, #12]
 8009142:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009146:	4605      	mov	r5, r0
 8009148:	0710      	lsls	r0, r2, #28
 800914a:	460c      	mov	r4, r1
 800914c:	d458      	bmi.n	8009200 <__sflush_r+0xc0>
 800914e:	684b      	ldr	r3, [r1, #4]
 8009150:	2b00      	cmp	r3, #0
 8009152:	dc05      	bgt.n	8009160 <__sflush_r+0x20>
 8009154:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8009156:	2b00      	cmp	r3, #0
 8009158:	dc02      	bgt.n	8009160 <__sflush_r+0x20>
 800915a:	2000      	movs	r0, #0
 800915c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009160:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8009162:	2e00      	cmp	r6, #0
 8009164:	d0f9      	beq.n	800915a <__sflush_r+0x1a>
 8009166:	2300      	movs	r3, #0
 8009168:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800916c:	682f      	ldr	r7, [r5, #0]
 800916e:	602b      	str	r3, [r5, #0]
 8009170:	d032      	beq.n	80091d8 <__sflush_r+0x98>
 8009172:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	075a      	lsls	r2, r3, #29
 8009178:	d505      	bpl.n	8009186 <__sflush_r+0x46>
 800917a:	6863      	ldr	r3, [r4, #4]
 800917c:	1ac0      	subs	r0, r0, r3
 800917e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009180:	b10b      	cbz	r3, 8009186 <__sflush_r+0x46>
 8009182:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8009184:	1ac0      	subs	r0, r0, r3
 8009186:	2300      	movs	r3, #0
 8009188:	4602      	mov	r2, r0
 800918a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800918c:	6a21      	ldr	r1, [r4, #32]
 800918e:	4628      	mov	r0, r5
 8009190:	47b0      	blx	r6
 8009192:	1c43      	adds	r3, r0, #1
 8009194:	89a3      	ldrh	r3, [r4, #12]
 8009196:	d106      	bne.n	80091a6 <__sflush_r+0x66>
 8009198:	6829      	ldr	r1, [r5, #0]
 800919a:	291d      	cmp	r1, #29
 800919c:	d82c      	bhi.n	80091f8 <__sflush_r+0xb8>
 800919e:	4a2a      	ldr	r2, [pc, #168]	; (8009248 <__sflush_r+0x108>)
 80091a0:	40ca      	lsrs	r2, r1
 80091a2:	07d6      	lsls	r6, r2, #31
 80091a4:	d528      	bpl.n	80091f8 <__sflush_r+0xb8>
 80091a6:	2200      	movs	r2, #0
 80091a8:	6062      	str	r2, [r4, #4]
 80091aa:	04d9      	lsls	r1, r3, #19
 80091ac:	6922      	ldr	r2, [r4, #16]
 80091ae:	6022      	str	r2, [r4, #0]
 80091b0:	d504      	bpl.n	80091bc <__sflush_r+0x7c>
 80091b2:	1c42      	adds	r2, r0, #1
 80091b4:	d101      	bne.n	80091ba <__sflush_r+0x7a>
 80091b6:	682b      	ldr	r3, [r5, #0]
 80091b8:	b903      	cbnz	r3, 80091bc <__sflush_r+0x7c>
 80091ba:	6560      	str	r0, [r4, #84]	; 0x54
 80091bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80091be:	602f      	str	r7, [r5, #0]
 80091c0:	2900      	cmp	r1, #0
 80091c2:	d0ca      	beq.n	800915a <__sflush_r+0x1a>
 80091c4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80091c8:	4299      	cmp	r1, r3
 80091ca:	d002      	beq.n	80091d2 <__sflush_r+0x92>
 80091cc:	4628      	mov	r0, r5
 80091ce:	f000 f8fd 	bl	80093cc <_free_r>
 80091d2:	2000      	movs	r0, #0
 80091d4:	6360      	str	r0, [r4, #52]	; 0x34
 80091d6:	e7c1      	b.n	800915c <__sflush_r+0x1c>
 80091d8:	6a21      	ldr	r1, [r4, #32]
 80091da:	2301      	movs	r3, #1
 80091dc:	4628      	mov	r0, r5
 80091de:	47b0      	blx	r6
 80091e0:	1c41      	adds	r1, r0, #1
 80091e2:	d1c7      	bne.n	8009174 <__sflush_r+0x34>
 80091e4:	682b      	ldr	r3, [r5, #0]
 80091e6:	2b00      	cmp	r3, #0
 80091e8:	d0c4      	beq.n	8009174 <__sflush_r+0x34>
 80091ea:	2b1d      	cmp	r3, #29
 80091ec:	d001      	beq.n	80091f2 <__sflush_r+0xb2>
 80091ee:	2b16      	cmp	r3, #22
 80091f0:	d101      	bne.n	80091f6 <__sflush_r+0xb6>
 80091f2:	602f      	str	r7, [r5, #0]
 80091f4:	e7b1      	b.n	800915a <__sflush_r+0x1a>
 80091f6:	89a3      	ldrh	r3, [r4, #12]
 80091f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80091fc:	81a3      	strh	r3, [r4, #12]
 80091fe:	e7ad      	b.n	800915c <__sflush_r+0x1c>
 8009200:	690f      	ldr	r7, [r1, #16]
 8009202:	2f00      	cmp	r7, #0
 8009204:	d0a9      	beq.n	800915a <__sflush_r+0x1a>
 8009206:	0793      	lsls	r3, r2, #30
 8009208:	680e      	ldr	r6, [r1, #0]
 800920a:	bf08      	it	eq
 800920c:	694b      	ldreq	r3, [r1, #20]
 800920e:	600f      	str	r7, [r1, #0]
 8009210:	bf18      	it	ne
 8009212:	2300      	movne	r3, #0
 8009214:	eba6 0807 	sub.w	r8, r6, r7
 8009218:	608b      	str	r3, [r1, #8]
 800921a:	f1b8 0f00 	cmp.w	r8, #0
 800921e:	dd9c      	ble.n	800915a <__sflush_r+0x1a>
 8009220:	6a21      	ldr	r1, [r4, #32]
 8009222:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8009224:	4643      	mov	r3, r8
 8009226:	463a      	mov	r2, r7
 8009228:	4628      	mov	r0, r5
 800922a:	47b0      	blx	r6
 800922c:	2800      	cmp	r0, #0
 800922e:	dc06      	bgt.n	800923e <__sflush_r+0xfe>
 8009230:	89a3      	ldrh	r3, [r4, #12]
 8009232:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009236:	81a3      	strh	r3, [r4, #12]
 8009238:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800923c:	e78e      	b.n	800915c <__sflush_r+0x1c>
 800923e:	4407      	add	r7, r0
 8009240:	eba8 0800 	sub.w	r8, r8, r0
 8009244:	e7e9      	b.n	800921a <__sflush_r+0xda>
 8009246:	bf00      	nop
 8009248:	20400001 	.word	0x20400001

0800924c <_fflush_r>:
 800924c:	b538      	push	{r3, r4, r5, lr}
 800924e:	690b      	ldr	r3, [r1, #16]
 8009250:	4605      	mov	r5, r0
 8009252:	460c      	mov	r4, r1
 8009254:	b913      	cbnz	r3, 800925c <_fflush_r+0x10>
 8009256:	2500      	movs	r5, #0
 8009258:	4628      	mov	r0, r5
 800925a:	bd38      	pop	{r3, r4, r5, pc}
 800925c:	b118      	cbz	r0, 8009266 <_fflush_r+0x1a>
 800925e:	6983      	ldr	r3, [r0, #24]
 8009260:	b90b      	cbnz	r3, 8009266 <_fflush_r+0x1a>
 8009262:	f7ff fb81 	bl	8008968 <__sinit>
 8009266:	4b14      	ldr	r3, [pc, #80]	; (80092b8 <_fflush_r+0x6c>)
 8009268:	429c      	cmp	r4, r3
 800926a:	d11b      	bne.n	80092a4 <_fflush_r+0x58>
 800926c:	686c      	ldr	r4, [r5, #4]
 800926e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d0ef      	beq.n	8009256 <_fflush_r+0xa>
 8009276:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8009278:	07d0      	lsls	r0, r2, #31
 800927a:	d404      	bmi.n	8009286 <_fflush_r+0x3a>
 800927c:	0599      	lsls	r1, r3, #22
 800927e:	d402      	bmi.n	8009286 <_fflush_r+0x3a>
 8009280:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8009282:	f7ff fc34 	bl	8008aee <__retarget_lock_acquire_recursive>
 8009286:	4628      	mov	r0, r5
 8009288:	4621      	mov	r1, r4
 800928a:	f7ff ff59 	bl	8009140 <__sflush_r>
 800928e:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8009290:	07da      	lsls	r2, r3, #31
 8009292:	4605      	mov	r5, r0
 8009294:	d4e0      	bmi.n	8009258 <_fflush_r+0xc>
 8009296:	89a3      	ldrh	r3, [r4, #12]
 8009298:	059b      	lsls	r3, r3, #22
 800929a:	d4dd      	bmi.n	8009258 <_fflush_r+0xc>
 800929c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800929e:	f7ff fc27 	bl	8008af0 <__retarget_lock_release_recursive>
 80092a2:	e7d9      	b.n	8009258 <_fflush_r+0xc>
 80092a4:	4b05      	ldr	r3, [pc, #20]	; (80092bc <_fflush_r+0x70>)
 80092a6:	429c      	cmp	r4, r3
 80092a8:	d101      	bne.n	80092ae <_fflush_r+0x62>
 80092aa:	68ac      	ldr	r4, [r5, #8]
 80092ac:	e7df      	b.n	800926e <_fflush_r+0x22>
 80092ae:	4b04      	ldr	r3, [pc, #16]	; (80092c0 <_fflush_r+0x74>)
 80092b0:	429c      	cmp	r4, r3
 80092b2:	bf08      	it	eq
 80092b4:	68ec      	ldreq	r4, [r5, #12]
 80092b6:	e7da      	b.n	800926e <_fflush_r+0x22>
 80092b8:	0800a970 	.word	0x0800a970
 80092bc:	0800a990 	.word	0x0800a990
 80092c0:	0800a950 	.word	0x0800a950

080092c4 <_lseek_r>:
 80092c4:	b538      	push	{r3, r4, r5, lr}
 80092c6:	4d07      	ldr	r5, [pc, #28]	; (80092e4 <_lseek_r+0x20>)
 80092c8:	4604      	mov	r4, r0
 80092ca:	4608      	mov	r0, r1
 80092cc:	4611      	mov	r1, r2
 80092ce:	2200      	movs	r2, #0
 80092d0:	602a      	str	r2, [r5, #0]
 80092d2:	461a      	mov	r2, r3
 80092d4:	f7f7 feae 	bl	8001034 <_lseek>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	d102      	bne.n	80092e2 <_lseek_r+0x1e>
 80092dc:	682b      	ldr	r3, [r5, #0]
 80092de:	b103      	cbz	r3, 80092e2 <_lseek_r+0x1e>
 80092e0:	6023      	str	r3, [r4, #0]
 80092e2:	bd38      	pop	{r3, r4, r5, pc}
 80092e4:	20004bc8 	.word	0x20004bc8

080092e8 <__swhatbuf_r>:
 80092e8:	b570      	push	{r4, r5, r6, lr}
 80092ea:	460e      	mov	r6, r1
 80092ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80092f0:	2900      	cmp	r1, #0
 80092f2:	b096      	sub	sp, #88	; 0x58
 80092f4:	4614      	mov	r4, r2
 80092f6:	461d      	mov	r5, r3
 80092f8:	da08      	bge.n	800930c <__swhatbuf_r+0x24>
 80092fa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80092fe:	2200      	movs	r2, #0
 8009300:	602a      	str	r2, [r5, #0]
 8009302:	061a      	lsls	r2, r3, #24
 8009304:	d410      	bmi.n	8009328 <__swhatbuf_r+0x40>
 8009306:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800930a:	e00e      	b.n	800932a <__swhatbuf_r+0x42>
 800930c:	466a      	mov	r2, sp
 800930e:	f001 f993 	bl	800a638 <_fstat_r>
 8009312:	2800      	cmp	r0, #0
 8009314:	dbf1      	blt.n	80092fa <__swhatbuf_r+0x12>
 8009316:	9a01      	ldr	r2, [sp, #4]
 8009318:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800931c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8009320:	425a      	negs	r2, r3
 8009322:	415a      	adcs	r2, r3
 8009324:	602a      	str	r2, [r5, #0]
 8009326:	e7ee      	b.n	8009306 <__swhatbuf_r+0x1e>
 8009328:	2340      	movs	r3, #64	; 0x40
 800932a:	2000      	movs	r0, #0
 800932c:	6023      	str	r3, [r4, #0]
 800932e:	b016      	add	sp, #88	; 0x58
 8009330:	bd70      	pop	{r4, r5, r6, pc}
	...

08009334 <__smakebuf_r>:
 8009334:	898b      	ldrh	r3, [r1, #12]
 8009336:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009338:	079d      	lsls	r5, r3, #30
 800933a:	4606      	mov	r6, r0
 800933c:	460c      	mov	r4, r1
 800933e:	d507      	bpl.n	8009350 <__smakebuf_r+0x1c>
 8009340:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009344:	6023      	str	r3, [r4, #0]
 8009346:	6123      	str	r3, [r4, #16]
 8009348:	2301      	movs	r3, #1
 800934a:	6163      	str	r3, [r4, #20]
 800934c:	b002      	add	sp, #8
 800934e:	bd70      	pop	{r4, r5, r6, pc}
 8009350:	ab01      	add	r3, sp, #4
 8009352:	466a      	mov	r2, sp
 8009354:	f7ff ffc8 	bl	80092e8 <__swhatbuf_r>
 8009358:	9900      	ldr	r1, [sp, #0]
 800935a:	4605      	mov	r5, r0
 800935c:	4630      	mov	r0, r6
 800935e:	f7ff fbff 	bl	8008b60 <_malloc_r>
 8009362:	b948      	cbnz	r0, 8009378 <__smakebuf_r+0x44>
 8009364:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009368:	059a      	lsls	r2, r3, #22
 800936a:	d4ef      	bmi.n	800934c <__smakebuf_r+0x18>
 800936c:	f023 0303 	bic.w	r3, r3, #3
 8009370:	f043 0302 	orr.w	r3, r3, #2
 8009374:	81a3      	strh	r3, [r4, #12]
 8009376:	e7e3      	b.n	8009340 <__smakebuf_r+0xc>
 8009378:	4b0d      	ldr	r3, [pc, #52]	; (80093b0 <__smakebuf_r+0x7c>)
 800937a:	62b3      	str	r3, [r6, #40]	; 0x28
 800937c:	89a3      	ldrh	r3, [r4, #12]
 800937e:	6020      	str	r0, [r4, #0]
 8009380:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009384:	81a3      	strh	r3, [r4, #12]
 8009386:	9b00      	ldr	r3, [sp, #0]
 8009388:	6163      	str	r3, [r4, #20]
 800938a:	9b01      	ldr	r3, [sp, #4]
 800938c:	6120      	str	r0, [r4, #16]
 800938e:	b15b      	cbz	r3, 80093a8 <__smakebuf_r+0x74>
 8009390:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009394:	4630      	mov	r0, r6
 8009396:	f001 f961 	bl	800a65c <_isatty_r>
 800939a:	b128      	cbz	r0, 80093a8 <__smakebuf_r+0x74>
 800939c:	89a3      	ldrh	r3, [r4, #12]
 800939e:	f023 0303 	bic.w	r3, r3, #3
 80093a2:	f043 0301 	orr.w	r3, r3, #1
 80093a6:	81a3      	strh	r3, [r4, #12]
 80093a8:	89a0      	ldrh	r0, [r4, #12]
 80093aa:	4305      	orrs	r5, r0
 80093ac:	81a5      	strh	r5, [r4, #12]
 80093ae:	e7cd      	b.n	800934c <__smakebuf_r+0x18>
 80093b0:	08008901 	.word	0x08008901

080093b4 <__malloc_lock>:
 80093b4:	4801      	ldr	r0, [pc, #4]	; (80093bc <__malloc_lock+0x8>)
 80093b6:	f7ff bb9a 	b.w	8008aee <__retarget_lock_acquire_recursive>
 80093ba:	bf00      	nop
 80093bc:	20004bbc 	.word	0x20004bbc

080093c0 <__malloc_unlock>:
 80093c0:	4801      	ldr	r0, [pc, #4]	; (80093c8 <__malloc_unlock+0x8>)
 80093c2:	f7ff bb95 	b.w	8008af0 <__retarget_lock_release_recursive>
 80093c6:	bf00      	nop
 80093c8:	20004bbc 	.word	0x20004bbc

080093cc <_free_r>:
 80093cc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80093ce:	2900      	cmp	r1, #0
 80093d0:	d044      	beq.n	800945c <_free_r+0x90>
 80093d2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093d6:	9001      	str	r0, [sp, #4]
 80093d8:	2b00      	cmp	r3, #0
 80093da:	f1a1 0404 	sub.w	r4, r1, #4
 80093de:	bfb8      	it	lt
 80093e0:	18e4      	addlt	r4, r4, r3
 80093e2:	f7ff ffe7 	bl	80093b4 <__malloc_lock>
 80093e6:	4a1e      	ldr	r2, [pc, #120]	; (8009460 <_free_r+0x94>)
 80093e8:	9801      	ldr	r0, [sp, #4]
 80093ea:	6813      	ldr	r3, [r2, #0]
 80093ec:	b933      	cbnz	r3, 80093fc <_free_r+0x30>
 80093ee:	6063      	str	r3, [r4, #4]
 80093f0:	6014      	str	r4, [r2, #0]
 80093f2:	b003      	add	sp, #12
 80093f4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80093f8:	f7ff bfe2 	b.w	80093c0 <__malloc_unlock>
 80093fc:	42a3      	cmp	r3, r4
 80093fe:	d908      	bls.n	8009412 <_free_r+0x46>
 8009400:	6825      	ldr	r5, [r4, #0]
 8009402:	1961      	adds	r1, r4, r5
 8009404:	428b      	cmp	r3, r1
 8009406:	bf01      	itttt	eq
 8009408:	6819      	ldreq	r1, [r3, #0]
 800940a:	685b      	ldreq	r3, [r3, #4]
 800940c:	1949      	addeq	r1, r1, r5
 800940e:	6021      	streq	r1, [r4, #0]
 8009410:	e7ed      	b.n	80093ee <_free_r+0x22>
 8009412:	461a      	mov	r2, r3
 8009414:	685b      	ldr	r3, [r3, #4]
 8009416:	b10b      	cbz	r3, 800941c <_free_r+0x50>
 8009418:	42a3      	cmp	r3, r4
 800941a:	d9fa      	bls.n	8009412 <_free_r+0x46>
 800941c:	6811      	ldr	r1, [r2, #0]
 800941e:	1855      	adds	r5, r2, r1
 8009420:	42a5      	cmp	r5, r4
 8009422:	d10b      	bne.n	800943c <_free_r+0x70>
 8009424:	6824      	ldr	r4, [r4, #0]
 8009426:	4421      	add	r1, r4
 8009428:	1854      	adds	r4, r2, r1
 800942a:	42a3      	cmp	r3, r4
 800942c:	6011      	str	r1, [r2, #0]
 800942e:	d1e0      	bne.n	80093f2 <_free_r+0x26>
 8009430:	681c      	ldr	r4, [r3, #0]
 8009432:	685b      	ldr	r3, [r3, #4]
 8009434:	6053      	str	r3, [r2, #4]
 8009436:	4421      	add	r1, r4
 8009438:	6011      	str	r1, [r2, #0]
 800943a:	e7da      	b.n	80093f2 <_free_r+0x26>
 800943c:	d902      	bls.n	8009444 <_free_r+0x78>
 800943e:	230c      	movs	r3, #12
 8009440:	6003      	str	r3, [r0, #0]
 8009442:	e7d6      	b.n	80093f2 <_free_r+0x26>
 8009444:	6825      	ldr	r5, [r4, #0]
 8009446:	1961      	adds	r1, r4, r5
 8009448:	428b      	cmp	r3, r1
 800944a:	bf04      	itt	eq
 800944c:	6819      	ldreq	r1, [r3, #0]
 800944e:	685b      	ldreq	r3, [r3, #4]
 8009450:	6063      	str	r3, [r4, #4]
 8009452:	bf04      	itt	eq
 8009454:	1949      	addeq	r1, r1, r5
 8009456:	6021      	streq	r1, [r4, #0]
 8009458:	6054      	str	r4, [r2, #4]
 800945a:	e7ca      	b.n	80093f2 <_free_r+0x26>
 800945c:	b003      	add	sp, #12
 800945e:	bd30      	pop	{r4, r5, pc}
 8009460:	20004bc0 	.word	0x20004bc0

08009464 <__ssputs_r>:
 8009464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009468:	688e      	ldr	r6, [r1, #8]
 800946a:	429e      	cmp	r6, r3
 800946c:	4682      	mov	sl, r0
 800946e:	460c      	mov	r4, r1
 8009470:	4690      	mov	r8, r2
 8009472:	461f      	mov	r7, r3
 8009474:	d838      	bhi.n	80094e8 <__ssputs_r+0x84>
 8009476:	898a      	ldrh	r2, [r1, #12]
 8009478:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800947c:	d032      	beq.n	80094e4 <__ssputs_r+0x80>
 800947e:	6825      	ldr	r5, [r4, #0]
 8009480:	6909      	ldr	r1, [r1, #16]
 8009482:	eba5 0901 	sub.w	r9, r5, r1
 8009486:	6965      	ldr	r5, [r4, #20]
 8009488:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800948c:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009490:	3301      	adds	r3, #1
 8009492:	444b      	add	r3, r9
 8009494:	106d      	asrs	r5, r5, #1
 8009496:	429d      	cmp	r5, r3
 8009498:	bf38      	it	cc
 800949a:	461d      	movcc	r5, r3
 800949c:	0553      	lsls	r3, r2, #21
 800949e:	d531      	bpl.n	8009504 <__ssputs_r+0xa0>
 80094a0:	4629      	mov	r1, r5
 80094a2:	f7ff fb5d 	bl	8008b60 <_malloc_r>
 80094a6:	4606      	mov	r6, r0
 80094a8:	b950      	cbnz	r0, 80094c0 <__ssputs_r+0x5c>
 80094aa:	230c      	movs	r3, #12
 80094ac:	f8ca 3000 	str.w	r3, [sl]
 80094b0:	89a3      	ldrh	r3, [r4, #12]
 80094b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80094b6:	81a3      	strh	r3, [r4, #12]
 80094b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80094bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80094c0:	6921      	ldr	r1, [r4, #16]
 80094c2:	464a      	mov	r2, r9
 80094c4:	f7ff fb15 	bl	8008af2 <memcpy>
 80094c8:	89a3      	ldrh	r3, [r4, #12]
 80094ca:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80094ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80094d2:	81a3      	strh	r3, [r4, #12]
 80094d4:	6126      	str	r6, [r4, #16]
 80094d6:	6165      	str	r5, [r4, #20]
 80094d8:	444e      	add	r6, r9
 80094da:	eba5 0509 	sub.w	r5, r5, r9
 80094de:	6026      	str	r6, [r4, #0]
 80094e0:	60a5      	str	r5, [r4, #8]
 80094e2:	463e      	mov	r6, r7
 80094e4:	42be      	cmp	r6, r7
 80094e6:	d900      	bls.n	80094ea <__ssputs_r+0x86>
 80094e8:	463e      	mov	r6, r7
 80094ea:	6820      	ldr	r0, [r4, #0]
 80094ec:	4632      	mov	r2, r6
 80094ee:	4641      	mov	r1, r8
 80094f0:	f001 f8c4 	bl	800a67c <memmove>
 80094f4:	68a3      	ldr	r3, [r4, #8]
 80094f6:	1b9b      	subs	r3, r3, r6
 80094f8:	60a3      	str	r3, [r4, #8]
 80094fa:	6823      	ldr	r3, [r4, #0]
 80094fc:	4433      	add	r3, r6
 80094fe:	6023      	str	r3, [r4, #0]
 8009500:	2000      	movs	r0, #0
 8009502:	e7db      	b.n	80094bc <__ssputs_r+0x58>
 8009504:	462a      	mov	r2, r5
 8009506:	f001 f8d3 	bl	800a6b0 <_realloc_r>
 800950a:	4606      	mov	r6, r0
 800950c:	2800      	cmp	r0, #0
 800950e:	d1e1      	bne.n	80094d4 <__ssputs_r+0x70>
 8009510:	6921      	ldr	r1, [r4, #16]
 8009512:	4650      	mov	r0, sl
 8009514:	f7ff ff5a 	bl	80093cc <_free_r>
 8009518:	e7c7      	b.n	80094aa <__ssputs_r+0x46>
	...

0800951c <_svfiprintf_r>:
 800951c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009520:	4698      	mov	r8, r3
 8009522:	898b      	ldrh	r3, [r1, #12]
 8009524:	061b      	lsls	r3, r3, #24
 8009526:	b09d      	sub	sp, #116	; 0x74
 8009528:	4607      	mov	r7, r0
 800952a:	460d      	mov	r5, r1
 800952c:	4614      	mov	r4, r2
 800952e:	d50e      	bpl.n	800954e <_svfiprintf_r+0x32>
 8009530:	690b      	ldr	r3, [r1, #16]
 8009532:	b963      	cbnz	r3, 800954e <_svfiprintf_r+0x32>
 8009534:	2140      	movs	r1, #64	; 0x40
 8009536:	f7ff fb13 	bl	8008b60 <_malloc_r>
 800953a:	6028      	str	r0, [r5, #0]
 800953c:	6128      	str	r0, [r5, #16]
 800953e:	b920      	cbnz	r0, 800954a <_svfiprintf_r+0x2e>
 8009540:	230c      	movs	r3, #12
 8009542:	603b      	str	r3, [r7, #0]
 8009544:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009548:	e0d1      	b.n	80096ee <_svfiprintf_r+0x1d2>
 800954a:	2340      	movs	r3, #64	; 0x40
 800954c:	616b      	str	r3, [r5, #20]
 800954e:	2300      	movs	r3, #0
 8009550:	9309      	str	r3, [sp, #36]	; 0x24
 8009552:	2320      	movs	r3, #32
 8009554:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009558:	f8cd 800c 	str.w	r8, [sp, #12]
 800955c:	2330      	movs	r3, #48	; 0x30
 800955e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8009708 <_svfiprintf_r+0x1ec>
 8009562:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009566:	f04f 0901 	mov.w	r9, #1
 800956a:	4623      	mov	r3, r4
 800956c:	469a      	mov	sl, r3
 800956e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009572:	b10a      	cbz	r2, 8009578 <_svfiprintf_r+0x5c>
 8009574:	2a25      	cmp	r2, #37	; 0x25
 8009576:	d1f9      	bne.n	800956c <_svfiprintf_r+0x50>
 8009578:	ebba 0b04 	subs.w	fp, sl, r4
 800957c:	d00b      	beq.n	8009596 <_svfiprintf_r+0x7a>
 800957e:	465b      	mov	r3, fp
 8009580:	4622      	mov	r2, r4
 8009582:	4629      	mov	r1, r5
 8009584:	4638      	mov	r0, r7
 8009586:	f7ff ff6d 	bl	8009464 <__ssputs_r>
 800958a:	3001      	adds	r0, #1
 800958c:	f000 80aa 	beq.w	80096e4 <_svfiprintf_r+0x1c8>
 8009590:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009592:	445a      	add	r2, fp
 8009594:	9209      	str	r2, [sp, #36]	; 0x24
 8009596:	f89a 3000 	ldrb.w	r3, [sl]
 800959a:	2b00      	cmp	r3, #0
 800959c:	f000 80a2 	beq.w	80096e4 <_svfiprintf_r+0x1c8>
 80095a0:	2300      	movs	r3, #0
 80095a2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80095a6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80095aa:	f10a 0a01 	add.w	sl, sl, #1
 80095ae:	9304      	str	r3, [sp, #16]
 80095b0:	9307      	str	r3, [sp, #28]
 80095b2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80095b6:	931a      	str	r3, [sp, #104]	; 0x68
 80095b8:	4654      	mov	r4, sl
 80095ba:	2205      	movs	r2, #5
 80095bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80095c0:	4851      	ldr	r0, [pc, #324]	; (8009708 <_svfiprintf_r+0x1ec>)
 80095c2:	f7f6 fe0d 	bl	80001e0 <memchr>
 80095c6:	9a04      	ldr	r2, [sp, #16]
 80095c8:	b9d8      	cbnz	r0, 8009602 <_svfiprintf_r+0xe6>
 80095ca:	06d0      	lsls	r0, r2, #27
 80095cc:	bf44      	itt	mi
 80095ce:	2320      	movmi	r3, #32
 80095d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095d4:	0711      	lsls	r1, r2, #28
 80095d6:	bf44      	itt	mi
 80095d8:	232b      	movmi	r3, #43	; 0x2b
 80095da:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80095de:	f89a 3000 	ldrb.w	r3, [sl]
 80095e2:	2b2a      	cmp	r3, #42	; 0x2a
 80095e4:	d015      	beq.n	8009612 <_svfiprintf_r+0xf6>
 80095e6:	9a07      	ldr	r2, [sp, #28]
 80095e8:	4654      	mov	r4, sl
 80095ea:	2000      	movs	r0, #0
 80095ec:	f04f 0c0a 	mov.w	ip, #10
 80095f0:	4621      	mov	r1, r4
 80095f2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80095f6:	3b30      	subs	r3, #48	; 0x30
 80095f8:	2b09      	cmp	r3, #9
 80095fa:	d94e      	bls.n	800969a <_svfiprintf_r+0x17e>
 80095fc:	b1b0      	cbz	r0, 800962c <_svfiprintf_r+0x110>
 80095fe:	9207      	str	r2, [sp, #28]
 8009600:	e014      	b.n	800962c <_svfiprintf_r+0x110>
 8009602:	eba0 0308 	sub.w	r3, r0, r8
 8009606:	fa09 f303 	lsl.w	r3, r9, r3
 800960a:	4313      	orrs	r3, r2
 800960c:	9304      	str	r3, [sp, #16]
 800960e:	46a2      	mov	sl, r4
 8009610:	e7d2      	b.n	80095b8 <_svfiprintf_r+0x9c>
 8009612:	9b03      	ldr	r3, [sp, #12]
 8009614:	1d19      	adds	r1, r3, #4
 8009616:	681b      	ldr	r3, [r3, #0]
 8009618:	9103      	str	r1, [sp, #12]
 800961a:	2b00      	cmp	r3, #0
 800961c:	bfbb      	ittet	lt
 800961e:	425b      	neglt	r3, r3
 8009620:	f042 0202 	orrlt.w	r2, r2, #2
 8009624:	9307      	strge	r3, [sp, #28]
 8009626:	9307      	strlt	r3, [sp, #28]
 8009628:	bfb8      	it	lt
 800962a:	9204      	strlt	r2, [sp, #16]
 800962c:	7823      	ldrb	r3, [r4, #0]
 800962e:	2b2e      	cmp	r3, #46	; 0x2e
 8009630:	d10c      	bne.n	800964c <_svfiprintf_r+0x130>
 8009632:	7863      	ldrb	r3, [r4, #1]
 8009634:	2b2a      	cmp	r3, #42	; 0x2a
 8009636:	d135      	bne.n	80096a4 <_svfiprintf_r+0x188>
 8009638:	9b03      	ldr	r3, [sp, #12]
 800963a:	1d1a      	adds	r2, r3, #4
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	9203      	str	r2, [sp, #12]
 8009640:	2b00      	cmp	r3, #0
 8009642:	bfb8      	it	lt
 8009644:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009648:	3402      	adds	r4, #2
 800964a:	9305      	str	r3, [sp, #20]
 800964c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8009718 <_svfiprintf_r+0x1fc>
 8009650:	7821      	ldrb	r1, [r4, #0]
 8009652:	2203      	movs	r2, #3
 8009654:	4650      	mov	r0, sl
 8009656:	f7f6 fdc3 	bl	80001e0 <memchr>
 800965a:	b140      	cbz	r0, 800966e <_svfiprintf_r+0x152>
 800965c:	2340      	movs	r3, #64	; 0x40
 800965e:	eba0 000a 	sub.w	r0, r0, sl
 8009662:	fa03 f000 	lsl.w	r0, r3, r0
 8009666:	9b04      	ldr	r3, [sp, #16]
 8009668:	4303      	orrs	r3, r0
 800966a:	3401      	adds	r4, #1
 800966c:	9304      	str	r3, [sp, #16]
 800966e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009672:	4826      	ldr	r0, [pc, #152]	; (800970c <_svfiprintf_r+0x1f0>)
 8009674:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009678:	2206      	movs	r2, #6
 800967a:	f7f6 fdb1 	bl	80001e0 <memchr>
 800967e:	2800      	cmp	r0, #0
 8009680:	d038      	beq.n	80096f4 <_svfiprintf_r+0x1d8>
 8009682:	4b23      	ldr	r3, [pc, #140]	; (8009710 <_svfiprintf_r+0x1f4>)
 8009684:	bb1b      	cbnz	r3, 80096ce <_svfiprintf_r+0x1b2>
 8009686:	9b03      	ldr	r3, [sp, #12]
 8009688:	3307      	adds	r3, #7
 800968a:	f023 0307 	bic.w	r3, r3, #7
 800968e:	3308      	adds	r3, #8
 8009690:	9303      	str	r3, [sp, #12]
 8009692:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009694:	4433      	add	r3, r6
 8009696:	9309      	str	r3, [sp, #36]	; 0x24
 8009698:	e767      	b.n	800956a <_svfiprintf_r+0x4e>
 800969a:	fb0c 3202 	mla	r2, ip, r2, r3
 800969e:	460c      	mov	r4, r1
 80096a0:	2001      	movs	r0, #1
 80096a2:	e7a5      	b.n	80095f0 <_svfiprintf_r+0xd4>
 80096a4:	2300      	movs	r3, #0
 80096a6:	3401      	adds	r4, #1
 80096a8:	9305      	str	r3, [sp, #20]
 80096aa:	4619      	mov	r1, r3
 80096ac:	f04f 0c0a 	mov.w	ip, #10
 80096b0:	4620      	mov	r0, r4
 80096b2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80096b6:	3a30      	subs	r2, #48	; 0x30
 80096b8:	2a09      	cmp	r2, #9
 80096ba:	d903      	bls.n	80096c4 <_svfiprintf_r+0x1a8>
 80096bc:	2b00      	cmp	r3, #0
 80096be:	d0c5      	beq.n	800964c <_svfiprintf_r+0x130>
 80096c0:	9105      	str	r1, [sp, #20]
 80096c2:	e7c3      	b.n	800964c <_svfiprintf_r+0x130>
 80096c4:	fb0c 2101 	mla	r1, ip, r1, r2
 80096c8:	4604      	mov	r4, r0
 80096ca:	2301      	movs	r3, #1
 80096cc:	e7f0      	b.n	80096b0 <_svfiprintf_r+0x194>
 80096ce:	ab03      	add	r3, sp, #12
 80096d0:	9300      	str	r3, [sp, #0]
 80096d2:	462a      	mov	r2, r5
 80096d4:	4b0f      	ldr	r3, [pc, #60]	; (8009714 <_svfiprintf_r+0x1f8>)
 80096d6:	a904      	add	r1, sp, #16
 80096d8:	4638      	mov	r0, r7
 80096da:	f3af 8000 	nop.w
 80096de:	1c42      	adds	r2, r0, #1
 80096e0:	4606      	mov	r6, r0
 80096e2:	d1d6      	bne.n	8009692 <_svfiprintf_r+0x176>
 80096e4:	89ab      	ldrh	r3, [r5, #12]
 80096e6:	065b      	lsls	r3, r3, #25
 80096e8:	f53f af2c 	bmi.w	8009544 <_svfiprintf_r+0x28>
 80096ec:	9809      	ldr	r0, [sp, #36]	; 0x24
 80096ee:	b01d      	add	sp, #116	; 0x74
 80096f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096f4:	ab03      	add	r3, sp, #12
 80096f6:	9300      	str	r3, [sp, #0]
 80096f8:	462a      	mov	r2, r5
 80096fa:	4b06      	ldr	r3, [pc, #24]	; (8009714 <_svfiprintf_r+0x1f8>)
 80096fc:	a904      	add	r1, sp, #16
 80096fe:	4638      	mov	r0, r7
 8009700:	f000 fba6 	bl	8009e50 <_printf_i>
 8009704:	e7eb      	b.n	80096de <_svfiprintf_r+0x1c2>
 8009706:	bf00      	nop
 8009708:	0800a9b4 	.word	0x0800a9b4
 800970c:	0800a9be 	.word	0x0800a9be
 8009710:	00000000 	.word	0x00000000
 8009714:	08009465 	.word	0x08009465
 8009718:	0800a9ba 	.word	0x0800a9ba

0800971c <_sungetc_r>:
 800971c:	b538      	push	{r3, r4, r5, lr}
 800971e:	1c4b      	adds	r3, r1, #1
 8009720:	4614      	mov	r4, r2
 8009722:	d103      	bne.n	800972c <_sungetc_r+0x10>
 8009724:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
 8009728:	4628      	mov	r0, r5
 800972a:	bd38      	pop	{r3, r4, r5, pc}
 800972c:	8993      	ldrh	r3, [r2, #12]
 800972e:	f023 0320 	bic.w	r3, r3, #32
 8009732:	8193      	strh	r3, [r2, #12]
 8009734:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8009736:	6852      	ldr	r2, [r2, #4]
 8009738:	b2cd      	uxtb	r5, r1
 800973a:	b18b      	cbz	r3, 8009760 <_sungetc_r+0x44>
 800973c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 800973e:	4293      	cmp	r3, r2
 8009740:	dd08      	ble.n	8009754 <_sungetc_r+0x38>
 8009742:	6823      	ldr	r3, [r4, #0]
 8009744:	1e5a      	subs	r2, r3, #1
 8009746:	6022      	str	r2, [r4, #0]
 8009748:	f803 5c01 	strb.w	r5, [r3, #-1]
 800974c:	6863      	ldr	r3, [r4, #4]
 800974e:	3301      	adds	r3, #1
 8009750:	6063      	str	r3, [r4, #4]
 8009752:	e7e9      	b.n	8009728 <_sungetc_r+0xc>
 8009754:	4621      	mov	r1, r4
 8009756:	f000 ff35 	bl	800a5c4 <__submore>
 800975a:	2800      	cmp	r0, #0
 800975c:	d0f1      	beq.n	8009742 <_sungetc_r+0x26>
 800975e:	e7e1      	b.n	8009724 <_sungetc_r+0x8>
 8009760:	6921      	ldr	r1, [r4, #16]
 8009762:	6823      	ldr	r3, [r4, #0]
 8009764:	b151      	cbz	r1, 800977c <_sungetc_r+0x60>
 8009766:	4299      	cmp	r1, r3
 8009768:	d208      	bcs.n	800977c <_sungetc_r+0x60>
 800976a:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 800976e:	42a9      	cmp	r1, r5
 8009770:	d104      	bne.n	800977c <_sungetc_r+0x60>
 8009772:	3b01      	subs	r3, #1
 8009774:	3201      	adds	r2, #1
 8009776:	6023      	str	r3, [r4, #0]
 8009778:	6062      	str	r2, [r4, #4]
 800977a:	e7d5      	b.n	8009728 <_sungetc_r+0xc>
 800977c:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8009780:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8009784:	6363      	str	r3, [r4, #52]	; 0x34
 8009786:	2303      	movs	r3, #3
 8009788:	63a3      	str	r3, [r4, #56]	; 0x38
 800978a:	4623      	mov	r3, r4
 800978c:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009790:	6023      	str	r3, [r4, #0]
 8009792:	2301      	movs	r3, #1
 8009794:	e7dc      	b.n	8009750 <_sungetc_r+0x34>

08009796 <__ssrefill_r>:
 8009796:	b510      	push	{r4, lr}
 8009798:	460c      	mov	r4, r1
 800979a:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800979c:	b169      	cbz	r1, 80097ba <__ssrefill_r+0x24>
 800979e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80097a2:	4299      	cmp	r1, r3
 80097a4:	d001      	beq.n	80097aa <__ssrefill_r+0x14>
 80097a6:	f7ff fe11 	bl	80093cc <_free_r>
 80097aa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80097ac:	6063      	str	r3, [r4, #4]
 80097ae:	2000      	movs	r0, #0
 80097b0:	6360      	str	r0, [r4, #52]	; 0x34
 80097b2:	b113      	cbz	r3, 80097ba <__ssrefill_r+0x24>
 80097b4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80097b6:	6023      	str	r3, [r4, #0]
 80097b8:	bd10      	pop	{r4, pc}
 80097ba:	6923      	ldr	r3, [r4, #16]
 80097bc:	6023      	str	r3, [r4, #0]
 80097be:	2300      	movs	r3, #0
 80097c0:	6063      	str	r3, [r4, #4]
 80097c2:	89a3      	ldrh	r3, [r4, #12]
 80097c4:	f043 0320 	orr.w	r3, r3, #32
 80097c8:	81a3      	strh	r3, [r4, #12]
 80097ca:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80097ce:	e7f3      	b.n	80097b8 <__ssrefill_r+0x22>

080097d0 <__ssvfiscanf_r>:
 80097d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80097d4:	460c      	mov	r4, r1
 80097d6:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 80097da:	2100      	movs	r1, #0
 80097dc:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 80097e0:	49a6      	ldr	r1, [pc, #664]	; (8009a7c <__ssvfiscanf_r+0x2ac>)
 80097e2:	91a0      	str	r1, [sp, #640]	; 0x280
 80097e4:	f10d 0804 	add.w	r8, sp, #4
 80097e8:	49a5      	ldr	r1, [pc, #660]	; (8009a80 <__ssvfiscanf_r+0x2b0>)
 80097ea:	4fa6      	ldr	r7, [pc, #664]	; (8009a84 <__ssvfiscanf_r+0x2b4>)
 80097ec:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8009a88 <__ssvfiscanf_r+0x2b8>
 80097f0:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 80097f4:	4606      	mov	r6, r0
 80097f6:	91a1      	str	r1, [sp, #644]	; 0x284
 80097f8:	9300      	str	r3, [sp, #0]
 80097fa:	7813      	ldrb	r3, [r2, #0]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	f000 815a 	beq.w	8009ab6 <__ssvfiscanf_r+0x2e6>
 8009802:	5dd9      	ldrb	r1, [r3, r7]
 8009804:	f011 0108 	ands.w	r1, r1, #8
 8009808:	f102 0501 	add.w	r5, r2, #1
 800980c:	d019      	beq.n	8009842 <__ssvfiscanf_r+0x72>
 800980e:	6863      	ldr	r3, [r4, #4]
 8009810:	2b00      	cmp	r3, #0
 8009812:	dd0f      	ble.n	8009834 <__ssvfiscanf_r+0x64>
 8009814:	6823      	ldr	r3, [r4, #0]
 8009816:	781a      	ldrb	r2, [r3, #0]
 8009818:	5cba      	ldrb	r2, [r7, r2]
 800981a:	0712      	lsls	r2, r2, #28
 800981c:	d401      	bmi.n	8009822 <__ssvfiscanf_r+0x52>
 800981e:	462a      	mov	r2, r5
 8009820:	e7eb      	b.n	80097fa <__ssvfiscanf_r+0x2a>
 8009822:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009824:	3201      	adds	r2, #1
 8009826:	9245      	str	r2, [sp, #276]	; 0x114
 8009828:	6862      	ldr	r2, [r4, #4]
 800982a:	3301      	adds	r3, #1
 800982c:	3a01      	subs	r2, #1
 800982e:	6062      	str	r2, [r4, #4]
 8009830:	6023      	str	r3, [r4, #0]
 8009832:	e7ec      	b.n	800980e <__ssvfiscanf_r+0x3e>
 8009834:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009836:	4621      	mov	r1, r4
 8009838:	4630      	mov	r0, r6
 800983a:	4798      	blx	r3
 800983c:	2800      	cmp	r0, #0
 800983e:	d0e9      	beq.n	8009814 <__ssvfiscanf_r+0x44>
 8009840:	e7ed      	b.n	800981e <__ssvfiscanf_r+0x4e>
 8009842:	2b25      	cmp	r3, #37	; 0x25
 8009844:	d012      	beq.n	800986c <__ssvfiscanf_r+0x9c>
 8009846:	469a      	mov	sl, r3
 8009848:	6863      	ldr	r3, [r4, #4]
 800984a:	2b00      	cmp	r3, #0
 800984c:	f340 8091 	ble.w	8009972 <__ssvfiscanf_r+0x1a2>
 8009850:	6822      	ldr	r2, [r4, #0]
 8009852:	7813      	ldrb	r3, [r2, #0]
 8009854:	4553      	cmp	r3, sl
 8009856:	f040 812e 	bne.w	8009ab6 <__ssvfiscanf_r+0x2e6>
 800985a:	6863      	ldr	r3, [r4, #4]
 800985c:	3b01      	subs	r3, #1
 800985e:	6063      	str	r3, [r4, #4]
 8009860:	9b45      	ldr	r3, [sp, #276]	; 0x114
 8009862:	3201      	adds	r2, #1
 8009864:	3301      	adds	r3, #1
 8009866:	6022      	str	r2, [r4, #0]
 8009868:	9345      	str	r3, [sp, #276]	; 0x114
 800986a:	e7d8      	b.n	800981e <__ssvfiscanf_r+0x4e>
 800986c:	9141      	str	r1, [sp, #260]	; 0x104
 800986e:	9143      	str	r1, [sp, #268]	; 0x10c
 8009870:	7853      	ldrb	r3, [r2, #1]
 8009872:	2b2a      	cmp	r3, #42	; 0x2a
 8009874:	bf02      	ittt	eq
 8009876:	2310      	moveq	r3, #16
 8009878:	1c95      	addeq	r5, r2, #2
 800987a:	9341      	streq	r3, [sp, #260]	; 0x104
 800987c:	220a      	movs	r2, #10
 800987e:	46aa      	mov	sl, r5
 8009880:	f81a 1b01 	ldrb.w	r1, [sl], #1
 8009884:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8009888:	2b09      	cmp	r3, #9
 800988a:	d91d      	bls.n	80098c8 <__ssvfiscanf_r+0xf8>
 800988c:	487e      	ldr	r0, [pc, #504]	; (8009a88 <__ssvfiscanf_r+0x2b8>)
 800988e:	2203      	movs	r2, #3
 8009890:	f7f6 fca6 	bl	80001e0 <memchr>
 8009894:	b140      	cbz	r0, 80098a8 <__ssvfiscanf_r+0xd8>
 8009896:	2301      	movs	r3, #1
 8009898:	eba0 0009 	sub.w	r0, r0, r9
 800989c:	fa03 f000 	lsl.w	r0, r3, r0
 80098a0:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80098a2:	4318      	orrs	r0, r3
 80098a4:	9041      	str	r0, [sp, #260]	; 0x104
 80098a6:	4655      	mov	r5, sl
 80098a8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80098ac:	2b78      	cmp	r3, #120	; 0x78
 80098ae:	d806      	bhi.n	80098be <__ssvfiscanf_r+0xee>
 80098b0:	2b57      	cmp	r3, #87	; 0x57
 80098b2:	d810      	bhi.n	80098d6 <__ssvfiscanf_r+0x106>
 80098b4:	2b25      	cmp	r3, #37	; 0x25
 80098b6:	d0c6      	beq.n	8009846 <__ssvfiscanf_r+0x76>
 80098b8:	d856      	bhi.n	8009968 <__ssvfiscanf_r+0x198>
 80098ba:	2b00      	cmp	r3, #0
 80098bc:	d064      	beq.n	8009988 <__ssvfiscanf_r+0x1b8>
 80098be:	2303      	movs	r3, #3
 80098c0:	9347      	str	r3, [sp, #284]	; 0x11c
 80098c2:	230a      	movs	r3, #10
 80098c4:	9342      	str	r3, [sp, #264]	; 0x108
 80098c6:	e071      	b.n	80099ac <__ssvfiscanf_r+0x1dc>
 80098c8:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 80098ca:	fb02 1103 	mla	r1, r2, r3, r1
 80098ce:	3930      	subs	r1, #48	; 0x30
 80098d0:	9143      	str	r1, [sp, #268]	; 0x10c
 80098d2:	4655      	mov	r5, sl
 80098d4:	e7d3      	b.n	800987e <__ssvfiscanf_r+0xae>
 80098d6:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 80098da:	2a20      	cmp	r2, #32
 80098dc:	d8ef      	bhi.n	80098be <__ssvfiscanf_r+0xee>
 80098de:	a101      	add	r1, pc, #4	; (adr r1, 80098e4 <__ssvfiscanf_r+0x114>)
 80098e0:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 80098e4:	08009997 	.word	0x08009997
 80098e8:	080098bf 	.word	0x080098bf
 80098ec:	080098bf 	.word	0x080098bf
 80098f0:	080099f5 	.word	0x080099f5
 80098f4:	080098bf 	.word	0x080098bf
 80098f8:	080098bf 	.word	0x080098bf
 80098fc:	080098bf 	.word	0x080098bf
 8009900:	080098bf 	.word	0x080098bf
 8009904:	080098bf 	.word	0x080098bf
 8009908:	080098bf 	.word	0x080098bf
 800990c:	080098bf 	.word	0x080098bf
 8009910:	08009a0b 	.word	0x08009a0b
 8009914:	080099e1 	.word	0x080099e1
 8009918:	0800996f 	.word	0x0800996f
 800991c:	0800996f 	.word	0x0800996f
 8009920:	0800996f 	.word	0x0800996f
 8009924:	080098bf 	.word	0x080098bf
 8009928:	080099e5 	.word	0x080099e5
 800992c:	080098bf 	.word	0x080098bf
 8009930:	080098bf 	.word	0x080098bf
 8009934:	080098bf 	.word	0x080098bf
 8009938:	080098bf 	.word	0x080098bf
 800993c:	08009a1b 	.word	0x08009a1b
 8009940:	080099ed 	.word	0x080099ed
 8009944:	0800998f 	.word	0x0800998f
 8009948:	080098bf 	.word	0x080098bf
 800994c:	080098bf 	.word	0x080098bf
 8009950:	08009a17 	.word	0x08009a17
 8009954:	080098bf 	.word	0x080098bf
 8009958:	080099e1 	.word	0x080099e1
 800995c:	080098bf 	.word	0x080098bf
 8009960:	080098bf 	.word	0x080098bf
 8009964:	08009997 	.word	0x08009997
 8009968:	3b45      	subs	r3, #69	; 0x45
 800996a:	2b02      	cmp	r3, #2
 800996c:	d8a7      	bhi.n	80098be <__ssvfiscanf_r+0xee>
 800996e:	2305      	movs	r3, #5
 8009970:	e01b      	b.n	80099aa <__ssvfiscanf_r+0x1da>
 8009972:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009974:	4621      	mov	r1, r4
 8009976:	4630      	mov	r0, r6
 8009978:	4798      	blx	r3
 800997a:	2800      	cmp	r0, #0
 800997c:	f43f af68 	beq.w	8009850 <__ssvfiscanf_r+0x80>
 8009980:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009982:	2800      	cmp	r0, #0
 8009984:	f040 808d 	bne.w	8009aa2 <__ssvfiscanf_r+0x2d2>
 8009988:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800998c:	e08f      	b.n	8009aae <__ssvfiscanf_r+0x2de>
 800998e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009990:	f042 0220 	orr.w	r2, r2, #32
 8009994:	9241      	str	r2, [sp, #260]	; 0x104
 8009996:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8009998:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800999c:	9241      	str	r2, [sp, #260]	; 0x104
 800999e:	2210      	movs	r2, #16
 80099a0:	2b6f      	cmp	r3, #111	; 0x6f
 80099a2:	9242      	str	r2, [sp, #264]	; 0x108
 80099a4:	bf34      	ite	cc
 80099a6:	2303      	movcc	r3, #3
 80099a8:	2304      	movcs	r3, #4
 80099aa:	9347      	str	r3, [sp, #284]	; 0x11c
 80099ac:	6863      	ldr	r3, [r4, #4]
 80099ae:	2b00      	cmp	r3, #0
 80099b0:	dd42      	ble.n	8009a38 <__ssvfiscanf_r+0x268>
 80099b2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80099b4:	0659      	lsls	r1, r3, #25
 80099b6:	d404      	bmi.n	80099c2 <__ssvfiscanf_r+0x1f2>
 80099b8:	6823      	ldr	r3, [r4, #0]
 80099ba:	781a      	ldrb	r2, [r3, #0]
 80099bc:	5cba      	ldrb	r2, [r7, r2]
 80099be:	0712      	lsls	r2, r2, #28
 80099c0:	d441      	bmi.n	8009a46 <__ssvfiscanf_r+0x276>
 80099c2:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 80099c4:	2b02      	cmp	r3, #2
 80099c6:	dc50      	bgt.n	8009a6a <__ssvfiscanf_r+0x29a>
 80099c8:	466b      	mov	r3, sp
 80099ca:	4622      	mov	r2, r4
 80099cc:	a941      	add	r1, sp, #260	; 0x104
 80099ce:	4630      	mov	r0, r6
 80099d0:	f000 fb64 	bl	800a09c <_scanf_chars>
 80099d4:	2801      	cmp	r0, #1
 80099d6:	d06e      	beq.n	8009ab6 <__ssvfiscanf_r+0x2e6>
 80099d8:	2802      	cmp	r0, #2
 80099da:	f47f af20 	bne.w	800981e <__ssvfiscanf_r+0x4e>
 80099de:	e7cf      	b.n	8009980 <__ssvfiscanf_r+0x1b0>
 80099e0:	220a      	movs	r2, #10
 80099e2:	e7dd      	b.n	80099a0 <__ssvfiscanf_r+0x1d0>
 80099e4:	2300      	movs	r3, #0
 80099e6:	9342      	str	r3, [sp, #264]	; 0x108
 80099e8:	2303      	movs	r3, #3
 80099ea:	e7de      	b.n	80099aa <__ssvfiscanf_r+0x1da>
 80099ec:	2308      	movs	r3, #8
 80099ee:	9342      	str	r3, [sp, #264]	; 0x108
 80099f0:	2304      	movs	r3, #4
 80099f2:	e7da      	b.n	80099aa <__ssvfiscanf_r+0x1da>
 80099f4:	4629      	mov	r1, r5
 80099f6:	4640      	mov	r0, r8
 80099f8:	f000 fcb4 	bl	800a364 <__sccl>
 80099fc:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80099fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a02:	9341      	str	r3, [sp, #260]	; 0x104
 8009a04:	4605      	mov	r5, r0
 8009a06:	2301      	movs	r3, #1
 8009a08:	e7cf      	b.n	80099aa <__ssvfiscanf_r+0x1da>
 8009a0a:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8009a0c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8009a10:	9341      	str	r3, [sp, #260]	; 0x104
 8009a12:	2300      	movs	r3, #0
 8009a14:	e7c9      	b.n	80099aa <__ssvfiscanf_r+0x1da>
 8009a16:	2302      	movs	r3, #2
 8009a18:	e7c7      	b.n	80099aa <__ssvfiscanf_r+0x1da>
 8009a1a:	9841      	ldr	r0, [sp, #260]	; 0x104
 8009a1c:	06c3      	lsls	r3, r0, #27
 8009a1e:	f53f aefe 	bmi.w	800981e <__ssvfiscanf_r+0x4e>
 8009a22:	9b00      	ldr	r3, [sp, #0]
 8009a24:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a26:	1d19      	adds	r1, r3, #4
 8009a28:	9100      	str	r1, [sp, #0]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	f010 0f01 	tst.w	r0, #1
 8009a30:	bf14      	ite	ne
 8009a32:	801a      	strhne	r2, [r3, #0]
 8009a34:	601a      	streq	r2, [r3, #0]
 8009a36:	e6f2      	b.n	800981e <__ssvfiscanf_r+0x4e>
 8009a38:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a3a:	4621      	mov	r1, r4
 8009a3c:	4630      	mov	r0, r6
 8009a3e:	4798      	blx	r3
 8009a40:	2800      	cmp	r0, #0
 8009a42:	d0b6      	beq.n	80099b2 <__ssvfiscanf_r+0x1e2>
 8009a44:	e79c      	b.n	8009980 <__ssvfiscanf_r+0x1b0>
 8009a46:	9a45      	ldr	r2, [sp, #276]	; 0x114
 8009a48:	3201      	adds	r2, #1
 8009a4a:	9245      	str	r2, [sp, #276]	; 0x114
 8009a4c:	6862      	ldr	r2, [r4, #4]
 8009a4e:	3a01      	subs	r2, #1
 8009a50:	2a00      	cmp	r2, #0
 8009a52:	6062      	str	r2, [r4, #4]
 8009a54:	dd02      	ble.n	8009a5c <__ssvfiscanf_r+0x28c>
 8009a56:	3301      	adds	r3, #1
 8009a58:	6023      	str	r3, [r4, #0]
 8009a5a:	e7ad      	b.n	80099b8 <__ssvfiscanf_r+0x1e8>
 8009a5c:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 8009a5e:	4621      	mov	r1, r4
 8009a60:	4630      	mov	r0, r6
 8009a62:	4798      	blx	r3
 8009a64:	2800      	cmp	r0, #0
 8009a66:	d0a7      	beq.n	80099b8 <__ssvfiscanf_r+0x1e8>
 8009a68:	e78a      	b.n	8009980 <__ssvfiscanf_r+0x1b0>
 8009a6a:	2b04      	cmp	r3, #4
 8009a6c:	dc0e      	bgt.n	8009a8c <__ssvfiscanf_r+0x2bc>
 8009a6e:	466b      	mov	r3, sp
 8009a70:	4622      	mov	r2, r4
 8009a72:	a941      	add	r1, sp, #260	; 0x104
 8009a74:	4630      	mov	r0, r6
 8009a76:	f000 fb6b 	bl	800a150 <_scanf_i>
 8009a7a:	e7ab      	b.n	80099d4 <__ssvfiscanf_r+0x204>
 8009a7c:	0800971d 	.word	0x0800971d
 8009a80:	08009797 	.word	0x08009797
 8009a84:	0800aa03 	.word	0x0800aa03
 8009a88:	0800a9ba 	.word	0x0800a9ba
 8009a8c:	4b0b      	ldr	r3, [pc, #44]	; (8009abc <__ssvfiscanf_r+0x2ec>)
 8009a8e:	2b00      	cmp	r3, #0
 8009a90:	f43f aec5 	beq.w	800981e <__ssvfiscanf_r+0x4e>
 8009a94:	466b      	mov	r3, sp
 8009a96:	4622      	mov	r2, r4
 8009a98:	a941      	add	r1, sp, #260	; 0x104
 8009a9a:	4630      	mov	r0, r6
 8009a9c:	f3af 8000 	nop.w
 8009aa0:	e798      	b.n	80099d4 <__ssvfiscanf_r+0x204>
 8009aa2:	89a3      	ldrh	r3, [r4, #12]
 8009aa4:	f013 0f40 	tst.w	r3, #64	; 0x40
 8009aa8:	bf18      	it	ne
 8009aaa:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8009aae:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 8009ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab6:	9844      	ldr	r0, [sp, #272]	; 0x110
 8009ab8:	e7f9      	b.n	8009aae <__ssvfiscanf_r+0x2de>
 8009aba:	bf00      	nop
 8009abc:	00000000 	.word	0x00000000

08009ac0 <__sfputc_r>:
 8009ac0:	6893      	ldr	r3, [r2, #8]
 8009ac2:	3b01      	subs	r3, #1
 8009ac4:	2b00      	cmp	r3, #0
 8009ac6:	b410      	push	{r4}
 8009ac8:	6093      	str	r3, [r2, #8]
 8009aca:	da08      	bge.n	8009ade <__sfputc_r+0x1e>
 8009acc:	6994      	ldr	r4, [r2, #24]
 8009ace:	42a3      	cmp	r3, r4
 8009ad0:	db01      	blt.n	8009ad6 <__sfputc_r+0x16>
 8009ad2:	290a      	cmp	r1, #10
 8009ad4:	d103      	bne.n	8009ade <__sfputc_r+0x1e>
 8009ad6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009ada:	f7ff ba4f 	b.w	8008f7c <__swbuf_r>
 8009ade:	6813      	ldr	r3, [r2, #0]
 8009ae0:	1c58      	adds	r0, r3, #1
 8009ae2:	6010      	str	r0, [r2, #0]
 8009ae4:	7019      	strb	r1, [r3, #0]
 8009ae6:	4608      	mov	r0, r1
 8009ae8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009aec:	4770      	bx	lr

08009aee <__sfputs_r>:
 8009aee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009af0:	4606      	mov	r6, r0
 8009af2:	460f      	mov	r7, r1
 8009af4:	4614      	mov	r4, r2
 8009af6:	18d5      	adds	r5, r2, r3
 8009af8:	42ac      	cmp	r4, r5
 8009afa:	d101      	bne.n	8009b00 <__sfputs_r+0x12>
 8009afc:	2000      	movs	r0, #0
 8009afe:	e007      	b.n	8009b10 <__sfputs_r+0x22>
 8009b00:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b04:	463a      	mov	r2, r7
 8009b06:	4630      	mov	r0, r6
 8009b08:	f7ff ffda 	bl	8009ac0 <__sfputc_r>
 8009b0c:	1c43      	adds	r3, r0, #1
 8009b0e:	d1f3      	bne.n	8009af8 <__sfputs_r+0xa>
 8009b10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009b14 <_vfiprintf_r>:
 8009b14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009b18:	460d      	mov	r5, r1
 8009b1a:	b09d      	sub	sp, #116	; 0x74
 8009b1c:	4614      	mov	r4, r2
 8009b1e:	4698      	mov	r8, r3
 8009b20:	4606      	mov	r6, r0
 8009b22:	b118      	cbz	r0, 8009b2c <_vfiprintf_r+0x18>
 8009b24:	6983      	ldr	r3, [r0, #24]
 8009b26:	b90b      	cbnz	r3, 8009b2c <_vfiprintf_r+0x18>
 8009b28:	f7fe ff1e 	bl	8008968 <__sinit>
 8009b2c:	4b89      	ldr	r3, [pc, #548]	; (8009d54 <_vfiprintf_r+0x240>)
 8009b2e:	429d      	cmp	r5, r3
 8009b30:	d11b      	bne.n	8009b6a <_vfiprintf_r+0x56>
 8009b32:	6875      	ldr	r5, [r6, #4]
 8009b34:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b36:	07d9      	lsls	r1, r3, #31
 8009b38:	d405      	bmi.n	8009b46 <_vfiprintf_r+0x32>
 8009b3a:	89ab      	ldrh	r3, [r5, #12]
 8009b3c:	059a      	lsls	r2, r3, #22
 8009b3e:	d402      	bmi.n	8009b46 <_vfiprintf_r+0x32>
 8009b40:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b42:	f7fe ffd4 	bl	8008aee <__retarget_lock_acquire_recursive>
 8009b46:	89ab      	ldrh	r3, [r5, #12]
 8009b48:	071b      	lsls	r3, r3, #28
 8009b4a:	d501      	bpl.n	8009b50 <_vfiprintf_r+0x3c>
 8009b4c:	692b      	ldr	r3, [r5, #16]
 8009b4e:	b9eb      	cbnz	r3, 8009b8c <_vfiprintf_r+0x78>
 8009b50:	4629      	mov	r1, r5
 8009b52:	4630      	mov	r0, r6
 8009b54:	f7ff fa76 	bl	8009044 <__swsetup_r>
 8009b58:	b1c0      	cbz	r0, 8009b8c <_vfiprintf_r+0x78>
 8009b5a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009b5c:	07dc      	lsls	r4, r3, #31
 8009b5e:	d50e      	bpl.n	8009b7e <_vfiprintf_r+0x6a>
 8009b60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009b64:	b01d      	add	sp, #116	; 0x74
 8009b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b6a:	4b7b      	ldr	r3, [pc, #492]	; (8009d58 <_vfiprintf_r+0x244>)
 8009b6c:	429d      	cmp	r5, r3
 8009b6e:	d101      	bne.n	8009b74 <_vfiprintf_r+0x60>
 8009b70:	68b5      	ldr	r5, [r6, #8]
 8009b72:	e7df      	b.n	8009b34 <_vfiprintf_r+0x20>
 8009b74:	4b79      	ldr	r3, [pc, #484]	; (8009d5c <_vfiprintf_r+0x248>)
 8009b76:	429d      	cmp	r5, r3
 8009b78:	bf08      	it	eq
 8009b7a:	68f5      	ldreq	r5, [r6, #12]
 8009b7c:	e7da      	b.n	8009b34 <_vfiprintf_r+0x20>
 8009b7e:	89ab      	ldrh	r3, [r5, #12]
 8009b80:	0598      	lsls	r0, r3, #22
 8009b82:	d4ed      	bmi.n	8009b60 <_vfiprintf_r+0x4c>
 8009b84:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009b86:	f7fe ffb3 	bl	8008af0 <__retarget_lock_release_recursive>
 8009b8a:	e7e9      	b.n	8009b60 <_vfiprintf_r+0x4c>
 8009b8c:	2300      	movs	r3, #0
 8009b8e:	9309      	str	r3, [sp, #36]	; 0x24
 8009b90:	2320      	movs	r3, #32
 8009b92:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009b96:	f8cd 800c 	str.w	r8, [sp, #12]
 8009b9a:	2330      	movs	r3, #48	; 0x30
 8009b9c:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 8009d60 <_vfiprintf_r+0x24c>
 8009ba0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8009ba4:	f04f 0901 	mov.w	r9, #1
 8009ba8:	4623      	mov	r3, r4
 8009baa:	469a      	mov	sl, r3
 8009bac:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009bb0:	b10a      	cbz	r2, 8009bb6 <_vfiprintf_r+0xa2>
 8009bb2:	2a25      	cmp	r2, #37	; 0x25
 8009bb4:	d1f9      	bne.n	8009baa <_vfiprintf_r+0x96>
 8009bb6:	ebba 0b04 	subs.w	fp, sl, r4
 8009bba:	d00b      	beq.n	8009bd4 <_vfiprintf_r+0xc0>
 8009bbc:	465b      	mov	r3, fp
 8009bbe:	4622      	mov	r2, r4
 8009bc0:	4629      	mov	r1, r5
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	f7ff ff93 	bl	8009aee <__sfputs_r>
 8009bc8:	3001      	adds	r0, #1
 8009bca:	f000 80aa 	beq.w	8009d22 <_vfiprintf_r+0x20e>
 8009bce:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009bd0:	445a      	add	r2, fp
 8009bd2:	9209      	str	r2, [sp, #36]	; 0x24
 8009bd4:	f89a 3000 	ldrb.w	r3, [sl]
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	f000 80a2 	beq.w	8009d22 <_vfiprintf_r+0x20e>
 8009bde:	2300      	movs	r3, #0
 8009be0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8009be4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009be8:	f10a 0a01 	add.w	sl, sl, #1
 8009bec:	9304      	str	r3, [sp, #16]
 8009bee:	9307      	str	r3, [sp, #28]
 8009bf0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8009bf4:	931a      	str	r3, [sp, #104]	; 0x68
 8009bf6:	4654      	mov	r4, sl
 8009bf8:	2205      	movs	r2, #5
 8009bfa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bfe:	4858      	ldr	r0, [pc, #352]	; (8009d60 <_vfiprintf_r+0x24c>)
 8009c00:	f7f6 faee 	bl	80001e0 <memchr>
 8009c04:	9a04      	ldr	r2, [sp, #16]
 8009c06:	b9d8      	cbnz	r0, 8009c40 <_vfiprintf_r+0x12c>
 8009c08:	06d1      	lsls	r1, r2, #27
 8009c0a:	bf44      	itt	mi
 8009c0c:	2320      	movmi	r3, #32
 8009c0e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c12:	0713      	lsls	r3, r2, #28
 8009c14:	bf44      	itt	mi
 8009c16:	232b      	movmi	r3, #43	; 0x2b
 8009c18:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009c1c:	f89a 3000 	ldrb.w	r3, [sl]
 8009c20:	2b2a      	cmp	r3, #42	; 0x2a
 8009c22:	d015      	beq.n	8009c50 <_vfiprintf_r+0x13c>
 8009c24:	9a07      	ldr	r2, [sp, #28]
 8009c26:	4654      	mov	r4, sl
 8009c28:	2000      	movs	r0, #0
 8009c2a:	f04f 0c0a 	mov.w	ip, #10
 8009c2e:	4621      	mov	r1, r4
 8009c30:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009c34:	3b30      	subs	r3, #48	; 0x30
 8009c36:	2b09      	cmp	r3, #9
 8009c38:	d94e      	bls.n	8009cd8 <_vfiprintf_r+0x1c4>
 8009c3a:	b1b0      	cbz	r0, 8009c6a <_vfiprintf_r+0x156>
 8009c3c:	9207      	str	r2, [sp, #28]
 8009c3e:	e014      	b.n	8009c6a <_vfiprintf_r+0x156>
 8009c40:	eba0 0308 	sub.w	r3, r0, r8
 8009c44:	fa09 f303 	lsl.w	r3, r9, r3
 8009c48:	4313      	orrs	r3, r2
 8009c4a:	9304      	str	r3, [sp, #16]
 8009c4c:	46a2      	mov	sl, r4
 8009c4e:	e7d2      	b.n	8009bf6 <_vfiprintf_r+0xe2>
 8009c50:	9b03      	ldr	r3, [sp, #12]
 8009c52:	1d19      	adds	r1, r3, #4
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	9103      	str	r1, [sp, #12]
 8009c58:	2b00      	cmp	r3, #0
 8009c5a:	bfbb      	ittet	lt
 8009c5c:	425b      	neglt	r3, r3
 8009c5e:	f042 0202 	orrlt.w	r2, r2, #2
 8009c62:	9307      	strge	r3, [sp, #28]
 8009c64:	9307      	strlt	r3, [sp, #28]
 8009c66:	bfb8      	it	lt
 8009c68:	9204      	strlt	r2, [sp, #16]
 8009c6a:	7823      	ldrb	r3, [r4, #0]
 8009c6c:	2b2e      	cmp	r3, #46	; 0x2e
 8009c6e:	d10c      	bne.n	8009c8a <_vfiprintf_r+0x176>
 8009c70:	7863      	ldrb	r3, [r4, #1]
 8009c72:	2b2a      	cmp	r3, #42	; 0x2a
 8009c74:	d135      	bne.n	8009ce2 <_vfiprintf_r+0x1ce>
 8009c76:	9b03      	ldr	r3, [sp, #12]
 8009c78:	1d1a      	adds	r2, r3, #4
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	9203      	str	r2, [sp, #12]
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	bfb8      	it	lt
 8009c82:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8009c86:	3402      	adds	r4, #2
 8009c88:	9305      	str	r3, [sp, #20]
 8009c8a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 8009d70 <_vfiprintf_r+0x25c>
 8009c8e:	7821      	ldrb	r1, [r4, #0]
 8009c90:	2203      	movs	r2, #3
 8009c92:	4650      	mov	r0, sl
 8009c94:	f7f6 faa4 	bl	80001e0 <memchr>
 8009c98:	b140      	cbz	r0, 8009cac <_vfiprintf_r+0x198>
 8009c9a:	2340      	movs	r3, #64	; 0x40
 8009c9c:	eba0 000a 	sub.w	r0, r0, sl
 8009ca0:	fa03 f000 	lsl.w	r0, r3, r0
 8009ca4:	9b04      	ldr	r3, [sp, #16]
 8009ca6:	4303      	orrs	r3, r0
 8009ca8:	3401      	adds	r4, #1
 8009caa:	9304      	str	r3, [sp, #16]
 8009cac:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cb0:	482c      	ldr	r0, [pc, #176]	; (8009d64 <_vfiprintf_r+0x250>)
 8009cb2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009cb6:	2206      	movs	r2, #6
 8009cb8:	f7f6 fa92 	bl	80001e0 <memchr>
 8009cbc:	2800      	cmp	r0, #0
 8009cbe:	d03f      	beq.n	8009d40 <_vfiprintf_r+0x22c>
 8009cc0:	4b29      	ldr	r3, [pc, #164]	; (8009d68 <_vfiprintf_r+0x254>)
 8009cc2:	bb1b      	cbnz	r3, 8009d0c <_vfiprintf_r+0x1f8>
 8009cc4:	9b03      	ldr	r3, [sp, #12]
 8009cc6:	3307      	adds	r3, #7
 8009cc8:	f023 0307 	bic.w	r3, r3, #7
 8009ccc:	3308      	adds	r3, #8
 8009cce:	9303      	str	r3, [sp, #12]
 8009cd0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009cd2:	443b      	add	r3, r7
 8009cd4:	9309      	str	r3, [sp, #36]	; 0x24
 8009cd6:	e767      	b.n	8009ba8 <_vfiprintf_r+0x94>
 8009cd8:	fb0c 3202 	mla	r2, ip, r2, r3
 8009cdc:	460c      	mov	r4, r1
 8009cde:	2001      	movs	r0, #1
 8009ce0:	e7a5      	b.n	8009c2e <_vfiprintf_r+0x11a>
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	3401      	adds	r4, #1
 8009ce6:	9305      	str	r3, [sp, #20]
 8009ce8:	4619      	mov	r1, r3
 8009cea:	f04f 0c0a 	mov.w	ip, #10
 8009cee:	4620      	mov	r0, r4
 8009cf0:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009cf4:	3a30      	subs	r2, #48	; 0x30
 8009cf6:	2a09      	cmp	r2, #9
 8009cf8:	d903      	bls.n	8009d02 <_vfiprintf_r+0x1ee>
 8009cfa:	2b00      	cmp	r3, #0
 8009cfc:	d0c5      	beq.n	8009c8a <_vfiprintf_r+0x176>
 8009cfe:	9105      	str	r1, [sp, #20]
 8009d00:	e7c3      	b.n	8009c8a <_vfiprintf_r+0x176>
 8009d02:	fb0c 2101 	mla	r1, ip, r1, r2
 8009d06:	4604      	mov	r4, r0
 8009d08:	2301      	movs	r3, #1
 8009d0a:	e7f0      	b.n	8009cee <_vfiprintf_r+0x1da>
 8009d0c:	ab03      	add	r3, sp, #12
 8009d0e:	9300      	str	r3, [sp, #0]
 8009d10:	462a      	mov	r2, r5
 8009d12:	4b16      	ldr	r3, [pc, #88]	; (8009d6c <_vfiprintf_r+0x258>)
 8009d14:	a904      	add	r1, sp, #16
 8009d16:	4630      	mov	r0, r6
 8009d18:	f3af 8000 	nop.w
 8009d1c:	4607      	mov	r7, r0
 8009d1e:	1c78      	adds	r0, r7, #1
 8009d20:	d1d6      	bne.n	8009cd0 <_vfiprintf_r+0x1bc>
 8009d22:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8009d24:	07d9      	lsls	r1, r3, #31
 8009d26:	d405      	bmi.n	8009d34 <_vfiprintf_r+0x220>
 8009d28:	89ab      	ldrh	r3, [r5, #12]
 8009d2a:	059a      	lsls	r2, r3, #22
 8009d2c:	d402      	bmi.n	8009d34 <_vfiprintf_r+0x220>
 8009d2e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8009d30:	f7fe fede 	bl	8008af0 <__retarget_lock_release_recursive>
 8009d34:	89ab      	ldrh	r3, [r5, #12]
 8009d36:	065b      	lsls	r3, r3, #25
 8009d38:	f53f af12 	bmi.w	8009b60 <_vfiprintf_r+0x4c>
 8009d3c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009d3e:	e711      	b.n	8009b64 <_vfiprintf_r+0x50>
 8009d40:	ab03      	add	r3, sp, #12
 8009d42:	9300      	str	r3, [sp, #0]
 8009d44:	462a      	mov	r2, r5
 8009d46:	4b09      	ldr	r3, [pc, #36]	; (8009d6c <_vfiprintf_r+0x258>)
 8009d48:	a904      	add	r1, sp, #16
 8009d4a:	4630      	mov	r0, r6
 8009d4c:	f000 f880 	bl	8009e50 <_printf_i>
 8009d50:	e7e4      	b.n	8009d1c <_vfiprintf_r+0x208>
 8009d52:	bf00      	nop
 8009d54:	0800a970 	.word	0x0800a970
 8009d58:	0800a990 	.word	0x0800a990
 8009d5c:	0800a950 	.word	0x0800a950
 8009d60:	0800a9b4 	.word	0x0800a9b4
 8009d64:	0800a9be 	.word	0x0800a9be
 8009d68:	00000000 	.word	0x00000000
 8009d6c:	08009aef 	.word	0x08009aef
 8009d70:	0800a9ba 	.word	0x0800a9ba

08009d74 <_printf_common>:
 8009d74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d78:	4616      	mov	r6, r2
 8009d7a:	4699      	mov	r9, r3
 8009d7c:	688a      	ldr	r2, [r1, #8]
 8009d7e:	690b      	ldr	r3, [r1, #16]
 8009d80:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d84:	4293      	cmp	r3, r2
 8009d86:	bfb8      	it	lt
 8009d88:	4613      	movlt	r3, r2
 8009d8a:	6033      	str	r3, [r6, #0]
 8009d8c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d90:	4607      	mov	r7, r0
 8009d92:	460c      	mov	r4, r1
 8009d94:	b10a      	cbz	r2, 8009d9a <_printf_common+0x26>
 8009d96:	3301      	adds	r3, #1
 8009d98:	6033      	str	r3, [r6, #0]
 8009d9a:	6823      	ldr	r3, [r4, #0]
 8009d9c:	0699      	lsls	r1, r3, #26
 8009d9e:	bf42      	ittt	mi
 8009da0:	6833      	ldrmi	r3, [r6, #0]
 8009da2:	3302      	addmi	r3, #2
 8009da4:	6033      	strmi	r3, [r6, #0]
 8009da6:	6825      	ldr	r5, [r4, #0]
 8009da8:	f015 0506 	ands.w	r5, r5, #6
 8009dac:	d106      	bne.n	8009dbc <_printf_common+0x48>
 8009dae:	f104 0a19 	add.w	sl, r4, #25
 8009db2:	68e3      	ldr	r3, [r4, #12]
 8009db4:	6832      	ldr	r2, [r6, #0]
 8009db6:	1a9b      	subs	r3, r3, r2
 8009db8:	42ab      	cmp	r3, r5
 8009dba:	dc26      	bgt.n	8009e0a <_printf_common+0x96>
 8009dbc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009dc0:	1e13      	subs	r3, r2, #0
 8009dc2:	6822      	ldr	r2, [r4, #0]
 8009dc4:	bf18      	it	ne
 8009dc6:	2301      	movne	r3, #1
 8009dc8:	0692      	lsls	r2, r2, #26
 8009dca:	d42b      	bmi.n	8009e24 <_printf_common+0xb0>
 8009dcc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009dd0:	4649      	mov	r1, r9
 8009dd2:	4638      	mov	r0, r7
 8009dd4:	47c0      	blx	r8
 8009dd6:	3001      	adds	r0, #1
 8009dd8:	d01e      	beq.n	8009e18 <_printf_common+0xa4>
 8009dda:	6823      	ldr	r3, [r4, #0]
 8009ddc:	68e5      	ldr	r5, [r4, #12]
 8009dde:	6832      	ldr	r2, [r6, #0]
 8009de0:	f003 0306 	and.w	r3, r3, #6
 8009de4:	2b04      	cmp	r3, #4
 8009de6:	bf08      	it	eq
 8009de8:	1aad      	subeq	r5, r5, r2
 8009dea:	68a3      	ldr	r3, [r4, #8]
 8009dec:	6922      	ldr	r2, [r4, #16]
 8009dee:	bf0c      	ite	eq
 8009df0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009df4:	2500      	movne	r5, #0
 8009df6:	4293      	cmp	r3, r2
 8009df8:	bfc4      	itt	gt
 8009dfa:	1a9b      	subgt	r3, r3, r2
 8009dfc:	18ed      	addgt	r5, r5, r3
 8009dfe:	2600      	movs	r6, #0
 8009e00:	341a      	adds	r4, #26
 8009e02:	42b5      	cmp	r5, r6
 8009e04:	d11a      	bne.n	8009e3c <_printf_common+0xc8>
 8009e06:	2000      	movs	r0, #0
 8009e08:	e008      	b.n	8009e1c <_printf_common+0xa8>
 8009e0a:	2301      	movs	r3, #1
 8009e0c:	4652      	mov	r2, sl
 8009e0e:	4649      	mov	r1, r9
 8009e10:	4638      	mov	r0, r7
 8009e12:	47c0      	blx	r8
 8009e14:	3001      	adds	r0, #1
 8009e16:	d103      	bne.n	8009e20 <_printf_common+0xac>
 8009e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009e1c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009e20:	3501      	adds	r5, #1
 8009e22:	e7c6      	b.n	8009db2 <_printf_common+0x3e>
 8009e24:	18e1      	adds	r1, r4, r3
 8009e26:	1c5a      	adds	r2, r3, #1
 8009e28:	2030      	movs	r0, #48	; 0x30
 8009e2a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009e2e:	4422      	add	r2, r4
 8009e30:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009e34:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009e38:	3302      	adds	r3, #2
 8009e3a:	e7c7      	b.n	8009dcc <_printf_common+0x58>
 8009e3c:	2301      	movs	r3, #1
 8009e3e:	4622      	mov	r2, r4
 8009e40:	4649      	mov	r1, r9
 8009e42:	4638      	mov	r0, r7
 8009e44:	47c0      	blx	r8
 8009e46:	3001      	adds	r0, #1
 8009e48:	d0e6      	beq.n	8009e18 <_printf_common+0xa4>
 8009e4a:	3601      	adds	r6, #1
 8009e4c:	e7d9      	b.n	8009e02 <_printf_common+0x8e>
	...

08009e50 <_printf_i>:
 8009e50:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e54:	7e0f      	ldrb	r7, [r1, #24]
 8009e56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e58:	2f78      	cmp	r7, #120	; 0x78
 8009e5a:	4691      	mov	r9, r2
 8009e5c:	4680      	mov	r8, r0
 8009e5e:	460c      	mov	r4, r1
 8009e60:	469a      	mov	sl, r3
 8009e62:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e66:	d807      	bhi.n	8009e78 <_printf_i+0x28>
 8009e68:	2f62      	cmp	r7, #98	; 0x62
 8009e6a:	d80a      	bhi.n	8009e82 <_printf_i+0x32>
 8009e6c:	2f00      	cmp	r7, #0
 8009e6e:	f000 80d8 	beq.w	800a022 <_printf_i+0x1d2>
 8009e72:	2f58      	cmp	r7, #88	; 0x58
 8009e74:	f000 80a3 	beq.w	8009fbe <_printf_i+0x16e>
 8009e78:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e7c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e80:	e03a      	b.n	8009ef8 <_printf_i+0xa8>
 8009e82:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e86:	2b15      	cmp	r3, #21
 8009e88:	d8f6      	bhi.n	8009e78 <_printf_i+0x28>
 8009e8a:	a101      	add	r1, pc, #4	; (adr r1, 8009e90 <_printf_i+0x40>)
 8009e8c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e90:	08009ee9 	.word	0x08009ee9
 8009e94:	08009efd 	.word	0x08009efd
 8009e98:	08009e79 	.word	0x08009e79
 8009e9c:	08009e79 	.word	0x08009e79
 8009ea0:	08009e79 	.word	0x08009e79
 8009ea4:	08009e79 	.word	0x08009e79
 8009ea8:	08009efd 	.word	0x08009efd
 8009eac:	08009e79 	.word	0x08009e79
 8009eb0:	08009e79 	.word	0x08009e79
 8009eb4:	08009e79 	.word	0x08009e79
 8009eb8:	08009e79 	.word	0x08009e79
 8009ebc:	0800a009 	.word	0x0800a009
 8009ec0:	08009f2d 	.word	0x08009f2d
 8009ec4:	08009feb 	.word	0x08009feb
 8009ec8:	08009e79 	.word	0x08009e79
 8009ecc:	08009e79 	.word	0x08009e79
 8009ed0:	0800a02b 	.word	0x0800a02b
 8009ed4:	08009e79 	.word	0x08009e79
 8009ed8:	08009f2d 	.word	0x08009f2d
 8009edc:	08009e79 	.word	0x08009e79
 8009ee0:	08009e79 	.word	0x08009e79
 8009ee4:	08009ff3 	.word	0x08009ff3
 8009ee8:	682b      	ldr	r3, [r5, #0]
 8009eea:	1d1a      	adds	r2, r3, #4
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	602a      	str	r2, [r5, #0]
 8009ef0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009ef4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ef8:	2301      	movs	r3, #1
 8009efa:	e0a3      	b.n	800a044 <_printf_i+0x1f4>
 8009efc:	6820      	ldr	r0, [r4, #0]
 8009efe:	6829      	ldr	r1, [r5, #0]
 8009f00:	0606      	lsls	r6, r0, #24
 8009f02:	f101 0304 	add.w	r3, r1, #4
 8009f06:	d50a      	bpl.n	8009f1e <_printf_i+0xce>
 8009f08:	680e      	ldr	r6, [r1, #0]
 8009f0a:	602b      	str	r3, [r5, #0]
 8009f0c:	2e00      	cmp	r6, #0
 8009f0e:	da03      	bge.n	8009f18 <_printf_i+0xc8>
 8009f10:	232d      	movs	r3, #45	; 0x2d
 8009f12:	4276      	negs	r6, r6
 8009f14:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f18:	485e      	ldr	r0, [pc, #376]	; (800a094 <_printf_i+0x244>)
 8009f1a:	230a      	movs	r3, #10
 8009f1c:	e019      	b.n	8009f52 <_printf_i+0x102>
 8009f1e:	680e      	ldr	r6, [r1, #0]
 8009f20:	602b      	str	r3, [r5, #0]
 8009f22:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009f26:	bf18      	it	ne
 8009f28:	b236      	sxthne	r6, r6
 8009f2a:	e7ef      	b.n	8009f0c <_printf_i+0xbc>
 8009f2c:	682b      	ldr	r3, [r5, #0]
 8009f2e:	6820      	ldr	r0, [r4, #0]
 8009f30:	1d19      	adds	r1, r3, #4
 8009f32:	6029      	str	r1, [r5, #0]
 8009f34:	0601      	lsls	r1, r0, #24
 8009f36:	d501      	bpl.n	8009f3c <_printf_i+0xec>
 8009f38:	681e      	ldr	r6, [r3, #0]
 8009f3a:	e002      	b.n	8009f42 <_printf_i+0xf2>
 8009f3c:	0646      	lsls	r6, r0, #25
 8009f3e:	d5fb      	bpl.n	8009f38 <_printf_i+0xe8>
 8009f40:	881e      	ldrh	r6, [r3, #0]
 8009f42:	4854      	ldr	r0, [pc, #336]	; (800a094 <_printf_i+0x244>)
 8009f44:	2f6f      	cmp	r7, #111	; 0x6f
 8009f46:	bf0c      	ite	eq
 8009f48:	2308      	moveq	r3, #8
 8009f4a:	230a      	movne	r3, #10
 8009f4c:	2100      	movs	r1, #0
 8009f4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f52:	6865      	ldr	r5, [r4, #4]
 8009f54:	60a5      	str	r5, [r4, #8]
 8009f56:	2d00      	cmp	r5, #0
 8009f58:	bfa2      	ittt	ge
 8009f5a:	6821      	ldrge	r1, [r4, #0]
 8009f5c:	f021 0104 	bicge.w	r1, r1, #4
 8009f60:	6021      	strge	r1, [r4, #0]
 8009f62:	b90e      	cbnz	r6, 8009f68 <_printf_i+0x118>
 8009f64:	2d00      	cmp	r5, #0
 8009f66:	d04d      	beq.n	800a004 <_printf_i+0x1b4>
 8009f68:	4615      	mov	r5, r2
 8009f6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f6e:	fb03 6711 	mls	r7, r3, r1, r6
 8009f72:	5dc7      	ldrb	r7, [r0, r7]
 8009f74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f78:	4637      	mov	r7, r6
 8009f7a:	42bb      	cmp	r3, r7
 8009f7c:	460e      	mov	r6, r1
 8009f7e:	d9f4      	bls.n	8009f6a <_printf_i+0x11a>
 8009f80:	2b08      	cmp	r3, #8
 8009f82:	d10b      	bne.n	8009f9c <_printf_i+0x14c>
 8009f84:	6823      	ldr	r3, [r4, #0]
 8009f86:	07de      	lsls	r6, r3, #31
 8009f88:	d508      	bpl.n	8009f9c <_printf_i+0x14c>
 8009f8a:	6923      	ldr	r3, [r4, #16]
 8009f8c:	6861      	ldr	r1, [r4, #4]
 8009f8e:	4299      	cmp	r1, r3
 8009f90:	bfde      	ittt	le
 8009f92:	2330      	movle	r3, #48	; 0x30
 8009f94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f98:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009f9c:	1b52      	subs	r2, r2, r5
 8009f9e:	6122      	str	r2, [r4, #16]
 8009fa0:	f8cd a000 	str.w	sl, [sp]
 8009fa4:	464b      	mov	r3, r9
 8009fa6:	aa03      	add	r2, sp, #12
 8009fa8:	4621      	mov	r1, r4
 8009faa:	4640      	mov	r0, r8
 8009fac:	f7ff fee2 	bl	8009d74 <_printf_common>
 8009fb0:	3001      	adds	r0, #1
 8009fb2:	d14c      	bne.n	800a04e <_printf_i+0x1fe>
 8009fb4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009fb8:	b004      	add	sp, #16
 8009fba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fbe:	4835      	ldr	r0, [pc, #212]	; (800a094 <_printf_i+0x244>)
 8009fc0:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009fc4:	6829      	ldr	r1, [r5, #0]
 8009fc6:	6823      	ldr	r3, [r4, #0]
 8009fc8:	f851 6b04 	ldr.w	r6, [r1], #4
 8009fcc:	6029      	str	r1, [r5, #0]
 8009fce:	061d      	lsls	r5, r3, #24
 8009fd0:	d514      	bpl.n	8009ffc <_printf_i+0x1ac>
 8009fd2:	07df      	lsls	r7, r3, #31
 8009fd4:	bf44      	itt	mi
 8009fd6:	f043 0320 	orrmi.w	r3, r3, #32
 8009fda:	6023      	strmi	r3, [r4, #0]
 8009fdc:	b91e      	cbnz	r6, 8009fe6 <_printf_i+0x196>
 8009fde:	6823      	ldr	r3, [r4, #0]
 8009fe0:	f023 0320 	bic.w	r3, r3, #32
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	2310      	movs	r3, #16
 8009fe8:	e7b0      	b.n	8009f4c <_printf_i+0xfc>
 8009fea:	6823      	ldr	r3, [r4, #0]
 8009fec:	f043 0320 	orr.w	r3, r3, #32
 8009ff0:	6023      	str	r3, [r4, #0]
 8009ff2:	2378      	movs	r3, #120	; 0x78
 8009ff4:	4828      	ldr	r0, [pc, #160]	; (800a098 <_printf_i+0x248>)
 8009ff6:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009ffa:	e7e3      	b.n	8009fc4 <_printf_i+0x174>
 8009ffc:	0659      	lsls	r1, r3, #25
 8009ffe:	bf48      	it	mi
 800a000:	b2b6      	uxthmi	r6, r6
 800a002:	e7e6      	b.n	8009fd2 <_printf_i+0x182>
 800a004:	4615      	mov	r5, r2
 800a006:	e7bb      	b.n	8009f80 <_printf_i+0x130>
 800a008:	682b      	ldr	r3, [r5, #0]
 800a00a:	6826      	ldr	r6, [r4, #0]
 800a00c:	6961      	ldr	r1, [r4, #20]
 800a00e:	1d18      	adds	r0, r3, #4
 800a010:	6028      	str	r0, [r5, #0]
 800a012:	0635      	lsls	r5, r6, #24
 800a014:	681b      	ldr	r3, [r3, #0]
 800a016:	d501      	bpl.n	800a01c <_printf_i+0x1cc>
 800a018:	6019      	str	r1, [r3, #0]
 800a01a:	e002      	b.n	800a022 <_printf_i+0x1d2>
 800a01c:	0670      	lsls	r0, r6, #25
 800a01e:	d5fb      	bpl.n	800a018 <_printf_i+0x1c8>
 800a020:	8019      	strh	r1, [r3, #0]
 800a022:	2300      	movs	r3, #0
 800a024:	6123      	str	r3, [r4, #16]
 800a026:	4615      	mov	r5, r2
 800a028:	e7ba      	b.n	8009fa0 <_printf_i+0x150>
 800a02a:	682b      	ldr	r3, [r5, #0]
 800a02c:	1d1a      	adds	r2, r3, #4
 800a02e:	602a      	str	r2, [r5, #0]
 800a030:	681d      	ldr	r5, [r3, #0]
 800a032:	6862      	ldr	r2, [r4, #4]
 800a034:	2100      	movs	r1, #0
 800a036:	4628      	mov	r0, r5
 800a038:	f7f6 f8d2 	bl	80001e0 <memchr>
 800a03c:	b108      	cbz	r0, 800a042 <_printf_i+0x1f2>
 800a03e:	1b40      	subs	r0, r0, r5
 800a040:	6060      	str	r0, [r4, #4]
 800a042:	6863      	ldr	r3, [r4, #4]
 800a044:	6123      	str	r3, [r4, #16]
 800a046:	2300      	movs	r3, #0
 800a048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a04c:	e7a8      	b.n	8009fa0 <_printf_i+0x150>
 800a04e:	6923      	ldr	r3, [r4, #16]
 800a050:	462a      	mov	r2, r5
 800a052:	4649      	mov	r1, r9
 800a054:	4640      	mov	r0, r8
 800a056:	47d0      	blx	sl
 800a058:	3001      	adds	r0, #1
 800a05a:	d0ab      	beq.n	8009fb4 <_printf_i+0x164>
 800a05c:	6823      	ldr	r3, [r4, #0]
 800a05e:	079b      	lsls	r3, r3, #30
 800a060:	d413      	bmi.n	800a08a <_printf_i+0x23a>
 800a062:	68e0      	ldr	r0, [r4, #12]
 800a064:	9b03      	ldr	r3, [sp, #12]
 800a066:	4298      	cmp	r0, r3
 800a068:	bfb8      	it	lt
 800a06a:	4618      	movlt	r0, r3
 800a06c:	e7a4      	b.n	8009fb8 <_printf_i+0x168>
 800a06e:	2301      	movs	r3, #1
 800a070:	4632      	mov	r2, r6
 800a072:	4649      	mov	r1, r9
 800a074:	4640      	mov	r0, r8
 800a076:	47d0      	blx	sl
 800a078:	3001      	adds	r0, #1
 800a07a:	d09b      	beq.n	8009fb4 <_printf_i+0x164>
 800a07c:	3501      	adds	r5, #1
 800a07e:	68e3      	ldr	r3, [r4, #12]
 800a080:	9903      	ldr	r1, [sp, #12]
 800a082:	1a5b      	subs	r3, r3, r1
 800a084:	42ab      	cmp	r3, r5
 800a086:	dcf2      	bgt.n	800a06e <_printf_i+0x21e>
 800a088:	e7eb      	b.n	800a062 <_printf_i+0x212>
 800a08a:	2500      	movs	r5, #0
 800a08c:	f104 0619 	add.w	r6, r4, #25
 800a090:	e7f5      	b.n	800a07e <_printf_i+0x22e>
 800a092:	bf00      	nop
 800a094:	0800a9c5 	.word	0x0800a9c5
 800a098:	0800a9d6 	.word	0x0800a9d6

0800a09c <_scanf_chars>:
 800a09c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a0a0:	4615      	mov	r5, r2
 800a0a2:	688a      	ldr	r2, [r1, #8]
 800a0a4:	4680      	mov	r8, r0
 800a0a6:	460c      	mov	r4, r1
 800a0a8:	b932      	cbnz	r2, 800a0b8 <_scanf_chars+0x1c>
 800a0aa:	698a      	ldr	r2, [r1, #24]
 800a0ac:	2a00      	cmp	r2, #0
 800a0ae:	bf0c      	ite	eq
 800a0b0:	2201      	moveq	r2, #1
 800a0b2:	f04f 32ff 	movne.w	r2, #4294967295	; 0xffffffff
 800a0b6:	608a      	str	r2, [r1, #8]
 800a0b8:	6822      	ldr	r2, [r4, #0]
 800a0ba:	f8df 9090 	ldr.w	r9, [pc, #144]	; 800a14c <_scanf_chars+0xb0>
 800a0be:	06d1      	lsls	r1, r2, #27
 800a0c0:	bf5f      	itttt	pl
 800a0c2:	681a      	ldrpl	r2, [r3, #0]
 800a0c4:	1d11      	addpl	r1, r2, #4
 800a0c6:	6019      	strpl	r1, [r3, #0]
 800a0c8:	6816      	ldrpl	r6, [r2, #0]
 800a0ca:	2700      	movs	r7, #0
 800a0cc:	69a0      	ldr	r0, [r4, #24]
 800a0ce:	b188      	cbz	r0, 800a0f4 <_scanf_chars+0x58>
 800a0d0:	2801      	cmp	r0, #1
 800a0d2:	d107      	bne.n	800a0e4 <_scanf_chars+0x48>
 800a0d4:	682a      	ldr	r2, [r5, #0]
 800a0d6:	7811      	ldrb	r1, [r2, #0]
 800a0d8:	6962      	ldr	r2, [r4, #20]
 800a0da:	5c52      	ldrb	r2, [r2, r1]
 800a0dc:	b952      	cbnz	r2, 800a0f4 <_scanf_chars+0x58>
 800a0de:	2f00      	cmp	r7, #0
 800a0e0:	d031      	beq.n	800a146 <_scanf_chars+0xaa>
 800a0e2:	e022      	b.n	800a12a <_scanf_chars+0x8e>
 800a0e4:	2802      	cmp	r0, #2
 800a0e6:	d120      	bne.n	800a12a <_scanf_chars+0x8e>
 800a0e8:	682b      	ldr	r3, [r5, #0]
 800a0ea:	781b      	ldrb	r3, [r3, #0]
 800a0ec:	f813 3009 	ldrb.w	r3, [r3, r9]
 800a0f0:	071b      	lsls	r3, r3, #28
 800a0f2:	d41a      	bmi.n	800a12a <_scanf_chars+0x8e>
 800a0f4:	6823      	ldr	r3, [r4, #0]
 800a0f6:	06da      	lsls	r2, r3, #27
 800a0f8:	bf5e      	ittt	pl
 800a0fa:	682b      	ldrpl	r3, [r5, #0]
 800a0fc:	781b      	ldrbpl	r3, [r3, #0]
 800a0fe:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a102:	682a      	ldr	r2, [r5, #0]
 800a104:	686b      	ldr	r3, [r5, #4]
 800a106:	3201      	adds	r2, #1
 800a108:	602a      	str	r2, [r5, #0]
 800a10a:	68a2      	ldr	r2, [r4, #8]
 800a10c:	3b01      	subs	r3, #1
 800a10e:	3a01      	subs	r2, #1
 800a110:	606b      	str	r3, [r5, #4]
 800a112:	3701      	adds	r7, #1
 800a114:	60a2      	str	r2, [r4, #8]
 800a116:	b142      	cbz	r2, 800a12a <_scanf_chars+0x8e>
 800a118:	2b00      	cmp	r3, #0
 800a11a:	dcd7      	bgt.n	800a0cc <_scanf_chars+0x30>
 800a11c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a120:	4629      	mov	r1, r5
 800a122:	4640      	mov	r0, r8
 800a124:	4798      	blx	r3
 800a126:	2800      	cmp	r0, #0
 800a128:	d0d0      	beq.n	800a0cc <_scanf_chars+0x30>
 800a12a:	6823      	ldr	r3, [r4, #0]
 800a12c:	f013 0310 	ands.w	r3, r3, #16
 800a130:	d105      	bne.n	800a13e <_scanf_chars+0xa2>
 800a132:	68e2      	ldr	r2, [r4, #12]
 800a134:	3201      	adds	r2, #1
 800a136:	60e2      	str	r2, [r4, #12]
 800a138:	69a2      	ldr	r2, [r4, #24]
 800a13a:	b102      	cbz	r2, 800a13e <_scanf_chars+0xa2>
 800a13c:	7033      	strb	r3, [r6, #0]
 800a13e:	6923      	ldr	r3, [r4, #16]
 800a140:	443b      	add	r3, r7
 800a142:	6123      	str	r3, [r4, #16]
 800a144:	2000      	movs	r0, #0
 800a146:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a14a:	bf00      	nop
 800a14c:	0800aa03 	.word	0x0800aa03

0800a150 <_scanf_i>:
 800a150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a154:	4698      	mov	r8, r3
 800a156:	4b76      	ldr	r3, [pc, #472]	; (800a330 <_scanf_i+0x1e0>)
 800a158:	460c      	mov	r4, r1
 800a15a:	4682      	mov	sl, r0
 800a15c:	4616      	mov	r6, r2
 800a15e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a162:	b087      	sub	sp, #28
 800a164:	ab03      	add	r3, sp, #12
 800a166:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a16a:	4b72      	ldr	r3, [pc, #456]	; (800a334 <_scanf_i+0x1e4>)
 800a16c:	69a1      	ldr	r1, [r4, #24]
 800a16e:	4a72      	ldr	r2, [pc, #456]	; (800a338 <_scanf_i+0x1e8>)
 800a170:	2903      	cmp	r1, #3
 800a172:	bf18      	it	ne
 800a174:	461a      	movne	r2, r3
 800a176:	68a3      	ldr	r3, [r4, #8]
 800a178:	9201      	str	r2, [sp, #4]
 800a17a:	1e5a      	subs	r2, r3, #1
 800a17c:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a180:	bf88      	it	hi
 800a182:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a186:	4627      	mov	r7, r4
 800a188:	bf82      	ittt	hi
 800a18a:	eb03 0905 	addhi.w	r9, r3, r5
 800a18e:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a192:	60a3      	strhi	r3, [r4, #8]
 800a194:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a198:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 800a19c:	bf98      	it	ls
 800a19e:	f04f 0900 	movls.w	r9, #0
 800a1a2:	6023      	str	r3, [r4, #0]
 800a1a4:	463d      	mov	r5, r7
 800a1a6:	f04f 0b00 	mov.w	fp, #0
 800a1aa:	6831      	ldr	r1, [r6, #0]
 800a1ac:	ab03      	add	r3, sp, #12
 800a1ae:	7809      	ldrb	r1, [r1, #0]
 800a1b0:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a1b4:	2202      	movs	r2, #2
 800a1b6:	f7f6 f813 	bl	80001e0 <memchr>
 800a1ba:	b328      	cbz	r0, 800a208 <_scanf_i+0xb8>
 800a1bc:	f1bb 0f01 	cmp.w	fp, #1
 800a1c0:	d159      	bne.n	800a276 <_scanf_i+0x126>
 800a1c2:	6862      	ldr	r2, [r4, #4]
 800a1c4:	b92a      	cbnz	r2, 800a1d2 <_scanf_i+0x82>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	2308      	movs	r3, #8
 800a1ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800a1ce:	6063      	str	r3, [r4, #4]
 800a1d0:	6022      	str	r2, [r4, #0]
 800a1d2:	6822      	ldr	r2, [r4, #0]
 800a1d4:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 800a1d8:	6022      	str	r2, [r4, #0]
 800a1da:	68a2      	ldr	r2, [r4, #8]
 800a1dc:	1e51      	subs	r1, r2, #1
 800a1de:	60a1      	str	r1, [r4, #8]
 800a1e0:	b192      	cbz	r2, 800a208 <_scanf_i+0xb8>
 800a1e2:	6832      	ldr	r2, [r6, #0]
 800a1e4:	1c51      	adds	r1, r2, #1
 800a1e6:	6031      	str	r1, [r6, #0]
 800a1e8:	7812      	ldrb	r2, [r2, #0]
 800a1ea:	f805 2b01 	strb.w	r2, [r5], #1
 800a1ee:	6872      	ldr	r2, [r6, #4]
 800a1f0:	3a01      	subs	r2, #1
 800a1f2:	2a00      	cmp	r2, #0
 800a1f4:	6072      	str	r2, [r6, #4]
 800a1f6:	dc07      	bgt.n	800a208 <_scanf_i+0xb8>
 800a1f8:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 800a1fc:	4631      	mov	r1, r6
 800a1fe:	4650      	mov	r0, sl
 800a200:	4790      	blx	r2
 800a202:	2800      	cmp	r0, #0
 800a204:	f040 8085 	bne.w	800a312 <_scanf_i+0x1c2>
 800a208:	f10b 0b01 	add.w	fp, fp, #1
 800a20c:	f1bb 0f03 	cmp.w	fp, #3
 800a210:	d1cb      	bne.n	800a1aa <_scanf_i+0x5a>
 800a212:	6863      	ldr	r3, [r4, #4]
 800a214:	b90b      	cbnz	r3, 800a21a <_scanf_i+0xca>
 800a216:	230a      	movs	r3, #10
 800a218:	6063      	str	r3, [r4, #4]
 800a21a:	6863      	ldr	r3, [r4, #4]
 800a21c:	4947      	ldr	r1, [pc, #284]	; (800a33c <_scanf_i+0x1ec>)
 800a21e:	6960      	ldr	r0, [r4, #20]
 800a220:	1ac9      	subs	r1, r1, r3
 800a222:	f000 f89f 	bl	800a364 <__sccl>
 800a226:	f04f 0b00 	mov.w	fp, #0
 800a22a:	68a3      	ldr	r3, [r4, #8]
 800a22c:	6822      	ldr	r2, [r4, #0]
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d03d      	beq.n	800a2ae <_scanf_i+0x15e>
 800a232:	6831      	ldr	r1, [r6, #0]
 800a234:	6960      	ldr	r0, [r4, #20]
 800a236:	f891 c000 	ldrb.w	ip, [r1]
 800a23a:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a23e:	2800      	cmp	r0, #0
 800a240:	d035      	beq.n	800a2ae <_scanf_i+0x15e>
 800a242:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 800a246:	d124      	bne.n	800a292 <_scanf_i+0x142>
 800a248:	0510      	lsls	r0, r2, #20
 800a24a:	d522      	bpl.n	800a292 <_scanf_i+0x142>
 800a24c:	f10b 0b01 	add.w	fp, fp, #1
 800a250:	f1b9 0f00 	cmp.w	r9, #0
 800a254:	d003      	beq.n	800a25e <_scanf_i+0x10e>
 800a256:	3301      	adds	r3, #1
 800a258:	f109 39ff 	add.w	r9, r9, #4294967295	; 0xffffffff
 800a25c:	60a3      	str	r3, [r4, #8]
 800a25e:	6873      	ldr	r3, [r6, #4]
 800a260:	3b01      	subs	r3, #1
 800a262:	2b00      	cmp	r3, #0
 800a264:	6073      	str	r3, [r6, #4]
 800a266:	dd1b      	ble.n	800a2a0 <_scanf_i+0x150>
 800a268:	6833      	ldr	r3, [r6, #0]
 800a26a:	3301      	adds	r3, #1
 800a26c:	6033      	str	r3, [r6, #0]
 800a26e:	68a3      	ldr	r3, [r4, #8]
 800a270:	3b01      	subs	r3, #1
 800a272:	60a3      	str	r3, [r4, #8]
 800a274:	e7d9      	b.n	800a22a <_scanf_i+0xda>
 800a276:	f1bb 0f02 	cmp.w	fp, #2
 800a27a:	d1ae      	bne.n	800a1da <_scanf_i+0x8a>
 800a27c:	6822      	ldr	r2, [r4, #0]
 800a27e:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800a282:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 800a286:	d1bf      	bne.n	800a208 <_scanf_i+0xb8>
 800a288:	2310      	movs	r3, #16
 800a28a:	6063      	str	r3, [r4, #4]
 800a28c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a290:	e7a2      	b.n	800a1d8 <_scanf_i+0x88>
 800a292:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 800a296:	6022      	str	r2, [r4, #0]
 800a298:	780b      	ldrb	r3, [r1, #0]
 800a29a:	f805 3b01 	strb.w	r3, [r5], #1
 800a29e:	e7de      	b.n	800a25e <_scanf_i+0x10e>
 800a2a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4650      	mov	r0, sl
 800a2a8:	4798      	blx	r3
 800a2aa:	2800      	cmp	r0, #0
 800a2ac:	d0df      	beq.n	800a26e <_scanf_i+0x11e>
 800a2ae:	6823      	ldr	r3, [r4, #0]
 800a2b0:	05db      	lsls	r3, r3, #23
 800a2b2:	d50d      	bpl.n	800a2d0 <_scanf_i+0x180>
 800a2b4:	42bd      	cmp	r5, r7
 800a2b6:	d909      	bls.n	800a2cc <_scanf_i+0x17c>
 800a2b8:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a2bc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800a2c0:	4632      	mov	r2, r6
 800a2c2:	4650      	mov	r0, sl
 800a2c4:	4798      	blx	r3
 800a2c6:	f105 39ff 	add.w	r9, r5, #4294967295	; 0xffffffff
 800a2ca:	464d      	mov	r5, r9
 800a2cc:	42bd      	cmp	r5, r7
 800a2ce:	d02d      	beq.n	800a32c <_scanf_i+0x1dc>
 800a2d0:	6822      	ldr	r2, [r4, #0]
 800a2d2:	f012 0210 	ands.w	r2, r2, #16
 800a2d6:	d113      	bne.n	800a300 <_scanf_i+0x1b0>
 800a2d8:	702a      	strb	r2, [r5, #0]
 800a2da:	6863      	ldr	r3, [r4, #4]
 800a2dc:	9e01      	ldr	r6, [sp, #4]
 800a2de:	4639      	mov	r1, r7
 800a2e0:	4650      	mov	r0, sl
 800a2e2:	47b0      	blx	r6
 800a2e4:	6821      	ldr	r1, [r4, #0]
 800a2e6:	f8d8 3000 	ldr.w	r3, [r8]
 800a2ea:	f011 0f20 	tst.w	r1, #32
 800a2ee:	d013      	beq.n	800a318 <_scanf_i+0x1c8>
 800a2f0:	1d1a      	adds	r2, r3, #4
 800a2f2:	f8c8 2000 	str.w	r2, [r8]
 800a2f6:	681b      	ldr	r3, [r3, #0]
 800a2f8:	6018      	str	r0, [r3, #0]
 800a2fa:	68e3      	ldr	r3, [r4, #12]
 800a2fc:	3301      	adds	r3, #1
 800a2fe:	60e3      	str	r3, [r4, #12]
 800a300:	1bed      	subs	r5, r5, r7
 800a302:	44ab      	add	fp, r5
 800a304:	6925      	ldr	r5, [r4, #16]
 800a306:	445d      	add	r5, fp
 800a308:	6125      	str	r5, [r4, #16]
 800a30a:	2000      	movs	r0, #0
 800a30c:	b007      	add	sp, #28
 800a30e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a312:	f04f 0b00 	mov.w	fp, #0
 800a316:	e7ca      	b.n	800a2ae <_scanf_i+0x15e>
 800a318:	1d1a      	adds	r2, r3, #4
 800a31a:	f8c8 2000 	str.w	r2, [r8]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f011 0f01 	tst.w	r1, #1
 800a324:	bf14      	ite	ne
 800a326:	8018      	strhne	r0, [r3, #0]
 800a328:	6018      	streq	r0, [r3, #0]
 800a32a:	e7e6      	b.n	800a2fa <_scanf_i+0x1aa>
 800a32c:	2001      	movs	r0, #1
 800a32e:	e7ed      	b.n	800a30c <_scanf_i+0x1bc>
 800a330:	0800a8d8 	.word	0x0800a8d8
 800a334:	0800a5c1 	.word	0x0800a5c1
 800a338:	0800a4d9 	.word	0x0800a4d9
 800a33c:	0800aa00 	.word	0x0800aa00

0800a340 <_read_r>:
 800a340:	b538      	push	{r3, r4, r5, lr}
 800a342:	4d07      	ldr	r5, [pc, #28]	; (800a360 <_read_r+0x20>)
 800a344:	4604      	mov	r4, r0
 800a346:	4608      	mov	r0, r1
 800a348:	4611      	mov	r1, r2
 800a34a:	2200      	movs	r2, #0
 800a34c:	602a      	str	r2, [r5, #0]
 800a34e:	461a      	mov	r2, r3
 800a350:	f7f6 fe2c 	bl	8000fac <_read>
 800a354:	1c43      	adds	r3, r0, #1
 800a356:	d102      	bne.n	800a35e <_read_r+0x1e>
 800a358:	682b      	ldr	r3, [r5, #0]
 800a35a:	b103      	cbz	r3, 800a35e <_read_r+0x1e>
 800a35c:	6023      	str	r3, [r4, #0]
 800a35e:	bd38      	pop	{r3, r4, r5, pc}
 800a360:	20004bc8 	.word	0x20004bc8

0800a364 <__sccl>:
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	780b      	ldrb	r3, [r1, #0]
 800a368:	4604      	mov	r4, r0
 800a36a:	2b5e      	cmp	r3, #94	; 0x5e
 800a36c:	bf0b      	itete	eq
 800a36e:	784b      	ldrbeq	r3, [r1, #1]
 800a370:	1c48      	addne	r0, r1, #1
 800a372:	1c88      	addeq	r0, r1, #2
 800a374:	2200      	movne	r2, #0
 800a376:	bf08      	it	eq
 800a378:	2201      	moveq	r2, #1
 800a37a:	1e61      	subs	r1, r4, #1
 800a37c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 800a380:	f801 2f01 	strb.w	r2, [r1, #1]!
 800a384:	42a9      	cmp	r1, r5
 800a386:	d1fb      	bne.n	800a380 <__sccl+0x1c>
 800a388:	b90b      	cbnz	r3, 800a38e <__sccl+0x2a>
 800a38a:	3801      	subs	r0, #1
 800a38c:	bd70      	pop	{r4, r5, r6, pc}
 800a38e:	f082 0201 	eor.w	r2, r2, #1
 800a392:	54e2      	strb	r2, [r4, r3]
 800a394:	4605      	mov	r5, r0
 800a396:	4628      	mov	r0, r5
 800a398:	f810 1b01 	ldrb.w	r1, [r0], #1
 800a39c:	292d      	cmp	r1, #45	; 0x2d
 800a39e:	d006      	beq.n	800a3ae <__sccl+0x4a>
 800a3a0:	295d      	cmp	r1, #93	; 0x5d
 800a3a2:	d0f3      	beq.n	800a38c <__sccl+0x28>
 800a3a4:	b909      	cbnz	r1, 800a3aa <__sccl+0x46>
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	e7f0      	b.n	800a38c <__sccl+0x28>
 800a3aa:	460b      	mov	r3, r1
 800a3ac:	e7f1      	b.n	800a392 <__sccl+0x2e>
 800a3ae:	786e      	ldrb	r6, [r5, #1]
 800a3b0:	2e5d      	cmp	r6, #93	; 0x5d
 800a3b2:	d0fa      	beq.n	800a3aa <__sccl+0x46>
 800a3b4:	42b3      	cmp	r3, r6
 800a3b6:	dcf8      	bgt.n	800a3aa <__sccl+0x46>
 800a3b8:	3502      	adds	r5, #2
 800a3ba:	4619      	mov	r1, r3
 800a3bc:	3101      	adds	r1, #1
 800a3be:	428e      	cmp	r6, r1
 800a3c0:	5462      	strb	r2, [r4, r1]
 800a3c2:	dcfb      	bgt.n	800a3bc <__sccl+0x58>
 800a3c4:	1af1      	subs	r1, r6, r3
 800a3c6:	3901      	subs	r1, #1
 800a3c8:	1c58      	adds	r0, r3, #1
 800a3ca:	42b3      	cmp	r3, r6
 800a3cc:	bfa8      	it	ge
 800a3ce:	2100      	movge	r1, #0
 800a3d0:	1843      	adds	r3, r0, r1
 800a3d2:	e7e0      	b.n	800a396 <__sccl+0x32>

0800a3d4 <_strtol_l.constprop.0>:
 800a3d4:	2b01      	cmp	r3, #1
 800a3d6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a3da:	d001      	beq.n	800a3e0 <_strtol_l.constprop.0+0xc>
 800a3dc:	2b24      	cmp	r3, #36	; 0x24
 800a3de:	d906      	bls.n	800a3ee <_strtol_l.constprop.0+0x1a>
 800a3e0:	f7fe fa64 	bl	80088ac <__errno>
 800a3e4:	2316      	movs	r3, #22
 800a3e6:	6003      	str	r3, [r0, #0]
 800a3e8:	2000      	movs	r0, #0
 800a3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a3ee:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800a4d4 <_strtol_l.constprop.0+0x100>
 800a3f2:	460d      	mov	r5, r1
 800a3f4:	462e      	mov	r6, r5
 800a3f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3fa:	f814 700c 	ldrb.w	r7, [r4, ip]
 800a3fe:	f017 0708 	ands.w	r7, r7, #8
 800a402:	d1f7      	bne.n	800a3f4 <_strtol_l.constprop.0+0x20>
 800a404:	2c2d      	cmp	r4, #45	; 0x2d
 800a406:	d132      	bne.n	800a46e <_strtol_l.constprop.0+0x9a>
 800a408:	782c      	ldrb	r4, [r5, #0]
 800a40a:	2701      	movs	r7, #1
 800a40c:	1cb5      	adds	r5, r6, #2
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d05b      	beq.n	800a4ca <_strtol_l.constprop.0+0xf6>
 800a412:	2b10      	cmp	r3, #16
 800a414:	d109      	bne.n	800a42a <_strtol_l.constprop.0+0x56>
 800a416:	2c30      	cmp	r4, #48	; 0x30
 800a418:	d107      	bne.n	800a42a <_strtol_l.constprop.0+0x56>
 800a41a:	782c      	ldrb	r4, [r5, #0]
 800a41c:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800a420:	2c58      	cmp	r4, #88	; 0x58
 800a422:	d14d      	bne.n	800a4c0 <_strtol_l.constprop.0+0xec>
 800a424:	786c      	ldrb	r4, [r5, #1]
 800a426:	2310      	movs	r3, #16
 800a428:	3502      	adds	r5, #2
 800a42a:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800a42e:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 800a432:	f04f 0c00 	mov.w	ip, #0
 800a436:	fbb8 f9f3 	udiv	r9, r8, r3
 800a43a:	4666      	mov	r6, ip
 800a43c:	fb03 8a19 	mls	sl, r3, r9, r8
 800a440:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800a444:	f1be 0f09 	cmp.w	lr, #9
 800a448:	d816      	bhi.n	800a478 <_strtol_l.constprop.0+0xa4>
 800a44a:	4674      	mov	r4, lr
 800a44c:	42a3      	cmp	r3, r4
 800a44e:	dd24      	ble.n	800a49a <_strtol_l.constprop.0+0xc6>
 800a450:	f1bc 0f00 	cmp.w	ip, #0
 800a454:	db1e      	blt.n	800a494 <_strtol_l.constprop.0+0xc0>
 800a456:	45b1      	cmp	r9, r6
 800a458:	d31c      	bcc.n	800a494 <_strtol_l.constprop.0+0xc0>
 800a45a:	d101      	bne.n	800a460 <_strtol_l.constprop.0+0x8c>
 800a45c:	45a2      	cmp	sl, r4
 800a45e:	db19      	blt.n	800a494 <_strtol_l.constprop.0+0xc0>
 800a460:	fb06 4603 	mla	r6, r6, r3, r4
 800a464:	f04f 0c01 	mov.w	ip, #1
 800a468:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a46c:	e7e8      	b.n	800a440 <_strtol_l.constprop.0+0x6c>
 800a46e:	2c2b      	cmp	r4, #43	; 0x2b
 800a470:	bf04      	itt	eq
 800a472:	782c      	ldrbeq	r4, [r5, #0]
 800a474:	1cb5      	addeq	r5, r6, #2
 800a476:	e7ca      	b.n	800a40e <_strtol_l.constprop.0+0x3a>
 800a478:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800a47c:	f1be 0f19 	cmp.w	lr, #25
 800a480:	d801      	bhi.n	800a486 <_strtol_l.constprop.0+0xb2>
 800a482:	3c37      	subs	r4, #55	; 0x37
 800a484:	e7e2      	b.n	800a44c <_strtol_l.constprop.0+0x78>
 800a486:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800a48a:	f1be 0f19 	cmp.w	lr, #25
 800a48e:	d804      	bhi.n	800a49a <_strtol_l.constprop.0+0xc6>
 800a490:	3c57      	subs	r4, #87	; 0x57
 800a492:	e7db      	b.n	800a44c <_strtol_l.constprop.0+0x78>
 800a494:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 800a498:	e7e6      	b.n	800a468 <_strtol_l.constprop.0+0x94>
 800a49a:	f1bc 0f00 	cmp.w	ip, #0
 800a49e:	da05      	bge.n	800a4ac <_strtol_l.constprop.0+0xd8>
 800a4a0:	2322      	movs	r3, #34	; 0x22
 800a4a2:	6003      	str	r3, [r0, #0]
 800a4a4:	4646      	mov	r6, r8
 800a4a6:	b942      	cbnz	r2, 800a4ba <_strtol_l.constprop.0+0xe6>
 800a4a8:	4630      	mov	r0, r6
 800a4aa:	e79e      	b.n	800a3ea <_strtol_l.constprop.0+0x16>
 800a4ac:	b107      	cbz	r7, 800a4b0 <_strtol_l.constprop.0+0xdc>
 800a4ae:	4276      	negs	r6, r6
 800a4b0:	2a00      	cmp	r2, #0
 800a4b2:	d0f9      	beq.n	800a4a8 <_strtol_l.constprop.0+0xd4>
 800a4b4:	f1bc 0f00 	cmp.w	ip, #0
 800a4b8:	d000      	beq.n	800a4bc <_strtol_l.constprop.0+0xe8>
 800a4ba:	1e69      	subs	r1, r5, #1
 800a4bc:	6011      	str	r1, [r2, #0]
 800a4be:	e7f3      	b.n	800a4a8 <_strtol_l.constprop.0+0xd4>
 800a4c0:	2430      	movs	r4, #48	; 0x30
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d1b1      	bne.n	800a42a <_strtol_l.constprop.0+0x56>
 800a4c6:	2308      	movs	r3, #8
 800a4c8:	e7af      	b.n	800a42a <_strtol_l.constprop.0+0x56>
 800a4ca:	2c30      	cmp	r4, #48	; 0x30
 800a4cc:	d0a5      	beq.n	800a41a <_strtol_l.constprop.0+0x46>
 800a4ce:	230a      	movs	r3, #10
 800a4d0:	e7ab      	b.n	800a42a <_strtol_l.constprop.0+0x56>
 800a4d2:	bf00      	nop
 800a4d4:	0800aa03 	.word	0x0800aa03

0800a4d8 <_strtol_r>:
 800a4d8:	f7ff bf7c 	b.w	800a3d4 <_strtol_l.constprop.0>

0800a4dc <_strtoul_l.constprop.0>:
 800a4dc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a4e0:	4f36      	ldr	r7, [pc, #216]	; (800a5bc <_strtoul_l.constprop.0+0xe0>)
 800a4e2:	4686      	mov	lr, r0
 800a4e4:	460d      	mov	r5, r1
 800a4e6:	4628      	mov	r0, r5
 800a4e8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a4ec:	5de6      	ldrb	r6, [r4, r7]
 800a4ee:	f016 0608 	ands.w	r6, r6, #8
 800a4f2:	d1f8      	bne.n	800a4e6 <_strtoul_l.constprop.0+0xa>
 800a4f4:	2c2d      	cmp	r4, #45	; 0x2d
 800a4f6:	d12f      	bne.n	800a558 <_strtoul_l.constprop.0+0x7c>
 800a4f8:	782c      	ldrb	r4, [r5, #0]
 800a4fa:	2601      	movs	r6, #1
 800a4fc:	1c85      	adds	r5, r0, #2
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d057      	beq.n	800a5b2 <_strtoul_l.constprop.0+0xd6>
 800a502:	2b10      	cmp	r3, #16
 800a504:	d109      	bne.n	800a51a <_strtoul_l.constprop.0+0x3e>
 800a506:	2c30      	cmp	r4, #48	; 0x30
 800a508:	d107      	bne.n	800a51a <_strtoul_l.constprop.0+0x3e>
 800a50a:	7828      	ldrb	r0, [r5, #0]
 800a50c:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 800a510:	2858      	cmp	r0, #88	; 0x58
 800a512:	d149      	bne.n	800a5a8 <_strtoul_l.constprop.0+0xcc>
 800a514:	786c      	ldrb	r4, [r5, #1]
 800a516:	2310      	movs	r3, #16
 800a518:	3502      	adds	r5, #2
 800a51a:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
 800a51e:	2700      	movs	r7, #0
 800a520:	fbb8 f8f3 	udiv	r8, r8, r3
 800a524:	fb03 f908 	mul.w	r9, r3, r8
 800a528:	ea6f 0909 	mvn.w	r9, r9
 800a52c:	4638      	mov	r0, r7
 800a52e:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 800a532:	f1bc 0f09 	cmp.w	ip, #9
 800a536:	d814      	bhi.n	800a562 <_strtoul_l.constprop.0+0x86>
 800a538:	4664      	mov	r4, ip
 800a53a:	42a3      	cmp	r3, r4
 800a53c:	dd22      	ble.n	800a584 <_strtoul_l.constprop.0+0xa8>
 800a53e:	2f00      	cmp	r7, #0
 800a540:	db1d      	blt.n	800a57e <_strtoul_l.constprop.0+0xa2>
 800a542:	4580      	cmp	r8, r0
 800a544:	d31b      	bcc.n	800a57e <_strtoul_l.constprop.0+0xa2>
 800a546:	d101      	bne.n	800a54c <_strtoul_l.constprop.0+0x70>
 800a548:	45a1      	cmp	r9, r4
 800a54a:	db18      	blt.n	800a57e <_strtoul_l.constprop.0+0xa2>
 800a54c:	fb00 4003 	mla	r0, r0, r3, r4
 800a550:	2701      	movs	r7, #1
 800a552:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a556:	e7ea      	b.n	800a52e <_strtoul_l.constprop.0+0x52>
 800a558:	2c2b      	cmp	r4, #43	; 0x2b
 800a55a:	bf04      	itt	eq
 800a55c:	782c      	ldrbeq	r4, [r5, #0]
 800a55e:	1c85      	addeq	r5, r0, #2
 800a560:	e7cd      	b.n	800a4fe <_strtoul_l.constprop.0+0x22>
 800a562:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 800a566:	f1bc 0f19 	cmp.w	ip, #25
 800a56a:	d801      	bhi.n	800a570 <_strtoul_l.constprop.0+0x94>
 800a56c:	3c37      	subs	r4, #55	; 0x37
 800a56e:	e7e4      	b.n	800a53a <_strtoul_l.constprop.0+0x5e>
 800a570:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 800a574:	f1bc 0f19 	cmp.w	ip, #25
 800a578:	d804      	bhi.n	800a584 <_strtoul_l.constprop.0+0xa8>
 800a57a:	3c57      	subs	r4, #87	; 0x57
 800a57c:	e7dd      	b.n	800a53a <_strtoul_l.constprop.0+0x5e>
 800a57e:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
 800a582:	e7e6      	b.n	800a552 <_strtoul_l.constprop.0+0x76>
 800a584:	2f00      	cmp	r7, #0
 800a586:	da07      	bge.n	800a598 <_strtoul_l.constprop.0+0xbc>
 800a588:	2322      	movs	r3, #34	; 0x22
 800a58a:	f8ce 3000 	str.w	r3, [lr]
 800a58e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a592:	b932      	cbnz	r2, 800a5a2 <_strtoul_l.constprop.0+0xc6>
 800a594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a598:	b106      	cbz	r6, 800a59c <_strtoul_l.constprop.0+0xc0>
 800a59a:	4240      	negs	r0, r0
 800a59c:	2a00      	cmp	r2, #0
 800a59e:	d0f9      	beq.n	800a594 <_strtoul_l.constprop.0+0xb8>
 800a5a0:	b107      	cbz	r7, 800a5a4 <_strtoul_l.constprop.0+0xc8>
 800a5a2:	1e69      	subs	r1, r5, #1
 800a5a4:	6011      	str	r1, [r2, #0]
 800a5a6:	e7f5      	b.n	800a594 <_strtoul_l.constprop.0+0xb8>
 800a5a8:	2430      	movs	r4, #48	; 0x30
 800a5aa:	2b00      	cmp	r3, #0
 800a5ac:	d1b5      	bne.n	800a51a <_strtoul_l.constprop.0+0x3e>
 800a5ae:	2308      	movs	r3, #8
 800a5b0:	e7b3      	b.n	800a51a <_strtoul_l.constprop.0+0x3e>
 800a5b2:	2c30      	cmp	r4, #48	; 0x30
 800a5b4:	d0a9      	beq.n	800a50a <_strtoul_l.constprop.0+0x2e>
 800a5b6:	230a      	movs	r3, #10
 800a5b8:	e7af      	b.n	800a51a <_strtoul_l.constprop.0+0x3e>
 800a5ba:	bf00      	nop
 800a5bc:	0800aa03 	.word	0x0800aa03

0800a5c0 <_strtoul_r>:
 800a5c0:	f7ff bf8c 	b.w	800a4dc <_strtoul_l.constprop.0>

0800a5c4 <__submore>:
 800a5c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c8:	460c      	mov	r4, r1
 800a5ca:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800a5cc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800a5d0:	4299      	cmp	r1, r3
 800a5d2:	d11d      	bne.n	800a610 <__submore+0x4c>
 800a5d4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800a5d8:	f7fe fac2 	bl	8008b60 <_malloc_r>
 800a5dc:	b918      	cbnz	r0, 800a5e6 <__submore+0x22>
 800a5de:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800a5e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800a5ea:	63a3      	str	r3, [r4, #56]	; 0x38
 800a5ec:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 800a5f0:	6360      	str	r0, [r4, #52]	; 0x34
 800a5f2:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 800a5f6:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800a5fa:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 800a5fe:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 800a602:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 800a606:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 800a60a:	6020      	str	r0, [r4, #0]
 800a60c:	2000      	movs	r0, #0
 800a60e:	e7e8      	b.n	800a5e2 <__submore+0x1e>
 800a610:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800a612:	0077      	lsls	r7, r6, #1
 800a614:	463a      	mov	r2, r7
 800a616:	f000 f84b 	bl	800a6b0 <_realloc_r>
 800a61a:	4605      	mov	r5, r0
 800a61c:	2800      	cmp	r0, #0
 800a61e:	d0de      	beq.n	800a5de <__submore+0x1a>
 800a620:	eb00 0806 	add.w	r8, r0, r6
 800a624:	4601      	mov	r1, r0
 800a626:	4632      	mov	r2, r6
 800a628:	4640      	mov	r0, r8
 800a62a:	f7fe fa62 	bl	8008af2 <memcpy>
 800a62e:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 800a632:	f8c4 8000 	str.w	r8, [r4]
 800a636:	e7e9      	b.n	800a60c <__submore+0x48>

0800a638 <_fstat_r>:
 800a638:	b538      	push	{r3, r4, r5, lr}
 800a63a:	4d07      	ldr	r5, [pc, #28]	; (800a658 <_fstat_r+0x20>)
 800a63c:	2300      	movs	r3, #0
 800a63e:	4604      	mov	r4, r0
 800a640:	4608      	mov	r0, r1
 800a642:	4611      	mov	r1, r2
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	f7f6 fcda 	bl	8000ffe <_fstat>
 800a64a:	1c43      	adds	r3, r0, #1
 800a64c:	d102      	bne.n	800a654 <_fstat_r+0x1c>
 800a64e:	682b      	ldr	r3, [r5, #0]
 800a650:	b103      	cbz	r3, 800a654 <_fstat_r+0x1c>
 800a652:	6023      	str	r3, [r4, #0]
 800a654:	bd38      	pop	{r3, r4, r5, pc}
 800a656:	bf00      	nop
 800a658:	20004bc8 	.word	0x20004bc8

0800a65c <_isatty_r>:
 800a65c:	b538      	push	{r3, r4, r5, lr}
 800a65e:	4d06      	ldr	r5, [pc, #24]	; (800a678 <_isatty_r+0x1c>)
 800a660:	2300      	movs	r3, #0
 800a662:	4604      	mov	r4, r0
 800a664:	4608      	mov	r0, r1
 800a666:	602b      	str	r3, [r5, #0]
 800a668:	f7f6 fcd9 	bl	800101e <_isatty>
 800a66c:	1c43      	adds	r3, r0, #1
 800a66e:	d102      	bne.n	800a676 <_isatty_r+0x1a>
 800a670:	682b      	ldr	r3, [r5, #0]
 800a672:	b103      	cbz	r3, 800a676 <_isatty_r+0x1a>
 800a674:	6023      	str	r3, [r4, #0]
 800a676:	bd38      	pop	{r3, r4, r5, pc}
 800a678:	20004bc8 	.word	0x20004bc8

0800a67c <memmove>:
 800a67c:	4288      	cmp	r0, r1
 800a67e:	b510      	push	{r4, lr}
 800a680:	eb01 0402 	add.w	r4, r1, r2
 800a684:	d902      	bls.n	800a68c <memmove+0x10>
 800a686:	4284      	cmp	r4, r0
 800a688:	4623      	mov	r3, r4
 800a68a:	d807      	bhi.n	800a69c <memmove+0x20>
 800a68c:	1e43      	subs	r3, r0, #1
 800a68e:	42a1      	cmp	r1, r4
 800a690:	d008      	beq.n	800a6a4 <memmove+0x28>
 800a692:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a696:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a69a:	e7f8      	b.n	800a68e <memmove+0x12>
 800a69c:	4402      	add	r2, r0
 800a69e:	4601      	mov	r1, r0
 800a6a0:	428a      	cmp	r2, r1
 800a6a2:	d100      	bne.n	800a6a6 <memmove+0x2a>
 800a6a4:	bd10      	pop	{r4, pc}
 800a6a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a6aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a6ae:	e7f7      	b.n	800a6a0 <memmove+0x24>

0800a6b0 <_realloc_r>:
 800a6b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a6b4:	4680      	mov	r8, r0
 800a6b6:	4614      	mov	r4, r2
 800a6b8:	460e      	mov	r6, r1
 800a6ba:	b921      	cbnz	r1, 800a6c6 <_realloc_r+0x16>
 800a6bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a6c0:	4611      	mov	r1, r2
 800a6c2:	f7fe ba4d 	b.w	8008b60 <_malloc_r>
 800a6c6:	b92a      	cbnz	r2, 800a6d4 <_realloc_r+0x24>
 800a6c8:	f7fe fe80 	bl	80093cc <_free_r>
 800a6cc:	4625      	mov	r5, r4
 800a6ce:	4628      	mov	r0, r5
 800a6d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a6d4:	f000 f81b 	bl	800a70e <_malloc_usable_size_r>
 800a6d8:	4284      	cmp	r4, r0
 800a6da:	4607      	mov	r7, r0
 800a6dc:	d802      	bhi.n	800a6e4 <_realloc_r+0x34>
 800a6de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800a6e2:	d812      	bhi.n	800a70a <_realloc_r+0x5a>
 800a6e4:	4621      	mov	r1, r4
 800a6e6:	4640      	mov	r0, r8
 800a6e8:	f7fe fa3a 	bl	8008b60 <_malloc_r>
 800a6ec:	4605      	mov	r5, r0
 800a6ee:	2800      	cmp	r0, #0
 800a6f0:	d0ed      	beq.n	800a6ce <_realloc_r+0x1e>
 800a6f2:	42bc      	cmp	r4, r7
 800a6f4:	4622      	mov	r2, r4
 800a6f6:	4631      	mov	r1, r6
 800a6f8:	bf28      	it	cs
 800a6fa:	463a      	movcs	r2, r7
 800a6fc:	f7fe f9f9 	bl	8008af2 <memcpy>
 800a700:	4631      	mov	r1, r6
 800a702:	4640      	mov	r0, r8
 800a704:	f7fe fe62 	bl	80093cc <_free_r>
 800a708:	e7e1      	b.n	800a6ce <_realloc_r+0x1e>
 800a70a:	4635      	mov	r5, r6
 800a70c:	e7df      	b.n	800a6ce <_realloc_r+0x1e>

0800a70e <_malloc_usable_size_r>:
 800a70e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a712:	1f18      	subs	r0, r3, #4
 800a714:	2b00      	cmp	r3, #0
 800a716:	bfbc      	itt	lt
 800a718:	580b      	ldrlt	r3, [r1, r0]
 800a71a:	18c0      	addlt	r0, r0, r3
 800a71c:	4770      	bx	lr
	...

0800a720 <_init>:
 800a720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a722:	bf00      	nop
 800a724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a726:	bc08      	pop	{r3}
 800a728:	469e      	mov	lr, r3
 800a72a:	4770      	bx	lr

0800a72c <_fini>:
 800a72c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a72e:	bf00      	nop
 800a730:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a732:	bc08      	pop	{r3}
 800a734:	469e      	mov	lr, r3
 800a736:	4770      	bx	lr
