
rtos_RGB_LED_async.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  08006650  08006650  00016650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080067ac  080067ac  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080067ac  080067ac  000167ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080067b4  080067b4  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080067b4  080067b4  000167b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080067b8  080067b8  000167b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  080067bc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001acc  20000074  08006830  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001b40  08006830  00021b40  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001d474  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003bc3  00000000  00000000  0003d518  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001770  00000000  00000000  000410e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000015f8  00000000  00000000  00042850  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023420  00000000  00000000  00043e48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001abf8  00000000  00000000  00067268  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d543e  00000000  00000000  00081e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0015729e  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000064e4  00000000  00000000  001572f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000074 	.word	0x20000074
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08006638 	.word	0x08006638

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000078 	.word	0x20000078
 80001cc:	08006638 	.word	0x08006638

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001e4:	f000 b974 	b.w	80004d0 <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9d08      	ldr	r5, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	468e      	mov	lr, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14d      	bne.n	80002aa <__udivmoddi4+0xaa>
 800020e:	428a      	cmp	r2, r1
 8000210:	4694      	mov	ip, r2
 8000212:	d969      	bls.n	80002e8 <__udivmoddi4+0xe8>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b152      	cbz	r2, 8000230 <__udivmoddi4+0x30>
 800021a:	fa01 f302 	lsl.w	r3, r1, r2
 800021e:	f1c2 0120 	rsb	r1, r2, #32
 8000222:	fa20 f101 	lsr.w	r1, r0, r1
 8000226:	fa0c fc02 	lsl.w	ip, ip, r2
 800022a:	ea41 0e03 	orr.w	lr, r1, r3
 800022e:	4094      	lsls	r4, r2
 8000230:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000234:	0c21      	lsrs	r1, r4, #16
 8000236:	fbbe f6f8 	udiv	r6, lr, r8
 800023a:	fa1f f78c 	uxth.w	r7, ip
 800023e:	fb08 e316 	mls	r3, r8, r6, lr
 8000242:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000246:	fb06 f107 	mul.w	r1, r6, r7
 800024a:	4299      	cmp	r1, r3
 800024c:	d90a      	bls.n	8000264 <__udivmoddi4+0x64>
 800024e:	eb1c 0303 	adds.w	r3, ip, r3
 8000252:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000256:	f080 811f 	bcs.w	8000498 <__udivmoddi4+0x298>
 800025a:	4299      	cmp	r1, r3
 800025c:	f240 811c 	bls.w	8000498 <__udivmoddi4+0x298>
 8000260:	3e02      	subs	r6, #2
 8000262:	4463      	add	r3, ip
 8000264:	1a5b      	subs	r3, r3, r1
 8000266:	b2a4      	uxth	r4, r4
 8000268:	fbb3 f0f8 	udiv	r0, r3, r8
 800026c:	fb08 3310 	mls	r3, r8, r0, r3
 8000270:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000274:	fb00 f707 	mul.w	r7, r0, r7
 8000278:	42a7      	cmp	r7, r4
 800027a:	d90a      	bls.n	8000292 <__udivmoddi4+0x92>
 800027c:	eb1c 0404 	adds.w	r4, ip, r4
 8000280:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000284:	f080 810a 	bcs.w	800049c <__udivmoddi4+0x29c>
 8000288:	42a7      	cmp	r7, r4
 800028a:	f240 8107 	bls.w	800049c <__udivmoddi4+0x29c>
 800028e:	4464      	add	r4, ip
 8000290:	3802      	subs	r0, #2
 8000292:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000296:	1be4      	subs	r4, r4, r7
 8000298:	2600      	movs	r6, #0
 800029a:	b11d      	cbz	r5, 80002a4 <__udivmoddi4+0xa4>
 800029c:	40d4      	lsrs	r4, r2
 800029e:	2300      	movs	r3, #0
 80002a0:	e9c5 4300 	strd	r4, r3, [r5]
 80002a4:	4631      	mov	r1, r6
 80002a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002aa:	428b      	cmp	r3, r1
 80002ac:	d909      	bls.n	80002c2 <__udivmoddi4+0xc2>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	f000 80ef 	beq.w	8000492 <__udivmoddi4+0x292>
 80002b4:	2600      	movs	r6, #0
 80002b6:	e9c5 0100 	strd	r0, r1, [r5]
 80002ba:	4630      	mov	r0, r6
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	fab3 f683 	clz	r6, r3
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	d14a      	bne.n	8000360 <__udivmoddi4+0x160>
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xd4>
 80002ce:	4282      	cmp	r2, r0
 80002d0:	f200 80f9 	bhi.w	80004c6 <__udivmoddi4+0x2c6>
 80002d4:	1a84      	subs	r4, r0, r2
 80002d6:	eb61 0303 	sbc.w	r3, r1, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	469e      	mov	lr, r3
 80002de:	2d00      	cmp	r5, #0
 80002e0:	d0e0      	beq.n	80002a4 <__udivmoddi4+0xa4>
 80002e2:	e9c5 4e00 	strd	r4, lr, [r5]
 80002e6:	e7dd      	b.n	80002a4 <__udivmoddi4+0xa4>
 80002e8:	b902      	cbnz	r2, 80002ec <__udivmoddi4+0xec>
 80002ea:	deff      	udf	#255	; 0xff
 80002ec:	fab2 f282 	clz	r2, r2
 80002f0:	2a00      	cmp	r2, #0
 80002f2:	f040 8092 	bne.w	800041a <__udivmoddi4+0x21a>
 80002f6:	eba1 010c 	sub.w	r1, r1, ip
 80002fa:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002fe:	fa1f fe8c 	uxth.w	lr, ip
 8000302:	2601      	movs	r6, #1
 8000304:	0c20      	lsrs	r0, r4, #16
 8000306:	fbb1 f3f7 	udiv	r3, r1, r7
 800030a:	fb07 1113 	mls	r1, r7, r3, r1
 800030e:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000312:	fb0e f003 	mul.w	r0, lr, r3
 8000316:	4288      	cmp	r0, r1
 8000318:	d908      	bls.n	800032c <__udivmoddi4+0x12c>
 800031a:	eb1c 0101 	adds.w	r1, ip, r1
 800031e:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000322:	d202      	bcs.n	800032a <__udivmoddi4+0x12a>
 8000324:	4288      	cmp	r0, r1
 8000326:	f200 80cb 	bhi.w	80004c0 <__udivmoddi4+0x2c0>
 800032a:	4643      	mov	r3, r8
 800032c:	1a09      	subs	r1, r1, r0
 800032e:	b2a4      	uxth	r4, r4
 8000330:	fbb1 f0f7 	udiv	r0, r1, r7
 8000334:	fb07 1110 	mls	r1, r7, r0, r1
 8000338:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 800033c:	fb0e fe00 	mul.w	lr, lr, r0
 8000340:	45a6      	cmp	lr, r4
 8000342:	d908      	bls.n	8000356 <__udivmoddi4+0x156>
 8000344:	eb1c 0404 	adds.w	r4, ip, r4
 8000348:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 800034c:	d202      	bcs.n	8000354 <__udivmoddi4+0x154>
 800034e:	45a6      	cmp	lr, r4
 8000350:	f200 80bb 	bhi.w	80004ca <__udivmoddi4+0x2ca>
 8000354:	4608      	mov	r0, r1
 8000356:	eba4 040e 	sub.w	r4, r4, lr
 800035a:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 800035e:	e79c      	b.n	800029a <__udivmoddi4+0x9a>
 8000360:	f1c6 0720 	rsb	r7, r6, #32
 8000364:	40b3      	lsls	r3, r6
 8000366:	fa22 fc07 	lsr.w	ip, r2, r7
 800036a:	ea4c 0c03 	orr.w	ip, ip, r3
 800036e:	fa20 f407 	lsr.w	r4, r0, r7
 8000372:	fa01 f306 	lsl.w	r3, r1, r6
 8000376:	431c      	orrs	r4, r3
 8000378:	40f9      	lsrs	r1, r7
 800037a:	ea4f 491c 	mov.w	r9, ip, lsr #16
 800037e:	fa00 f306 	lsl.w	r3, r0, r6
 8000382:	fbb1 f8f9 	udiv	r8, r1, r9
 8000386:	0c20      	lsrs	r0, r4, #16
 8000388:	fa1f fe8c 	uxth.w	lr, ip
 800038c:	fb09 1118 	mls	r1, r9, r8, r1
 8000390:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000394:	fb08 f00e 	mul.w	r0, r8, lr
 8000398:	4288      	cmp	r0, r1
 800039a:	fa02 f206 	lsl.w	r2, r2, r6
 800039e:	d90b      	bls.n	80003b8 <__udivmoddi4+0x1b8>
 80003a0:	eb1c 0101 	adds.w	r1, ip, r1
 80003a4:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003a8:	f080 8088 	bcs.w	80004bc <__udivmoddi4+0x2bc>
 80003ac:	4288      	cmp	r0, r1
 80003ae:	f240 8085 	bls.w	80004bc <__udivmoddi4+0x2bc>
 80003b2:	f1a8 0802 	sub.w	r8, r8, #2
 80003b6:	4461      	add	r1, ip
 80003b8:	1a09      	subs	r1, r1, r0
 80003ba:	b2a4      	uxth	r4, r4
 80003bc:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c0:	fb09 1110 	mls	r1, r9, r0, r1
 80003c4:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c8:	fb00 fe0e 	mul.w	lr, r0, lr
 80003cc:	458e      	cmp	lr, r1
 80003ce:	d908      	bls.n	80003e2 <__udivmoddi4+0x1e2>
 80003d0:	eb1c 0101 	adds.w	r1, ip, r1
 80003d4:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003d8:	d26c      	bcs.n	80004b4 <__udivmoddi4+0x2b4>
 80003da:	458e      	cmp	lr, r1
 80003dc:	d96a      	bls.n	80004b4 <__udivmoddi4+0x2b4>
 80003de:	3802      	subs	r0, #2
 80003e0:	4461      	add	r1, ip
 80003e2:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003e6:	fba0 9402 	umull	r9, r4, r0, r2
 80003ea:	eba1 010e 	sub.w	r1, r1, lr
 80003ee:	42a1      	cmp	r1, r4
 80003f0:	46c8      	mov	r8, r9
 80003f2:	46a6      	mov	lr, r4
 80003f4:	d356      	bcc.n	80004a4 <__udivmoddi4+0x2a4>
 80003f6:	d053      	beq.n	80004a0 <__udivmoddi4+0x2a0>
 80003f8:	b15d      	cbz	r5, 8000412 <__udivmoddi4+0x212>
 80003fa:	ebb3 0208 	subs.w	r2, r3, r8
 80003fe:	eb61 010e 	sbc.w	r1, r1, lr
 8000402:	fa01 f707 	lsl.w	r7, r1, r7
 8000406:	fa22 f306 	lsr.w	r3, r2, r6
 800040a:	40f1      	lsrs	r1, r6
 800040c:	431f      	orrs	r7, r3
 800040e:	e9c5 7100 	strd	r7, r1, [r5]
 8000412:	2600      	movs	r6, #0
 8000414:	4631      	mov	r1, r6
 8000416:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041a:	f1c2 0320 	rsb	r3, r2, #32
 800041e:	40d8      	lsrs	r0, r3
 8000420:	fa0c fc02 	lsl.w	ip, ip, r2
 8000424:	fa21 f303 	lsr.w	r3, r1, r3
 8000428:	4091      	lsls	r1, r2
 800042a:	4301      	orrs	r1, r0
 800042c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000430:	fa1f fe8c 	uxth.w	lr, ip
 8000434:	fbb3 f0f7 	udiv	r0, r3, r7
 8000438:	fb07 3610 	mls	r6, r7, r0, r3
 800043c:	0c0b      	lsrs	r3, r1, #16
 800043e:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000442:	fb00 f60e 	mul.w	r6, r0, lr
 8000446:	429e      	cmp	r6, r3
 8000448:	fa04 f402 	lsl.w	r4, r4, r2
 800044c:	d908      	bls.n	8000460 <__udivmoddi4+0x260>
 800044e:	eb1c 0303 	adds.w	r3, ip, r3
 8000452:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 8000456:	d22f      	bcs.n	80004b8 <__udivmoddi4+0x2b8>
 8000458:	429e      	cmp	r6, r3
 800045a:	d92d      	bls.n	80004b8 <__udivmoddi4+0x2b8>
 800045c:	3802      	subs	r0, #2
 800045e:	4463      	add	r3, ip
 8000460:	1b9b      	subs	r3, r3, r6
 8000462:	b289      	uxth	r1, r1
 8000464:	fbb3 f6f7 	udiv	r6, r3, r7
 8000468:	fb07 3316 	mls	r3, r7, r6, r3
 800046c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000470:	fb06 f30e 	mul.w	r3, r6, lr
 8000474:	428b      	cmp	r3, r1
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x28a>
 8000478:	eb1c 0101 	adds.w	r1, ip, r1
 800047c:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000480:	d216      	bcs.n	80004b0 <__udivmoddi4+0x2b0>
 8000482:	428b      	cmp	r3, r1
 8000484:	d914      	bls.n	80004b0 <__udivmoddi4+0x2b0>
 8000486:	3e02      	subs	r6, #2
 8000488:	4461      	add	r1, ip
 800048a:	1ac9      	subs	r1, r1, r3
 800048c:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000490:	e738      	b.n	8000304 <__udivmoddi4+0x104>
 8000492:	462e      	mov	r6, r5
 8000494:	4628      	mov	r0, r5
 8000496:	e705      	b.n	80002a4 <__udivmoddi4+0xa4>
 8000498:	4606      	mov	r6, r0
 800049a:	e6e3      	b.n	8000264 <__udivmoddi4+0x64>
 800049c:	4618      	mov	r0, r3
 800049e:	e6f8      	b.n	8000292 <__udivmoddi4+0x92>
 80004a0:	454b      	cmp	r3, r9
 80004a2:	d2a9      	bcs.n	80003f8 <__udivmoddi4+0x1f8>
 80004a4:	ebb9 0802 	subs.w	r8, r9, r2
 80004a8:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004ac:	3801      	subs	r0, #1
 80004ae:	e7a3      	b.n	80003f8 <__udivmoddi4+0x1f8>
 80004b0:	4646      	mov	r6, r8
 80004b2:	e7ea      	b.n	800048a <__udivmoddi4+0x28a>
 80004b4:	4620      	mov	r0, r4
 80004b6:	e794      	b.n	80003e2 <__udivmoddi4+0x1e2>
 80004b8:	4640      	mov	r0, r8
 80004ba:	e7d1      	b.n	8000460 <__udivmoddi4+0x260>
 80004bc:	46d0      	mov	r8, sl
 80004be:	e77b      	b.n	80003b8 <__udivmoddi4+0x1b8>
 80004c0:	3b02      	subs	r3, #2
 80004c2:	4461      	add	r1, ip
 80004c4:	e732      	b.n	800032c <__udivmoddi4+0x12c>
 80004c6:	4630      	mov	r0, r6
 80004c8:	e709      	b.n	80002de <__udivmoddi4+0xde>
 80004ca:	4464      	add	r4, ip
 80004cc:	3802      	subs	r0, #2
 80004ce:	e742      	b.n	8000356 <__udivmoddi4+0x156>

080004d0 <__aeabi_idiv0>:
 80004d0:	4770      	bx	lr
 80004d2:	bf00      	nop

080004d4 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004d4:	b580      	push	{r7, lr}
 80004d6:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of task_blink_r */
  task_blink_rHandle = osThreadNew(blink_red, NULL, &task_blink_r_attributes);
 80004d8:	4a0c      	ldr	r2, [pc, #48]	; (800050c <MX_FREERTOS_Init+0x38>)
 80004da:	2100      	movs	r1, #0
 80004dc:	480c      	ldr	r0, [pc, #48]	; (8000510 <MX_FREERTOS_Init+0x3c>)
 80004de:	f003 fa7f 	bl	80039e0 <osThreadNew>
 80004e2:	4603      	mov	r3, r0
 80004e4:	4a0b      	ldr	r2, [pc, #44]	; (8000514 <MX_FREERTOS_Init+0x40>)
 80004e6:	6013      	str	r3, [r2, #0]

  /* creation of task_blink_g */
  task_blink_gHandle = osThreadNew(blink_green, NULL, &task_blink_g_attributes);
 80004e8:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <MX_FREERTOS_Init+0x44>)
 80004ea:	2100      	movs	r1, #0
 80004ec:	480b      	ldr	r0, [pc, #44]	; (800051c <MX_FREERTOS_Init+0x48>)
 80004ee:	f003 fa77 	bl	80039e0 <osThreadNew>
 80004f2:	4603      	mov	r3, r0
 80004f4:	4a0a      	ldr	r2, [pc, #40]	; (8000520 <MX_FREERTOS_Init+0x4c>)
 80004f6:	6013      	str	r3, [r2, #0]

  /* creation of task_blink_b */
  task_blink_bHandle = osThreadNew(blink_blue, NULL, &task_blink_b_attributes);
 80004f8:	4a0a      	ldr	r2, [pc, #40]	; (8000524 <MX_FREERTOS_Init+0x50>)
 80004fa:	2100      	movs	r1, #0
 80004fc:	480a      	ldr	r0, [pc, #40]	; (8000528 <MX_FREERTOS_Init+0x54>)
 80004fe:	f003 fa6f 	bl	80039e0 <osThreadNew>
 8000502:	4603      	mov	r3, r0
 8000504:	4a09      	ldr	r2, [pc, #36]	; (800052c <MX_FREERTOS_Init+0x58>)
 8000506:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000508:	bf00      	nop
 800050a:	bd80      	pop	{r7, pc}
 800050c:	08006698 	.word	0x08006698
 8000510:	08000531 	.word	0x08000531
 8000514:	20000090 	.word	0x20000090
 8000518:	080066bc 	.word	0x080066bc
 800051c:	08000541 	.word	0x08000541
 8000520:	20000094 	.word	0x20000094
 8000524:	080066e0 	.word	0x080066e0
 8000528:	08000551 	.word	0x08000551
 800052c:	20000098 	.word	0x20000098

08000530 <blink_red>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_blink_red */
void blink_red(void *argument)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b082      	sub	sp, #8
 8000534:	af00      	add	r7, sp, #0
 8000536:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink_red */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000538:	2001      	movs	r0, #1
 800053a:	f003 fae3 	bl	8003b04 <osDelay>
 800053e:	e7fb      	b.n	8000538 <blink_red+0x8>

08000540 <blink_green>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink_green */
void blink_green(void *argument)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b082      	sub	sp, #8
 8000544:	af00      	add	r7, sp, #0
 8000546:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink_green */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000548:	2001      	movs	r0, #1
 800054a:	f003 fadb 	bl	8003b04 <osDelay>
 800054e:	e7fb      	b.n	8000548 <blink_green+0x8>

08000550 <blink_blue>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_blink_blue */
void blink_blue(void *argument)
{
 8000550:	b580      	push	{r7, lr}
 8000552:	b082      	sub	sp, #8
 8000554:	af00      	add	r7, sp, #0
 8000556:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN blink_blue */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000558:	2001      	movs	r0, #1
 800055a:	f003 fad3 	bl	8003b04 <osDelay>
 800055e:	e7fb      	b.n	8000558 <blink_blue+0x8>

08000560 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b088      	sub	sp, #32
 8000564:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000566:	f107 030c 	add.w	r3, r7, #12
 800056a:	2200      	movs	r2, #0
 800056c:	601a      	str	r2, [r3, #0]
 800056e:	605a      	str	r2, [r3, #4]
 8000570:	609a      	str	r2, [r3, #8]
 8000572:	60da      	str	r2, [r3, #12]
 8000574:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000576:	4b29      	ldr	r3, [pc, #164]	; (800061c <MX_GPIO_Init+0xbc>)
 8000578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800057a:	4a28      	ldr	r2, [pc, #160]	; (800061c <MX_GPIO_Init+0xbc>)
 800057c:	f043 0304 	orr.w	r3, r3, #4
 8000580:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000582:	4b26      	ldr	r3, [pc, #152]	; (800061c <MX_GPIO_Init+0xbc>)
 8000584:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000586:	f003 0304 	and.w	r3, r3, #4
 800058a:	60bb      	str	r3, [r7, #8]
 800058c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800058e:	4b23      	ldr	r3, [pc, #140]	; (800061c <MX_GPIO_Init+0xbc>)
 8000590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000592:	4a22      	ldr	r2, [pc, #136]	; (800061c <MX_GPIO_Init+0xbc>)
 8000594:	f043 0301 	orr.w	r3, r3, #1
 8000598:	64d3      	str	r3, [r2, #76]	; 0x4c
 800059a:	4b20      	ldr	r3, [pc, #128]	; (800061c <MX_GPIO_Init+0xbc>)
 800059c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800059e:	f003 0301 	and.w	r3, r3, #1
 80005a2:	607b      	str	r3, [r7, #4]
 80005a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005a6:	4b1d      	ldr	r3, [pc, #116]	; (800061c <MX_GPIO_Init+0xbc>)
 80005a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005aa:	4a1c      	ldr	r2, [pc, #112]	; (800061c <MX_GPIO_Init+0xbc>)
 80005ac:	f043 0302 	orr.w	r3, r3, #2
 80005b0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80005b2:	4b1a      	ldr	r3, [pc, #104]	; (800061c <MX_GPIO_Init+0xbc>)
 80005b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80005b6:	f003 0302 	and.w	r3, r3, #2
 80005ba:	603b      	str	r3, [r7, #0]
 80005bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8, GPIO_PIN_RESET);
 80005be:	2200      	movs	r2, #0
 80005c0:	f44f 71a8 	mov.w	r1, #336	; 0x150
 80005c4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c8:	f000 fd56 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD3_GPIO_Port, LD3_Pin, GPIO_PIN_RESET);
 80005cc:	2200      	movs	r2, #0
 80005ce:	2108      	movs	r1, #8
 80005d0:	4813      	ldr	r0, [pc, #76]	; (8000620 <MX_GPIO_Init+0xc0>)
 80005d2:	f000 fd51 	bl	8001078 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PA4 PA6 PA8 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6|GPIO_PIN_8;
 80005d6:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005da:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005dc:	2301      	movs	r3, #1
 80005de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005e0:	2300      	movs	r3, #0
 80005e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005e4:	2300      	movs	r3, #0
 80005e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80005e8:	f107 030c 	add.w	r3, r7, #12
 80005ec:	4619      	mov	r1, r3
 80005ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005f2:	f000 fbd7 	bl	8000da4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD3_Pin;
 80005f6:	2308      	movs	r3, #8
 80005f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80005fa:	2301      	movs	r3, #1
 80005fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fe:	2300      	movs	r3, #0
 8000600:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000602:	2300      	movs	r3, #0
 8000604:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD3_GPIO_Port, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	4804      	ldr	r0, [pc, #16]	; (8000620 <MX_GPIO_Init+0xc0>)
 800060e:	f000 fbc9 	bl	8000da4 <HAL_GPIO_Init>

}
 8000612:	bf00      	nop
 8000614:	3720      	adds	r7, #32
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	40021000 	.word	0x40021000
 8000620:	48000400 	.word	0x48000400

08000624 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000628:	f000 fa21 	bl	8000a6e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800062c:	f000 f80b 	bl	8000646 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000630:	f7ff ff96 	bl	8000560 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000634:	f000 f950 	bl	80008d8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();  /* Call init function for freertos objects (in freertos.c) */
 8000638:	f003 f988 	bl	800394c <osKernelInitialize>
  MX_FREERTOS_Init();
 800063c:	f7ff ff4a 	bl	80004d4 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000640:	f003 f9a8 	bl	8003994 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
 8000644:	e7fe      	b.n	8000644 <main+0x20>

08000646 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000646:	b580      	push	{r7, lr}
 8000648:	b096      	sub	sp, #88	; 0x58
 800064a:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800064c:	f107 0314 	add.w	r3, r7, #20
 8000650:	2244      	movs	r2, #68	; 0x44
 8000652:	2100      	movs	r1, #0
 8000654:	4618      	mov	r0, r3
 8000656:	f005 ff25 	bl	80064a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800065a:	463b      	mov	r3, r7
 800065c:	2200      	movs	r2, #0
 800065e:	601a      	str	r2, [r3, #0]
 8000660:	605a      	str	r2, [r3, #4]
 8000662:	609a      	str	r2, [r3, #8]
 8000664:	60da      	str	r2, [r3, #12]
 8000666:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000668:	f44f 7000 	mov.w	r0, #512	; 0x200
 800066c:	f000 fd2a 	bl	80010c4 <HAL_PWREx_ControlVoltageScaling>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d001      	beq.n	800067a <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000676:	f000 f84b 	bl	8000710 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 800067a:	2310      	movs	r3, #16
 800067c:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800067e:	2301      	movs	r3, #1
 8000680:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000682:	2300      	movs	r3, #0
 8000684:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000686:	2360      	movs	r3, #96	; 0x60
 8000688:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800068a:	2302      	movs	r3, #2
 800068c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 800068e:	2301      	movs	r3, #1
 8000690:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 16;
 8000696:	2310      	movs	r3, #16
 8000698:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800069a:	2307      	movs	r3, #7
 800069c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4618      	mov	r0, r3
 80006ac:	f000 fd60 	bl	8001170 <HAL_RCC_OscConfig>
 80006b0:	4603      	mov	r3, r0
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d001      	beq.n	80006ba <SystemClock_Config+0x74>
  {
    Error_Handler();
 80006b6:	f000 f82b 	bl	8000710 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006ba:	230f      	movs	r3, #15
 80006bc:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006be:	2303      	movs	r3, #3
 80006c0:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006ca:	2300      	movs	r3, #0
 80006cc:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80006ce:	463b      	mov	r3, r7
 80006d0:	2101      	movs	r1, #1
 80006d2:	4618      	mov	r0, r3
 80006d4:	f001 f960 	bl	8001998 <HAL_RCC_ClockConfig>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d001      	beq.n	80006e2 <SystemClock_Config+0x9c>
  {
    Error_Handler();
 80006de:	f000 f817 	bl	8000710 <Error_Handler>
  }
}
 80006e2:	bf00      	nop
 80006e4:	3758      	adds	r7, #88	; 0x58
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bd80      	pop	{r7, pc}
	...

080006ec <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	b082      	sub	sp, #8
 80006f0:	af00      	add	r7, sp, #0
 80006f2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80006f4:	687b      	ldr	r3, [r7, #4]
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	4a04      	ldr	r2, [pc, #16]	; (800070c <HAL_TIM_PeriodElapsedCallback+0x20>)
 80006fa:	4293      	cmp	r3, r2
 80006fc:	d101      	bne.n	8000702 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80006fe:	f000 f9cf 	bl	8000aa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000702:	bf00      	nop
 8000704:	3708      	adds	r7, #8
 8000706:	46bd      	mov	sp, r7
 8000708:	bd80      	pop	{r7, pc}
 800070a:	bf00      	nop
 800070c:	40001000 	.word	0x40001000

08000710 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000710:	b480      	push	{r7}
 8000712:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000714:	b672      	cpsid	i
}
 8000716:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000718:	e7fe      	b.n	8000718 <Error_Handler+0x8>
	...

0800071c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b082      	sub	sp, #8
 8000720:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000722:	4b11      	ldr	r3, [pc, #68]	; (8000768 <HAL_MspInit+0x4c>)
 8000724:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000726:	4a10      	ldr	r2, [pc, #64]	; (8000768 <HAL_MspInit+0x4c>)
 8000728:	f043 0301 	orr.w	r3, r3, #1
 800072c:	6613      	str	r3, [r2, #96]	; 0x60
 800072e:	4b0e      	ldr	r3, [pc, #56]	; (8000768 <HAL_MspInit+0x4c>)
 8000730:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000732:	f003 0301 	and.w	r3, r3, #1
 8000736:	607b      	str	r3, [r7, #4]
 8000738:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800073a:	4b0b      	ldr	r3, [pc, #44]	; (8000768 <HAL_MspInit+0x4c>)
 800073c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800073e:	4a0a      	ldr	r2, [pc, #40]	; (8000768 <HAL_MspInit+0x4c>)
 8000740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000744:	6593      	str	r3, [r2, #88]	; 0x58
 8000746:	4b08      	ldr	r3, [pc, #32]	; (8000768 <HAL_MspInit+0x4c>)
 8000748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800074a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800074e:	603b      	str	r3, [r7, #0]
 8000750:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000752:	2200      	movs	r2, #0
 8000754:	210f      	movs	r1, #15
 8000756:	f06f 0001 	mvn.w	r0, #1
 800075a:	f000 fa79 	bl	8000c50 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800075e:	bf00      	nop
 8000760:	3708      	adds	r7, #8
 8000762:	46bd      	mov	sp, r7
 8000764:	bd80      	pop	{r7, pc}
 8000766:	bf00      	nop
 8000768:	40021000 	.word	0x40021000

0800076c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b08e      	sub	sp, #56	; 0x38
 8000770:	af00      	add	r7, sp, #0
 8000772:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler;

  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status = HAL_OK;
 8000774:	2300      	movs	r3, #0
 8000776:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 800077a:	4b34      	ldr	r3, [pc, #208]	; (800084c <HAL_InitTick+0xe0>)
 800077c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800077e:	4a33      	ldr	r2, [pc, #204]	; (800084c <HAL_InitTick+0xe0>)
 8000780:	f043 0310 	orr.w	r3, r3, #16
 8000784:	6593      	str	r3, [r2, #88]	; 0x58
 8000786:	4b31      	ldr	r3, [pc, #196]	; (800084c <HAL_InitTick+0xe0>)
 8000788:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800078a:	f003 0310 	and.w	r3, r3, #16
 800078e:	60fb      	str	r3, [r7, #12]
 8000790:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000792:	f107 0210 	add.w	r2, r7, #16
 8000796:	f107 0314 	add.w	r3, r7, #20
 800079a:	4611      	mov	r1, r2
 800079c:	4618      	mov	r0, r3
 800079e:	f001 fabf 	bl	8001d20 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 80007a2:	6a3b      	ldr	r3, [r7, #32]
 80007a4:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80007a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80007a8:	2b00      	cmp	r3, #0
 80007aa:	d103      	bne.n	80007b4 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80007ac:	f001 fa8c 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 80007b0:	6378      	str	r0, [r7, #52]	; 0x34
 80007b2:	e004      	b.n	80007be <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 80007b4:	f001 fa88 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 80007b8:	4603      	mov	r3, r0
 80007ba:	005b      	lsls	r3, r3, #1
 80007bc:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80007be:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80007c0:	4a23      	ldr	r2, [pc, #140]	; (8000850 <HAL_InitTick+0xe4>)
 80007c2:	fba2 2303 	umull	r2, r3, r2, r3
 80007c6:	0c9b      	lsrs	r3, r3, #18
 80007c8:	3b01      	subs	r3, #1
 80007ca:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80007cc:	4b21      	ldr	r3, [pc, #132]	; (8000854 <HAL_InitTick+0xe8>)
 80007ce:	4a22      	ldr	r2, [pc, #136]	; (8000858 <HAL_InitTick+0xec>)
 80007d0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80007d2:	4b20      	ldr	r3, [pc, #128]	; (8000854 <HAL_InitTick+0xe8>)
 80007d4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80007d8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80007da:	4a1e      	ldr	r2, [pc, #120]	; (8000854 <HAL_InitTick+0xe8>)
 80007dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80007de:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80007e0:	4b1c      	ldr	r3, [pc, #112]	; (8000854 <HAL_InitTick+0xe8>)
 80007e2:	2200      	movs	r2, #0
 80007e4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007e6:	4b1b      	ldr	r3, [pc, #108]	; (8000854 <HAL_InitTick+0xe8>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007ec:	4b19      	ldr	r3, [pc, #100]	; (8000854 <HAL_InitTick+0xe8>)
 80007ee:	2200      	movs	r2, #0
 80007f0:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 80007f2:	4818      	ldr	r0, [pc, #96]	; (8000854 <HAL_InitTick+0xe8>)
 80007f4:	f001 fe0e 	bl	8002414 <HAL_TIM_Base_Init>
 80007f8:	4603      	mov	r3, r0
 80007fa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 80007fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000802:	2b00      	cmp	r3, #0
 8000804:	d11b      	bne.n	800083e <HAL_InitTick+0xd2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000806:	4813      	ldr	r0, [pc, #76]	; (8000854 <HAL_InitTick+0xe8>)
 8000808:	f001 fe66 	bl	80024d8 <HAL_TIM_Base_Start_IT>
 800080c:	4603      	mov	r3, r0
 800080e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000812:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000816:	2b00      	cmp	r3, #0
 8000818:	d111      	bne.n	800083e <HAL_InitTick+0xd2>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800081a:	2036      	movs	r0, #54	; 0x36
 800081c:	f000 fa34 	bl	8000c88 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	2b0f      	cmp	r3, #15
 8000824:	d808      	bhi.n	8000838 <HAL_InitTick+0xcc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000826:	2200      	movs	r2, #0
 8000828:	6879      	ldr	r1, [r7, #4]
 800082a:	2036      	movs	r0, #54	; 0x36
 800082c:	f000 fa10 	bl	8000c50 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000830:	4a0a      	ldr	r2, [pc, #40]	; (800085c <HAL_InitTick+0xf0>)
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	6013      	str	r3, [r2, #0]
 8000836:	e002      	b.n	800083e <HAL_InitTick+0xd2>
      }
      else
      {
        status = HAL_ERROR;
 8000838:	2301      	movs	r3, #1
 800083a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 800083e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000842:	4618      	mov	r0, r3
 8000844:	3738      	adds	r7, #56	; 0x38
 8000846:	46bd      	mov	sp, r7
 8000848:	bd80      	pop	{r7, pc}
 800084a:	bf00      	nop
 800084c:	40021000 	.word	0x40021000
 8000850:	431bde83 	.word	0x431bde83
 8000854:	2000009c 	.word	0x2000009c
 8000858:	40001000 	.word	0x40001000
 800085c:	20000004 	.word	0x20000004

08000860 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000860:	b480      	push	{r7}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000864:	e7fe      	b.n	8000864 <NMI_Handler+0x4>

08000866 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000866:	b480      	push	{r7}
 8000868:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800086a:	e7fe      	b.n	800086a <HardFault_Handler+0x4>

0800086c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800086c:	b480      	push	{r7}
 800086e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000870:	e7fe      	b.n	8000870 <MemManage_Handler+0x4>

08000872 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000872:	b480      	push	{r7}
 8000874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000876:	e7fe      	b.n	8000876 <BusFault_Handler+0x4>

08000878 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800087c:	e7fe      	b.n	800087c <UsageFault_Handler+0x4>

0800087e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800087e:	b480      	push	{r7}
 8000880:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000882:	bf00      	nop
 8000884:	46bd      	mov	sp, r7
 8000886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800088a:	4770      	bx	lr

0800088c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000890:	4802      	ldr	r0, [pc, #8]	; (800089c <USART2_IRQHandler+0x10>)
 8000892:	f002 f88d 	bl	80029b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000e8 	.word	0x200000e8

080008a0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC channel1 and channel2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80008a4:	4802      	ldr	r0, [pc, #8]	; (80008b0 <TIM6_DAC_IRQHandler+0x10>)
 80008a6:	f001 fe6b 	bl	8002580 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80008aa:	bf00      	nop
 80008ac:	bd80      	pop	{r7, pc}
 80008ae:	bf00      	nop
 80008b0:	2000009c 	.word	0x2000009c

080008b4 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80008b4:	b480      	push	{r7}
 80008b6:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80008b8:	4b06      	ldr	r3, [pc, #24]	; (80008d4 <SystemInit+0x20>)
 80008ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80008be:	4a05      	ldr	r2, [pc, #20]	; (80008d4 <SystemInit+0x20>)
 80008c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80008c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80008c8:	bf00      	nop
 80008ca:	46bd      	mov	sp, r7
 80008cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d0:	4770      	bx	lr
 80008d2:	bf00      	nop
 80008d4:	e000ed00 	.word	0xe000ed00

080008d8 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart2;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008de:	4a15      	ldr	r2, [pc, #84]	; (8000934 <MX_USART2_UART_Init+0x5c>)
 80008e0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008e4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80008e8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80008ea:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80008f6:	4b0e      	ldr	r3, [pc, #56]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008f8:	2200      	movs	r2, #0
 80008fa:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80008fc:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_USART2_UART_Init+0x58>)
 80008fe:	220c      	movs	r2, #12
 8000900:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000902:	4b0b      	ldr	r3, [pc, #44]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000904:	2200      	movs	r2, #0
 8000906:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000908:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_USART2_UART_Init+0x58>)
 800090a:	2200      	movs	r2, #0
 800090c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800090e:	4b08      	ldr	r3, [pc, #32]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000910:	2200      	movs	r2, #0
 8000912:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000914:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_USART2_UART_Init+0x58>)
 8000916:	2200      	movs	r2, #0
 8000918:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800091a:	4805      	ldr	r0, [pc, #20]	; (8000930 <MX_USART2_UART_Init+0x58>)
 800091c:	f001 fffa 	bl	8002914 <HAL_UART_Init>
 8000920:	4603      	mov	r3, r0
 8000922:	2b00      	cmp	r3, #0
 8000924:	d001      	beq.n	800092a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000926:	f7ff fef3 	bl	8000710 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800092a:	bf00      	nop
 800092c:	bd80      	pop	{r7, pc}
 800092e:	bf00      	nop
 8000930:	200000e8 	.word	0x200000e8
 8000934:	40004400 	.word	0x40004400

08000938 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b09e      	sub	sp, #120	; 0x78
 800093c:	af00      	add	r7, sp, #0
 800093e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000940:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8000944:	2200      	movs	r2, #0
 8000946:	601a      	str	r2, [r3, #0]
 8000948:	605a      	str	r2, [r3, #4]
 800094a:	609a      	str	r2, [r3, #8]
 800094c:	60da      	str	r2, [r3, #12]
 800094e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000950:	f107 0310 	add.w	r3, r7, #16
 8000954:	2254      	movs	r2, #84	; 0x54
 8000956:	2100      	movs	r1, #0
 8000958:	4618      	mov	r0, r3
 800095a:	f005 fda3 	bl	80064a4 <memset>
  if(uartHandle->Instance==USART2)
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	681b      	ldr	r3, [r3, #0]
 8000962:	4a2c      	ldr	r2, [pc, #176]	; (8000a14 <HAL_UART_MspInit+0xdc>)
 8000964:	4293      	cmp	r3, r2
 8000966:	d150      	bne.n	8000a0a <HAL_UART_MspInit+0xd2>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000968:	2302      	movs	r3, #2
 800096a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 800096c:	2300      	movs	r3, #0
 800096e:	637b      	str	r3, [r7, #52]	; 0x34
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000970:	f107 0310 	add.w	r3, r7, #16
 8000974:	4618      	mov	r0, r3
 8000976:	f001 fa65 	bl	8001e44 <HAL_RCCEx_PeriphCLKConfig>
 800097a:	4603      	mov	r3, r0
 800097c:	2b00      	cmp	r3, #0
 800097e:	d001      	beq.n	8000984 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000980:	f7ff fec6 	bl	8000710 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000984:	4b24      	ldr	r3, [pc, #144]	; (8000a18 <HAL_UART_MspInit+0xe0>)
 8000986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000988:	4a23      	ldr	r2, [pc, #140]	; (8000a18 <HAL_UART_MspInit+0xe0>)
 800098a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800098e:	6593      	str	r3, [r2, #88]	; 0x58
 8000990:	4b21      	ldr	r3, [pc, #132]	; (8000a18 <HAL_UART_MspInit+0xe0>)
 8000992:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000994:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800099c:	4b1e      	ldr	r3, [pc, #120]	; (8000a18 <HAL_UART_MspInit+0xe0>)
 800099e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009a0:	4a1d      	ldr	r2, [pc, #116]	; (8000a18 <HAL_UART_MspInit+0xe0>)
 80009a2:	f043 0301 	orr.w	r3, r3, #1
 80009a6:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_UART_MspInit+0xe0>)
 80009aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ac:	f003 0301 	and.w	r3, r3, #1
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA15 (JTDI)     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = VCP_TX_Pin;
 80009b4:	2304      	movs	r3, #4
 80009b6:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009b8:	2302      	movs	r3, #2
 80009ba:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009bc:	2300      	movs	r3, #0
 80009be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009c0:	2303      	movs	r3, #3
 80009c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80009c4:	2307      	movs	r3, #7
 80009c6:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_TX_GPIO_Port, &GPIO_InitStruct);
 80009c8:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009cc:	4619      	mov	r1, r3
 80009ce:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009d2:	f000 f9e7 	bl	8000da4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = VCP_RX_Pin;
 80009d6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80009da:	667b      	str	r3, [r7, #100]	; 0x64
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	66bb      	str	r3, [r7, #104]	; 0x68
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 80009e8:	2303      	movs	r3, #3
 80009ea:	677b      	str	r3, [r7, #116]	; 0x74
    HAL_GPIO_Init(VCP_RX_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0364 	add.w	r3, r7, #100	; 0x64
 80009f0:	4619      	mov	r1, r3
 80009f2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80009f6:	f000 f9d5 	bl	8000da4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80009fa:	2200      	movs	r2, #0
 80009fc:	2105      	movs	r1, #5
 80009fe:	2026      	movs	r0, #38	; 0x26
 8000a00:	f000 f926 	bl	8000c50 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000a04:	2026      	movs	r0, #38	; 0x26
 8000a06:	f000 f93f 	bl	8000c88 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8000a0a:	bf00      	nop
 8000a0c:	3778      	adds	r7, #120	; 0x78
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	40004400 	.word	0x40004400
 8000a18:	40021000 	.word	0x40021000

08000a1c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000a1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a54 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000a20:	f7ff ff48 	bl	80008b4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000a24:	480c      	ldr	r0, [pc, #48]	; (8000a58 <LoopForever+0x6>)
  ldr r1, =_edata
 8000a26:	490d      	ldr	r1, [pc, #52]	; (8000a5c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000a28:	4a0d      	ldr	r2, [pc, #52]	; (8000a60 <LoopForever+0xe>)
  movs r3, #0
 8000a2a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000a2c:	e002      	b.n	8000a34 <LoopCopyDataInit>

08000a2e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000a2e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000a30:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000a32:	3304      	adds	r3, #4

08000a34 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000a34:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000a36:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000a38:	d3f9      	bcc.n	8000a2e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000a3a:	4a0a      	ldr	r2, [pc, #40]	; (8000a64 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000a3c:	4c0a      	ldr	r4, [pc, #40]	; (8000a68 <LoopForever+0x16>)
  movs r3, #0
 8000a3e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000a40:	e001      	b.n	8000a46 <LoopFillZerobss>

08000a42 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000a42:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a44:	3204      	adds	r2, #4

08000a46 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000a46:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a48:	d3fb      	bcc.n	8000a42 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000a4a:	f005 fcf7 	bl	800643c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000a4e:	f7ff fde9 	bl	8000624 <main>

08000a52 <LoopForever>:

LoopForever:
    b LoopForever
 8000a52:	e7fe      	b.n	8000a52 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000a54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000a58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a5c:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8000a60:	080067bc 	.word	0x080067bc
  ldr r2, =_sbss
 8000a64:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 8000a68:	20001b40 	.word	0x20001b40

08000a6c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000a6c:	e7fe      	b.n	8000a6c <ADC1_IRQHandler>

08000a6e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a6e:	b580      	push	{r7, lr}
 8000a70:	b082      	sub	sp, #8
 8000a72:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000a74:	2300      	movs	r3, #0
 8000a76:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a78:	2003      	movs	r0, #3
 8000a7a:	f000 f8de 	bl	8000c3a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000a7e:	200f      	movs	r0, #15
 8000a80:	f7ff fe74 	bl	800076c <HAL_InitTick>
 8000a84:	4603      	mov	r3, r0
 8000a86:	2b00      	cmp	r3, #0
 8000a88:	d002      	beq.n	8000a90 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000a8a:	2301      	movs	r3, #1
 8000a8c:	71fb      	strb	r3, [r7, #7]
 8000a8e:	e001      	b.n	8000a94 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000a90:	f7ff fe44 	bl	800071c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
	...

08000aa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000aa0:	b480      	push	{r7}
 8000aa2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	; (8000ac0 <HAL_IncTick+0x20>)
 8000aa6:	781b      	ldrb	r3, [r3, #0]
 8000aa8:	461a      	mov	r2, r3
 8000aaa:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <HAL_IncTick+0x24>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	4413      	add	r3, r2
 8000ab0:	4a04      	ldr	r2, [pc, #16]	; (8000ac4 <HAL_IncTick+0x24>)
 8000ab2:	6013      	str	r3, [r2, #0]
}
 8000ab4:	bf00      	nop
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000abc:	4770      	bx	lr
 8000abe:	bf00      	nop
 8000ac0:	20000008 	.word	0x20000008
 8000ac4:	2000016c 	.word	0x2000016c

08000ac8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  return uwTick;
 8000acc:	4b03      	ldr	r3, [pc, #12]	; (8000adc <HAL_GetTick+0x14>)
 8000ace:	681b      	ldr	r3, [r3, #0]
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad8:	4770      	bx	lr
 8000ada:	bf00      	nop
 8000adc:	2000016c 	.word	0x2000016c

08000ae0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	b085      	sub	sp, #20
 8000ae4:	af00      	add	r7, sp, #0
 8000ae6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f003 0307 	and.w	r3, r3, #7
 8000aee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000af0:	4b0c      	ldr	r3, [pc, #48]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000af2:	68db      	ldr	r3, [r3, #12]
 8000af4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000af6:	68ba      	ldr	r2, [r7, #8]
 8000af8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000afc:	4013      	ands	r3, r2
 8000afe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000b00:	68fb      	ldr	r3, [r7, #12]
 8000b02:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000b04:	68bb      	ldr	r3, [r7, #8]
 8000b06:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000b08:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000b0c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000b10:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000b12:	4a04      	ldr	r2, [pc, #16]	; (8000b24 <__NVIC_SetPriorityGrouping+0x44>)
 8000b14:	68bb      	ldr	r3, [r7, #8]
 8000b16:	60d3      	str	r3, [r2, #12]
}
 8000b18:	bf00      	nop
 8000b1a:	3714      	adds	r7, #20
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b22:	4770      	bx	lr
 8000b24:	e000ed00 	.word	0xe000ed00

08000b28 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000b2c:	4b04      	ldr	r3, [pc, #16]	; (8000b40 <__NVIC_GetPriorityGrouping+0x18>)
 8000b2e:	68db      	ldr	r3, [r3, #12]
 8000b30:	0a1b      	lsrs	r3, r3, #8
 8000b32:	f003 0307 	and.w	r3, r3, #7
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	46bd      	mov	sp, r7
 8000b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3e:	4770      	bx	lr
 8000b40:	e000ed00 	.word	0xe000ed00

08000b44 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b44:	b480      	push	{r7}
 8000b46:	b083      	sub	sp, #12
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	4603      	mov	r3, r0
 8000b4c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b52:	2b00      	cmp	r3, #0
 8000b54:	db0b      	blt.n	8000b6e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000b56:	79fb      	ldrb	r3, [r7, #7]
 8000b58:	f003 021f 	and.w	r2, r3, #31
 8000b5c:	4907      	ldr	r1, [pc, #28]	; (8000b7c <__NVIC_EnableIRQ+0x38>)
 8000b5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b62:	095b      	lsrs	r3, r3, #5
 8000b64:	2001      	movs	r0, #1
 8000b66:	fa00 f202 	lsl.w	r2, r0, r2
 8000b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000b6e:	bf00      	nop
 8000b70:	370c      	adds	r7, #12
 8000b72:	46bd      	mov	sp, r7
 8000b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop
 8000b7c:	e000e100 	.word	0xe000e100

08000b80 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	6039      	str	r1, [r7, #0]
 8000b8a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000b8c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b90:	2b00      	cmp	r3, #0
 8000b92:	db0a      	blt.n	8000baa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000b94:	683b      	ldr	r3, [r7, #0]
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	490c      	ldr	r1, [pc, #48]	; (8000bcc <__NVIC_SetPriority+0x4c>)
 8000b9a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b9e:	0112      	lsls	r2, r2, #4
 8000ba0:	b2d2      	uxtb	r2, r2
 8000ba2:	440b      	add	r3, r1
 8000ba4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ba8:	e00a      	b.n	8000bc0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000baa:	683b      	ldr	r3, [r7, #0]
 8000bac:	b2da      	uxtb	r2, r3
 8000bae:	4908      	ldr	r1, [pc, #32]	; (8000bd0 <__NVIC_SetPriority+0x50>)
 8000bb0:	79fb      	ldrb	r3, [r7, #7]
 8000bb2:	f003 030f 	and.w	r3, r3, #15
 8000bb6:	3b04      	subs	r3, #4
 8000bb8:	0112      	lsls	r2, r2, #4
 8000bba:	b2d2      	uxtb	r2, r2
 8000bbc:	440b      	add	r3, r1
 8000bbe:	761a      	strb	r2, [r3, #24]
}
 8000bc0:	bf00      	nop
 8000bc2:	370c      	adds	r7, #12
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bca:	4770      	bx	lr
 8000bcc:	e000e100 	.word	0xe000e100
 8000bd0:	e000ed00 	.word	0xe000ed00

08000bd4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	b089      	sub	sp, #36	; 0x24
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	60f8      	str	r0, [r7, #12]
 8000bdc:	60b9      	str	r1, [r7, #8]
 8000bde:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	f003 0307 	and.w	r3, r3, #7
 8000be6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000be8:	69fb      	ldr	r3, [r7, #28]
 8000bea:	f1c3 0307 	rsb	r3, r3, #7
 8000bee:	2b04      	cmp	r3, #4
 8000bf0:	bf28      	it	cs
 8000bf2:	2304      	movcs	r3, #4
 8000bf4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000bf6:	69fb      	ldr	r3, [r7, #28]
 8000bf8:	3304      	adds	r3, #4
 8000bfa:	2b06      	cmp	r3, #6
 8000bfc:	d902      	bls.n	8000c04 <NVIC_EncodePriority+0x30>
 8000bfe:	69fb      	ldr	r3, [r7, #28]
 8000c00:	3b03      	subs	r3, #3
 8000c02:	e000      	b.n	8000c06 <NVIC_EncodePriority+0x32>
 8000c04:	2300      	movs	r3, #0
 8000c06:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c08:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000c0c:	69bb      	ldr	r3, [r7, #24]
 8000c0e:	fa02 f303 	lsl.w	r3, r2, r3
 8000c12:	43da      	mvns	r2, r3
 8000c14:	68bb      	ldr	r3, [r7, #8]
 8000c16:	401a      	ands	r2, r3
 8000c18:	697b      	ldr	r3, [r7, #20]
 8000c1a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000c1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000c20:	697b      	ldr	r3, [r7, #20]
 8000c22:	fa01 f303 	lsl.w	r3, r1, r3
 8000c26:	43d9      	mvns	r1, r3
 8000c28:	687b      	ldr	r3, [r7, #4]
 8000c2a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000c2c:	4313      	orrs	r3, r2
         );
}
 8000c2e:	4618      	mov	r0, r3
 8000c30:	3724      	adds	r7, #36	; 0x24
 8000c32:	46bd      	mov	sp, r7
 8000c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c38:	4770      	bx	lr

08000c3a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c3a:	b580      	push	{r7, lr}
 8000c3c:	b082      	sub	sp, #8
 8000c3e:	af00      	add	r7, sp, #0
 8000c40:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000c42:	6878      	ldr	r0, [r7, #4]
 8000c44:	f7ff ff4c 	bl	8000ae0 <__NVIC_SetPriorityGrouping>
}
 8000c48:	bf00      	nop
 8000c4a:	3708      	adds	r7, #8
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	4603      	mov	r3, r0
 8000c58:	60b9      	str	r1, [r7, #8]
 8000c5a:	607a      	str	r2, [r7, #4]
 8000c5c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8000c62:	f7ff ff61 	bl	8000b28 <__NVIC_GetPriorityGrouping>
 8000c66:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000c68:	687a      	ldr	r2, [r7, #4]
 8000c6a:	68b9      	ldr	r1, [r7, #8]
 8000c6c:	6978      	ldr	r0, [r7, #20]
 8000c6e:	f7ff ffb1 	bl	8000bd4 <NVIC_EncodePriority>
 8000c72:	4602      	mov	r2, r0
 8000c74:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000c78:	4611      	mov	r1, r2
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff80 	bl	8000b80 <__NVIC_SetPriority>
}
 8000c80:	bf00      	nop
 8000c82:	3718      	adds	r7, #24
 8000c84:	46bd      	mov	sp, r7
 8000c86:	bd80      	pop	{r7, pc}

08000c88 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	4603      	mov	r3, r0
 8000c90:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c96:	4618      	mov	r0, r3
 8000c98:	f7ff ff54 	bl	8000b44 <__NVIC_EnableIRQ>
}
 8000c9c:	bf00      	nop
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ca4:	b480      	push	{r7}
 8000ca6:	b085      	sub	sp, #20
 8000ca8:	af00      	add	r7, sp, #0
 8000caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000cac:	2300      	movs	r3, #0
 8000cae:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000cb0:	687b      	ldr	r3, [r7, #4]
 8000cb2:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000cb6:	b2db      	uxtb	r3, r3
 8000cb8:	2b02      	cmp	r3, #2
 8000cba:	d008      	beq.n	8000cce <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	2204      	movs	r2, #4
 8000cc0:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
 8000ccc:	e022      	b.n	8000d14 <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	681a      	ldr	r2, [r3, #0]
 8000cd4:	687b      	ldr	r3, [r7, #4]
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	f022 020e 	bic.w	r2, r2, #14
 8000cdc:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	681b      	ldr	r3, [r3, #0]
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	f022 0201 	bic.w	r2, r2, #1
 8000cec:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000cee:	687b      	ldr	r3, [r7, #4]
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000cf2:	f003 021c 	and.w	r2, r3, #28
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfa:	2101      	movs	r1, #1
 8000cfc:	fa01 f202 	lsl.w	r2, r1, r2
 8000d00:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	2201      	movs	r2, #1
 8000d06:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    return status;
 8000d12:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	3714      	adds	r7, #20
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1e:	4770      	bx	lr

08000d20 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000d20:	b580      	push	{r7, lr}
 8000d22:	b084      	sub	sp, #16
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	73fb      	strb	r3, [r7, #15]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000d2c:	687b      	ldr	r3, [r7, #4]
 8000d2e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8000d32:	b2db      	uxtb	r3, r3
 8000d34:	2b02      	cmp	r3, #2
 8000d36:	d005      	beq.n	8000d44 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000d38:	687b      	ldr	r3, [r7, #4]
 8000d3a:	2204      	movs	r2, #4
 8000d3c:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	73fb      	strb	r3, [r7, #15]
 8000d42:	e029      	b.n	8000d98 <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	681b      	ldr	r3, [r3, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	f022 020e 	bic.w	r2, r2, #14
 8000d52:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	681a      	ldr	r2, [r3, #0]
 8000d5a:	687b      	ldr	r3, [r7, #4]
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	f022 0201 	bic.w	r2, r2, #1
 8000d62:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d68:	f003 021c 	and.w	r2, r3, #28
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d70:	2101      	movs	r1, #1
 8000d72:	fa01 f202 	lsl.w	r2, r1, r2
 8000d76:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2201      	movs	r2, #1
 8000d7c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	2200      	movs	r2, #0
 8000d84:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d003      	beq.n	8000d98 <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000d94:	6878      	ldr	r0, [r7, #4]
 8000d96:	4798      	blx	r3
    }
  }
  return status;
 8000d98:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d9a:	4618      	mov	r0, r3
 8000d9c:	3710      	adds	r7, #16
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	bd80      	pop	{r7, pc}
	...

08000da4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000da4:	b480      	push	{r7}
 8000da6:	b087      	sub	sp, #28
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	6078      	str	r0, [r7, #4]
 8000dac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000dae:	2300      	movs	r3, #0
 8000db0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000db2:	e148      	b.n	8001046 <HAL_GPIO_Init+0x2a2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	681a      	ldr	r2, [r3, #0]
 8000db8:	2101      	movs	r1, #1
 8000dba:	697b      	ldr	r3, [r7, #20]
 8000dbc:	fa01 f303 	lsl.w	r3, r1, r3
 8000dc0:	4013      	ands	r3, r2
 8000dc2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000dc4:	68fb      	ldr	r3, [r7, #12]
 8000dc6:	2b00      	cmp	r3, #0
 8000dc8:	f000 813a 	beq.w	8001040 <HAL_GPIO_Init+0x29c>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	f003 0303 	and.w	r3, r3, #3
 8000dd4:	2b01      	cmp	r3, #1
 8000dd6:	d005      	beq.n	8000de4 <HAL_GPIO_Init+0x40>
 8000dd8:	683b      	ldr	r3, [r7, #0]
 8000dda:	685b      	ldr	r3, [r3, #4]
 8000ddc:	f003 0303 	and.w	r3, r3, #3
 8000de0:	2b02      	cmp	r3, #2
 8000de2:	d130      	bne.n	8000e46 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	689b      	ldr	r3, [r3, #8]
 8000de8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000dea:	697b      	ldr	r3, [r7, #20]
 8000dec:	005b      	lsls	r3, r3, #1
 8000dee:	2203      	movs	r2, #3
 8000df0:	fa02 f303 	lsl.w	r3, r2, r3
 8000df4:	43db      	mvns	r3, r3
 8000df6:	693a      	ldr	r2, [r7, #16]
 8000df8:	4013      	ands	r3, r2
 8000dfa:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	68da      	ldr	r2, [r3, #12]
 8000e00:	697b      	ldr	r3, [r7, #20]
 8000e02:	005b      	lsls	r3, r3, #1
 8000e04:	fa02 f303 	lsl.w	r3, r2, r3
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	4313      	orrs	r3, r2
 8000e0c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	693a      	ldr	r2, [r7, #16]
 8000e12:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	685b      	ldr	r3, [r3, #4]
 8000e18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000e1a:	2201      	movs	r2, #1
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e22:	43db      	mvns	r3, r3
 8000e24:	693a      	ldr	r2, [r7, #16]
 8000e26:	4013      	ands	r3, r2
 8000e28:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e2a:	683b      	ldr	r3, [r7, #0]
 8000e2c:	685b      	ldr	r3, [r3, #4]
 8000e2e:	091b      	lsrs	r3, r3, #4
 8000e30:	f003 0201 	and.w	r2, r3, #1
 8000e34:	697b      	ldr	r3, [r7, #20]
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	693a      	ldr	r2, [r7, #16]
 8000e3c:	4313      	orrs	r3, r2
 8000e3e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	693a      	ldr	r2, [r7, #16]
 8000e44:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	685b      	ldr	r3, [r3, #4]
 8000e4a:	f003 0303 	and.w	r3, r3, #3
 8000e4e:	2b03      	cmp	r3, #3
 8000e50:	d017      	beq.n	8000e82 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	68db      	ldr	r3, [r3, #12]
 8000e56:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8000e58:	697b      	ldr	r3, [r7, #20]
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	2203      	movs	r2, #3
 8000e5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000e62:	43db      	mvns	r3, r3
 8000e64:	693a      	ldr	r2, [r7, #16]
 8000e66:	4013      	ands	r3, r2
 8000e68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e6a:	683b      	ldr	r3, [r7, #0]
 8000e6c:	689a      	ldr	r2, [r3, #8]
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	005b      	lsls	r3, r3, #1
 8000e72:	fa02 f303 	lsl.w	r3, r2, r3
 8000e76:	693a      	ldr	r2, [r7, #16]
 8000e78:	4313      	orrs	r3, r2
 8000e7a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	693a      	ldr	r2, [r7, #16]
 8000e80:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e82:	683b      	ldr	r3, [r7, #0]
 8000e84:	685b      	ldr	r3, [r3, #4]
 8000e86:	f003 0303 	and.w	r3, r3, #3
 8000e8a:	2b02      	cmp	r3, #2
 8000e8c:	d123      	bne.n	8000ed6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000e8e:	697b      	ldr	r3, [r7, #20]
 8000e90:	08da      	lsrs	r2, r3, #3
 8000e92:	687b      	ldr	r3, [r7, #4]
 8000e94:	3208      	adds	r2, #8
 8000e96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e9a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	f003 0307 	and.w	r3, r3, #7
 8000ea2:	009b      	lsls	r3, r3, #2
 8000ea4:	220f      	movs	r2, #15
 8000ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8000eaa:	43db      	mvns	r3, r3
 8000eac:	693a      	ldr	r2, [r7, #16]
 8000eae:	4013      	ands	r3, r2
 8000eb0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	691a      	ldr	r2, [r3, #16]
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	f003 0307 	and.w	r3, r3, #7
 8000ebc:	009b      	lsls	r3, r3, #2
 8000ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8000ec2:	693a      	ldr	r2, [r7, #16]
 8000ec4:	4313      	orrs	r3, r2
 8000ec6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	08da      	lsrs	r2, r3, #3
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3208      	adds	r2, #8
 8000ed0:	6939      	ldr	r1, [r7, #16]
 8000ed2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed6:	687b      	ldr	r3, [r7, #4]
 8000ed8:	681b      	ldr	r3, [r3, #0]
 8000eda:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8000edc:	697b      	ldr	r3, [r7, #20]
 8000ede:	005b      	lsls	r3, r3, #1
 8000ee0:	2203      	movs	r2, #3
 8000ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee6:	43db      	mvns	r3, r3
 8000ee8:	693a      	ldr	r2, [r7, #16]
 8000eea:	4013      	ands	r3, r2
 8000eec:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f003 0203 	and.w	r2, r3, #3
 8000ef6:	697b      	ldr	r3, [r7, #20]
 8000ef8:	005b      	lsls	r3, r3, #1
 8000efa:	fa02 f303 	lsl.w	r3, r2, r3
 8000efe:	693a      	ldr	r2, [r7, #16]
 8000f00:	4313      	orrs	r3, r2
 8000f02:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000f04:	687b      	ldr	r3, [r7, #4]
 8000f06:	693a      	ldr	r2, [r7, #16]
 8000f08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000f0a:	683b      	ldr	r3, [r7, #0]
 8000f0c:	685b      	ldr	r3, [r3, #4]
 8000f0e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	f000 8094 	beq.w	8001040 <HAL_GPIO_Init+0x29c>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f18:	4b52      	ldr	r3, [pc, #328]	; (8001064 <HAL_GPIO_Init+0x2c0>)
 8000f1a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f1c:	4a51      	ldr	r2, [pc, #324]	; (8001064 <HAL_GPIO_Init+0x2c0>)
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6613      	str	r3, [r2, #96]	; 0x60
 8000f24:	4b4f      	ldr	r3, [pc, #316]	; (8001064 <HAL_GPIO_Init+0x2c0>)
 8000f26:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f28:	f003 0301 	and.w	r3, r3, #1
 8000f2c:	60bb      	str	r3, [r7, #8]
 8000f2e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000f30:	4a4d      	ldr	r2, [pc, #308]	; (8001068 <HAL_GPIO_Init+0x2c4>)
 8000f32:	697b      	ldr	r3, [r7, #20]
 8000f34:	089b      	lsrs	r3, r3, #2
 8000f36:	3302      	adds	r3, #2
 8000f38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000f3e:	697b      	ldr	r3, [r7, #20]
 8000f40:	f003 0303 	and.w	r3, r3, #3
 8000f44:	009b      	lsls	r3, r3, #2
 8000f46:	220f      	movs	r2, #15
 8000f48:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4c:	43db      	mvns	r3, r3
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	4013      	ands	r3, r2
 8000f52:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000f54:	687b      	ldr	r3, [r7, #4]
 8000f56:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000f5a:	d00d      	beq.n	8000f78 <HAL_GPIO_Init+0x1d4>
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	4a43      	ldr	r2, [pc, #268]	; (800106c <HAL_GPIO_Init+0x2c8>)
 8000f60:	4293      	cmp	r3, r2
 8000f62:	d007      	beq.n	8000f74 <HAL_GPIO_Init+0x1d0>
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	4a42      	ldr	r2, [pc, #264]	; (8001070 <HAL_GPIO_Init+0x2cc>)
 8000f68:	4293      	cmp	r3, r2
 8000f6a:	d101      	bne.n	8000f70 <HAL_GPIO_Init+0x1cc>
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	e004      	b.n	8000f7a <HAL_GPIO_Init+0x1d6>
 8000f70:	2307      	movs	r3, #7
 8000f72:	e002      	b.n	8000f7a <HAL_GPIO_Init+0x1d6>
 8000f74:	2301      	movs	r3, #1
 8000f76:	e000      	b.n	8000f7a <HAL_GPIO_Init+0x1d6>
 8000f78:	2300      	movs	r3, #0
 8000f7a:	697a      	ldr	r2, [r7, #20]
 8000f7c:	f002 0203 	and.w	r2, r2, #3
 8000f80:	0092      	lsls	r2, r2, #2
 8000f82:	4093      	lsls	r3, r2
 8000f84:	693a      	ldr	r2, [r7, #16]
 8000f86:	4313      	orrs	r3, r2
 8000f88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000f8a:	4937      	ldr	r1, [pc, #220]	; (8001068 <HAL_GPIO_Init+0x2c4>)
 8000f8c:	697b      	ldr	r3, [r7, #20]
 8000f8e:	089b      	lsrs	r3, r3, #2
 8000f90:	3302      	adds	r3, #2
 8000f92:	693a      	ldr	r2, [r7, #16]
 8000f94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000f98:	4b36      	ldr	r3, [pc, #216]	; (8001074 <HAL_GPIO_Init+0x2d0>)
 8000f9a:	689b      	ldr	r3, [r3, #8]
 8000f9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000f9e:	68fb      	ldr	r3, [r7, #12]
 8000fa0:	43db      	mvns	r3, r3
 8000fa2:	693a      	ldr	r2, [r7, #16]
 8000fa4:	4013      	ands	r3, r2
 8000fa6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000fa8:	683b      	ldr	r3, [r7, #0]
 8000faa:	685b      	ldr	r3, [r3, #4]
 8000fac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fb0:	2b00      	cmp	r3, #0
 8000fb2:	d003      	beq.n	8000fbc <HAL_GPIO_Init+0x218>
        {
          temp |= iocurrent;
 8000fb4:	693a      	ldr	r2, [r7, #16]
 8000fb6:	68fb      	ldr	r3, [r7, #12]
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000fbc:	4a2d      	ldr	r2, [pc, #180]	; (8001074 <HAL_GPIO_Init+0x2d0>)
 8000fbe:	693b      	ldr	r3, [r7, #16]
 8000fc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000fc2:	4b2c      	ldr	r3, [pc, #176]	; (8001074 <HAL_GPIO_Init+0x2d0>)
 8000fc4:	68db      	ldr	r3, [r3, #12]
 8000fc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000fc8:	68fb      	ldr	r3, [r7, #12]
 8000fca:	43db      	mvns	r3, r3
 8000fcc:	693a      	ldr	r2, [r7, #16]
 8000fce:	4013      	ands	r3, r2
 8000fd0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	685b      	ldr	r3, [r3, #4]
 8000fd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d003      	beq.n	8000fe6 <HAL_GPIO_Init+0x242>
        {
          temp |= iocurrent;
 8000fde:	693a      	ldr	r2, [r7, #16]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	4313      	orrs	r3, r2
 8000fe4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000fe6:	4a23      	ldr	r2, [pc, #140]	; (8001074 <HAL_GPIO_Init+0x2d0>)
 8000fe8:	693b      	ldr	r3, [r7, #16]
 8000fea:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8000fec:	4b21      	ldr	r3, [pc, #132]	; (8001074 <HAL_GPIO_Init+0x2d0>)
 8000fee:	685b      	ldr	r3, [r3, #4]
 8000ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ff2:	68fb      	ldr	r3, [r7, #12]
 8000ff4:	43db      	mvns	r3, r3
 8000ff6:	693a      	ldr	r2, [r7, #16]
 8000ff8:	4013      	ands	r3, r2
 8000ffa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000ffc:	683b      	ldr	r3, [r7, #0]
 8000ffe:	685b      	ldr	r3, [r3, #4]
 8001000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001004:	2b00      	cmp	r3, #0
 8001006:	d003      	beq.n	8001010 <HAL_GPIO_Init+0x26c>
        {
          temp |= iocurrent;
 8001008:	693a      	ldr	r2, [r7, #16]
 800100a:	68fb      	ldr	r3, [r7, #12]
 800100c:	4313      	orrs	r3, r2
 800100e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001010:	4a18      	ldr	r2, [pc, #96]	; (8001074 <HAL_GPIO_Init+0x2d0>)
 8001012:	693b      	ldr	r3, [r7, #16]
 8001014:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <HAL_GPIO_Init+0x2d0>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800101c:	68fb      	ldr	r3, [r7, #12]
 800101e:	43db      	mvns	r3, r3
 8001020:	693a      	ldr	r2, [r7, #16]
 8001022:	4013      	ands	r3, r2
 8001024:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800102e:	2b00      	cmp	r3, #0
 8001030:	d003      	beq.n	800103a <HAL_GPIO_Init+0x296>
        {
          temp |= iocurrent;
 8001032:	693a      	ldr	r2, [r7, #16]
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	4313      	orrs	r3, r2
 8001038:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800103a:	4a0e      	ldr	r2, [pc, #56]	; (8001074 <HAL_GPIO_Init+0x2d0>)
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001040:	697b      	ldr	r3, [r7, #20]
 8001042:	3301      	adds	r3, #1
 8001044:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	681a      	ldr	r2, [r3, #0]
 800104a:	697b      	ldr	r3, [r7, #20]
 800104c:	fa22 f303 	lsr.w	r3, r2, r3
 8001050:	2b00      	cmp	r3, #0
 8001052:	f47f aeaf 	bne.w	8000db4 <HAL_GPIO_Init+0x10>
  }
}
 8001056:	bf00      	nop
 8001058:	bf00      	nop
 800105a:	371c      	adds	r7, #28
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	40021000 	.word	0x40021000
 8001068:	40010000 	.word	0x40010000
 800106c:	48000400 	.word	0x48000400
 8001070:	48000800 	.word	0x48000800
 8001074:	40010400 	.word	0x40010400

08001078 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
 800107e:	6078      	str	r0, [r7, #4]
 8001080:	460b      	mov	r3, r1
 8001082:	807b      	strh	r3, [r7, #2]
 8001084:	4613      	mov	r3, r2
 8001086:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001088:	787b      	ldrb	r3, [r7, #1]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d003      	beq.n	8001096 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800108e:	887a      	ldrh	r2, [r7, #2]
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001094:	e002      	b.n	800109c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001096:	887a      	ldrh	r2, [r7, #2]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800109c:	bf00      	nop
 800109e:	370c      	adds	r7, #12
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80010ac:	4b04      	ldr	r3, [pc, #16]	; (80010c0 <HAL_PWREx_GetVoltageRange+0x18>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	46bd      	mov	sp, r7
 80010b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010bc:	4770      	bx	lr
 80010be:	bf00      	nop
 80010c0:	40007000 	.word	0x40007000

080010c4 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010d2:	d130      	bne.n	8001136 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80010d4:	4b23      	ldr	r3, [pc, #140]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80010dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80010e0:	d038      	beq.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80010e2:	4b20      	ldr	r3, [pc, #128]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80010ea:	4a1e      	ldr	r2, [pc, #120]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80010ec:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80010f0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80010f2:	4b1d      	ldr	r3, [pc, #116]	; (8001168 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2232      	movs	r2, #50	; 0x32
 80010f8:	fb02 f303 	mul.w	r3, r2, r3
 80010fc:	4a1b      	ldr	r2, [pc, #108]	; (800116c <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80010fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001102:	0c9b      	lsrs	r3, r3, #18
 8001104:	3301      	adds	r3, #1
 8001106:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001108:	e002      	b.n	8001110 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 800110a:	68fb      	ldr	r3, [r7, #12]
 800110c:	3b01      	subs	r3, #1
 800110e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001110:	4b14      	ldr	r3, [pc, #80]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001112:	695b      	ldr	r3, [r3, #20]
 8001114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001118:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800111c:	d102      	bne.n	8001124 <HAL_PWREx_ControlVoltageScaling+0x60>
 800111e:	68fb      	ldr	r3, [r7, #12]
 8001120:	2b00      	cmp	r3, #0
 8001122:	d1f2      	bne.n	800110a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001124:	4b0f      	ldr	r3, [pc, #60]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001126:	695b      	ldr	r3, [r3, #20]
 8001128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800112c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001130:	d110      	bne.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8001132:	2303      	movs	r3, #3
 8001134:	e00f      	b.n	8001156 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001136:	4b0b      	ldr	r3, [pc, #44]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800113e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001142:	d007      	beq.n	8001154 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001144:	4b07      	ldr	r3, [pc, #28]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800114c:	4a05      	ldr	r2, [pc, #20]	; (8001164 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800114e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001152:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001154:	2300      	movs	r3, #0
}
 8001156:	4618      	mov	r0, r3
 8001158:	3714      	adds	r7, #20
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr
 8001162:	bf00      	nop
 8001164:	40007000 	.word	0x40007000
 8001168:	20000000 	.word	0x20000000
 800116c:	431bde83 	.word	0x431bde83

08001170 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b088      	sub	sp, #32
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d102      	bne.n	8001184 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800117e:	2301      	movs	r3, #1
 8001180:	f000 bc02 	b.w	8001988 <HAL_RCC_OscConfig+0x818>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001184:	4b96      	ldr	r3, [pc, #600]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001186:	689b      	ldr	r3, [r3, #8]
 8001188:	f003 030c 	and.w	r3, r3, #12
 800118c:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 800118e:	4b94      	ldr	r3, [pc, #592]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001190:	68db      	ldr	r3, [r3, #12]
 8001192:	f003 0303 	and.w	r3, r3, #3
 8001196:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	f003 0310 	and.w	r3, r3, #16
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	f000 80e4 	beq.w	800136e <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80011a6:	69bb      	ldr	r3, [r7, #24]
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	d007      	beq.n	80011bc <HAL_RCC_OscConfig+0x4c>
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	2b0c      	cmp	r3, #12
 80011b0:	f040 808b 	bne.w	80012ca <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80011b4:	697b      	ldr	r3, [r7, #20]
 80011b6:	2b01      	cmp	r3, #1
 80011b8:	f040 8087 	bne.w	80012ca <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80011bc:	4b88      	ldr	r3, [pc, #544]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f003 0302 	and.w	r3, r3, #2
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d005      	beq.n	80011d4 <HAL_RCC_OscConfig+0x64>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	699b      	ldr	r3, [r3, #24]
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d101      	bne.n	80011d4 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 80011d0:	2301      	movs	r3, #1
 80011d2:	e3d9      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	6a1a      	ldr	r2, [r3, #32]
 80011d8:	4b81      	ldr	r3, [pc, #516]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f003 0308 	and.w	r3, r3, #8
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d004      	beq.n	80011ee <HAL_RCC_OscConfig+0x7e>
 80011e4:	4b7e      	ldr	r3, [pc, #504]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011ec:	e005      	b.n	80011fa <HAL_RCC_OscConfig+0x8a>
 80011ee:	4b7c      	ldr	r3, [pc, #496]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80011f0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011f4:	091b      	lsrs	r3, r3, #4
 80011f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80011fa:	4293      	cmp	r3, r2
 80011fc:	d223      	bcs.n	8001246 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6a1b      	ldr	r3, [r3, #32]
 8001202:	4618      	mov	r0, r3
 8001204:	f000 fdbe 	bl	8001d84 <RCC_SetFlashLatencyFromMSIRange>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e3ba      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001212:	4b73      	ldr	r3, [pc, #460]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a72      	ldr	r2, [pc, #456]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001218:	f043 0308 	orr.w	r3, r3, #8
 800121c:	6013      	str	r3, [r2, #0]
 800121e:	4b70      	ldr	r3, [pc, #448]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	6a1b      	ldr	r3, [r3, #32]
 800122a:	496d      	ldr	r1, [pc, #436]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 800122c:	4313      	orrs	r3, r2
 800122e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001230:	4b6b      	ldr	r3, [pc, #428]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001232:	685b      	ldr	r3, [r3, #4]
 8001234:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	69db      	ldr	r3, [r3, #28]
 800123c:	021b      	lsls	r3, r3, #8
 800123e:	4968      	ldr	r1, [pc, #416]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001240:	4313      	orrs	r3, r2
 8001242:	604b      	str	r3, [r1, #4]
 8001244:	e025      	b.n	8001292 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001246:	4b66      	ldr	r3, [pc, #408]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	4a65      	ldr	r2, [pc, #404]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 800124c:	f043 0308 	orr.w	r3, r3, #8
 8001250:	6013      	str	r3, [r2, #0]
 8001252:	4b63      	ldr	r3, [pc, #396]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a1b      	ldr	r3, [r3, #32]
 800125e:	4960      	ldr	r1, [pc, #384]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001260:	4313      	orrs	r3, r2
 8001262:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001264:	4b5e      	ldr	r3, [pc, #376]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	69db      	ldr	r3, [r3, #28]
 8001270:	021b      	lsls	r3, r3, #8
 8001272:	495b      	ldr	r1, [pc, #364]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001274:	4313      	orrs	r3, r2
 8001276:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001278:	69bb      	ldr	r3, [r7, #24]
 800127a:	2b00      	cmp	r3, #0
 800127c:	d109      	bne.n	8001292 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6a1b      	ldr	r3, [r3, #32]
 8001282:	4618      	mov	r0, r3
 8001284:	f000 fd7e 	bl	8001d84 <RCC_SetFlashLatencyFromMSIRange>
 8001288:	4603      	mov	r3, r0
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 800128e:	2301      	movs	r3, #1
 8001290:	e37a      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001292:	f000 fc81 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001296:	4602      	mov	r2, r0
 8001298:	4b51      	ldr	r3, [pc, #324]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	091b      	lsrs	r3, r3, #4
 800129e:	f003 030f 	and.w	r3, r3, #15
 80012a2:	4950      	ldr	r1, [pc, #320]	; (80013e4 <HAL_RCC_OscConfig+0x274>)
 80012a4:	5ccb      	ldrb	r3, [r1, r3]
 80012a6:	f003 031f 	and.w	r3, r3, #31
 80012aa:	fa22 f303 	lsr.w	r3, r2, r3
 80012ae:	4a4e      	ldr	r2, [pc, #312]	; (80013e8 <HAL_RCC_OscConfig+0x278>)
 80012b0:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80012b2:	4b4e      	ldr	r3, [pc, #312]	; (80013ec <HAL_RCC_OscConfig+0x27c>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	4618      	mov	r0, r3
 80012b8:	f7ff fa58 	bl	800076c <HAL_InitTick>
 80012bc:	4603      	mov	r3, r0
 80012be:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80012c0:	7bfb      	ldrb	r3, [r7, #15]
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	d052      	beq.n	800136c <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 80012c6:	7bfb      	ldrb	r3, [r7, #15]
 80012c8:	e35e      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	699b      	ldr	r3, [r3, #24]
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d032      	beq.n	8001338 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80012d2:	4b43      	ldr	r3, [pc, #268]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	4a42      	ldr	r2, [pc, #264]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80012d8:	f043 0301 	orr.w	r3, r3, #1
 80012dc:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80012de:	f7ff fbf3 	bl	8000ac8 <HAL_GetTick>
 80012e2:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012e4:	e008      	b.n	80012f8 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80012e6:	f7ff fbef 	bl	8000ac8 <HAL_GetTick>
 80012ea:	4602      	mov	r2, r0
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	1ad3      	subs	r3, r2, r3
 80012f0:	2b02      	cmp	r3, #2
 80012f2:	d901      	bls.n	80012f8 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 80012f4:	2303      	movs	r3, #3
 80012f6:	e347      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80012f8:	4b39      	ldr	r3, [pc, #228]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f003 0302 	and.w	r3, r3, #2
 8001300:	2b00      	cmp	r3, #0
 8001302:	d0f0      	beq.n	80012e6 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001304:	4b36      	ldr	r3, [pc, #216]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a35      	ldr	r2, [pc, #212]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 800130a:	f043 0308 	orr.w	r3, r3, #8
 800130e:	6013      	str	r3, [r2, #0]
 8001310:	4b33      	ldr	r3, [pc, #204]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	6a1b      	ldr	r3, [r3, #32]
 800131c:	4930      	ldr	r1, [pc, #192]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 800131e:	4313      	orrs	r3, r2
 8001320:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001322:	4b2f      	ldr	r3, [pc, #188]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001324:	685b      	ldr	r3, [r3, #4]
 8001326:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	69db      	ldr	r3, [r3, #28]
 800132e:	021b      	lsls	r3, r3, #8
 8001330:	492b      	ldr	r1, [pc, #172]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001332:	4313      	orrs	r3, r2
 8001334:	604b      	str	r3, [r1, #4]
 8001336:	e01a      	b.n	800136e <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8001338:	4b29      	ldr	r3, [pc, #164]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 800133a:	681b      	ldr	r3, [r3, #0]
 800133c:	4a28      	ldr	r2, [pc, #160]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 800133e:	f023 0301 	bic.w	r3, r3, #1
 8001342:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001344:	f7ff fbc0 	bl	8000ac8 <HAL_GetTick>
 8001348:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800134a:	e008      	b.n	800135e <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800134c:	f7ff fbbc 	bl	8000ac8 <HAL_GetTick>
 8001350:	4602      	mov	r2, r0
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	1ad3      	subs	r3, r2, r3
 8001356:	2b02      	cmp	r3, #2
 8001358:	d901      	bls.n	800135e <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 800135a:	2303      	movs	r3, #3
 800135c:	e314      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800135e:	4b20      	ldr	r3, [pc, #128]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 8001360:	681b      	ldr	r3, [r3, #0]
 8001362:	f003 0302 	and.w	r3, r3, #2
 8001366:	2b00      	cmp	r3, #0
 8001368:	d1f0      	bne.n	800134c <HAL_RCC_OscConfig+0x1dc>
 800136a:	e000      	b.n	800136e <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800136c:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f003 0301 	and.w	r3, r3, #1
 8001376:	2b00      	cmp	r3, #0
 8001378:	d073      	beq.n	8001462 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800137a:	69bb      	ldr	r3, [r7, #24]
 800137c:	2b08      	cmp	r3, #8
 800137e:	d005      	beq.n	800138c <HAL_RCC_OscConfig+0x21c>
 8001380:	69bb      	ldr	r3, [r7, #24]
 8001382:	2b0c      	cmp	r3, #12
 8001384:	d10e      	bne.n	80013a4 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8001386:	697b      	ldr	r3, [r7, #20]
 8001388:	2b03      	cmp	r3, #3
 800138a:	d10b      	bne.n	80013a4 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800138c:	4b14      	ldr	r3, [pc, #80]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 800138e:	681b      	ldr	r3, [r3, #0]
 8001390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001394:	2b00      	cmp	r3, #0
 8001396:	d063      	beq.n	8001460 <HAL_RCC_OscConfig+0x2f0>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b00      	cmp	r3, #0
 800139e:	d15f      	bne.n	8001460 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80013a0:	2301      	movs	r3, #1
 80013a2:	e2f1      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	685b      	ldr	r3, [r3, #4]
 80013a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80013ac:	d106      	bne.n	80013bc <HAL_RCC_OscConfig+0x24c>
 80013ae:	4b0c      	ldr	r3, [pc, #48]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	4a0b      	ldr	r2, [pc, #44]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80013b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013b8:	6013      	str	r3, [r2, #0]
 80013ba:	e025      	b.n	8001408 <HAL_RCC_OscConfig+0x298>
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	685b      	ldr	r3, [r3, #4]
 80013c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80013c4:	d114      	bne.n	80013f0 <HAL_RCC_OscConfig+0x280>
 80013c6:	4b06      	ldr	r3, [pc, #24]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	4a05      	ldr	r2, [pc, #20]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80013cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80013d0:	6013      	str	r3, [r2, #0]
 80013d2:	4b03      	ldr	r3, [pc, #12]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	4a02      	ldr	r2, [pc, #8]	; (80013e0 <HAL_RCC_OscConfig+0x270>)
 80013d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80013dc:	6013      	str	r3, [r2, #0]
 80013de:	e013      	b.n	8001408 <HAL_RCC_OscConfig+0x298>
 80013e0:	40021000 	.word	0x40021000
 80013e4:	08006704 	.word	0x08006704
 80013e8:	20000000 	.word	0x20000000
 80013ec:	20000004 	.word	0x20000004
 80013f0:	4ba0      	ldr	r3, [pc, #640]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a9f      	ldr	r2, [pc, #636]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b9d      	ldr	r3, [pc, #628]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a9c      	ldr	r2, [pc, #624]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001410:	f7ff fb5a 	bl	8000ac8 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fb56 	bl	8000ac8 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	; 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e2ae      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800142a:	4b92      	ldr	r3, [pc, #584]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0x2a8>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001438:	f7ff fb46 	bl	8000ac8 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fb42 	bl	8000ac8 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	; 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e29a      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001452:	4b88      	ldr	r3, [pc, #544]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0x2d0>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d060      	beq.n	8001530 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	2b04      	cmp	r3, #4
 8001472:	d005      	beq.n	8001480 <HAL_RCC_OscConfig+0x310>
 8001474:	69bb      	ldr	r3, [r7, #24]
 8001476:	2b0c      	cmp	r3, #12
 8001478:	d119      	bne.n	80014ae <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	2b02      	cmp	r3, #2
 800147e:	d116      	bne.n	80014ae <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001480:	4b7c      	ldr	r3, [pc, #496]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001488:	2b00      	cmp	r3, #0
 800148a:	d005      	beq.n	8001498 <HAL_RCC_OscConfig+0x328>
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	68db      	ldr	r3, [r3, #12]
 8001490:	2b00      	cmp	r3, #0
 8001492:	d101      	bne.n	8001498 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8001494:	2301      	movs	r3, #1
 8001496:	e277      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001498:	4b76      	ldr	r3, [pc, #472]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 800149a:	685b      	ldr	r3, [r3, #4]
 800149c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	061b      	lsls	r3, r3, #24
 80014a6:	4973      	ldr	r1, [pc, #460]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80014a8:	4313      	orrs	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80014ac:	e040      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80014ae:	687b      	ldr	r3, [r7, #4]
 80014b0:	68db      	ldr	r3, [r3, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d023      	beq.n	80014fe <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014b6:	4b6f      	ldr	r3, [pc, #444]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	4a6e      	ldr	r2, [pc, #440]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80014bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014c0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014c2:	f7ff fb01 	bl	8000ac8 <HAL_GetTick>
 80014c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014c8:	e008      	b.n	80014dc <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014ca:	f7ff fafd 	bl	8000ac8 <HAL_GetTick>
 80014ce:	4602      	mov	r2, r0
 80014d0:	693b      	ldr	r3, [r7, #16]
 80014d2:	1ad3      	subs	r3, r2, r3
 80014d4:	2b02      	cmp	r3, #2
 80014d6:	d901      	bls.n	80014dc <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 80014d8:	2303      	movs	r3, #3
 80014da:	e255      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80014dc:	4b65      	ldr	r3, [pc, #404]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d0f0      	beq.n	80014ca <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014e8:	4b62      	ldr	r3, [pc, #392]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80014ea:	685b      	ldr	r3, [r3, #4]
 80014ec:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	691b      	ldr	r3, [r3, #16]
 80014f4:	061b      	lsls	r3, r3, #24
 80014f6:	495f      	ldr	r1, [pc, #380]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80014f8:	4313      	orrs	r3, r2
 80014fa:	604b      	str	r3, [r1, #4]
 80014fc:	e018      	b.n	8001530 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80014fe:	4b5d      	ldr	r3, [pc, #372]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	4a5c      	ldr	r2, [pc, #368]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001504:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001508:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800150a:	f7ff fadd 	bl	8000ac8 <HAL_GetTick>
 800150e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001510:	e008      	b.n	8001524 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001512:	f7ff fad9 	bl	8000ac8 <HAL_GetTick>
 8001516:	4602      	mov	r2, r0
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	1ad3      	subs	r3, r2, r3
 800151c:	2b02      	cmp	r3, #2
 800151e:	d901      	bls.n	8001524 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8001520:	2303      	movs	r3, #3
 8001522:	e231      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001524:	4b53      	ldr	r3, [pc, #332]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800152c:	2b00      	cmp	r3, #0
 800152e:	d1f0      	bne.n	8001512 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	f003 0308 	and.w	r3, r3, #8
 8001538:	2b00      	cmp	r3, #0
 800153a:	d03c      	beq.n	80015b6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	695b      	ldr	r3, [r3, #20]
 8001540:	2b00      	cmp	r3, #0
 8001542:	d01c      	beq.n	800157e <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001544:	4b4b      	ldr	r3, [pc, #300]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001546:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800154a:	4a4a      	ldr	r2, [pc, #296]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 800154c:	f043 0301 	orr.w	r3, r3, #1
 8001550:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001554:	f7ff fab8 	bl	8000ac8 <HAL_GetTick>
 8001558:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800155a:	e008      	b.n	800156e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800155c:	f7ff fab4 	bl	8000ac8 <HAL_GetTick>
 8001560:	4602      	mov	r2, r0
 8001562:	693b      	ldr	r3, [r7, #16]
 8001564:	1ad3      	subs	r3, r2, r3
 8001566:	2b02      	cmp	r3, #2
 8001568:	d901      	bls.n	800156e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800156a:	2303      	movs	r3, #3
 800156c:	e20c      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800156e:	4b41      	ldr	r3, [pc, #260]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001570:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001574:	f003 0302 	and.w	r3, r3, #2
 8001578:	2b00      	cmp	r3, #0
 800157a:	d0ef      	beq.n	800155c <HAL_RCC_OscConfig+0x3ec>
 800157c:	e01b      	b.n	80015b6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800157e:	4b3d      	ldr	r3, [pc, #244]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001580:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001584:	4a3b      	ldr	r2, [pc, #236]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001586:	f023 0301 	bic.w	r3, r3, #1
 800158a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800158e:	f7ff fa9b 	bl	8000ac8 <HAL_GetTick>
 8001592:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001594:	e008      	b.n	80015a8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001596:	f7ff fa97 	bl	8000ac8 <HAL_GetTick>
 800159a:	4602      	mov	r2, r0
 800159c:	693b      	ldr	r3, [r7, #16]
 800159e:	1ad3      	subs	r3, r2, r3
 80015a0:	2b02      	cmp	r3, #2
 80015a2:	d901      	bls.n	80015a8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e1ef      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80015a8:	4b32      	ldr	r3, [pc, #200]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80015aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80015ae:	f003 0302 	and.w	r3, r3, #2
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1ef      	bne.n	8001596 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	f003 0304 	and.w	r3, r3, #4
 80015be:	2b00      	cmp	r3, #0
 80015c0:	f000 80a6 	beq.w	8001710 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015c4:	2300      	movs	r3, #0
 80015c6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 80015c8:	4b2a      	ldr	r3, [pc, #168]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80015ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d10d      	bne.n	80015f0 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015d4:	4b27      	ldr	r3, [pc, #156]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80015d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015d8:	4a26      	ldr	r2, [pc, #152]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80015da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015de:	6593      	str	r3, [r2, #88]	; 0x58
 80015e0:	4b24      	ldr	r3, [pc, #144]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 80015e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80015e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015e8:	60bb      	str	r3, [r7, #8]
 80015ea:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ec:	2301      	movs	r3, #1
 80015ee:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80015f0:	4b21      	ldr	r3, [pc, #132]	; (8001678 <HAL_RCC_OscConfig+0x508>)
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d118      	bne.n	800162e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80015fc:	4b1e      	ldr	r3, [pc, #120]	; (8001678 <HAL_RCC_OscConfig+0x508>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	4a1d      	ldr	r2, [pc, #116]	; (8001678 <HAL_RCC_OscConfig+0x508>)
 8001602:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001606:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001608:	f7ff fa5e 	bl	8000ac8 <HAL_GetTick>
 800160c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800160e:	e008      	b.n	8001622 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001610:	f7ff fa5a 	bl	8000ac8 <HAL_GetTick>
 8001614:	4602      	mov	r2, r0
 8001616:	693b      	ldr	r3, [r7, #16]
 8001618:	1ad3      	subs	r3, r2, r3
 800161a:	2b02      	cmp	r3, #2
 800161c:	d901      	bls.n	8001622 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800161e:	2303      	movs	r3, #3
 8001620:	e1b2      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001622:	4b15      	ldr	r3, [pc, #84]	; (8001678 <HAL_RCC_OscConfig+0x508>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800162a:	2b00      	cmp	r3, #0
 800162c:	d0f0      	beq.n	8001610 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	689b      	ldr	r3, [r3, #8]
 8001632:	2b01      	cmp	r3, #1
 8001634:	d108      	bne.n	8001648 <HAL_RCC_OscConfig+0x4d8>
 8001636:	4b0f      	ldr	r3, [pc, #60]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001638:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800163c:	4a0d      	ldr	r2, [pc, #52]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 800163e:	f043 0301 	orr.w	r3, r3, #1
 8001642:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001646:	e029      	b.n	800169c <HAL_RCC_OscConfig+0x52c>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	689b      	ldr	r3, [r3, #8]
 800164c:	2b05      	cmp	r3, #5
 800164e:	d115      	bne.n	800167c <HAL_RCC_OscConfig+0x50c>
 8001650:	4b08      	ldr	r3, [pc, #32]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001652:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001656:	4a07      	ldr	r2, [pc, #28]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001658:	f043 0304 	orr.w	r3, r3, #4
 800165c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001660:	4b04      	ldr	r3, [pc, #16]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001662:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001666:	4a03      	ldr	r2, [pc, #12]	; (8001674 <HAL_RCC_OscConfig+0x504>)
 8001668:	f043 0301 	orr.w	r3, r3, #1
 800166c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001670:	e014      	b.n	800169c <HAL_RCC_OscConfig+0x52c>
 8001672:	bf00      	nop
 8001674:	40021000 	.word	0x40021000
 8001678:	40007000 	.word	0x40007000
 800167c:	4b9a      	ldr	r3, [pc, #616]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 800167e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001682:	4a99      	ldr	r2, [pc, #612]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001684:	f023 0301 	bic.w	r3, r3, #1
 8001688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800168c:	4b96      	ldr	r3, [pc, #600]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 800168e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001692:	4a95      	ldr	r2, [pc, #596]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001694:	f023 0304 	bic.w	r3, r3, #4
 8001698:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d016      	beq.n	80016d2 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016a4:	f7ff fa10 	bl	8000ac8 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016aa:	e00a      	b.n	80016c2 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016ac:	f7ff fa0c 	bl	8000ac8 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80016ba:	4293      	cmp	r3, r2
 80016bc:	d901      	bls.n	80016c2 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 80016be:	2303      	movs	r3, #3
 80016c0:	e162      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80016c2:	4b89      	ldr	r3, [pc, #548]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 80016c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016c8:	f003 0302 	and.w	r3, r3, #2
 80016cc:	2b00      	cmp	r3, #0
 80016ce:	d0ed      	beq.n	80016ac <HAL_RCC_OscConfig+0x53c>
 80016d0:	e015      	b.n	80016fe <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80016d2:	f7ff f9f9 	bl	8000ac8 <HAL_GetTick>
 80016d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016d8:	e00a      	b.n	80016f0 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016da:	f7ff f9f5 	bl	8000ac8 <HAL_GetTick>
 80016de:	4602      	mov	r2, r0
 80016e0:	693b      	ldr	r3, [r7, #16]
 80016e2:	1ad3      	subs	r3, r2, r3
 80016e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80016e8:	4293      	cmp	r3, r2
 80016ea:	d901      	bls.n	80016f0 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 80016ec:	2303      	movs	r3, #3
 80016ee:	e14b      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80016f0:	4b7d      	ldr	r3, [pc, #500]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 80016f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80016f6:	f003 0302 	and.w	r3, r3, #2
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1ed      	bne.n	80016da <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80016fe:	7ffb      	ldrb	r3, [r7, #31]
 8001700:	2b01      	cmp	r3, #1
 8001702:	d105      	bne.n	8001710 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001704:	4b78      	ldr	r3, [pc, #480]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001706:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001708:	4a77      	ldr	r2, [pc, #476]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 800170a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800170e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	f003 0320 	and.w	r3, r3, #32
 8001718:	2b00      	cmp	r3, #0
 800171a:	d03c      	beq.n	8001796 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001720:	2b00      	cmp	r3, #0
 8001722:	d01c      	beq.n	800175e <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001724:	4b70      	ldr	r3, [pc, #448]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001726:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800172a:	4a6f      	ldr	r2, [pc, #444]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001734:	f7ff f9c8 	bl	8000ac8 <HAL_GetTick>
 8001738:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800173a:	e008      	b.n	800174e <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800173c:	f7ff f9c4 	bl	8000ac8 <HAL_GetTick>
 8001740:	4602      	mov	r2, r0
 8001742:	693b      	ldr	r3, [r7, #16]
 8001744:	1ad3      	subs	r3, r2, r3
 8001746:	2b02      	cmp	r3, #2
 8001748:	d901      	bls.n	800174e <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 800174a:	2303      	movs	r3, #3
 800174c:	e11c      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800174e:	4b66      	ldr	r3, [pc, #408]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001750:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d0ef      	beq.n	800173c <HAL_RCC_OscConfig+0x5cc>
 800175c:	e01b      	b.n	8001796 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800175e:	4b62      	ldr	r3, [pc, #392]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001760:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8001764:	4a60      	ldr	r2, [pc, #384]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001766:	f023 0301 	bic.w	r3, r3, #1
 800176a:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800176e:	f7ff f9ab 	bl	8000ac8 <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001776:	f7ff f9a7 	bl	8000ac8 <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e0ff      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8001788:	4b57      	ldr	r3, [pc, #348]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 800178a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800178e:	f003 0302 	and.w	r3, r3, #2
 8001792:	2b00      	cmp	r3, #0
 8001794:	d1ef      	bne.n	8001776 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800179a:	2b00      	cmp	r3, #0
 800179c:	f000 80f3 	beq.w	8001986 <HAL_RCC_OscConfig+0x816>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017a4:	2b02      	cmp	r3, #2
 80017a6:	f040 80c9 	bne.w	800193c <HAL_RCC_OscConfig+0x7cc>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80017aa:	4b4f      	ldr	r3, [pc, #316]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 80017ac:	68db      	ldr	r3, [r3, #12]
 80017ae:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017b0:	697b      	ldr	r3, [r7, #20]
 80017b2:	f003 0203 	and.w	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017ba:	429a      	cmp	r2, r3
 80017bc:	d12c      	bne.n	8001818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017be:	697b      	ldr	r3, [r7, #20]
 80017c0:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c8:	3b01      	subs	r3, #1
 80017ca:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80017cc:	429a      	cmp	r2, r3
 80017ce:	d123      	bne.n	8001818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017d0:	697b      	ldr	r3, [r7, #20]
 80017d2:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017da:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80017dc:	429a      	cmp	r2, r3
 80017de:	d11b      	bne.n	8001818 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017ea:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d113      	bne.n	8001818 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fa:	085b      	lsrs	r3, r3, #1
 80017fc:	3b01      	subs	r3, #1
 80017fe:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8001800:	429a      	cmp	r2, r3
 8001802:	d109      	bne.n	8001818 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800180e:	085b      	lsrs	r3, r3, #1
 8001810:	3b01      	subs	r3, #1
 8001812:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001814:	429a      	cmp	r2, r3
 8001816:	d06b      	beq.n	80018f0 <HAL_RCC_OscConfig+0x780>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001818:	69bb      	ldr	r3, [r7, #24]
 800181a:	2b0c      	cmp	r3, #12
 800181c:	d062      	beq.n	80018e4 <HAL_RCC_OscConfig+0x774>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800181e:	4b32      	ldr	r3, [pc, #200]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001826:	2b00      	cmp	r3, #0
 8001828:	d001      	beq.n	800182e <HAL_RCC_OscConfig+0x6be>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
#endif
            )
          {
            return HAL_ERROR;
 800182a:	2301      	movs	r3, #1
 800182c:	e0ac      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800182e:	4b2e      	ldr	r3, [pc, #184]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	4a2d      	ldr	r2, [pc, #180]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001834:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001838:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 800183a:	f7ff f945 	bl	8000ac8 <HAL_GetTick>
 800183e:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001840:	e008      	b.n	8001854 <HAL_RCC_OscConfig+0x6e4>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001842:	f7ff f941 	bl	8000ac8 <HAL_GetTick>
 8001846:	4602      	mov	r2, r0
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	2b02      	cmp	r3, #2
 800184e:	d901      	bls.n	8001854 <HAL_RCC_OscConfig+0x6e4>
              {
                return HAL_TIMEOUT;
 8001850:	2303      	movs	r3, #3
 8001852:	e099      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001854:	4b24      	ldr	r3, [pc, #144]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800185c:	2b00      	cmp	r3, #0
 800185e:	d1f0      	bne.n	8001842 <HAL_RCC_OscConfig+0x6d2>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001860:	4b21      	ldr	r3, [pc, #132]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 8001862:	68da      	ldr	r2, [r3, #12]
 8001864:	4b21      	ldr	r3, [pc, #132]	; (80018ec <HAL_RCC_OscConfig+0x77c>)
 8001866:	4013      	ands	r3, r2
 8001868:	687a      	ldr	r2, [r7, #4]
 800186a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001870:	3a01      	subs	r2, #1
 8001872:	0112      	lsls	r2, r2, #4
 8001874:	4311      	orrs	r1, r2
 8001876:	687a      	ldr	r2, [r7, #4]
 8001878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800187a:	0212      	lsls	r2, r2, #8
 800187c:	4311      	orrs	r1, r2
 800187e:	687a      	ldr	r2, [r7, #4]
 8001880:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001882:	0852      	lsrs	r2, r2, #1
 8001884:	3a01      	subs	r2, #1
 8001886:	0552      	lsls	r2, r2, #21
 8001888:	4311      	orrs	r1, r2
 800188a:	687a      	ldr	r2, [r7, #4]
 800188c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 800188e:	0852      	lsrs	r2, r2, #1
 8001890:	3a01      	subs	r2, #1
 8001892:	0652      	lsls	r2, r2, #25
 8001894:	4311      	orrs	r1, r2
 8001896:	687a      	ldr	r2, [r7, #4]
 8001898:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800189a:	06d2      	lsls	r2, r2, #27
 800189c:	430a      	orrs	r2, r1
 800189e:	4912      	ldr	r1, [pc, #72]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 80018a0:	4313      	orrs	r3, r2
 80018a2:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 80018a4:	4b10      	ldr	r3, [pc, #64]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a0f      	ldr	r2, [pc, #60]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 80018aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ae:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018b0:	4b0d      	ldr	r3, [pc, #52]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 80018b2:	68db      	ldr	r3, [r3, #12]
 80018b4:	4a0c      	ldr	r2, [pc, #48]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 80018b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018ba:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80018bc:	f7ff f904 	bl	8000ac8 <HAL_GetTick>
 80018c0:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018c2:	e008      	b.n	80018d6 <HAL_RCC_OscConfig+0x766>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018c4:	f7ff f900 	bl	8000ac8 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	2b02      	cmp	r3, #2
 80018d0:	d901      	bls.n	80018d6 <HAL_RCC_OscConfig+0x766>
              {
                return HAL_TIMEOUT;
 80018d2:	2303      	movs	r3, #3
 80018d4:	e058      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018d6:	4b04      	ldr	r3, [pc, #16]	; (80018e8 <HAL_RCC_OscConfig+0x778>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018de:	2b00      	cmp	r3, #0
 80018e0:	d0f0      	beq.n	80018c4 <HAL_RCC_OscConfig+0x754>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 80018e2:	e050      	b.n	8001986 <HAL_RCC_OscConfig+0x816>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 80018e4:	2301      	movs	r3, #1
 80018e6:	e04f      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
 80018e8:	40021000 	.word	0x40021000
 80018ec:	019d808c 	.word	0x019d808c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80018f0:	4b27      	ldr	r3, [pc, #156]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d144      	bne.n	8001986 <HAL_RCC_OscConfig+0x816>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 80018fc:	4b24      	ldr	r3, [pc, #144]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	4a23      	ldr	r2, [pc, #140]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 8001902:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001906:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001908:	4b21      	ldr	r3, [pc, #132]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4a20      	ldr	r2, [pc, #128]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 800190e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001912:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001914:	f7ff f8d8 	bl	8000ac8 <HAL_GetTick>
 8001918:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800191a:	e008      	b.n	800192e <HAL_RCC_OscConfig+0x7be>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800191c:	f7ff f8d4 	bl	8000ac8 <HAL_GetTick>
 8001920:	4602      	mov	r2, r0
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	1ad3      	subs	r3, r2, r3
 8001926:	2b02      	cmp	r3, #2
 8001928:	d901      	bls.n	800192e <HAL_RCC_OscConfig+0x7be>
            {
              return HAL_TIMEOUT;
 800192a:	2303      	movs	r3, #3
 800192c:	e02c      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800192e:	4b18      	ldr	r3, [pc, #96]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001936:	2b00      	cmp	r3, #0
 8001938:	d0f0      	beq.n	800191c <HAL_RCC_OscConfig+0x7ac>
 800193a:	e024      	b.n	8001986 <HAL_RCC_OscConfig+0x816>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 800193c:	69bb      	ldr	r3, [r7, #24]
 800193e:	2b0c      	cmp	r3, #12
 8001940:	d01f      	beq.n	8001982 <HAL_RCC_OscConfig+0x812>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001942:	4b13      	ldr	r3, [pc, #76]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a12      	ldr	r2, [pc, #72]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 8001948:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800194c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff f8bb 	bl	8000ac8 <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x7f8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001956:	f7ff f8b7 	bl	8000ac8 <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x7f8>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e00f      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001968:	4b09      	ldr	r3, [pc, #36]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001970:	2b00      	cmp	r3, #0
 8001972:	d1f0      	bne.n	8001956 <HAL_RCC_OscConfig+0x7e6>
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
#elif defined(RCC_PLLSAI1_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001974:	4b06      	ldr	r3, [pc, #24]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 8001976:	68da      	ldr	r2, [r3, #12]
 8001978:	4905      	ldr	r1, [pc, #20]	; (8001990 <HAL_RCC_OscConfig+0x820>)
 800197a:	4b06      	ldr	r3, [pc, #24]	; (8001994 <HAL_RCC_OscConfig+0x824>)
 800197c:	4013      	ands	r3, r2
 800197e:	60cb      	str	r3, [r1, #12]
 8001980:	e001      	b.n	8001986 <HAL_RCC_OscConfig+0x816>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8001982:	2301      	movs	r3, #1
 8001984:	e000      	b.n	8001988 <HAL_RCC_OscConfig+0x818>
      }
    }
  }
  return HAL_OK;
 8001986:	2300      	movs	r3, #0
}
 8001988:	4618      	mov	r0, r3
 800198a:	3720      	adds	r7, #32
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	40021000 	.word	0x40021000
 8001994:	feeefffc 	.word	0xfeeefffc

08001998 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
 80019a0:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d101      	bne.n	80019ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80019a8:	2301      	movs	r3, #1
 80019aa:	e0e7      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80019ac:	4b75      	ldr	r3, [pc, #468]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	f003 0307 	and.w	r3, r3, #7
 80019b4:	683a      	ldr	r2, [r7, #0]
 80019b6:	429a      	cmp	r2, r3
 80019b8:	d910      	bls.n	80019dc <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019ba:	4b72      	ldr	r3, [pc, #456]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f023 0207 	bic.w	r2, r3, #7
 80019c2:	4970      	ldr	r1, [pc, #448]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	4313      	orrs	r3, r2
 80019c8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019ca:	4b6e      	ldr	r3, [pc, #440]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	683a      	ldr	r2, [r7, #0]
 80019d4:	429a      	cmp	r2, r3
 80019d6:	d001      	beq.n	80019dc <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80019d8:	2301      	movs	r3, #1
 80019da:	e0cf      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	f003 0302 	and.w	r3, r3, #2
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d010      	beq.n	8001a0a <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	4b66      	ldr	r3, [pc, #408]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 80019ee:	689b      	ldr	r3, [r3, #8]
 80019f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d908      	bls.n	8001a0a <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80019f8:	4b63      	ldr	r3, [pc, #396]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 80019fa:	689b      	ldr	r3, [r3, #8]
 80019fc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	689b      	ldr	r3, [r3, #8]
 8001a04:	4960      	ldr	r1, [pc, #384]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a06:	4313      	orrs	r3, r2
 8001a08:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	681b      	ldr	r3, [r3, #0]
 8001a0e:	f003 0301 	and.w	r3, r3, #1
 8001a12:	2b00      	cmp	r3, #0
 8001a14:	d04c      	beq.n	8001ab0 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	685b      	ldr	r3, [r3, #4]
 8001a1a:	2b03      	cmp	r3, #3
 8001a1c:	d107      	bne.n	8001a2e <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001a1e:	4b5a      	ldr	r3, [pc, #360]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d121      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e0a6      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d107      	bne.n	8001a46 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001a36:	4b54      	ldr	r3, [pc, #336]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d115      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a42:	2301      	movs	r3, #1
 8001a44:	e09a      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d107      	bne.n	8001a5e <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001a4e:	4b4e      	ldr	r3, [pc, #312]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f003 0302 	and.w	r3, r3, #2
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d109      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e08e      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a5e:	4b4a      	ldr	r3, [pc, #296]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d101      	bne.n	8001a6e <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	e086      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001a6e:	4b46      	ldr	r3, [pc, #280]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a70:	689b      	ldr	r3, [r3, #8]
 8001a72:	f023 0203 	bic.w	r2, r3, #3
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	4943      	ldr	r1, [pc, #268]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001a7c:	4313      	orrs	r3, r2
 8001a7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001a80:	f7ff f822 	bl	8000ac8 <HAL_GetTick>
 8001a84:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a86:	e00a      	b.n	8001a9e <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a88:	f7ff f81e 	bl	8000ac8 <HAL_GetTick>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	1ad3      	subs	r3, r2, r3
 8001a92:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d901      	bls.n	8001a9e <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8001a9a:	2303      	movs	r3, #3
 8001a9c:	e06e      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a9e:	4b3a      	ldr	r3, [pc, #232]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 020c 	and.w	r2, r3, #12
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	009b      	lsls	r3, r3, #2
 8001aac:	429a      	cmp	r2, r3
 8001aae:	d1eb      	bne.n	8001a88 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d010      	beq.n	8001ade <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	4b31      	ldr	r3, [pc, #196]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ac2:	689b      	ldr	r3, [r3, #8]
 8001ac4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8001ac8:	429a      	cmp	r2, r3
 8001aca:	d208      	bcs.n	8001ade <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001acc:	4b2e      	ldr	r3, [pc, #184]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ace:	689b      	ldr	r3, [r3, #8]
 8001ad0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	689b      	ldr	r3, [r3, #8]
 8001ad8:	492b      	ldr	r1, [pc, #172]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001ada:	4313      	orrs	r3, r2
 8001adc:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001ade:	4b29      	ldr	r3, [pc, #164]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f003 0307 	and.w	r3, r3, #7
 8001ae6:	683a      	ldr	r2, [r7, #0]
 8001ae8:	429a      	cmp	r2, r3
 8001aea:	d210      	bcs.n	8001b0e <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001aec:	4b25      	ldr	r3, [pc, #148]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f023 0207 	bic.w	r2, r3, #7
 8001af4:	4923      	ldr	r1, [pc, #140]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001afc:	4b21      	ldr	r3, [pc, #132]	; (8001b84 <HAL_RCC_ClockConfig+0x1ec>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f003 0307 	and.w	r3, r3, #7
 8001b04:	683a      	ldr	r2, [r7, #0]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	d001      	beq.n	8001b0e <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8001b0a:	2301      	movs	r3, #1
 8001b0c:	e036      	b.n	8001b7c <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f003 0304 	and.w	r3, r3, #4
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d008      	beq.n	8001b2c <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001b1a:	4b1b      	ldr	r3, [pc, #108]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b1c:	689b      	ldr	r3, [r3, #8]
 8001b1e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	68db      	ldr	r3, [r3, #12]
 8001b26:	4918      	ldr	r1, [pc, #96]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b28:	4313      	orrs	r3, r2
 8001b2a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f003 0308 	and.w	r3, r3, #8
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d009      	beq.n	8001b4c <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001b38:	4b13      	ldr	r3, [pc, #76]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	691b      	ldr	r3, [r3, #16]
 8001b44:	00db      	lsls	r3, r3, #3
 8001b46:	4910      	ldr	r1, [pc, #64]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b48:	4313      	orrs	r3, r2
 8001b4a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001b4c:	f000 f824 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 8001b50:	4602      	mov	r2, r0
 8001b52:	4b0d      	ldr	r3, [pc, #52]	; (8001b88 <HAL_RCC_ClockConfig+0x1f0>)
 8001b54:	689b      	ldr	r3, [r3, #8]
 8001b56:	091b      	lsrs	r3, r3, #4
 8001b58:	f003 030f 	and.w	r3, r3, #15
 8001b5c:	490b      	ldr	r1, [pc, #44]	; (8001b8c <HAL_RCC_ClockConfig+0x1f4>)
 8001b5e:	5ccb      	ldrb	r3, [r1, r3]
 8001b60:	f003 031f 	and.w	r3, r3, #31
 8001b64:	fa22 f303 	lsr.w	r3, r2, r3
 8001b68:	4a09      	ldr	r2, [pc, #36]	; (8001b90 <HAL_RCC_ClockConfig+0x1f8>)
 8001b6a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8001b6c:	4b09      	ldr	r3, [pc, #36]	; (8001b94 <HAL_RCC_ClockConfig+0x1fc>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fdfb 	bl	800076c <HAL_InitTick>
 8001b76:	4603      	mov	r3, r0
 8001b78:	72fb      	strb	r3, [r7, #11]

  return status;
 8001b7a:	7afb      	ldrb	r3, [r7, #11]
}
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	3710      	adds	r7, #16
 8001b80:	46bd      	mov	sp, r7
 8001b82:	bd80      	pop	{r7, pc}
 8001b84:	40022000 	.word	0x40022000
 8001b88:	40021000 	.word	0x40021000
 8001b8c:	08006704 	.word	0x08006704
 8001b90:	20000000 	.word	0x20000000
 8001b94:	20000004 	.word	0x20000004

08001b98 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001b98:	b480      	push	{r7}
 8001b9a:	b089      	sub	sp, #36	; 0x24
 8001b9c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001ba8:	689b      	ldr	r3, [r3, #8]
 8001baa:	f003 030c 	and.w	r3, r3, #12
 8001bae:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001bb0:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d005      	beq.n	8001bcc <HAL_RCC_GetSysClockFreq+0x34>
 8001bc0:	693b      	ldr	r3, [r7, #16]
 8001bc2:	2b0c      	cmp	r3, #12
 8001bc4:	d121      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	2b01      	cmp	r3, #1
 8001bca:	d11e      	bne.n	8001c0a <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001bcc:	4b34      	ldr	r3, [pc, #208]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 0308 	and.w	r3, r3, #8
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d107      	bne.n	8001be8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001bd8:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001bde:	0a1b      	lsrs	r3, r3, #8
 8001be0:	f003 030f 	and.w	r3, r3, #15
 8001be4:	61fb      	str	r3, [r7, #28]
 8001be6:	e005      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001be8:	4b2d      	ldr	r3, [pc, #180]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	091b      	lsrs	r3, r3, #4
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001bf4:	4a2b      	ldr	r2, [pc, #172]	; (8001ca4 <HAL_RCC_GetSysClockFreq+0x10c>)
 8001bf6:	69fb      	ldr	r3, [r7, #28]
 8001bf8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bfc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d10d      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001c04:	69fb      	ldr	r3, [r7, #28]
 8001c06:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001c08:	e00a      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	2b04      	cmp	r3, #4
 8001c0e:	d102      	bne.n	8001c16 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8001c10:	4b25      	ldr	r3, [pc, #148]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c12:	61bb      	str	r3, [r7, #24]
 8001c14:	e004      	b.n	8001c20 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8001c16:	693b      	ldr	r3, [r7, #16]
 8001c18:	2b08      	cmp	r3, #8
 8001c1a:	d101      	bne.n	8001c20 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001c1c:	4b23      	ldr	r3, [pc, #140]	; (8001cac <HAL_RCC_GetSysClockFreq+0x114>)
 8001c1e:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b0c      	cmp	r3, #12
 8001c24:	d134      	bne.n	8001c90 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001c26:	4b1e      	ldr	r3, [pc, #120]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c28:	68db      	ldr	r3, [r3, #12]
 8001c2a:	f003 0303 	and.w	r3, r3, #3
 8001c2e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	2b02      	cmp	r3, #2
 8001c34:	d003      	beq.n	8001c3e <HAL_RCC_GetSysClockFreq+0xa6>
 8001c36:	68bb      	ldr	r3, [r7, #8]
 8001c38:	2b03      	cmp	r3, #3
 8001c3a:	d003      	beq.n	8001c44 <HAL_RCC_GetSysClockFreq+0xac>
 8001c3c:	e005      	b.n	8001c4a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8001c3e:	4b1a      	ldr	r3, [pc, #104]	; (8001ca8 <HAL_RCC_GetSysClockFreq+0x110>)
 8001c40:	617b      	str	r3, [r7, #20]
      break;
 8001c42:	e005      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8001c44:	4b19      	ldr	r3, [pc, #100]	; (8001cac <HAL_RCC_GetSysClockFreq+0x114>)
 8001c46:	617b      	str	r3, [r7, #20]
      break;
 8001c48:	e002      	b.n	8001c50 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	617b      	str	r3, [r7, #20]
      break;
 8001c4e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8001c50:	4b13      	ldr	r3, [pc, #76]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c52:	68db      	ldr	r3, [r3, #12]
 8001c54:	091b      	lsrs	r3, r3, #4
 8001c56:	f003 0307 	and.w	r3, r3, #7
 8001c5a:	3301      	adds	r3, #1
 8001c5c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8001c5e:	4b10      	ldr	r3, [pc, #64]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c60:	68db      	ldr	r3, [r3, #12]
 8001c62:	0a1b      	lsrs	r3, r3, #8
 8001c64:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001c68:	697a      	ldr	r2, [r7, #20]
 8001c6a:	fb03 f202 	mul.w	r2, r3, r2
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c74:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001c76:	4b0a      	ldr	r3, [pc, #40]	; (8001ca0 <HAL_RCC_GetSysClockFreq+0x108>)
 8001c78:	68db      	ldr	r3, [r3, #12]
 8001c7a:	0e5b      	lsrs	r3, r3, #25
 8001c7c:	f003 0303 	and.w	r3, r3, #3
 8001c80:	3301      	adds	r3, #1
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001c86:	697a      	ldr	r2, [r7, #20]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c8e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8001c90:	69bb      	ldr	r3, [r7, #24]
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3724      	adds	r7, #36	; 0x24
 8001c96:	46bd      	mov	sp, r7
 8001c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c9c:	4770      	bx	lr
 8001c9e:	bf00      	nop
 8001ca0:	40021000 	.word	0x40021000
 8001ca4:	0800671c 	.word	0x0800671c
 8001ca8:	00f42400 	.word	0x00f42400
 8001cac:	007a1200 	.word	0x007a1200

08001cb0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001cb4:	4b03      	ldr	r3, [pc, #12]	; (8001cc4 <HAL_RCC_GetHCLKFreq+0x14>)
 8001cb6:	681b      	ldr	r3, [r3, #0]
}
 8001cb8:	4618      	mov	r0, r3
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	20000000 	.word	0x20000000

08001cc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001ccc:	f7ff fff0 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001cd0:	4602      	mov	r2, r0
 8001cd2:	4b06      	ldr	r3, [pc, #24]	; (8001cec <HAL_RCC_GetPCLK1Freq+0x24>)
 8001cd4:	689b      	ldr	r3, [r3, #8]
 8001cd6:	0a1b      	lsrs	r3, r3, #8
 8001cd8:	f003 0307 	and.w	r3, r3, #7
 8001cdc:	4904      	ldr	r1, [pc, #16]	; (8001cf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001cde:	5ccb      	ldrb	r3, [r1, r3]
 8001ce0:	f003 031f 	and.w	r3, r3, #31
 8001ce4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ce8:	4618      	mov	r0, r3
 8001cea:	bd80      	pop	{r7, pc}
 8001cec:	40021000 	.word	0x40021000
 8001cf0:	08006714 	.word	0x08006714

08001cf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001cf8:	f7ff ffda 	bl	8001cb0 <HAL_RCC_GetHCLKFreq>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	4b06      	ldr	r3, [pc, #24]	; (8001d18 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001d00:	689b      	ldr	r3, [r3, #8]
 8001d02:	0adb      	lsrs	r3, r3, #11
 8001d04:	f003 0307 	and.w	r3, r3, #7
 8001d08:	4904      	ldr	r1, [pc, #16]	; (8001d1c <HAL_RCC_GetPCLK2Freq+0x28>)
 8001d0a:	5ccb      	ldrb	r3, [r1, r3]
 8001d0c:	f003 031f 	and.w	r3, r3, #31
 8001d10:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40021000 	.word	0x40021000
 8001d1c:	08006714 	.word	0x08006714

08001d20 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001d20:	b480      	push	{r7}
 8001d22:	b083      	sub	sp, #12
 8001d24:	af00      	add	r7, sp, #0
 8001d26:	6078      	str	r0, [r7, #4]
 8001d28:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	220f      	movs	r2, #15
 8001d2e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8001d30:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8001d3c:	4b0f      	ldr	r3, [pc, #60]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8001d48:	4b0c      	ldr	r3, [pc, #48]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8001d54:	4b09      	ldr	r3, [pc, #36]	; (8001d7c <HAL_RCC_GetClockConfig+0x5c>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	08db      	lsrs	r3, r3, #3
 8001d5a:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8001d62:	4b07      	ldr	r3, [pc, #28]	; (8001d80 <HAL_RCC_GetClockConfig+0x60>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f003 0207 	and.w	r2, r3, #7
 8001d6a:	683b      	ldr	r3, [r7, #0]
 8001d6c:	601a      	str	r2, [r3, #0]
}
 8001d6e:	bf00      	nop
 8001d70:	370c      	adds	r7, #12
 8001d72:	46bd      	mov	sp, r7
 8001d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d78:	4770      	bx	lr
 8001d7a:	bf00      	nop
 8001d7c:	40021000 	.word	0x40021000
 8001d80:	40022000 	.word	0x40022000

08001d84 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b086      	sub	sp, #24
 8001d88:	af00      	add	r7, sp, #0
 8001d8a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8001d8c:	2300      	movs	r3, #0
 8001d8e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001d90:	4b2a      	ldr	r3, [pc, #168]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001d92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d98:	2b00      	cmp	r3, #0
 8001d9a:	d003      	beq.n	8001da4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001d9c:	f7ff f984 	bl	80010a8 <HAL_PWREx_GetVoltageRange>
 8001da0:	6178      	str	r0, [r7, #20]
 8001da2:	e014      	b.n	8001dce <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8001da4:	4b25      	ldr	r3, [pc, #148]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001da6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001da8:	4a24      	ldr	r2, [pc, #144]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001daa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001dae:	6593      	str	r3, [r2, #88]	; 0x58
 8001db0:	4b22      	ldr	r3, [pc, #136]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001db2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001db4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001db8:	60fb      	str	r3, [r7, #12]
 8001dba:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8001dbc:	f7ff f974 	bl	80010a8 <HAL_PWREx_GetVoltageRange>
 8001dc0:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8001dc2:	4b1e      	ldr	r3, [pc, #120]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	4a1d      	ldr	r2, [pc, #116]	; (8001e3c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8001dc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001dcc:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001dd4:	d10b      	bne.n	8001dee <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	2b80      	cmp	r3, #128	; 0x80
 8001dda:	d919      	bls.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	2ba0      	cmp	r3, #160	; 0xa0
 8001de0:	d902      	bls.n	8001de8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001de2:	2302      	movs	r3, #2
 8001de4:	613b      	str	r3, [r7, #16]
 8001de6:	e013      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001de8:	2301      	movs	r3, #1
 8001dea:	613b      	str	r3, [r7, #16]
 8001dec:	e010      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	2b80      	cmp	r3, #128	; 0x80
 8001df2:	d902      	bls.n	8001dfa <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001df4:	2303      	movs	r3, #3
 8001df6:	613b      	str	r3, [r7, #16]
 8001df8:	e00a      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	2b80      	cmp	r3, #128	; 0x80
 8001dfe:	d102      	bne.n	8001e06 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001e00:	2302      	movs	r3, #2
 8001e02:	613b      	str	r3, [r7, #16]
 8001e04:	e004      	b.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b70      	cmp	r3, #112	; 0x70
 8001e0a:	d101      	bne.n	8001e10 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001e10:	4b0b      	ldr	r3, [pc, #44]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f023 0207 	bic.w	r2, r3, #7
 8001e18:	4909      	ldr	r1, [pc, #36]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	4313      	orrs	r3, r2
 8001e1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001e20:	4b07      	ldr	r3, [pc, #28]	; (8001e40 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f003 0307 	and.w	r3, r3, #7
 8001e28:	693a      	ldr	r2, [r7, #16]
 8001e2a:	429a      	cmp	r2, r3
 8001e2c:	d001      	beq.n	8001e32 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e000      	b.n	8001e34 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001e32:	2300      	movs	r3, #0
}
 8001e34:	4618      	mov	r0, r3
 8001e36:	3718      	adds	r7, #24
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bd80      	pop	{r7, pc}
 8001e3c:	40021000 	.word	0x40021000
 8001e40:	40022000 	.word	0x40022000

08001e44 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001e44:	b580      	push	{r7, lr}
 8001e46:	b086      	sub	sp, #24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001e50:	2300      	movs	r3, #0
 8001e52:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001e5c:	2b00      	cmp	r3, #0
 8001e5e:	d031      	beq.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e64:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e68:	d01a      	beq.n	8001ea0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8001e6a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8001e6e:	d814      	bhi.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x56>
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d009      	beq.n	8001e88 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8001e74:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8001e78:	d10f      	bne.n	8001e9a <HAL_RCCEx_PeriphCLKConfig+0x56>
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001e7a:	4b5d      	ldr	r3, [pc, #372]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e7c:	68db      	ldr	r3, [r3, #12]
 8001e7e:	4a5c      	ldr	r2, [pc, #368]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001e80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e84:	60d3      	str	r3, [r2, #12]
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e86:	e00c      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x5e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	3304      	adds	r3, #4
 8001e8c:	2100      	movs	r1, #0
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f000 f9ce 	bl	8002230 <RCCEx_PLLSAI1_Config>
 8001e94:	4603      	mov	r3, r0
 8001e96:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8001e98:	e003      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001e9a:	2301      	movs	r3, #1
 8001e9c:	74fb      	strb	r3, [r7, #19]
      break;
 8001e9e:	e000      	b.n	8001ea2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      break;
 8001ea0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001ea2:	7cfb      	ldrb	r3, [r7, #19]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d10b      	bne.n	8001ec0 <HAL_RCCEx_PeriphCLKConfig+0x7c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001ea8:	4b51      	ldr	r3, [pc, #324]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001eae:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001eb6:	494e      	ldr	r1, [pc, #312]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001ebe:	e001      	b.n	8001ec4 <HAL_RCCEx_PeriphCLKConfig+0x80>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ec0:	7cfb      	ldrb	r3, [r7, #19]
 8001ec2:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	f000 809e 	beq.w	800200e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001ed6:	4b46      	ldr	r3, [pc, #280]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ed8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d101      	bne.n	8001ee6 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	e000      	b.n	8001ee8 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001ee6:	2300      	movs	r3, #0
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00d      	beq.n	8001f08 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001eec:	4b40      	ldr	r3, [pc, #256]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001eee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ef0:	4a3f      	ldr	r2, [pc, #252]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001ef2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ef6:	6593      	str	r3, [r2, #88]	; 0x58
 8001ef8:	4b3d      	ldr	r3, [pc, #244]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001efa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001efc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f00:	60bb      	str	r3, [r7, #8]
 8001f02:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001f04:	2301      	movs	r3, #1
 8001f06:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001f08:	4b3a      	ldr	r3, [pc, #232]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	4a39      	ldr	r2, [pc, #228]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001f12:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001f14:	f7fe fdd8 	bl	8000ac8 <HAL_GetTick>
 8001f18:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f1a:	e009      	b.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xec>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001f1c:	f7fe fdd4 	bl	8000ac8 <HAL_GetTick>
 8001f20:	4602      	mov	r2, r0
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	1ad3      	subs	r3, r2, r3
 8001f26:	2b02      	cmp	r3, #2
 8001f28:	d902      	bls.n	8001f30 <HAL_RCCEx_PeriphCLKConfig+0xec>
      {
        ret = HAL_TIMEOUT;
 8001f2a:	2303      	movs	r3, #3
 8001f2c:	74fb      	strb	r3, [r7, #19]
        break;
 8001f2e:	e005      	b.n	8001f3c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001f30:	4b30      	ldr	r3, [pc, #192]	; (8001ff4 <HAL_RCCEx_PeriphCLKConfig+0x1b0>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d0ef      	beq.n	8001f1c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      }
    }

    if(ret == HAL_OK)
 8001f3c:	7cfb      	ldrb	r3, [r7, #19]
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d15a      	bne.n	8001ff8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001f42:	4b2b      	ldr	r3, [pc, #172]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f48:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001f4c:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001f4e:	697b      	ldr	r3, [r7, #20]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d01e      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f58:	697a      	ldr	r2, [r7, #20]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d019      	beq.n	8001f92 <HAL_RCCEx_PeriphCLKConfig+0x14e>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001f5e:	4b24      	ldr	r3, [pc, #144]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f64:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001f68:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001f6a:	4b21      	ldr	r3, [pc, #132]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f6c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f70:	4a1f      	ldr	r2, [pc, #124]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f72:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001f76:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001f7a:	4b1d      	ldr	r3, [pc, #116]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f7c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001f80:	4a1b      	ldr	r2, [pc, #108]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f82:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001f86:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001f8a:	4a19      	ldr	r2, [pc, #100]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001f8c:	697b      	ldr	r3, [r7, #20]
 8001f8e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001f92:	697b      	ldr	r3, [r7, #20]
 8001f94:	f003 0301 	and.w	r3, r3, #1
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d016      	beq.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x186>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f9c:	f7fe fd94 	bl	8000ac8 <HAL_GetTick>
 8001fa0:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fa2:	e00b      	b.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x178>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001fa4:	f7fe fd90 	bl	8000ac8 <HAL_GetTick>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	1ad3      	subs	r3, r2, r3
 8001fae:	f241 3288 	movw	r2, #5000	; 0x1388
 8001fb2:	4293      	cmp	r3, r2
 8001fb4:	d902      	bls.n	8001fbc <HAL_RCCEx_PeriphCLKConfig+0x178>
          {
            ret = HAL_TIMEOUT;
 8001fb6:	2303      	movs	r3, #3
 8001fb8:	74fb      	strb	r3, [r7, #19]
            break;
 8001fba:	e006      	b.n	8001fca <HAL_RCCEx_PeriphCLKConfig+0x186>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001fbc:	4b0c      	ldr	r3, [pc, #48]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fbe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d0ec      	beq.n	8001fa4 <HAL_RCCEx_PeriphCLKConfig+0x160>
          }
        }
      }

      if(ret == HAL_OK)
 8001fca:	7cfb      	ldrb	r3, [r7, #19]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d10b      	bne.n	8001fe8 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001fd0:	4b07      	ldr	r3, [pc, #28]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fd2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001fd6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fde:	4904      	ldr	r1, [pc, #16]	; (8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x1ac>)
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001fe6:	e009      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001fe8:	7cfb      	ldrb	r3, [r7, #19]
 8001fea:	74bb      	strb	r3, [r7, #18]
 8001fec:	e006      	b.n	8001ffc <HAL_RCCEx_PeriphCLKConfig+0x1b8>
 8001fee:	bf00      	nop
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001ff8:	7cfb      	ldrb	r3, [r7, #19]
 8001ffa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001ffc:	7c7b      	ldrb	r3, [r7, #17]
 8001ffe:	2b01      	cmp	r3, #1
 8002000:	d105      	bne.n	800200e <HAL_RCCEx_PeriphCLKConfig+0x1ca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002002:	4b8a      	ldr	r3, [pc, #552]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002004:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002006:	4a89      	ldr	r2, [pc, #548]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002008:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800200c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0301 	and.w	r3, r3, #1
 8002016:	2b00      	cmp	r3, #0
 8002018:	d00a      	beq.n	8002030 <HAL_RCCEx_PeriphCLKConfig+0x1ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800201a:	4b84      	ldr	r3, [pc, #528]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800201c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002020:	f023 0203 	bic.w	r2, r3, #3
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6a1b      	ldr	r3, [r3, #32]
 8002028:	4980      	ldr	r1, [pc, #512]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800202a:	4313      	orrs	r3, r2
 800202c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f003 0302 	and.w	r3, r3, #2
 8002038:	2b00      	cmp	r3, #0
 800203a:	d00a      	beq.n	8002052 <HAL_RCCEx_PeriphCLKConfig+0x20e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800203c:	4b7b      	ldr	r3, [pc, #492]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800203e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002042:	f023 020c 	bic.w	r2, r3, #12
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800204a:	4978      	ldr	r1, [pc, #480]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800204c:	4313      	orrs	r3, r2
 800204e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0320 	and.w	r3, r3, #32
 800205a:	2b00      	cmp	r3, #0
 800205c:	d00a      	beq.n	8002074 <HAL_RCCEx_PeriphCLKConfig+0x230>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800205e:	4b73      	ldr	r3, [pc, #460]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002060:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002064:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800206c:	496f      	ldr	r1, [pc, #444]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800206e:	4313      	orrs	r3, r2
 8002070:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800207c:	2b00      	cmp	r3, #0
 800207e:	d00a      	beq.n	8002096 <HAL_RCCEx_PeriphCLKConfig+0x252>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002080:	4b6a      	ldr	r3, [pc, #424]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002082:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002086:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800208e:	4967      	ldr	r1, [pc, #412]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002090:	4313      	orrs	r3, r2
 8002092:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d00a      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x274>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80020a2:	4b62      	ldr	r3, [pc, #392]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020b0:	495e      	ldr	r1, [pc, #376]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020b2:	4313      	orrs	r3, r2
 80020b4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d00a      	beq.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020c4:	4b59      	ldr	r3, [pc, #356]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ca:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	4956      	ldr	r1, [pc, #344]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d00a      	beq.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80020e6:	4b51      	ldr	r3, [pc, #324]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020e8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80020ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020f4:	494d      	ldr	r1, [pc, #308]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80020f6:	4313      	orrs	r3, r2
 80020f8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002104:	2b00      	cmp	r3, #0
 8002106:	d028      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002108:	4b48      	ldr	r3, [pc, #288]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800210a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800210e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	4945      	ldr	r1, [pc, #276]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002118:	4313      	orrs	r3, r2
 800211a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002122:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002126:	d106      	bne.n	8002136 <HAL_RCCEx_PeriphCLKConfig+0x2f2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002128:	4b40      	ldr	r3, [pc, #256]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800212a:	68db      	ldr	r3, [r3, #12]
 800212c:	4a3f      	ldr	r2, [pc, #252]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800212e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002132:	60d3      	str	r3, [r2, #12]
 8002134:	e011      	b.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800213a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800213e:	d10c      	bne.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	3304      	adds	r3, #4
 8002144:	2101      	movs	r1, #1
 8002146:	4618      	mov	r0, r3
 8002148:	f000 f872 	bl	8002230 <RCCEx_PLLSAI1_Config>
 800214c:	4603      	mov	r3, r0
 800214e:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8002150:	7cfb      	ldrb	r3, [r7, #19]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d001      	beq.n	800215a <HAL_RCCEx_PeriphCLKConfig+0x316>
        {
          /* set overall return value */
          status = ret;
 8002156:	7cfb      	ldrb	r3, [r7, #19]
 8002158:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002162:	2b00      	cmp	r3, #0
 8002164:	d028      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002166:	4b31      	ldr	r3, [pc, #196]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002168:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800216c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002174:	492d      	ldr	r1, [pc, #180]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002176:	4313      	orrs	r3, r2
 8002178:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002180:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002184:	d106      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x350>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002186:	4b29      	ldr	r3, [pc, #164]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	4a28      	ldr	r2, [pc, #160]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800218c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002190:	60d3      	str	r3, [r2, #12]
 8002192:	e011      	b.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002198:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800219c:	d10c      	bne.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	3304      	adds	r3, #4
 80021a2:	2101      	movs	r1, #1
 80021a4:	4618      	mov	r0, r3
 80021a6:	f000 f843 	bl	8002230 <RCCEx_PLLSAI1_Config>
 80021aa:	4603      	mov	r3, r0
 80021ac:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021ae:	7cfb      	ldrb	r3, [r7, #19]
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	d001      	beq.n	80021b8 <HAL_RCCEx_PeriphCLKConfig+0x374>
      {
        /* set overall return value */
        status = ret;
 80021b4:	7cfb      	ldrb	r3, [r7, #19]
 80021b6:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	d01c      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80021c4:	4b19      	ldr	r3, [pc, #100]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80021ca:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021d2:	4916      	ldr	r1, [pc, #88]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 80021d4:	4313      	orrs	r3, r2
 80021d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021de:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80021e2:	d10c      	bne.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	3304      	adds	r3, #4
 80021e8:	2102      	movs	r1, #2
 80021ea:	4618      	mov	r0, r3
 80021ec:	f000 f820 	bl	8002230 <RCCEx_PLLSAI1_Config>
 80021f0:	4603      	mov	r3, r0
 80021f2:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80021f4:	7cfb      	ldrb	r3, [r7, #19]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d001      	beq.n	80021fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
      {
        /* set overall return value */
        status = ret;
 80021fa:	7cfb      	ldrb	r3, [r7, #19]
 80021fc:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002206:	2b00      	cmp	r3, #0
 8002208:	d00a      	beq.n	8002220 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800220a:	4b08      	ldr	r3, [pc, #32]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800220c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002210:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002218:	4904      	ldr	r1, [pc, #16]	; (800222c <HAL_RCCEx_PeriphCLKConfig+0x3e8>)
 800221a:	4313      	orrs	r3, r2
 800221c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002220:	7cbb      	ldrb	r3, [r7, #18]
}
 8002222:	4618      	mov	r0, r3
 8002224:	3718      	adds	r7, #24
 8002226:	46bd      	mov	sp, r7
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	40021000 	.word	0x40021000

08002230 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800223a:	2300      	movs	r3, #0
 800223c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800223e:	4b74      	ldr	r3, [pc, #464]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002240:	68db      	ldr	r3, [r3, #12]
 8002242:	f003 0303 	and.w	r3, r3, #3
 8002246:	2b00      	cmp	r3, #0
 8002248:	d018      	beq.n	800227c <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800224a:	4b71      	ldr	r3, [pc, #452]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800224c:	68db      	ldr	r3, [r3, #12]
 800224e:	f003 0203 	and.w	r2, r3, #3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	429a      	cmp	r2, r3
 8002258:	d10d      	bne.n	8002276 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	681b      	ldr	r3, [r3, #0]
       ||
 800225e:	2b00      	cmp	r3, #0
 8002260:	d009      	beq.n	8002276 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002262:	4b6b      	ldr	r3, [pc, #428]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002264:	68db      	ldr	r3, [r3, #12]
 8002266:	091b      	lsrs	r3, r3, #4
 8002268:	f003 0307 	and.w	r3, r3, #7
 800226c:	1c5a      	adds	r2, r3, #1
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	685b      	ldr	r3, [r3, #4]
       ||
 8002272:	429a      	cmp	r2, r3
 8002274:	d047      	beq.n	8002306 <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8002276:	2301      	movs	r3, #1
 8002278:	73fb      	strb	r3, [r7, #15]
 800227a:	e044      	b.n	8002306 <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	2b03      	cmp	r3, #3
 8002282:	d018      	beq.n	80022b6 <RCCEx_PLLSAI1_Config+0x86>
 8002284:	2b03      	cmp	r3, #3
 8002286:	d825      	bhi.n	80022d4 <RCCEx_PLLSAI1_Config+0xa4>
 8002288:	2b01      	cmp	r3, #1
 800228a:	d002      	beq.n	8002292 <RCCEx_PLLSAI1_Config+0x62>
 800228c:	2b02      	cmp	r3, #2
 800228e:	d009      	beq.n	80022a4 <RCCEx_PLLSAI1_Config+0x74>
 8002290:	e020      	b.n	80022d4 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002292:	4b5f      	ldr	r3, [pc, #380]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	f003 0302 	and.w	r3, r3, #2
 800229a:	2b00      	cmp	r3, #0
 800229c:	d11d      	bne.n	80022da <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 800229e:	2301      	movs	r3, #1
 80022a0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022a2:	e01a      	b.n	80022da <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80022a4:	4b5a      	ldr	r3, [pc, #360]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d116      	bne.n	80022de <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80022b0:	2301      	movs	r3, #1
 80022b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022b4:	e013      	b.n	80022de <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80022b6:	4b56      	ldr	r3, [pc, #344]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d10f      	bne.n	80022e2 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80022c2:	4b53      	ldr	r3, [pc, #332]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d109      	bne.n	80022e2 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80022d2:	e006      	b.n	80022e2 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 80022d4:	2301      	movs	r3, #1
 80022d6:	73fb      	strb	r3, [r7, #15]
      break;
 80022d8:	e004      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022da:	bf00      	nop
 80022dc:	e002      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022de:	bf00      	nop
 80022e0:	e000      	b.n	80022e4 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 80022e2:	bf00      	nop
    }

    if(status == HAL_OK)
 80022e4:	7bfb      	ldrb	r3, [r7, #15]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d10d      	bne.n	8002306 <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80022ea:	4b49      	ldr	r3, [pc, #292]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80022ec:	68db      	ldr	r3, [r3, #12]
 80022ee:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6819      	ldr	r1, [r3, #0]
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	3b01      	subs	r3, #1
 80022fc:	011b      	lsls	r3, r3, #4
 80022fe:	430b      	orrs	r3, r1
 8002300:	4943      	ldr	r1, [pc, #268]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002302:	4313      	orrs	r3, r2
 8002304:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002306:	7bfb      	ldrb	r3, [r7, #15]
 8002308:	2b00      	cmp	r3, #0
 800230a:	d17c      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0x1d6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800230c:	4b40      	ldr	r3, [pc, #256]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	4a3f      	ldr	r2, [pc, #252]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002312:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002316:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002318:	f7fe fbd6 	bl	8000ac8 <HAL_GetTick>
 800231c:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800231e:	e009      	b.n	8002334 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8002320:	f7fe fbd2 	bl	8000ac8 <HAL_GetTick>
 8002324:	4602      	mov	r2, r0
 8002326:	68bb      	ldr	r3, [r7, #8]
 8002328:	1ad3      	subs	r3, r2, r3
 800232a:	2b02      	cmp	r3, #2
 800232c:	d902      	bls.n	8002334 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800232e:	2303      	movs	r3, #3
 8002330:	73fb      	strb	r3, [r7, #15]
        break;
 8002332:	e005      	b.n	8002340 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002334:	4b36      	ldr	r3, [pc, #216]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d1ef      	bne.n	8002320 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8002340:	7bfb      	ldrb	r3, [r7, #15]
 8002342:	2b00      	cmp	r3, #0
 8002344:	d15f      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0x1d6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d110      	bne.n	800236e <RCCEx_PLLSAI1_Config+0x13e>
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#else
        /* Configure the PLLSAI1 Division factor P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800234c:	4b30      	ldr	r3, [pc, #192]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f023 4378 	bic.w	r3, r3, #4160749568	; 0xf8000000
 8002354:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002358:	687a      	ldr	r2, [r7, #4]
 800235a:	6892      	ldr	r2, [r2, #8]
 800235c:	0211      	lsls	r1, r2, #8
 800235e:	687a      	ldr	r2, [r7, #4]
 8002360:	68d2      	ldr	r2, [r2, #12]
 8002362:	06d2      	lsls	r2, r2, #27
 8002364:	430a      	orrs	r2, r1
 8002366:	492a      	ldr	r1, [pc, #168]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002368:	4313      	orrs	r3, r2
 800236a:	610b      	str	r3, [r1, #16]
 800236c:	e027      	b.n	80023be <RCCEx_PLLSAI1_Config+0x18e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	2b01      	cmp	r3, #1
 8002372:	d112      	bne.n	800239a <RCCEx_PLLSAI1_Config+0x16a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002374:	4b26      	ldr	r3, [pc, #152]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800237c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	6892      	ldr	r2, [r2, #8]
 8002384:	0211      	lsls	r1, r2, #8
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	6912      	ldr	r2, [r2, #16]
 800238a:	0852      	lsrs	r2, r2, #1
 800238c:	3a01      	subs	r2, #1
 800238e:	0552      	lsls	r2, r2, #21
 8002390:	430a      	orrs	r2, r1
 8002392:	491f      	ldr	r1, [pc, #124]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002394:	4313      	orrs	r3, r2
 8002396:	610b      	str	r3, [r1, #16]
 8002398:	e011      	b.n	80023be <RCCEx_PLLSAI1_Config+0x18e>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800239a:	4b1d      	ldr	r3, [pc, #116]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 800239c:	691b      	ldr	r3, [r3, #16]
 800239e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80023a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80023a6:	687a      	ldr	r2, [r7, #4]
 80023a8:	6892      	ldr	r2, [r2, #8]
 80023aa:	0211      	lsls	r1, r2, #8
 80023ac:	687a      	ldr	r2, [r7, #4]
 80023ae:	6952      	ldr	r2, [r2, #20]
 80023b0:	0852      	lsrs	r2, r2, #1
 80023b2:	3a01      	subs	r2, #1
 80023b4:	0652      	lsls	r2, r2, #25
 80023b6:	430a      	orrs	r2, r1
 80023b8:	4915      	ldr	r1, [pc, #84]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80023be:	4b14      	ldr	r3, [pc, #80]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4a13      	ldr	r2, [pc, #76]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80023c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ca:	f7fe fb7d 	bl	8000ac8 <HAL_GetTick>
 80023ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023d0:	e009      	b.n	80023e6 <RCCEx_PLLSAI1_Config+0x1b6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80023d2:	f7fe fb79 	bl	8000ac8 <HAL_GetTick>
 80023d6:	4602      	mov	r2, r0
 80023d8:	68bb      	ldr	r3, [r7, #8]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	2b02      	cmp	r3, #2
 80023de:	d902      	bls.n	80023e6 <RCCEx_PLLSAI1_Config+0x1b6>
        {
          status = HAL_TIMEOUT;
 80023e0:	2303      	movs	r3, #3
 80023e2:	73fb      	strb	r3, [r7, #15]
          break;
 80023e4:	e005      	b.n	80023f2 <RCCEx_PLLSAI1_Config+0x1c2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80023e6:	4b0a      	ldr	r3, [pc, #40]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d0ef      	beq.n	80023d2 <RCCEx_PLLSAI1_Config+0x1a2>
        }
      }

      if(status == HAL_OK)
 80023f2:	7bfb      	ldrb	r3, [r7, #15]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d106      	bne.n	8002406 <RCCEx_PLLSAI1_Config+0x1d6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80023f8:	4b05      	ldr	r3, [pc, #20]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 80023fa:	691a      	ldr	r2, [r3, #16]
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	699b      	ldr	r3, [r3, #24]
 8002400:	4903      	ldr	r1, [pc, #12]	; (8002410 <RCCEx_PLLSAI1_Config+0x1e0>)
 8002402:	4313      	orrs	r3, r2
 8002404:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002406:	7bfb      	ldrb	r3, [r7, #15]
}
 8002408:	4618      	mov	r0, r3
 800240a:	3710      	adds	r7, #16
 800240c:	46bd      	mov	sp, r7
 800240e:	bd80      	pop	{r7, pc}
 8002410:	40021000 	.word	0x40021000

08002414 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b082      	sub	sp, #8
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e049      	b.n	80024ba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800242c:	b2db      	uxtb	r3, r3
 800242e:	2b00      	cmp	r3, #0
 8002430:	d106      	bne.n	8002440 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2200      	movs	r2, #0
 8002436:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800243a:	6878      	ldr	r0, [r7, #4]
 800243c:	f000 f841 	bl	80024c2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681a      	ldr	r2, [r3, #0]
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	3304      	adds	r3, #4
 8002450:	4619      	mov	r1, r3
 8002452:	4610      	mov	r0, r2
 8002454:	f000 f9dc 	bl	8002810 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	2201      	movs	r2, #1
 800245c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2201      	movs	r2, #1
 8002464:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	2201      	movs	r2, #1
 800246c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	2201      	movs	r2, #1
 8002474:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	2201      	movs	r2, #1
 800247c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	2201      	movs	r2, #1
 8002484:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	2201      	movs	r2, #1
 800248c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	2201      	movs	r2, #1
 800249c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	2201      	movs	r2, #1
 80024a4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2201      	movs	r2, #1
 80024ac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2201      	movs	r2, #1
 80024b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80024b8:	2300      	movs	r3, #0
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3708      	adds	r7, #8
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd80      	pop	{r7, pc}

080024c2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80024c2:	b480      	push	{r7}
 80024c4:	b083      	sub	sp, #12
 80024c6:	af00      	add	r7, sp, #0
 80024c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80024ca:	bf00      	nop
 80024cc:	370c      	adds	r7, #12
 80024ce:	46bd      	mov	sp, r7
 80024d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d4:	4770      	bx	lr
	...

080024d8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80024e6:	b2db      	uxtb	r3, r3
 80024e8:	2b01      	cmp	r3, #1
 80024ea:	d001      	beq.n	80024f0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80024ec:	2301      	movs	r3, #1
 80024ee:	e03b      	b.n	8002568 <HAL_TIM_Base_Start_IT+0x90>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	2202      	movs	r2, #2
 80024f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68da      	ldr	r2, [r3, #12]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f042 0201 	orr.w	r2, r2, #1
 8002506:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a19      	ldr	r2, [pc, #100]	; (8002574 <HAL_TIM_Base_Start_IT+0x9c>)
 800250e:	4293      	cmp	r3, r2
 8002510:	d009      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x4e>
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800251a:	d004      	beq.n	8002526 <HAL_TIM_Base_Start_IT+0x4e>
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	4a15      	ldr	r2, [pc, #84]	; (8002578 <HAL_TIM_Base_Start_IT+0xa0>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d115      	bne.n	8002552 <HAL_TIM_Base_Start_IT+0x7a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	689a      	ldr	r2, [r3, #8]
 800252c:	4b13      	ldr	r3, [pc, #76]	; (800257c <HAL_TIM_Base_Start_IT+0xa4>)
 800252e:	4013      	ands	r3, r2
 8002530:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	2b06      	cmp	r3, #6
 8002536:	d015      	beq.n	8002564 <HAL_TIM_Base_Start_IT+0x8c>
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800253e:	d011      	beq.n	8002564 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	681a      	ldr	r2, [r3, #0]
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 0201 	orr.w	r2, r2, #1
 800254e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002550:	e008      	b.n	8002564 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	681a      	ldr	r2, [r3, #0]
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f042 0201 	orr.w	r2, r2, #1
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	e000      	b.n	8002566 <HAL_TIM_Base_Start_IT+0x8e>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002564:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002566:	2300      	movs	r3, #0
}
 8002568:	4618      	mov	r0, r3
 800256a:	3714      	adds	r7, #20
 800256c:	46bd      	mov	sp, r7
 800256e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002572:	4770      	bx	lr
 8002574:	40012c00 	.word	0x40012c00
 8002578:	40014000 	.word	0x40014000
 800257c:	00010007 	.word	0x00010007

08002580 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b082      	sub	sp, #8
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	691b      	ldr	r3, [r3, #16]
 800258e:	f003 0302 	and.w	r3, r3, #2
 8002592:	2b02      	cmp	r3, #2
 8002594:	d122      	bne.n	80025dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	68db      	ldr	r3, [r3, #12]
 800259c:	f003 0302 	and.w	r3, r3, #2
 80025a0:	2b02      	cmp	r3, #2
 80025a2:	d11b      	bne.n	80025dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	f06f 0202 	mvn.w	r2, #2
 80025ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2201      	movs	r2, #1
 80025b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	699b      	ldr	r3, [r3, #24]
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d003      	beq.n	80025ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80025c2:	6878      	ldr	r0, [r7, #4]
 80025c4:	f000 f905 	bl	80027d2 <HAL_TIM_IC_CaptureCallback>
 80025c8:	e005      	b.n	80025d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80025ca:	6878      	ldr	r0, [r7, #4]
 80025cc:	f000 f8f7 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f000 f908 	bl	80027e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2200      	movs	r2, #0
 80025da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	691b      	ldr	r3, [r3, #16]
 80025e2:	f003 0304 	and.w	r3, r3, #4
 80025e6:	2b04      	cmp	r3, #4
 80025e8:	d122      	bne.n	8002630 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	68db      	ldr	r3, [r3, #12]
 80025f0:	f003 0304 	and.w	r3, r3, #4
 80025f4:	2b04      	cmp	r3, #4
 80025f6:	d11b      	bne.n	8002630 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f06f 0204 	mvn.w	r2, #4
 8002600:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	2202      	movs	r2, #2
 8002606:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	699b      	ldr	r3, [r3, #24]
 800260e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002612:	2b00      	cmp	r3, #0
 8002614:	d003      	beq.n	800261e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002616:	6878      	ldr	r0, [r7, #4]
 8002618:	f000 f8db 	bl	80027d2 <HAL_TIM_IC_CaptureCallback>
 800261c:	e005      	b.n	800262a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800261e:	6878      	ldr	r0, [r7, #4]
 8002620:	f000 f8cd 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002624:	6878      	ldr	r0, [r7, #4]
 8002626:	f000 f8de 	bl	80027e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	2200      	movs	r2, #0
 800262e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	691b      	ldr	r3, [r3, #16]
 8002636:	f003 0308 	and.w	r3, r3, #8
 800263a:	2b08      	cmp	r3, #8
 800263c:	d122      	bne.n	8002684 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	68db      	ldr	r3, [r3, #12]
 8002644:	f003 0308 	and.w	r3, r3, #8
 8002648:	2b08      	cmp	r3, #8
 800264a:	d11b      	bne.n	8002684 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	f06f 0208 	mvn.w	r2, #8
 8002654:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2204      	movs	r2, #4
 800265a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	69db      	ldr	r3, [r3, #28]
 8002662:	f003 0303 	and.w	r3, r3, #3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d003      	beq.n	8002672 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800266a:	6878      	ldr	r0, [r7, #4]
 800266c:	f000 f8b1 	bl	80027d2 <HAL_TIM_IC_CaptureCallback>
 8002670:	e005      	b.n	800267e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002672:	6878      	ldr	r0, [r7, #4]
 8002674:	f000 f8a3 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002678:	6878      	ldr	r0, [r7, #4]
 800267a:	f000 f8b4 	bl	80027e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	2200      	movs	r2, #0
 8002682:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	691b      	ldr	r3, [r3, #16]
 800268a:	f003 0310 	and.w	r3, r3, #16
 800268e:	2b10      	cmp	r3, #16
 8002690:	d122      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	68db      	ldr	r3, [r3, #12]
 8002698:	f003 0310 	and.w	r3, r3, #16
 800269c:	2b10      	cmp	r3, #16
 800269e:	d11b      	bne.n	80026d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f06f 0210 	mvn.w	r2, #16
 80026a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2208      	movs	r2, #8
 80026ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	681b      	ldr	r3, [r3, #0]
 80026b4:	69db      	ldr	r3, [r3, #28]
 80026b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80026ba:	2b00      	cmp	r3, #0
 80026bc:	d003      	beq.n	80026c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 f887 	bl	80027d2 <HAL_TIM_IC_CaptureCallback>
 80026c4:	e005      	b.n	80026d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80026c6:	6878      	ldr	r0, [r7, #4]
 80026c8:	f000 f879 	bl	80027be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80026cc:	6878      	ldr	r0, [r7, #4]
 80026ce:	f000 f88a 	bl	80027e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	691b      	ldr	r3, [r3, #16]
 80026de:	f003 0301 	and.w	r3, r3, #1
 80026e2:	2b01      	cmp	r3, #1
 80026e4:	d10e      	bne.n	8002704 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	68db      	ldr	r3, [r3, #12]
 80026ec:	f003 0301 	and.w	r3, r3, #1
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d107      	bne.n	8002704 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0201 	mvn.w	r2, #1
 80026fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fd fff4 	bl	80006ec <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	691b      	ldr	r3, [r3, #16]
 800270a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800270e:	2b80      	cmp	r3, #128	; 0x80
 8002710:	d10e      	bne.n	8002730 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271c:	2b80      	cmp	r3, #128	; 0x80
 800271e:	d107      	bne.n	8002730 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002728:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800272a:	6878      	ldr	r0, [r7, #4]
 800272c:	f000 f8de 	bl	80028ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	691b      	ldr	r3, [r3, #16]
 8002736:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800273a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800273e:	d10e      	bne.n	800275e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	68db      	ldr	r3, [r3, #12]
 8002746:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800274a:	2b80      	cmp	r3, #128	; 0x80
 800274c:	d107      	bne.n	800275e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002756:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002758:	6878      	ldr	r0, [r7, #4]
 800275a:	f000 f8d1 	bl	8002900 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	691b      	ldr	r3, [r3, #16]
 8002764:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002768:	2b40      	cmp	r3, #64	; 0x40
 800276a:	d10e      	bne.n	800278a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	68db      	ldr	r3, [r3, #12]
 8002772:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002776:	2b40      	cmp	r3, #64	; 0x40
 8002778:	d107      	bne.n	800278a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002782:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f000 f838 	bl	80027fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	691b      	ldr	r3, [r3, #16]
 8002790:	f003 0320 	and.w	r3, r3, #32
 8002794:	2b20      	cmp	r3, #32
 8002796:	d10e      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	68db      	ldr	r3, [r3, #12]
 800279e:	f003 0320 	and.w	r3, r3, #32
 80027a2:	2b20      	cmp	r3, #32
 80027a4:	d107      	bne.n	80027b6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	f06f 0220 	mvn.w	r2, #32
 80027ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80027b0:	6878      	ldr	r0, [r7, #4]
 80027b2:	f000 f891 	bl	80028d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80027b6:	bf00      	nop
 80027b8:	3708      	adds	r7, #8
 80027ba:	46bd      	mov	sp, r7
 80027bc:	bd80      	pop	{r7, pc}

080027be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027be:	b480      	push	{r7}
 80027c0:	b083      	sub	sp, #12
 80027c2:	af00      	add	r7, sp, #0
 80027c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80027c6:	bf00      	nop
 80027c8:	370c      	adds	r7, #12
 80027ca:	46bd      	mov	sp, r7
 80027cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d0:	4770      	bx	lr

080027d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80027d2:	b480      	push	{r7}
 80027d4:	b083      	sub	sp, #12
 80027d6:	af00      	add	r7, sp, #0
 80027d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80027da:	bf00      	nop
 80027dc:	370c      	adds	r7, #12
 80027de:	46bd      	mov	sp, r7
 80027e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e4:	4770      	bx	lr

080027e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80027e6:	b480      	push	{r7}
 80027e8:	b083      	sub	sp, #12
 80027ea:	af00      	add	r7, sp, #0
 80027ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80027ee:	bf00      	nop
 80027f0:	370c      	adds	r7, #12
 80027f2:	46bd      	mov	sp, r7
 80027f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f8:	4770      	bx	lr

080027fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80027fa:	b480      	push	{r7}
 80027fc:	b083      	sub	sp, #12
 80027fe:	af00      	add	r7, sp, #0
 8002800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002802:	bf00      	nop
 8002804:	370c      	adds	r7, #12
 8002806:	46bd      	mov	sp, r7
 8002808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800280c:	4770      	bx	lr
	...

08002810 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002810:	b480      	push	{r7}
 8002812:	b085      	sub	sp, #20
 8002814:	af00      	add	r7, sp, #0
 8002816:	6078      	str	r0, [r7, #4]
 8002818:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	4a2a      	ldr	r2, [pc, #168]	; (80028cc <TIM_Base_SetConfig+0xbc>)
 8002824:	4293      	cmp	r3, r2
 8002826:	d003      	beq.n	8002830 <TIM_Base_SetConfig+0x20>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800282e:	d108      	bne.n	8002842 <TIM_Base_SetConfig+0x32>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002836:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002838:	683b      	ldr	r3, [r7, #0]
 800283a:	685b      	ldr	r3, [r3, #4]
 800283c:	68fa      	ldr	r2, [r7, #12]
 800283e:	4313      	orrs	r3, r2
 8002840:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a21      	ldr	r2, [pc, #132]	; (80028cc <TIM_Base_SetConfig+0xbc>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d00b      	beq.n	8002862 <TIM_Base_SetConfig+0x52>
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002850:	d007      	beq.n	8002862 <TIM_Base_SetConfig+0x52>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	4a1e      	ldr	r2, [pc, #120]	; (80028d0 <TIM_Base_SetConfig+0xc0>)
 8002856:	4293      	cmp	r3, r2
 8002858:	d003      	beq.n	8002862 <TIM_Base_SetConfig+0x52>
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	4a1d      	ldr	r2, [pc, #116]	; (80028d4 <TIM_Base_SetConfig+0xc4>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d108      	bne.n	8002874 <TIM_Base_SetConfig+0x64>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800286a:	683b      	ldr	r3, [r7, #0]
 800286c:	68db      	ldr	r3, [r3, #12]
 800286e:	68fa      	ldr	r2, [r7, #12]
 8002870:	4313      	orrs	r3, r2
 8002872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	695b      	ldr	r3, [r3, #20]
 800287e:	4313      	orrs	r3, r2
 8002880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	68fa      	ldr	r2, [r7, #12]
 8002886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	689a      	ldr	r2, [r3, #8]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	4a0c      	ldr	r2, [pc, #48]	; (80028cc <TIM_Base_SetConfig+0xbc>)
 800289c:	4293      	cmp	r3, r2
 800289e:	d007      	beq.n	80028b0 <TIM_Base_SetConfig+0xa0>
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	4a0b      	ldr	r2, [pc, #44]	; (80028d0 <TIM_Base_SetConfig+0xc0>)
 80028a4:	4293      	cmp	r3, r2
 80028a6:	d003      	beq.n	80028b0 <TIM_Base_SetConfig+0xa0>
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	4a0a      	ldr	r2, [pc, #40]	; (80028d4 <TIM_Base_SetConfig+0xc4>)
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d103      	bne.n	80028b8 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	691a      	ldr	r2, [r3, #16]
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	2201      	movs	r2, #1
 80028bc:	615a      	str	r2, [r3, #20]
}
 80028be:	bf00      	nop
 80028c0:	3714      	adds	r7, #20
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	40012c00 	.word	0x40012c00
 80028d0:	40014000 	.word	0x40014000
 80028d4:	40014400 	.word	0x40014400

080028d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80028d8:	b480      	push	{r7}
 80028da:	b083      	sub	sp, #12
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80028e0:	bf00      	nop
 80028e2:	370c      	adds	r7, #12
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr

080028ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80028ec:	b480      	push	{r7}
 80028ee:	b083      	sub	sp, #12
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80028f4:	bf00      	nop
 80028f6:	370c      	adds	r7, #12
 80028f8:	46bd      	mov	sp, r7
 80028fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028fe:	4770      	bx	lr

08002900 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002908:	bf00      	nop
 800290a:	370c      	adds	r7, #12
 800290c:	46bd      	mov	sp, r7
 800290e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002912:	4770      	bx	lr

08002914 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b082      	sub	sp, #8
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2b00      	cmp	r3, #0
 8002920:	d101      	bne.n	8002926 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002922:	2301      	movs	r3, #1
 8002924:	e040      	b.n	80029a8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800292a:	2b00      	cmp	r3, #0
 800292c:	d106      	bne.n	800293c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	2200      	movs	r2, #0
 8002932:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002936:	6878      	ldr	r0, [r7, #4]
 8002938:	f7fd fffe 	bl	8000938 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2224      	movs	r2, #36	; 0x24
 8002940:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	681a      	ldr	r2, [r3, #0]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f022 0201 	bic.w	r2, r2, #1
 8002950:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002952:	6878      	ldr	r0, [r7, #4]
 8002954:	f000 fb2e 	bl	8002fb4 <UART_SetConfig>
 8002958:	4603      	mov	r3, r0
 800295a:	2b01      	cmp	r3, #1
 800295c:	d101      	bne.n	8002962 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e022      	b.n	80029a8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002966:	2b00      	cmp	r3, #0
 8002968:	d002      	beq.n	8002970 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800296a:	6878      	ldr	r0, [r7, #4]
 800296c:	f000 fd4e 	bl	800340c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	685a      	ldr	r2, [r3, #4]
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800297e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	689a      	ldr	r2, [r3, #8]
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800298e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681a      	ldr	r2, [r3, #0]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fdd5 	bl	8003550 <UART_CheckIdleState>
 80029a6:	4603      	mov	r3, r0
}
 80029a8:	4618      	mov	r0, r3
 80029aa:	3708      	adds	r7, #8
 80029ac:	46bd      	mov	sp, r7
 80029ae:	bd80      	pop	{r7, pc}

080029b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80029b0:	b580      	push	{r7, lr}
 80029b2:	b0ba      	sub	sp, #232	; 0xe8
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	69db      	ldr	r3, [r3, #28]
 80029be:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80029d6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80029da:	f640 030f 	movw	r3, #2063	; 0x80f
 80029de:	4013      	ands	r3, r2
 80029e0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80029e4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d115      	bne.n	8002a18 <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80029ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80029f0:	f003 0320 	and.w	r3, r3, #32
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d00f      	beq.n	8002a18 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80029f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80029fc:	f003 0320 	and.w	r3, r3, #32
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d009      	beq.n	8002a18 <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	f000 82a6 	beq.w	8002f5a <HAL_UART_IRQHandler+0x5aa>
      {
        huart->RxISR(huart);
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a12:	6878      	ldr	r0, [r7, #4]
 8002a14:	4798      	blx	r3
      }
      return;
 8002a16:	e2a0      	b.n	8002f5a <HAL_UART_IRQHandler+0x5aa>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8002a18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	f000 8117 	beq.w	8002c50 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d106      	bne.n	8002a3c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8002a2e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8002a32:	4b85      	ldr	r3, [pc, #532]	; (8002c48 <HAL_UART_IRQHandler+0x298>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	f000 810a 	beq.w	8002c50 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002a3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a40:	f003 0301 	and.w	r3, r3, #1
 8002a44:	2b00      	cmp	r3, #0
 8002a46:	d011      	beq.n	8002a6c <HAL_UART_IRQHandler+0xbc>
 8002a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002a4c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d00b      	beq.n	8002a6c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a62:	f043 0201 	orr.w	r2, r3, #1
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002a70:	f003 0302 	and.w	r3, r3, #2
 8002a74:	2b00      	cmp	r3, #0
 8002a76:	d011      	beq.n	8002a9c <HAL_UART_IRQHandler+0xec>
 8002a78:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002a7c:	f003 0301 	and.w	r3, r3, #1
 8002a80:	2b00      	cmp	r3, #0
 8002a82:	d00b      	beq.n	8002a9c <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	2202      	movs	r2, #2
 8002a8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a92:	f043 0204 	orr.w	r2, r3, #4
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002aa0:	f003 0304 	and.w	r3, r3, #4
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d011      	beq.n	8002acc <HAL_UART_IRQHandler+0x11c>
 8002aa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d00b      	beq.n	8002acc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	2204      	movs	r2, #4
 8002aba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002ac2:	f043 0202 	orr.w	r2, r3, #2
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8002acc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002ad0:	f003 0308 	and.w	r3, r3, #8
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d017      	beq.n	8002b08 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002adc:	f003 0320 	and.w	r3, r3, #32
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d105      	bne.n	8002af0 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8002ae4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ae8:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8002aec:	2b00      	cmp	r3, #0
 8002aee:	d00b      	beq.n	8002b08 <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	2208      	movs	r2, #8
 8002af6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002afe:	f043 0208 	orr.w	r2, r3, #8
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8002b08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b0c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d012      	beq.n	8002b3a <HAL_UART_IRQHandler+0x18a>
 8002b14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b18:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d00c      	beq.n	8002b3a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8002b28:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b30:	f043 0220 	orr.w	r2, r3, #32
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	f000 820c 	beq.w	8002f5e <HAL_UART_IRQHandler+0x5ae>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002b4a:	f003 0320 	and.w	r3, r3, #32
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d00d      	beq.n	8002b6e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002b56:	f003 0320 	and.w	r3, r3, #32
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d003      	beq.n	8002b6e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002b6a:	6878      	ldr	r0, [r7, #4]
 8002b6c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002b74:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	689b      	ldr	r3, [r3, #8]
 8002b7e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b82:	2b40      	cmp	r3, #64	; 0x40
 8002b84:	d005      	beq.n	8002b92 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002b86:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8002b8a:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002b8e:	2b00      	cmp	r3, #0
 8002b90:	d04f      	beq.n	8002c32 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f000 fde9 	bl	800376a <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689b      	ldr	r3, [r3, #8]
 8002b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba2:	2b40      	cmp	r3, #64	; 0x40
 8002ba4:	d141      	bne.n	8002c2a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	3308      	adds	r3, #8
 8002bac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002bb0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002bb4:	e853 3f00 	ldrex	r3, [r3]
 8002bb8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8002bbc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002bc0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002bc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	3308      	adds	r3, #8
 8002bce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8002bd2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8002bd6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002bda:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8002bde:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8002be2:	e841 2300 	strex	r3, r2, [r1]
 8002be6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8002bea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1d9      	bne.n	8002ba6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf6:	2b00      	cmp	r3, #0
 8002bf8:	d013      	beq.n	8002c22 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bfe:	4a13      	ldr	r2, [pc, #76]	; (8002c4c <HAL_UART_IRQHandler+0x29c>)
 8002c00:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe f88a 	bl	8000d20 <HAL_DMA_Abort_IT>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d017      	beq.n	8002c42 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c18:	687a      	ldr	r2, [r7, #4]
 8002c1a:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002c1c:	4610      	mov	r0, r2
 8002c1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c20:	e00f      	b.n	8002c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f000 f9b0 	bl	8002f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c28:	e00b      	b.n	8002c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f9ac 	bl	8002f88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c30:	e007      	b.n	8002c42 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f9a8 	bl	8002f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2200      	movs	r2, #0
 8002c3c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002c40:	e18d      	b.n	8002f5e <HAL_UART_IRQHandler+0x5ae>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c42:	bf00      	nop
    return;
 8002c44:	e18b      	b.n	8002f5e <HAL_UART_IRQHandler+0x5ae>
 8002c46:	bf00      	nop
 8002c48:	04000120 	.word	0x04000120
 8002c4c:	08003831 	.word	0x08003831

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c54:	2b01      	cmp	r3, #1
 8002c56:	f040 8146 	bne.w	8002ee6 <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002c5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002c5e:	f003 0310 	and.w	r3, r3, #16
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	f000 813f 	beq.w	8002ee6 <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002c68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002c6c:	f003 0310 	and.w	r3, r3, #16
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	f000 8138 	beq.w	8002ee6 <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	2210      	movs	r2, #16
 8002c7c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c88:	2b40      	cmp	r3, #64	; 0x40
 8002c8a:	f040 80b4 	bne.w	8002df6 <HAL_UART_IRQHandler+0x446>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	685b      	ldr	r3, [r3, #4]
 8002c96:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002c9a:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	f000 815f 	beq.w	8002f62 <HAL_UART_IRQHandler+0x5b2>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002caa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	f080 8157 	bcs.w	8002f62 <HAL_UART_IRQHandler+0x5b2>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8002cba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	681b      	ldr	r3, [r3, #0]
 8002cc6:	f003 0320 	and.w	r3, r3, #32
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	f040 8085 	bne.w	8002dda <HAL_UART_IRQHandler+0x42a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cd8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8002cdc:	e853 3f00 	ldrex	r3, [r3]
 8002ce0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8002ce4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8002ce8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002cec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	461a      	mov	r2, r3
 8002cf6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8002cfa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002cfe:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d02:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8002d06:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8002d0a:	e841 2300 	strex	r3, r2, [r1]
 8002d0e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8002d12:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d1da      	bne.n	8002cd0 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	3308      	adds	r3, #8
 8002d20:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002d24:	e853 3f00 	ldrex	r3, [r3]
 8002d28:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8002d2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002d2c:	f023 0301 	bic.w	r3, r3, #1
 8002d30:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3308      	adds	r3, #8
 8002d3a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8002d3e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8002d42:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d44:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002d46:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8002d4a:	e841 2300 	strex	r3, r2, [r1]
 8002d4e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8002d50:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d1e1      	bne.n	8002d1a <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	3308      	adds	r3, #8
 8002d5c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d5e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002d60:	e853 3f00 	ldrex	r3, [r3]
 8002d64:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8002d66:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002d68:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d6c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	3308      	adds	r3, #8
 8002d76:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8002d7a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8002d7c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d7e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8002d80:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002d82:	e841 2300 	strex	r3, r2, [r1]
 8002d86:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8002d88:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1e3      	bne.n	8002d56 <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	2220      	movs	r2, #32
 8002d92:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2200      	movs	r2, #0
 8002d98:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002da0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002da2:	e853 3f00 	ldrex	r3, [r3]
 8002da6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8002da8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8002daa:	f023 0310 	bic.w	r3, r3, #16
 8002dae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	461a      	mov	r2, r3
 8002db8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8002dbc:	65bb      	str	r3, [r7, #88]	; 0x58
 8002dbe:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002dc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002dc4:	e841 2300 	strex	r3, r2, [r1]
 8002dc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8002dca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d1e4      	bne.n	8002d9a <HAL_UART_IRQHandler+0x3ea>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002dd4:	4618      	mov	r0, r3
 8002dd6:	f7fd ff65 	bl	8000ca4 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	1ad3      	subs	r3, r2, r3
 8002dea:	b29b      	uxth	r3, r3
 8002dec:	4619      	mov	r1, r3
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f8d4 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002df4:	e0b5      	b.n	8002f62 <HAL_UART_IRQHandler+0x5b2>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e02:	b29b      	uxth	r3, r3
 8002e04:	1ad3      	subs	r3, r2, r3
 8002e06:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80a7 	beq.w	8002f66 <HAL_UART_IRQHandler+0x5b6>
          && (nb_rx_data > 0U))
 8002e18:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 80a2 	beq.w	8002f66 <HAL_UART_IRQHandler+0x5b6>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002e2a:	e853 3f00 	ldrex	r3, [r3]
 8002e2e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8002e30:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002e32:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8002e36:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	461a      	mov	r2, r3
 8002e40:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8002e44:	647b      	str	r3, [r7, #68]	; 0x44
 8002e46:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e48:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8002e4a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8002e4c:	e841 2300 	strex	r3, r2, [r1]
 8002e50:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8002e52:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d1e4      	bne.n	8002e22 <HAL_UART_IRQHandler+0x472>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	3308      	adds	r3, #8
 8002e5e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002e60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e62:	e853 3f00 	ldrex	r3, [r3]
 8002e66:	623b      	str	r3, [r7, #32]
   return(result);
 8002e68:	6a3b      	ldr	r3, [r7, #32]
 8002e6a:	f023 0301 	bic.w	r3, r3, #1
 8002e6e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	3308      	adds	r3, #8
 8002e78:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8002e7c:	633a      	str	r2, [r7, #48]	; 0x30
 8002e7e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002e82:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002e84:	e841 2300 	strex	r3, r2, [r1]
 8002e88:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8002e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d1e3      	bne.n	8002e58 <HAL_UART_IRQHandler+0x4a8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	2220      	movs	r2, #32
 8002e94:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	2200      	movs	r2, #0
 8002e9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ea8:	693b      	ldr	r3, [r7, #16]
 8002eaa:	e853 3f00 	ldrex	r3, [r3]
 8002eae:	60fb      	str	r3, [r7, #12]
   return(result);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	f023 0310 	bic.w	r3, r3, #16
 8002eb6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	461a      	mov	r2, r3
 8002ec0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002ec4:	61fb      	str	r3, [r7, #28]
 8002ec6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002ec8:	69b9      	ldr	r1, [r7, #24]
 8002eca:	69fa      	ldr	r2, [r7, #28]
 8002ecc:	e841 2300 	strex	r3, r2, [r1]
 8002ed0:	617b      	str	r3, [r7, #20]
   return(result);
 8002ed2:	697b      	ldr	r3, [r7, #20]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d1e4      	bne.n	8002ea2 <HAL_UART_IRQHandler+0x4f2>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002ed8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8002edc:	4619      	mov	r1, r3
 8002ede:	6878      	ldr	r0, [r7, #4]
 8002ee0:	f000 f85c 	bl	8002f9c <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002ee4:	e03f      	b.n	8002f66 <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8002ee6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002eea:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d00e      	beq.n	8002f10 <HAL_UART_IRQHandler+0x560>
 8002ef2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8002ef6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d008      	beq.n	8002f10 <HAL_UART_IRQHandler+0x560>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002f06:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8002f08:	6878      	ldr	r0, [r7, #4]
 8002f0a:	f000 fcd1 	bl	80038b0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8002f0e:	e02d      	b.n	8002f6c <HAL_UART_IRQHandler+0x5bc>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00e      	beq.n	8002f3a <HAL_UART_IRQHandler+0x58a>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d008      	beq.n	8002f3a <HAL_UART_IRQHandler+0x58a>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d01c      	beq.n	8002f6a <HAL_UART_IRQHandler+0x5ba>
    {
      huart->TxISR(huart);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	4798      	blx	r3
    }
    return;
 8002f38:	e017      	b.n	8002f6a <HAL_UART_IRQHandler+0x5ba>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d012      	beq.n	8002f6c <HAL_UART_IRQHandler+0x5bc>
 8002f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8002f4a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f4e:	2b00      	cmp	r3, #0
 8002f50:	d00c      	beq.n	8002f6c <HAL_UART_IRQHandler+0x5bc>
  {
    UART_EndTransmit_IT(huart);
 8002f52:	6878      	ldr	r0, [r7, #4]
 8002f54:	f000 fc82 	bl	800385c <UART_EndTransmit_IT>
    return;
 8002f58:	e008      	b.n	8002f6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f5a:	bf00      	nop
 8002f5c:	e006      	b.n	8002f6c <HAL_UART_IRQHandler+0x5bc>
    return;
 8002f5e:	bf00      	nop
 8002f60:	e004      	b.n	8002f6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f62:	bf00      	nop
 8002f64:	e002      	b.n	8002f6c <HAL_UART_IRQHandler+0x5bc>
      return;
 8002f66:	bf00      	nop
 8002f68:	e000      	b.n	8002f6c <HAL_UART_IRQHandler+0x5bc>
    return;
 8002f6a:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 8002f6c:	37e8      	adds	r7, #232	; 0xe8
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bd80      	pop	{r7, pc}
 8002f72:	bf00      	nop

08002f74 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002f74:	b480      	push	{r7}
 8002f76:	b083      	sub	sp, #12
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002f7c:	bf00      	nop
 8002f7e:	370c      	adds	r7, #12
 8002f80:	46bd      	mov	sp, r7
 8002f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f86:	4770      	bx	lr

08002f88 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
 8002f8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002f90:	bf00      	nop
 8002f92:	370c      	adds	r7, #12
 8002f94:	46bd      	mov	sp, r7
 8002f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f9a:	4770      	bx	lr

08002f9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002f9c:	b480      	push	{r7}
 8002f9e:	b083      	sub	sp, #12
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002fb4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fb8:	b08a      	sub	sp, #40	; 0x28
 8002fba:	af00      	add	r7, sp, #0
 8002fbc:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	689a      	ldr	r2, [r3, #8]
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	691b      	ldr	r3, [r3, #16]
 8002fcc:	431a      	orrs	r2, r3
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	695b      	ldr	r3, [r3, #20]
 8002fd2:	431a      	orrs	r2, r3
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	69db      	ldr	r3, [r3, #28]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	627b      	str	r3, [r7, #36]	; 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681a      	ldr	r2, [r3, #0]
 8002fe2:	4bb4      	ldr	r3, [pc, #720]	; (80032b4 <UART_SetConfig+0x300>)
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	6812      	ldr	r2, [r2, #0]
 8002fea:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fec:	430b      	orrs	r3, r1
 8002fee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	68da      	ldr	r2, [r3, #12]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	430a      	orrs	r2, r1
 8003004:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	699b      	ldr	r3, [r3, #24]
 800300a:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	4aa9      	ldr	r2, [pc, #676]	; (80032b8 <UART_SetConfig+0x304>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d004      	beq.n	8003020 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	6a1b      	ldr	r3, [r3, #32]
 800301a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800301c:	4313      	orrs	r3, r2
 800301e:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	689b      	ldr	r3, [r3, #8]
 8003026:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003030:	430a      	orrs	r2, r1
 8003032:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	4aa0      	ldr	r2, [pc, #640]	; (80032bc <UART_SetConfig+0x308>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d126      	bne.n	800308c <UART_SetConfig+0xd8>
 800303e:	4ba0      	ldr	r3, [pc, #640]	; (80032c0 <UART_SetConfig+0x30c>)
 8003040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003044:	f003 0303 	and.w	r3, r3, #3
 8003048:	2b03      	cmp	r3, #3
 800304a:	d81b      	bhi.n	8003084 <UART_SetConfig+0xd0>
 800304c:	a201      	add	r2, pc, #4	; (adr r2, 8003054 <UART_SetConfig+0xa0>)
 800304e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003052:	bf00      	nop
 8003054:	08003065 	.word	0x08003065
 8003058:	08003075 	.word	0x08003075
 800305c:	0800306d 	.word	0x0800306d
 8003060:	0800307d 	.word	0x0800307d
 8003064:	2301      	movs	r3, #1
 8003066:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800306a:	e080      	b.n	800316e <UART_SetConfig+0x1ba>
 800306c:	2302      	movs	r3, #2
 800306e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003072:	e07c      	b.n	800316e <UART_SetConfig+0x1ba>
 8003074:	2304      	movs	r3, #4
 8003076:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800307a:	e078      	b.n	800316e <UART_SetConfig+0x1ba>
 800307c:	2308      	movs	r3, #8
 800307e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003082:	e074      	b.n	800316e <UART_SetConfig+0x1ba>
 8003084:	2310      	movs	r3, #16
 8003086:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800308a:	e070      	b.n	800316e <UART_SetConfig+0x1ba>
 800308c:	68fb      	ldr	r3, [r7, #12]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	4a8c      	ldr	r2, [pc, #560]	; (80032c4 <UART_SetConfig+0x310>)
 8003092:	4293      	cmp	r3, r2
 8003094:	d138      	bne.n	8003108 <UART_SetConfig+0x154>
 8003096:	4b8a      	ldr	r3, [pc, #552]	; (80032c0 <UART_SetConfig+0x30c>)
 8003098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800309c:	f003 030c 	and.w	r3, r3, #12
 80030a0:	2b0c      	cmp	r3, #12
 80030a2:	d82d      	bhi.n	8003100 <UART_SetConfig+0x14c>
 80030a4:	a201      	add	r2, pc, #4	; (adr r2, 80030ac <UART_SetConfig+0xf8>)
 80030a6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030aa:	bf00      	nop
 80030ac:	080030e1 	.word	0x080030e1
 80030b0:	08003101 	.word	0x08003101
 80030b4:	08003101 	.word	0x08003101
 80030b8:	08003101 	.word	0x08003101
 80030bc:	080030f1 	.word	0x080030f1
 80030c0:	08003101 	.word	0x08003101
 80030c4:	08003101 	.word	0x08003101
 80030c8:	08003101 	.word	0x08003101
 80030cc:	080030e9 	.word	0x080030e9
 80030d0:	08003101 	.word	0x08003101
 80030d4:	08003101 	.word	0x08003101
 80030d8:	08003101 	.word	0x08003101
 80030dc:	080030f9 	.word	0x080030f9
 80030e0:	2300      	movs	r3, #0
 80030e2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030e6:	e042      	b.n	800316e <UART_SetConfig+0x1ba>
 80030e8:	2302      	movs	r3, #2
 80030ea:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030ee:	e03e      	b.n	800316e <UART_SetConfig+0x1ba>
 80030f0:	2304      	movs	r3, #4
 80030f2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030f6:	e03a      	b.n	800316e <UART_SetConfig+0x1ba>
 80030f8:	2308      	movs	r3, #8
 80030fa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80030fe:	e036      	b.n	800316e <UART_SetConfig+0x1ba>
 8003100:	2310      	movs	r3, #16
 8003102:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003106:	e032      	b.n	800316e <UART_SetConfig+0x1ba>
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	4a6a      	ldr	r2, [pc, #424]	; (80032b8 <UART_SetConfig+0x304>)
 800310e:	4293      	cmp	r3, r2
 8003110:	d12a      	bne.n	8003168 <UART_SetConfig+0x1b4>
 8003112:	4b6b      	ldr	r3, [pc, #428]	; (80032c0 <UART_SetConfig+0x30c>)
 8003114:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003118:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800311c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003120:	d01a      	beq.n	8003158 <UART_SetConfig+0x1a4>
 8003122:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003126:	d81b      	bhi.n	8003160 <UART_SetConfig+0x1ac>
 8003128:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800312c:	d00c      	beq.n	8003148 <UART_SetConfig+0x194>
 800312e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003132:	d815      	bhi.n	8003160 <UART_SetConfig+0x1ac>
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <UART_SetConfig+0x18c>
 8003138:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800313c:	d008      	beq.n	8003150 <UART_SetConfig+0x19c>
 800313e:	e00f      	b.n	8003160 <UART_SetConfig+0x1ac>
 8003140:	2300      	movs	r3, #0
 8003142:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003146:	e012      	b.n	800316e <UART_SetConfig+0x1ba>
 8003148:	2302      	movs	r3, #2
 800314a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800314e:	e00e      	b.n	800316e <UART_SetConfig+0x1ba>
 8003150:	2304      	movs	r3, #4
 8003152:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003156:	e00a      	b.n	800316e <UART_SetConfig+0x1ba>
 8003158:	2308      	movs	r3, #8
 800315a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800315e:	e006      	b.n	800316e <UART_SetConfig+0x1ba>
 8003160:	2310      	movs	r3, #16
 8003162:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003166:	e002      	b.n	800316e <UART_SetConfig+0x1ba>
 8003168:	2310      	movs	r3, #16
 800316a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a51      	ldr	r2, [pc, #324]	; (80032b8 <UART_SetConfig+0x304>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d17a      	bne.n	800326e <UART_SetConfig+0x2ba>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8003178:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800317c:	2b08      	cmp	r3, #8
 800317e:	d824      	bhi.n	80031ca <UART_SetConfig+0x216>
 8003180:	a201      	add	r2, pc, #4	; (adr r2, 8003188 <UART_SetConfig+0x1d4>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031ad 	.word	0x080031ad
 800318c:	080031cb 	.word	0x080031cb
 8003190:	080031b5 	.word	0x080031b5
 8003194:	080031cb 	.word	0x080031cb
 8003198:	080031bb 	.word	0x080031bb
 800319c:	080031cb 	.word	0x080031cb
 80031a0:	080031cb 	.word	0x080031cb
 80031a4:	080031cb 	.word	0x080031cb
 80031a8:	080031c3 	.word	0x080031c3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80031ac:	f7fe fd8c 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 80031b0:	61f8      	str	r0, [r7, #28]
        break;
 80031b2:	e010      	b.n	80031d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80031b4:	4b44      	ldr	r3, [pc, #272]	; (80032c8 <UART_SetConfig+0x314>)
 80031b6:	61fb      	str	r3, [r7, #28]
        break;
 80031b8:	e00d      	b.n	80031d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80031ba:	f7fe fced 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 80031be:	61f8      	str	r0, [r7, #28]
        break;
 80031c0:	e009      	b.n	80031d6 <UART_SetConfig+0x222>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80031c2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031c6:	61fb      	str	r3, [r7, #28]
        break;
 80031c8:	e005      	b.n	80031d6 <UART_SetConfig+0x222>
      default:
        pclk = 0U;
 80031ca:	2300      	movs	r3, #0
 80031cc:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80031ce:	2301      	movs	r3, #1
 80031d0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80031d4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	2b00      	cmp	r3, #0
 80031da:	f000 8107 	beq.w	80033ec <UART_SetConfig+0x438>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	4613      	mov	r3, r2
 80031e4:	005b      	lsls	r3, r3, #1
 80031e6:	4413      	add	r3, r2
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d305      	bcc.n	80031fa <UART_SetConfig+0x246>
          (pclk > (4096U * huart->Init.BaudRate)))
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80031f4:	69fa      	ldr	r2, [r7, #28]
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d903      	bls.n	8003202 <UART_SetConfig+0x24e>
      {
        ret = HAL_ERROR;
 80031fa:	2301      	movs	r3, #1
 80031fc:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 8003200:	e0f4      	b.n	80033ec <UART_SetConfig+0x438>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	2200      	movs	r2, #0
 8003206:	461c      	mov	r4, r3
 8003208:	4615      	mov	r5, r2
 800320a:	f04f 0200 	mov.w	r2, #0
 800320e:	f04f 0300 	mov.w	r3, #0
 8003212:	022b      	lsls	r3, r5, #8
 8003214:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 8003218:	0222      	lsls	r2, r4, #8
 800321a:	68f9      	ldr	r1, [r7, #12]
 800321c:	6849      	ldr	r1, [r1, #4]
 800321e:	0849      	lsrs	r1, r1, #1
 8003220:	2000      	movs	r0, #0
 8003222:	4688      	mov	r8, r1
 8003224:	4681      	mov	r9, r0
 8003226:	eb12 0a08 	adds.w	sl, r2, r8
 800322a:	eb43 0b09 	adc.w	fp, r3, r9
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	685b      	ldr	r3, [r3, #4]
 8003232:	2200      	movs	r2, #0
 8003234:	603b      	str	r3, [r7, #0]
 8003236:	607a      	str	r2, [r7, #4]
 8003238:	e9d7 2300 	ldrd	r2, r3, [r7]
 800323c:	4650      	mov	r0, sl
 800323e:	4659      	mov	r1, fp
 8003240:	f7fc ffc6 	bl	80001d0 <__aeabi_uldivmod>
 8003244:	4602      	mov	r2, r0
 8003246:	460b      	mov	r3, r1
 8003248:	4613      	mov	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800324c:	69bb      	ldr	r3, [r7, #24]
 800324e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003252:	d308      	bcc.n	8003266 <UART_SetConfig+0x2b2>
 8003254:	69bb      	ldr	r3, [r7, #24]
 8003256:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800325a:	d204      	bcs.n	8003266 <UART_SetConfig+0x2b2>
        {
          huart->Instance->BRR = usartdiv;
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	69ba      	ldr	r2, [r7, #24]
 8003262:	60da      	str	r2, [r3, #12]
 8003264:	e0c2      	b.n	80033ec <UART_SetConfig+0x438>
        }
        else
        {
          ret = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800326c:	e0be      	b.n	80033ec <UART_SetConfig+0x438>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	69db      	ldr	r3, [r3, #28]
 8003272:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003276:	d16a      	bne.n	800334e <UART_SetConfig+0x39a>
  {
    switch (clocksource)
 8003278:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800327c:	2b08      	cmp	r3, #8
 800327e:	d834      	bhi.n	80032ea <UART_SetConfig+0x336>
 8003280:	a201      	add	r2, pc, #4	; (adr r2, 8003288 <UART_SetConfig+0x2d4>)
 8003282:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003286:	bf00      	nop
 8003288:	080032ad 	.word	0x080032ad
 800328c:	080032cd 	.word	0x080032cd
 8003290:	080032d5 	.word	0x080032d5
 8003294:	080032eb 	.word	0x080032eb
 8003298:	080032db 	.word	0x080032db
 800329c:	080032eb 	.word	0x080032eb
 80032a0:	080032eb 	.word	0x080032eb
 80032a4:	080032eb 	.word	0x080032eb
 80032a8:	080032e3 	.word	0x080032e3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80032ac:	f7fe fd0c 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 80032b0:	61f8      	str	r0, [r7, #28]
        break;
 80032b2:	e020      	b.n	80032f6 <UART_SetConfig+0x342>
 80032b4:	efff69f3 	.word	0xefff69f3
 80032b8:	40008000 	.word	0x40008000
 80032bc:	40013800 	.word	0x40013800
 80032c0:	40021000 	.word	0x40021000
 80032c4:	40004400 	.word	0x40004400
 80032c8:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80032cc:	f7fe fd12 	bl	8001cf4 <HAL_RCC_GetPCLK2Freq>
 80032d0:	61f8      	str	r0, [r7, #28]
        break;
 80032d2:	e010      	b.n	80032f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80032d4:	4b4c      	ldr	r3, [pc, #304]	; (8003408 <UART_SetConfig+0x454>)
 80032d6:	61fb      	str	r3, [r7, #28]
        break;
 80032d8:	e00d      	b.n	80032f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80032da:	f7fe fc5d 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 80032de:	61f8      	str	r0, [r7, #28]
        break;
 80032e0:	e009      	b.n	80032f6 <UART_SetConfig+0x342>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80032e2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e6:	61fb      	str	r3, [r7, #28]
        break;
 80032e8:	e005      	b.n	80032f6 <UART_SetConfig+0x342>
      default:
        pclk = 0U;
 80032ea:	2300      	movs	r3, #0
 80032ec:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80032ee:	2301      	movs	r3, #1
 80032f0:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80032f4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d077      	beq.n	80033ec <UART_SetConfig+0x438>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80032fc:	69fb      	ldr	r3, [r7, #28]
 80032fe:	005a      	lsls	r2, r3, #1
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	685b      	ldr	r3, [r3, #4]
 8003304:	085b      	lsrs	r3, r3, #1
 8003306:	441a      	add	r2, r3
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003310:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003312:	69bb      	ldr	r3, [r7, #24]
 8003314:	2b0f      	cmp	r3, #15
 8003316:	d916      	bls.n	8003346 <UART_SetConfig+0x392>
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800331e:	d212      	bcs.n	8003346 <UART_SetConfig+0x392>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003320:	69bb      	ldr	r3, [r7, #24]
 8003322:	b29b      	uxth	r3, r3
 8003324:	f023 030f 	bic.w	r3, r3, #15
 8003328:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800332a:	69bb      	ldr	r3, [r7, #24]
 800332c:	085b      	lsrs	r3, r3, #1
 800332e:	b29b      	uxth	r3, r3
 8003330:	f003 0307 	and.w	r3, r3, #7
 8003334:	b29a      	uxth	r2, r3
 8003336:	8afb      	ldrh	r3, [r7, #22]
 8003338:	4313      	orrs	r3, r2
 800333a:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	8afa      	ldrh	r2, [r7, #22]
 8003342:	60da      	str	r2, [r3, #12]
 8003344:	e052      	b.n	80033ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 8003346:	2301      	movs	r3, #1
 8003348:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
 800334c:	e04e      	b.n	80033ec <UART_SetConfig+0x438>
      }
    }
  }
  else
  {
    switch (clocksource)
 800334e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8003352:	2b08      	cmp	r3, #8
 8003354:	d827      	bhi.n	80033a6 <UART_SetConfig+0x3f2>
 8003356:	a201      	add	r2, pc, #4	; (adr r2, 800335c <UART_SetConfig+0x3a8>)
 8003358:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800335c:	08003381 	.word	0x08003381
 8003360:	08003389 	.word	0x08003389
 8003364:	08003391 	.word	0x08003391
 8003368:	080033a7 	.word	0x080033a7
 800336c:	08003397 	.word	0x08003397
 8003370:	080033a7 	.word	0x080033a7
 8003374:	080033a7 	.word	0x080033a7
 8003378:	080033a7 	.word	0x080033a7
 800337c:	0800339f 	.word	0x0800339f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003380:	f7fe fca2 	bl	8001cc8 <HAL_RCC_GetPCLK1Freq>
 8003384:	61f8      	str	r0, [r7, #28]
        break;
 8003386:	e014      	b.n	80033b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003388:	f7fe fcb4 	bl	8001cf4 <HAL_RCC_GetPCLK2Freq>
 800338c:	61f8      	str	r0, [r7, #28]
        break;
 800338e:	e010      	b.n	80033b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003390:	4b1d      	ldr	r3, [pc, #116]	; (8003408 <UART_SetConfig+0x454>)
 8003392:	61fb      	str	r3, [r7, #28]
        break;
 8003394:	e00d      	b.n	80033b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003396:	f7fe fbff 	bl	8001b98 <HAL_RCC_GetSysClockFreq>
 800339a:	61f8      	str	r0, [r7, #28]
        break;
 800339c:	e009      	b.n	80033b2 <UART_SetConfig+0x3fe>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800339e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033a2:	61fb      	str	r3, [r7, #28]
        break;
 80033a4:	e005      	b.n	80033b2 <UART_SetConfig+0x3fe>
      default:
        pclk = 0U;
 80033a6:	2300      	movs	r3, #0
 80033a8:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 80033aa:	2301      	movs	r3, #1
 80033ac:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
        break;
 80033b0:	bf00      	nop
    }

    if (pclk != 0U)
 80033b2:	69fb      	ldr	r3, [r7, #28]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d019      	beq.n	80033ec <UART_SetConfig+0x438>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	685b      	ldr	r3, [r3, #4]
 80033bc:	085a      	lsrs	r2, r3, #1
 80033be:	69fb      	ldr	r3, [r7, #28]
 80033c0:	441a      	add	r2, r3
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80033ca:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80033cc:	69bb      	ldr	r3, [r7, #24]
 80033ce:	2b0f      	cmp	r3, #15
 80033d0:	d909      	bls.n	80033e6 <UART_SetConfig+0x432>
 80033d2:	69bb      	ldr	r3, [r7, #24]
 80033d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033d8:	d205      	bcs.n	80033e6 <UART_SetConfig+0x432>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80033da:	69bb      	ldr	r3, [r7, #24]
 80033dc:	b29a      	uxth	r2, r3
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	60da      	str	r2, [r3, #12]
 80033e4:	e002      	b.n	80033ec <UART_SetConfig+0x438>
      }
      else
      {
        ret = HAL_ERROR;
 80033e6:	2301      	movs	r3, #1
 80033e8:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2200      	movs	r2, #0
 80033f0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2200      	movs	r2, #0
 80033f6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80033f8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
}
 80033fc:	4618      	mov	r0, r3
 80033fe:	3728      	adds	r7, #40	; 0x28
 8003400:	46bd      	mov	sp, r7
 8003402:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003406:	bf00      	nop
 8003408:	00f42400 	.word	0x00f42400

0800340c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800340c:	b480      	push	{r7}
 800340e:	b083      	sub	sp, #12
 8003410:	af00      	add	r7, sp, #0
 8003412:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003418:	f003 0301 	and.w	r3, r3, #1
 800341c:	2b00      	cmp	r3, #0
 800341e:	d00a      	beq.n	8003436 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f003 0302 	and.w	r3, r3, #2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d00a      	beq.n	800347a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	430a      	orrs	r2, r1
 8003478:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00a      	beq.n	800349c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	685b      	ldr	r3, [r3, #4]
 800348c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	430a      	orrs	r2, r1
 800349a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034a0:	f003 0310 	and.w	r3, r3, #16
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00a      	beq.n	80034be <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	430a      	orrs	r2, r1
 80034bc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c2:	f003 0320 	and.w	r3, r3, #32
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d00a      	beq.n	80034e0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	689b      	ldr	r3, [r3, #8]
 80034d0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	430a      	orrs	r2, r1
 80034de:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d01a      	beq.n	8003522 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	430a      	orrs	r2, r1
 8003500:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003506:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800350a:	d10a      	bne.n	8003522 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	685b      	ldr	r3, [r3, #4]
 8003512:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	430a      	orrs	r2, r1
 8003520:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800352a:	2b00      	cmp	r3, #0
 800352c:	d00a      	beq.n	8003544 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	685b      	ldr	r3, [r3, #4]
 8003534:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	430a      	orrs	r2, r1
 8003542:	605a      	str	r2, [r3, #4]
  }
}
 8003544:	bf00      	nop
 8003546:	370c      	adds	r7, #12
 8003548:	46bd      	mov	sp, r7
 800354a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800354e:	4770      	bx	lr

08003550 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b086      	sub	sp, #24
 8003554:	af02      	add	r7, sp, #8
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2200      	movs	r2, #0
 800355c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8003560:	f7fd fab2 	bl	8000ac8 <HAL_GetTick>
 8003564:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	f003 0308 	and.w	r3, r3, #8
 8003570:	2b08      	cmp	r3, #8
 8003572:	d10e      	bne.n	8003592 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003574:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8003578:	9300      	str	r3, [sp, #0]
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2200      	movs	r2, #0
 800357e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003582:	6878      	ldr	r0, [r7, #4]
 8003584:	f000 f82d 	bl	80035e2 <UART_WaitOnFlagUntilTimeout>
 8003588:	4603      	mov	r3, r0
 800358a:	2b00      	cmp	r3, #0
 800358c:	d001      	beq.n	8003592 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800358e:	2303      	movs	r3, #3
 8003590:	e023      	b.n	80035da <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f003 0304 	and.w	r3, r3, #4
 800359c:	2b04      	cmp	r3, #4
 800359e:	d10e      	bne.n	80035be <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80035a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80035a4:	9300      	str	r3, [sp, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80035ae:	6878      	ldr	r0, [r7, #4]
 80035b0:	f000 f817 	bl	80035e2 <UART_WaitOnFlagUntilTimeout>
 80035b4:	4603      	mov	r3, r0
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d001      	beq.n	80035be <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e00d      	b.n	80035da <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	2220      	movs	r2, #32
 80035c2:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	2220      	movs	r2, #32
 80035c8:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}

080035e2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80035e2:	b580      	push	{r7, lr}
 80035e4:	b09c      	sub	sp, #112	; 0x70
 80035e6:	af00      	add	r7, sp, #0
 80035e8:	60f8      	str	r0, [r7, #12]
 80035ea:	60b9      	str	r1, [r7, #8]
 80035ec:	603b      	str	r3, [r7, #0]
 80035ee:	4613      	mov	r3, r2
 80035f0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80035f2:	e0a5      	b.n	8003740 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80035f4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80035f6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80035fa:	f000 80a1 	beq.w	8003740 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80035fe:	f7fd fa63 	bl	8000ac8 <HAL_GetTick>
 8003602:	4602      	mov	r2, r0
 8003604:	683b      	ldr	r3, [r7, #0]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	6fba      	ldr	r2, [r7, #120]	; 0x78
 800360a:	429a      	cmp	r2, r3
 800360c:	d302      	bcc.n	8003614 <UART_WaitOnFlagUntilTimeout+0x32>
 800360e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003610:	2b00      	cmp	r3, #0
 8003612:	d13e      	bne.n	8003692 <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800361a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800361c:	e853 3f00 	ldrex	r3, [r3]
 8003620:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8003622:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003624:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003628:	667b      	str	r3, [r7, #100]	; 0x64
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	461a      	mov	r2, r3
 8003630:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8003632:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003634:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003636:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8003638:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800363a:	e841 2300 	strex	r3, r2, [r1]
 800363e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8003640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003642:	2b00      	cmp	r3, #0
 8003644:	d1e6      	bne.n	8003614 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	3308      	adds	r3, #8
 800364c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800364e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003650:	e853 3f00 	ldrex	r3, [r3]
 8003654:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8003656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003658:	f023 0301 	bic.w	r3, r3, #1
 800365c:	663b      	str	r3, [r7, #96]	; 0x60
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	3308      	adds	r3, #8
 8003664:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8003666:	64ba      	str	r2, [r7, #72]	; 0x48
 8003668:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800366a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800366c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800366e:	e841 2300 	strex	r3, r2, [r1]
 8003672:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8003674:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003676:	2b00      	cmp	r3, #0
 8003678:	d1e5      	bne.n	8003646 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	2220      	movs	r2, #32
 800367e:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	2220      	movs	r2, #32
 8003684:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2200      	movs	r2, #0
 800368a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800368e:	2303      	movs	r3, #3
 8003690:	e067      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f003 0304 	and.w	r3, r3, #4
 800369c:	2b00      	cmp	r3, #0
 800369e:	d04f      	beq.n	8003740 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80036ae:	d147      	bne.n	8003740 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80036b8:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	e853 3f00 	ldrex	r3, [r3]
 80036c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80036c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80036ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	461a      	mov	r2, r3
 80036d6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036d8:	637b      	str	r3, [r7, #52]	; 0x34
 80036da:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80036dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80036de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80036e0:	e841 2300 	strex	r3, r2, [r1]
 80036e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80036e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1e6      	bne.n	80036ba <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	3308      	adds	r3, #8
 80036f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80036f4:	697b      	ldr	r3, [r7, #20]
 80036f6:	e853 3f00 	ldrex	r3, [r3]
 80036fa:	613b      	str	r3, [r7, #16]
   return(result);
 80036fc:	693b      	ldr	r3, [r7, #16]
 80036fe:	f023 0301 	bic.w	r3, r3, #1
 8003702:	66bb      	str	r3, [r7, #104]	; 0x68
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	3308      	adds	r3, #8
 800370a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800370c:	623a      	str	r2, [r7, #32]
 800370e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003710:	69f9      	ldr	r1, [r7, #28]
 8003712:	6a3a      	ldr	r2, [r7, #32]
 8003714:	e841 2300 	strex	r3, r2, [r1]
 8003718:	61bb      	str	r3, [r7, #24]
   return(result);
 800371a:	69bb      	ldr	r3, [r7, #24]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d1e5      	bne.n	80036ec <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	2220      	movs	r2, #32
 800372a:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800372c:	68fb      	ldr	r3, [r7, #12]
 800372e:	2220      	movs	r2, #32
 8003730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	2200      	movs	r2, #0
 8003738:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 800373c:	2303      	movs	r3, #3
 800373e:	e010      	b.n	8003762 <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	68bb      	ldr	r3, [r7, #8]
 8003748:	4013      	ands	r3, r2
 800374a:	68ba      	ldr	r2, [r7, #8]
 800374c:	429a      	cmp	r2, r3
 800374e:	bf0c      	ite	eq
 8003750:	2301      	moveq	r3, #1
 8003752:	2300      	movne	r3, #0
 8003754:	b2db      	uxtb	r3, r3
 8003756:	461a      	mov	r2, r3
 8003758:	79fb      	ldrb	r3, [r7, #7]
 800375a:	429a      	cmp	r2, r3
 800375c:	f43f af4a 	beq.w	80035f4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003760:	2300      	movs	r3, #0
}
 8003762:	4618      	mov	r0, r3
 8003764:	3770      	adds	r7, #112	; 0x70
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800376a:	b480      	push	{r7}
 800376c:	b095      	sub	sp, #84	; 0x54
 800376e:	af00      	add	r7, sp, #0
 8003770:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003778:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800377a:	e853 3f00 	ldrex	r3, [r3]
 800377e:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8003780:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003782:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8003786:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	461a      	mov	r2, r3
 800378e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003790:	643b      	str	r3, [r7, #64]	; 0x40
 8003792:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003794:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8003796:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8003798:	e841 2300 	strex	r3, r2, [r1]
 800379c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800379e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d1e6      	bne.n	8003772 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	3308      	adds	r3, #8
 80037aa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037ac:	6a3b      	ldr	r3, [r7, #32]
 80037ae:	e853 3f00 	ldrex	r3, [r3]
 80037b2:	61fb      	str	r3, [r7, #28]
   return(result);
 80037b4:	69fb      	ldr	r3, [r7, #28]
 80037b6:	f023 0301 	bic.w	r3, r3, #1
 80037ba:	64bb      	str	r3, [r7, #72]	; 0x48
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	3308      	adds	r3, #8
 80037c2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80037c4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80037c6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80037c8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80037ca:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80037cc:	e841 2300 	strex	r3, r2, [r1]
 80037d0:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80037d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037d4:	2b00      	cmp	r3, #0
 80037d6:	d1e5      	bne.n	80037a4 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80037dc:	2b01      	cmp	r3, #1
 80037de:	d118      	bne.n	8003812 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	e853 3f00 	ldrex	r3, [r3]
 80037ec:	60bb      	str	r3, [r7, #8]
   return(result);
 80037ee:	68bb      	ldr	r3, [r7, #8]
 80037f0:	f023 0310 	bic.w	r3, r3, #16
 80037f4:	647b      	str	r3, [r7, #68]	; 0x44
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	461a      	mov	r2, r3
 80037fc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80037fe:	61bb      	str	r3, [r7, #24]
 8003800:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003802:	6979      	ldr	r1, [r7, #20]
 8003804:	69ba      	ldr	r2, [r7, #24]
 8003806:	e841 2300 	strex	r3, r2, [r1]
 800380a:	613b      	str	r3, [r7, #16]
   return(result);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	2b00      	cmp	r3, #0
 8003810:	d1e6      	bne.n	80037e0 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	2220      	movs	r2, #32
 8003816:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2200      	movs	r2, #0
 800381c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	2200      	movs	r2, #0
 8003822:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003824:	bf00      	nop
 8003826:	3754      	adds	r7, #84	; 0x54
 8003828:	46bd      	mov	sp, r7
 800382a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382e:	4770      	bx	lr

08003830 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	b084      	sub	sp, #16
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800383c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800384e:	68f8      	ldr	r0, [r7, #12]
 8003850:	f7ff fb9a 	bl	8002f88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003854:	bf00      	nop
 8003856:	3710      	adds	r7, #16
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}

0800385c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b088      	sub	sp, #32
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	e853 3f00 	ldrex	r3, [r3]
 8003870:	60bb      	str	r3, [r7, #8]
   return(result);
 8003872:	68bb      	ldr	r3, [r7, #8]
 8003874:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003878:	61fb      	str	r3, [r7, #28]
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	461a      	mov	r2, r3
 8003880:	69fb      	ldr	r3, [r7, #28]
 8003882:	61bb      	str	r3, [r7, #24]
 8003884:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003886:	6979      	ldr	r1, [r7, #20]
 8003888:	69ba      	ldr	r2, [r7, #24]
 800388a:	e841 2300 	strex	r3, r2, [r1]
 800388e:	613b      	str	r3, [r7, #16]
   return(result);
 8003890:	693b      	ldr	r3, [r7, #16]
 8003892:	2b00      	cmp	r3, #0
 8003894:	d1e6      	bne.n	8003864 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	2220      	movs	r2, #32
 800389a:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2200      	movs	r2, #0
 80038a0:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80038a2:	6878      	ldr	r0, [r7, #4]
 80038a4:	f7ff fb66 	bl	8002f74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80038a8:	bf00      	nop
 80038aa:	3720      	adds	r7, #32
 80038ac:	46bd      	mov	sp, r7
 80038ae:	bd80      	pop	{r7, pc}

080038b0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80038b0:	b480      	push	{r7}
 80038b2:	b083      	sub	sp, #12
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80038b8:	bf00      	nop
 80038ba:	370c      	adds	r7, #12
 80038bc:	46bd      	mov	sp, r7
 80038be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c2:	4770      	bx	lr

080038c4 <__NVIC_SetPriority>:
{
 80038c4:	b480      	push	{r7}
 80038c6:	b083      	sub	sp, #12
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	4603      	mov	r3, r0
 80038cc:	6039      	str	r1, [r7, #0]
 80038ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80038d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	db0a      	blt.n	80038ee <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	b2da      	uxtb	r2, r3
 80038dc:	490c      	ldr	r1, [pc, #48]	; (8003910 <__NVIC_SetPriority+0x4c>)
 80038de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80038e2:	0112      	lsls	r2, r2, #4
 80038e4:	b2d2      	uxtb	r2, r2
 80038e6:	440b      	add	r3, r1
 80038e8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80038ec:	e00a      	b.n	8003904 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80038ee:	683b      	ldr	r3, [r7, #0]
 80038f0:	b2da      	uxtb	r2, r3
 80038f2:	4908      	ldr	r1, [pc, #32]	; (8003914 <__NVIC_SetPriority+0x50>)
 80038f4:	79fb      	ldrb	r3, [r7, #7]
 80038f6:	f003 030f 	and.w	r3, r3, #15
 80038fa:	3b04      	subs	r3, #4
 80038fc:	0112      	lsls	r2, r2, #4
 80038fe:	b2d2      	uxtb	r2, r2
 8003900:	440b      	add	r3, r1
 8003902:	761a      	strb	r2, [r3, #24]
}
 8003904:	bf00      	nop
 8003906:	370c      	adds	r7, #12
 8003908:	46bd      	mov	sp, r7
 800390a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800390e:	4770      	bx	lr
 8003910:	e000e100 	.word	0xe000e100
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8003918:	b580      	push	{r7, lr}
 800391a:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 800391c:	4b05      	ldr	r3, [pc, #20]	; (8003934 <SysTick_Handler+0x1c>)
 800391e:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8003920:	f001 fd28 	bl	8005374 <xTaskGetSchedulerState>
 8003924:	4603      	mov	r3, r0
 8003926:	2b01      	cmp	r3, #1
 8003928:	d001      	beq.n	800392e <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800392a:	f002 fb0d 	bl	8005f48 <xPortSysTickHandler>
  }
}
 800392e:	bf00      	nop
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	e000e010 	.word	0xe000e010

08003938 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8003938:	b580      	push	{r7, lr}
 800393a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800393c:	2100      	movs	r1, #0
 800393e:	f06f 0004 	mvn.w	r0, #4
 8003942:	f7ff ffbf 	bl	80038c4 <__NVIC_SetPriority>
#endif
}
 8003946:	bf00      	nop
 8003948:	bd80      	pop	{r7, pc}
	...

0800394c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800394c:	b480      	push	{r7}
 800394e:	b083      	sub	sp, #12
 8003950:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003952:	f3ef 8305 	mrs	r3, IPSR
 8003956:	603b      	str	r3, [r7, #0]
  return(result);
 8003958:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800395a:	2b00      	cmp	r3, #0
 800395c:	d003      	beq.n	8003966 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800395e:	f06f 0305 	mvn.w	r3, #5
 8003962:	607b      	str	r3, [r7, #4]
 8003964:	e00c      	b.n	8003980 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8003966:	4b0a      	ldr	r3, [pc, #40]	; (8003990 <osKernelInitialize+0x44>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d105      	bne.n	800397a <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800396e:	4b08      	ldr	r3, [pc, #32]	; (8003990 <osKernelInitialize+0x44>)
 8003970:	2201      	movs	r2, #1
 8003972:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8003974:	2300      	movs	r3, #0
 8003976:	607b      	str	r3, [r7, #4]
 8003978:	e002      	b.n	8003980 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800397a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800397e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8003980:	687b      	ldr	r3, [r7, #4]
}
 8003982:	4618      	mov	r0, r3
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr
 800398e:	bf00      	nop
 8003990:	20000170 	.word	0x20000170

08003994 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8003994:	b580      	push	{r7, lr}
 8003996:	b082      	sub	sp, #8
 8003998:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800399a:	f3ef 8305 	mrs	r3, IPSR
 800399e:	603b      	str	r3, [r7, #0]
  return(result);
 80039a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d003      	beq.n	80039ae <osKernelStart+0x1a>
    stat = osErrorISR;
 80039a6:	f06f 0305 	mvn.w	r3, #5
 80039aa:	607b      	str	r3, [r7, #4]
 80039ac:	e010      	b.n	80039d0 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80039ae:	4b0b      	ldr	r3, [pc, #44]	; (80039dc <osKernelStart+0x48>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	2b01      	cmp	r3, #1
 80039b4:	d109      	bne.n	80039ca <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80039b6:	f7ff ffbf 	bl	8003938 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80039ba:	4b08      	ldr	r3, [pc, #32]	; (80039dc <osKernelStart+0x48>)
 80039bc:	2202      	movs	r2, #2
 80039be:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80039c0:	f001 f87c 	bl	8004abc <vTaskStartScheduler>
      stat = osOK;
 80039c4:	2300      	movs	r3, #0
 80039c6:	607b      	str	r3, [r7, #4]
 80039c8:	e002      	b.n	80039d0 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80039ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80039d0:	687b      	ldr	r3, [r7, #4]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3708      	adds	r7, #8
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	20000170 	.word	0x20000170

080039e0 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b08e      	sub	sp, #56	; 0x38
 80039e4:	af04      	add	r7, sp, #16
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	60b9      	str	r1, [r7, #8]
 80039ea:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80039ec:	2300      	movs	r3, #0
 80039ee:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80039f0:	f3ef 8305 	mrs	r3, IPSR
 80039f4:	617b      	str	r3, [r7, #20]
  return(result);
 80039f6:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d17e      	bne.n	8003afa <osThreadNew+0x11a>
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d07b      	beq.n	8003afa <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8003a02:	2380      	movs	r3, #128	; 0x80
 8003a04:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8003a06:	2318      	movs	r3, #24
 8003a08:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8003a0a:	2300      	movs	r3, #0
 8003a0c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8003a0e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8003a12:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d045      	beq.n	8003aa6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d002      	beq.n	8003a28 <osThreadNew+0x48>
        name = attr->name;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	699b      	ldr	r3, [r3, #24]
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d002      	beq.n	8003a36 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	699b      	ldr	r3, [r3, #24]
 8003a34:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8003a36:	69fb      	ldr	r3, [r7, #28]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d008      	beq.n	8003a4e <osThreadNew+0x6e>
 8003a3c:	69fb      	ldr	r3, [r7, #28]
 8003a3e:	2b38      	cmp	r3, #56	; 0x38
 8003a40:	d805      	bhi.n	8003a4e <osThreadNew+0x6e>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d001      	beq.n	8003a52 <osThreadNew+0x72>
        return (NULL);
 8003a4e:	2300      	movs	r3, #0
 8003a50:	e054      	b.n	8003afc <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	695b      	ldr	r3, [r3, #20]
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d003      	beq.n	8003a62 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	695b      	ldr	r3, [r3, #20]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	2b00      	cmp	r3, #0
 8003a68:	d00e      	beq.n	8003a88 <osThreadNew+0xa8>
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68db      	ldr	r3, [r3, #12]
 8003a6e:	2bbb      	cmp	r3, #187	; 0xbb
 8003a70:	d90a      	bls.n	8003a88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d006      	beq.n	8003a88 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d002      	beq.n	8003a88 <osThreadNew+0xa8>
        mem = 1;
 8003a82:	2301      	movs	r3, #1
 8003a84:	61bb      	str	r3, [r7, #24]
 8003a86:	e010      	b.n	8003aaa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d10c      	bne.n	8003aaa <osThreadNew+0xca>
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	68db      	ldr	r3, [r3, #12]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d108      	bne.n	8003aaa <osThreadNew+0xca>
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691b      	ldr	r3, [r3, #16]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d104      	bne.n	8003aaa <osThreadNew+0xca>
          mem = 0;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	61bb      	str	r3, [r7, #24]
 8003aa4:	e001      	b.n	8003aaa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8003aa6:	2300      	movs	r3, #0
 8003aa8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8003aaa:	69bb      	ldr	r3, [r7, #24]
 8003aac:	2b01      	cmp	r3, #1
 8003aae:	d110      	bne.n	8003ad2 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8003ab4:	687a      	ldr	r2, [r7, #4]
 8003ab6:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8003ab8:	9202      	str	r2, [sp, #8]
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	69fb      	ldr	r3, [r7, #28]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	68bb      	ldr	r3, [r7, #8]
 8003ac2:	6a3a      	ldr	r2, [r7, #32]
 8003ac4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f000 fe0c 	bl	80046e4 <xTaskCreateStatic>
 8003acc:	4603      	mov	r3, r0
 8003ace:	613b      	str	r3, [r7, #16]
 8003ad0:	e013      	b.n	8003afa <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8003ad2:	69bb      	ldr	r3, [r7, #24]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d110      	bne.n	8003afa <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8003ad8:	6a3b      	ldr	r3, [r7, #32]
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	f107 0310 	add.w	r3, r7, #16
 8003ae0:	9301      	str	r3, [sp, #4]
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	9300      	str	r3, [sp, #0]
 8003ae6:	68bb      	ldr	r3, [r7, #8]
 8003ae8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f000 fe57 	bl	800479e <xTaskCreate>
 8003af0:	4603      	mov	r3, r0
 8003af2:	2b01      	cmp	r3, #1
 8003af4:	d001      	beq.n	8003afa <osThreadNew+0x11a>
            hTask = NULL;
 8003af6:	2300      	movs	r3, #0
 8003af8:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8003afa:	693b      	ldr	r3, [r7, #16]
}
 8003afc:	4618      	mov	r0, r3
 8003afe:	3728      	adds	r7, #40	; 0x28
 8003b00:	46bd      	mov	sp, r7
 8003b02:	bd80      	pop	{r7, pc}

08003b04 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8003b04:	b580      	push	{r7, lr}
 8003b06:	b084      	sub	sp, #16
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003b0c:	f3ef 8305 	mrs	r3, IPSR
 8003b10:	60bb      	str	r3, [r7, #8]
  return(result);
 8003b12:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d003      	beq.n	8003b20 <osDelay+0x1c>
    stat = osErrorISR;
 8003b18:	f06f 0305 	mvn.w	r3, #5
 8003b1c:	60fb      	str	r3, [r7, #12]
 8003b1e:	e007      	b.n	8003b30 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d002      	beq.n	8003b30 <osDelay+0x2c>
      vTaskDelay(ticks);
 8003b2a:	6878      	ldr	r0, [r7, #4]
 8003b2c:	f000 ff92 	bl	8004a54 <vTaskDelay>
    }
  }

  return (stat);
 8003b30:	68fb      	ldr	r3, [r7, #12]
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3710      	adds	r7, #16
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8003b3c:	b480      	push	{r7}
 8003b3e:	b085      	sub	sp, #20
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a07      	ldr	r2, [pc, #28]	; (8003b68 <vApplicationGetIdleTaskMemory+0x2c>)
 8003b4c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8003b4e:	68bb      	ldr	r3, [r7, #8]
 8003b50:	4a06      	ldr	r2, [pc, #24]	; (8003b6c <vApplicationGetIdleTaskMemory+0x30>)
 8003b52:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2280      	movs	r2, #128	; 0x80
 8003b58:	601a      	str	r2, [r3, #0]
}
 8003b5a:	bf00      	nop
 8003b5c:	3714      	adds	r7, #20
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b64:	4770      	bx	lr
 8003b66:	bf00      	nop
 8003b68:	20000174 	.word	0x20000174
 8003b6c:	20000230 	.word	0x20000230

08003b70 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8003b70:	b480      	push	{r7}
 8003b72:	b085      	sub	sp, #20
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	4a07      	ldr	r2, [pc, #28]	; (8003b9c <vApplicationGetTimerTaskMemory+0x2c>)
 8003b80:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8003b82:	68bb      	ldr	r3, [r7, #8]
 8003b84:	4a06      	ldr	r2, [pc, #24]	; (8003ba0 <vApplicationGetTimerTaskMemory+0x30>)
 8003b86:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003b8e:	601a      	str	r2, [r3, #0]
}
 8003b90:	bf00      	nop
 8003b92:	3714      	adds	r7, #20
 8003b94:	46bd      	mov	sp, r7
 8003b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9a:	4770      	bx	lr
 8003b9c:	20000430 	.word	0x20000430
 8003ba0:	200004ec 	.word	0x200004ec

08003ba4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003ba4:	b480      	push	{r7}
 8003ba6:	b083      	sub	sp, #12
 8003ba8:	af00      	add	r7, sp, #0
 8003baa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	f103 0208 	add.w	r2, r3, #8
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003bbc:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	f103 0208 	add.w	r2, r3, #8
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	f103 0208 	add.w	r2, r3, #8
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8003bd8:	bf00      	nop
 8003bda:	370c      	adds	r7, #12
 8003bdc:	46bd      	mov	sp, r7
 8003bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be2:	4770      	bx	lr

08003be4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8003be4:	b480      	push	{r7}
 8003be6:	b083      	sub	sp, #12
 8003be8:	af00      	add	r7, sp, #0
 8003bea:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	2200      	movs	r2, #0
 8003bf0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8003bf2:	bf00      	nop
 8003bf4:	370c      	adds	r7, #12
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bfc:	4770      	bx	lr

08003bfe <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003bfe:	b480      	push	{r7}
 8003c00:	b085      	sub	sp, #20
 8003c02:	af00      	add	r7, sp, #0
 8003c04:	6078      	str	r0, [r7, #4]
 8003c06:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	685b      	ldr	r3, [r3, #4]
 8003c0c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8003c0e:	683b      	ldr	r3, [r7, #0]
 8003c10:	68fa      	ldr	r2, [r7, #12]
 8003c12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	689a      	ldr	r2, [r3, #8]
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	683a      	ldr	r2, [r7, #0]
 8003c22:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	683a      	ldr	r2, [r7, #0]
 8003c28:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	687a      	ldr	r2, [r7, #4]
 8003c2e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	1c5a      	adds	r2, r3, #1
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	601a      	str	r2, [r3, #0]
}
 8003c3a:	bf00      	nop
 8003c3c:	3714      	adds	r7, #20
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003c46:	b480      	push	{r7}
 8003c48:	b085      	sub	sp, #20
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
 8003c4e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8003c50:	683b      	ldr	r3, [r7, #0]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003c56:	68bb      	ldr	r3, [r7, #8]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c5c:	d103      	bne.n	8003c66 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	691b      	ldr	r3, [r3, #16]
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	e00c      	b.n	8003c80 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	3308      	adds	r3, #8
 8003c6a:	60fb      	str	r3, [r7, #12]
 8003c6c:	e002      	b.n	8003c74 <vListInsert+0x2e>
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	685b      	ldr	r3, [r3, #4]
 8003c72:	60fb      	str	r3, [r7, #12]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	685b      	ldr	r3, [r3, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d2f6      	bcs.n	8003c6e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	685a      	ldr	r2, [r3, #4]
 8003c84:	683b      	ldr	r3, [r7, #0]
 8003c86:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	683a      	ldr	r2, [r7, #0]
 8003c8e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	683a      	ldr	r2, [r7, #0]
 8003c9a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	601a      	str	r2, [r3, #0]
}
 8003cac:	bf00      	nop
 8003cae:	3714      	adds	r7, #20
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	691b      	ldr	r3, [r3, #16]
 8003cc4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	685b      	ldr	r3, [r3, #4]
 8003cca:	687a      	ldr	r2, [r7, #4]
 8003ccc:	6892      	ldr	r2, [r2, #8]
 8003cce:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	687a      	ldr	r2, [r7, #4]
 8003cd6:	6852      	ldr	r2, [r2, #4]
 8003cd8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	685b      	ldr	r3, [r3, #4]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	429a      	cmp	r2, r3
 8003ce2:	d103      	bne.n	8003cec <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	689a      	ldr	r2, [r3, #8]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	1e5a      	subs	r2, r3, #1
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	3714      	adds	r7, #20
 8003d04:	46bd      	mov	sp, r7
 8003d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0a:	4770      	bx	lr

08003d0c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b084      	sub	sp, #16
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
 8003d14:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d10a      	bne.n	8003d36 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8003d20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d24:	f383 8811 	msr	BASEPRI, r3
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	f3bf 8f4f 	dsb	sy
 8003d30:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8003d32:	bf00      	nop
 8003d34:	e7fe      	b.n	8003d34 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8003d36:	f002 f875 	bl	8005e24 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d42:	68f9      	ldr	r1, [r7, #12]
 8003d44:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d46:	fb01 f303 	mul.w	r3, r1, r3
 8003d4a:	441a      	add	r2, r3
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	2200      	movs	r2, #0
 8003d54:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003d66:	3b01      	subs	r3, #1
 8003d68:	68f9      	ldr	r1, [r7, #12]
 8003d6a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003d6c:	fb01 f303 	mul.w	r3, r1, r3
 8003d70:	441a      	add	r2, r3
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	22ff      	movs	r2, #255	; 0xff
 8003d7a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	22ff      	movs	r2, #255	; 0xff
 8003d82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003d86:	683b      	ldr	r3, [r7, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d114      	bne.n	8003db6 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	691b      	ldr	r3, [r3, #16]
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d01a      	beq.n	8003dca <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	3310      	adds	r3, #16
 8003d98:	4618      	mov	r0, r3
 8003d9a:	f001 f929 	bl	8004ff0 <xTaskRemoveFromEventList>
 8003d9e:	4603      	mov	r3, r0
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d012      	beq.n	8003dca <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8003da4:	4b0c      	ldr	r3, [pc, #48]	; (8003dd8 <xQueueGenericReset+0xcc>)
 8003da6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003daa:	601a      	str	r2, [r3, #0]
 8003dac:	f3bf 8f4f 	dsb	sy
 8003db0:	f3bf 8f6f 	isb	sy
 8003db4:	e009      	b.n	8003dca <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	3310      	adds	r3, #16
 8003dba:	4618      	mov	r0, r3
 8003dbc:	f7ff fef2 	bl	8003ba4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	3324      	adds	r3, #36	; 0x24
 8003dc4:	4618      	mov	r0, r3
 8003dc6:	f7ff feed 	bl	8003ba4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8003dca:	f002 f85b 	bl	8005e84 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8003dce:	2301      	movs	r3, #1
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3710      	adds	r7, #16
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	bd80      	pop	{r7, pc}
 8003dd8:	e000ed04 	.word	0xe000ed04

08003ddc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b08e      	sub	sp, #56	; 0x38
 8003de0:	af02      	add	r7, sp, #8
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
 8003de8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	2b00      	cmp	r3, #0
 8003dee:	d10a      	bne.n	8003e06 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8003df0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003df4:	f383 8811 	msr	BASEPRI, r3
 8003df8:	f3bf 8f6f 	isb	sy
 8003dfc:	f3bf 8f4f 	dsb	sy
 8003e00:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003e02:	bf00      	nop
 8003e04:	e7fe      	b.n	8003e04 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d10a      	bne.n	8003e22 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8003e0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e10:	f383 8811 	msr	BASEPRI, r3
 8003e14:	f3bf 8f6f 	isb	sy
 8003e18:	f3bf 8f4f 	dsb	sy
 8003e1c:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003e1e:	bf00      	nop
 8003e20:	e7fe      	b.n	8003e20 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2b00      	cmp	r3, #0
 8003e26:	d002      	beq.n	8003e2e <xQueueGenericCreateStatic+0x52>
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	2b00      	cmp	r3, #0
 8003e2c:	d001      	beq.n	8003e32 <xQueueGenericCreateStatic+0x56>
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <xQueueGenericCreateStatic+0x58>
 8003e32:	2300      	movs	r3, #0
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d10a      	bne.n	8003e4e <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8003e38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e3c:	f383 8811 	msr	BASEPRI, r3
 8003e40:	f3bf 8f6f 	isb	sy
 8003e44:	f3bf 8f4f 	dsb	sy
 8003e48:	623b      	str	r3, [r7, #32]
}
 8003e4a:	bf00      	nop
 8003e4c:	e7fe      	b.n	8003e4c <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d102      	bne.n	8003e5a <xQueueGenericCreateStatic+0x7e>
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d101      	bne.n	8003e5e <xQueueGenericCreateStatic+0x82>
 8003e5a:	2301      	movs	r3, #1
 8003e5c:	e000      	b.n	8003e60 <xQueueGenericCreateStatic+0x84>
 8003e5e:	2300      	movs	r3, #0
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	d10a      	bne.n	8003e7a <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8003e64:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e68:	f383 8811 	msr	BASEPRI, r3
 8003e6c:	f3bf 8f6f 	isb	sy
 8003e70:	f3bf 8f4f 	dsb	sy
 8003e74:	61fb      	str	r3, [r7, #28]
}
 8003e76:	bf00      	nop
 8003e78:	e7fe      	b.n	8003e78 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8003e7a:	2350      	movs	r3, #80	; 0x50
 8003e7c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003e7e:	697b      	ldr	r3, [r7, #20]
 8003e80:	2b50      	cmp	r3, #80	; 0x50
 8003e82:	d00a      	beq.n	8003e9a <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8003e84:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003e88:	f383 8811 	msr	BASEPRI, r3
 8003e8c:	f3bf 8f6f 	isb	sy
 8003e90:	f3bf 8f4f 	dsb	sy
 8003e94:	61bb      	str	r3, [r7, #24]
}
 8003e96:	bf00      	nop
 8003e98:	e7fe      	b.n	8003e98 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8003e9a:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003ea0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d00d      	beq.n	8003ec2 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003ea6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003eae:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003eb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003eb4:	9300      	str	r3, [sp, #0]
 8003eb6:	4613      	mov	r3, r2
 8003eb8:	687a      	ldr	r2, [r7, #4]
 8003eba:	68b9      	ldr	r1, [r7, #8]
 8003ebc:	68f8      	ldr	r0, [r7, #12]
 8003ebe:	f000 f805 	bl	8003ecc <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003ec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	3730      	adds	r7, #48	; 0x30
 8003ec8:	46bd      	mov	sp, r7
 8003eca:	bd80      	pop	{r7, pc}

08003ecc <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b084      	sub	sp, #16
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	60f8      	str	r0, [r7, #12]
 8003ed4:	60b9      	str	r1, [r7, #8]
 8003ed6:	607a      	str	r2, [r7, #4]
 8003ed8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	69ba      	ldr	r2, [r7, #24]
 8003ee4:	601a      	str	r2, [r3, #0]
 8003ee6:	e002      	b.n	8003eee <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003ee8:	69bb      	ldr	r3, [r7, #24]
 8003eea:	687a      	ldr	r2, [r7, #4]
 8003eec:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	68fa      	ldr	r2, [r7, #12]
 8003ef2:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	68ba      	ldr	r2, [r7, #8]
 8003ef8:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8003efa:	2101      	movs	r1, #1
 8003efc:	69b8      	ldr	r0, [r7, #24]
 8003efe:	f7ff ff05 	bl	8003d0c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	78fa      	ldrb	r2, [r7, #3]
 8003f06:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003f0a:	bf00      	nop
 8003f0c:	3710      	adds	r7, #16
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b08e      	sub	sp, #56	; 0x38
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
 8003f20:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8003f22:	2300      	movs	r3, #0
 8003f24:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003f2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d10a      	bne.n	8003f46 <xQueueGenericSend+0x32>
	__asm volatile
 8003f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f34:	f383 8811 	msr	BASEPRI, r3
 8003f38:	f3bf 8f6f 	isb	sy
 8003f3c:	f3bf 8f4f 	dsb	sy
 8003f40:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8003f42:	bf00      	nop
 8003f44:	e7fe      	b.n	8003f44 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d103      	bne.n	8003f54 <xQueueGenericSend+0x40>
 8003f4c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <xQueueGenericSend+0x44>
 8003f54:	2301      	movs	r3, #1
 8003f56:	e000      	b.n	8003f5a <xQueueGenericSend+0x46>
 8003f58:	2300      	movs	r3, #0
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10a      	bne.n	8003f74 <xQueueGenericSend+0x60>
	__asm volatile
 8003f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f62:	f383 8811 	msr	BASEPRI, r3
 8003f66:	f3bf 8f6f 	isb	sy
 8003f6a:	f3bf 8f4f 	dsb	sy
 8003f6e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8003f70:	bf00      	nop
 8003f72:	e7fe      	b.n	8003f72 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d103      	bne.n	8003f82 <xQueueGenericSend+0x6e>
 8003f7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003f7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	d101      	bne.n	8003f86 <xQueueGenericSend+0x72>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e000      	b.n	8003f88 <xQueueGenericSend+0x74>
 8003f86:	2300      	movs	r3, #0
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d10a      	bne.n	8003fa2 <xQueueGenericSend+0x8e>
	__asm volatile
 8003f8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003f90:	f383 8811 	msr	BASEPRI, r3
 8003f94:	f3bf 8f6f 	isb	sy
 8003f98:	f3bf 8f4f 	dsb	sy
 8003f9c:	623b      	str	r3, [r7, #32]
}
 8003f9e:	bf00      	nop
 8003fa0:	e7fe      	b.n	8003fa0 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003fa2:	f001 f9e7 	bl	8005374 <xTaskGetSchedulerState>
 8003fa6:	4603      	mov	r3, r0
 8003fa8:	2b00      	cmp	r3, #0
 8003faa:	d102      	bne.n	8003fb2 <xQueueGenericSend+0x9e>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d101      	bne.n	8003fb6 <xQueueGenericSend+0xa2>
 8003fb2:	2301      	movs	r3, #1
 8003fb4:	e000      	b.n	8003fb8 <xQueueGenericSend+0xa4>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d10a      	bne.n	8003fd2 <xQueueGenericSend+0xbe>
	__asm volatile
 8003fbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003fc0:	f383 8811 	msr	BASEPRI, r3
 8003fc4:	f3bf 8f6f 	isb	sy
 8003fc8:	f3bf 8f4f 	dsb	sy
 8003fcc:	61fb      	str	r3, [r7, #28]
}
 8003fce:	bf00      	nop
 8003fd0:	e7fe      	b.n	8003fd0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003fd2:	f001 ff27 	bl	8005e24 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003fd6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fd8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003fda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003fdc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003fde:	429a      	cmp	r2, r3
 8003fe0:	d302      	bcc.n	8003fe8 <xQueueGenericSend+0xd4>
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	2b02      	cmp	r3, #2
 8003fe6:	d129      	bne.n	800403c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003fe8:	683a      	ldr	r2, [r7, #0]
 8003fea:	68b9      	ldr	r1, [r7, #8]
 8003fec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003fee:	f000 fa0b 	bl	8004408 <prvCopyDataToQueue>
 8003ff2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003ff4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d010      	beq.n	800401e <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003ffc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003ffe:	3324      	adds	r3, #36	; 0x24
 8004000:	4618      	mov	r0, r3
 8004002:	f000 fff5 	bl	8004ff0 <xTaskRemoveFromEventList>
 8004006:	4603      	mov	r3, r0
 8004008:	2b00      	cmp	r3, #0
 800400a:	d013      	beq.n	8004034 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800400c:	4b3f      	ldr	r3, [pc, #252]	; (800410c <xQueueGenericSend+0x1f8>)
 800400e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004012:	601a      	str	r2, [r3, #0]
 8004014:	f3bf 8f4f 	dsb	sy
 8004018:	f3bf 8f6f 	isb	sy
 800401c:	e00a      	b.n	8004034 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800401e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004024:	4b39      	ldr	r3, [pc, #228]	; (800410c <xQueueGenericSend+0x1f8>)
 8004026:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800402a:	601a      	str	r2, [r3, #0]
 800402c:	f3bf 8f4f 	dsb	sy
 8004030:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004034:	f001 ff26 	bl	8005e84 <vPortExitCritical>
				return pdPASS;
 8004038:	2301      	movs	r3, #1
 800403a:	e063      	b.n	8004104 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d103      	bne.n	800404a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004042:	f001 ff1f 	bl	8005e84 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004046:	2300      	movs	r3, #0
 8004048:	e05c      	b.n	8004104 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800404a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800404c:	2b00      	cmp	r3, #0
 800404e:	d106      	bne.n	800405e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004050:	f107 0314 	add.w	r3, r7, #20
 8004054:	4618      	mov	r0, r3
 8004056:	f001 f82f 	bl	80050b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800405a:	2301      	movs	r3, #1
 800405c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800405e:	f001 ff11 	bl	8005e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004062:	f000 fd9b 	bl	8004b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004066:	f001 fedd 	bl	8005e24 <vPortEnterCritical>
 800406a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800406c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004070:	b25b      	sxtb	r3, r3
 8004072:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004076:	d103      	bne.n	8004080 <xQueueGenericSend+0x16c>
 8004078:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004080:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004082:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004086:	b25b      	sxtb	r3, r3
 8004088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800408c:	d103      	bne.n	8004096 <xQueueGenericSend+0x182>
 800408e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004090:	2200      	movs	r2, #0
 8004092:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004096:	f001 fef5 	bl	8005e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800409a:	1d3a      	adds	r2, r7, #4
 800409c:	f107 0314 	add.w	r3, r7, #20
 80040a0:	4611      	mov	r1, r2
 80040a2:	4618      	mov	r0, r3
 80040a4:	f001 f81e 	bl	80050e4 <xTaskCheckForTimeOut>
 80040a8:	4603      	mov	r3, r0
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d124      	bne.n	80040f8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80040ae:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040b0:	f000 faa2 	bl	80045f8 <prvIsQueueFull>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d018      	beq.n	80040ec <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80040ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80040bc:	3310      	adds	r3, #16
 80040be:	687a      	ldr	r2, [r7, #4]
 80040c0:	4611      	mov	r1, r2
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 ff44 	bl	8004f50 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80040c8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ca:	f000 fa2d 	bl	8004528 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80040ce:	f000 fd73 	bl	8004bb8 <xTaskResumeAll>
 80040d2:	4603      	mov	r3, r0
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	f47f af7c 	bne.w	8003fd2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80040da:	4b0c      	ldr	r3, [pc, #48]	; (800410c <xQueueGenericSend+0x1f8>)
 80040dc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80040e0:	601a      	str	r2, [r3, #0]
 80040e2:	f3bf 8f4f 	dsb	sy
 80040e6:	f3bf 8f6f 	isb	sy
 80040ea:	e772      	b.n	8003fd2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80040ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040ee:	f000 fa1b 	bl	8004528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80040f2:	f000 fd61 	bl	8004bb8 <xTaskResumeAll>
 80040f6:	e76c      	b.n	8003fd2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80040f8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80040fa:	f000 fa15 	bl	8004528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80040fe:	f000 fd5b 	bl	8004bb8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004102:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004104:	4618      	mov	r0, r3
 8004106:	3738      	adds	r7, #56	; 0x38
 8004108:	46bd      	mov	sp, r7
 800410a:	bd80      	pop	{r7, pc}
 800410c:	e000ed04 	.word	0xe000ed04

08004110 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b090      	sub	sp, #64	; 0x40
 8004114:	af00      	add	r7, sp, #0
 8004116:	60f8      	str	r0, [r7, #12]
 8004118:	60b9      	str	r1, [r7, #8]
 800411a:	607a      	str	r2, [r7, #4]
 800411c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8004122:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004124:	2b00      	cmp	r3, #0
 8004126:	d10a      	bne.n	800413e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8004128:	f04f 0350 	mov.w	r3, #80	; 0x50
 800412c:	f383 8811 	msr	BASEPRI, r3
 8004130:	f3bf 8f6f 	isb	sy
 8004134:	f3bf 8f4f 	dsb	sy
 8004138:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800413a:	bf00      	nop
 800413c:	e7fe      	b.n	800413c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800413e:	68bb      	ldr	r3, [r7, #8]
 8004140:	2b00      	cmp	r3, #0
 8004142:	d103      	bne.n	800414c <xQueueGenericSendFromISR+0x3c>
 8004144:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004146:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004148:	2b00      	cmp	r3, #0
 800414a:	d101      	bne.n	8004150 <xQueueGenericSendFromISR+0x40>
 800414c:	2301      	movs	r3, #1
 800414e:	e000      	b.n	8004152 <xQueueGenericSendFromISR+0x42>
 8004150:	2300      	movs	r3, #0
 8004152:	2b00      	cmp	r3, #0
 8004154:	d10a      	bne.n	800416c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8004156:	f04f 0350 	mov.w	r3, #80	; 0x50
 800415a:	f383 8811 	msr	BASEPRI, r3
 800415e:	f3bf 8f6f 	isb	sy
 8004162:	f3bf 8f4f 	dsb	sy
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
}
 8004168:	bf00      	nop
 800416a:	e7fe      	b.n	800416a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	2b02      	cmp	r3, #2
 8004170:	d103      	bne.n	800417a <xQueueGenericSendFromISR+0x6a>
 8004172:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004174:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004176:	2b01      	cmp	r3, #1
 8004178:	d101      	bne.n	800417e <xQueueGenericSendFromISR+0x6e>
 800417a:	2301      	movs	r3, #1
 800417c:	e000      	b.n	8004180 <xQueueGenericSendFromISR+0x70>
 800417e:	2300      	movs	r3, #0
 8004180:	2b00      	cmp	r3, #0
 8004182:	d10a      	bne.n	800419a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8004184:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004188:	f383 8811 	msr	BASEPRI, r3
 800418c:	f3bf 8f6f 	isb	sy
 8004190:	f3bf 8f4f 	dsb	sy
 8004194:	623b      	str	r3, [r7, #32]
}
 8004196:	bf00      	nop
 8004198:	e7fe      	b.n	8004198 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800419a:	f001 ff25 	bl	8005fe8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800419e:	f3ef 8211 	mrs	r2, BASEPRI
 80041a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80041a6:	f383 8811 	msr	BASEPRI, r3
 80041aa:	f3bf 8f6f 	isb	sy
 80041ae:	f3bf 8f4f 	dsb	sy
 80041b2:	61fa      	str	r2, [r7, #28]
 80041b4:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80041b6:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80041b8:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80041ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80041be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d302      	bcc.n	80041cc <xQueueGenericSendFromISR+0xbc>
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	2b02      	cmp	r3, #2
 80041ca:	d12f      	bne.n	800422c <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80041cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041ce:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80041d2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80041d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041da:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80041dc:	683a      	ldr	r2, [r7, #0]
 80041de:	68b9      	ldr	r1, [r7, #8]
 80041e0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80041e2:	f000 f911 	bl	8004408 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80041e6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80041ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80041ee:	d112      	bne.n	8004216 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80041f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d016      	beq.n	8004226 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80041f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80041fa:	3324      	adds	r3, #36	; 0x24
 80041fc:	4618      	mov	r0, r3
 80041fe:	f000 fef7 	bl	8004ff0 <xTaskRemoveFromEventList>
 8004202:	4603      	mov	r3, r0
 8004204:	2b00      	cmp	r3, #0
 8004206:	d00e      	beq.n	8004226 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d00b      	beq.n	8004226 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2201      	movs	r2, #1
 8004212:	601a      	str	r2, [r3, #0]
 8004214:	e007      	b.n	8004226 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004216:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800421a:	3301      	adds	r3, #1
 800421c:	b2db      	uxtb	r3, r3
 800421e:	b25a      	sxtb	r2, r3
 8004220:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004222:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8004226:	2301      	movs	r3, #1
 8004228:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800422a:	e001      	b.n	8004230 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800422c:	2300      	movs	r3, #0
 800422e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004232:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004234:	697b      	ldr	r3, [r7, #20]
 8004236:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800423a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800423c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 800423e:	4618      	mov	r0, r3
 8004240:	3740      	adds	r7, #64	; 0x40
 8004242:	46bd      	mov	sp, r7
 8004244:	bd80      	pop	{r7, pc}
	...

08004248 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004248:	b580      	push	{r7, lr}
 800424a:	b08c      	sub	sp, #48	; 0x30
 800424c:	af00      	add	r7, sp, #0
 800424e:	60f8      	str	r0, [r7, #12]
 8004250:	60b9      	str	r1, [r7, #8]
 8004252:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004254:	2300      	movs	r3, #0
 8004256:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800425c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800425e:	2b00      	cmp	r3, #0
 8004260:	d10a      	bne.n	8004278 <xQueueReceive+0x30>
	__asm volatile
 8004262:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004266:	f383 8811 	msr	BASEPRI, r3
 800426a:	f3bf 8f6f 	isb	sy
 800426e:	f3bf 8f4f 	dsb	sy
 8004272:	623b      	str	r3, [r7, #32]
}
 8004274:	bf00      	nop
 8004276:	e7fe      	b.n	8004276 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004278:	68bb      	ldr	r3, [r7, #8]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d103      	bne.n	8004286 <xQueueReceive+0x3e>
 800427e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	2b00      	cmp	r3, #0
 8004284:	d101      	bne.n	800428a <xQueueReceive+0x42>
 8004286:	2301      	movs	r3, #1
 8004288:	e000      	b.n	800428c <xQueueReceive+0x44>
 800428a:	2300      	movs	r3, #0
 800428c:	2b00      	cmp	r3, #0
 800428e:	d10a      	bne.n	80042a6 <xQueueReceive+0x5e>
	__asm volatile
 8004290:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004294:	f383 8811 	msr	BASEPRI, r3
 8004298:	f3bf 8f6f 	isb	sy
 800429c:	f3bf 8f4f 	dsb	sy
 80042a0:	61fb      	str	r3, [r7, #28]
}
 80042a2:	bf00      	nop
 80042a4:	e7fe      	b.n	80042a4 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80042a6:	f001 f865 	bl	8005374 <xTaskGetSchedulerState>
 80042aa:	4603      	mov	r3, r0
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d102      	bne.n	80042b6 <xQueueReceive+0x6e>
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d101      	bne.n	80042ba <xQueueReceive+0x72>
 80042b6:	2301      	movs	r3, #1
 80042b8:	e000      	b.n	80042bc <xQueueReceive+0x74>
 80042ba:	2300      	movs	r3, #0
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d10a      	bne.n	80042d6 <xQueueReceive+0x8e>
	__asm volatile
 80042c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80042c4:	f383 8811 	msr	BASEPRI, r3
 80042c8:	f3bf 8f6f 	isb	sy
 80042cc:	f3bf 8f4f 	dsb	sy
 80042d0:	61bb      	str	r3, [r7, #24]
}
 80042d2:	bf00      	nop
 80042d4:	e7fe      	b.n	80042d4 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80042d6:	f001 fda5 	bl	8005e24 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80042da:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042de:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80042e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d01f      	beq.n	8004326 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80042e6:	68b9      	ldr	r1, [r7, #8]
 80042e8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80042ea:	f000 f8f7 	bl	80044dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80042ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042f0:	1e5a      	subs	r2, r3, #1
 80042f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f4:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80042f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042f8:	691b      	ldr	r3, [r3, #16]
 80042fa:	2b00      	cmp	r3, #0
 80042fc:	d00f      	beq.n	800431e <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80042fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004300:	3310      	adds	r3, #16
 8004302:	4618      	mov	r0, r3
 8004304:	f000 fe74 	bl	8004ff0 <xTaskRemoveFromEventList>
 8004308:	4603      	mov	r3, r0
 800430a:	2b00      	cmp	r3, #0
 800430c:	d007      	beq.n	800431e <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800430e:	4b3d      	ldr	r3, [pc, #244]	; (8004404 <xQueueReceive+0x1bc>)
 8004310:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004314:	601a      	str	r2, [r3, #0]
 8004316:	f3bf 8f4f 	dsb	sy
 800431a:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800431e:	f001 fdb1 	bl	8005e84 <vPortExitCritical>
				return pdPASS;
 8004322:	2301      	movs	r3, #1
 8004324:	e069      	b.n	80043fa <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d103      	bne.n	8004334 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800432c:	f001 fdaa 	bl	8005e84 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004330:	2300      	movs	r3, #0
 8004332:	e062      	b.n	80043fa <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004334:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d106      	bne.n	8004348 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800433a:	f107 0310 	add.w	r3, r7, #16
 800433e:	4618      	mov	r0, r3
 8004340:	f000 feba 	bl	80050b8 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004344:	2301      	movs	r3, #1
 8004346:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004348:	f001 fd9c 	bl	8005e84 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800434c:	f000 fc26 	bl	8004b9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004350:	f001 fd68 	bl	8005e24 <vPortEnterCritical>
 8004354:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004356:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800435a:	b25b      	sxtb	r3, r3
 800435c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004360:	d103      	bne.n	800436a <xQueueReceive+0x122>
 8004362:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004364:	2200      	movs	r2, #0
 8004366:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800436c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004370:	b25b      	sxtb	r3, r3
 8004372:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004376:	d103      	bne.n	8004380 <xQueueReceive+0x138>
 8004378:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800437a:	2200      	movs	r2, #0
 800437c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004380:	f001 fd80 	bl	8005e84 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004384:	1d3a      	adds	r2, r7, #4
 8004386:	f107 0310 	add.w	r3, r7, #16
 800438a:	4611      	mov	r1, r2
 800438c:	4618      	mov	r0, r3
 800438e:	f000 fea9 	bl	80050e4 <xTaskCheckForTimeOut>
 8004392:	4603      	mov	r3, r0
 8004394:	2b00      	cmp	r3, #0
 8004396:	d123      	bne.n	80043e0 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004398:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800439a:	f000 f917 	bl	80045cc <prvIsQueueEmpty>
 800439e:	4603      	mov	r3, r0
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d017      	beq.n	80043d4 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80043a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80043a6:	3324      	adds	r3, #36	; 0x24
 80043a8:	687a      	ldr	r2, [r7, #4]
 80043aa:	4611      	mov	r1, r2
 80043ac:	4618      	mov	r0, r3
 80043ae:	f000 fdcf 	bl	8004f50 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80043b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043b4:	f000 f8b8 	bl	8004528 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80043b8:	f000 fbfe 	bl	8004bb8 <xTaskResumeAll>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d189      	bne.n	80042d6 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80043c2:	4b10      	ldr	r3, [pc, #64]	; (8004404 <xQueueReceive+0x1bc>)
 80043c4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043c8:	601a      	str	r2, [r3, #0]
 80043ca:	f3bf 8f4f 	dsb	sy
 80043ce:	f3bf 8f6f 	isb	sy
 80043d2:	e780      	b.n	80042d6 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80043d4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043d6:	f000 f8a7 	bl	8004528 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80043da:	f000 fbed 	bl	8004bb8 <xTaskResumeAll>
 80043de:	e77a      	b.n	80042d6 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80043e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043e2:	f000 f8a1 	bl	8004528 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80043e6:	f000 fbe7 	bl	8004bb8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80043ea:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80043ec:	f000 f8ee 	bl	80045cc <prvIsQueueEmpty>
 80043f0:	4603      	mov	r3, r0
 80043f2:	2b00      	cmp	r3, #0
 80043f4:	f43f af6f 	beq.w	80042d6 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80043f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	3730      	adds	r7, #48	; 0x30
 80043fe:	46bd      	mov	sp, r7
 8004400:	bd80      	pop	{r7, pc}
 8004402:	bf00      	nop
 8004404:	e000ed04 	.word	0xe000ed04

08004408 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b086      	sub	sp, #24
 800440c:	af00      	add	r7, sp, #0
 800440e:	60f8      	str	r0, [r7, #12]
 8004410:	60b9      	str	r1, [r7, #8]
 8004412:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004414:	2300      	movs	r3, #0
 8004416:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800441c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004422:	2b00      	cmp	r3, #0
 8004424:	d10d      	bne.n	8004442 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	2b00      	cmp	r3, #0
 800442c:	d14d      	bne.n	80044ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	4618      	mov	r0, r3
 8004434:	f000 ffbc 	bl	80053b0 <xTaskPriorityDisinherit>
 8004438:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	2200      	movs	r2, #0
 800443e:	609a      	str	r2, [r3, #8]
 8004440:	e043      	b.n	80044ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2b00      	cmp	r3, #0
 8004446:	d119      	bne.n	800447c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	6858      	ldr	r0, [r3, #4]
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004450:	461a      	mov	r2, r3
 8004452:	68b9      	ldr	r1, [r7, #8]
 8004454:	f002 f818 	bl	8006488 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004460:	441a      	add	r2, r3
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	685a      	ldr	r2, [r3, #4]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	689b      	ldr	r3, [r3, #8]
 800446e:	429a      	cmp	r2, r3
 8004470:	d32b      	bcc.n	80044ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	681a      	ldr	r2, [r3, #0]
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	605a      	str	r2, [r3, #4]
 800447a:	e026      	b.n	80044ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	68d8      	ldr	r0, [r3, #12]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004484:	461a      	mov	r2, r3
 8004486:	68b9      	ldr	r1, [r7, #8]
 8004488:	f001 fffe 	bl	8006488 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800448c:	68fb      	ldr	r3, [r7, #12]
 800448e:	68da      	ldr	r2, [r3, #12]
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004494:	425b      	negs	r3, r3
 8004496:	441a      	add	r2, r3
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	68da      	ldr	r2, [r3, #12]
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d207      	bcs.n	80044b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80044a8:	68fb      	ldr	r3, [r7, #12]
 80044aa:	689a      	ldr	r2, [r3, #8]
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044b0:	425b      	negs	r3, r3
 80044b2:	441a      	add	r2, r3
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b02      	cmp	r3, #2
 80044bc:	d105      	bne.n	80044ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d002      	beq.n	80044ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	3b01      	subs	r3, #1
 80044c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80044ca:	693b      	ldr	r3, [r7, #16]
 80044cc:	1c5a      	adds	r2, r3, #1
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80044d2:	697b      	ldr	r3, [r7, #20]
}
 80044d4:	4618      	mov	r0, r3
 80044d6:	3718      	adds	r7, #24
 80044d8:	46bd      	mov	sp, r7
 80044da:	bd80      	pop	{r7, pc}

080044dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b082      	sub	sp, #8
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
 80044e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d018      	beq.n	8004520 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	68da      	ldr	r2, [r3, #12]
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f6:	441a      	add	r2, r3
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	68da      	ldr	r2, [r3, #12]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	689b      	ldr	r3, [r3, #8]
 8004504:	429a      	cmp	r2, r3
 8004506:	d303      	bcc.n	8004510 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	68d9      	ldr	r1, [r3, #12]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004518:	461a      	mov	r2, r3
 800451a:	6838      	ldr	r0, [r7, #0]
 800451c:	f001 ffb4 	bl	8006488 <memcpy>
	}
}
 8004520:	bf00      	nop
 8004522:	3708      	adds	r7, #8
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}

08004528 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004528:	b580      	push	{r7, lr}
 800452a:	b084      	sub	sp, #16
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004530:	f001 fc78 	bl	8005e24 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800453a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800453c:	e011      	b.n	8004562 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004542:	2b00      	cmp	r3, #0
 8004544:	d012      	beq.n	800456c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	3324      	adds	r3, #36	; 0x24
 800454a:	4618      	mov	r0, r3
 800454c:	f000 fd50 	bl	8004ff0 <xTaskRemoveFromEventList>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d001      	beq.n	800455a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004556:	f000 fe27 	bl	80051a8 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800455a:	7bfb      	ldrb	r3, [r7, #15]
 800455c:	3b01      	subs	r3, #1
 800455e:	b2db      	uxtb	r3, r3
 8004560:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004562:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004566:	2b00      	cmp	r3, #0
 8004568:	dce9      	bgt.n	800453e <prvUnlockQueue+0x16>
 800456a:	e000      	b.n	800456e <prvUnlockQueue+0x46>
					break;
 800456c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	22ff      	movs	r2, #255	; 0xff
 8004572:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8004576:	f001 fc85 	bl	8005e84 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800457a:	f001 fc53 	bl	8005e24 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004584:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004586:	e011      	b.n	80045ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	691b      	ldr	r3, [r3, #16]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d012      	beq.n	80045b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	3310      	adds	r3, #16
 8004594:	4618      	mov	r0, r3
 8004596:	f000 fd2b 	bl	8004ff0 <xTaskRemoveFromEventList>
 800459a:	4603      	mov	r3, r0
 800459c:	2b00      	cmp	r3, #0
 800459e:	d001      	beq.n	80045a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80045a0:	f000 fe02 	bl	80051a8 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80045a4:	7bbb      	ldrb	r3, [r7, #14]
 80045a6:	3b01      	subs	r3, #1
 80045a8:	b2db      	uxtb	r3, r3
 80045aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80045ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	dce9      	bgt.n	8004588 <prvUnlockQueue+0x60>
 80045b4:	e000      	b.n	80045b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80045b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	22ff      	movs	r2, #255	; 0xff
 80045bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80045c0:	f001 fc60 	bl	8005e84 <vPortExitCritical>
}
 80045c4:	bf00      	nop
 80045c6:	3710      	adds	r7, #16
 80045c8:	46bd      	mov	sp, r7
 80045ca:	bd80      	pop	{r7, pc}

080045cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b084      	sub	sp, #16
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80045d4:	f001 fc26 	bl	8005e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d102      	bne.n	80045e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80045e0:	2301      	movs	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e001      	b.n	80045ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80045e6:	2300      	movs	r3, #0
 80045e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80045ea:	f001 fc4b 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 80045ee:	68fb      	ldr	r3, [r7, #12]
}
 80045f0:	4618      	mov	r0, r3
 80045f2:	3710      	adds	r7, #16
 80045f4:	46bd      	mov	sp, r7
 80045f6:	bd80      	pop	{r7, pc}

080045f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b084      	sub	sp, #16
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004600:	f001 fc10 	bl	8005e24 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800460c:	429a      	cmp	r2, r3
 800460e:	d102      	bne.n	8004616 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004610:	2301      	movs	r3, #1
 8004612:	60fb      	str	r3, [r7, #12]
 8004614:	e001      	b.n	800461a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004616:	2300      	movs	r3, #0
 8004618:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800461a:	f001 fc33 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 800461e:	68fb      	ldr	r3, [r7, #12]
}
 8004620:	4618      	mov	r0, r3
 8004622:	3710      	adds	r7, #16
 8004624:	46bd      	mov	sp, r7
 8004626:	bd80      	pop	{r7, pc}

08004628 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004628:	b480      	push	{r7}
 800462a:	b085      	sub	sp, #20
 800462c:	af00      	add	r7, sp, #0
 800462e:	6078      	str	r0, [r7, #4]
 8004630:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004632:	2300      	movs	r3, #0
 8004634:	60fb      	str	r3, [r7, #12]
 8004636:	e014      	b.n	8004662 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004638:	4a0f      	ldr	r2, [pc, #60]	; (8004678 <vQueueAddToRegistry+0x50>)
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004640:	2b00      	cmp	r3, #0
 8004642:	d10b      	bne.n	800465c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004644:	490c      	ldr	r1, [pc, #48]	; (8004678 <vQueueAddToRegistry+0x50>)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	683a      	ldr	r2, [r7, #0]
 800464a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800464e:	4a0a      	ldr	r2, [pc, #40]	; (8004678 <vQueueAddToRegistry+0x50>)
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	00db      	lsls	r3, r3, #3
 8004654:	4413      	add	r3, r2
 8004656:	687a      	ldr	r2, [r7, #4]
 8004658:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800465a:	e006      	b.n	800466a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	2b07      	cmp	r3, #7
 8004666:	d9e7      	bls.n	8004638 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004668:	bf00      	nop
 800466a:	bf00      	nop
 800466c:	3714      	adds	r7, #20
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	200008ec 	.word	0x200008ec

0800467c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800467c:	b580      	push	{r7, lr}
 800467e:	b086      	sub	sp, #24
 8004680:	af00      	add	r7, sp, #0
 8004682:	60f8      	str	r0, [r7, #12]
 8004684:	60b9      	str	r1, [r7, #8]
 8004686:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800468c:	f001 fbca 	bl	8005e24 <vPortEnterCritical>
 8004690:	697b      	ldr	r3, [r7, #20]
 8004692:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004696:	b25b      	sxtb	r3, r3
 8004698:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800469c:	d103      	bne.n	80046a6 <vQueueWaitForMessageRestricted+0x2a>
 800469e:	697b      	ldr	r3, [r7, #20]
 80046a0:	2200      	movs	r2, #0
 80046a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80046a6:	697b      	ldr	r3, [r7, #20]
 80046a8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80046ac:	b25b      	sxtb	r3, r3
 80046ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046b2:	d103      	bne.n	80046bc <vQueueWaitForMessageRestricted+0x40>
 80046b4:	697b      	ldr	r3, [r7, #20]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80046bc:	f001 fbe2 	bl	8005e84 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80046c0:	697b      	ldr	r3, [r7, #20]
 80046c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046c4:	2b00      	cmp	r3, #0
 80046c6:	d106      	bne.n	80046d6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80046c8:	697b      	ldr	r3, [r7, #20]
 80046ca:	3324      	adds	r3, #36	; 0x24
 80046cc:	687a      	ldr	r2, [r7, #4]
 80046ce:	68b9      	ldr	r1, [r7, #8]
 80046d0:	4618      	mov	r0, r3
 80046d2:	f000 fc61 	bl	8004f98 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80046d6:	6978      	ldr	r0, [r7, #20]
 80046d8:	f7ff ff26 	bl	8004528 <prvUnlockQueue>
	}
 80046dc:	bf00      	nop
 80046de:	3718      	adds	r7, #24
 80046e0:	46bd      	mov	sp, r7
 80046e2:	bd80      	pop	{r7, pc}

080046e4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80046e4:	b580      	push	{r7, lr}
 80046e6:	b08e      	sub	sp, #56	; 0x38
 80046e8:	af04      	add	r7, sp, #16
 80046ea:	60f8      	str	r0, [r7, #12]
 80046ec:	60b9      	str	r1, [r7, #8]
 80046ee:	607a      	str	r2, [r7, #4]
 80046f0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80046f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10a      	bne.n	800470e <xTaskCreateStatic+0x2a>
	__asm volatile
 80046f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80046fc:	f383 8811 	msr	BASEPRI, r3
 8004700:	f3bf 8f6f 	isb	sy
 8004704:	f3bf 8f4f 	dsb	sy
 8004708:	623b      	str	r3, [r7, #32]
}
 800470a:	bf00      	nop
 800470c:	e7fe      	b.n	800470c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800470e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004710:	2b00      	cmp	r3, #0
 8004712:	d10a      	bne.n	800472a <xTaskCreateStatic+0x46>
	__asm volatile
 8004714:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004718:	f383 8811 	msr	BASEPRI, r3
 800471c:	f3bf 8f6f 	isb	sy
 8004720:	f3bf 8f4f 	dsb	sy
 8004724:	61fb      	str	r3, [r7, #28]
}
 8004726:	bf00      	nop
 8004728:	e7fe      	b.n	8004728 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800472a:	23bc      	movs	r3, #188	; 0xbc
 800472c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	2bbc      	cmp	r3, #188	; 0xbc
 8004732:	d00a      	beq.n	800474a <xTaskCreateStatic+0x66>
	__asm volatile
 8004734:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004738:	f383 8811 	msr	BASEPRI, r3
 800473c:	f3bf 8f6f 	isb	sy
 8004740:	f3bf 8f4f 	dsb	sy
 8004744:	61bb      	str	r3, [r7, #24]
}
 8004746:	bf00      	nop
 8004748:	e7fe      	b.n	8004748 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800474a:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800474c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800474e:	2b00      	cmp	r3, #0
 8004750:	d01e      	beq.n	8004790 <xTaskCreateStatic+0xac>
 8004752:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004754:	2b00      	cmp	r3, #0
 8004756:	d01b      	beq.n	8004790 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004758:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800475a:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004760:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004762:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004764:	2202      	movs	r2, #2
 8004766:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800476a:	2300      	movs	r3, #0
 800476c:	9303      	str	r3, [sp, #12]
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	9302      	str	r3, [sp, #8]
 8004772:	f107 0314 	add.w	r3, r7, #20
 8004776:	9301      	str	r3, [sp, #4]
 8004778:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800477a:	9300      	str	r3, [sp, #0]
 800477c:	683b      	ldr	r3, [r7, #0]
 800477e:	687a      	ldr	r2, [r7, #4]
 8004780:	68b9      	ldr	r1, [r7, #8]
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f850 	bl	8004828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8004788:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800478a:	f000 f8f3 	bl	8004974 <prvAddNewTaskToReadyList>
 800478e:	e001      	b.n	8004794 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8004790:	2300      	movs	r3, #0
 8004792:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004794:	697b      	ldr	r3, [r7, #20]
	}
 8004796:	4618      	mov	r0, r3
 8004798:	3728      	adds	r7, #40	; 0x28
 800479a:	46bd      	mov	sp, r7
 800479c:	bd80      	pop	{r7, pc}

0800479e <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800479e:	b580      	push	{r7, lr}
 80047a0:	b08c      	sub	sp, #48	; 0x30
 80047a2:	af04      	add	r7, sp, #16
 80047a4:	60f8      	str	r0, [r7, #12]
 80047a6:	60b9      	str	r1, [r7, #8]
 80047a8:	603b      	str	r3, [r7, #0]
 80047aa:	4613      	mov	r3, r2
 80047ac:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80047ae:	88fb      	ldrh	r3, [r7, #6]
 80047b0:	009b      	lsls	r3, r3, #2
 80047b2:	4618      	mov	r0, r3
 80047b4:	f001 fc58 	bl	8006068 <pvPortMalloc>
 80047b8:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80047ba:	697b      	ldr	r3, [r7, #20]
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d00e      	beq.n	80047de <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80047c0:	20bc      	movs	r0, #188	; 0xbc
 80047c2:	f001 fc51 	bl	8006068 <pvPortMalloc>
 80047c6:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80047c8:	69fb      	ldr	r3, [r7, #28]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d003      	beq.n	80047d6 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80047ce:	69fb      	ldr	r3, [r7, #28]
 80047d0:	697a      	ldr	r2, [r7, #20]
 80047d2:	631a      	str	r2, [r3, #48]	; 0x30
 80047d4:	e005      	b.n	80047e2 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80047d6:	6978      	ldr	r0, [r7, #20]
 80047d8:	f001 fd12 	bl	8006200 <vPortFree>
 80047dc:	e001      	b.n	80047e2 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80047de:	2300      	movs	r3, #0
 80047e0:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d017      	beq.n	8004818 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80047e8:	69fb      	ldr	r3, [r7, #28]
 80047ea:	2200      	movs	r2, #0
 80047ec:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80047f0:	88fa      	ldrh	r2, [r7, #6]
 80047f2:	2300      	movs	r3, #0
 80047f4:	9303      	str	r3, [sp, #12]
 80047f6:	69fb      	ldr	r3, [r7, #28]
 80047f8:	9302      	str	r3, [sp, #8]
 80047fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80047fc:	9301      	str	r3, [sp, #4]
 80047fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004800:	9300      	str	r3, [sp, #0]
 8004802:	683b      	ldr	r3, [r7, #0]
 8004804:	68b9      	ldr	r1, [r7, #8]
 8004806:	68f8      	ldr	r0, [r7, #12]
 8004808:	f000 f80e 	bl	8004828 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800480c:	69f8      	ldr	r0, [r7, #28]
 800480e:	f000 f8b1 	bl	8004974 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8004812:	2301      	movs	r3, #1
 8004814:	61bb      	str	r3, [r7, #24]
 8004816:	e002      	b.n	800481e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8004818:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800481c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800481e:	69bb      	ldr	r3, [r7, #24]
	}
 8004820:	4618      	mov	r0, r3
 8004822:	3720      	adds	r7, #32
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}

08004828 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8004828:	b580      	push	{r7, lr}
 800482a:	b088      	sub	sp, #32
 800482c:	af00      	add	r7, sp, #0
 800482e:	60f8      	str	r0, [r7, #12]
 8004830:	60b9      	str	r1, [r7, #8]
 8004832:	607a      	str	r2, [r7, #4]
 8004834:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8004836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004838:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	009b      	lsls	r3, r3, #2
 800483e:	461a      	mov	r2, r3
 8004840:	21a5      	movs	r1, #165	; 0xa5
 8004842:	f001 fe2f 	bl	80064a4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8004846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004848:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004850:	3b01      	subs	r3, #1
 8004852:	009b      	lsls	r3, r3, #2
 8004854:	4413      	add	r3, r2
 8004856:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8004858:	69bb      	ldr	r3, [r7, #24]
 800485a:	f023 0307 	bic.w	r3, r3, #7
 800485e:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004860:	69bb      	ldr	r3, [r7, #24]
 8004862:	f003 0307 	and.w	r3, r3, #7
 8004866:	2b00      	cmp	r3, #0
 8004868:	d00a      	beq.n	8004880 <prvInitialiseNewTask+0x58>
	__asm volatile
 800486a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800486e:	f383 8811 	msr	BASEPRI, r3
 8004872:	f3bf 8f6f 	isb	sy
 8004876:	f3bf 8f4f 	dsb	sy
 800487a:	617b      	str	r3, [r7, #20]
}
 800487c:	bf00      	nop
 800487e:	e7fe      	b.n	800487e <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004880:	68bb      	ldr	r3, [r7, #8]
 8004882:	2b00      	cmp	r3, #0
 8004884:	d01f      	beq.n	80048c6 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004886:	2300      	movs	r3, #0
 8004888:	61fb      	str	r3, [r7, #28]
 800488a:	e012      	b.n	80048b2 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800488c:	68ba      	ldr	r2, [r7, #8]
 800488e:	69fb      	ldr	r3, [r7, #28]
 8004890:	4413      	add	r3, r2
 8004892:	7819      	ldrb	r1, [r3, #0]
 8004894:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	4413      	add	r3, r2
 800489a:	3334      	adds	r3, #52	; 0x34
 800489c:	460a      	mov	r2, r1
 800489e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	69fb      	ldr	r3, [r7, #28]
 80048a4:	4413      	add	r3, r2
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d006      	beq.n	80048ba <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	3301      	adds	r3, #1
 80048b0:	61fb      	str	r3, [r7, #28]
 80048b2:	69fb      	ldr	r3, [r7, #28]
 80048b4:	2b0f      	cmp	r3, #15
 80048b6:	d9e9      	bls.n	800488c <prvInitialiseNewTask+0x64>
 80048b8:	e000      	b.n	80048bc <prvInitialiseNewTask+0x94>
			{
				break;
 80048ba:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80048bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048c4:	e003      	b.n	80048ce <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80048c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048c8:	2200      	movs	r2, #0
 80048ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80048ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80048d0:	2b37      	cmp	r3, #55	; 0x37
 80048d2:	d901      	bls.n	80048d8 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80048d4:	2337      	movs	r3, #55	; 0x37
 80048d6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80048d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048da:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048dc:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80048de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80048e2:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80048e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048e6:	2200      	movs	r2, #0
 80048e8:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80048ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048ec:	3304      	adds	r3, #4
 80048ee:	4618      	mov	r0, r3
 80048f0:	f7ff f978 	bl	8003be4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80048f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80048f6:	3318      	adds	r3, #24
 80048f8:	4618      	mov	r0, r3
 80048fa:	f7ff f973 	bl	8003be4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80048fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004900:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004902:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004904:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004906:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800490a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800490c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800490e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004910:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004912:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8004914:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004916:	2200      	movs	r2, #0
 8004918:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800491c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800491e:	2200      	movs	r2, #0
 8004920:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8004924:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004926:	3354      	adds	r3, #84	; 0x54
 8004928:	2260      	movs	r2, #96	; 0x60
 800492a:	2100      	movs	r1, #0
 800492c:	4618      	mov	r0, r3
 800492e:	f001 fdb9 	bl	80064a4 <memset>
 8004932:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004934:	4a0c      	ldr	r2, [pc, #48]	; (8004968 <prvInitialiseNewTask+0x140>)
 8004936:	659a      	str	r2, [r3, #88]	; 0x58
 8004938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800493a:	4a0c      	ldr	r2, [pc, #48]	; (800496c <prvInitialiseNewTask+0x144>)
 800493c:	65da      	str	r2, [r3, #92]	; 0x5c
 800493e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004940:	4a0b      	ldr	r2, [pc, #44]	; (8004970 <prvInitialiseNewTask+0x148>)
 8004942:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	68f9      	ldr	r1, [r7, #12]
 8004948:	69b8      	ldr	r0, [r7, #24]
 800494a:	f001 f941 	bl	8005bd0 <pxPortInitialiseStack>
 800494e:	4602      	mov	r2, r0
 8004950:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004952:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004956:	2b00      	cmp	r3, #0
 8004958:	d002      	beq.n	8004960 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800495a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800495c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800495e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004960:	bf00      	nop
 8004962:	3720      	adds	r7, #32
 8004964:	46bd      	mov	sp, r7
 8004966:	bd80      	pop	{r7, pc}
 8004968:	0800676c 	.word	0x0800676c
 800496c:	0800678c 	.word	0x0800678c
 8004970:	0800674c 	.word	0x0800674c

08004974 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b082      	sub	sp, #8
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800497c:	f001 fa52 	bl	8005e24 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004980:	4b2d      	ldr	r3, [pc, #180]	; (8004a38 <prvAddNewTaskToReadyList+0xc4>)
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	3301      	adds	r3, #1
 8004986:	4a2c      	ldr	r2, [pc, #176]	; (8004a38 <prvAddNewTaskToReadyList+0xc4>)
 8004988:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800498a:	4b2c      	ldr	r3, [pc, #176]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d109      	bne.n	80049a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004992:	4a2a      	ldr	r2, [pc, #168]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8004998:	4b27      	ldr	r3, [pc, #156]	; (8004a38 <prvAddNewTaskToReadyList+0xc4>)
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	2b01      	cmp	r3, #1
 800499e:	d110      	bne.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80049a0:	f000 fc26 	bl	80051f0 <prvInitialiseTaskLists>
 80049a4:	e00d      	b.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80049a6:	4b26      	ldr	r3, [pc, #152]	; (8004a40 <prvAddNewTaskToReadyList+0xcc>)
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d109      	bne.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80049ae:	4b23      	ldr	r3, [pc, #140]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 80049b0:	681b      	ldr	r3, [r3, #0]
 80049b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049b8:	429a      	cmp	r2, r3
 80049ba:	d802      	bhi.n	80049c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80049bc:	4a1f      	ldr	r2, [pc, #124]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80049c2:	4b20      	ldr	r3, [pc, #128]	; (8004a44 <prvAddNewTaskToReadyList+0xd0>)
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	3301      	adds	r3, #1
 80049c8:	4a1e      	ldr	r2, [pc, #120]	; (8004a44 <prvAddNewTaskToReadyList+0xd0>)
 80049ca:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80049cc:	4b1d      	ldr	r3, [pc, #116]	; (8004a44 <prvAddNewTaskToReadyList+0xd0>)
 80049ce:	681a      	ldr	r2, [r3, #0]
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049d8:	4b1b      	ldr	r3, [pc, #108]	; (8004a48 <prvAddNewTaskToReadyList+0xd4>)
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	429a      	cmp	r2, r3
 80049de:	d903      	bls.n	80049e8 <prvAddNewTaskToReadyList+0x74>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80049e4:	4a18      	ldr	r2, [pc, #96]	; (8004a48 <prvAddNewTaskToReadyList+0xd4>)
 80049e6:	6013      	str	r3, [r2, #0]
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049ec:	4613      	mov	r3, r2
 80049ee:	009b      	lsls	r3, r3, #2
 80049f0:	4413      	add	r3, r2
 80049f2:	009b      	lsls	r3, r3, #2
 80049f4:	4a15      	ldr	r2, [pc, #84]	; (8004a4c <prvAddNewTaskToReadyList+0xd8>)
 80049f6:	441a      	add	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	3304      	adds	r3, #4
 80049fc:	4619      	mov	r1, r3
 80049fe:	4610      	mov	r0, r2
 8004a00:	f7ff f8fd 	bl	8003bfe <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8004a04:	f001 fa3e 	bl	8005e84 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8004a08:	4b0d      	ldr	r3, [pc, #52]	; (8004a40 <prvAddNewTaskToReadyList+0xcc>)
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	2b00      	cmp	r3, #0
 8004a0e:	d00e      	beq.n	8004a2e <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8004a10:	4b0a      	ldr	r3, [pc, #40]	; (8004a3c <prvAddNewTaskToReadyList+0xc8>)
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004a1a:	429a      	cmp	r2, r3
 8004a1c:	d207      	bcs.n	8004a2e <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8004a1e:	4b0c      	ldr	r3, [pc, #48]	; (8004a50 <prvAddNewTaskToReadyList+0xdc>)
 8004a20:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004a24:	601a      	str	r2, [r3, #0]
 8004a26:	f3bf 8f4f 	dsb	sy
 8004a2a:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004a2e:	bf00      	nop
 8004a30:	3708      	adds	r7, #8
 8004a32:	46bd      	mov	sp, r7
 8004a34:	bd80      	pop	{r7, pc}
 8004a36:	bf00      	nop
 8004a38:	20000e00 	.word	0x20000e00
 8004a3c:	2000092c 	.word	0x2000092c
 8004a40:	20000e0c 	.word	0x20000e0c
 8004a44:	20000e1c 	.word	0x20000e1c
 8004a48:	20000e08 	.word	0x20000e08
 8004a4c:	20000930 	.word	0x20000930
 8004a50:	e000ed04 	.word	0xe000ed04

08004a54 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8004a54:	b580      	push	{r7, lr}
 8004a56:	b084      	sub	sp, #16
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d017      	beq.n	8004a96 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8004a66:	4b13      	ldr	r3, [pc, #76]	; (8004ab4 <vTaskDelay+0x60>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d00a      	beq.n	8004a84 <vTaskDelay+0x30>
	__asm volatile
 8004a6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004a72:	f383 8811 	msr	BASEPRI, r3
 8004a76:	f3bf 8f6f 	isb	sy
 8004a7a:	f3bf 8f4f 	dsb	sy
 8004a7e:	60bb      	str	r3, [r7, #8]
}
 8004a80:	bf00      	nop
 8004a82:	e7fe      	b.n	8004a82 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8004a84:	f000 f88a 	bl	8004b9c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8004a88:	2100      	movs	r1, #0
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 fcfe 	bl	800548c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004a90:	f000 f892 	bl	8004bb8 <xTaskResumeAll>
 8004a94:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2b00      	cmp	r3, #0
 8004a9a:	d107      	bne.n	8004aac <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8004a9c:	4b06      	ldr	r3, [pc, #24]	; (8004ab8 <vTaskDelay+0x64>)
 8004a9e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004aa2:	601a      	str	r2, [r3, #0]
 8004aa4:	f3bf 8f4f 	dsb	sy
 8004aa8:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004aac:	bf00      	nop
 8004aae:	3710      	adds	r7, #16
 8004ab0:	46bd      	mov	sp, r7
 8004ab2:	bd80      	pop	{r7, pc}
 8004ab4:	20000e28 	.word	0x20000e28
 8004ab8:	e000ed04 	.word	0xe000ed04

08004abc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004abc:	b580      	push	{r7, lr}
 8004abe:	b08a      	sub	sp, #40	; 0x28
 8004ac0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004aca:	463a      	mov	r2, r7
 8004acc:	1d39      	adds	r1, r7, #4
 8004ace:	f107 0308 	add.w	r3, r7, #8
 8004ad2:	4618      	mov	r0, r3
 8004ad4:	f7ff f832 	bl	8003b3c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004ad8:	6839      	ldr	r1, [r7, #0]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	68ba      	ldr	r2, [r7, #8]
 8004ade:	9202      	str	r2, [sp, #8]
 8004ae0:	9301      	str	r3, [sp, #4]
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	9300      	str	r3, [sp, #0]
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	460a      	mov	r2, r1
 8004aea:	4924      	ldr	r1, [pc, #144]	; (8004b7c <vTaskStartScheduler+0xc0>)
 8004aec:	4824      	ldr	r0, [pc, #144]	; (8004b80 <vTaskStartScheduler+0xc4>)
 8004aee:	f7ff fdf9 	bl	80046e4 <xTaskCreateStatic>
 8004af2:	4603      	mov	r3, r0
 8004af4:	4a23      	ldr	r2, [pc, #140]	; (8004b84 <vTaskStartScheduler+0xc8>)
 8004af6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004af8:	4b22      	ldr	r3, [pc, #136]	; (8004b84 <vTaskStartScheduler+0xc8>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d002      	beq.n	8004b06 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004b00:	2301      	movs	r3, #1
 8004b02:	617b      	str	r3, [r7, #20]
 8004b04:	e001      	b.n	8004b0a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8004b06:	2300      	movs	r3, #0
 8004b08:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	2b01      	cmp	r3, #1
 8004b0e:	d102      	bne.n	8004b16 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8004b10:	f000 fd10 	bl	8005534 <xTimerCreateTimerTask>
 8004b14:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d11b      	bne.n	8004b54 <vTaskStartScheduler+0x98>
	__asm volatile
 8004b1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b20:	f383 8811 	msr	BASEPRI, r3
 8004b24:	f3bf 8f6f 	isb	sy
 8004b28:	f3bf 8f4f 	dsb	sy
 8004b2c:	613b      	str	r3, [r7, #16]
}
 8004b2e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004b30:	4b15      	ldr	r3, [pc, #84]	; (8004b88 <vTaskStartScheduler+0xcc>)
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	3354      	adds	r3, #84	; 0x54
 8004b36:	4a15      	ldr	r2, [pc, #84]	; (8004b8c <vTaskStartScheduler+0xd0>)
 8004b38:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8004b3a:	4b15      	ldr	r3, [pc, #84]	; (8004b90 <vTaskStartScheduler+0xd4>)
 8004b3c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004b40:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8004b42:	4b14      	ldr	r3, [pc, #80]	; (8004b94 <vTaskStartScheduler+0xd8>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8004b48:	4b13      	ldr	r3, [pc, #76]	; (8004b98 <vTaskStartScheduler+0xdc>)
 8004b4a:	2200      	movs	r2, #0
 8004b4c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8004b4e:	f001 f8c7 	bl	8005ce0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8004b52:	e00e      	b.n	8004b72 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8004b54:	697b      	ldr	r3, [r7, #20]
 8004b56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b5a:	d10a      	bne.n	8004b72 <vTaskStartScheduler+0xb6>
	__asm volatile
 8004b5c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004b60:	f383 8811 	msr	BASEPRI, r3
 8004b64:	f3bf 8f6f 	isb	sy
 8004b68:	f3bf 8f4f 	dsb	sy
 8004b6c:	60fb      	str	r3, [r7, #12]
}
 8004b6e:	bf00      	nop
 8004b70:	e7fe      	b.n	8004b70 <vTaskStartScheduler+0xb4>
}
 8004b72:	bf00      	nop
 8004b74:	3718      	adds	r7, #24
 8004b76:	46bd      	mov	sp, r7
 8004b78:	bd80      	pop	{r7, pc}
 8004b7a:	bf00      	nop
 8004b7c:	08006680 	.word	0x08006680
 8004b80:	080051c1 	.word	0x080051c1
 8004b84:	20000e24 	.word	0x20000e24
 8004b88:	2000092c 	.word	0x2000092c
 8004b8c:	20000010 	.word	0x20000010
 8004b90:	20000e20 	.word	0x20000e20
 8004b94:	20000e0c 	.word	0x20000e0c
 8004b98:	20000e04 	.word	0x20000e04

08004b9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004b9c:	b480      	push	{r7}
 8004b9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8004ba0:	4b04      	ldr	r3, [pc, #16]	; (8004bb4 <vTaskSuspendAll+0x18>)
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	3301      	adds	r3, #1
 8004ba6:	4a03      	ldr	r2, [pc, #12]	; (8004bb4 <vTaskSuspendAll+0x18>)
 8004ba8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8004baa:	bf00      	nop
 8004bac:	46bd      	mov	sp, r7
 8004bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb2:	4770      	bx	lr
 8004bb4:	20000e28 	.word	0x20000e28

08004bb8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8004bb8:	b580      	push	{r7, lr}
 8004bba:	b084      	sub	sp, #16
 8004bbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8004bc6:	4b42      	ldr	r3, [pc, #264]	; (8004cd0 <xTaskResumeAll+0x118>)
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <xTaskResumeAll+0x2c>
	__asm volatile
 8004bce:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004bd2:	f383 8811 	msr	BASEPRI, r3
 8004bd6:	f3bf 8f6f 	isb	sy
 8004bda:	f3bf 8f4f 	dsb	sy
 8004bde:	603b      	str	r3, [r7, #0]
}
 8004be0:	bf00      	nop
 8004be2:	e7fe      	b.n	8004be2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004be4:	f001 f91e 	bl	8005e24 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8004be8:	4b39      	ldr	r3, [pc, #228]	; (8004cd0 <xTaskResumeAll+0x118>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	3b01      	subs	r3, #1
 8004bee:	4a38      	ldr	r2, [pc, #224]	; (8004cd0 <xTaskResumeAll+0x118>)
 8004bf0:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004bf2:	4b37      	ldr	r3, [pc, #220]	; (8004cd0 <xTaskResumeAll+0x118>)
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d162      	bne.n	8004cc0 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8004bfa:	4b36      	ldr	r3, [pc, #216]	; (8004cd4 <xTaskResumeAll+0x11c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d05e      	beq.n	8004cc0 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c02:	e02f      	b.n	8004c64 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c04:	4b34      	ldr	r3, [pc, #208]	; (8004cd8 <xTaskResumeAll+0x120>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	68db      	ldr	r3, [r3, #12]
 8004c0a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	3318      	adds	r3, #24
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7ff f851 	bl	8003cb8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	3304      	adds	r3, #4
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f7ff f84c 	bl	8003cb8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c24:	4b2d      	ldr	r3, [pc, #180]	; (8004cdc <xTaskResumeAll+0x124>)
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d903      	bls.n	8004c34 <xTaskResumeAll+0x7c>
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c30:	4a2a      	ldr	r2, [pc, #168]	; (8004cdc <xTaskResumeAll+0x124>)
 8004c32:	6013      	str	r3, [r2, #0]
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c38:	4613      	mov	r3, r2
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	4413      	add	r3, r2
 8004c3e:	009b      	lsls	r3, r3, #2
 8004c40:	4a27      	ldr	r2, [pc, #156]	; (8004ce0 <xTaskResumeAll+0x128>)
 8004c42:	441a      	add	r2, r3
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	3304      	adds	r3, #4
 8004c48:	4619      	mov	r1, r3
 8004c4a:	4610      	mov	r0, r2
 8004c4c:	f7fe ffd7 	bl	8003bfe <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004c50:	68fb      	ldr	r3, [r7, #12]
 8004c52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c54:	4b23      	ldr	r3, [pc, #140]	; (8004ce4 <xTaskResumeAll+0x12c>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c5a:	429a      	cmp	r2, r3
 8004c5c:	d302      	bcc.n	8004c64 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8004c5e:	4b22      	ldr	r3, [pc, #136]	; (8004ce8 <xTaskResumeAll+0x130>)
 8004c60:	2201      	movs	r2, #1
 8004c62:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004c64:	4b1c      	ldr	r3, [pc, #112]	; (8004cd8 <xTaskResumeAll+0x120>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d1cb      	bne.n	8004c04 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d001      	beq.n	8004c76 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8004c72:	f000 fb5f 	bl	8005334 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8004c76:	4b1d      	ldr	r3, [pc, #116]	; (8004cec <xTaskResumeAll+0x134>)
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d010      	beq.n	8004ca4 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8004c82:	f000 f847 	bl	8004d14 <xTaskIncrementTick>
 8004c86:	4603      	mov	r3, r0
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d002      	beq.n	8004c92 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8004c8c:	4b16      	ldr	r3, [pc, #88]	; (8004ce8 <xTaskResumeAll+0x130>)
 8004c8e:	2201      	movs	r2, #1
 8004c90:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	3b01      	subs	r3, #1
 8004c96:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f1      	bne.n	8004c82 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8004c9e:	4b13      	ldr	r3, [pc, #76]	; (8004cec <xTaskResumeAll+0x134>)
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004ca4:	4b10      	ldr	r3, [pc, #64]	; (8004ce8 <xTaskResumeAll+0x130>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d009      	beq.n	8004cc0 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8004cac:	2301      	movs	r3, #1
 8004cae:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004cb0:	4b0f      	ldr	r3, [pc, #60]	; (8004cf0 <xTaskResumeAll+0x138>)
 8004cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004cb6:	601a      	str	r2, [r3, #0]
 8004cb8:	f3bf 8f4f 	dsb	sy
 8004cbc:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004cc0:	f001 f8e0 	bl	8005e84 <vPortExitCritical>

	return xAlreadyYielded;
 8004cc4:	68bb      	ldr	r3, [r7, #8]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3710      	adds	r7, #16
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
 8004cce:	bf00      	nop
 8004cd0:	20000e28 	.word	0x20000e28
 8004cd4:	20000e00 	.word	0x20000e00
 8004cd8:	20000dc0 	.word	0x20000dc0
 8004cdc:	20000e08 	.word	0x20000e08
 8004ce0:	20000930 	.word	0x20000930
 8004ce4:	2000092c 	.word	0x2000092c
 8004ce8:	20000e14 	.word	0x20000e14
 8004cec:	20000e10 	.word	0x20000e10
 8004cf0:	e000ed04 	.word	0xe000ed04

08004cf4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b083      	sub	sp, #12
 8004cf8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8004cfa:	4b05      	ldr	r3, [pc, #20]	; (8004d10 <xTaskGetTickCount+0x1c>)
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8004d00:	687b      	ldr	r3, [r7, #4]
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	20000e04 	.word	0x20000e04

08004d14 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004d14:	b580      	push	{r7, lr}
 8004d16:	b086      	sub	sp, #24
 8004d18:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004d1e:	4b4f      	ldr	r3, [pc, #316]	; (8004e5c <xTaskIncrementTick+0x148>)
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	f040 808f 	bne.w	8004e46 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004d28:	4b4d      	ldr	r3, [pc, #308]	; (8004e60 <xTaskIncrementTick+0x14c>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	3301      	adds	r3, #1
 8004d2e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004d30:	4a4b      	ldr	r2, [pc, #300]	; (8004e60 <xTaskIncrementTick+0x14c>)
 8004d32:	693b      	ldr	r3, [r7, #16]
 8004d34:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004d36:	693b      	ldr	r3, [r7, #16]
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d120      	bne.n	8004d7e <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8004d3c:	4b49      	ldr	r3, [pc, #292]	; (8004e64 <xTaskIncrementTick+0x150>)
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d00a      	beq.n	8004d5c <xTaskIncrementTick+0x48>
	__asm volatile
 8004d46:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d4a:	f383 8811 	msr	BASEPRI, r3
 8004d4e:	f3bf 8f6f 	isb	sy
 8004d52:	f3bf 8f4f 	dsb	sy
 8004d56:	603b      	str	r3, [r7, #0]
}
 8004d58:	bf00      	nop
 8004d5a:	e7fe      	b.n	8004d5a <xTaskIncrementTick+0x46>
 8004d5c:	4b41      	ldr	r3, [pc, #260]	; (8004e64 <xTaskIncrementTick+0x150>)
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	60fb      	str	r3, [r7, #12]
 8004d62:	4b41      	ldr	r3, [pc, #260]	; (8004e68 <xTaskIncrementTick+0x154>)
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	4a3f      	ldr	r2, [pc, #252]	; (8004e64 <xTaskIncrementTick+0x150>)
 8004d68:	6013      	str	r3, [r2, #0]
 8004d6a:	4a3f      	ldr	r2, [pc, #252]	; (8004e68 <xTaskIncrementTick+0x154>)
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	6013      	str	r3, [r2, #0]
 8004d70:	4b3e      	ldr	r3, [pc, #248]	; (8004e6c <xTaskIncrementTick+0x158>)
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	3301      	adds	r3, #1
 8004d76:	4a3d      	ldr	r2, [pc, #244]	; (8004e6c <xTaskIncrementTick+0x158>)
 8004d78:	6013      	str	r3, [r2, #0]
 8004d7a:	f000 fadb 	bl	8005334 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8004d7e:	4b3c      	ldr	r3, [pc, #240]	; (8004e70 <xTaskIncrementTick+0x15c>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	693a      	ldr	r2, [r7, #16]
 8004d84:	429a      	cmp	r2, r3
 8004d86:	d349      	bcc.n	8004e1c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004d88:	4b36      	ldr	r3, [pc, #216]	; (8004e64 <xTaskIncrementTick+0x150>)
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d104      	bne.n	8004d9c <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004d92:	4b37      	ldr	r3, [pc, #220]	; (8004e70 <xTaskIncrementTick+0x15c>)
 8004d94:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d98:	601a      	str	r2, [r3, #0]
					break;
 8004d9a:	e03f      	b.n	8004e1c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004d9c:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <xTaskIncrementTick+0x150>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	68db      	ldr	r3, [r3, #12]
 8004da2:	68db      	ldr	r3, [r3, #12]
 8004da4:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	685b      	ldr	r3, [r3, #4]
 8004daa:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	429a      	cmp	r2, r3
 8004db2:	d203      	bcs.n	8004dbc <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004db4:	4a2e      	ldr	r2, [pc, #184]	; (8004e70 <xTaskIncrementTick+0x15c>)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004dba:	e02f      	b.n	8004e1c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4618      	mov	r0, r3
 8004dc2:	f7fe ff79 	bl	8003cb8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004dc6:	68bb      	ldr	r3, [r7, #8]
 8004dc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d004      	beq.n	8004dd8 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8004dce:	68bb      	ldr	r3, [r7, #8]
 8004dd0:	3318      	adds	r3, #24
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	f7fe ff70 	bl	8003cb8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004ddc:	4b25      	ldr	r3, [pc, #148]	; (8004e74 <xTaskIncrementTick+0x160>)
 8004dde:	681b      	ldr	r3, [r3, #0]
 8004de0:	429a      	cmp	r2, r3
 8004de2:	d903      	bls.n	8004dec <xTaskIncrementTick+0xd8>
 8004de4:	68bb      	ldr	r3, [r7, #8]
 8004de6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004de8:	4a22      	ldr	r2, [pc, #136]	; (8004e74 <xTaskIncrementTick+0x160>)
 8004dea:	6013      	str	r3, [r2, #0]
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004df0:	4613      	mov	r3, r2
 8004df2:	009b      	lsls	r3, r3, #2
 8004df4:	4413      	add	r3, r2
 8004df6:	009b      	lsls	r3, r3, #2
 8004df8:	4a1f      	ldr	r2, [pc, #124]	; (8004e78 <xTaskIncrementTick+0x164>)
 8004dfa:	441a      	add	r2, r3
 8004dfc:	68bb      	ldr	r3, [r7, #8]
 8004dfe:	3304      	adds	r3, #4
 8004e00:	4619      	mov	r1, r3
 8004e02:	4610      	mov	r0, r2
 8004e04:	f7fe fefb 	bl	8003bfe <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004e08:	68bb      	ldr	r3, [r7, #8]
 8004e0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e0c:	4b1b      	ldr	r3, [pc, #108]	; (8004e7c <xTaskIncrementTick+0x168>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e12:	429a      	cmp	r2, r3
 8004e14:	d3b8      	bcc.n	8004d88 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8004e16:	2301      	movs	r3, #1
 8004e18:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004e1a:	e7b5      	b.n	8004d88 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004e1c:	4b17      	ldr	r3, [pc, #92]	; (8004e7c <xTaskIncrementTick+0x168>)
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e22:	4915      	ldr	r1, [pc, #84]	; (8004e78 <xTaskIncrementTick+0x164>)
 8004e24:	4613      	mov	r3, r2
 8004e26:	009b      	lsls	r3, r3, #2
 8004e28:	4413      	add	r3, r2
 8004e2a:	009b      	lsls	r3, r3, #2
 8004e2c:	440b      	add	r3, r1
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	2b01      	cmp	r3, #1
 8004e32:	d901      	bls.n	8004e38 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8004e34:	2301      	movs	r3, #1
 8004e36:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8004e38:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <xTaskIncrementTick+0x16c>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d007      	beq.n	8004e50 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8004e40:	2301      	movs	r3, #1
 8004e42:	617b      	str	r3, [r7, #20]
 8004e44:	e004      	b.n	8004e50 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8004e46:	4b0f      	ldr	r3, [pc, #60]	; (8004e84 <xTaskIncrementTick+0x170>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	3301      	adds	r3, #1
 8004e4c:	4a0d      	ldr	r2, [pc, #52]	; (8004e84 <xTaskIncrementTick+0x170>)
 8004e4e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8004e50:	697b      	ldr	r3, [r7, #20]
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20000e28 	.word	0x20000e28
 8004e60:	20000e04 	.word	0x20000e04
 8004e64:	20000db8 	.word	0x20000db8
 8004e68:	20000dbc 	.word	0x20000dbc
 8004e6c:	20000e18 	.word	0x20000e18
 8004e70:	20000e20 	.word	0x20000e20
 8004e74:	20000e08 	.word	0x20000e08
 8004e78:	20000930 	.word	0x20000930
 8004e7c:	2000092c 	.word	0x2000092c
 8004e80:	20000e14 	.word	0x20000e14
 8004e84:	20000e10 	.word	0x20000e10

08004e88 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8004e88:	b480      	push	{r7}
 8004e8a:	b085      	sub	sp, #20
 8004e8c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8004e8e:	4b2a      	ldr	r3, [pc, #168]	; (8004f38 <vTaskSwitchContext+0xb0>)
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d003      	beq.n	8004e9e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8004e96:	4b29      	ldr	r3, [pc, #164]	; (8004f3c <vTaskSwitchContext+0xb4>)
 8004e98:	2201      	movs	r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8004e9c:	e046      	b.n	8004f2c <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8004e9e:	4b27      	ldr	r3, [pc, #156]	; (8004f3c <vTaskSwitchContext+0xb4>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ea4:	4b26      	ldr	r3, [pc, #152]	; (8004f40 <vTaskSwitchContext+0xb8>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	60fb      	str	r3, [r7, #12]
 8004eaa:	e010      	b.n	8004ece <vTaskSwitchContext+0x46>
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d10a      	bne.n	8004ec8 <vTaskSwitchContext+0x40>
	__asm volatile
 8004eb2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eb6:	f383 8811 	msr	BASEPRI, r3
 8004eba:	f3bf 8f6f 	isb	sy
 8004ebe:	f3bf 8f4f 	dsb	sy
 8004ec2:	607b      	str	r3, [r7, #4]
}
 8004ec4:	bf00      	nop
 8004ec6:	e7fe      	b.n	8004ec6 <vTaskSwitchContext+0x3e>
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	3b01      	subs	r3, #1
 8004ecc:	60fb      	str	r3, [r7, #12]
 8004ece:	491d      	ldr	r1, [pc, #116]	; (8004f44 <vTaskSwitchContext+0xbc>)
 8004ed0:	68fa      	ldr	r2, [r7, #12]
 8004ed2:	4613      	mov	r3, r2
 8004ed4:	009b      	lsls	r3, r3, #2
 8004ed6:	4413      	add	r3, r2
 8004ed8:	009b      	lsls	r3, r3, #2
 8004eda:	440b      	add	r3, r1
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d0e4      	beq.n	8004eac <vTaskSwitchContext+0x24>
 8004ee2:	68fa      	ldr	r2, [r7, #12]
 8004ee4:	4613      	mov	r3, r2
 8004ee6:	009b      	lsls	r3, r3, #2
 8004ee8:	4413      	add	r3, r2
 8004eea:	009b      	lsls	r3, r3, #2
 8004eec:	4a15      	ldr	r2, [pc, #84]	; (8004f44 <vTaskSwitchContext+0xbc>)
 8004eee:	4413      	add	r3, r2
 8004ef0:	60bb      	str	r3, [r7, #8]
 8004ef2:	68bb      	ldr	r3, [r7, #8]
 8004ef4:	685b      	ldr	r3, [r3, #4]
 8004ef6:	685a      	ldr	r2, [r3, #4]
 8004ef8:	68bb      	ldr	r3, [r7, #8]
 8004efa:	605a      	str	r2, [r3, #4]
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	685a      	ldr	r2, [r3, #4]
 8004f00:	68bb      	ldr	r3, [r7, #8]
 8004f02:	3308      	adds	r3, #8
 8004f04:	429a      	cmp	r2, r3
 8004f06:	d104      	bne.n	8004f12 <vTaskSwitchContext+0x8a>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	685a      	ldr	r2, [r3, #4]
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	605a      	str	r2, [r3, #4]
 8004f12:	68bb      	ldr	r3, [r7, #8]
 8004f14:	685b      	ldr	r3, [r3, #4]
 8004f16:	68db      	ldr	r3, [r3, #12]
 8004f18:	4a0b      	ldr	r2, [pc, #44]	; (8004f48 <vTaskSwitchContext+0xc0>)
 8004f1a:	6013      	str	r3, [r2, #0]
 8004f1c:	4a08      	ldr	r2, [pc, #32]	; (8004f40 <vTaskSwitchContext+0xb8>)
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8004f22:	4b09      	ldr	r3, [pc, #36]	; (8004f48 <vTaskSwitchContext+0xc0>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	3354      	adds	r3, #84	; 0x54
 8004f28:	4a08      	ldr	r2, [pc, #32]	; (8004f4c <vTaskSwitchContext+0xc4>)
 8004f2a:	6013      	str	r3, [r2, #0]
}
 8004f2c:	bf00      	nop
 8004f2e:	3714      	adds	r7, #20
 8004f30:	46bd      	mov	sp, r7
 8004f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f36:	4770      	bx	lr
 8004f38:	20000e28 	.word	0x20000e28
 8004f3c:	20000e14 	.word	0x20000e14
 8004f40:	20000e08 	.word	0x20000e08
 8004f44:	20000930 	.word	0x20000930
 8004f48:	2000092c 	.word	0x2000092c
 8004f4c:	20000010 	.word	0x20000010

08004f50 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004f50:	b580      	push	{r7, lr}
 8004f52:	b084      	sub	sp, #16
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	6078      	str	r0, [r7, #4]
 8004f58:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d10a      	bne.n	8004f76 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8004f60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004f64:	f383 8811 	msr	BASEPRI, r3
 8004f68:	f3bf 8f6f 	isb	sy
 8004f6c:	f3bf 8f4f 	dsb	sy
 8004f70:	60fb      	str	r3, [r7, #12]
}
 8004f72:	bf00      	nop
 8004f74:	e7fe      	b.n	8004f74 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004f76:	4b07      	ldr	r3, [pc, #28]	; (8004f94 <vTaskPlaceOnEventList+0x44>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3318      	adds	r3, #24
 8004f7c:	4619      	mov	r1, r3
 8004f7e:	6878      	ldr	r0, [r7, #4]
 8004f80:	f7fe fe61 	bl	8003c46 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8004f84:	2101      	movs	r1, #1
 8004f86:	6838      	ldr	r0, [r7, #0]
 8004f88:	f000 fa80 	bl	800548c <prvAddCurrentTaskToDelayedList>
}
 8004f8c:	bf00      	nop
 8004f8e:	3710      	adds	r7, #16
 8004f90:	46bd      	mov	sp, r7
 8004f92:	bd80      	pop	{r7, pc}
 8004f94:	2000092c 	.word	0x2000092c

08004f98 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f98:	b580      	push	{r7, lr}
 8004f9a:	b086      	sub	sp, #24
 8004f9c:	af00      	add	r7, sp, #0
 8004f9e:	60f8      	str	r0, [r7, #12]
 8004fa0:	60b9      	str	r1, [r7, #8]
 8004fa2:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8004fa4:	68fb      	ldr	r3, [r7, #12]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d10a      	bne.n	8004fc0 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8004faa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004fae:	f383 8811 	msr	BASEPRI, r3
 8004fb2:	f3bf 8f6f 	isb	sy
 8004fb6:	f3bf 8f4f 	dsb	sy
 8004fba:	617b      	str	r3, [r7, #20]
}
 8004fbc:	bf00      	nop
 8004fbe:	e7fe      	b.n	8004fbe <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8004fc0:	4b0a      	ldr	r3, [pc, #40]	; (8004fec <vTaskPlaceOnEventListRestricted+0x54>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	3318      	adds	r3, #24
 8004fc6:	4619      	mov	r1, r3
 8004fc8:	68f8      	ldr	r0, [r7, #12]
 8004fca:	f7fe fe18 	bl	8003bfe <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d002      	beq.n	8004fda <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8004fd4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004fd8:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8004fda:	6879      	ldr	r1, [r7, #4]
 8004fdc:	68b8      	ldr	r0, [r7, #8]
 8004fde:	f000 fa55 	bl	800548c <prvAddCurrentTaskToDelayedList>
	}
 8004fe2:	bf00      	nop
 8004fe4:	3718      	adds	r7, #24
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}
 8004fea:	bf00      	nop
 8004fec:	2000092c 	.word	0x2000092c

08004ff0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8004ff0:	b580      	push	{r7, lr}
 8004ff2:	b086      	sub	sp, #24
 8004ff4:	af00      	add	r7, sp, #0
 8004ff6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	68db      	ldr	r3, [r3, #12]
 8004ffe:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	2b00      	cmp	r3, #0
 8005004:	d10a      	bne.n	800501c <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8005006:	f04f 0350 	mov.w	r3, #80	; 0x50
 800500a:	f383 8811 	msr	BASEPRI, r3
 800500e:	f3bf 8f6f 	isb	sy
 8005012:	f3bf 8f4f 	dsb	sy
 8005016:	60fb      	str	r3, [r7, #12]
}
 8005018:	bf00      	nop
 800501a:	e7fe      	b.n	800501a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800501c:	693b      	ldr	r3, [r7, #16]
 800501e:	3318      	adds	r3, #24
 8005020:	4618      	mov	r0, r3
 8005022:	f7fe fe49 	bl	8003cb8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005026:	4b1e      	ldr	r3, [pc, #120]	; (80050a0 <xTaskRemoveFromEventList+0xb0>)
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d11d      	bne.n	800506a <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800502e:	693b      	ldr	r3, [r7, #16]
 8005030:	3304      	adds	r3, #4
 8005032:	4618      	mov	r0, r3
 8005034:	f7fe fe40 	bl	8003cb8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800503c:	4b19      	ldr	r3, [pc, #100]	; (80050a4 <xTaskRemoveFromEventList+0xb4>)
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	429a      	cmp	r2, r3
 8005042:	d903      	bls.n	800504c <xTaskRemoveFromEventList+0x5c>
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005048:	4a16      	ldr	r2, [pc, #88]	; (80050a4 <xTaskRemoveFromEventList+0xb4>)
 800504a:	6013      	str	r3, [r2, #0]
 800504c:	693b      	ldr	r3, [r7, #16]
 800504e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005050:	4613      	mov	r3, r2
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	4413      	add	r3, r2
 8005056:	009b      	lsls	r3, r3, #2
 8005058:	4a13      	ldr	r2, [pc, #76]	; (80050a8 <xTaskRemoveFromEventList+0xb8>)
 800505a:	441a      	add	r2, r3
 800505c:	693b      	ldr	r3, [r7, #16]
 800505e:	3304      	adds	r3, #4
 8005060:	4619      	mov	r1, r3
 8005062:	4610      	mov	r0, r2
 8005064:	f7fe fdcb 	bl	8003bfe <vListInsertEnd>
 8005068:	e005      	b.n	8005076 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800506a:	693b      	ldr	r3, [r7, #16]
 800506c:	3318      	adds	r3, #24
 800506e:	4619      	mov	r1, r3
 8005070:	480e      	ldr	r0, [pc, #56]	; (80050ac <xTaskRemoveFromEventList+0xbc>)
 8005072:	f7fe fdc4 	bl	8003bfe <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005076:	693b      	ldr	r3, [r7, #16]
 8005078:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800507a:	4b0d      	ldr	r3, [pc, #52]	; (80050b0 <xTaskRemoveFromEventList+0xc0>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005080:	429a      	cmp	r2, r3
 8005082:	d905      	bls.n	8005090 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005084:	2301      	movs	r3, #1
 8005086:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005088:	4b0a      	ldr	r3, [pc, #40]	; (80050b4 <xTaskRemoveFromEventList+0xc4>)
 800508a:	2201      	movs	r2, #1
 800508c:	601a      	str	r2, [r3, #0]
 800508e:	e001      	b.n	8005094 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8005090:	2300      	movs	r3, #0
 8005092:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005094:	697b      	ldr	r3, [r7, #20]
}
 8005096:	4618      	mov	r0, r3
 8005098:	3718      	adds	r7, #24
 800509a:	46bd      	mov	sp, r7
 800509c:	bd80      	pop	{r7, pc}
 800509e:	bf00      	nop
 80050a0:	20000e28 	.word	0x20000e28
 80050a4:	20000e08 	.word	0x20000e08
 80050a8:	20000930 	.word	0x20000930
 80050ac:	20000dc0 	.word	0x20000dc0
 80050b0:	2000092c 	.word	0x2000092c
 80050b4:	20000e14 	.word	0x20000e14

080050b8 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80050b8:	b480      	push	{r7}
 80050ba:	b083      	sub	sp, #12
 80050bc:	af00      	add	r7, sp, #0
 80050be:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80050c0:	4b06      	ldr	r3, [pc, #24]	; (80050dc <vTaskInternalSetTimeOutState+0x24>)
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80050c8:	4b05      	ldr	r3, [pc, #20]	; (80050e0 <vTaskInternalSetTimeOutState+0x28>)
 80050ca:	681a      	ldr	r2, [r3, #0]
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	605a      	str	r2, [r3, #4]
}
 80050d0:	bf00      	nop
 80050d2:	370c      	adds	r7, #12
 80050d4:	46bd      	mov	sp, r7
 80050d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050da:	4770      	bx	lr
 80050dc:	20000e18 	.word	0x20000e18
 80050e0:	20000e04 	.word	0x20000e04

080050e4 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b088      	sub	sp, #32
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d10a      	bne.n	800510a <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80050f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80050f8:	f383 8811 	msr	BASEPRI, r3
 80050fc:	f3bf 8f6f 	isb	sy
 8005100:	f3bf 8f4f 	dsb	sy
 8005104:	613b      	str	r3, [r7, #16]
}
 8005106:	bf00      	nop
 8005108:	e7fe      	b.n	8005108 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	2b00      	cmp	r3, #0
 800510e:	d10a      	bne.n	8005126 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8005110:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005114:	f383 8811 	msr	BASEPRI, r3
 8005118:	f3bf 8f6f 	isb	sy
 800511c:	f3bf 8f4f 	dsb	sy
 8005120:	60fb      	str	r3, [r7, #12]
}
 8005122:	bf00      	nop
 8005124:	e7fe      	b.n	8005124 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8005126:	f000 fe7d 	bl	8005e24 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800512a:	4b1d      	ldr	r3, [pc, #116]	; (80051a0 <xTaskCheckForTimeOut+0xbc>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	685b      	ldr	r3, [r3, #4]
 8005134:	69ba      	ldr	r2, [r7, #24]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800513a:	683b      	ldr	r3, [r7, #0]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005142:	d102      	bne.n	800514a <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005144:	2300      	movs	r3, #0
 8005146:	61fb      	str	r3, [r7, #28]
 8005148:	e023      	b.n	8005192 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	681a      	ldr	r2, [r3, #0]
 800514e:	4b15      	ldr	r3, [pc, #84]	; (80051a4 <xTaskCheckForTimeOut+0xc0>)
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	429a      	cmp	r2, r3
 8005154:	d007      	beq.n	8005166 <xTaskCheckForTimeOut+0x82>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	429a      	cmp	r2, r3
 800515e:	d302      	bcc.n	8005166 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005160:	2301      	movs	r3, #1
 8005162:	61fb      	str	r3, [r7, #28]
 8005164:	e015      	b.n	8005192 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	697a      	ldr	r2, [r7, #20]
 800516c:	429a      	cmp	r2, r3
 800516e:	d20b      	bcs.n	8005188 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	681a      	ldr	r2, [r3, #0]
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	1ad2      	subs	r2, r2, r3
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800517c:	6878      	ldr	r0, [r7, #4]
 800517e:	f7ff ff9b 	bl	80050b8 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8005182:	2300      	movs	r3, #0
 8005184:	61fb      	str	r3, [r7, #28]
 8005186:	e004      	b.n	8005192 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8005188:	683b      	ldr	r3, [r7, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800518e:	2301      	movs	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8005192:	f000 fe77 	bl	8005e84 <vPortExitCritical>

	return xReturn;
 8005196:	69fb      	ldr	r3, [r7, #28]
}
 8005198:	4618      	mov	r0, r3
 800519a:	3720      	adds	r7, #32
 800519c:	46bd      	mov	sp, r7
 800519e:	bd80      	pop	{r7, pc}
 80051a0:	20000e04 	.word	0x20000e04
 80051a4:	20000e18 	.word	0x20000e18

080051a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80051a8:	b480      	push	{r7}
 80051aa:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80051ac:	4b03      	ldr	r3, [pc, #12]	; (80051bc <vTaskMissedYield+0x14>)
 80051ae:	2201      	movs	r2, #1
 80051b0:	601a      	str	r2, [r3, #0]
}
 80051b2:	bf00      	nop
 80051b4:	46bd      	mov	sp, r7
 80051b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ba:	4770      	bx	lr
 80051bc:	20000e14 	.word	0x20000e14

080051c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80051c0:	b580      	push	{r7, lr}
 80051c2:	b082      	sub	sp, #8
 80051c4:	af00      	add	r7, sp, #0
 80051c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80051c8:	f000 f852 	bl	8005270 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80051cc:	4b06      	ldr	r3, [pc, #24]	; (80051e8 <prvIdleTask+0x28>)
 80051ce:	681b      	ldr	r3, [r3, #0]
 80051d0:	2b01      	cmp	r3, #1
 80051d2:	d9f9      	bls.n	80051c8 <prvIdleTask+0x8>
			{
				taskYIELD();
 80051d4:	4b05      	ldr	r3, [pc, #20]	; (80051ec <prvIdleTask+0x2c>)
 80051d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80051da:	601a      	str	r2, [r3, #0]
 80051dc:	f3bf 8f4f 	dsb	sy
 80051e0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80051e4:	e7f0      	b.n	80051c8 <prvIdleTask+0x8>
 80051e6:	bf00      	nop
 80051e8:	20000930 	.word	0x20000930
 80051ec:	e000ed04 	.word	0xe000ed04

080051f0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80051f6:	2300      	movs	r3, #0
 80051f8:	607b      	str	r3, [r7, #4]
 80051fa:	e00c      	b.n	8005216 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80051fc:	687a      	ldr	r2, [r7, #4]
 80051fe:	4613      	mov	r3, r2
 8005200:	009b      	lsls	r3, r3, #2
 8005202:	4413      	add	r3, r2
 8005204:	009b      	lsls	r3, r3, #2
 8005206:	4a12      	ldr	r2, [pc, #72]	; (8005250 <prvInitialiseTaskLists+0x60>)
 8005208:	4413      	add	r3, r2
 800520a:	4618      	mov	r0, r3
 800520c:	f7fe fcca 	bl	8003ba4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	3301      	adds	r3, #1
 8005214:	607b      	str	r3, [r7, #4]
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	2b37      	cmp	r3, #55	; 0x37
 800521a:	d9ef      	bls.n	80051fc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800521c:	480d      	ldr	r0, [pc, #52]	; (8005254 <prvInitialiseTaskLists+0x64>)
 800521e:	f7fe fcc1 	bl	8003ba4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8005222:	480d      	ldr	r0, [pc, #52]	; (8005258 <prvInitialiseTaskLists+0x68>)
 8005224:	f7fe fcbe 	bl	8003ba4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8005228:	480c      	ldr	r0, [pc, #48]	; (800525c <prvInitialiseTaskLists+0x6c>)
 800522a:	f7fe fcbb 	bl	8003ba4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800522e:	480c      	ldr	r0, [pc, #48]	; (8005260 <prvInitialiseTaskLists+0x70>)
 8005230:	f7fe fcb8 	bl	8003ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8005234:	480b      	ldr	r0, [pc, #44]	; (8005264 <prvInitialiseTaskLists+0x74>)
 8005236:	f7fe fcb5 	bl	8003ba4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800523a:	4b0b      	ldr	r3, [pc, #44]	; (8005268 <prvInitialiseTaskLists+0x78>)
 800523c:	4a05      	ldr	r2, [pc, #20]	; (8005254 <prvInitialiseTaskLists+0x64>)
 800523e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8005240:	4b0a      	ldr	r3, [pc, #40]	; (800526c <prvInitialiseTaskLists+0x7c>)
 8005242:	4a05      	ldr	r2, [pc, #20]	; (8005258 <prvInitialiseTaskLists+0x68>)
 8005244:	601a      	str	r2, [r3, #0]
}
 8005246:	bf00      	nop
 8005248:	3708      	adds	r7, #8
 800524a:	46bd      	mov	sp, r7
 800524c:	bd80      	pop	{r7, pc}
 800524e:	bf00      	nop
 8005250:	20000930 	.word	0x20000930
 8005254:	20000d90 	.word	0x20000d90
 8005258:	20000da4 	.word	0x20000da4
 800525c:	20000dc0 	.word	0x20000dc0
 8005260:	20000dd4 	.word	0x20000dd4
 8005264:	20000dec 	.word	0x20000dec
 8005268:	20000db8 	.word	0x20000db8
 800526c:	20000dbc 	.word	0x20000dbc

08005270 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8005270:	b580      	push	{r7, lr}
 8005272:	b082      	sub	sp, #8
 8005274:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8005276:	e019      	b.n	80052ac <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8005278:	f000 fdd4 	bl	8005e24 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800527c:	4b10      	ldr	r3, [pc, #64]	; (80052c0 <prvCheckTasksWaitingTermination+0x50>)
 800527e:	68db      	ldr	r3, [r3, #12]
 8005280:	68db      	ldr	r3, [r3, #12]
 8005282:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	3304      	adds	r3, #4
 8005288:	4618      	mov	r0, r3
 800528a:	f7fe fd15 	bl	8003cb8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800528e:	4b0d      	ldr	r3, [pc, #52]	; (80052c4 <prvCheckTasksWaitingTermination+0x54>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	3b01      	subs	r3, #1
 8005294:	4a0b      	ldr	r2, [pc, #44]	; (80052c4 <prvCheckTasksWaitingTermination+0x54>)
 8005296:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8005298:	4b0b      	ldr	r3, [pc, #44]	; (80052c8 <prvCheckTasksWaitingTermination+0x58>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	3b01      	subs	r3, #1
 800529e:	4a0a      	ldr	r2, [pc, #40]	; (80052c8 <prvCheckTasksWaitingTermination+0x58>)
 80052a0:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80052a2:	f000 fdef 	bl	8005e84 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f000 f810 	bl	80052cc <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80052ac:	4b06      	ldr	r3, [pc, #24]	; (80052c8 <prvCheckTasksWaitingTermination+0x58>)
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d1e1      	bne.n	8005278 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80052b4:	bf00      	nop
 80052b6:	bf00      	nop
 80052b8:	3708      	adds	r7, #8
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	20000dd4 	.word	0x20000dd4
 80052c4:	20000e00 	.word	0x20000e00
 80052c8:	20000de8 	.word	0x20000de8

080052cc <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80052cc:	b580      	push	{r7, lr}
 80052ce:	b084      	sub	sp, #16
 80052d0:	af00      	add	r7, sp, #0
 80052d2:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	3354      	adds	r3, #84	; 0x54
 80052d8:	4618      	mov	r0, r3
 80052da:	f001 f8f9 	bl	80064d0 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	d108      	bne.n	80052fa <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052ec:	4618      	mov	r0, r3
 80052ee:	f000 ff87 	bl	8006200 <vPortFree>
				vPortFree( pxTCB );
 80052f2:	6878      	ldr	r0, [r7, #4]
 80052f4:	f000 ff84 	bl	8006200 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80052f8:	e018      	b.n	800532c <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005300:	2b01      	cmp	r3, #1
 8005302:	d103      	bne.n	800530c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8005304:	6878      	ldr	r0, [r7, #4]
 8005306:	f000 ff7b 	bl	8006200 <vPortFree>
	}
 800530a:	e00f      	b.n	800532c <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 8005312:	2b02      	cmp	r3, #2
 8005314:	d00a      	beq.n	800532c <prvDeleteTCB+0x60>
	__asm volatile
 8005316:	f04f 0350 	mov.w	r3, #80	; 0x50
 800531a:	f383 8811 	msr	BASEPRI, r3
 800531e:	f3bf 8f6f 	isb	sy
 8005322:	f3bf 8f4f 	dsb	sy
 8005326:	60fb      	str	r3, [r7, #12]
}
 8005328:	bf00      	nop
 800532a:	e7fe      	b.n	800532a <prvDeleteTCB+0x5e>
	}
 800532c:	bf00      	nop
 800532e:	3710      	adds	r7, #16
 8005330:	46bd      	mov	sp, r7
 8005332:	bd80      	pop	{r7, pc}

08005334 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8005334:	b480      	push	{r7}
 8005336:	b083      	sub	sp, #12
 8005338:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800533a:	4b0c      	ldr	r3, [pc, #48]	; (800536c <prvResetNextTaskUnblockTime+0x38>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d104      	bne.n	800534e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8005344:	4b0a      	ldr	r3, [pc, #40]	; (8005370 <prvResetNextTaskUnblockTime+0x3c>)
 8005346:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800534a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800534c:	e008      	b.n	8005360 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800534e:	4b07      	ldr	r3, [pc, #28]	; (800536c <prvResetNextTaskUnblockTime+0x38>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	68db      	ldr	r3, [r3, #12]
 8005354:	68db      	ldr	r3, [r3, #12]
 8005356:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	4a04      	ldr	r2, [pc, #16]	; (8005370 <prvResetNextTaskUnblockTime+0x3c>)
 800535e:	6013      	str	r3, [r2, #0]
}
 8005360:	bf00      	nop
 8005362:	370c      	adds	r7, #12
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr
 800536c:	20000db8 	.word	0x20000db8
 8005370:	20000e20 	.word	0x20000e20

08005374 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8005374:	b480      	push	{r7}
 8005376:	b083      	sub	sp, #12
 8005378:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800537a:	4b0b      	ldr	r3, [pc, #44]	; (80053a8 <xTaskGetSchedulerState+0x34>)
 800537c:	681b      	ldr	r3, [r3, #0]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d102      	bne.n	8005388 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8005382:	2301      	movs	r3, #1
 8005384:	607b      	str	r3, [r7, #4]
 8005386:	e008      	b.n	800539a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005388:	4b08      	ldr	r3, [pc, #32]	; (80053ac <xTaskGetSchedulerState+0x38>)
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	2b00      	cmp	r3, #0
 800538e:	d102      	bne.n	8005396 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8005390:	2302      	movs	r3, #2
 8005392:	607b      	str	r3, [r7, #4]
 8005394:	e001      	b.n	800539a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8005396:	2300      	movs	r3, #0
 8005398:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800539a:	687b      	ldr	r3, [r7, #4]
	}
 800539c:	4618      	mov	r0, r3
 800539e:	370c      	adds	r7, #12
 80053a0:	46bd      	mov	sp, r7
 80053a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a6:	4770      	bx	lr
 80053a8:	20000e0c 	.word	0x20000e0c
 80053ac:	20000e28 	.word	0x20000e28

080053b0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80053b0:	b580      	push	{r7, lr}
 80053b2:	b086      	sub	sp, #24
 80053b4:	af00      	add	r7, sp, #0
 80053b6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80053bc:	2300      	movs	r3, #0
 80053be:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d056      	beq.n	8005474 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80053c6:	4b2e      	ldr	r3, [pc, #184]	; (8005480 <xTaskPriorityDisinherit+0xd0>)
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	693a      	ldr	r2, [r7, #16]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d00a      	beq.n	80053e6 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80053d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053d4:	f383 8811 	msr	BASEPRI, r3
 80053d8:	f3bf 8f6f 	isb	sy
 80053dc:	f3bf 8f4f 	dsb	sy
 80053e0:	60fb      	str	r3, [r7, #12]
}
 80053e2:	bf00      	nop
 80053e4:	e7fe      	b.n	80053e4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10a      	bne.n	8005404 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	60bb      	str	r3, [r7, #8]
}
 8005400:	bf00      	nop
 8005402:	e7fe      	b.n	8005402 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8005404:	693b      	ldr	r3, [r7, #16]
 8005406:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005408:	1e5a      	subs	r2, r3, #1
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800540e:	693b      	ldr	r3, [r7, #16]
 8005410:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005416:	429a      	cmp	r2, r3
 8005418:	d02c      	beq.n	8005474 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800541a:	693b      	ldr	r3, [r7, #16]
 800541c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800541e:	2b00      	cmp	r3, #0
 8005420:	d128      	bne.n	8005474 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	3304      	adds	r3, #4
 8005426:	4618      	mov	r0, r3
 8005428:	f7fe fc46 	bl	8003cb8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005438:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800543c:	693b      	ldr	r3, [r7, #16]
 800543e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005444:	4b0f      	ldr	r3, [pc, #60]	; (8005484 <xTaskPriorityDisinherit+0xd4>)
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	429a      	cmp	r2, r3
 800544a:	d903      	bls.n	8005454 <xTaskPriorityDisinherit+0xa4>
 800544c:	693b      	ldr	r3, [r7, #16]
 800544e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005450:	4a0c      	ldr	r2, [pc, #48]	; (8005484 <xTaskPriorityDisinherit+0xd4>)
 8005452:	6013      	str	r3, [r2, #0]
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005458:	4613      	mov	r3, r2
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	4413      	add	r3, r2
 800545e:	009b      	lsls	r3, r3, #2
 8005460:	4a09      	ldr	r2, [pc, #36]	; (8005488 <xTaskPriorityDisinherit+0xd8>)
 8005462:	441a      	add	r2, r3
 8005464:	693b      	ldr	r3, [r7, #16]
 8005466:	3304      	adds	r3, #4
 8005468:	4619      	mov	r1, r3
 800546a:	4610      	mov	r0, r2
 800546c:	f7fe fbc7 	bl	8003bfe <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8005470:	2301      	movs	r3, #1
 8005472:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8005474:	697b      	ldr	r3, [r7, #20]
	}
 8005476:	4618      	mov	r0, r3
 8005478:	3718      	adds	r7, #24
 800547a:	46bd      	mov	sp, r7
 800547c:	bd80      	pop	{r7, pc}
 800547e:	bf00      	nop
 8005480:	2000092c 	.word	0x2000092c
 8005484:	20000e08 	.word	0x20000e08
 8005488:	20000930 	.word	0x20000930

0800548c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800548c:	b580      	push	{r7, lr}
 800548e:	b084      	sub	sp, #16
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8005496:	4b21      	ldr	r3, [pc, #132]	; (800551c <prvAddCurrentTaskToDelayedList+0x90>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800549c:	4b20      	ldr	r3, [pc, #128]	; (8005520 <prvAddCurrentTaskToDelayedList+0x94>)
 800549e:	681b      	ldr	r3, [r3, #0]
 80054a0:	3304      	adds	r3, #4
 80054a2:	4618      	mov	r0, r3
 80054a4:	f7fe fc08 	bl	8003cb8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80054ae:	d10a      	bne.n	80054c6 <prvAddCurrentTaskToDelayedList+0x3a>
 80054b0:	683b      	ldr	r3, [r7, #0]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d007      	beq.n	80054c6 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054b6:	4b1a      	ldr	r3, [pc, #104]	; (8005520 <prvAddCurrentTaskToDelayedList+0x94>)
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	3304      	adds	r3, #4
 80054bc:	4619      	mov	r1, r3
 80054be:	4819      	ldr	r0, [pc, #100]	; (8005524 <prvAddCurrentTaskToDelayedList+0x98>)
 80054c0:	f7fe fb9d 	bl	8003bfe <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80054c4:	e026      	b.n	8005514 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80054c6:	68fa      	ldr	r2, [r7, #12]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	4413      	add	r3, r2
 80054cc:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80054ce:	4b14      	ldr	r3, [pc, #80]	; (8005520 <prvAddCurrentTaskToDelayedList+0x94>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	68ba      	ldr	r2, [r7, #8]
 80054d4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80054d6:	68ba      	ldr	r2, [r7, #8]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	429a      	cmp	r2, r3
 80054dc:	d209      	bcs.n	80054f2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054de:	4b12      	ldr	r3, [pc, #72]	; (8005528 <prvAddCurrentTaskToDelayedList+0x9c>)
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b0f      	ldr	r3, [pc, #60]	; (8005520 <prvAddCurrentTaskToDelayedList+0x94>)
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	3304      	adds	r3, #4
 80054e8:	4619      	mov	r1, r3
 80054ea:	4610      	mov	r0, r2
 80054ec:	f7fe fbab 	bl	8003c46 <vListInsert>
}
 80054f0:	e010      	b.n	8005514 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80054f2:	4b0e      	ldr	r3, [pc, #56]	; (800552c <prvAddCurrentTaskToDelayedList+0xa0>)
 80054f4:	681a      	ldr	r2, [r3, #0]
 80054f6:	4b0a      	ldr	r3, [pc, #40]	; (8005520 <prvAddCurrentTaskToDelayedList+0x94>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	3304      	adds	r3, #4
 80054fc:	4619      	mov	r1, r3
 80054fe:	4610      	mov	r0, r2
 8005500:	f7fe fba1 	bl	8003c46 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8005504:	4b0a      	ldr	r3, [pc, #40]	; (8005530 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	429a      	cmp	r2, r3
 800550c:	d202      	bcs.n	8005514 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800550e:	4a08      	ldr	r2, [pc, #32]	; (8005530 <prvAddCurrentTaskToDelayedList+0xa4>)
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	6013      	str	r3, [r2, #0]
}
 8005514:	bf00      	nop
 8005516:	3710      	adds	r7, #16
 8005518:	46bd      	mov	sp, r7
 800551a:	bd80      	pop	{r7, pc}
 800551c:	20000e04 	.word	0x20000e04
 8005520:	2000092c 	.word	0x2000092c
 8005524:	20000dec 	.word	0x20000dec
 8005528:	20000dbc 	.word	0x20000dbc
 800552c:	20000db8 	.word	0x20000db8
 8005530:	20000e20 	.word	0x20000e20

08005534 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8005534:	b580      	push	{r7, lr}
 8005536:	b08a      	sub	sp, #40	; 0x28
 8005538:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800553a:	2300      	movs	r3, #0
 800553c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800553e:	f000 fb07 	bl	8005b50 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8005542:	4b1c      	ldr	r3, [pc, #112]	; (80055b4 <xTimerCreateTimerTask+0x80>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d021      	beq.n	800558e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800554a:	2300      	movs	r3, #0
 800554c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800554e:	2300      	movs	r3, #0
 8005550:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8005552:	1d3a      	adds	r2, r7, #4
 8005554:	f107 0108 	add.w	r1, r7, #8
 8005558:	f107 030c 	add.w	r3, r7, #12
 800555c:	4618      	mov	r0, r3
 800555e:	f7fe fb07 	bl	8003b70 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8005562:	6879      	ldr	r1, [r7, #4]
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	68fa      	ldr	r2, [r7, #12]
 8005568:	9202      	str	r2, [sp, #8]
 800556a:	9301      	str	r3, [sp, #4]
 800556c:	2302      	movs	r3, #2
 800556e:	9300      	str	r3, [sp, #0]
 8005570:	2300      	movs	r3, #0
 8005572:	460a      	mov	r2, r1
 8005574:	4910      	ldr	r1, [pc, #64]	; (80055b8 <xTimerCreateTimerTask+0x84>)
 8005576:	4811      	ldr	r0, [pc, #68]	; (80055bc <xTimerCreateTimerTask+0x88>)
 8005578:	f7ff f8b4 	bl	80046e4 <xTaskCreateStatic>
 800557c:	4603      	mov	r3, r0
 800557e:	4a10      	ldr	r2, [pc, #64]	; (80055c0 <xTimerCreateTimerTask+0x8c>)
 8005580:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8005582:	4b0f      	ldr	r3, [pc, #60]	; (80055c0 <xTimerCreateTimerTask+0x8c>)
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d001      	beq.n	800558e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800558a:	2301      	movs	r3, #1
 800558c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800558e:	697b      	ldr	r3, [r7, #20]
 8005590:	2b00      	cmp	r3, #0
 8005592:	d10a      	bne.n	80055aa <xTimerCreateTimerTask+0x76>
	__asm volatile
 8005594:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005598:	f383 8811 	msr	BASEPRI, r3
 800559c:	f3bf 8f6f 	isb	sy
 80055a0:	f3bf 8f4f 	dsb	sy
 80055a4:	613b      	str	r3, [r7, #16]
}
 80055a6:	bf00      	nop
 80055a8:	e7fe      	b.n	80055a8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80055aa:	697b      	ldr	r3, [r7, #20]
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	3718      	adds	r7, #24
 80055b0:	46bd      	mov	sp, r7
 80055b2:	bd80      	pop	{r7, pc}
 80055b4:	20000e5c 	.word	0x20000e5c
 80055b8:	08006688 	.word	0x08006688
 80055bc:	080056f9 	.word	0x080056f9
 80055c0:	20000e60 	.word	0x20000e60

080055c4 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80055c4:	b580      	push	{r7, lr}
 80055c6:	b08a      	sub	sp, #40	; 0x28
 80055c8:	af00      	add	r7, sp, #0
 80055ca:	60f8      	str	r0, [r7, #12]
 80055cc:	60b9      	str	r1, [r7, #8]
 80055ce:	607a      	str	r2, [r7, #4]
 80055d0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80055d2:	2300      	movs	r3, #0
 80055d4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10a      	bne.n	80055f2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	623b      	str	r3, [r7, #32]
}
 80055ee:	bf00      	nop
 80055f0:	e7fe      	b.n	80055f0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80055f2:	4b1a      	ldr	r3, [pc, #104]	; (800565c <xTimerGenericCommand+0x98>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d02a      	beq.n	8005650 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80055fa:	68bb      	ldr	r3, [r7, #8]
 80055fc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8005606:	68bb      	ldr	r3, [r7, #8]
 8005608:	2b05      	cmp	r3, #5
 800560a:	dc18      	bgt.n	800563e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800560c:	f7ff feb2 	bl	8005374 <xTaskGetSchedulerState>
 8005610:	4603      	mov	r3, r0
 8005612:	2b02      	cmp	r3, #2
 8005614:	d109      	bne.n	800562a <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8005616:	4b11      	ldr	r3, [pc, #68]	; (800565c <xTimerGenericCommand+0x98>)
 8005618:	6818      	ldr	r0, [r3, #0]
 800561a:	f107 0110 	add.w	r1, r7, #16
 800561e:	2300      	movs	r3, #0
 8005620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005622:	f7fe fc77 	bl	8003f14 <xQueueGenericSend>
 8005626:	6278      	str	r0, [r7, #36]	; 0x24
 8005628:	e012      	b.n	8005650 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800562a:	4b0c      	ldr	r3, [pc, #48]	; (800565c <xTimerGenericCommand+0x98>)
 800562c:	6818      	ldr	r0, [r3, #0]
 800562e:	f107 0110 	add.w	r1, r7, #16
 8005632:	2300      	movs	r3, #0
 8005634:	2200      	movs	r2, #0
 8005636:	f7fe fc6d 	bl	8003f14 <xQueueGenericSend>
 800563a:	6278      	str	r0, [r7, #36]	; 0x24
 800563c:	e008      	b.n	8005650 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800563e:	4b07      	ldr	r3, [pc, #28]	; (800565c <xTimerGenericCommand+0x98>)
 8005640:	6818      	ldr	r0, [r3, #0]
 8005642:	f107 0110 	add.w	r1, r7, #16
 8005646:	2300      	movs	r3, #0
 8005648:	683a      	ldr	r2, [r7, #0]
 800564a:	f7fe fd61 	bl	8004110 <xQueueGenericSendFromISR>
 800564e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8005650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005652:	4618      	mov	r0, r3
 8005654:	3728      	adds	r7, #40	; 0x28
 8005656:	46bd      	mov	sp, r7
 8005658:	bd80      	pop	{r7, pc}
 800565a:	bf00      	nop
 800565c:	20000e5c 	.word	0x20000e5c

08005660 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8005660:	b580      	push	{r7, lr}
 8005662:	b088      	sub	sp, #32
 8005664:	af02      	add	r7, sp, #8
 8005666:	6078      	str	r0, [r7, #4]
 8005668:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800566a:	4b22      	ldr	r3, [pc, #136]	; (80056f4 <prvProcessExpiredTimer+0x94>)
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68db      	ldr	r3, [r3, #12]
 8005670:	68db      	ldr	r3, [r3, #12]
 8005672:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	3304      	adds	r3, #4
 8005678:	4618      	mov	r0, r3
 800567a:	f7fe fb1d 	bl	8003cb8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800567e:	697b      	ldr	r3, [r7, #20]
 8005680:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005684:	f003 0304 	and.w	r3, r3, #4
 8005688:	2b00      	cmp	r3, #0
 800568a:	d022      	beq.n	80056d2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800568c:	697b      	ldr	r3, [r7, #20]
 800568e:	699a      	ldr	r2, [r3, #24]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	18d1      	adds	r1, r2, r3
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	683a      	ldr	r2, [r7, #0]
 8005698:	6978      	ldr	r0, [r7, #20]
 800569a:	f000 f8d1 	bl	8005840 <prvInsertTimerInActiveList>
 800569e:	4603      	mov	r3, r0
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d01f      	beq.n	80056e4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80056a4:	2300      	movs	r3, #0
 80056a6:	9300      	str	r3, [sp, #0]
 80056a8:	2300      	movs	r3, #0
 80056aa:	687a      	ldr	r2, [r7, #4]
 80056ac:	2100      	movs	r1, #0
 80056ae:	6978      	ldr	r0, [r7, #20]
 80056b0:	f7ff ff88 	bl	80055c4 <xTimerGenericCommand>
 80056b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 80056b6:	693b      	ldr	r3, [r7, #16]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d113      	bne.n	80056e4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 80056bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056c0:	f383 8811 	msr	BASEPRI, r3
 80056c4:	f3bf 8f6f 	isb	sy
 80056c8:	f3bf 8f4f 	dsb	sy
 80056cc:	60fb      	str	r3, [r7, #12]
}
 80056ce:	bf00      	nop
 80056d0:	e7fe      	b.n	80056d0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80056d2:	697b      	ldr	r3, [r7, #20]
 80056d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80056d8:	f023 0301 	bic.w	r3, r3, #1
 80056dc:	b2da      	uxtb	r2, r3
 80056de:	697b      	ldr	r3, [r7, #20]
 80056e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80056e4:	697b      	ldr	r3, [r7, #20]
 80056e6:	6a1b      	ldr	r3, [r3, #32]
 80056e8:	6978      	ldr	r0, [r7, #20]
 80056ea:	4798      	blx	r3
}
 80056ec:	bf00      	nop
 80056ee:	3718      	adds	r7, #24
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	20000e54 	.word	0x20000e54

080056f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80056f8:	b580      	push	{r7, lr}
 80056fa:	b084      	sub	sp, #16
 80056fc:	af00      	add	r7, sp, #0
 80056fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8005700:	f107 0308 	add.w	r3, r7, #8
 8005704:	4618      	mov	r0, r3
 8005706:	f000 f857 	bl	80057b8 <prvGetNextExpireTime>
 800570a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4619      	mov	r1, r3
 8005710:	68f8      	ldr	r0, [r7, #12]
 8005712:	f000 f803 	bl	800571c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8005716:	f000 f8d5 	bl	80058c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800571a:	e7f1      	b.n	8005700 <prvTimerTask+0x8>

0800571c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8005726:	f7ff fa39 	bl	8004b9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800572a:	f107 0308 	add.w	r3, r7, #8
 800572e:	4618      	mov	r0, r3
 8005730:	f000 f866 	bl	8005800 <prvSampleTimeNow>
 8005734:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8005736:	68bb      	ldr	r3, [r7, #8]
 8005738:	2b00      	cmp	r3, #0
 800573a:	d130      	bne.n	800579e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800573c:	683b      	ldr	r3, [r7, #0]
 800573e:	2b00      	cmp	r3, #0
 8005740:	d10a      	bne.n	8005758 <prvProcessTimerOrBlockTask+0x3c>
 8005742:	687a      	ldr	r2, [r7, #4]
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	429a      	cmp	r2, r3
 8005748:	d806      	bhi.n	8005758 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800574a:	f7ff fa35 	bl	8004bb8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800574e:	68f9      	ldr	r1, [r7, #12]
 8005750:	6878      	ldr	r0, [r7, #4]
 8005752:	f7ff ff85 	bl	8005660 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8005756:	e024      	b.n	80057a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8005758:	683b      	ldr	r3, [r7, #0]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d008      	beq.n	8005770 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800575e:	4b13      	ldr	r3, [pc, #76]	; (80057ac <prvProcessTimerOrBlockTask+0x90>)
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d101      	bne.n	800576c <prvProcessTimerOrBlockTask+0x50>
 8005768:	2301      	movs	r3, #1
 800576a:	e000      	b.n	800576e <prvProcessTimerOrBlockTask+0x52>
 800576c:	2300      	movs	r3, #0
 800576e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8005770:	4b0f      	ldr	r3, [pc, #60]	; (80057b0 <prvProcessTimerOrBlockTask+0x94>)
 8005772:	6818      	ldr	r0, [r3, #0]
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	68fb      	ldr	r3, [r7, #12]
 8005778:	1ad3      	subs	r3, r2, r3
 800577a:	683a      	ldr	r2, [r7, #0]
 800577c:	4619      	mov	r1, r3
 800577e:	f7fe ff7d 	bl	800467c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8005782:	f7ff fa19 	bl	8004bb8 <xTaskResumeAll>
 8005786:	4603      	mov	r3, r0
 8005788:	2b00      	cmp	r3, #0
 800578a:	d10a      	bne.n	80057a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800578c:	4b09      	ldr	r3, [pc, #36]	; (80057b4 <prvProcessTimerOrBlockTask+0x98>)
 800578e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005792:	601a      	str	r2, [r3, #0]
 8005794:	f3bf 8f4f 	dsb	sy
 8005798:	f3bf 8f6f 	isb	sy
}
 800579c:	e001      	b.n	80057a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800579e:	f7ff fa0b 	bl	8004bb8 <xTaskResumeAll>
}
 80057a2:	bf00      	nop
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	bd80      	pop	{r7, pc}
 80057aa:	bf00      	nop
 80057ac:	20000e58 	.word	0x20000e58
 80057b0:	20000e5c 	.word	0x20000e5c
 80057b4:	e000ed04 	.word	0xe000ed04

080057b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80057b8:	b480      	push	{r7}
 80057ba:	b085      	sub	sp, #20
 80057bc:	af00      	add	r7, sp, #0
 80057be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80057c0:	4b0e      	ldr	r3, [pc, #56]	; (80057fc <prvGetNextExpireTime+0x44>)
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <prvGetNextExpireTime+0x16>
 80057ca:	2201      	movs	r2, #1
 80057cc:	e000      	b.n	80057d0 <prvGetNextExpireTime+0x18>
 80057ce:	2200      	movs	r2, #0
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d105      	bne.n	80057e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80057dc:	4b07      	ldr	r3, [pc, #28]	; (80057fc <prvGetNextExpireTime+0x44>)
 80057de:	681b      	ldr	r3, [r3, #0]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	60fb      	str	r3, [r7, #12]
 80057e6:	e001      	b.n	80057ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80057e8:	2300      	movs	r3, #0
 80057ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80057ec:	68fb      	ldr	r3, [r7, #12]
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3714      	adds	r7, #20
 80057f2:	46bd      	mov	sp, r7
 80057f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057f8:	4770      	bx	lr
 80057fa:	bf00      	nop
 80057fc:	20000e54 	.word	0x20000e54

08005800 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b084      	sub	sp, #16
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8005808:	f7ff fa74 	bl	8004cf4 <xTaskGetTickCount>
 800580c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800580e:	4b0b      	ldr	r3, [pc, #44]	; (800583c <prvSampleTimeNow+0x3c>)
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	68fa      	ldr	r2, [r7, #12]
 8005814:	429a      	cmp	r2, r3
 8005816:	d205      	bcs.n	8005824 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8005818:	f000 f936 	bl	8005a88 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	2201      	movs	r2, #1
 8005820:	601a      	str	r2, [r3, #0]
 8005822:	e002      	b.n	800582a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800582a:	4a04      	ldr	r2, [pc, #16]	; (800583c <prvSampleTimeNow+0x3c>)
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8005830:	68fb      	ldr	r3, [r7, #12]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}
 800583a:	bf00      	nop
 800583c:	20000e64 	.word	0x20000e64

08005840 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b086      	sub	sp, #24
 8005844:	af00      	add	r7, sp, #0
 8005846:	60f8      	str	r0, [r7, #12]
 8005848:	60b9      	str	r1, [r7, #8]
 800584a:	607a      	str	r2, [r7, #4]
 800584c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800584e:	2300      	movs	r3, #0
 8005850:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	68ba      	ldr	r2, [r7, #8]
 8005856:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	68fa      	ldr	r2, [r7, #12]
 800585c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800585e:	68ba      	ldr	r2, [r7, #8]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	429a      	cmp	r2, r3
 8005864:	d812      	bhi.n	800588c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005866:	687a      	ldr	r2, [r7, #4]
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	1ad2      	subs	r2, r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	699b      	ldr	r3, [r3, #24]
 8005870:	429a      	cmp	r2, r3
 8005872:	d302      	bcc.n	800587a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8005874:	2301      	movs	r3, #1
 8005876:	617b      	str	r3, [r7, #20]
 8005878:	e01b      	b.n	80058b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800587a:	4b10      	ldr	r3, [pc, #64]	; (80058bc <prvInsertTimerInActiveList+0x7c>)
 800587c:	681a      	ldr	r2, [r3, #0]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	3304      	adds	r3, #4
 8005882:	4619      	mov	r1, r3
 8005884:	4610      	mov	r0, r2
 8005886:	f7fe f9de 	bl	8003c46 <vListInsert>
 800588a:	e012      	b.n	80058b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800588c:	687a      	ldr	r2, [r7, #4]
 800588e:	683b      	ldr	r3, [r7, #0]
 8005890:	429a      	cmp	r2, r3
 8005892:	d206      	bcs.n	80058a2 <prvInsertTimerInActiveList+0x62>
 8005894:	68ba      	ldr	r2, [r7, #8]
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	429a      	cmp	r2, r3
 800589a:	d302      	bcc.n	80058a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800589c:	2301      	movs	r3, #1
 800589e:	617b      	str	r3, [r7, #20]
 80058a0:	e007      	b.n	80058b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80058a2:	4b07      	ldr	r3, [pc, #28]	; (80058c0 <prvInsertTimerInActiveList+0x80>)
 80058a4:	681a      	ldr	r2, [r3, #0]
 80058a6:	68fb      	ldr	r3, [r7, #12]
 80058a8:	3304      	adds	r3, #4
 80058aa:	4619      	mov	r1, r3
 80058ac:	4610      	mov	r0, r2
 80058ae:	f7fe f9ca 	bl	8003c46 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80058b2:	697b      	ldr	r3, [r7, #20]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3718      	adds	r7, #24
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}
 80058bc:	20000e58 	.word	0x20000e58
 80058c0:	20000e54 	.word	0x20000e54

080058c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80058c4:	b580      	push	{r7, lr}
 80058c6:	b08e      	sub	sp, #56	; 0x38
 80058c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80058ca:	e0ca      	b.n	8005a62 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	da18      	bge.n	8005904 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80058d2:	1d3b      	adds	r3, r7, #4
 80058d4:	3304      	adds	r3, #4
 80058d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80058d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058da:	2b00      	cmp	r3, #0
 80058dc:	d10a      	bne.n	80058f4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 80058de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80058e2:	f383 8811 	msr	BASEPRI, r3
 80058e6:	f3bf 8f6f 	isb	sy
 80058ea:	f3bf 8f4f 	dsb	sy
 80058ee:	61fb      	str	r3, [r7, #28]
}
 80058f0:	bf00      	nop
 80058f2:	e7fe      	b.n	80058f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80058f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f6:	681b      	ldr	r3, [r3, #0]
 80058f8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058fa:	6850      	ldr	r0, [r2, #4]
 80058fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80058fe:	6892      	ldr	r2, [r2, #8]
 8005900:	4611      	mov	r1, r2
 8005902:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	2b00      	cmp	r3, #0
 8005908:	f2c0 80aa 	blt.w	8005a60 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8005910:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005912:	695b      	ldr	r3, [r3, #20]
 8005914:	2b00      	cmp	r3, #0
 8005916:	d004      	beq.n	8005922 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800591a:	3304      	adds	r3, #4
 800591c:	4618      	mov	r0, r3
 800591e:	f7fe f9cb 	bl	8003cb8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8005922:	463b      	mov	r3, r7
 8005924:	4618      	mov	r0, r3
 8005926:	f7ff ff6b 	bl	8005800 <prvSampleTimeNow>
 800592a:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	2b09      	cmp	r3, #9
 8005930:	f200 8097 	bhi.w	8005a62 <prvProcessReceivedCommands+0x19e>
 8005934:	a201      	add	r2, pc, #4	; (adr r2, 800593c <prvProcessReceivedCommands+0x78>)
 8005936:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800593a:	bf00      	nop
 800593c:	08005965 	.word	0x08005965
 8005940:	08005965 	.word	0x08005965
 8005944:	08005965 	.word	0x08005965
 8005948:	080059d9 	.word	0x080059d9
 800594c:	080059ed 	.word	0x080059ed
 8005950:	08005a37 	.word	0x08005a37
 8005954:	08005965 	.word	0x08005965
 8005958:	08005965 	.word	0x08005965
 800595c:	080059d9 	.word	0x080059d9
 8005960:	080059ed 	.word	0x080059ed
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8005964:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005966:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800596a:	f043 0301 	orr.w	r3, r3, #1
 800596e:	b2da      	uxtb	r2, r3
 8005970:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005972:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8005976:	68ba      	ldr	r2, [r7, #8]
 8005978:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800597a:	699b      	ldr	r3, [r3, #24]
 800597c:	18d1      	adds	r1, r2, r3
 800597e:	68bb      	ldr	r3, [r7, #8]
 8005980:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005982:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005984:	f7ff ff5c 	bl	8005840 <prvInsertTimerInActiveList>
 8005988:	4603      	mov	r3, r0
 800598a:	2b00      	cmp	r3, #0
 800598c:	d069      	beq.n	8005a62 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800598e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005990:	6a1b      	ldr	r3, [r3, #32]
 8005992:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005994:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005998:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800599c:	f003 0304 	and.w	r3, r3, #4
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d05e      	beq.n	8005a62 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 80059a4:	68ba      	ldr	r2, [r7, #8]
 80059a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	441a      	add	r2, r3
 80059ac:	2300      	movs	r3, #0
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	2300      	movs	r3, #0
 80059b2:	2100      	movs	r1, #0
 80059b4:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80059b6:	f7ff fe05 	bl	80055c4 <xTimerGenericCommand>
 80059ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80059bc:	6a3b      	ldr	r3, [r7, #32]
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d14f      	bne.n	8005a62 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 80059c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80059c6:	f383 8811 	msr	BASEPRI, r3
 80059ca:	f3bf 8f6f 	isb	sy
 80059ce:	f3bf 8f4f 	dsb	sy
 80059d2:	61bb      	str	r3, [r7, #24]
}
 80059d4:	bf00      	nop
 80059d6:	e7fe      	b.n	80059d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80059d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059de:	f023 0301 	bic.w	r3, r3, #1
 80059e2:	b2da      	uxtb	r2, r3
 80059e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 80059ea:	e03a      	b.n	8005a62 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80059ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ee:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80059f2:	f043 0301 	orr.w	r3, r3, #1
 80059f6:	b2da      	uxtb	r2, r3
 80059f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059fa:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80059fe:	68ba      	ldr	r2, [r7, #8]
 8005a00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a02:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8005a04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a06:	699b      	ldr	r3, [r3, #24]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10a      	bne.n	8005a22 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8005a0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005a10:	f383 8811 	msr	BASEPRI, r3
 8005a14:	f3bf 8f6f 	isb	sy
 8005a18:	f3bf 8f4f 	dsb	sy
 8005a1c:	617b      	str	r3, [r7, #20]
}
 8005a1e:	bf00      	nop
 8005a20:	e7fe      	b.n	8005a20 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8005a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a24:	699a      	ldr	r2, [r3, #24]
 8005a26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a28:	18d1      	adds	r1, r2, r3
 8005a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005a2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a30:	f7ff ff06 	bl	8005840 <prvInsertTimerInActiveList>
					break;
 8005a34:	e015      	b.n	8005a62 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8005a36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a38:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a3c:	f003 0302 	and.w	r3, r3, #2
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d103      	bne.n	8005a4c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8005a44:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005a46:	f000 fbdb 	bl	8006200 <vPortFree>
 8005a4a:	e00a      	b.n	8005a62 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8005a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a4e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005a52:	f023 0301 	bic.w	r3, r3, #1
 8005a56:	b2da      	uxtb	r2, r3
 8005a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8005a5e:	e000      	b.n	8005a62 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 8005a60:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8005a62:	4b08      	ldr	r3, [pc, #32]	; (8005a84 <prvProcessReceivedCommands+0x1c0>)
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	1d39      	adds	r1, r7, #4
 8005a68:	2200      	movs	r2, #0
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fe fbec 	bl	8004248 <xQueueReceive>
 8005a70:	4603      	mov	r3, r0
 8005a72:	2b00      	cmp	r3, #0
 8005a74:	f47f af2a 	bne.w	80058cc <prvProcessReceivedCommands+0x8>
	}
}
 8005a78:	bf00      	nop
 8005a7a:	bf00      	nop
 8005a7c:	3730      	adds	r7, #48	; 0x30
 8005a7e:	46bd      	mov	sp, r7
 8005a80:	bd80      	pop	{r7, pc}
 8005a82:	bf00      	nop
 8005a84:	20000e5c 	.word	0x20000e5c

08005a88 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b088      	sub	sp, #32
 8005a8c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005a8e:	e048      	b.n	8005b22 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8005a90:	4b2d      	ldr	r3, [pc, #180]	; (8005b48 <prvSwitchTimerLists+0xc0>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a9a:	4b2b      	ldr	r3, [pc, #172]	; (8005b48 <prvSwitchTimerLists+0xc0>)
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	68db      	ldr	r3, [r3, #12]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fe f905 	bl	8003cb8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6a1b      	ldr	r3, [r3, #32]
 8005ab2:	68f8      	ldr	r0, [r7, #12]
 8005ab4:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d02e      	beq.n	8005b22 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	699b      	ldr	r3, [r3, #24]
 8005ac8:	693a      	ldr	r2, [r7, #16]
 8005aca:	4413      	add	r3, r2
 8005acc:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8005ace:	68ba      	ldr	r2, [r7, #8]
 8005ad0:	693b      	ldr	r3, [r7, #16]
 8005ad2:	429a      	cmp	r2, r3
 8005ad4:	d90e      	bls.n	8005af4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	68fa      	ldr	r2, [r7, #12]
 8005ae0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8005ae2:	4b19      	ldr	r3, [pc, #100]	; (8005b48 <prvSwitchTimerLists+0xc0>)
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	3304      	adds	r3, #4
 8005aea:	4619      	mov	r1, r3
 8005aec:	4610      	mov	r0, r2
 8005aee:	f7fe f8aa 	bl	8003c46 <vListInsert>
 8005af2:	e016      	b.n	8005b22 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8005af4:	2300      	movs	r3, #0
 8005af6:	9300      	str	r3, [sp, #0]
 8005af8:	2300      	movs	r3, #0
 8005afa:	693a      	ldr	r2, [r7, #16]
 8005afc:	2100      	movs	r1, #0
 8005afe:	68f8      	ldr	r0, [r7, #12]
 8005b00:	f7ff fd60 	bl	80055c4 <xTimerGenericCommand>
 8005b04:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d10a      	bne.n	8005b22 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8005b0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b10:	f383 8811 	msr	BASEPRI, r3
 8005b14:	f3bf 8f6f 	isb	sy
 8005b18:	f3bf 8f4f 	dsb	sy
 8005b1c:	603b      	str	r3, [r7, #0]
}
 8005b1e:	bf00      	nop
 8005b20:	e7fe      	b.n	8005b20 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8005b22:	4b09      	ldr	r3, [pc, #36]	; (8005b48 <prvSwitchTimerLists+0xc0>)
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1b1      	bne.n	8005a90 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8005b2c:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <prvSwitchTimerLists+0xc0>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8005b32:	4b06      	ldr	r3, [pc, #24]	; (8005b4c <prvSwitchTimerLists+0xc4>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	4a04      	ldr	r2, [pc, #16]	; (8005b48 <prvSwitchTimerLists+0xc0>)
 8005b38:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8005b3a:	4a04      	ldr	r2, [pc, #16]	; (8005b4c <prvSwitchTimerLists+0xc4>)
 8005b3c:	697b      	ldr	r3, [r7, #20]
 8005b3e:	6013      	str	r3, [r2, #0]
}
 8005b40:	bf00      	nop
 8005b42:	3718      	adds	r7, #24
 8005b44:	46bd      	mov	sp, r7
 8005b46:	bd80      	pop	{r7, pc}
 8005b48:	20000e54 	.word	0x20000e54
 8005b4c:	20000e58 	.word	0x20000e58

08005b50 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8005b56:	f000 f965 	bl	8005e24 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8005b5a:	4b15      	ldr	r3, [pc, #84]	; (8005bb0 <prvCheckForValidListAndQueue+0x60>)
 8005b5c:	681b      	ldr	r3, [r3, #0]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d120      	bne.n	8005ba4 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8005b62:	4814      	ldr	r0, [pc, #80]	; (8005bb4 <prvCheckForValidListAndQueue+0x64>)
 8005b64:	f7fe f81e 	bl	8003ba4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8005b68:	4813      	ldr	r0, [pc, #76]	; (8005bb8 <prvCheckForValidListAndQueue+0x68>)
 8005b6a:	f7fe f81b 	bl	8003ba4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8005b6e:	4b13      	ldr	r3, [pc, #76]	; (8005bbc <prvCheckForValidListAndQueue+0x6c>)
 8005b70:	4a10      	ldr	r2, [pc, #64]	; (8005bb4 <prvCheckForValidListAndQueue+0x64>)
 8005b72:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8005b74:	4b12      	ldr	r3, [pc, #72]	; (8005bc0 <prvCheckForValidListAndQueue+0x70>)
 8005b76:	4a10      	ldr	r2, [pc, #64]	; (8005bb8 <prvCheckForValidListAndQueue+0x68>)
 8005b78:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	9300      	str	r3, [sp, #0]
 8005b7e:	4b11      	ldr	r3, [pc, #68]	; (8005bc4 <prvCheckForValidListAndQueue+0x74>)
 8005b80:	4a11      	ldr	r2, [pc, #68]	; (8005bc8 <prvCheckForValidListAndQueue+0x78>)
 8005b82:	2110      	movs	r1, #16
 8005b84:	200a      	movs	r0, #10
 8005b86:	f7fe f929 	bl	8003ddc <xQueueGenericCreateStatic>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	4a08      	ldr	r2, [pc, #32]	; (8005bb0 <prvCheckForValidListAndQueue+0x60>)
 8005b8e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8005b90:	4b07      	ldr	r3, [pc, #28]	; (8005bb0 <prvCheckForValidListAndQueue+0x60>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d005      	beq.n	8005ba4 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8005b98:	4b05      	ldr	r3, [pc, #20]	; (8005bb0 <prvCheckForValidListAndQueue+0x60>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	490b      	ldr	r1, [pc, #44]	; (8005bcc <prvCheckForValidListAndQueue+0x7c>)
 8005b9e:	4618      	mov	r0, r3
 8005ba0:	f7fe fd42 	bl	8004628 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005ba4:	f000 f96e 	bl	8005e84 <vPortExitCritical>
}
 8005ba8:	bf00      	nop
 8005baa:	46bd      	mov	sp, r7
 8005bac:	bd80      	pop	{r7, pc}
 8005bae:	bf00      	nop
 8005bb0:	20000e5c 	.word	0x20000e5c
 8005bb4:	20000e2c 	.word	0x20000e2c
 8005bb8:	20000e40 	.word	0x20000e40
 8005bbc:	20000e54 	.word	0x20000e54
 8005bc0:	20000e58 	.word	0x20000e58
 8005bc4:	20000f08 	.word	0x20000f08
 8005bc8:	20000e68 	.word	0x20000e68
 8005bcc:	08006690 	.word	0x08006690

08005bd0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8005bd0:	b480      	push	{r7}
 8005bd2:	b085      	sub	sp, #20
 8005bd4:	af00      	add	r7, sp, #0
 8005bd6:	60f8      	str	r0, [r7, #12]
 8005bd8:	60b9      	str	r1, [r7, #8]
 8005bda:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	3b04      	subs	r3, #4
 8005be0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8005be8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3b04      	subs	r3, #4
 8005bee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8005bf0:	68bb      	ldr	r3, [r7, #8]
 8005bf2:	f023 0201 	bic.w	r2, r3, #1
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8005bfa:	68fb      	ldr	r3, [r7, #12]
 8005bfc:	3b04      	subs	r3, #4
 8005bfe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8005c00:	4a0c      	ldr	r2, [pc, #48]	; (8005c34 <pxPortInitialiseStack+0x64>)
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	3b14      	subs	r3, #20
 8005c0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8005c0c:	687a      	ldr	r2, [r7, #4]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	3b04      	subs	r3, #4
 8005c16:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f06f 0202 	mvn.w	r2, #2
 8005c1e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	3b20      	subs	r3, #32
 8005c24:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8005c26:	68fb      	ldr	r3, [r7, #12]
}
 8005c28:	4618      	mov	r0, r3
 8005c2a:	3714      	adds	r7, #20
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr
 8005c34:	08005c39 	.word	0x08005c39

08005c38 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8005c38:	b480      	push	{r7}
 8005c3a:	b085      	sub	sp, #20
 8005c3c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005c42:	4b12      	ldr	r3, [pc, #72]	; (8005c8c <prvTaskExitError+0x54>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005c4a:	d00a      	beq.n	8005c62 <prvTaskExitError+0x2a>
	__asm volatile
 8005c4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c50:	f383 8811 	msr	BASEPRI, r3
 8005c54:	f3bf 8f6f 	isb	sy
 8005c58:	f3bf 8f4f 	dsb	sy
 8005c5c:	60fb      	str	r3, [r7, #12]
}
 8005c5e:	bf00      	nop
 8005c60:	e7fe      	b.n	8005c60 <prvTaskExitError+0x28>
	__asm volatile
 8005c62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c66:	f383 8811 	msr	BASEPRI, r3
 8005c6a:	f3bf 8f6f 	isb	sy
 8005c6e:	f3bf 8f4f 	dsb	sy
 8005c72:	60bb      	str	r3, [r7, #8]
}
 8005c74:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005c76:	bf00      	nop
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d0fc      	beq.n	8005c78 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8005c7e:	bf00      	nop
 8005c80:	bf00      	nop
 8005c82:	3714      	adds	r7, #20
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr
 8005c8c:	2000000c 	.word	0x2000000c

08005c90 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005c90:	4b07      	ldr	r3, [pc, #28]	; (8005cb0 <pxCurrentTCBConst2>)
 8005c92:	6819      	ldr	r1, [r3, #0]
 8005c94:	6808      	ldr	r0, [r1, #0]
 8005c96:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c9a:	f380 8809 	msr	PSP, r0
 8005c9e:	f3bf 8f6f 	isb	sy
 8005ca2:	f04f 0000 	mov.w	r0, #0
 8005ca6:	f380 8811 	msr	BASEPRI, r0
 8005caa:	4770      	bx	lr
 8005cac:	f3af 8000 	nop.w

08005cb0 <pxCurrentTCBConst2>:
 8005cb0:	2000092c 	.word	0x2000092c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005cb4:	bf00      	nop
 8005cb6:	bf00      	nop

08005cb8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005cb8:	4808      	ldr	r0, [pc, #32]	; (8005cdc <prvPortStartFirstTask+0x24>)
 8005cba:	6800      	ldr	r0, [r0, #0]
 8005cbc:	6800      	ldr	r0, [r0, #0]
 8005cbe:	f380 8808 	msr	MSP, r0
 8005cc2:	f04f 0000 	mov.w	r0, #0
 8005cc6:	f380 8814 	msr	CONTROL, r0
 8005cca:	b662      	cpsie	i
 8005ccc:	b661      	cpsie	f
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	f3bf 8f6f 	isb	sy
 8005cd6:	df00      	svc	0
 8005cd8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8005cda:	bf00      	nop
 8005cdc:	e000ed08 	.word	0xe000ed08

08005ce0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8005ce0:	b580      	push	{r7, lr}
 8005ce2:	b086      	sub	sp, #24
 8005ce4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8005ce6:	4b46      	ldr	r3, [pc, #280]	; (8005e00 <xPortStartScheduler+0x120>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	4a46      	ldr	r2, [pc, #280]	; (8005e04 <xPortStartScheduler+0x124>)
 8005cec:	4293      	cmp	r3, r2
 8005cee:	d10a      	bne.n	8005d06 <xPortStartScheduler+0x26>
	__asm volatile
 8005cf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cf4:	f383 8811 	msr	BASEPRI, r3
 8005cf8:	f3bf 8f6f 	isb	sy
 8005cfc:	f3bf 8f4f 	dsb	sy
 8005d00:	613b      	str	r3, [r7, #16]
}
 8005d02:	bf00      	nop
 8005d04:	e7fe      	b.n	8005d04 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8005d06:	4b3e      	ldr	r3, [pc, #248]	; (8005e00 <xPortStartScheduler+0x120>)
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	4a3f      	ldr	r2, [pc, #252]	; (8005e08 <xPortStartScheduler+0x128>)
 8005d0c:	4293      	cmp	r3, r2
 8005d0e:	d10a      	bne.n	8005d26 <xPortStartScheduler+0x46>
	__asm volatile
 8005d10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d14:	f383 8811 	msr	BASEPRI, r3
 8005d18:	f3bf 8f6f 	isb	sy
 8005d1c:	f3bf 8f4f 	dsb	sy
 8005d20:	60fb      	str	r3, [r7, #12]
}
 8005d22:	bf00      	nop
 8005d24:	e7fe      	b.n	8005d24 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8005d26:	4b39      	ldr	r3, [pc, #228]	; (8005e0c <xPortStartScheduler+0x12c>)
 8005d28:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	781b      	ldrb	r3, [r3, #0]
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8005d32:	697b      	ldr	r3, [r7, #20]
 8005d34:	22ff      	movs	r2, #255	; 0xff
 8005d36:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005d38:	697b      	ldr	r3, [r7, #20]
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b2db      	uxtb	r3, r3
 8005d3e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8005d40:	78fb      	ldrb	r3, [r7, #3]
 8005d42:	b2db      	uxtb	r3, r3
 8005d44:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005d48:	b2da      	uxtb	r2, r3
 8005d4a:	4b31      	ldr	r3, [pc, #196]	; (8005e10 <xPortStartScheduler+0x130>)
 8005d4c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8005d4e:	4b31      	ldr	r3, [pc, #196]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d50:	2207      	movs	r2, #7
 8005d52:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d54:	e009      	b.n	8005d6a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8005d56:	4b2f      	ldr	r3, [pc, #188]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	3b01      	subs	r3, #1
 8005d5c:	4a2d      	ldr	r2, [pc, #180]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d5e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8005d60:	78fb      	ldrb	r3, [r7, #3]
 8005d62:	b2db      	uxtb	r3, r3
 8005d64:	005b      	lsls	r3, r3, #1
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005d6a:	78fb      	ldrb	r3, [r7, #3]
 8005d6c:	b2db      	uxtb	r3, r3
 8005d6e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d72:	2b80      	cmp	r3, #128	; 0x80
 8005d74:	d0ef      	beq.n	8005d56 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005d76:	4b27      	ldr	r3, [pc, #156]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f1c3 0307 	rsb	r3, r3, #7
 8005d7e:	2b04      	cmp	r3, #4
 8005d80:	d00a      	beq.n	8005d98 <xPortStartScheduler+0xb8>
	__asm volatile
 8005d82:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d86:	f383 8811 	msr	BASEPRI, r3
 8005d8a:	f3bf 8f6f 	isb	sy
 8005d8e:	f3bf 8f4f 	dsb	sy
 8005d92:	60bb      	str	r3, [r7, #8]
}
 8005d94:	bf00      	nop
 8005d96:	e7fe      	b.n	8005d96 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005d98:	4b1e      	ldr	r3, [pc, #120]	; (8005e14 <xPortStartScheduler+0x134>)
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	021b      	lsls	r3, r3, #8
 8005d9e:	4a1d      	ldr	r2, [pc, #116]	; (8005e14 <xPortStartScheduler+0x134>)
 8005da0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8005da2:	4b1c      	ldr	r3, [pc, #112]	; (8005e14 <xPortStartScheduler+0x134>)
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005daa:	4a1a      	ldr	r2, [pc, #104]	; (8005e14 <xPortStartScheduler+0x134>)
 8005dac:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	b2da      	uxtb	r2, r3
 8005db2:	697b      	ldr	r3, [r7, #20]
 8005db4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005db6:	4b18      	ldr	r3, [pc, #96]	; (8005e18 <xPortStartScheduler+0x138>)
 8005db8:	681b      	ldr	r3, [r3, #0]
 8005dba:	4a17      	ldr	r2, [pc, #92]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dbc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8005dc0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8005dc2:	4b15      	ldr	r3, [pc, #84]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	4a14      	ldr	r2, [pc, #80]	; (8005e18 <xPortStartScheduler+0x138>)
 8005dc8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005dcc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005dce:	f000 f8dd 	bl	8005f8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8005dd2:	4b12      	ldr	r3, [pc, #72]	; (8005e1c <xPortStartScheduler+0x13c>)
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8005dd8:	f000 f8fc 	bl	8005fd4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8005ddc:	4b10      	ldr	r3, [pc, #64]	; (8005e20 <xPortStartScheduler+0x140>)
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <xPortStartScheduler+0x140>)
 8005de2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8005de6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8005de8:	f7ff ff66 	bl	8005cb8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8005dec:	f7ff f84c 	bl	8004e88 <vTaskSwitchContext>
	prvTaskExitError();
 8005df0:	f7ff ff22 	bl	8005c38 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8005df4:	2300      	movs	r3, #0
}
 8005df6:	4618      	mov	r0, r3
 8005df8:	3718      	adds	r7, #24
 8005dfa:	46bd      	mov	sp, r7
 8005dfc:	bd80      	pop	{r7, pc}
 8005dfe:	bf00      	nop
 8005e00:	e000ed00 	.word	0xe000ed00
 8005e04:	410fc271 	.word	0x410fc271
 8005e08:	410fc270 	.word	0x410fc270
 8005e0c:	e000e400 	.word	0xe000e400
 8005e10:	20000f58 	.word	0x20000f58
 8005e14:	20000f5c 	.word	0x20000f5c
 8005e18:	e000ed20 	.word	0xe000ed20
 8005e1c:	2000000c 	.word	0x2000000c
 8005e20:	e000ef34 	.word	0xe000ef34

08005e24 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8005e24:	b480      	push	{r7}
 8005e26:	b083      	sub	sp, #12
 8005e28:	af00      	add	r7, sp, #0
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	607b      	str	r3, [r7, #4]
}
 8005e3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005e3e:	4b0f      	ldr	r3, [pc, #60]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	3301      	adds	r3, #1
 8005e44:	4a0d      	ldr	r2, [pc, #52]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e46:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8005e48:	4b0c      	ldr	r3, [pc, #48]	; (8005e7c <vPortEnterCritical+0x58>)
 8005e4a:	681b      	ldr	r3, [r3, #0]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d10f      	bne.n	8005e70 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005e50:	4b0b      	ldr	r3, [pc, #44]	; (8005e80 <vPortEnterCritical+0x5c>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	b2db      	uxtb	r3, r3
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d00a      	beq.n	8005e70 <vPortEnterCritical+0x4c>
	__asm volatile
 8005e5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e5e:	f383 8811 	msr	BASEPRI, r3
 8005e62:	f3bf 8f6f 	isb	sy
 8005e66:	f3bf 8f4f 	dsb	sy
 8005e6a:	603b      	str	r3, [r7, #0]
}
 8005e6c:	bf00      	nop
 8005e6e:	e7fe      	b.n	8005e6e <vPortEnterCritical+0x4a>
	}
}
 8005e70:	bf00      	nop
 8005e72:	370c      	adds	r7, #12
 8005e74:	46bd      	mov	sp, r7
 8005e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7a:	4770      	bx	lr
 8005e7c:	2000000c 	.word	0x2000000c
 8005e80:	e000ed04 	.word	0xe000ed04

08005e84 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005e84:	b480      	push	{r7}
 8005e86:	b083      	sub	sp, #12
 8005e88:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8005e8a:	4b12      	ldr	r3, [pc, #72]	; (8005ed4 <vPortExitCritical+0x50>)
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d10a      	bne.n	8005ea8 <vPortExitCritical+0x24>
	__asm volatile
 8005e92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005e96:	f383 8811 	msr	BASEPRI, r3
 8005e9a:	f3bf 8f6f 	isb	sy
 8005e9e:	f3bf 8f4f 	dsb	sy
 8005ea2:	607b      	str	r3, [r7, #4]
}
 8005ea4:	bf00      	nop
 8005ea6:	e7fe      	b.n	8005ea6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8005ea8:	4b0a      	ldr	r3, [pc, #40]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	3b01      	subs	r3, #1
 8005eae:	4a09      	ldr	r2, [pc, #36]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eb0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005eb2:	4b08      	ldr	r3, [pc, #32]	; (8005ed4 <vPortExitCritical+0x50>)
 8005eb4:	681b      	ldr	r3, [r3, #0]
 8005eb6:	2b00      	cmp	r3, #0
 8005eb8:	d105      	bne.n	8005ec6 <vPortExitCritical+0x42>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	f383 8811 	msr	BASEPRI, r3
}
 8005ec4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr
 8005ed2:	bf00      	nop
 8005ed4:	2000000c 	.word	0x2000000c
	...

08005ee0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8005ee0:	f3ef 8009 	mrs	r0, PSP
 8005ee4:	f3bf 8f6f 	isb	sy
 8005ee8:	4b15      	ldr	r3, [pc, #84]	; (8005f40 <pxCurrentTCBConst>)
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	f01e 0f10 	tst.w	lr, #16
 8005ef0:	bf08      	it	eq
 8005ef2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8005ef6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005efa:	6010      	str	r0, [r2, #0]
 8005efc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8005f00:	f04f 0050 	mov.w	r0, #80	; 0x50
 8005f04:	f380 8811 	msr	BASEPRI, r0
 8005f08:	f3bf 8f4f 	dsb	sy
 8005f0c:	f3bf 8f6f 	isb	sy
 8005f10:	f7fe ffba 	bl	8004e88 <vTaskSwitchContext>
 8005f14:	f04f 0000 	mov.w	r0, #0
 8005f18:	f380 8811 	msr	BASEPRI, r0
 8005f1c:	bc09      	pop	{r0, r3}
 8005f1e:	6819      	ldr	r1, [r3, #0]
 8005f20:	6808      	ldr	r0, [r1, #0]
 8005f22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f26:	f01e 0f10 	tst.w	lr, #16
 8005f2a:	bf08      	it	eq
 8005f2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8005f30:	f380 8809 	msr	PSP, r0
 8005f34:	f3bf 8f6f 	isb	sy
 8005f38:	4770      	bx	lr
 8005f3a:	bf00      	nop
 8005f3c:	f3af 8000 	nop.w

08005f40 <pxCurrentTCBConst>:
 8005f40:	2000092c 	.word	0x2000092c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005f44:	bf00      	nop
 8005f46:	bf00      	nop

08005f48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005f48:	b580      	push	{r7, lr}
 8005f4a:	b082      	sub	sp, #8
 8005f4c:	af00      	add	r7, sp, #0
	__asm volatile
 8005f4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f52:	f383 8811 	msr	BASEPRI, r3
 8005f56:	f3bf 8f6f 	isb	sy
 8005f5a:	f3bf 8f4f 	dsb	sy
 8005f5e:	607b      	str	r3, [r7, #4]
}
 8005f60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005f62:	f7fe fed7 	bl	8004d14 <xTaskIncrementTick>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8005f6c:	4b06      	ldr	r3, [pc, #24]	; (8005f88 <xPortSysTickHandler+0x40>)
 8005f6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f72:	601a      	str	r2, [r3, #0]
 8005f74:	2300      	movs	r3, #0
 8005f76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005f78:	683b      	ldr	r3, [r7, #0]
 8005f7a:	f383 8811 	msr	BASEPRI, r3
}
 8005f7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8005f80:	bf00      	nop
 8005f82:	3708      	adds	r7, #8
 8005f84:	46bd      	mov	sp, r7
 8005f86:	bd80      	pop	{r7, pc}
 8005f88:	e000ed04 	.word	0xe000ed04

08005f8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005f8c:	b480      	push	{r7}
 8005f8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8005f90:	4b0b      	ldr	r3, [pc, #44]	; (8005fc0 <vPortSetupTimerInterrupt+0x34>)
 8005f92:	2200      	movs	r2, #0
 8005f94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005f96:	4b0b      	ldr	r3, [pc, #44]	; (8005fc4 <vPortSetupTimerInterrupt+0x38>)
 8005f98:	2200      	movs	r2, #0
 8005f9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005f9c:	4b0a      	ldr	r3, [pc, #40]	; (8005fc8 <vPortSetupTimerInterrupt+0x3c>)
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	4a0a      	ldr	r2, [pc, #40]	; (8005fcc <vPortSetupTimerInterrupt+0x40>)
 8005fa2:	fba2 2303 	umull	r2, r3, r2, r3
 8005fa6:	099b      	lsrs	r3, r3, #6
 8005fa8:	4a09      	ldr	r2, [pc, #36]	; (8005fd0 <vPortSetupTimerInterrupt+0x44>)
 8005faa:	3b01      	subs	r3, #1
 8005fac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8005fae:	4b04      	ldr	r3, [pc, #16]	; (8005fc0 <vPortSetupTimerInterrupt+0x34>)
 8005fb0:	2207      	movs	r2, #7
 8005fb2:	601a      	str	r2, [r3, #0]
}
 8005fb4:	bf00      	nop
 8005fb6:	46bd      	mov	sp, r7
 8005fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fbc:	4770      	bx	lr
 8005fbe:	bf00      	nop
 8005fc0:	e000e010 	.word	0xe000e010
 8005fc4:	e000e018 	.word	0xe000e018
 8005fc8:	20000000 	.word	0x20000000
 8005fcc:	10624dd3 	.word	0x10624dd3
 8005fd0:	e000e014 	.word	0xe000e014

08005fd4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005fd4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8005fe4 <vPortEnableVFP+0x10>
 8005fd8:	6801      	ldr	r1, [r0, #0]
 8005fda:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8005fde:	6001      	str	r1, [r0, #0]
 8005fe0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8005fe2:	bf00      	nop
 8005fe4:	e000ed88 	.word	0xe000ed88

08005fe8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8005fe8:	b480      	push	{r7}
 8005fea:	b085      	sub	sp, #20
 8005fec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8005fee:	f3ef 8305 	mrs	r3, IPSR
 8005ff2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	2b0f      	cmp	r3, #15
 8005ff8:	d914      	bls.n	8006024 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8005ffa:	4a17      	ldr	r2, [pc, #92]	; (8006058 <vPortValidateInterruptPriority+0x70>)
 8005ffc:	68fb      	ldr	r3, [r7, #12]
 8005ffe:	4413      	add	r3, r2
 8006000:	781b      	ldrb	r3, [r3, #0]
 8006002:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8006004:	4b15      	ldr	r3, [pc, #84]	; (800605c <vPortValidateInterruptPriority+0x74>)
 8006006:	781b      	ldrb	r3, [r3, #0]
 8006008:	7afa      	ldrb	r2, [r7, #11]
 800600a:	429a      	cmp	r2, r3
 800600c:	d20a      	bcs.n	8006024 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800600e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006012:	f383 8811 	msr	BASEPRI, r3
 8006016:	f3bf 8f6f 	isb	sy
 800601a:	f3bf 8f4f 	dsb	sy
 800601e:	607b      	str	r3, [r7, #4]
}
 8006020:	bf00      	nop
 8006022:	e7fe      	b.n	8006022 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8006024:	4b0e      	ldr	r3, [pc, #56]	; (8006060 <vPortValidateInterruptPriority+0x78>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800602c:	4b0d      	ldr	r3, [pc, #52]	; (8006064 <vPortValidateInterruptPriority+0x7c>)
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d90a      	bls.n	800604a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8006034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006038:	f383 8811 	msr	BASEPRI, r3
 800603c:	f3bf 8f6f 	isb	sy
 8006040:	f3bf 8f4f 	dsb	sy
 8006044:	603b      	str	r3, [r7, #0]
}
 8006046:	bf00      	nop
 8006048:	e7fe      	b.n	8006048 <vPortValidateInterruptPriority+0x60>
	}
 800604a:	bf00      	nop
 800604c:	3714      	adds	r7, #20
 800604e:	46bd      	mov	sp, r7
 8006050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006054:	4770      	bx	lr
 8006056:	bf00      	nop
 8006058:	e000e3f0 	.word	0xe000e3f0
 800605c:	20000f58 	.word	0x20000f58
 8006060:	e000ed0c 	.word	0xe000ed0c
 8006064:	20000f5c 	.word	0x20000f5c

08006068 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b08a      	sub	sp, #40	; 0x28
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8006070:	2300      	movs	r3, #0
 8006072:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8006074:	f7fe fd92 	bl	8004b9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8006078:	4b5b      	ldr	r3, [pc, #364]	; (80061e8 <pvPortMalloc+0x180>)
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	2b00      	cmp	r3, #0
 800607e:	d101      	bne.n	8006084 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8006080:	f000 f920 	bl	80062c4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8006084:	4b59      	ldr	r3, [pc, #356]	; (80061ec <pvPortMalloc+0x184>)
 8006086:	681a      	ldr	r2, [r3, #0]
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	4013      	ands	r3, r2
 800608c:	2b00      	cmp	r3, #0
 800608e:	f040 8093 	bne.w	80061b8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8006092:	687b      	ldr	r3, [r7, #4]
 8006094:	2b00      	cmp	r3, #0
 8006096:	d01d      	beq.n	80060d4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8006098:	2208      	movs	r2, #8
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	4413      	add	r3, r2
 800609e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f003 0307 	and.w	r3, r3, #7
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d014      	beq.n	80060d4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f023 0307 	bic.w	r3, r3, #7
 80060b0:	3308      	adds	r3, #8
 80060b2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f003 0307 	and.w	r3, r3, #7
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d00a      	beq.n	80060d4 <pvPortMalloc+0x6c>
	__asm volatile
 80060be:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060c2:	f383 8811 	msr	BASEPRI, r3
 80060c6:	f3bf 8f6f 	isb	sy
 80060ca:	f3bf 8f4f 	dsb	sy
 80060ce:	617b      	str	r3, [r7, #20]
}
 80060d0:	bf00      	nop
 80060d2:	e7fe      	b.n	80060d2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d06e      	beq.n	80061b8 <pvPortMalloc+0x150>
 80060da:	4b45      	ldr	r3, [pc, #276]	; (80061f0 <pvPortMalloc+0x188>)
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	687a      	ldr	r2, [r7, #4]
 80060e0:	429a      	cmp	r2, r3
 80060e2:	d869      	bhi.n	80061b8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80060e4:	4b43      	ldr	r3, [pc, #268]	; (80061f4 <pvPortMalloc+0x18c>)
 80060e6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80060e8:	4b42      	ldr	r3, [pc, #264]	; (80061f4 <pvPortMalloc+0x18c>)
 80060ea:	681b      	ldr	r3, [r3, #0]
 80060ec:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060ee:	e004      	b.n	80060fa <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80060f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80060f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80060fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060fc:	685b      	ldr	r3, [r3, #4]
 80060fe:	687a      	ldr	r2, [r7, #4]
 8006100:	429a      	cmp	r2, r3
 8006102:	d903      	bls.n	800610c <pvPortMalloc+0xa4>
 8006104:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	2b00      	cmp	r3, #0
 800610a:	d1f1      	bne.n	80060f0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800610c:	4b36      	ldr	r3, [pc, #216]	; (80061e8 <pvPortMalloc+0x180>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006112:	429a      	cmp	r2, r3
 8006114:	d050      	beq.n	80061b8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8006116:	6a3b      	ldr	r3, [r7, #32]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2208      	movs	r2, #8
 800611c:	4413      	add	r3, r2
 800611e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8006120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006122:	681a      	ldr	r2, [r3, #0]
 8006124:	6a3b      	ldr	r3, [r7, #32]
 8006126:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8006128:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800612a:	685a      	ldr	r2, [r3, #4]
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	1ad2      	subs	r2, r2, r3
 8006130:	2308      	movs	r3, #8
 8006132:	005b      	lsls	r3, r3, #1
 8006134:	429a      	cmp	r2, r3
 8006136:	d91f      	bls.n	8006178 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8006138:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	4413      	add	r3, r2
 800613e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8006140:	69bb      	ldr	r3, [r7, #24]
 8006142:	f003 0307 	and.w	r3, r3, #7
 8006146:	2b00      	cmp	r3, #0
 8006148:	d00a      	beq.n	8006160 <pvPortMalloc+0xf8>
	__asm volatile
 800614a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800614e:	f383 8811 	msr	BASEPRI, r3
 8006152:	f3bf 8f6f 	isb	sy
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	613b      	str	r3, [r7, #16]
}
 800615c:	bf00      	nop
 800615e:	e7fe      	b.n	800615e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8006160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006162:	685a      	ldr	r2, [r3, #4]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	1ad2      	subs	r2, r2, r3
 8006168:	69bb      	ldr	r3, [r7, #24]
 800616a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800616c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800616e:	687a      	ldr	r2, [r7, #4]
 8006170:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8006172:	69b8      	ldr	r0, [r7, #24]
 8006174:	f000 f908 	bl	8006388 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8006178:	4b1d      	ldr	r3, [pc, #116]	; (80061f0 <pvPortMalloc+0x188>)
 800617a:	681a      	ldr	r2, [r3, #0]
 800617c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800617e:	685b      	ldr	r3, [r3, #4]
 8006180:	1ad3      	subs	r3, r2, r3
 8006182:	4a1b      	ldr	r2, [pc, #108]	; (80061f0 <pvPortMalloc+0x188>)
 8006184:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8006186:	4b1a      	ldr	r3, [pc, #104]	; (80061f0 <pvPortMalloc+0x188>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	4b1b      	ldr	r3, [pc, #108]	; (80061f8 <pvPortMalloc+0x190>)
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	429a      	cmp	r2, r3
 8006190:	d203      	bcs.n	800619a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8006192:	4b17      	ldr	r3, [pc, #92]	; (80061f0 <pvPortMalloc+0x188>)
 8006194:	681b      	ldr	r3, [r3, #0]
 8006196:	4a18      	ldr	r2, [pc, #96]	; (80061f8 <pvPortMalloc+0x190>)
 8006198:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800619a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800619c:	685a      	ldr	r2, [r3, #4]
 800619e:	4b13      	ldr	r3, [pc, #76]	; (80061ec <pvPortMalloc+0x184>)
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	431a      	orrs	r2, r3
 80061a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80061a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061aa:	2200      	movs	r2, #0
 80061ac:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80061ae:	4b13      	ldr	r3, [pc, #76]	; (80061fc <pvPortMalloc+0x194>)
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	3301      	adds	r3, #1
 80061b4:	4a11      	ldr	r2, [pc, #68]	; (80061fc <pvPortMalloc+0x194>)
 80061b6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80061b8:	f7fe fcfe 	bl	8004bb8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80061bc:	69fb      	ldr	r3, [r7, #28]
 80061be:	f003 0307 	and.w	r3, r3, #7
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d00a      	beq.n	80061dc <pvPortMalloc+0x174>
	__asm volatile
 80061c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80061ca:	f383 8811 	msr	BASEPRI, r3
 80061ce:	f3bf 8f6f 	isb	sy
 80061d2:	f3bf 8f4f 	dsb	sy
 80061d6:	60fb      	str	r3, [r7, #12]
}
 80061d8:	bf00      	nop
 80061da:	e7fe      	b.n	80061da <pvPortMalloc+0x172>
	return pvReturn;
 80061dc:	69fb      	ldr	r3, [r7, #28]
}
 80061de:	4618      	mov	r0, r3
 80061e0:	3728      	adds	r7, #40	; 0x28
 80061e2:	46bd      	mov	sp, r7
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	20001b20 	.word	0x20001b20
 80061ec:	20001b34 	.word	0x20001b34
 80061f0:	20001b24 	.word	0x20001b24
 80061f4:	20001b18 	.word	0x20001b18
 80061f8:	20001b28 	.word	0x20001b28
 80061fc:	20001b2c 	.word	0x20001b2c

08006200 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8006200:	b580      	push	{r7, lr}
 8006202:	b086      	sub	sp, #24
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800620c:	687b      	ldr	r3, [r7, #4]
 800620e:	2b00      	cmp	r3, #0
 8006210:	d04d      	beq.n	80062ae <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8006212:	2308      	movs	r3, #8
 8006214:	425b      	negs	r3, r3
 8006216:	697a      	ldr	r2, [r7, #20]
 8006218:	4413      	add	r3, r2
 800621a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8006220:	693b      	ldr	r3, [r7, #16]
 8006222:	685a      	ldr	r2, [r3, #4]
 8006224:	4b24      	ldr	r3, [pc, #144]	; (80062b8 <vPortFree+0xb8>)
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	4013      	ands	r3, r2
 800622a:	2b00      	cmp	r3, #0
 800622c:	d10a      	bne.n	8006244 <vPortFree+0x44>
	__asm volatile
 800622e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006232:	f383 8811 	msr	BASEPRI, r3
 8006236:	f3bf 8f6f 	isb	sy
 800623a:	f3bf 8f4f 	dsb	sy
 800623e:	60fb      	str	r3, [r7, #12]
}
 8006240:	bf00      	nop
 8006242:	e7fe      	b.n	8006242 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8006244:	693b      	ldr	r3, [r7, #16]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	2b00      	cmp	r3, #0
 800624a:	d00a      	beq.n	8006262 <vPortFree+0x62>
	__asm volatile
 800624c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006250:	f383 8811 	msr	BASEPRI, r3
 8006254:	f3bf 8f6f 	isb	sy
 8006258:	f3bf 8f4f 	dsb	sy
 800625c:	60bb      	str	r3, [r7, #8]
}
 800625e:	bf00      	nop
 8006260:	e7fe      	b.n	8006260 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8006262:	693b      	ldr	r3, [r7, #16]
 8006264:	685a      	ldr	r2, [r3, #4]
 8006266:	4b14      	ldr	r3, [pc, #80]	; (80062b8 <vPortFree+0xb8>)
 8006268:	681b      	ldr	r3, [r3, #0]
 800626a:	4013      	ands	r3, r2
 800626c:	2b00      	cmp	r3, #0
 800626e:	d01e      	beq.n	80062ae <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8006270:	693b      	ldr	r3, [r7, #16]
 8006272:	681b      	ldr	r3, [r3, #0]
 8006274:	2b00      	cmp	r3, #0
 8006276:	d11a      	bne.n	80062ae <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8006278:	693b      	ldr	r3, [r7, #16]
 800627a:	685a      	ldr	r2, [r3, #4]
 800627c:	4b0e      	ldr	r3, [pc, #56]	; (80062b8 <vPortFree+0xb8>)
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	43db      	mvns	r3, r3
 8006282:	401a      	ands	r2, r3
 8006284:	693b      	ldr	r3, [r7, #16]
 8006286:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8006288:	f7fe fc88 	bl	8004b9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	4b0a      	ldr	r3, [pc, #40]	; (80062bc <vPortFree+0xbc>)
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	4413      	add	r3, r2
 8006296:	4a09      	ldr	r2, [pc, #36]	; (80062bc <vPortFree+0xbc>)
 8006298:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800629a:	6938      	ldr	r0, [r7, #16]
 800629c:	f000 f874 	bl	8006388 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80062a0:	4b07      	ldr	r3, [pc, #28]	; (80062c0 <vPortFree+0xc0>)
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	3301      	adds	r3, #1
 80062a6:	4a06      	ldr	r2, [pc, #24]	; (80062c0 <vPortFree+0xc0>)
 80062a8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80062aa:	f7fe fc85 	bl	8004bb8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80062ae:	bf00      	nop
 80062b0:	3718      	adds	r7, #24
 80062b2:	46bd      	mov	sp, r7
 80062b4:	bd80      	pop	{r7, pc}
 80062b6:	bf00      	nop
 80062b8:	20001b34 	.word	0x20001b34
 80062bc:	20001b24 	.word	0x20001b24
 80062c0:	20001b30 	.word	0x20001b30

080062c4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80062c4:	b480      	push	{r7}
 80062c6:	b085      	sub	sp, #20
 80062c8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80062ca:	f640 33b8 	movw	r3, #3000	; 0xbb8
 80062ce:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80062d0:	4b27      	ldr	r3, [pc, #156]	; (8006370 <prvHeapInit+0xac>)
 80062d2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	f003 0307 	and.w	r3, r3, #7
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d00c      	beq.n	80062f8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	3307      	adds	r3, #7
 80062e2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	f023 0307 	bic.w	r3, r3, #7
 80062ea:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80062ec:	68ba      	ldr	r2, [r7, #8]
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	1ad3      	subs	r3, r2, r3
 80062f2:	4a1f      	ldr	r2, [pc, #124]	; (8006370 <prvHeapInit+0xac>)
 80062f4:	4413      	add	r3, r2
 80062f6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80062fc:	4a1d      	ldr	r2, [pc, #116]	; (8006374 <prvHeapInit+0xb0>)
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8006302:	4b1c      	ldr	r3, [pc, #112]	; (8006374 <prvHeapInit+0xb0>)
 8006304:	2200      	movs	r2, #0
 8006306:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	68ba      	ldr	r2, [r7, #8]
 800630c:	4413      	add	r3, r2
 800630e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8006310:	2208      	movs	r2, #8
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	1a9b      	subs	r3, r3, r2
 8006316:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	f023 0307 	bic.w	r3, r3, #7
 800631e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8006320:	68fb      	ldr	r3, [r7, #12]
 8006322:	4a15      	ldr	r2, [pc, #84]	; (8006378 <prvHeapInit+0xb4>)
 8006324:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8006326:	4b14      	ldr	r3, [pc, #80]	; (8006378 <prvHeapInit+0xb4>)
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	2200      	movs	r2, #0
 800632c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800632e:	4b12      	ldr	r3, [pc, #72]	; (8006378 <prvHeapInit+0xb4>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	2200      	movs	r2, #0
 8006334:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	1ad2      	subs	r2, r2, r3
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8006344:	4b0c      	ldr	r3, [pc, #48]	; (8006378 <prvHeapInit+0xb4>)
 8006346:	681a      	ldr	r2, [r3, #0]
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800634c:	683b      	ldr	r3, [r7, #0]
 800634e:	685b      	ldr	r3, [r3, #4]
 8006350:	4a0a      	ldr	r2, [pc, #40]	; (800637c <prvHeapInit+0xb8>)
 8006352:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685b      	ldr	r3, [r3, #4]
 8006358:	4a09      	ldr	r2, [pc, #36]	; (8006380 <prvHeapInit+0xbc>)
 800635a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800635c:	4b09      	ldr	r3, [pc, #36]	; (8006384 <prvHeapInit+0xc0>)
 800635e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8006362:	601a      	str	r2, [r3, #0]
}
 8006364:	bf00      	nop
 8006366:	3714      	adds	r7, #20
 8006368:	46bd      	mov	sp, r7
 800636a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636e:	4770      	bx	lr
 8006370:	20000f60 	.word	0x20000f60
 8006374:	20001b18 	.word	0x20001b18
 8006378:	20001b20 	.word	0x20001b20
 800637c:	20001b28 	.word	0x20001b28
 8006380:	20001b24 	.word	0x20001b24
 8006384:	20001b34 	.word	0x20001b34

08006388 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8006388:	b480      	push	{r7}
 800638a:	b085      	sub	sp, #20
 800638c:	af00      	add	r7, sp, #0
 800638e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8006390:	4b28      	ldr	r3, [pc, #160]	; (8006434 <prvInsertBlockIntoFreeList+0xac>)
 8006392:	60fb      	str	r3, [r7, #12]
 8006394:	e002      	b.n	800639c <prvInsertBlockIntoFreeList+0x14>
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	60fb      	str	r3, [r7, #12]
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	681b      	ldr	r3, [r3, #0]
 80063a0:	687a      	ldr	r2, [r7, #4]
 80063a2:	429a      	cmp	r2, r3
 80063a4:	d8f7      	bhi.n	8006396 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80063aa:	68fb      	ldr	r3, [r7, #12]
 80063ac:	685b      	ldr	r3, [r3, #4]
 80063ae:	68ba      	ldr	r2, [r7, #8]
 80063b0:	4413      	add	r3, r2
 80063b2:	687a      	ldr	r2, [r7, #4]
 80063b4:	429a      	cmp	r2, r3
 80063b6:	d108      	bne.n	80063ca <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80063b8:	68fb      	ldr	r3, [r7, #12]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	685b      	ldr	r3, [r3, #4]
 80063c0:	441a      	add	r2, r3
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	685b      	ldr	r3, [r3, #4]
 80063d2:	68ba      	ldr	r2, [r7, #8]
 80063d4:	441a      	add	r2, r3
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	429a      	cmp	r2, r3
 80063dc:	d118      	bne.n	8006410 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681a      	ldr	r2, [r3, #0]
 80063e2:	4b15      	ldr	r3, [pc, #84]	; (8006438 <prvInsertBlockIntoFreeList+0xb0>)
 80063e4:	681b      	ldr	r3, [r3, #0]
 80063e6:	429a      	cmp	r2, r3
 80063e8:	d00d      	beq.n	8006406 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685a      	ldr	r2, [r3, #4]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	685b      	ldr	r3, [r3, #4]
 80063f4:	441a      	add	r2, r3
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	681a      	ldr	r2, [r3, #0]
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	601a      	str	r2, [r3, #0]
 8006404:	e008      	b.n	8006418 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8006406:	4b0c      	ldr	r3, [pc, #48]	; (8006438 <prvInsertBlockIntoFreeList+0xb0>)
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	601a      	str	r2, [r3, #0]
 800640e:	e003      	b.n	8006418 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	681a      	ldr	r2, [r3, #0]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8006418:	68fa      	ldr	r2, [r7, #12]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	429a      	cmp	r2, r3
 800641e:	d002      	beq.n	8006426 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006426:	bf00      	nop
 8006428:	3714      	adds	r7, #20
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr
 8006432:	bf00      	nop
 8006434:	20001b18 	.word	0x20001b18
 8006438:	20001b20 	.word	0x20001b20

0800643c <__libc_init_array>:
 800643c:	b570      	push	{r4, r5, r6, lr}
 800643e:	4d0d      	ldr	r5, [pc, #52]	; (8006474 <__libc_init_array+0x38>)
 8006440:	4c0d      	ldr	r4, [pc, #52]	; (8006478 <__libc_init_array+0x3c>)
 8006442:	1b64      	subs	r4, r4, r5
 8006444:	10a4      	asrs	r4, r4, #2
 8006446:	2600      	movs	r6, #0
 8006448:	42a6      	cmp	r6, r4
 800644a:	d109      	bne.n	8006460 <__libc_init_array+0x24>
 800644c:	4d0b      	ldr	r5, [pc, #44]	; (800647c <__libc_init_array+0x40>)
 800644e:	4c0c      	ldr	r4, [pc, #48]	; (8006480 <__libc_init_array+0x44>)
 8006450:	f000 f8f2 	bl	8006638 <_init>
 8006454:	1b64      	subs	r4, r4, r5
 8006456:	10a4      	asrs	r4, r4, #2
 8006458:	2600      	movs	r6, #0
 800645a:	42a6      	cmp	r6, r4
 800645c:	d105      	bne.n	800646a <__libc_init_array+0x2e>
 800645e:	bd70      	pop	{r4, r5, r6, pc}
 8006460:	f855 3b04 	ldr.w	r3, [r5], #4
 8006464:	4798      	blx	r3
 8006466:	3601      	adds	r6, #1
 8006468:	e7ee      	b.n	8006448 <__libc_init_array+0xc>
 800646a:	f855 3b04 	ldr.w	r3, [r5], #4
 800646e:	4798      	blx	r3
 8006470:	3601      	adds	r6, #1
 8006472:	e7f2      	b.n	800645a <__libc_init_array+0x1e>
 8006474:	080067b4 	.word	0x080067b4
 8006478:	080067b4 	.word	0x080067b4
 800647c:	080067b4 	.word	0x080067b4
 8006480:	080067b8 	.word	0x080067b8

08006484 <__retarget_lock_acquire_recursive>:
 8006484:	4770      	bx	lr

08006486 <__retarget_lock_release_recursive>:
 8006486:	4770      	bx	lr

08006488 <memcpy>:
 8006488:	440a      	add	r2, r1
 800648a:	4291      	cmp	r1, r2
 800648c:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8006490:	d100      	bne.n	8006494 <memcpy+0xc>
 8006492:	4770      	bx	lr
 8006494:	b510      	push	{r4, lr}
 8006496:	f811 4b01 	ldrb.w	r4, [r1], #1
 800649a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800649e:	4291      	cmp	r1, r2
 80064a0:	d1f9      	bne.n	8006496 <memcpy+0xe>
 80064a2:	bd10      	pop	{r4, pc}

080064a4 <memset>:
 80064a4:	4402      	add	r2, r0
 80064a6:	4603      	mov	r3, r0
 80064a8:	4293      	cmp	r3, r2
 80064aa:	d100      	bne.n	80064ae <memset+0xa>
 80064ac:	4770      	bx	lr
 80064ae:	f803 1b01 	strb.w	r1, [r3], #1
 80064b2:	e7f9      	b.n	80064a8 <memset+0x4>

080064b4 <cleanup_glue>:
 80064b4:	b538      	push	{r3, r4, r5, lr}
 80064b6:	460c      	mov	r4, r1
 80064b8:	6809      	ldr	r1, [r1, #0]
 80064ba:	4605      	mov	r5, r0
 80064bc:	b109      	cbz	r1, 80064c2 <cleanup_glue+0xe>
 80064be:	f7ff fff9 	bl	80064b4 <cleanup_glue>
 80064c2:	4621      	mov	r1, r4
 80064c4:	4628      	mov	r0, r5
 80064c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80064ca:	f000 b869 	b.w	80065a0 <_free_r>
	...

080064d0 <_reclaim_reent>:
 80064d0:	4b2c      	ldr	r3, [pc, #176]	; (8006584 <_reclaim_reent+0xb4>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4283      	cmp	r3, r0
 80064d6:	b570      	push	{r4, r5, r6, lr}
 80064d8:	4604      	mov	r4, r0
 80064da:	d051      	beq.n	8006580 <_reclaim_reent+0xb0>
 80064dc:	6a43      	ldr	r3, [r0, #36]	; 0x24
 80064de:	b143      	cbz	r3, 80064f2 <_reclaim_reent+0x22>
 80064e0:	68db      	ldr	r3, [r3, #12]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d14a      	bne.n	800657c <_reclaim_reent+0xac>
 80064e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80064e8:	6819      	ldr	r1, [r3, #0]
 80064ea:	b111      	cbz	r1, 80064f2 <_reclaim_reent+0x22>
 80064ec:	4620      	mov	r0, r4
 80064ee:	f000 f857 	bl	80065a0 <_free_r>
 80064f2:	6961      	ldr	r1, [r4, #20]
 80064f4:	b111      	cbz	r1, 80064fc <_reclaim_reent+0x2c>
 80064f6:	4620      	mov	r0, r4
 80064f8:	f000 f852 	bl	80065a0 <_free_r>
 80064fc:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80064fe:	b111      	cbz	r1, 8006506 <_reclaim_reent+0x36>
 8006500:	4620      	mov	r0, r4
 8006502:	f000 f84d 	bl	80065a0 <_free_r>
 8006506:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006508:	b111      	cbz	r1, 8006510 <_reclaim_reent+0x40>
 800650a:	4620      	mov	r0, r4
 800650c:	f000 f848 	bl	80065a0 <_free_r>
 8006510:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8006512:	b111      	cbz	r1, 800651a <_reclaim_reent+0x4a>
 8006514:	4620      	mov	r0, r4
 8006516:	f000 f843 	bl	80065a0 <_free_r>
 800651a:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800651c:	b111      	cbz	r1, 8006524 <_reclaim_reent+0x54>
 800651e:	4620      	mov	r0, r4
 8006520:	f000 f83e 	bl	80065a0 <_free_r>
 8006524:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 8006526:	b111      	cbz	r1, 800652e <_reclaim_reent+0x5e>
 8006528:	4620      	mov	r0, r4
 800652a:	f000 f839 	bl	80065a0 <_free_r>
 800652e:	6da1      	ldr	r1, [r4, #88]	; 0x58
 8006530:	b111      	cbz	r1, 8006538 <_reclaim_reent+0x68>
 8006532:	4620      	mov	r0, r4
 8006534:	f000 f834 	bl	80065a0 <_free_r>
 8006538:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800653a:	b111      	cbz	r1, 8006542 <_reclaim_reent+0x72>
 800653c:	4620      	mov	r0, r4
 800653e:	f000 f82f 	bl	80065a0 <_free_r>
 8006542:	69a3      	ldr	r3, [r4, #24]
 8006544:	b1e3      	cbz	r3, 8006580 <_reclaim_reent+0xb0>
 8006546:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8006548:	4620      	mov	r0, r4
 800654a:	4798      	blx	r3
 800654c:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800654e:	b1b9      	cbz	r1, 8006580 <_reclaim_reent+0xb0>
 8006550:	4620      	mov	r0, r4
 8006552:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8006556:	f7ff bfad 	b.w	80064b4 <cleanup_glue>
 800655a:	5949      	ldr	r1, [r1, r5]
 800655c:	b941      	cbnz	r1, 8006570 <_reclaim_reent+0xa0>
 800655e:	3504      	adds	r5, #4
 8006560:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006562:	2d80      	cmp	r5, #128	; 0x80
 8006564:	68d9      	ldr	r1, [r3, #12]
 8006566:	d1f8      	bne.n	800655a <_reclaim_reent+0x8a>
 8006568:	4620      	mov	r0, r4
 800656a:	f000 f819 	bl	80065a0 <_free_r>
 800656e:	e7ba      	b.n	80064e6 <_reclaim_reent+0x16>
 8006570:	680e      	ldr	r6, [r1, #0]
 8006572:	4620      	mov	r0, r4
 8006574:	f000 f814 	bl	80065a0 <_free_r>
 8006578:	4631      	mov	r1, r6
 800657a:	e7ef      	b.n	800655c <_reclaim_reent+0x8c>
 800657c:	2500      	movs	r5, #0
 800657e:	e7ef      	b.n	8006560 <_reclaim_reent+0x90>
 8006580:	bd70      	pop	{r4, r5, r6, pc}
 8006582:	bf00      	nop
 8006584:	20000010 	.word	0x20000010

08006588 <__malloc_lock>:
 8006588:	4801      	ldr	r0, [pc, #4]	; (8006590 <__malloc_lock+0x8>)
 800658a:	f7ff bf7b 	b.w	8006484 <__retarget_lock_acquire_recursive>
 800658e:	bf00      	nop
 8006590:	20001b38 	.word	0x20001b38

08006594 <__malloc_unlock>:
 8006594:	4801      	ldr	r0, [pc, #4]	; (800659c <__malloc_unlock+0x8>)
 8006596:	f7ff bf76 	b.w	8006486 <__retarget_lock_release_recursive>
 800659a:	bf00      	nop
 800659c:	20001b38 	.word	0x20001b38

080065a0 <_free_r>:
 80065a0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80065a2:	2900      	cmp	r1, #0
 80065a4:	d044      	beq.n	8006630 <_free_r+0x90>
 80065a6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80065aa:	9001      	str	r0, [sp, #4]
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	f1a1 0404 	sub.w	r4, r1, #4
 80065b2:	bfb8      	it	lt
 80065b4:	18e4      	addlt	r4, r4, r3
 80065b6:	f7ff ffe7 	bl	8006588 <__malloc_lock>
 80065ba:	4a1e      	ldr	r2, [pc, #120]	; (8006634 <_free_r+0x94>)
 80065bc:	9801      	ldr	r0, [sp, #4]
 80065be:	6813      	ldr	r3, [r2, #0]
 80065c0:	b933      	cbnz	r3, 80065d0 <_free_r+0x30>
 80065c2:	6063      	str	r3, [r4, #4]
 80065c4:	6014      	str	r4, [r2, #0]
 80065c6:	b003      	add	sp, #12
 80065c8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80065cc:	f7ff bfe2 	b.w	8006594 <__malloc_unlock>
 80065d0:	42a3      	cmp	r3, r4
 80065d2:	d908      	bls.n	80065e6 <_free_r+0x46>
 80065d4:	6825      	ldr	r5, [r4, #0]
 80065d6:	1961      	adds	r1, r4, r5
 80065d8:	428b      	cmp	r3, r1
 80065da:	bf01      	itttt	eq
 80065dc:	6819      	ldreq	r1, [r3, #0]
 80065de:	685b      	ldreq	r3, [r3, #4]
 80065e0:	1949      	addeq	r1, r1, r5
 80065e2:	6021      	streq	r1, [r4, #0]
 80065e4:	e7ed      	b.n	80065c2 <_free_r+0x22>
 80065e6:	461a      	mov	r2, r3
 80065e8:	685b      	ldr	r3, [r3, #4]
 80065ea:	b10b      	cbz	r3, 80065f0 <_free_r+0x50>
 80065ec:	42a3      	cmp	r3, r4
 80065ee:	d9fa      	bls.n	80065e6 <_free_r+0x46>
 80065f0:	6811      	ldr	r1, [r2, #0]
 80065f2:	1855      	adds	r5, r2, r1
 80065f4:	42a5      	cmp	r5, r4
 80065f6:	d10b      	bne.n	8006610 <_free_r+0x70>
 80065f8:	6824      	ldr	r4, [r4, #0]
 80065fa:	4421      	add	r1, r4
 80065fc:	1854      	adds	r4, r2, r1
 80065fe:	42a3      	cmp	r3, r4
 8006600:	6011      	str	r1, [r2, #0]
 8006602:	d1e0      	bne.n	80065c6 <_free_r+0x26>
 8006604:	681c      	ldr	r4, [r3, #0]
 8006606:	685b      	ldr	r3, [r3, #4]
 8006608:	6053      	str	r3, [r2, #4]
 800660a:	4421      	add	r1, r4
 800660c:	6011      	str	r1, [r2, #0]
 800660e:	e7da      	b.n	80065c6 <_free_r+0x26>
 8006610:	d902      	bls.n	8006618 <_free_r+0x78>
 8006612:	230c      	movs	r3, #12
 8006614:	6003      	str	r3, [r0, #0]
 8006616:	e7d6      	b.n	80065c6 <_free_r+0x26>
 8006618:	6825      	ldr	r5, [r4, #0]
 800661a:	1961      	adds	r1, r4, r5
 800661c:	428b      	cmp	r3, r1
 800661e:	bf04      	itt	eq
 8006620:	6819      	ldreq	r1, [r3, #0]
 8006622:	685b      	ldreq	r3, [r3, #4]
 8006624:	6063      	str	r3, [r4, #4]
 8006626:	bf04      	itt	eq
 8006628:	1949      	addeq	r1, r1, r5
 800662a:	6021      	streq	r1, [r4, #0]
 800662c:	6054      	str	r4, [r2, #4]
 800662e:	e7ca      	b.n	80065c6 <_free_r+0x26>
 8006630:	b003      	add	sp, #12
 8006632:	bd30      	pop	{r4, r5, pc}
 8006634:	20001b3c 	.word	0x20001b3c

08006638 <_init>:
 8006638:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800663a:	bf00      	nop
 800663c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800663e:	bc08      	pop	{r3}
 8006640:	469e      	mov	lr, r3
 8006642:	4770      	bx	lr

08006644 <_fini>:
 8006644:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006646:	bf00      	nop
 8006648:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800664a:	bc08      	pop	{r3}
 800664c:	469e      	mov	lr, r3
 800664e:	4770      	bx	lr
